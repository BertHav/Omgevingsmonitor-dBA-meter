
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e10c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a68  0801e1d0  0801e1d0  0001f1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc38  0801fc38  000213cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc38  0801fc38  00020c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc40  0801fc40  000213cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc40  0801fc40  00020c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fc44  0801fc44  00020c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003cc  20000000  0801fc48  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003480  200003cc  08020014  000213cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000384c  08020014  0002184c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000213cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003155a  00000000  00000000  000213f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008f2c  00000000  00000000  0005294e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a0  00000000  00000000  0005b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d27  00000000  00000000  0005e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022333  00000000  00000000  0005fd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f09d  00000000  00000000  0008207a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f1e0  00000000  00000000  000c1117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001602f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a02c  00000000  00000000  001603a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0016a441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016c9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003cc 	.word	0x200003cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801e1b4 	.word	0x0801e1b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003d0 	.word	0x200003d0
 8000104:	0801e1b4 	.word	0x0801e1b4

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strlen>:
 8000158:	2300      	movs	r3, #0
 800015a:	5cc2      	ldrb	r2, [r0, r3]
 800015c:	3301      	adds	r3, #1
 800015e:	2a00      	cmp	r2, #0
 8000160:	d1fb      	bne.n	800015a <strlen+0x2>
 8000162:	1e58      	subs	r0, r3, #1
 8000164:	4770      	bx	lr
	...

08000168 <__gnu_thumb1_case_uqi>:
 8000168:	b402      	push	{r1}
 800016a:	4671      	mov	r1, lr
 800016c:	0849      	lsrs	r1, r1, #1
 800016e:	0049      	lsls	r1, r1, #1
 8000170:	5c09      	ldrb	r1, [r1, r0]
 8000172:	0049      	lsls	r1, r1, #1
 8000174:	448e      	add	lr, r1
 8000176:	bc02      	pop	{r1}
 8000178:	4770      	bx	lr
 800017a:	46c0      	nop			@ (mov r8, r8)

0800017c <__gnu_thumb1_case_shi>:
 800017c:	b403      	push	{r0, r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0040      	lsls	r0, r0, #1
 8000184:	0049      	lsls	r1, r1, #1
 8000186:	5e09      	ldrsh	r1, [r1, r0]
 8000188:	0049      	lsls	r1, r1, #1
 800018a:	448e      	add	lr, r1
 800018c:	bc03      	pop	{r0, r1}
 800018e:	4770      	bx	lr

08000190 <__udivsi3>:
 8000190:	2200      	movs	r2, #0
 8000192:	0843      	lsrs	r3, r0, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d374      	bcc.n	8000282 <__udivsi3+0xf2>
 8000198:	0903      	lsrs	r3, r0, #4
 800019a:	428b      	cmp	r3, r1
 800019c:	d35f      	bcc.n	800025e <__udivsi3+0xce>
 800019e:	0a03      	lsrs	r3, r0, #8
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d344      	bcc.n	800022e <__udivsi3+0x9e>
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d328      	bcc.n	80001fc <__udivsi3+0x6c>
 80001aa:	0c03      	lsrs	r3, r0, #16
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d30d      	bcc.n	80001cc <__udivsi3+0x3c>
 80001b0:	22ff      	movs	r2, #255	@ 0xff
 80001b2:	0209      	lsls	r1, r1, #8
 80001b4:	ba12      	rev	r2, r2
 80001b6:	0c03      	lsrs	r3, r0, #16
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d302      	bcc.n	80001c2 <__udivsi3+0x32>
 80001bc:	1212      	asrs	r2, r2, #8
 80001be:	0209      	lsls	r1, r1, #8
 80001c0:	d065      	beq.n	800028e <__udivsi3+0xfe>
 80001c2:	0b03      	lsrs	r3, r0, #12
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d319      	bcc.n	80001fc <__udivsi3+0x6c>
 80001c8:	e000      	b.n	80001cc <__udivsi3+0x3c>
 80001ca:	0a09      	lsrs	r1, r1, #8
 80001cc:	0bc3      	lsrs	r3, r0, #15
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x46>
 80001d2:	03cb      	lsls	r3, r1, #15
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0b83      	lsrs	r3, r0, #14
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x52>
 80001de:	038b      	lsls	r3, r1, #14
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0b43      	lsrs	r3, r0, #13
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x5e>
 80001ea:	034b      	lsls	r3, r1, #13
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0b03      	lsrs	r3, r0, #12
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x6a>
 80001f6:	030b      	lsls	r3, r1, #12
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0ac3      	lsrs	r3, r0, #11
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x76>
 8000202:	02cb      	lsls	r3, r1, #11
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0a83      	lsrs	r3, r0, #10
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x82>
 800020e:	028b      	lsls	r3, r1, #10
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0a43      	lsrs	r3, r0, #9
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x8e>
 800021a:	024b      	lsls	r3, r1, #9
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0a03      	lsrs	r3, r0, #8
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x9a>
 8000226:	020b      	lsls	r3, r1, #8
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	d2cd      	bcs.n	80001ca <__udivsi3+0x3a>
 800022e:	09c3      	lsrs	r3, r0, #7
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xa8>
 8000234:	01cb      	lsls	r3, r1, #7
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0983      	lsrs	r3, r0, #6
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xb4>
 8000240:	018b      	lsls	r3, r1, #6
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0943      	lsrs	r3, r0, #5
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xc0>
 800024c:	014b      	lsls	r3, r1, #5
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xcc>
 8000258:	010b      	lsls	r3, r1, #4
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	08c3      	lsrs	r3, r0, #3
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xd8>
 8000264:	00cb      	lsls	r3, r1, #3
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0883      	lsrs	r3, r0, #2
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xe4>
 8000270:	008b      	lsls	r3, r1, #2
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0843      	lsrs	r3, r0, #1
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xf0>
 800027c:	004b      	lsls	r3, r1, #1
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	1a41      	subs	r1, r0, r1
 8000284:	d200      	bcs.n	8000288 <__udivsi3+0xf8>
 8000286:	4601      	mov	r1, r0
 8000288:	4152      	adcs	r2, r2
 800028a:	4610      	mov	r0, r2
 800028c:	4770      	bx	lr
 800028e:	e7ff      	b.n	8000290 <__udivsi3+0x100>
 8000290:	b501      	push	{r0, lr}
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f8f0 	bl	8000478 <__aeabi_idiv0>
 8000298:	bd02      	pop	{r1, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_uidivmod>:
 800029c:	2900      	cmp	r1, #0
 800029e:	d0f7      	beq.n	8000290 <__udivsi3+0x100>
 80002a0:	e776      	b.n	8000190 <__udivsi3>
 80002a2:	4770      	bx	lr

080002a4 <__divsi3>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	430b      	orrs	r3, r1
 80002a8:	d47f      	bmi.n	80003aa <__divsi3+0x106>
 80002aa:	2200      	movs	r2, #0
 80002ac:	0843      	lsrs	r3, r0, #1
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d374      	bcc.n	800039c <__divsi3+0xf8>
 80002b2:	0903      	lsrs	r3, r0, #4
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d35f      	bcc.n	8000378 <__divsi3+0xd4>
 80002b8:	0a03      	lsrs	r3, r0, #8
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d344      	bcc.n	8000348 <__divsi3+0xa4>
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d328      	bcc.n	8000316 <__divsi3+0x72>
 80002c4:	0c03      	lsrs	r3, r0, #16
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d30d      	bcc.n	80002e6 <__divsi3+0x42>
 80002ca:	22ff      	movs	r2, #255	@ 0xff
 80002cc:	0209      	lsls	r1, r1, #8
 80002ce:	ba12      	rev	r2, r2
 80002d0:	0c03      	lsrs	r3, r0, #16
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__divsi3+0x38>
 80002d6:	1212      	asrs	r2, r2, #8
 80002d8:	0209      	lsls	r1, r1, #8
 80002da:	d065      	beq.n	80003a8 <__divsi3+0x104>
 80002dc:	0b03      	lsrs	r3, r0, #12
 80002de:	428b      	cmp	r3, r1
 80002e0:	d319      	bcc.n	8000316 <__divsi3+0x72>
 80002e2:	e000      	b.n	80002e6 <__divsi3+0x42>
 80002e4:	0a09      	lsrs	r1, r1, #8
 80002e6:	0bc3      	lsrs	r3, r0, #15
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x4c>
 80002ec:	03cb      	lsls	r3, r1, #15
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0b83      	lsrs	r3, r0, #14
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x58>
 80002f8:	038b      	lsls	r3, r1, #14
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0b43      	lsrs	r3, r0, #13
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x64>
 8000304:	034b      	lsls	r3, r1, #13
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0b03      	lsrs	r3, r0, #12
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0x70>
 8000310:	030b      	lsls	r3, r1, #12
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	0ac3      	lsrs	r3, r0, #11
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__divsi3+0x7c>
 800031c:	02cb      	lsls	r3, r1, #11
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0a83      	lsrs	r3, r0, #10
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__divsi3+0x88>
 8000328:	028b      	lsls	r3, r1, #10
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	0a43      	lsrs	r3, r0, #9
 8000330:	428b      	cmp	r3, r1
 8000332:	d301      	bcc.n	8000338 <__divsi3+0x94>
 8000334:	024b      	lsls	r3, r1, #9
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4152      	adcs	r2, r2
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d301      	bcc.n	8000344 <__divsi3+0xa0>
 8000340:	020b      	lsls	r3, r1, #8
 8000342:	1ac0      	subs	r0, r0, r3
 8000344:	4152      	adcs	r2, r2
 8000346:	d2cd      	bcs.n	80002e4 <__divsi3+0x40>
 8000348:	09c3      	lsrs	r3, r0, #7
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xae>
 800034e:	01cb      	lsls	r3, r1, #7
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0983      	lsrs	r3, r0, #6
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xba>
 800035a:	018b      	lsls	r3, r1, #6
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0943      	lsrs	r3, r0, #5
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xc6>
 8000366:	014b      	lsls	r3, r1, #5
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d301      	bcc.n	8000376 <__divsi3+0xd2>
 8000372:	010b      	lsls	r3, r1, #4
 8000374:	1ac0      	subs	r0, r0, r3
 8000376:	4152      	adcs	r2, r2
 8000378:	08c3      	lsrs	r3, r0, #3
 800037a:	428b      	cmp	r3, r1
 800037c:	d301      	bcc.n	8000382 <__divsi3+0xde>
 800037e:	00cb      	lsls	r3, r1, #3
 8000380:	1ac0      	subs	r0, r0, r3
 8000382:	4152      	adcs	r2, r2
 8000384:	0883      	lsrs	r3, r0, #2
 8000386:	428b      	cmp	r3, r1
 8000388:	d301      	bcc.n	800038e <__divsi3+0xea>
 800038a:	008b      	lsls	r3, r1, #2
 800038c:	1ac0      	subs	r0, r0, r3
 800038e:	4152      	adcs	r2, r2
 8000390:	0843      	lsrs	r3, r0, #1
 8000392:	428b      	cmp	r3, r1
 8000394:	d301      	bcc.n	800039a <__divsi3+0xf6>
 8000396:	004b      	lsls	r3, r1, #1
 8000398:	1ac0      	subs	r0, r0, r3
 800039a:	4152      	adcs	r2, r2
 800039c:	1a41      	subs	r1, r0, r1
 800039e:	d200      	bcs.n	80003a2 <__divsi3+0xfe>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4152      	adcs	r2, r2
 80003a4:	4610      	mov	r0, r2
 80003a6:	4770      	bx	lr
 80003a8:	e05d      	b.n	8000466 <__divsi3+0x1c2>
 80003aa:	0fca      	lsrs	r2, r1, #31
 80003ac:	d000      	beq.n	80003b0 <__divsi3+0x10c>
 80003ae:	4249      	negs	r1, r1
 80003b0:	1003      	asrs	r3, r0, #32
 80003b2:	d300      	bcc.n	80003b6 <__divsi3+0x112>
 80003b4:	4240      	negs	r0, r0
 80003b6:	4053      	eors	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	469c      	mov	ip, r3
 80003bc:	0903      	lsrs	r3, r0, #4
 80003be:	428b      	cmp	r3, r1
 80003c0:	d32d      	bcc.n	800041e <__divsi3+0x17a>
 80003c2:	0a03      	lsrs	r3, r0, #8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d312      	bcc.n	80003ee <__divsi3+0x14a>
 80003c8:	22fc      	movs	r2, #252	@ 0xfc
 80003ca:	0189      	lsls	r1, r1, #6
 80003cc:	ba12      	rev	r2, r2
 80003ce:	0a03      	lsrs	r3, r0, #8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d30c      	bcc.n	80003ee <__divsi3+0x14a>
 80003d4:	0189      	lsls	r1, r1, #6
 80003d6:	1192      	asrs	r2, r2, #6
 80003d8:	428b      	cmp	r3, r1
 80003da:	d308      	bcc.n	80003ee <__divsi3+0x14a>
 80003dc:	0189      	lsls	r1, r1, #6
 80003de:	1192      	asrs	r2, r2, #6
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d304      	bcc.n	80003ee <__divsi3+0x14a>
 80003e4:	0189      	lsls	r1, r1, #6
 80003e6:	d03a      	beq.n	800045e <__divsi3+0x1ba>
 80003e8:	1192      	asrs	r2, r2, #6
 80003ea:	e000      	b.n	80003ee <__divsi3+0x14a>
 80003ec:	0989      	lsrs	r1, r1, #6
 80003ee:	09c3      	lsrs	r3, r0, #7
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x154>
 80003f4:	01cb      	lsls	r3, r1, #7
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0983      	lsrs	r3, r0, #6
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x160>
 8000400:	018b      	lsls	r3, r1, #6
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	0943      	lsrs	r3, r0, #5
 8000408:	428b      	cmp	r3, r1
 800040a:	d301      	bcc.n	8000410 <__divsi3+0x16c>
 800040c:	014b      	lsls	r3, r1, #5
 800040e:	1ac0      	subs	r0, r0, r3
 8000410:	4152      	adcs	r2, r2
 8000412:	0903      	lsrs	r3, r0, #4
 8000414:	428b      	cmp	r3, r1
 8000416:	d301      	bcc.n	800041c <__divsi3+0x178>
 8000418:	010b      	lsls	r3, r1, #4
 800041a:	1ac0      	subs	r0, r0, r3
 800041c:	4152      	adcs	r2, r2
 800041e:	08c3      	lsrs	r3, r0, #3
 8000420:	428b      	cmp	r3, r1
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x184>
 8000424:	00cb      	lsls	r3, r1, #3
 8000426:	1ac0      	subs	r0, r0, r3
 8000428:	4152      	adcs	r2, r2
 800042a:	0883      	lsrs	r3, r0, #2
 800042c:	428b      	cmp	r3, r1
 800042e:	d301      	bcc.n	8000434 <__divsi3+0x190>
 8000430:	008b      	lsls	r3, r1, #2
 8000432:	1ac0      	subs	r0, r0, r3
 8000434:	4152      	adcs	r2, r2
 8000436:	d2d9      	bcs.n	80003ec <__divsi3+0x148>
 8000438:	0843      	lsrs	r3, r0, #1
 800043a:	428b      	cmp	r3, r1
 800043c:	d301      	bcc.n	8000442 <__divsi3+0x19e>
 800043e:	004b      	lsls	r3, r1, #1
 8000440:	1ac0      	subs	r0, r0, r3
 8000442:	4152      	adcs	r2, r2
 8000444:	1a41      	subs	r1, r0, r1
 8000446:	d200      	bcs.n	800044a <__divsi3+0x1a6>
 8000448:	4601      	mov	r1, r0
 800044a:	4663      	mov	r3, ip
 800044c:	4152      	adcs	r2, r2
 800044e:	105b      	asrs	r3, r3, #1
 8000450:	4610      	mov	r0, r2
 8000452:	d301      	bcc.n	8000458 <__divsi3+0x1b4>
 8000454:	4240      	negs	r0, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d500      	bpl.n	800045c <__divsi3+0x1b8>
 800045a:	4249      	negs	r1, r1
 800045c:	4770      	bx	lr
 800045e:	4663      	mov	r3, ip
 8000460:	105b      	asrs	r3, r3, #1
 8000462:	d300      	bcc.n	8000466 <__divsi3+0x1c2>
 8000464:	4240      	negs	r0, r0
 8000466:	b501      	push	{r0, lr}
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f805 	bl	8000478 <__aeabi_idiv0>
 800046e:	bd02      	pop	{r1, pc}

08000470 <__aeabi_idivmod>:
 8000470:	2900      	cmp	r1, #0
 8000472:	d0f8      	beq.n	8000466 <__divsi3+0x1c2>
 8000474:	e716      	b.n	80002a4 <__divsi3>
 8000476:	4770      	bx	lr

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_cdrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	0010      	movs	r0, r2
 8000480:	4662      	mov	r2, ip
 8000482:	468c      	mov	ip, r1
 8000484:	0019      	movs	r1, r3
 8000486:	4663      	mov	r3, ip
 8000488:	e000      	b.n	800048c <__aeabi_cdcmpeq>
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_cdcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f002 f859 	bl	8002544 <__ledf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cdcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_dcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f001 ff99 	bl	80023d4 <__eqdf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_dcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f84b 	bl	8002544 <__ledf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_dcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f841 	bl	8002544 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_dcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f001 ffc3 	bl	800245c <__gedf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_dcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffb9 	bl	800245c <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_dcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_cfrcmple>:
 80004f8:	4684      	mov	ip, r0
 80004fa:	0008      	movs	r0, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	e7ff      	b.n	8000500 <__aeabi_cfcmpeq>

08000500 <__aeabi_cfcmpeq>:
 8000500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000502:	f000 fcf5 	bl	8000ef0 <__lesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	d401      	bmi.n	800050e <__aeabi_cfcmpeq+0xe>
 800050a:	2100      	movs	r1, #0
 800050c:	42c8      	cmn	r0, r1
 800050e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000510 <__aeabi_fcmpeq>:
 8000510:	b510      	push	{r4, lr}
 8000512:	f000 fc75 	bl	8000e00 <__eqsf2>
 8000516:	4240      	negs	r0, r0
 8000518:	3001      	adds	r0, #1
 800051a:	bd10      	pop	{r4, pc}

0800051c <__aeabi_fcmplt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fce7 	bl	8000ef0 <__lesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	db01      	blt.n	800052a <__aeabi_fcmplt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmple>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fcdd 	bl	8000ef0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	dd01      	ble.n	800053e <__aeabi_fcmple+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmpgt>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fc83 	bl	8000e50 <__gesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dc01      	bgt.n	8000552 <__aeabi_fcmpgt+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpge>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc79 	bl	8000e50 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	da01      	bge.n	8000566 <__aeabi_fcmpge+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_uldivmod>:
 800056c:	2b00      	cmp	r3, #0
 800056e:	d111      	bne.n	8000594 <__aeabi_uldivmod+0x28>
 8000570:	2a00      	cmp	r2, #0
 8000572:	d10f      	bne.n	8000594 <__aeabi_uldivmod+0x28>
 8000574:	2900      	cmp	r1, #0
 8000576:	d100      	bne.n	800057a <__aeabi_uldivmod+0xe>
 8000578:	2800      	cmp	r0, #0
 800057a:	d002      	beq.n	8000582 <__aeabi_uldivmod+0x16>
 800057c:	2100      	movs	r1, #0
 800057e:	43c9      	mvns	r1, r1
 8000580:	0008      	movs	r0, r1
 8000582:	b407      	push	{r0, r1, r2}
 8000584:	4802      	ldr	r0, [pc, #8]	@ (8000590 <__aeabi_uldivmod+0x24>)
 8000586:	a102      	add	r1, pc, #8	@ (adr r1, 8000590 <__aeabi_uldivmod+0x24>)
 8000588:	1840      	adds	r0, r0, r1
 800058a:	9002      	str	r0, [sp, #8]
 800058c:	bd03      	pop	{r0, r1, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	fffffee9 	.word	0xfffffee9
 8000594:	b403      	push	{r0, r1}
 8000596:	4668      	mov	r0, sp
 8000598:	b501      	push	{r0, lr}
 800059a:	9802      	ldr	r0, [sp, #8]
 800059c:	f000 f8ba 	bl	8000714 <__udivmoddi4>
 80005a0:	9b01      	ldr	r3, [sp, #4]
 80005a2:	469e      	mov	lr, r3
 80005a4:	b002      	add	sp, #8
 80005a6:	bc0c      	pop	{r2, r3}
 80005a8:	4770      	bx	lr
 80005aa:	46c0      	nop			@ (mov r8, r8)

080005ac <__aeabi_lmul>:
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	46ce      	mov	lr, r9
 80005b0:	4699      	mov	r9, r3
 80005b2:	0c03      	lsrs	r3, r0, #16
 80005b4:	469c      	mov	ip, r3
 80005b6:	0413      	lsls	r3, r2, #16
 80005b8:	4647      	mov	r7, r8
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	001d      	movs	r5, r3
 80005be:	000e      	movs	r6, r1
 80005c0:	4661      	mov	r1, ip
 80005c2:	0404      	lsls	r4, r0, #16
 80005c4:	0c24      	lsrs	r4, r4, #16
 80005c6:	b580      	push	{r7, lr}
 80005c8:	0007      	movs	r7, r0
 80005ca:	0c10      	lsrs	r0, r2, #16
 80005cc:	434b      	muls	r3, r1
 80005ce:	4365      	muls	r5, r4
 80005d0:	4341      	muls	r1, r0
 80005d2:	4360      	muls	r0, r4
 80005d4:	0c2c      	lsrs	r4, r5, #16
 80005d6:	18c0      	adds	r0, r0, r3
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	468c      	mov	ip, r1
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d903      	bls.n	80005e8 <__aeabi_lmul+0x3c>
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	025b      	lsls	r3, r3, #9
 80005e4:	4698      	mov	r8, r3
 80005e6:	44c4      	add	ip, r8
 80005e8:	4649      	mov	r1, r9
 80005ea:	4379      	muls	r1, r7
 80005ec:	4356      	muls	r6, r2
 80005ee:	0c23      	lsrs	r3, r4, #16
 80005f0:	042d      	lsls	r5, r5, #16
 80005f2:	0c2d      	lsrs	r5, r5, #16
 80005f4:	1989      	adds	r1, r1, r6
 80005f6:	4463      	add	r3, ip
 80005f8:	0424      	lsls	r4, r4, #16
 80005fa:	1960      	adds	r0, r4, r5
 80005fc:	18c9      	adds	r1, r1, r3
 80005fe:	bcc0      	pop	{r6, r7}
 8000600:	46b9      	mov	r9, r7
 8000602:	46b0      	mov	r8, r6
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__aeabi_f2uiz>:
 8000608:	219e      	movs	r1, #158	@ 0x9e
 800060a:	b510      	push	{r4, lr}
 800060c:	05c9      	lsls	r1, r1, #23
 800060e:	1c04      	adds	r4, r0, #0
 8000610:	f7ff ffa2 	bl	8000558 <__aeabi_fcmpge>
 8000614:	2800      	cmp	r0, #0
 8000616:	d103      	bne.n	8000620 <__aeabi_f2uiz+0x18>
 8000618:	1c20      	adds	r0, r4, #0
 800061a:	f000 ffaf 	bl	800157c <__aeabi_f2iz>
 800061e:	bd10      	pop	{r4, pc}
 8000620:	219e      	movs	r1, #158	@ 0x9e
 8000622:	1c20      	adds	r0, r4, #0
 8000624:	05c9      	lsls	r1, r1, #23
 8000626:	f000 fdef 	bl	8001208 <__aeabi_fsub>
 800062a:	f000 ffa7 	bl	800157c <__aeabi_f2iz>
 800062e:	2380      	movs	r3, #128	@ 0x80
 8000630:	061b      	lsls	r3, r3, #24
 8000632:	469c      	mov	ip, r3
 8000634:	4460      	add	r0, ip
 8000636:	e7f2      	b.n	800061e <__aeabi_f2uiz+0x16>

08000638 <__aeabi_d2uiz>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	2200      	movs	r2, #0
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <__aeabi_d2uiz+0x38>)
 800063e:	0004      	movs	r4, r0
 8000640:	000d      	movs	r5, r1
 8000642:	f7ff ff4f 	bl	80004e4 <__aeabi_dcmpge>
 8000646:	2800      	cmp	r0, #0
 8000648:	d104      	bne.n	8000654 <__aeabi_d2uiz+0x1c>
 800064a:	0020      	movs	r0, r4
 800064c:	0029      	movs	r1, r5
 800064e:	f002 fe71 	bl	8003334 <__aeabi_d2iz>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <__aeabi_d2uiz+0x38>)
 8000656:	2200      	movs	r2, #0
 8000658:	0020      	movs	r0, r4
 800065a:	0029      	movs	r1, r5
 800065c:	f002 faac 	bl	8002bb8 <__aeabi_dsub>
 8000660:	f002 fe68 	bl	8003334 <__aeabi_d2iz>
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	061b      	lsls	r3, r3, #24
 8000668:	469c      	mov	ip, r3
 800066a:	4460      	add	r0, ip
 800066c:	e7f1      	b.n	8000652 <__aeabi_d2uiz+0x1a>
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	41e00000 	.word	0x41e00000

08000674 <__aeabi_d2lz>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2200      	movs	r2, #0
 8000678:	2300      	movs	r3, #0
 800067a:	0004      	movs	r4, r0
 800067c:	000d      	movs	r5, r1
 800067e:	f7ff ff13 	bl	80004a8 <__aeabi_dcmplt>
 8000682:	2800      	cmp	r0, #0
 8000684:	d108      	bne.n	8000698 <__aeabi_d2lz+0x24>
 8000686:	0020      	movs	r0, r4
 8000688:	0029      	movs	r1, r5
 800068a:	f000 f80f 	bl	80006ac <__aeabi_d2ulz>
 800068e:	0002      	movs	r2, r0
 8000690:	000b      	movs	r3, r1
 8000692:	0010      	movs	r0, r2
 8000694:	0019      	movs	r1, r3
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	061b      	lsls	r3, r3, #24
 800069c:	18e9      	adds	r1, r5, r3
 800069e:	0020      	movs	r0, r4
 80006a0:	f000 f804 	bl	80006ac <__aeabi_d2ulz>
 80006a4:	2300      	movs	r3, #0
 80006a6:	4242      	negs	r2, r0
 80006a8:	418b      	sbcs	r3, r1
 80006aa:	e7f2      	b.n	8000692 <__aeabi_d2lz+0x1e>

080006ac <__aeabi_d2ulz>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	2200      	movs	r2, #0
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <__aeabi_d2ulz+0x34>)
 80006b2:	000d      	movs	r5, r1
 80006b4:	0004      	movs	r4, r0
 80006b6:	f001 ffb7 	bl	8002628 <__aeabi_dmul>
 80006ba:	f7ff ffbd 	bl	8000638 <__aeabi_d2uiz>
 80006be:	0006      	movs	r6, r0
 80006c0:	f002 fea2 	bl	8003408 <__aeabi_ui2d>
 80006c4:	2200      	movs	r2, #0
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <__aeabi_d2ulz+0x38>)
 80006c8:	f001 ffae 	bl	8002628 <__aeabi_dmul>
 80006cc:	0002      	movs	r2, r0
 80006ce:	000b      	movs	r3, r1
 80006d0:	0020      	movs	r0, r4
 80006d2:	0029      	movs	r1, r5
 80006d4:	f002 fa70 	bl	8002bb8 <__aeabi_dsub>
 80006d8:	f7ff ffae 	bl	8000638 <__aeabi_d2uiz>
 80006dc:	0031      	movs	r1, r6
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	3df00000 	.word	0x3df00000
 80006e4:	41f00000 	.word	0x41f00000

080006e8 <__aeabi_l2d>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	0006      	movs	r6, r0
 80006ec:	0008      	movs	r0, r1
 80006ee:	f002 fe5d 	bl	80033ac <__aeabi_i2d>
 80006f2:	2200      	movs	r2, #0
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <__aeabi_l2d+0x28>)
 80006f6:	f001 ff97 	bl	8002628 <__aeabi_dmul>
 80006fa:	000d      	movs	r5, r1
 80006fc:	0004      	movs	r4, r0
 80006fe:	0030      	movs	r0, r6
 8000700:	f002 fe82 	bl	8003408 <__aeabi_ui2d>
 8000704:	002b      	movs	r3, r5
 8000706:	0022      	movs	r2, r4
 8000708:	f000 ffe6 	bl	80016d8 <__aeabi_dadd>
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	41f00000 	.word	0x41f00000

08000714 <__udivmoddi4>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	4657      	mov	r7, sl
 8000718:	464e      	mov	r6, r9
 800071a:	4645      	mov	r5, r8
 800071c:	46de      	mov	lr, fp
 800071e:	b5e0      	push	{r5, r6, r7, lr}
 8000720:	0004      	movs	r4, r0
 8000722:	000d      	movs	r5, r1
 8000724:	4692      	mov	sl, r2
 8000726:	4699      	mov	r9, r3
 8000728:	b083      	sub	sp, #12
 800072a:	428b      	cmp	r3, r1
 800072c:	d830      	bhi.n	8000790 <__udivmoddi4+0x7c>
 800072e:	d02d      	beq.n	800078c <__udivmoddi4+0x78>
 8000730:	4649      	mov	r1, r9
 8000732:	4650      	mov	r0, sl
 8000734:	f002 ff76 	bl	8003624 <__clzdi2>
 8000738:	0029      	movs	r1, r5
 800073a:	0006      	movs	r6, r0
 800073c:	0020      	movs	r0, r4
 800073e:	f002 ff71 	bl	8003624 <__clzdi2>
 8000742:	1a33      	subs	r3, r6, r0
 8000744:	4698      	mov	r8, r3
 8000746:	3b20      	subs	r3, #32
 8000748:	d434      	bmi.n	80007b4 <__udivmoddi4+0xa0>
 800074a:	469b      	mov	fp, r3
 800074c:	4653      	mov	r3, sl
 800074e:	465a      	mov	r2, fp
 8000750:	4093      	lsls	r3, r2
 8000752:	4642      	mov	r2, r8
 8000754:	001f      	movs	r7, r3
 8000756:	4653      	mov	r3, sl
 8000758:	4093      	lsls	r3, r2
 800075a:	001e      	movs	r6, r3
 800075c:	42af      	cmp	r7, r5
 800075e:	d83b      	bhi.n	80007d8 <__udivmoddi4+0xc4>
 8000760:	42af      	cmp	r7, r5
 8000762:	d100      	bne.n	8000766 <__udivmoddi4+0x52>
 8000764:	e079      	b.n	800085a <__udivmoddi4+0x146>
 8000766:	465b      	mov	r3, fp
 8000768:	1ba4      	subs	r4, r4, r6
 800076a:	41bd      	sbcs	r5, r7
 800076c:	2b00      	cmp	r3, #0
 800076e:	da00      	bge.n	8000772 <__udivmoddi4+0x5e>
 8000770:	e076      	b.n	8000860 <__udivmoddi4+0x14c>
 8000772:	2200      	movs	r2, #0
 8000774:	2300      	movs	r3, #0
 8000776:	9200      	str	r2, [sp, #0]
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2301      	movs	r3, #1
 800077c:	465a      	mov	r2, fp
 800077e:	4093      	lsls	r3, r2
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2301      	movs	r3, #1
 8000784:	4642      	mov	r2, r8
 8000786:	4093      	lsls	r3, r2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	e029      	b.n	80007e0 <__udivmoddi4+0xcc>
 800078c:	4282      	cmp	r2, r0
 800078e:	d9cf      	bls.n	8000730 <__udivmoddi4+0x1c>
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <__udivmoddi4+0x8e>
 800079e:	601c      	str	r4, [r3, #0]
 80007a0:	605d      	str	r5, [r3, #4]
 80007a2:	9800      	ldr	r0, [sp, #0]
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	b003      	add	sp, #12
 80007a8:	bcf0      	pop	{r4, r5, r6, r7}
 80007aa:	46bb      	mov	fp, r7
 80007ac:	46b2      	mov	sl, r6
 80007ae:	46a9      	mov	r9, r5
 80007b0:	46a0      	mov	r8, r4
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b4:	4642      	mov	r2, r8
 80007b6:	469b      	mov	fp, r3
 80007b8:	2320      	movs	r3, #32
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	4652      	mov	r2, sl
 80007be:	40da      	lsrs	r2, r3
 80007c0:	4641      	mov	r1, r8
 80007c2:	0013      	movs	r3, r2
 80007c4:	464a      	mov	r2, r9
 80007c6:	408a      	lsls	r2, r1
 80007c8:	0017      	movs	r7, r2
 80007ca:	4642      	mov	r2, r8
 80007cc:	431f      	orrs	r7, r3
 80007ce:	4653      	mov	r3, sl
 80007d0:	4093      	lsls	r3, r2
 80007d2:	001e      	movs	r6, r3
 80007d4:	42af      	cmp	r7, r5
 80007d6:	d9c3      	bls.n	8000760 <__udivmoddi4+0x4c>
 80007d8:	2200      	movs	r2, #0
 80007da:	2300      	movs	r3, #0
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	4643      	mov	r3, r8
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0d8      	beq.n	8000798 <__udivmoddi4+0x84>
 80007e6:	07fb      	lsls	r3, r7, #31
 80007e8:	0872      	lsrs	r2, r6, #1
 80007ea:	431a      	orrs	r2, r3
 80007ec:	4646      	mov	r6, r8
 80007ee:	087b      	lsrs	r3, r7, #1
 80007f0:	e00e      	b.n	8000810 <__udivmoddi4+0xfc>
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	d101      	bne.n	80007fa <__udivmoddi4+0xe6>
 80007f6:	42a2      	cmp	r2, r4
 80007f8:	d80c      	bhi.n	8000814 <__udivmoddi4+0x100>
 80007fa:	1aa4      	subs	r4, r4, r2
 80007fc:	419d      	sbcs	r5, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	1924      	adds	r4, r4, r4
 8000802:	416d      	adcs	r5, r5
 8000804:	2100      	movs	r1, #0
 8000806:	3e01      	subs	r6, #1
 8000808:	1824      	adds	r4, r4, r0
 800080a:	414d      	adcs	r5, r1
 800080c:	2e00      	cmp	r6, #0
 800080e:	d006      	beq.n	800081e <__udivmoddi4+0x10a>
 8000810:	42ab      	cmp	r3, r5
 8000812:	d9ee      	bls.n	80007f2 <__udivmoddi4+0xde>
 8000814:	3e01      	subs	r6, #1
 8000816:	1924      	adds	r4, r4, r4
 8000818:	416d      	adcs	r5, r5
 800081a:	2e00      	cmp	r6, #0
 800081c:	d1f8      	bne.n	8000810 <__udivmoddi4+0xfc>
 800081e:	9800      	ldr	r0, [sp, #0]
 8000820:	9901      	ldr	r1, [sp, #4]
 8000822:	465b      	mov	r3, fp
 8000824:	1900      	adds	r0, r0, r4
 8000826:	4169      	adcs	r1, r5
 8000828:	2b00      	cmp	r3, #0
 800082a:	db24      	blt.n	8000876 <__udivmoddi4+0x162>
 800082c:	002b      	movs	r3, r5
 800082e:	465a      	mov	r2, fp
 8000830:	4644      	mov	r4, r8
 8000832:	40d3      	lsrs	r3, r2
 8000834:	002a      	movs	r2, r5
 8000836:	40e2      	lsrs	r2, r4
 8000838:	001c      	movs	r4, r3
 800083a:	465b      	mov	r3, fp
 800083c:	0015      	movs	r5, r2
 800083e:	2b00      	cmp	r3, #0
 8000840:	db2a      	blt.n	8000898 <__udivmoddi4+0x184>
 8000842:	0026      	movs	r6, r4
 8000844:	409e      	lsls	r6, r3
 8000846:	0033      	movs	r3, r6
 8000848:	0026      	movs	r6, r4
 800084a:	4647      	mov	r7, r8
 800084c:	40be      	lsls	r6, r7
 800084e:	0032      	movs	r2, r6
 8000850:	1a80      	subs	r0, r0, r2
 8000852:	4199      	sbcs	r1, r3
 8000854:	9000      	str	r0, [sp, #0]
 8000856:	9101      	str	r1, [sp, #4]
 8000858:	e79e      	b.n	8000798 <__udivmoddi4+0x84>
 800085a:	42a3      	cmp	r3, r4
 800085c:	d8bc      	bhi.n	80007d8 <__udivmoddi4+0xc4>
 800085e:	e782      	b.n	8000766 <__udivmoddi4+0x52>
 8000860:	4642      	mov	r2, r8
 8000862:	2320      	movs	r3, #32
 8000864:	2100      	movs	r1, #0
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	9100      	str	r1, [sp, #0]
 800086c:	9201      	str	r2, [sp, #4]
 800086e:	2201      	movs	r2, #1
 8000870:	40da      	lsrs	r2, r3
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	e785      	b.n	8000782 <__udivmoddi4+0x6e>
 8000876:	4642      	mov	r2, r8
 8000878:	2320      	movs	r3, #32
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	002a      	movs	r2, r5
 800087e:	4646      	mov	r6, r8
 8000880:	409a      	lsls	r2, r3
 8000882:	0023      	movs	r3, r4
 8000884:	40f3      	lsrs	r3, r6
 8000886:	4644      	mov	r4, r8
 8000888:	4313      	orrs	r3, r2
 800088a:	002a      	movs	r2, r5
 800088c:	40e2      	lsrs	r2, r4
 800088e:	001c      	movs	r4, r3
 8000890:	465b      	mov	r3, fp
 8000892:	0015      	movs	r5, r2
 8000894:	2b00      	cmp	r3, #0
 8000896:	dad4      	bge.n	8000842 <__udivmoddi4+0x12e>
 8000898:	4642      	mov	r2, r8
 800089a:	002f      	movs	r7, r5
 800089c:	2320      	movs	r3, #32
 800089e:	0026      	movs	r6, r4
 80008a0:	4097      	lsls	r7, r2
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	40de      	lsrs	r6, r3
 80008a6:	003b      	movs	r3, r7
 80008a8:	4333      	orrs	r3, r6
 80008aa:	e7cd      	b.n	8000848 <__udivmoddi4+0x134>

080008ac <__aeabi_fadd>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	46ce      	mov	lr, r9
 80008b0:	4647      	mov	r7, r8
 80008b2:	0243      	lsls	r3, r0, #9
 80008b4:	0a5a      	lsrs	r2, r3, #9
 80008b6:	024e      	lsls	r6, r1, #9
 80008b8:	0045      	lsls	r5, r0, #1
 80008ba:	0fc4      	lsrs	r4, r0, #31
 80008bc:	0048      	lsls	r0, r1, #1
 80008be:	4691      	mov	r9, r2
 80008c0:	0e2d      	lsrs	r5, r5, #24
 80008c2:	0a72      	lsrs	r2, r6, #9
 80008c4:	0e00      	lsrs	r0, r0, #24
 80008c6:	4694      	mov	ip, r2
 80008c8:	b580      	push	{r7, lr}
 80008ca:	099b      	lsrs	r3, r3, #6
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	09b6      	lsrs	r6, r6, #6
 80008d0:	1a2a      	subs	r2, r5, r0
 80008d2:	428c      	cmp	r4, r1
 80008d4:	d021      	beq.n	800091a <__aeabi_fadd+0x6e>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	dd0d      	ble.n	80008f6 <__aeabi_fadd+0x4a>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d12d      	bne.n	800093a <__aeabi_fadd+0x8e>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fadd+0x38>
 80008e2:	e08d      	b.n	8000a00 <__aeabi_fadd+0x154>
 80008e4:	1e51      	subs	r1, r2, #1
 80008e6:	2a01      	cmp	r2, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x40>
 80008ea:	e11d      	b.n	8000b28 <__aeabi_fadd+0x27c>
 80008ec:	2aff      	cmp	r2, #255	@ 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x46>
 80008f0:	e0ab      	b.n	8000a4a <__aeabi_fadd+0x19e>
 80008f2:	000a      	movs	r2, r1
 80008f4:	e027      	b.n	8000946 <__aeabi_fadd+0x9a>
 80008f6:	2a00      	cmp	r2, #0
 80008f8:	d04d      	beq.n	8000996 <__aeabi_fadd+0xea>
 80008fa:	1b42      	subs	r2, r0, r5
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d000      	beq.n	8000902 <__aeabi_fadd+0x56>
 8000900:	e0cc      	b.n	8000a9c <__aeabi_fadd+0x1f0>
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x5c>
 8000906:	e079      	b.n	80009fc <__aeabi_fadd+0x150>
 8000908:	1e54      	subs	r4, r2, #1
 800090a:	2a01      	cmp	r2, #1
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x64>
 800090e:	e128      	b.n	8000b62 <__aeabi_fadd+0x2b6>
 8000910:	2aff      	cmp	r2, #255	@ 0xff
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x6a>
 8000914:	e097      	b.n	8000a46 <__aeabi_fadd+0x19a>
 8000916:	0022      	movs	r2, r4
 8000918:	e0c5      	b.n	8000aa6 <__aeabi_fadd+0x1fa>
 800091a:	2a00      	cmp	r2, #0
 800091c:	dc00      	bgt.n	8000920 <__aeabi_fadd+0x74>
 800091e:	e096      	b.n	8000a4e <__aeabi_fadd+0x1a2>
 8000920:	2800      	cmp	r0, #0
 8000922:	d04f      	beq.n	80009c4 <__aeabi_fadd+0x118>
 8000924:	2dff      	cmp	r5, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x7e>
 8000928:	e08f      	b.n	8000a4a <__aeabi_fadd+0x19e>
 800092a:	2180      	movs	r1, #128	@ 0x80
 800092c:	04c9      	lsls	r1, r1, #19
 800092e:	430e      	orrs	r6, r1
 8000930:	2a1b      	cmp	r2, #27
 8000932:	dd51      	ble.n	80009d8 <__aeabi_fadd+0x12c>
 8000934:	002a      	movs	r2, r5
 8000936:	3301      	adds	r3, #1
 8000938:	e018      	b.n	800096c <__aeabi_fadd+0xc0>
 800093a:	2dff      	cmp	r5, #255	@ 0xff
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x94>
 800093e:	e084      	b.n	8000a4a <__aeabi_fadd+0x19e>
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	04c9      	lsls	r1, r1, #19
 8000944:	430e      	orrs	r6, r1
 8000946:	2101      	movs	r1, #1
 8000948:	2a1b      	cmp	r2, #27
 800094a:	dc08      	bgt.n	800095e <__aeabi_fadd+0xb2>
 800094c:	0031      	movs	r1, r6
 800094e:	2020      	movs	r0, #32
 8000950:	40d1      	lsrs	r1, r2
 8000952:	1a82      	subs	r2, r0, r2
 8000954:	4096      	lsls	r6, r2
 8000956:	0032      	movs	r2, r6
 8000958:	1e50      	subs	r0, r2, #1
 800095a:	4182      	sbcs	r2, r0
 800095c:	4311      	orrs	r1, r2
 800095e:	1a5b      	subs	r3, r3, r1
 8000960:	015a      	lsls	r2, r3, #5
 8000962:	d459      	bmi.n	8000a18 <__aeabi_fadd+0x16c>
 8000964:	2107      	movs	r1, #7
 8000966:	002a      	movs	r2, r5
 8000968:	4019      	ands	r1, r3
 800096a:	d049      	beq.n	8000a00 <__aeabi_fadd+0x154>
 800096c:	210f      	movs	r1, #15
 800096e:	4019      	ands	r1, r3
 8000970:	2904      	cmp	r1, #4
 8000972:	d000      	beq.n	8000976 <__aeabi_fadd+0xca>
 8000974:	3304      	adds	r3, #4
 8000976:	0159      	lsls	r1, r3, #5
 8000978:	d542      	bpl.n	8000a00 <__aeabi_fadd+0x154>
 800097a:	1c50      	adds	r0, r2, #1
 800097c:	2afe      	cmp	r2, #254	@ 0xfe
 800097e:	d03a      	beq.n	80009f6 <__aeabi_fadd+0x14a>
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	b2c0      	uxtb	r0, r0
 8000984:	0a5b      	lsrs	r3, r3, #9
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	4318      	orrs	r0, r3
 800098a:	07e4      	lsls	r4, r4, #31
 800098c:	4320      	orrs	r0, r4
 800098e:	bcc0      	pop	{r6, r7}
 8000990:	46b9      	mov	r9, r7
 8000992:	46b0      	mov	r8, r6
 8000994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000996:	20fe      	movs	r0, #254	@ 0xfe
 8000998:	4680      	mov	r8, r0
 800099a:	1c6f      	adds	r7, r5, #1
 800099c:	0038      	movs	r0, r7
 800099e:	4647      	mov	r7, r8
 80009a0:	4207      	tst	r7, r0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fadd+0xfa>
 80009a4:	e08e      	b.n	8000ac4 <__aeabi_fadd+0x218>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d000      	beq.n	80009ac <__aeabi_fadd+0x100>
 80009aa:	e0b4      	b.n	8000b16 <__aeabi_fadd+0x26a>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fadd+0x106>
 80009b0:	e0db      	b.n	8000b6a <__aeabi_fadd+0x2be>
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d06c      	beq.n	8000a90 <__aeabi_fadd+0x1e4>
 80009b6:	1b98      	subs	r0, r3, r6
 80009b8:	0145      	lsls	r5, r0, #5
 80009ba:	d400      	bmi.n	80009be <__aeabi_fadd+0x112>
 80009bc:	e0f7      	b.n	8000bae <__aeabi_fadd+0x302>
 80009be:	000c      	movs	r4, r1
 80009c0:	1af3      	subs	r3, r6, r3
 80009c2:	e03d      	b.n	8000a40 <__aeabi_fadd+0x194>
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d01b      	beq.n	8000a00 <__aeabi_fadd+0x154>
 80009c8:	1e51      	subs	r1, r2, #1
 80009ca:	2a01      	cmp	r2, #1
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fadd+0x124>
 80009ce:	e082      	b.n	8000ad6 <__aeabi_fadd+0x22a>
 80009d0:	2aff      	cmp	r2, #255	@ 0xff
 80009d2:	d03a      	beq.n	8000a4a <__aeabi_fadd+0x19e>
 80009d4:	000a      	movs	r2, r1
 80009d6:	e7ab      	b.n	8000930 <__aeabi_fadd+0x84>
 80009d8:	0031      	movs	r1, r6
 80009da:	2020      	movs	r0, #32
 80009dc:	40d1      	lsrs	r1, r2
 80009de:	1a82      	subs	r2, r0, r2
 80009e0:	4096      	lsls	r6, r2
 80009e2:	0032      	movs	r2, r6
 80009e4:	1e50      	subs	r0, r2, #1
 80009e6:	4182      	sbcs	r2, r0
 80009e8:	430a      	orrs	r2, r1
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	015a      	lsls	r2, r3, #5
 80009ee:	d5b9      	bpl.n	8000964 <__aeabi_fadd+0xb8>
 80009f0:	1c6a      	adds	r2, r5, #1
 80009f2:	2dfe      	cmp	r5, #254	@ 0xfe
 80009f4:	d175      	bne.n	8000ae2 <__aeabi_fadd+0x236>
 80009f6:	20ff      	movs	r0, #255	@ 0xff
 80009f8:	2300      	movs	r3, #0
 80009fa:	e7c4      	b.n	8000986 <__aeabi_fadd+0xda>
 80009fc:	000c      	movs	r4, r1
 80009fe:	0033      	movs	r3, r6
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d146      	bne.n	8000a94 <__aeabi_fadd+0x1e8>
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f5      	beq.n	80009f6 <__aeabi_fadd+0x14a>
 8000a0a:	2280      	movs	r2, #128	@ 0x80
 8000a0c:	03d2      	lsls	r2, r2, #15
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	025b      	lsls	r3, r3, #9
 8000a12:	20ff      	movs	r0, #255	@ 0xff
 8000a14:	0a5b      	lsrs	r3, r3, #9
 8000a16:	e7b6      	b.n	8000986 <__aeabi_fadd+0xda>
 8000a18:	019f      	lsls	r7, r3, #6
 8000a1a:	09bf      	lsrs	r7, r7, #6
 8000a1c:	0038      	movs	r0, r7
 8000a1e:	f002 fde3 	bl	80035e8 <__clzsi2>
 8000a22:	3805      	subs	r0, #5
 8000a24:	4087      	lsls	r7, r0
 8000a26:	4285      	cmp	r5, r0
 8000a28:	dc24      	bgt.n	8000a74 <__aeabi_fadd+0x1c8>
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	1b42      	subs	r2, r0, r5
 8000a30:	3201      	adds	r2, #1
 8000a32:	40d3      	lsrs	r3, r2
 8000a34:	1a8a      	subs	r2, r1, r2
 8000a36:	4097      	lsls	r7, r2
 8000a38:	1e7a      	subs	r2, r7, #1
 8000a3a:	4197      	sbcs	r7, r2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	433b      	orrs	r3, r7
 8000a40:	0759      	lsls	r1, r3, #29
 8000a42:	d193      	bne.n	800096c <__aeabi_fadd+0xc0>
 8000a44:	e797      	b.n	8000976 <__aeabi_fadd+0xca>
 8000a46:	000c      	movs	r4, r1
 8000a48:	0033      	movs	r3, r6
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	e7db      	b.n	8000a06 <__aeabi_fadd+0x15a>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d014      	beq.n	8000a7c <__aeabi_fadd+0x1d0>
 8000a52:	1b42      	subs	r2, r0, r5
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	d14b      	bne.n	8000af0 <__aeabi_fadd+0x244>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0d0      	beq.n	80009fe <__aeabi_fadd+0x152>
 8000a5c:	1e51      	subs	r1, r2, #1
 8000a5e:	2a01      	cmp	r2, #1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fadd+0x1b8>
 8000a62:	e09e      	b.n	8000ba2 <__aeabi_fadd+0x2f6>
 8000a64:	2aff      	cmp	r2, #255	@ 0xff
 8000a66:	d0ef      	beq.n	8000a48 <__aeabi_fadd+0x19c>
 8000a68:	000a      	movs	r2, r1
 8000a6a:	2a1b      	cmp	r2, #27
 8000a6c:	dd5f      	ble.n	8000b2e <__aeabi_fadd+0x282>
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1c73      	adds	r3, r6, #1
 8000a72:	e77b      	b.n	800096c <__aeabi_fadd+0xc0>
 8000a74:	4b50      	ldr	r3, [pc, #320]	@ (8000bb8 <__aeabi_fadd+0x30c>)
 8000a76:	1a2a      	subs	r2, r5, r0
 8000a78:	403b      	ands	r3, r7
 8000a7a:	e7e1      	b.n	8000a40 <__aeabi_fadd+0x194>
 8000a7c:	21fe      	movs	r1, #254	@ 0xfe
 8000a7e:	1c6a      	adds	r2, r5, #1
 8000a80:	4211      	tst	r1, r2
 8000a82:	d13b      	bne.n	8000afc <__aeabi_fadd+0x250>
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d15d      	bne.n	8000b44 <__aeabi_fadd+0x298>
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d07f      	beq.n	8000b8c <__aeabi_fadd+0x2e0>
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d17f      	bne.n	8000b90 <__aeabi_fadd+0x2e4>
 8000a90:	2200      	movs	r2, #0
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	025b      	lsls	r3, r3, #9
 8000a96:	0a5b      	lsrs	r3, r3, #9
 8000a98:	b2d0      	uxtb	r0, r2
 8000a9a:	e774      	b.n	8000986 <__aeabi_fadd+0xda>
 8000a9c:	28ff      	cmp	r0, #255	@ 0xff
 8000a9e:	d0d2      	beq.n	8000a46 <__aeabi_fadd+0x19a>
 8000aa0:	2480      	movs	r4, #128	@ 0x80
 8000aa2:	04e4      	lsls	r4, r4, #19
 8000aa4:	4323      	orrs	r3, r4
 8000aa6:	2401      	movs	r4, #1
 8000aa8:	2a1b      	cmp	r2, #27
 8000aaa:	dc07      	bgt.n	8000abc <__aeabi_fadd+0x210>
 8000aac:	001c      	movs	r4, r3
 8000aae:	2520      	movs	r5, #32
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	1aaa      	subs	r2, r5, r2
 8000ab4:	4093      	lsls	r3, r2
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	4193      	sbcs	r3, r2
 8000aba:	431c      	orrs	r4, r3
 8000abc:	1b33      	subs	r3, r6, r4
 8000abe:	0005      	movs	r5, r0
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	e74d      	b.n	8000960 <__aeabi_fadd+0xb4>
 8000ac4:	1b9f      	subs	r7, r3, r6
 8000ac6:	017a      	lsls	r2, r7, #5
 8000ac8:	d422      	bmi.n	8000b10 <__aeabi_fadd+0x264>
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d1a6      	bne.n	8000a1c <__aeabi_fadd+0x170>
 8000ace:	2400      	movs	r4, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e757      	b.n	8000986 <__aeabi_fadd+0xda>
 8000ad6:	199b      	adds	r3, r3, r6
 8000ad8:	2501      	movs	r5, #1
 8000ada:	3201      	adds	r2, #1
 8000adc:	0159      	lsls	r1, r3, #5
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_fadd+0x236>
 8000ae0:	e740      	b.n	8000964 <__aeabi_fadd+0xb8>
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4835      	ldr	r0, [pc, #212]	@ (8000bbc <__aeabi_fadd+0x310>)
 8000ae6:	4019      	ands	r1, r3
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	4003      	ands	r3, r0
 8000aec:	430b      	orrs	r3, r1
 8000aee:	e7a7      	b.n	8000a40 <__aeabi_fadd+0x194>
 8000af0:	28ff      	cmp	r0, #255	@ 0xff
 8000af2:	d0a9      	beq.n	8000a48 <__aeabi_fadd+0x19c>
 8000af4:	2180      	movs	r1, #128	@ 0x80
 8000af6:	04c9      	lsls	r1, r1, #19
 8000af8:	430b      	orrs	r3, r1
 8000afa:	e7b6      	b.n	8000a6a <__aeabi_fadd+0x1be>
 8000afc:	2aff      	cmp	r2, #255	@ 0xff
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fadd+0x256>
 8000b00:	e779      	b.n	80009f6 <__aeabi_fadd+0x14a>
 8000b02:	199b      	adds	r3, r3, r6
 8000b04:	085b      	lsrs	r3, r3, #1
 8000b06:	0759      	lsls	r1, r3, #29
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fadd+0x260>
 8000b0a:	e72f      	b.n	800096c <__aeabi_fadd+0xc0>
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	e7c1      	b.n	8000a94 <__aeabi_fadd+0x1e8>
 8000b10:	000c      	movs	r4, r1
 8000b12:	1af7      	subs	r7, r6, r3
 8000b14:	e782      	b.n	8000a1c <__aeabi_fadd+0x170>
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d12c      	bne.n	8000b74 <__aeabi_fadd+0x2c8>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d193      	bne.n	8000a46 <__aeabi_fadd+0x19a>
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	2400      	movs	r4, #0
 8000b22:	20ff      	movs	r0, #255	@ 0xff
 8000b24:	03db      	lsls	r3, r3, #15
 8000b26:	e72e      	b.n	8000986 <__aeabi_fadd+0xda>
 8000b28:	2501      	movs	r5, #1
 8000b2a:	1b9b      	subs	r3, r3, r6
 8000b2c:	e718      	b.n	8000960 <__aeabi_fadd+0xb4>
 8000b2e:	0019      	movs	r1, r3
 8000b30:	2520      	movs	r5, #32
 8000b32:	40d1      	lsrs	r1, r2
 8000b34:	1aaa      	subs	r2, r5, r2
 8000b36:	4093      	lsls	r3, r2
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	4193      	sbcs	r3, r2
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	0005      	movs	r5, r0
 8000b40:	199b      	adds	r3, r3, r6
 8000b42:	e753      	b.n	80009ec <__aeabi_fadd+0x140>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fadd+0x29e>
 8000b48:	e77e      	b.n	8000a48 <__aeabi_fadd+0x19c>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fadd+0x2a4>
 8000b4e:	e77c      	b.n	8000a4a <__aeabi_fadd+0x19e>
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	03d2      	lsls	r2, r2, #15
 8000b54:	4591      	cmp	r9, r2
 8000b56:	d302      	bcc.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b58:	4594      	cmp	ip, r2
 8000b5a:	d200      	bcs.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b5c:	0033      	movs	r3, r6
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	e753      	b.n	8000a0a <__aeabi_fadd+0x15e>
 8000b62:	000c      	movs	r4, r1
 8000b64:	1af3      	subs	r3, r6, r3
 8000b66:	3501      	adds	r5, #1
 8000b68:	e6fa      	b.n	8000960 <__aeabi_fadd+0xb4>
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d0af      	beq.n	8000ace <__aeabi_fadd+0x222>
 8000b6e:	000c      	movs	r4, r1
 8000b70:	0033      	movs	r3, r6
 8000b72:	e78d      	b.n	8000a90 <__aeabi_fadd+0x1e4>
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_fadd+0x2ce>
 8000b78:	e767      	b.n	8000a4a <__aeabi_fadd+0x19e>
 8000b7a:	2280      	movs	r2, #128	@ 0x80
 8000b7c:	03d2      	lsls	r2, r2, #15
 8000b7e:	4591      	cmp	r9, r2
 8000b80:	d3ed      	bcc.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b82:	4594      	cmp	ip, r2
 8000b84:	d2eb      	bcs.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b86:	000c      	movs	r4, r1
 8000b88:	0033      	movs	r3, r6
 8000b8a:	e7e8      	b.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	e77f      	b.n	8000a90 <__aeabi_fadd+0x1e4>
 8000b90:	199b      	adds	r3, r3, r6
 8000b92:	2200      	movs	r2, #0
 8000b94:	0159      	lsls	r1, r3, #5
 8000b96:	d5b9      	bpl.n	8000b0c <__aeabi_fadd+0x260>
 8000b98:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <__aeabi_fadd+0x30c>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	e778      	b.n	8000a94 <__aeabi_fadd+0x1e8>
 8000ba2:	199b      	adds	r3, r3, r6
 8000ba4:	3201      	adds	r2, #1
 8000ba6:	3501      	adds	r5, #1
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d49a      	bmi.n	8000ae2 <__aeabi_fadd+0x236>
 8000bac:	e6da      	b.n	8000964 <__aeabi_fadd+0xb8>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d08d      	beq.n	8000ace <__aeabi_fadd+0x222>
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	e76e      	b.n	8000a94 <__aeabi_fadd+0x1e8>
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	fbffffff 	.word	0xfbffffff
 8000bbc:	7dffffff 	.word	0x7dffffff

08000bc0 <__aeabi_fdiv>:
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	464f      	mov	r7, r9
 8000bc4:	4646      	mov	r6, r8
 8000bc6:	46d6      	mov	lr, sl
 8000bc8:	0244      	lsls	r4, r0, #9
 8000bca:	b5c0      	push	{r6, r7, lr}
 8000bcc:	0047      	lsls	r7, r0, #1
 8000bce:	1c0e      	adds	r6, r1, #0
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	0e3f      	lsrs	r7, r7, #24
 8000bd4:	0fc5      	lsrs	r5, r0, #31
 8000bd6:	2f00      	cmp	r7, #0
 8000bd8:	d03c      	beq.n	8000c54 <__aeabi_fdiv+0x94>
 8000bda:	2fff      	cmp	r7, #255	@ 0xff
 8000bdc:	d042      	beq.n	8000c64 <__aeabi_fdiv+0xa4>
 8000bde:	2300      	movs	r3, #0
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	4699      	mov	r9, r3
 8000be4:	469a      	mov	sl, r3
 8000be6:	00e4      	lsls	r4, r4, #3
 8000be8:	04d2      	lsls	r2, r2, #19
 8000bea:	4314      	orrs	r4, r2
 8000bec:	3f7f      	subs	r7, #127	@ 0x7f
 8000bee:	0273      	lsls	r3, r6, #9
 8000bf0:	0a5b      	lsrs	r3, r3, #9
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	0073      	lsls	r3, r6, #1
 8000bf6:	0e1b      	lsrs	r3, r3, #24
 8000bf8:	0ff6      	lsrs	r6, r6, #31
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d01b      	beq.n	8000c36 <__aeabi_fdiv+0x76>
 8000bfe:	2bff      	cmp	r3, #255	@ 0xff
 8000c00:	d013      	beq.n	8000c2a <__aeabi_fdiv+0x6a>
 8000c02:	4642      	mov	r2, r8
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	00d2      	lsls	r2, r2, #3
 8000c08:	04c9      	lsls	r1, r1, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4688      	mov	r8, r1
 8000c0e:	2000      	movs	r0, #0
 8000c10:	3b7f      	subs	r3, #127	@ 0x7f
 8000c12:	0029      	movs	r1, r5
 8000c14:	1aff      	subs	r7, r7, r3
 8000c16:	464b      	mov	r3, r9
 8000c18:	4071      	eors	r1, r6
 8000c1a:	b2c9      	uxtb	r1, r1
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d900      	bls.n	8000c22 <__aeabi_fdiv+0x62>
 8000c20:	e0b5      	b.n	8000d8e <__aeabi_fdiv+0x1ce>
 8000c22:	4a74      	ldr	r2, [pc, #464]	@ (8000df4 <__aeabi_fdiv+0x234>)
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	58d3      	ldr	r3, [r2, r3]
 8000c28:	469f      	mov	pc, r3
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d13f      	bne.n	8000cb0 <__aeabi_fdiv+0xf0>
 8000c30:	3fff      	subs	r7, #255	@ 0xff
 8000c32:	3302      	adds	r3, #2
 8000c34:	e003      	b.n	8000c3e <__aeabi_fdiv+0x7e>
 8000c36:	4643      	mov	r3, r8
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d12d      	bne.n	8000c98 <__aeabi_fdiv+0xd8>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	0029      	movs	r1, r5
 8000c40:	464a      	mov	r2, r9
 8000c42:	4071      	eors	r1, r6
 8000c44:	b2c9      	uxtb	r1, r1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	2a0e      	cmp	r2, #14
 8000c4a:	d838      	bhi.n	8000cbe <__aeabi_fdiv+0xfe>
 8000c4c:	486a      	ldr	r0, [pc, #424]	@ (8000df8 <__aeabi_fdiv+0x238>)
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	5882      	ldr	r2, [r0, r2]
 8000c52:	4697      	mov	pc, r2
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d113      	bne.n	8000c80 <__aeabi_fdiv+0xc0>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	2700      	movs	r7, #0
 8000c60:	469a      	mov	sl, r3
 8000c62:	e7c4      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d105      	bne.n	8000c74 <__aeabi_fdiv+0xb4>
 8000c68:	2308      	movs	r3, #8
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	3b06      	subs	r3, #6
 8000c6e:	27ff      	movs	r7, #255	@ 0xff
 8000c70:	469a      	mov	sl, r3
 8000c72:	e7bc      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c74:	230c      	movs	r3, #12
 8000c76:	4699      	mov	r9, r3
 8000c78:	3b09      	subs	r3, #9
 8000c7a:	27ff      	movs	r7, #255	@ 0xff
 8000c7c:	469a      	mov	sl, r3
 8000c7e:	e7b6      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c80:	0020      	movs	r0, r4
 8000c82:	f002 fcb1 	bl	80035e8 <__clzsi2>
 8000c86:	2776      	movs	r7, #118	@ 0x76
 8000c88:	1f43      	subs	r3, r0, #5
 8000c8a:	409c      	lsls	r4, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	427f      	negs	r7, r7
 8000c90:	4699      	mov	r9, r3
 8000c92:	469a      	mov	sl, r3
 8000c94:	1a3f      	subs	r7, r7, r0
 8000c96:	e7aa      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	f002 fca5 	bl	80035e8 <__clzsi2>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	1f43      	subs	r3, r0, #5
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	2376      	movs	r3, #118	@ 0x76
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	1a1b      	subs	r3, r3, r0
 8000caa:	4690      	mov	r8, r2
 8000cac:	2000      	movs	r0, #0
 8000cae:	e7b0      	b.n	8000c12 <__aeabi_fdiv+0x52>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	4691      	mov	r9, r2
 8000cb8:	2003      	movs	r0, #3
 8000cba:	33fc      	adds	r3, #252	@ 0xfc
 8000cbc:	e7a9      	b.n	8000c12 <__aeabi_fdiv+0x52>
 8000cbe:	000d      	movs	r5, r1
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	07ed      	lsls	r5, r5, #31
 8000cc8:	4310      	orrs	r0, r2
 8000cca:	4328      	orrs	r0, r5
 8000ccc:	bce0      	pop	{r5, r6, r7}
 8000cce:	46ba      	mov	sl, r7
 8000cd0:	46b1      	mov	r9, r6
 8000cd2:	46a8      	mov	r8, r5
 8000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd6:	000d      	movs	r5, r1
 8000cd8:	2000      	movs	r0, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	e7f2      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000cde:	4653      	mov	r3, sl
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d0ed      	beq.n	8000cc0 <__aeabi_fdiv+0x100>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d033      	beq.n	8000d50 <__aeabi_fdiv+0x190>
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d105      	bne.n	8000cfa <__aeabi_fdiv+0x13a>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e7e7      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000cf4:	0035      	movs	r5, r6
 8000cf6:	2803      	cmp	r0, #3
 8000cf8:	d07a      	beq.n	8000df0 <__aeabi_fdiv+0x230>
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	337f      	adds	r3, #127	@ 0x7f
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dd2d      	ble.n	8000d5e <__aeabi_fdiv+0x19e>
 8000d02:	4642      	mov	r2, r8
 8000d04:	0752      	lsls	r2, r2, #29
 8000d06:	d007      	beq.n	8000d18 <__aeabi_fdiv+0x158>
 8000d08:	220f      	movs	r2, #15
 8000d0a:	4641      	mov	r1, r8
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	2a04      	cmp	r2, #4
 8000d10:	d002      	beq.n	8000d18 <__aeabi_fdiv+0x158>
 8000d12:	2204      	movs	r2, #4
 8000d14:	4694      	mov	ip, r2
 8000d16:	44e0      	add	r8, ip
 8000d18:	4642      	mov	r2, r8
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	d505      	bpl.n	8000d2a <__aeabi_fdiv+0x16a>
 8000d1e:	4642      	mov	r2, r8
 8000d20:	4b36      	ldr	r3, [pc, #216]	@ (8000dfc <__aeabi_fdiv+0x23c>)
 8000d22:	401a      	ands	r2, r3
 8000d24:	003b      	movs	r3, r7
 8000d26:	4690      	mov	r8, r2
 8000d28:	3380      	adds	r3, #128	@ 0x80
 8000d2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d2c:	dcc8      	bgt.n	8000cc0 <__aeabi_fdiv+0x100>
 8000d2e:	4642      	mov	r2, r8
 8000d30:	0192      	lsls	r2, r2, #6
 8000d32:	0a52      	lsrs	r2, r2, #9
 8000d34:	b2d8      	uxtb	r0, r3
 8000d36:	e7c5      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	20ff      	movs	r0, #255	@ 0xff
 8000d3e:	03d2      	lsls	r2, r2, #15
 8000d40:	e7c0      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d42:	2280      	movs	r2, #128	@ 0x80
 8000d44:	03d2      	lsls	r2, r2, #15
 8000d46:	4214      	tst	r4, r2
 8000d48:	d002      	beq.n	8000d50 <__aeabi_fdiv+0x190>
 8000d4a:	4643      	mov	r3, r8
 8000d4c:	4213      	tst	r3, r2
 8000d4e:	d049      	beq.n	8000de4 <__aeabi_fdiv+0x224>
 8000d50:	2280      	movs	r2, #128	@ 0x80
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	4322      	orrs	r2, r4
 8000d56:	0252      	lsls	r2, r2, #9
 8000d58:	20ff      	movs	r0, #255	@ 0xff
 8000d5a:	0a52      	lsrs	r2, r2, #9
 8000d5c:	e7b2      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d5e:	2201      	movs	r2, #1
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b1b      	cmp	r3, #27
 8000d64:	dcc3      	bgt.n	8000cee <__aeabi_fdiv+0x12e>
 8000d66:	4642      	mov	r2, r8
 8000d68:	40da      	lsrs	r2, r3
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	379e      	adds	r7, #158	@ 0x9e
 8000d6e:	40bb      	lsls	r3, r7
 8000d70:	1e59      	subs	r1, r3, #1
 8000d72:	418b      	sbcs	r3, r1
 8000d74:	431a      	orrs	r2, r3
 8000d76:	0753      	lsls	r3, r2, #29
 8000d78:	d004      	beq.n	8000d84 <__aeabi_fdiv+0x1c4>
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d000      	beq.n	8000d84 <__aeabi_fdiv+0x1c4>
 8000d82:	3204      	adds	r2, #4
 8000d84:	0153      	lsls	r3, r2, #5
 8000d86:	d529      	bpl.n	8000ddc <__aeabi_fdiv+0x21c>
 8000d88:	2001      	movs	r0, #1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	e79a      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d8e:	4642      	mov	r2, r8
 8000d90:	0163      	lsls	r3, r4, #5
 8000d92:	0155      	lsls	r5, r2, #5
 8000d94:	42ab      	cmp	r3, r5
 8000d96:	d215      	bcs.n	8000dc4 <__aeabi_fdiv+0x204>
 8000d98:	201b      	movs	r0, #27
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	3f01      	subs	r7, #1
 8000d9e:	2601      	movs	r6, #1
 8000da0:	001c      	movs	r4, r3
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	db01      	blt.n	8000dae <__aeabi_fdiv+0x1ee>
 8000daa:	429d      	cmp	r5, r3
 8000dac:	d801      	bhi.n	8000db2 <__aeabi_fdiv+0x1f2>
 8000dae:	1b5b      	subs	r3, r3, r5
 8000db0:	4332      	orrs	r2, r6
 8000db2:	3801      	subs	r0, #1
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d1f3      	bne.n	8000da0 <__aeabi_fdiv+0x1e0>
 8000db8:	1e58      	subs	r0, r3, #1
 8000dba:	4183      	sbcs	r3, r0
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	000d      	movs	r5, r1
 8000dc2:	e79a      	b.n	8000cfa <__aeabi_fdiv+0x13a>
 8000dc4:	201a      	movs	r0, #26
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	1b5b      	subs	r3, r3, r5
 8000dca:	e7e8      	b.n	8000d9e <__aeabi_fdiv+0x1de>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	425a      	negs	r2, r3
 8000dd0:	4153      	adcs	r3, r2
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	0035      	movs	r5, r6
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	b2d8      	uxtb	r0, r3
 8000dda:	e773      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000ddc:	0192      	lsls	r2, r2, #6
 8000dde:	2000      	movs	r0, #0
 8000de0:	0a52      	lsrs	r2, r2, #9
 8000de2:	e76f      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000de4:	431a      	orrs	r2, r3
 8000de6:	0252      	lsls	r2, r2, #9
 8000de8:	0035      	movs	r5, r6
 8000dea:	20ff      	movs	r0, #255	@ 0xff
 8000dec:	0a52      	lsrs	r2, r2, #9
 8000dee:	e769      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000df0:	4644      	mov	r4, r8
 8000df2:	e7ad      	b.n	8000d50 <__aeabi_fdiv+0x190>
 8000df4:	0801eed8 	.word	0x0801eed8
 8000df8:	0801ef18 	.word	0x0801ef18
 8000dfc:	f7ffffff 	.word	0xf7ffffff

08000e00 <__eqsf2>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	024e      	lsls	r6, r1, #9
 8000e06:	004c      	lsls	r4, r1, #1
 8000e08:	0245      	lsls	r5, r0, #9
 8000e0a:	0a6d      	lsrs	r5, r5, #9
 8000e0c:	0e12      	lsrs	r2, r2, #24
 8000e0e:	0fc3      	lsrs	r3, r0, #31
 8000e10:	0a76      	lsrs	r6, r6, #9
 8000e12:	0e24      	lsrs	r4, r4, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d010      	beq.n	8000e3c <__eqsf2+0x3c>
 8000e1a:	2cff      	cmp	r4, #255	@ 0xff
 8000e1c:	d00c      	beq.n	8000e38 <__eqsf2+0x38>
 8000e1e:	2001      	movs	r0, #1
 8000e20:	42a2      	cmp	r2, r4
 8000e22:	d10a      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e24:	42b5      	cmp	r5, r6
 8000e26:	d108      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d00f      	beq.n	8000e4c <__eqsf2+0x4c>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d104      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e30:	0028      	movs	r0, r5
 8000e32:	1e43      	subs	r3, r0, #1
 8000e34:	4198      	sbcs	r0, r3
 8000e36:	e000      	b.n	8000e3a <__eqsf2+0x3a>
 8000e38:	2001      	movs	r0, #1
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	2cff      	cmp	r4, #255	@ 0xff
 8000e40:	d1fb      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e42:	4335      	orrs	r5, r6
 8000e44:	d1f9      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e46:	404b      	eors	r3, r1
 8000e48:	0018      	movs	r0, r3
 8000e4a:	e7f6      	b.n	8000e3a <__eqsf2+0x3a>
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	e7f4      	b.n	8000e3a <__eqsf2+0x3a>

08000e50 <__gesf2>:
 8000e50:	b530      	push	{r4, r5, lr}
 8000e52:	0042      	lsls	r2, r0, #1
 8000e54:	0244      	lsls	r4, r0, #9
 8000e56:	024d      	lsls	r5, r1, #9
 8000e58:	0fc3      	lsrs	r3, r0, #31
 8000e5a:	0048      	lsls	r0, r1, #1
 8000e5c:	0a64      	lsrs	r4, r4, #9
 8000e5e:	0e12      	lsrs	r2, r2, #24
 8000e60:	0a6d      	lsrs	r5, r5, #9
 8000e62:	0e00      	lsrs	r0, r0, #24
 8000e64:	0fc9      	lsrs	r1, r1, #31
 8000e66:	2aff      	cmp	r2, #255	@ 0xff
 8000e68:	d019      	beq.n	8000e9e <__gesf2+0x4e>
 8000e6a:	28ff      	cmp	r0, #255	@ 0xff
 8000e6c:	d00b      	beq.n	8000e86 <__gesf2+0x36>
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d11e      	bne.n	8000eb0 <__gesf2+0x60>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d10b      	bne.n	8000e8e <__gesf2+0x3e>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d027      	beq.n	8000eca <__gesf2+0x7a>
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	d134      	bne.n	8000ee8 <__gesf2+0x98>
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d02f      	beq.n	8000ee2 <__gesf2+0x92>
 8000e82:	0008      	movs	r0, r1
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d128      	bne.n	8000edc <__gesf2+0x8c>
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d101      	bne.n	8000e92 <__gesf2+0x42>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d0f5      	beq.n	8000e7e <__gesf2+0x2e>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d107      	bne.n	8000ea6 <__gesf2+0x56>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d023      	beq.n	8000ee2 <__gesf2+0x92>
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	e7f2      	b.n	8000e84 <__gesf2+0x34>
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d11c      	bne.n	8000edc <__gesf2+0x8c>
 8000ea2:	28ff      	cmp	r0, #255	@ 0xff
 8000ea4:	d014      	beq.n	8000ed0 <__gesf2+0x80>
 8000ea6:	1e58      	subs	r0, r3, #1
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	4018      	ands	r0, r3
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7e9      	b.n	8000e84 <__gesf2+0x34>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d0f8      	beq.n	8000ea6 <__gesf2+0x56>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d1f6      	bne.n	8000ea6 <__gesf2+0x56>
 8000eb8:	4282      	cmp	r2, r0
 8000eba:	dcf4      	bgt.n	8000ea6 <__gesf2+0x56>
 8000ebc:	dbeb      	blt.n	8000e96 <__gesf2+0x46>
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	d8f1      	bhi.n	8000ea6 <__gesf2+0x56>
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	42ac      	cmp	r4, r5
 8000ec6:	d2dd      	bcs.n	8000e84 <__gesf2+0x34>
 8000ec8:	e7e5      	b.n	8000e96 <__gesf2+0x46>
 8000eca:	2c00      	cmp	r4, #0
 8000ecc:	d0da      	beq.n	8000e84 <__gesf2+0x34>
 8000ece:	e7ea      	b.n	8000ea6 <__gesf2+0x56>
 8000ed0:	2d00      	cmp	r5, #0
 8000ed2:	d103      	bne.n	8000edc <__gesf2+0x8c>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e6      	bne.n	8000ea6 <__gesf2+0x56>
 8000ed8:	2000      	movs	r0, #0
 8000eda:	e7d3      	b.n	8000e84 <__gesf2+0x34>
 8000edc:	2002      	movs	r0, #2
 8000ede:	4240      	negs	r0, r0
 8000ee0:	e7d0      	b.n	8000e84 <__gesf2+0x34>
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	4240      	negs	r0, r0
 8000ee6:	e7cd      	b.n	8000e84 <__gesf2+0x34>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d0e8      	beq.n	8000ebe <__gesf2+0x6e>
 8000eec:	e7db      	b.n	8000ea6 <__gesf2+0x56>
 8000eee:	46c0      	nop			@ (mov r8, r8)

08000ef0 <__lesf2>:
 8000ef0:	b530      	push	{r4, r5, lr}
 8000ef2:	0042      	lsls	r2, r0, #1
 8000ef4:	0244      	lsls	r4, r0, #9
 8000ef6:	024d      	lsls	r5, r1, #9
 8000ef8:	0fc3      	lsrs	r3, r0, #31
 8000efa:	0048      	lsls	r0, r1, #1
 8000efc:	0a64      	lsrs	r4, r4, #9
 8000efe:	0e12      	lsrs	r2, r2, #24
 8000f00:	0a6d      	lsrs	r5, r5, #9
 8000f02:	0e00      	lsrs	r0, r0, #24
 8000f04:	0fc9      	lsrs	r1, r1, #31
 8000f06:	2aff      	cmp	r2, #255	@ 0xff
 8000f08:	d01a      	beq.n	8000f40 <__lesf2+0x50>
 8000f0a:	28ff      	cmp	r0, #255	@ 0xff
 8000f0c:	d00e      	beq.n	8000f2c <__lesf2+0x3c>
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d11e      	bne.n	8000f50 <__lesf2+0x60>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d10e      	bne.n	8000f34 <__lesf2+0x44>
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d02a      	beq.n	8000f70 <__lesf2+0x80>
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d00c      	beq.n	8000f38 <__lesf2+0x48>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d01d      	beq.n	8000f5e <__lesf2+0x6e>
 8000f22:	1e58      	subs	r0, r3, #1
 8000f24:	2302      	movs	r3, #2
 8000f26:	4018      	ands	r0, r3
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e010      	b.n	8000f4e <__lesf2+0x5e>
 8000f2c:	2d00      	cmp	r5, #0
 8000f2e:	d10d      	bne.n	8000f4c <__lesf2+0x5c>
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	d120      	bne.n	8000f76 <__lesf2+0x86>
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d11e      	bne.n	8000f76 <__lesf2+0x86>
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d023      	beq.n	8000f84 <__lesf2+0x94>
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	e006      	b.n	8000f4e <__lesf2+0x5e>
 8000f40:	2c00      	cmp	r4, #0
 8000f42:	d103      	bne.n	8000f4c <__lesf2+0x5c>
 8000f44:	28ff      	cmp	r0, #255	@ 0xff
 8000f46:	d1ec      	bne.n	8000f22 <__lesf2+0x32>
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	d017      	beq.n	8000f7c <__lesf2+0x8c>
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	bd30      	pop	{r4, r5, pc}
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d0e6      	beq.n	8000f22 <__lesf2+0x32>
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d1e4      	bne.n	8000f22 <__lesf2+0x32>
 8000f58:	4282      	cmp	r2, r0
 8000f5a:	dce2      	bgt.n	8000f22 <__lesf2+0x32>
 8000f5c:	db04      	blt.n	8000f68 <__lesf2+0x78>
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	d8df      	bhi.n	8000f22 <__lesf2+0x32>
 8000f62:	2000      	movs	r0, #0
 8000f64:	42ac      	cmp	r4, r5
 8000f66:	d2f2      	bcs.n	8000f4e <__lesf2+0x5e>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <__lesf2+0x94>
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	e7ee      	b.n	8000f4e <__lesf2+0x5e>
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d0ec      	beq.n	8000f4e <__lesf2+0x5e>
 8000f74:	e7d5      	b.n	8000f22 <__lesf2+0x32>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d1d3      	bne.n	8000f22 <__lesf2+0x32>
 8000f7a:	e7f5      	b.n	8000f68 <__lesf2+0x78>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d0e5      	beq.n	8000f4e <__lesf2+0x5e>
 8000f82:	e7ce      	b.n	8000f22 <__lesf2+0x32>
 8000f84:	2001      	movs	r0, #1
 8000f86:	4240      	negs	r0, r0
 8000f88:	e7e1      	b.n	8000f4e <__lesf2+0x5e>
 8000f8a:	46c0      	nop			@ (mov r8, r8)

08000f8c <__aeabi_fmul>:
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	464f      	mov	r7, r9
 8000f90:	4646      	mov	r6, r8
 8000f92:	46d6      	mov	lr, sl
 8000f94:	0243      	lsls	r3, r0, #9
 8000f96:	0a5b      	lsrs	r3, r3, #9
 8000f98:	0045      	lsls	r5, r0, #1
 8000f9a:	b5c0      	push	{r6, r7, lr}
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	1c0f      	adds	r7, r1, #0
 8000fa0:	0e2d      	lsrs	r5, r5, #24
 8000fa2:	0fc6      	lsrs	r6, r0, #31
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fmul+0x1e>
 8000fa8:	e088      	b.n	80010bc <__aeabi_fmul+0x130>
 8000faa:	2dff      	cmp	r5, #255	@ 0xff
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fmul+0x24>
 8000fae:	e08d      	b.n	80010cc <__aeabi_fmul+0x140>
 8000fb0:	2280      	movs	r2, #128	@ 0x80
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	04d2      	lsls	r2, r2, #19
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4691      	mov	r9, r2
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	469a      	mov	sl, r3
 8000fc0:	3d7f      	subs	r5, #127	@ 0x7f
 8000fc2:	027c      	lsls	r4, r7, #9
 8000fc4:	007b      	lsls	r3, r7, #1
 8000fc6:	0a64      	lsrs	r4, r4, #9
 8000fc8:	0e1b      	lsrs	r3, r3, #24
 8000fca:	0fff      	lsrs	r7, r7, #31
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d068      	beq.n	80010a2 <__aeabi_fmul+0x116>
 8000fd0:	2bff      	cmp	r3, #255	@ 0xff
 8000fd2:	d021      	beq.n	8001018 <__aeabi_fmul+0x8c>
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	00e4      	lsls	r4, r4, #3
 8000fd8:	04d2      	lsls	r2, r2, #19
 8000fda:	4314      	orrs	r4, r2
 8000fdc:	4642      	mov	r2, r8
 8000fde:	3b7f      	subs	r3, #127	@ 0x7f
 8000fe0:	195b      	adds	r3, r3, r5
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	1c5d      	adds	r5, r3, #1
 8000fe6:	2a0a      	cmp	r2, #10
 8000fe8:	dc2e      	bgt.n	8001048 <__aeabi_fmul+0xbc>
 8000fea:	407e      	eors	r6, r7
 8000fec:	4642      	mov	r2, r8
 8000fee:	2a02      	cmp	r2, #2
 8000ff0:	dc23      	bgt.n	800103a <__aeabi_fmul+0xae>
 8000ff2:	3a01      	subs	r2, #1
 8000ff4:	2a01      	cmp	r2, #1
 8000ff6:	d900      	bls.n	8000ffa <__aeabi_fmul+0x6e>
 8000ff8:	e0bd      	b.n	8001176 <__aeabi_fmul+0x1ea>
 8000ffa:	2902      	cmp	r1, #2
 8000ffc:	d06e      	beq.n	80010dc <__aeabi_fmul+0x150>
 8000ffe:	2901      	cmp	r1, #1
 8001000:	d12c      	bne.n	800105c <__aeabi_fmul+0xd0>
 8001002:	2000      	movs	r0, #0
 8001004:	2200      	movs	r2, #0
 8001006:	05c0      	lsls	r0, r0, #23
 8001008:	07f6      	lsls	r6, r6, #31
 800100a:	4310      	orrs	r0, r2
 800100c:	4330      	orrs	r0, r6
 800100e:	bce0      	pop	{r5, r6, r7}
 8001010:	46ba      	mov	sl, r7
 8001012:	46b1      	mov	r9, r6
 8001014:	46a8      	mov	r8, r5
 8001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001018:	002b      	movs	r3, r5
 800101a:	33ff      	adds	r3, #255	@ 0xff
 800101c:	2c00      	cmp	r4, #0
 800101e:	d065      	beq.n	80010ec <__aeabi_fmul+0x160>
 8001020:	2203      	movs	r2, #3
 8001022:	4641      	mov	r1, r8
 8001024:	4311      	orrs	r1, r2
 8001026:	0032      	movs	r2, r6
 8001028:	3501      	adds	r5, #1
 800102a:	4688      	mov	r8, r1
 800102c:	407a      	eors	r2, r7
 800102e:	35ff      	adds	r5, #255	@ 0xff
 8001030:	290a      	cmp	r1, #10
 8001032:	dd00      	ble.n	8001036 <__aeabi_fmul+0xaa>
 8001034:	e0d8      	b.n	80011e8 <__aeabi_fmul+0x25c>
 8001036:	0016      	movs	r6, r2
 8001038:	2103      	movs	r1, #3
 800103a:	4640      	mov	r0, r8
 800103c:	2201      	movs	r2, #1
 800103e:	4082      	lsls	r2, r0
 8001040:	20a6      	movs	r0, #166	@ 0xa6
 8001042:	00c0      	lsls	r0, r0, #3
 8001044:	4202      	tst	r2, r0
 8001046:	d020      	beq.n	800108a <__aeabi_fmul+0xfe>
 8001048:	4653      	mov	r3, sl
 800104a:	2b02      	cmp	r3, #2
 800104c:	d046      	beq.n	80010dc <__aeabi_fmul+0x150>
 800104e:	2b03      	cmp	r3, #3
 8001050:	d100      	bne.n	8001054 <__aeabi_fmul+0xc8>
 8001052:	e0bb      	b.n	80011cc <__aeabi_fmul+0x240>
 8001054:	4651      	mov	r1, sl
 8001056:	464c      	mov	r4, r9
 8001058:	2901      	cmp	r1, #1
 800105a:	d0d2      	beq.n	8001002 <__aeabi_fmul+0x76>
 800105c:	002b      	movs	r3, r5
 800105e:	337f      	adds	r3, #127	@ 0x7f
 8001060:	2b00      	cmp	r3, #0
 8001062:	dd70      	ble.n	8001146 <__aeabi_fmul+0x1ba>
 8001064:	0762      	lsls	r2, r4, #29
 8001066:	d004      	beq.n	8001072 <__aeabi_fmul+0xe6>
 8001068:	220f      	movs	r2, #15
 800106a:	4022      	ands	r2, r4
 800106c:	2a04      	cmp	r2, #4
 800106e:	d000      	beq.n	8001072 <__aeabi_fmul+0xe6>
 8001070:	3404      	adds	r4, #4
 8001072:	0122      	lsls	r2, r4, #4
 8001074:	d503      	bpl.n	800107e <__aeabi_fmul+0xf2>
 8001076:	4b63      	ldr	r3, [pc, #396]	@ (8001204 <__aeabi_fmul+0x278>)
 8001078:	401c      	ands	r4, r3
 800107a:	002b      	movs	r3, r5
 800107c:	3380      	adds	r3, #128	@ 0x80
 800107e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001080:	dc2c      	bgt.n	80010dc <__aeabi_fmul+0x150>
 8001082:	01a2      	lsls	r2, r4, #6
 8001084:	0a52      	lsrs	r2, r2, #9
 8001086:	b2d8      	uxtb	r0, r3
 8001088:	e7bd      	b.n	8001006 <__aeabi_fmul+0x7a>
 800108a:	2090      	movs	r0, #144	@ 0x90
 800108c:	0080      	lsls	r0, r0, #2
 800108e:	4202      	tst	r2, r0
 8001090:	d127      	bne.n	80010e2 <__aeabi_fmul+0x156>
 8001092:	38b9      	subs	r0, #185	@ 0xb9
 8001094:	38ff      	subs	r0, #255	@ 0xff
 8001096:	4210      	tst	r0, r2
 8001098:	d06d      	beq.n	8001176 <__aeabi_fmul+0x1ea>
 800109a:	003e      	movs	r6, r7
 800109c:	46a1      	mov	r9, r4
 800109e:	468a      	mov	sl, r1
 80010a0:	e7d2      	b.n	8001048 <__aeabi_fmul+0xbc>
 80010a2:	2c00      	cmp	r4, #0
 80010a4:	d141      	bne.n	800112a <__aeabi_fmul+0x19e>
 80010a6:	2301      	movs	r3, #1
 80010a8:	4642      	mov	r2, r8
 80010aa:	431a      	orrs	r2, r3
 80010ac:	4690      	mov	r8, r2
 80010ae:	002b      	movs	r3, r5
 80010b0:	4642      	mov	r2, r8
 80010b2:	2101      	movs	r1, #1
 80010b4:	1c5d      	adds	r5, r3, #1
 80010b6:	2a0a      	cmp	r2, #10
 80010b8:	dd97      	ble.n	8000fea <__aeabi_fmul+0x5e>
 80010ba:	e7c5      	b.n	8001048 <__aeabi_fmul+0xbc>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d126      	bne.n	800110e <__aeabi_fmul+0x182>
 80010c0:	2304      	movs	r3, #4
 80010c2:	4698      	mov	r8, r3
 80010c4:	3b03      	subs	r3, #3
 80010c6:	2500      	movs	r5, #0
 80010c8:	469a      	mov	sl, r3
 80010ca:	e77a      	b.n	8000fc2 <__aeabi_fmul+0x36>
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d118      	bne.n	8001102 <__aeabi_fmul+0x176>
 80010d0:	2308      	movs	r3, #8
 80010d2:	4698      	mov	r8, r3
 80010d4:	3b06      	subs	r3, #6
 80010d6:	25ff      	movs	r5, #255	@ 0xff
 80010d8:	469a      	mov	sl, r3
 80010da:	e772      	b.n	8000fc2 <__aeabi_fmul+0x36>
 80010dc:	20ff      	movs	r0, #255	@ 0xff
 80010de:	2200      	movs	r2, #0
 80010e0:	e791      	b.n	8001006 <__aeabi_fmul+0x7a>
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	2600      	movs	r6, #0
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	03d2      	lsls	r2, r2, #15
 80010ea:	e78c      	b.n	8001006 <__aeabi_fmul+0x7a>
 80010ec:	4641      	mov	r1, r8
 80010ee:	2202      	movs	r2, #2
 80010f0:	3501      	adds	r5, #1
 80010f2:	4311      	orrs	r1, r2
 80010f4:	4688      	mov	r8, r1
 80010f6:	35ff      	adds	r5, #255	@ 0xff
 80010f8:	290a      	cmp	r1, #10
 80010fa:	dca5      	bgt.n	8001048 <__aeabi_fmul+0xbc>
 80010fc:	2102      	movs	r1, #2
 80010fe:	407e      	eors	r6, r7
 8001100:	e774      	b.n	8000fec <__aeabi_fmul+0x60>
 8001102:	230c      	movs	r3, #12
 8001104:	4698      	mov	r8, r3
 8001106:	3b09      	subs	r3, #9
 8001108:	25ff      	movs	r5, #255	@ 0xff
 800110a:	469a      	mov	sl, r3
 800110c:	e759      	b.n	8000fc2 <__aeabi_fmul+0x36>
 800110e:	0018      	movs	r0, r3
 8001110:	f002 fa6a 	bl	80035e8 <__clzsi2>
 8001114:	464a      	mov	r2, r9
 8001116:	1f43      	subs	r3, r0, #5
 8001118:	2576      	movs	r5, #118	@ 0x76
 800111a:	409a      	lsls	r2, r3
 800111c:	2300      	movs	r3, #0
 800111e:	426d      	negs	r5, r5
 8001120:	4691      	mov	r9, r2
 8001122:	4698      	mov	r8, r3
 8001124:	469a      	mov	sl, r3
 8001126:	1a2d      	subs	r5, r5, r0
 8001128:	e74b      	b.n	8000fc2 <__aeabi_fmul+0x36>
 800112a:	0020      	movs	r0, r4
 800112c:	f002 fa5c 	bl	80035e8 <__clzsi2>
 8001130:	4642      	mov	r2, r8
 8001132:	1f43      	subs	r3, r0, #5
 8001134:	409c      	lsls	r4, r3
 8001136:	1a2b      	subs	r3, r5, r0
 8001138:	3b76      	subs	r3, #118	@ 0x76
 800113a:	2100      	movs	r1, #0
 800113c:	1c5d      	adds	r5, r3, #1
 800113e:	2a0a      	cmp	r2, #10
 8001140:	dc00      	bgt.n	8001144 <__aeabi_fmul+0x1b8>
 8001142:	e752      	b.n	8000fea <__aeabi_fmul+0x5e>
 8001144:	e780      	b.n	8001048 <__aeabi_fmul+0xbc>
 8001146:	2201      	movs	r2, #1
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b1b      	cmp	r3, #27
 800114c:	dd00      	ble.n	8001150 <__aeabi_fmul+0x1c4>
 800114e:	e758      	b.n	8001002 <__aeabi_fmul+0x76>
 8001150:	359e      	adds	r5, #158	@ 0x9e
 8001152:	0022      	movs	r2, r4
 8001154:	40ac      	lsls	r4, r5
 8001156:	40da      	lsrs	r2, r3
 8001158:	1e63      	subs	r3, r4, #1
 800115a:	419c      	sbcs	r4, r3
 800115c:	4322      	orrs	r2, r4
 800115e:	0753      	lsls	r3, r2, #29
 8001160:	d004      	beq.n	800116c <__aeabi_fmul+0x1e0>
 8001162:	230f      	movs	r3, #15
 8001164:	4013      	ands	r3, r2
 8001166:	2b04      	cmp	r3, #4
 8001168:	d000      	beq.n	800116c <__aeabi_fmul+0x1e0>
 800116a:	3204      	adds	r2, #4
 800116c:	0153      	lsls	r3, r2, #5
 800116e:	d537      	bpl.n	80011e0 <__aeabi_fmul+0x254>
 8001170:	2001      	movs	r0, #1
 8001172:	2200      	movs	r2, #0
 8001174:	e747      	b.n	8001006 <__aeabi_fmul+0x7a>
 8001176:	0c21      	lsrs	r1, r4, #16
 8001178:	464a      	mov	r2, r9
 800117a:	0424      	lsls	r4, r4, #16
 800117c:	0c24      	lsrs	r4, r4, #16
 800117e:	0027      	movs	r7, r4
 8001180:	0c10      	lsrs	r0, r2, #16
 8001182:	0412      	lsls	r2, r2, #16
 8001184:	0c12      	lsrs	r2, r2, #16
 8001186:	4344      	muls	r4, r0
 8001188:	4357      	muls	r7, r2
 800118a:	4348      	muls	r0, r1
 800118c:	4351      	muls	r1, r2
 800118e:	0c3a      	lsrs	r2, r7, #16
 8001190:	1909      	adds	r1, r1, r4
 8001192:	1852      	adds	r2, r2, r1
 8001194:	4294      	cmp	r4, r2
 8001196:	d903      	bls.n	80011a0 <__aeabi_fmul+0x214>
 8001198:	2180      	movs	r1, #128	@ 0x80
 800119a:	0249      	lsls	r1, r1, #9
 800119c:	468c      	mov	ip, r1
 800119e:	4460      	add	r0, ip
 80011a0:	043f      	lsls	r7, r7, #16
 80011a2:	0411      	lsls	r1, r2, #16
 80011a4:	0c3f      	lsrs	r7, r7, #16
 80011a6:	19c9      	adds	r1, r1, r7
 80011a8:	018c      	lsls	r4, r1, #6
 80011aa:	1e67      	subs	r7, r4, #1
 80011ac:	41bc      	sbcs	r4, r7
 80011ae:	0c12      	lsrs	r2, r2, #16
 80011b0:	0e89      	lsrs	r1, r1, #26
 80011b2:	1812      	adds	r2, r2, r0
 80011b4:	430c      	orrs	r4, r1
 80011b6:	0192      	lsls	r2, r2, #6
 80011b8:	4314      	orrs	r4, r2
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	d50e      	bpl.n	80011dc <__aeabi_fmul+0x250>
 80011be:	2301      	movs	r3, #1
 80011c0:	0862      	lsrs	r2, r4, #1
 80011c2:	401c      	ands	r4, r3
 80011c4:	4314      	orrs	r4, r2
 80011c6:	e749      	b.n	800105c <__aeabi_fmul+0xd0>
 80011c8:	003e      	movs	r6, r7
 80011ca:	46a1      	mov	r9, r4
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	464b      	mov	r3, r9
 80011d0:	03d2      	lsls	r2, r2, #15
 80011d2:	431a      	orrs	r2, r3
 80011d4:	0252      	lsls	r2, r2, #9
 80011d6:	20ff      	movs	r0, #255	@ 0xff
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	e714      	b.n	8001006 <__aeabi_fmul+0x7a>
 80011dc:	001d      	movs	r5, r3
 80011de:	e73d      	b.n	800105c <__aeabi_fmul+0xd0>
 80011e0:	0192      	lsls	r2, r2, #6
 80011e2:	2000      	movs	r0, #0
 80011e4:	0a52      	lsrs	r2, r2, #9
 80011e6:	e70e      	b.n	8001006 <__aeabi_fmul+0x7a>
 80011e8:	290f      	cmp	r1, #15
 80011ea:	d1ed      	bne.n	80011c8 <__aeabi_fmul+0x23c>
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	464b      	mov	r3, r9
 80011f0:	03d2      	lsls	r2, r2, #15
 80011f2:	4213      	tst	r3, r2
 80011f4:	d0ea      	beq.n	80011cc <__aeabi_fmul+0x240>
 80011f6:	4214      	tst	r4, r2
 80011f8:	d1e8      	bne.n	80011cc <__aeabi_fmul+0x240>
 80011fa:	003e      	movs	r6, r7
 80011fc:	20ff      	movs	r0, #255	@ 0xff
 80011fe:	4322      	orrs	r2, r4
 8001200:	e701      	b.n	8001006 <__aeabi_fmul+0x7a>
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	f7ffffff 	.word	0xf7ffffff

08001208 <__aeabi_fsub>:
 8001208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120a:	4647      	mov	r7, r8
 800120c:	46ce      	mov	lr, r9
 800120e:	024e      	lsls	r6, r1, #9
 8001210:	0243      	lsls	r3, r0, #9
 8001212:	0045      	lsls	r5, r0, #1
 8001214:	0a72      	lsrs	r2, r6, #9
 8001216:	0fc4      	lsrs	r4, r0, #31
 8001218:	0048      	lsls	r0, r1, #1
 800121a:	b580      	push	{r7, lr}
 800121c:	4694      	mov	ip, r2
 800121e:	0a5f      	lsrs	r7, r3, #9
 8001220:	0e2d      	lsrs	r5, r5, #24
 8001222:	099b      	lsrs	r3, r3, #6
 8001224:	0e00      	lsrs	r0, r0, #24
 8001226:	0fc9      	lsrs	r1, r1, #31
 8001228:	09b6      	lsrs	r6, r6, #6
 800122a:	28ff      	cmp	r0, #255	@ 0xff
 800122c:	d024      	beq.n	8001278 <__aeabi_fsub+0x70>
 800122e:	2201      	movs	r2, #1
 8001230:	4051      	eors	r1, r2
 8001232:	1a2a      	subs	r2, r5, r0
 8001234:	428c      	cmp	r4, r1
 8001236:	d00f      	beq.n	8001258 <__aeabi_fsub+0x50>
 8001238:	2a00      	cmp	r2, #0
 800123a:	dc00      	bgt.n	800123e <__aeabi_fsub+0x36>
 800123c:	e16a      	b.n	8001514 <__aeabi_fsub+0x30c>
 800123e:	2800      	cmp	r0, #0
 8001240:	d135      	bne.n	80012ae <__aeabi_fsub+0xa6>
 8001242:	2e00      	cmp	r6, #0
 8001244:	d100      	bne.n	8001248 <__aeabi_fsub+0x40>
 8001246:	e0a2      	b.n	800138e <__aeabi_fsub+0x186>
 8001248:	1e51      	subs	r1, r2, #1
 800124a:	2a01      	cmp	r2, #1
 800124c:	d100      	bne.n	8001250 <__aeabi_fsub+0x48>
 800124e:	e124      	b.n	800149a <__aeabi_fsub+0x292>
 8001250:	2aff      	cmp	r2, #255	@ 0xff
 8001252:	d021      	beq.n	8001298 <__aeabi_fsub+0x90>
 8001254:	000a      	movs	r2, r1
 8001256:	e02f      	b.n	80012b8 <__aeabi_fsub+0xb0>
 8001258:	2a00      	cmp	r2, #0
 800125a:	dc00      	bgt.n	800125e <__aeabi_fsub+0x56>
 800125c:	e167      	b.n	800152e <__aeabi_fsub+0x326>
 800125e:	2800      	cmp	r0, #0
 8001260:	d05e      	beq.n	8001320 <__aeabi_fsub+0x118>
 8001262:	2dff      	cmp	r5, #255	@ 0xff
 8001264:	d018      	beq.n	8001298 <__aeabi_fsub+0x90>
 8001266:	2180      	movs	r1, #128	@ 0x80
 8001268:	04c9      	lsls	r1, r1, #19
 800126a:	430e      	orrs	r6, r1
 800126c:	2a1b      	cmp	r2, #27
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x6a>
 8001270:	e076      	b.n	8001360 <__aeabi_fsub+0x158>
 8001272:	002a      	movs	r2, r5
 8001274:	3301      	adds	r3, #1
 8001276:	e032      	b.n	80012de <__aeabi_fsub+0xd6>
 8001278:	002a      	movs	r2, r5
 800127a:	3aff      	subs	r2, #255	@ 0xff
 800127c:	4691      	mov	r9, r2
 800127e:	2e00      	cmp	r6, #0
 8001280:	d042      	beq.n	8001308 <__aeabi_fsub+0x100>
 8001282:	428c      	cmp	r4, r1
 8001284:	d055      	beq.n	8001332 <__aeabi_fsub+0x12a>
 8001286:	464a      	mov	r2, r9
 8001288:	2a00      	cmp	r2, #0
 800128a:	d100      	bne.n	800128e <__aeabi_fsub+0x86>
 800128c:	e09c      	b.n	80013c8 <__aeabi_fsub+0x1c0>
 800128e:	2d00      	cmp	r5, #0
 8001290:	d100      	bne.n	8001294 <__aeabi_fsub+0x8c>
 8001292:	e077      	b.n	8001384 <__aeabi_fsub+0x17c>
 8001294:	000c      	movs	r4, r1
 8001296:	0033      	movs	r3, r6
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x98>
 800129e:	e06e      	b.n	800137e <__aeabi_fsub+0x176>
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	03d2      	lsls	r2, r2, #15
 80012a4:	4313      	orrs	r3, r2
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	20ff      	movs	r0, #255	@ 0xff
 80012aa:	0a5b      	lsrs	r3, r3, #9
 80012ac:	e024      	b.n	80012f8 <__aeabi_fsub+0xf0>
 80012ae:	2dff      	cmp	r5, #255	@ 0xff
 80012b0:	d0f2      	beq.n	8001298 <__aeabi_fsub+0x90>
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	04c9      	lsls	r1, r1, #19
 80012b6:	430e      	orrs	r6, r1
 80012b8:	2101      	movs	r1, #1
 80012ba:	2a1b      	cmp	r2, #27
 80012bc:	dc08      	bgt.n	80012d0 <__aeabi_fsub+0xc8>
 80012be:	0031      	movs	r1, r6
 80012c0:	2020      	movs	r0, #32
 80012c2:	40d1      	lsrs	r1, r2
 80012c4:	1a82      	subs	r2, r0, r2
 80012c6:	4096      	lsls	r6, r2
 80012c8:	0032      	movs	r2, r6
 80012ca:	1e50      	subs	r0, r2, #1
 80012cc:	4182      	sbcs	r2, r0
 80012ce:	4311      	orrs	r1, r2
 80012d0:	1a5b      	subs	r3, r3, r1
 80012d2:	015a      	lsls	r2, r3, #5
 80012d4:	d460      	bmi.n	8001398 <__aeabi_fsub+0x190>
 80012d6:	2107      	movs	r1, #7
 80012d8:	002a      	movs	r2, r5
 80012da:	4019      	ands	r1, r3
 80012dc:	d057      	beq.n	800138e <__aeabi_fsub+0x186>
 80012de:	210f      	movs	r1, #15
 80012e0:	4019      	ands	r1, r3
 80012e2:	2904      	cmp	r1, #4
 80012e4:	d000      	beq.n	80012e8 <__aeabi_fsub+0xe0>
 80012e6:	3304      	adds	r3, #4
 80012e8:	0159      	lsls	r1, r3, #5
 80012ea:	d550      	bpl.n	800138e <__aeabi_fsub+0x186>
 80012ec:	1c50      	adds	r0, r2, #1
 80012ee:	2afe      	cmp	r2, #254	@ 0xfe
 80012f0:	d045      	beq.n	800137e <__aeabi_fsub+0x176>
 80012f2:	019b      	lsls	r3, r3, #6
 80012f4:	b2c0      	uxtb	r0, r0
 80012f6:	0a5b      	lsrs	r3, r3, #9
 80012f8:	05c0      	lsls	r0, r0, #23
 80012fa:	4318      	orrs	r0, r3
 80012fc:	07e4      	lsls	r4, r4, #31
 80012fe:	4320      	orrs	r0, r4
 8001300:	bcc0      	pop	{r6, r7}
 8001302:	46b9      	mov	r9, r7
 8001304:	46b0      	mov	r8, r6
 8001306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001308:	2201      	movs	r2, #1
 800130a:	4051      	eors	r1, r2
 800130c:	428c      	cmp	r4, r1
 800130e:	d1ba      	bne.n	8001286 <__aeabi_fsub+0x7e>
 8001310:	464a      	mov	r2, r9
 8001312:	2a00      	cmp	r2, #0
 8001314:	d010      	beq.n	8001338 <__aeabi_fsub+0x130>
 8001316:	2d00      	cmp	r5, #0
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0x114>
 800131a:	e098      	b.n	800144e <__aeabi_fsub+0x246>
 800131c:	2300      	movs	r3, #0
 800131e:	e7bb      	b.n	8001298 <__aeabi_fsub+0x90>
 8001320:	2e00      	cmp	r6, #0
 8001322:	d034      	beq.n	800138e <__aeabi_fsub+0x186>
 8001324:	1e51      	subs	r1, r2, #1
 8001326:	2a01      	cmp	r2, #1
 8001328:	d06e      	beq.n	8001408 <__aeabi_fsub+0x200>
 800132a:	2aff      	cmp	r2, #255	@ 0xff
 800132c:	d0b4      	beq.n	8001298 <__aeabi_fsub+0x90>
 800132e:	000a      	movs	r2, r1
 8001330:	e79c      	b.n	800126c <__aeabi_fsub+0x64>
 8001332:	2a00      	cmp	r2, #0
 8001334:	d000      	beq.n	8001338 <__aeabi_fsub+0x130>
 8001336:	e088      	b.n	800144a <__aeabi_fsub+0x242>
 8001338:	20fe      	movs	r0, #254	@ 0xfe
 800133a:	1c6a      	adds	r2, r5, #1
 800133c:	4210      	tst	r0, r2
 800133e:	d000      	beq.n	8001342 <__aeabi_fsub+0x13a>
 8001340:	e092      	b.n	8001468 <__aeabi_fsub+0x260>
 8001342:	2d00      	cmp	r5, #0
 8001344:	d000      	beq.n	8001348 <__aeabi_fsub+0x140>
 8001346:	e0a4      	b.n	8001492 <__aeabi_fsub+0x28a>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d100      	bne.n	800134e <__aeabi_fsub+0x146>
 800134c:	e0cb      	b.n	80014e6 <__aeabi_fsub+0x2de>
 800134e:	2e00      	cmp	r6, #0
 8001350:	d000      	beq.n	8001354 <__aeabi_fsub+0x14c>
 8001352:	e0ca      	b.n	80014ea <__aeabi_fsub+0x2e2>
 8001354:	2200      	movs	r2, #0
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	0a5b      	lsrs	r3, r3, #9
 800135c:	b2d0      	uxtb	r0, r2
 800135e:	e7cb      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001360:	0031      	movs	r1, r6
 8001362:	2020      	movs	r0, #32
 8001364:	40d1      	lsrs	r1, r2
 8001366:	1a82      	subs	r2, r0, r2
 8001368:	4096      	lsls	r6, r2
 800136a:	0032      	movs	r2, r6
 800136c:	1e50      	subs	r0, r2, #1
 800136e:	4182      	sbcs	r2, r0
 8001370:	430a      	orrs	r2, r1
 8001372:	189b      	adds	r3, r3, r2
 8001374:	015a      	lsls	r2, r3, #5
 8001376:	d5ae      	bpl.n	80012d6 <__aeabi_fsub+0xce>
 8001378:	1c6a      	adds	r2, r5, #1
 800137a:	2dfe      	cmp	r5, #254	@ 0xfe
 800137c:	d14a      	bne.n	8001414 <__aeabi_fsub+0x20c>
 800137e:	20ff      	movs	r0, #255	@ 0xff
 8001380:	2300      	movs	r3, #0
 8001382:	e7b9      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001384:	22ff      	movs	r2, #255	@ 0xff
 8001386:	2b00      	cmp	r3, #0
 8001388:	d14b      	bne.n	8001422 <__aeabi_fsub+0x21a>
 800138a:	000c      	movs	r4, r1
 800138c:	0033      	movs	r3, r6
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	2aff      	cmp	r2, #255	@ 0xff
 8001392:	d100      	bne.n	8001396 <__aeabi_fsub+0x18e>
 8001394:	e781      	b.n	800129a <__aeabi_fsub+0x92>
 8001396:	e7df      	b.n	8001358 <__aeabi_fsub+0x150>
 8001398:	019f      	lsls	r7, r3, #6
 800139a:	09bf      	lsrs	r7, r7, #6
 800139c:	0038      	movs	r0, r7
 800139e:	f002 f923 	bl	80035e8 <__clzsi2>
 80013a2:	3805      	subs	r0, #5
 80013a4:	4087      	lsls	r7, r0
 80013a6:	4285      	cmp	r5, r0
 80013a8:	dc21      	bgt.n	80013ee <__aeabi_fsub+0x1e6>
 80013aa:	003b      	movs	r3, r7
 80013ac:	2120      	movs	r1, #32
 80013ae:	1b42      	subs	r2, r0, r5
 80013b0:	3201      	adds	r2, #1
 80013b2:	40d3      	lsrs	r3, r2
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	4097      	lsls	r7, r2
 80013b8:	1e7a      	subs	r2, r7, #1
 80013ba:	4197      	sbcs	r7, r2
 80013bc:	2200      	movs	r2, #0
 80013be:	433b      	orrs	r3, r7
 80013c0:	0759      	lsls	r1, r3, #29
 80013c2:	d000      	beq.n	80013c6 <__aeabi_fsub+0x1be>
 80013c4:	e78b      	b.n	80012de <__aeabi_fsub+0xd6>
 80013c6:	e78f      	b.n	80012e8 <__aeabi_fsub+0xe0>
 80013c8:	20fe      	movs	r0, #254	@ 0xfe
 80013ca:	1c6a      	adds	r2, r5, #1
 80013cc:	4210      	tst	r0, r2
 80013ce:	d112      	bne.n	80013f6 <__aeabi_fsub+0x1ee>
 80013d0:	2d00      	cmp	r5, #0
 80013d2:	d152      	bne.n	800147a <__aeabi_fsub+0x272>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d07c      	beq.n	80014d2 <__aeabi_fsub+0x2ca>
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d0bb      	beq.n	8001354 <__aeabi_fsub+0x14c>
 80013dc:	1b9a      	subs	r2, r3, r6
 80013de:	0150      	lsls	r0, r2, #5
 80013e0:	d400      	bmi.n	80013e4 <__aeabi_fsub+0x1dc>
 80013e2:	e08b      	b.n	80014fc <__aeabi_fsub+0x2f4>
 80013e4:	2401      	movs	r4, #1
 80013e6:	2200      	movs	r2, #0
 80013e8:	1af3      	subs	r3, r6, r3
 80013ea:	400c      	ands	r4, r1
 80013ec:	e7e8      	b.n	80013c0 <__aeabi_fsub+0x1b8>
 80013ee:	4b56      	ldr	r3, [pc, #344]	@ (8001548 <__aeabi_fsub+0x340>)
 80013f0:	1a2a      	subs	r2, r5, r0
 80013f2:	403b      	ands	r3, r7
 80013f4:	e7e4      	b.n	80013c0 <__aeabi_fsub+0x1b8>
 80013f6:	1b9f      	subs	r7, r3, r6
 80013f8:	017a      	lsls	r2, r7, #5
 80013fa:	d446      	bmi.n	800148a <__aeabi_fsub+0x282>
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d1cd      	bne.n	800139c <__aeabi_fsub+0x194>
 8001400:	2400      	movs	r4, #0
 8001402:	2000      	movs	r0, #0
 8001404:	2300      	movs	r3, #0
 8001406:	e777      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001408:	199b      	adds	r3, r3, r6
 800140a:	2501      	movs	r5, #1
 800140c:	3201      	adds	r2, #1
 800140e:	0159      	lsls	r1, r3, #5
 8001410:	d400      	bmi.n	8001414 <__aeabi_fsub+0x20c>
 8001412:	e760      	b.n	80012d6 <__aeabi_fsub+0xce>
 8001414:	2101      	movs	r1, #1
 8001416:	484d      	ldr	r0, [pc, #308]	@ (800154c <__aeabi_fsub+0x344>)
 8001418:	4019      	ands	r1, r3
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	4003      	ands	r3, r0
 800141e:	430b      	orrs	r3, r1
 8001420:	e7ce      	b.n	80013c0 <__aeabi_fsub+0x1b8>
 8001422:	1e57      	subs	r7, r2, #1
 8001424:	2a01      	cmp	r2, #1
 8001426:	d05a      	beq.n	80014de <__aeabi_fsub+0x2d6>
 8001428:	000c      	movs	r4, r1
 800142a:	2aff      	cmp	r2, #255	@ 0xff
 800142c:	d033      	beq.n	8001496 <__aeabi_fsub+0x28e>
 800142e:	2201      	movs	r2, #1
 8001430:	2f1b      	cmp	r7, #27
 8001432:	dc07      	bgt.n	8001444 <__aeabi_fsub+0x23c>
 8001434:	2120      	movs	r1, #32
 8001436:	1bc9      	subs	r1, r1, r7
 8001438:	001a      	movs	r2, r3
 800143a:	408b      	lsls	r3, r1
 800143c:	40fa      	lsrs	r2, r7
 800143e:	1e59      	subs	r1, r3, #1
 8001440:	418b      	sbcs	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	0005      	movs	r5, r0
 8001446:	1ab3      	subs	r3, r6, r2
 8001448:	e743      	b.n	80012d2 <__aeabi_fsub+0xca>
 800144a:	2d00      	cmp	r5, #0
 800144c:	d123      	bne.n	8001496 <__aeabi_fsub+0x28e>
 800144e:	22ff      	movs	r2, #255	@ 0xff
 8001450:	2b00      	cmp	r3, #0
 8001452:	d09b      	beq.n	800138c <__aeabi_fsub+0x184>
 8001454:	1e51      	subs	r1, r2, #1
 8001456:	2a01      	cmp	r2, #1
 8001458:	d0d6      	beq.n	8001408 <__aeabi_fsub+0x200>
 800145a:	2aff      	cmp	r2, #255	@ 0xff
 800145c:	d01b      	beq.n	8001496 <__aeabi_fsub+0x28e>
 800145e:	291b      	cmp	r1, #27
 8001460:	dd2c      	ble.n	80014bc <__aeabi_fsub+0x2b4>
 8001462:	0002      	movs	r2, r0
 8001464:	1c73      	adds	r3, r6, #1
 8001466:	e73a      	b.n	80012de <__aeabi_fsub+0xd6>
 8001468:	2aff      	cmp	r2, #255	@ 0xff
 800146a:	d088      	beq.n	800137e <__aeabi_fsub+0x176>
 800146c:	199b      	adds	r3, r3, r6
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	0759      	lsls	r1, r3, #29
 8001472:	d000      	beq.n	8001476 <__aeabi_fsub+0x26e>
 8001474:	e733      	b.n	80012de <__aeabi_fsub+0xd6>
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	e76e      	b.n	8001358 <__aeabi_fsub+0x150>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d110      	bne.n	80014a0 <__aeabi_fsub+0x298>
 800147e:	2e00      	cmp	r6, #0
 8001480:	d043      	beq.n	800150a <__aeabi_fsub+0x302>
 8001482:	2401      	movs	r4, #1
 8001484:	0033      	movs	r3, r6
 8001486:	400c      	ands	r4, r1
 8001488:	e706      	b.n	8001298 <__aeabi_fsub+0x90>
 800148a:	2401      	movs	r4, #1
 800148c:	1af7      	subs	r7, r6, r3
 800148e:	400c      	ands	r4, r1
 8001490:	e784      	b.n	800139c <__aeabi_fsub+0x194>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <__aeabi_fsub+0x298>
 8001496:	0033      	movs	r3, r6
 8001498:	e6fe      	b.n	8001298 <__aeabi_fsub+0x90>
 800149a:	2501      	movs	r5, #1
 800149c:	1b9b      	subs	r3, r3, r6
 800149e:	e718      	b.n	80012d2 <__aeabi_fsub+0xca>
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_fsub+0x29e>
 80014a4:	e6f8      	b.n	8001298 <__aeabi_fsub+0x90>
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	03d2      	lsls	r2, r2, #15
 80014aa:	4297      	cmp	r7, r2
 80014ac:	d304      	bcc.n	80014b8 <__aeabi_fsub+0x2b0>
 80014ae:	4594      	cmp	ip, r2
 80014b0:	d202      	bcs.n	80014b8 <__aeabi_fsub+0x2b0>
 80014b2:	2401      	movs	r4, #1
 80014b4:	0033      	movs	r3, r6
 80014b6:	400c      	ands	r4, r1
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	e6f1      	b.n	80012a0 <__aeabi_fsub+0x98>
 80014bc:	001a      	movs	r2, r3
 80014be:	2520      	movs	r5, #32
 80014c0:	40ca      	lsrs	r2, r1
 80014c2:	1a69      	subs	r1, r5, r1
 80014c4:	408b      	lsls	r3, r1
 80014c6:	1e59      	subs	r1, r3, #1
 80014c8:	418b      	sbcs	r3, r1
 80014ca:	4313      	orrs	r3, r2
 80014cc:	0005      	movs	r5, r0
 80014ce:	199b      	adds	r3, r3, r6
 80014d0:	e750      	b.n	8001374 <__aeabi_fsub+0x16c>
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d094      	beq.n	8001400 <__aeabi_fsub+0x1f8>
 80014d6:	2401      	movs	r4, #1
 80014d8:	0033      	movs	r3, r6
 80014da:	400c      	ands	r4, r1
 80014dc:	e73a      	b.n	8001354 <__aeabi_fsub+0x14c>
 80014de:	000c      	movs	r4, r1
 80014e0:	2501      	movs	r5, #1
 80014e2:	1af3      	subs	r3, r6, r3
 80014e4:	e6f5      	b.n	80012d2 <__aeabi_fsub+0xca>
 80014e6:	0033      	movs	r3, r6
 80014e8:	e734      	b.n	8001354 <__aeabi_fsub+0x14c>
 80014ea:	199b      	adds	r3, r3, r6
 80014ec:	2200      	movs	r2, #0
 80014ee:	0159      	lsls	r1, r3, #5
 80014f0:	d5c1      	bpl.n	8001476 <__aeabi_fsub+0x26e>
 80014f2:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <__aeabi_fsub+0x340>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	2201      	movs	r2, #1
 80014fa:	e72d      	b.n	8001358 <__aeabi_fsub+0x150>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d100      	bne.n	8001502 <__aeabi_fsub+0x2fa>
 8001500:	e77e      	b.n	8001400 <__aeabi_fsub+0x1f8>
 8001502:	0013      	movs	r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	e726      	b.n	8001358 <__aeabi_fsub+0x150>
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	2400      	movs	r4, #0
 800150e:	20ff      	movs	r0, #255	@ 0xff
 8001510:	03db      	lsls	r3, r3, #15
 8001512:	e6f1      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001514:	2a00      	cmp	r2, #0
 8001516:	d100      	bne.n	800151a <__aeabi_fsub+0x312>
 8001518:	e756      	b.n	80013c8 <__aeabi_fsub+0x1c0>
 800151a:	1b47      	subs	r7, r0, r5
 800151c:	003a      	movs	r2, r7
 800151e:	2d00      	cmp	r5, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_fsub+0x31c>
 8001522:	e730      	b.n	8001386 <__aeabi_fsub+0x17e>
 8001524:	2280      	movs	r2, #128	@ 0x80
 8001526:	04d2      	lsls	r2, r2, #19
 8001528:	000c      	movs	r4, r1
 800152a:	4313      	orrs	r3, r2
 800152c:	e77f      	b.n	800142e <__aeabi_fsub+0x226>
 800152e:	2a00      	cmp	r2, #0
 8001530:	d100      	bne.n	8001534 <__aeabi_fsub+0x32c>
 8001532:	e701      	b.n	8001338 <__aeabi_fsub+0x130>
 8001534:	1b41      	subs	r1, r0, r5
 8001536:	2d00      	cmp	r5, #0
 8001538:	d101      	bne.n	800153e <__aeabi_fsub+0x336>
 800153a:	000a      	movs	r2, r1
 800153c:	e788      	b.n	8001450 <__aeabi_fsub+0x248>
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	04d2      	lsls	r2, r2, #19
 8001542:	4313      	orrs	r3, r2
 8001544:	e78b      	b.n	800145e <__aeabi_fsub+0x256>
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	fbffffff 	.word	0xfbffffff
 800154c:	7dffffff 	.word	0x7dffffff

08001550 <__aeabi_fcmpun>:
 8001550:	0243      	lsls	r3, r0, #9
 8001552:	024a      	lsls	r2, r1, #9
 8001554:	0040      	lsls	r0, r0, #1
 8001556:	0049      	lsls	r1, r1, #1
 8001558:	0a5b      	lsrs	r3, r3, #9
 800155a:	0a52      	lsrs	r2, r2, #9
 800155c:	0e09      	lsrs	r1, r1, #24
 800155e:	0e00      	lsrs	r0, r0, #24
 8001560:	28ff      	cmp	r0, #255	@ 0xff
 8001562:	d006      	beq.n	8001572 <__aeabi_fcmpun+0x22>
 8001564:	2000      	movs	r0, #0
 8001566:	29ff      	cmp	r1, #255	@ 0xff
 8001568:	d102      	bne.n	8001570 <__aeabi_fcmpun+0x20>
 800156a:	1e53      	subs	r3, r2, #1
 800156c:	419a      	sbcs	r2, r3
 800156e:	0010      	movs	r0, r2
 8001570:	4770      	bx	lr
 8001572:	38fe      	subs	r0, #254	@ 0xfe
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1fb      	bne.n	8001570 <__aeabi_fcmpun+0x20>
 8001578:	e7f4      	b.n	8001564 <__aeabi_fcmpun+0x14>
 800157a:	46c0      	nop			@ (mov r8, r8)

0800157c <__aeabi_f2iz>:
 800157c:	0241      	lsls	r1, r0, #9
 800157e:	0042      	lsls	r2, r0, #1
 8001580:	0fc3      	lsrs	r3, r0, #31
 8001582:	0a49      	lsrs	r1, r1, #9
 8001584:	2000      	movs	r0, #0
 8001586:	0e12      	lsrs	r2, r2, #24
 8001588:	2a7e      	cmp	r2, #126	@ 0x7e
 800158a:	dd03      	ble.n	8001594 <__aeabi_f2iz+0x18>
 800158c:	2a9d      	cmp	r2, #157	@ 0x9d
 800158e:	dd02      	ble.n	8001596 <__aeabi_f2iz+0x1a>
 8001590:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <__aeabi_f2iz+0x3c>)
 8001592:	1898      	adds	r0, r3, r2
 8001594:	4770      	bx	lr
 8001596:	2080      	movs	r0, #128	@ 0x80
 8001598:	0400      	lsls	r0, r0, #16
 800159a:	4301      	orrs	r1, r0
 800159c:	2a95      	cmp	r2, #149	@ 0x95
 800159e:	dc07      	bgt.n	80015b0 <__aeabi_f2iz+0x34>
 80015a0:	2096      	movs	r0, #150	@ 0x96
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	40d1      	lsrs	r1, r2
 80015a6:	4248      	negs	r0, r1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f3      	bne.n	8001594 <__aeabi_f2iz+0x18>
 80015ac:	0008      	movs	r0, r1
 80015ae:	e7f1      	b.n	8001594 <__aeabi_f2iz+0x18>
 80015b0:	3a96      	subs	r2, #150	@ 0x96
 80015b2:	4091      	lsls	r1, r2
 80015b4:	e7f7      	b.n	80015a6 <__aeabi_f2iz+0x2a>
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	7fffffff 	.word	0x7fffffff

080015bc <__aeabi_i2f>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	2800      	cmp	r0, #0
 80015c0:	d013      	beq.n	80015ea <__aeabi_i2f+0x2e>
 80015c2:	17c3      	asrs	r3, r0, #31
 80015c4:	18c5      	adds	r5, r0, r3
 80015c6:	405d      	eors	r5, r3
 80015c8:	0fc4      	lsrs	r4, r0, #31
 80015ca:	0028      	movs	r0, r5
 80015cc:	f002 f80c 	bl	80035e8 <__clzsi2>
 80015d0:	239e      	movs	r3, #158	@ 0x9e
 80015d2:	0001      	movs	r1, r0
 80015d4:	1a1b      	subs	r3, r3, r0
 80015d6:	2b96      	cmp	r3, #150	@ 0x96
 80015d8:	dc0f      	bgt.n	80015fa <__aeabi_i2f+0x3e>
 80015da:	2808      	cmp	r0, #8
 80015dc:	d034      	beq.n	8001648 <__aeabi_i2f+0x8c>
 80015de:	3908      	subs	r1, #8
 80015e0:	408d      	lsls	r5, r1
 80015e2:	026d      	lsls	r5, r5, #9
 80015e4:	0a6d      	lsrs	r5, r5, #9
 80015e6:	b2d8      	uxtb	r0, r3
 80015e8:	e002      	b.n	80015f0 <__aeabi_i2f+0x34>
 80015ea:	2400      	movs	r4, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	2500      	movs	r5, #0
 80015f0:	05c0      	lsls	r0, r0, #23
 80015f2:	4328      	orrs	r0, r5
 80015f4:	07e4      	lsls	r4, r4, #31
 80015f6:	4320      	orrs	r0, r4
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	2b99      	cmp	r3, #153	@ 0x99
 80015fc:	dc16      	bgt.n	800162c <__aeabi_i2f+0x70>
 80015fe:	1f42      	subs	r2, r0, #5
 8001600:	2805      	cmp	r0, #5
 8001602:	d000      	beq.n	8001606 <__aeabi_i2f+0x4a>
 8001604:	4095      	lsls	r5, r2
 8001606:	002a      	movs	r2, r5
 8001608:	4811      	ldr	r0, [pc, #68]	@ (8001650 <__aeabi_i2f+0x94>)
 800160a:	4002      	ands	r2, r0
 800160c:	076e      	lsls	r6, r5, #29
 800160e:	d009      	beq.n	8001624 <__aeabi_i2f+0x68>
 8001610:	260f      	movs	r6, #15
 8001612:	4035      	ands	r5, r6
 8001614:	2d04      	cmp	r5, #4
 8001616:	d005      	beq.n	8001624 <__aeabi_i2f+0x68>
 8001618:	3204      	adds	r2, #4
 800161a:	0155      	lsls	r5, r2, #5
 800161c:	d502      	bpl.n	8001624 <__aeabi_i2f+0x68>
 800161e:	239f      	movs	r3, #159	@ 0x9f
 8001620:	4002      	ands	r2, r0
 8001622:	1a5b      	subs	r3, r3, r1
 8001624:	0192      	lsls	r2, r2, #6
 8001626:	0a55      	lsrs	r5, r2, #9
 8001628:	b2d8      	uxtb	r0, r3
 800162a:	e7e1      	b.n	80015f0 <__aeabi_i2f+0x34>
 800162c:	2205      	movs	r2, #5
 800162e:	1a12      	subs	r2, r2, r0
 8001630:	0028      	movs	r0, r5
 8001632:	40d0      	lsrs	r0, r2
 8001634:	0002      	movs	r2, r0
 8001636:	0008      	movs	r0, r1
 8001638:	301b      	adds	r0, #27
 800163a:	4085      	lsls	r5, r0
 800163c:	0028      	movs	r0, r5
 800163e:	1e45      	subs	r5, r0, #1
 8001640:	41a8      	sbcs	r0, r5
 8001642:	4302      	orrs	r2, r0
 8001644:	0015      	movs	r5, r2
 8001646:	e7de      	b.n	8001606 <__aeabi_i2f+0x4a>
 8001648:	026d      	lsls	r5, r5, #9
 800164a:	2096      	movs	r0, #150	@ 0x96
 800164c:	0a6d      	lsrs	r5, r5, #9
 800164e:	e7cf      	b.n	80015f0 <__aeabi_i2f+0x34>
 8001650:	fbffffff 	.word	0xfbffffff

08001654 <__aeabi_ui2f>:
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	1e04      	subs	r4, r0, #0
 8001658:	d00e      	beq.n	8001678 <__aeabi_ui2f+0x24>
 800165a:	f001 ffc5 	bl	80035e8 <__clzsi2>
 800165e:	239e      	movs	r3, #158	@ 0x9e
 8001660:	0001      	movs	r1, r0
 8001662:	1a1b      	subs	r3, r3, r0
 8001664:	2b96      	cmp	r3, #150	@ 0x96
 8001666:	dc0c      	bgt.n	8001682 <__aeabi_ui2f+0x2e>
 8001668:	2808      	cmp	r0, #8
 800166a:	d02f      	beq.n	80016cc <__aeabi_ui2f+0x78>
 800166c:	3908      	subs	r1, #8
 800166e:	408c      	lsls	r4, r1
 8001670:	0264      	lsls	r4, r4, #9
 8001672:	0a64      	lsrs	r4, r4, #9
 8001674:	b2d8      	uxtb	r0, r3
 8001676:	e001      	b.n	800167c <__aeabi_ui2f+0x28>
 8001678:	2000      	movs	r0, #0
 800167a:	2400      	movs	r4, #0
 800167c:	05c0      	lsls	r0, r0, #23
 800167e:	4320      	orrs	r0, r4
 8001680:	bd70      	pop	{r4, r5, r6, pc}
 8001682:	2b99      	cmp	r3, #153	@ 0x99
 8001684:	dc16      	bgt.n	80016b4 <__aeabi_ui2f+0x60>
 8001686:	1f42      	subs	r2, r0, #5
 8001688:	2805      	cmp	r0, #5
 800168a:	d000      	beq.n	800168e <__aeabi_ui2f+0x3a>
 800168c:	4094      	lsls	r4, r2
 800168e:	0022      	movs	r2, r4
 8001690:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <__aeabi_ui2f+0x80>)
 8001692:	4002      	ands	r2, r0
 8001694:	0765      	lsls	r5, r4, #29
 8001696:	d009      	beq.n	80016ac <__aeabi_ui2f+0x58>
 8001698:	250f      	movs	r5, #15
 800169a:	402c      	ands	r4, r5
 800169c:	2c04      	cmp	r4, #4
 800169e:	d005      	beq.n	80016ac <__aeabi_ui2f+0x58>
 80016a0:	3204      	adds	r2, #4
 80016a2:	0154      	lsls	r4, r2, #5
 80016a4:	d502      	bpl.n	80016ac <__aeabi_ui2f+0x58>
 80016a6:	239f      	movs	r3, #159	@ 0x9f
 80016a8:	4002      	ands	r2, r0
 80016aa:	1a5b      	subs	r3, r3, r1
 80016ac:	0192      	lsls	r2, r2, #6
 80016ae:	0a54      	lsrs	r4, r2, #9
 80016b0:	b2d8      	uxtb	r0, r3
 80016b2:	e7e3      	b.n	800167c <__aeabi_ui2f+0x28>
 80016b4:	0002      	movs	r2, r0
 80016b6:	0020      	movs	r0, r4
 80016b8:	321b      	adds	r2, #27
 80016ba:	4090      	lsls	r0, r2
 80016bc:	0002      	movs	r2, r0
 80016be:	1e50      	subs	r0, r2, #1
 80016c0:	4182      	sbcs	r2, r0
 80016c2:	2005      	movs	r0, #5
 80016c4:	1a40      	subs	r0, r0, r1
 80016c6:	40c4      	lsrs	r4, r0
 80016c8:	4314      	orrs	r4, r2
 80016ca:	e7e0      	b.n	800168e <__aeabi_ui2f+0x3a>
 80016cc:	0264      	lsls	r4, r4, #9
 80016ce:	2096      	movs	r0, #150	@ 0x96
 80016d0:	0a64      	lsrs	r4, r4, #9
 80016d2:	e7d3      	b.n	800167c <__aeabi_ui2f+0x28>
 80016d4:	fbffffff 	.word	0xfbffffff

080016d8 <__aeabi_dadd>:
 80016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016da:	4657      	mov	r7, sl
 80016dc:	464e      	mov	r6, r9
 80016de:	4645      	mov	r5, r8
 80016e0:	46de      	mov	lr, fp
 80016e2:	b5e0      	push	{r5, r6, r7, lr}
 80016e4:	b083      	sub	sp, #12
 80016e6:	9000      	str	r0, [sp, #0]
 80016e8:	9101      	str	r1, [sp, #4]
 80016ea:	030c      	lsls	r4, r1, #12
 80016ec:	004f      	lsls	r7, r1, #1
 80016ee:	0fce      	lsrs	r6, r1, #31
 80016f0:	0a61      	lsrs	r1, r4, #9
 80016f2:	9c00      	ldr	r4, [sp, #0]
 80016f4:	031d      	lsls	r5, r3, #12
 80016f6:	0f64      	lsrs	r4, r4, #29
 80016f8:	430c      	orrs	r4, r1
 80016fa:	9900      	ldr	r1, [sp, #0]
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	00c8      	lsls	r0, r1, #3
 8001702:	0059      	lsls	r1, r3, #1
 8001704:	0d4b      	lsrs	r3, r1, #21
 8001706:	4699      	mov	r9, r3
 8001708:	9a00      	ldr	r2, [sp, #0]
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	0a6d      	lsrs	r5, r5, #9
 800170e:	0fd9      	lsrs	r1, r3, #31
 8001710:	0f53      	lsrs	r3, r2, #29
 8001712:	432b      	orrs	r3, r5
 8001714:	469a      	mov	sl, r3
 8001716:	9b00      	ldr	r3, [sp, #0]
 8001718:	0d7f      	lsrs	r7, r7, #21
 800171a:	00da      	lsls	r2, r3, #3
 800171c:	4694      	mov	ip, r2
 800171e:	464a      	mov	r2, r9
 8001720:	46b0      	mov	r8, r6
 8001722:	1aba      	subs	r2, r7, r2
 8001724:	428e      	cmp	r6, r1
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x52>
 8001728:	e0b0      	b.n	800188c <__aeabi_dadd+0x1b4>
 800172a:	2a00      	cmp	r2, #0
 800172c:	dc00      	bgt.n	8001730 <__aeabi_dadd+0x58>
 800172e:	e078      	b.n	8001822 <__aeabi_dadd+0x14a>
 8001730:	4649      	mov	r1, r9
 8001732:	2900      	cmp	r1, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x60>
 8001736:	e0e9      	b.n	800190c <__aeabi_dadd+0x234>
 8001738:	49c9      	ldr	r1, [pc, #804]	@ (8001a60 <__aeabi_dadd+0x388>)
 800173a:	428f      	cmp	r7, r1
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x68>
 800173e:	e195      	b.n	8001a6c <__aeabi_dadd+0x394>
 8001740:	2501      	movs	r5, #1
 8001742:	2a38      	cmp	r2, #56	@ 0x38
 8001744:	dc16      	bgt.n	8001774 <__aeabi_dadd+0x9c>
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	4653      	mov	r3, sl
 800174a:	0409      	lsls	r1, r1, #16
 800174c:	430b      	orrs	r3, r1
 800174e:	469a      	mov	sl, r3
 8001750:	2a1f      	cmp	r2, #31
 8001752:	dd00      	ble.n	8001756 <__aeabi_dadd+0x7e>
 8001754:	e1e7      	b.n	8001b26 <__aeabi_dadd+0x44e>
 8001756:	2120      	movs	r1, #32
 8001758:	4655      	mov	r5, sl
 800175a:	1a8b      	subs	r3, r1, r2
 800175c:	4661      	mov	r1, ip
 800175e:	409d      	lsls	r5, r3
 8001760:	40d1      	lsrs	r1, r2
 8001762:	430d      	orrs	r5, r1
 8001764:	4661      	mov	r1, ip
 8001766:	4099      	lsls	r1, r3
 8001768:	1e4b      	subs	r3, r1, #1
 800176a:	4199      	sbcs	r1, r3
 800176c:	4653      	mov	r3, sl
 800176e:	40d3      	lsrs	r3, r2
 8001770:	430d      	orrs	r5, r1
 8001772:	1ae4      	subs	r4, r4, r3
 8001774:	1b45      	subs	r5, r0, r5
 8001776:	42a8      	cmp	r0, r5
 8001778:	4180      	sbcs	r0, r0
 800177a:	4240      	negs	r0, r0
 800177c:	1a24      	subs	r4, r4, r0
 800177e:	0223      	lsls	r3, r4, #8
 8001780:	d400      	bmi.n	8001784 <__aeabi_dadd+0xac>
 8001782:	e10f      	b.n	80019a4 <__aeabi_dadd+0x2cc>
 8001784:	0264      	lsls	r4, r4, #9
 8001786:	0a64      	lsrs	r4, r4, #9
 8001788:	2c00      	cmp	r4, #0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0xb6>
 800178c:	e139      	b.n	8001a02 <__aeabi_dadd+0x32a>
 800178e:	0020      	movs	r0, r4
 8001790:	f001 ff2a 	bl	80035e8 <__clzsi2>
 8001794:	0003      	movs	r3, r0
 8001796:	3b08      	subs	r3, #8
 8001798:	2120      	movs	r1, #32
 800179a:	0028      	movs	r0, r5
 800179c:	1aca      	subs	r2, r1, r3
 800179e:	40d0      	lsrs	r0, r2
 80017a0:	409c      	lsls	r4, r3
 80017a2:	0002      	movs	r2, r0
 80017a4:	409d      	lsls	r5, r3
 80017a6:	4322      	orrs	r2, r4
 80017a8:	429f      	cmp	r7, r3
 80017aa:	dd00      	ble.n	80017ae <__aeabi_dadd+0xd6>
 80017ac:	e173      	b.n	8001a96 <__aeabi_dadd+0x3be>
 80017ae:	1bd8      	subs	r0, r3, r7
 80017b0:	3001      	adds	r0, #1
 80017b2:	1a09      	subs	r1, r1, r0
 80017b4:	002c      	movs	r4, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	40c4      	lsrs	r4, r0
 80017ba:	1e6b      	subs	r3, r5, #1
 80017bc:	419d      	sbcs	r5, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	40c2      	lsrs	r2, r0
 80017c2:	408b      	lsls	r3, r1
 80017c4:	4325      	orrs	r5, r4
 80017c6:	2700      	movs	r7, #0
 80017c8:	0014      	movs	r4, r2
 80017ca:	431d      	orrs	r5, r3
 80017cc:	076b      	lsls	r3, r5, #29
 80017ce:	d009      	beq.n	80017e4 <__aeabi_dadd+0x10c>
 80017d0:	230f      	movs	r3, #15
 80017d2:	402b      	ands	r3, r5
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d005      	beq.n	80017e4 <__aeabi_dadd+0x10c>
 80017d8:	1d2b      	adds	r3, r5, #4
 80017da:	42ab      	cmp	r3, r5
 80017dc:	41ad      	sbcs	r5, r5
 80017de:	426d      	negs	r5, r5
 80017e0:	1964      	adds	r4, r4, r5
 80017e2:	001d      	movs	r5, r3
 80017e4:	0223      	lsls	r3, r4, #8
 80017e6:	d400      	bmi.n	80017ea <__aeabi_dadd+0x112>
 80017e8:	e12d      	b.n	8001a46 <__aeabi_dadd+0x36e>
 80017ea:	4a9d      	ldr	r2, [pc, #628]	@ (8001a60 <__aeabi_dadd+0x388>)
 80017ec:	3701      	adds	r7, #1
 80017ee:	4297      	cmp	r7, r2
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dadd+0x11c>
 80017f2:	e0d3      	b.n	800199c <__aeabi_dadd+0x2c4>
 80017f4:	4646      	mov	r6, r8
 80017f6:	499b      	ldr	r1, [pc, #620]	@ (8001a64 <__aeabi_dadd+0x38c>)
 80017f8:	08ed      	lsrs	r5, r5, #3
 80017fa:	4021      	ands	r1, r4
 80017fc:	074a      	lsls	r2, r1, #29
 80017fe:	432a      	orrs	r2, r5
 8001800:	057c      	lsls	r4, r7, #21
 8001802:	024d      	lsls	r5, r1, #9
 8001804:	0b2d      	lsrs	r5, r5, #12
 8001806:	0d64      	lsrs	r4, r4, #21
 8001808:	0524      	lsls	r4, r4, #20
 800180a:	432c      	orrs	r4, r5
 800180c:	07f6      	lsls	r6, r6, #31
 800180e:	4334      	orrs	r4, r6
 8001810:	0010      	movs	r0, r2
 8001812:	0021      	movs	r1, r4
 8001814:	b003      	add	sp, #12
 8001816:	bcf0      	pop	{r4, r5, r6, r7}
 8001818:	46bb      	mov	fp, r7
 800181a:	46b2      	mov	sl, r6
 800181c:	46a9      	mov	r9, r5
 800181e:	46a0      	mov	r8, r4
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001822:	2a00      	cmp	r2, #0
 8001824:	d100      	bne.n	8001828 <__aeabi_dadd+0x150>
 8001826:	e084      	b.n	8001932 <__aeabi_dadd+0x25a>
 8001828:	464a      	mov	r2, r9
 800182a:	1bd2      	subs	r2, r2, r7
 800182c:	2f00      	cmp	r7, #0
 800182e:	d000      	beq.n	8001832 <__aeabi_dadd+0x15a>
 8001830:	e16d      	b.n	8001b0e <__aeabi_dadd+0x436>
 8001832:	0025      	movs	r5, r4
 8001834:	4305      	orrs	r5, r0
 8001836:	d100      	bne.n	800183a <__aeabi_dadd+0x162>
 8001838:	e127      	b.n	8001a8a <__aeabi_dadd+0x3b2>
 800183a:	1e56      	subs	r6, r2, #1
 800183c:	2a01      	cmp	r2, #1
 800183e:	d100      	bne.n	8001842 <__aeabi_dadd+0x16a>
 8001840:	e23b      	b.n	8001cba <__aeabi_dadd+0x5e2>
 8001842:	4d87      	ldr	r5, [pc, #540]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001844:	42aa      	cmp	r2, r5
 8001846:	d100      	bne.n	800184a <__aeabi_dadd+0x172>
 8001848:	e26a      	b.n	8001d20 <__aeabi_dadd+0x648>
 800184a:	2501      	movs	r5, #1
 800184c:	2e38      	cmp	r6, #56	@ 0x38
 800184e:	dc12      	bgt.n	8001876 <__aeabi_dadd+0x19e>
 8001850:	0032      	movs	r2, r6
 8001852:	2a1f      	cmp	r2, #31
 8001854:	dd00      	ble.n	8001858 <__aeabi_dadd+0x180>
 8001856:	e1f8      	b.n	8001c4a <__aeabi_dadd+0x572>
 8001858:	2620      	movs	r6, #32
 800185a:	0025      	movs	r5, r4
 800185c:	1ab6      	subs	r6, r6, r2
 800185e:	0007      	movs	r7, r0
 8001860:	4653      	mov	r3, sl
 8001862:	40b0      	lsls	r0, r6
 8001864:	40d4      	lsrs	r4, r2
 8001866:	40b5      	lsls	r5, r6
 8001868:	40d7      	lsrs	r7, r2
 800186a:	1e46      	subs	r6, r0, #1
 800186c:	41b0      	sbcs	r0, r6
 800186e:	1b1b      	subs	r3, r3, r4
 8001870:	469a      	mov	sl, r3
 8001872:	433d      	orrs	r5, r7
 8001874:	4305      	orrs	r5, r0
 8001876:	4662      	mov	r2, ip
 8001878:	1b55      	subs	r5, r2, r5
 800187a:	45ac      	cmp	ip, r5
 800187c:	4192      	sbcs	r2, r2
 800187e:	4653      	mov	r3, sl
 8001880:	4252      	negs	r2, r2
 8001882:	000e      	movs	r6, r1
 8001884:	464f      	mov	r7, r9
 8001886:	4688      	mov	r8, r1
 8001888:	1a9c      	subs	r4, r3, r2
 800188a:	e778      	b.n	800177e <__aeabi_dadd+0xa6>
 800188c:	2a00      	cmp	r2, #0
 800188e:	dc00      	bgt.n	8001892 <__aeabi_dadd+0x1ba>
 8001890:	e08e      	b.n	80019b0 <__aeabi_dadd+0x2d8>
 8001892:	4649      	mov	r1, r9
 8001894:	2900      	cmp	r1, #0
 8001896:	d175      	bne.n	8001984 <__aeabi_dadd+0x2ac>
 8001898:	4661      	mov	r1, ip
 800189a:	4653      	mov	r3, sl
 800189c:	4319      	orrs	r1, r3
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x1ca>
 80018a0:	e0f6      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 80018a2:	1e51      	subs	r1, r2, #1
 80018a4:	2a01      	cmp	r2, #1
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x1d2>
 80018a8:	e191      	b.n	8001bce <__aeabi_dadd+0x4f6>
 80018aa:	4d6d      	ldr	r5, [pc, #436]	@ (8001a60 <__aeabi_dadd+0x388>)
 80018ac:	42aa      	cmp	r2, r5
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x1da>
 80018b0:	e0dc      	b.n	8001a6c <__aeabi_dadd+0x394>
 80018b2:	2501      	movs	r5, #1
 80018b4:	2938      	cmp	r1, #56	@ 0x38
 80018b6:	dc14      	bgt.n	80018e2 <__aeabi_dadd+0x20a>
 80018b8:	000a      	movs	r2, r1
 80018ba:	2a1f      	cmp	r2, #31
 80018bc:	dd00      	ble.n	80018c0 <__aeabi_dadd+0x1e8>
 80018be:	e1a2      	b.n	8001c06 <__aeabi_dadd+0x52e>
 80018c0:	2120      	movs	r1, #32
 80018c2:	4653      	mov	r3, sl
 80018c4:	1a89      	subs	r1, r1, r2
 80018c6:	408b      	lsls	r3, r1
 80018c8:	001d      	movs	r5, r3
 80018ca:	4663      	mov	r3, ip
 80018cc:	40d3      	lsrs	r3, r2
 80018ce:	431d      	orrs	r5, r3
 80018d0:	4663      	mov	r3, ip
 80018d2:	408b      	lsls	r3, r1
 80018d4:	0019      	movs	r1, r3
 80018d6:	1e4b      	subs	r3, r1, #1
 80018d8:	4199      	sbcs	r1, r3
 80018da:	4653      	mov	r3, sl
 80018dc:	40d3      	lsrs	r3, r2
 80018de:	430d      	orrs	r5, r1
 80018e0:	18e4      	adds	r4, r4, r3
 80018e2:	182d      	adds	r5, r5, r0
 80018e4:	4285      	cmp	r5, r0
 80018e6:	4180      	sbcs	r0, r0
 80018e8:	4240      	negs	r0, r0
 80018ea:	1824      	adds	r4, r4, r0
 80018ec:	0223      	lsls	r3, r4, #8
 80018ee:	d559      	bpl.n	80019a4 <__aeabi_dadd+0x2cc>
 80018f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a60 <__aeabi_dadd+0x388>)
 80018f2:	3701      	adds	r7, #1
 80018f4:	429f      	cmp	r7, r3
 80018f6:	d051      	beq.n	800199c <__aeabi_dadd+0x2c4>
 80018f8:	2101      	movs	r1, #1
 80018fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001a64 <__aeabi_dadd+0x38c>)
 80018fc:	086a      	lsrs	r2, r5, #1
 80018fe:	401c      	ands	r4, r3
 8001900:	4029      	ands	r1, r5
 8001902:	430a      	orrs	r2, r1
 8001904:	07e5      	lsls	r5, r4, #31
 8001906:	4315      	orrs	r5, r2
 8001908:	0864      	lsrs	r4, r4, #1
 800190a:	e75f      	b.n	80017cc <__aeabi_dadd+0xf4>
 800190c:	4661      	mov	r1, ip
 800190e:	4653      	mov	r3, sl
 8001910:	4319      	orrs	r1, r3
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x23e>
 8001914:	e0bc      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 8001916:	1e51      	subs	r1, r2, #1
 8001918:	2a01      	cmp	r2, #1
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x246>
 800191c:	e164      	b.n	8001be8 <__aeabi_dadd+0x510>
 800191e:	4d50      	ldr	r5, [pc, #320]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001920:	42aa      	cmp	r2, r5
 8001922:	d100      	bne.n	8001926 <__aeabi_dadd+0x24e>
 8001924:	e16a      	b.n	8001bfc <__aeabi_dadd+0x524>
 8001926:	2501      	movs	r5, #1
 8001928:	2938      	cmp	r1, #56	@ 0x38
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x256>
 800192c:	e722      	b.n	8001774 <__aeabi_dadd+0x9c>
 800192e:	000a      	movs	r2, r1
 8001930:	e70e      	b.n	8001750 <__aeabi_dadd+0x78>
 8001932:	4a4d      	ldr	r2, [pc, #308]	@ (8001a68 <__aeabi_dadd+0x390>)
 8001934:	1c7d      	adds	r5, r7, #1
 8001936:	4215      	tst	r5, r2
 8001938:	d000      	beq.n	800193c <__aeabi_dadd+0x264>
 800193a:	e0d0      	b.n	8001ade <__aeabi_dadd+0x406>
 800193c:	0025      	movs	r5, r4
 800193e:	4662      	mov	r2, ip
 8001940:	4653      	mov	r3, sl
 8001942:	4305      	orrs	r5, r0
 8001944:	431a      	orrs	r2, r3
 8001946:	2f00      	cmp	r7, #0
 8001948:	d000      	beq.n	800194c <__aeabi_dadd+0x274>
 800194a:	e137      	b.n	8001bbc <__aeabi_dadd+0x4e4>
 800194c:	2d00      	cmp	r5, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0x27a>
 8001950:	e1a8      	b.n	8001ca4 <__aeabi_dadd+0x5cc>
 8001952:	2a00      	cmp	r2, #0
 8001954:	d100      	bne.n	8001958 <__aeabi_dadd+0x280>
 8001956:	e16a      	b.n	8001c2e <__aeabi_dadd+0x556>
 8001958:	4663      	mov	r3, ip
 800195a:	1ac5      	subs	r5, r0, r3
 800195c:	4653      	mov	r3, sl
 800195e:	1ae2      	subs	r2, r4, r3
 8001960:	42a8      	cmp	r0, r5
 8001962:	419b      	sbcs	r3, r3
 8001964:	425b      	negs	r3, r3
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	021a      	lsls	r2, r3, #8
 800196a:	d400      	bmi.n	800196e <__aeabi_dadd+0x296>
 800196c:	e203      	b.n	8001d76 <__aeabi_dadd+0x69e>
 800196e:	4663      	mov	r3, ip
 8001970:	1a1d      	subs	r5, r3, r0
 8001972:	45ac      	cmp	ip, r5
 8001974:	4192      	sbcs	r2, r2
 8001976:	4653      	mov	r3, sl
 8001978:	4252      	negs	r2, r2
 800197a:	1b1c      	subs	r4, r3, r4
 800197c:	000e      	movs	r6, r1
 800197e:	4688      	mov	r8, r1
 8001980:	1aa4      	subs	r4, r4, r2
 8001982:	e723      	b.n	80017cc <__aeabi_dadd+0xf4>
 8001984:	4936      	ldr	r1, [pc, #216]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001986:	428f      	cmp	r7, r1
 8001988:	d070      	beq.n	8001a6c <__aeabi_dadd+0x394>
 800198a:	2501      	movs	r5, #1
 800198c:	2a38      	cmp	r2, #56	@ 0x38
 800198e:	dca8      	bgt.n	80018e2 <__aeabi_dadd+0x20a>
 8001990:	2180      	movs	r1, #128	@ 0x80
 8001992:	4653      	mov	r3, sl
 8001994:	0409      	lsls	r1, r1, #16
 8001996:	430b      	orrs	r3, r1
 8001998:	469a      	mov	sl, r3
 800199a:	e78e      	b.n	80018ba <__aeabi_dadd+0x1e2>
 800199c:	003c      	movs	r4, r7
 800199e:	2500      	movs	r5, #0
 80019a0:	2200      	movs	r2, #0
 80019a2:	e731      	b.n	8001808 <__aeabi_dadd+0x130>
 80019a4:	2307      	movs	r3, #7
 80019a6:	402b      	ands	r3, r5
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d000      	beq.n	80019ae <__aeabi_dadd+0x2d6>
 80019ac:	e710      	b.n	80017d0 <__aeabi_dadd+0xf8>
 80019ae:	e093      	b.n	8001ad8 <__aeabi_dadd+0x400>
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d074      	beq.n	8001a9e <__aeabi_dadd+0x3c6>
 80019b4:	464a      	mov	r2, r9
 80019b6:	1bd2      	subs	r2, r2, r7
 80019b8:	2f00      	cmp	r7, #0
 80019ba:	d100      	bne.n	80019be <__aeabi_dadd+0x2e6>
 80019bc:	e0c7      	b.n	8001b4e <__aeabi_dadd+0x476>
 80019be:	4928      	ldr	r1, [pc, #160]	@ (8001a60 <__aeabi_dadd+0x388>)
 80019c0:	4589      	cmp	r9, r1
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x2ee>
 80019c4:	e185      	b.n	8001cd2 <__aeabi_dadd+0x5fa>
 80019c6:	2501      	movs	r5, #1
 80019c8:	2a38      	cmp	r2, #56	@ 0x38
 80019ca:	dc12      	bgt.n	80019f2 <__aeabi_dadd+0x31a>
 80019cc:	2180      	movs	r1, #128	@ 0x80
 80019ce:	0409      	lsls	r1, r1, #16
 80019d0:	430c      	orrs	r4, r1
 80019d2:	2a1f      	cmp	r2, #31
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dadd+0x300>
 80019d6:	e1ab      	b.n	8001d30 <__aeabi_dadd+0x658>
 80019d8:	2120      	movs	r1, #32
 80019da:	0025      	movs	r5, r4
 80019dc:	1a89      	subs	r1, r1, r2
 80019de:	0007      	movs	r7, r0
 80019e0:	4088      	lsls	r0, r1
 80019e2:	408d      	lsls	r5, r1
 80019e4:	40d7      	lsrs	r7, r2
 80019e6:	1e41      	subs	r1, r0, #1
 80019e8:	4188      	sbcs	r0, r1
 80019ea:	40d4      	lsrs	r4, r2
 80019ec:	433d      	orrs	r5, r7
 80019ee:	4305      	orrs	r5, r0
 80019f0:	44a2      	add	sl, r4
 80019f2:	4465      	add	r5, ip
 80019f4:	4565      	cmp	r5, ip
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4252      	negs	r2, r2
 80019fa:	4452      	add	r2, sl
 80019fc:	0014      	movs	r4, r2
 80019fe:	464f      	mov	r7, r9
 8001a00:	e774      	b.n	80018ec <__aeabi_dadd+0x214>
 8001a02:	0028      	movs	r0, r5
 8001a04:	f001 fdf0 	bl	80035e8 <__clzsi2>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	2b1f      	cmp	r3, #31
 8001a0e:	dc00      	bgt.n	8001a12 <__aeabi_dadd+0x33a>
 8001a10:	e6c2      	b.n	8001798 <__aeabi_dadd+0xc0>
 8001a12:	002a      	movs	r2, r5
 8001a14:	3808      	subs	r0, #8
 8001a16:	4082      	lsls	r2, r0
 8001a18:	429f      	cmp	r7, r3
 8001a1a:	dd00      	ble.n	8001a1e <__aeabi_dadd+0x346>
 8001a1c:	e0a9      	b.n	8001b72 <__aeabi_dadd+0x49a>
 8001a1e:	1bdb      	subs	r3, r3, r7
 8001a20:	1c58      	adds	r0, r3, #1
 8001a22:	281f      	cmp	r0, #31
 8001a24:	dc00      	bgt.n	8001a28 <__aeabi_dadd+0x350>
 8001a26:	e1ac      	b.n	8001d82 <__aeabi_dadd+0x6aa>
 8001a28:	0015      	movs	r5, r2
 8001a2a:	3b1f      	subs	r3, #31
 8001a2c:	40dd      	lsrs	r5, r3
 8001a2e:	2820      	cmp	r0, #32
 8001a30:	d005      	beq.n	8001a3e <__aeabi_dadd+0x366>
 8001a32:	2340      	movs	r3, #64	@ 0x40
 8001a34:	1a1b      	subs	r3, r3, r0
 8001a36:	409a      	lsls	r2, r3
 8001a38:	1e53      	subs	r3, r2, #1
 8001a3a:	419a      	sbcs	r2, r3
 8001a3c:	4315      	orrs	r5, r2
 8001a3e:	2307      	movs	r3, #7
 8001a40:	2700      	movs	r7, #0
 8001a42:	402b      	ands	r3, r5
 8001a44:	e7b0      	b.n	80019a8 <__aeabi_dadd+0x2d0>
 8001a46:	08ed      	lsrs	r5, r5, #3
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001a4a:	0762      	lsls	r2, r4, #29
 8001a4c:	432a      	orrs	r2, r5
 8001a4e:	08e4      	lsrs	r4, r4, #3
 8001a50:	429f      	cmp	r7, r3
 8001a52:	d00f      	beq.n	8001a74 <__aeabi_dadd+0x39c>
 8001a54:	0324      	lsls	r4, r4, #12
 8001a56:	0b25      	lsrs	r5, r4, #12
 8001a58:	057c      	lsls	r4, r7, #21
 8001a5a:	0d64      	lsrs	r4, r4, #21
 8001a5c:	e6d4      	b.n	8001808 <__aeabi_dadd+0x130>
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	000007ff 	.word	0x000007ff
 8001a64:	ff7fffff 	.word	0xff7fffff
 8001a68:	000007fe 	.word	0x000007fe
 8001a6c:	08c0      	lsrs	r0, r0, #3
 8001a6e:	0762      	lsls	r2, r4, #29
 8001a70:	4302      	orrs	r2, r0
 8001a72:	08e4      	lsrs	r4, r4, #3
 8001a74:	0013      	movs	r3, r2
 8001a76:	4323      	orrs	r3, r4
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dadd+0x3a4>
 8001a7a:	e186      	b.n	8001d8a <__aeabi_dadd+0x6b2>
 8001a7c:	2580      	movs	r5, #128	@ 0x80
 8001a7e:	032d      	lsls	r5, r5, #12
 8001a80:	4325      	orrs	r5, r4
 8001a82:	032d      	lsls	r5, r5, #12
 8001a84:	4cc3      	ldr	r4, [pc, #780]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001a86:	0b2d      	lsrs	r5, r5, #12
 8001a88:	e6be      	b.n	8001808 <__aeabi_dadd+0x130>
 8001a8a:	4660      	mov	r0, ip
 8001a8c:	4654      	mov	r4, sl
 8001a8e:	000e      	movs	r6, r1
 8001a90:	0017      	movs	r7, r2
 8001a92:	08c5      	lsrs	r5, r0, #3
 8001a94:	e7d8      	b.n	8001a48 <__aeabi_dadd+0x370>
 8001a96:	4cc0      	ldr	r4, [pc, #768]	@ (8001d98 <__aeabi_dadd+0x6c0>)
 8001a98:	1aff      	subs	r7, r7, r3
 8001a9a:	4014      	ands	r4, r2
 8001a9c:	e696      	b.n	80017cc <__aeabi_dadd+0xf4>
 8001a9e:	4abf      	ldr	r2, [pc, #764]	@ (8001d9c <__aeabi_dadd+0x6c4>)
 8001aa0:	1c79      	adds	r1, r7, #1
 8001aa2:	4211      	tst	r1, r2
 8001aa4:	d16b      	bne.n	8001b7e <__aeabi_dadd+0x4a6>
 8001aa6:	0022      	movs	r2, r4
 8001aa8:	4302      	orrs	r2, r0
 8001aaa:	2f00      	cmp	r7, #0
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_dadd+0x3d8>
 8001aae:	e0db      	b.n	8001c68 <__aeabi_dadd+0x590>
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x3de>
 8001ab4:	e12d      	b.n	8001d12 <__aeabi_dadd+0x63a>
 8001ab6:	4662      	mov	r2, ip
 8001ab8:	4653      	mov	r3, sl
 8001aba:	431a      	orrs	r2, r3
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dadd+0x3e8>
 8001abe:	e0b6      	b.n	8001c2e <__aeabi_dadd+0x556>
 8001ac0:	4663      	mov	r3, ip
 8001ac2:	18c5      	adds	r5, r0, r3
 8001ac4:	4285      	cmp	r5, r0
 8001ac6:	4180      	sbcs	r0, r0
 8001ac8:	4454      	add	r4, sl
 8001aca:	4240      	negs	r0, r0
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	0223      	lsls	r3, r4, #8
 8001ad0:	d502      	bpl.n	8001ad8 <__aeabi_dadd+0x400>
 8001ad2:	000f      	movs	r7, r1
 8001ad4:	4bb0      	ldr	r3, [pc, #704]	@ (8001d98 <__aeabi_dadd+0x6c0>)
 8001ad6:	401c      	ands	r4, r3
 8001ad8:	003a      	movs	r2, r7
 8001ada:	0028      	movs	r0, r5
 8001adc:	e7d8      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 8001ade:	4662      	mov	r2, ip
 8001ae0:	1a85      	subs	r5, r0, r2
 8001ae2:	42a8      	cmp	r0, r5
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4653      	mov	r3, sl
 8001ae8:	4252      	negs	r2, r2
 8001aea:	4691      	mov	r9, r2
 8001aec:	1ae3      	subs	r3, r4, r3
 8001aee:	001a      	movs	r2, r3
 8001af0:	464b      	mov	r3, r9
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	4691      	mov	r9, r2
 8001af8:	021a      	lsls	r2, r3, #8
 8001afa:	d454      	bmi.n	8001ba6 <__aeabi_dadd+0x4ce>
 8001afc:	464a      	mov	r2, r9
 8001afe:	464c      	mov	r4, r9
 8001b00:	432a      	orrs	r2, r5
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dadd+0x42e>
 8001b04:	e640      	b.n	8001788 <__aeabi_dadd+0xb0>
 8001b06:	2600      	movs	r6, #0
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	e67c      	b.n	8001808 <__aeabi_dadd+0x130>
 8001b0e:	4da1      	ldr	r5, [pc, #644]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001b10:	45a9      	cmp	r9, r5
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dadd+0x43e>
 8001b14:	e090      	b.n	8001c38 <__aeabi_dadd+0x560>
 8001b16:	2501      	movs	r5, #1
 8001b18:	2a38      	cmp	r2, #56	@ 0x38
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dadd+0x446>
 8001b1c:	e6ab      	b.n	8001876 <__aeabi_dadd+0x19e>
 8001b1e:	2580      	movs	r5, #128	@ 0x80
 8001b20:	042d      	lsls	r5, r5, #16
 8001b22:	432c      	orrs	r4, r5
 8001b24:	e695      	b.n	8001852 <__aeabi_dadd+0x17a>
 8001b26:	0011      	movs	r1, r2
 8001b28:	4655      	mov	r5, sl
 8001b2a:	3920      	subs	r1, #32
 8001b2c:	40cd      	lsrs	r5, r1
 8001b2e:	46a9      	mov	r9, r5
 8001b30:	2a20      	cmp	r2, #32
 8001b32:	d006      	beq.n	8001b42 <__aeabi_dadd+0x46a>
 8001b34:	2140      	movs	r1, #64	@ 0x40
 8001b36:	4653      	mov	r3, sl
 8001b38:	1a8a      	subs	r2, r1, r2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	4662      	mov	r2, ip
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	4694      	mov	ip, r2
 8001b42:	4665      	mov	r5, ip
 8001b44:	1e6b      	subs	r3, r5, #1
 8001b46:	419d      	sbcs	r5, r3
 8001b48:	464b      	mov	r3, r9
 8001b4a:	431d      	orrs	r5, r3
 8001b4c:	e612      	b.n	8001774 <__aeabi_dadd+0x9c>
 8001b4e:	0021      	movs	r1, r4
 8001b50:	4301      	orrs	r1, r0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dadd+0x47e>
 8001b54:	e0c4      	b.n	8001ce0 <__aeabi_dadd+0x608>
 8001b56:	1e51      	subs	r1, r2, #1
 8001b58:	2a01      	cmp	r2, #1
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dadd+0x486>
 8001b5c:	e0fb      	b.n	8001d56 <__aeabi_dadd+0x67e>
 8001b5e:	4d8d      	ldr	r5, [pc, #564]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001b60:	42aa      	cmp	r2, r5
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dadd+0x48e>
 8001b64:	e0b5      	b.n	8001cd2 <__aeabi_dadd+0x5fa>
 8001b66:	2501      	movs	r5, #1
 8001b68:	2938      	cmp	r1, #56	@ 0x38
 8001b6a:	dd00      	ble.n	8001b6e <__aeabi_dadd+0x496>
 8001b6c:	e741      	b.n	80019f2 <__aeabi_dadd+0x31a>
 8001b6e:	000a      	movs	r2, r1
 8001b70:	e72f      	b.n	80019d2 <__aeabi_dadd+0x2fa>
 8001b72:	4c89      	ldr	r4, [pc, #548]	@ (8001d98 <__aeabi_dadd+0x6c0>)
 8001b74:	1aff      	subs	r7, r7, r3
 8001b76:	4014      	ands	r4, r2
 8001b78:	0762      	lsls	r2, r4, #29
 8001b7a:	08e4      	lsrs	r4, r4, #3
 8001b7c:	e76a      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001b7e:	4a85      	ldr	r2, [pc, #532]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001b80:	4291      	cmp	r1, r2
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dadd+0x4ae>
 8001b84:	e0e3      	b.n	8001d4e <__aeabi_dadd+0x676>
 8001b86:	4663      	mov	r3, ip
 8001b88:	18c2      	adds	r2, r0, r3
 8001b8a:	4282      	cmp	r2, r0
 8001b8c:	4180      	sbcs	r0, r0
 8001b8e:	0023      	movs	r3, r4
 8001b90:	4240      	negs	r0, r0
 8001b92:	4453      	add	r3, sl
 8001b94:	181b      	adds	r3, r3, r0
 8001b96:	07dd      	lsls	r5, r3, #31
 8001b98:	085c      	lsrs	r4, r3, #1
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	0852      	lsrs	r2, r2, #1
 8001b9e:	4315      	orrs	r5, r2
 8001ba0:	000f      	movs	r7, r1
 8001ba2:	402b      	ands	r3, r5
 8001ba4:	e700      	b.n	80019a8 <__aeabi_dadd+0x2d0>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	1a1d      	subs	r5, r3, r0
 8001baa:	45ac      	cmp	ip, r5
 8001bac:	4192      	sbcs	r2, r2
 8001bae:	4653      	mov	r3, sl
 8001bb0:	4252      	negs	r2, r2
 8001bb2:	1b1c      	subs	r4, r3, r4
 8001bb4:	000e      	movs	r6, r1
 8001bb6:	4688      	mov	r8, r1
 8001bb8:	1aa4      	subs	r4, r4, r2
 8001bba:	e5e5      	b.n	8001788 <__aeabi_dadd+0xb0>
 8001bbc:	2d00      	cmp	r5, #0
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dadd+0x4ea>
 8001bc0:	e091      	b.n	8001ce6 <__aeabi_dadd+0x60e>
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d138      	bne.n	8001c38 <__aeabi_dadd+0x560>
 8001bc6:	2480      	movs	r4, #128	@ 0x80
 8001bc8:	2600      	movs	r6, #0
 8001bca:	0324      	lsls	r4, r4, #12
 8001bcc:	e756      	b.n	8001a7c <__aeabi_dadd+0x3a4>
 8001bce:	4663      	mov	r3, ip
 8001bd0:	18c5      	adds	r5, r0, r3
 8001bd2:	4285      	cmp	r5, r0
 8001bd4:	4180      	sbcs	r0, r0
 8001bd6:	4454      	add	r4, sl
 8001bd8:	4240      	negs	r0, r0
 8001bda:	1824      	adds	r4, r4, r0
 8001bdc:	2701      	movs	r7, #1
 8001bde:	0223      	lsls	r3, r4, #8
 8001be0:	d400      	bmi.n	8001be4 <__aeabi_dadd+0x50c>
 8001be2:	e6df      	b.n	80019a4 <__aeabi_dadd+0x2cc>
 8001be4:	2702      	movs	r7, #2
 8001be6:	e687      	b.n	80018f8 <__aeabi_dadd+0x220>
 8001be8:	4663      	mov	r3, ip
 8001bea:	1ac5      	subs	r5, r0, r3
 8001bec:	42a8      	cmp	r0, r5
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4653      	mov	r3, sl
 8001bf2:	4240      	negs	r0, r0
 8001bf4:	1ae4      	subs	r4, r4, r3
 8001bf6:	2701      	movs	r7, #1
 8001bf8:	1a24      	subs	r4, r4, r0
 8001bfa:	e5c0      	b.n	800177e <__aeabi_dadd+0xa6>
 8001bfc:	0762      	lsls	r2, r4, #29
 8001bfe:	08c0      	lsrs	r0, r0, #3
 8001c00:	4302      	orrs	r2, r0
 8001c02:	08e4      	lsrs	r4, r4, #3
 8001c04:	e736      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001c06:	0011      	movs	r1, r2
 8001c08:	4653      	mov	r3, sl
 8001c0a:	3920      	subs	r1, #32
 8001c0c:	40cb      	lsrs	r3, r1
 8001c0e:	4699      	mov	r9, r3
 8001c10:	2a20      	cmp	r2, #32
 8001c12:	d006      	beq.n	8001c22 <__aeabi_dadd+0x54a>
 8001c14:	2140      	movs	r1, #64	@ 0x40
 8001c16:	4653      	mov	r3, sl
 8001c18:	1a8a      	subs	r2, r1, r2
 8001c1a:	4093      	lsls	r3, r2
 8001c1c:	4662      	mov	r2, ip
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	4694      	mov	ip, r2
 8001c22:	4665      	mov	r5, ip
 8001c24:	1e6b      	subs	r3, r5, #1
 8001c26:	419d      	sbcs	r5, r3
 8001c28:	464b      	mov	r3, r9
 8001c2a:	431d      	orrs	r5, r3
 8001c2c:	e659      	b.n	80018e2 <__aeabi_dadd+0x20a>
 8001c2e:	0762      	lsls	r2, r4, #29
 8001c30:	08c0      	lsrs	r0, r0, #3
 8001c32:	4302      	orrs	r2, r0
 8001c34:	08e4      	lsrs	r4, r4, #3
 8001c36:	e70d      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001c38:	4653      	mov	r3, sl
 8001c3a:	075a      	lsls	r2, r3, #29
 8001c3c:	4663      	mov	r3, ip
 8001c3e:	08d8      	lsrs	r0, r3, #3
 8001c40:	4653      	mov	r3, sl
 8001c42:	000e      	movs	r6, r1
 8001c44:	4302      	orrs	r2, r0
 8001c46:	08dc      	lsrs	r4, r3, #3
 8001c48:	e714      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001c4a:	0015      	movs	r5, r2
 8001c4c:	0026      	movs	r6, r4
 8001c4e:	3d20      	subs	r5, #32
 8001c50:	40ee      	lsrs	r6, r5
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d003      	beq.n	8001c5e <__aeabi_dadd+0x586>
 8001c56:	2540      	movs	r5, #64	@ 0x40
 8001c58:	1aaa      	subs	r2, r5, r2
 8001c5a:	4094      	lsls	r4, r2
 8001c5c:	4320      	orrs	r0, r4
 8001c5e:	1e42      	subs	r2, r0, #1
 8001c60:	4190      	sbcs	r0, r2
 8001c62:	0005      	movs	r5, r0
 8001c64:	4335      	orrs	r5, r6
 8001c66:	e606      	b.n	8001876 <__aeabi_dadd+0x19e>
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d07c      	beq.n	8001d66 <__aeabi_dadd+0x68e>
 8001c6c:	4662      	mov	r2, ip
 8001c6e:	4653      	mov	r3, sl
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	431a      	orrs	r2, r3
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dadd+0x5a0>
 8001c76:	e6fa      	b.n	8001a6e <__aeabi_dadd+0x396>
 8001c78:	0762      	lsls	r2, r4, #29
 8001c7a:	4310      	orrs	r0, r2
 8001c7c:	2280      	movs	r2, #128	@ 0x80
 8001c7e:	08e4      	lsrs	r4, r4, #3
 8001c80:	0312      	lsls	r2, r2, #12
 8001c82:	4214      	tst	r4, r2
 8001c84:	d008      	beq.n	8001c98 <__aeabi_dadd+0x5c0>
 8001c86:	08d9      	lsrs	r1, r3, #3
 8001c88:	4211      	tst	r1, r2
 8001c8a:	d105      	bne.n	8001c98 <__aeabi_dadd+0x5c0>
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	08d8      	lsrs	r0, r3, #3
 8001c90:	4653      	mov	r3, sl
 8001c92:	000c      	movs	r4, r1
 8001c94:	075b      	lsls	r3, r3, #29
 8001c96:	4318      	orrs	r0, r3
 8001c98:	0f42      	lsrs	r2, r0, #29
 8001c9a:	00c0      	lsls	r0, r0, #3
 8001c9c:	08c0      	lsrs	r0, r0, #3
 8001c9e:	0752      	lsls	r2, r2, #29
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	e6e7      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001ca4:	2a00      	cmp	r2, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dadd+0x5d2>
 8001ca8:	e72d      	b.n	8001b06 <__aeabi_dadd+0x42e>
 8001caa:	4663      	mov	r3, ip
 8001cac:	08d8      	lsrs	r0, r3, #3
 8001cae:	4653      	mov	r3, sl
 8001cb0:	075a      	lsls	r2, r3, #29
 8001cb2:	000e      	movs	r6, r1
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	08dc      	lsrs	r4, r3, #3
 8001cb8:	e6cc      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001cba:	4663      	mov	r3, ip
 8001cbc:	1a1d      	subs	r5, r3, r0
 8001cbe:	45ac      	cmp	ip, r5
 8001cc0:	4192      	sbcs	r2, r2
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	4252      	negs	r2, r2
 8001cc6:	1b1c      	subs	r4, r3, r4
 8001cc8:	000e      	movs	r6, r1
 8001cca:	4688      	mov	r8, r1
 8001ccc:	1aa4      	subs	r4, r4, r2
 8001cce:	3701      	adds	r7, #1
 8001cd0:	e555      	b.n	800177e <__aeabi_dadd+0xa6>
 8001cd2:	4663      	mov	r3, ip
 8001cd4:	08d9      	lsrs	r1, r3, #3
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	075a      	lsls	r2, r3, #29
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	08dc      	lsrs	r4, r3, #3
 8001cde:	e6c9      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001ce0:	4660      	mov	r0, ip
 8001ce2:	4654      	mov	r4, sl
 8001ce4:	e6d4      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 8001ce6:	08c0      	lsrs	r0, r0, #3
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dadd+0x616>
 8001cec:	e6bf      	b.n	8001a6e <__aeabi_dadd+0x396>
 8001cee:	0762      	lsls	r2, r4, #29
 8001cf0:	4310      	orrs	r0, r2
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	08e4      	lsrs	r4, r4, #3
 8001cf6:	0312      	lsls	r2, r2, #12
 8001cf8:	4214      	tst	r4, r2
 8001cfa:	d0cd      	beq.n	8001c98 <__aeabi_dadd+0x5c0>
 8001cfc:	08dd      	lsrs	r5, r3, #3
 8001cfe:	4215      	tst	r5, r2
 8001d00:	d1ca      	bne.n	8001c98 <__aeabi_dadd+0x5c0>
 8001d02:	4663      	mov	r3, ip
 8001d04:	08d8      	lsrs	r0, r3, #3
 8001d06:	4653      	mov	r3, sl
 8001d08:	075b      	lsls	r3, r3, #29
 8001d0a:	000e      	movs	r6, r1
 8001d0c:	002c      	movs	r4, r5
 8001d0e:	4318      	orrs	r0, r3
 8001d10:	e7c2      	b.n	8001c98 <__aeabi_dadd+0x5c0>
 8001d12:	4663      	mov	r3, ip
 8001d14:	08d9      	lsrs	r1, r3, #3
 8001d16:	4653      	mov	r3, sl
 8001d18:	075a      	lsls	r2, r3, #29
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	08dc      	lsrs	r4, r3, #3
 8001d1e:	e699      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001d20:	4663      	mov	r3, ip
 8001d22:	08d8      	lsrs	r0, r3, #3
 8001d24:	4653      	mov	r3, sl
 8001d26:	075a      	lsls	r2, r3, #29
 8001d28:	000e      	movs	r6, r1
 8001d2a:	4302      	orrs	r2, r0
 8001d2c:	08dc      	lsrs	r4, r3, #3
 8001d2e:	e6a1      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001d30:	0011      	movs	r1, r2
 8001d32:	0027      	movs	r7, r4
 8001d34:	3920      	subs	r1, #32
 8001d36:	40cf      	lsrs	r7, r1
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d003      	beq.n	8001d44 <__aeabi_dadd+0x66c>
 8001d3c:	2140      	movs	r1, #64	@ 0x40
 8001d3e:	1a8a      	subs	r2, r1, r2
 8001d40:	4094      	lsls	r4, r2
 8001d42:	4320      	orrs	r0, r4
 8001d44:	1e42      	subs	r2, r0, #1
 8001d46:	4190      	sbcs	r0, r2
 8001d48:	0005      	movs	r5, r0
 8001d4a:	433d      	orrs	r5, r7
 8001d4c:	e651      	b.n	80019f2 <__aeabi_dadd+0x31a>
 8001d4e:	000c      	movs	r4, r1
 8001d50:	2500      	movs	r5, #0
 8001d52:	2200      	movs	r2, #0
 8001d54:	e558      	b.n	8001808 <__aeabi_dadd+0x130>
 8001d56:	4460      	add	r0, ip
 8001d58:	4560      	cmp	r0, ip
 8001d5a:	4192      	sbcs	r2, r2
 8001d5c:	4454      	add	r4, sl
 8001d5e:	4252      	negs	r2, r2
 8001d60:	0005      	movs	r5, r0
 8001d62:	18a4      	adds	r4, r4, r2
 8001d64:	e73a      	b.n	8001bdc <__aeabi_dadd+0x504>
 8001d66:	4653      	mov	r3, sl
 8001d68:	075a      	lsls	r2, r3, #29
 8001d6a:	4663      	mov	r3, ip
 8001d6c:	08d9      	lsrs	r1, r3, #3
 8001d6e:	4653      	mov	r3, sl
 8001d70:	430a      	orrs	r2, r1
 8001d72:	08dc      	lsrs	r4, r3, #3
 8001d74:	e67e      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001d76:	001a      	movs	r2, r3
 8001d78:	001c      	movs	r4, r3
 8001d7a:	432a      	orrs	r2, r5
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_dadd+0x6a8>
 8001d7e:	e6ab      	b.n	8001ad8 <__aeabi_dadd+0x400>
 8001d80:	e6c1      	b.n	8001b06 <__aeabi_dadd+0x42e>
 8001d82:	2120      	movs	r1, #32
 8001d84:	2500      	movs	r5, #0
 8001d86:	1a09      	subs	r1, r1, r0
 8001d88:	e519      	b.n	80017be <__aeabi_dadd+0xe6>
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2500      	movs	r5, #0
 8001d8e:	4c01      	ldr	r4, [pc, #4]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001d90:	e53a      	b.n	8001808 <__aeabi_dadd+0x130>
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	000007ff 	.word	0x000007ff
 8001d98:	ff7fffff 	.word	0xff7fffff
 8001d9c:	000007fe 	.word	0x000007fe

08001da0 <__aeabi_ddiv>:
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	46de      	mov	lr, fp
 8001da4:	4645      	mov	r5, r8
 8001da6:	4657      	mov	r7, sl
 8001da8:	464e      	mov	r6, r9
 8001daa:	b5e0      	push	{r5, r6, r7, lr}
 8001dac:	b087      	sub	sp, #28
 8001dae:	9200      	str	r2, [sp, #0]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	030b      	lsls	r3, r1, #12
 8001db4:	0b1b      	lsrs	r3, r3, #12
 8001db6:	469b      	mov	fp, r3
 8001db8:	0fca      	lsrs	r2, r1, #31
 8001dba:	004b      	lsls	r3, r1, #1
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	4680      	mov	r8, r0
 8001dc0:	0d5b      	lsrs	r3, r3, #21
 8001dc2:	9202      	str	r2, [sp, #8]
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x28>
 8001dc6:	e16a      	b.n	800209e <__aeabi_ddiv+0x2fe>
 8001dc8:	4ad4      	ldr	r2, [pc, #848]	@ (800211c <__aeabi_ddiv+0x37c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_ddiv+0x30>
 8001dce:	e18c      	b.n	80020ea <__aeabi_ddiv+0x34a>
 8001dd0:	4659      	mov	r1, fp
 8001dd2:	0f42      	lsrs	r2, r0, #29
 8001dd4:	00c9      	lsls	r1, r1, #3
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	0409      	lsls	r1, r1, #16
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	00c2      	lsls	r2, r0, #3
 8001de0:	4690      	mov	r8, r2
 8001de2:	4acf      	ldr	r2, [pc, #828]	@ (8002120 <__aeabi_ddiv+0x380>)
 8001de4:	4689      	mov	r9, r1
 8001de6:	4692      	mov	sl, r2
 8001de8:	449a      	add	sl, r3
 8001dea:	2300      	movs	r3, #0
 8001dec:	2400      	movs	r4, #0
 8001dee:	9303      	str	r3, [sp, #12]
 8001df0:	9e00      	ldr	r6, [sp, #0]
 8001df2:	9f01      	ldr	r7, [sp, #4]
 8001df4:	033b      	lsls	r3, r7, #12
 8001df6:	0b1b      	lsrs	r3, r3, #12
 8001df8:	469b      	mov	fp, r3
 8001dfa:	007b      	lsls	r3, r7, #1
 8001dfc:	0030      	movs	r0, r6
 8001dfe:	0d5b      	lsrs	r3, r3, #21
 8001e00:	0ffd      	lsrs	r5, r7, #31
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d100      	bne.n	8001e08 <__aeabi_ddiv+0x68>
 8001e06:	e128      	b.n	800205a <__aeabi_ddiv+0x2ba>
 8001e08:	4ac4      	ldr	r2, [pc, #784]	@ (800211c <__aeabi_ddiv+0x37c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_ddiv+0x70>
 8001e0e:	e177      	b.n	8002100 <__aeabi_ddiv+0x360>
 8001e10:	4659      	mov	r1, fp
 8001e12:	0f72      	lsrs	r2, r6, #29
 8001e14:	00c9      	lsls	r1, r1, #3
 8001e16:	430a      	orrs	r2, r1
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	0409      	lsls	r1, r1, #16
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	468b      	mov	fp, r1
 8001e20:	49bf      	ldr	r1, [pc, #764]	@ (8002120 <__aeabi_ddiv+0x380>)
 8001e22:	00f2      	lsls	r2, r6, #3
 8001e24:	468c      	mov	ip, r1
 8001e26:	4651      	mov	r1, sl
 8001e28:	4463      	add	r3, ip
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	469a      	mov	sl, r3
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9e02      	ldr	r6, [sp, #8]
 8001e32:	406e      	eors	r6, r5
 8001e34:	2c0f      	cmp	r4, #15
 8001e36:	d827      	bhi.n	8001e88 <__aeabi_ddiv+0xe8>
 8001e38:	49ba      	ldr	r1, [pc, #744]	@ (8002124 <__aeabi_ddiv+0x384>)
 8001e3a:	00a4      	lsls	r4, r4, #2
 8001e3c:	5909      	ldr	r1, [r1, r4]
 8001e3e:	468f      	mov	pc, r1
 8001e40:	46cb      	mov	fp, r9
 8001e42:	4642      	mov	r2, r8
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	9b03      	ldr	r3, [sp, #12]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d016      	beq.n	8001e7a <__aeabi_ddiv+0xda>
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_ddiv+0xb2>
 8001e50:	e2a6      	b.n	80023a0 <__aeabi_ddiv+0x600>
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d000      	beq.n	8001e58 <__aeabi_ddiv+0xb8>
 8001e56:	e0df      	b.n	8002018 <__aeabi_ddiv+0x278>
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	4690      	mov	r8, r2
 8001e60:	051b      	lsls	r3, r3, #20
 8001e62:	4323      	orrs	r3, r4
 8001e64:	07f6      	lsls	r6, r6, #31
 8001e66:	4333      	orrs	r3, r6
 8001e68:	4640      	mov	r0, r8
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	b007      	add	sp, #28
 8001e6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e70:	46bb      	mov	fp, r7
 8001e72:	46b2      	mov	sl, r6
 8001e74:	46a9      	mov	r9, r5
 8001e76:	46a0      	mov	r8, r4
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	4690      	mov	r8, r2
 8001e80:	4ba6      	ldr	r3, [pc, #664]	@ (800211c <__aeabi_ddiv+0x37c>)
 8001e82:	e7ed      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 8001e84:	002e      	movs	r6, r5
 8001e86:	e7df      	b.n	8001e48 <__aeabi_ddiv+0xa8>
 8001e88:	45cb      	cmp	fp, r9
 8001e8a:	d200      	bcs.n	8001e8e <__aeabi_ddiv+0xee>
 8001e8c:	e1d4      	b.n	8002238 <__aeabi_ddiv+0x498>
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_ddiv+0xf2>
 8001e90:	e1cf      	b.n	8002232 <__aeabi_ddiv+0x492>
 8001e92:	2301      	movs	r3, #1
 8001e94:	425b      	negs	r3, r3
 8001e96:	469c      	mov	ip, r3
 8001e98:	4644      	mov	r4, r8
 8001e9a:	4648      	mov	r0, r9
 8001e9c:	2700      	movs	r7, #0
 8001e9e:	44e2      	add	sl, ip
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	0e15      	lsrs	r5, r2, #24
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	431d      	orrs	r5, r3
 8001ea8:	0c19      	lsrs	r1, r3, #16
 8001eaa:	042b      	lsls	r3, r5, #16
 8001eac:	0212      	lsls	r2, r2, #8
 8001eae:	9500      	str	r5, [sp, #0]
 8001eb0:	0c1d      	lsrs	r5, r3, #16
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	9102      	str	r1, [sp, #8]
 8001eb6:	9503      	str	r5, [sp, #12]
 8001eb8:	f7fe f9f0 	bl	800029c <__aeabi_uidivmod>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	436a      	muls	r2, r5
 8001ec0:	040b      	lsls	r3, r1, #16
 8001ec2:	0c21      	lsrs	r1, r4, #16
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	4319      	orrs	r1, r3
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	d909      	bls.n	8001ee0 <__aeabi_ddiv+0x140>
 8001ecc:	9d00      	ldr	r5, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	46ac      	mov	ip, r5
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	4461      	add	r1, ip
 8001ed6:	469c      	mov	ip, r3
 8001ed8:	44e0      	add	r8, ip
 8001eda:	428d      	cmp	r5, r1
 8001edc:	d800      	bhi.n	8001ee0 <__aeabi_ddiv+0x140>
 8001ede:	e1fb      	b.n	80022d8 <__aeabi_ddiv+0x538>
 8001ee0:	1a88      	subs	r0, r1, r2
 8001ee2:	9902      	ldr	r1, [sp, #8]
 8001ee4:	f7fe f9da 	bl	800029c <__aeabi_uidivmod>
 8001ee8:	9a03      	ldr	r2, [sp, #12]
 8001eea:	0424      	lsls	r4, r4, #16
 8001eec:	4342      	muls	r2, r0
 8001eee:	0409      	lsls	r1, r1, #16
 8001ef0:	0c24      	lsrs	r4, r4, #16
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	430c      	orrs	r4, r1
 8001ef6:	42a2      	cmp	r2, r4
 8001ef8:	d906      	bls.n	8001f08 <__aeabi_ddiv+0x168>
 8001efa:	9900      	ldr	r1, [sp, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	468c      	mov	ip, r1
 8001f00:	4464      	add	r4, ip
 8001f02:	42a1      	cmp	r1, r4
 8001f04:	d800      	bhi.n	8001f08 <__aeabi_ddiv+0x168>
 8001f06:	e1e1      	b.n	80022cc <__aeabi_ddiv+0x52c>
 8001f08:	1aa0      	subs	r0, r4, r2
 8001f0a:	4642      	mov	r2, r8
 8001f0c:	0412      	lsls	r2, r2, #16
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	4693      	mov	fp, r2
 8001f12:	464b      	mov	r3, r9
 8001f14:	4659      	mov	r1, fp
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	001d      	movs	r5, r3
 8001f1a:	9304      	str	r3, [sp, #16]
 8001f1c:	040b      	lsls	r3, r1, #16
 8001f1e:	4649      	mov	r1, r9
 8001f20:	0409      	lsls	r1, r1, #16
 8001f22:	0c09      	lsrs	r1, r1, #16
 8001f24:	000c      	movs	r4, r1
 8001f26:	0c1b      	lsrs	r3, r3, #16
 8001f28:	435c      	muls	r4, r3
 8001f2a:	0c12      	lsrs	r2, r2, #16
 8001f2c:	436b      	muls	r3, r5
 8001f2e:	4688      	mov	r8, r1
 8001f30:	4351      	muls	r1, r2
 8001f32:	436a      	muls	r2, r5
 8001f34:	0c25      	lsrs	r5, r4, #16
 8001f36:	46ac      	mov	ip, r5
 8001f38:	185b      	adds	r3, r3, r1
 8001f3a:	4463      	add	r3, ip
 8001f3c:	4299      	cmp	r1, r3
 8001f3e:	d903      	bls.n	8001f48 <__aeabi_ddiv+0x1a8>
 8001f40:	2180      	movs	r1, #128	@ 0x80
 8001f42:	0249      	lsls	r1, r1, #9
 8001f44:	468c      	mov	ip, r1
 8001f46:	4462      	add	r2, ip
 8001f48:	0c19      	lsrs	r1, r3, #16
 8001f4a:	0424      	lsls	r4, r4, #16
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	0c24      	lsrs	r4, r4, #16
 8001f50:	188a      	adds	r2, r1, r2
 8001f52:	191c      	adds	r4, r3, r4
 8001f54:	4290      	cmp	r0, r2
 8001f56:	d302      	bcc.n	8001f5e <__aeabi_ddiv+0x1be>
 8001f58:	d116      	bne.n	8001f88 <__aeabi_ddiv+0x1e8>
 8001f5a:	42a7      	cmp	r7, r4
 8001f5c:	d214      	bcs.n	8001f88 <__aeabi_ddiv+0x1e8>
 8001f5e:	465b      	mov	r3, fp
 8001f60:	9d00      	ldr	r5, [sp, #0]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	444f      	add	r7, r9
 8001f66:	9305      	str	r3, [sp, #20]
 8001f68:	454f      	cmp	r7, r9
 8001f6a:	419b      	sbcs	r3, r3
 8001f6c:	46ac      	mov	ip, r5
 8001f6e:	425b      	negs	r3, r3
 8001f70:	4463      	add	r3, ip
 8001f72:	18c0      	adds	r0, r0, r3
 8001f74:	4285      	cmp	r5, r0
 8001f76:	d300      	bcc.n	8001f7a <__aeabi_ddiv+0x1da>
 8001f78:	e1a1      	b.n	80022be <__aeabi_ddiv+0x51e>
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	d900      	bls.n	8001f80 <__aeabi_ddiv+0x1e0>
 8001f7e:	e1f6      	b.n	800236e <__aeabi_ddiv+0x5ce>
 8001f80:	d100      	bne.n	8001f84 <__aeabi_ddiv+0x1e4>
 8001f82:	e1f1      	b.n	8002368 <__aeabi_ddiv+0x5c8>
 8001f84:	9b05      	ldr	r3, [sp, #20]
 8001f86:	469b      	mov	fp, r3
 8001f88:	1b3c      	subs	r4, r7, r4
 8001f8a:	42a7      	cmp	r7, r4
 8001f8c:	41bf      	sbcs	r7, r7
 8001f8e:	9d00      	ldr	r5, [sp, #0]
 8001f90:	1a80      	subs	r0, r0, r2
 8001f92:	427f      	negs	r7, r7
 8001f94:	1bc0      	subs	r0, r0, r7
 8001f96:	4285      	cmp	r5, r0
 8001f98:	d100      	bne.n	8001f9c <__aeabi_ddiv+0x1fc>
 8001f9a:	e1d0      	b.n	800233e <__aeabi_ddiv+0x59e>
 8001f9c:	9902      	ldr	r1, [sp, #8]
 8001f9e:	f7fe f97d 	bl	800029c <__aeabi_uidivmod>
 8001fa2:	9a03      	ldr	r2, [sp, #12]
 8001fa4:	040b      	lsls	r3, r1, #16
 8001fa6:	4342      	muls	r2, r0
 8001fa8:	0c21      	lsrs	r1, r4, #16
 8001faa:	0007      	movs	r7, r0
 8001fac:	4319      	orrs	r1, r3
 8001fae:	428a      	cmp	r2, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x214>
 8001fb2:	e178      	b.n	80022a6 <__aeabi_ddiv+0x506>
 8001fb4:	1a88      	subs	r0, r1, r2
 8001fb6:	9902      	ldr	r1, [sp, #8]
 8001fb8:	f7fe f970 	bl	800029c <__aeabi_uidivmod>
 8001fbc:	9a03      	ldr	r2, [sp, #12]
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4342      	muls	r2, r0
 8001fc2:	0409      	lsls	r1, r1, #16
 8001fc4:	0c24      	lsrs	r4, r4, #16
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	430c      	orrs	r4, r1
 8001fca:	42a2      	cmp	r2, r4
 8001fcc:	d900      	bls.n	8001fd0 <__aeabi_ddiv+0x230>
 8001fce:	e15d      	b.n	800228c <__aeabi_ddiv+0x4ec>
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	1aa4      	subs	r4, r4, r2
 8001fd4:	043a      	lsls	r2, r7, #16
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	9d04      	ldr	r5, [sp, #16]
 8001fda:	0413      	lsls	r3, r2, #16
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	4359      	muls	r1, r3
 8001fe0:	4647      	mov	r7, r8
 8001fe2:	436b      	muls	r3, r5
 8001fe4:	469c      	mov	ip, r3
 8001fe6:	0c10      	lsrs	r0, r2, #16
 8001fe8:	4347      	muls	r7, r0
 8001fea:	0c0b      	lsrs	r3, r1, #16
 8001fec:	44bc      	add	ip, r7
 8001fee:	4463      	add	r3, ip
 8001ff0:	4368      	muls	r0, r5
 8001ff2:	429f      	cmp	r7, r3
 8001ff4:	d903      	bls.n	8001ffe <__aeabi_ddiv+0x25e>
 8001ff6:	2580      	movs	r5, #128	@ 0x80
 8001ff8:	026d      	lsls	r5, r5, #9
 8001ffa:	46ac      	mov	ip, r5
 8001ffc:	4460      	add	r0, ip
 8001ffe:	0c1f      	lsrs	r7, r3, #16
 8002000:	0409      	lsls	r1, r1, #16
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	0c09      	lsrs	r1, r1, #16
 8002006:	183f      	adds	r7, r7, r0
 8002008:	185b      	adds	r3, r3, r1
 800200a:	42bc      	cmp	r4, r7
 800200c:	d200      	bcs.n	8002010 <__aeabi_ddiv+0x270>
 800200e:	e102      	b.n	8002216 <__aeabi_ddiv+0x476>
 8002010:	d100      	bne.n	8002014 <__aeabi_ddiv+0x274>
 8002012:	e0fd      	b.n	8002210 <__aeabi_ddiv+0x470>
 8002014:	2301      	movs	r3, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <__aeabi_ddiv+0x388>)
 800201a:	4453      	add	r3, sl
 800201c:	2b00      	cmp	r3, #0
 800201e:	dc00      	bgt.n	8002022 <__aeabi_ddiv+0x282>
 8002020:	e0ae      	b.n	8002180 <__aeabi_ddiv+0x3e0>
 8002022:	0751      	lsls	r1, r2, #29
 8002024:	d000      	beq.n	8002028 <__aeabi_ddiv+0x288>
 8002026:	e198      	b.n	800235a <__aeabi_ddiv+0x5ba>
 8002028:	4659      	mov	r1, fp
 800202a:	01c9      	lsls	r1, r1, #7
 800202c:	d506      	bpl.n	800203c <__aeabi_ddiv+0x29c>
 800202e:	4659      	mov	r1, fp
 8002030:	4b3e      	ldr	r3, [pc, #248]	@ (800212c <__aeabi_ddiv+0x38c>)
 8002032:	4019      	ands	r1, r3
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	468b      	mov	fp, r1
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4453      	add	r3, sl
 800203c:	493c      	ldr	r1, [pc, #240]	@ (8002130 <__aeabi_ddiv+0x390>)
 800203e:	428b      	cmp	r3, r1
 8002040:	dd00      	ble.n	8002044 <__aeabi_ddiv+0x2a4>
 8002042:	e71a      	b.n	8001e7a <__aeabi_ddiv+0xda>
 8002044:	4659      	mov	r1, fp
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	0749      	lsls	r1, r1, #29
 800204a:	4311      	orrs	r1, r2
 800204c:	465a      	mov	r2, fp
 800204e:	055b      	lsls	r3, r3, #21
 8002050:	0254      	lsls	r4, r2, #9
 8002052:	4688      	mov	r8, r1
 8002054:	0b24      	lsrs	r4, r4, #12
 8002056:	0d5b      	lsrs	r3, r3, #21
 8002058:	e702      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 800205a:	465a      	mov	r2, fp
 800205c:	9b00      	ldr	r3, [sp, #0]
 800205e:	431a      	orrs	r2, r3
 8002060:	d100      	bne.n	8002064 <__aeabi_ddiv+0x2c4>
 8002062:	e07e      	b.n	8002162 <__aeabi_ddiv+0x3c2>
 8002064:	465b      	mov	r3, fp
 8002066:	2b00      	cmp	r3, #0
 8002068:	d100      	bne.n	800206c <__aeabi_ddiv+0x2cc>
 800206a:	e100      	b.n	800226e <__aeabi_ddiv+0x4ce>
 800206c:	4658      	mov	r0, fp
 800206e:	f001 fabb 	bl	80035e8 <__clzsi2>
 8002072:	0002      	movs	r2, r0
 8002074:	0003      	movs	r3, r0
 8002076:	3a0b      	subs	r2, #11
 8002078:	271d      	movs	r7, #29
 800207a:	9e00      	ldr	r6, [sp, #0]
 800207c:	1aba      	subs	r2, r7, r2
 800207e:	0019      	movs	r1, r3
 8002080:	4658      	mov	r0, fp
 8002082:	40d6      	lsrs	r6, r2
 8002084:	3908      	subs	r1, #8
 8002086:	4088      	lsls	r0, r1
 8002088:	0032      	movs	r2, r6
 800208a:	4302      	orrs	r2, r0
 800208c:	4693      	mov	fp, r2
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	408a      	lsls	r2, r1
 8002092:	4928      	ldr	r1, [pc, #160]	@ (8002134 <__aeabi_ddiv+0x394>)
 8002094:	4453      	add	r3, sl
 8002096:	468a      	mov	sl, r1
 8002098:	449a      	add	sl, r3
 800209a:	2300      	movs	r3, #0
 800209c:	e6c8      	b.n	8001e30 <__aeabi_ddiv+0x90>
 800209e:	465b      	mov	r3, fp
 80020a0:	4303      	orrs	r3, r0
 80020a2:	4699      	mov	r9, r3
 80020a4:	d056      	beq.n	8002154 <__aeabi_ddiv+0x3b4>
 80020a6:	465b      	mov	r3, fp
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d100      	bne.n	80020ae <__aeabi_ddiv+0x30e>
 80020ac:	e0cd      	b.n	800224a <__aeabi_ddiv+0x4aa>
 80020ae:	4658      	mov	r0, fp
 80020b0:	f001 fa9a 	bl	80035e8 <__clzsi2>
 80020b4:	230b      	movs	r3, #11
 80020b6:	425b      	negs	r3, r3
 80020b8:	469c      	mov	ip, r3
 80020ba:	0002      	movs	r2, r0
 80020bc:	4484      	add	ip, r0
 80020be:	4666      	mov	r6, ip
 80020c0:	231d      	movs	r3, #29
 80020c2:	1b9b      	subs	r3, r3, r6
 80020c4:	0026      	movs	r6, r4
 80020c6:	0011      	movs	r1, r2
 80020c8:	4658      	mov	r0, fp
 80020ca:	40de      	lsrs	r6, r3
 80020cc:	3908      	subs	r1, #8
 80020ce:	4088      	lsls	r0, r1
 80020d0:	0033      	movs	r3, r6
 80020d2:	4303      	orrs	r3, r0
 80020d4:	4699      	mov	r9, r3
 80020d6:	0023      	movs	r3, r4
 80020d8:	408b      	lsls	r3, r1
 80020da:	4698      	mov	r8, r3
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <__aeabi_ddiv+0x398>)
 80020de:	2400      	movs	r4, #0
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	469a      	mov	sl, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	9303      	str	r3, [sp, #12]
 80020e8:	e682      	b.n	8001df0 <__aeabi_ddiv+0x50>
 80020ea:	465a      	mov	r2, fp
 80020ec:	4302      	orrs	r2, r0
 80020ee:	4691      	mov	r9, r2
 80020f0:	d12a      	bne.n	8002148 <__aeabi_ddiv+0x3a8>
 80020f2:	2200      	movs	r2, #0
 80020f4:	469a      	mov	sl, r3
 80020f6:	2302      	movs	r3, #2
 80020f8:	4690      	mov	r8, r2
 80020fa:	2408      	movs	r4, #8
 80020fc:	9303      	str	r3, [sp, #12]
 80020fe:	e677      	b.n	8001df0 <__aeabi_ddiv+0x50>
 8002100:	465a      	mov	r2, fp
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	431a      	orrs	r2, r3
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <__aeabi_ddiv+0x39c>)
 8002108:	469c      	mov	ip, r3
 800210a:	44e2      	add	sl, ip
 800210c:	2a00      	cmp	r2, #0
 800210e:	d117      	bne.n	8002140 <__aeabi_ddiv+0x3a0>
 8002110:	2302      	movs	r3, #2
 8002112:	431c      	orrs	r4, r3
 8002114:	2300      	movs	r3, #0
 8002116:	469b      	mov	fp, r3
 8002118:	3302      	adds	r3, #2
 800211a:	e689      	b.n	8001e30 <__aeabi_ddiv+0x90>
 800211c:	000007ff 	.word	0x000007ff
 8002120:	fffffc01 	.word	0xfffffc01
 8002124:	0801ef54 	.word	0x0801ef54
 8002128:	000003ff 	.word	0x000003ff
 800212c:	feffffff 	.word	0xfeffffff
 8002130:	000007fe 	.word	0x000007fe
 8002134:	000003f3 	.word	0x000003f3
 8002138:	fffffc0d 	.word	0xfffffc0d
 800213c:	fffff801 	.word	0xfffff801
 8002140:	2303      	movs	r3, #3
 8002142:	0032      	movs	r2, r6
 8002144:	431c      	orrs	r4, r3
 8002146:	e673      	b.n	8001e30 <__aeabi_ddiv+0x90>
 8002148:	469a      	mov	sl, r3
 800214a:	2303      	movs	r3, #3
 800214c:	46d9      	mov	r9, fp
 800214e:	240c      	movs	r4, #12
 8002150:	9303      	str	r3, [sp, #12]
 8002152:	e64d      	b.n	8001df0 <__aeabi_ddiv+0x50>
 8002154:	2300      	movs	r3, #0
 8002156:	4698      	mov	r8, r3
 8002158:	469a      	mov	sl, r3
 800215a:	3301      	adds	r3, #1
 800215c:	2404      	movs	r4, #4
 800215e:	9303      	str	r3, [sp, #12]
 8002160:	e646      	b.n	8001df0 <__aeabi_ddiv+0x50>
 8002162:	2301      	movs	r3, #1
 8002164:	431c      	orrs	r4, r3
 8002166:	2300      	movs	r3, #0
 8002168:	469b      	mov	fp, r3
 800216a:	3301      	adds	r3, #1
 800216c:	e660      	b.n	8001e30 <__aeabi_ddiv+0x90>
 800216e:	2300      	movs	r3, #0
 8002170:	2480      	movs	r4, #128	@ 0x80
 8002172:	4698      	mov	r8, r3
 8002174:	2600      	movs	r6, #0
 8002176:	4b92      	ldr	r3, [pc, #584]	@ (80023c0 <__aeabi_ddiv+0x620>)
 8002178:	0324      	lsls	r4, r4, #12
 800217a:	e671      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 800217c:	2201      	movs	r2, #1
 800217e:	4252      	negs	r2, r2
 8002180:	2101      	movs	r1, #1
 8002182:	1ac9      	subs	r1, r1, r3
 8002184:	2938      	cmp	r1, #56	@ 0x38
 8002186:	dd00      	ble.n	800218a <__aeabi_ddiv+0x3ea>
 8002188:	e666      	b.n	8001e58 <__aeabi_ddiv+0xb8>
 800218a:	291f      	cmp	r1, #31
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x3f0>
 800218e:	e0ab      	b.n	80022e8 <__aeabi_ddiv+0x548>
 8002190:	201f      	movs	r0, #31
 8002192:	4240      	negs	r0, r0
 8002194:	1ac3      	subs	r3, r0, r3
 8002196:	4658      	mov	r0, fp
 8002198:	40d8      	lsrs	r0, r3
 800219a:	0003      	movs	r3, r0
 800219c:	2920      	cmp	r1, #32
 800219e:	d004      	beq.n	80021aa <__aeabi_ddiv+0x40a>
 80021a0:	4658      	mov	r0, fp
 80021a2:	4988      	ldr	r1, [pc, #544]	@ (80023c4 <__aeabi_ddiv+0x624>)
 80021a4:	4451      	add	r1, sl
 80021a6:	4088      	lsls	r0, r1
 80021a8:	4302      	orrs	r2, r0
 80021aa:	1e51      	subs	r1, r2, #1
 80021ac:	418a      	sbcs	r2, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	2307      	movs	r3, #7
 80021b2:	0019      	movs	r1, r3
 80021b4:	2400      	movs	r4, #0
 80021b6:	4011      	ands	r1, r2
 80021b8:	4213      	tst	r3, r2
 80021ba:	d00c      	beq.n	80021d6 <__aeabi_ddiv+0x436>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d100      	bne.n	80021c6 <__aeabi_ddiv+0x426>
 80021c4:	e0f9      	b.n	80023ba <__aeabi_ddiv+0x61a>
 80021c6:	1d11      	adds	r1, r2, #4
 80021c8:	4291      	cmp	r1, r2
 80021ca:	419b      	sbcs	r3, r3
 80021cc:	000a      	movs	r2, r1
 80021ce:	425b      	negs	r3, r3
 80021d0:	0759      	lsls	r1, r3, #29
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	0b1c      	lsrs	r4, r3, #12
 80021d6:	08d2      	lsrs	r2, r2, #3
 80021d8:	430a      	orrs	r2, r1
 80021da:	4690      	mov	r8, r2
 80021dc:	2300      	movs	r3, #0
 80021de:	e63f      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 80021e0:	2480      	movs	r4, #128	@ 0x80
 80021e2:	464b      	mov	r3, r9
 80021e4:	0324      	lsls	r4, r4, #12
 80021e6:	4223      	tst	r3, r4
 80021e8:	d009      	beq.n	80021fe <__aeabi_ddiv+0x45e>
 80021ea:	465b      	mov	r3, fp
 80021ec:	4223      	tst	r3, r4
 80021ee:	d106      	bne.n	80021fe <__aeabi_ddiv+0x45e>
 80021f0:	431c      	orrs	r4, r3
 80021f2:	0324      	lsls	r4, r4, #12
 80021f4:	002e      	movs	r6, r5
 80021f6:	4690      	mov	r8, r2
 80021f8:	4b71      	ldr	r3, [pc, #452]	@ (80023c0 <__aeabi_ddiv+0x620>)
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	e630      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 80021fe:	2480      	movs	r4, #128	@ 0x80
 8002200:	464b      	mov	r3, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	9e02      	ldr	r6, [sp, #8]
 800220a:	4b6d      	ldr	r3, [pc, #436]	@ (80023c0 <__aeabi_ddiv+0x620>)
 800220c:	0b24      	lsrs	r4, r4, #12
 800220e:	e627      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_ddiv+0x476>
 8002214:	e700      	b.n	8002018 <__aeabi_ddiv+0x278>
 8002216:	9800      	ldr	r0, [sp, #0]
 8002218:	1e51      	subs	r1, r2, #1
 800221a:	4684      	mov	ip, r0
 800221c:	4464      	add	r4, ip
 800221e:	4284      	cmp	r4, r0
 8002220:	d200      	bcs.n	8002224 <__aeabi_ddiv+0x484>
 8002222:	e084      	b.n	800232e <__aeabi_ddiv+0x58e>
 8002224:	42bc      	cmp	r4, r7
 8002226:	d200      	bcs.n	800222a <__aeabi_ddiv+0x48a>
 8002228:	e0ae      	b.n	8002388 <__aeabi_ddiv+0x5e8>
 800222a:	d100      	bne.n	800222e <__aeabi_ddiv+0x48e>
 800222c:	e0c1      	b.n	80023b2 <__aeabi_ddiv+0x612>
 800222e:	000a      	movs	r2, r1
 8002230:	e6f0      	b.n	8002014 <__aeabi_ddiv+0x274>
 8002232:	4542      	cmp	r2, r8
 8002234:	d900      	bls.n	8002238 <__aeabi_ddiv+0x498>
 8002236:	e62c      	b.n	8001e92 <__aeabi_ddiv+0xf2>
 8002238:	464b      	mov	r3, r9
 800223a:	07dc      	lsls	r4, r3, #31
 800223c:	0858      	lsrs	r0, r3, #1
 800223e:	4643      	mov	r3, r8
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	431c      	orrs	r4, r3
 8002244:	4643      	mov	r3, r8
 8002246:	07df      	lsls	r7, r3, #31
 8002248:	e62a      	b.n	8001ea0 <__aeabi_ddiv+0x100>
 800224a:	f001 f9cd 	bl	80035e8 <__clzsi2>
 800224e:	2315      	movs	r3, #21
 8002250:	469c      	mov	ip, r3
 8002252:	4484      	add	ip, r0
 8002254:	0002      	movs	r2, r0
 8002256:	4663      	mov	r3, ip
 8002258:	3220      	adds	r2, #32
 800225a:	2b1c      	cmp	r3, #28
 800225c:	dc00      	bgt.n	8002260 <__aeabi_ddiv+0x4c0>
 800225e:	e72e      	b.n	80020be <__aeabi_ddiv+0x31e>
 8002260:	0023      	movs	r3, r4
 8002262:	3808      	subs	r0, #8
 8002264:	4083      	lsls	r3, r0
 8002266:	4699      	mov	r9, r3
 8002268:	2300      	movs	r3, #0
 800226a:	4698      	mov	r8, r3
 800226c:	e736      	b.n	80020dc <__aeabi_ddiv+0x33c>
 800226e:	f001 f9bb 	bl	80035e8 <__clzsi2>
 8002272:	0002      	movs	r2, r0
 8002274:	0003      	movs	r3, r0
 8002276:	3215      	adds	r2, #21
 8002278:	3320      	adds	r3, #32
 800227a:	2a1c      	cmp	r2, #28
 800227c:	dc00      	bgt.n	8002280 <__aeabi_ddiv+0x4e0>
 800227e:	e6fb      	b.n	8002078 <__aeabi_ddiv+0x2d8>
 8002280:	9900      	ldr	r1, [sp, #0]
 8002282:	3808      	subs	r0, #8
 8002284:	4081      	lsls	r1, r0
 8002286:	2200      	movs	r2, #0
 8002288:	468b      	mov	fp, r1
 800228a:	e702      	b.n	8002092 <__aeabi_ddiv+0x2f2>
 800228c:	9900      	ldr	r1, [sp, #0]
 800228e:	3b01      	subs	r3, #1
 8002290:	468c      	mov	ip, r1
 8002292:	4464      	add	r4, ip
 8002294:	42a1      	cmp	r1, r4
 8002296:	d900      	bls.n	800229a <__aeabi_ddiv+0x4fa>
 8002298:	e69a      	b.n	8001fd0 <__aeabi_ddiv+0x230>
 800229a:	42a2      	cmp	r2, r4
 800229c:	d800      	bhi.n	80022a0 <__aeabi_ddiv+0x500>
 800229e:	e697      	b.n	8001fd0 <__aeabi_ddiv+0x230>
 80022a0:	1e83      	subs	r3, r0, #2
 80022a2:	4464      	add	r4, ip
 80022a4:	e694      	b.n	8001fd0 <__aeabi_ddiv+0x230>
 80022a6:	46ac      	mov	ip, r5
 80022a8:	4461      	add	r1, ip
 80022aa:	3f01      	subs	r7, #1
 80022ac:	428d      	cmp	r5, r1
 80022ae:	d900      	bls.n	80022b2 <__aeabi_ddiv+0x512>
 80022b0:	e680      	b.n	8001fb4 <__aeabi_ddiv+0x214>
 80022b2:	428a      	cmp	r2, r1
 80022b4:	d800      	bhi.n	80022b8 <__aeabi_ddiv+0x518>
 80022b6:	e67d      	b.n	8001fb4 <__aeabi_ddiv+0x214>
 80022b8:	1e87      	subs	r7, r0, #2
 80022ba:	4461      	add	r1, ip
 80022bc:	e67a      	b.n	8001fb4 <__aeabi_ddiv+0x214>
 80022be:	4285      	cmp	r5, r0
 80022c0:	d000      	beq.n	80022c4 <__aeabi_ddiv+0x524>
 80022c2:	e65f      	b.n	8001f84 <__aeabi_ddiv+0x1e4>
 80022c4:	45b9      	cmp	r9, r7
 80022c6:	d900      	bls.n	80022ca <__aeabi_ddiv+0x52a>
 80022c8:	e65c      	b.n	8001f84 <__aeabi_ddiv+0x1e4>
 80022ca:	e656      	b.n	8001f7a <__aeabi_ddiv+0x1da>
 80022cc:	42a2      	cmp	r2, r4
 80022ce:	d800      	bhi.n	80022d2 <__aeabi_ddiv+0x532>
 80022d0:	e61a      	b.n	8001f08 <__aeabi_ddiv+0x168>
 80022d2:	1e83      	subs	r3, r0, #2
 80022d4:	4464      	add	r4, ip
 80022d6:	e617      	b.n	8001f08 <__aeabi_ddiv+0x168>
 80022d8:	428a      	cmp	r2, r1
 80022da:	d800      	bhi.n	80022de <__aeabi_ddiv+0x53e>
 80022dc:	e600      	b.n	8001ee0 <__aeabi_ddiv+0x140>
 80022de:	46ac      	mov	ip, r5
 80022e0:	1e83      	subs	r3, r0, #2
 80022e2:	4698      	mov	r8, r3
 80022e4:	4461      	add	r1, ip
 80022e6:	e5fb      	b.n	8001ee0 <__aeabi_ddiv+0x140>
 80022e8:	4837      	ldr	r0, [pc, #220]	@ (80023c8 <__aeabi_ddiv+0x628>)
 80022ea:	0014      	movs	r4, r2
 80022ec:	4450      	add	r0, sl
 80022ee:	4082      	lsls	r2, r0
 80022f0:	465b      	mov	r3, fp
 80022f2:	0017      	movs	r7, r2
 80022f4:	4083      	lsls	r3, r0
 80022f6:	40cc      	lsrs	r4, r1
 80022f8:	1e7a      	subs	r2, r7, #1
 80022fa:	4197      	sbcs	r7, r2
 80022fc:	4323      	orrs	r3, r4
 80022fe:	433b      	orrs	r3, r7
 8002300:	001a      	movs	r2, r3
 8002302:	465b      	mov	r3, fp
 8002304:	40cb      	lsrs	r3, r1
 8002306:	0751      	lsls	r1, r2, #29
 8002308:	d009      	beq.n	800231e <__aeabi_ddiv+0x57e>
 800230a:	210f      	movs	r1, #15
 800230c:	4011      	ands	r1, r2
 800230e:	2904      	cmp	r1, #4
 8002310:	d005      	beq.n	800231e <__aeabi_ddiv+0x57e>
 8002312:	1d11      	adds	r1, r2, #4
 8002314:	4291      	cmp	r1, r2
 8002316:	4192      	sbcs	r2, r2
 8002318:	4252      	negs	r2, r2
 800231a:	189b      	adds	r3, r3, r2
 800231c:	000a      	movs	r2, r1
 800231e:	0219      	lsls	r1, r3, #8
 8002320:	d400      	bmi.n	8002324 <__aeabi_ddiv+0x584>
 8002322:	e755      	b.n	80021d0 <__aeabi_ddiv+0x430>
 8002324:	2200      	movs	r2, #0
 8002326:	2301      	movs	r3, #1
 8002328:	2400      	movs	r4, #0
 800232a:	4690      	mov	r8, r2
 800232c:	e598      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 800232e:	000a      	movs	r2, r1
 8002330:	42bc      	cmp	r4, r7
 8002332:	d000      	beq.n	8002336 <__aeabi_ddiv+0x596>
 8002334:	e66e      	b.n	8002014 <__aeabi_ddiv+0x274>
 8002336:	454b      	cmp	r3, r9
 8002338:	d000      	beq.n	800233c <__aeabi_ddiv+0x59c>
 800233a:	e66b      	b.n	8002014 <__aeabi_ddiv+0x274>
 800233c:	e66c      	b.n	8002018 <__aeabi_ddiv+0x278>
 800233e:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <__aeabi_ddiv+0x62c>)
 8002340:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <__aeabi_ddiv+0x630>)
 8002342:	4453      	add	r3, sl
 8002344:	4592      	cmp	sl, r2
 8002346:	da00      	bge.n	800234a <__aeabi_ddiv+0x5aa>
 8002348:	e718      	b.n	800217c <__aeabi_ddiv+0x3dc>
 800234a:	2101      	movs	r1, #1
 800234c:	4249      	negs	r1, r1
 800234e:	1d0a      	adds	r2, r1, #4
 8002350:	428a      	cmp	r2, r1
 8002352:	4189      	sbcs	r1, r1
 8002354:	4249      	negs	r1, r1
 8002356:	448b      	add	fp, r1
 8002358:	e666      	b.n	8002028 <__aeabi_ddiv+0x288>
 800235a:	210f      	movs	r1, #15
 800235c:	4011      	ands	r1, r2
 800235e:	2904      	cmp	r1, #4
 8002360:	d100      	bne.n	8002364 <__aeabi_ddiv+0x5c4>
 8002362:	e661      	b.n	8002028 <__aeabi_ddiv+0x288>
 8002364:	0011      	movs	r1, r2
 8002366:	e7f2      	b.n	800234e <__aeabi_ddiv+0x5ae>
 8002368:	42bc      	cmp	r4, r7
 800236a:	d800      	bhi.n	800236e <__aeabi_ddiv+0x5ce>
 800236c:	e60a      	b.n	8001f84 <__aeabi_ddiv+0x1e4>
 800236e:	2302      	movs	r3, #2
 8002370:	425b      	negs	r3, r3
 8002372:	469c      	mov	ip, r3
 8002374:	9900      	ldr	r1, [sp, #0]
 8002376:	444f      	add	r7, r9
 8002378:	454f      	cmp	r7, r9
 800237a:	419b      	sbcs	r3, r3
 800237c:	44e3      	add	fp, ip
 800237e:	468c      	mov	ip, r1
 8002380:	425b      	negs	r3, r3
 8002382:	4463      	add	r3, ip
 8002384:	18c0      	adds	r0, r0, r3
 8002386:	e5ff      	b.n	8001f88 <__aeabi_ddiv+0x1e8>
 8002388:	4649      	mov	r1, r9
 800238a:	9d00      	ldr	r5, [sp, #0]
 800238c:	0048      	lsls	r0, r1, #1
 800238e:	4548      	cmp	r0, r9
 8002390:	4189      	sbcs	r1, r1
 8002392:	46ac      	mov	ip, r5
 8002394:	4249      	negs	r1, r1
 8002396:	4461      	add	r1, ip
 8002398:	4681      	mov	r9, r0
 800239a:	3a02      	subs	r2, #2
 800239c:	1864      	adds	r4, r4, r1
 800239e:	e7c7      	b.n	8002330 <__aeabi_ddiv+0x590>
 80023a0:	2480      	movs	r4, #128	@ 0x80
 80023a2:	465b      	mov	r3, fp
 80023a4:	0324      	lsls	r4, r4, #12
 80023a6:	431c      	orrs	r4, r3
 80023a8:	0324      	lsls	r4, r4, #12
 80023aa:	4690      	mov	r8, r2
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <__aeabi_ddiv+0x620>)
 80023ae:	0b24      	lsrs	r4, r4, #12
 80023b0:	e556      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 80023b2:	4599      	cmp	r9, r3
 80023b4:	d3e8      	bcc.n	8002388 <__aeabi_ddiv+0x5e8>
 80023b6:	000a      	movs	r2, r1
 80023b8:	e7bd      	b.n	8002336 <__aeabi_ddiv+0x596>
 80023ba:	2300      	movs	r3, #0
 80023bc:	e708      	b.n	80021d0 <__aeabi_ddiv+0x430>
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	000007ff 	.word	0x000007ff
 80023c4:	0000043e 	.word	0x0000043e
 80023c8:	0000041e 	.word	0x0000041e
 80023cc:	000003ff 	.word	0x000003ff
 80023d0:	fffffc02 	.word	0xfffffc02

080023d4 <__eqdf2>:
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d6:	4657      	mov	r7, sl
 80023d8:	46de      	mov	lr, fp
 80023da:	464e      	mov	r6, r9
 80023dc:	4645      	mov	r5, r8
 80023de:	b5e0      	push	{r5, r6, r7, lr}
 80023e0:	000d      	movs	r5, r1
 80023e2:	0004      	movs	r4, r0
 80023e4:	0fe8      	lsrs	r0, r5, #31
 80023e6:	4683      	mov	fp, r0
 80023e8:	0309      	lsls	r1, r1, #12
 80023ea:	0fd8      	lsrs	r0, r3, #31
 80023ec:	0b09      	lsrs	r1, r1, #12
 80023ee:	4682      	mov	sl, r0
 80023f0:	4819      	ldr	r0, [pc, #100]	@ (8002458 <__eqdf2+0x84>)
 80023f2:	468c      	mov	ip, r1
 80023f4:	031f      	lsls	r7, r3, #12
 80023f6:	0069      	lsls	r1, r5, #1
 80023f8:	005e      	lsls	r6, r3, #1
 80023fa:	0d49      	lsrs	r1, r1, #21
 80023fc:	0b3f      	lsrs	r7, r7, #12
 80023fe:	0d76      	lsrs	r6, r6, #21
 8002400:	4281      	cmp	r1, r0
 8002402:	d018      	beq.n	8002436 <__eqdf2+0x62>
 8002404:	4286      	cmp	r6, r0
 8002406:	d00f      	beq.n	8002428 <__eqdf2+0x54>
 8002408:	2001      	movs	r0, #1
 800240a:	42b1      	cmp	r1, r6
 800240c:	d10d      	bne.n	800242a <__eqdf2+0x56>
 800240e:	45bc      	cmp	ip, r7
 8002410:	d10b      	bne.n	800242a <__eqdf2+0x56>
 8002412:	4294      	cmp	r4, r2
 8002414:	d109      	bne.n	800242a <__eqdf2+0x56>
 8002416:	45d3      	cmp	fp, sl
 8002418:	d01c      	beq.n	8002454 <__eqdf2+0x80>
 800241a:	2900      	cmp	r1, #0
 800241c:	d105      	bne.n	800242a <__eqdf2+0x56>
 800241e:	4660      	mov	r0, ip
 8002420:	4320      	orrs	r0, r4
 8002422:	1e43      	subs	r3, r0, #1
 8002424:	4198      	sbcs	r0, r3
 8002426:	e000      	b.n	800242a <__eqdf2+0x56>
 8002428:	2001      	movs	r0, #1
 800242a:	bcf0      	pop	{r4, r5, r6, r7}
 800242c:	46bb      	mov	fp, r7
 800242e:	46b2      	mov	sl, r6
 8002430:	46a9      	mov	r9, r5
 8002432:	46a0      	mov	r8, r4
 8002434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002436:	2001      	movs	r0, #1
 8002438:	428e      	cmp	r6, r1
 800243a:	d1f6      	bne.n	800242a <__eqdf2+0x56>
 800243c:	4661      	mov	r1, ip
 800243e:	4339      	orrs	r1, r7
 8002440:	000f      	movs	r7, r1
 8002442:	4317      	orrs	r7, r2
 8002444:	4327      	orrs	r7, r4
 8002446:	d1f0      	bne.n	800242a <__eqdf2+0x56>
 8002448:	465b      	mov	r3, fp
 800244a:	4652      	mov	r2, sl
 800244c:	1a98      	subs	r0, r3, r2
 800244e:	1e43      	subs	r3, r0, #1
 8002450:	4198      	sbcs	r0, r3
 8002452:	e7ea      	b.n	800242a <__eqdf2+0x56>
 8002454:	2000      	movs	r0, #0
 8002456:	e7e8      	b.n	800242a <__eqdf2+0x56>
 8002458:	000007ff 	.word	0x000007ff

0800245c <__gedf2>:
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	4657      	mov	r7, sl
 8002460:	464e      	mov	r6, r9
 8002462:	4645      	mov	r5, r8
 8002464:	46de      	mov	lr, fp
 8002466:	b5e0      	push	{r5, r6, r7, lr}
 8002468:	000d      	movs	r5, r1
 800246a:	030f      	lsls	r7, r1, #12
 800246c:	0b39      	lsrs	r1, r7, #12
 800246e:	b083      	sub	sp, #12
 8002470:	0004      	movs	r4, r0
 8002472:	4680      	mov	r8, r0
 8002474:	9101      	str	r1, [sp, #4]
 8002476:	0058      	lsls	r0, r3, #1
 8002478:	0fe9      	lsrs	r1, r5, #31
 800247a:	4f31      	ldr	r7, [pc, #196]	@ (8002540 <__gedf2+0xe4>)
 800247c:	0d40      	lsrs	r0, r0, #21
 800247e:	468c      	mov	ip, r1
 8002480:	006e      	lsls	r6, r5, #1
 8002482:	0319      	lsls	r1, r3, #12
 8002484:	4682      	mov	sl, r0
 8002486:	4691      	mov	r9, r2
 8002488:	0d76      	lsrs	r6, r6, #21
 800248a:	0b09      	lsrs	r1, r1, #12
 800248c:	0fd8      	lsrs	r0, r3, #31
 800248e:	42be      	cmp	r6, r7
 8002490:	d01f      	beq.n	80024d2 <__gedf2+0x76>
 8002492:	45ba      	cmp	sl, r7
 8002494:	d00f      	beq.n	80024b6 <__gedf2+0x5a>
 8002496:	2e00      	cmp	r6, #0
 8002498:	d12f      	bne.n	80024fa <__gedf2+0x9e>
 800249a:	4655      	mov	r5, sl
 800249c:	9e01      	ldr	r6, [sp, #4]
 800249e:	4334      	orrs	r4, r6
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	d127      	bne.n	80024f4 <__gedf2+0x98>
 80024a4:	430a      	orrs	r2, r1
 80024a6:	d03a      	beq.n	800251e <__gedf2+0xc2>
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d145      	bne.n	8002538 <__gedf2+0xdc>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d11a      	bne.n	80024e6 <__gedf2+0x8a>
 80024b0:	2001      	movs	r0, #1
 80024b2:	4240      	negs	r0, r0
 80024b4:	e017      	b.n	80024e6 <__gedf2+0x8a>
 80024b6:	4311      	orrs	r1, r2
 80024b8:	d13b      	bne.n	8002532 <__gedf2+0xd6>
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d102      	bne.n	80024c4 <__gedf2+0x68>
 80024be:	9f01      	ldr	r7, [sp, #4]
 80024c0:	4327      	orrs	r7, r4
 80024c2:	d0f3      	beq.n	80024ac <__gedf2+0x50>
 80024c4:	4584      	cmp	ip, r0
 80024c6:	d109      	bne.n	80024dc <__gedf2+0x80>
 80024c8:	4663      	mov	r3, ip
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <__gedf2+0x54>
 80024ce:	4660      	mov	r0, ip
 80024d0:	e009      	b.n	80024e6 <__gedf2+0x8a>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d12c      	bne.n	8002532 <__gedf2+0xd6>
 80024d8:	45b2      	cmp	sl, r6
 80024da:	d024      	beq.n	8002526 <__gedf2+0xca>
 80024dc:	4663      	mov	r3, ip
 80024de:	2002      	movs	r0, #2
 80024e0:	3b01      	subs	r3, #1
 80024e2:	4018      	ands	r0, r3
 80024e4:	3801      	subs	r0, #1
 80024e6:	b003      	add	sp, #12
 80024e8:	bcf0      	pop	{r4, r5, r6, r7}
 80024ea:	46bb      	mov	fp, r7
 80024ec:	46b2      	mov	sl, r6
 80024ee:	46a9      	mov	r9, r5
 80024f0:	46a0      	mov	r8, r4
 80024f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f4:	2c00      	cmp	r4, #0
 80024f6:	d0d9      	beq.n	80024ac <__gedf2+0x50>
 80024f8:	e7e4      	b.n	80024c4 <__gedf2+0x68>
 80024fa:	4654      	mov	r4, sl
 80024fc:	2c00      	cmp	r4, #0
 80024fe:	d0ed      	beq.n	80024dc <__gedf2+0x80>
 8002500:	4584      	cmp	ip, r0
 8002502:	d1eb      	bne.n	80024dc <__gedf2+0x80>
 8002504:	4556      	cmp	r6, sl
 8002506:	dce9      	bgt.n	80024dc <__gedf2+0x80>
 8002508:	dbde      	blt.n	80024c8 <__gedf2+0x6c>
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	428b      	cmp	r3, r1
 800250e:	d8e5      	bhi.n	80024dc <__gedf2+0x80>
 8002510:	d1da      	bne.n	80024c8 <__gedf2+0x6c>
 8002512:	45c8      	cmp	r8, r9
 8002514:	d8e2      	bhi.n	80024dc <__gedf2+0x80>
 8002516:	2000      	movs	r0, #0
 8002518:	45c8      	cmp	r8, r9
 800251a:	d2e4      	bcs.n	80024e6 <__gedf2+0x8a>
 800251c:	e7d4      	b.n	80024c8 <__gedf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	2c00      	cmp	r4, #0
 8002522:	d0e0      	beq.n	80024e6 <__gedf2+0x8a>
 8002524:	e7da      	b.n	80024dc <__gedf2+0x80>
 8002526:	4311      	orrs	r1, r2
 8002528:	d103      	bne.n	8002532 <__gedf2+0xd6>
 800252a:	4584      	cmp	ip, r0
 800252c:	d1d6      	bne.n	80024dc <__gedf2+0x80>
 800252e:	2000      	movs	r0, #0
 8002530:	e7d9      	b.n	80024e6 <__gedf2+0x8a>
 8002532:	2002      	movs	r0, #2
 8002534:	4240      	negs	r0, r0
 8002536:	e7d6      	b.n	80024e6 <__gedf2+0x8a>
 8002538:	4584      	cmp	ip, r0
 800253a:	d0e6      	beq.n	800250a <__gedf2+0xae>
 800253c:	e7ce      	b.n	80024dc <__gedf2+0x80>
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	000007ff 	.word	0x000007ff

08002544 <__ledf2>:
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	4657      	mov	r7, sl
 8002548:	464e      	mov	r6, r9
 800254a:	4645      	mov	r5, r8
 800254c:	46de      	mov	lr, fp
 800254e:	b5e0      	push	{r5, r6, r7, lr}
 8002550:	000d      	movs	r5, r1
 8002552:	030f      	lsls	r7, r1, #12
 8002554:	0004      	movs	r4, r0
 8002556:	4680      	mov	r8, r0
 8002558:	0fe8      	lsrs	r0, r5, #31
 800255a:	0b39      	lsrs	r1, r7, #12
 800255c:	4684      	mov	ip, r0
 800255e:	b083      	sub	sp, #12
 8002560:	0058      	lsls	r0, r3, #1
 8002562:	4f30      	ldr	r7, [pc, #192]	@ (8002624 <__ledf2+0xe0>)
 8002564:	0d40      	lsrs	r0, r0, #21
 8002566:	9101      	str	r1, [sp, #4]
 8002568:	031e      	lsls	r6, r3, #12
 800256a:	0069      	lsls	r1, r5, #1
 800256c:	4682      	mov	sl, r0
 800256e:	4691      	mov	r9, r2
 8002570:	0d49      	lsrs	r1, r1, #21
 8002572:	0b36      	lsrs	r6, r6, #12
 8002574:	0fd8      	lsrs	r0, r3, #31
 8002576:	42b9      	cmp	r1, r7
 8002578:	d020      	beq.n	80025bc <__ledf2+0x78>
 800257a:	45ba      	cmp	sl, r7
 800257c:	d00f      	beq.n	800259e <__ledf2+0x5a>
 800257e:	2900      	cmp	r1, #0
 8002580:	d12b      	bne.n	80025da <__ledf2+0x96>
 8002582:	9901      	ldr	r1, [sp, #4]
 8002584:	430c      	orrs	r4, r1
 8002586:	4651      	mov	r1, sl
 8002588:	2900      	cmp	r1, #0
 800258a:	d137      	bne.n	80025fc <__ledf2+0xb8>
 800258c:	4332      	orrs	r2, r6
 800258e:	d038      	beq.n	8002602 <__ledf2+0xbe>
 8002590:	2c00      	cmp	r4, #0
 8002592:	d144      	bne.n	800261e <__ledf2+0xda>
 8002594:	2800      	cmp	r0, #0
 8002596:	d119      	bne.n	80025cc <__ledf2+0x88>
 8002598:	2001      	movs	r0, #1
 800259a:	4240      	negs	r0, r0
 800259c:	e016      	b.n	80025cc <__ledf2+0x88>
 800259e:	4316      	orrs	r6, r2
 80025a0:	d113      	bne.n	80025ca <__ledf2+0x86>
 80025a2:	2900      	cmp	r1, #0
 80025a4:	d102      	bne.n	80025ac <__ledf2+0x68>
 80025a6:	9f01      	ldr	r7, [sp, #4]
 80025a8:	4327      	orrs	r7, r4
 80025aa:	d0f3      	beq.n	8002594 <__ledf2+0x50>
 80025ac:	4584      	cmp	ip, r0
 80025ae:	d020      	beq.n	80025f2 <__ledf2+0xae>
 80025b0:	4663      	mov	r3, ip
 80025b2:	2002      	movs	r0, #2
 80025b4:	3b01      	subs	r3, #1
 80025b6:	4018      	ands	r0, r3
 80025b8:	3801      	subs	r0, #1
 80025ba:	e007      	b.n	80025cc <__ledf2+0x88>
 80025bc:	9f01      	ldr	r7, [sp, #4]
 80025be:	4327      	orrs	r7, r4
 80025c0:	d103      	bne.n	80025ca <__ledf2+0x86>
 80025c2:	458a      	cmp	sl, r1
 80025c4:	d1f4      	bne.n	80025b0 <__ledf2+0x6c>
 80025c6:	4316      	orrs	r6, r2
 80025c8:	d01f      	beq.n	800260a <__ledf2+0xc6>
 80025ca:	2002      	movs	r0, #2
 80025cc:	b003      	add	sp, #12
 80025ce:	bcf0      	pop	{r4, r5, r6, r7}
 80025d0:	46bb      	mov	fp, r7
 80025d2:	46b2      	mov	sl, r6
 80025d4:	46a9      	mov	r9, r5
 80025d6:	46a0      	mov	r8, r4
 80025d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025da:	4654      	mov	r4, sl
 80025dc:	2c00      	cmp	r4, #0
 80025de:	d0e7      	beq.n	80025b0 <__ledf2+0x6c>
 80025e0:	4584      	cmp	ip, r0
 80025e2:	d1e5      	bne.n	80025b0 <__ledf2+0x6c>
 80025e4:	4551      	cmp	r1, sl
 80025e6:	dce3      	bgt.n	80025b0 <__ledf2+0x6c>
 80025e8:	db03      	blt.n	80025f2 <__ledf2+0xae>
 80025ea:	9b01      	ldr	r3, [sp, #4]
 80025ec:	42b3      	cmp	r3, r6
 80025ee:	d8df      	bhi.n	80025b0 <__ledf2+0x6c>
 80025f0:	d00f      	beq.n	8002612 <__ledf2+0xce>
 80025f2:	4663      	mov	r3, ip
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0cf      	beq.n	8002598 <__ledf2+0x54>
 80025f8:	4660      	mov	r0, ip
 80025fa:	e7e7      	b.n	80025cc <__ledf2+0x88>
 80025fc:	2c00      	cmp	r4, #0
 80025fe:	d0c9      	beq.n	8002594 <__ledf2+0x50>
 8002600:	e7d4      	b.n	80025ac <__ledf2+0x68>
 8002602:	2000      	movs	r0, #0
 8002604:	2c00      	cmp	r4, #0
 8002606:	d0e1      	beq.n	80025cc <__ledf2+0x88>
 8002608:	e7d2      	b.n	80025b0 <__ledf2+0x6c>
 800260a:	4584      	cmp	ip, r0
 800260c:	d1d0      	bne.n	80025b0 <__ledf2+0x6c>
 800260e:	2000      	movs	r0, #0
 8002610:	e7dc      	b.n	80025cc <__ledf2+0x88>
 8002612:	45c8      	cmp	r8, r9
 8002614:	d8cc      	bhi.n	80025b0 <__ledf2+0x6c>
 8002616:	2000      	movs	r0, #0
 8002618:	45c8      	cmp	r8, r9
 800261a:	d2d7      	bcs.n	80025cc <__ledf2+0x88>
 800261c:	e7e9      	b.n	80025f2 <__ledf2+0xae>
 800261e:	4584      	cmp	ip, r0
 8002620:	d0e3      	beq.n	80025ea <__ledf2+0xa6>
 8002622:	e7c5      	b.n	80025b0 <__ledf2+0x6c>
 8002624:	000007ff 	.word	0x000007ff

08002628 <__aeabi_dmul>:
 8002628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262a:	4657      	mov	r7, sl
 800262c:	46de      	mov	lr, fp
 800262e:	464e      	mov	r6, r9
 8002630:	4645      	mov	r5, r8
 8002632:	b5e0      	push	{r5, r6, r7, lr}
 8002634:	001f      	movs	r7, r3
 8002636:	030b      	lsls	r3, r1, #12
 8002638:	0b1b      	lsrs	r3, r3, #12
 800263a:	0016      	movs	r6, r2
 800263c:	469a      	mov	sl, r3
 800263e:	0fca      	lsrs	r2, r1, #31
 8002640:	004b      	lsls	r3, r1, #1
 8002642:	0004      	movs	r4, r0
 8002644:	4693      	mov	fp, r2
 8002646:	b087      	sub	sp, #28
 8002648:	0d5b      	lsrs	r3, r3, #21
 800264a:	d100      	bne.n	800264e <__aeabi_dmul+0x26>
 800264c:	e0d5      	b.n	80027fa <__aeabi_dmul+0x1d2>
 800264e:	4abb      	ldr	r2, [pc, #748]	@ (800293c <__aeabi_dmul+0x314>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d100      	bne.n	8002656 <__aeabi_dmul+0x2e>
 8002654:	e0f8      	b.n	8002848 <__aeabi_dmul+0x220>
 8002656:	4651      	mov	r1, sl
 8002658:	0f42      	lsrs	r2, r0, #29
 800265a:	00c9      	lsls	r1, r1, #3
 800265c:	430a      	orrs	r2, r1
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0409      	lsls	r1, r1, #16
 8002662:	4311      	orrs	r1, r2
 8002664:	00c2      	lsls	r2, r0, #3
 8002666:	4691      	mov	r9, r2
 8002668:	4ab5      	ldr	r2, [pc, #724]	@ (8002940 <__aeabi_dmul+0x318>)
 800266a:	468a      	mov	sl, r1
 800266c:	189d      	adds	r5, r3, r2
 800266e:	2300      	movs	r3, #0
 8002670:	4698      	mov	r8, r3
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	033c      	lsls	r4, r7, #12
 8002676:	007b      	lsls	r3, r7, #1
 8002678:	0ffa      	lsrs	r2, r7, #31
 800267a:	0030      	movs	r0, r6
 800267c:	0b24      	lsrs	r4, r4, #12
 800267e:	0d5b      	lsrs	r3, r3, #21
 8002680:	9200      	str	r2, [sp, #0]
 8002682:	d100      	bne.n	8002686 <__aeabi_dmul+0x5e>
 8002684:	e096      	b.n	80027b4 <__aeabi_dmul+0x18c>
 8002686:	4aad      	ldr	r2, [pc, #692]	@ (800293c <__aeabi_dmul+0x314>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d031      	beq.n	80026f0 <__aeabi_dmul+0xc8>
 800268c:	0f72      	lsrs	r2, r6, #29
 800268e:	00e4      	lsls	r4, r4, #3
 8002690:	4322      	orrs	r2, r4
 8002692:	2480      	movs	r4, #128	@ 0x80
 8002694:	0424      	lsls	r4, r4, #16
 8002696:	4314      	orrs	r4, r2
 8002698:	4aa9      	ldr	r2, [pc, #676]	@ (8002940 <__aeabi_dmul+0x318>)
 800269a:	00f0      	lsls	r0, r6, #3
 800269c:	4694      	mov	ip, r2
 800269e:	4463      	add	r3, ip
 80026a0:	195b      	adds	r3, r3, r5
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	9201      	str	r2, [sp, #4]
 80026a6:	4642      	mov	r2, r8
 80026a8:	2600      	movs	r6, #0
 80026aa:	2a0a      	cmp	r2, #10
 80026ac:	dc42      	bgt.n	8002734 <__aeabi_dmul+0x10c>
 80026ae:	465a      	mov	r2, fp
 80026b0:	9900      	ldr	r1, [sp, #0]
 80026b2:	404a      	eors	r2, r1
 80026b4:	4693      	mov	fp, r2
 80026b6:	4642      	mov	r2, r8
 80026b8:	2a02      	cmp	r2, #2
 80026ba:	dc32      	bgt.n	8002722 <__aeabi_dmul+0xfa>
 80026bc:	3a01      	subs	r2, #1
 80026be:	2a01      	cmp	r2, #1
 80026c0:	d900      	bls.n	80026c4 <__aeabi_dmul+0x9c>
 80026c2:	e149      	b.n	8002958 <__aeabi_dmul+0x330>
 80026c4:	2e02      	cmp	r6, #2
 80026c6:	d100      	bne.n	80026ca <__aeabi_dmul+0xa2>
 80026c8:	e0ca      	b.n	8002860 <__aeabi_dmul+0x238>
 80026ca:	2e01      	cmp	r6, #1
 80026cc:	d13d      	bne.n	800274a <__aeabi_dmul+0x122>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2400      	movs	r4, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	0010      	movs	r0, r2
 80026d6:	465a      	mov	r2, fp
 80026d8:	051b      	lsls	r3, r3, #20
 80026da:	4323      	orrs	r3, r4
 80026dc:	07d2      	lsls	r2, r2, #31
 80026de:	4313      	orrs	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	b007      	add	sp, #28
 80026e4:	bcf0      	pop	{r4, r5, r6, r7}
 80026e6:	46bb      	mov	fp, r7
 80026e8:	46b2      	mov	sl, r6
 80026ea:	46a9      	mov	r9, r5
 80026ec:	46a0      	mov	r8, r4
 80026ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f0:	4b92      	ldr	r3, [pc, #584]	@ (800293c <__aeabi_dmul+0x314>)
 80026f2:	4326      	orrs	r6, r4
 80026f4:	18eb      	adds	r3, r5, r3
 80026f6:	2e00      	cmp	r6, #0
 80026f8:	d100      	bne.n	80026fc <__aeabi_dmul+0xd4>
 80026fa:	e0bb      	b.n	8002874 <__aeabi_dmul+0x24c>
 80026fc:	2203      	movs	r2, #3
 80026fe:	4641      	mov	r1, r8
 8002700:	4311      	orrs	r1, r2
 8002702:	465a      	mov	r2, fp
 8002704:	4688      	mov	r8, r1
 8002706:	9900      	ldr	r1, [sp, #0]
 8002708:	404a      	eors	r2, r1
 800270a:	2180      	movs	r1, #128	@ 0x80
 800270c:	0109      	lsls	r1, r1, #4
 800270e:	468c      	mov	ip, r1
 8002710:	0029      	movs	r1, r5
 8002712:	4461      	add	r1, ip
 8002714:	9101      	str	r1, [sp, #4]
 8002716:	4641      	mov	r1, r8
 8002718:	290a      	cmp	r1, #10
 800271a:	dd00      	ble.n	800271e <__aeabi_dmul+0xf6>
 800271c:	e233      	b.n	8002b86 <__aeabi_dmul+0x55e>
 800271e:	4693      	mov	fp, r2
 8002720:	2603      	movs	r6, #3
 8002722:	4642      	mov	r2, r8
 8002724:	2701      	movs	r7, #1
 8002726:	4097      	lsls	r7, r2
 8002728:	21a6      	movs	r1, #166	@ 0xa6
 800272a:	003a      	movs	r2, r7
 800272c:	00c9      	lsls	r1, r1, #3
 800272e:	400a      	ands	r2, r1
 8002730:	420f      	tst	r7, r1
 8002732:	d031      	beq.n	8002798 <__aeabi_dmul+0x170>
 8002734:	9e02      	ldr	r6, [sp, #8]
 8002736:	2e02      	cmp	r6, #2
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x114>
 800273a:	e235      	b.n	8002ba8 <__aeabi_dmul+0x580>
 800273c:	2e03      	cmp	r6, #3
 800273e:	d100      	bne.n	8002742 <__aeabi_dmul+0x11a>
 8002740:	e1d2      	b.n	8002ae8 <__aeabi_dmul+0x4c0>
 8002742:	4654      	mov	r4, sl
 8002744:	4648      	mov	r0, r9
 8002746:	2e01      	cmp	r6, #1
 8002748:	d0c1      	beq.n	80026ce <__aeabi_dmul+0xa6>
 800274a:	9a01      	ldr	r2, [sp, #4]
 800274c:	4b7d      	ldr	r3, [pc, #500]	@ (8002944 <__aeabi_dmul+0x31c>)
 800274e:	4694      	mov	ip, r2
 8002750:	4463      	add	r3, ip
 8002752:	2b00      	cmp	r3, #0
 8002754:	dc00      	bgt.n	8002758 <__aeabi_dmul+0x130>
 8002756:	e0c0      	b.n	80028da <__aeabi_dmul+0x2b2>
 8002758:	0742      	lsls	r2, r0, #29
 800275a:	d009      	beq.n	8002770 <__aeabi_dmul+0x148>
 800275c:	220f      	movs	r2, #15
 800275e:	4002      	ands	r2, r0
 8002760:	2a04      	cmp	r2, #4
 8002762:	d005      	beq.n	8002770 <__aeabi_dmul+0x148>
 8002764:	1d02      	adds	r2, r0, #4
 8002766:	4282      	cmp	r2, r0
 8002768:	4180      	sbcs	r0, r0
 800276a:	4240      	negs	r0, r0
 800276c:	1824      	adds	r4, r4, r0
 800276e:	0010      	movs	r0, r2
 8002770:	01e2      	lsls	r2, r4, #7
 8002772:	d506      	bpl.n	8002782 <__aeabi_dmul+0x15a>
 8002774:	4b74      	ldr	r3, [pc, #464]	@ (8002948 <__aeabi_dmul+0x320>)
 8002776:	9a01      	ldr	r2, [sp, #4]
 8002778:	401c      	ands	r4, r3
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	4694      	mov	ip, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4463      	add	r3, ip
 8002782:	4a72      	ldr	r2, [pc, #456]	@ (800294c <__aeabi_dmul+0x324>)
 8002784:	4293      	cmp	r3, r2
 8002786:	dc6b      	bgt.n	8002860 <__aeabi_dmul+0x238>
 8002788:	0762      	lsls	r2, r4, #29
 800278a:	08c0      	lsrs	r0, r0, #3
 800278c:	0264      	lsls	r4, r4, #9
 800278e:	055b      	lsls	r3, r3, #21
 8002790:	4302      	orrs	r2, r0
 8002792:	0b24      	lsrs	r4, r4, #12
 8002794:	0d5b      	lsrs	r3, r3, #21
 8002796:	e79d      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002798:	2190      	movs	r1, #144	@ 0x90
 800279a:	0089      	lsls	r1, r1, #2
 800279c:	420f      	tst	r7, r1
 800279e:	d163      	bne.n	8002868 <__aeabi_dmul+0x240>
 80027a0:	2288      	movs	r2, #136	@ 0x88
 80027a2:	423a      	tst	r2, r7
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dmul+0x180>
 80027a6:	e0d7      	b.n	8002958 <__aeabi_dmul+0x330>
 80027a8:	9b00      	ldr	r3, [sp, #0]
 80027aa:	46a2      	mov	sl, r4
 80027ac:	469b      	mov	fp, r3
 80027ae:	4681      	mov	r9, r0
 80027b0:	9602      	str	r6, [sp, #8]
 80027b2:	e7bf      	b.n	8002734 <__aeabi_dmul+0x10c>
 80027b4:	0023      	movs	r3, r4
 80027b6:	4333      	orrs	r3, r6
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x194>
 80027ba:	e07f      	b.n	80028bc <__aeabi_dmul+0x294>
 80027bc:	2c00      	cmp	r4, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dmul+0x19a>
 80027c0:	e1ad      	b.n	8002b1e <__aeabi_dmul+0x4f6>
 80027c2:	0020      	movs	r0, r4
 80027c4:	f000 ff10 	bl	80035e8 <__clzsi2>
 80027c8:	0002      	movs	r2, r0
 80027ca:	0003      	movs	r3, r0
 80027cc:	3a0b      	subs	r2, #11
 80027ce:	201d      	movs	r0, #29
 80027d0:	0019      	movs	r1, r3
 80027d2:	1a82      	subs	r2, r0, r2
 80027d4:	0030      	movs	r0, r6
 80027d6:	3908      	subs	r1, #8
 80027d8:	40d0      	lsrs	r0, r2
 80027da:	408c      	lsls	r4, r1
 80027dc:	4304      	orrs	r4, r0
 80027de:	0030      	movs	r0, r6
 80027e0:	4088      	lsls	r0, r1
 80027e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002950 <__aeabi_dmul+0x328>)
 80027e4:	1aeb      	subs	r3, r5, r3
 80027e6:	4694      	mov	ip, r2
 80027e8:	4463      	add	r3, ip
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	9201      	str	r2, [sp, #4]
 80027ee:	4642      	mov	r2, r8
 80027f0:	2600      	movs	r6, #0
 80027f2:	2a0a      	cmp	r2, #10
 80027f4:	dc00      	bgt.n	80027f8 <__aeabi_dmul+0x1d0>
 80027f6:	e75a      	b.n	80026ae <__aeabi_dmul+0x86>
 80027f8:	e79c      	b.n	8002734 <__aeabi_dmul+0x10c>
 80027fa:	4653      	mov	r3, sl
 80027fc:	4303      	orrs	r3, r0
 80027fe:	4699      	mov	r9, r3
 8002800:	d054      	beq.n	80028ac <__aeabi_dmul+0x284>
 8002802:	4653      	mov	r3, sl
 8002804:	2b00      	cmp	r3, #0
 8002806:	d100      	bne.n	800280a <__aeabi_dmul+0x1e2>
 8002808:	e177      	b.n	8002afa <__aeabi_dmul+0x4d2>
 800280a:	4650      	mov	r0, sl
 800280c:	f000 feec 	bl	80035e8 <__clzsi2>
 8002810:	230b      	movs	r3, #11
 8002812:	425b      	negs	r3, r3
 8002814:	469c      	mov	ip, r3
 8002816:	0002      	movs	r2, r0
 8002818:	4484      	add	ip, r0
 800281a:	0011      	movs	r1, r2
 800281c:	4650      	mov	r0, sl
 800281e:	3908      	subs	r1, #8
 8002820:	4088      	lsls	r0, r1
 8002822:	231d      	movs	r3, #29
 8002824:	4680      	mov	r8, r0
 8002826:	4660      	mov	r0, ip
 8002828:	1a1b      	subs	r3, r3, r0
 800282a:	0020      	movs	r0, r4
 800282c:	40d8      	lsrs	r0, r3
 800282e:	0003      	movs	r3, r0
 8002830:	4640      	mov	r0, r8
 8002832:	4303      	orrs	r3, r0
 8002834:	469a      	mov	sl, r3
 8002836:	0023      	movs	r3, r4
 8002838:	408b      	lsls	r3, r1
 800283a:	4699      	mov	r9, r3
 800283c:	2300      	movs	r3, #0
 800283e:	4d44      	ldr	r5, [pc, #272]	@ (8002950 <__aeabi_dmul+0x328>)
 8002840:	4698      	mov	r8, r3
 8002842:	1aad      	subs	r5, r5, r2
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	e715      	b.n	8002674 <__aeabi_dmul+0x4c>
 8002848:	4652      	mov	r2, sl
 800284a:	4302      	orrs	r2, r0
 800284c:	4691      	mov	r9, r2
 800284e:	d126      	bne.n	800289e <__aeabi_dmul+0x276>
 8002850:	2200      	movs	r2, #0
 8002852:	001d      	movs	r5, r3
 8002854:	2302      	movs	r3, #2
 8002856:	4692      	mov	sl, r2
 8002858:	3208      	adds	r2, #8
 800285a:	4690      	mov	r8, r2
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	e709      	b.n	8002674 <__aeabi_dmul+0x4c>
 8002860:	2400      	movs	r4, #0
 8002862:	2200      	movs	r2, #0
 8002864:	4b35      	ldr	r3, [pc, #212]	@ (800293c <__aeabi_dmul+0x314>)
 8002866:	e735      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002868:	2300      	movs	r3, #0
 800286a:	2480      	movs	r4, #128	@ 0x80
 800286c:	469b      	mov	fp, r3
 800286e:	0324      	lsls	r4, r4, #12
 8002870:	4b32      	ldr	r3, [pc, #200]	@ (800293c <__aeabi_dmul+0x314>)
 8002872:	e72f      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002874:	2202      	movs	r2, #2
 8002876:	4641      	mov	r1, r8
 8002878:	4311      	orrs	r1, r2
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	4694      	mov	ip, r2
 8002880:	002a      	movs	r2, r5
 8002882:	4462      	add	r2, ip
 8002884:	4688      	mov	r8, r1
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	290a      	cmp	r1, #10
 800288a:	dd00      	ble.n	800288e <__aeabi_dmul+0x266>
 800288c:	e752      	b.n	8002734 <__aeabi_dmul+0x10c>
 800288e:	465a      	mov	r2, fp
 8002890:	2000      	movs	r0, #0
 8002892:	9900      	ldr	r1, [sp, #0]
 8002894:	0004      	movs	r4, r0
 8002896:	404a      	eors	r2, r1
 8002898:	4693      	mov	fp, r2
 800289a:	2602      	movs	r6, #2
 800289c:	e70b      	b.n	80026b6 <__aeabi_dmul+0x8e>
 800289e:	220c      	movs	r2, #12
 80028a0:	001d      	movs	r5, r3
 80028a2:	2303      	movs	r3, #3
 80028a4:	4681      	mov	r9, r0
 80028a6:	4690      	mov	r8, r2
 80028a8:	9302      	str	r3, [sp, #8]
 80028aa:	e6e3      	b.n	8002674 <__aeabi_dmul+0x4c>
 80028ac:	2300      	movs	r3, #0
 80028ae:	469a      	mov	sl, r3
 80028b0:	3304      	adds	r3, #4
 80028b2:	4698      	mov	r8, r3
 80028b4:	3b03      	subs	r3, #3
 80028b6:	2500      	movs	r5, #0
 80028b8:	9302      	str	r3, [sp, #8]
 80028ba:	e6db      	b.n	8002674 <__aeabi_dmul+0x4c>
 80028bc:	4642      	mov	r2, r8
 80028be:	3301      	adds	r3, #1
 80028c0:	431a      	orrs	r2, r3
 80028c2:	002b      	movs	r3, r5
 80028c4:	4690      	mov	r8, r2
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	9201      	str	r2, [sp, #4]
 80028ca:	4642      	mov	r2, r8
 80028cc:	2400      	movs	r4, #0
 80028ce:	2000      	movs	r0, #0
 80028d0:	2601      	movs	r6, #1
 80028d2:	2a0a      	cmp	r2, #10
 80028d4:	dc00      	bgt.n	80028d8 <__aeabi_dmul+0x2b0>
 80028d6:	e6ea      	b.n	80026ae <__aeabi_dmul+0x86>
 80028d8:	e72c      	b.n	8002734 <__aeabi_dmul+0x10c>
 80028da:	2201      	movs	r2, #1
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	2a38      	cmp	r2, #56	@ 0x38
 80028e0:	dd00      	ble.n	80028e4 <__aeabi_dmul+0x2bc>
 80028e2:	e6f4      	b.n	80026ce <__aeabi_dmul+0xa6>
 80028e4:	2a1f      	cmp	r2, #31
 80028e6:	dc00      	bgt.n	80028ea <__aeabi_dmul+0x2c2>
 80028e8:	e12a      	b.n	8002b40 <__aeabi_dmul+0x518>
 80028ea:	211f      	movs	r1, #31
 80028ec:	4249      	negs	r1, r1
 80028ee:	1acb      	subs	r3, r1, r3
 80028f0:	0021      	movs	r1, r4
 80028f2:	40d9      	lsrs	r1, r3
 80028f4:	000b      	movs	r3, r1
 80028f6:	2a20      	cmp	r2, #32
 80028f8:	d005      	beq.n	8002906 <__aeabi_dmul+0x2de>
 80028fa:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <__aeabi_dmul+0x32c>)
 80028fc:	9d01      	ldr	r5, [sp, #4]
 80028fe:	4694      	mov	ip, r2
 8002900:	4465      	add	r5, ip
 8002902:	40ac      	lsls	r4, r5
 8002904:	4320      	orrs	r0, r4
 8002906:	1e42      	subs	r2, r0, #1
 8002908:	4190      	sbcs	r0, r2
 800290a:	4318      	orrs	r0, r3
 800290c:	2307      	movs	r3, #7
 800290e:	0019      	movs	r1, r3
 8002910:	2400      	movs	r4, #0
 8002912:	4001      	ands	r1, r0
 8002914:	4203      	tst	r3, r0
 8002916:	d00c      	beq.n	8002932 <__aeabi_dmul+0x30a>
 8002918:	230f      	movs	r3, #15
 800291a:	4003      	ands	r3, r0
 800291c:	2b04      	cmp	r3, #4
 800291e:	d100      	bne.n	8002922 <__aeabi_dmul+0x2fa>
 8002920:	e140      	b.n	8002ba4 <__aeabi_dmul+0x57c>
 8002922:	1d03      	adds	r3, r0, #4
 8002924:	4283      	cmp	r3, r0
 8002926:	41a4      	sbcs	r4, r4
 8002928:	0018      	movs	r0, r3
 800292a:	4264      	negs	r4, r4
 800292c:	0761      	lsls	r1, r4, #29
 800292e:	0264      	lsls	r4, r4, #9
 8002930:	0b24      	lsrs	r4, r4, #12
 8002932:	08c2      	lsrs	r2, r0, #3
 8002934:	2300      	movs	r3, #0
 8002936:	430a      	orrs	r2, r1
 8002938:	e6cc      	b.n	80026d4 <__aeabi_dmul+0xac>
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	000007ff 	.word	0x000007ff
 8002940:	fffffc01 	.word	0xfffffc01
 8002944:	000003ff 	.word	0x000003ff
 8002948:	feffffff 	.word	0xfeffffff
 800294c:	000007fe 	.word	0x000007fe
 8002950:	fffffc0d 	.word	0xfffffc0d
 8002954:	0000043e 	.word	0x0000043e
 8002958:	4649      	mov	r1, r9
 800295a:	464a      	mov	r2, r9
 800295c:	0409      	lsls	r1, r1, #16
 800295e:	0c09      	lsrs	r1, r1, #16
 8002960:	000d      	movs	r5, r1
 8002962:	0c16      	lsrs	r6, r2, #16
 8002964:	0c02      	lsrs	r2, r0, #16
 8002966:	0400      	lsls	r0, r0, #16
 8002968:	0c00      	lsrs	r0, r0, #16
 800296a:	4345      	muls	r5, r0
 800296c:	46ac      	mov	ip, r5
 800296e:	0005      	movs	r5, r0
 8002970:	4375      	muls	r5, r6
 8002972:	46a8      	mov	r8, r5
 8002974:	0015      	movs	r5, r2
 8002976:	000f      	movs	r7, r1
 8002978:	4375      	muls	r5, r6
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	9502      	str	r5, [sp, #8]
 800297e:	002a      	movs	r2, r5
 8002980:	9d00      	ldr	r5, [sp, #0]
 8002982:	436f      	muls	r7, r5
 8002984:	4665      	mov	r5, ip
 8002986:	0c2d      	lsrs	r5, r5, #16
 8002988:	46a9      	mov	r9, r5
 800298a:	4447      	add	r7, r8
 800298c:	444f      	add	r7, r9
 800298e:	45b8      	cmp	r8, r7
 8002990:	d905      	bls.n	800299e <__aeabi_dmul+0x376>
 8002992:	0015      	movs	r5, r2
 8002994:	2280      	movs	r2, #128	@ 0x80
 8002996:	0252      	lsls	r2, r2, #9
 8002998:	4690      	mov	r8, r2
 800299a:	4445      	add	r5, r8
 800299c:	9502      	str	r5, [sp, #8]
 800299e:	0c3d      	lsrs	r5, r7, #16
 80029a0:	9503      	str	r5, [sp, #12]
 80029a2:	4665      	mov	r5, ip
 80029a4:	042d      	lsls	r5, r5, #16
 80029a6:	043f      	lsls	r7, r7, #16
 80029a8:	0c2d      	lsrs	r5, r5, #16
 80029aa:	46ac      	mov	ip, r5
 80029ac:	003d      	movs	r5, r7
 80029ae:	4465      	add	r5, ip
 80029b0:	9504      	str	r5, [sp, #16]
 80029b2:	0c25      	lsrs	r5, r4, #16
 80029b4:	0424      	lsls	r4, r4, #16
 80029b6:	0c24      	lsrs	r4, r4, #16
 80029b8:	46ac      	mov	ip, r5
 80029ba:	0025      	movs	r5, r4
 80029bc:	4375      	muls	r5, r6
 80029be:	46a8      	mov	r8, r5
 80029c0:	4665      	mov	r5, ip
 80029c2:	000f      	movs	r7, r1
 80029c4:	4369      	muls	r1, r5
 80029c6:	4441      	add	r1, r8
 80029c8:	4689      	mov	r9, r1
 80029ca:	4367      	muls	r7, r4
 80029cc:	0c39      	lsrs	r1, r7, #16
 80029ce:	4449      	add	r1, r9
 80029d0:	436e      	muls	r6, r5
 80029d2:	4588      	cmp	r8, r1
 80029d4:	d903      	bls.n	80029de <__aeabi_dmul+0x3b6>
 80029d6:	2280      	movs	r2, #128	@ 0x80
 80029d8:	0252      	lsls	r2, r2, #9
 80029da:	4690      	mov	r8, r2
 80029dc:	4446      	add	r6, r8
 80029de:	0c0d      	lsrs	r5, r1, #16
 80029e0:	46a8      	mov	r8, r5
 80029e2:	0035      	movs	r5, r6
 80029e4:	4445      	add	r5, r8
 80029e6:	9505      	str	r5, [sp, #20]
 80029e8:	9d03      	ldr	r5, [sp, #12]
 80029ea:	043f      	lsls	r7, r7, #16
 80029ec:	46a8      	mov	r8, r5
 80029ee:	0c3f      	lsrs	r7, r7, #16
 80029f0:	0409      	lsls	r1, r1, #16
 80029f2:	19c9      	adds	r1, r1, r7
 80029f4:	4488      	add	r8, r1
 80029f6:	4645      	mov	r5, r8
 80029f8:	9503      	str	r5, [sp, #12]
 80029fa:	4655      	mov	r5, sl
 80029fc:	042e      	lsls	r6, r5, #16
 80029fe:	0c36      	lsrs	r6, r6, #16
 8002a00:	0c2f      	lsrs	r7, r5, #16
 8002a02:	0035      	movs	r5, r6
 8002a04:	4345      	muls	r5, r0
 8002a06:	4378      	muls	r0, r7
 8002a08:	4681      	mov	r9, r0
 8002a0a:	0038      	movs	r0, r7
 8002a0c:	46a8      	mov	r8, r5
 8002a0e:	0c2d      	lsrs	r5, r5, #16
 8002a10:	46aa      	mov	sl, r5
 8002a12:	9a00      	ldr	r2, [sp, #0]
 8002a14:	4350      	muls	r0, r2
 8002a16:	4372      	muls	r2, r6
 8002a18:	444a      	add	r2, r9
 8002a1a:	4452      	add	r2, sl
 8002a1c:	4591      	cmp	r9, r2
 8002a1e:	d903      	bls.n	8002a28 <__aeabi_dmul+0x400>
 8002a20:	2580      	movs	r5, #128	@ 0x80
 8002a22:	026d      	lsls	r5, r5, #9
 8002a24:	46a9      	mov	r9, r5
 8002a26:	4448      	add	r0, r9
 8002a28:	0c15      	lsrs	r5, r2, #16
 8002a2a:	46a9      	mov	r9, r5
 8002a2c:	4645      	mov	r5, r8
 8002a2e:	042d      	lsls	r5, r5, #16
 8002a30:	0c2d      	lsrs	r5, r5, #16
 8002a32:	46a8      	mov	r8, r5
 8002a34:	4665      	mov	r5, ip
 8002a36:	437d      	muls	r5, r7
 8002a38:	0412      	lsls	r2, r2, #16
 8002a3a:	4448      	add	r0, r9
 8002a3c:	4490      	add	r8, r2
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	0032      	movs	r2, r6
 8002a42:	4665      	mov	r5, ip
 8002a44:	4362      	muls	r2, r4
 8002a46:	436e      	muls	r6, r5
 8002a48:	437c      	muls	r4, r7
 8002a4a:	0c17      	lsrs	r7, r2, #16
 8002a4c:	1936      	adds	r6, r6, r4
 8002a4e:	19bf      	adds	r7, r7, r6
 8002a50:	42bc      	cmp	r4, r7
 8002a52:	d903      	bls.n	8002a5c <__aeabi_dmul+0x434>
 8002a54:	2480      	movs	r4, #128	@ 0x80
 8002a56:	0264      	lsls	r4, r4, #9
 8002a58:	46a4      	mov	ip, r4
 8002a5a:	44e1      	add	r9, ip
 8002a5c:	9c02      	ldr	r4, [sp, #8]
 8002a5e:	9e03      	ldr	r6, [sp, #12]
 8002a60:	46a4      	mov	ip, r4
 8002a62:	9d05      	ldr	r5, [sp, #20]
 8002a64:	4466      	add	r6, ip
 8002a66:	428e      	cmp	r6, r1
 8002a68:	4189      	sbcs	r1, r1
 8002a6a:	46ac      	mov	ip, r5
 8002a6c:	0412      	lsls	r2, r2, #16
 8002a6e:	043c      	lsls	r4, r7, #16
 8002a70:	0c12      	lsrs	r2, r2, #16
 8002a72:	18a2      	adds	r2, r4, r2
 8002a74:	4462      	add	r2, ip
 8002a76:	4249      	negs	r1, r1
 8002a78:	1854      	adds	r4, r2, r1
 8002a7a:	4446      	add	r6, r8
 8002a7c:	46a4      	mov	ip, r4
 8002a7e:	4546      	cmp	r6, r8
 8002a80:	41a4      	sbcs	r4, r4
 8002a82:	4682      	mov	sl, r0
 8002a84:	4264      	negs	r4, r4
 8002a86:	46a0      	mov	r8, r4
 8002a88:	42aa      	cmp	r2, r5
 8002a8a:	4192      	sbcs	r2, r2
 8002a8c:	458c      	cmp	ip, r1
 8002a8e:	4189      	sbcs	r1, r1
 8002a90:	44e2      	add	sl, ip
 8002a92:	44d0      	add	r8, sl
 8002a94:	4249      	negs	r1, r1
 8002a96:	4252      	negs	r2, r2
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	45a0      	cmp	r8, r4
 8002a9c:	41a4      	sbcs	r4, r4
 8002a9e:	4582      	cmp	sl, r0
 8002aa0:	4189      	sbcs	r1, r1
 8002aa2:	4264      	negs	r4, r4
 8002aa4:	4249      	negs	r1, r1
 8002aa6:	430c      	orrs	r4, r1
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	0c3f      	lsrs	r7, r7, #16
 8002aac:	19d2      	adds	r2, r2, r7
 8002aae:	1912      	adds	r2, r2, r4
 8002ab0:	0dcc      	lsrs	r4, r1, #23
 8002ab2:	9904      	ldr	r1, [sp, #16]
 8002ab4:	0270      	lsls	r0, r6, #9
 8002ab6:	4308      	orrs	r0, r1
 8002ab8:	1e41      	subs	r1, r0, #1
 8002aba:	4188      	sbcs	r0, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	444a      	add	r2, r9
 8002ac0:	0df6      	lsrs	r6, r6, #23
 8002ac2:	0252      	lsls	r2, r2, #9
 8002ac4:	4330      	orrs	r0, r6
 8002ac6:	0249      	lsls	r1, r1, #9
 8002ac8:	4314      	orrs	r4, r2
 8002aca:	4308      	orrs	r0, r1
 8002acc:	01d2      	lsls	r2, r2, #7
 8002ace:	d535      	bpl.n	8002b3c <__aeabi_dmul+0x514>
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	0843      	lsrs	r3, r0, #1
 8002ad4:	4002      	ands	r2, r0
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	07e0      	lsls	r0, r4, #31
 8002ada:	4318      	orrs	r0, r3
 8002adc:	0864      	lsrs	r4, r4, #1
 8002ade:	e634      	b.n	800274a <__aeabi_dmul+0x122>
 8002ae0:	9b00      	ldr	r3, [sp, #0]
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	469b      	mov	fp, r3
 8002ae6:	4681      	mov	r9, r0
 8002ae8:	2480      	movs	r4, #128	@ 0x80
 8002aea:	4653      	mov	r3, sl
 8002aec:	0324      	lsls	r4, r4, #12
 8002aee:	431c      	orrs	r4, r3
 8002af0:	0324      	lsls	r4, r4, #12
 8002af2:	464a      	mov	r2, r9
 8002af4:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <__aeabi_dmul+0x588>)
 8002af6:	0b24      	lsrs	r4, r4, #12
 8002af8:	e5ec      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002afa:	f000 fd75 	bl	80035e8 <__clzsi2>
 8002afe:	2315      	movs	r3, #21
 8002b00:	469c      	mov	ip, r3
 8002b02:	4484      	add	ip, r0
 8002b04:	0002      	movs	r2, r0
 8002b06:	4663      	mov	r3, ip
 8002b08:	3220      	adds	r2, #32
 8002b0a:	2b1c      	cmp	r3, #28
 8002b0c:	dc00      	bgt.n	8002b10 <__aeabi_dmul+0x4e8>
 8002b0e:	e684      	b.n	800281a <__aeabi_dmul+0x1f2>
 8002b10:	2300      	movs	r3, #0
 8002b12:	4699      	mov	r9, r3
 8002b14:	0023      	movs	r3, r4
 8002b16:	3808      	subs	r0, #8
 8002b18:	4083      	lsls	r3, r0
 8002b1a:	469a      	mov	sl, r3
 8002b1c:	e68e      	b.n	800283c <__aeabi_dmul+0x214>
 8002b1e:	f000 fd63 	bl	80035e8 <__clzsi2>
 8002b22:	0002      	movs	r2, r0
 8002b24:	0003      	movs	r3, r0
 8002b26:	3215      	adds	r2, #21
 8002b28:	3320      	adds	r3, #32
 8002b2a:	2a1c      	cmp	r2, #28
 8002b2c:	dc00      	bgt.n	8002b30 <__aeabi_dmul+0x508>
 8002b2e:	e64e      	b.n	80027ce <__aeabi_dmul+0x1a6>
 8002b30:	0002      	movs	r2, r0
 8002b32:	0034      	movs	r4, r6
 8002b34:	3a08      	subs	r2, #8
 8002b36:	2000      	movs	r0, #0
 8002b38:	4094      	lsls	r4, r2
 8002b3a:	e652      	b.n	80027e2 <__aeabi_dmul+0x1ba>
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	e604      	b.n	800274a <__aeabi_dmul+0x122>
 8002b40:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <__aeabi_dmul+0x58c>)
 8002b42:	0021      	movs	r1, r4
 8002b44:	469c      	mov	ip, r3
 8002b46:	0003      	movs	r3, r0
 8002b48:	9d01      	ldr	r5, [sp, #4]
 8002b4a:	40d3      	lsrs	r3, r2
 8002b4c:	4465      	add	r5, ip
 8002b4e:	40a9      	lsls	r1, r5
 8002b50:	4319      	orrs	r1, r3
 8002b52:	0003      	movs	r3, r0
 8002b54:	40ab      	lsls	r3, r5
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	4183      	sbcs	r3, r0
 8002b5a:	4319      	orrs	r1, r3
 8002b5c:	0008      	movs	r0, r1
 8002b5e:	40d4      	lsrs	r4, r2
 8002b60:	074b      	lsls	r3, r1, #29
 8002b62:	d009      	beq.n	8002b78 <__aeabi_dmul+0x550>
 8002b64:	230f      	movs	r3, #15
 8002b66:	400b      	ands	r3, r1
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d005      	beq.n	8002b78 <__aeabi_dmul+0x550>
 8002b6c:	1d0b      	adds	r3, r1, #4
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	4180      	sbcs	r0, r0
 8002b72:	4240      	negs	r0, r0
 8002b74:	1824      	adds	r4, r4, r0
 8002b76:	0018      	movs	r0, r3
 8002b78:	0223      	lsls	r3, r4, #8
 8002b7a:	d400      	bmi.n	8002b7e <__aeabi_dmul+0x556>
 8002b7c:	e6d6      	b.n	800292c <__aeabi_dmul+0x304>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	2400      	movs	r4, #0
 8002b82:	2200      	movs	r2, #0
 8002b84:	e5a6      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002b86:	290f      	cmp	r1, #15
 8002b88:	d1aa      	bne.n	8002ae0 <__aeabi_dmul+0x4b8>
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	031b      	lsls	r3, r3, #12
 8002b90:	421a      	tst	r2, r3
 8002b92:	d0a9      	beq.n	8002ae8 <__aeabi_dmul+0x4c0>
 8002b94:	421c      	tst	r4, r3
 8002b96:	d1a7      	bne.n	8002ae8 <__aeabi_dmul+0x4c0>
 8002b98:	431c      	orrs	r4, r3
 8002b9a:	9b00      	ldr	r3, [sp, #0]
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	469b      	mov	fp, r3
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <__aeabi_dmul+0x588>)
 8002ba2:	e597      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002ba4:	2400      	movs	r4, #0
 8002ba6:	e6c1      	b.n	800292c <__aeabi_dmul+0x304>
 8002ba8:	2400      	movs	r4, #0
 8002baa:	4b01      	ldr	r3, [pc, #4]	@ (8002bb0 <__aeabi_dmul+0x588>)
 8002bac:	0022      	movs	r2, r4
 8002bae:	e591      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002bb0:	000007ff 	.word	0x000007ff
 8002bb4:	0000041e 	.word	0x0000041e

08002bb8 <__aeabi_dsub>:
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	464e      	mov	r6, r9
 8002bbc:	4645      	mov	r5, r8
 8002bbe:	46de      	mov	lr, fp
 8002bc0:	4657      	mov	r7, sl
 8002bc2:	b5e0      	push	{r5, r6, r7, lr}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	9000      	str	r0, [sp, #0]
 8002bc8:	9101      	str	r1, [sp, #4]
 8002bca:	030c      	lsls	r4, r1, #12
 8002bcc:	004f      	lsls	r7, r1, #1
 8002bce:	0fce      	lsrs	r6, r1, #31
 8002bd0:	0a61      	lsrs	r1, r4, #9
 8002bd2:	9c00      	ldr	r4, [sp, #0]
 8002bd4:	46b0      	mov	r8, r6
 8002bd6:	0f64      	lsrs	r4, r4, #29
 8002bd8:	430c      	orrs	r4, r1
 8002bda:	9900      	ldr	r1, [sp, #0]
 8002bdc:	0d7f      	lsrs	r7, r7, #21
 8002bde:	00c8      	lsls	r0, r1, #3
 8002be0:	0011      	movs	r1, r2
 8002be2:	001a      	movs	r2, r3
 8002be4:	031b      	lsls	r3, r3, #12
 8002be6:	469c      	mov	ip, r3
 8002be8:	9100      	str	r1, [sp, #0]
 8002bea:	9201      	str	r2, [sp, #4]
 8002bec:	0051      	lsls	r1, r2, #1
 8002bee:	0d4b      	lsrs	r3, r1, #21
 8002bf0:	4699      	mov	r9, r3
 8002bf2:	9b01      	ldr	r3, [sp, #4]
 8002bf4:	9d00      	ldr	r5, [sp, #0]
 8002bf6:	0fd9      	lsrs	r1, r3, #31
 8002bf8:	4663      	mov	r3, ip
 8002bfa:	0f6a      	lsrs	r2, r5, #29
 8002bfc:	0a5b      	lsrs	r3, r3, #9
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	00ea      	lsls	r2, r5, #3
 8002c02:	4694      	mov	ip, r2
 8002c04:	4693      	mov	fp, r2
 8002c06:	4ac1      	ldr	r2, [pc, #772]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002c08:	9003      	str	r0, [sp, #12]
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	4591      	cmp	r9, r2
 8002c0e:	d100      	bne.n	8002c12 <__aeabi_dsub+0x5a>
 8002c10:	e0cd      	b.n	8002dae <__aeabi_dsub+0x1f6>
 8002c12:	2501      	movs	r5, #1
 8002c14:	4069      	eors	r1, r5
 8002c16:	464d      	mov	r5, r9
 8002c18:	1b7d      	subs	r5, r7, r5
 8002c1a:	46aa      	mov	sl, r5
 8002c1c:	428e      	cmp	r6, r1
 8002c1e:	d100      	bne.n	8002c22 <__aeabi_dsub+0x6a>
 8002c20:	e080      	b.n	8002d24 <__aeabi_dsub+0x16c>
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	dc00      	bgt.n	8002c28 <__aeabi_dsub+0x70>
 8002c26:	e335      	b.n	8003294 <__aeabi_dsub+0x6dc>
 8002c28:	4649      	mov	r1, r9
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d100      	bne.n	8002c30 <__aeabi_dsub+0x78>
 8002c2e:	e0df      	b.n	8002df0 <__aeabi_dsub+0x238>
 8002c30:	4297      	cmp	r7, r2
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x7e>
 8002c34:	e194      	b.n	8002f60 <__aeabi_dsub+0x3a8>
 8002c36:	4652      	mov	r2, sl
 8002c38:	2501      	movs	r5, #1
 8002c3a:	2a38      	cmp	r2, #56	@ 0x38
 8002c3c:	dc19      	bgt.n	8002c72 <__aeabi_dsub+0xba>
 8002c3e:	2280      	movs	r2, #128	@ 0x80
 8002c40:	9b02      	ldr	r3, [sp, #8]
 8002c42:	0412      	lsls	r2, r2, #16
 8002c44:	4313      	orrs	r3, r2
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	4652      	mov	r2, sl
 8002c4a:	2a1f      	cmp	r2, #31
 8002c4c:	dd00      	ble.n	8002c50 <__aeabi_dsub+0x98>
 8002c4e:	e1e3      	b.n	8003018 <__aeabi_dsub+0x460>
 8002c50:	4653      	mov	r3, sl
 8002c52:	2220      	movs	r2, #32
 8002c54:	4661      	mov	r1, ip
 8002c56:	9d02      	ldr	r5, [sp, #8]
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	4095      	lsls	r5, r2
 8002c5c:	40d9      	lsrs	r1, r3
 8002c5e:	430d      	orrs	r5, r1
 8002c60:	4661      	mov	r1, ip
 8002c62:	4091      	lsls	r1, r2
 8002c64:	000a      	movs	r2, r1
 8002c66:	1e51      	subs	r1, r2, #1
 8002c68:	418a      	sbcs	r2, r1
 8002c6a:	4315      	orrs	r5, r2
 8002c6c:	9a02      	ldr	r2, [sp, #8]
 8002c6e:	40da      	lsrs	r2, r3
 8002c70:	1aa4      	subs	r4, r4, r2
 8002c72:	1b45      	subs	r5, r0, r5
 8002c74:	42a8      	cmp	r0, r5
 8002c76:	4180      	sbcs	r0, r0
 8002c78:	4240      	negs	r0, r0
 8002c7a:	1a24      	subs	r4, r4, r0
 8002c7c:	0223      	lsls	r3, r4, #8
 8002c7e:	d400      	bmi.n	8002c82 <__aeabi_dsub+0xca>
 8002c80:	e13d      	b.n	8002efe <__aeabi_dsub+0x346>
 8002c82:	0264      	lsls	r4, r4, #9
 8002c84:	0a64      	lsrs	r4, r4, #9
 8002c86:	2c00      	cmp	r4, #0
 8002c88:	d100      	bne.n	8002c8c <__aeabi_dsub+0xd4>
 8002c8a:	e147      	b.n	8002f1c <__aeabi_dsub+0x364>
 8002c8c:	0020      	movs	r0, r4
 8002c8e:	f000 fcab 	bl	80035e8 <__clzsi2>
 8002c92:	0003      	movs	r3, r0
 8002c94:	3b08      	subs	r3, #8
 8002c96:	2120      	movs	r1, #32
 8002c98:	0028      	movs	r0, r5
 8002c9a:	1aca      	subs	r2, r1, r3
 8002c9c:	40d0      	lsrs	r0, r2
 8002c9e:	409c      	lsls	r4, r3
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	409d      	lsls	r5, r3
 8002ca4:	4322      	orrs	r2, r4
 8002ca6:	429f      	cmp	r7, r3
 8002ca8:	dd00      	ble.n	8002cac <__aeabi_dsub+0xf4>
 8002caa:	e177      	b.n	8002f9c <__aeabi_dsub+0x3e4>
 8002cac:	1bd8      	subs	r0, r3, r7
 8002cae:	3001      	adds	r0, #1
 8002cb0:	1a09      	subs	r1, r1, r0
 8002cb2:	002c      	movs	r4, r5
 8002cb4:	408d      	lsls	r5, r1
 8002cb6:	40c4      	lsrs	r4, r0
 8002cb8:	1e6b      	subs	r3, r5, #1
 8002cba:	419d      	sbcs	r5, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	40c2      	lsrs	r2, r0
 8002cc0:	408b      	lsls	r3, r1
 8002cc2:	4325      	orrs	r5, r4
 8002cc4:	2700      	movs	r7, #0
 8002cc6:	0014      	movs	r4, r2
 8002cc8:	431d      	orrs	r5, r3
 8002cca:	076b      	lsls	r3, r5, #29
 8002ccc:	d009      	beq.n	8002ce2 <__aeabi_dsub+0x12a>
 8002cce:	230f      	movs	r3, #15
 8002cd0:	402b      	ands	r3, r5
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d005      	beq.n	8002ce2 <__aeabi_dsub+0x12a>
 8002cd6:	1d2b      	adds	r3, r5, #4
 8002cd8:	42ab      	cmp	r3, r5
 8002cda:	41ad      	sbcs	r5, r5
 8002cdc:	426d      	negs	r5, r5
 8002cde:	1964      	adds	r4, r4, r5
 8002ce0:	001d      	movs	r5, r3
 8002ce2:	0223      	lsls	r3, r4, #8
 8002ce4:	d400      	bmi.n	8002ce8 <__aeabi_dsub+0x130>
 8002ce6:	e140      	b.n	8002f6a <__aeabi_dsub+0x3b2>
 8002ce8:	4a88      	ldr	r2, [pc, #544]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002cea:	3701      	adds	r7, #1
 8002cec:	4297      	cmp	r7, r2
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x13a>
 8002cf0:	e101      	b.n	8002ef6 <__aeabi_dsub+0x33e>
 8002cf2:	2601      	movs	r6, #1
 8002cf4:	4643      	mov	r3, r8
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dsub+0x358>)
 8002cf8:	08ed      	lsrs	r5, r5, #3
 8002cfa:	4021      	ands	r1, r4
 8002cfc:	074a      	lsls	r2, r1, #29
 8002cfe:	432a      	orrs	r2, r5
 8002d00:	057c      	lsls	r4, r7, #21
 8002d02:	024d      	lsls	r5, r1, #9
 8002d04:	0b2d      	lsrs	r5, r5, #12
 8002d06:	0d64      	lsrs	r4, r4, #21
 8002d08:	401e      	ands	r6, r3
 8002d0a:	0524      	lsls	r4, r4, #20
 8002d0c:	432c      	orrs	r4, r5
 8002d0e:	07f6      	lsls	r6, r6, #31
 8002d10:	4334      	orrs	r4, r6
 8002d12:	0010      	movs	r0, r2
 8002d14:	0021      	movs	r1, r4
 8002d16:	b005      	add	sp, #20
 8002d18:	bcf0      	pop	{r4, r5, r6, r7}
 8002d1a:	46bb      	mov	fp, r7
 8002d1c:	46b2      	mov	sl, r6
 8002d1e:	46a9      	mov	r9, r5
 8002d20:	46a0      	mov	r8, r4
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	2d00      	cmp	r5, #0
 8002d26:	dc00      	bgt.n	8002d2a <__aeabi_dsub+0x172>
 8002d28:	e2d0      	b.n	80032cc <__aeabi_dsub+0x714>
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	d000      	beq.n	8002d32 <__aeabi_dsub+0x17a>
 8002d30:	e0d4      	b.n	8002edc <__aeabi_dsub+0x324>
 8002d32:	4661      	mov	r1, ip
 8002d34:	9b02      	ldr	r3, [sp, #8]
 8002d36:	4319      	orrs	r1, r3
 8002d38:	d100      	bne.n	8002d3c <__aeabi_dsub+0x184>
 8002d3a:	e12b      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8002d3c:	1e69      	subs	r1, r5, #1
 8002d3e:	2d01      	cmp	r5, #1
 8002d40:	d100      	bne.n	8002d44 <__aeabi_dsub+0x18c>
 8002d42:	e1d9      	b.n	80030f8 <__aeabi_dsub+0x540>
 8002d44:	4295      	cmp	r5, r2
 8002d46:	d100      	bne.n	8002d4a <__aeabi_dsub+0x192>
 8002d48:	e10a      	b.n	8002f60 <__aeabi_dsub+0x3a8>
 8002d4a:	2501      	movs	r5, #1
 8002d4c:	2938      	cmp	r1, #56	@ 0x38
 8002d4e:	dc17      	bgt.n	8002d80 <__aeabi_dsub+0x1c8>
 8002d50:	468a      	mov	sl, r1
 8002d52:	4653      	mov	r3, sl
 8002d54:	2b1f      	cmp	r3, #31
 8002d56:	dd00      	ble.n	8002d5a <__aeabi_dsub+0x1a2>
 8002d58:	e1e7      	b.n	800312a <__aeabi_dsub+0x572>
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	9b02      	ldr	r3, [sp, #8]
 8002d60:	4661      	mov	r1, ip
 8002d62:	4093      	lsls	r3, r2
 8002d64:	001d      	movs	r5, r3
 8002d66:	4653      	mov	r3, sl
 8002d68:	40d9      	lsrs	r1, r3
 8002d6a:	4663      	mov	r3, ip
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	001a      	movs	r2, r3
 8002d70:	430d      	orrs	r5, r1
 8002d72:	1e51      	subs	r1, r2, #1
 8002d74:	418a      	sbcs	r2, r1
 8002d76:	4653      	mov	r3, sl
 8002d78:	4315      	orrs	r5, r2
 8002d7a:	9a02      	ldr	r2, [sp, #8]
 8002d7c:	40da      	lsrs	r2, r3
 8002d7e:	18a4      	adds	r4, r4, r2
 8002d80:	182d      	adds	r5, r5, r0
 8002d82:	4285      	cmp	r5, r0
 8002d84:	4180      	sbcs	r0, r0
 8002d86:	4240      	negs	r0, r0
 8002d88:	1824      	adds	r4, r4, r0
 8002d8a:	0223      	lsls	r3, r4, #8
 8002d8c:	d400      	bmi.n	8002d90 <__aeabi_dsub+0x1d8>
 8002d8e:	e0b6      	b.n	8002efe <__aeabi_dsub+0x346>
 8002d90:	4b5e      	ldr	r3, [pc, #376]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002d92:	3701      	adds	r7, #1
 8002d94:	429f      	cmp	r7, r3
 8002d96:	d100      	bne.n	8002d9a <__aeabi_dsub+0x1e2>
 8002d98:	e0ad      	b.n	8002ef6 <__aeabi_dsub+0x33e>
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8002f10 <__aeabi_dsub+0x358>)
 8002d9e:	086a      	lsrs	r2, r5, #1
 8002da0:	401c      	ands	r4, r3
 8002da2:	4029      	ands	r1, r5
 8002da4:	430a      	orrs	r2, r1
 8002da6:	07e5      	lsls	r5, r4, #31
 8002da8:	4315      	orrs	r5, r2
 8002daa:	0864      	lsrs	r4, r4, #1
 8002dac:	e78d      	b.n	8002cca <__aeabi_dsub+0x112>
 8002dae:	4a59      	ldr	r2, [pc, #356]	@ (8002f14 <__aeabi_dsub+0x35c>)
 8002db0:	9b02      	ldr	r3, [sp, #8]
 8002db2:	4692      	mov	sl, r2
 8002db4:	4662      	mov	r2, ip
 8002db6:	44ba      	add	sl, r7
 8002db8:	431a      	orrs	r2, r3
 8002dba:	d02c      	beq.n	8002e16 <__aeabi_dsub+0x25e>
 8002dbc:	428e      	cmp	r6, r1
 8002dbe:	d02e      	beq.n	8002e1e <__aeabi_dsub+0x266>
 8002dc0:	4652      	mov	r2, sl
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	d060      	beq.n	8002e88 <__aeabi_dsub+0x2d0>
 8002dc6:	2f00      	cmp	r7, #0
 8002dc8:	d100      	bne.n	8002dcc <__aeabi_dsub+0x214>
 8002dca:	e0db      	b.n	8002f84 <__aeabi_dsub+0x3cc>
 8002dcc:	4663      	mov	r3, ip
 8002dce:	000e      	movs	r6, r1
 8002dd0:	9c02      	ldr	r4, [sp, #8]
 8002dd2:	08d8      	lsrs	r0, r3, #3
 8002dd4:	0762      	lsls	r2, r4, #29
 8002dd6:	4302      	orrs	r2, r0
 8002dd8:	08e4      	lsrs	r4, r4, #3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	4323      	orrs	r3, r4
 8002dde:	d100      	bne.n	8002de2 <__aeabi_dsub+0x22a>
 8002de0:	e254      	b.n	800328c <__aeabi_dsub+0x6d4>
 8002de2:	2580      	movs	r5, #128	@ 0x80
 8002de4:	032d      	lsls	r5, r5, #12
 8002de6:	4325      	orrs	r5, r4
 8002de8:	032d      	lsls	r5, r5, #12
 8002dea:	4c48      	ldr	r4, [pc, #288]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002dec:	0b2d      	lsrs	r5, r5, #12
 8002dee:	e78c      	b.n	8002d0a <__aeabi_dsub+0x152>
 8002df0:	4661      	mov	r1, ip
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	4319      	orrs	r1, r3
 8002df6:	d100      	bne.n	8002dfa <__aeabi_dsub+0x242>
 8002df8:	e0cc      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8002dfa:	0029      	movs	r1, r5
 8002dfc:	3901      	subs	r1, #1
 8002dfe:	2d01      	cmp	r5, #1
 8002e00:	d100      	bne.n	8002e04 <__aeabi_dsub+0x24c>
 8002e02:	e188      	b.n	8003116 <__aeabi_dsub+0x55e>
 8002e04:	4295      	cmp	r5, r2
 8002e06:	d100      	bne.n	8002e0a <__aeabi_dsub+0x252>
 8002e08:	e0aa      	b.n	8002f60 <__aeabi_dsub+0x3a8>
 8002e0a:	2501      	movs	r5, #1
 8002e0c:	2938      	cmp	r1, #56	@ 0x38
 8002e0e:	dd00      	ble.n	8002e12 <__aeabi_dsub+0x25a>
 8002e10:	e72f      	b.n	8002c72 <__aeabi_dsub+0xba>
 8002e12:	468a      	mov	sl, r1
 8002e14:	e718      	b.n	8002c48 <__aeabi_dsub+0x90>
 8002e16:	2201      	movs	r2, #1
 8002e18:	4051      	eors	r1, r2
 8002e1a:	428e      	cmp	r6, r1
 8002e1c:	d1d0      	bne.n	8002dc0 <__aeabi_dsub+0x208>
 8002e1e:	4653      	mov	r3, sl
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d100      	bne.n	8002e26 <__aeabi_dsub+0x26e>
 8002e24:	e0be      	b.n	8002fa4 <__aeabi_dsub+0x3ec>
 8002e26:	2f00      	cmp	r7, #0
 8002e28:	d000      	beq.n	8002e2c <__aeabi_dsub+0x274>
 8002e2a:	e138      	b.n	800309e <__aeabi_dsub+0x4e6>
 8002e2c:	46ca      	mov	sl, r9
 8002e2e:	0022      	movs	r2, r4
 8002e30:	4302      	orrs	r2, r0
 8002e32:	d100      	bne.n	8002e36 <__aeabi_dsub+0x27e>
 8002e34:	e1e2      	b.n	80031fc <__aeabi_dsub+0x644>
 8002e36:	4653      	mov	r3, sl
 8002e38:	1e59      	subs	r1, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d100      	bne.n	8002e40 <__aeabi_dsub+0x288>
 8002e3e:	e20d      	b.n	800325c <__aeabi_dsub+0x6a4>
 8002e40:	4a32      	ldr	r2, [pc, #200]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002e42:	4592      	cmp	sl, r2
 8002e44:	d100      	bne.n	8002e48 <__aeabi_dsub+0x290>
 8002e46:	e1d2      	b.n	80031ee <__aeabi_dsub+0x636>
 8002e48:	2701      	movs	r7, #1
 8002e4a:	2938      	cmp	r1, #56	@ 0x38
 8002e4c:	dc13      	bgt.n	8002e76 <__aeabi_dsub+0x2be>
 8002e4e:	291f      	cmp	r1, #31
 8002e50:	dd00      	ble.n	8002e54 <__aeabi_dsub+0x29c>
 8002e52:	e1ee      	b.n	8003232 <__aeabi_dsub+0x67a>
 8002e54:	2220      	movs	r2, #32
 8002e56:	9b02      	ldr	r3, [sp, #8]
 8002e58:	1a52      	subs	r2, r2, r1
 8002e5a:	0025      	movs	r5, r4
 8002e5c:	0007      	movs	r7, r0
 8002e5e:	469a      	mov	sl, r3
 8002e60:	40cc      	lsrs	r4, r1
 8002e62:	4090      	lsls	r0, r2
 8002e64:	4095      	lsls	r5, r2
 8002e66:	40cf      	lsrs	r7, r1
 8002e68:	44a2      	add	sl, r4
 8002e6a:	1e42      	subs	r2, r0, #1
 8002e6c:	4190      	sbcs	r0, r2
 8002e6e:	4653      	mov	r3, sl
 8002e70:	432f      	orrs	r7, r5
 8002e72:	4307      	orrs	r7, r0
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	003d      	movs	r5, r7
 8002e78:	4465      	add	r5, ip
 8002e7a:	4565      	cmp	r5, ip
 8002e7c:	4192      	sbcs	r2, r2
 8002e7e:	9b02      	ldr	r3, [sp, #8]
 8002e80:	4252      	negs	r2, r2
 8002e82:	464f      	mov	r7, r9
 8002e84:	18d4      	adds	r4, r2, r3
 8002e86:	e780      	b.n	8002d8a <__aeabi_dsub+0x1d2>
 8002e88:	4a23      	ldr	r2, [pc, #140]	@ (8002f18 <__aeabi_dsub+0x360>)
 8002e8a:	1c7d      	adds	r5, r7, #1
 8002e8c:	4215      	tst	r5, r2
 8002e8e:	d000      	beq.n	8002e92 <__aeabi_dsub+0x2da>
 8002e90:	e0aa      	b.n	8002fe8 <__aeabi_dsub+0x430>
 8002e92:	4662      	mov	r2, ip
 8002e94:	0025      	movs	r5, r4
 8002e96:	9b02      	ldr	r3, [sp, #8]
 8002e98:	4305      	orrs	r5, r0
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	2f00      	cmp	r7, #0
 8002e9e:	d000      	beq.n	8002ea2 <__aeabi_dsub+0x2ea>
 8002ea0:	e0f5      	b.n	800308e <__aeabi_dsub+0x4d6>
 8002ea2:	2d00      	cmp	r5, #0
 8002ea4:	d100      	bne.n	8002ea8 <__aeabi_dsub+0x2f0>
 8002ea6:	e16b      	b.n	8003180 <__aeabi_dsub+0x5c8>
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d100      	bne.n	8002eae <__aeabi_dsub+0x2f6>
 8002eac:	e152      	b.n	8003154 <__aeabi_dsub+0x59c>
 8002eae:	4663      	mov	r3, ip
 8002eb0:	1ac5      	subs	r5, r0, r3
 8002eb2:	9b02      	ldr	r3, [sp, #8]
 8002eb4:	1ae2      	subs	r2, r4, r3
 8002eb6:	42a8      	cmp	r0, r5
 8002eb8:	419b      	sbcs	r3, r3
 8002eba:	425b      	negs	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	d400      	bmi.n	8002ec4 <__aeabi_dsub+0x30c>
 8002ec2:	e1d5      	b.n	8003270 <__aeabi_dsub+0x6b8>
 8002ec4:	4663      	mov	r3, ip
 8002ec6:	1a1d      	subs	r5, r3, r0
 8002ec8:	45ac      	cmp	ip, r5
 8002eca:	4192      	sbcs	r2, r2
 8002ecc:	2601      	movs	r6, #1
 8002ece:	9b02      	ldr	r3, [sp, #8]
 8002ed0:	4252      	negs	r2, r2
 8002ed2:	1b1c      	subs	r4, r3, r4
 8002ed4:	4688      	mov	r8, r1
 8002ed6:	1aa4      	subs	r4, r4, r2
 8002ed8:	400e      	ands	r6, r1
 8002eda:	e6f6      	b.n	8002cca <__aeabi_dsub+0x112>
 8002edc:	4297      	cmp	r7, r2
 8002ede:	d03f      	beq.n	8002f60 <__aeabi_dsub+0x3a8>
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	2501      	movs	r5, #1
 8002ee4:	2a38      	cmp	r2, #56	@ 0x38
 8002ee6:	dd00      	ble.n	8002eea <__aeabi_dsub+0x332>
 8002ee8:	e74a      	b.n	8002d80 <__aeabi_dsub+0x1c8>
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	9b02      	ldr	r3, [sp, #8]
 8002eee:	0412      	lsls	r2, r2, #16
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	e72d      	b.n	8002d52 <__aeabi_dsub+0x19a>
 8002ef6:	003c      	movs	r4, r7
 8002ef8:	2500      	movs	r5, #0
 8002efa:	2200      	movs	r2, #0
 8002efc:	e705      	b.n	8002d0a <__aeabi_dsub+0x152>
 8002efe:	2307      	movs	r3, #7
 8002f00:	402b      	ands	r3, r5
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d000      	beq.n	8002f08 <__aeabi_dsub+0x350>
 8002f06:	e6e2      	b.n	8002cce <__aeabi_dsub+0x116>
 8002f08:	e06b      	b.n	8002fe2 <__aeabi_dsub+0x42a>
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	000007ff 	.word	0x000007ff
 8002f10:	ff7fffff 	.word	0xff7fffff
 8002f14:	fffff801 	.word	0xfffff801
 8002f18:	000007fe 	.word	0x000007fe
 8002f1c:	0028      	movs	r0, r5
 8002f1e:	f000 fb63 	bl	80035e8 <__clzsi2>
 8002f22:	0003      	movs	r3, r0
 8002f24:	3318      	adds	r3, #24
 8002f26:	2b1f      	cmp	r3, #31
 8002f28:	dc00      	bgt.n	8002f2c <__aeabi_dsub+0x374>
 8002f2a:	e6b4      	b.n	8002c96 <__aeabi_dsub+0xde>
 8002f2c:	002a      	movs	r2, r5
 8002f2e:	3808      	subs	r0, #8
 8002f30:	4082      	lsls	r2, r0
 8002f32:	429f      	cmp	r7, r3
 8002f34:	dd00      	ble.n	8002f38 <__aeabi_dsub+0x380>
 8002f36:	e0b9      	b.n	80030ac <__aeabi_dsub+0x4f4>
 8002f38:	1bdb      	subs	r3, r3, r7
 8002f3a:	1c58      	adds	r0, r3, #1
 8002f3c:	281f      	cmp	r0, #31
 8002f3e:	dc00      	bgt.n	8002f42 <__aeabi_dsub+0x38a>
 8002f40:	e1a0      	b.n	8003284 <__aeabi_dsub+0x6cc>
 8002f42:	0015      	movs	r5, r2
 8002f44:	3b1f      	subs	r3, #31
 8002f46:	40dd      	lsrs	r5, r3
 8002f48:	2820      	cmp	r0, #32
 8002f4a:	d005      	beq.n	8002f58 <__aeabi_dsub+0x3a0>
 8002f4c:	2340      	movs	r3, #64	@ 0x40
 8002f4e:	1a1b      	subs	r3, r3, r0
 8002f50:	409a      	lsls	r2, r3
 8002f52:	1e53      	subs	r3, r2, #1
 8002f54:	419a      	sbcs	r2, r3
 8002f56:	4315      	orrs	r5, r2
 8002f58:	2307      	movs	r3, #7
 8002f5a:	2700      	movs	r7, #0
 8002f5c:	402b      	ands	r3, r5
 8002f5e:	e7d0      	b.n	8002f02 <__aeabi_dsub+0x34a>
 8002f60:	08c0      	lsrs	r0, r0, #3
 8002f62:	0762      	lsls	r2, r4, #29
 8002f64:	4302      	orrs	r2, r0
 8002f66:	08e4      	lsrs	r4, r4, #3
 8002f68:	e737      	b.n	8002dda <__aeabi_dsub+0x222>
 8002f6a:	08ea      	lsrs	r2, r5, #3
 8002f6c:	0763      	lsls	r3, r4, #29
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	4bd3      	ldr	r3, [pc, #844]	@ (80032c0 <__aeabi_dsub+0x708>)
 8002f72:	08e4      	lsrs	r4, r4, #3
 8002f74:	429f      	cmp	r7, r3
 8002f76:	d100      	bne.n	8002f7a <__aeabi_dsub+0x3c2>
 8002f78:	e72f      	b.n	8002dda <__aeabi_dsub+0x222>
 8002f7a:	0324      	lsls	r4, r4, #12
 8002f7c:	0b25      	lsrs	r5, r4, #12
 8002f7e:	057c      	lsls	r4, r7, #21
 8002f80:	0d64      	lsrs	r4, r4, #21
 8002f82:	e6c2      	b.n	8002d0a <__aeabi_dsub+0x152>
 8002f84:	46ca      	mov	sl, r9
 8002f86:	0022      	movs	r2, r4
 8002f88:	4302      	orrs	r2, r0
 8002f8a:	d158      	bne.n	800303e <__aeabi_dsub+0x486>
 8002f8c:	4663      	mov	r3, ip
 8002f8e:	000e      	movs	r6, r1
 8002f90:	9c02      	ldr	r4, [sp, #8]
 8002f92:	9303      	str	r3, [sp, #12]
 8002f94:	9b03      	ldr	r3, [sp, #12]
 8002f96:	4657      	mov	r7, sl
 8002f98:	08da      	lsrs	r2, r3, #3
 8002f9a:	e7e7      	b.n	8002f6c <__aeabi_dsub+0x3b4>
 8002f9c:	4cc9      	ldr	r4, [pc, #804]	@ (80032c4 <__aeabi_dsub+0x70c>)
 8002f9e:	1aff      	subs	r7, r7, r3
 8002fa0:	4014      	ands	r4, r2
 8002fa2:	e692      	b.n	8002cca <__aeabi_dsub+0x112>
 8002fa4:	4dc8      	ldr	r5, [pc, #800]	@ (80032c8 <__aeabi_dsub+0x710>)
 8002fa6:	1c7a      	adds	r2, r7, #1
 8002fa8:	422a      	tst	r2, r5
 8002faa:	d000      	beq.n	8002fae <__aeabi_dsub+0x3f6>
 8002fac:	e084      	b.n	80030b8 <__aeabi_dsub+0x500>
 8002fae:	0022      	movs	r2, r4
 8002fb0:	4302      	orrs	r2, r0
 8002fb2:	2f00      	cmp	r7, #0
 8002fb4:	d000      	beq.n	8002fb8 <__aeabi_dsub+0x400>
 8002fb6:	e0ef      	b.n	8003198 <__aeabi_dsub+0x5e0>
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d100      	bne.n	8002fbe <__aeabi_dsub+0x406>
 8002fbc:	e0e5      	b.n	800318a <__aeabi_dsub+0x5d2>
 8002fbe:	4662      	mov	r2, ip
 8002fc0:	9902      	ldr	r1, [sp, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	d100      	bne.n	8002fc8 <__aeabi_dsub+0x410>
 8002fc6:	e0c5      	b.n	8003154 <__aeabi_dsub+0x59c>
 8002fc8:	4663      	mov	r3, ip
 8002fca:	18c5      	adds	r5, r0, r3
 8002fcc:	468c      	mov	ip, r1
 8002fce:	4285      	cmp	r5, r0
 8002fd0:	4180      	sbcs	r0, r0
 8002fd2:	4464      	add	r4, ip
 8002fd4:	4240      	negs	r0, r0
 8002fd6:	1824      	adds	r4, r4, r0
 8002fd8:	0223      	lsls	r3, r4, #8
 8002fda:	d502      	bpl.n	8002fe2 <__aeabi_dsub+0x42a>
 8002fdc:	4bb9      	ldr	r3, [pc, #740]	@ (80032c4 <__aeabi_dsub+0x70c>)
 8002fde:	3701      	adds	r7, #1
 8002fe0:	401c      	ands	r4, r3
 8002fe2:	46ba      	mov	sl, r7
 8002fe4:	9503      	str	r5, [sp, #12]
 8002fe6:	e7d5      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8002fe8:	4662      	mov	r2, ip
 8002fea:	1a85      	subs	r5, r0, r2
 8002fec:	42a8      	cmp	r0, r5
 8002fee:	4192      	sbcs	r2, r2
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	4691      	mov	r9, r2
 8002ff4:	9b02      	ldr	r3, [sp, #8]
 8002ff6:	1ae3      	subs	r3, r4, r3
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1ad2      	subs	r2, r2, r3
 8002ffe:	0013      	movs	r3, r2
 8003000:	4691      	mov	r9, r2
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	d46c      	bmi.n	80030e0 <__aeabi_dsub+0x528>
 8003006:	464a      	mov	r2, r9
 8003008:	464c      	mov	r4, r9
 800300a:	432a      	orrs	r2, r5
 800300c:	d000      	beq.n	8003010 <__aeabi_dsub+0x458>
 800300e:	e63a      	b.n	8002c86 <__aeabi_dsub+0xce>
 8003010:	2600      	movs	r6, #0
 8003012:	2400      	movs	r4, #0
 8003014:	2500      	movs	r5, #0
 8003016:	e678      	b.n	8002d0a <__aeabi_dsub+0x152>
 8003018:	9902      	ldr	r1, [sp, #8]
 800301a:	4653      	mov	r3, sl
 800301c:	000d      	movs	r5, r1
 800301e:	3a20      	subs	r2, #32
 8003020:	40d5      	lsrs	r5, r2
 8003022:	2b20      	cmp	r3, #32
 8003024:	d006      	beq.n	8003034 <__aeabi_dsub+0x47c>
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	000b      	movs	r3, r1
 800302c:	4093      	lsls	r3, r2
 800302e:	4662      	mov	r2, ip
 8003030:	431a      	orrs	r2, r3
 8003032:	4693      	mov	fp, r2
 8003034:	465b      	mov	r3, fp
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	4193      	sbcs	r3, r2
 800303a:	431d      	orrs	r5, r3
 800303c:	e619      	b.n	8002c72 <__aeabi_dsub+0xba>
 800303e:	4653      	mov	r3, sl
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d100      	bne.n	8003048 <__aeabi_dsub+0x490>
 8003046:	e0c6      	b.n	80031d6 <__aeabi_dsub+0x61e>
 8003048:	4e9d      	ldr	r6, [pc, #628]	@ (80032c0 <__aeabi_dsub+0x708>)
 800304a:	45b2      	cmp	sl, r6
 800304c:	d100      	bne.n	8003050 <__aeabi_dsub+0x498>
 800304e:	e6bd      	b.n	8002dcc <__aeabi_dsub+0x214>
 8003050:	4688      	mov	r8, r1
 8003052:	000e      	movs	r6, r1
 8003054:	2501      	movs	r5, #1
 8003056:	2a38      	cmp	r2, #56	@ 0x38
 8003058:	dc10      	bgt.n	800307c <__aeabi_dsub+0x4c4>
 800305a:	2a1f      	cmp	r2, #31
 800305c:	dc7f      	bgt.n	800315e <__aeabi_dsub+0x5a6>
 800305e:	2120      	movs	r1, #32
 8003060:	0025      	movs	r5, r4
 8003062:	1a89      	subs	r1, r1, r2
 8003064:	0007      	movs	r7, r0
 8003066:	4088      	lsls	r0, r1
 8003068:	408d      	lsls	r5, r1
 800306a:	40d7      	lsrs	r7, r2
 800306c:	40d4      	lsrs	r4, r2
 800306e:	1e41      	subs	r1, r0, #1
 8003070:	4188      	sbcs	r0, r1
 8003072:	9b02      	ldr	r3, [sp, #8]
 8003074:	433d      	orrs	r5, r7
 8003076:	1b1b      	subs	r3, r3, r4
 8003078:	4305      	orrs	r5, r0
 800307a:	9302      	str	r3, [sp, #8]
 800307c:	4662      	mov	r2, ip
 800307e:	1b55      	subs	r5, r2, r5
 8003080:	45ac      	cmp	ip, r5
 8003082:	4192      	sbcs	r2, r2
 8003084:	9b02      	ldr	r3, [sp, #8]
 8003086:	4252      	negs	r2, r2
 8003088:	464f      	mov	r7, r9
 800308a:	1a9c      	subs	r4, r3, r2
 800308c:	e5f6      	b.n	8002c7c <__aeabi_dsub+0xc4>
 800308e:	2d00      	cmp	r5, #0
 8003090:	d000      	beq.n	8003094 <__aeabi_dsub+0x4dc>
 8003092:	e0b7      	b.n	8003204 <__aeabi_dsub+0x64c>
 8003094:	2a00      	cmp	r2, #0
 8003096:	d100      	bne.n	800309a <__aeabi_dsub+0x4e2>
 8003098:	e0f0      	b.n	800327c <__aeabi_dsub+0x6c4>
 800309a:	2601      	movs	r6, #1
 800309c:	400e      	ands	r6, r1
 800309e:	4663      	mov	r3, ip
 80030a0:	9802      	ldr	r0, [sp, #8]
 80030a2:	08d9      	lsrs	r1, r3, #3
 80030a4:	0742      	lsls	r2, r0, #29
 80030a6:	430a      	orrs	r2, r1
 80030a8:	08c4      	lsrs	r4, r0, #3
 80030aa:	e696      	b.n	8002dda <__aeabi_dsub+0x222>
 80030ac:	4c85      	ldr	r4, [pc, #532]	@ (80032c4 <__aeabi_dsub+0x70c>)
 80030ae:	1aff      	subs	r7, r7, r3
 80030b0:	4014      	ands	r4, r2
 80030b2:	0762      	lsls	r2, r4, #29
 80030b4:	08e4      	lsrs	r4, r4, #3
 80030b6:	e760      	b.n	8002f7a <__aeabi_dsub+0x3c2>
 80030b8:	4981      	ldr	r1, [pc, #516]	@ (80032c0 <__aeabi_dsub+0x708>)
 80030ba:	428a      	cmp	r2, r1
 80030bc:	d100      	bne.n	80030c0 <__aeabi_dsub+0x508>
 80030be:	e0c9      	b.n	8003254 <__aeabi_dsub+0x69c>
 80030c0:	4663      	mov	r3, ip
 80030c2:	18c1      	adds	r1, r0, r3
 80030c4:	4281      	cmp	r1, r0
 80030c6:	4180      	sbcs	r0, r0
 80030c8:	9b02      	ldr	r3, [sp, #8]
 80030ca:	4240      	negs	r0, r0
 80030cc:	18e3      	adds	r3, r4, r3
 80030ce:	181b      	adds	r3, r3, r0
 80030d0:	07dd      	lsls	r5, r3, #31
 80030d2:	085c      	lsrs	r4, r3, #1
 80030d4:	2307      	movs	r3, #7
 80030d6:	0849      	lsrs	r1, r1, #1
 80030d8:	430d      	orrs	r5, r1
 80030da:	0017      	movs	r7, r2
 80030dc:	402b      	ands	r3, r5
 80030de:	e710      	b.n	8002f02 <__aeabi_dsub+0x34a>
 80030e0:	4663      	mov	r3, ip
 80030e2:	1a1d      	subs	r5, r3, r0
 80030e4:	45ac      	cmp	ip, r5
 80030e6:	4192      	sbcs	r2, r2
 80030e8:	2601      	movs	r6, #1
 80030ea:	9b02      	ldr	r3, [sp, #8]
 80030ec:	4252      	negs	r2, r2
 80030ee:	1b1c      	subs	r4, r3, r4
 80030f0:	4688      	mov	r8, r1
 80030f2:	1aa4      	subs	r4, r4, r2
 80030f4:	400e      	ands	r6, r1
 80030f6:	e5c6      	b.n	8002c86 <__aeabi_dsub+0xce>
 80030f8:	4663      	mov	r3, ip
 80030fa:	18c5      	adds	r5, r0, r3
 80030fc:	9b02      	ldr	r3, [sp, #8]
 80030fe:	4285      	cmp	r5, r0
 8003100:	4180      	sbcs	r0, r0
 8003102:	469c      	mov	ip, r3
 8003104:	4240      	negs	r0, r0
 8003106:	4464      	add	r4, ip
 8003108:	1824      	adds	r4, r4, r0
 800310a:	2701      	movs	r7, #1
 800310c:	0223      	lsls	r3, r4, #8
 800310e:	d400      	bmi.n	8003112 <__aeabi_dsub+0x55a>
 8003110:	e6f5      	b.n	8002efe <__aeabi_dsub+0x346>
 8003112:	2702      	movs	r7, #2
 8003114:	e641      	b.n	8002d9a <__aeabi_dsub+0x1e2>
 8003116:	4663      	mov	r3, ip
 8003118:	1ac5      	subs	r5, r0, r3
 800311a:	42a8      	cmp	r0, r5
 800311c:	4180      	sbcs	r0, r0
 800311e:	9b02      	ldr	r3, [sp, #8]
 8003120:	4240      	negs	r0, r0
 8003122:	1ae4      	subs	r4, r4, r3
 8003124:	2701      	movs	r7, #1
 8003126:	1a24      	subs	r4, r4, r0
 8003128:	e5a8      	b.n	8002c7c <__aeabi_dsub+0xc4>
 800312a:	9d02      	ldr	r5, [sp, #8]
 800312c:	4652      	mov	r2, sl
 800312e:	002b      	movs	r3, r5
 8003130:	3a20      	subs	r2, #32
 8003132:	40d3      	lsrs	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	4653      	mov	r3, sl
 8003138:	2b20      	cmp	r3, #32
 800313a:	d006      	beq.n	800314a <__aeabi_dsub+0x592>
 800313c:	2240      	movs	r2, #64	@ 0x40
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	002b      	movs	r3, r5
 8003142:	4093      	lsls	r3, r2
 8003144:	4662      	mov	r2, ip
 8003146:	431a      	orrs	r2, r3
 8003148:	4693      	mov	fp, r2
 800314a:	465d      	mov	r5, fp
 800314c:	1e6b      	subs	r3, r5, #1
 800314e:	419d      	sbcs	r5, r3
 8003150:	430d      	orrs	r5, r1
 8003152:	e615      	b.n	8002d80 <__aeabi_dsub+0x1c8>
 8003154:	0762      	lsls	r2, r4, #29
 8003156:	08c0      	lsrs	r0, r0, #3
 8003158:	4302      	orrs	r2, r0
 800315a:	08e4      	lsrs	r4, r4, #3
 800315c:	e70d      	b.n	8002f7a <__aeabi_dsub+0x3c2>
 800315e:	0011      	movs	r1, r2
 8003160:	0027      	movs	r7, r4
 8003162:	3920      	subs	r1, #32
 8003164:	40cf      	lsrs	r7, r1
 8003166:	2a20      	cmp	r2, #32
 8003168:	d005      	beq.n	8003176 <__aeabi_dsub+0x5be>
 800316a:	2140      	movs	r1, #64	@ 0x40
 800316c:	1a8a      	subs	r2, r1, r2
 800316e:	4094      	lsls	r4, r2
 8003170:	0025      	movs	r5, r4
 8003172:	4305      	orrs	r5, r0
 8003174:	9503      	str	r5, [sp, #12]
 8003176:	9d03      	ldr	r5, [sp, #12]
 8003178:	1e6a      	subs	r2, r5, #1
 800317a:	4195      	sbcs	r5, r2
 800317c:	433d      	orrs	r5, r7
 800317e:	e77d      	b.n	800307c <__aeabi_dsub+0x4c4>
 8003180:	2a00      	cmp	r2, #0
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x5ce>
 8003184:	e744      	b.n	8003010 <__aeabi_dsub+0x458>
 8003186:	2601      	movs	r6, #1
 8003188:	400e      	ands	r6, r1
 800318a:	4663      	mov	r3, ip
 800318c:	08d9      	lsrs	r1, r3, #3
 800318e:	9b02      	ldr	r3, [sp, #8]
 8003190:	075a      	lsls	r2, r3, #29
 8003192:	430a      	orrs	r2, r1
 8003194:	08dc      	lsrs	r4, r3, #3
 8003196:	e6f0      	b.n	8002f7a <__aeabi_dsub+0x3c2>
 8003198:	2a00      	cmp	r2, #0
 800319a:	d028      	beq.n	80031ee <__aeabi_dsub+0x636>
 800319c:	4662      	mov	r2, ip
 800319e:	9f02      	ldr	r7, [sp, #8]
 80031a0:	08c0      	lsrs	r0, r0, #3
 80031a2:	433a      	orrs	r2, r7
 80031a4:	d100      	bne.n	80031a8 <__aeabi_dsub+0x5f0>
 80031a6:	e6dc      	b.n	8002f62 <__aeabi_dsub+0x3aa>
 80031a8:	0762      	lsls	r2, r4, #29
 80031aa:	4310      	orrs	r0, r2
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	08e4      	lsrs	r4, r4, #3
 80031b0:	0312      	lsls	r2, r2, #12
 80031b2:	4214      	tst	r4, r2
 80031b4:	d009      	beq.n	80031ca <__aeabi_dsub+0x612>
 80031b6:	08fd      	lsrs	r5, r7, #3
 80031b8:	4215      	tst	r5, r2
 80031ba:	d106      	bne.n	80031ca <__aeabi_dsub+0x612>
 80031bc:	4663      	mov	r3, ip
 80031be:	2601      	movs	r6, #1
 80031c0:	002c      	movs	r4, r5
 80031c2:	08d8      	lsrs	r0, r3, #3
 80031c4:	077b      	lsls	r3, r7, #29
 80031c6:	4318      	orrs	r0, r3
 80031c8:	400e      	ands	r6, r1
 80031ca:	0f42      	lsrs	r2, r0, #29
 80031cc:	00c0      	lsls	r0, r0, #3
 80031ce:	08c0      	lsrs	r0, r0, #3
 80031d0:	0752      	lsls	r2, r2, #29
 80031d2:	4302      	orrs	r2, r0
 80031d4:	e601      	b.n	8002dda <__aeabi_dsub+0x222>
 80031d6:	4663      	mov	r3, ip
 80031d8:	1a1d      	subs	r5, r3, r0
 80031da:	45ac      	cmp	ip, r5
 80031dc:	4192      	sbcs	r2, r2
 80031de:	9b02      	ldr	r3, [sp, #8]
 80031e0:	4252      	negs	r2, r2
 80031e2:	1b1c      	subs	r4, r3, r4
 80031e4:	000e      	movs	r6, r1
 80031e6:	4688      	mov	r8, r1
 80031e8:	2701      	movs	r7, #1
 80031ea:	1aa4      	subs	r4, r4, r2
 80031ec:	e546      	b.n	8002c7c <__aeabi_dsub+0xc4>
 80031ee:	4663      	mov	r3, ip
 80031f0:	08d9      	lsrs	r1, r3, #3
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	075a      	lsls	r2, r3, #29
 80031f6:	430a      	orrs	r2, r1
 80031f8:	08dc      	lsrs	r4, r3, #3
 80031fa:	e5ee      	b.n	8002dda <__aeabi_dsub+0x222>
 80031fc:	4663      	mov	r3, ip
 80031fe:	9c02      	ldr	r4, [sp, #8]
 8003200:	9303      	str	r3, [sp, #12]
 8003202:	e6c7      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8003204:	08c0      	lsrs	r0, r0, #3
 8003206:	2a00      	cmp	r2, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x654>
 800320a:	e6aa      	b.n	8002f62 <__aeabi_dsub+0x3aa>
 800320c:	0762      	lsls	r2, r4, #29
 800320e:	4310      	orrs	r0, r2
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	08e4      	lsrs	r4, r4, #3
 8003214:	0312      	lsls	r2, r2, #12
 8003216:	4214      	tst	r4, r2
 8003218:	d0d7      	beq.n	80031ca <__aeabi_dsub+0x612>
 800321a:	9f02      	ldr	r7, [sp, #8]
 800321c:	08fd      	lsrs	r5, r7, #3
 800321e:	4215      	tst	r5, r2
 8003220:	d1d3      	bne.n	80031ca <__aeabi_dsub+0x612>
 8003222:	4663      	mov	r3, ip
 8003224:	2601      	movs	r6, #1
 8003226:	08d8      	lsrs	r0, r3, #3
 8003228:	077b      	lsls	r3, r7, #29
 800322a:	002c      	movs	r4, r5
 800322c:	4318      	orrs	r0, r3
 800322e:	400e      	ands	r6, r1
 8003230:	e7cb      	b.n	80031ca <__aeabi_dsub+0x612>
 8003232:	000a      	movs	r2, r1
 8003234:	0027      	movs	r7, r4
 8003236:	3a20      	subs	r2, #32
 8003238:	40d7      	lsrs	r7, r2
 800323a:	2920      	cmp	r1, #32
 800323c:	d005      	beq.n	800324a <__aeabi_dsub+0x692>
 800323e:	2240      	movs	r2, #64	@ 0x40
 8003240:	1a52      	subs	r2, r2, r1
 8003242:	4094      	lsls	r4, r2
 8003244:	0025      	movs	r5, r4
 8003246:	4305      	orrs	r5, r0
 8003248:	9503      	str	r5, [sp, #12]
 800324a:	9d03      	ldr	r5, [sp, #12]
 800324c:	1e6a      	subs	r2, r5, #1
 800324e:	4195      	sbcs	r5, r2
 8003250:	432f      	orrs	r7, r5
 8003252:	e610      	b.n	8002e76 <__aeabi_dsub+0x2be>
 8003254:	0014      	movs	r4, r2
 8003256:	2500      	movs	r5, #0
 8003258:	2200      	movs	r2, #0
 800325a:	e556      	b.n	8002d0a <__aeabi_dsub+0x152>
 800325c:	9b02      	ldr	r3, [sp, #8]
 800325e:	4460      	add	r0, ip
 8003260:	4699      	mov	r9, r3
 8003262:	4560      	cmp	r0, ip
 8003264:	4192      	sbcs	r2, r2
 8003266:	444c      	add	r4, r9
 8003268:	4252      	negs	r2, r2
 800326a:	0005      	movs	r5, r0
 800326c:	18a4      	adds	r4, r4, r2
 800326e:	e74c      	b.n	800310a <__aeabi_dsub+0x552>
 8003270:	001a      	movs	r2, r3
 8003272:	001c      	movs	r4, r3
 8003274:	432a      	orrs	r2, r5
 8003276:	d000      	beq.n	800327a <__aeabi_dsub+0x6c2>
 8003278:	e6b3      	b.n	8002fe2 <__aeabi_dsub+0x42a>
 800327a:	e6c9      	b.n	8003010 <__aeabi_dsub+0x458>
 800327c:	2480      	movs	r4, #128	@ 0x80
 800327e:	2600      	movs	r6, #0
 8003280:	0324      	lsls	r4, r4, #12
 8003282:	e5ae      	b.n	8002de2 <__aeabi_dsub+0x22a>
 8003284:	2120      	movs	r1, #32
 8003286:	2500      	movs	r5, #0
 8003288:	1a09      	subs	r1, r1, r0
 800328a:	e517      	b.n	8002cbc <__aeabi_dsub+0x104>
 800328c:	2200      	movs	r2, #0
 800328e:	2500      	movs	r5, #0
 8003290:	4c0b      	ldr	r4, [pc, #44]	@ (80032c0 <__aeabi_dsub+0x708>)
 8003292:	e53a      	b.n	8002d0a <__aeabi_dsub+0x152>
 8003294:	2d00      	cmp	r5, #0
 8003296:	d100      	bne.n	800329a <__aeabi_dsub+0x6e2>
 8003298:	e5f6      	b.n	8002e88 <__aeabi_dsub+0x2d0>
 800329a:	464b      	mov	r3, r9
 800329c:	1bda      	subs	r2, r3, r7
 800329e:	4692      	mov	sl, r2
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	d100      	bne.n	80032a6 <__aeabi_dsub+0x6ee>
 80032a4:	e66f      	b.n	8002f86 <__aeabi_dsub+0x3ce>
 80032a6:	2a38      	cmp	r2, #56	@ 0x38
 80032a8:	dc05      	bgt.n	80032b6 <__aeabi_dsub+0x6fe>
 80032aa:	2680      	movs	r6, #128	@ 0x80
 80032ac:	0436      	lsls	r6, r6, #16
 80032ae:	4334      	orrs	r4, r6
 80032b0:	4688      	mov	r8, r1
 80032b2:	000e      	movs	r6, r1
 80032b4:	e6d1      	b.n	800305a <__aeabi_dsub+0x4a2>
 80032b6:	4688      	mov	r8, r1
 80032b8:	000e      	movs	r6, r1
 80032ba:	2501      	movs	r5, #1
 80032bc:	e6de      	b.n	800307c <__aeabi_dsub+0x4c4>
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	000007ff 	.word	0x000007ff
 80032c4:	ff7fffff 	.word	0xff7fffff
 80032c8:	000007fe 	.word	0x000007fe
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	d100      	bne.n	80032d2 <__aeabi_dsub+0x71a>
 80032d0:	e668      	b.n	8002fa4 <__aeabi_dsub+0x3ec>
 80032d2:	464b      	mov	r3, r9
 80032d4:	1bd9      	subs	r1, r3, r7
 80032d6:	2f00      	cmp	r7, #0
 80032d8:	d101      	bne.n	80032de <__aeabi_dsub+0x726>
 80032da:	468a      	mov	sl, r1
 80032dc:	e5a7      	b.n	8002e2e <__aeabi_dsub+0x276>
 80032de:	2701      	movs	r7, #1
 80032e0:	2938      	cmp	r1, #56	@ 0x38
 80032e2:	dd00      	ble.n	80032e6 <__aeabi_dsub+0x72e>
 80032e4:	e5c7      	b.n	8002e76 <__aeabi_dsub+0x2be>
 80032e6:	2280      	movs	r2, #128	@ 0x80
 80032e8:	0412      	lsls	r2, r2, #16
 80032ea:	4314      	orrs	r4, r2
 80032ec:	e5af      	b.n	8002e4e <__aeabi_dsub+0x296>
 80032ee:	46c0      	nop			@ (mov r8, r8)

080032f0 <__aeabi_dcmpun>:
 80032f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f2:	46c6      	mov	lr, r8
 80032f4:	031e      	lsls	r6, r3, #12
 80032f6:	0b36      	lsrs	r6, r6, #12
 80032f8:	46b0      	mov	r8, r6
 80032fa:	4e0d      	ldr	r6, [pc, #52]	@ (8003330 <__aeabi_dcmpun+0x40>)
 80032fc:	030c      	lsls	r4, r1, #12
 80032fe:	004d      	lsls	r5, r1, #1
 8003300:	005f      	lsls	r7, r3, #1
 8003302:	b500      	push	{lr}
 8003304:	0b24      	lsrs	r4, r4, #12
 8003306:	0d6d      	lsrs	r5, r5, #21
 8003308:	0d7f      	lsrs	r7, r7, #21
 800330a:	42b5      	cmp	r5, r6
 800330c:	d00b      	beq.n	8003326 <__aeabi_dcmpun+0x36>
 800330e:	4908      	ldr	r1, [pc, #32]	@ (8003330 <__aeabi_dcmpun+0x40>)
 8003310:	2000      	movs	r0, #0
 8003312:	428f      	cmp	r7, r1
 8003314:	d104      	bne.n	8003320 <__aeabi_dcmpun+0x30>
 8003316:	4646      	mov	r6, r8
 8003318:	4316      	orrs	r6, r2
 800331a:	0030      	movs	r0, r6
 800331c:	1e43      	subs	r3, r0, #1
 800331e:	4198      	sbcs	r0, r3
 8003320:	bc80      	pop	{r7}
 8003322:	46b8      	mov	r8, r7
 8003324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003326:	4304      	orrs	r4, r0
 8003328:	2001      	movs	r0, #1
 800332a:	2c00      	cmp	r4, #0
 800332c:	d1f8      	bne.n	8003320 <__aeabi_dcmpun+0x30>
 800332e:	e7ee      	b.n	800330e <__aeabi_dcmpun+0x1e>
 8003330:	000007ff 	.word	0x000007ff

08003334 <__aeabi_d2iz>:
 8003334:	000b      	movs	r3, r1
 8003336:	0002      	movs	r2, r0
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4d16      	ldr	r5, [pc, #88]	@ (8003394 <__aeabi_d2iz+0x60>)
 800333c:	030c      	lsls	r4, r1, #12
 800333e:	b082      	sub	sp, #8
 8003340:	0049      	lsls	r1, r1, #1
 8003342:	2000      	movs	r0, #0
 8003344:	9200      	str	r2, [sp, #0]
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	0b24      	lsrs	r4, r4, #12
 800334a:	0d49      	lsrs	r1, r1, #21
 800334c:	0fde      	lsrs	r6, r3, #31
 800334e:	42a9      	cmp	r1, r5
 8003350:	dd04      	ble.n	800335c <__aeabi_d2iz+0x28>
 8003352:	4811      	ldr	r0, [pc, #68]	@ (8003398 <__aeabi_d2iz+0x64>)
 8003354:	4281      	cmp	r1, r0
 8003356:	dd03      	ble.n	8003360 <__aeabi_d2iz+0x2c>
 8003358:	4b10      	ldr	r3, [pc, #64]	@ (800339c <__aeabi_d2iz+0x68>)
 800335a:	18f0      	adds	r0, r6, r3
 800335c:	b002      	add	sp, #8
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	2080      	movs	r0, #128	@ 0x80
 8003362:	0340      	lsls	r0, r0, #13
 8003364:	4320      	orrs	r0, r4
 8003366:	4c0e      	ldr	r4, [pc, #56]	@ (80033a0 <__aeabi_d2iz+0x6c>)
 8003368:	1a64      	subs	r4, r4, r1
 800336a:	2c1f      	cmp	r4, #31
 800336c:	dd08      	ble.n	8003380 <__aeabi_d2iz+0x4c>
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <__aeabi_d2iz+0x70>)
 8003370:	1a5b      	subs	r3, r3, r1
 8003372:	40d8      	lsrs	r0, r3
 8003374:	0003      	movs	r3, r0
 8003376:	4258      	negs	r0, r3
 8003378:	2e00      	cmp	r6, #0
 800337a:	d1ef      	bne.n	800335c <__aeabi_d2iz+0x28>
 800337c:	0018      	movs	r0, r3
 800337e:	e7ed      	b.n	800335c <__aeabi_d2iz+0x28>
 8003380:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <__aeabi_d2iz+0x74>)
 8003382:	9a00      	ldr	r2, [sp, #0]
 8003384:	469c      	mov	ip, r3
 8003386:	0003      	movs	r3, r0
 8003388:	4461      	add	r1, ip
 800338a:	408b      	lsls	r3, r1
 800338c:	40e2      	lsrs	r2, r4
 800338e:	4313      	orrs	r3, r2
 8003390:	e7f1      	b.n	8003376 <__aeabi_d2iz+0x42>
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	000003fe 	.word	0x000003fe
 8003398:	0000041d 	.word	0x0000041d
 800339c:	7fffffff 	.word	0x7fffffff
 80033a0:	00000433 	.word	0x00000433
 80033a4:	00000413 	.word	0x00000413
 80033a8:	fffffbed 	.word	0xfffffbed

080033ac <__aeabi_i2d>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d016      	beq.n	80033e0 <__aeabi_i2d+0x34>
 80033b2:	17c3      	asrs	r3, r0, #31
 80033b4:	18c5      	adds	r5, r0, r3
 80033b6:	405d      	eors	r5, r3
 80033b8:	0fc4      	lsrs	r4, r0, #31
 80033ba:	0028      	movs	r0, r5
 80033bc:	f000 f914 	bl	80035e8 <__clzsi2>
 80033c0:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <__aeabi_i2d+0x58>)
 80033c2:	1a1b      	subs	r3, r3, r0
 80033c4:	055b      	lsls	r3, r3, #21
 80033c6:	0d5b      	lsrs	r3, r3, #21
 80033c8:	280a      	cmp	r0, #10
 80033ca:	dc14      	bgt.n	80033f6 <__aeabi_i2d+0x4a>
 80033cc:	0002      	movs	r2, r0
 80033ce:	002e      	movs	r6, r5
 80033d0:	3215      	adds	r2, #21
 80033d2:	4096      	lsls	r6, r2
 80033d4:	220b      	movs	r2, #11
 80033d6:	1a12      	subs	r2, r2, r0
 80033d8:	40d5      	lsrs	r5, r2
 80033da:	032d      	lsls	r5, r5, #12
 80033dc:	0b2d      	lsrs	r5, r5, #12
 80033de:	e003      	b.n	80033e8 <__aeabi_i2d+0x3c>
 80033e0:	2400      	movs	r4, #0
 80033e2:	2300      	movs	r3, #0
 80033e4:	2500      	movs	r5, #0
 80033e6:	2600      	movs	r6, #0
 80033e8:	051b      	lsls	r3, r3, #20
 80033ea:	432b      	orrs	r3, r5
 80033ec:	07e4      	lsls	r4, r4, #31
 80033ee:	4323      	orrs	r3, r4
 80033f0:	0030      	movs	r0, r6
 80033f2:	0019      	movs	r1, r3
 80033f4:	bd70      	pop	{r4, r5, r6, pc}
 80033f6:	380b      	subs	r0, #11
 80033f8:	4085      	lsls	r5, r0
 80033fa:	032d      	lsls	r5, r5, #12
 80033fc:	2600      	movs	r6, #0
 80033fe:	0b2d      	lsrs	r5, r5, #12
 8003400:	e7f2      	b.n	80033e8 <__aeabi_i2d+0x3c>
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	0000041e 	.word	0x0000041e

08003408 <__aeabi_ui2d>:
 8003408:	b510      	push	{r4, lr}
 800340a:	1e04      	subs	r4, r0, #0
 800340c:	d010      	beq.n	8003430 <__aeabi_ui2d+0x28>
 800340e:	f000 f8eb 	bl	80035e8 <__clzsi2>
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <__aeabi_ui2d+0x44>)
 8003414:	1a1b      	subs	r3, r3, r0
 8003416:	055b      	lsls	r3, r3, #21
 8003418:	0d5b      	lsrs	r3, r3, #21
 800341a:	280a      	cmp	r0, #10
 800341c:	dc0f      	bgt.n	800343e <__aeabi_ui2d+0x36>
 800341e:	220b      	movs	r2, #11
 8003420:	0021      	movs	r1, r4
 8003422:	1a12      	subs	r2, r2, r0
 8003424:	40d1      	lsrs	r1, r2
 8003426:	3015      	adds	r0, #21
 8003428:	030a      	lsls	r2, r1, #12
 800342a:	4084      	lsls	r4, r0
 800342c:	0b12      	lsrs	r2, r2, #12
 800342e:	e001      	b.n	8003434 <__aeabi_ui2d+0x2c>
 8003430:	2300      	movs	r3, #0
 8003432:	2200      	movs	r2, #0
 8003434:	051b      	lsls	r3, r3, #20
 8003436:	4313      	orrs	r3, r2
 8003438:	0020      	movs	r0, r4
 800343a:	0019      	movs	r1, r3
 800343c:	bd10      	pop	{r4, pc}
 800343e:	0022      	movs	r2, r4
 8003440:	380b      	subs	r0, #11
 8003442:	4082      	lsls	r2, r0
 8003444:	0312      	lsls	r2, r2, #12
 8003446:	2400      	movs	r4, #0
 8003448:	0b12      	lsrs	r2, r2, #12
 800344a:	e7f3      	b.n	8003434 <__aeabi_ui2d+0x2c>
 800344c:	0000041e 	.word	0x0000041e

08003450 <__aeabi_f2d>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	0242      	lsls	r2, r0, #9
 8003454:	0043      	lsls	r3, r0, #1
 8003456:	0fc4      	lsrs	r4, r0, #31
 8003458:	20fe      	movs	r0, #254	@ 0xfe
 800345a:	0e1b      	lsrs	r3, r3, #24
 800345c:	1c59      	adds	r1, r3, #1
 800345e:	0a55      	lsrs	r5, r2, #9
 8003460:	4208      	tst	r0, r1
 8003462:	d00c      	beq.n	800347e <__aeabi_f2d+0x2e>
 8003464:	21e0      	movs	r1, #224	@ 0xe0
 8003466:	0089      	lsls	r1, r1, #2
 8003468:	468c      	mov	ip, r1
 800346a:	076d      	lsls	r5, r5, #29
 800346c:	0b12      	lsrs	r2, r2, #12
 800346e:	4463      	add	r3, ip
 8003470:	051b      	lsls	r3, r3, #20
 8003472:	4313      	orrs	r3, r2
 8003474:	07e4      	lsls	r4, r4, #31
 8003476:	4323      	orrs	r3, r4
 8003478:	0028      	movs	r0, r5
 800347a:	0019      	movs	r1, r3
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	2b00      	cmp	r3, #0
 8003480:	d114      	bne.n	80034ac <__aeabi_f2d+0x5c>
 8003482:	2d00      	cmp	r5, #0
 8003484:	d01b      	beq.n	80034be <__aeabi_f2d+0x6e>
 8003486:	0028      	movs	r0, r5
 8003488:	f000 f8ae 	bl	80035e8 <__clzsi2>
 800348c:	280a      	cmp	r0, #10
 800348e:	dc1c      	bgt.n	80034ca <__aeabi_f2d+0x7a>
 8003490:	230b      	movs	r3, #11
 8003492:	002a      	movs	r2, r5
 8003494:	1a1b      	subs	r3, r3, r0
 8003496:	40da      	lsrs	r2, r3
 8003498:	0003      	movs	r3, r0
 800349a:	3315      	adds	r3, #21
 800349c:	409d      	lsls	r5, r3
 800349e:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <__aeabi_f2d+0x88>)
 80034a0:	0312      	lsls	r2, r2, #12
 80034a2:	1a1b      	subs	r3, r3, r0
 80034a4:	055b      	lsls	r3, r3, #21
 80034a6:	0b12      	lsrs	r2, r2, #12
 80034a8:	0d5b      	lsrs	r3, r3, #21
 80034aa:	e7e1      	b.n	8003470 <__aeabi_f2d+0x20>
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	d009      	beq.n	80034c4 <__aeabi_f2d+0x74>
 80034b0:	0b13      	lsrs	r3, r2, #12
 80034b2:	2280      	movs	r2, #128	@ 0x80
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	431a      	orrs	r2, r3
 80034b8:	076d      	lsls	r5, r5, #29
 80034ba:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <__aeabi_f2d+0x8c>)
 80034bc:	e7d8      	b.n	8003470 <__aeabi_f2d+0x20>
 80034be:	2300      	movs	r3, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	e7d5      	b.n	8003470 <__aeabi_f2d+0x20>
 80034c4:	2200      	movs	r2, #0
 80034c6:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <__aeabi_f2d+0x8c>)
 80034c8:	e7d2      	b.n	8003470 <__aeabi_f2d+0x20>
 80034ca:	0003      	movs	r3, r0
 80034cc:	002a      	movs	r2, r5
 80034ce:	3b0b      	subs	r3, #11
 80034d0:	409a      	lsls	r2, r3
 80034d2:	2500      	movs	r5, #0
 80034d4:	e7e3      	b.n	800349e <__aeabi_f2d+0x4e>
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	00000389 	.word	0x00000389
 80034dc:	000007ff 	.word	0x000007ff

080034e0 <__aeabi_d2f>:
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	004b      	lsls	r3, r1, #1
 80034e4:	030f      	lsls	r7, r1, #12
 80034e6:	0d5b      	lsrs	r3, r3, #21
 80034e8:	4c3b      	ldr	r4, [pc, #236]	@ (80035d8 <__aeabi_d2f+0xf8>)
 80034ea:	0f45      	lsrs	r5, r0, #29
 80034ec:	b083      	sub	sp, #12
 80034ee:	0a7f      	lsrs	r7, r7, #9
 80034f0:	1c5e      	adds	r6, r3, #1
 80034f2:	432f      	orrs	r7, r5
 80034f4:	9000      	str	r0, [sp, #0]
 80034f6:	9101      	str	r1, [sp, #4]
 80034f8:	0fca      	lsrs	r2, r1, #31
 80034fa:	00c5      	lsls	r5, r0, #3
 80034fc:	4226      	tst	r6, r4
 80034fe:	d00b      	beq.n	8003518 <__aeabi_d2f+0x38>
 8003500:	4936      	ldr	r1, [pc, #216]	@ (80035dc <__aeabi_d2f+0xfc>)
 8003502:	185c      	adds	r4, r3, r1
 8003504:	2cfe      	cmp	r4, #254	@ 0xfe
 8003506:	dd13      	ble.n	8003530 <__aeabi_d2f+0x50>
 8003508:	20ff      	movs	r0, #255	@ 0xff
 800350a:	2300      	movs	r3, #0
 800350c:	05c0      	lsls	r0, r0, #23
 800350e:	4318      	orrs	r0, r3
 8003510:	07d2      	lsls	r2, r2, #31
 8003512:	4310      	orrs	r0, r2
 8003514:	b003      	add	sp, #12
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <__aeabi_d2f+0x42>
 800351c:	2000      	movs	r0, #0
 800351e:	2300      	movs	r3, #0
 8003520:	e7f4      	b.n	800350c <__aeabi_d2f+0x2c>
 8003522:	433d      	orrs	r5, r7
 8003524:	d0f0      	beq.n	8003508 <__aeabi_d2f+0x28>
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	03db      	lsls	r3, r3, #15
 800352a:	20ff      	movs	r0, #255	@ 0xff
 800352c:	433b      	orrs	r3, r7
 800352e:	e7ed      	b.n	800350c <__aeabi_d2f+0x2c>
 8003530:	2c00      	cmp	r4, #0
 8003532:	dd14      	ble.n	800355e <__aeabi_d2f+0x7e>
 8003534:	9b00      	ldr	r3, [sp, #0]
 8003536:	00ff      	lsls	r7, r7, #3
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	4183      	sbcs	r3, r0
 800353e:	0f69      	lsrs	r1, r5, #29
 8003540:	433b      	orrs	r3, r7
 8003542:	430b      	orrs	r3, r1
 8003544:	0759      	lsls	r1, r3, #29
 8003546:	d041      	beq.n	80035cc <__aeabi_d2f+0xec>
 8003548:	210f      	movs	r1, #15
 800354a:	4019      	ands	r1, r3
 800354c:	2904      	cmp	r1, #4
 800354e:	d028      	beq.n	80035a2 <__aeabi_d2f+0xc2>
 8003550:	3304      	adds	r3, #4
 8003552:	0159      	lsls	r1, r3, #5
 8003554:	d525      	bpl.n	80035a2 <__aeabi_d2f+0xc2>
 8003556:	3401      	adds	r4, #1
 8003558:	2300      	movs	r3, #0
 800355a:	b2e0      	uxtb	r0, r4
 800355c:	e7d6      	b.n	800350c <__aeabi_d2f+0x2c>
 800355e:	0021      	movs	r1, r4
 8003560:	3117      	adds	r1, #23
 8003562:	dbdb      	blt.n	800351c <__aeabi_d2f+0x3c>
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	201e      	movs	r0, #30
 8003568:	0409      	lsls	r1, r1, #16
 800356a:	4339      	orrs	r1, r7
 800356c:	1b00      	subs	r0, r0, r4
 800356e:	281f      	cmp	r0, #31
 8003570:	dd1b      	ble.n	80035aa <__aeabi_d2f+0xca>
 8003572:	2602      	movs	r6, #2
 8003574:	4276      	negs	r6, r6
 8003576:	1b34      	subs	r4, r6, r4
 8003578:	000e      	movs	r6, r1
 800357a:	40e6      	lsrs	r6, r4
 800357c:	0034      	movs	r4, r6
 800357e:	2820      	cmp	r0, #32
 8003580:	d004      	beq.n	800358c <__aeabi_d2f+0xac>
 8003582:	4817      	ldr	r0, [pc, #92]	@ (80035e0 <__aeabi_d2f+0x100>)
 8003584:	4684      	mov	ip, r0
 8003586:	4463      	add	r3, ip
 8003588:	4099      	lsls	r1, r3
 800358a:	430d      	orrs	r5, r1
 800358c:	002b      	movs	r3, r5
 800358e:	1e59      	subs	r1, r3, #1
 8003590:	418b      	sbcs	r3, r1
 8003592:	4323      	orrs	r3, r4
 8003594:	0759      	lsls	r1, r3, #29
 8003596:	d015      	beq.n	80035c4 <__aeabi_d2f+0xe4>
 8003598:	210f      	movs	r1, #15
 800359a:	2400      	movs	r4, #0
 800359c:	4019      	ands	r1, r3
 800359e:	2904      	cmp	r1, #4
 80035a0:	d117      	bne.n	80035d2 <__aeabi_d2f+0xf2>
 80035a2:	019b      	lsls	r3, r3, #6
 80035a4:	0a5b      	lsrs	r3, r3, #9
 80035a6:	b2e0      	uxtb	r0, r4
 80035a8:	e7b0      	b.n	800350c <__aeabi_d2f+0x2c>
 80035aa:	4c0e      	ldr	r4, [pc, #56]	@ (80035e4 <__aeabi_d2f+0x104>)
 80035ac:	191c      	adds	r4, r3, r4
 80035ae:	002b      	movs	r3, r5
 80035b0:	40a5      	lsls	r5, r4
 80035b2:	40c3      	lsrs	r3, r0
 80035b4:	40a1      	lsls	r1, r4
 80035b6:	1e68      	subs	r0, r5, #1
 80035b8:	4185      	sbcs	r5, r0
 80035ba:	4329      	orrs	r1, r5
 80035bc:	430b      	orrs	r3, r1
 80035be:	2400      	movs	r4, #0
 80035c0:	0759      	lsls	r1, r3, #29
 80035c2:	d1c1      	bne.n	8003548 <__aeabi_d2f+0x68>
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	2000      	movs	r0, #0
 80035c8:	0a5b      	lsrs	r3, r3, #9
 80035ca:	e79f      	b.n	800350c <__aeabi_d2f+0x2c>
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	b2e0      	uxtb	r0, r4
 80035d0:	e79c      	b.n	800350c <__aeabi_d2f+0x2c>
 80035d2:	3304      	adds	r3, #4
 80035d4:	e7e5      	b.n	80035a2 <__aeabi_d2f+0xc2>
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	000007fe 	.word	0x000007fe
 80035dc:	fffffc80 	.word	0xfffffc80
 80035e0:	fffffca2 	.word	0xfffffca2
 80035e4:	fffffc82 	.word	0xfffffc82

080035e8 <__clzsi2>:
 80035e8:	211c      	movs	r1, #28
 80035ea:	2301      	movs	r3, #1
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	4298      	cmp	r0, r3
 80035f0:	d301      	bcc.n	80035f6 <__clzsi2+0xe>
 80035f2:	0c00      	lsrs	r0, r0, #16
 80035f4:	3910      	subs	r1, #16
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	4298      	cmp	r0, r3
 80035fa:	d301      	bcc.n	8003600 <__clzsi2+0x18>
 80035fc:	0a00      	lsrs	r0, r0, #8
 80035fe:	3908      	subs	r1, #8
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0x22>
 8003606:	0900      	lsrs	r0, r0, #4
 8003608:	3904      	subs	r1, #4
 800360a:	a202      	add	r2, pc, #8	@ (adr r2, 8003614 <__clzsi2+0x2c>)
 800360c:	5c10      	ldrb	r0, [r2, r0]
 800360e:	1840      	adds	r0, r0, r1
 8003610:	4770      	bx	lr
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	02020304 	.word	0x02020304
 8003618:	01010101 	.word	0x01010101
	...

08003624 <__clzdi2>:
 8003624:	b510      	push	{r4, lr}
 8003626:	2900      	cmp	r1, #0
 8003628:	d103      	bne.n	8003632 <__clzdi2+0xe>
 800362a:	f7ff ffdd 	bl	80035e8 <__clzsi2>
 800362e:	3020      	adds	r0, #32
 8003630:	e002      	b.n	8003638 <__clzdi2+0x14>
 8003632:	0008      	movs	r0, r1
 8003634:	f7ff ffd8 	bl	80035e8 <__clzsi2>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)

0800363c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	1dbb      	adds	r3, r7, #6
 8003648:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800364a:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003650:	f008 ff2a 	bl	800c4a8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003654:	2316      	movs	r3, #22
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2200      	movs	r2, #0
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	e015      	b.n	800368a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	2416      	movs	r4, #22
 8003664:	193b      	adds	r3, r7, r4
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	18d3      	adds	r3, r2, r3
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	001a      	movs	r2, r3
 8003670:	2000      	movs	r0, #0
 8003672:	f008 ff81 	bl	800c578 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003676:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 800367e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003680:	193b      	adds	r3, r7, r4
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	193b      	adds	r3, r7, r4
 8003686:	3201      	adds	r2, #1
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	2316      	movs	r3, #22
 800368c:	18fa      	adds	r2, r7, r3
 800368e:	1dbb      	adds	r3, r7, #6
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d3e2      	bcc.n	800365e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8003698:	f008 ff34 	bl	800c504 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800369c:	4b02      	ldr	r3, [pc, #8]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b007      	add	sp, #28
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	200003e8 	.word	0x200003e8

080036ac <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	0019      	movs	r1, r3
 80036b8:	1dbb      	adds	r3, r7, #6
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	1c0a      	adds	r2, r1, #0
 80036c0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036c2:	1dba      	adds	r2, r7, #6
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d806      	bhi.n	80036dc <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff ffb0 	bl	800363c <WriteUint8ArrayEeprom>
    }
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	1dbb      	adds	r3, r7, #6
 80036f0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80036f2:	2316      	movs	r3, #22
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2200      	movs	r2, #0
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	e010      	b.n	800371e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 80036fc:	2016      	movs	r0, #22
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	18d3      	adds	r3, r2, r3
 8003706:	0019      	movs	r1, r3
 8003708:	183b      	adds	r3, r7, r0
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	18d3      	adds	r3, r2, r3
 8003710:	780a      	ldrb	r2, [r1, #0]
 8003712:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003714:	183b      	adds	r3, r7, r0
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	183b      	adds	r3, r7, r0
 800371a:	3201      	adds	r2, #1
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	2316      	movs	r3, #22
 8003720:	18fa      	adds	r2, r7, r3
 8003722:	1dbb      	adds	r3, r7, #6
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d3e7      	bcc.n	80036fc <ReadUint8ArrayEEprom+0x18>
    }
}
 800372c:	46c0      	nop			@ (mov r8, r8)
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b006      	add	sp, #24
 8003734:	bd80      	pop	{r7, pc}

08003736 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003736:	b590      	push	{r4, r7, lr}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	000a      	movs	r2, r1
 8003740:	1cbb      	adds	r3, r7, #2
 8003742:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003744:	f008 feb0 	bl	800c4a8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8003748:	230e      	movs	r3, #14
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	e00c      	b.n	800376c <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003752:	240e      	movs	r4, #14
 8003754:	193b      	adds	r3, r7, r4
 8003756:	881a      	ldrh	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	0018      	movs	r0, r3
 800375e:	f008 fedf 	bl	800c520 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003762:	193b      	adds	r3, r7, r4
 8003764:	193a      	adds	r2, r7, r4
 8003766:	8812      	ldrh	r2, [r2, #0]
 8003768:	3204      	adds	r2, #4
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	230e      	movs	r3, #14
 800376e:	18fa      	adds	r2, r7, r3
 8003770:	1cbb      	adds	r3, r7, #2
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3eb      	bcc.n	8003752 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800377a:	f008 fec3 	bl	800c504 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b005      	add	sp, #20
 8003784:	bd90      	pop	{r4, r7, pc}
	...

08003788 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800378c:	f002 f8d6 	bl	800593c <ReadBatteryVoltage>
 8003790:	1c02      	adds	r2, r0, #0
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <setCharges+0x20>)
 8003794:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 8003796:	f002 f933 	bl	8005a00 <ReadSolarVoltage>
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	4b03      	ldr	r3, [pc, #12]	@ (80037ac <setCharges+0x24>)
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	20000518 	.word	0x20000518
 80037ac:	2000051c 	.word	0x2000051c

080037b0 <checkEEprom>:
bool checkEEprom(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <checkEEprom+0x5c>)
 80037b8:	4815      	ldr	r0, [pc, #84]	@ (8003810 <checkEEprom+0x60>)
 80037ba:	220c      	movs	r2, #12
 80037bc:	0019      	movs	r1, r3
 80037be:	f7ff ff91 	bl	80036e4 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e00e      	b.n	80037e8 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037ca:	1dfb      	adds	r3, r7, #7
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	@ (800380c <checkEEprom+0x5c>)
 80037d0:	5cd3      	ldrb	r3, [r2, r3]
 80037d2:	001a      	movs	r2, r3
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <checkEEprom+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	18d2      	adds	r2, r2, r3
 80037da:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <checkEEprom+0x64>)
 80037dc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	3201      	adds	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b0b      	cmp	r3, #11
 80037ee:	d9ec      	bls.n	80037ca <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <checkEEprom+0x64>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	425a      	negs	r2, r3
 80037f6:	4153      	adcs	r3, r2
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <checkEEprom+0x68>)
 80037fc:	701a      	strb	r2, [r3, #0]
  return test;
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <checkEEprom+0x68>)
 8003800:	781b      	ldrb	r3, [r3, #0]
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	20000940 	.word	0x20000940
 8003810:	0808000c 	.word	0x0808000c
 8003814:	2000094c 	.word	0x2000094c
 8003818:	20000950 	.word	0x20000950

0800381c <checkName>:
bool checkName(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkName+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkName+0x60>)
 8003826:	221e      	movs	r2, #30
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff5b 	bl	80036e4 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkName+0x38>
    configSum += nameConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkName+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkName+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkName+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkName+0x1a>
  }
  test = (configSum != 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkName+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	1e5a      	subs	r2, r3, #1
 8003862:	4193      	sbcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkName+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkName+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000954 	.word	0x20000954
 800387c:	08080090 	.word	0x08080090
 8003880:	20000974 	.word	0x20000974
 8003884:	20000978 	.word	0x20000978

08003888 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003892:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <ESP_GetHT+0x20>)
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <ESP_GetHT+0x24>)
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b002      	add	sp, #8
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	20000510 	.word	0x20000510
 80038ac:	20000514 	.word	0x20000514

080038b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <setMeasurement+0x2c>)
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <setMeasurement+0x30>)
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <setMeasurement+0x34>)
 80038cc:	1dba      	adds	r2, r7, #6
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	801a      	strh	r2, [r3, #0]
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	20000510 	.word	0x20000510
 80038e0:	20000514 	.word	0x20000514
 80038e4:	20000520 	.word	0x20000520

080038e8 <setMic>:
void setMic(float dB){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  dBC = dB;
 80038f0:	4b03      	ldr	r3, [pc, #12]	@ (8003900 <setMic+0x18>)
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	20000524 	.word	0x20000524

08003904 <SetConfigMode>:

void SetConfigMode(){
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003908:	4b02      	ldr	r3, [pc, #8]	@ (8003914 <SetConfigMode+0x10>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200004f6 	.word	0x200004f6

08003918 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 800391c:	f007 fdee 	bl	800b4fc <HAL_GetUIDw0>
 8003920:	0002      	movs	r2, r0
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <ESP_GetUID+0x28>)
 8003924:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003926:	f007 fdf3 	bl	800b510 <HAL_GetUIDw1>
 800392a:	0002      	movs	r2, r0
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <ESP_GetUID+0x28>)
 800392e:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003930:	f007 fdf8 	bl	800b524 <HAL_GetUIDw2>
 8003934:	0002      	movs	r2, r0
 8003936:	4b02      	ldr	r3, [pc, #8]	@ (8003940 <ESP_GetUID+0x28>)
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	200004fc 	.word	0x200004fc

08003944 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <ESP_Init+0x2c>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <ESP_Init+0x30>)
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003958:	f7ff ffde 	bl	8003918 <ESP_GetUID>
  beurs = checkEEprom();
 800395c:	f7ff ff28 	bl	80037b0 <checkEEprom>
 8003960:	0003      	movs	r3, r0
 8003962:	001a      	movs	r2, r3
 8003964:	4b04      	ldr	r3, [pc, #16]	@ (8003978 <ESP_Init+0x34>)
 8003966:	701a      	strb	r2, [r3, #0]
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200003ec 	.word	0x200003ec
 8003974:	20000021 	.word	0x20000021
 8003978:	200004f9 	.word	0x200004f9

0800397c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	000a      	movs	r2, r1
 8003986:	1cbb      	adds	r3, r7, #2
 8003988:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800398a:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <ESP_Send+0x48>)
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	250f      	movs	r5, #15
 8003990:	197c      	adds	r4, r7, r5
 8003992:	1cbb      	adds	r3, r7, #2
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0019      	movs	r1, r3
 800399a:	f00f f8c7 	bl	8012b2c <HAL_UART_Transmit_DMA>
 800399e:	0003      	movs	r3, r0
 80039a0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039a2:	197b      	adds	r3, r7, r5
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80039aa:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <ESP_Send+0x4c>)
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <ESP_Send+0x50>)
 80039ae:	0019      	movs	r1, r3
 80039b0:	2003      	movs	r0, #3
 80039b2:	f007 f9d3 	bl	800ad5c <CreateLine>
    return false;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <ESP_Send+0x40>
  }
  return true;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b004      	add	sp, #16
 80039c2:	bdb0      	pop	{r4, r5, r7, pc}
 80039c4:	200003ec 	.word	0x200003ec
 80039c8:	0801e1d0 	.word	0x0801e1d0
 80039cc:	0801e1f0 	.word	0x0801e1f0

080039d0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80039d0:	b5b0      	push	{r4, r5, r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	000a      	movs	r2, r1
 80039da:	1cfb      	adds	r3, r7, #3
 80039dc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80039de:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <ESP_Receive+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80039e4:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <ESP_Receive+0x68>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	1cfb      	adds	r3, r7, #3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	250f      	movs	r5, #15
 80039f0:	197c      	adds	r4, r7, r5
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0019      	movs	r1, r3
 80039f6:	f00f f929 	bl	8012c4c <HAL_UART_Receive_DMA>
 80039fa:	0003      	movs	r3, r0
 80039fc:	7023      	strb	r3, [r4, #0]
  Info("reply is: %s", reply);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a0e      	ldr	r2, [pc, #56]	@ (8003a3c <ESP_Receive+0x6c>)
 8003a02:	490f      	ldr	r1, [pc, #60]	@ (8003a40 <ESP_Receive+0x70>)
 8003a04:	2002      	movs	r0, #2
 8003a06:	f007 f9a9 	bl	800ad5c <CreateLine>
  if (status != HAL_OK) {
 8003a0a:	197b      	adds	r3, r7, r5
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <ESP_Receive+0x58>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003a12:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <ESP_Receive+0x74>)
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <ESP_Receive+0x78>)
 8003a16:	0019      	movs	r1, r3
 8003a18:	2003      	movs	r0, #3
 8003a1a:	f007 f99f 	bl	800ad5c <CreateLine>
    RxComplete = true;
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <ESP_Receive+0x64>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
    return false;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <ESP_Receive+0x5a>
  }
  return true;
 8003a28:	2301      	movs	r3, #1
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b004      	add	sp, #16
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	200003f0 	.word	0x200003f0
 8003a38:	200003ec 	.word	0x200003ec
 8003a3c:	0801e1f4 	.word	0x0801e1f4
 8003a40:	0801e204 	.word	0x0801e204
 8003a44:	0801e208 	.word	0x0801e208
 8003a48:	0801e1f0 	.word	0x0801e1f0

08003a4c <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_UART_ErrorCallback+0x38>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d10d      	bne.n	8003a7a <HAL_UART_ErrorCallback+0x2e>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2284      	movs	r2, #132	@ 0x84
 8003a62:	589b      	ldr	r3, [r3, r2]
 8003a64:	4a08      	ldr	r2, [pc, #32]	@ (8003a88 <HAL_UART_ErrorCallback+0x3c>)
 8003a66:	4909      	ldr	r1, [pc, #36]	@ (8003a8c <HAL_UART_ErrorCallback+0x40>)
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f007 f977 	bl	800ad5c <CreateLine>
    errorHandler(__func__, __LINE__, __FILE__);
 8003a6e:	4a08      	ldr	r2, [pc, #32]	@ (8003a90 <HAL_UART_ErrorCallback+0x44>)
 8003a70:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_UART_ErrorCallback+0x48>)
 8003a72:	21bc      	movs	r1, #188	@ 0xbc
 8003a74:	0018      	movs	r0, r3
 8003a76:	f007 fa1d 	bl	800aeb4 <errorHandler>
  }
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	200003ec 	.word	0x200003ec
 8003a88:	0801e228 	.word	0x0801e228
 8003a8c:	0801e1f0 	.word	0x0801e1f0
 8003a90:	0801e254 	.word	0x0801e254
 8003a94:	0801f0bc 	.word	0x0801f0bc

08003a98 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e010      	b.n	8003aca <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	001a      	movs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1898      	adds	r0, r3, r2
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	001a      	movs	r2, r3
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <uint8ArrayToString+0x44>)
 8003abe:	0019      	movs	r1, r3
 8003ac0:	f017 fa94 	bl	801afec <siprintf>
  for (int i = 0; i < 12; i++)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b0b      	cmp	r3, #11
 8003ace:	ddeb      	ble.n	8003aa8 <uint8ArrayToString+0x10>
  }
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	0801e268 	.word	0x0801e268

08003ae0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b089      	sub	sp, #36	@ 0x24
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	701a      	strb	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003aec:	4bb6      	ldr	r3, [pc, #728]	@ (8003dc8 <CreateMessage+0x2e8>)
 8003aee:	48b7      	ldr	r0, [pc, #732]	@ (8003dcc <CreateMessage+0x2ec>)
 8003af0:	220c      	movs	r2, #12
 8003af2:	0019      	movs	r1, r3
 8003af4:	f7ff fdf6 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003af8:	4bb5      	ldr	r3, [pc, #724]	@ (8003dd0 <CreateMessage+0x2f0>)
 8003afa:	48b6      	ldr	r0, [pc, #728]	@ (8003dd4 <CreateMessage+0x2f4>)
 8003afc:	220c      	movs	r2, #12
 8003afe:	0019      	movs	r1, r3
 8003b00:	f7ff fdf0 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b04:	4bb4      	ldr	r3, [pc, #720]	@ (8003dd8 <CreateMessage+0x2f8>)
 8003b06:	48b5      	ldr	r0, [pc, #724]	@ (8003ddc <CreateMessage+0x2fc>)
 8003b08:	220c      	movs	r2, #12
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	f7ff fdea 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b10:	4bb3      	ldr	r3, [pc, #716]	@ (8003de0 <CreateMessage+0x300>)
 8003b12:	48b4      	ldr	r0, [pc, #720]	@ (8003de4 <CreateMessage+0x304>)
 8003b14:	220c      	movs	r2, #12
 8003b16:	0019      	movs	r1, r3
 8003b18:	f7ff fde4 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b1c:	4bb2      	ldr	r3, [pc, #712]	@ (8003de8 <CreateMessage+0x308>)
 8003b1e:	48b3      	ldr	r0, [pc, #716]	@ (8003dec <CreateMessage+0x30c>)
 8003b20:	220c      	movs	r2, #12
 8003b22:	0019      	movs	r1, r3
 8003b24:	f7ff fdde 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b28:	4bb1      	ldr	r3, [pc, #708]	@ (8003df0 <CreateMessage+0x310>)
 8003b2a:	48b2      	ldr	r0, [pc, #712]	@ (8003df4 <CreateMessage+0x314>)
 8003b2c:	220c      	movs	r2, #12
 8003b2e:	0019      	movs	r1, r3
 8003b30:	f7ff fdd8 	bl	80036e4 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b34:	f7ff fe72 	bl	800381c <checkName>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d006      	beq.n	8003b4a <CreateMessage+0x6a>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b3c:	4bae      	ldr	r3, [pc, #696]	@ (8003df8 <CreateMessage+0x318>)
 8003b3e:	48af      	ldr	r0, [pc, #700]	@ (8003dfc <CreateMessage+0x31c>)
 8003b40:	221e      	movs	r2, #30
 8003b42:	0019      	movs	r1, r3
 8003b44:	f7ff fdce 	bl	80036e4 <ReadUint8ArrayEEprom>
 8003b48:	e005      	b.n	8003b56 <CreateMessage+0x76>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b4a:	4bab      	ldr	r3, [pc, #684]	@ (8003df8 <CreateMessage+0x318>)
 8003b4c:	4aac      	ldr	r2, [pc, #688]	@ (8003e00 <CreateMessage+0x320>)
 8003b4e:	6811      	ldr	r1, [r2, #0]
 8003b50:	6019      	str	r1, [r3, #0]
 8003b52:	7912      	ldrb	r2, [r2, #4]
 8003b54:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b56:	f7ff fe17 	bl	8003788 <setCharges>

  memset(message, '\0', 1024);
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	00da      	lsls	r2, r3, #3
 8003b5e:	4ba9      	ldr	r3, [pc, #676]	@ (8003e04 <CreateMessage+0x324>)
 8003b60:	2100      	movs	r1, #0
 8003b62:	0018      	movs	r0, r3
 8003b64:	f017 fae6 	bl	801b134 <memset>
  uint16_t index = 0;
 8003b68:	260e      	movs	r6, #14
 8003b6a:	19bb      	adds	r3, r7, r6
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b70:	19bb      	adds	r3, r7, r6
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	4ba3      	ldr	r3, [pc, #652]	@ (8003e04 <CreateMessage+0x324>)
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	4aa3      	ldr	r2, [pc, #652]	@ (8003e08 <CreateMessage+0x328>)
 8003b7a:	0011      	movs	r1, r2
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f017 fa35 	bl	801afec <siprintf>
  index = strlen(message);
 8003b82:	4ba0      	ldr	r3, [pc, #640]	@ (8003e04 <CreateMessage+0x324>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7fc fae7 	bl	8000158 <strlen>
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	19bb      	adds	r3, r7, r6
 8003b8e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003b90:	4a8d      	ldr	r2, [pc, #564]	@ (8003dc8 <CreateMessage+0x2e8>)
 8003b92:	4b9e      	ldr	r3, [pc, #632]	@ (8003e0c <CreateMessage+0x32c>)
 8003b94:	0011      	movs	r1, r2
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7ff ff7e 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003b9c:	19bb      	adds	r3, r7, r6
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	4b98      	ldr	r3, [pc, #608]	@ (8003e04 <CreateMessage+0x324>)
 8003ba2:	18d4      	adds	r4, r2, r3
 8003ba4:	4b9a      	ldr	r3, [pc, #616]	@ (8003e10 <CreateMessage+0x330>)
 8003ba6:	689d      	ldr	r5, [r3, #8]
 8003ba8:	4b9a      	ldr	r3, [pc, #616]	@ (8003e14 <CreateMessage+0x334>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1c18      	adds	r0, r3, #0
 8003bae:	f7ff fc4f 	bl	8003450 <__aeabi_f2d>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	000b      	movs	r3, r1
 8003bb6:	4890      	ldr	r0, [pc, #576]	@ (8003df8 <CreateMessage+0x318>)
 8003bb8:	4997      	ldr	r1, [pc, #604]	@ (8003e18 <CreateMessage+0x338>)
 8003bba:	9202      	str	r2, [sp, #8]
 8003bbc:	9303      	str	r3, [sp, #12]
 8003bbe:	4b93      	ldr	r3, [pc, #588]	@ (8003e0c <CreateMessage+0x32c>)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	002a      	movs	r2, r5
 8003bc6:	0020      	movs	r0, r4
 8003bc8:	f017 fa10 	bl	801afec <siprintf>
  index = strlen(message);
 8003bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8003e04 <CreateMessage+0x324>)
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fc fac2 	bl	8000158 <strlen>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	19bb      	adds	r3, r7, r6
 8003bd8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003bda:	4a7d      	ldr	r2, [pc, #500]	@ (8003dd0 <CreateMessage+0x2f0>)
 8003bdc:	4b8b      	ldr	r3, [pc, #556]	@ (8003e0c <CreateMessage+0x32c>)
 8003bde:	0011      	movs	r1, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7ff ff59 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003be6:	19bb      	adds	r3, r7, r6
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	4b86      	ldr	r3, [pc, #536]	@ (8003e04 <CreateMessage+0x324>)
 8003bec:	18d4      	adds	r4, r2, r3
 8003bee:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <CreateMessage+0x330>)
 8003bf0:	689d      	ldr	r5, [r3, #8]
 8003bf2:	4b8a      	ldr	r3, [pc, #552]	@ (8003e1c <CreateMessage+0x33c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1c18      	adds	r0, r3, #0
 8003bf8:	f7ff fc2a 	bl	8003450 <__aeabi_f2d>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	000b      	movs	r3, r1
 8003c00:	487d      	ldr	r0, [pc, #500]	@ (8003df8 <CreateMessage+0x318>)
 8003c02:	4987      	ldr	r1, [pc, #540]	@ (8003e20 <CreateMessage+0x340>)
 8003c04:	9202      	str	r2, [sp, #8]
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	4b80      	ldr	r3, [pc, #512]	@ (8003e0c <CreateMessage+0x32c>)
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	002a      	movs	r2, r5
 8003c10:	0020      	movs	r0, r4
 8003c12:	f017 f9eb 	bl	801afec <siprintf>
  index = strlen(message);
 8003c16:	4b7b      	ldr	r3, [pc, #492]	@ (8003e04 <CreateMessage+0x324>)
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7fc fa9d 	bl	8000158 <strlen>
 8003c1e:	0002      	movs	r2, r0
 8003c20:	19bb      	adds	r3, r7, r6
 8003c22:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c24:	4a6c      	ldr	r2, [pc, #432]	@ (8003dd8 <CreateMessage+0x2f8>)
 8003c26:	4b79      	ldr	r3, [pc, #484]	@ (8003e0c <CreateMessage+0x32c>)
 8003c28:	0011      	movs	r1, r2
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff ff34 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c30:	19bb      	adds	r3, r7, r6
 8003c32:	881a      	ldrh	r2, [r3, #0]
 8003c34:	4b73      	ldr	r3, [pc, #460]	@ (8003e04 <CreateMessage+0x324>)
 8003c36:	18d4      	adds	r4, r2, r3
 8003c38:	4b75      	ldr	r3, [pc, #468]	@ (8003e10 <CreateMessage+0x330>)
 8003c3a:	689d      	ldr	r5, [r3, #8]
 8003c3c:	4b79      	ldr	r3, [pc, #484]	@ (8003e24 <CreateMessage+0x344>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1c18      	adds	r0, r3, #0
 8003c42:	f7ff fc05 	bl	8003450 <__aeabi_f2d>
 8003c46:	0002      	movs	r2, r0
 8003c48:	000b      	movs	r3, r1
 8003c4a:	486b      	ldr	r0, [pc, #428]	@ (8003df8 <CreateMessage+0x318>)
 8003c4c:	4976      	ldr	r1, [pc, #472]	@ (8003e28 <CreateMessage+0x348>)
 8003c4e:	9202      	str	r2, [sp, #8]
 8003c50:	9303      	str	r3, [sp, #12]
 8003c52:	4b6e      	ldr	r3, [pc, #440]	@ (8003e0c <CreateMessage+0x32c>)
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	0003      	movs	r3, r0
 8003c58:	002a      	movs	r2, r5
 8003c5a:	0020      	movs	r0, r4
 8003c5c:	f017 f9c6 	bl	801afec <siprintf>
  index = strlen(message);
 8003c60:	4b68      	ldr	r3, [pc, #416]	@ (8003e04 <CreateMessage+0x324>)
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7fc fa78 	bl	8000158 <strlen>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	19bb      	adds	r3, r7, r6
 8003c6c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8003de0 <CreateMessage+0x300>)
 8003c70:	4b66      	ldr	r3, [pc, #408]	@ (8003e0c <CreateMessage+0x32c>)
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff ff0f 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c7a:	19bb      	adds	r3, r7, r6
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <CreateMessage+0x324>)
 8003c80:	18d0      	adds	r0, r2, r3
 8003c82:	4b63      	ldr	r3, [pc, #396]	@ (8003e10 <CreateMessage+0x330>)
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	4b69      	ldr	r3, [pc, #420]	@ (8003e2c <CreateMessage+0x34c>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	4c5b      	ldr	r4, [pc, #364]	@ (8003df8 <CreateMessage+0x318>)
 8003c8c:	4968      	ldr	r1, [pc, #416]	@ (8003e30 <CreateMessage+0x350>)
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	4b5e      	ldr	r3, [pc, #376]	@ (8003e0c <CreateMessage+0x32c>)
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	0023      	movs	r3, r4
 8003c96:	f017 f9a9 	bl	801afec <siprintf>
  index = strlen(message);
 8003c9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003e04 <CreateMessage+0x324>)
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fc fa5b 	bl	8000158 <strlen>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	19bb      	adds	r3, r7, r6
 8003ca6:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003ca8:	1dfb      	adds	r3, r7, #7
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	4053      	eors	r3, r2
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04a      	beq.n	8003d4c <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8003de8 <CreateMessage+0x308>)
 8003cb8:	4b54      	ldr	r3, [pc, #336]	@ (8003e0c <CreateMessage+0x32c>)
 8003cba:	0011      	movs	r1, r2
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff feeb 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003cc2:	19bb      	adds	r3, r7, r6
 8003cc4:	881a      	ldrh	r2, [r3, #0]
 8003cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003e04 <CreateMessage+0x324>)
 8003cc8:	18d4      	adds	r4, r2, r3
 8003cca:	4b51      	ldr	r3, [pc, #324]	@ (8003e10 <CreateMessage+0x330>)
 8003ccc:	689d      	ldr	r5, [r3, #8]
 8003cce:	4b59      	ldr	r3, [pc, #356]	@ (8003e34 <CreateMessage+0x354>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	1c18      	adds	r0, r3, #0
 8003cd4:	f7ff fbbc 	bl	8003450 <__aeabi_f2d>
 8003cd8:	0002      	movs	r2, r0
 8003cda:	000b      	movs	r3, r1
 8003cdc:	4846      	ldr	r0, [pc, #280]	@ (8003df8 <CreateMessage+0x318>)
 8003cde:	4956      	ldr	r1, [pc, #344]	@ (8003e38 <CreateMessage+0x358>)
 8003ce0:	9202      	str	r2, [sp, #8]
 8003ce2:	9303      	str	r3, [sp, #12]
 8003ce4:	4b49      	ldr	r3, [pc, #292]	@ (8003e0c <CreateMessage+0x32c>)
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	0003      	movs	r3, r0
 8003cea:	002a      	movs	r2, r5
 8003cec:	0020      	movs	r0, r4
 8003cee:	f017 f97d 	bl	801afec <siprintf>
    index = strlen(message);
 8003cf2:	4b44      	ldr	r3, [pc, #272]	@ (8003e04 <CreateMessage+0x324>)
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7fc fa2f 	bl	8000158 <strlen>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	19bb      	adds	r3, r7, r6
 8003cfe:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d00:	4a3b      	ldr	r2, [pc, #236]	@ (8003df0 <CreateMessage+0x310>)
 8003d02:	4b42      	ldr	r3, [pc, #264]	@ (8003e0c <CreateMessage+0x32c>)
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7ff fec6 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d0c:	19bb      	adds	r3, r7, r6
 8003d0e:	881a      	ldrh	r2, [r3, #0]
 8003d10:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <CreateMessage+0x324>)
 8003d12:	18d4      	adds	r4, r2, r3
 8003d14:	4b3e      	ldr	r3, [pc, #248]	@ (8003e10 <CreateMessage+0x330>)
 8003d16:	689d      	ldr	r5, [r3, #8]
 8003d18:	4b48      	ldr	r3, [pc, #288]	@ (8003e3c <CreateMessage+0x35c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1c18      	adds	r0, r3, #0
 8003d1e:	f7ff fb97 	bl	8003450 <__aeabi_f2d>
 8003d22:	0002      	movs	r2, r0
 8003d24:	000b      	movs	r3, r1
 8003d26:	4834      	ldr	r0, [pc, #208]	@ (8003df8 <CreateMessage+0x318>)
 8003d28:	4945      	ldr	r1, [pc, #276]	@ (8003e40 <CreateMessage+0x360>)
 8003d2a:	9202      	str	r2, [sp, #8]
 8003d2c:	9303      	str	r3, [sp, #12]
 8003d2e:	4b37      	ldr	r3, [pc, #220]	@ (8003e0c <CreateMessage+0x32c>)
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	0003      	movs	r3, r0
 8003d34:	002a      	movs	r2, r5
 8003d36:	0020      	movs	r0, r4
 8003d38:	f017 f958 	bl	801afec <siprintf>
    index = strlen(message);
 8003d3c:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <CreateMessage+0x324>)
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7fc fa0a 	bl	8000158 <strlen>
 8003d44:	0002      	movs	r2, r0
 8003d46:	19bb      	adds	r3, r7, r6
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e025      	b.n	8003d98 <CreateMessage+0x2b8>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d4c:	4a26      	ldr	r2, [pc, #152]	@ (8003de8 <CreateMessage+0x308>)
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e0c <CreateMessage+0x32c>)
 8003d50:	0011      	movs	r1, r2
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7ff fea0 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d58:	260e      	movs	r6, #14
 8003d5a:	19bb      	adds	r3, r7, r6
 8003d5c:	881a      	ldrh	r2, [r3, #0]
 8003d5e:	4b29      	ldr	r3, [pc, #164]	@ (8003e04 <CreateMessage+0x324>)
 8003d60:	18d4      	adds	r4, r2, r3
 8003d62:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <CreateMessage+0x330>)
 8003d64:	689d      	ldr	r5, [r3, #8]
 8003d66:	4b33      	ldr	r3, [pc, #204]	@ (8003e34 <CreateMessage+0x354>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	1c18      	adds	r0, r3, #0
 8003d6c:	f7ff fb70 	bl	8003450 <__aeabi_f2d>
 8003d70:	0002      	movs	r2, r0
 8003d72:	000b      	movs	r3, r1
 8003d74:	4820      	ldr	r0, [pc, #128]	@ (8003df8 <CreateMessage+0x318>)
 8003d76:	4933      	ldr	r1, [pc, #204]	@ (8003e44 <CreateMessage+0x364>)
 8003d78:	9202      	str	r2, [sp, #8]
 8003d7a:	9303      	str	r3, [sp, #12]
 8003d7c:	4b23      	ldr	r3, [pc, #140]	@ (8003e0c <CreateMessage+0x32c>)
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	0003      	movs	r3, r0
 8003d82:	002a      	movs	r2, r5
 8003d84:	0020      	movs	r0, r4
 8003d86:	f017 f931 	bl	801afec <siprintf>
    index = strlen(message);
 8003d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e04 <CreateMessage+0x324>)
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7fc f9e3 	bl	8000158 <strlen>
 8003d92:	0002      	movs	r2, r0
 8003d94:	19bb      	adds	r3, r7, r6
 8003d96:	801a      	strh	r2, [r3, #0]
  }

  index = sprintf(&message[index], "]");
 8003d98:	240e      	movs	r4, #14
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <CreateMessage+0x324>)
 8003da0:	18d3      	adds	r3, r2, r3
 8003da2:	4a29      	ldr	r2, [pc, #164]	@ (8003e48 <CreateMessage+0x368>)
 8003da4:	0011      	movs	r1, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f017 f920 	bl	801afec <siprintf>
 8003dac:	0002      	movs	r2, r0
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003db2:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <CreateMessage+0x324>)
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7fc f9cf 	bl	8000158 <strlen>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	b29b      	uxth	r3, r3
}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b005      	add	sp, #20
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	2000097c 	.word	0x2000097c
 8003dcc:	0808000c 	.word	0x0808000c
 8003dd0:	20000988 	.word	0x20000988
 8003dd4:	08080018 	.word	0x08080018
 8003dd8:	20000994 	.word	0x20000994
 8003ddc:	08080048 	.word	0x08080048
 8003de0:	200009a0 	.word	0x200009a0
 8003de4:	08080030 	.word	0x08080030
 8003de8:	200009ac 	.word	0x200009ac
 8003dec:	0808006c 	.word	0x0808006c
 8003df0:	200009b8 	.word	0x200009b8
 8003df4:	08080078 	.word	0x08080078
 8003df8:	200009c4 	.word	0x200009c4
 8003dfc:	08080090 	.word	0x08080090
 8003e00:	0801efb0 	.word	0x0801efb0
 8003e04:	20000528 	.word	0x20000528
 8003e08:	0801e270 	.word	0x0801e270
 8003e0c:	200009e4 	.word	0x200009e4
 8003e10:	200004fc 	.word	0x200004fc
 8003e14:	20000510 	.word	0x20000510
 8003e18:	0801e274 	.word	0x0801e274
 8003e1c:	20000514 	.word	0x20000514
 8003e20:	0801e2c8 	.word	0x0801e2c8
 8003e24:	20000524 	.word	0x20000524
 8003e28:	0801e320 	.word	0x0801e320
 8003e2c:	20000520 	.word	0x20000520
 8003e30:	0801e378 	.word	0x0801e378
 8003e34:	20000518 	.word	0x20000518
 8003e38:	0801e3cc 	.word	0x0801e3cc
 8003e3c:	2000051c 	.word	0x2000051c
 8003e40:	0801e42c 	.word	0x0801e42c
 8003e44:	0801e488 	.word	0x0801e488
 8003e48:	0801e4e0 	.word	0x0801e4e0

08003e4c <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e50:	2064      	movs	r0, #100	@ 0x64
 8003e52:	f007 fb2f 	bl	800b4b4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e56:	4b15      	ldr	r3, [pc, #84]	@ (8003eac <StartProg+0x60>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f008 fd7e 	bl	800c95e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e62:	2064      	movs	r0, #100	@ 0x64
 8003e64:	f007 fb26 	bl	800b4b4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e68:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <StartProg+0x60>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f008 fd75 	bl	800c95e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e74:	23fa      	movs	r3, #250	@ 0xfa
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f007 fb1b 	bl	800b4b4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <StartProg+0x60>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	2101      	movs	r1, #1
 8003e84:	0018      	movs	r0, r3
 8003e86:	f008 fd6a 	bl	800c95e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e8a:	23fa      	movs	r3, #250	@ 0xfa
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f007 fb10 	bl	800b4b4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <StartProg+0x60>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	2102      	movs	r1, #2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f008 fd5f 	bl	800c95e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ea0:	2028      	movs	r0, #40	@ 0x28
 8003ea2:	f007 fb07 	bl	800b4b4 <HAL_Delay>
}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	50001c00 	.word	0x50001c00

08003eb0 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb2:	b0d1      	sub	sp, #324	@ 0x144
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	0008      	movs	r0, r1
 8003eba:	0011      	movs	r1, r2
 8003ebc:	4b9e      	ldr	r3, [pc, #632]	@ (8004138 <ParseBuffer+0x288>)
 8003ebe:	24a0      	movs	r4, #160	@ 0xa0
 8003ec0:	0064      	lsls	r4, r4, #1
 8003ec2:	191b      	adds	r3, r3, r4
 8003ec4:	19db      	adds	r3, r3, r7
 8003ec6:	1c02      	adds	r2, r0, #0
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	4b9c      	ldr	r3, [pc, #624]	@ (800413c <ParseBuffer+0x28c>)
 8003ecc:	191b      	adds	r3, r3, r4
 8003ece:	19db      	adds	r3, r3, r7
 8003ed0:	1c0a      	adds	r2, r1, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
  char tempBuf[250];
  memset(tempBuf, '\0', 250);
 8003ed4:	2330      	movs	r3, #48	@ 0x30
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	22fa      	movs	r2, #250	@ 0xfa
 8003eda:	2100      	movs	r1, #0
 8003edc:	0018      	movs	r0, r3
 8003ede:	f017 f929 	bl	801b134 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003ee2:	2340      	movs	r3, #64	@ 0x40
 8003ee4:	33ff      	adds	r3, #255	@ 0xff
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2203      	movs	r2, #3
 8003eea:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003eec:	239e      	movs	r3, #158	@ 0x9e
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	801a      	strh	r2, [r3, #0]
 8003ef6:	e013      	b.n	8003f20 <ParseBuffer+0x70>
    tempBuf[i] = (char)buffer[i];
 8003ef8:	209e      	movs	r0, #158	@ 0x9e
 8003efa:	0040      	lsls	r0, r0, #1
 8003efc:	183b      	adds	r3, r7, r0
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	18d2      	adds	r2, r2, r3
 8003f04:	183b      	adds	r3, r7, r0
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	7811      	ldrb	r1, [r2, #0]
 8003f0a:	4a8d      	ldr	r2, [pc, #564]	@ (8004140 <ParseBuffer+0x290>)
 8003f0c:	24a0      	movs	r4, #160	@ 0xa0
 8003f0e:	0064      	lsls	r4, r4, #1
 8003f10:	1912      	adds	r2, r2, r4
 8003f12:	19d2      	adds	r2, r2, r7
 8003f14:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003f16:	183b      	adds	r3, r7, r0
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	3201      	adds	r2, #1
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	239e      	movs	r3, #158	@ 0x9e
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	18fa      	adds	r2, r7, r3
 8003f26:	4b84      	ldr	r3, [pc, #528]	@ (8004138 <ParseBuffer+0x288>)
 8003f28:	25a0      	movs	r5, #160	@ 0xa0
 8003f2a:	006d      	lsls	r5, r5, #1
 8003f2c:	195b      	adds	r3, r3, r5
 8003f2e:	19db      	adds	r3, r3, r7
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d3df      	bcc.n	8003ef8 <ParseBuffer+0x48>
  }
  tempBuf[len] = '\0';
 8003f38:	4b7f      	ldr	r3, [pc, #508]	@ (8004138 <ParseBuffer+0x288>)
 8003f3a:	195b      	adds	r3, r3, r5
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	4a7f      	ldr	r2, [pc, #508]	@ (8004140 <ParseBuffer+0x290>)
 8003f42:	1952      	adds	r2, r2, r5
 8003f44:	19d2      	adds	r2, r2, r7
 8003f46:	2100      	movs	r1, #0
 8003f48:	54d1      	strb	r1, [r2, r3]
  char * ParsePoint = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	269c      	movs	r6, #156	@ 0x9c
 8003f4e:	0076      	lsls	r6, r6, #1
 8003f50:	19ba      	adds	r2, r7, r6
 8003f52:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f54:	4b7b      	ldr	r3, [pc, #492]	@ (8004144 <ParseBuffer+0x294>)
 8003f56:	195b      	adds	r3, r3, r5
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	4a7b      	ldr	r2, [pc, #492]	@ (8004148 <ParseBuffer+0x298>)
 8003f5c:	8811      	ldrh	r1, [r2, #0]
 8003f5e:	8019      	strh	r1, [r3, #0]
 8003f60:	7892      	ldrb	r2, [r2, #2]
 8003f62:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f64:	4b79      	ldr	r3, [pc, #484]	@ (800414c <ParseBuffer+0x29c>)
 8003f66:	195b      	adds	r3, r3, r5
 8003f68:	19db      	adds	r3, r3, r7
 8003f6a:	4a79      	ldr	r2, [pc, #484]	@ (8004150 <ParseBuffer+0x2a0>)
 8003f6c:	6811      	ldr	r1, [r2, #0]
 8003f6e:	6019      	str	r1, [r3, #0]
 8003f70:	8892      	ldrh	r2, [r2, #4]
 8003f72:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003f74:	4b77      	ldr	r3, [pc, #476]	@ (8004154 <ParseBuffer+0x2a4>)
 8003f76:	195b      	adds	r3, r3, r5
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	4a77      	ldr	r2, [pc, #476]	@ (8004158 <ParseBuffer+0x2a8>)
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	8892      	ldrh	r2, [r2, #4]
 8003f82:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003f84:	4b75      	ldr	r3, [pc, #468]	@ (800415c <ParseBuffer+0x2ac>)
 8003f86:	195b      	adds	r3, r3, r5
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	223e      	movs	r2, #62	@ 0x3e
 8003f8c:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003f8e:	4b74      	ldr	r3, [pc, #464]	@ (8004160 <ParseBuffer+0x2b0>)
 8003f90:	195b      	adds	r3, r3, r5
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	4a73      	ldr	r2, [pc, #460]	@ (8004164 <ParseBuffer+0x2b4>)
 8003f96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f98:	c313      	stmia	r3!, {r0, r1, r4}
 8003f9a:	8811      	ldrh	r1, [r2, #0]
 8003f9c:	8019      	strh	r1, [r3, #0]
 8003f9e:	7892      	ldrb	r2, [r2, #2]
 8003fa0:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003fa2:	4b66      	ldr	r3, [pc, #408]	@ (800413c <ParseBuffer+0x28c>)
 8003fa4:	195b      	adds	r3, r3, r5
 8003fa6:	19db      	adds	r3, r3, r7
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <ParseBuffer+0x114>
    ParsePoint = strstr(tempBuf, OK);
 8003fae:	232c      	movs	r3, #44	@ 0x2c
 8003fb0:	18fa      	adds	r2, r7, r3
 8003fb2:	2330      	movs	r3, #48	@ 0x30
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	0011      	movs	r1, r2
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f017 f8f6 	bl	801b1aa <strstr>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	19ba      	adds	r2, r7, r6
 8003fc2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003fc4:	4b5d      	ldr	r3, [pc, #372]	@ (800413c <ParseBuffer+0x28c>)
 8003fc6:	22a0      	movs	r2, #160	@ 0xa0
 8003fc8:	0052      	lsls	r2, r2, #1
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d10c      	bne.n	8003fee <ParseBuffer+0x13e>
    ParsePoint = strstr(tempBuf, ready);
 8003fd4:	231c      	movs	r3, #28
 8003fd6:	18fa      	adds	r2, r7, r3
 8003fd8:	2330      	movs	r3, #48	@ 0x30
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f017 f8e3 	bl	801b1aa <strstr>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	229c      	movs	r2, #156	@ 0x9c
 8003fe8:	0052      	lsls	r2, r2, #1
 8003fea:	18ba      	adds	r2, r7, r2
 8003fec:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003fee:	4b53      	ldr	r3, [pc, #332]	@ (800413c <ParseBuffer+0x28c>)
 8003ff0:	22a0      	movs	r2, #160	@ 0xa0
 8003ff2:	0052      	lsls	r2, r2, #1
 8003ff4:	189b      	adds	r3, r3, r2
 8003ff6:	19db      	adds	r3, r3, r7
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d10c      	bne.n	8004018 <ParseBuffer+0x168>
    ParsePoint = strstr(tempBuf, start);
 8003ffe:	2318      	movs	r3, #24
 8004000:	18fa      	adds	r2, r7, r3
 8004002:	2330      	movs	r3, #48	@ 0x30
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	0011      	movs	r1, r2
 8004008:	0018      	movs	r0, r3
 800400a:	f017 f8ce 	bl	801b1aa <strstr>
 800400e:	0003      	movs	r3, r0
 8004010:	229c      	movs	r2, #156	@ 0x9c
 8004012:	0052      	lsls	r2, r2, #1
 8004014:	18ba      	adds	r2, r7, r2
 8004016:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004018:	2324      	movs	r3, #36	@ 0x24
 800401a:	18fa      	adds	r2, r7, r3
 800401c:	2430      	movs	r4, #48	@ 0x30
 800401e:	193b      	adds	r3, r7, r4
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f017 f8c1 	bl	801b1aa <strstr>
 8004028:	0003      	movs	r3, r0
 800402a:	229a      	movs	r2, #154	@ 0x9a
 800402c:	0052      	lsls	r2, r2, #1
 800402e:	18ba      	adds	r2, r7, r2
 8004030:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004032:	2308      	movs	r3, #8
 8004034:	18fa      	adds	r2, r7, r3
 8004036:	193b      	adds	r3, r7, r4
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f017 f8b5 	bl	801b1aa <strstr>
 8004040:	0003      	movs	r3, r0
 8004042:	2298      	movs	r2, #152	@ 0x98
 8004044:	0052      	lsls	r2, r2, #1
 8004046:	18ba      	adds	r2, r7, r2
 8004048:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 800404a:	4a47      	ldr	r2, [pc, #284]	@ (8004168 <ParseBuffer+0x2b8>)
 800404c:	193b      	adds	r3, r7, r4
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f017 f8aa 	bl	801b1aa <strstr>
 8004056:	0003      	movs	r3, r0
 8004058:	2296      	movs	r2, #150	@ 0x96
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	18ba      	adds	r2, r7, r2
 800405e:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004060:	4b35      	ldr	r3, [pc, #212]	@ (8004138 <ParseBuffer+0x288>)
 8004062:	22a0      	movs	r2, #160	@ 0xa0
 8004064:	0052      	lsls	r2, r2, #1
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d95b      	bls.n	8004128 <ParseBuffer+0x278>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004070:	229c      	movs	r2, #156	@ 0x9c
 8004072:	0052      	lsls	r2, r2, #1
 8004074:	18bb      	adds	r3, r7, r2
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <ParseBuffer+0x1e0>
 800407c:	18bb      	adds	r3, r7, r2
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b4f      	cmp	r3, #79	@ 0x4f
 8004084:	d104      	bne.n	8004090 <ParseBuffer+0x1e0>
      status = RECEIVE_STATUS_OK;
 8004086:	2340      	movs	r3, #64	@ 0x40
 8004088:	33ff      	adds	r3, #255	@ 0xff
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == 'r'){
 8004090:	229c      	movs	r2, #156	@ 0x9c
 8004092:	0052      	lsls	r2, r2, #1
 8004094:	18bb      	adds	r3, r7, r2
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <ParseBuffer+0x200>
 800409c:	18bb      	adds	r3, r7, r2
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b72      	cmp	r3, #114	@ 0x72
 80040a4:	d104      	bne.n	80040b0 <ParseBuffer+0x200>
      status = RECEIVE_STATUS_READY;
 80040a6:	2340      	movs	r3, #64	@ 0x40
 80040a8:	33ff      	adds	r3, #255	@ 0xff
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	2202      	movs	r2, #2
 80040ae:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>'){
 80040b0:	229c      	movs	r2, #156	@ 0x9c
 80040b2:	0052      	lsls	r2, r2, #1
 80040b4:	18bb      	adds	r3, r7, r2
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <ParseBuffer+0x220>
 80040bc:	18bb      	adds	r3, r7, r2
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80040c4:	d104      	bne.n	80040d0 <ParseBuffer+0x220>
      status = RECEIVE_STATUS_START;
 80040c6:	2340      	movs	r3, #64	@ 0x40
 80040c8:	33ff      	adds	r3, #255	@ 0xff
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	2205      	movs	r2, #5
 80040ce:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint2 != 0 && *ParsePoint2 == 'E'){
 80040d0:	229a      	movs	r2, #154	@ 0x9a
 80040d2:	0052      	lsls	r2, r2, #1
 80040d4:	18bb      	adds	r3, r7, r2
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <ParseBuffer+0x240>
 80040dc:	18bb      	adds	r3, r7, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b45      	cmp	r3, #69	@ 0x45
 80040e4:	d104      	bne.n	80040f0 <ParseBuffer+0x240>
      status = RECEIVE_STATUS_ERROR;
 80040e6:	2340      	movs	r3, #64	@ 0x40
 80040e8:	33ff      	adds	r3, #255	@ 0xff
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80040f0:	2298      	movs	r2, #152	@ 0x98
 80040f2:	0052      	lsls	r2, r2, #1
 80040f4:	18bb      	adds	r3, r7, r2
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <ParseBuffer+0x25c>
 80040fc:	18bb      	adds	r3, r7, r2
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b57      	cmp	r3, #87	@ 0x57
 8004104:	d102      	bne.n	800410c <ParseBuffer+0x25c>
      ConnectionMade = true;
 8004106:	4b19      	ldr	r3, [pc, #100]	@ (800416c <ParseBuffer+0x2bc>)
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800410c:	2296      	movs	r2, #150	@ 0x96
 800410e:	0052      	lsls	r2, r2, #1
 8004110:	18bb      	adds	r3, r7, r2
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <ParseBuffer+0x278>
 8004118:	18bb      	adds	r3, r7, r2
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b32      	cmp	r3, #50	@ 0x32
 8004120:	d102      	bne.n	8004128 <ParseBuffer+0x278>
      beurs = true;
 8004122:	4b13      	ldr	r3, [pc, #76]	@ (8004170 <ParseBuffer+0x2c0>)
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004128:	2340      	movs	r3, #64	@ 0x40
 800412a:	33ff      	adds	r3, #255	@ 0xff
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	781b      	ldrb	r3, [r3, #0]

}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b051      	add	sp, #324	@ 0x144
 8004136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004138:	fffffec2 	.word	0xfffffec2
 800413c:	fffffec1 	.word	0xfffffec1
 8004140:	fffffef0 	.word	0xfffffef0
 8004144:	fffffeec 	.word	0xfffffeec
 8004148:	0801e4e4 	.word	0x0801e4e4
 800414c:	fffffee4 	.word	0xfffffee4
 8004150:	0801e4e8 	.word	0x0801e4e8
 8004154:	fffffedc 	.word	0xfffffedc
 8004158:	0801e4f0 	.word	0x0801e4f0
 800415c:	fffffed8 	.word	0xfffffed8
 8004160:	fffffec8 	.word	0xfffffec8
 8004164:	0801e4f8 	.word	0x0801e4f8
 8004168:	0801ef94 	.word	0x0801ef94
 800416c:	200004f7 	.word	0x200004f7
 8004170:	200004f9 	.word	0x200004f9

08004174 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800417a:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <PollAwake+0x34>)
 800417c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	f7fb ffe9 	bl	8000158 <strlen>
 8004186:	0003      	movs	r3, r0
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0011      	movs	r1, r2
 800418e:	0018      	movs	r0, r3
 8004190:	f7ff fbf4 	bl	800397c <ESP_Send>
 8004194:	1e03      	subs	r3, r0, #0
 8004196:	d001      	beq.n	800419c <PollAwake+0x28>
    return true;
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <PollAwake+0x2a>
  }
  else{
    return false;
 800419c:	2300      	movs	r3, #0
  }
}
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b002      	add	sp, #8
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	0801e508 	.word	0x0801e508

080041ac <RFPower>:
bool RFPower(){
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80041b2:	4b0b      	ldr	r3, [pc, #44]	@ (80041e0 <RFPower+0x34>)
 80041b4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7fb ffcd 	bl	8000158 <strlen>
 80041be:	0003      	movs	r3, r0
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7ff fbd8 	bl	800397c <ESP_Send>
 80041cc:	1e03      	subs	r3, r0, #0
 80041ce:	d001      	beq.n	80041d4 <RFPower+0x28>
    return true;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <RFPower+0x2a>
  }
  else{
    return false;
 80041d4:	2300      	movs	r3, #0
  }
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b002      	add	sp, #8
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	0801e510 	.word	0x0801e510

080041e4 <CheckRFPower>:
bool CheckRFPower(){
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80041ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <CheckRFPower+0x34>)
 80041ec:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fb ffb1 	bl	8000158 <strlen>
 80041f6:	0003      	movs	r3, r0
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0011      	movs	r1, r2
 80041fe:	0018      	movs	r0, r3
 8004200:	f7ff fbbc 	bl	800397c <ESP_Send>
 8004204:	1e03      	subs	r3, r0, #0
 8004206:	d001      	beq.n	800420c <CheckRFPower+0x28>
    return true;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800420c:	2300      	movs	r3, #0
  }
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b002      	add	sp, #8
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	0801e520 	.word	0x0801e520

0800421c <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004222:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <ATRestore+0x34>)
 8004224:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0018      	movs	r0, r3
 800422a:	f7fb ff95 	bl	8000158 <strlen>
 800422e:	0003      	movs	r3, r0
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff fba0 	bl	800397c <ESP_Send>
 800423c:	1e03      	subs	r3, r0, #0
 800423e:	d001      	beq.n	8004244 <ATRestore+0x28>
    return true;
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <ATRestore+0x2a>
  }
  else{
    return false;
 8004244:	2300      	movs	r3, #0
  }
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b002      	add	sp, #8
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	0801e530 	.word	0x0801e530

08004254 <CWINIT>:
bool CWINIT(){
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800425a:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <CWINIT+0x34>)
 800425c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f7fb ff79 	bl	8000158 <strlen>
 8004266:	0003      	movs	r3, r0
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	0011      	movs	r1, r2
 800426e:	0018      	movs	r0, r3
 8004270:	f7ff fb84 	bl	800397c <ESP_Send>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d001      	beq.n	800427c <CWINIT+0x28>
    return true;
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <CWINIT+0x2a>
  }
  else{
    return false;
 800427c:	2300      	movs	r3, #0
  }
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	0801e540 	.word	0x0801e540

0800428c <CWMODE1>:
bool CWMODE1(){
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004292:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <CWMODE1+0x34>)
 8004294:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f7fb ff5d 	bl	8000158 <strlen>
 800429e:	0003      	movs	r3, r0
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff fb68 	bl	800397c <ESP_Send>
 80042ac:	1e03      	subs	r3, r0, #0
 80042ae:	d001      	beq.n	80042b4 <CWMODE1+0x28>
    return true;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80042b4:	2300      	movs	r3, #0
  }
}
 80042b6:	0018      	movs	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b002      	add	sp, #8
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	0801e550 	.word	0x0801e550

080042c4 <CWMODE2>:
bool CWMODE2(){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80042ca:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <CWMODE2+0x34>)
 80042cc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7fb ff41 	bl	8000158 <strlen>
 80042d6:	0003      	movs	r3, r0
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0011      	movs	r1, r2
 80042de:	0018      	movs	r0, r3
 80042e0:	f7ff fb4c 	bl	800397c <ESP_Send>
 80042e4:	1e03      	subs	r3, r0, #0
 80042e6:	d001      	beq.n	80042ec <CWMODE2+0x28>
    return true;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <CWMODE2+0x2a>
  }
  else{
    return false;
 80042ec:	2300      	movs	r3, #0
  }
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	0801e560 	.word	0x0801e560

080042fc <CWAUTOCONN>:
bool CWAUTOCONN(){
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004302:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <CWAUTOCONN+0x34>)
 8004304:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0018      	movs	r0, r3
 800430a:	f7fb ff25 	bl	8000158 <strlen>
 800430e:	0003      	movs	r3, r0
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0011      	movs	r1, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff fb30 	bl	800397c <ESP_Send>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d001      	beq.n	8004324 <CWAUTOCONN+0x28>
    return true;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004324:	2300      	movs	r3, #0
  }
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	0801e570 	.word	0x0801e570

08004334 <CWJAP>:
bool CWJAP(){
 8004334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004336:	46c6      	mov	lr, r8
 8004338:	b500      	push	{lr}
 800433a:	b0a2      	sub	sp, #136	@ 0x88
 800433c:	af00      	add	r7, sp, #0
 800433e:	466b      	mov	r3, sp
 8004340:	4698      	mov	r8, r3
  beursTest = true;
 8004342:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <CWJAP+0xf4>)
 8004344:	2201      	movs	r2, #1
 8004346:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004348:	2618      	movs	r6, #24
 800434a:	19bb      	adds	r3, r7, r6
 800434c:	2264      	movs	r2, #100	@ 0x64
 800434e:	2100      	movs	r1, #0
 8004350:	0018      	movs	r0, r3
 8004352:	f016 feef 	bl	801b134 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004356:	4b35      	ldr	r3, [pc, #212]	@ (800442c <CWJAP+0xf8>)
 8004358:	4a35      	ldr	r2, [pc, #212]	@ (8004430 <CWJAP+0xfc>)
 800435a:	4936      	ldr	r1, [pc, #216]	@ (8004434 <CWJAP+0x100>)
 800435c:	19b8      	adds	r0, r7, r6
 800435e:	f016 fe45 	bl	801afec <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004362:	19bb      	adds	r3, r7, r6
 8004364:	0018      	movs	r0, r3
 8004366:	f7fb fef7 	bl	8000158 <strlen>
 800436a:	0002      	movs	r2, r0
 800436c:	216f      	movs	r1, #111	@ 0x6f
 800436e:	0030      	movs	r0, r6
 8004370:	180b      	adds	r3, r1, r0
 8004372:	19db      	adds	r3, r3, r7
 8004374:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004376:	180b      	adds	r3, r1, r0
 8004378:	19db      	adds	r3, r3, r7
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	2180      	movs	r1, #128	@ 0x80
 8004382:	1879      	adds	r1, r7, r1
 8004384:	600a      	str	r2, [r1, #0]
 8004386:	001a      	movs	r2, r3
 8004388:	60ba      	str	r2, [r7, #8]
 800438a:	2200      	movs	r2, #0
 800438c:	60fa      	str	r2, [r7, #12]
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	0002      	movs	r2, r0
 8004394:	0f52      	lsrs	r2, r2, #29
 8004396:	000e      	movs	r6, r1
 8004398:	00f6      	lsls	r6, r6, #3
 800439a:	617e      	str	r6, [r7, #20]
 800439c:	697e      	ldr	r6, [r7, #20]
 800439e:	4316      	orrs	r6, r2
 80043a0:	617e      	str	r6, [r7, #20]
 80043a2:	0002      	movs	r2, r0
 80043a4:	00d2      	lsls	r2, r2, #3
 80043a6:	613a      	str	r2, [r7, #16]
 80043a8:	001a      	movs	r2, r3
 80043aa:	603a      	str	r2, [r7, #0]
 80043ac:	2200      	movs	r2, #0
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	6838      	ldr	r0, [r7, #0]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	0002      	movs	r2, r0
 80043b6:	0f52      	lsrs	r2, r2, #29
 80043b8:	000e      	movs	r6, r1
 80043ba:	00f5      	lsls	r5, r6, #3
 80043bc:	4315      	orrs	r5, r2
 80043be:	0002      	movs	r2, r0
 80043c0:	00d4      	lsls	r4, r2, #3
 80043c2:	3307      	adds	r3, #7
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	466a      	mov	r2, sp
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	469d      	mov	sp, r3
 80043ce:	466b      	mov	r3, sp
 80043d0:	3300      	adds	r3, #0
 80043d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80043d4:	246f      	movs	r4, #111	@ 0x6f
 80043d6:	2518      	movs	r5, #24
 80043d8:	1963      	adds	r3, r4, r5
 80043da:	19db      	adds	r3, r3, r7
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	001a      	movs	r2, r3
 80043e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043e4:	2100      	movs	r1, #0
 80043e6:	0018      	movs	r0, r3
 80043e8:	f016 fea4 	bl	801b134 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80043ec:	1963      	adds	r3, r4, r5
 80043ee:	19db      	adds	r3, r3, r7
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	1979      	adds	r1, r7, r5
 80043f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043f6:	0018      	movs	r0, r3
 80043f8:	f016 fec3 	bl	801b182 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80043fc:	1963      	adds	r3, r4, r5
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b29a      	uxth	r2, r3
 8004404:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004406:	0011      	movs	r1, r2
 8004408:	0018      	movs	r0, r3
 800440a:	f7ff fab7 	bl	800397c <ESP_Send>
 800440e:	1e03      	subs	r3, r0, #0
 8004410:	d001      	beq.n	8004416 <CWJAP+0xe2>
    return true;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <CWJAP+0xe4>
  }
  else{
    return false;
 8004416:	2300      	movs	r3, #0
 8004418:	46c5      	mov	sp, r8
  }
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b022      	add	sp, #136	@ 0x88
 8004420:	bc80      	pop	{r7}
 8004422:	46b8      	mov	r8, r7
 8004424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	200004f8 	.word	0x200004f8
 800442c:	0801efa0 	.word	0x0801efa0
 8004430:	0801ef94 	.word	0x0801ef94
 8004434:	0801e584 	.word	0x0801e584

08004438 <CWMODE3>:
bool CWMODE3(){
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800443e:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <CWMODE3+0x34>)
 8004440:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0018      	movs	r0, r3
 8004446:	f7fb fe87 	bl	8000158 <strlen>
 800444a:	0003      	movs	r3, r0
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0011      	movs	r1, r2
 8004452:	0018      	movs	r0, r3
 8004454:	f7ff fa92 	bl	800397c <ESP_Send>
 8004458:	1e03      	subs	r3, r0, #0
 800445a:	d001      	beq.n	8004460 <CWMODE3+0x28>
    return true;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004460:	2300      	movs	r3, #0
  }
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	b002      	add	sp, #8
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	0801e59c 	.word	0x0801e59c

08004470 <CWSTATE>:
bool CWSTATE(){
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <CWSTATE+0x34>)
 8004478:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f7fb fe6b 	bl	8000158 <strlen>
 8004482:	0003      	movs	r3, r0
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0011      	movs	r1, r2
 800448a:	0018      	movs	r0, r3
 800448c:	f7ff fa76 	bl	800397c <ESP_Send>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d001      	beq.n	8004498 <CWSTATE+0x28>
    return true;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004498:	2300      	movs	r3, #0
  }
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b002      	add	sp, #8
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	0801e5ac 	.word	0x0801e5ac

080044a8 <CWSAP>:
bool CWSAP(){
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80044ae:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <CWSAP+0x34>)
 80044b0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fb fe4f 	bl	8000158 <strlen>
 80044ba:	0003      	movs	r3, r0
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0011      	movs	r1, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7ff fa5a 	bl	800397c <ESP_Send>
 80044c8:	1e03      	subs	r3, r0, #0
 80044ca:	d001      	beq.n	80044d0 <CWSAP+0x28>
    return true;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <CWSAP+0x2a>
  }
  else{
    return false;
 80044d0:	2300      	movs	r3, #0
  }
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	0801e5bc 	.word	0x0801e5bc

080044e0 <CIPMUX>:
bool CIPMUX(){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80044e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <CIPMUX+0x34>)
 80044e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fb fe33 	bl	8000158 <strlen>
 80044f2:	0003      	movs	r3, r0
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0011      	movs	r1, r2
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7ff fa3e 	bl	800397c <ESP_Send>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d001      	beq.n	8004508 <CIPMUX+0x28>
    return true;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <CIPMUX+0x2a>
  }
  else{
    return false;
 8004508:	2300      	movs	r3, #0
  }
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	0801e5e0 	.word	0x0801e5e0

08004518 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800451e:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <WEBSERVER+0x34>)
 8004520:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7fb fe17 	bl	8000158 <strlen>
 800452a:	0003      	movs	r3, r0
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff fa22 	bl	800397c <ESP_Send>
 8004538:	1e03      	subs	r3, r0, #0
 800453a:	d001      	beq.n	8004540 <WEBSERVER+0x28>
    return true;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004540:	2300      	movs	r3, #0
  }
}
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b002      	add	sp, #8
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	0801e5f0 	.word	0x0801e5f0

08004550 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b0c5      	sub	sp, #276	@ 0x114
 8004554:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	005a      	lsls	r2, r3, #1
 800455a:	1d3b      	adds	r3, r7, #4
 800455c:	2100      	movs	r1, #0
 800455e:	0018      	movs	r0, r3
 8004560:	f016 fde8 	bl	801b134 <memset>
  uint16_t length = CreateMessage(beurs);
 8004564:	4b22      	ldr	r3, [pc, #136]	@ (80045f0 <HTTPCPOST+0xa0>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	1dfc      	adds	r4, r7, #7
 800456a:	34ff      	adds	r4, #255	@ 0xff
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff fab7 	bl	8003ae0 <CreateMessage>
 8004572:	0003      	movs	r3, r0
 8004574:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004576:	4b1e      	ldr	r3, [pc, #120]	@ (80045f0 <HTTPCPOST+0xa0>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 800457e:	1dfb      	adds	r3, r7, #7
 8004580:	33ff      	adds	r3, #255	@ 0xff
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	4a1b      	ldr	r2, [pc, #108]	@ (80045f4 <HTTPCPOST+0xa4>)
 8004586:	491c      	ldr	r1, [pc, #112]	@ (80045f8 <HTTPCPOST+0xa8>)
 8004588:	1d38      	adds	r0, r7, #4
 800458a:	f016 fd2f 	bl	801afec <siprintf>
 800458e:	e016      	b.n	80045be <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004590:	4b1a      	ldr	r3, [pc, #104]	@ (80045fc <HTTPCPOST+0xac>)
 8004592:	481b      	ldr	r0, [pc, #108]	@ (8004600 <HTTPCPOST+0xb0>)
 8004594:	220c      	movs	r2, #12
 8004596:	0019      	movs	r1, r3
 8004598:	f7ff f8a4 	bl	80036e4 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800459c:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <HTTPCPOST+0xac>)
 800459e:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <HTTPCPOST+0xb4>)
 80045a0:	0011      	movs	r1, r2
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff fa78 	bl	8003a98 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80045a8:	1dfb      	adds	r3, r7, #7
 80045aa:	33ff      	adds	r3, #255	@ 0xff
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	4c15      	ldr	r4, [pc, #84]	@ (8004604 <HTTPCPOST+0xb4>)
 80045b0:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <HTTPCPOST+0xb8>)
 80045b2:	4916      	ldr	r1, [pc, #88]	@ (800460c <HTTPCPOST+0xbc>)
 80045b4:	1d38      	adds	r0, r7, #4
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	0023      	movs	r3, r4
 80045ba:	f016 fd17 	bl	801afec <siprintf>
  }
    uint16_t len = strlen(atCommandBuff);
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fb fdc9 	bl	8000158 <strlen>
 80045c6:	0002      	movs	r2, r0
 80045c8:	1d7b      	adds	r3, r7, #5
 80045ca:	33ff      	adds	r3, #255	@ 0xff
 80045cc:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 80045ce:	1d7b      	adds	r3, r7, #5
 80045d0:	33ff      	adds	r3, #255	@ 0xff
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	0011      	movs	r1, r2
 80045d8:	0018      	movs	r0, r3
 80045da:	f7ff f9cf 	bl	800397c <ESP_Send>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d001      	beq.n	80045e6 <HTTPCPOST+0x96>
    return true;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HTTPCPOST+0x98>
  }
  else{
    return false;
 80045e6:	2300      	movs	r3, #0
  }
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b043      	add	sp, #268	@ 0x10c
 80045ee:	bd90      	pop	{r4, r7, pc}
 80045f0:	200004f9 	.word	0x200004f9
 80045f4:	0801efb8 	.word	0x0801efb8
 80045f8:	0801e608 	.word	0x0801e608
 80045fc:	20000a00 	.word	0x20000a00
 8004600:	08080000 	.word	0x08080000
 8004604:	20000a0c 	.word	0x20000a0c
 8004608:	0801eff4 	.word	0x0801eff4
 800460c:	0801e640 	.word	0x0801e640

08004610 <SENDDATA>:
bool SENDDATA(){
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004616:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <SENDDATA+0x40>)
 8004618:	0018      	movs	r0, r3
 800461a:	f7fb fd9d 	bl	8000158 <strlen>
 800461e:	0002      	movs	r2, r0
 8004620:	1dbb      	adds	r3, r7, #6
 8004622:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004624:	1dbb      	adds	r3, r7, #6
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <SENDDATA+0x40>)
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f7ff f9a5 	bl	800397c <ESP_Send>
 8004632:	1e03      	subs	r3, r0, #0
 8004634:	d007      	beq.n	8004646 <SENDDATA+0x36>
    printf("message: %s\r\n", message);
 8004636:	4a06      	ldr	r2, [pc, #24]	@ (8004650 <SENDDATA+0x40>)
 8004638:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <SENDDATA+0x44>)
 800463a:	0011      	movs	r1, r2
 800463c:	0018      	movs	r0, r3
 800463e:	f016 fcc5 	bl	801afcc <iprintf>
    return true;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <SENDDATA+0x38>
  }
  else{
    return false;
 8004646:	2300      	movs	r3, #0
  }
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b002      	add	sp, #8
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000528 	.word	0x20000528
 8004654:	0801e680 	.word	0x0801e680

08004658 <SLEEP>:
bool SLEEP(){
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800465e:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <SLEEP+0x34>)
 8004660:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f7fb fd77 	bl	8000158 <strlen>
 800466a:	0003      	movs	r3, r0
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0011      	movs	r1, r2
 8004672:	0018      	movs	r0, r3
 8004674:	f7ff f982 	bl	800397c <ESP_Send>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d001      	beq.n	8004680 <SLEEP+0x28>
    return true;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <SLEEP+0x2a>
  }
  else{
    return false;
 8004680:	2300      	movs	r3, #0
  }
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b002      	add	sp, #8
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	0801e690 	.word	0x0801e690

08004690 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004690:	b5b0      	push	{r4, r5, r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	0002      	movs	r2, r0
 8004698:	1dfb      	adds	r3, r7, #7
 800469a:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 800469c:	4b61      	ldr	r3, [pc, #388]	@ (8004824 <DMA_ProcessBuffer+0x194>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	210e      	movs	r1, #14
 80046a6:	187b      	adds	r3, r7, r1
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 80046ac:	200f      	movs	r0, #15
 80046ae:	183b      	adds	r3, r7, r0
 80046b0:	2203      	movs	r2, #3
 80046b2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 80046b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	187a      	adds	r2, r7, r1
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d130      	bne.n	8004724 <DMA_ProcessBuffer+0x94>
      if(retry >4){
 80046c2:	4b5a      	ldr	r3, [pc, #360]	@ (800482c <DMA_ProcessBuffer+0x19c>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d91a      	bls.n	8004700 <DMA_ProcessBuffer+0x70>
        retry = 0;
 80046ca:	4b58      	ldr	r3, [pc, #352]	@ (800482c <DMA_ProcessBuffer+0x19c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80046d0:	4b57      	ldr	r3, [pc, #348]	@ (8004830 <DMA_ProcessBuffer+0x1a0>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <DMA_ProcessBuffer+0x56>
 80046d8:	4b56      	ldr	r3, [pc, #344]	@ (8004834 <DMA_ProcessBuffer+0x1a4>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 80046e0:	183b      	adds	r3, r7, r0
 80046e2:	2207      	movs	r2, #7
 80046e4:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80046e6:	4b52      	ldr	r3, [pc, #328]	@ (8004830 <DMA_ProcessBuffer+0x1a0>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d103      	bne.n	80046f6 <DMA_ProcessBuffer+0x66>
          EspState = ESP_STATE_MODE_SELECT;
 80046ee:	4b52      	ldr	r3, [pc, #328]	@ (8004838 <DMA_ProcessBuffer+0x1a8>)
 80046f0:	220b      	movs	r2, #11
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	e016      	b.n	8004724 <DMA_ProcessBuffer+0x94>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80046f6:	230f      	movs	r3, #15
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	2206      	movs	r2, #6
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	e011      	b.n	8004724 <DMA_ProcessBuffer+0x94>
        }
      }
     else{
       retry ++;
 8004700:	4b4a      	ldr	r3, [pc, #296]	@ (800482c <DMA_ProcessBuffer+0x19c>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b48      	ldr	r3, [pc, #288]	@ (800482c <DMA_ProcessBuffer+0x19c>)
 800470a:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800470c:	f006 fec8 	bl	800b4a0 <HAL_GetTick>
 8004710:	0003      	movs	r3, r0
 8004712:	33f5      	adds	r3, #245	@ 0xf5
 8004714:	33ff      	adds	r3, #255	@ 0xff
 8004716:	001a      	movs	r2, r3
 8004718:	4b48      	ldr	r3, [pc, #288]	@ (800483c <DMA_ProcessBuffer+0x1ac>)
 800471a:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 800471c:	230f      	movs	r3, #15
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2204      	movs	r2, #4
 8004722:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004724:	4b40      	ldr	r3, [pc, #256]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	210e      	movs	r1, #14
 800472c:	187a      	adds	r2, r7, r1
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d070      	beq.n	8004816 <DMA_ProcessBuffer+0x186>
      retry = 0;
 8004734:	4b3d      	ldr	r3, [pc, #244]	@ (800482c <DMA_ProcessBuffer+0x19c>)
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 800473a:	4b41      	ldr	r3, [pc, #260]	@ (8004840 <DMA_ProcessBuffer+0x1b0>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2da      	uxtb	r2, r3
 8004740:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	429a      	cmp	r2, r3
 8004748:	d108      	bne.n	800475c <DMA_ProcessBuffer+0xcc>
        TempPos = pos;
 800474a:	4b3d      	ldr	r3, [pc, #244]	@ (8004840 <DMA_ProcessBuffer+0x1b0>)
 800474c:	187a      	adds	r2, r7, r1
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004752:	230f      	movs	r3, #15
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	220a      	movs	r2, #10
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e05c      	b.n	8004816 <DMA_ProcessBuffer+0x186>
      }
      else{
        if(TempPos != pos){
 800475c:	4b38      	ldr	r3, [pc, #224]	@ (8004840 <DMA_ProcessBuffer+0x1b0>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	210e      	movs	r1, #14
 8004764:	187a      	adds	r2, r7, r1
 8004766:	7812      	ldrb	r2, [r2, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d008      	beq.n	800477e <DMA_ProcessBuffer+0xee>
          TempPos = pos;
 800476c:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <DMA_ProcessBuffer+0x1b0>)
 800476e:	187a      	adds	r2, r7, r1
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004774:	230f      	movs	r3, #15
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	220a      	movs	r2, #10
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e04b      	b.n	8004816 <DMA_ProcessBuffer+0x186>
        }
        else{
          if (pos > OldPos) {
 800477e:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	210e      	movs	r1, #14
 8004786:	187a      	adds	r2, r7, r1
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d917      	bls.n	80047be <DMA_ProcessBuffer+0x12e>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800478e:	4b26      	ldr	r3, [pc, #152]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	001a      	movs	r2, r3
 8004796:	4b2b      	ldr	r3, [pc, #172]	@ (8004844 <DMA_ProcessBuffer+0x1b4>)
 8004798:	18d0      	adds	r0, r2, r3
 800479a:	187b      	adds	r3, r7, r1
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4a21      	ldr	r2, [pc, #132]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 80047a2:	7812      	ldrb	r2, [r2, #0]
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	b299      	uxth	r1, r3
 80047aa:	230f      	movs	r3, #15
 80047ac:	18fc      	adds	r4, r7, r3
 80047ae:	1dfb      	adds	r3, r7, #7
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	001a      	movs	r2, r3
 80047b4:	f7ff fb7c 	bl	8003eb0 <ParseBuffer>
 80047b8:	0003      	movs	r3, r0
 80047ba:	7023      	strb	r3, [r4, #0]
 80047bc:	e026      	b.n	800480c <DMA_ProcessBuffer+0x17c>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	001a      	movs	r2, r3
 80047c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004844 <DMA_ProcessBuffer+0x1b4>)
 80047c8:	18d0      	adds	r0, r2, r3
 80047ca:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	001a      	movs	r2, r3
 80047d2:	23ff      	movs	r3, #255	@ 0xff
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	b299      	uxth	r1, r3
 80047d8:	250f      	movs	r5, #15
 80047da:	197c      	adds	r4, r7, r5
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	001a      	movs	r2, r3
 80047e2:	f7ff fb65 	bl	8003eb0 <ParseBuffer>
 80047e6:	0003      	movs	r3, r0
 80047e8:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80047ea:	220e      	movs	r2, #14
 80047ec:	18bb      	adds	r3, r7, r2
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <DMA_ProcessBuffer+0x17c>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80047f4:	18bb      	adds	r3, r7, r2
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b299      	uxth	r1, r3
 80047fa:	197c      	adds	r4, r7, r5
 80047fc:	1dfb      	adds	r3, r7, #7
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <DMA_ProcessBuffer+0x1b4>)
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff fb54 	bl	8003eb0 <ParseBuffer>
 8004808:	0003      	movs	r3, r0
 800480a:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800480c:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <DMA_ProcessBuffer+0x198>)
 800480e:	220e      	movs	r2, #14
 8004810:	18ba      	adds	r2, r7, r2
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004816:	230f      	movs	r3, #15
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	781b      	ldrb	r3, [r3, #0]
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b004      	add	sp, #16
 8004822:	bdb0      	pop	{r4, r5, r7, pc}
 8004824:	2000239c 	.word	0x2000239c
 8004828:	20000a25 	.word	0x20000a25
 800482c:	20000938 	.word	0x20000938
 8004830:	2000093a 	.word	0x2000093a
 8004834:	20000000 	.word	0x20000000
 8004838:	20000021 	.word	0x20000021
 800483c:	20000934 	.word	0x20000934
 8004840:	20000a26 	.word	0x20000a26
 8004844:	200003f4 	.word	0x200003f4

08004848 <clearDMABuffer>:

void clearDMABuffer(){
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 800484c:	4b04      	ldr	r3, [pc, #16]	@ (8004860 <clearDMABuffer+0x18>)
 800484e:	22ff      	movs	r2, #255	@ 0xff
 8004850:	2100      	movs	r1, #0
 8004852:	0018      	movs	r0, r3
 8004854:	f016 fc6e 	bl	801b134 <memset>
}
 8004858:	46c0      	nop			@ (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	200003f4 	.word	0x200003f4

08004864 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	0002      	movs	r2, r0
 800486c:	1dfb      	adds	r3, r7, #7
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	1dbb      	adds	r3, r7, #6
 8004872:	1c0a      	adds	r2, r1, #0
 8004874:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004876:	210f      	movs	r1, #15
 8004878:	187b      	adds	r3, r7, r1
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800487e:	1dbb      	adds	r3, r7, #6
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d105      	bne.n	8004892 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004886:	187b      	adds	r3, r7, r1
 8004888:	1dfa      	adds	r2, r7, #7
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	4251      	negs	r1, r2
 800488e:	414a      	adcs	r2, r1
 8004890:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004892:	1dbb      	adds	r3, r7, #6
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800489a:	230f      	movs	r3, #15
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	1dfa      	adds	r2, r7, #7
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	3a02      	subs	r2, #2
 80048a4:	4251      	negs	r1, r2
 80048a6:	414a      	adcs	r2, r1
 80048a8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80048aa:	1dbb      	adds	r3, r7, #6
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d107      	bne.n	80048c2 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80048b2:	230f      	movs	r3, #15
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	1dfa      	adds	r2, r7, #7
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	3a05      	subs	r2, #5
 80048bc:	4251      	negs	r1, r2
 80048be:	414a      	adcs	r2, r1
 80048c0:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80048c2:	230f      	movs	r3, #15
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	781b      	ldrb	r3, [r3, #0]
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b004      	add	sp, #16
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <AT_Send>:

bool AT_Send(AT_Commands state){
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	0002      	movs	r2, r0
 80048d8:	1dfb      	adds	r3, r7, #7
 80048da:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80048dc:	230f      	movs	r3, #15
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
  switch (state){
 80048e4:	1dfb      	adds	r3, r7, #7
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b11      	cmp	r3, #17
 80048ea:	d900      	bls.n	80048ee <AT_Send+0x1e>
 80048ec:	e15b      	b.n	8004ba6 <AT_Send+0x2d6>
 80048ee:	009a      	lsls	r2, r3, #2
 80048f0:	4bb0      	ldr	r3, [pc, #704]	@ (8004bb4 <AT_Send+0x2e4>)
 80048f2:	18d3      	adds	r3, r2, r3
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80048f8:	4baf      	ldr	r3, [pc, #700]	@ (8004bb8 <AT_Send+0x2e8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f006 f9d7 	bl	800acb0 <TimestampIsReached>
 8004902:	1e03      	subs	r3, r0, #0
 8004904:	d100      	bne.n	8004908 <AT_Send+0x38>
 8004906:	e14d      	b.n	8004ba4 <AT_Send+0x2d4>
    ATCommandSend = PollAwake();
 8004908:	230f      	movs	r3, #15
 800490a:	18fc      	adds	r4, r7, r3
 800490c:	f7ff fc32 	bl	8004174 <PollAwake>
 8004910:	0003      	movs	r3, r0
 8004912:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004914:	f006 fdc4 	bl	800b4a0 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	3332      	adds	r3, #50	@ 0x32
 800491c:	001a      	movs	r2, r3
 800491e:	4ba6      	ldr	r3, [pc, #664]	@ (8004bb8 <AT_Send+0x2e8>)
 8004920:	601a      	str	r2, [r3, #0]
  }
  break;
 8004922:	e13f      	b.n	8004ba4 <AT_Send+0x2d4>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004924:	4aa5      	ldr	r2, [pc, #660]	@ (8004bbc <AT_Send+0x2ec>)
 8004926:	4ba6      	ldr	r3, [pc, #664]	@ (8004bc0 <AT_Send+0x2f0>)
 8004928:	0019      	movs	r1, r3
 800492a:	2003      	movs	r0, #3
 800492c:	f006 fa16 	bl	800ad5c <CreateLine>
    ATCommandSend = RFPower();
 8004930:	230f      	movs	r3, #15
 8004932:	18fc      	adds	r4, r7, r3
 8004934:	f7ff fc3a 	bl	80041ac <RFPower>
 8004938:	0003      	movs	r3, r0
 800493a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800493c:	f006 fdb0 	bl	800b4a0 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	330a      	adds	r3, #10
 8004944:	001a      	movs	r2, r3
 8004946:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb8 <AT_Send+0x2e8>)
 8004948:	601a      	str	r2, [r3, #0]
    break;
 800494a:	e12c      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800494c:	4a9d      	ldr	r2, [pc, #628]	@ (8004bc4 <AT_Send+0x2f4>)
 800494e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc0 <AT_Send+0x2f0>)
 8004950:	0019      	movs	r1, r3
 8004952:	2003      	movs	r0, #3
 8004954:	f006 fa02 	bl	800ad5c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004958:	230f      	movs	r3, #15
 800495a:	18fc      	adds	r4, r7, r3
 800495c:	f7ff fc42 	bl	80041e4 <CheckRFPower>
 8004960:	0003      	movs	r3, r0
 8004962:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004964:	f006 fd9c 	bl	800b4a0 <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	330a      	adds	r3, #10
 800496c:	001a      	movs	r2, r3
 800496e:	4b92      	ldr	r3, [pc, #584]	@ (8004bb8 <AT_Send+0x2e8>)
 8004970:	601a      	str	r2, [r3, #0]
    break;
 8004972:	e118      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004974:	4a94      	ldr	r2, [pc, #592]	@ (8004bc8 <AT_Send+0x2f8>)
 8004976:	4b92      	ldr	r3, [pc, #584]	@ (8004bc0 <AT_Send+0x2f0>)
 8004978:	0019      	movs	r1, r3
 800497a:	2003      	movs	r0, #3
 800497c:	f006 f9ee 	bl	800ad5c <CreateLine>
    ATCommandSend = ATRestore();
 8004980:	230f      	movs	r3, #15
 8004982:	18fc      	adds	r4, r7, r3
 8004984:	f7ff fc4a 	bl	800421c <ATRestore>
 8004988:	0003      	movs	r3, r0
 800498a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800498c:	f006 fd88 	bl	800b4a0 <HAL_GetTick>
 8004990:	0003      	movs	r3, r0
 8004992:	3332      	adds	r3, #50	@ 0x32
 8004994:	001a      	movs	r2, r3
 8004996:	4b88      	ldr	r3, [pc, #544]	@ (8004bb8 <AT_Send+0x2e8>)
 8004998:	601a      	str	r2, [r3, #0]
    break;
 800499a:	e104      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800499c:	4a8b      	ldr	r2, [pc, #556]	@ (8004bcc <AT_Send+0x2fc>)
 800499e:	4b88      	ldr	r3, [pc, #544]	@ (8004bc0 <AT_Send+0x2f0>)
 80049a0:	0019      	movs	r1, r3
 80049a2:	2003      	movs	r0, #3
 80049a4:	f006 f9da 	bl	800ad5c <CreateLine>
    ATCommandSend = CWINIT();
 80049a8:	230f      	movs	r3, #15
 80049aa:	18fc      	adds	r4, r7, r3
 80049ac:	f7ff fc52 	bl	8004254 <CWINIT>
 80049b0:	0003      	movs	r3, r0
 80049b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80049b4:	f006 fd74 	bl	800b4a0 <HAL_GetTick>
 80049b8:	0003      	movs	r3, r0
 80049ba:	33f5      	adds	r3, #245	@ 0xf5
 80049bc:	33ff      	adds	r3, #255	@ 0xff
 80049be:	001a      	movs	r2, r3
 80049c0:	4b7d      	ldr	r3, [pc, #500]	@ (8004bb8 <AT_Send+0x2e8>)
 80049c2:	601a      	str	r2, [r3, #0]
    break;
 80049c4:	e0ef      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80049c6:	4a82      	ldr	r2, [pc, #520]	@ (8004bd0 <AT_Send+0x300>)
 80049c8:	4b7d      	ldr	r3, [pc, #500]	@ (8004bc0 <AT_Send+0x2f0>)
 80049ca:	0019      	movs	r1, r3
 80049cc:	2003      	movs	r0, #3
 80049ce:	f006 f9c5 	bl	800ad5c <CreateLine>
    ATCommandSend = CWSTATE();
 80049d2:	230f      	movs	r3, #15
 80049d4:	18fc      	adds	r4, r7, r3
 80049d6:	f7ff fd4b 	bl	8004470 <CWSTATE>
 80049da:	0003      	movs	r3, r0
 80049dc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80049de:	f006 fd5f 	bl	800b4a0 <HAL_GetTick>
 80049e2:	0003      	movs	r3, r0
 80049e4:	33f5      	adds	r3, #245	@ 0xf5
 80049e6:	33ff      	adds	r3, #255	@ 0xff
 80049e8:	001a      	movs	r2, r3
 80049ea:	4b73      	ldr	r3, [pc, #460]	@ (8004bb8 <AT_Send+0x2e8>)
 80049ec:	601a      	str	r2, [r3, #0]
    break;
 80049ee:	e0da      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80049f0:	4a78      	ldr	r2, [pc, #480]	@ (8004bd4 <AT_Send+0x304>)
 80049f2:	4b73      	ldr	r3, [pc, #460]	@ (8004bc0 <AT_Send+0x2f0>)
 80049f4:	0019      	movs	r1, r3
 80049f6:	2003      	movs	r0, #3
 80049f8:	f006 f9b0 	bl	800ad5c <CreateLine>
    ATCommandSend = CWMODE1();
 80049fc:	230f      	movs	r3, #15
 80049fe:	18fc      	adds	r4, r7, r3
 8004a00:	f7ff fc44 	bl	800428c <CWMODE1>
 8004a04:	0003      	movs	r3, r0
 8004a06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a08:	f006 fd4a 	bl	800b4a0 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	330a      	adds	r3, #10
 8004a10:	001a      	movs	r2, r3
 8004a12:	4b69      	ldr	r3, [pc, #420]	@ (8004bb8 <AT_Send+0x2e8>)
 8004a14:	601a      	str	r2, [r3, #0]
    break;
 8004a16:	e0c6      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004a18:	4a6e      	ldr	r2, [pc, #440]	@ (8004bd4 <AT_Send+0x304>)
 8004a1a:	4b69      	ldr	r3, [pc, #420]	@ (8004bc0 <AT_Send+0x2f0>)
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	2003      	movs	r0, #3
 8004a20:	f006 f99c 	bl	800ad5c <CreateLine>
    ATCommandSend = CWMODE2();
 8004a24:	230f      	movs	r3, #15
 8004a26:	18fc      	adds	r4, r7, r3
 8004a28:	f7ff fc4c 	bl	80042c4 <CWMODE2>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a30:	f006 fd36 	bl	800b4a0 <HAL_GetTick>
 8004a34:	0003      	movs	r3, r0
 8004a36:	330a      	adds	r3, #10
 8004a38:	001a      	movs	r2, r3
 8004a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb8 <AT_Send+0x2e8>)
 8004a3c:	601a      	str	r2, [r3, #0]
    break;
 8004a3e:	e0b2      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004a40:	4a65      	ldr	r2, [pc, #404]	@ (8004bd8 <AT_Send+0x308>)
 8004a42:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc0 <AT_Send+0x2f0>)
 8004a44:	0019      	movs	r1, r3
 8004a46:	2003      	movs	r0, #3
 8004a48:	f006 f988 	bl	800ad5c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004a4c:	230f      	movs	r3, #15
 8004a4e:	18fc      	adds	r4, r7, r3
 8004a50:	f7ff fc54 	bl	80042fc <CWAUTOCONN>
 8004a54:	0003      	movs	r3, r0
 8004a56:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a58:	f006 fd22 	bl	800b4a0 <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	330a      	adds	r3, #10
 8004a60:	001a      	movs	r2, r3
 8004a62:	4b55      	ldr	r3, [pc, #340]	@ (8004bb8 <AT_Send+0x2e8>)
 8004a64:	601a      	str	r2, [r3, #0]
    break;
 8004a66:	e09e      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004a68:	4a5c      	ldr	r2, [pc, #368]	@ (8004bdc <AT_Send+0x30c>)
 8004a6a:	4b55      	ldr	r3, [pc, #340]	@ (8004bc0 <AT_Send+0x2f0>)
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	2003      	movs	r0, #3
 8004a70:	f006 f974 	bl	800ad5c <CreateLine>
    ATCommandSend = CWJAP();
 8004a74:	230f      	movs	r3, #15
 8004a76:	18fc      	adds	r4, r7, r3
 8004a78:	f7ff fc5c 	bl	8004334 <CWJAP>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004a80:	f006 fd0e 	bl	800b4a0 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	3332      	adds	r3, #50	@ 0x32
 8004a88:	001a      	movs	r2, r3
 8004a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb8 <AT_Send+0x2e8>)
 8004a8c:	601a      	str	r2, [r3, #0]
    break;
 8004a8e:	e08a      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004a90:	4a53      	ldr	r2, [pc, #332]	@ (8004be0 <AT_Send+0x310>)
 8004a92:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc0 <AT_Send+0x2f0>)
 8004a94:	0019      	movs	r1, r3
 8004a96:	2003      	movs	r0, #3
 8004a98:	f006 f960 	bl	800ad5c <CreateLine>
    ATCommandSend = CWMODE3();
 8004a9c:	230f      	movs	r3, #15
 8004a9e:	18fc      	adds	r4, r7, r3
 8004aa0:	f7ff fcca 	bl	8004438 <CWMODE3>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004aa8:	f006 fcfa 	bl	800b4a0 <HAL_GetTick>
 8004aac:	0003      	movs	r3, r0
 8004aae:	330a      	adds	r3, #10
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	4b41      	ldr	r3, [pc, #260]	@ (8004bb8 <AT_Send+0x2e8>)
 8004ab4:	601a      	str	r2, [r3, #0]
    break;
 8004ab6:	e076      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8004be4 <AT_Send+0x314>)
 8004aba:	4b41      	ldr	r3, [pc, #260]	@ (8004bc0 <AT_Send+0x2f0>)
 8004abc:	0019      	movs	r1, r3
 8004abe:	2003      	movs	r0, #3
 8004ac0:	f006 f94c 	bl	800ad5c <CreateLine>
    ATCommandSend = CWSAP();
 8004ac4:	230f      	movs	r3, #15
 8004ac6:	18fc      	adds	r4, r7, r3
 8004ac8:	f7ff fcee 	bl	80044a8 <CWSAP>
 8004acc:	0003      	movs	r3, r0
 8004ace:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ad0:	f006 fce6 	bl	800b4a0 <HAL_GetTick>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	330a      	adds	r3, #10
 8004ad8:	001a      	movs	r2, r3
 8004ada:	4b37      	ldr	r3, [pc, #220]	@ (8004bb8 <AT_Send+0x2e8>)
 8004adc:	601a      	str	r2, [r3, #0]
    break;
 8004ade:	e062      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004ae0:	230f      	movs	r3, #15
 8004ae2:	18fc      	adds	r4, r7, r3
 8004ae4:	f7ff fcfc 	bl	80044e0 <CIPMUX>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004aec:	f006 fcd8 	bl	800b4a0 <HAL_GetTick>
 8004af0:	0003      	movs	r3, r0
 8004af2:	330a      	adds	r3, #10
 8004af4:	001a      	movs	r2, r3
 8004af6:	4b30      	ldr	r3, [pc, #192]	@ (8004bb8 <AT_Send+0x2e8>)
 8004af8:	601a      	str	r2, [r3, #0]
    break;
 8004afa:	e054      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004afc:	230f      	movs	r3, #15
 8004afe:	18fc      	adds	r4, r7, r3
 8004b00:	f7ff fd0a 	bl	8004518 <WEBSERVER>
 8004b04:	0003      	movs	r3, r0
 8004b06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b08:	f006 fcca 	bl	800b4a0 <HAL_GetTick>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	330a      	adds	r3, #10
 8004b10:	001a      	movs	r2, r3
 8004b12:	4b29      	ldr	r3, [pc, #164]	@ (8004bb8 <AT_Send+0x2e8>)
 8004b14:	601a      	str	r2, [r3, #0]
    break;
 8004b16:	e046      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004b18:	230f      	movs	r3, #15
 8004b1a:	18fc      	adds	r4, r7, r3
 8004b1c:	f7ff fd18 	bl	8004550 <HTTPCPOST>
 8004b20:	0003      	movs	r3, r0
 8004b22:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004b24:	f006 fcbc 	bl	800b4a0 <HAL_GetTick>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	33f5      	adds	r3, #245	@ 0xf5
 8004b2c:	33ff      	adds	r3, #255	@ 0xff
 8004b2e:	001a      	movs	r2, r3
 8004b30:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <AT_Send+0x2e8>)
 8004b32:	601a      	str	r2, [r3, #0]
    break;
 8004b34:	e037      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_SENDDATA:
    Debug("Send the data");
 8004b36:	4a2c      	ldr	r2, [pc, #176]	@ (8004be8 <AT_Send+0x318>)
 8004b38:	4b21      	ldr	r3, [pc, #132]	@ (8004bc0 <AT_Send+0x2f0>)
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	2003      	movs	r0, #3
 8004b3e:	f006 f90d 	bl	800ad5c <CreateLine>
    ATCommandSend = SENDDATA();
 8004b42:	230f      	movs	r3, #15
 8004b44:	18fc      	adds	r4, r7, r3
 8004b46:	f7ff fd63 	bl	8004610 <SENDDATA>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004b4e:	f006 fca7 	bl	800b4a0 <HAL_GetTick>
 8004b52:	0003      	movs	r3, r0
 8004b54:	33f5      	adds	r3, #245	@ 0xf5
 8004b56:	33ff      	adds	r3, #255	@ 0xff
 8004b58:	001a      	movs	r2, r3
 8004b5a:	4b17      	ldr	r3, [pc, #92]	@ (8004bb8 <AT_Send+0x2e8>)
 8004b5c:	601a      	str	r2, [r3, #0]
    break;
 8004b5e:	e022      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004b60:	4a22      	ldr	r2, [pc, #136]	@ (8004bec <AT_Send+0x31c>)
 8004b62:	4b17      	ldr	r3, [pc, #92]	@ (8004bc0 <AT_Send+0x2f0>)
 8004b64:	0019      	movs	r1, r3
 8004b66:	2003      	movs	r0, #3
 8004b68:	f006 f8f8 	bl	800ad5c <CreateLine>
    ATCommandSend = SLEEP();
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fc      	adds	r4, r7, r3
 8004b70:	f7ff fd72 	bl	8004658 <SLEEP>
 8004b74:	0003      	movs	r3, r0
 8004b76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b78:	f006 fc92 	bl	800b4a0 <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	330a      	adds	r3, #10
 8004b80:	001a      	movs	r2, r3
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <AT_Send+0x2e8>)
 8004b84:	601a      	str	r2, [r3, #0]
    break;
 8004b86:	e00e      	b.n	8004ba6 <AT_Send+0x2d6>

  case AT_END:
    Debug("Unexpected case, leave ESP untouched");
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <AT_Send+0x320>)
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <AT_Send+0x2f0>)
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	2003      	movs	r0, #3
 8004b90:	f006 f8e4 	bl	800ad5c <CreateLine>
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b94:	f006 fc84 	bl	800b4a0 <HAL_GetTick>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	330a      	adds	r3, #10
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <AT_Send+0x2e8>)
 8004ba0:	601a      	str	r2, [r3, #0]
    break;
 8004ba2:	e000      	b.n	8004ba6 <AT_Send+0x2d6>
  break;
 8004ba4:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004ba6:	230f      	movs	r3, #15
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	781b      	ldrb	r3, [r3, #0]
}
 8004bac:	0018      	movs	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b005      	add	sp, #20
 8004bb2:	bd90      	pop	{r4, r7, pc}
 8004bb4:	0801f01c 	.word	0x0801f01c
 8004bb8:	20000934 	.word	0x20000934
 8004bbc:	0801e6a0 	.word	0x0801e6a0
 8004bc0:	0801e1f0 	.word	0x0801e1f0
 8004bc4:	0801e6b4 	.word	0x0801e6b4
 8004bc8:	0801e6c8 	.word	0x0801e6c8
 8004bcc:	0801e6d8 	.word	0x0801e6d8
 8004bd0:	0801e6ec 	.word	0x0801e6ec
 8004bd4:	0801e704 	.word	0x0801e704
 8004bd8:	0801e71c 	.word	0x0801e71c
 8004bdc:	0801e734 	.word	0x0801e734
 8004be0:	0801e748 	.word	0x0801e748
 8004be4:	0801e764 	.word	0x0801e764
 8004be8:	0801e780 	.word	0x0801e780
 8004bec:	0801e790 	.word	0x0801e790
 8004bf0:	0801e7b4 	.word	0x0801e7b4

08004bf4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004c00:	4b79      	ldr	r3, [pc, #484]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b05      	cmp	r3, #5
 8004c06:	d900      	bls.n	8004c0a <ESP_WakeTest+0x16>
 8004c08:	e0d4      	b.n	8004db4 <ESP_WakeTest+0x1c0>
 8004c0a:	009a      	lsls	r2, r3, #2
 8004c0c:	4b77      	ldr	r3, [pc, #476]	@ (8004dec <ESP_WakeTest+0x1f8>)
 8004c0e:	18d3      	adds	r3, r2, r3
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004c14:	4b76      	ldr	r3, [pc, #472]	@ (8004df0 <ESP_WakeTest+0x1fc>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4053      	eors	r3, r2
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d036      	beq.n	8004c90 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004c22:	2380      	movs	r3, #128	@ 0x80
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	4873      	ldr	r0, [pc, #460]	@ (8004df4 <ESP_WakeTest+0x200>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	f007 fe97 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004c30:	2032      	movs	r0, #50	@ 0x32
 8004c32:	f006 fc3f 	bl	800b4b4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004c36:	2380      	movs	r3, #128	@ 0x80
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	486e      	ldr	r0, [pc, #440]	@ (8004df4 <ESP_WakeTest+0x200>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	0019      	movs	r1, r3
 8004c40:	f007 fe8d 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004c44:	200a      	movs	r0, #10
 8004c46:	f006 fc35 	bl	800b4b4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c4a:	4b6b      	ldr	r3, [pc, #428]	@ (8004df8 <ESP_WakeTest+0x204>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2101      	movs	r1, #1
 8004c50:	0018      	movs	r0, r3
 8004c52:	f007 fe84 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004c56:	200a      	movs	r0, #10
 8004c58:	f006 fc2c 	bl	800b4b4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004c5c:	4b66      	ldr	r3, [pc, #408]	@ (8004df8 <ESP_WakeTest+0x204>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2102      	movs	r1, #2
 8004c62:	0018      	movs	r0, r3
 8004c64:	f007 fe7b 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004c68:	200a      	movs	r0, #10
 8004c6a:	f006 fc23 	bl	800b4b4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004c6e:	4b62      	ldr	r3, [pc, #392]	@ (8004df8 <ESP_WakeTest+0x204>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	2101      	movs	r1, #1
 8004c74:	0018      	movs	r0, r3
 8004c76:	f007 fe72 	bl	800c95e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004c7a:	f006 fc11 	bl	800b4a0 <HAL_GetTick>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	22af      	movs	r2, #175	@ 0xaf
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	189a      	adds	r2, r3, r2
 8004c86:	4b5d      	ldr	r3, [pc, #372]	@ (8004dfc <ESP_WakeTest+0x208>)
 8004c88:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004c8a:	4b59      	ldr	r3, [pc, #356]	@ (8004df0 <ESP_WakeTest+0x1fc>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004c90:	4b5b      	ldr	r3, [pc, #364]	@ (8004e00 <ESP_WakeTest+0x20c>)
 8004c92:	21ff      	movs	r1, #255	@ 0xff
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fe fe9b 	bl	80039d0 <ESP_Receive>
 8004c9a:	1e03      	subs	r3, r0, #0
 8004c9c:	d100      	bne.n	8004ca0 <ESP_WakeTest+0xac>
 8004c9e:	e099      	b.n	8004dd4 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 8004ca0:	4b51      	ldr	r3, [pc, #324]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ca6:	e095      	b.n	8004dd4 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004ca8:	4b54      	ldr	r3, [pc, #336]	@ (8004dfc <ESP_WakeTest+0x208>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f005 ffff 	bl	800acb0 <TimestampIsReached>
 8004cb2:	1e03      	subs	r3, r0, #0
 8004cb4:	d100      	bne.n	8004cb8 <ESP_WakeTest+0xc4>
 8004cb6:	e08f      	b.n	8004dd8 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004cb8:	4b52      	ldr	r3, [pc, #328]	@ (8004e04 <ESP_WakeTest+0x210>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	1dfc      	adds	r4, r7, #7
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f7ff fe06 	bl	80048d0 <AT_Send>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d100      	bne.n	8004cd2 <ESP_WakeTest+0xde>
 8004cd0:	e082      	b.n	8004dd8 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004cd2:	4b45      	ldr	r3, [pc, #276]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004cd8:	e07e      	b.n	8004dd8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004cda:	4b48      	ldr	r3, [pc, #288]	@ (8004dfc <ESP_WakeTest+0x208>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f005 ffe6 	bl	800acb0 <TimestampIsReached>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d100      	bne.n	8004cea <ESP_WakeTest+0xf6>
 8004ce8:	e078      	b.n	8004ddc <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004cea:	4b47      	ldr	r3, [pc, #284]	@ (8004e08 <ESP_WakeTest+0x214>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7ff fcce 	bl	8004690 <DMA_ProcessBuffer>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	4b44      	ldr	r3, [pc, #272]	@ (8004e0c <ESP_WakeTest+0x218>)
 8004cfa:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004cfc:	4b43      	ldr	r3, [pc, #268]	@ (8004e0c <ESP_WakeTest+0x218>)
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	4b41      	ldr	r3, [pc, #260]	@ (8004e08 <ESP_WakeTest+0x214>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	1dbc      	adds	r4, r7, #6
 8004d06:	0019      	movs	r1, r3
 8004d08:	0010      	movs	r0, r2
 8004d0a:	f7ff fdab 	bl	8004864 <ATCompare>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004d12:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <ESP_WakeTest+0x218>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d102      	bne.n	8004d20 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004d1a:	4b33      	ldr	r3, [pc, #204]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <ESP_WakeTest+0x218>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b07      	cmp	r3, #7
 8004d26:	d104      	bne.n	8004d32 <ESP_WakeTest+0x13e>
          StartProg();
 8004d28:	f7ff f890 	bl	8003e4c <StartProg>
          TestState = ESP_TEST_BOOT;
 8004d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004d2e:	2205      	movs	r2, #5
 8004d30:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004d32:	4b36      	ldr	r3, [pc, #216]	@ (8004e0c <ESP_WakeTest+0x218>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d109      	bne.n	8004d4e <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004d3a:	f006 fbb1 	bl	800b4a0 <HAL_GetTick>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	3332      	adds	r3, #50	@ 0x32
 8004d42:	001a      	movs	r2, r3
 8004d44:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <ESP_WakeTest+0x208>)
 8004d46:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004d48:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004d4e:	1dbb      	adds	r3, r7, #6
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d042      	beq.n	8004ddc <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004d56:	4b24      	ldr	r3, [pc, #144]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004d58:	2203      	movs	r2, #3
 8004d5a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004d5c:	e03e      	b.n	8004ddc <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8004d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e10 <ESP_WakeTest+0x21c>)
 8004d60:	22fa      	movs	r2, #250	@ 0xfa
 8004d62:	0112      	lsls	r2, r2, #4
 8004d64:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8004d66:	4b2a      	ldr	r3, [pc, #168]	@ (8004e10 <ESP_WakeTest+0x21c>)
 8004d68:	4a2a      	ldr	r2, [pc, #168]	@ (8004e14 <ESP_WakeTest+0x220>)
 8004d6a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8004d6c:	4b28      	ldr	r3, [pc, #160]	@ (8004e10 <ESP_WakeTest+0x21c>)
 8004d6e:	22fa      	movs	r2, #250	@ 0xfa
 8004d70:	0112      	lsls	r2, r2, #4
 8004d72:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004d74:	4b1c      	ldr	r3, [pc, #112]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004d76:	2204      	movs	r2, #4
 8004d78:	701a      	strb	r2, [r3, #0]

      break;
 8004d7a:	e030      	b.n	8004dde <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004d7c:	4b26      	ldr	r3, [pc, #152]	@ (8004e18 <ESP_WakeTest+0x224>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004d82:	4b1b      	ldr	r3, [pc, #108]	@ (8004df0 <ESP_WakeTest+0x1fc>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004d88:	4b1b      	ldr	r3, [pc, #108]	@ (8004df8 <ESP_WakeTest+0x204>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f007 fde5 	bl	800c95e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4816      	ldr	r0, [pc, #88]	@ (8004df4 <ESP_WakeTest+0x200>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	f007 fdde 	bl	800c95e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004da2:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <ESP_WakeTest+0x204>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	2102      	movs	r1, #2
 8004da8:	0018      	movs	r0, r3
 8004daa:	f007 fdd8 	bl	800c95e <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004dae:	f002 fae1 	bl	8007374 <SetESPMeasurementDone>
      break;
 8004db2:	e014      	b.n	8004dde <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <ESP_WakeTest+0x1f4>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
      break;
 8004dba:	e010      	b.n	8004dde <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <ESP_WakeTest+0x21c>)
 8004dbe:	22fa      	movs	r2, #250	@ 0xfa
 8004dc0:	0112      	lsls	r2, r2, #4
 8004dc2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004dc4:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <ESP_WakeTest+0x21c>)
 8004dc6:	22fa      	movs	r2, #250	@ 0xfa
 8004dc8:	0112      	lsls	r2, r2, #4
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004dcc:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <ESP_WakeTest+0x21c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004dd2:	e004      	b.n	8004dde <ESP_WakeTest+0x1ea>
      break;
 8004dd4:	46c0      	nop			@ (mov r8, r8)
 8004dd6:	e002      	b.n	8004dde <ESP_WakeTest+0x1ea>
      break;
 8004dd8:	46c0      	nop			@ (mov r8, r8)
 8004dda:	e000      	b.n	8004dde <ESP_WakeTest+0x1ea>
      break;
 8004ddc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b003      	add	sp, #12
 8004de4:	bd90      	pop	{r4, r7, pc}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	2000093c 	.word	0x2000093c
 8004dec:	0801f064 	.word	0x0801f064
 8004df0:	200004f3 	.word	0x200004f3
 8004df4:	50000800 	.word	0x50000800
 8004df8:	50001c00 	.word	0x50001c00
 8004dfc:	20000934 	.word	0x20000934
 8004e00:	200003f4 	.word	0x200003f4
 8004e04:	2000093a 	.word	0x2000093a
 8004e08:	20000939 	.word	0x20000939
 8004e0c:	20000022 	.word	0x20000022
 8004e10:	40000400 	.word	0x40000400
 8004e14:	00000bb8 	.word	0x00000bb8
 8004e18:	20000000 	.word	0x20000000

08004e1c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004e22:	1dfb      	adds	r3, r7, #7
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004e28:	4bde      	ldr	r3, [pc, #888]	@ (80051a4 <ESP_Upkeep+0x388>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b0f      	cmp	r3, #15
 8004e2e:	d900      	bls.n	8004e32 <ESP_Upkeep+0x16>
 8004e30:	e2b3      	b.n	800539a <ESP_Upkeep+0x57e>
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	4bdc      	ldr	r3, [pc, #880]	@ (80051a8 <ESP_Upkeep+0x38c>)
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004e3c:	4bd9      	ldr	r3, [pc, #868]	@ (80051a4 <ESP_Upkeep+0x388>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
      break;
 8004e42:	e2c3      	b.n	80053cc <ESP_Upkeep+0x5b0>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004e44:	4bd9      	ldr	r3, [pc, #868]	@ (80051ac <ESP_Upkeep+0x390>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4053      	eors	r3, r2
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d036      	beq.n	8004ec0 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e52:	2380      	movs	r3, #128	@ 0x80
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	48d6      	ldr	r0, [pc, #856]	@ (80051b0 <ESP_Upkeep+0x394>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	f007 fd7f 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e60:	2001      	movs	r0, #1
 8004e62:	f006 fb27 	bl	800b4b4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004e66:	2380      	movs	r3, #128	@ 0x80
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	48d1      	ldr	r0, [pc, #836]	@ (80051b0 <ESP_Upkeep+0x394>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	0019      	movs	r1, r3
 8004e70:	f007 fd75 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e74:	2001      	movs	r0, #1
 8004e76:	f006 fb1d 	bl	800b4b4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e7a:	4bce      	ldr	r3, [pc, #824]	@ (80051b4 <ESP_Upkeep+0x398>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2101      	movs	r1, #1
 8004e80:	0018      	movs	r0, r3
 8004e82:	f007 fd6c 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e86:	2001      	movs	r0, #1
 8004e88:	f006 fb14 	bl	800b4b4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004e8c:	4bc9      	ldr	r3, [pc, #804]	@ (80051b4 <ESP_Upkeep+0x398>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	2102      	movs	r1, #2
 8004e92:	0018      	movs	r0, r3
 8004e94:	f007 fd63 	bl	800c95e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f006 fb0b 	bl	800b4b4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004e9e:	4bc5      	ldr	r3, [pc, #788]	@ (80051b4 <ESP_Upkeep+0x398>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f007 fd5a 	bl	800c95e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004eaa:	f006 faf9 	bl	800b4a0 <HAL_GetTick>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	22af      	movs	r2, #175	@ 0xaf
 8004eb2:	0092      	lsls	r2, r2, #2
 8004eb4:	189a      	adds	r2, r3, r2
 8004eb6:	4bc0      	ldr	r3, [pc, #768]	@ (80051b8 <ESP_Upkeep+0x39c>)
 8004eb8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004eba:	4bbc      	ldr	r3, [pc, #752]	@ (80051ac <ESP_Upkeep+0x390>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004ec0:	4bbe      	ldr	r3, [pc, #760]	@ (80051bc <ESP_Upkeep+0x3a0>)
 8004ec2:	21ff      	movs	r1, #255	@ 0xff
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7fe fd83 	bl	80039d0 <ESP_Receive>
 8004eca:	1e03      	subs	r3, r0, #0
 8004ecc:	d100      	bne.n	8004ed0 <ESP_Upkeep+0xb4>
 8004ece:	e270      	b.n	80053b2 <ESP_Upkeep+0x596>
        EspState = ESP_STATE_WAIT_AWAKE;
 8004ed0:	4bb4      	ldr	r3, [pc, #720]	@ (80051a4 <ESP_Upkeep+0x388>)
 8004ed2:	220f      	movs	r2, #15
 8004ed4:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8004ed6:	f006 fae3 	bl	800b4a0 <HAL_GetTick>
 8004eda:	0003      	movs	r3, r0
 8004edc:	22fa      	movs	r2, #250	@ 0xfa
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	189a      	adds	r2, r3, r2
 8004ee2:	4bb7      	ldr	r3, [pc, #732]	@ (80051c0 <ESP_Upkeep+0x3a4>)
 8004ee4:	601a      	str	r2, [r3, #0]
      }
      break;
 8004ee6:	e264      	b.n	80053b2 <ESP_Upkeep+0x596>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f7ff fbd1 	bl	8004690 <DMA_ProcessBuffer>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	4bb4      	ldr	r3, [pc, #720]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 8004ef4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8004ef6:	4bb3      	ldr	r3, [pc, #716]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	1dbc      	adds	r4, r7, #6
 8004efc:	2101      	movs	r1, #1
 8004efe:	0018      	movs	r0, r3
 8004f00:	f7ff fcb0 	bl	8004864 <ATCompare>
 8004f04:	0003      	movs	r3, r0
 8004f06:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8004f08:	1dbb      	adds	r3, r7, #6
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d107      	bne.n	8004f20 <ESP_Upkeep+0x104>
 8004f10:	4bab      	ldr	r3, [pc, #684]	@ (80051c0 <ESP_Upkeep+0x3a4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f005 fecb 	bl	800acb0 <TimestampIsReached>
 8004f1a:	1e03      	subs	r3, r0, #0
 8004f1c:	d100      	bne.n	8004f20 <ESP_Upkeep+0x104>
 8004f1e:	e24a      	b.n	80053b6 <ESP_Upkeep+0x59a>
          EspState = ESP_STATE_MODE_SELECT;
 8004f20:	4ba0      	ldr	r3, [pc, #640]	@ (80051a4 <ESP_Upkeep+0x388>)
 8004f22:	220b      	movs	r2, #11
 8004f24:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004f26:	e246      	b.n	80053b6 <ESP_Upkeep+0x59a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004f28:	4ba7      	ldr	r3, [pc, #668]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8004f2a:	2209      	movs	r2, #9
 8004f2c:	2111      	movs	r1, #17
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f016 f900 	bl	801b134 <memset>
      if(!InitIsDone || WifiReset){
 8004f34:	4ba5      	ldr	r3, [pc, #660]	@ (80051cc <ESP_Upkeep+0x3b0>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4053      	eors	r3, r2
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <ESP_Upkeep+0x12e>
 8004f42:	4ba3      	ldr	r3, [pc, #652]	@ (80051d0 <ESP_Upkeep+0x3b4>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01a      	beq.n	8004f80 <ESP_Upkeep+0x164>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004f4a:	4b9f      	ldr	r3, [pc, #636]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8004f4c:	4aa1      	ldr	r2, [pc, #644]	@ (80051d4 <ESP_Upkeep+0x3b8>)
 8004f4e:	6811      	ldr	r1, [r2, #0]
 8004f50:	6019      	str	r1, [r3, #0]
 8004f52:	8891      	ldrh	r1, [r2, #4]
 8004f54:	8099      	strh	r1, [r3, #4]
 8004f56:	7992      	ldrb	r2, [r2, #6]
 8004f58:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004f5a:	4b92      	ldr	r3, [pc, #584]	@ (80051a4 <ESP_Upkeep+0x388>)
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004f60:	4b9d      	ldr	r3, [pc, #628]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004f66:	4b9d      	ldr	r3, [pc, #628]	@ (80051dc <ESP_Upkeep+0x3c0>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	001a      	movs	r2, r3
 8004f72:	4b95      	ldr	r3, [pc, #596]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8004f74:	5c9a      	ldrb	r2, [r3, r2]
 8004f76:	4b9a      	ldr	r3, [pc, #616]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 8004f78:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004f80:	4b92      	ldr	r3, [pc, #584]	@ (80051cc <ESP_Upkeep+0x3b0>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01f      	beq.n	8004fc8 <ESP_Upkeep+0x1ac>
 8004f88:	4b97      	ldr	r3, [pc, #604]	@ (80051e8 <ESP_Upkeep+0x3cc>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	4053      	eors	r3, r2
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d018      	beq.n	8004fc8 <ESP_Upkeep+0x1ac>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004f96:	4b8c      	ldr	r3, [pc, #560]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8004f98:	4a94      	ldr	r2, [pc, #592]	@ (80051ec <ESP_Upkeep+0x3d0>)
 8004f9a:	6811      	ldr	r1, [r2, #0]
 8004f9c:	6019      	str	r1, [r3, #0]
 8004f9e:	8892      	ldrh	r2, [r2, #4]
 8004fa0:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004fa2:	4b80      	ldr	r3, [pc, #512]	@ (80051a4 <ESP_Upkeep+0x388>)
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004fa8:	4b8b      	ldr	r3, [pc, #556]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004fae:	4b8b      	ldr	r3, [pc, #556]	@ (80051dc <ESP_Upkeep+0x3c0>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004fb4:	4b88      	ldr	r3, [pc, #544]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	001a      	movs	r2, r3
 8004fba:	4b83      	ldr	r3, [pc, #524]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8004fbc:	5c9a      	ldrb	r2, [r3, r2]
 8004fbe:	4b88      	ldr	r3, [pc, #544]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 8004fc0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004fc2:	4b88      	ldr	r3, [pc, #544]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8004fc8:	4b80      	ldr	r3, [pc, #512]	@ (80051cc <ESP_Upkeep+0x3b0>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d021      	beq.n	8005014 <ESP_Upkeep+0x1f8>
 8004fd0:	4b85      	ldr	r3, [pc, #532]	@ (80051e8 <ESP_Upkeep+0x3cc>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01d      	beq.n	8005014 <ESP_Upkeep+0x1f8>
 8004fd8:	4b85      	ldr	r3, [pc, #532]	@ (80051f0 <ESP_Upkeep+0x3d4>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	4053      	eors	r3, r2
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <ESP_Upkeep+0x1f8>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8004fe6:	4b83      	ldr	r3, [pc, #524]	@ (80051f4 <ESP_Upkeep+0x3d8>)
 8004fe8:	881a      	ldrh	r2, [r3, #0]
 8004fea:	4b77      	ldr	r3, [pc, #476]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8004fec:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004fee:	4b6d      	ldr	r3, [pc, #436]	@ (80051a4 <ESP_Upkeep+0x388>)
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004ff4:	4b78      	ldr	r3, [pc, #480]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8004ffa:	4b78      	ldr	r3, [pc, #480]	@ (80051dc <ESP_Upkeep+0x3c0>)
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005000:	4b75      	ldr	r3, [pc, #468]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	001a      	movs	r2, r3
 8005006:	4b70      	ldr	r3, [pc, #448]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8005008:	5c9a      	ldrb	r2, [r3, r2]
 800500a:	4b75      	ldr	r3, [pc, #468]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 800500c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800500e:	4b75      	ldr	r3, [pc, #468]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest){
 8005014:	4b6d      	ldr	r3, [pc, #436]	@ (80051cc <ESP_Upkeep+0x3b0>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d027      	beq.n	800506c <ESP_Upkeep+0x250>
 800501c:	4b72      	ldr	r3, [pc, #456]	@ (80051e8 <ESP_Upkeep+0x3cc>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d023      	beq.n	800506c <ESP_Upkeep+0x250>
 8005024:	4b72      	ldr	r3, [pc, #456]	@ (80051f0 <ESP_Upkeep+0x3d4>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01f      	beq.n	800506c <ESP_Upkeep+0x250>
        memcpy(ATCommandArray, AT_SEND, 3);
 800502c:	4b66      	ldr	r3, [pc, #408]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 800502e:	4a72      	ldr	r2, [pc, #456]	@ (80051f8 <ESP_Upkeep+0x3dc>)
 8005030:	8811      	ldrh	r1, [r2, #0]
 8005032:	8019      	strh	r1, [r3, #0]
 8005034:	7892      	ldrb	r2, [r2, #2]
 8005036:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005038:	4b5a      	ldr	r3, [pc, #360]	@ (80051a4 <ESP_Upkeep+0x388>)
 800503a:	2204      	movs	r2, #4
 800503c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800503e:	4b66      	ldr	r3, [pc, #408]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005044:	4b65      	ldr	r3, [pc, #404]	@ (80051dc <ESP_Upkeep+0x3c0>)
 8005046:	2202      	movs	r2, #2
 8005048:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800504a:	f006 fa29 	bl	800b4a0 <HAL_GetTick>
 800504e:	0002      	movs	r2, r0
 8005050:	4b6a      	ldr	r3, [pc, #424]	@ (80051fc <ESP_Upkeep+0x3e0>)
 8005052:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005054:	f005 f806 	bl	800a064 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005058:	4b5f      	ldr	r3, [pc, #380]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	001a      	movs	r2, r3
 800505e:	4b5a      	ldr	r3, [pc, #360]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8005060:	5c9a      	ldrb	r2, [r3, r2]
 8005062:	4b5f      	ldr	r3, [pc, #380]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 8005064:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005066:	4b5f      	ldr	r3, [pc, #380]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 800506c:	4b64      	ldr	r3, [pc, #400]	@ (8005200 <ESP_Upkeep+0x3e4>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d100      	bne.n	8005076 <ESP_Upkeep+0x25a>
 8005074:	e1a1      	b.n	80053ba <ESP_Upkeep+0x59e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005076:	4b54      	ldr	r3, [pc, #336]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 8005078:	4a62      	ldr	r2, [pc, #392]	@ (8005204 <ESP_Upkeep+0x3e8>)
 800507a:	6811      	ldr	r1, [r2, #0]
 800507c:	6019      	str	r1, [r3, #0]
 800507e:	7912      	ldrb	r2, [r2, #4]
 8005080:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005082:	4b48      	ldr	r3, [pc, #288]	@ (80051a4 <ESP_Upkeep+0x388>)
 8005084:	2204      	movs	r2, #4
 8005086:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005088:	4b53      	ldr	r3, [pc, #332]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 800508e:	4b53      	ldr	r3, [pc, #332]	@ (80051dc <ESP_Upkeep+0x3c0>)
 8005090:	2203      	movs	r2, #3
 8005092:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005094:	f004 ffe6 	bl	800a064 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005098:	4b4f      	ldr	r3, [pc, #316]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	001a      	movs	r2, r3
 800509e:	4b4a      	ldr	r3, [pc, #296]	@ (80051c8 <ESP_Upkeep+0x3ac>)
 80050a0:	5c9a      	ldrb	r2, [r3, r2]
 80050a2:	4b4f      	ldr	r3, [pc, #316]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 80050a4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80050a6:	4b4f      	ldr	r3, [pc, #316]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
      }

    break;
 80050ac:	e185      	b.n	80053ba <ESP_Upkeep+0x59e>



    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 80050ae:	4b4c      	ldr	r3, [pc, #304]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	1dfc      	adds	r4, r7, #7
 80050b4:	0018      	movs	r0, r3
 80050b6:	f7ff fc0b 	bl	80048d0 <AT_Send>
 80050ba:	0003      	movs	r3, r0
 80050bc:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80050be:	1dfb      	adds	r3, r7, #7
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d100      	bne.n	80050c8 <ESP_Upkeep+0x2ac>
 80050c6:	e17a      	b.n	80053be <ESP_Upkeep+0x5a2>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80050c8:	4b36      	ldr	r3, [pc, #216]	@ (80051a4 <ESP_Upkeep+0x388>)
 80050ca:	2203      	movs	r2, #3
 80050cc:	701a      	strb	r2, [r3, #0]
        }
         break;
 80050ce:	e176      	b.n	80053be <ESP_Upkeep+0x5a2>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80050d0:	4b39      	ldr	r3, [pc, #228]	@ (80051b8 <ESP_Upkeep+0x39c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f005 fdeb 	bl	800acb0 <TimestampIsReached>
 80050da:	1e03      	subs	r3, r0, #0
 80050dc:	d100      	bne.n	80050e0 <ESP_Upkeep+0x2c4>
 80050de:	e170      	b.n	80053c2 <ESP_Upkeep+0x5a6>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80050e0:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7ff fad3 	bl	8004690 <DMA_ProcessBuffer>
 80050ea:	0003      	movs	r3, r0
 80050ec:	001a      	movs	r2, r3
 80050ee:	4b35      	ldr	r3, [pc, #212]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 80050f0:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80050f2:	4b34      	ldr	r3, [pc, #208]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	4b3b      	ldr	r3, [pc, #236]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	1d7c      	adds	r4, r7, #5
 80050fc:	0019      	movs	r1, r3
 80050fe:	0010      	movs	r0, r2
 8005100:	f7ff fbb0 	bl	8004864 <ATCompare>
 8005104:	0003      	movs	r3, r0
 8005106:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005108:	4b2e      	ldr	r3, [pc, #184]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10f      	bne.n	8005130 <ESP_Upkeep+0x314>
          if(ATCommand == AT_SENDDATA){
 8005110:	4b33      	ldr	r3, [pc, #204]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b0f      	cmp	r3, #15
 8005116:	d108      	bne.n	800512a <ESP_Upkeep+0x30e>
            ATCommand = AT_HTTPCPOST;
 8005118:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 800511a:	220e      	movs	r2, #14
 800511c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800511e:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 8005120:	2202      	movs	r2, #2
 8005122:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005124:	4b2c      	ldr	r3, [pc, #176]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800512a:	4b1e      	ldr	r3, [pc, #120]	@ (80051a4 <ESP_Upkeep+0x388>)
 800512c:	2204      	movs	r2, #4
 800512e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005130:	4b24      	ldr	r3, [pc, #144]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d106      	bne.n	8005146 <ESP_Upkeep+0x32a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005138:	f006 f9b2 	bl	800b4a0 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	330a      	adds	r3, #10
 8005140:	001a      	movs	r2, r3
 8005142:	4b1d      	ldr	r3, [pc, #116]	@ (80051b8 <ESP_Upkeep+0x39c>)
 8005144:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005146:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b0a      	cmp	r3, #10
 800514c:	d106      	bne.n	800515c <ESP_Upkeep+0x340>
          ESPTimeStamp = HAL_GetTick() + 10;
 800514e:	f006 f9a7 	bl	800b4a0 <HAL_GetTick>
 8005152:	0003      	movs	r3, r0
 8005154:	330a      	adds	r3, #10
 8005156:	001a      	movs	r2, r3
 8005158:	4b17      	ldr	r3, [pc, #92]	@ (80051b8 <ESP_Upkeep+0x39c>)
 800515a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 800515c:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <ESP_Upkeep+0x3a8>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b06      	cmp	r3, #6
 8005162:	d116      	bne.n	8005192 <ESP_Upkeep+0x376>
          if(ATCommand != AT_SENDDATA){
 8005164:	4b1e      	ldr	r3, [pc, #120]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d003      	beq.n	8005174 <ESP_Upkeep+0x358>
            EspState = ESP_STATE_SEND;
 800516c:	4b0d      	ldr	r3, [pc, #52]	@ (80051a4 <ESP_Upkeep+0x388>)
 800516e:	2204      	movs	r2, #4
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e00e      	b.n	8005192 <ESP_Upkeep+0x376>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005174:	4b1a      	ldr	r3, [pc, #104]	@ (80051e0 <ESP_Upkeep+0x3c4>)
 8005176:	220e      	movs	r2, #14
 8005178:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800517a:	4b17      	ldr	r3, [pc, #92]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	3b01      	subs	r3, #1
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <ESP_Upkeep+0x3bc>)
 8005184:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005186:	4b17      	ldr	r3, [pc, #92]	@ (80051e4 <ESP_Upkeep+0x3c8>)
 8005188:	2202      	movs	r2, #2
 800518a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <ESP_Upkeep+0x388>)
 800518e:	2204      	movs	r2, #4
 8005190:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005192:	1d7b      	adds	r3, r7, #5
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d100      	bne.n	800519c <ESP_Upkeep+0x380>
 800519a:	e112      	b.n	80053c2 <ESP_Upkeep+0x5a6>
          EspState = ESP_STATE_NEXT_AT;
 800519c:	4b01      	ldr	r3, [pc, #4]	@ (80051a4 <ESP_Upkeep+0x388>)
 800519e:	2205      	movs	r2, #5
 80051a0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80051a2:	e10e      	b.n	80053c2 <ESP_Upkeep+0x5a6>
 80051a4:	20000021 	.word	0x20000021
 80051a8:	0801f07c 	.word	0x0801f07c
 80051ac:	200004f3 	.word	0x200004f3
 80051b0:	50000800 	.word	0x50000800
 80051b4:	50001c00 	.word	0x50001c00
 80051b8:	20000934 	.word	0x20000934
 80051bc:	200003f4 	.word	0x200003f4
 80051c0:	20000a28 	.word	0x20000a28
 80051c4:	20000023 	.word	0x20000023
 80051c8:	20000928 	.word	0x20000928
 80051cc:	200004f4 	.word	0x200004f4
 80051d0:	200004f5 	.word	0x200004f5
 80051d4:	20000004 	.word	0x20000004
 80051d8:	20000932 	.word	0x20000932
 80051dc:	2000093b 	.word	0x2000093b
 80051e0:	2000093a 	.word	0x2000093a
 80051e4:	20000939 	.word	0x20000939
 80051e8:	200004f7 	.word	0x200004f7
 80051ec:	20000014 	.word	0x20000014
 80051f0:	200004f8 	.word	0x200004f8
 80051f4:	20000010 	.word	0x20000010
 80051f8:	2000000c 	.word	0x2000000c
 80051fc:	20000508 	.word	0x20000508
 8005200:	200004f6 	.word	0x200004f6
 8005204:	2000001c 	.word	0x2000001c

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005208:	4b73      	ldr	r3, [pc, #460]	@ (80053d8 <ESP_Upkeep+0x5bc>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	4b71      	ldr	r3, [pc, #452]	@ (80053d8 <ESP_Upkeep+0x5bc>)
 8005212:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005214:	4b70      	ldr	r3, [pc, #448]	@ (80053d8 <ESP_Upkeep+0x5bc>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	001a      	movs	r2, r3
 800521a:	4b70      	ldr	r3, [pc, #448]	@ (80053dc <ESP_Upkeep+0x5c0>)
 800521c:	5c9a      	ldrb	r2, [r3, r2]
 800521e:	4b70      	ldr	r3, [pc, #448]	@ (80053e0 <ESP_Upkeep+0x5c4>)
 8005220:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005222:	4b6f      	ldr	r3, [pc, #444]	@ (80053e0 <ESP_Upkeep+0x5c4>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d102      	bne.n	8005230 <ESP_Upkeep+0x414>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 800522a:	4b6e      	ldr	r3, [pc, #440]	@ (80053e4 <ESP_Upkeep+0x5c8>)
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005230:	4b6b      	ldr	r3, [pc, #428]	@ (80053e0 <ESP_Upkeep+0x5c4>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b0e      	cmp	r3, #14
 8005236:	d102      	bne.n	800523e <ESP_Upkeep+0x422>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005238:	4b6a      	ldr	r3, [pc, #424]	@ (80053e4 <ESP_Upkeep+0x5c8>)
 800523a:	2202      	movs	r2, #2
 800523c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 800523e:	4b68      	ldr	r3, [pc, #416]	@ (80053e0 <ESP_Upkeep+0x5c4>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b0e      	cmp	r3, #14
 8005244:	d006      	beq.n	8005254 <ESP_Upkeep+0x438>
 8005246:	4b66      	ldr	r3, [pc, #408]	@ (80053e0 <ESP_Upkeep+0x5c4>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d002      	beq.n	8005254 <ESP_Upkeep+0x438>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800524e:	4b65      	ldr	r3, [pc, #404]	@ (80053e4 <ESP_Upkeep+0x5c8>)
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005254:	4b64      	ldr	r3, [pc, #400]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 8005256:	2204      	movs	r2, #4
 8005258:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 800525a:	4b61      	ldr	r3, [pc, #388]	@ (80053e0 <ESP_Upkeep+0x5c4>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b11      	cmp	r3, #17
 8005260:	d000      	beq.n	8005264 <ESP_Upkeep+0x448>
 8005262:	e0b0      	b.n	80053c6 <ESP_Upkeep+0x5aa>
        if(Mode == AT_MODE_SEND){
 8005264:	4b61      	ldr	r3, [pc, #388]	@ (80053ec <ESP_Upkeep+0x5d0>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d11d      	bne.n	80052a8 <ESP_Upkeep+0x48c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800526c:	f006 f918 	bl	800b4a0 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	4a5f      	ldr	r2, [pc, #380]	@ (80053f0 <ESP_Upkeep+0x5d4>)
 8005274:	189a      	adds	r2, r3, r2
 8005276:	4b5f      	ldr	r3, [pc, #380]	@ (80053f4 <ESP_Upkeep+0x5d8>)
 8005278:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 800527a:	f004 ff0b 	bl	800a094 <ResetESPIndicator>
          clearDMABuffer();
 800527e:	f7ff fae3 	bl	8004848 <clearDMABuffer>
          stop = HAL_GetTick();
 8005282:	f006 f90d 	bl	800b4a0 <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	4b5b      	ldr	r3, [pc, #364]	@ (80053f8 <ESP_Upkeep+0x5dc>)
 800528a:	601a      	str	r2, [r3, #0]
          Debug("Message send in %ul ms", (stop-start));
 800528c:	4b5a      	ldr	r3, [pc, #360]	@ (80053f8 <ESP_Upkeep+0x5dc>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b5a      	ldr	r3, [pc, #360]	@ (80053fc <ESP_Upkeep+0x5e0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	4a5a      	ldr	r2, [pc, #360]	@ (8005400 <ESP_Upkeep+0x5e4>)
 8005298:	495a      	ldr	r1, [pc, #360]	@ (8005404 <ESP_Upkeep+0x5e8>)
 800529a:	2003      	movs	r0, #3
 800529c:	f005 fd5e 	bl	800ad5c <CreateLine>
          EspState = ESP_STATE_DEINIT;
 80052a0:	4b51      	ldr	r3, [pc, #324]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 80052a2:	220d      	movs	r2, #13
 80052a4:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80052a6:	e08e      	b.n	80053c6 <ESP_Upkeep+0x5aa>
          EspState = ESP_STATE_RESET;
 80052a8:	4b4f      	ldr	r3, [pc, #316]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 80052aa:	2209      	movs	r2, #9
 80052ac:	701a      	strb	r2, [r3, #0]
    break;
 80052ae:	e08a      	b.n	80053c6 <ESP_Upkeep+0x5aa>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80052b0:	4b55      	ldr	r3, [pc, #340]	@ (8005408 <ESP_Upkeep+0x5ec>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052b6:	4b55      	ldr	r3, [pc, #340]	@ (800540c <ESP_Upkeep+0x5f0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	2101      	movs	r1, #1
 80052bc:	0018      	movs	r0, r3
 80052be:	f007 fb4e 	bl	800c95e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80052c2:	2001      	movs	r0, #1
 80052c4:	f006 f8f6 	bl	800b4b4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	4850      	ldr	r0, [pc, #320]	@ (8005410 <ESP_Upkeep+0x5f4>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	0019      	movs	r1, r3
 80052d2:	f007 fb44 	bl	800c95e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80052d6:	2001      	movs	r0, #1
 80052d8:	f006 f8ec 	bl	800b4b4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80052dc:	4b4b      	ldr	r3, [pc, #300]	@ (800540c <ESP_Upkeep+0x5f0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	2102      	movs	r1, #2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f007 fb3b 	bl	800c95e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80052e8:	4b3f      	ldr	r3, [pc, #252]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 80052ea:	2209      	movs	r2, #9
 80052ec:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80052ee:	2001      	movs	r0, #1
 80052f0:	f006 f8e0 	bl	800b4b4 <HAL_Delay>
      break;
 80052f4:	e06a      	b.n	80053cc <ESP_Upkeep+0x5b0>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80052f6:	4b3f      	ldr	r3, [pc, #252]	@ (80053f4 <ESP_Upkeep+0x5d8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f005 fcd8 	bl	800acb0 <TimestampIsReached>
 8005300:	1e03      	subs	r3, r0, #0
 8005302:	d103      	bne.n	800530c <ESP_Upkeep+0x4f0>
 8005304:	4b43      	ldr	r3, [pc, #268]	@ (8005414 <ESP_Upkeep+0x5f8>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d05e      	beq.n	80053ca <ESP_Upkeep+0x5ae>
        if(Mode == AT_MODE_INIT){
 800530c:	4b37      	ldr	r3, [pc, #220]	@ (80053ec <ESP_Upkeep+0x5d0>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <ESP_Upkeep+0x504>
          InitIsDone = true;
 8005314:	4b40      	ldr	r3, [pc, #256]	@ (8005418 <ESP_Upkeep+0x5fc>)
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800531a:	4b33      	ldr	r3, [pc, #204]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 800531c:	220b      	movs	r2, #11
 800531e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005320:	4b32      	ldr	r3, [pc, #200]	@ (80053ec <ESP_Upkeep+0x5d0>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d108      	bne.n	800533a <ESP_Upkeep+0x51e>
          ConnectionMade = true;
 8005328:	4b3c      	ldr	r3, [pc, #240]	@ (800541c <ESP_Upkeep+0x600>)
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
          beurs = true;
 800532e:	4b3c      	ldr	r3, [pc, #240]	@ (8005420 <ESP_Upkeep+0x604>)
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005334:	4b2c      	ldr	r3, [pc, #176]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 8005336:	220b      	movs	r2, #11
 8005338:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800533a:	4b2c      	ldr	r3, [pc, #176]	@ (80053ec <ESP_Upkeep+0x5d0>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d102      	bne.n	8005348 <ESP_Upkeep+0x52c>
          EspState = ESP_STATE_INIT;
 8005342:	4b29      	ldr	r3, [pc, #164]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 8005344:	2202      	movs	r2, #2
 8005346:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005348:	4b28      	ldr	r3, [pc, #160]	@ (80053ec <ESP_Upkeep+0x5d0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d102      	bne.n	8005356 <ESP_Upkeep+0x53a>
          EspState = ESP_STATE_CONFIG;
 8005350:	4b25      	ldr	r3, [pc, #148]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 8005352:	220e      	movs	r2, #14
 8005354:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 8005356:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <ESP_Upkeep+0x5d0>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d135      	bne.n	80053ca <ESP_Upkeep+0x5ae>
          EspState = ESP_STATE_MODE_SELECT;
 800535e:	4b22      	ldr	r3, [pc, #136]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 8005360:	220b      	movs	r2, #11
 8005362:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005364:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <ESP_Upkeep+0x608>)
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 800536a:	e02e      	b.n	80053ca <ESP_Upkeep+0x5ae>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 800536c:	4a2e      	ldr	r2, [pc, #184]	@ (8005428 <ESP_Upkeep+0x60c>)
 800536e:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <ESP_Upkeep+0x5e8>)
 8005370:	0019      	movs	r1, r3
 8005372:	2003      	movs	r0, #3
 8005374:	f005 fcf2 	bl	800ad5c <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005378:	f012 fe60 	bl	801803c <GetUsbRxPointer>
 800537c:	0003      	movs	r3, r0
 800537e:	0018      	movs	r0, r3
 8005380:	f000 f8ca 	bl	8005518 <Process_PC_Config>

      break;
 8005384:	e022      	b.n	80053cc <ESP_Upkeep+0x5b0>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005386:	4a29      	ldr	r2, [pc, #164]	@ (800542c <ESP_Upkeep+0x610>)
 8005388:	4b1e      	ldr	r3, [pc, #120]	@ (8005404 <ESP_Upkeep+0x5e8>)
 800538a:	0019      	movs	r1, r3
 800538c:	2003      	movs	r0, #3
 800538e:	f005 fce5 	bl	800ad5c <CreateLine>
      EspState = ESP_STATE_INIT;
 8005392:	4b15      	ldr	r3, [pc, #84]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 8005394:	2202      	movs	r2, #2
 8005396:	701a      	strb	r2, [r3, #0]
      break;
 8005398:	e018      	b.n	80053cc <ESP_Upkeep+0x5b0>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 800539a:	4a25      	ldr	r2, [pc, #148]	@ (8005430 <ESP_Upkeep+0x614>)
 800539c:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <ESP_Upkeep+0x5e8>)
 800539e:	0019      	movs	r1, r3
 80053a0:	2003      	movs	r0, #3
 80053a2:	f005 fcdb 	bl	800ad5c <CreateLine>
      EspState = ESP_STATE_ERROR;
 80053a6:	4b10      	ldr	r3, [pc, #64]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 80053a8:	2207      	movs	r2, #7
 80053aa:	701a      	strb	r2, [r3, #0]
      break;
 80053ac:	e00e      	b.n	80053cc <ESP_Upkeep+0x5b0>
      break;
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	e00c      	b.n	80053cc <ESP_Upkeep+0x5b0>
      break;
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	e00a      	b.n	80053cc <ESP_Upkeep+0x5b0>
        break;
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	e008      	b.n	80053cc <ESP_Upkeep+0x5b0>
    break;
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	e006      	b.n	80053cc <ESP_Upkeep+0x5b0>
         break;
 80053be:	46c0      	nop			@ (mov r8, r8)
 80053c0:	e004      	b.n	80053cc <ESP_Upkeep+0x5b0>
      break;
 80053c2:	46c0      	nop			@ (mov r8, r8)
 80053c4:	e002      	b.n	80053cc <ESP_Upkeep+0x5b0>
    break;
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	e000      	b.n	80053cc <ESP_Upkeep+0x5b0>
      break;
 80053ca:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80053cc:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <ESP_Upkeep+0x5cc>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b003      	add	sp, #12
 80053d6:	bd90      	pop	{r4, r7, pc}
 80053d8:	20000932 	.word	0x20000932
 80053dc:	20000928 	.word	0x20000928
 80053e0:	2000093a 	.word	0x2000093a
 80053e4:	20000939 	.word	0x20000939
 80053e8:	20000021 	.word	0x20000021
 80053ec:	2000093b 	.word	0x2000093b
 80053f0:	000493e0 	.word	0x000493e0
 80053f4:	20000934 	.word	0x20000934
 80053f8:	2000050c 	.word	0x2000050c
 80053fc:	20000508 	.word	0x20000508
 8005400:	0801e7dc 	.word	0x0801e7dc
 8005404:	0801e1f0 	.word	0x0801e1f0
 8005408:	200004f3 	.word	0x200004f3
 800540c:	50001c00 	.word	0x50001c00
 8005410:	50000800 	.word	0x50000800
 8005414:	200004f6 	.word	0x200004f6
 8005418:	200004f4 	.word	0x200004f4
 800541c:	200004f7 	.word	0x200004f7
 8005420:	200004f9 	.word	0x200004f9
 8005424:	200004f8 	.word	0x200004f8
 8005428:	0801e7f4 	.word	0x0801e7f4
 800542c:	0801e80c 	.word	0x0801e80c
 8005430:	0801e820 	.word	0x0801e820

08005434 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 800543c:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <I2CSensors_Init+0x30>)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005442:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <I2CSensors_Init+0x34>)
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <I2CSensors_Init+0x38>)
 8005446:	0011      	movs	r1, r2
 8005448:	0018      	movs	r0, r3
 800544a:	f000 ff89 	bl	8006360 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800544e:	4a06      	ldr	r2, [pc, #24]	@ (8005468 <I2CSensors_Init+0x34>)
 8005450:	4b06      	ldr	r3, [pc, #24]	@ (800546c <I2CSensors_Init+0x38>)
 8005452:	0011      	movs	r1, r2
 8005454:	0018      	movs	r0, r3
 8005456:	f000 fdf3 	bl	8006040 <Gas_Init>
}
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b002      	add	sp, #8
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	20000a2c 	.word	0x20000a2c
 8005468:	080054c5 	.word	0x080054c5
 800546c:	08005471 	.word	0x08005471

08005470 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6039      	str	r1, [r7, #0]
 8005478:	0011      	movs	r1, r2
 800547a:	1dfb      	adds	r3, r7, #7
 800547c:	1c02      	adds	r2, r0, #0
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	1dbb      	adds	r3, r7, #6
 8005482:	1c0a      	adds	r2, r1, #0
 8005484:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005486:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <ReadI2C+0x50>)
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	18db      	adds	r3, r3, r3
 8005492:	b299      	uxth	r1, r3
 8005494:	1dbb      	adds	r3, r7, #6
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	250f      	movs	r5, #15
 800549c:	197c      	adds	r4, r7, r5
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	f007 fc16 	bl	800ccd0 <HAL_I2C_Master_Receive_DMA>
 80054a4:	0003      	movs	r3, r0
 80054a6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80054a8:	197b      	adds	r3, r7, r5
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <ReadI2C+0x44>
        return false;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <ReadI2C+0x46>
    }
    return true;
 80054b4:	2301      	movs	r3, #1
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bdb0      	pop	{r4, r5, r7, pc}
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	20000a2c 	.word	0x20000a2c

080054c4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6039      	str	r1, [r7, #0]
 80054cc:	0011      	movs	r1, r2
 80054ce:	1dfb      	adds	r3, r7, #7
 80054d0:	1c02      	adds	r2, r0, #0
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	1dbb      	adds	r3, r7, #6
 80054d6:	1c0a      	adds	r2, r1, #0
 80054d8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80054da:	4b0e      	ldr	r3, [pc, #56]	@ (8005514 <WriteI2C+0x50>)
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	1dfb      	adds	r3, r7, #7
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	18db      	adds	r3, r3, r3
 80054e6:	b299      	uxth	r1, r3
 80054e8:	1dbb      	adds	r3, r7, #6
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	250f      	movs	r5, #15
 80054f0:	197c      	adds	r4, r7, r5
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	f007 fae6 	bl	800cac4 <HAL_I2C_Master_Transmit_DMA>
 80054f8:	0003      	movs	r3, r0
 80054fa:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80054fc:	197b      	adds	r3, r7, r5
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <WriteI2C+0x44>
        return false;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <WriteI2C+0x46>
    }
    return true;
 8005508:	2301      	movs	r3, #1
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b004      	add	sp, #16
 8005510:	bdb0      	pop	{r4, r5, r7, pc}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	20000a2c 	.word	0x20000a2c

08005518 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b0c3      	sub	sp, #268	@ 0x10c
 800551c:	af3e      	add	r7, sp, #248	@ 0xf8
 800551e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005520:	f012 fdac 	bl	801807c <GetUsbRxDataSize>
 8005524:	0003      	movs	r3, r0
 8005526:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b05      	cmp	r3, #5
 800552c:	d971      	bls.n	8005612 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2123      	movs	r1, #35	@ 0x23
 8005532:	0018      	movs	r0, r3
 8005534:	f015 fe06 	bl	801b144 <strchr>
 8005538:	0003      	movs	r3, r0
 800553a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d065      	beq.n	800560e <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785a      	ldrb	r2, [r3, #1]
 8005546:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <Process_PC_Config+0x100>)
 8005548:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	789a      	ldrb	r2, [r3, #2]
 800554e:	4b32      	ldr	r3, [pc, #200]	@ (8005618 <Process_PC_Config+0x100>)
 8005550:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005552:	4b31      	ldr	r3, [pc, #196]	@ (8005618 <Process_PC_Config+0x100>)
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	3305      	adds	r3, #5
 8005558:	001a      	movs	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4293      	cmp	r3, r2
 800555e:	d351      	bcc.n	8005604 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	1cd9      	adds	r1, r3, #3
 8005564:	4b2c      	ldr	r3, [pc, #176]	@ (8005618 <Process_PC_Config+0x100>)
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	001a      	movs	r2, r3
 800556a:	4b2c      	ldr	r3, [pc, #176]	@ (800561c <Process_PC_Config+0x104>)
 800556c:	0018      	movs	r0, r3
 800556e:	f015 febd 	bl	801b2ec <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005572:	4b29      	ldr	r3, [pc, #164]	@ (8005618 <Process_PC_Config+0x100>)
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	3303      	adds	r3, #3
 8005578:	001a      	movs	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	189b      	adds	r3, r3, r2
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	b21a      	sxth	r2, r3
 8005584:	4b24      	ldr	r3, [pc, #144]	@ (8005618 <Process_PC_Config+0x100>)
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	3304      	adds	r3, #4
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	18cb      	adds	r3, r1, r3
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b21b      	sxth	r3, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	b21b      	sxth	r3, r3
 8005596:	b299      	uxth	r1, r3
 8005598:	4a1f      	ldr	r2, [pc, #124]	@ (8005618 <Process_PC_Config+0x100>)
 800559a:	2381      	movs	r3, #129	@ 0x81
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80055a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005618 <Process_PC_Config+0x100>)
 80055a2:	2381      	movs	r3, #129	@ 0x81
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	5ad4      	ldrh	r4, [r2, r3]
 80055a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005618 <Process_PC_Config+0x100>)
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	3303      	adds	r3, #3
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	0011      	movs	r1, r2
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 f975 	bl	80058a4 <CRC16_ARC>
 80055ba:	0003      	movs	r3, r0
 80055bc:	429c      	cmp	r4, r3
 80055be:	d007      	beq.n	80055d0 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80055c0:	4b15      	ldr	r3, [pc, #84]	@ (8005618 <Process_PC_Config+0x100>)
 80055c2:	785a      	ldrb	r2, [r3, #1]
 80055c4:	4b15      	ldr	r3, [pc, #84]	@ (800561c <Process_PC_Config+0x104>)
 80055c6:	0019      	movs	r1, r3
 80055c8:	2001      	movs	r0, #1
 80055ca:	f000 f919 	bl	8005800 <Create_Message>
 80055ce:	e016      	b.n	80055fe <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80055d0:	4c11      	ldr	r4, [pc, #68]	@ (8005618 <Process_PC_Config+0x100>)
 80055d2:	466b      	mov	r3, sp
 80055d4:	0018      	movs	r0, r3
 80055d6:	0023      	movs	r3, r4
 80055d8:	3310      	adds	r3, #16
 80055da:	22f4      	movs	r2, #244	@ 0xf4
 80055dc:	0019      	movs	r1, r3
 80055de:	f015 fe85 	bl	801b2ec <memcpy>
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	6861      	ldr	r1, [r4, #4]
 80055e6:	68a2      	ldr	r2, [r4, #8]
 80055e8:	68e3      	ldr	r3, [r4, #12]
 80055ea:	f000 f819 	bl	8005620 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80055ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <Process_PC_Config+0x100>)
 80055f0:	7818      	ldrb	r0, [r3, #0]
 80055f2:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <Process_PC_Config+0x100>)
 80055f4:	785a      	ldrb	r2, [r3, #1]
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <Process_PC_Config+0x104>)
 80055f8:	0019      	movs	r1, r3
 80055fa:	f000 f901 	bl	8005800 <Create_Message>
                }
                ResetUsbRxDataSize();
 80055fe:	f012 fd25 	bl	801804c <ResetUsbRxDataSize>
                return;
 8005602:	e006      	b.n	8005612 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	0018      	movs	r0, r3
 8005608:	f012 fd42 	bl	8018090 <GetUsbRxNextChunk>
 800560c:	e001      	b.n	8005612 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 800560e:	f012 fd1d 	bl	801804c <ResetUsbRxDataSize>
        }
    }
}
 8005612:	46bd      	mov	sp, r7
 8005614:	b005      	add	sp, #20
 8005616:	bd90      	pop	{r4, r7, pc}
 8005618:	20000a30 	.word	0x20000a30
 800561c:	20000a32 	.word	0x20000a32

08005620 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005620:	b084      	sub	sp, #16
 8005622:	b5b0      	push	{r4, r5, r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	2518      	movs	r5, #24
 800562a:	197c      	adds	r4, r7, r5
 800562c:	6020      	str	r0, [r4, #0]
 800562e:	6061      	str	r1, [r4, #4]
 8005630:	60a2      	str	r2, [r4, #8]
 8005632:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005634:	197b      	adds	r3, r7, r5
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2bfe      	cmp	r3, #254	@ 0xfe
 800563a:	d100      	bne.n	800563e <ProcessCmd+0x1e>
 800563c:	e09c      	b.n	8005778 <ProcessCmd+0x158>
 800563e:	dd00      	ble.n	8005642 <ProcessCmd+0x22>
 8005640:	e0bc      	b.n	80057bc <ProcessCmd+0x19c>
 8005642:	2b0c      	cmp	r3, #12
 8005644:	dc0a      	bgt.n	800565c <ProcessCmd+0x3c>
 8005646:	2b00      	cmp	r3, #0
 8005648:	da00      	bge.n	800564c <ProcessCmd+0x2c>
 800564a:	e0b7      	b.n	80057bc <ProcessCmd+0x19c>
 800564c:	2b0c      	cmp	r3, #12
 800564e:	d900      	bls.n	8005652 <ProcessCmd+0x32>
 8005650:	e0b4      	b.n	80057bc <ProcessCmd+0x19c>
 8005652:	009a      	lsls	r2, r3, #2
 8005654:	4b5d      	ldr	r3, [pc, #372]	@ (80057cc <ProcessCmd+0x1ac>)
 8005656:	18d3      	adds	r3, r2, r3
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	469f      	mov	pc, r3
 800565c:	2bfd      	cmp	r3, #253	@ 0xfd
 800565e:	d100      	bne.n	8005662 <ProcessCmd+0x42>
 8005660:	e084      	b.n	800576c <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005662:	e0ab      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005664:	2118      	movs	r1, #24
 8005666:	187b      	adds	r3, r7, r1
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	001a      	movs	r2, r3
 800566c:	187b      	adds	r3, r7, r1
 800566e:	1c99      	adds	r1, r3, #2
 8005670:	4857      	ldr	r0, [pc, #348]	@ (80057d0 <ProcessCmd+0x1b0>)
 8005672:	230c      	movs	r3, #12
 8005674:	f7fe f81a 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005678:	e0a0      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800567a:	2118      	movs	r1, #24
 800567c:	187b      	adds	r3, r7, r1
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	001a      	movs	r2, r3
 8005682:	187b      	adds	r3, r7, r1
 8005684:	1c99      	adds	r1, r3, #2
 8005686:	4853      	ldr	r0, [pc, #332]	@ (80057d4 <ProcessCmd+0x1b4>)
 8005688:	230c      	movs	r3, #12
 800568a:	f7fe f80f 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 800568e:	e095      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005690:	2118      	movs	r1, #24
 8005692:	187b      	adds	r3, r7, r1
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	001a      	movs	r2, r3
 8005698:	187b      	adds	r3, r7, r1
 800569a:	1c99      	adds	r1, r3, #2
 800569c:	484e      	ldr	r0, [pc, #312]	@ (80057d8 <ProcessCmd+0x1b8>)
 800569e:	230c      	movs	r3, #12
 80056a0:	f7fe f804 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056a4:	e08a      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80056a6:	2118      	movs	r1, #24
 80056a8:	187b      	adds	r3, r7, r1
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	001a      	movs	r2, r3
 80056ae:	187b      	adds	r3, r7, r1
 80056b0:	1c99      	adds	r1, r3, #2
 80056b2:	484a      	ldr	r0, [pc, #296]	@ (80057dc <ProcessCmd+0x1bc>)
 80056b4:	230c      	movs	r3, #12
 80056b6:	f7fd fff9 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056ba:	e07f      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80056bc:	2118      	movs	r1, #24
 80056be:	187b      	adds	r3, r7, r1
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	001a      	movs	r2, r3
 80056c4:	187b      	adds	r3, r7, r1
 80056c6:	1c99      	adds	r1, r3, #2
 80056c8:	4845      	ldr	r0, [pc, #276]	@ (80057e0 <ProcessCmd+0x1c0>)
 80056ca:	230c      	movs	r3, #12
 80056cc:	f7fd ffee 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056d0:	e074      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80056d2:	2118      	movs	r1, #24
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	001a      	movs	r2, r3
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	1c99      	adds	r1, r3, #2
 80056de:	4841      	ldr	r0, [pc, #260]	@ (80057e4 <ProcessCmd+0x1c4>)
 80056e0:	230c      	movs	r3, #12
 80056e2:	f7fd ffe3 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056e6:	e069      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80056e8:	2118      	movs	r1, #24
 80056ea:	187b      	adds	r3, r7, r1
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	001a      	movs	r2, r3
 80056f0:	187b      	adds	r3, r7, r1
 80056f2:	1c99      	adds	r1, r3, #2
 80056f4:	483c      	ldr	r0, [pc, #240]	@ (80057e8 <ProcessCmd+0x1c8>)
 80056f6:	230c      	movs	r3, #12
 80056f8:	f7fd ffd8 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056fc:	e05e      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80056fe:	2118      	movs	r1, #24
 8005700:	187b      	adds	r3, r7, r1
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	001a      	movs	r2, r3
 8005706:	187b      	adds	r3, r7, r1
 8005708:	1c99      	adds	r1, r3, #2
 800570a:	4838      	ldr	r0, [pc, #224]	@ (80057ec <ProcessCmd+0x1cc>)
 800570c:	231e      	movs	r3, #30
 800570e:	f7fd ffcd 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005712:	e053      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005714:	2118      	movs	r1, #24
 8005716:	187b      	adds	r3, r7, r1
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	001a      	movs	r2, r3
 800571c:	187b      	adds	r3, r7, r1
 800571e:	1c99      	adds	r1, r3, #2
 8005720:	4833      	ldr	r0, [pc, #204]	@ (80057f0 <ProcessCmd+0x1d0>)
 8005722:	230c      	movs	r3, #12
 8005724:	f7fd ffc2 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005728:	e048      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800572a:	2118      	movs	r1, #24
 800572c:	187b      	adds	r3, r7, r1
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	001a      	movs	r2, r3
 8005732:	187b      	adds	r3, r7, r1
 8005734:	1c99      	adds	r1, r3, #2
 8005736:	482f      	ldr	r0, [pc, #188]	@ (80057f4 <ProcessCmd+0x1d4>)
 8005738:	230c      	movs	r3, #12
 800573a:	f7fd ffb7 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 800573e:	e03d      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005740:	2118      	movs	r1, #24
 8005742:	187b      	adds	r3, r7, r1
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	001a      	movs	r2, r3
 8005748:	187b      	adds	r3, r7, r1
 800574a:	1c99      	adds	r1, r3, #2
 800574c:	482a      	ldr	r0, [pc, #168]	@ (80057f8 <ProcessCmd+0x1d8>)
 800574e:	230c      	movs	r3, #12
 8005750:	f7fd ffac 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005754:	e032      	b.n	80057bc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005756:	2118      	movs	r1, #24
 8005758:	187b      	adds	r3, r7, r1
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	001a      	movs	r2, r3
 800575e:	187b      	adds	r3, r7, r1
 8005760:	1c99      	adds	r1, r3, #2
 8005762:	4826      	ldr	r0, [pc, #152]	@ (80057fc <ProcessCmd+0x1dc>)
 8005764:	230c      	movs	r3, #12
 8005766:	f7fd ffa1 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 800576a:	e027      	b.n	80057bc <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800576c:	4b18      	ldr	r3, [pc, #96]	@ (80057d0 <ProcessCmd+0x1b0>)
 800576e:	21ba      	movs	r1, #186	@ 0xba
 8005770:	0018      	movs	r0, r3
 8005772:	f7fd ffe0 	bl	8003736 <ClearEEprom>
        break;
 8005776:	e021      	b.n	80057bc <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005778:	2118      	movs	r1, #24
 800577a:	187b      	adds	r3, r7, r1
 800577c:	789b      	ldrb	r3, [r3, #2]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	b21a      	sxth	r2, r3
 8005782:	187b      	adds	r3, r7, r1
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	b21b      	sxth	r3, r3
 8005788:	4313      	orrs	r3, r2
 800578a:	b21a      	sxth	r2, r3
 800578c:	1dbb      	adds	r3, r7, #6
 800578e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	881a      	ldrh	r2, [r3, #0]
 8005794:	23c0      	movs	r3, #192	@ 0xc0
 8005796:	015b      	lsls	r3, r3, #5
 8005798:	429a      	cmp	r2, r3
 800579a:	d207      	bcs.n	80057ac <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 800579c:	1dbb      	adds	r3, r7, #6
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	4a0b      	ldr	r2, [pc, #44]	@ (80057d0 <ProcessCmd+0x1b0>)
 80057a2:	0019      	movs	r1, r3
 80057a4:	0010      	movs	r0, r2
 80057a6:	f7fd ffc6 	bl	8003736 <ClearEEprom>
            break;
 80057aa:	e006      	b.n	80057ba <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80057ac:	23c0      	movs	r3, #192	@ 0xc0
 80057ae:	015b      	lsls	r3, r3, #5
 80057b0:	4a07      	ldr	r2, [pc, #28]	@ (80057d0 <ProcessCmd+0x1b0>)
 80057b2:	0019      	movs	r1, r3
 80057b4:	0010      	movs	r0, r2
 80057b6:	f7fd ffbe 	bl	8003736 <ClearEEprom>
            break;
 80057ba:	46c0      	nop			@ (mov r8, r8)
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bcb0      	pop	{r4, r5, r7}
 80057c4:	bc08      	pop	{r3}
 80057c6:	b004      	add	sp, #16
 80057c8:	4718      	bx	r3
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	0801f0d4 	.word	0x0801f0d4
 80057d0:	08080000 	.word	0x08080000
 80057d4:	0808000c 	.word	0x0808000c
 80057d8:	08080018 	.word	0x08080018
 80057dc:	08080024 	.word	0x08080024
 80057e0:	08080030 	.word	0x08080030
 80057e4:	0808003c 	.word	0x0808003c
 80057e8:	08080048 	.word	0x08080048
 80057ec:	08080090 	.word	0x08080090
 80057f0:	08080078 	.word	0x08080078
 80057f4:	0808006c 	.word	0x0808006c
 80057f8:	08080060 	.word	0x08080060
 80057fc:	08080054 	.word	0x08080054

08005800 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6039      	str	r1, [r7, #0]
 8005808:	0011      	movs	r1, r2
 800580a:	1dfb      	adds	r3, r7, #7
 800580c:	1c02      	adds	r2, r0, #0
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	1dbb      	adds	r3, r7, #6
 8005812:	1c0a      	adds	r2, r1, #0
 8005814:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005816:	2223      	movs	r2, #35	@ 0x23
 8005818:	4b20      	ldr	r3, [pc, #128]	@ (800589c <Create_Message+0x9c>)
 800581a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800581c:	4b1f      	ldr	r3, [pc, #124]	@ (800589c <Create_Message+0x9c>)
 800581e:	1dfa      	adds	r2, r7, #7
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005824:	4b1d      	ldr	r3, [pc, #116]	@ (800589c <Create_Message+0x9c>)
 8005826:	1dba      	adds	r2, r7, #6
 8005828:	7812      	ldrb	r2, [r2, #0]
 800582a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800582c:	1dbb      	adds	r3, r7, #6
 800582e:	781a      	ldrb	r2, [r3, #0]
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	4b1b      	ldr	r3, [pc, #108]	@ (80058a0 <Create_Message+0xa0>)
 8005834:	0018      	movs	r0, r3
 8005836:	f015 fd59 	bl	801b2ec <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800583a:	1dbb      	adds	r3, r7, #6
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b29a      	uxth	r2, r3
 8005840:	250e      	movs	r5, #14
 8005842:	197b      	adds	r3, r7, r5
 8005844:	3203      	adds	r2, #3
 8005846:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005848:	260c      	movs	r6, #12
 800584a:	19bc      	adds	r4, r7, r6
 800584c:	197b      	adds	r3, r7, r5
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	4b12      	ldr	r3, [pc, #72]	@ (800589c <Create_Message+0x9c>)
 8005852:	0011      	movs	r1, r2
 8005854:	0018      	movs	r0, r3
 8005856:	f000 f825 	bl	80058a4 <CRC16_ARC>
 800585a:	0003      	movs	r3, r0
 800585c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800585e:	0030      	movs	r0, r6
 8005860:	183b      	adds	r3, r7, r0
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	b29a      	uxth	r2, r3
 8005868:	197b      	adds	r3, r7, r5
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b2d1      	uxtb	r1, r2
 800586e:	4a0b      	ldr	r2, [pc, #44]	@ (800589c <Create_Message+0x9c>)
 8005870:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005872:	197b      	adds	r3, r7, r5
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	3301      	adds	r3, #1
 8005878:	183a      	adds	r2, r7, r0
 800587a:	8812      	ldrh	r2, [r2, #0]
 800587c:	b2d1      	uxtb	r1, r2
 800587e:	4a07      	ldr	r2, [pc, #28]	@ (800589c <Create_Message+0x9c>)
 8005880:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005882:	197b      	adds	r3, r7, r5
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	3302      	adds	r3, #2
 8005888:	b29a      	uxth	r2, r3
 800588a:	4b04      	ldr	r3, [pc, #16]	@ (800589c <Create_Message+0x9c>)
 800588c:	0011      	movs	r1, r2
 800588e:	0018      	movs	r0, r3
 8005890:	f012 fb9a 	bl	8017fc8 <CDC_Transmit_FS>
}
 8005894:	46c0      	nop			@ (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b005      	add	sp, #20
 800589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589c:	20000b34 	.word	0x20000b34
 80058a0:	20000b37 	.word	0x20000b37

080058a4 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	000a      	movs	r2, r1
 80058ae:	1cbb      	adds	r3, r7, #2
 80058b0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80058b2:	2316      	movs	r3, #22
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	2200      	movs	r2, #0
 80058b8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	e02e      	b.n	800591e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	18d3      	adds	r3, r2, r3
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	0019      	movs	r1, r3
 80058ca:	2216      	movs	r2, #22
 80058cc:	18bb      	adds	r3, r7, r2
 80058ce:	18ba      	adds	r2, r7, r2
 80058d0:	8812      	ldrh	r2, [r2, #0]
 80058d2:	404a      	eors	r2, r1
 80058d4:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e01a      	b.n	8005912 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80058dc:	2116      	movs	r1, #22
 80058de:	187b      	adds	r3, r7, r1
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	2201      	movs	r2, #1
 80058e4:	4013      	ands	r3, r2
 80058e6:	d00b      	beq.n	8005900 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80058e8:	187b      	adds	r3, r7, r1
 80058ea:	187a      	adds	r2, r7, r1
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	0852      	lsrs	r2, r2, #1
 80058f0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	187a      	adds	r2, r7, r1
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	490f      	ldr	r1, [pc, #60]	@ (8005938 <CRC16_ARC+0x94>)
 80058fa:	404a      	eors	r2, r1
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	e005      	b.n	800590c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005900:	2216      	movs	r2, #22
 8005902:	18bb      	adds	r3, r7, r2
 8005904:	18ba      	adds	r2, r7, r2
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	0852      	lsrs	r2, r2, #1
 800590a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b07      	cmp	r3, #7
 8005916:	dde1      	ble.n	80058dc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	3301      	adds	r3, #1
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	1cbb      	adds	r3, r7, #2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	429a      	cmp	r2, r3
 8005926:	dbcb      	blt.n	80058c0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005928:	2316      	movs	r3, #22
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	881b      	ldrh	r3, [r3, #0]
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b006      	add	sp, #24
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	ffffa001 	.word	0xffffa001

0800593c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005940:	4b26      	ldr	r3, [pc, #152]	@ (80059dc <ReadBatteryVoltage+0xa0>)
 8005942:	4a27      	ldr	r2, [pc, #156]	@ (80059e0 <ReadBatteryVoltage+0xa4>)
 8005944:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005946:	4b25      	ldr	r3, [pc, #148]	@ (80059dc <ReadBatteryVoltage+0xa0>)
 8005948:	2280      	movs	r2, #128	@ 0x80
 800594a:	0152      	lsls	r2, r2, #5
 800594c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800594e:	4a23      	ldr	r2, [pc, #140]	@ (80059dc <ReadBatteryVoltage+0xa0>)
 8005950:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <ReadBatteryVoltage+0xa8>)
 8005952:	0011      	movs	r1, r2
 8005954:	0018      	movs	r0, r3
 8005956:	f006 f85f 	bl	800ba18 <HAL_ADC_ConfigChannel>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d001      	beq.n	8005962 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 800595e:	f001 f8d9 	bl	8006b14 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005962:	4b20      	ldr	r3, [pc, #128]	@ (80059e4 <ReadBatteryVoltage+0xa8>)
 8005964:	0018      	movs	r0, r3
 8005966:	f005 ff5b 	bl	800b820 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 800596a:	4b1e      	ldr	r3, [pc, #120]	@ (80059e4 <ReadBatteryVoltage+0xa8>)
 800596c:	2101      	movs	r1, #1
 800596e:	0018      	movs	r0, r3
 8005970:	f005 ffaa 	bl	800b8c8 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005974:	4b1b      	ldr	r3, [pc, #108]	@ (80059e4 <ReadBatteryVoltage+0xa8>)
 8005976:	0018      	movs	r0, r3
 8005978:	f006 f842 	bl	800ba00 <HAL_ADC_GetValue>
 800597c:	0002      	movs	r2, r0
 800597e:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <ReadBatteryVoltage+0xac>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4353      	muls	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4919      	ldr	r1, [pc, #100]	@ (80059ec <ReadBatteryVoltage+0xb0>)
 8005988:	0018      	movs	r0, r3
 800598a:	f7fa fc01 	bl	8000190 <__udivsi3>
 800598e:	0003      	movs	r3, r0
 8005990:	001a      	movs	r2, r3
 8005992:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <ReadBatteryVoltage+0xb4>)
 8005994:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005996:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <ReadBatteryVoltage+0xb4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	0018      	movs	r0, r3
 800599c:	f7fb fe5a 	bl	8001654 <__aeabi_ui2f>
 80059a0:	1c03      	adds	r3, r0, #0
 80059a2:	4914      	ldr	r1, [pc, #80]	@ (80059f4 <ReadBatteryVoltage+0xb8>)
 80059a4:	1c18      	adds	r0, r3, #0
 80059a6:	f7fb f90b 	bl	8000bc0 <__aeabi_fdiv>
 80059aa:	1c03      	adds	r3, r0, #0
 80059ac:	1c1a      	adds	r2, r3, #0
 80059ae:	4b12      	ldr	r3, [pc, #72]	@ (80059f8 <ReadBatteryVoltage+0xbc>)
 80059b0:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 80059b2:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <ReadBatteryVoltage+0xa0>)
 80059b4:	4a0a      	ldr	r2, [pc, #40]	@ (80059e0 <ReadBatteryVoltage+0xa4>)
 80059b6:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80059b8:	4b08      	ldr	r3, [pc, #32]	@ (80059dc <ReadBatteryVoltage+0xa0>)
 80059ba:	4a10      	ldr	r2, [pc, #64]	@ (80059fc <ReadBatteryVoltage+0xc0>)
 80059bc:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80059be:	4a07      	ldr	r2, [pc, #28]	@ (80059dc <ReadBatteryVoltage+0xa0>)
 80059c0:	4b08      	ldr	r3, [pc, #32]	@ (80059e4 <ReadBatteryVoltage+0xa8>)
 80059c2:	0011      	movs	r1, r2
 80059c4:	0018      	movs	r0, r3
 80059c6:	f006 f827 	bl	800ba18 <HAL_ADC_ConfigChannel>
 80059ca:	1e03      	subs	r3, r0, #0
 80059cc:	d001      	beq.n	80059d2 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 80059ce:	f001 f8a1 	bl	8006b14 <Error_Handler>
   }
   return trueValue;
 80059d2:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <ReadBatteryVoltage+0xbc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 }
 80059d6:	1c18      	adds	r0, r3, #0
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000c3c 	.word	0x20000c3c
 80059e0:	38004000 	.word	0x38004000
 80059e4:	20000c5c 	.word	0x20000c5c
 80059e8:	20000024 	.word	0x20000024
 80059ec:	00000fff 	.word	0x00000fff
 80059f0:	20000c44 	.word	0x20000c44
 80059f4:	447a0000 	.word	0x447a0000
 80059f8:	20000c48 	.word	0x20000c48
 80059fc:	00001001 	.word	0x00001001

08005a00 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005a04:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <ReadSolarVoltage+0xa4>)
 8005a06:	4a28      	ldr	r2, [pc, #160]	@ (8005aa8 <ReadSolarVoltage+0xa8>)
 8005a08:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <ReadSolarVoltage+0xa4>)
 8005a0c:	2280      	movs	r2, #128	@ 0x80
 8005a0e:	0152      	lsls	r2, r2, #5
 8005a10:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005a12:	4a24      	ldr	r2, [pc, #144]	@ (8005aa4 <ReadSolarVoltage+0xa4>)
 8005a14:	4b25      	ldr	r3, [pc, #148]	@ (8005aac <ReadSolarVoltage+0xac>)
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f005 fffd 	bl	800ba18 <HAL_ADC_ConfigChannel>
 8005a1e:	1e03      	subs	r3, r0, #0
 8005a20:	d001      	beq.n	8005a26 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005a22:	f001 f877 	bl	8006b14 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005a26:	4b21      	ldr	r3, [pc, #132]	@ (8005aac <ReadSolarVoltage+0xac>)
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f005 fef9 	bl	800b820 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005aac <ReadSolarVoltage+0xac>)
 8005a30:	2101      	movs	r1, #1
 8005a32:	0018      	movs	r0, r3
 8005a34:	f005 ff48 	bl	800b8c8 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005a38:	4b1c      	ldr	r3, [pc, #112]	@ (8005aac <ReadSolarVoltage+0xac>)
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f005 ffe0 	bl	800ba00 <HAL_ADC_GetValue>
 8005a40:	0002      	movs	r2, r0
 8005a42:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <ReadSolarVoltage+0xb0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	435a      	muls	r2, r3
 8005a48:	0013      	movs	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	4919      	ldr	r1, [pc, #100]	@ (8005ab4 <ReadSolarVoltage+0xb4>)
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7fa fb9d 	bl	8000190 <__udivsi3>
 8005a56:	0003      	movs	r3, r0
 8005a58:	001a      	movs	r2, r3
 8005a5a:	4b17      	ldr	r3, [pc, #92]	@ (8005ab8 <ReadSolarVoltage+0xb8>)
 8005a5c:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005a5e:	4b16      	ldr	r3, [pc, #88]	@ (8005ab8 <ReadSolarVoltage+0xb8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7fb fdf6 	bl	8001654 <__aeabi_ui2f>
 8005a68:	1c03      	adds	r3, r0, #0
 8005a6a:	4914      	ldr	r1, [pc, #80]	@ (8005abc <ReadSolarVoltage+0xbc>)
 8005a6c:	1c18      	adds	r0, r3, #0
 8005a6e:	f7fb f8a7 	bl	8000bc0 <__aeabi_fdiv>
 8005a72:	1c03      	adds	r3, r0, #0
 8005a74:	1c1a      	adds	r2, r3, #0
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <ReadSolarVoltage+0xc0>)
 8005a78:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <ReadSolarVoltage+0xa4>)
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa8 <ReadSolarVoltage+0xa8>)
 8005a7e:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005a80:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <ReadSolarVoltage+0xa4>)
 8005a82:	4a10      	ldr	r2, [pc, #64]	@ (8005ac4 <ReadSolarVoltage+0xc4>)
 8005a84:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005a86:	4a07      	ldr	r2, [pc, #28]	@ (8005aa4 <ReadSolarVoltage+0xa4>)
 8005a88:	4b08      	ldr	r3, [pc, #32]	@ (8005aac <ReadSolarVoltage+0xac>)
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f005 ffc3 	bl	800ba18 <HAL_ADC_ConfigChannel>
 8005a92:	1e03      	subs	r3, r0, #0
 8005a94:	d001      	beq.n	8005a9a <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005a96:	f001 f83d 	bl	8006b14 <Error_Handler>
   }
   return trueValue;
 8005a9a:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <ReadSolarVoltage+0xc0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 }
 8005a9e:	1c18      	adds	r0, r3, #0
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000c3c 	.word	0x20000c3c
 8005aa8:	3c008000 	.word	0x3c008000
 8005aac:	20000c5c 	.word	0x20000c5c
 8005ab0:	20000024 	.word	0x20000024
 8005ab4:	00000fff 	.word	0x00000fff
 8005ab8:	20000c4c 	.word	0x20000c4c
 8005abc:	447a0000 	.word	0x447a0000
 8005ac0:	20000c50 	.word	0x20000c50
 8005ac4:	00001001 	.word	0x00001001

08005ac8 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005acc:	23a0      	movs	r3, #160	@ 0xa0
 8005ace:	05db      	lsls	r3, r3, #23
 8005ad0:	2180      	movs	r1, #128	@ 0x80
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f006 ff26 	bl	800c924 <HAL_GPIO_ReadPin>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	1e5a      	subs	r2, r3, #1
 8005adc:	4193      	sbcs	r3, r2
 8005ade:	b2db      	uxtb	r3, r3
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005aea:	2380      	movs	r3, #128	@ 0x80
 8005aec:	021a      	lsls	r2, r3, #8
 8005aee:	23a0      	movs	r3, #160	@ 0xa0
 8005af0:	05db      	lsls	r3, r3, #23
 8005af2:	0011      	movs	r1, r2
 8005af4:	0018      	movs	r0, r3
 8005af6:	f006 ff15 	bl	800c924 <HAL_GPIO_ReadPin>
 8005afa:	0003      	movs	r3, r0
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	4193      	sbcs	r3, r2
 8005b00:	b2db      	uxtb	r3, r3
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <UserButton_Pressed+0x1c>)
 8005b0e:	2104      	movs	r1, #4
 8005b10:	0018      	movs	r0, r3
 8005b12:	f006 ff07 	bl	800c924 <HAL_GPIO_ReadPin>
 8005b16:	0003      	movs	r3, r0
 8005b18:	425a      	negs	r2, r3
 8005b1a:	4153      	adcs	r3, r2
 8005b1c:	b2db      	uxtb	r3, r3
}
 8005b1e:	0018      	movs	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	50000c00 	.word	0x50000c00

08005b28 <RTC_SetTime>:
static Clock RealTime = {.Hours = 0, .Minutes = 0, .Seconds = 0};
static Clock NextAction = {.Hours = 0, .Minutes = 0, .Seconds = 0};
RTC_HandleTypeDef* RealTime_Handle = NULL;

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b089      	sub	sp, #36	@ 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	000c      	movs	r4, r1
 8005b32:	0010      	movs	r0, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	1cfb      	adds	r3, r7, #3
 8005b38:	1c22      	adds	r2, r4, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	1cbb      	adds	r3, r7, #2
 8005b3e:	1c02      	adds	r2, r0, #0
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	1c7b      	adds	r3, r7, #1
 8005b44:	1c0a      	adds	r2, r1, #0
 8005b46:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8005b48:	240c      	movs	r4, #12
 8005b4a:	193b      	adds	r3, r7, r4
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	2314      	movs	r3, #20
 8005b50:	001a      	movs	r2, r3
 8005b52:	2100      	movs	r1, #0
 8005b54:	f015 faee 	bl	801b134 <memset>

    sTime.Hours = hours;
 8005b58:	0021      	movs	r1, r4
 8005b5a:	187b      	adds	r3, r7, r1
 8005b5c:	1cfa      	adds	r2, r7, #3
 8005b5e:	7812      	ldrb	r2, [r2, #0]
 8005b60:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	1cba      	adds	r2, r7, #2
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	1c7a      	adds	r2, r7, #1
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	2200      	movs	r2, #0
 8005b76:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	2200      	movs	r2, #0
 8005b82:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8005b84:	1879      	adds	r1, r7, r1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f00c f876 	bl	8011c7c <HAL_RTC_SetTime>
        // Foutafhandeling
    }
}
 8005b90:	46c0      	nop			@ (mov r8, r8)
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b009      	add	sp, #36	@ 0x24
 8005b96:	bd90      	pop	{r4, r7, pc}

08005b98 <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 8005ba0:	4b08      	ldr	r3, [pc, #32]	@ (8005bc4 <InitClock+0x2c>)
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 8005ba6:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <InitClock+0x2c>)
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	4b07      	ldr	r3, [pc, #28]	@ (8005bc8 <InitClock+0x30>)
 8005bac:	7819      	ldrb	r1, [r3, #0]
 8005bae:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <InitClock+0x30>)
 8005bb0:	785a      	ldrb	r2, [r3, #1]
 8005bb2:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <InitClock+0x30>)
 8005bb4:	789b      	ldrb	r3, [r3, #2]
 8005bb6:	f7ff ffb7 	bl	8005b28 <RTC_SetTime>
}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b002      	add	sp, #8
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	20000c58 	.word	0x20000c58
 8005bc8:	20000c54 	.word	0x20000c54

08005bcc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005bd2:	003b      	movs	r3, r7
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	001a      	movs	r2, r3
 8005bda:	2100      	movs	r1, #0
 8005bdc:	f015 faaa 	bl	801b134 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005be0:	4b30      	ldr	r3, [pc, #192]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005be2:	4a31      	ldr	r2, [pc, #196]	@ (8005ca8 <MX_ADC_Init+0xdc>)
 8005be4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005be6:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005bec:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005bee:	22c0      	movs	r2, #192	@ 0xc0
 8005bf0:	0612      	lsls	r2, r2, #24
 8005bf2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005c00:	4b28      	ldr	r3, [pc, #160]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c06:	4b27      	ldr	r3, [pc, #156]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005c0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c0e:	2220      	movs	r2, #32
 8005c10:	2100      	movs	r1, #0
 8005c12:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005c14:	4b23      	ldr	r3, [pc, #140]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c16:	2221      	movs	r2, #33	@ 0x21
 8005c18:	2101      	movs	r1, #1
 8005c1a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c22:	4b20      	ldr	r3, [pc, #128]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c24:	22c2      	movs	r2, #194	@ 0xc2
 8005c26:	32ff      	adds	r2, #255	@ 0xff
 8005c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c2c:	222c      	movs	r2, #44	@ 0x2c
 8005c2e:	2100      	movs	r1, #0
 8005c30:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c32:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c34:	2204      	movs	r2, #4
 8005c36:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005c38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005c3e:	4b19      	ldr	r3, [pc, #100]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8005c44:	4b17      	ldr	r3, [pc, #92]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005c4a:	4b16      	ldr	r3, [pc, #88]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005c50:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c52:	0018      	movs	r0, r3
 8005c54:	f005 fc70 	bl	800b538 <HAL_ADC_Init>
 8005c58:	1e03      	subs	r3, r0, #0
 8005c5a:	d001      	beq.n	8005c60 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8005c5c:	f000 ff5a 	bl	8006b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005c60:	003b      	movs	r3, r7
 8005c62:	4a12      	ldr	r2, [pc, #72]	@ (8005cac <MX_ADC_Init+0xe0>)
 8005c64:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005c66:	003b      	movs	r3, r7
 8005c68:	2280      	movs	r2, #128	@ 0x80
 8005c6a:	0152      	lsls	r2, r2, #5
 8005c6c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005c6e:	003a      	movs	r2, r7
 8005c70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c72:	0011      	movs	r1, r2
 8005c74:	0018      	movs	r0, r3
 8005c76:	f005 fecf 	bl	800ba18 <HAL_ADC_ConfigChannel>
 8005c7a:	1e03      	subs	r3, r0, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8005c7e:	f000 ff49 	bl	8006b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005c82:	003b      	movs	r3, r7
 8005c84:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb0 <MX_ADC_Init+0xe4>)
 8005c86:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005c88:	003a      	movs	r2, r7
 8005c8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <MX_ADC_Init+0xd8>)
 8005c8c:	0011      	movs	r1, r2
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f005 fec2 	bl	800ba18 <HAL_ADC_ConfigChannel>
 8005c94:	1e03      	subs	r3, r0, #0
 8005c96:	d001      	beq.n	8005c9c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005c98:	f000 ff3c 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005c9c:	46c0      	nop			@ (mov r8, r8)
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b002      	add	sp, #8
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000c5c 	.word	0x20000c5c
 8005ca8:	40012400 	.word	0x40012400
 8005cac:	38004000 	.word	0x38004000
 8005cb0:	3c008000 	.word	0x3c008000

08005cb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b089      	sub	sp, #36	@ 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cbc:	240c      	movs	r4, #12
 8005cbe:	193b      	adds	r3, r7, r4
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	2314      	movs	r3, #20
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f015 fa34 	bl	801b134 <memset>
  if(adcHandle->Instance==ADC1)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a14      	ldr	r2, [pc, #80]	@ (8005d24 <HAL_ADC_MspInit+0x70>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d121      	bne.n	8005d1a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005cd6:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <HAL_ADC_MspInit+0x74>)
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cda:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <HAL_ADC_MspInit+0x74>)
 8005cdc:	2180      	movs	r1, #128	@ 0x80
 8005cde:	0089      	lsls	r1, r1, #2
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ce4:	4b10      	ldr	r3, [pc, #64]	@ (8005d28 <HAL_ADC_MspInit+0x74>)
 8005ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <HAL_ADC_MspInit+0x74>)
 8005cea:	2104      	movs	r1, #4
 8005cec:	430a      	orrs	r2, r1
 8005cee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <HAL_ADC_MspInit+0x74>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005cfc:	193b      	adds	r3, r7, r4
 8005cfe:	2230      	movs	r2, #48	@ 0x30
 8005d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d02:	193b      	adds	r3, r7, r4
 8005d04:	2203      	movs	r2, #3
 8005d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d08:	193b      	adds	r3, r7, r4
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d0e:	193b      	adds	r3, r7, r4
 8005d10:	4a06      	ldr	r2, [pc, #24]	@ (8005d2c <HAL_ADC_MspInit+0x78>)
 8005d12:	0019      	movs	r1, r3
 8005d14:	0010      	movs	r0, r2
 8005d16:	f006 fc87 	bl	800c628 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005d1a:	46c0      	nop			@ (mov r8, r8)
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b009      	add	sp, #36	@ 0x24
 8005d20:	bd90      	pop	{r4, r7, pc}
 8005d22:	46c0      	nop			@ (mov r8, r8)
 8005d24:	40012400 	.word	0x40012400
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	50000800 	.word	0x50000800

08005d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d36:	4b10      	ldr	r3, [pc, #64]	@ (8005d78 <MX_DMA_Init+0x48>)
 8005d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <MX_DMA_Init+0x48>)
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d42:	4b0d      	ldr	r3, [pc, #52]	@ (8005d78 <MX_DMA_Init+0x48>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d46:	2201      	movs	r2, #1
 8005d48:	4013      	ands	r3, r2
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2100      	movs	r1, #0
 8005d52:	200a      	movs	r0, #10
 8005d54:	f006 f81a 	bl	800bd8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005d58:	200a      	movs	r0, #10
 8005d5a:	f006 f82c 	bl	800bdb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2103      	movs	r1, #3
 8005d62:	200b      	movs	r0, #11
 8005d64:	f006 f812 	bl	800bd8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005d68:	200b      	movs	r0, #11
 8005d6a:	f006 f824 	bl	800bdb6 <HAL_NVIC_EnableIRQ>

}
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b002      	add	sp, #8
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	40021000 	.word	0x40021000

08005d7c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d8c:	d901      	bls.n	8005d92 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8005d8e:	237f      	movs	r3, #127	@ 0x7f
 8005d90:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8005d92:	2017      	movs	r0, #23
 8005d94:	183b      	adds	r3, r7, r0
 8005d96:	490d      	ldr	r1, [pc, #52]	@ (8005dcc <accessLUT10log10+0x50>)
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	188a      	adds	r2, r1, r2
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8005da0:	0001      	movs	r1, r0
 8005da2:	187b      	adds	r3, r7, r1
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2206      	movs	r2, #6
 8005da8:	4113      	asrs	r3, r2
 8005daa:	001a      	movs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2106      	movs	r1, #6
 8005dba:	408b      	lsls	r3, r1
 8005dbc:	1ad2      	subs	r2, r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
}
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b006      	add	sp, #24
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	0801f108 	.word	0x0801f108

08005dd0 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8005dd0:	b5b0      	push	{r4, r5, r7, lr}
 8005dd2:	b090      	sub	sp, #64	@ 0x40
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6138      	str	r0, [r7, #16]
 8005dd8:	6179      	str	r1, [r7, #20]
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8005dde:	2308      	movs	r3, #8
 8005de0:	001a      	movs	r2, r3
 8005de2:	3a20      	subs	r2, #32
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	db03      	blt.n	8005df0 <efficient10log10+0x20>
 8005de8:	2101      	movs	r1, #1
 8005dea:	4091      	lsls	r1, r2
 8005dec:	000d      	movs	r5, r1
 8005dee:	e008      	b.n	8005e02 <efficient10log10+0x32>
 8005df0:	2220      	movs	r2, #32
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	2101      	movs	r1, #1
 8005df6:	40d1      	lsrs	r1, r2
 8005df8:	000a      	movs	r2, r1
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4099      	lsls	r1, r3
 8005dfe:	000d      	movs	r5, r1
 8005e00:	4315      	orrs	r5, r2
 8005e02:	2201      	movs	r2, #1
 8005e04:	409a      	lsls	r2, r3
 8005e06:	0014      	movs	r4, r2
 8005e08:	2201      	movs	r2, #1
 8005e0a:	4252      	negs	r2, r2
 8005e0c:	17d3      	asrs	r3, r2, #31
 8005e0e:	1912      	adds	r2, r2, r4
 8005e10:	416b      	adcs	r3, r5
 8005e12:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e14:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8005e16:	2336      	movs	r3, #54	@ 0x36
 8005e18:	2208      	movs	r2, #8
 8005e1a:	189b      	adds	r3, r3, r2
 8005e1c:	19db      	adds	r3, r3, r7
 8005e1e:	2200      	movs	r2, #0
 8005e20:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8005e22:	e017      	b.n	8005e54 <efficient10log10+0x84>
    {
        P = P >> 1;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	07db      	lsls	r3, r3, #31
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	0852      	lsrs	r2, r2, #1
 8005e2c:	603a      	str	r2, [r7, #0]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	603a      	str	r2, [r7, #0]
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	687c      	ldr	r4, [r7, #4]
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	617c      	str	r4, [r7, #20]
        bShift++;
 8005e42:	2136      	movs	r1, #54	@ 0x36
 8005e44:	2008      	movs	r0, #8
 8005e46:	180b      	adds	r3, r1, r0
 8005e48:	19db      	adds	r3, r3, r7
 8005e4a:	881a      	ldrh	r2, [r3, #0]
 8005e4c:	180b      	adds	r3, r1, r0
 8005e4e:	19db      	adds	r3, r3, r7
 8005e50:	3201      	adds	r2, #1
 8005e52:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d8e3      	bhi.n	8005e24 <efficient10log10+0x54>
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d103      	bne.n	8005e6c <efficient10log10+0x9c>
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d8db      	bhi.n	8005e24 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	2308      	movs	r3, #8
 8005e70:	3b01      	subs	r3, #1
 8005e72:	2101      	movs	r1, #1
 8005e74:	4099      	lsls	r1, r3
 8005e76:	000b      	movs	r3, r1
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8005e84:	231c      	movs	r3, #28
 8005e86:	2408      	movs	r4, #8
 8005e88:	191b      	adds	r3, r3, r4
 8005e8a:	19da      	adds	r2, r3, r7
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	191b      	adds	r3, r3, r4
 8005e90:	19d9      	adds	r1, r3, r7
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7ff ff71 	bl	8005d7c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8005e9a:	2215      	movs	r2, #21
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8005ea0:	2036      	movs	r0, #54	@ 0x36
 8005ea2:	1902      	adds	r2, r0, r4
 8005ea4:	19d2      	adds	r2, r2, r7
 8005ea6:	8812      	ldrh	r2, [r2, #0]
 8005ea8:	2103      	movs	r1, #3
 8005eaa:	434a      	muls	r2, r1
 8005eac:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8005eae:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8005eb0:	0021      	movs	r1, r4
 8005eb2:	1843      	adds	r3, r0, r1
 8005eb4:	19db      	adds	r3, r3, r7
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4353      	muls	r3, r2
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	4113      	asrs	r3, r2
 8005ec0:	001a      	movs	r2, r3
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8005ec6:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8005ec8:	2314      	movs	r3, #20
 8005eca:	185b      	adds	r3, r3, r1
 8005ecc:	19da      	adds	r2, r3, r7
 8005ece:	2318      	movs	r3, #24
 8005ed0:	185b      	adds	r3, r3, r1
 8005ed2:	19db      	adds	r3, r3, r7
 8005ed4:	0011      	movs	r1, r2
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f000 f80a 	bl	8005ef0 <correctIntFracNumber>
    integerPart[0] = intPart;
 8005edc:	6a3a      	ldr	r2, [r7, #32]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	46c0      	nop			@ (mov r8, r8)
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b010      	add	sp, #64	@ 0x40
 8005eee:	bdb0      	pop	{r4, r5, r7, pc}

08005ef0 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8005efa:	e00a      	b.n	8005f12 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3b0a      	subs	r3, #10
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b09      	cmp	r3, #9
 8005f18:	dcf0      	bgt.n	8005efc <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8005f1a:	e00a      	b.n	8005f32 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	1e5a      	subs	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330a      	adds	r3, #10
 8005f2c:	001a      	movs	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3309      	adds	r3, #9
 8005f38:	dbf0      	blt.n	8005f1c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da0f      	bge.n	8005f62 <correctIntFracNumber+0x72>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dd0b      	ble.n	8005f62 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3b0a      	subs	r3, #10
 8005f5a:	001a      	movs	r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8005f60:	e012      	b.n	8005f88 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	dd0e      	ble.n	8005f88 <correctIntFracNumber+0x98>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da0a      	bge.n	8005f88 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	1e5a      	subs	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330a      	adds	r3, #10
 8005f82:	001a      	movs	r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	601a      	str	r2, [r3, #0]
}
 8005f88:	46c0      	nop			@ (mov r8, r8)
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b002      	add	sp, #8
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd0 <Gadget_Init+0x40>)
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	f001 f999 	bl	80072d8 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	0018      	movs	r0, r3
 8005fae:	f000 fe0b 	bl	8006bc8 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f7fd fcc5 	bl	8003944 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005fba:	4a06      	ldr	r2, [pc, #24]	@ (8005fd4 <Gadget_Init+0x44>)
 8005fbc:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <Gadget_Init+0x48>)
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	2003      	movs	r0, #3
 8005fc2:	f004 fecb 	bl	800ad5c <CreateLine>
}
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b004      	add	sp, #16
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			@ (mov r8, r8)
 8005fd0:	20000028 	.word	0x20000028
 8005fd4:	0801e838 	.word	0x0801e838
 8005fd8:	0801e84c 	.word	0x0801e84c

08005fdc <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  Meas_Test();
 8005fe0:	f000 ff2a 	bl	8006e38 <Meas_Test>
}
 8005fe4:	46c0      	nop			@ (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <UpkeepGadget>:

bool UpkeepGadget() {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8005ff2:	f001 f8e1 	bl	80071b8 <Meas_Upkeep>
 8005ff6:	0003      	movs	r3, r0
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8006038 <UpkeepGadget+0x4c>)
 8005ffc:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8005ffe:	f000 ffc1 	bl	8006f84 <Mic_Upkeep>
 8006002:	0003      	movs	r3, r0
 8006004:	001a      	movs	r2, r3
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <UpkeepGadget+0x50>)
 8006008:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 800600a:	4b0b      	ldr	r3, [pc, #44]	@ (8006038 <UpkeepGadget+0x4c>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b04      	cmp	r3, #4
 8006010:	d103      	bne.n	800601a <UpkeepGadget+0x2e>
 8006012:	4b0a      	ldr	r3, [pc, #40]	@ (800603c <UpkeepGadget+0x50>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d001      	beq.n	800601e <UpkeepGadget+0x32>
 800601a:	2201      	movs	r2, #1
 800601c:	e000      	b.n	8006020 <UpkeepGadget+0x34>
 800601e:	2200      	movs	r2, #0
 8006020:	1dfb      	adds	r3, r7, #7
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	2101      	movs	r1, #1
 8006028:	400a      	ands	r2, r1
 800602a:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 800602c:	1dfb      	adds	r3, r7, #7
 800602e:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000cb8 	.word	0x20000cb8
 800603c:	20000cb9 	.word	0x20000cb9

08006040 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0011      	movs	r1, r2
 8006050:	0018      	movs	r0, r3
 8006052:	f002 fa7f 	bl	8008554 <SGP_Init>
}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	b002      	add	sp, #8
 800605c:	bd80      	pop	{r7, pc}

0800605e <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 800605e:	b580      	push	{r7, lr}
 8006060:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006062:	f002 fa91 	bl	8008588 <SGP_StartMeasurement>
}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0018      	movs	r0, r3
 8006078:	f002 faf6 	bl	8008668 <SGP_GetMeasurementValues>
 800607c:	0003      	movs	r3, r0
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b002      	add	sp, #8
 8006084:	bd80      	pop	{r7, pc}

08006086 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8006086:	b580      	push	{r7, lr}
 8006088:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 800608a:	f002 fd03 	bl	8008a94 <SGP_DeviceConnected>
 800608e:	0003      	movs	r3, r0
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b08b      	sub	sp, #44	@ 0x2c
 800609c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800609e:	2414      	movs	r4, #20
 80060a0:	193b      	adds	r3, r7, r4
 80060a2:	0018      	movs	r0, r3
 80060a4:	2314      	movs	r3, #20
 80060a6:	001a      	movs	r2, r3
 80060a8:	2100      	movs	r1, #0
 80060aa:	f015 f843 	bl	801b134 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ae:	4b7c      	ldr	r3, [pc, #496]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b2:	4b7b      	ldr	r3, [pc, #492]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060b4:	2104      	movs	r1, #4
 80060b6:	430a      	orrs	r2, r1
 80060b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060ba:	4b79      	ldr	r3, [pc, #484]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	2204      	movs	r2, #4
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060c6:	4b76      	ldr	r3, [pc, #472]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ca:	4b75      	ldr	r3, [pc, #468]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060cc:	2180      	movs	r1, #128	@ 0x80
 80060ce:	430a      	orrs	r2, r1
 80060d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060d2:	4b73      	ldr	r3, [pc, #460]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	2280      	movs	r2, #128	@ 0x80
 80060d8:	4013      	ands	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060de:	4b70      	ldr	r3, [pc, #448]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e2:	4b6f      	ldr	r3, [pc, #444]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060e4:	2101      	movs	r1, #1
 80060e6:	430a      	orrs	r2, r1
 80060e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060ea:	4b6d      	ldr	r3, [pc, #436]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ee:	2201      	movs	r2, #1
 80060f0:	4013      	ands	r3, r2
 80060f2:	60bb      	str	r3, [r7, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060f6:	4b6a      	ldr	r3, [pc, #424]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	4b69      	ldr	r3, [pc, #420]	@ (80062a0 <MX_GPIO_Init+0x208>)
 80060fc:	2102      	movs	r1, #2
 80060fe:	430a      	orrs	r2, r1
 8006100:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006102:	4b67      	ldr	r3, [pc, #412]	@ (80062a0 <MX_GPIO_Init+0x208>)
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	2202      	movs	r2, #2
 8006108:	4013      	ands	r3, r2
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800610e:	4b64      	ldr	r3, [pc, #400]	@ (80062a0 <MX_GPIO_Init+0x208>)
 8006110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006112:	4b63      	ldr	r3, [pc, #396]	@ (80062a0 <MX_GPIO_Init+0x208>)
 8006114:	2108      	movs	r1, #8
 8006116:	430a      	orrs	r2, r1
 8006118:	62da      	str	r2, [r3, #44]	@ 0x2c
 800611a:	4b61      	ldr	r3, [pc, #388]	@ (80062a0 <MX_GPIO_Init+0x208>)
 800611c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611e:	2208      	movs	r2, #8
 8006120:	4013      	ands	r3, r2
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006126:	4b5f      	ldr	r3, [pc, #380]	@ (80062a4 <MX_GPIO_Init+0x20c>)
 8006128:	2201      	movs	r2, #1
 800612a:	2101      	movs	r1, #1
 800612c:	0018      	movs	r0, r3
 800612e:	f006 fc16 	bl	800c95e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006132:	4b5c      	ldr	r3, [pc, #368]	@ (80062a4 <MX_GPIO_Init+0x20c>)
 8006134:	2200      	movs	r2, #0
 8006136:	2102      	movs	r1, #2
 8006138:	0018      	movs	r0, r3
 800613a:	f006 fc10 	bl	800c95e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800613e:	495a      	ldr	r1, [pc, #360]	@ (80062a8 <MX_GPIO_Init+0x210>)
 8006140:	4b5a      	ldr	r3, [pc, #360]	@ (80062ac <MX_GPIO_Init+0x214>)
 8006142:	2201      	movs	r2, #1
 8006144:	0018      	movs	r0, r3
 8006146:	f006 fc0a 	bl	800c95e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800614a:	2380      	movs	r3, #128	@ 0x80
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	4858      	ldr	r0, [pc, #352]	@ (80062b0 <MX_GPIO_Init+0x218>)
 8006150:	2201      	movs	r2, #1
 8006152:	0019      	movs	r1, r3
 8006154:	f006 fc03 	bl	800c95e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006158:	2380      	movs	r3, #128	@ 0x80
 800615a:	015b      	lsls	r3, r3, #5
 800615c:	4854      	ldr	r0, [pc, #336]	@ (80062b0 <MX_GPIO_Init+0x218>)
 800615e:	2200      	movs	r2, #0
 8006160:	0019      	movs	r1, r3
 8006162:	f006 fbfc 	bl	800c95e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8006166:	193b      	adds	r3, r7, r4
 8006168:	4a52      	ldr	r2, [pc, #328]	@ (80062b4 <MX_GPIO_Init+0x21c>)
 800616a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800616c:	193b      	adds	r3, r7, r4
 800616e:	2203      	movs	r2, #3
 8006170:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	193b      	adds	r3, r7, r4
 8006174:	2200      	movs	r2, #0
 8006176:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006178:	193b      	adds	r3, r7, r4
 800617a:	4a4d      	ldr	r2, [pc, #308]	@ (80062b0 <MX_GPIO_Init+0x218>)
 800617c:	0019      	movs	r1, r3
 800617e:	0010      	movs	r0, r2
 8006180:	f006 fa52 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006184:	193b      	adds	r3, r7, r4
 8006186:	2203      	movs	r2, #3
 8006188:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800618a:	193b      	adds	r3, r7, r4
 800618c:	2201      	movs	r2, #1
 800618e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006190:	193b      	adds	r3, r7, r4
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006196:	193b      	adds	r3, r7, r4
 8006198:	2200      	movs	r2, #0
 800619a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800619c:	193b      	adds	r3, r7, r4
 800619e:	4a41      	ldr	r2, [pc, #260]	@ (80062a4 <MX_GPIO_Init+0x20c>)
 80061a0:	0019      	movs	r1, r3
 80061a2:	0010      	movs	r0, r2
 80061a4:	f006 fa40 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	2270      	movs	r2, #112	@ 0x70
 80061ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	2203      	movs	r2, #3
 80061b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b4:	193b      	adds	r3, r7, r4
 80061b6:	2200      	movs	r2, #0
 80061b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ba:	193a      	adds	r2, r7, r4
 80061bc:	23a0      	movs	r3, #160	@ 0xa0
 80061be:	05db      	lsls	r3, r3, #23
 80061c0:	0011      	movs	r1, r2
 80061c2:	0018      	movs	r0, r3
 80061c4:	f006 fa30 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 80061c8:	193b      	adds	r3, r7, r4
 80061ca:	4a3b      	ldr	r2, [pc, #236]	@ (80062b8 <MX_GPIO_Init+0x220>)
 80061cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	2200      	movs	r2, #0
 80061d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d4:	193b      	adds	r3, r7, r4
 80061d6:	2200      	movs	r2, #0
 80061d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061da:	193a      	adds	r2, r7, r4
 80061dc:	23a0      	movs	r3, #160	@ 0xa0
 80061de:	05db      	lsls	r3, r3, #23
 80061e0:	0011      	movs	r1, r2
 80061e2:	0018      	movs	r0, r3
 80061e4:	f006 fa20 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80061e8:	193b      	adds	r3, r7, r4
 80061ea:	4a2f      	ldr	r2, [pc, #188]	@ (80062a8 <MX_GPIO_Init+0x210>)
 80061ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061ee:	193b      	adds	r3, r7, r4
 80061f0:	2201      	movs	r2, #1
 80061f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f4:	193b      	adds	r3, r7, r4
 80061f6:	2200      	movs	r2, #0
 80061f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061fa:	193b      	adds	r3, r7, r4
 80061fc:	2200      	movs	r2, #0
 80061fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006200:	193b      	adds	r3, r7, r4
 8006202:	4a2a      	ldr	r2, [pc, #168]	@ (80062ac <MX_GPIO_Init+0x214>)
 8006204:	0019      	movs	r1, r3
 8006206:	0010      	movs	r0, r2
 8006208:	f006 fa0e 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800620c:	193b      	adds	r3, r7, r4
 800620e:	4a2b      	ldr	r2, [pc, #172]	@ (80062bc <MX_GPIO_Init+0x224>)
 8006210:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006212:	193b      	adds	r3, r7, r4
 8006214:	2203      	movs	r2, #3
 8006216:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006218:	193b      	adds	r3, r7, r4
 800621a:	2200      	movs	r2, #0
 800621c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800621e:	193b      	adds	r3, r7, r4
 8006220:	4a22      	ldr	r2, [pc, #136]	@ (80062ac <MX_GPIO_Init+0x214>)
 8006222:	0019      	movs	r1, r3
 8006224:	0010      	movs	r0, r2
 8006226:	f006 f9ff 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800622a:	0021      	movs	r1, r4
 800622c:	187b      	adds	r3, r7, r1
 800622e:	2280      	movs	r2, #128	@ 0x80
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006234:	000c      	movs	r4, r1
 8006236:	193b      	adds	r3, r7, r4
 8006238:	2200      	movs	r2, #0
 800623a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800623c:	193b      	adds	r3, r7, r4
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006242:	193b      	adds	r3, r7, r4
 8006244:	4a1a      	ldr	r2, [pc, #104]	@ (80062b0 <MX_GPIO_Init+0x218>)
 8006246:	0019      	movs	r1, r3
 8006248:	0010      	movs	r0, r2
 800624a:	f006 f9ed 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800624e:	0021      	movs	r1, r4
 8006250:	187b      	adds	r3, r7, r1
 8006252:	22c0      	movs	r2, #192	@ 0xc0
 8006254:	0152      	lsls	r2, r2, #5
 8006256:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006258:	000c      	movs	r4, r1
 800625a:	193b      	adds	r3, r7, r4
 800625c:	2201      	movs	r2, #1
 800625e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006260:	193b      	adds	r3, r7, r4
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006266:	193b      	adds	r3, r7, r4
 8006268:	2200      	movs	r2, #0
 800626a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626c:	193b      	adds	r3, r7, r4
 800626e:	4a10      	ldr	r2, [pc, #64]	@ (80062b0 <MX_GPIO_Init+0x218>)
 8006270:	0019      	movs	r1, r3
 8006272:	0010      	movs	r0, r2
 8006274:	f006 f9d8 	bl	800c628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006278:	0021      	movs	r1, r4
 800627a:	187b      	adds	r3, r7, r1
 800627c:	2204      	movs	r2, #4
 800627e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006280:	187b      	adds	r3, r7, r1
 8006282:	2200      	movs	r2, #0
 8006284:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006286:	187b      	adds	r3, r7, r1
 8006288:	2201      	movs	r2, #1
 800628a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800628c:	187b      	adds	r3, r7, r1
 800628e:	4a0c      	ldr	r2, [pc, #48]	@ (80062c0 <MX_GPIO_Init+0x228>)
 8006290:	0019      	movs	r1, r3
 8006292:	0010      	movs	r0, r2
 8006294:	f006 f9c8 	bl	800c628 <HAL_GPIO_Init>

}
 8006298:	46c0      	nop			@ (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b00b      	add	sp, #44	@ 0x2c
 800629e:	bd90      	pop	{r4, r7, pc}
 80062a0:	40021000 	.word	0x40021000
 80062a4:	50001c00 	.word	0x50001c00
 80062a8:	00000301 	.word	0x00000301
 80062ac:	50000400 	.word	0x50000400
 80062b0:	50000800 	.word	0x50000800
 80062b4:	0000200c 	.word	0x0000200c
 80062b8:	00008180 	.word	0x00008180
 80062bc:	0000403e 	.word	0x0000403e
 80062c0:	50000c00 	.word	0x50000c00

080062c4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2100      	movs	r1, #0
 80062d2:	0018      	movs	r0, r3
 80062d4:	f00b ffca 	bl	801226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2108      	movs	r1, #8
 80062dc:	0018      	movs	r0, r3
 80062de:	f00b ffc5 	bl	801226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	210c      	movs	r1, #12
 80062e6:	0018      	movs	r0, r3
 80062e8:	f00b ffc0 	bl	801226c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80062ec:	2380      	movs	r3, #128	@ 0x80
 80062ee:	05db      	lsls	r3, r3, #23
 80062f0:	22fa      	movs	r2, #250	@ 0xfa
 80062f2:	0112      	lsls	r2, r2, #4
 80062f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80062f6:	2380      	movs	r3, #128	@ 0x80
 80062f8:	05db      	lsls	r3, r3, #23
 80062fa:	22fa      	movs	r2, #250	@ 0xfa
 80062fc:	0112      	lsls	r2, r2, #4
 80062fe:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	05db      	lsls	r3, r3, #23
 8006304:	22fa      	movs	r2, #250	@ 0xfa
 8006306:	0112      	lsls	r2, r2, #4
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800630a:	2380      	movs	r3, #128	@ 0x80
 800630c:	05db      	lsls	r3, r3, #23
 800630e:	22fa      	movs	r2, #250	@ 0xfa
 8006310:	0112      	lsls	r2, r2, #4
 8006312:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2100      	movs	r1, #0
 8006318:	0018      	movs	r0, r3
 800631a:	f00b ffa7 	bl	801226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2104      	movs	r1, #4
 8006322:	0018      	movs	r0, r3
 8006324:	f00b ffa2 	bl	801226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2108      	movs	r1, #8
 800632c:	0018      	movs	r0, r3
 800632e:	f00b ff9d 	bl	801226c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <GPIO_InitPWMLEDs+0x98>)
 8006334:	22fa      	movs	r2, #250	@ 0xfa
 8006336:	0112      	lsls	r2, r2, #4
 8006338:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800633a:	4b08      	ldr	r3, [pc, #32]	@ (800635c <GPIO_InitPWMLEDs+0x98>)
 800633c:	22fa      	movs	r2, #250	@ 0xfa
 800633e:	0112      	lsls	r2, r2, #4
 8006340:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006342:	4b06      	ldr	r3, [pc, #24]	@ (800635c <GPIO_InitPWMLEDs+0x98>)
 8006344:	22fa      	movs	r2, #250	@ 0xfa
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800634a:	4b04      	ldr	r3, [pc, #16]	@ (800635c <GPIO_InitPWMLEDs+0x98>)
 800634c:	22fa      	movs	r2, #250	@ 0xfa
 800634e:	0112      	lsls	r2, r2, #4
 8006350:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006352:	46c0      	nop			@ (mov r8, r8)
 8006354:	46bd      	mov	sp, r7
 8006356:	b002      	add	sp, #8
 8006358:	bd80      	pop	{r7, pc}
 800635a:	46c0      	nop			@ (mov r8, r8)
 800635c:	40000400 	.word	0x40000400

08006360 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	0011      	movs	r1, r2
 8006370:	0018      	movs	r0, r3
 8006372:	f004 fe4b 	bl	800b00c <HIDS_Init>
}
 8006376:	46c0      	nop			@ (mov r8, r8)
 8006378:	46bd      	mov	sp, r7
 800637a:	b002      	add	sp, #8
 800637c:	bd80      	pop	{r7, pc}

0800637e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800637e:	b580      	push	{r7, lr}
 8006380:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006382:	f004 fe65 	bl	800b050 <HIDS_StartMeasurement>
}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0011      	movs	r1, r2
 800639c:	0018      	movs	r0, r3
 800639e:	f004 ff3d 	bl	800b21c <HIDS_GetMeasurementValues>
 80063a2:	0003      	movs	r3, r0
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b002      	add	sp, #8
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 80063b0:	f004 fed8 	bl	800b164 <HIDS_DeviceConnected>
 80063b4:	0003      	movs	r3, r0
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80063c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006434 <MX_I2C1_Init+0x78>)
 80063c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80063c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006438 <MX_I2C1_Init+0x7c>)
 80063ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80063cc:	4b18      	ldr	r3, [pc, #96]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063d2:	4b17      	ldr	r3, [pc, #92]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063d8:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063da:	2200      	movs	r2, #0
 80063dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80063de:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80063e4:	4b12      	ldr	r3, [pc, #72]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063ea:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <MX_I2C1_Init+0x74>)
 80063f8:	0018      	movs	r0, r3
 80063fa:	f006 facd 	bl	800c998 <HAL_I2C_Init>
 80063fe:	1e03      	subs	r3, r0, #0
 8006400:	d001      	beq.n	8006406 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006402:	f000 fb87 	bl	8006b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006406:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <MX_I2C1_Init+0x74>)
 8006408:	2100      	movs	r1, #0
 800640a:	0018      	movs	r0, r3
 800640c:	f008 fa3c 	bl	800e888 <HAL_I2CEx_ConfigAnalogFilter>
 8006410:	1e03      	subs	r3, r0, #0
 8006412:	d001      	beq.n	8006418 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006414:	f000 fb7e 	bl	8006b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006418:	4b05      	ldr	r3, [pc, #20]	@ (8006430 <MX_I2C1_Init+0x74>)
 800641a:	2100      	movs	r1, #0
 800641c:	0018      	movs	r0, r3
 800641e:	f008 fa7f 	bl	800e920 <HAL_I2CEx_ConfigDigitalFilter>
 8006422:	1e03      	subs	r3, r0, #0
 8006424:	d001      	beq.n	800642a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006426:	f000 fb75 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20000cbc 	.word	0x20000cbc
 8006434:	40005400 	.word	0x40005400
 8006438:	00503d58 	.word	0x00503d58

0800643c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006440:	4b1b      	ldr	r3, [pc, #108]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006442:	4a1c      	ldr	r2, [pc, #112]	@ (80064b4 <MX_I2C2_Init+0x78>)
 8006444:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006446:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006448:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <MX_I2C2_Init+0x7c>)
 800644a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800644c:	4b18      	ldr	r3, [pc, #96]	@ (80064b0 <MX_I2C2_Init+0x74>)
 800644e:	2200      	movs	r2, #0
 8006450:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006452:	4b17      	ldr	r3, [pc, #92]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006454:	2201      	movs	r2, #1
 8006456:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006458:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <MX_I2C2_Init+0x74>)
 800645a:	2200      	movs	r2, #0
 800645c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800645e:	4b14      	ldr	r3, [pc, #80]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006460:	2200      	movs	r2, #0
 8006462:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006464:	4b12      	ldr	r3, [pc, #72]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006466:	2200      	movs	r2, #0
 8006468:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800646a:	4b11      	ldr	r3, [pc, #68]	@ (80064b0 <MX_I2C2_Init+0x74>)
 800646c:	2200      	movs	r2, #0
 800646e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006470:	4b0f      	ldr	r3, [pc, #60]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006472:	2200      	movs	r2, #0
 8006474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006476:	4b0e      	ldr	r3, [pc, #56]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006478:	0018      	movs	r0, r3
 800647a:	f006 fa8d 	bl	800c998 <HAL_I2C_Init>
 800647e:	1e03      	subs	r3, r0, #0
 8006480:	d001      	beq.n	8006486 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006482:	f000 fb47 	bl	8006b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006486:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <MX_I2C2_Init+0x74>)
 8006488:	2100      	movs	r1, #0
 800648a:	0018      	movs	r0, r3
 800648c:	f008 f9fc 	bl	800e888 <HAL_I2CEx_ConfigAnalogFilter>
 8006490:	1e03      	subs	r3, r0, #0
 8006492:	d001      	beq.n	8006498 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006494:	f000 fb3e 	bl	8006b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006498:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <MX_I2C2_Init+0x74>)
 800649a:	2100      	movs	r1, #0
 800649c:	0018      	movs	r0, r3
 800649e:	f008 fa3f 	bl	800e920 <HAL_I2CEx_ConfigDigitalFilter>
 80064a2:	1e03      	subs	r3, r0, #0
 80064a4:	d001      	beq.n	80064aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80064a6:	f000 fb35 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000d10 	.word	0x20000d10
 80064b4:	40005800 	.word	0x40005800
 80064b8:	00503d58 	.word	0x00503d58

080064bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b08b      	sub	sp, #44	@ 0x2c
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c4:	2414      	movs	r4, #20
 80064c6:	193b      	adds	r3, r7, r4
 80064c8:	0018      	movs	r0, r3
 80064ca:	2314      	movs	r3, #20
 80064cc:	001a      	movs	r2, r3
 80064ce:	2100      	movs	r1, #0
 80064d0:	f014 fe30 	bl	801b134 <memset>
  if(i2cHandle->Instance==I2C1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a5d      	ldr	r2, [pc, #372]	@ (8006650 <HAL_I2C_MspInit+0x194>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d000      	beq.n	80064e0 <HAL_I2C_MspInit+0x24>
 80064de:	e083      	b.n	80065e8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064e0:	4b5c      	ldr	r3, [pc, #368]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 80064e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 80064e6:	2102      	movs	r1, #2
 80064e8:	430a      	orrs	r2, r1
 80064ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064ec:	4b59      	ldr	r3, [pc, #356]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	2202      	movs	r2, #2
 80064f2:	4013      	ands	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064f8:	0021      	movs	r1, r4
 80064fa:	187b      	adds	r3, r7, r1
 80064fc:	22c0      	movs	r2, #192	@ 0xc0
 80064fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006500:	187b      	adds	r3, r7, r1
 8006502:	2212      	movs	r2, #18
 8006504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006506:	187b      	adds	r3, r7, r1
 8006508:	2200      	movs	r2, #0
 800650a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650c:	187b      	adds	r3, r7, r1
 800650e:	2203      	movs	r2, #3
 8006510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006512:	187b      	adds	r3, r7, r1
 8006514:	2201      	movs	r2, #1
 8006516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006518:	187b      	adds	r3, r7, r1
 800651a:	4a4f      	ldr	r2, [pc, #316]	@ (8006658 <HAL_I2C_MspInit+0x19c>)
 800651c:	0019      	movs	r1, r3
 800651e:	0010      	movs	r0, r2
 8006520:	f006 f882 	bl	800c628 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006524:	4b4b      	ldr	r3, [pc, #300]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 8006526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006528:	4b4a      	ldr	r3, [pc, #296]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 800652a:	2180      	movs	r1, #128	@ 0x80
 800652c:	0389      	lsls	r1, r1, #14
 800652e:	430a      	orrs	r2, r1
 8006530:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006532:	4b4a      	ldr	r3, [pc, #296]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 8006534:	4a4a      	ldr	r2, [pc, #296]	@ (8006660 <HAL_I2C_MspInit+0x1a4>)
 8006536:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006538:	4b48      	ldr	r3, [pc, #288]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 800653a:	2206      	movs	r2, #6
 800653c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800653e:	4b47      	ldr	r3, [pc, #284]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 8006540:	2200      	movs	r2, #0
 8006542:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006544:	4b45      	ldr	r3, [pc, #276]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 8006546:	2200      	movs	r2, #0
 8006548:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800654a:	4b44      	ldr	r3, [pc, #272]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 800654c:	2280      	movs	r2, #128	@ 0x80
 800654e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006550:	4b42      	ldr	r3, [pc, #264]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 8006552:	2200      	movs	r2, #0
 8006554:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006556:	4b41      	ldr	r3, [pc, #260]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 8006558:	2200      	movs	r2, #0
 800655a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800655c:	4b3f      	ldr	r3, [pc, #252]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 800655e:	2200      	movs	r2, #0
 8006560:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006562:	4b3e      	ldr	r3, [pc, #248]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 8006564:	2200      	movs	r2, #0
 8006566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006568:	4b3c      	ldr	r3, [pc, #240]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 800656a:	0018      	movs	r0, r3
 800656c:	f005 fc40 	bl	800bdf0 <HAL_DMA_Init>
 8006570:	1e03      	subs	r3, r0, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006574:	f000 face 	bl	8006b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a38      	ldr	r2, [pc, #224]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 800657c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800657e:	4b37      	ldr	r3, [pc, #220]	@ (800665c <HAL_I2C_MspInit+0x1a0>)
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006584:	4b37      	ldr	r3, [pc, #220]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 8006586:	4a38      	ldr	r2, [pc, #224]	@ (8006668 <HAL_I2C_MspInit+0x1ac>)
 8006588:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800658a:	4b36      	ldr	r3, [pc, #216]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 800658c:	2206      	movs	r2, #6
 800658e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006590:	4b34      	ldr	r3, [pc, #208]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 8006592:	2210      	movs	r2, #16
 8006594:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006596:	4b33      	ldr	r3, [pc, #204]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 8006598:	2200      	movs	r2, #0
 800659a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800659c:	4b31      	ldr	r3, [pc, #196]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 800659e:	2280      	movs	r2, #128	@ 0x80
 80065a0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065a2:	4b30      	ldr	r3, [pc, #192]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80065ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80065b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80065ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 80065bc:	0018      	movs	r0, r3
 80065be:	f005 fc17 	bl	800bdf0 <HAL_DMA_Init>
 80065c2:	1e03      	subs	r3, r0, #0
 80065c4:	d001      	beq.n	80065ca <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80065c6:	f000 faa5 	bl	8006b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a25      	ldr	r2, [pc, #148]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 80065ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80065d0:	4b24      	ldr	r3, [pc, #144]	@ (8006664 <HAL_I2C_MspInit+0x1a8>)
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	2017      	movs	r0, #23
 80065dc:	f005 fbd6 	bl	800bd8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80065e0:	2017      	movs	r0, #23
 80065e2:	f005 fbe8 	bl	800bdb6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80065e6:	e02e      	b.n	8006646 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1f      	ldr	r2, [pc, #124]	@ (800666c <HAL_I2C_MspInit+0x1b0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d129      	bne.n	8006646 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065f2:	4b18      	ldr	r3, [pc, #96]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 80065f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f6:	4b17      	ldr	r3, [pc, #92]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 80065f8:	2102      	movs	r1, #2
 80065fa:	430a      	orrs	r2, r1
 80065fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80065fe:	4b15      	ldr	r3, [pc, #84]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	2202      	movs	r2, #2
 8006604:	4013      	ands	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800660a:	2114      	movs	r1, #20
 800660c:	187b      	adds	r3, r7, r1
 800660e:	22c0      	movs	r2, #192	@ 0xc0
 8006610:	0112      	lsls	r2, r2, #4
 8006612:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006614:	187b      	adds	r3, r7, r1
 8006616:	2212      	movs	r2, #18
 8006618:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661a:	187b      	adds	r3, r7, r1
 800661c:	2200      	movs	r2, #0
 800661e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006620:	187b      	adds	r3, r7, r1
 8006622:	2203      	movs	r2, #3
 8006624:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006626:	187b      	adds	r3, r7, r1
 8006628:	2206      	movs	r2, #6
 800662a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800662c:	187b      	adds	r3, r7, r1
 800662e:	4a0a      	ldr	r2, [pc, #40]	@ (8006658 <HAL_I2C_MspInit+0x19c>)
 8006630:	0019      	movs	r1, r3
 8006632:	0010      	movs	r0, r2
 8006634:	f005 fff8 	bl	800c628 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006638:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 800663a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800663c:	4b05      	ldr	r3, [pc, #20]	@ (8006654 <HAL_I2C_MspInit+0x198>)
 800663e:	2180      	movs	r1, #128	@ 0x80
 8006640:	03c9      	lsls	r1, r1, #15
 8006642:	430a      	orrs	r2, r1
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	b00b      	add	sp, #44	@ 0x2c
 800664c:	bd90      	pop	{r4, r7, pc}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	40005400 	.word	0x40005400
 8006654:	40021000 	.word	0x40021000
 8006658:	50000400 	.word	0x50000400
 800665c:	20000d64 	.word	0x20000d64
 8006660:	40020030 	.word	0x40020030
 8006664:	20000dac 	.word	0x20000dac
 8006668:	4002001c 	.word	0x4002001c
 800666c:	40005800 	.word	0x40005800

08006670 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006674:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <MX_I2S2_Init+0x48>)
 8006676:	4a11      	ldr	r2, [pc, #68]	@ (80066bc <MX_I2S2_Init+0x4c>)
 8006678:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800667a:	4b0f      	ldr	r3, [pc, #60]	@ (80066b8 <MX_I2S2_Init+0x48>)
 800667c:	22c0      	movs	r2, #192	@ 0xc0
 800667e:	0092      	lsls	r2, r2, #2
 8006680:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8006682:	4b0d      	ldr	r3, [pc, #52]	@ (80066b8 <MX_I2S2_Init+0x48>)
 8006684:	2200      	movs	r2, #0
 8006686:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8006688:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <MX_I2S2_Init+0x48>)
 800668a:	2203      	movs	r2, #3
 800668c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800668e:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <MX_I2S2_Init+0x48>)
 8006690:	2200      	movs	r2, #0
 8006692:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8006694:	4b08      	ldr	r3, [pc, #32]	@ (80066b8 <MX_I2S2_Init+0x48>)
 8006696:	22fa      	movs	r2, #250	@ 0xfa
 8006698:	0192      	lsls	r2, r2, #6
 800669a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <MX_I2S2_Init+0x48>)
 800669e:	2200      	movs	r2, #0
 80066a0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80066a2:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <MX_I2S2_Init+0x48>)
 80066a4:	0018      	movs	r0, r3
 80066a6:	f008 f987 	bl	800e9b8 <HAL_I2S_Init>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d001      	beq.n	80066b2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80066ae:	f000 fa31 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20000df4 	.word	0x20000df4
 80066bc:	40003800 	.word	0x40003800

080066c0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b089      	sub	sp, #36	@ 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c8:	240c      	movs	r4, #12
 80066ca:	193b      	adds	r3, r7, r4
 80066cc:	0018      	movs	r0, r3
 80066ce:	2314      	movs	r3, #20
 80066d0:	001a      	movs	r2, r3
 80066d2:	2100      	movs	r1, #0
 80066d4:	f014 fd2e 	bl	801b134 <memset>
  if(i2sHandle->Instance==SPI2)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006794 <HAL_I2S_MspInit+0xd4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d154      	bne.n	800678c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006798 <HAL_I2S_MspInit+0xd8>)
 80066e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006798 <HAL_I2S_MspInit+0xd8>)
 80066e8:	2180      	movs	r1, #128	@ 0x80
 80066ea:	01c9      	lsls	r1, r1, #7
 80066ec:	430a      	orrs	r2, r1
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066f0:	4b29      	ldr	r3, [pc, #164]	@ (8006798 <HAL_I2S_MspInit+0xd8>)
 80066f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f4:	4b28      	ldr	r3, [pc, #160]	@ (8006798 <HAL_I2S_MspInit+0xd8>)
 80066f6:	2102      	movs	r1, #2
 80066f8:	430a      	orrs	r2, r1
 80066fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80066fc:	4b26      	ldr	r3, [pc, #152]	@ (8006798 <HAL_I2S_MspInit+0xd8>)
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	2202      	movs	r2, #2
 8006702:	4013      	ands	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006708:	193b      	adds	r3, r7, r4
 800670a:	22b0      	movs	r2, #176	@ 0xb0
 800670c:	0212      	lsls	r2, r2, #8
 800670e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006710:	0021      	movs	r1, r4
 8006712:	187b      	adds	r3, r7, r1
 8006714:	2202      	movs	r2, #2
 8006716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006718:	187b      	adds	r3, r7, r1
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800671e:	187b      	adds	r3, r7, r1
 8006720:	2200      	movs	r2, #0
 8006722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006724:	187b      	adds	r3, r7, r1
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800672a:	187b      	adds	r3, r7, r1
 800672c:	4a1b      	ldr	r2, [pc, #108]	@ (800679c <HAL_I2S_MspInit+0xdc>)
 800672e:	0019      	movs	r1, r3
 8006730:	0010      	movs	r0, r2
 8006732:	f005 ff79 	bl	800c628 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006736:	4b1a      	ldr	r3, [pc, #104]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006738:	4a1a      	ldr	r2, [pc, #104]	@ (80067a4 <HAL_I2S_MspInit+0xe4>)
 800673a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800673c:	4b18      	ldr	r3, [pc, #96]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 800673e:	2202      	movs	r2, #2
 8006740:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006742:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006744:	2200      	movs	r2, #0
 8006746:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006748:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 800674a:	2200      	movs	r2, #0
 800674c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800674e:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006750:	2280      	movs	r2, #128	@ 0x80
 8006752:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006754:	4b12      	ldr	r3, [pc, #72]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006756:	2280      	movs	r2, #128	@ 0x80
 8006758:	0052      	lsls	r2, r2, #1
 800675a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800675c:	4b10      	ldr	r3, [pc, #64]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 800675e:	2280      	movs	r2, #128	@ 0x80
 8006760:	00d2      	lsls	r2, r2, #3
 8006762:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006764:	4b0e      	ldr	r3, [pc, #56]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006766:	2220      	movs	r2, #32
 8006768:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 800676c:	2200      	movs	r2, #0
 800676e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006770:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006772:	0018      	movs	r0, r3
 8006774:	f005 fb3c 	bl	800bdf0 <HAL_DMA_Init>
 8006778:	1e03      	subs	r3, r0, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800677c:	f000 f9ca 	bl	8006b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a07      	ldr	r2, [pc, #28]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
 8006786:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <HAL_I2S_MspInit+0xe0>)
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800678c:	46c0      	nop			@ (mov r8, r8)
 800678e:	46bd      	mov	sp, r7
 8006790:	b009      	add	sp, #36	@ 0x24
 8006792:	bd90      	pop	{r4, r7, pc}
 8006794:	40003800 	.word	0x40003800
 8006798:	40021000 	.word	0x40021000
 800679c:	50000400 	.word	0x50000400
 80067a0:	20000e30 	.word	0x20000e30
 80067a4:	40020044 	.word	0x40020044

080067a8 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  testDone = true;
 80067ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006828 <SetTestDone+0x80>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 80067b2:	23fa      	movs	r3, #250	@ 0xfa
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	0018      	movs	r0, r3
 80067b8:	f004 fe7c 	bl	800b4b4 <HAL_Delay>
  SetDBLED(false, false, true);
 80067bc:	2201      	movs	r2, #1
 80067be:	2100      	movs	r1, #0
 80067c0:	2000      	movs	r0, #0
 80067c2:	f003 fb75 	bl	8009eb0 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80067c6:	4a19      	ldr	r2, [pc, #100]	@ (800682c <SetTestDone+0x84>)
 80067c8:	23fa      	movs	r3, #250	@ 0xfa
 80067ca:	0119      	lsls	r1, r3, #4
 80067cc:	23fa      	movs	r3, #250	@ 0xfa
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	0018      	movs	r0, r3
 80067d2:	f003 fb39 	bl	8009e48 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80067d6:	4a15      	ldr	r2, [pc, #84]	@ (800682c <SetTestDone+0x84>)
 80067d8:	23fa      	movs	r3, #250	@ 0xfa
 80067da:	0119      	lsls	r1, r3, #4
 80067dc:	23fa      	movs	r3, #250	@ 0xfa
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	0018      	movs	r0, r3
 80067e2:	f003 fbaf 	bl	8009f44 <SetVocLED>
  HAL_Delay(1000);
 80067e6:	23fa      	movs	r3, #250	@ 0xfa
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	0018      	movs	r0, r3
 80067ec:	f004 fe62 	bl	800b4b4 <HAL_Delay>
  SetDBLED(false, false, false);
 80067f0:	2200      	movs	r2, #0
 80067f2:	2100      	movs	r1, #0
 80067f4:	2000      	movs	r0, #0
 80067f6:	f003 fb5b 	bl	8009eb0 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 80067fa:	23fa      	movs	r3, #250	@ 0xfa
 80067fc:	011a      	lsls	r2, r3, #4
 80067fe:	23fa      	movs	r3, #250	@ 0xfa
 8006800:	0119      	lsls	r1, r3, #4
 8006802:	23fa      	movs	r3, #250	@ 0xfa
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	0018      	movs	r0, r3
 8006808:	f003 fb1e 	bl	8009e48 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 800680c:	23fa      	movs	r3, #250	@ 0xfa
 800680e:	011a      	lsls	r2, r3, #4
 8006810:	23fa      	movs	r3, #250	@ 0xfa
 8006812:	0119      	lsls	r1, r3, #4
 8006814:	23fa      	movs	r3, #250	@ 0xfa
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	0018      	movs	r0, r3
 800681a:	f003 fb93 	bl	8009f44 <SetVocLED>
  InitDone();
 800681e:	f003 fabd 	bl	8009d9c <InitDone>
}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000e78 	.word	0x20000e78
 800682c:	00000bb8 	.word	0x00000bb8

08006830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006834:	f004 fdce 	bl	800b3d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006838:	f000 f8ce 	bl	80069d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800683c:	f7ff fc2c 	bl	8006098 <MX_GPIO_Init>
  MX_DMA_Init();
 8006840:	f7ff fa76 	bl	8005d30 <MX_DMA_Init>
  MX_I2C1_Init();
 8006844:	f7ff fdba 	bl	80063bc <MX_I2C1_Init>
  MX_I2S2_Init();
 8006848:	f7ff ff12 	bl	8006670 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800684c:	f004 f89c 	bl	800a988 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8006850:	f7ff fdf4 	bl	800643c <MX_I2C2_Init>
  MX_TIM2_Init();
 8006854:	f003 fe90 	bl	800a578 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006858:	f003 ff02 	bl	800a660 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800685c:	f004 f8c8 	bl	800a9f0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8006860:	f7ff f9b4 	bl	8005bcc <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8006864:	f011 fb10 	bl	8017e88 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006868:	f000 ff02 	bl	8007670 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800686c:	f004 f856 	bl	800a91c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8006870:	f003 ff74 	bl	800a75c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8006874:	4a45      	ldr	r2, [pc, #276]	@ (800698c <main+0x15c>)
 8006876:	4b46      	ldr	r3, [pc, #280]	@ (8006990 <main+0x160>)
 8006878:	0011      	movs	r1, r2
 800687a:	0018      	movs	r0, r3
 800687c:	f7ff fd22 	bl	80062c4 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8006880:	f7ff f942 	bl	8005b08 <UserButton_Pressed>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d004      	beq.n	8006892 <main+0x62>
    EnableESPProg();
 8006888:	f011 fbce 	bl	8018028 <EnableESPProg>
    ESP_Programming = true;
 800688c:	4b41      	ldr	r3, [pc, #260]	@ (8006994 <main+0x164>)
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8006892:	2003      	movs	r0, #3
 8006894:	f004 fac4 	bl	800ae20 <SetVerboseLevel>
  BinaryReleaseInfo();
 8006898:	f004 fada 	bl	800ae50 <BinaryReleaseInfo>
  InitClock(&hrtc);
 800689c:	4b3e      	ldr	r3, [pc, #248]	@ (8006998 <main+0x168>)
 800689e:	0018      	movs	r0, r3
 80068a0:	f7ff f97a 	bl	8005b98 <InitClock>
  //===========
  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 80068a4:	4a3d      	ldr	r2, [pc, #244]	@ (800699c <main+0x16c>)
 80068a6:	493e      	ldr	r1, [pc, #248]	@ (80069a0 <main+0x170>)
 80068a8:	483e      	ldr	r0, [pc, #248]	@ (80069a4 <main+0x174>)
 80068aa:	230b      	movs	r3, #11
 80068ac:	f002 fbec 	bl	8009088 <soundInit>
 80068b0:	0003      	movs	r3, r0
 80068b2:	001a      	movs	r2, r3
 80068b4:	2301      	movs	r3, #1
 80068b6:	4053      	eors	r3, r2
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <main+0x9a>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 80068be:	4a3a      	ldr	r2, [pc, #232]	@ (80069a8 <main+0x178>)
 80068c0:	4b3a      	ldr	r3, [pc, #232]	@ (80069ac <main+0x17c>)
 80068c2:	21d4      	movs	r1, #212	@ 0xd4
 80068c4:	0018      	movs	r0, r3
 80068c6:	f004 faf5 	bl	800aeb4 <errorHandler>
  }
  //============================
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80068ca:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <main+0x180>)
 80068cc:	4a39      	ldr	r2, [pc, #228]	@ (80069b4 <main+0x184>)
 80068ce:	4934      	ldr	r1, [pc, #208]	@ (80069a0 <main+0x170>)
 80068d0:	4839      	ldr	r0, [pc, #228]	@ (80069b8 <main+0x188>)
 80068d2:	f7ff fb5d 	bl	8005f90 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 80068d6:	4b39      	ldr	r3, [pc, #228]	@ (80069bc <main+0x18c>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d019      	beq.n	8006912 <main+0xe2>
 80068de:	4b2d      	ldr	r3, [pc, #180]	@ (8006994 <main+0x164>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	4053      	eors	r3, r2
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d012      	beq.n	8006912 <main+0xe2>
 80068ec:	4b34      	ldr	r3, [pc, #208]	@ (80069c0 <main+0x190>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	4053      	eors	r3, r2
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <main+0xe2>
      MeasurementBusy = UpkeepGadget();
 80068fa:	f7ff fb77 	bl	8005fec <UpkeepGadget>
 80068fe:	0003      	movs	r3, r0
 8006900:	001a      	movs	r2, r3
 8006902:	4b30      	ldr	r3, [pc, #192]	@ (80069c4 <main+0x194>)
 8006904:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8006906:	f7fe fa89 	bl	8004e1c <ESP_Upkeep>
 800690a:	0003      	movs	r3, r0
 800690c:	001a      	movs	r2, r3
 800690e:	4b2e      	ldr	r3, [pc, #184]	@ (80069c8 <main+0x198>)
 8006910:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8006912:	4b2a      	ldr	r3, [pc, #168]	@ (80069bc <main+0x18c>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2201      	movs	r2, #1
 8006918:	4053      	eors	r3, r2
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00f      	beq.n	8006940 <main+0x110>
 8006920:	4b1c      	ldr	r3, [pc, #112]	@ (8006994 <main+0x164>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2201      	movs	r2, #1
 8006926:	4053      	eors	r3, r2
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <main+0x110>
 800692e:	4b24      	ldr	r3, [pc, #144]	@ (80069c0 <main+0x190>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2201      	movs	r2, #1
 8006934:	4053      	eors	r3, r2
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <main+0x110>
      Gadget_Test();
 800693c:	f7ff fb4e 	bl	8005fdc <Gadget_Test>
    }
    Status_Upkeep();
 8006940:	f003 fcd0 	bl	800a2e4 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8006944:	4b21      	ldr	r3, [pc, #132]	@ (80069cc <main+0x19c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	0018      	movs	r0, r3
 800694a:	f004 f9b1 	bl	800acb0 <TimestampIsReached>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d00c      	beq.n	800696c <main+0x13c>
      charge = Battery_Upkeep();
 8006952:	f003 fcce 	bl	800a2f2 <Battery_Upkeep>
 8006956:	0003      	movs	r3, r0
 8006958:	001a      	movs	r2, r3
 800695a:	4b1d      	ldr	r3, [pc, #116]	@ (80069d0 <main+0x1a0>)
 800695c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 800695e:	f004 fd9f 	bl	800b4a0 <HAL_GetTick>
 8006962:	0003      	movs	r3, r0
 8006964:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <main+0x1a4>)
 8006966:	189a      	adds	r2, r3, r2
 8006968:	4b18      	ldr	r3, [pc, #96]	@ (80069cc <main+0x19c>)
 800696a:	601a      	str	r2, [r3, #0]
      //GoToSleep(2);
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 800696c:	4b18      	ldr	r3, [pc, #96]	@ (80069d0 <main+0x1a0>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <main+0x154>
 8006974:	4b14      	ldr	r3, [pc, #80]	@ (80069c8 <main+0x198>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b09      	cmp	r3, #9
 800697a:	d103      	bne.n	8006984 <main+0x154>
      batteryEmpty = true;
 800697c:	4b10      	ldr	r3, [pc, #64]	@ (80069c0 <main+0x190>)
 800697e:	2201      	movs	r2, #1
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	e002      	b.n	800698a <main+0x15a>
    }
    else{
      batteryEmpty = false;
 8006984:	4b0e      	ldr	r3, [pc, #56]	@ (80069c0 <main+0x190>)
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 800698a:	e7a4      	b.n	80068d6 <main+0xa6>
 800698c:	200020f4 	.word	0x200020f4
 8006990:	200020b4 	.word	0x200020b4
 8006994:	20000e79 	.word	0x20000e79
 8006998:	20001124 	.word	0x20001124
 800699c:	20002134 	.word	0x20002134
 80069a0:	20000df4 	.word	0x20000df4
 80069a4:	20000e30 	.word	0x20000e30
 80069a8:	0801e850 	.word	0x0801e850
 80069ac:	0801f188 	.word	0x0801f188
 80069b0:	20000c5c 	.word	0x20000c5c
 80069b4:	200022e4 	.word	0x200022e4
 80069b8:	20000cbc 	.word	0x20000cbc
 80069bc:	20000e78 	.word	0x20000e78
 80069c0:	20000e7a 	.word	0x20000e7a
 80069c4:	20000e7b 	.word	0x20000e7b
 80069c8:	20000e81 	.word	0x20000e81
 80069cc:	20000e7c 	.word	0x20000e7c
 80069d0:	20000e80 	.word	0x20000e80
 80069d4:	0000ea60 	.word	0x0000ea60

080069d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b09d      	sub	sp, #116	@ 0x74
 80069dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069de:	2438      	movs	r4, #56	@ 0x38
 80069e0:	193b      	adds	r3, r7, r4
 80069e2:	0018      	movs	r0, r3
 80069e4:	2338      	movs	r3, #56	@ 0x38
 80069e6:	001a      	movs	r2, r3
 80069e8:	2100      	movs	r1, #0
 80069ea:	f014 fba3 	bl	801b134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069ee:	2324      	movs	r3, #36	@ 0x24
 80069f0:	18fb      	adds	r3, r7, r3
 80069f2:	0018      	movs	r0, r3
 80069f4:	2314      	movs	r3, #20
 80069f6:	001a      	movs	r2, r3
 80069f8:	2100      	movs	r1, #0
 80069fa:	f014 fb9b 	bl	801b134 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80069fe:	003b      	movs	r3, r7
 8006a00:	0018      	movs	r0, r3
 8006a02:	2324      	movs	r3, #36	@ 0x24
 8006a04:	001a      	movs	r2, r3
 8006a06:	2100      	movs	r1, #0
 8006a08:	f014 fb94 	bl	801b134 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a0c:	4b32      	ldr	r3, [pc, #200]	@ (8006ad8 <SystemClock_Config+0x100>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a32      	ldr	r2, [pc, #200]	@ (8006adc <SystemClock_Config+0x104>)
 8006a12:	401a      	ands	r2, r3
 8006a14:	4b30      	ldr	r3, [pc, #192]	@ (8006ad8 <SystemClock_Config+0x100>)
 8006a16:	2180      	movs	r1, #128	@ 0x80
 8006a18:	0109      	lsls	r1, r1, #4
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006a1e:	f00a f92f 	bl	8010c80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006a22:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae0 <SystemClock_Config+0x108>)
 8006a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a26:	4b2e      	ldr	r3, [pc, #184]	@ (8006ae0 <SystemClock_Config+0x108>)
 8006a28:	492c      	ldr	r1, [pc, #176]	@ (8006adc <SystemClock_Config+0x104>)
 8006a2a:	400a      	ands	r2, r1
 8006a2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8006a2e:	193b      	adds	r3, r7, r4
 8006a30:	2226      	movs	r2, #38	@ 0x26
 8006a32:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006a34:	193b      	adds	r3, r7, r4
 8006a36:	2280      	movs	r2, #128	@ 0x80
 8006a38:	0052      	lsls	r2, r2, #1
 8006a3a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a3c:	0021      	movs	r1, r4
 8006a3e:	187b      	adds	r3, r7, r1
 8006a40:	2201      	movs	r2, #1
 8006a42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a44:	187b      	adds	r3, r7, r1
 8006a46:	2210      	movs	r2, #16
 8006a48:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a50:	187b      	adds	r3, r7, r1
 8006a52:	2200      	movs	r2, #0
 8006a54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a56:	187b      	adds	r3, r7, r1
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f00a f91f 	bl	8010c9c <HAL_RCC_OscConfig>
 8006a5e:	1e03      	subs	r3, r0, #0
 8006a60:	d001      	beq.n	8006a66 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006a62:	f000 f857 	bl	8006b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a66:	2124      	movs	r1, #36	@ 0x24
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	220f      	movs	r2, #15
 8006a6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006a6e:	187b      	adds	r3, r7, r1
 8006a70:	2201      	movs	r2, #1
 8006a72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a74:	187b      	adds	r3, r7, r1
 8006a76:	2200      	movs	r2, #0
 8006a78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006a7a:	187b      	adds	r3, r7, r1
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a80:	187b      	adds	r3, r7, r1
 8006a82:	2200      	movs	r2, #0
 8006a84:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006a86:	187b      	adds	r3, r7, r1
 8006a88:	2100      	movs	r1, #0
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f00a fcda 	bl	8011444 <HAL_RCC_ClockConfig>
 8006a90:	1e03      	subs	r3, r0, #0
 8006a92:	d001      	beq.n	8006a98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006a94:	f000 f83e 	bl	8006b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006a98:	003b      	movs	r3, r7
 8006a9a:	226d      	movs	r2, #109	@ 0x6d
 8006a9c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006a9e:	003b      	movs	r3, r7
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006aa4:	003b      	movs	r3, r7
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006aaa:	003b      	movs	r3, r7
 8006aac:	2200      	movs	r2, #0
 8006aae:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006ab0:	003b      	movs	r3, r7
 8006ab2:	2280      	movs	r2, #128	@ 0x80
 8006ab4:	0252      	lsls	r2, r2, #9
 8006ab6:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006ab8:	003b      	movs	r3, r7
 8006aba:	2280      	movs	r2, #128	@ 0x80
 8006abc:	04d2      	lsls	r2, r2, #19
 8006abe:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ac0:	003b      	movs	r3, r7
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f00a fee2 	bl	801188c <HAL_RCCEx_PeriphCLKConfig>
 8006ac8:	1e03      	subs	r3, r0, #0
 8006aca:	d001      	beq.n	8006ad0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006acc:	f000 f822 	bl	8006b14 <Error_Handler>
  }
}
 8006ad0:	46c0      	nop			@ (mov r8, r8)
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b01d      	add	sp, #116	@ 0x74
 8006ad6:	bd90      	pop	{r4, r7, pc}
 8006ad8:	40007000 	.word	0x40007000
 8006adc:	ffffe7ff 	.word	0xffffe7ff
 8006ae0:	40021000 	.word	0x40021000

08006ae4 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	000a      	movs	r2, r1
 8006aee:	1cbb      	adds	r3, r7, #2
 8006af0:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8006af2:	4c06      	ldr	r4, [pc, #24]	@ (8006b0c <printString+0x28>)
 8006af4:	1cbb      	adds	r3, r7, #2
 8006af6:	881a      	ldrh	r2, [r3, #0]
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4805      	ldr	r0, [pc, #20]	@ (8006b10 <printString+0x2c>)
 8006afc:	0023      	movs	r3, r4
 8006afe:	f00b ff75 	bl	80129ec <HAL_UART_Transmit>
}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b003      	add	sp, #12
 8006b08:	bd90      	pop	{r4, r7, pc}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	0000ffff 	.word	0x0000ffff
 8006b10:	2000222c 	.word	0x2000222c

08006b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006b18:	b672      	cpsid	i
}
 8006b1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006b1c:	46c0      	nop			@ (mov r8, r8)
 8006b1e:	e7fd      	b.n	8006b1c <Error_Handler+0x8>

08006b20 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8006b24:	f7ff fc2b 	bl	800637e <HT_StartMeasurement>
}
 8006b28:	46c0      	nop			@ (mov r8, r8)
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8006b34:	4a04      	ldr	r2, [pc, #16]	@ (8006b48 <HT_IsMeasurementDoneWrapper+0x18>)
 8006b36:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <HT_IsMeasurementDoneWrapper+0x1c>)
 8006b38:	0011      	movs	r1, r2
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7ff fc26 	bl	800638c <HT_GetMeasurementValues>
 8006b40:	0003      	movs	r3, r0
}
 8006b42:	0018      	movs	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20000e88 	.word	0x20000e88
 8006b4c:	20000e84 	.word	0x20000e84

08006b50 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8006b54:	f7ff fa83 	bl	800605e <Gas_StartMeasurement>
}
 8006b58:	46c0      	nop			@ (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8006b64:	4b03      	ldr	r3, [pc, #12]	@ (8006b74 <VOC_IsMeasurementDoneWrapper+0x14>)
 8006b66:	0018      	movs	r0, r3
 8006b68:	f7ff fa80 	bl	800606c <Gas_GetMeasurementValues>
 8006b6c:	0003      	movs	r3, r0
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000e8c 	.word	0x20000e8c

08006b78 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
}
 8006b7c:	46c0      	nop			@ (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8006b82:	b580      	push	{r7, lr}
 8006b84:	af00      	add	r7, sp, #0
  return true;
 8006b86:	2301      	movs	r3, #1
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006b92:	f000 fd1b 	bl	80075cc <MIC_TestMeasurementDone>
 8006b96:	0003      	movs	r3, r0
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <testInit>:

void testInit(){
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8006ba4:	4b07      	ldr	r3, [pc, #28]	@ (8006bc4 <testInit+0x24>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8006baa:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <testInit+0x24>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 8006bb0:	4b04      	ldr	r3, [pc, #16]	@ (8006bc4 <testInit+0x24>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8006bb6:	4b03      	ldr	r3, [pc, #12]	@ (8006bc4 <testInit+0x24>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	705a      	strb	r2, [r3, #1]
}
 8006bbc:	46c0      	nop			@ (mov r8, r8)
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	46c0      	nop			@ (mov r8, r8)
 8006bc4:	20000ec8 	.word	0x20000ec8

08006bc8 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b092      	sub	sp, #72	@ 0x48
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 8006bd4:	f7ff ffe4 	bl	8006ba0 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8006bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8006d94 <Meas_Init+0x1cc>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <Meas_Init+0x20>
 8006be0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d94 <Meas_Init+0x1cc>)
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d068      	beq.n	8006cba <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7fe fc22 	bl	8005434 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8006bf0:	f7ff fbdc 	bl	80063ac <HT_DeviceConnected>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	4053      	eors	r3, r2
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 8006c02:	4a65      	ldr	r2, [pc, #404]	@ (8006d98 <Meas_Init+0x1d0>)
 8006c04:	4b65      	ldr	r3, [pc, #404]	@ (8006d9c <Meas_Init+0x1d4>)
 8006c06:	0019      	movs	r1, r3
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f004 f8a7 	bl	800ad5c <CreateLine>
       MeasTest.HT_Tested = false;
 8006c0e:	4b64      	ldr	r3, [pc, #400]	@ (8006da0 <Meas_Init+0x1d8>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8006c14:	4b5f      	ldr	r3, [pc, #380]	@ (8006d94 <Meas_Init+0x1cc>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	e008      	b.n	8006c2e <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8006c1c:	4b60      	ldr	r3, [pc, #384]	@ (8006da0 <Meas_Init+0x1d8>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006c22:	4a60      	ldr	r2, [pc, #384]	@ (8006da4 <Meas_Init+0x1dc>)
 8006c24:	4b60      	ldr	r3, [pc, #384]	@ (8006da8 <Meas_Init+0x1e0>)
 8006c26:	0019      	movs	r1, r3
 8006c28:	2003      	movs	r0, #3
 8006c2a:	f004 f897 	bl	800ad5c <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006c2e:	f7ff fa2a 	bl	8006086 <Gas_DeviceConnected>
 8006c32:	0003      	movs	r3, r0
 8006c34:	001a      	movs	r2, r3
 8006c36:	2301      	movs	r3, #1
 8006c38:	4053      	eors	r3, r2
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00c      	beq.n	8006c5a <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8006c40:	4b57      	ldr	r3, [pc, #348]	@ (8006da0 <Meas_Init+0x1d8>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8006c46:	4a59      	ldr	r2, [pc, #356]	@ (8006dac <Meas_Init+0x1e4>)
 8006c48:	4b54      	ldr	r3, [pc, #336]	@ (8006d9c <Meas_Init+0x1d4>)
 8006c4a:	0019      	movs	r1, r3
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	f004 f885 	bl	800ad5c <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8006c52:	4b50      	ldr	r3, [pc, #320]	@ (8006d94 <Meas_Init+0x1cc>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	705a      	strb	r2, [r3, #1]
 8006c58:	e008      	b.n	8006c6c <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8006c5a:	4b51      	ldr	r3, [pc, #324]	@ (8006da0 <Meas_Init+0x1d8>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8006c60:	4a53      	ldr	r2, [pc, #332]	@ (8006db0 <Meas_Init+0x1e8>)
 8006c62:	4b51      	ldr	r3, [pc, #324]	@ (8006da8 <Meas_Init+0x1e0>)
 8006c64:	0019      	movs	r1, r3
 8006c66:	2003      	movs	r0, #3
 8006c68:	f004 f878 	bl	800ad5c <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8006c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8006da0 <Meas_Init+0x1d8>)
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <Meas_Init+0xc0>
 8006c74:	4b4a      	ldr	r3, [pc, #296]	@ (8006da0 <Meas_Init+0x1d8>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2101      	movs	r1, #1
 8006c80:	2000      	movs	r0, #0
 8006c82:	f003 f915 	bl	8009eb0 <SetDBLED>
 8006c86:	e018      	b.n	8006cba <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f003 f90f 	bl	8009eb0 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006c92:	4b48      	ldr	r3, [pc, #288]	@ (8006db4 <Meas_Init+0x1ec>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	2101      	movs	r1, #1
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f005 fe60 	bl	800c95e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006c9e:	2380      	movs	r3, #128	@ 0x80
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4844      	ldr	r0, [pc, #272]	@ (8006db4 <Meas_Init+0x1ec>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	0019      	movs	r1, r3
 8006ca8:	f005 fe59 	bl	800c95e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4840      	ldr	r0, [pc, #256]	@ (8006db4 <Meas_Init+0x1ec>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	f005 fe52 	bl	800c95e <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8006cba:	4b36      	ldr	r3, [pc, #216]	@ (8006d94 <Meas_Init+0x1cc>)
 8006cbc:	78db      	ldrb	r3, [r3, #3]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 8006cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8006db8 <Meas_Init+0x1f0>)
 8006cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8006dbc <Meas_Init+0x1f4>)
 8006cc6:	0019      	movs	r1, r3
 8006cc8:	2002      	movs	r0, #2
 8006cca:	f004 f847 	bl	800ad5c <CreateLine>
          enableMicrophone(true);
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f002 fa42 	bl	8009158 <enableMicrophone>

  }
  uint8_t offset = 0;
 8006cd4:	2547      	movs	r5, #71	@ 0x47
 8006cd6:	197b      	adds	r3, r7, r5
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8006cdc:	197b      	adds	r3, r7, r5
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	197a      	adds	r2, r7, r5
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	7011      	strb	r1, [r2, #0]
 8006ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8006d94 <Meas_Init+0x1cc>)
 8006ce8:	7814      	ldrb	r4, [r2, #0]
 8006cea:	4a35      	ldr	r2, [pc, #212]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006cec:	0119      	lsls	r1, r3, #4
 8006cee:	4835      	ldr	r0, [pc, #212]	@ (8006dc4 <Meas_Init+0x1fc>)
 8006cf0:	5088      	str	r0, [r1, r2]
 8006cf2:	4933      	ldr	r1, [pc, #204]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006cf4:	011a      	lsls	r2, r3, #4
 8006cf6:	188a      	adds	r2, r1, r2
 8006cf8:	3204      	adds	r2, #4
 8006cfa:	4933      	ldr	r1, [pc, #204]	@ (8006dc8 <Meas_Init+0x200>)
 8006cfc:	6011      	str	r1, [r2, #0]
 8006cfe:	4930      	ldr	r1, [pc, #192]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d00:	011a      	lsls	r2, r3, #4
 8006d02:	188a      	adds	r2, r1, r2
 8006d04:	3208      	adds	r2, #8
 8006d06:	4931      	ldr	r1, [pc, #196]	@ (8006dcc <Meas_Init+0x204>)
 8006d08:	6011      	str	r1, [r2, #0]
 8006d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	18d3      	adds	r3, r2, r3
 8006d10:	330c      	adds	r3, #12
 8006d12:	1c22      	adds	r2, r4, #0
 8006d14:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8006d16:	197b      	adds	r3, r7, r5
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	197a      	adds	r2, r7, r5
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	7011      	strb	r1, [r2, #0]
 8006d20:	4a1c      	ldr	r2, [pc, #112]	@ (8006d94 <Meas_Init+0x1cc>)
 8006d22:	7854      	ldrb	r4, [r2, #1]
 8006d24:	4a26      	ldr	r2, [pc, #152]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d26:	0119      	lsls	r1, r3, #4
 8006d28:	4829      	ldr	r0, [pc, #164]	@ (8006dd0 <Meas_Init+0x208>)
 8006d2a:	5088      	str	r0, [r1, r2]
 8006d2c:	4924      	ldr	r1, [pc, #144]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d2e:	011a      	lsls	r2, r3, #4
 8006d30:	188a      	adds	r2, r1, r2
 8006d32:	3204      	adds	r2, #4
 8006d34:	4927      	ldr	r1, [pc, #156]	@ (8006dd4 <Meas_Init+0x20c>)
 8006d36:	6011      	str	r1, [r2, #0]
 8006d38:	4921      	ldr	r1, [pc, #132]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d3a:	011a      	lsls	r2, r3, #4
 8006d3c:	188a      	adds	r2, r1, r2
 8006d3e:	3208      	adds	r2, #8
 8006d40:	4925      	ldr	r1, [pc, #148]	@ (8006dd8 <Meas_Init+0x210>)
 8006d42:	6011      	str	r1, [r2, #0]
 8006d44:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	18d3      	adds	r3, r2, r3
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	1c22      	adds	r2, r4, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8006d50:	197b      	adds	r3, r7, r5
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	197a      	adds	r2, r7, r5
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	7011      	strb	r1, [r2, #0]
 8006d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d94 <Meas_Init+0x1cc>)
 8006d5c:	7894      	ldrb	r4, [r2, #2]
 8006d5e:	4a18      	ldr	r2, [pc, #96]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d60:	0119      	lsls	r1, r3, #4
 8006d62:	481e      	ldr	r0, [pc, #120]	@ (8006ddc <Meas_Init+0x214>)
 8006d64:	5088      	str	r0, [r1, r2]
 8006d66:	4916      	ldr	r1, [pc, #88]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d68:	011a      	lsls	r2, r3, #4
 8006d6a:	188a      	adds	r2, r1, r2
 8006d6c:	3204      	adds	r2, #4
 8006d6e:	491c      	ldr	r1, [pc, #112]	@ (8006de0 <Meas_Init+0x218>)
 8006d70:	6011      	str	r1, [r2, #0]
 8006d72:	4913      	ldr	r1, [pc, #76]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d74:	011a      	lsls	r2, r3, #4
 8006d76:	188a      	adds	r2, r1, r2
 8006d78:	3208      	adds	r2, #8
 8006d7a:	491a      	ldr	r1, [pc, #104]	@ (8006de4 <Meas_Init+0x21c>)
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	4a10      	ldr	r2, [pc, #64]	@ (8006dc0 <Meas_Init+0x1f8>)
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	18d3      	adds	r3, r2, r3
 8006d84:	330c      	adds	r3, #12
 8006d86:	1c22      	adds	r2, r4, #0
 8006d88:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b012      	add	sp, #72	@ 0x48
 8006d90:	bdb0      	pop	{r4, r5, r7, pc}
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	20000ec4 	.word	0x20000ec4
 8006d98:	0801e864 	.word	0x0801e864
 8006d9c:	0801e894 	.word	0x0801e894
 8006da0:	20000ec8 	.word	0x20000ec8
 8006da4:	0801e898 	.word	0x0801e898
 8006da8:	0801e8c4 	.word	0x0801e8c4
 8006dac:	0801e8c8 	.word	0x0801e8c8
 8006db0:	0801e8e4 	.word	0x0801e8e4
 8006db4:	50000400 	.word	0x50000400
 8006db8:	0801e8fc 	.word	0x0801e8fc
 8006dbc:	0801e920 	.word	0x0801e920
 8006dc0:	20000e94 	.word	0x20000e94
 8006dc4:	08006b21 	.word	0x08006b21
 8006dc8:	08006b31 	.word	0x08006b31
 8006dcc:	20000e90 	.word	0x20000e90
 8006dd0:	08006b51 	.word	0x08006b51
 8006dd4:	08006b61 	.word	0x08006b61
 8006dd8:	20000e91 	.word	0x20000e91
 8006ddc:	08006b79 	.word	0x08006b79
 8006de0:	08006b83 	.word	0x08006b83
 8006de4:	20000e92 	.word	0x20000e92

08006de8 <StartMeasurements>:

void StartMeasurements(void) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006dec:	4b10      	ldr	r3, [pc, #64]	@ (8006e30 <StartMeasurements+0x48>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	e015      	b.n	8006e20 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006df4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e30 <StartMeasurements+0x48>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	4a0e      	ldr	r2, [pc, #56]	@ (8006e34 <StartMeasurements+0x4c>)
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	18d3      	adds	r3, r2, r3
 8006dfe:	330c      	adds	r3, #12
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <StartMeasurements+0x48>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	001a      	movs	r2, r3
 8006e0c:	4b09      	ldr	r3, [pc, #36]	@ (8006e34 <StartMeasurements+0x4c>)
 8006e0e:	0112      	lsls	r2, r2, #4
 8006e10:	58d3      	ldr	r3, [r2, r3]
 8006e12:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <StartMeasurements+0x48>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	4b04      	ldr	r3, [pc, #16]	@ (8006e30 <StartMeasurements+0x48>)
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	4b03      	ldr	r3, [pc, #12]	@ (8006e30 <StartMeasurements+0x48>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d9e5      	bls.n	8006df4 <StartMeasurements+0xc>
    }
  }
}
 8006e28:	46c0      	nop			@ (mov r8, r8)
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000ecc 	.word	0x20000ecc
 8006e34:	20000e94 	.word	0x20000e94

08006e38 <Meas_Test>:

void Meas_Test(){
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8006e3c:	4b23      	ldr	r3, [pc, #140]	@ (8006ecc <Meas_Test+0x94>)
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	2201      	movs	r2, #1
 8006e42:	4053      	eors	r3, r2
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <Meas_Test+0x16>
    ESP_WakeTest();
 8006e4a:	f7fd fed3 	bl	8004bf4 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8006e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8006ecc <Meas_Test+0x94>)
 8006e50:	789b      	ldrb	r3, [r3, #2]
 8006e52:	2201      	movs	r2, #1
 8006e54:	4053      	eors	r3, r2
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01b      	beq.n	8006e94 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006e5c:	f7ff fe97 	bl	8006b8e <MIC_IsTestMeasurementDoneWrapper>
 8006e60:	1e03      	subs	r3, r0, #0
 8006e62:	d00b      	beq.n	8006e7c <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8006e64:	4b19      	ldr	r3, [pc, #100]	@ (8006ecc <Meas_Test+0x94>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8006e6a:	23fa      	movs	r3, #250	@ 0xfa
 8006e6c:	011a      	lsls	r2, r3, #4
 8006e6e:	4918      	ldr	r1, [pc, #96]	@ (8006ed0 <Meas_Test+0x98>)
 8006e70:	23fa      	movs	r3, #250	@ 0xfa
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	0018      	movs	r0, r3
 8006e76:	f002 ffe7 	bl	8009e48 <SetStatusLED>
 8006e7a:	e00b      	b.n	8006e94 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8006e7c:	f002 f948 	bl	8009110 <micSettlingComplete>
 8006e80:	1e03      	subs	r3, r0, #0
 8006e82:	d007      	beq.n	8006e94 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8006e84:	23fa      	movs	r3, #250	@ 0xfa
 8006e86:	011a      	lsls	r2, r3, #4
 8006e88:	23fa      	movs	r3, #250	@ 0xfa
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	4810      	ldr	r0, [pc, #64]	@ (8006ed0 <Meas_Test+0x98>)
 8006e8e:	0019      	movs	r1, r3
 8006e90:	f002 ffda 	bl	8009e48 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8006e94:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <Meas_Test+0x94>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d013      	beq.n	8006ec4 <Meas_Test+0x8c>
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ecc <Meas_Test+0x94>)
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00f      	beq.n	8006ec4 <Meas_Test+0x8c>
 8006ea4:	4b09      	ldr	r3, [pc, #36]	@ (8006ecc <Meas_Test+0x94>)
 8006ea6:	78db      	ldrb	r3, [r3, #3]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <Meas_Test+0x8c>
 8006eac:	4b07      	ldr	r3, [pc, #28]	@ (8006ecc <Meas_Test+0x94>)
 8006eae:	789b      	ldrb	r3, [r3, #2]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <Meas_Test+0x8c>
    Info("Test completed");
 8006eb4:	4a07      	ldr	r2, [pc, #28]	@ (8006ed4 <Meas_Test+0x9c>)
 8006eb6:	4b08      	ldr	r3, [pc, #32]	@ (8006ed8 <Meas_Test+0xa0>)
 8006eb8:	0019      	movs	r1, r3
 8006eba:	2002      	movs	r0, #2
 8006ebc:	f003 ff4e 	bl	800ad5c <CreateLine>
    SetTestDone();
 8006ec0:	f7ff fc72 	bl	80067a8 <SetTestDone>
  }
}
 8006ec4:	46c0      	nop			@ (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	46c0      	nop			@ (mov r8, r8)
 8006ecc:	20000ec8 	.word	0x20000ec8
 8006ed0:	00000bb8 	.word	0x00000bb8
 8006ed4:	0801e924 	.word	0x0801e924
 8006ed8:	0801e920 	.word	0x0801e920

08006edc <ResetMeasurements>:
void ResetMeasurements(void) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <ResetMeasurements+0x34>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <ResetMeasurements+0x34>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006eec:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <ResetMeasurements+0x34>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8006ef2:	4b07      	ldr	r3, [pc, #28]	@ (8006f10 <ResetMeasurements+0x34>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006ef8:	4b05      	ldr	r3, [pc, #20]	@ (8006f10 <ResetMeasurements+0x34>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8006efe:	4b04      	ldr	r3, [pc, #16]	@ (8006f10 <ResetMeasurements+0x34>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8006f04:	4b02      	ldr	r3, [pc, #8]	@ (8006f10 <ResetMeasurements+0x34>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	73da      	strb	r2, [r3, #15]
}
 8006f0a:	46c0      	nop			@ (mov r8, r8)
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000e84 	.word	0x20000e84

08006f14 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006f18:	4b18      	ldr	r3, [pc, #96]	@ (8006f7c <MeasurementsCompleted+0x68>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e024      	b.n	8006f6a <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006f20:	4b16      	ldr	r3, [pc, #88]	@ (8006f7c <MeasurementsCompleted+0x68>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4a16      	ldr	r2, [pc, #88]	@ (8006f80 <MeasurementsCompleted+0x6c>)
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	18d3      	adds	r3, r2, r3
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d015      	beq.n	8006f5e <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8006f32:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <MeasurementsCompleted+0x68>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <MeasurementsCompleted+0x6c>)
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	18d3      	adds	r3, r2, r3
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4798      	blx	r3
 8006f42:	1e03      	subs	r3, r0, #0
 8006f44:	d009      	beq.n	8006f5a <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006f46:	4b0d      	ldr	r3, [pc, #52]	@ (8006f7c <MeasurementsCompleted+0x68>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006f80 <MeasurementsCompleted+0x6c>)
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	18d3      	adds	r3, r2, r3
 8006f50:	3308      	adds	r3, #8
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e001      	b.n	8006f5e <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e00a      	b.n	8006f74 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006f5e:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <MeasurementsCompleted+0x68>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	4b05      	ldr	r3, [pc, #20]	@ (8006f7c <MeasurementsCompleted+0x68>)
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	4b04      	ldr	r3, [pc, #16]	@ (8006f7c <MeasurementsCompleted+0x68>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d9d6      	bls.n	8006f20 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8006f72:	2301      	movs	r3, #1
}
 8006f74:	0018      	movs	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	20000ecc 	.word	0x20000ecc
 8006f80:	20000e94 	.word	0x20000e94

08006f84 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8006f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8007180 <Mic_Upkeep+0x1fc>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d100      	bne.n	8006f94 <Mic_Upkeep+0x10>
 8006f92:	e0c0      	b.n	8007116 <Mic_Upkeep+0x192>
 8006f94:	dd00      	ble.n	8006f98 <Mic_Upkeep+0x14>
 8006f96:	e0dd      	b.n	8007154 <Mic_Upkeep+0x1d0>
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d037      	beq.n	800700c <Mic_Upkeep+0x88>
 8006f9c:	dd00      	ble.n	8006fa0 <Mic_Upkeep+0x1c>
 8006f9e:	e0d9      	b.n	8007154 <Mic_Upkeep+0x1d0>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <Mic_Upkeep+0x26>
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d014      	beq.n	8006fd2 <Mic_Upkeep+0x4e>
 8006fa8:	e0d4      	b.n	8007154 <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8006faa:	2001      	movs	r0, #1
 8006fac:	f002 f8d4 	bl	8009158 <enableMicrophone>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4053      	eors	r3, r2
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8006fbe:	4a71      	ldr	r2, [pc, #452]	@ (8007184 <Mic_Upkeep+0x200>)
 8006fc0:	4b71      	ldr	r3, [pc, #452]	@ (8007188 <Mic_Upkeep+0x204>)
 8006fc2:	21d4      	movs	r1, #212	@ 0xd4
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f003 ff75 	bl	800aeb4 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8006fca:	4b6d      	ldr	r3, [pc, #436]	@ (8007180 <Mic_Upkeep+0x1fc>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 8006fd0:	e0cf      	b.n	8007172 <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 8006fd2:	f002 f89d 	bl	8009110 <micSettlingComplete>
 8006fd6:	1e03      	subs	r3, r0, #0
 8006fd8:	d105      	bne.n	8006fe6 <Mic_Upkeep+0x62>
 8006fda:	4b6c      	ldr	r3, [pc, #432]	@ (800718c <Mic_Upkeep+0x208>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d100      	bne.n	8006fe6 <Mic_Upkeep+0x62>
 8006fe4:	e0c0      	b.n	8007168 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 8006fe6:	f002 f921 	bl	800922c <startSPLcalculation>
 8006fea:	0003      	movs	r3, r0
 8006fec:	001a      	movs	r2, r3
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4053      	eors	r3, r2
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 8006ff8:	4a62      	ldr	r2, [pc, #392]	@ (8007184 <Mic_Upkeep+0x200>)
 8006ffa:	4b63      	ldr	r3, [pc, #396]	@ (8007188 <Mic_Upkeep+0x204>)
 8006ffc:	21e0      	movs	r1, #224	@ 0xe0
 8006ffe:	0018      	movs	r0, r3
 8007000:	f003 ff58 	bl	800aeb4 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8007004:	4b5e      	ldr	r3, [pc, #376]	@ (8007180 <Mic_Upkeep+0x1fc>)
 8007006:	2202      	movs	r2, #2
 8007008:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 800700a:	e0ad      	b.n	8007168 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 800700c:	4b60      	ldr	r3, [pc, #384]	@ (8007190 <Mic_Upkeep+0x20c>)
 800700e:	2201      	movs	r2, #1
 8007010:	2101      	movs	r1, #1
 8007012:	0018      	movs	r0, r3
 8007014:	f001 ff5e 	bl	8008ed4 <getSoundData>
 8007018:	1e03      	subs	r3, r0, #0
 800701a:	d100      	bne.n	800701e <Mic_Upkeep+0x9a>
 800701c:	e0a6      	b.n	800716c <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 800701e:	f002 f857 	bl	80090d0 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007022:	4b5b      	ldr	r3, [pc, #364]	@ (8007190 <Mic_Upkeep+0x20c>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007028:	4b59      	ldr	r3, [pc, #356]	@ (8007190 <Mic_Upkeep+0x20c>)
 800702a:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800702c:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 800702e:	4b58      	ldr	r3, [pc, #352]	@ (8007190 <Mic_Upkeep+0x20c>)
 8007030:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007032:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8007034:	4b56      	ldr	r3, [pc, #344]	@ (8007190 <Mic_Upkeep+0x20c>)
 8007036:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007038:	4856      	ldr	r0, [pc, #344]	@ (8007194 <Mic_Upkeep+0x210>)
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	0023      	movs	r3, r4
 800703e:	f000 faf5 	bl	800762c <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8007042:	4b53      	ldr	r3, [pc, #332]	@ (8007190 <Mic_Upkeep+0x20c>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	001a      	movs	r2, r3
 8007048:	4b51      	ldr	r3, [pc, #324]	@ (8007190 <Mic_Upkeep+0x20c>)
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	4952      	ldr	r1, [pc, #328]	@ (8007198 <Mic_Upkeep+0x214>)
 800704e:	0038      	movs	r0, r7
 8007050:	f013 ffcc 	bl	801afec <siprintf>

      dBValue = atof(dBbuffer);
 8007054:	003b      	movs	r3, r7
 8007056:	0018      	movs	r0, r3
 8007058:	f012 fc74 	bl	8019944 <atof>
 800705c:	0002      	movs	r2, r0
 800705e:	000b      	movs	r3, r1
 8007060:	0010      	movs	r0, r2
 8007062:	0019      	movs	r1, r3
 8007064:	f7fc fa3c 	bl	80034e0 <__aeabi_d2f>
 8007068:	1c02      	adds	r2, r0, #0
 800706a:	4b4c      	ldr	r3, [pc, #304]	@ (800719c <Mic_Upkeep+0x218>)
 800706c:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800706e:	4b4b      	ldr	r3, [pc, #300]	@ (800719c <Mic_Upkeep+0x218>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	494b      	ldr	r1, [pc, #300]	@ (80071a0 <Mic_Upkeep+0x21c>)
 8007074:	1c18      	adds	r0, r3, #0
 8007076:	f7f9 ff89 	bl	8000f8c <__aeabi_fmul>
 800707a:	1c03      	adds	r3, r0, #0
 800707c:	1c18      	adds	r0, r3, #0
 800707e:	f7fc f9e7 	bl	8003450 <__aeabi_f2d>
 8007082:	2200      	movs	r2, #0
 8007084:	4b47      	ldr	r3, [pc, #284]	@ (80071a4 <Mic_Upkeep+0x220>)
 8007086:	f7fa fb27 	bl	80016d8 <__aeabi_dadd>
 800708a:	0002      	movs	r2, r0
 800708c:	000b      	movs	r3, r1
 800708e:	0010      	movs	r0, r2
 8007090:	0019      	movs	r1, r3
 8007092:	f7fc f94f 	bl	8003334 <__aeabi_d2iz>
 8007096:	0003      	movs	r3, r0
 8007098:	0018      	movs	r0, r3
 800709a:	f7fc f987 	bl	80033ac <__aeabi_i2d>
 800709e:	2200      	movs	r2, #0
 80070a0:	4b41      	ldr	r3, [pc, #260]	@ (80071a8 <Mic_Upkeep+0x224>)
 80070a2:	f7fa fe7d 	bl	8001da0 <__aeabi_ddiv>
 80070a6:	0002      	movs	r2, r0
 80070a8:	000b      	movs	r3, r1
 80070aa:	0010      	movs	r0, r2
 80070ac:	0019      	movs	r1, r3
 80070ae:	f7fc fa17 	bl	80034e0 <__aeabi_d2f>
 80070b2:	1c02      	adds	r2, r0, #0
 80070b4:	4b39      	ldr	r3, [pc, #228]	@ (800719c <Mic_Upkeep+0x218>)
 80070b6:	601a      	str	r2, [r3, #0]
      MIC_Print();
 80070b8:	f000 f966 	bl	8007388 <MIC_Print>
      if (!startSPLcalculation()) {
 80070bc:	f002 f8b6 	bl	800922c <startSPLcalculation>
 80070c0:	0003      	movs	r3, r0
 80070c2:	001a      	movs	r2, r3
 80070c4:	2301      	movs	r3, #1
 80070c6:	4053      	eors	r3, r2
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 80070ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007184 <Mic_Upkeep+0x200>)
 80070d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007188 <Mic_Upkeep+0x204>)
 80070d2:	21f9      	movs	r1, #249	@ 0xf9
 80070d4:	0018      	movs	r0, r3
 80070d6:	f003 feed 	bl	800aeb4 <errorHandler>
      }
      if (!enableMicrophone(false))
 80070da:	2000      	movs	r0, #0
 80070dc:	f002 f83c 	bl	8009158 <enableMicrophone>
 80070e0:	0003      	movs	r3, r0
 80070e2:	001a      	movs	r2, r3
 80070e4:	2301      	movs	r3, #1
 80070e6:	4053      	eors	r3, r2
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80070ee:	4a25      	ldr	r2, [pc, #148]	@ (8007184 <Mic_Upkeep+0x200>)
 80070f0:	4b25      	ldr	r3, [pc, #148]	@ (8007188 <Mic_Upkeep+0x204>)
 80070f2:	21fd      	movs	r1, #253	@ 0xfd
 80070f4:	0018      	movs	r0, r3
 80070f6:	f003 fedd 	bl	800aeb4 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 80070fa:	f004 f9d1 	bl	800b4a0 <HAL_GetTick>
 80070fe:	0003      	movs	r3, r0
 8007100:	22fa      	movs	r2, #250	@ 0xfa
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	189a      	adds	r2, r3, r2
 8007106:	4b29      	ldr	r3, [pc, #164]	@ (80071ac <Mic_Upkeep+0x228>)
 8007108:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800710a:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <Mic_Upkeep+0x1fc>)
 800710c:	2203      	movs	r2, #3
 800710e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8007110:	f002 ff92 	bl	800a038 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 8007114:	e02a      	b.n	800716c <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007116:	4b25      	ldr	r3, [pc, #148]	@ (80071ac <Mic_Upkeep+0x228>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	0018      	movs	r0, r3
 800711c:	f003 fdc8 	bl	800acb0 <TimestampIsReached>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d025      	beq.n	8007170 <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 8007124:	2001      	movs	r0, #1
 8007126:	f002 f817 	bl	8009158 <enableMicrophone>
 800712a:	0003      	movs	r3, r0
 800712c:	001a      	movs	r2, r3
 800712e:	2301      	movs	r3, #1
 8007130:	4053      	eors	r3, r2
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007138:	4a12      	ldr	r2, [pc, #72]	@ (8007184 <Mic_Upkeep+0x200>)
 800713a:	230c      	movs	r3, #12
 800713c:	33ff      	adds	r3, #255	@ 0xff
 800713e:	0019      	movs	r1, r3
 8007140:	4b11      	ldr	r3, [pc, #68]	@ (8007188 <Mic_Upkeep+0x204>)
 8007142:	0018      	movs	r0, r3
 8007144:	f003 feb6 	bl	800aeb4 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007148:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <Mic_Upkeep+0x1fc>)
 800714a:	2201      	movs	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800714e:	f002 ff5b 	bl	800a008 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 8007152:	e00d      	b.n	8007170 <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 8007154:	4a16      	ldr	r2, [pc, #88]	@ (80071b0 <Mic_Upkeep+0x22c>)
 8007156:	4b17      	ldr	r3, [pc, #92]	@ (80071b4 <Mic_Upkeep+0x230>)
 8007158:	0019      	movs	r1, r3
 800715a:	2003      	movs	r0, #3
 800715c:	f003 fdfe 	bl	800ad5c <CreateLine>
    MicState = MIC_STATE_INIT;
 8007160:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <Mic_Upkeep+0x1fc>)
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 8007166:	e004      	b.n	8007172 <Mic_Upkeep+0x1ee>
    break;
 8007168:	46c0      	nop			@ (mov r8, r8)
 800716a:	e002      	b.n	8007172 <Mic_Upkeep+0x1ee>
    break;
 800716c:	46c0      	nop			@ (mov r8, r8)
 800716e:	e000      	b.n	8007172 <Mic_Upkeep+0x1ee>
    break;
 8007170:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007172:	4b03      	ldr	r3, [pc, #12]	@ (8007180 <Mic_Upkeep+0x1fc>)
 8007174:	781b      	ldrb	r3, [r3, #0]
}
 8007176:	0018      	movs	r0, r3
 8007178:	46bd      	mov	sp, r7
 800717a:	b003      	add	sp, #12
 800717c:	bd90      	pop	{r4, r7, pc}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	20000eea 	.word	0x20000eea
 8007184:	0801e934 	.word	0x0801e934
 8007188:	0801f1ac 	.word	0x0801f1ac
 800718c:	2000120c 	.word	0x2000120c
 8007190:	20000ed8 	.word	0x20000ed8
 8007194:	0801e950 	.word	0x0801e950
 8007198:	0801e97c 	.word	0x0801e97c
 800719c:	20000f1c 	.word	0x20000f1c
 80071a0:	42c80000 	.word	0x42c80000
 80071a4:	3fe00000 	.word	0x3fe00000
 80071a8:	40590000 	.word	0x40590000
 80071ac:	20000ed4 	.word	0x20000ed4
 80071b0:	0801e984 	.word	0x0801e984
 80071b4:	0801e8c4 	.word	0x0801e8c4

080071b8 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 80071b8:	b5b0      	push	{r4, r5, r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 80071be:	4b3c      	ldr	r3, [pc, #240]	@ (80072b0 <Meas_Upkeep+0xf8>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b06      	cmp	r3, #6
 80071c4:	d868      	bhi.n	8007298 <Meas_Upkeep+0xe0>
 80071c6:	009a      	lsls	r2, r3, #2
 80071c8:	4b3a      	ldr	r3, [pc, #232]	@ (80072b4 <Meas_Upkeep+0xfc>)
 80071ca:	18d3      	adds	r3, r2, r3
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 80071d0:	4a39      	ldr	r2, [pc, #228]	@ (80072b8 <Meas_Upkeep+0x100>)
 80071d2:	4b3a      	ldr	r3, [pc, #232]	@ (80072bc <Meas_Upkeep+0x104>)
 80071d4:	0019      	movs	r1, r3
 80071d6:	2003      	movs	r0, #3
 80071d8:	f003 fdc0 	bl	800ad5c <CreateLine>
    break;
 80071dc:	e063      	b.n	80072a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80071de:	f7ff fe7d 	bl	8006edc <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80071e2:	4b33      	ldr	r3, [pc, #204]	@ (80072b0 <Meas_Upkeep+0xf8>)
 80071e4:	2201      	movs	r2, #1
 80071e6:	701a      	strb	r2, [r3, #0]
    break;
 80071e8:	e05d      	b.n	80072a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80071ea:	f7ff fdfd 	bl	8006de8 <StartMeasurements>
    SetMeasurementIndicator();
 80071ee:	f002 fedd 	bl	8009fac <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80071f2:	4b2f      	ldr	r3, [pc, #188]	@ (80072b0 <Meas_Upkeep+0xf8>)
 80071f4:	2202      	movs	r2, #2
 80071f6:	701a      	strb	r2, [r3, #0]
   break;
 80071f8:	e055      	b.n	80072a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80071fa:	f7ff fe8b 	bl	8006f14 <MeasurementsCompleted>
 80071fe:	1e03      	subs	r3, r0, #0
 8007200:	d04e      	beq.n	80072a0 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007202:	4b2b      	ldr	r3, [pc, #172]	@ (80072b0 <Meas_Upkeep+0xf8>)
 8007204:	2203      	movs	r2, #3
 8007206:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007208:	e04a      	b.n	80072a0 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 800720a:	4a2d      	ldr	r2, [pc, #180]	@ (80072c0 <Meas_Upkeep+0x108>)
 800720c:	4b2b      	ldr	r3, [pc, #172]	@ (80072bc <Meas_Upkeep+0x104>)
 800720e:	0019      	movs	r1, r3
 8007210:	2003      	movs	r0, #3
 8007212:	f003 fda3 	bl	800ad5c <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007216:	4b2b      	ldr	r3, [pc, #172]	@ (80072c4 <Meas_Upkeep+0x10c>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	4a2b      	ldr	r2, [pc, #172]	@ (80072c8 <Meas_Upkeep+0x110>)
 800721c:	4927      	ldr	r1, [pc, #156]	@ (80072bc <Meas_Upkeep+0x104>)
 800721e:	2003      	movs	r0, #3
 8007220:	f003 fd9c 	bl	800ad5c <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007224:	4b27      	ldr	r3, [pc, #156]	@ (80072c4 <Meas_Upkeep+0x10c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	1c18      	adds	r0, r3, #0
 800722a:	f7fc f911 	bl	8003450 <__aeabi_f2d>
 800722e:	0004      	movs	r4, r0
 8007230:	000d      	movs	r5, r1
 8007232:	4b24      	ldr	r3, [pc, #144]	@ (80072c4 <Meas_Upkeep+0x10c>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	1c18      	adds	r0, r3, #0
 8007238:	f7fc f90a 	bl	8003450 <__aeabi_f2d>
 800723c:	0002      	movs	r2, r0
 800723e:	000b      	movs	r3, r1
 8007240:	4822      	ldr	r0, [pc, #136]	@ (80072cc <Meas_Upkeep+0x114>)
 8007242:	491e      	ldr	r1, [pc, #120]	@ (80072bc <Meas_Upkeep+0x104>)
 8007244:	9202      	str	r2, [sp, #8]
 8007246:	9303      	str	r3, [sp, #12]
 8007248:	9400      	str	r4, [sp, #0]
 800724a:	9501      	str	r5, [sp, #4]
 800724c:	0002      	movs	r2, r0
 800724e:	2003      	movs	r0, #3
 8007250:	f003 fd84 	bl	800ad5c <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007254:	4b1b      	ldr	r3, [pc, #108]	@ (80072c4 <Meas_Upkeep+0x10c>)
 8007256:	6858      	ldr	r0, [r3, #4]
 8007258:	4b1a      	ldr	r3, [pc, #104]	@ (80072c4 <Meas_Upkeep+0x10c>)
 800725a:	6819      	ldr	r1, [r3, #0]
 800725c:	4b19      	ldr	r3, [pc, #100]	@ (80072c4 <Meas_Upkeep+0x10c>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	b29b      	uxth	r3, r3
 8007262:	001a      	movs	r2, r3
 8007264:	f7fc fb24 	bl	80038b0 <setMeasurement>
    ResetMeasurementIndicator();
 8007268:	f002 feb8 	bl	8009fdc <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 800726c:	f004 f918 	bl	800b4a0 <HAL_GetTick>
 8007270:	0003      	movs	r3, r0
 8007272:	4a17      	ldr	r2, [pc, #92]	@ (80072d0 <Meas_Upkeep+0x118>)
 8007274:	189a      	adds	r2, r3, r2
 8007276:	4b17      	ldr	r3, [pc, #92]	@ (80072d4 <Meas_Upkeep+0x11c>)
 8007278:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 800727a:	4b0d      	ldr	r3, [pc, #52]	@ (80072b0 <Meas_Upkeep+0xf8>)
 800727c:	2206      	movs	r2, #6
 800727e:	701a      	strb	r2, [r3, #0]
    break;
 8007280:	e011      	b.n	80072a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007282:	4b14      	ldr	r3, [pc, #80]	@ (80072d4 <Meas_Upkeep+0x11c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	0018      	movs	r0, r3
 8007288:	f003 fd12 	bl	800acb0 <TimestampIsReached>
 800728c:	1e03      	subs	r3, r0, #0
 800728e:	d009      	beq.n	80072a4 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007290:	4b07      	ldr	r3, [pc, #28]	@ (80072b0 <Meas_Upkeep+0xf8>)
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007296:	e005      	b.n	80072a4 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007298:	4b05      	ldr	r3, [pc, #20]	@ (80072b0 <Meas_Upkeep+0xf8>)
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
    break;
 800729e:	e002      	b.n	80072a6 <Meas_Upkeep+0xee>
    break;
 80072a0:	46c0      	nop			@ (mov r8, r8)
 80072a2:	e000      	b.n	80072a6 <Meas_Upkeep+0xee>
    break;
 80072a4:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 80072a6:	4b02      	ldr	r3, [pc, #8]	@ (80072b0 <Meas_Upkeep+0xf8>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
}
 80072aa:	0018      	movs	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bdb0      	pop	{r4, r5, r7, pc}
 80072b0:	20000eeb 	.word	0x20000eeb
 80072b4:	0801f190 	.word	0x0801f190
 80072b8:	0801e9a4 	.word	0x0801e9a4
 80072bc:	0801e8c4 	.word	0x0801e8c4
 80072c0:	0801e9c4 	.word	0x0801e9c4
 80072c4:	20000e84 	.word	0x20000e84
 80072c8:	0801e9d8 	.word	0x0801e9d8
 80072cc:	0801e9f0 	.word	0x0801e9f0
 80072d0:	00002710 	.word	0x00002710
 80072d4:	20000ed0 	.word	0x20000ed0

080072d8 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80072e2:	240f      	movs	r4, #15
 80072e4:	193b      	adds	r3, r7, r4
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80072ea:	4b20      	ldr	r3, [pc, #128]	@ (800736c <Meas_SetEnabledSensors+0x94>)
 80072ec:	1d3a      	adds	r2, r7, #4
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80072f2:	193b      	adds	r3, r7, r4
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	193a      	adds	r2, r7, r4
 80072f8:	1c59      	adds	r1, r3, #1
 80072fa:	7011      	strb	r1, [r2, #0]
 80072fc:	0018      	movs	r0, r3
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	7819      	ldrb	r1, [r3, #0]
 8007302:	4a1b      	ldr	r2, [pc, #108]	@ (8007370 <Meas_SetEnabledSensors+0x98>)
 8007304:	0103      	lsls	r3, r0, #4
 8007306:	18d3      	adds	r3, r2, r3
 8007308:	330c      	adds	r3, #12
 800730a:	1c0a      	adds	r2, r1, #0
 800730c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800730e:	193b      	adds	r3, r7, r4
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	193a      	adds	r2, r7, r4
 8007314:	1c59      	adds	r1, r3, #1
 8007316:	7011      	strb	r1, [r2, #0]
 8007318:	0018      	movs	r0, r3
 800731a:	1d3b      	adds	r3, r7, #4
 800731c:	7859      	ldrb	r1, [r3, #1]
 800731e:	4a14      	ldr	r2, [pc, #80]	@ (8007370 <Meas_SetEnabledSensors+0x98>)
 8007320:	0103      	lsls	r3, r0, #4
 8007322:	18d3      	adds	r3, r2, r3
 8007324:	330c      	adds	r3, #12
 8007326:	1c0a      	adds	r2, r1, #0
 8007328:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 800732a:	193b      	adds	r3, r7, r4
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	193a      	adds	r2, r7, r4
 8007330:	1c59      	adds	r1, r3, #1
 8007332:	7011      	strb	r1, [r2, #0]
 8007334:	0018      	movs	r0, r3
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	7899      	ldrb	r1, [r3, #2]
 800733a:	4a0d      	ldr	r2, [pc, #52]	@ (8007370 <Meas_SetEnabledSensors+0x98>)
 800733c:	0103      	lsls	r3, r0, #4
 800733e:	18d3      	adds	r3, r2, r3
 8007340:	330c      	adds	r3, #12
 8007342:	1c0a      	adds	r2, r1, #0
 8007344:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007346:	193b      	adds	r3, r7, r4
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	193a      	adds	r2, r7, r4
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	7011      	strb	r1, [r2, #0]
 8007350:	0018      	movs	r0, r3
 8007352:	1d3b      	adds	r3, r7, #4
 8007354:	78d9      	ldrb	r1, [r3, #3]
 8007356:	4a06      	ldr	r2, [pc, #24]	@ (8007370 <Meas_SetEnabledSensors+0x98>)
 8007358:	0103      	lsls	r3, r0, #4
 800735a:	18d3      	adds	r3, r2, r3
 800735c:	330c      	adds	r3, #12
 800735e:	1c0a      	adds	r2, r1, #0
 8007360:	701a      	strb	r2, [r3, #0]
}
 8007362:	46c0      	nop			@ (mov r8, r8)
 8007364:	46bd      	mov	sp, r7
 8007366:	b005      	add	sp, #20
 8007368:	bd90      	pop	{r4, r7, pc}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	20000ec4 	.word	0x20000ec4
 8007370:	20000e94 	.word	0x20000e94

08007374 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007378:	4b02      	ldr	r3, [pc, #8]	@ (8007384 <SetESPMeasurementDone+0x10>)
 800737a:	2201      	movs	r2, #1
 800737c:	70da      	strb	r2, [r3, #3]
}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000ec8 	.word	0x20000ec8

08007388 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 800738e:	4b81      	ldr	r3, [pc, #516]	@ (8007594 <MIC_Print+0x20c>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b81      	ldr	r3, [pc, #516]	@ (8007598 <MIC_Print+0x210>)
 8007394:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007396:	4b81      	ldr	r3, [pc, #516]	@ (800759c <MIC_Print+0x214>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b09      	cmp	r3, #9
 800739c:	d80e      	bhi.n	80073bc <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 800739e:	4b7f      	ldr	r3, [pc, #508]	@ (800759c <MIC_Print+0x214>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	001a      	movs	r2, r3
 80073a4:	4b7c      	ldr	r3, [pc, #496]	@ (8007598 <MIC_Print+0x210>)
 80073a6:	6819      	ldr	r1, [r3, #0]
 80073a8:	4b7d      	ldr	r3, [pc, #500]	@ (80075a0 <MIC_Print+0x218>)
 80073aa:	0092      	lsls	r2, r2, #2
 80073ac:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80073ae:	4b7b      	ldr	r3, [pc, #492]	@ (800759c <MIC_Print+0x214>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	4b79      	ldr	r3, [pc, #484]	@ (800759c <MIC_Print+0x214>)
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e013      	b.n	80073e4 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 80073bc:	4b77      	ldr	r3, [pc, #476]	@ (800759c <MIC_Print+0x214>)
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 80073c2:	4b76      	ldr	r3, [pc, #472]	@ (800759c <MIC_Print+0x214>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	001a      	movs	r2, r3
 80073c8:	4b73      	ldr	r3, [pc, #460]	@ (8007598 <MIC_Print+0x210>)
 80073ca:	6819      	ldr	r1, [r3, #0]
 80073cc:	4b74      	ldr	r3, [pc, #464]	@ (80075a0 <MIC_Print+0x218>)
 80073ce:	0092      	lsls	r2, r2, #2
 80073d0:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80073d2:	4b72      	ldr	r3, [pc, #456]	@ (800759c <MIC_Print+0x214>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	3301      	adds	r3, #1
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	4b70      	ldr	r3, [pc, #448]	@ (800759c <MIC_Print+0x214>)
 80073dc:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 80073de:	4b71      	ldr	r3, [pc, #452]	@ (80075a4 <MIC_Print+0x21c>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 80073e4:	4b6f      	ldr	r3, [pc, #444]	@ (80075a4 <MIC_Print+0x21c>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2201      	movs	r2, #1
 80073ea:	4053      	eors	r3, r2
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 80073f2:	4b69      	ldr	r3, [pc, #420]	@ (8007598 <MIC_Print+0x210>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	1c18      	adds	r0, r3, #0
 80073f8:	f7fc fa76 	bl	80038e8 <setMic>
 80073fc:	e02d      	b.n	800745a <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 80073fe:	4b6a      	ldr	r3, [pc, #424]	@ (80075a8 <MIC_Print+0x220>)
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007404:	1dfb      	adds	r3, r7, #7
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e013      	b.n	8007434 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 800740c:	1dfb      	adds	r3, r7, #7
 800740e:	781a      	ldrb	r2, [r3, #0]
 8007410:	4b63      	ldr	r3, [pc, #396]	@ (80075a0 <MIC_Print+0x218>)
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	58d2      	ldr	r2, [r2, r3]
 8007416:	4b64      	ldr	r3, [pc, #400]	@ (80075a8 <MIC_Print+0x220>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	1c19      	adds	r1, r3, #0
 800741c:	1c10      	adds	r0, r2, #0
 800741e:	f7f9 fa45 	bl	80008ac <__aeabi_fadd>
 8007422:	1c03      	adds	r3, r0, #0
 8007424:	1c1a      	adds	r2, r3, #0
 8007426:	4b60      	ldr	r3, [pc, #384]	@ (80075a8 <MIC_Print+0x220>)
 8007428:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 800742a:	1dfb      	adds	r3, r7, #7
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	1dfb      	adds	r3, r7, #7
 8007430:	3201      	adds	r2, #1
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	1dfb      	adds	r3, r7, #7
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b09      	cmp	r3, #9
 800743a:	d9e7      	bls.n	800740c <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 800743c:	4b5a      	ldr	r3, [pc, #360]	@ (80075a8 <MIC_Print+0x220>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	495a      	ldr	r1, [pc, #360]	@ (80075ac <MIC_Print+0x224>)
 8007442:	1c18      	adds	r0, r3, #0
 8007444:	f7f9 fbbc 	bl	8000bc0 <__aeabi_fdiv>
 8007448:	1c03      	adds	r3, r0, #0
 800744a:	1c1a      	adds	r2, r3, #0
 800744c:	4b56      	ldr	r3, [pc, #344]	@ (80075a8 <MIC_Print+0x220>)
 800744e:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007450:	4b55      	ldr	r3, [pc, #340]	@ (80075a8 <MIC_Print+0x220>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	1c18      	adds	r0, r3, #0
 8007456:	f7fc fa47 	bl	80038e8 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 90){ //white
 800745a:	4b4f      	ldr	r3, [pc, #316]	@ (8007598 <MIC_Print+0x210>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4954      	ldr	r1, [pc, #336]	@ (80075b0 <MIC_Print+0x228>)
 8007460:	1c18      	adds	r0, r3, #0
 8007462:	f7f9 f86f 	bl	8000544 <__aeabi_fcmpgt>
 8007466:	1e03      	subs	r3, r0, #0
 8007468:	d004      	beq.n	8007474 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 800746a:	2201      	movs	r2, #1
 800746c:	2101      	movs	r1, #1
 800746e:	2001      	movs	r0, #1
 8007470:	f002 fd1e 	bl	8009eb0 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8007474:	4b48      	ldr	r3, [pc, #288]	@ (8007598 <MIC_Print+0x210>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	494d      	ldr	r1, [pc, #308]	@ (80075b0 <MIC_Print+0x228>)
 800747a:	1c18      	adds	r0, r3, #0
 800747c:	f7f9 f84e 	bl	800051c <__aeabi_fcmplt>
 8007480:	1e03      	subs	r3, r0, #0
 8007482:	d00c      	beq.n	800749e <MIC_Print+0x116>
 8007484:	4b44      	ldr	r3, [pc, #272]	@ (8007598 <MIC_Print+0x210>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	494a      	ldr	r1, [pc, #296]	@ (80075b4 <MIC_Print+0x22c>)
 800748a:	1c18      	adds	r0, r3, #0
 800748c:	f7f9 f864 	bl	8000558 <__aeabi_fcmpge>
 8007490:	1e03      	subs	r3, r0, #0
 8007492:	d004      	beq.n	800749e <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	2001      	movs	r0, #1
 800749a:	f002 fd09 	bl	8009eb0 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//purple
 800749e:	4b3e      	ldr	r3, [pc, #248]	@ (8007598 <MIC_Print+0x210>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4944      	ldr	r1, [pc, #272]	@ (80075b4 <MIC_Print+0x22c>)
 80074a4:	1c18      	adds	r0, r3, #0
 80074a6:	f7f9 f839 	bl	800051c <__aeabi_fcmplt>
 80074aa:	1e03      	subs	r3, r0, #0
 80074ac:	d00c      	beq.n	80074c8 <MIC_Print+0x140>
 80074ae:	4b3a      	ldr	r3, [pc, #232]	@ (8007598 <MIC_Print+0x210>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4941      	ldr	r1, [pc, #260]	@ (80075b8 <MIC_Print+0x230>)
 80074b4:	1c18      	adds	r0, r3, #0
 80074b6:	f7f9 f84f 	bl	8000558 <__aeabi_fcmpge>
 80074ba:	1e03      	subs	r3, r0, #0
 80074bc:	d004      	beq.n	80074c8 <MIC_Print+0x140>
    SetDBLED(true, false, true);
 80074be:	2201      	movs	r2, #1
 80074c0:	2100      	movs	r1, #0
 80074c2:	2001      	movs	r0, #1
 80074c4:	f002 fcf4 	bl	8009eb0 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//yellow
 80074c8:	4b33      	ldr	r3, [pc, #204]	@ (8007598 <MIC_Print+0x210>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	493a      	ldr	r1, [pc, #232]	@ (80075b8 <MIC_Print+0x230>)
 80074ce:	1c18      	adds	r0, r3, #0
 80074d0:	f7f9 f824 	bl	800051c <__aeabi_fcmplt>
 80074d4:	1e03      	subs	r3, r0, #0
 80074d6:	d00c      	beq.n	80074f2 <MIC_Print+0x16a>
 80074d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007598 <MIC_Print+0x210>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4937      	ldr	r1, [pc, #220]	@ (80075bc <MIC_Print+0x234>)
 80074de:	1c18      	adds	r0, r3, #0
 80074e0:	f7f9 f83a 	bl	8000558 <__aeabi_fcmpge>
 80074e4:	1e03      	subs	r3, r0, #0
 80074e6:	d004      	beq.n	80074f2 <MIC_Print+0x16a>
    SetDBLED(true, true, false);
 80074e8:	2200      	movs	r2, #0
 80074ea:	2101      	movs	r1, #1
 80074ec:	2001      	movs	r0, #1
 80074ee:	f002 fcdf 	bl	8009eb0 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//Green
 80074f2:	4b29      	ldr	r3, [pc, #164]	@ (8007598 <MIC_Print+0x210>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4931      	ldr	r1, [pc, #196]	@ (80075bc <MIC_Print+0x234>)
 80074f8:	1c18      	adds	r0, r3, #0
 80074fa:	f7f9 f80f 	bl	800051c <__aeabi_fcmplt>
 80074fe:	1e03      	subs	r3, r0, #0
 8007500:	d00c      	beq.n	800751c <MIC_Print+0x194>
 8007502:	4b25      	ldr	r3, [pc, #148]	@ (8007598 <MIC_Print+0x210>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	492e      	ldr	r1, [pc, #184]	@ (80075c0 <MIC_Print+0x238>)
 8007508:	1c18      	adds	r0, r3, #0
 800750a:	f7f9 f825 	bl	8000558 <__aeabi_fcmpge>
 800750e:	1e03      	subs	r3, r0, #0
 8007510:	d004      	beq.n	800751c <MIC_Print+0x194>
    SetDBLED(false, true, false);
 8007512:	2200      	movs	r2, #0
 8007514:	2101      	movs	r1, #1
 8007516:	2000      	movs	r0, #0
 8007518:	f002 fcca 	bl	8009eb0 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//blue
 800751c:	4b1e      	ldr	r3, [pc, #120]	@ (8007598 <MIC_Print+0x210>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4927      	ldr	r1, [pc, #156]	@ (80075c0 <MIC_Print+0x238>)
 8007522:	1c18      	adds	r0, r3, #0
 8007524:	f7f8 fffa 	bl	800051c <__aeabi_fcmplt>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d00c      	beq.n	8007546 <MIC_Print+0x1be>
 800752c:	4b1a      	ldr	r3, [pc, #104]	@ (8007598 <MIC_Print+0x210>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4924      	ldr	r1, [pc, #144]	@ (80075c4 <MIC_Print+0x23c>)
 8007532:	1c18      	adds	r0, r3, #0
 8007534:	f7f9 f810 	bl	8000558 <__aeabi_fcmpge>
 8007538:	1e03      	subs	r3, r0, #0
 800753a:	d004      	beq.n	8007546 <MIC_Print+0x1be>
    SetDBLED(false, false, true);
 800753c:	2201      	movs	r2, #1
 800753e:	2100      	movs	r1, #0
 8007540:	2000      	movs	r0, #0
 8007542:	f002 fcb5 	bl	8009eb0 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//light blue
 8007546:	4b14      	ldr	r3, [pc, #80]	@ (8007598 <MIC_Print+0x210>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	491e      	ldr	r1, [pc, #120]	@ (80075c4 <MIC_Print+0x23c>)
 800754c:	1c18      	adds	r0, r3, #0
 800754e:	f7f8 ffe5 	bl	800051c <__aeabi_fcmplt>
 8007552:	1e03      	subs	r3, r0, #0
 8007554:	d00c      	beq.n	8007570 <MIC_Print+0x1e8>
 8007556:	4b10      	ldr	r3, [pc, #64]	@ (8007598 <MIC_Print+0x210>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	491b      	ldr	r1, [pc, #108]	@ (80075c8 <MIC_Print+0x240>)
 800755c:	1c18      	adds	r0, r3, #0
 800755e:	f7f8 fffb 	bl	8000558 <__aeabi_fcmpge>
 8007562:	1e03      	subs	r3, r0, #0
 8007564:	d004      	beq.n	8007570 <MIC_Print+0x1e8>
    SetDBLED(false, true, true);
 8007566:	2201      	movs	r2, #1
 8007568:	2101      	movs	r1, #1
 800756a:	2000      	movs	r0, #0
 800756c:	f002 fca0 	bl	8009eb0 <SetDBLED>
  }
  if(dBc < 35){//off
 8007570:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <MIC_Print+0x210>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4914      	ldr	r1, [pc, #80]	@ (80075c8 <MIC_Print+0x240>)
 8007576:	1c18      	adds	r0, r3, #0
 8007578:	f7f8 ffd0 	bl	800051c <__aeabi_fcmplt>
 800757c:	1e03      	subs	r3, r0, #0
 800757e:	d100      	bne.n	8007582 <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }


  //FFT();
}
 8007580:	e004      	b.n	800758c <MIC_Print+0x204>
    SetDBLED(false, false, false);
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	2000      	movs	r0, #0
 8007588:	f002 fc92 	bl	8009eb0 <SetDBLED>
}
 800758c:	46c0      	nop			@ (mov r8, r8)
 800758e:	46bd      	mov	sp, r7
 8007590:	b002      	add	sp, #8
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000f1c 	.word	0x20000f1c
 8007598:	20000eec 	.word	0x20000eec
 800759c:	20000f20 	.word	0x20000f20
 80075a0:	20000ef0 	.word	0x20000ef0
 80075a4:	20000f21 	.word	0x20000f21
 80075a8:	20000f18 	.word	0x20000f18
 80075ac:	41200000 	.word	0x41200000
 80075b0:	42b40000 	.word	0x42b40000
 80075b4:	42a00000 	.word	0x42a00000
 80075b8:	428c0000 	.word	0x428c0000
 80075bc:	42700000 	.word	0x42700000
 80075c0:	42480000 	.word	0x42480000
 80075c4:	42200000 	.word	0x42200000
 80075c8:	420c0000 	.word	0x420c0000

080075cc <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80075d2:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <MIC_TestMeasurementDone+0x4c>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4a10      	ldr	r2, [pc, #64]	@ (800761c <MIC_TestMeasurementDone+0x50>)
 80075da:	4911      	ldr	r1, [pc, #68]	@ (8007620 <MIC_TestMeasurementDone+0x54>)
 80075dc:	2002      	movs	r0, #2
 80075de:	f003 fbbd 	bl	800ad5c <CreateLine>
  if(DataReady) {
 80075e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007618 <MIC_TestMeasurementDone+0x4c>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d010      	beq.n	800760e <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007624 <MIC_TestMeasurementDone+0x58>)
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80075f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007624 <MIC_TestMeasurementDone+0x58>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007628 <MIC_TestMeasurementDone+0x5c>)
 80075fc:	4908      	ldr	r1, [pc, #32]	@ (8007620 <MIC_TestMeasurementDone+0x54>)
 80075fe:	2002      	movs	r0, #2
 8007600:	f003 fbac 	bl	800ad5c <CreateLine>
    ResetMICIndicator();
 8007604:	f002 fd18 	bl	800a038 <ResetMICIndicator>
    return Check;
 8007608:	1dfb      	adds	r3, r7, #7
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	e000      	b.n	8007610 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800760e:	2300      	movs	r3, #0
}
 8007610:	0018      	movs	r0, r3
 8007612:	46bd      	mov	sp, r7
 8007614:	b002      	add	sp, #8
 8007616:	bd80      	pop	{r7, pc}
 8007618:	2000120c 	.word	0x2000120c
 800761c:	0801ea24 	.word	0x0801ea24
 8007620:	0801ea50 	.word	0x0801ea50
 8007624:	2000120d 	.word	0x2000120d
 8007628:	0801ea54 	.word	0x0801ea54

0800762c <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 800762c:	b40f      	push	{r0, r1, r2, r3}
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8007634:	2314      	movs	r3, #20
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	2180      	movs	r1, #128	@ 0x80
 8007640:	0089      	lsls	r1, r1, #2
 8007642:	480a      	ldr	r0, [pc, #40]	@ (800766c <print+0x40>)
 8007644:	f013 fd6a 	bl	801b11c <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8007648:	4b08      	ldr	r3, [pc, #32]	@ (800766c <print+0x40>)
 800764a:	0018      	movs	r0, r3
 800764c:	f7f8 fd84 	bl	8000158 <strlen>
 8007650:	0003      	movs	r3, r0
 8007652:	b29a      	uxth	r2, r3
 8007654:	4b05      	ldr	r3, [pc, #20]	@ (800766c <print+0x40>)
 8007656:	0011      	movs	r1, r2
 8007658:	0018      	movs	r0, r3
 800765a:	f7ff fa43 	bl	8006ae4 <printString>
}
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	46bd      	mov	sp, r7
 8007662:	b002      	add	sp, #8
 8007664:	bc80      	pop	{r7}
 8007666:	bc08      	pop	{r3}
 8007668:	b004      	add	sp, #16
 800766a:	4718      	bx	r3
 800766c:	20000f24 	.word	0x20000f24

08007670 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007674:	4b16      	ldr	r3, [pc, #88]	@ (80076d0 <MX_RTC_Init+0x60>)
 8007676:	4a17      	ldr	r2, [pc, #92]	@ (80076d4 <MX_RTC_Init+0x64>)
 8007678:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800767a:	4b15      	ldr	r3, [pc, #84]	@ (80076d0 <MX_RTC_Init+0x60>)
 800767c:	2200      	movs	r2, #0
 800767e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007680:	4b13      	ldr	r3, [pc, #76]	@ (80076d0 <MX_RTC_Init+0x60>)
 8007682:	227f      	movs	r2, #127	@ 0x7f
 8007684:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007686:	4b12      	ldr	r3, [pc, #72]	@ (80076d0 <MX_RTC_Init+0x60>)
 8007688:	22ff      	movs	r2, #255	@ 0xff
 800768a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800768c:	4b10      	ldr	r3, [pc, #64]	@ (80076d0 <MX_RTC_Init+0x60>)
 800768e:	2200      	movs	r2, #0
 8007690:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007692:	4b0f      	ldr	r3, [pc, #60]	@ (80076d0 <MX_RTC_Init+0x60>)
 8007694:	2200      	movs	r2, #0
 8007696:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007698:	4b0d      	ldr	r3, [pc, #52]	@ (80076d0 <MX_RTC_Init+0x60>)
 800769a:	2200      	movs	r2, #0
 800769c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800769e:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <MX_RTC_Init+0x60>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80076a4:	4b0a      	ldr	r3, [pc, #40]	@ (80076d0 <MX_RTC_Init+0x60>)
 80076a6:	0018      	movs	r0, r3
 80076a8:	f00a fa4c 	bl	8011b44 <HAL_RTC_Init>
 80076ac:	1e03      	subs	r3, r0, #0
 80076ae:	d001      	beq.n	80076b4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80076b0:	f7ff fa30 	bl	8006b14 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80076b4:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <MX_RTC_Init+0x60>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	2100      	movs	r1, #0
 80076ba:	0018      	movs	r0, r3
 80076bc:	f00a fc40 	bl	8011f40 <HAL_RTCEx_SetWakeUpTimer>
 80076c0:	1e03      	subs	r3, r0, #0
 80076c2:	d001      	beq.n	80076c8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80076c4:	f7ff fa26 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	46c0      	nop			@ (mov r8, r8)
 80076d0:	20001124 	.word	0x20001124
 80076d4:	40002800 	.word	0x40002800

080076d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a06      	ldr	r2, [pc, #24]	@ (8007700 <HAL_RTC_MspInit+0x28>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d106      	bne.n	80076f8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80076ea:	4b06      	ldr	r3, [pc, #24]	@ (8007704 <HAL_RTC_MspInit+0x2c>)
 80076ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076ee:	4b05      	ldr	r3, [pc, #20]	@ (8007704 <HAL_RTC_MspInit+0x2c>)
 80076f0:	2180      	movs	r1, #128	@ 0x80
 80076f2:	02c9      	lsls	r1, r1, #11
 80076f4:	430a      	orrs	r2, r1
 80076f6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80076f8:	46c0      	nop			@ (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b002      	add	sp, #8
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40002800 	.word	0x40002800
 8007704:	40021000 	.word	0x40021000

08007708 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d113      	bne.n	800774e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	22fe      	movs	r2, #254	@ 0xfe
 800772a:	0592      	lsls	r2, r2, #22
 800772c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4a1a      	ldr	r2, [pc, #104]	@ (800779c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8007732:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4a1a      	ldr	r2, [pc, #104]	@ (80077a0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007738:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4a19      	ldr	r2, [pc, #100]	@ (80077a4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800773e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a19      	ldr	r2, [pc, #100]	@ (80077a8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8007744:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a18      	ldr	r2, [pc, #96]	@ (80077ac <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800774a:	61da      	str	r2, [r3, #28]
 800774c:	e011      	b.n	8007772 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4a17      	ldr	r2, [pc, #92]	@ (80077b0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8007752:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a17      	ldr	r2, [pc, #92]	@ (80077b4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8007758:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4a16      	ldr	r2, [pc, #88]	@ (80077b8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800775e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a16      	ldr	r2, [pc, #88]	@ (80077bc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8007764:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4a15      	ldr	r2, [pc, #84]	@ (80077c0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800776a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4a15      	ldr	r2, [pc, #84]	@ (80077c4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007770:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a14      	ldr	r2, [pc, #80]	@ (80077c8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8007776:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800777c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4a12      	ldr	r2, [pc, #72]	@ (80077cc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007782:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a12      	ldr	r2, [pc, #72]	@ (80077d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	0018      	movs	r0, r3
 800778e:	f000 f831 	bl	80077f4 <GasIndexAlgorithm_reset>
}
 8007792:	46c0      	nop			@ (mov r8, r8)
 8007794:	46bd      	mov	sp, r7
 8007796:	b004      	add	sp, #16
 8007798:	bd80      	pop	{r7, pc}
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	00002710 	.word	0x00002710
 80077a0:	44340000 	.word	0x44340000
 80077a4:	46859800 	.word	0x46859800
 80077a8:	46a05000 	.word	0x46a05000
 80077ac:	41f00000 	.word	0x41f00000
 80077b0:	42c80000 	.word	0x42c80000
 80077b4:	00004e20 	.word	0x00004e20
 80077b8:	43340000 	.word	0x43340000
 80077bc:	4528c000 	.word	0x4528c000
 80077c0:	45a32000 	.word	0x45a32000
 80077c4:	43aa0000 	.word	0x43aa0000
 80077c8:	43660000 	.word	0x43660000
 80077cc:	41400000 	.word	0x41400000
 80077d0:	42480000 	.word	0x42480000

080077d4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80077de:	22fe      	movs	r2, #254	@ 0xfe
 80077e0:	0592      	lsls	r2, r2, #22
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	0018      	movs	r0, r3
 80077e8:	f7ff ff8e 	bl	8007708 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80077ec:	46c0      	nop			@ (mov r8, r8)
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b002      	add	sp, #8
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0018      	movs	r0, r3
 8007812:	f000 f805 	bl	8007820 <GasIndexAlgorithm__init_instances>
}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b002      	add	sp, #8
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	0018      	movs	r0, r3
 800782c:	f000 f8e8 	bl	8007a00 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	0018      	movs	r0, r3
 8007834:	f000 f9a6 	bl	8007b84 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007838:	1c04      	adds	r4, r0, #0
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0018      	movs	r0, r3
 800783e:	f000 f9ab 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007842:	1c02      	adds	r2, r0, #0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	1c21      	adds	r1, r4, #0
 8007848:	0018      	movs	r0, r3
 800784a:	f000 fc3b 	bl	80080c4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8007856:	23fe      	movs	r3, #254	@ 0xfe
 8007858:	059b      	lsls	r3, r3, #22
 800785a:	4a0a      	ldr	r2, [pc, #40]	@ (8007884 <GasIndexAlgorithm__init_instances+0x64>)
 800785c:	490a      	ldr	r1, [pc, #40]	@ (8007888 <GasIndexAlgorithm__init_instances+0x68>)
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fc86 	bl	8008170 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8007864:	e005      	b.n	8007872 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8007866:	4b09      	ldr	r3, [pc, #36]	@ (800788c <GasIndexAlgorithm__init_instances+0x6c>)
 8007868:	4a09      	ldr	r2, [pc, #36]	@ (8007890 <GasIndexAlgorithm__init_instances+0x70>)
 800786a:	490a      	ldr	r1, [pc, #40]	@ (8007894 <GasIndexAlgorithm__init_instances+0x74>)
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fc7f 	bl	8008170 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	0018      	movs	r0, r3
 8007876:	f000 fd35 	bl	80082e4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800787a:	46c0      	nop			@ (mov r8, r8)
 800787c:	46bd      	mov	sp, r7
 800787e:	b003      	add	sp, #12
 8007880:	bd90      	pop	{r4, r7, pc}
 8007882:	46c0      	nop			@ (mov r8, r8)
 8007884:	bc257a78 	.word	0xbc257a78
 8007888:	44198000 	.word	0x44198000
 800788c:	42c80000 	.word	0x42c80000
 8007890:	bbd4fdf4 	.word	0xbbd4fdf4
 8007894:	43550000 	.word	0x43550000

08007898 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a8:	4952      	ldr	r1, [pc, #328]	@ (80079f4 <GasIndexAlgorithm_process+0x15c>)
 80078aa:	1c18      	adds	r0, r3, #0
 80078ac:	f7f8 fe40 	bl	8000530 <__aeabi_fcmple>
 80078b0:	1e03      	subs	r3, r0, #0
 80078b2:	d00c      	beq.n	80078ce <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	1c19      	adds	r1, r3, #0
 80078be:	1c10      	adds	r0, r2, #0
 80078c0:	f7f8 fff4 	bl	80008ac <__aeabi_fadd>
 80078c4:	1c03      	adds	r3, r0, #0
 80078c6:	1c1a      	adds	r2, r3, #0
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80078cc:	e080      	b.n	80079d0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dd25      	ble.n	8007920 <GasIndexAlgorithm_process+0x88>
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4a48      	ldr	r2, [pc, #288]	@ (80079f8 <GasIndexAlgorithm_process+0x160>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	dc21      	bgt.n	8007920 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	dc04      	bgt.n	80078f0 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	e00d      	b.n	800790c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	4a41      	ldr	r2, [pc, #260]	@ (80079fc <GasIndexAlgorithm_process+0x164>)
 80078f6:	4694      	mov	ip, r2
 80078f8:	4463      	add	r3, ip
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	dd05      	ble.n	800790c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4a3d      	ldr	r2, [pc, #244]	@ (80079fc <GasIndexAlgorithm_process+0x164>)
 8007906:	4694      	mov	ip, r2
 8007908:	4463      	add	r3, ip
 800790a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	0018      	movs	r0, r3
 8007916:	f7f9 fe51 	bl	80015bc <__aeabi_i2f>
 800791a:	1c02      	adds	r2, r0, #0
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	0018      	movs	r0, r3
 800792c:	f000 f945 	bl	8007bba <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8007930:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8007932:	d014      	beq.n	800795e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1c11      	adds	r1, r2, #0
 800793c:	0018      	movs	r0, r3
 800793e:	f000 fbd1 	bl	80080e4 <GasIndexAlgorithm__mox_model__process>
 8007942:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	1c11      	adds	r1, r2, #0
 8007950:	0018      	movs	r0, r3
 8007952:	f000 fc25 	bl	80081a0 <GasIndexAlgorithm__sigmoid_scaled__process>
 8007956:	1c02      	adds	r2, r0, #0
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	639a      	str	r2, [r3, #56]	@ 0x38
 800795c:	e003      	b.n	8007966 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	1c11      	adds	r1, r2, #0
 800796e:	0018      	movs	r0, r3
 8007970:	f000 fcec 	bl	800834c <GasIndexAlgorithm__adaptive_lowpass__process>
 8007974:	1c02      	adds	r2, r0, #0
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	21fc      	movs	r1, #252	@ 0xfc
 8007980:	0589      	lsls	r1, r1, #22
 8007982:	1c18      	adds	r0, r3, #0
 8007984:	f7f8 fdca 	bl	800051c <__aeabi_fcmplt>
 8007988:	1e03      	subs	r3, r0, #0
 800798a:	d003      	beq.n	8007994 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	22fc      	movs	r2, #252	@ 0xfc
 8007990:	0592      	lsls	r2, r2, #22
 8007992:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007998:	2100      	movs	r1, #0
 800799a:	1c18      	adds	r0, r3, #0
 800799c:	f7f8 fdd2 	bl	8000544 <__aeabi_fcmpgt>
 80079a0:	1e03      	subs	r3, r0, #0
 80079a2:	d015      	beq.n	80079d0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	1c11      	adds	r1, r2, #0
 80079ac:	0018      	movs	r0, r3
 80079ae:	f000 fa4f 	bl	8007e50 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	0018      	movs	r0, r3
 80079b6:	f000 f8e5 	bl	8007b84 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80079ba:	1c04      	adds	r4, r0, #0
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	0018      	movs	r0, r3
 80079c0:	f000 f8ea 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80079c4:	1c02      	adds	r2, r0, #0
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1c21      	adds	r1, r4, #0
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 fb7a 	bl	80080c4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d4:	21fc      	movs	r1, #252	@ 0xfc
 80079d6:	0589      	lsls	r1, r1, #22
 80079d8:	1c18      	adds	r0, r3, #0
 80079da:	f7f8 ff67 	bl	80008ac <__aeabi_fadd>
 80079de:	1c03      	adds	r3, r0, #0
 80079e0:	1c18      	adds	r0, r3, #0
 80079e2:	f7f9 fdcb 	bl	800157c <__aeabi_f2iz>
 80079e6:	0002      	movs	r2, r0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	601a      	str	r2, [r3, #0]
    return;
 80079ec:	46c0      	nop			@ (mov r8, r8)
}
 80079ee:	46bd      	mov	sp, r7
 80079f0:	b005      	add	sp, #20
 80079f2:	bd90      	pop	{r4, r7, pc}
 80079f4:	42340000 	.word	0x42340000
 80079f8:	0000fde7 	.word	0x0000fde7
 80079fc:	00007fff 	.word	0x00007fff

08007a00 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007a00:	b5b0      	push	{r4, r5, r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	223c      	movs	r2, #60	@ 0x3c
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4952      	ldr	r1, [pc, #328]	@ (8007b74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a2a:	1c18      	adds	r0, r3, #0
 8007a2c:	f7f9 f8c8 	bl	8000bc0 <__aeabi_fdiv>
 8007a30:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007a32:	2188      	movs	r1, #136	@ 0x88
 8007a34:	05c9      	lsls	r1, r1, #23
 8007a36:	1c18      	adds	r0, r3, #0
 8007a38:	f7f9 faa8 	bl	8000f8c <__aeabi_fmul>
 8007a3c:	1c03      	adds	r3, r0, #0
 8007a3e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	494a      	ldr	r1, [pc, #296]	@ (8007b74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a4a:	1c18      	adds	r0, r3, #0
 8007a4c:	f7f9 f8b8 	bl	8000bc0 <__aeabi_fdiv>
 8007a50:	1c03      	adds	r3, r0, #0
 8007a52:	1c19      	adds	r1, r3, #0
 8007a54:	1c20      	adds	r0, r4, #0
 8007a56:	f7f8 ff29 	bl	80008ac <__aeabi_fadd>
 8007a5a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007a5c:	1c19      	adds	r1, r3, #0
 8007a5e:	1c28      	adds	r0, r5, #0
 8007a60:	f7f9 f8ae 	bl	8000bc0 <__aeabi_fdiv>
 8007a64:	1c03      	adds	r3, r0, #0
 8007a66:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4940      	ldr	r1, [pc, #256]	@ (8007b74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a72:	1c18      	adds	r0, r3, #0
 8007a74:	f7f9 f8a4 	bl	8000bc0 <__aeabi_fdiv>
 8007a78:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007a7a:	2185      	movs	r1, #133	@ 0x85
 8007a7c:	05c9      	lsls	r1, r1, #23
 8007a7e:	1c18      	adds	r0, r3, #0
 8007a80:	f7f9 fa84 	bl	8000f8c <__aeabi_fmul>
 8007a84:	1c03      	adds	r3, r0, #0
 8007a86:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	4938      	ldr	r1, [pc, #224]	@ (8007b74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a92:	1c18      	adds	r0, r3, #0
 8007a94:	f7f9 f894 	bl	8000bc0 <__aeabi_fdiv>
 8007a98:	1c03      	adds	r3, r0, #0
 8007a9a:	1c19      	adds	r1, r3, #0
 8007a9c:	1c20      	adds	r0, r4, #0
 8007a9e:	f7f8 ff05 	bl	80008ac <__aeabi_fadd>
 8007aa2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007aa4:	1c19      	adds	r1, r3, #0
 8007aa6:	1c28      	adds	r0, r5, #0
 8007aa8:	f7f9 f88a 	bl	8000bc0 <__aeabi_fdiv>
 8007aac:	1c03      	adds	r3, r0, #0
 8007aae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d118      	bne.n	8007aee <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007ac0:	2188      	movs	r1, #136	@ 0x88
 8007ac2:	05c9      	lsls	r1, r1, #23
 8007ac4:	1c18      	adds	r0, r3, #0
 8007ac6:	f7f9 fa61 	bl	8000f8c <__aeabi_fmul>
 8007aca:	1c03      	adds	r3, r0, #0
 8007acc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8007ad2:	4929      	ldr	r1, [pc, #164]	@ (8007b78 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8007ad4:	1c18      	adds	r0, r3, #0
 8007ad6:	f7f8 fee9 	bl	80008ac <__aeabi_fadd>
 8007ada:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007adc:	1c19      	adds	r1, r3, #0
 8007ade:	1c20      	adds	r0, r4, #0
 8007ae0:	f7f9 f86e 	bl	8000bc0 <__aeabi_fdiv>
 8007ae4:	1c03      	adds	r3, r0, #0
 8007ae6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	655a      	str	r2, [r3, #84]	@ 0x54
 8007aec:	e017      	b.n	8007b1e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007af2:	2188      	movs	r1, #136	@ 0x88
 8007af4:	05c9      	lsls	r1, r1, #23
 8007af6:	1c18      	adds	r0, r3, #0
 8007af8:	f7f9 fa48 	bl	8000f8c <__aeabi_fmul>
 8007afc:	1c03      	adds	r3, r0, #0
 8007afe:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007b04:	491d      	ldr	r1, [pc, #116]	@ (8007b7c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8007b06:	1c18      	adds	r0, r3, #0
 8007b08:	f7f8 fed0 	bl	80008ac <__aeabi_fadd>
 8007b0c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007b0e:	1c19      	adds	r1, r3, #0
 8007b10:	1c20      	adds	r0, r4, #0
 8007b12:	f7f9 f855 	bl	8000bc0 <__aeabi_fdiv>
 8007b16:	1c03      	adds	r3, r0, #0
 8007b18:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007b22:	2185      	movs	r1, #133	@ 0x85
 8007b24:	05c9      	lsls	r1, r1, #23
 8007b26:	1c18      	adds	r0, r3, #0
 8007b28:	f7f9 fa30 	bl	8000f8c <__aeabi_fmul>
 8007b2c:	1c03      	adds	r3, r0, #0
 8007b2e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	4912      	ldr	r1, [pc, #72]	@ (8007b80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8007b36:	1c18      	adds	r0, r3, #0
 8007b38:	f7f8 feb8 	bl	80008ac <__aeabi_fadd>
 8007b3c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8007b3e:	1c19      	adds	r1, r3, #0
 8007b40:	1c20      	adds	r0, r4, #0
 8007b42:	f7f9 f83d 	bl	8000bc0 <__aeabi_fdiv>
 8007b46:	1c03      	adds	r3, r0, #0
 8007b48:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007b6c:	46c0      	nop			@ (mov r8, r8)
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b002      	add	sp, #8
 8007b72:	bdb0      	pop	{r4, r5, r7, pc}
 8007b74:	45610000 	.word	0x45610000
 8007b78:	44960000 	.word	0x44960000
 8007b7c:	41a00000 	.word	0x41a00000
 8007b80:	451c4000 	.word	0x451c4000

08007b84 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007b90:	1c18      	adds	r0, r3, #0
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b002      	add	sp, #8
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8007ba8:	1c19      	adds	r1, r3, #0
 8007baa:	1c10      	adds	r0, r2, #0
 8007bac:	f7f8 fe7e 	bl	80008ac <__aeabi_fadd>
 8007bb0:	1c03      	adds	r3, r0, #0
}
 8007bb2:	1c18      	adds	r0, r3, #0
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	b002      	add	sp, #8
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	223c      	movs	r2, #60	@ 0x3c
 8007bc6:	5c9b      	ldrb	r3, [r3, r2]
}
 8007bc8:	0018      	movs	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007bd0:	b5b0      	push	{r4, r5, r7, lr}
 8007bd2:	b08c      	sub	sp, #48	@ 0x30
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8007bdc:	1c19      	adds	r1, r3, #0
 8007bde:	4895      	ldr	r0, [pc, #596]	@ (8007e34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007be0:	f7f9 fb12 	bl	8001208 <__aeabi_fsub>
 8007be4:	1c03      	adds	r3, r0, #0
 8007be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bec:	1c19      	adds	r1, r3, #0
 8007bee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bf0:	f7f8 fca8 	bl	8000544 <__aeabi_fcmpgt>
 8007bf4:	1e03      	subs	r3, r0, #0
 8007bf6:	d00b      	beq.n	8007c10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007c00:	1c19      	adds	r1, r3, #0
 8007c02:	1c10      	adds	r0, r2, #0
 8007c04:	f7f8 fe52 	bl	80008ac <__aeabi_fadd>
 8007c08:	1c03      	adds	r3, r0, #0
 8007c0a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c14:	1c19      	adds	r1, r3, #0
 8007c16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c18:	f7f8 fc94 	bl	8000544 <__aeabi_fcmpgt>
 8007c1c:	1e03      	subs	r3, r0, #0
 8007c1e:	d00b      	beq.n	8007c38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007c28:	1c19      	adds	r1, r3, #0
 8007c2a:	1c10      	adds	r0, r2, #0
 8007c2c:	f7f8 fe3e 	bl	80008ac <__aeabi_fadd>
 8007c30:	1c03      	adds	r3, r0, #0
 8007c32:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6959      	ldr	r1, [r3, #20]
 8007c3c:	4a7e      	ldr	r2, [pc, #504]	@ (8007e38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	0018      	movs	r0, r3
 8007c42:	f000 f9f1 	bl	8008028 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	1c11      	adds	r1, r2, #0
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f000 f9fa 	bl	8008048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007c54:	1c03      	adds	r3, r0, #0
 8007c56:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007c64:	1c19      	adds	r1, r3, #0
 8007c66:	1c10      	adds	r0, r2, #0
 8007c68:	f7f9 face 	bl	8001208 <__aeabi_fsub>
 8007c6c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007c6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c70:	1c18      	adds	r0, r3, #0
 8007c72:	f7f9 f98b 	bl	8000f8c <__aeabi_fmul>
 8007c76:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007c78:	1c19      	adds	r1, r3, #0
 8007c7a:	1c20      	adds	r0, r4, #0
 8007c7c:	f7f8 fe16 	bl	80008ac <__aeabi_fadd>
 8007c80:	1c03      	adds	r3, r0, #0
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007c8c:	1c19      	adds	r1, r3, #0
 8007c8e:	486b      	ldr	r0, [pc, #428]	@ (8007e3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007c90:	f7f9 faba 	bl	8001208 <__aeabi_fsub>
 8007c94:	1c03      	adds	r3, r0, #0
 8007c96:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	1c11      	adds	r1, r2, #0
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f000 f9d1 	bl	8008048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007ca6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007ca8:	1c19      	adds	r1, r3, #0
 8007caa:	1c28      	adds	r0, r5, #0
 8007cac:	f7f9 f96e 	bl	8000f8c <__aeabi_fmul>
 8007cb0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007cb2:	1c19      	adds	r1, r3, #0
 8007cb4:	1c20      	adds	r0, r4, #0
 8007cb6:	f7f8 fdf9 	bl	80008ac <__aeabi_fadd>
 8007cba:	1c03      	adds	r3, r0, #0
 8007cbc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007cbe:	4a60      	ldr	r2, [pc, #384]	@ (8007e40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007cc0:	6a39      	ldr	r1, [r7, #32]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f000 f9af 	bl	8008028 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	1c11      	adds	r1, r2, #0
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f000 f9b8 	bl	8008048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007cd8:	1c03      	adds	r3, r0, #0
 8007cda:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cde:	69f8      	ldr	r0, [r7, #28]
 8007ce0:	f7f9 f954 	bl	8000f8c <__aeabi_fmul>
 8007ce4:	1c03      	adds	r3, r0, #0
 8007ce6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6999      	ldr	r1, [r3, #24]
 8007cf0:	4a51      	ldr	r2, [pc, #324]	@ (8007e38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f000 f997 	bl	8008028 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	1c11      	adds	r1, r2, #0
 8007d02:	0018      	movs	r0, r3
 8007d04:	f000 f9a0 	bl	8008048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007d08:	1c03      	adds	r3, r0, #0
 8007d0a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007d18:	1c19      	adds	r1, r3, #0
 8007d1a:	1c10      	adds	r0, r2, #0
 8007d1c:	f7f9 fa74 	bl	8001208 <__aeabi_fsub>
 8007d20:	1c03      	adds	r3, r0, #0
 8007d22:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d26:	69b8      	ldr	r0, [r7, #24]
 8007d28:	f7f9 fa6e 	bl	8001208 <__aeabi_fsub>
 8007d2c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007d2e:	1c19      	adds	r1, r3, #0
 8007d30:	1c28      	adds	r0, r5, #0
 8007d32:	f7f9 f92b 	bl	8000f8c <__aeabi_fmul>
 8007d36:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007d38:	1c19      	adds	r1, r3, #0
 8007d3a:	1c20      	adds	r0, r4, #0
 8007d3c:	f7f8 fdb6 	bl	80008ac <__aeabi_fadd>
 8007d40:	1c03      	adds	r3, r0, #0
 8007d42:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007d4c:	1c19      	adds	r1, r3, #0
 8007d4e:	483b      	ldr	r0, [pc, #236]	@ (8007e3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007d50:	f7f9 fa5a 	bl	8001208 <__aeabi_fsub>
 8007d54:	1c03      	adds	r3, r0, #0
 8007d56:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1c11      	adds	r1, r2, #0
 8007d60:	0018      	movs	r0, r3
 8007d62:	f000 f971 	bl	8008048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007d66:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007d68:	1c19      	adds	r1, r3, #0
 8007d6a:	1c28      	adds	r0, r5, #0
 8007d6c:	f7f9 f90e 	bl	8000f8c <__aeabi_fmul>
 8007d70:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007d72:	1c19      	adds	r1, r3, #0
 8007d74:	1c20      	adds	r0, r4, #0
 8007d76:	f7f8 fd99 	bl	80008ac <__aeabi_fadd>
 8007d7a:	1c03      	adds	r3, r0, #0
 8007d7c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007d7e:	4a30      	ldr	r2, [pc, #192]	@ (8007e40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007d80:	6939      	ldr	r1, [r7, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0018      	movs	r0, r3
 8007d86:	f000 f94f 	bl	8008028 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	1c11      	adds	r1, r2, #0
 8007d92:	0018      	movs	r0, r3
 8007d94:	f000 f958 	bl	8008048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007d98:	1c03      	adds	r3, r0, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007d9c:	6979      	ldr	r1, [r7, #20]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7f9 f8f4 	bl	8000f8c <__aeabi_fmul>
 8007da4:	1c03      	adds	r3, r0, #0
 8007da6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	4923      	ldr	r1, [pc, #140]	@ (8007e44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007db6:	1c18      	adds	r0, r3, #0
 8007db8:	f7f8 ff02 	bl	8000bc0 <__aeabi_fdiv>
 8007dbc:	1c03      	adds	r3, r0, #0
 8007dbe:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007dc0:	69f9      	ldr	r1, [r7, #28]
 8007dc2:	20fe      	movs	r0, #254	@ 0xfe
 8007dc4:	0580      	lsls	r0, r0, #22
 8007dc6:	f7f9 fa1f 	bl	8001208 <__aeabi_fsub>
 8007dca:	1c03      	adds	r3, r0, #0
 8007dcc:	491e      	ldr	r1, [pc, #120]	@ (8007e48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007dce:	1c18      	adds	r0, r3, #0
 8007dd0:	f7f9 f8dc 	bl	8000f8c <__aeabi_fmul>
 8007dd4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007dd6:	491d      	ldr	r1, [pc, #116]	@ (8007e4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007dd8:	1c18      	adds	r0, r3, #0
 8007dda:	f7f9 fa15 	bl	8001208 <__aeabi_fsub>
 8007dde:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007de0:	1c19      	adds	r1, r3, #0
 8007de2:	1c28      	adds	r0, r5, #0
 8007de4:	f7f9 f8d2 	bl	8000f8c <__aeabi_fmul>
 8007de8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007dea:	1c19      	adds	r1, r3, #0
 8007dec:	1c20      	adds	r0, r4, #0
 8007dee:	f7f8 fd5d 	bl	80008ac <__aeabi_fadd>
 8007df2:	1c03      	adds	r3, r0, #0
 8007df4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dfe:	2100      	movs	r1, #0
 8007e00:	1c18      	adds	r0, r3, #0
 8007e02:	f7f8 fb8b 	bl	800051c <__aeabi_fcmplt>
 8007e06:	1e03      	subs	r3, r0, #0
 8007e08:	d002      	beq.n	8007e10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007e18:	1c19      	adds	r1, r3, #0
 8007e1a:	1c10      	adds	r0, r2, #0
 8007e1c:	f7f8 fb92 	bl	8000544 <__aeabi_fcmpgt>
 8007e20:	1e03      	subs	r3, r0, #0
 8007e22:	d100      	bne.n	8007e26 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007e24:	e002      	b.n	8007e2c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e2c:	46c0      	nop			@ (mov r8, r8)
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b00c      	add	sp, #48	@ 0x30
 8007e32:	bdb0      	pop	{r4, r5, r7, pc}
 8007e34:	46fffe00 	.word	0x46fffe00
 8007e38:	3c23d70a 	.word	0x3c23d70a
 8007e3c:	43ff0000 	.word	0x43ff0000
 8007e40:	3db851ec 	.word	0x3db851ec
 8007e44:	42700000 	.word	0x42700000
 8007e48:	3fa66666 	.word	0x3fa66666
 8007e4c:	3e99999a 	.word	0x3e99999a

08007e50 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	223c      	movs	r2, #60	@ 0x3c
 8007e5e:	5c9b      	ldrb	r3, [r3, r2]
 8007e60:	2201      	movs	r2, #1
 8007e62:	4053      	eors	r3, r2
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	223c      	movs	r2, #60	@ 0x3c
 8007e6e:	2101      	movs	r1, #1
 8007e70:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007e7e:	e0c8      	b.n	8008012 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	4965      	ldr	r1, [pc, #404]	@ (800801c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007e86:	1c18      	adds	r0, r3, #0
 8007e88:	f7f8 fb66 	bl	8000558 <__aeabi_fcmpge>
 8007e8c:	1e03      	subs	r3, r0, #0
 8007e8e:	d107      	bne.n	8007ea0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007e94:	4962      	ldr	r1, [pc, #392]	@ (8008020 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007e96:	1c18      	adds	r0, r3, #0
 8007e98:	f7f8 fb4a 	bl	8000530 <__aeabi_fcmple>
 8007e9c:	1e03      	subs	r3, r0, #0
 8007e9e:	d00e      	beq.n	8007ebe <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007ea8:	1c19      	adds	r1, r3, #0
 8007eaa:	1c10      	adds	r0, r2, #0
 8007eac:	f7f8 fcfe 	bl	80008ac <__aeabi_fadd>
 8007eb0:	1c03      	adds	r3, r0, #0
 8007eb2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec2:	1c19      	adds	r1, r3, #0
 8007ec4:	6838      	ldr	r0, [r7, #0]
 8007ec6:	f7f9 f99f 	bl	8001208 <__aeabi_fsub>
 8007eca:	1c03      	adds	r3, r0, #0
 8007ecc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f7ff fe7d 	bl	8007bd0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eda:	1c19      	adds	r1, r3, #0
 8007edc:	6838      	ldr	r0, [r7, #0]
 8007ede:	f7f9 f993 	bl	8001208 <__aeabi_fsub>
 8007ee2:	1c03      	adds	r3, r0, #0
 8007ee4:	2185      	movs	r1, #133	@ 0x85
 8007ee6:	05c9      	lsls	r1, r1, #23
 8007ee8:	1c18      	adds	r0, r3, #0
 8007eea:	f7f8 fe69 	bl	8000bc0 <__aeabi_fdiv>
 8007eee:	1c03      	adds	r3, r0, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7f8 fb11 	bl	800051c <__aeabi_fcmplt>
 8007efa:	1e03      	subs	r3, r0, #0
 8007efc:	d008      	beq.n	8007f10 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	1c18      	adds	r0, r3, #0
 8007f06:	f7f9 f97f 	bl	8001208 <__aeabi_fsub>
 8007f0a:	1c03      	adds	r3, r0, #0
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e007      	b.n	8007f20 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f14:	1c19      	adds	r1, r3, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7f8 fcc8 	bl	80008ac <__aeabi_fadd>
 8007f1c:	1c03      	adds	r3, r0, #0
 8007f1e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007f20:	23fe      	movs	r3, #254	@ 0xfe
 8007f22:	059b      	lsls	r3, r3, #22
 8007f24:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007f26:	493f      	ldr	r1, [pc, #252]	@ (8008024 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007f28:	6978      	ldr	r0, [r7, #20]
 8007f2a:	f7f8 fb0b 	bl	8000544 <__aeabi_fcmpgt>
 8007f2e:	1e03      	subs	r3, r0, #0
 8007f30:	d010      	beq.n	8007f54 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007f32:	493c      	ldr	r1, [pc, #240]	@ (8008024 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007f34:	6978      	ldr	r0, [r7, #20]
 8007f36:	f7f8 fe43 	bl	8000bc0 <__aeabi_fdiv>
 8007f3a:	1c03      	adds	r3, r0, #0
 8007f3c:	1c1c      	adds	r4, r3, #0
 8007f3e:	4939      	ldr	r1, [pc, #228]	@ (8008024 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007f40:	6978      	ldr	r0, [r7, #20]
 8007f42:	f7f8 fe3d 	bl	8000bc0 <__aeabi_fdiv>
 8007f46:	1c03      	adds	r3, r0, #0
 8007f48:	1c19      	adds	r1, r3, #0
 8007f4a:	1c20      	adds	r0, r4, #0
 8007f4c:	f7f9 f81e 	bl	8000f8c <__aeabi_fmul>
 8007f50:	1c03      	adds	r3, r0, #0
 8007f52:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007f58:	1c19      	adds	r1, r3, #0
 8007f5a:	2085      	movs	r0, #133	@ 0x85
 8007f5c:	05c0      	lsls	r0, r0, #23
 8007f5e:	f7f9 f953 	bl	8001208 <__aeabi_fsub>
 8007f62:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007f64:	6939      	ldr	r1, [r7, #16]
 8007f66:	1c18      	adds	r0, r3, #0
 8007f68:	f7f9 f810 	bl	8000f8c <__aeabi_fmul>
 8007f6c:	1c03      	adds	r3, r0, #0
 8007f6e:	1c18      	adds	r0, r3, #0
 8007f70:	f015 ff4c 	bl	801de0c <sqrtf>
 8007f74:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007f7e:	2185      	movs	r1, #133	@ 0x85
 8007f80:	05c9      	lsls	r1, r1, #23
 8007f82:	6938      	ldr	r0, [r7, #16]
 8007f84:	f7f9 f802 	bl	8000f8c <__aeabi_fmul>
 8007f88:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007f8a:	1c19      	adds	r1, r3, #0
 8007f8c:	1c28      	adds	r0, r5, #0
 8007f8e:	f7f8 fe17 	bl	8000bc0 <__aeabi_fdiv>
 8007f92:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007f94:	1c19      	adds	r1, r3, #0
 8007f96:	1c20      	adds	r0, r4, #0
 8007f98:	f7f8 fff8 	bl	8000f8c <__aeabi_fmul>
 8007f9c:	1c03      	adds	r3, r0, #0
 8007f9e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	1c18      	adds	r0, r3, #0
 8007fa8:	f7f8 fff0 	bl	8000f8c <__aeabi_fmul>
 8007fac:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007fae:	6939      	ldr	r1, [r7, #16]
 8007fb0:	1c18      	adds	r0, r3, #0
 8007fb2:	f7f8 fe05 	bl	8000bc0 <__aeabi_fdiv>
 8007fb6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007fb8:	68f9      	ldr	r1, [r7, #12]
 8007fba:	1c18      	adds	r0, r3, #0
 8007fbc:	f7f8 ffe6 	bl	8000f8c <__aeabi_fmul>
 8007fc0:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007fc2:	1c19      	adds	r1, r3, #0
 8007fc4:	1c20      	adds	r0, r4, #0
 8007fc6:	f7f8 fc71 	bl	80008ac <__aeabi_fadd>
 8007fca:	1c03      	adds	r3, r0, #0
 8007fcc:	1c18      	adds	r0, r3, #0
 8007fce:	f015 ff1d 	bl	801de0c <sqrtf>
 8007fd2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007fd4:	1c19      	adds	r1, r3, #0
 8007fd6:	1c30      	adds	r0, r6, #0
 8007fd8:	f7f8 ffd8 	bl	8000f8c <__aeabi_fmul>
 8007fdc:	1c03      	adds	r3, r0, #0
 8007fde:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fec:	68f9      	ldr	r1, [r7, #12]
 8007fee:	1c18      	adds	r0, r3, #0
 8007ff0:	f7f8 ffcc 	bl	8000f8c <__aeabi_fmul>
 8007ff4:	1c03      	adds	r3, r0, #0
 8007ff6:	2182      	movs	r1, #130	@ 0x82
 8007ff8:	05c9      	lsls	r1, r1, #23
 8007ffa:	1c18      	adds	r0, r3, #0
 8007ffc:	f7f8 fde0 	bl	8000bc0 <__aeabi_fdiv>
 8008000:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8008002:	1c19      	adds	r1, r3, #0
 8008004:	1c20      	adds	r0, r4, #0
 8008006:	f7f8 fc51 	bl	80008ac <__aeabi_fadd>
 800800a:	1c03      	adds	r3, r0, #0
 800800c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008012:	46c0      	nop			@ (mov r8, r8)
 8008014:	46bd      	mov	sp, r7
 8008016:	b007      	add	sp, #28
 8008018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801a:	46c0      	nop			@ (mov r8, r8)
 800801c:	42c80000 	.word	0x42c80000
 8008020:	c2c80000 	.word	0xc2c80000
 8008024:	44b40000 	.word	0x44b40000

08008028 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008040:	46c0      	nop			@ (mov r8, r8)
 8008042:	46bd      	mov	sp, r7
 8008044:	b004      	add	sp, #16
 8008046:	bd80      	pop	{r7, pc}

08008048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800805a:	1c19      	adds	r1, r3, #0
 800805c:	6838      	ldr	r0, [r7, #0]
 800805e:	f7f9 f8d3 	bl	8001208 <__aeabi_fsub>
 8008062:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8008064:	1c19      	adds	r1, r3, #0
 8008066:	1c20      	adds	r0, r4, #0
 8008068:	f7f8 ff90 	bl	8000f8c <__aeabi_fmul>
 800806c:	1c03      	adds	r3, r0, #0
 800806e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8008070:	4912      	ldr	r1, [pc, #72]	@ (80080bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7f8 fa52 	bl	800051c <__aeabi_fcmplt>
 8008078:	1e03      	subs	r3, r0, #0
 800807a:	d002      	beq.n	8008082 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800807c:	23fe      	movs	r3, #254	@ 0xfe
 800807e:	059b      	lsls	r3, r3, #22
 8008080:	e018      	b.n	80080b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8008082:	490f      	ldr	r1, [pc, #60]	@ (80080c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7f8 fa5d 	bl	8000544 <__aeabi_fcmpgt>
 800808a:	1e03      	subs	r3, r0, #0
 800808c:	d001      	beq.n	8008092 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800808e:	2300      	movs	r3, #0
 8008090:	e010      	b.n	80080b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1c18      	adds	r0, r3, #0
 8008096:	f015 fe91 	bl	801ddbc <expf>
 800809a:	1c03      	adds	r3, r0, #0
 800809c:	21fe      	movs	r1, #254	@ 0xfe
 800809e:	0589      	lsls	r1, r1, #22
 80080a0:	1c18      	adds	r0, r3, #0
 80080a2:	f7f8 fc03 	bl	80008ac <__aeabi_fadd>
 80080a6:	1c03      	adds	r3, r0, #0
 80080a8:	1c19      	adds	r1, r3, #0
 80080aa:	20fe      	movs	r0, #254	@ 0xfe
 80080ac:	0580      	lsls	r0, r0, #22
 80080ae:	f7f8 fd87 	bl	8000bc0 <__aeabi_fdiv>
 80080b2:	1c03      	adds	r3, r0, #0
    }
}
 80080b4:	1c18      	adds	r0, r3, #0
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b005      	add	sp, #20
 80080ba:	bd90      	pop	{r4, r7, pc}
 80080bc:	c2480000 	.word	0xc2480000
 80080c0:	42480000 	.word	0x42480000

080080c4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80080dc:	46c0      	nop			@ (mov r8, r8)
 80080de:	46bd      	mov	sp, r7
 80080e0:	b004      	add	sp, #16
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d114      	bne.n	8008120 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080fa:	1c19      	adds	r1, r3, #0
 80080fc:	6838      	ldr	r0, [r7, #0]
 80080fe:	f7f9 f883 	bl	8001208 <__aeabi_fsub>
 8008102:	1c03      	adds	r3, r0, #0
 8008104:	4918      	ldr	r1, [pc, #96]	@ (8008168 <GasIndexAlgorithm__mox_model__process+0x84>)
 8008106:	1c18      	adds	r0, r3, #0
 8008108:	f7f8 fd5a 	bl	8000bc0 <__aeabi_fdiv>
 800810c:	1c03      	adds	r3, r0, #0
 800810e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8008114:	1c19      	adds	r1, r3, #0
 8008116:	1c10      	adds	r0, r2, #0
 8008118:	f7f8 ff38 	bl	8000f8c <__aeabi_fmul>
 800811c:	1c03      	adds	r3, r0, #0
 800811e:	e01f      	b.n	8008160 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008124:	1c19      	adds	r1, r3, #0
 8008126:	6838      	ldr	r0, [r7, #0]
 8008128:	f7f9 f86e 	bl	8001208 <__aeabi_fsub>
 800812c:	1c03      	adds	r3, r0, #0
 800812e:	1c1a      	adds	r2, r3, #0
 8008130:	2380      	movs	r3, #128	@ 0x80
 8008132:	061b      	lsls	r3, r3, #24
 8008134:	4053      	eors	r3, r2
 8008136:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800813c:	490b      	ldr	r1, [pc, #44]	@ (800816c <GasIndexAlgorithm__mox_model__process+0x88>)
 800813e:	1c18      	adds	r0, r3, #0
 8008140:	f7f8 fbb4 	bl	80008ac <__aeabi_fadd>
 8008144:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008146:	1c19      	adds	r1, r3, #0
 8008148:	1c20      	adds	r0, r4, #0
 800814a:	f7f8 fd39 	bl	8000bc0 <__aeabi_fdiv>
 800814e:	1c03      	adds	r3, r0, #0
 8008150:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8008156:	1c19      	adds	r1, r3, #0
 8008158:	1c10      	adds	r0, r2, #0
 800815a:	f7f8 ff17 	bl	8000f8c <__aeabi_fmul>
 800815e:	1c03      	adds	r3, r0, #0
    }
}
 8008160:	1c18      	adds	r0, r3, #0
 8008162:	46bd      	mov	sp, r7
 8008164:	b003      	add	sp, #12
 8008166:	bd90      	pop	{r4, r7, pc}
 8008168:	44fa0000 	.word	0x44fa0000
 800816c:	435c0000 	.word	0x435c0000

08008170 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2180      	movs	r1, #128	@ 0x80
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2184      	movs	r1, #132	@ 0x84
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2188      	movs	r1, #136	@ 0x88
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	505a      	str	r2, [r3, r1]
}
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	46bd      	mov	sp, r7
 800819a:	b004      	add	sp, #16
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 80081a0:	b590      	push	{r4, r7, lr}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2280      	movs	r2, #128	@ 0x80
 80081ae:	589c      	ldr	r4, [r3, r2]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2284      	movs	r2, #132	@ 0x84
 80081b4:	589b      	ldr	r3, [r3, r2]
 80081b6:	1c19      	adds	r1, r3, #0
 80081b8:	6838      	ldr	r0, [r7, #0]
 80081ba:	f7f9 f825 	bl	8001208 <__aeabi_fsub>
 80081be:	1c03      	adds	r3, r0, #0
 80081c0:	1c19      	adds	r1, r3, #0
 80081c2:	1c20      	adds	r0, r4, #0
 80081c4:	f7f8 fee2 	bl	8000f8c <__aeabi_fmul>
 80081c8:	1c03      	adds	r3, r0, #0
 80081ca:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80081cc:	4940      	ldr	r1, [pc, #256]	@ (80082d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80081ce:	68b8      	ldr	r0, [r7, #8]
 80081d0:	f7f8 f9a4 	bl	800051c <__aeabi_fcmplt>
 80081d4:	1e03      	subs	r3, r0, #0
 80081d6:	d001      	beq.n	80081dc <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80081d8:	4b3e      	ldr	r3, [pc, #248]	@ (80082d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80081da:	e075      	b.n	80082c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80081dc:	493e      	ldr	r1, [pc, #248]	@ (80082d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80081de:	68b8      	ldr	r0, [r7, #8]
 80081e0:	f7f8 f9b0 	bl	8000544 <__aeabi_fcmpgt>
 80081e4:	1e03      	subs	r3, r0, #0
 80081e6:	d001      	beq.n	80081ec <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e06d      	b.n	80082c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80081ec:	2100      	movs	r1, #0
 80081ee:	6838      	ldr	r0, [r7, #0]
 80081f0:	f7f8 f9b2 	bl	8000558 <__aeabi_fcmpge>
 80081f4:	1e03      	subs	r3, r0, #0
 80081f6:	d047      	beq.n	8008288 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2288      	movs	r2, #136	@ 0x88
 80081fc:	589b      	ldr	r3, [r3, r2]
 80081fe:	21fe      	movs	r1, #254	@ 0xfe
 8008200:	0589      	lsls	r1, r1, #22
 8008202:	1c18      	adds	r0, r3, #0
 8008204:	f7f8 f984 	bl	8000510 <__aeabi_fcmpeq>
 8008208:	1e03      	subs	r3, r0, #0
 800820a:	d00e      	beq.n	800822a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	1c19      	adds	r1, r3, #0
 8008212:	20fe      	movs	r0, #254	@ 0xfe
 8008214:	0580      	lsls	r0, r0, #22
 8008216:	f7f8 fff7 	bl	8001208 <__aeabi_fsub>
 800821a:	1c03      	adds	r3, r0, #0
 800821c:	492f      	ldr	r1, [pc, #188]	@ (80082dc <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800821e:	1c18      	adds	r0, r3, #0
 8008220:	f7f8 feb4 	bl	8000f8c <__aeabi_fmul>
 8008224:	1c03      	adds	r3, r0, #0
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e012      	b.n	8008250 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	492c      	ldr	r1, [pc, #176]	@ (80082e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8008230:	1c18      	adds	r0, r3, #0
 8008232:	f7f8 feab 	bl	8000f8c <__aeabi_fmul>
 8008236:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008238:	1c19      	adds	r1, r3, #0
 800823a:	4826      	ldr	r0, [pc, #152]	@ (80082d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800823c:	f7f8 ffe4 	bl	8001208 <__aeabi_fsub>
 8008240:	1c03      	adds	r3, r0, #0
 8008242:	2181      	movs	r1, #129	@ 0x81
 8008244:	05c9      	lsls	r1, r1, #23
 8008246:	1c18      	adds	r0, r3, #0
 8008248:	f7f8 fcba 	bl	8000bc0 <__aeabi_fdiv>
 800824c:	1c03      	adds	r3, r0, #0
 800824e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008250:	4920      	ldr	r1, [pc, #128]	@ (80082d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7f8 fb2a 	bl	80008ac <__aeabi_fadd>
 8008258:	1c03      	adds	r3, r0, #0
 800825a:	1c1c      	adds	r4, r3, #0
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	1c18      	adds	r0, r3, #0
 8008260:	f015 fdac 	bl	801ddbc <expf>
 8008264:	1c03      	adds	r3, r0, #0
 8008266:	21fe      	movs	r1, #254	@ 0xfe
 8008268:	0589      	lsls	r1, r1, #22
 800826a:	1c18      	adds	r0, r3, #0
 800826c:	f7f8 fb1e 	bl	80008ac <__aeabi_fadd>
 8008270:	1c03      	adds	r3, r0, #0
 8008272:	1c19      	adds	r1, r3, #0
 8008274:	1c20      	adds	r0, r4, #0
 8008276:	f7f8 fca3 	bl	8000bc0 <__aeabi_fdiv>
 800827a:	1c03      	adds	r3, r0, #0
 800827c:	68f9      	ldr	r1, [r7, #12]
 800827e:	1c18      	adds	r0, r3, #0
 8008280:	f7f8 ffc2 	bl	8001208 <__aeabi_fsub>
 8008284:	1c03      	adds	r3, r0, #0
 8008286:	e01f      	b.n	80082c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2188      	movs	r1, #136	@ 0x88
 8008290:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008292:	1c19      	adds	r1, r3, #0
 8008294:	1c10      	adds	r0, r2, #0
 8008296:	f7f8 fc93 	bl	8000bc0 <__aeabi_fdiv>
 800829a:	1c03      	adds	r3, r0, #0
 800829c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	1c18      	adds	r0, r3, #0
 80082a2:	f015 fd8b 	bl	801ddbc <expf>
 80082a6:	1c03      	adds	r3, r0, #0
 80082a8:	21fe      	movs	r1, #254	@ 0xfe
 80082aa:	0589      	lsls	r1, r1, #22
 80082ac:	1c18      	adds	r0, r3, #0
 80082ae:	f7f8 fafd 	bl	80008ac <__aeabi_fadd>
 80082b2:	1c03      	adds	r3, r0, #0
 80082b4:	1c19      	adds	r1, r3, #0
 80082b6:	4807      	ldr	r0, [pc, #28]	@ (80082d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80082b8:	f7f8 fc82 	bl	8000bc0 <__aeabi_fdiv>
 80082bc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80082be:	1c19      	adds	r1, r3, #0
 80082c0:	1c20      	adds	r0, r4, #0
 80082c2:	f7f8 fe63 	bl	8000f8c <__aeabi_fmul>
 80082c6:	1c03      	adds	r3, r0, #0
        }
    }
}
 80082c8:	1c18      	adds	r0, r3, #0
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b005      	add	sp, #20
 80082ce:	bd90      	pop	{r4, r7, pc}
 80082d0:	c2480000 	.word	0xc2480000
 80082d4:	43fa0000 	.word	0x43fa0000
 80082d8:	42480000 	.word	0x42480000
 80082dc:	3f8041ab 	.word	0x3f8041ab
 80082e0:	40a00000 	.word	0x40a00000

080082e4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80082e4:	b590      	push	{r4, r7, lr}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	4913      	ldr	r1, [pc, #76]	@ (8008344 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80082f6:	1c18      	adds	r0, r3, #0
 80082f8:	f7f8 fad8 	bl	80008ac <__aeabi_fadd>
 80082fc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80082fe:	1c19      	adds	r1, r3, #0
 8008300:	1c20      	adds	r0, r4, #0
 8008302:	f7f8 fc5d 	bl	8000bc0 <__aeabi_fdiv>
 8008306:	1c03      	adds	r3, r0, #0
 8008308:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	228c      	movs	r2, #140	@ 0x8c
 800830e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	490b      	ldr	r1, [pc, #44]	@ (8008348 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800831a:	1c18      	adds	r0, r3, #0
 800831c:	f7f8 fac6 	bl	80008ac <__aeabi_fadd>
 8008320:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008322:	1c19      	adds	r1, r3, #0
 8008324:	1c20      	adds	r0, r4, #0
 8008326:	f7f8 fc4b 	bl	8000bc0 <__aeabi_fdiv>
 800832a:	1c03      	adds	r3, r0, #0
 800832c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2290      	movs	r2, #144	@ 0x90
 8008332:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2294      	movs	r2, #148	@ 0x94
 8008338:	2100      	movs	r1, #0
 800833a:	5499      	strb	r1, [r3, r2]
}
 800833c:	46c0      	nop			@ (mov r8, r8)
 800833e:	46bd      	mov	sp, r7
 8008340:	b003      	add	sp, #12
 8008342:	bd90      	pop	{r4, r7, pc}
 8008344:	41a00000 	.word	0x41a00000
 8008348:	43fa0000 	.word	0x43fa0000

0800834c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800834c:	b590      	push	{r4, r7, lr}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2294      	movs	r2, #148	@ 0x94
 800835a:	5c9b      	ldrb	r3, [r3, r2]
 800835c:	2201      	movs	r2, #1
 800835e:	4053      	eors	r3, r2
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00f      	beq.n	8008386 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2198      	movs	r1, #152	@ 0x98
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	219c      	movs	r1, #156	@ 0x9c
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	21a0      	movs	r1, #160	@ 0xa0
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2294      	movs	r2, #148	@ 0x94
 8008382:	2101      	movs	r1, #1
 8008384:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	228c      	movs	r2, #140	@ 0x8c
 800838a:	589b      	ldr	r3, [r3, r2]
 800838c:	1c19      	adds	r1, r3, #0
 800838e:	20fe      	movs	r0, #254	@ 0xfe
 8008390:	0580      	lsls	r0, r0, #22
 8008392:	f7f8 ff39 	bl	8001208 <__aeabi_fsub>
 8008396:	1c03      	adds	r3, r0, #0
 8008398:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2298      	movs	r2, #152	@ 0x98
 800839e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80083a0:	1c19      	adds	r1, r3, #0
 80083a2:	f7f8 fdf3 	bl	8000f8c <__aeabi_fmul>
 80083a6:	1c03      	adds	r3, r0, #0
 80083a8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	228c      	movs	r2, #140	@ 0x8c
 80083ae:	589b      	ldr	r3, [r3, r2]
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	1c18      	adds	r0, r3, #0
 80083b4:	f7f8 fdea 	bl	8000f8c <__aeabi_fmul>
 80083b8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 80083ba:	1c19      	adds	r1, r3, #0
 80083bc:	1c20      	adds	r0, r4, #0
 80083be:	f7f8 fa75 	bl	80008ac <__aeabi_fadd>
 80083c2:	1c03      	adds	r3, r0, #0
 80083c4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2298      	movs	r2, #152	@ 0x98
 80083ca:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2290      	movs	r2, #144	@ 0x90
 80083d0:	589b      	ldr	r3, [r3, r2]
 80083d2:	1c19      	adds	r1, r3, #0
 80083d4:	20fe      	movs	r0, #254	@ 0xfe
 80083d6:	0580      	lsls	r0, r0, #22
 80083d8:	f7f8 ff16 	bl	8001208 <__aeabi_fsub>
 80083dc:	1c03      	adds	r3, r0, #0
 80083de:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	229c      	movs	r2, #156	@ 0x9c
 80083e4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80083e6:	1c19      	adds	r1, r3, #0
 80083e8:	f7f8 fdd0 	bl	8000f8c <__aeabi_fmul>
 80083ec:	1c03      	adds	r3, r0, #0
 80083ee:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2290      	movs	r2, #144	@ 0x90
 80083f4:	589b      	ldr	r3, [r3, r2]
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	1c18      	adds	r0, r3, #0
 80083fa:	f7f8 fdc7 	bl	8000f8c <__aeabi_fmul>
 80083fe:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008400:	1c19      	adds	r1, r3, #0
 8008402:	1c20      	adds	r0, r4, #0
 8008404:	f7f8 fa52 	bl	80008ac <__aeabi_fadd>
 8008408:	1c03      	adds	r3, r0, #0
 800840a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	229c      	movs	r2, #156	@ 0x9c
 8008410:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2298      	movs	r2, #152	@ 0x98
 8008416:	589a      	ldr	r2, [r3, r2]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	219c      	movs	r1, #156	@ 0x9c
 800841c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800841e:	1c19      	adds	r1, r3, #0
 8008420:	1c10      	adds	r0, r2, #0
 8008422:	f7f8 fef1 	bl	8001208 <__aeabi_fsub>
 8008426:	1c03      	adds	r3, r0, #0
 8008428:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800842a:	2100      	movs	r1, #0
 800842c:	6978      	ldr	r0, [r7, #20]
 800842e:	f7f8 f875 	bl	800051c <__aeabi_fcmplt>
 8008432:	1e03      	subs	r3, r0, #0
 8008434:	d004      	beq.n	8008440 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2280      	movs	r2, #128	@ 0x80
 800843a:	0612      	lsls	r2, r2, #24
 800843c:	4053      	eors	r3, r2
 800843e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008440:	4923      	ldr	r1, [pc, #140]	@ (80084d0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f7f8 fda2 	bl	8000f8c <__aeabi_fmul>
 8008448:	1c03      	adds	r3, r0, #0
 800844a:	1c18      	adds	r0, r3, #0
 800844c:	f015 fcb6 	bl	801ddbc <expf>
 8008450:	1c03      	adds	r3, r0, #0
 8008452:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008454:	491f      	ldr	r1, [pc, #124]	@ (80084d4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008456:	6938      	ldr	r0, [r7, #16]
 8008458:	f7f8 fd98 	bl	8000f8c <__aeabi_fmul>
 800845c:	1c03      	adds	r3, r0, #0
 800845e:	491e      	ldr	r1, [pc, #120]	@ (80084d8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008460:	1c18      	adds	r0, r3, #0
 8008462:	f7f8 fa23 	bl	80008ac <__aeabi_fadd>
 8008466:	1c03      	adds	r3, r0, #0
 8008468:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685c      	ldr	r4, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	1c18      	adds	r0, r3, #0
 8008476:	f7f8 fa19 	bl	80008ac <__aeabi_fadd>
 800847a:	1c03      	adds	r3, r0, #0
 800847c:	1c19      	adds	r1, r3, #0
 800847e:	1c20      	adds	r0, r4, #0
 8008480:	f7f8 fb9e 	bl	8000bc0 <__aeabi_fdiv>
 8008484:	1c03      	adds	r3, r0, #0
 8008486:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	20fe      	movs	r0, #254	@ 0xfe
 800848c:	0580      	lsls	r0, r0, #22
 800848e:	f7f8 febb 	bl	8001208 <__aeabi_fsub>
 8008492:	1c03      	adds	r3, r0, #0
 8008494:	1c18      	adds	r0, r3, #0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	22a0      	movs	r2, #160	@ 0xa0
 800849a:	589b      	ldr	r3, [r3, r2]
 800849c:	1c19      	adds	r1, r3, #0
 800849e:	f7f8 fd75 	bl	8000f8c <__aeabi_fmul>
 80084a2:	1c03      	adds	r3, r0, #0
 80084a4:	1c1c      	adds	r4, r3, #0
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	68b8      	ldr	r0, [r7, #8]
 80084aa:	f7f8 fd6f 	bl	8000f8c <__aeabi_fmul>
 80084ae:	1c03      	adds	r3, r0, #0
 80084b0:	1c19      	adds	r1, r3, #0
 80084b2:	1c20      	adds	r0, r4, #0
 80084b4:	f7f8 f9fa 	bl	80008ac <__aeabi_fadd>
 80084b8:	1c03      	adds	r3, r0, #0
 80084ba:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	22a0      	movs	r2, #160	@ 0xa0
 80084c0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	22a0      	movs	r2, #160	@ 0xa0
 80084c6:	589b      	ldr	r3, [r3, r2]
}
 80084c8:	1c18      	adds	r0, r3, #0
 80084ca:	46bd      	mov	sp, r7
 80084cc:	b007      	add	sp, #28
 80084ce:	bd90      	pop	{r4, r7, pc}
 80084d0:	be4ccccd 	.word	0xbe4ccccd
 80084d4:	43f00000 	.word	0x43f00000
 80084d8:	41a00000 	.word	0x41a00000

080084dc <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80084dc:	b590      	push	{r4, r7, lr}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6039      	str	r1, [r7, #0]
 80084e4:	0011      	movs	r1, r2
 80084e6:	1dfb      	adds	r3, r7, #7
 80084e8:	1c02      	adds	r2, r0, #0
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	1dbb      	adds	r3, r7, #6
 80084ee:	1c0a      	adds	r2, r1, #0
 80084f0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80084f2:	4b08      	ldr	r3, [pc, #32]	@ (8008514 <ReadRegister+0x38>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80084fa:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <ReadRegister+0x38>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	1dba      	adds	r2, r7, #6
 8008500:	7814      	ldrb	r4, [r2, #0]
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	1dfa      	adds	r2, r7, #7
 8008506:	7810      	ldrb	r0, [r2, #0]
 8008508:	0022      	movs	r2, r4
 800850a:	4798      	blx	r3
  }
}
 800850c:	46c0      	nop			@ (mov r8, r8)
 800850e:	46bd      	mov	sp, r7
 8008510:	b003      	add	sp, #12
 8008512:	bd90      	pop	{r4, r7, pc}
 8008514:	20001148 	.word	0x20001148

08008518 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008518:	b590      	push	{r4, r7, lr}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6039      	str	r1, [r7, #0]
 8008520:	0011      	movs	r1, r2
 8008522:	1dfb      	adds	r3, r7, #7
 8008524:	1c02      	adds	r2, r0, #0
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	1dbb      	adds	r3, r7, #6
 800852a:	1c0a      	adds	r2, r1, #0
 800852c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800852e:	4b08      	ldr	r3, [pc, #32]	@ (8008550 <WriteRegister+0x38>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008536:	4b06      	ldr	r3, [pc, #24]	@ (8008550 <WriteRegister+0x38>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	1dba      	adds	r2, r7, #6
 800853c:	7814      	ldrb	r4, [r2, #0]
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	1dfa      	adds	r2, r7, #7
 8008542:	7810      	ldrb	r0, [r2, #0]
 8008544:	0022      	movs	r2, r4
 8008546:	4798      	blx	r3
  }
}
 8008548:	46c0      	nop			@ (mov r8, r8)
 800854a:	46bd      	mov	sp, r7
 800854c:	b003      	add	sp, #12
 800854e:	bd90      	pop	{r4, r7, pc}
 8008550:	2000114c 	.word	0x2000114c

08008554 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800855e:	4b07      	ldr	r3, [pc, #28]	@ (800857c <SGP_Init+0x28>)
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008564:	4b06      	ldr	r3, [pc, #24]	@ (8008580 <SGP_Init+0x2c>)
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800856a:	4b06      	ldr	r3, [pc, #24]	@ (8008584 <SGP_Init+0x30>)
 800856c:	2100      	movs	r1, #0
 800856e:	0018      	movs	r0, r3
 8008570:	f7ff f930 	bl	80077d4 <GasIndexAlgorithm_init>
}
 8008574:	46c0      	nop			@ (mov r8, r8)
 8008576:	46bd      	mov	sp, r7
 8008578:	b002      	add	sp, #8
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20001148 	.word	0x20001148
 8008580:	2000114c 	.word	0x2000114c
 8008584:	2000115c 	.word	0x2000115c

08008588 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800858c:	4b13      	ldr	r3, [pc, #76]	@ (80085dc <SGP_StartMeasurement+0x54>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00d      	beq.n	80085b0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008594:	4b12      	ldr	r3, [pc, #72]	@ (80085e0 <SGP_StartMeasurement+0x58>)
 8008596:	2208      	movs	r2, #8
 8008598:	0019      	movs	r1, r3
 800859a:	2059      	movs	r0, #89	@ 0x59
 800859c:	f7ff ffbc 	bl	8008518 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80085a0:	f002 fc4e 	bl	800ae40 <GetCurrentHalTicks>
 80085a4:	0003      	movs	r3, r0
 80085a6:	331e      	adds	r3, #30
 80085a8:	001a      	movs	r2, r3
 80085aa:	4b0e      	ldr	r3, [pc, #56]	@ (80085e4 <SGP_StartMeasurement+0x5c>)
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e00c      	b.n	80085ca <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80085b0:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <SGP_StartMeasurement+0x60>)
 80085b2:	2208      	movs	r2, #8
 80085b4:	0019      	movs	r1, r3
 80085b6:	2059      	movs	r0, #89	@ 0x59
 80085b8:	f7ff ffae 	bl	8008518 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80085bc:	f002 fc40 	bl	800ae40 <GetCurrentHalTicks>
 80085c0:	0003      	movs	r3, r0
 80085c2:	33aa      	adds	r3, #170	@ 0xaa
 80085c4:	001a      	movs	r2, r3
 80085c6:	4b09      	ldr	r3, [pc, #36]	@ (80085ec <SGP_StartMeasurement+0x64>)
 80085c8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80085ca:	4b09      	ldr	r3, [pc, #36]	@ (80085f0 <SGP_StartMeasurement+0x68>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80085d0:	4b08      	ldr	r3, [pc, #32]	@ (80085f4 <SGP_StartMeasurement+0x6c>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
}
 80085d6:	46c0      	nop			@ (mov r8, r8)
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20001204 	.word	0x20001204
 80085e0:	2000003c 	.word	0x2000003c
 80085e4:	20000050 	.word	0x20000050
 80085e8:	20000034 	.word	0x20000034
 80085ec:	20000048 	.word	0x20000048
 80085f0:	2000115a 	.word	0x2000115a
 80085f4:	2000115b 	.word	0x2000115b

080085f8 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	4b04      	ldr	r3, [pc, #16]	@ (8008610 <SGP_HeatedUp+0x18>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	0018      	movs	r0, r3
 8008602:	f002 fb55 	bl	800acb0 <TimestampIsReached>
 8008606:	0003      	movs	r3, r0
 8008608:	0018      	movs	r0, r3
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	46c0      	nop			@ (mov r8, r8)
 8008610:	20000048 	.word	0x20000048

08008614 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008618:	4b04      	ldr	r3, [pc, #16]	@ (800862c <SGP_MeasurementReady+0x18>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	0018      	movs	r0, r3
 800861e:	f002 fb47 	bl	800acb0 <TimestampIsReached>
 8008622:	0003      	movs	r3, r0
}
 8008624:	0018      	movs	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	20000050 	.word	0x20000050

08008630 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008634:	4b04      	ldr	r3, [pc, #16]	@ (8008648 <SGP_MeasurementDone+0x18>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	0018      	movs	r0, r3
 800863a:	f002 fb39 	bl	800acb0 <TimestampIsReached>
 800863e:	0003      	movs	r3, r0
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	46c0      	nop			@ (mov r8, r8)
 8008648:	2000004c 	.word	0x2000004c

0800864c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008650:	4b04      	ldr	r3, [pc, #16]	@ (8008664 <SGP_TurnHeaterOff+0x18>)
 8008652:	2202      	movs	r2, #2
 8008654:	0019      	movs	r1, r3
 8008656:	2059      	movs	r0, #89	@ 0x59
 8008658:	f7ff ff5e 	bl	8008518 <WriteRegister>
}
 800865c:	46c0      	nop			@ (mov r8, r8)
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	46c0      	nop			@ (mov r8, r8)
 8008664:	2000002c 	.word	0x2000002c

08008668 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8008668:	b5b0      	push	{r4, r5, r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008670:	f7ff ffc2 	bl	80085f8 <SGP_HeatedUp>
 8008674:	1e03      	subs	r3, r0, #0
 8008676:	d038      	beq.n	80086ea <SGP_GetMeasurementValues+0x82>
 8008678:	4bd5      	ldr	r3, [pc, #852]	@ (80089d0 <SGP_GetMeasurementValues+0x368>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2201      	movs	r2, #1
 800867e:	4053      	eors	r3, r2
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d031      	beq.n	80086ea <SGP_GetMeasurementValues+0x82>
 8008686:	4bd3      	ldr	r3, [pc, #844]	@ (80089d4 <SGP_GetMeasurementValues+0x36c>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2201      	movs	r2, #1
 800868c:	4053      	eors	r3, r2
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d02a      	beq.n	80086ea <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008694:	4ad0      	ldr	r2, [pc, #832]	@ (80089d8 <SGP_GetMeasurementValues+0x370>)
 8008696:	4bd1      	ldr	r3, [pc, #836]	@ (80089dc <SGP_GetMeasurementValues+0x374>)
 8008698:	0019      	movs	r1, r3
 800869a:	2003      	movs	r0, #3
 800869c:	f002 fb5e 	bl	800ad5c <CreateLine>
    HeatUpIsDone = true;
 80086a0:	4bcb      	ldr	r3, [pc, #812]	@ (80089d0 <SGP_GetMeasurementValues+0x368>)
 80086a2:	2201      	movs	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80086a6:	4bce      	ldr	r3, [pc, #824]	@ (80089e0 <SGP_GetMeasurementValues+0x378>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00d      	beq.n	80086ca <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80086ae:	4bcd      	ldr	r3, [pc, #820]	@ (80089e4 <SGP_GetMeasurementValues+0x37c>)
 80086b0:	2208      	movs	r2, #8
 80086b2:	0019      	movs	r1, r3
 80086b4:	2059      	movs	r0, #89	@ 0x59
 80086b6:	f7ff ff2f 	bl	8008518 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80086ba:	f002 fbc1 	bl	800ae40 <GetCurrentHalTicks>
 80086be:	0003      	movs	r3, r0
 80086c0:	331e      	adds	r3, #30
 80086c2:	001a      	movs	r2, r3
 80086c4:	4bc8      	ldr	r3, [pc, #800]	@ (80089e8 <SGP_GetMeasurementValues+0x380>)
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e00c      	b.n	80086e4 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80086ca:	4bc8      	ldr	r3, [pc, #800]	@ (80089ec <SGP_GetMeasurementValues+0x384>)
 80086cc:	2208      	movs	r2, #8
 80086ce:	0019      	movs	r1, r3
 80086d0:	2059      	movs	r0, #89	@ 0x59
 80086d2:	f7ff ff21 	bl	8008518 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80086d6:	f002 fbb3 	bl	800ae40 <GetCurrentHalTicks>
 80086da:	0003      	movs	r3, r0
 80086dc:	331e      	adds	r3, #30
 80086de:	001a      	movs	r2, r3
 80086e0:	4bc1      	ldr	r3, [pc, #772]	@ (80089e8 <SGP_GetMeasurementValues+0x380>)
 80086e2:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80086e4:	4bbb      	ldr	r3, [pc, #748]	@ (80089d4 <SGP_GetMeasurementValues+0x36c>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80086ea:	4bb9      	ldr	r3, [pc, #740]	@ (80089d0 <SGP_GetMeasurementValues+0x368>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d100      	bne.n	80086f4 <SGP_GetMeasurementValues+0x8c>
 80086f2:	e1a9      	b.n	8008a48 <SGP_GetMeasurementValues+0x3e0>
 80086f4:	f7ff ff8e 	bl	8008614 <SGP_MeasurementReady>
 80086f8:	1e03      	subs	r3, r0, #0
 80086fa:	d100      	bne.n	80086fe <SGP_GetMeasurementValues+0x96>
 80086fc:	e1a4      	b.n	8008a48 <SGP_GetMeasurementValues+0x3e0>
 80086fe:	4bbc      	ldr	r3, [pc, #752]	@ (80089f0 <SGP_GetMeasurementValues+0x388>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2201      	movs	r2, #1
 8008704:	4053      	eors	r3, r2
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d100      	bne.n	800870e <SGP_GetMeasurementValues+0xa6>
 800870c:	e19c      	b.n	8008a48 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800870e:	4bb9      	ldr	r3, [pc, #740]	@ (80089f4 <SGP_GetMeasurementValues+0x38c>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4ab8      	ldr	r2, [pc, #736]	@ (80089f8 <SGP_GetMeasurementValues+0x390>)
 8008716:	49b1      	ldr	r1, [pc, #708]	@ (80089dc <SGP_GetMeasurementValues+0x374>)
 8008718:	2003      	movs	r0, #3
 800871a:	f002 fb1f 	bl	800ad5c <CreateLine>
    MeasurementIsReady = true;
 800871e:	4bb4      	ldr	r3, [pc, #720]	@ (80089f0 <SGP_GetMeasurementValues+0x388>)
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8008724:	4bb5      	ldr	r3, [pc, #724]	@ (80089fc <SGP_GetMeasurementValues+0x394>)
 8008726:	2203      	movs	r2, #3
 8008728:	0019      	movs	r1, r3
 800872a:	2059      	movs	r0, #89	@ 0x59
 800872c:	f7ff fed6 	bl	80084dc <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8008730:	4bb2      	ldr	r3, [pc, #712]	@ (80089fc <SGP_GetMeasurementValues+0x394>)
 8008732:	2203      	movs	r2, #3
 8008734:	2103      	movs	r1, #3
 8008736:	0018      	movs	r0, r3
 8008738:	f000 f9ec 	bl	8008b14 <CheckCRC>
 800873c:	0003      	movs	r3, r0
 800873e:	001a      	movs	r2, r3
 8008740:	2301      	movs	r3, #1
 8008742:	4053      	eors	r3, r2
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d02a      	beq.n	80087a0 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800874a:	4aad      	ldr	r2, [pc, #692]	@ (8008a00 <SGP_GetMeasurementValues+0x398>)
 800874c:	4bad      	ldr	r3, [pc, #692]	@ (8008a04 <SGP_GetMeasurementValues+0x39c>)
 800874e:	0019      	movs	r1, r3
 8008750:	2001      	movs	r0, #1
 8008752:	f002 fb03 	bl	800ad5c <CreateLine>
      Info("SGP_Measure buffer structure:");
 8008756:	4aac      	ldr	r2, [pc, #688]	@ (8008a08 <SGP_GetMeasurementValues+0x3a0>)
 8008758:	4bac      	ldr	r3, [pc, #688]	@ (8008a0c <SGP_GetMeasurementValues+0x3a4>)
 800875a:	0019      	movs	r1, r3
 800875c:	2002      	movs	r0, #2
 800875e:	f002 fafd 	bl	800ad5c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008762:	230f      	movs	r3, #15
 8008764:	18fb      	adds	r3, r7, r3
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e012      	b.n	8008792 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800876c:	240f      	movs	r4, #15
 800876e:	193b      	adds	r3, r7, r4
 8008770:	7818      	ldrb	r0, [r3, #0]
 8008772:	193b      	adds	r3, r7, r4
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	4aa1      	ldr	r2, [pc, #644]	@ (80089fc <SGP_GetMeasurementValues+0x394>)
 8008778:	5cd3      	ldrb	r3, [r2, r3]
 800877a:	4aa5      	ldr	r2, [pc, #660]	@ (8008a10 <SGP_GetMeasurementValues+0x3a8>)
 800877c:	4997      	ldr	r1, [pc, #604]	@ (80089dc <SGP_GetMeasurementValues+0x374>)
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	0003      	movs	r3, r0
 8008782:	2003      	movs	r0, #3
 8008784:	f002 faea 	bl	800ad5c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008788:	193b      	adds	r3, r7, r4
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	193b      	adds	r3, r7, r4
 800878e:	3201      	adds	r2, #1
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	230f      	movs	r3, #15
 8008794:	18fb      	adds	r3, r7, r3
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d9e7      	bls.n	800876c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800879c:	2300      	movs	r3, #0
 800879e:	e16b      	b.n	8008a78 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80087a0:	f002 fb4e 	bl	800ae40 <GetCurrentHalTicks>
 80087a4:	0003      	movs	r3, r0
 80087a6:	22fa      	movs	r2, #250	@ 0xfa
 80087a8:	0092      	lsls	r2, r2, #2
 80087aa:	189a      	adds	r2, r3, r2
 80087ac:	4b99      	ldr	r3, [pc, #612]	@ (8008a14 <SGP_GetMeasurementValues+0x3ac>)
 80087ae:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80087b0:	f7ff ff4c 	bl	800864c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80087b4:	4b8f      	ldr	r3, [pc, #572]	@ (80089f4 <SGP_GetMeasurementValues+0x38c>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	3301      	adds	r3, #1
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	4b8d      	ldr	r3, [pc, #564]	@ (80089f4 <SGP_GetMeasurementValues+0x38c>)
 80087be:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80087c0:	4b8c      	ldr	r3, [pc, #560]	@ (80089f4 <SGP_GetMeasurementValues+0x38c>)
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	4b94      	ldr	r3, [pc, #592]	@ (8008a18 <SGP_GetMeasurementValues+0x3b0>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d200      	bcs.n	80087ce <SGP_GetMeasurementValues+0x166>
 80087cc:	e13c      	b.n	8008a48 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80087ce:	4b8b      	ldr	r3, [pc, #556]	@ (80089fc <SGP_GetMeasurementValues+0x394>)
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	b21a      	sxth	r2, r3
 80087d6:	4b89      	ldr	r3, [pc, #548]	@ (80089fc <SGP_GetMeasurementValues+0x394>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b21b      	sxth	r3, r3
 80087dc:	4313      	orrs	r3, r2
 80087de:	b21a      	sxth	r2, r3
 80087e0:	240c      	movs	r4, #12
 80087e2:	193b      	adds	r3, r7, r4
 80087e4:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80087e6:	193b      	adds	r3, r7, r4
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	4a8c      	ldr	r2, [pc, #560]	@ (8008a1c <SGP_GetMeasurementValues+0x3b4>)
 80087ec:	497b      	ldr	r1, [pc, #492]	@ (80089dc <SGP_GetMeasurementValues+0x374>)
 80087ee:	2003      	movs	r0, #3
 80087f0:	f002 fab4 	bl	800ad5c <CreateLine>
      int32_t tempVocIndex = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80087f8:	193b      	adds	r3, r7, r4
 80087fa:	8819      	ldrh	r1, [r3, #0]
 80087fc:	2308      	movs	r3, #8
 80087fe:	18fa      	adds	r2, r7, r3
 8008800:	4b87      	ldr	r3, [pc, #540]	@ (8008a20 <SGP_GetMeasurementValues+0x3b8>)
 8008802:	0018      	movs	r0, r3
 8008804:	f7ff f848 	bl	8007898 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4a86      	ldr	r2, [pc, #536]	@ (8008a24 <SGP_GetMeasurementValues+0x3bc>)
 800880c:	4973      	ldr	r1, [pc, #460]	@ (80089dc <SGP_GetMeasurementValues+0x374>)
 800880e:	2003      	movs	r0, #3
 8008810:	f002 faa4 	bl	800ad5c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	dd5a      	ble.n	80088d8 <SGP_GetMeasurementValues+0x270>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b64      	cmp	r3, #100	@ 0x64
 8008828:	dc56      	bgt.n	80088d8 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	0018      	movs	r0, r3
 8008830:	f7fa fdbc 	bl	80033ac <__aeabi_i2d>
 8008834:	2200      	movs	r2, #0
 8008836:	4b7c      	ldr	r3, [pc, #496]	@ (8008a28 <SGP_GetMeasurementValues+0x3c0>)
 8008838:	f7f9 fab2 	bl	8001da0 <__aeabi_ddiv>
 800883c:	0002      	movs	r2, r0
 800883e:	000b      	movs	r3, r1
 8008840:	2000      	movs	r0, #0
 8008842:	497a      	ldr	r1, [pc, #488]	@ (8008a2c <SGP_GetMeasurementValues+0x3c4>)
 8008844:	f7fa f9b8 	bl	8002bb8 <__aeabi_dsub>
 8008848:	0002      	movs	r2, r0
 800884a:	000b      	movs	r3, r1
 800884c:	0014      	movs	r4, r2
 800884e:	001d      	movs	r5, r3
 8008850:	4b77      	ldr	r3, [pc, #476]	@ (8008a30 <SGP_GetMeasurementValues+0x3c8>)
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	0018      	movs	r0, r3
 8008856:	f7fa fda9 	bl	80033ac <__aeabi_i2d>
 800885a:	0002      	movs	r2, r0
 800885c:	000b      	movs	r3, r1
 800885e:	0020      	movs	r0, r4
 8008860:	0029      	movs	r1, r5
 8008862:	f7f9 fee1 	bl	8002628 <__aeabi_dmul>
 8008866:	0002      	movs	r2, r0
 8008868:	000b      	movs	r3, r1
 800886a:	0010      	movs	r0, r2
 800886c:	0019      	movs	r1, r3
 800886e:	f7f7 fee3 	bl	8000638 <__aeabi_d2uiz>
 8008872:	0003      	movs	r3, r0
 8008874:	b29a      	uxth	r2, r3
 8008876:	4b6f      	ldr	r3, [pc, #444]	@ (8008a34 <SGP_GetMeasurementValues+0x3cc>)
 8008878:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	0018      	movs	r0, r3
 8008880:	f7fa fd94 	bl	80033ac <__aeabi_i2d>
 8008884:	2200      	movs	r2, #0
 8008886:	4b68      	ldr	r3, [pc, #416]	@ (8008a28 <SGP_GetMeasurementValues+0x3c0>)
 8008888:	f7f9 fa8a 	bl	8001da0 <__aeabi_ddiv>
 800888c:	0002      	movs	r2, r0
 800888e:	000b      	movs	r3, r1
 8008890:	0014      	movs	r4, r2
 8008892:	001d      	movs	r5, r3
 8008894:	4b66      	ldr	r3, [pc, #408]	@ (8008a30 <SGP_GetMeasurementValues+0x3c8>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	0018      	movs	r0, r3
 800889a:	f7fa fd87 	bl	80033ac <__aeabi_i2d>
 800889e:	0002      	movs	r2, r0
 80088a0:	000b      	movs	r3, r1
 80088a2:	0020      	movs	r0, r4
 80088a4:	0029      	movs	r1, r5
 80088a6:	f7f9 febf 	bl	8002628 <__aeabi_dmul>
 80088aa:	0002      	movs	r2, r0
 80088ac:	000b      	movs	r3, r1
 80088ae:	0010      	movs	r0, r2
 80088b0:	0019      	movs	r1, r3
 80088b2:	f7f7 fec1 	bl	8000638 <__aeabi_d2uiz>
 80088b6:	0003      	movs	r3, r0
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008a38 <SGP_GetMeasurementValues+0x3d0>)
 80088bc:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80088be:	4b5c      	ldr	r3, [pc, #368]	@ (8008a30 <SGP_GetMeasurementValues+0x3c8>)
 80088c0:	881a      	ldrh	r2, [r3, #0]
 80088c2:	4b5e      	ldr	r3, [pc, #376]	@ (8008a3c <SGP_GetMeasurementValues+0x3d4>)
 80088c4:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 80088c6:	4b5d      	ldr	r3, [pc, #372]	@ (8008a3c <SGP_GetMeasurementValues+0x3d4>)
 80088c8:	8818      	ldrh	r0, [r3, #0]
 80088ca:	4b5a      	ldr	r3, [pc, #360]	@ (8008a34 <SGP_GetMeasurementValues+0x3cc>)
 80088cc:	8819      	ldrh	r1, [r3, #0]
 80088ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008a38 <SGP_GetMeasurementValues+0x3d0>)
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	001a      	movs	r2, r3
 80088d4:	f001 fb36 	bl	8009f44 <SetVocLED>
      }
      if(*vocIndex > 100){
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b64      	cmp	r3, #100	@ 0x64
 80088de:	dd66      	ble.n	80089ae <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7fa fd61 	bl	80033ac <__aeabi_i2d>
 80088ea:	2200      	movs	r2, #0
 80088ec:	4b4e      	ldr	r3, [pc, #312]	@ (8008a28 <SGP_GetMeasurementValues+0x3c0>)
 80088ee:	f7fa f963 	bl	8002bb8 <__aeabi_dsub>
 80088f2:	0002      	movs	r2, r0
 80088f4:	000b      	movs	r3, r1
 80088f6:	0010      	movs	r0, r2
 80088f8:	0019      	movs	r1, r3
 80088fa:	2200      	movs	r2, #0
 80088fc:	4b50      	ldr	r3, [pc, #320]	@ (8008a40 <SGP_GetMeasurementValues+0x3d8>)
 80088fe:	f7f9 fa4f 	bl	8001da0 <__aeabi_ddiv>
 8008902:	0002      	movs	r2, r0
 8008904:	000b      	movs	r3, r1
 8008906:	0014      	movs	r4, r2
 8008908:	001d      	movs	r5, r3
 800890a:	4b49      	ldr	r3, [pc, #292]	@ (8008a30 <SGP_GetMeasurementValues+0x3c8>)
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	0018      	movs	r0, r3
 8008910:	f7fa fd4c 	bl	80033ac <__aeabi_i2d>
 8008914:	0002      	movs	r2, r0
 8008916:	000b      	movs	r3, r1
 8008918:	0020      	movs	r0, r4
 800891a:	0029      	movs	r1, r5
 800891c:	f7f9 fe84 	bl	8002628 <__aeabi_dmul>
 8008920:	0002      	movs	r2, r0
 8008922:	000b      	movs	r3, r1
 8008924:	0010      	movs	r0, r2
 8008926:	0019      	movs	r1, r3
 8008928:	f7f7 fe86 	bl	8000638 <__aeabi_d2uiz>
 800892c:	0003      	movs	r3, r0
 800892e:	b29a      	uxth	r2, r3
 8008930:	4b40      	ldr	r3, [pc, #256]	@ (8008a34 <SGP_GetMeasurementValues+0x3cc>)
 8008932:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	0018      	movs	r0, r3
 800893a:	f7fa fd37 	bl	80033ac <__aeabi_i2d>
 800893e:	2200      	movs	r2, #0
 8008940:	4b39      	ldr	r3, [pc, #228]	@ (8008a28 <SGP_GetMeasurementValues+0x3c0>)
 8008942:	f7fa f939 	bl	8002bb8 <__aeabi_dsub>
 8008946:	0002      	movs	r2, r0
 8008948:	000b      	movs	r3, r1
 800894a:	0010      	movs	r0, r2
 800894c:	0019      	movs	r1, r3
 800894e:	2200      	movs	r2, #0
 8008950:	4b3b      	ldr	r3, [pc, #236]	@ (8008a40 <SGP_GetMeasurementValues+0x3d8>)
 8008952:	f7f9 fa25 	bl	8001da0 <__aeabi_ddiv>
 8008956:	0002      	movs	r2, r0
 8008958:	000b      	movs	r3, r1
 800895a:	2000      	movs	r0, #0
 800895c:	4933      	ldr	r1, [pc, #204]	@ (8008a2c <SGP_GetMeasurementValues+0x3c4>)
 800895e:	f7fa f92b 	bl	8002bb8 <__aeabi_dsub>
 8008962:	0002      	movs	r2, r0
 8008964:	000b      	movs	r3, r1
 8008966:	0014      	movs	r4, r2
 8008968:	001d      	movs	r5, r3
 800896a:	4b31      	ldr	r3, [pc, #196]	@ (8008a30 <SGP_GetMeasurementValues+0x3c8>)
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	0018      	movs	r0, r3
 8008970:	f7fa fd1c 	bl	80033ac <__aeabi_i2d>
 8008974:	0002      	movs	r2, r0
 8008976:	000b      	movs	r3, r1
 8008978:	0020      	movs	r0, r4
 800897a:	0029      	movs	r1, r5
 800897c:	f7f9 fe54 	bl	8002628 <__aeabi_dmul>
 8008980:	0002      	movs	r2, r0
 8008982:	000b      	movs	r3, r1
 8008984:	0010      	movs	r0, r2
 8008986:	0019      	movs	r1, r3
 8008988:	f7f7 fe56 	bl	8000638 <__aeabi_d2uiz>
 800898c:	0003      	movs	r3, r0
 800898e:	b29a      	uxth	r2, r3
 8008990:	4b2a      	ldr	r3, [pc, #168]	@ (8008a3c <SGP_GetMeasurementValues+0x3d4>)
 8008992:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8008994:	4b26      	ldr	r3, [pc, #152]	@ (8008a30 <SGP_GetMeasurementValues+0x3c8>)
 8008996:	881a      	ldrh	r2, [r3, #0]
 8008998:	4b27      	ldr	r3, [pc, #156]	@ (8008a38 <SGP_GetMeasurementValues+0x3d0>)
 800899a:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800899c:	4b27      	ldr	r3, [pc, #156]	@ (8008a3c <SGP_GetMeasurementValues+0x3d4>)
 800899e:	8818      	ldrh	r0, [r3, #0]
 80089a0:	4b24      	ldr	r3, [pc, #144]	@ (8008a34 <SGP_GetMeasurementValues+0x3cc>)
 80089a2:	8819      	ldrh	r1, [r3, #0]
 80089a4:	4b24      	ldr	r3, [pc, #144]	@ (8008a38 <SGP_GetMeasurementValues+0x3d0>)
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	001a      	movs	r2, r3
 80089aa:	f001 facb 	bl	8009f44 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 80089ae:	4b11      	ldr	r3, [pc, #68]	@ (80089f4 <SGP_GetMeasurementValues+0x38c>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80089b4:	4a23      	ldr	r2, [pc, #140]	@ (8008a44 <SGP_GetMeasurementValues+0x3dc>)
 80089b6:	4b09      	ldr	r3, [pc, #36]	@ (80089dc <SGP_GetMeasurementValues+0x374>)
 80089b8:	0019      	movs	r1, r3
 80089ba:	2003      	movs	r0, #3
 80089bc:	f002 f9ce 	bl	800ad5c <CreateLine>
      HT_MeasurementReceived = false;
 80089c0:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <SGP_GetMeasurementValues+0x378>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80089c6:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <SGP_GetMeasurementValues+0x36c>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e053      	b.n	8008a78 <SGP_GetMeasurementValues+0x410>
 80089d0:	2000115a 	.word	0x2000115a
 80089d4:	20001205 	.word	0x20001205
 80089d8:	0801ea6c 	.word	0x0801ea6c
 80089dc:	0801ea98 	.word	0x0801ea98
 80089e0:	20001204 	.word	0x20001204
 80089e4:	2000003c 	.word	0x2000003c
 80089e8:	20000050 	.word	0x20000050
 80089ec:	20000034 	.word	0x20000034
 80089f0:	2000115b 	.word	0x2000115b
 80089f4:	20001159 	.word	0x20001159
 80089f8:	0801ea9c 	.word	0x0801ea9c
 80089fc:	20001150 	.word	0x20001150
 8008a00:	0801eacc 	.word	0x0801eacc
 8008a04:	0801eaf0 	.word	0x0801eaf0
 8008a08:	0801eaf4 	.word	0x0801eaf4
 8008a0c:	0801eb14 	.word	0x0801eb14
 8008a10:	0801eb18 	.word	0x0801eb18
 8008a14:	2000004c 	.word	0x2000004c
 8008a18:	20000044 	.word	0x20000044
 8008a1c:	0801eb38 	.word	0x0801eb38
 8008a20:	2000115c 	.word	0x2000115c
 8008a24:	0801eb4c 	.word	0x0801eb4c
 8008a28:	40590000 	.word	0x40590000
 8008a2c:	3ff00000 	.word	0x3ff00000
 8008a30:	20000054 	.word	0x20000054
 8008a34:	2000120a 	.word	0x2000120a
 8008a38:	20001208 	.word	0x20001208
 8008a3c:	20001206 	.word	0x20001206
 8008a40:	40790000 	.word	0x40790000
 8008a44:	0801eb60 	.word	0x0801eb60
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8008a48:	f7ff fdf2 	bl	8008630 <SGP_MeasurementDone>
 8008a4c:	1e03      	subs	r3, r0, #0
 8008a4e:	d012      	beq.n	8008a76 <SGP_GetMeasurementValues+0x40e>
 8008a50:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <SGP_GetMeasurementValues+0x418>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00e      	beq.n	8008a76 <SGP_GetMeasurementValues+0x40e>
 8008a58:	4b0a      	ldr	r3, [pc, #40]	@ (8008a84 <SGP_GetMeasurementValues+0x41c>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00a      	beq.n	8008a76 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8008a60:	4a09      	ldr	r2, [pc, #36]	@ (8008a88 <SGP_GetMeasurementValues+0x420>)
 8008a62:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <SGP_GetMeasurementValues+0x424>)
 8008a64:	0019      	movs	r1, r3
 8008a66:	2003      	movs	r0, #3
 8008a68:	f002 f978 	bl	800ad5c <CreateLine>
    SGP_StartMeasurement();
 8008a6c:	f7ff fd8c 	bl	8008588 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008a70:	4b07      	ldr	r3, [pc, #28]	@ (8008a90 <SGP_GetMeasurementValues+0x428>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	0018      	movs	r0, r3
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	b004      	add	sp, #16
 8008a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a80:	2000115a 	.word	0x2000115a
 8008a84:	2000115b 	.word	0x2000115b
 8008a88:	0801eb84 	.word	0x0801eb84
 8008a8c:	0801ea98 	.word	0x0801ea98
 8008a90:	20001205 	.word	0x20001205

08008a94 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <SGP_DeviceConnected+0x70>)
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	0019      	movs	r1, r3
 8008aa0:	2059      	movs	r0, #89	@ 0x59
 8008aa2:	f7ff fd39 	bl	8008518 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	f002 fd04 	bl	800b4b4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8008aac:	4b16      	ldr	r3, [pc, #88]	@ (8008b08 <SGP_DeviceConnected+0x74>)
 8008aae:	2209      	movs	r2, #9
 8008ab0:	0019      	movs	r1, r3
 8008ab2:	2059      	movs	r0, #89	@ 0x59
 8008ab4:	f7ff fd12 	bl	80084dc <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008ab8:	1dfb      	adds	r3, r7, #7
 8008aba:	2200      	movs	r2, #0
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	e011      	b.n	8008ae4 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8008ac0:	1dfb      	adds	r3, r7, #7
 8008ac2:	7818      	ldrb	r0, [r3, #0]
 8008ac4:	1dfb      	adds	r3, r7, #7
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8008b08 <SGP_DeviceConnected+0x74>)
 8008aca:	5cd3      	ldrb	r3, [r2, r3]
 8008acc:	4a0f      	ldr	r2, [pc, #60]	@ (8008b0c <SGP_DeviceConnected+0x78>)
 8008ace:	4910      	ldr	r1, [pc, #64]	@ (8008b10 <SGP_DeviceConnected+0x7c>)
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	0003      	movs	r3, r0
 8008ad4:	2002      	movs	r0, #2
 8008ad6:	f002 f941 	bl	800ad5c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008ada:	1dfb      	adds	r3, r7, #7
 8008adc:	781a      	ldrb	r2, [r3, #0]
 8008ade:	1dfb      	adds	r3, r7, #7
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	1dfb      	adds	r3, r7, #7
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d9e9      	bls.n	8008ac0 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8008aec:	4b06      	ldr	r3, [pc, #24]	@ (8008b08 <SGP_DeviceConnected+0x74>)
 8008aee:	2203      	movs	r2, #3
 8008af0:	2109      	movs	r1, #9
 8008af2:	0018      	movs	r0, r3
 8008af4:	f000 f80e 	bl	8008b14 <CheckCRC>
 8008af8:	0003      	movs	r3, r0
}
 8008afa:	0018      	movs	r0, r3
 8008afc:	46bd      	mov	sp, r7
 8008afe:	b002      	add	sp, #8
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	46c0      	nop			@ (mov r8, r8)
 8008b04:	20000030 	.word	0x20000030
 8008b08:	20001150 	.word	0x20001150
 8008b0c:	0801eba4 	.word	0x0801eba4
 8008b10:	0801eb14 	.word	0x0801eb14

08008b14 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8008b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b16:	b08f      	sub	sp, #60	@ 0x3c
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b1c:	0008      	movs	r0, r1
 8008b1e:	0011      	movs	r1, r2
 8008b20:	2323      	movs	r3, #35	@ 0x23
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	1c02      	adds	r2, r0, #0
 8008b26:	701a      	strb	r2, [r3, #0]
 8008b28:	2322      	movs	r3, #34	@ 0x22
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	1c0a      	adds	r2, r1, #0
 8008b2e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008b30:	2317      	movs	r3, #23
 8008b32:	2220      	movs	r2, #32
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	19db      	adds	r3, r3, r7
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	e09f      	b.n	8008c7e <CheckCRC+0x16a>
 8008b3e:	466b      	mov	r3, sp
 8008b40:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8008b42:	2322      	movs	r3, #34	@ 0x22
 8008b44:	18fb      	adds	r3, r7, r3
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	001a      	movs	r2, r3
 8008b4a:	3a01      	subs	r2, #1
 8008b4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b4e:	60bb      	str	r3, [r7, #8]
 8008b50:	2200      	movs	r2, #0
 8008b52:	60fa      	str	r2, [r7, #12]
 8008b54:	68b8      	ldr	r0, [r7, #8]
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	0002      	movs	r2, r0
 8008b5a:	0f52      	lsrs	r2, r2, #29
 8008b5c:	000c      	movs	r4, r1
 8008b5e:	00e4      	lsls	r4, r4, #3
 8008b60:	61fc      	str	r4, [r7, #28]
 8008b62:	69fc      	ldr	r4, [r7, #28]
 8008b64:	4314      	orrs	r4, r2
 8008b66:	61fc      	str	r4, [r7, #28]
 8008b68:	0002      	movs	r2, r0
 8008b6a:	00d2      	lsls	r2, r2, #3
 8008b6c:	61ba      	str	r2, [r7, #24]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	2200      	movs	r2, #0
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	6838      	ldr	r0, [r7, #0]
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	0002      	movs	r2, r0
 8008b7a:	0f52      	lsrs	r2, r2, #29
 8008b7c:	000c      	movs	r4, r1
 8008b7e:	00e4      	lsls	r4, r4, #3
 8008b80:	617c      	str	r4, [r7, #20]
 8008b82:	697c      	ldr	r4, [r7, #20]
 8008b84:	4314      	orrs	r4, r2
 8008b86:	617c      	str	r4, [r7, #20]
 8008b88:	0002      	movs	r2, r0
 8008b8a:	00d2      	lsls	r2, r2, #3
 8008b8c:	613a      	str	r2, [r7, #16]
 8008b8e:	3307      	adds	r3, #7
 8008b90:	08db      	lsrs	r3, r3, #3
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	466a      	mov	r2, sp
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	469d      	mov	sp, r3
 8008b9a:	466b      	mov	r3, sp
 8008b9c:	3300      	adds	r3, #0
 8008b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8008ba0:	2316      	movs	r3, #22
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	189b      	adds	r3, r3, r2
 8008ba6:	19db      	adds	r3, r3, r7
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	e01e      	b.n	8008bec <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8008bae:	2317      	movs	r3, #23
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	189b      	adds	r3, r3, r2
 8008bb4:	19db      	adds	r3, r3, r7
 8008bb6:	781a      	ldrb	r2, [r3, #0]
 8008bb8:	2116      	movs	r1, #22
 8008bba:	2320      	movs	r3, #32
 8008bbc:	18cb      	adds	r3, r1, r3
 8008bbe:	19db      	adds	r3, r3, r7
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	18d3      	adds	r3, r2, r3
 8008bc4:	001a      	movs	r2, r3
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	189a      	adds	r2, r3, r2
 8008bca:	0008      	movs	r0, r1
 8008bcc:	2320      	movs	r3, #32
 8008bce:	18cb      	adds	r3, r1, r3
 8008bd0:	19db      	adds	r3, r3, r7
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	7811      	ldrb	r1, [r2, #0]
 8008bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bd8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8008bda:	2320      	movs	r3, #32
 8008bdc:	18c3      	adds	r3, r0, r3
 8008bde:	19db      	adds	r3, r3, r7
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	2320      	movs	r3, #32
 8008be4:	18c3      	adds	r3, r0, r3
 8008be6:	19db      	adds	r3, r3, r7
 8008be8:	3201      	adds	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	2316      	movs	r3, #22
 8008bee:	2220      	movs	r2, #32
 8008bf0:	189b      	adds	r3, r3, r2
 8008bf2:	19da      	adds	r2, r3, r7
 8008bf4:	2322      	movs	r3, #34	@ 0x22
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d3d6      	bcc.n	8008bae <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8008c00:	2417      	movs	r4, #23
 8008c02:	2320      	movs	r3, #32
 8008c04:	18e3      	adds	r3, r4, r3
 8008c06:	19db      	adds	r3, r3, r7
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	2322      	movs	r3, #34	@ 0x22
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	18d3      	adds	r3, r2, r3
 8008c12:	3b01      	subs	r3, #1
 8008c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c16:	18d2      	adds	r2, r2, r3
 8008c18:	250b      	movs	r5, #11
 8008c1a:	2320      	movs	r3, #32
 8008c1c:	18eb      	adds	r3, r5, r3
 8008c1e:	19db      	adds	r3, r3, r7
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008c24:	2322      	movs	r3, #34	@ 0x22
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c30:	0011      	movs	r1, r2
 8008c32:	0018      	movs	r0, r3
 8008c34:	f000 f838 	bl	8008ca8 <CalculateCRC>
 8008c38:	0003      	movs	r3, r0
 8008c3a:	001a      	movs	r2, r3
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	18eb      	adds	r3, r5, r3
 8008c40:	19db      	adds	r3, r3, r7
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00c      	beq.n	8008c62 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008c48:	2320      	movs	r3, #32
 8008c4a:	18e3      	adds	r3, r4, r3
 8008c4c:	19db      	adds	r3, r3, r7
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	4a13      	ldr	r2, [pc, #76]	@ (8008ca0 <CheckCRC+0x18c>)
 8008c54:	4913      	ldr	r1, [pc, #76]	@ (8008ca4 <CheckCRC+0x190>)
 8008c56:	2001      	movs	r0, #1
 8008c58:	f002 f880 	bl	800ad5c <CreateLine>
      return false;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	46b5      	mov	sp, r6
 8008c60:	e019      	b.n	8008c96 <CheckCRC+0x182>
 8008c62:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008c64:	2217      	movs	r2, #23
 8008c66:	2320      	movs	r3, #32
 8008c68:	18d3      	adds	r3, r2, r3
 8008c6a:	19db      	adds	r3, r3, r7
 8008c6c:	2120      	movs	r1, #32
 8008c6e:	1852      	adds	r2, r2, r1
 8008c70:	19d1      	adds	r1, r2, r7
 8008c72:	2222      	movs	r2, #34	@ 0x22
 8008c74:	18ba      	adds	r2, r7, r2
 8008c76:	7809      	ldrb	r1, [r1, #0]
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	188a      	adds	r2, r1, r2
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	2317      	movs	r3, #23
 8008c80:	2220      	movs	r2, #32
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	19da      	adds	r2, r3, r7
 8008c86:	2323      	movs	r3, #35	@ 0x23
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	7812      	ldrb	r2, [r2, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d200      	bcs.n	8008c94 <CheckCRC+0x180>
 8008c92:	e754      	b.n	8008b3e <CheckCRC+0x2a>
    }
  }
  return true;
 8008c94:	2301      	movs	r3, #1
}
 8008c96:	0018      	movs	r0, r3
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	b00f      	add	sp, #60	@ 0x3c
 8008c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9e:	46c0      	nop			@ (mov r8, r8)
 8008ca0:	0801ebc4 	.word	0x0801ebc4
 8008ca4:	0801eaf0 	.word	0x0801eaf0

08008ca8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	000a      	movs	r2, r1
 8008cb2:	1cfb      	adds	r3, r7, #3
 8008cb4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008cb6:	230f      	movs	r3, #15
 8008cb8:	18fb      	adds	r3, r7, r3
 8008cba:	22ff      	movs	r2, #255	@ 0xff
 8008cbc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008cbe:	230e      	movs	r3, #14
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	e037      	b.n	8008d38 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008cc8:	230e      	movs	r3, #14
 8008cca:	18fb      	adds	r3, r7, r3
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	18d3      	adds	r3, r2, r3
 8008cd2:	7819      	ldrb	r1, [r3, #0]
 8008cd4:	220f      	movs	r2, #15
 8008cd6:	18bb      	adds	r3, r7, r2
 8008cd8:	18ba      	adds	r2, r7, r2
 8008cda:	7812      	ldrb	r2, [r2, #0]
 8008cdc:	404a      	eors	r2, r1
 8008cde:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008ce0:	230d      	movs	r3, #13
 8008ce2:	18fb      	adds	r3, r7, r3
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	e01b      	b.n	8008d22 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008cea:	210f      	movs	r1, #15
 8008cec:	187b      	adds	r3, r7, r1
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	b25b      	sxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da09      	bge.n	8008d0a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008cf6:	187b      	adds	r3, r7, r1
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	b25b      	sxtb	r3, r3
 8008cfe:	2231      	movs	r2, #49	@ 0x31
 8008d00:	4053      	eors	r3, r2
 8008d02:	b25a      	sxtb	r2, r3
 8008d04:	187b      	adds	r3, r7, r1
 8008d06:	701a      	strb	r2, [r3, #0]
 8008d08:	e005      	b.n	8008d16 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008d0a:	230f      	movs	r3, #15
 8008d0c:	18fa      	adds	r2, r7, r3
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	18db      	adds	r3, r3, r3
 8008d14:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008d16:	210d      	movs	r1, #13
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	781a      	ldrb	r2, [r3, #0]
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	3201      	adds	r2, #1
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	230d      	movs	r3, #13
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b07      	cmp	r3, #7
 8008d2a:	d9de      	bls.n	8008cea <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d2c:	210e      	movs	r1, #14
 8008d2e:	187b      	adds	r3, r7, r1
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	187b      	adds	r3, r7, r1
 8008d34:	3201      	adds	r2, #1
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	230e      	movs	r3, #14
 8008d3a:	18fa      	adds	r2, r7, r3
 8008d3c:	1cfb      	adds	r3, r7, #3
 8008d3e:	7812      	ldrb	r2, [r2, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d3c0      	bcc.n	8008cc8 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008d46:	230f      	movs	r3, #15
 8008d48:	18fb      	adds	r3, r7, r3
 8008d4a:	781b      	ldrb	r3, [r3, #0]
}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	b004      	add	sp, #16
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4936      	ldr	r1, [pc, #216]	@ (8008e3c <SGP_GetHT+0xe8>)
 8008d64:	1c18      	adds	r0, r3, #0
 8008d66:	f7f7 fda1 	bl	80008ac <__aeabi_fadd>
 8008d6a:	1c03      	adds	r3, r0, #0
 8008d6c:	4934      	ldr	r1, [pc, #208]	@ (8008e40 <SGP_GetHT+0xec>)
 8008d6e:	1c18      	adds	r0, r3, #0
 8008d70:	f7f7 ff26 	bl	8000bc0 <__aeabi_fdiv>
 8008d74:	1c03      	adds	r3, r0, #0
 8008d76:	4933      	ldr	r1, [pc, #204]	@ (8008e44 <SGP_GetHT+0xf0>)
 8008d78:	1c18      	adds	r0, r3, #0
 8008d7a:	f7f8 f907 	bl	8000f8c <__aeabi_fmul>
 8008d7e:	1c03      	adds	r3, r0, #0
 8008d80:	1c18      	adds	r0, r3, #0
 8008d82:	f7f7 fc41 	bl	8000608 <__aeabi_f2uiz>
 8008d86:	0003      	movs	r3, r0
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e48 <SGP_GetHT+0xf4>)
 8008d8c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	492e      	ldr	r1, [pc, #184]	@ (8008e4c <SGP_GetHT+0xf8>)
 8008d94:	1c18      	adds	r0, r3, #0
 8008d96:	f7f7 ff13 	bl	8000bc0 <__aeabi_fdiv>
 8008d9a:	1c03      	adds	r3, r0, #0
 8008d9c:	4929      	ldr	r1, [pc, #164]	@ (8008e44 <SGP_GetHT+0xf0>)
 8008d9e:	1c18      	adds	r0, r3, #0
 8008da0:	f7f8 f8f4 	bl	8000f8c <__aeabi_fmul>
 8008da4:	1c03      	adds	r3, r0, #0
 8008da6:	1c18      	adds	r0, r3, #0
 8008da8:	f7f7 fc2e 	bl	8000608 <__aeabi_f2uiz>
 8008dac:	0003      	movs	r3, r0
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	4b27      	ldr	r3, [pc, #156]	@ (8008e50 <SGP_GetHT+0xfc>)
 8008db2:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008db4:	4b26      	ldr	r3, [pc, #152]	@ (8008e50 <SGP_GetHT+0xfc>)
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	4b25      	ldr	r3, [pc, #148]	@ (8008e54 <SGP_GetHT+0x100>)
 8008dc0:	709a      	strb	r2, [r3, #2]
 8008dc2:	4b24      	ldr	r3, [pc, #144]	@ (8008e54 <SGP_GetHT+0x100>)
 8008dc4:	789a      	ldrb	r2, [r3, #2]
 8008dc6:	210c      	movs	r1, #12
 8008dc8:	187b      	adds	r3, r7, r1
 8008dca:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008dcc:	4b20      	ldr	r3, [pc, #128]	@ (8008e50 <SGP_GetHT+0xfc>)
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	4b20      	ldr	r3, [pc, #128]	@ (8008e54 <SGP_GetHT+0x100>)
 8008dd4:	70da      	strb	r2, [r3, #3]
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e54 <SGP_GetHT+0x100>)
 8008dd8:	78da      	ldrb	r2, [r3, #3]
 8008dda:	187b      	adds	r3, r7, r1
 8008ddc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008dde:	187b      	adds	r3, r7, r1
 8008de0:	2102      	movs	r1, #2
 8008de2:	0018      	movs	r0, r3
 8008de4:	f7ff ff60 	bl	8008ca8 <CalculateCRC>
 8008de8:	0003      	movs	r3, r0
 8008dea:	001a      	movs	r2, r3
 8008dec:	4b19      	ldr	r3, [pc, #100]	@ (8008e54 <SGP_GetHT+0x100>)
 8008dee:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008df0:	4b15      	ldr	r3, [pc, #84]	@ (8008e48 <SGP_GetHT+0xf4>)
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	4b16      	ldr	r3, [pc, #88]	@ (8008e54 <SGP_GetHT+0x100>)
 8008dfc:	715a      	strb	r2, [r3, #5]
 8008dfe:	4b15      	ldr	r3, [pc, #84]	@ (8008e54 <SGP_GetHT+0x100>)
 8008e00:	795a      	ldrb	r2, [r3, #5]
 8008e02:	2108      	movs	r1, #8
 8008e04:	187b      	adds	r3, r7, r1
 8008e06:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008e08:	4b0f      	ldr	r3, [pc, #60]	@ (8008e48 <SGP_GetHT+0xf4>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	4b11      	ldr	r3, [pc, #68]	@ (8008e54 <SGP_GetHT+0x100>)
 8008e10:	719a      	strb	r2, [r3, #6]
 8008e12:	4b10      	ldr	r3, [pc, #64]	@ (8008e54 <SGP_GetHT+0x100>)
 8008e14:	799a      	ldrb	r2, [r3, #6]
 8008e16:	187b      	adds	r3, r7, r1
 8008e18:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008e1a:	187b      	adds	r3, r7, r1
 8008e1c:	2102      	movs	r1, #2
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f7ff ff42 	bl	8008ca8 <CalculateCRC>
 8008e24:	0003      	movs	r3, r0
 8008e26:	001a      	movs	r2, r3
 8008e28:	4b0a      	ldr	r3, [pc, #40]	@ (8008e54 <SGP_GetHT+0x100>)
 8008e2a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <SGP_GetHT+0x104>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	701a      	strb	r2, [r3, #0]
}
 8008e32:	46c0      	nop			@ (mov r8, r8)
 8008e34:	46bd      	mov	sp, r7
 8008e36:	b004      	add	sp, #16
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	46c0      	nop			@ (mov r8, r8)
 8008e3c:	42340000 	.word	0x42340000
 8008e40:	432f0000 	.word	0x432f0000
 8008e44:	477fff00 	.word	0x477fff00
 8008e48:	20001202 	.word	0x20001202
 8008e4c:	42c80000 	.word	0x42c80000
 8008e50:	20001200 	.word	0x20001200
 8008e54:	2000003c 	.word	0x2000003c
 8008e58:	20001204 	.word	0x20001204

08008e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	0002      	movs	r2, r0
 8008e64:	1dfb      	adds	r3, r7, #7
 8008e66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008e68:	1dfb      	adds	r3, r7, #7
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e6e:	d809      	bhi.n	8008e84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e70:	1dfb      	adds	r3, r7, #7
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	001a      	movs	r2, r3
 8008e76:	231f      	movs	r3, #31
 8008e78:	401a      	ands	r2, r3
 8008e7a:	4b04      	ldr	r3, [pc, #16]	@ (8008e8c <__NVIC_EnableIRQ+0x30>)
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	4091      	lsls	r1, r2
 8008e80:	000a      	movs	r2, r1
 8008e82:	601a      	str	r2, [r3, #0]
  }
}
 8008e84:	46c0      	nop			@ (mov r8, r8)
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b002      	add	sp, #8
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	e000e100 	.word	0xe000e100

08008e90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	0002      	movs	r2, r0
 8008e98:	1dfb      	adds	r3, r7, #7
 8008e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008e9c:	1dfb      	adds	r3, r7, #7
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ea2:	d810      	bhi.n	8008ec6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ea4:	1dfb      	adds	r3, r7, #7
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	001a      	movs	r2, r3
 8008eaa:	231f      	movs	r3, #31
 8008eac:	4013      	ands	r3, r2
 8008eae:	4908      	ldr	r1, [pc, #32]	@ (8008ed0 <__NVIC_DisableIRQ+0x40>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	409a      	lsls	r2, r3
 8008eb4:	0013      	movs	r3, r2
 8008eb6:	2280      	movs	r2, #128	@ 0x80
 8008eb8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008eba:	f3bf 8f4f 	dsb	sy
}
 8008ebe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8008ec0:	f3bf 8f6f 	isb	sy
}
 8008ec4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8008ec6:	46c0      	nop			@ (mov r8, r8)
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	b002      	add	sp, #8
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	46c0      	nop			@ (mov r8, r8)
 8008ed0:	e000e100 	.word	0xe000e100

08008ed4 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8008ed4:	b5b0      	push	{r4, r5, r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	0008      	movs	r0, r1
 8008ede:	0011      	movs	r1, r2
 8008ee0:	1cfb      	adds	r3, r7, #3
 8008ee2:	1c02      	adds	r2, r0, #0
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	1cbb      	adds	r3, r7, #2
 8008ee8:	1c0a      	adds	r2, r1, #0
 8008eea:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8008eec:	4b5b      	ldr	r3, [pc, #364]	@ (800905c <getSoundData+0x188>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	4053      	eors	r3, r2
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d107      	bne.n	8008f0c <getSoundData+0x38>
 8008efc:	4b58      	ldr	r3, [pc, #352]	@ (8009060 <getSoundData+0x18c>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2201      	movs	r2, #1
 8008f04:	4053      	eors	r3, r2
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <getSoundData+0x3c>
    {
        return false;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e0a0      	b.n	8009052 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8008f10:	4b54      	ldr	r3, [pc, #336]	@ (8009064 <getSoundData+0x190>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8008f1a:	4b53      	ldr	r3, [pc, #332]	@ (8009068 <getSoundData+0x194>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff ffb5 	bl	8008e90 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8008f26:	f3bf 8f4f 	dsb	sy
}
 8008f2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8008f2c:	f3bf 8f6f 	isb	sy
}
 8008f30:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8008f32:	1cfb      	adds	r3, r7, #3
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d04c      	beq.n	8008fd4 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8008f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800906c <getSoundData+0x198>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d11b      	bne.n	8008f7a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008f4e:	2300      	movs	r3, #0
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	e00e      	b.n	8008f72 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	18d3      	adds	r3, r2, r3
 8008f5a:	3302      	adds	r3, #2
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	18d3      	adds	r3, r2, r3
 8008f66:	3308      	adds	r3, #8
 8008f68:	2200      	movs	r2, #0
 8008f6a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b05      	cmp	r3, #5
 8008f76:	d9ed      	bls.n	8008f54 <getSoundData+0x80>
 8008f78:	e02c      	b.n	8008fd4 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	1c59      	adds	r1, r3, #1
 8008f80:	4b3b      	ldr	r3, [pc, #236]	@ (8009070 <getSoundData+0x19c>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	4b3b      	ldr	r3, [pc, #236]	@ (8009074 <getSoundData+0x1a0>)
 8008f86:	681c      	ldr	r4, [r3, #0]
 8008f88:	4b38      	ldr	r3, [pc, #224]	@ (800906c <getSoundData+0x198>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	0023      	movs	r3, r4
 8008f90:	f000 fde8 	bl	8009b64 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]
 8008f98:	e019      	b.n	8008fce <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	18d3      	adds	r3, r2, r3
 8008fa0:	1c98      	adds	r0, r3, #2
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8008faa:	4b33      	ldr	r3, [pc, #204]	@ (8009078 <getSoundData+0x1a4>)
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8008fb2:	4b32      	ldr	r3, [pc, #200]	@ (800907c <getSoundData+0x1a8>)
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	0092      	lsls	r2, r2, #2
 8008fb8:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8008fba:	4b2c      	ldr	r3, [pc, #176]	@ (800906c <getSoundData+0x198>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	0013      	movs	r3, r2
 8008fc2:	0022      	movs	r2, r4
 8008fc4:	f000 fdce 	bl	8009b64 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	613b      	str	r3, [r7, #16]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b05      	cmp	r3, #5
 8008fd2:	d9e2      	bls.n	8008f9a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8008fd4:	1cbb      	adds	r3, r7, #2
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d028      	beq.n	800902e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8008fdc:	240e      	movs	r4, #14
 8008fde:	193b      	adds	r3, r7, r4
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8008fe4:	250d      	movs	r5, #13
 8008fe6:	197b      	adds	r3, r7, r5
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8008fec:	4b24      	ldr	r3, [pc, #144]	@ (8009080 <getSoundData+0x1ac>)
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	4924      	ldr	r1, [pc, #144]	@ (8009084 <getSoundData+0x1b0>)
 8008ff2:	197b      	adds	r3, r7, r5
 8008ff4:	193a      	adds	r2, r7, r4
 8008ff6:	f000 fe59 	bl	8009cac <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8008ffa:	193b      	adds	r3, r7, r4
 8008ffc:	881a      	ldrh	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	21ff      	movs	r1, #255	@ 0xff
 8009002:	4011      	ands	r1, r2
 8009004:	000c      	movs	r4, r1
 8009006:	7b99      	ldrb	r1, [r3, #14]
 8009008:	2000      	movs	r0, #0
 800900a:	4001      	ands	r1, r0
 800900c:	1c08      	adds	r0, r1, #0
 800900e:	1c21      	adds	r1, r4, #0
 8009010:	4301      	orrs	r1, r0
 8009012:	7399      	strb	r1, [r3, #14]
 8009014:	0a12      	lsrs	r2, r2, #8
 8009016:	b290      	uxth	r0, r2
 8009018:	7bda      	ldrb	r2, [r3, #15]
 800901a:	2100      	movs	r1, #0
 800901c:	400a      	ands	r2, r1
 800901e:	1c11      	adds	r1, r2, #0
 8009020:	1c02      	adds	r2, r0, #0
 8009022:	430a      	orrs	r2, r1
 8009024:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8009026:	197b      	adds	r3, r7, r5
 8009028:	781a      	ldrb	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800902e:	f000 f86f 	bl	8009110 <micSettlingComplete>
 8009032:	0003      	movs	r3, r0
 8009034:	001a      	movs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800903a:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <getSoundData+0x190>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009044:	4b08      	ldr	r3, [pc, #32]	@ (8009068 <getSoundData+0x194>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	b25b      	sxtb	r3, r3
 800904a:	0018      	movs	r0, r3
 800904c:	f7ff ff06 	bl	8008e5c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8009050:	2301      	movs	r3, #1
}
 8009052:	0018      	movs	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	b006      	add	sp, #24
 8009058:	bdb0      	pop	{r4, r5, r7, pc}
 800905a:	46c0      	nop			@ (mov r8, r8)
 800905c:	2000120d 	.word	0x2000120d
 8009060:	20001210 	.word	0x20001210
 8009064:	2000120f 	.word	0x2000120f
 8009068:	20001c60 	.word	0x20001c60
 800906c:	20001c9c 	.word	0x20001c9c
 8009070:	20001c64 	.word	0x20001c64
 8009074:	20001c68 	.word	0x20001c68
 8009078:	20001c6c 	.word	0x20001c6c
 800907c:	20001c84 	.word	0x20001c84
 8009080:	20001218 	.word	0x20001218
 8009084:	3b5c7333 	.word	0x3b5c7333

08009088 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
 8009094:	001a      	movs	r2, r3
 8009096:	1cfb      	adds	r3, r7, #3
 8009098:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800909a:	4b09      	ldr	r3, [pc, #36]	@ (80090c0 <soundInit+0x38>)
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80090a0:	4b08      	ldr	r3, [pc, #32]	@ (80090c4 <soundInit+0x3c>)
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80090a6:	4b08      	ldr	r3, [pc, #32]	@ (80090c8 <soundInit+0x40>)
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 80090ac:	4b07      	ldr	r3, [pc, #28]	@ (80090cc <soundInit+0x44>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	569a      	ldrsb	r2, [r3, r2]
 80090b2:	4b06      	ldr	r3, [pc, #24]	@ (80090cc <soundInit+0x44>)
 80090b4:	701a      	strb	r2, [r3, #0]

    return true;
 80090b6:	2301      	movs	r3, #1
}
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b004      	add	sp, #16
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20001c58 	.word	0x20001c58
 80090c4:	20001c54 	.word	0x20001c54
 80090c8:	20001c5c 	.word	0x20001c5c
 80090cc:	20001c60 	.word	0x20001c60

080090d0 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 80090d4:	4b02      	ldr	r3, [pc, #8]	@ (80090e0 <clearMaximumAmplitude+0x10>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	46c0      	nop			@ (mov r8, r8)
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20001218 	.word	0x20001218

080090e4 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 80090e8:	4b08      	ldr	r3, [pc, #32]	@ (800910c <startMicSettlingPeriod+0x28>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 80090f2:	4b06      	ldr	r3, [pc, #24]	@ (800910c <startMicSettlingPeriod+0x28>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	0018      	movs	r0, r3
 80090f8:	f009 f810 	bl	801211c <HAL_TIM_Base_Start>
 80090fc:	1e03      	subs	r3, r0, #0
 80090fe:	d001      	beq.n	8009104 <startMicSettlingPeriod+0x20>
    {
        return false;
 8009100:	2300      	movs	r3, #0
 8009102:	e000      	b.n	8009106 <startMicSettlingPeriod+0x22>
    }
    return true;
 8009104:	2301      	movs	r3, #1
}
 8009106:	0018      	movs	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20001c54 	.word	0x20001c54

08009110 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8009116:	4b0e      	ldr	r3, [pc, #56]	@ (8009150 <micSettlingComplete+0x40>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2201      	movs	r2, #1
 8009120:	401a      	ands	r2, r3
 8009122:	1dfb      	adds	r3, r7, #7
 8009124:	3a01      	subs	r2, #1
 8009126:	4251      	negs	r1, r2
 8009128:	414a      	adcs	r2, r1
 800912a:	701a      	strb	r2, [r3, #0]
    if (complete)
 800912c:	1dfb      	adds	r3, r7, #7
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8009134:	4b06      	ldr	r3, [pc, #24]	@ (8009150 <micSettlingComplete+0x40>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	0018      	movs	r0, r3
 800913a:	f009 f839 	bl	80121b0 <HAL_TIM_Base_Stop>
      DataReady = true;
 800913e:	4b05      	ldr	r3, [pc, #20]	@ (8009154 <micSettlingComplete+0x44>)
 8009140:	2201      	movs	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8009144:	1dfb      	adds	r3, r7, #7
 8009146:	781b      	ldrb	r3, [r3, #0]
}
 8009148:	0018      	movs	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	b002      	add	sp, #8
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20001c54 	.word	0x20001c54
 8009154:	2000120c 	.word	0x2000120c

08009158 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	0002      	movs	r2, r0
 8009160:	1dfb      	adds	r3, r7, #7
 8009162:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8009164:	4b29      	ldr	r3, [pc, #164]	@ (800920c <enableMicrophone+0xb4>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	1dfa      	adds	r2, r7, #7
 800916c:	7812      	ldrb	r2, [r2, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d101      	bne.n	8009176 <enableMicrophone+0x1e>
    {
        return true;
 8009172:	2301      	movs	r3, #1
 8009174:	e045      	b.n	8009202 <enableMicrophone+0xaa>
    }
    if (bEnable)
 8009176:	1dfb      	adds	r3, r7, #7
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d025      	beq.n	80091ca <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800917e:	f7ff ffb1 	bl	80090e4 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8009182:	4b23      	ldr	r3, [pc, #140]	@ (8009210 <enableMicrophone+0xb8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2280      	movs	r2, #128	@ 0x80
 8009188:	0092      	lsls	r2, r2, #2
 800918a:	4922      	ldr	r1, [pc, #136]	@ (8009214 <enableMicrophone+0xbc>)
 800918c:	0018      	movs	r0, r3
 800918e:	f005 fd05 	bl	800eb9c <HAL_I2S_Receive_DMA>
 8009192:	1e03      	subs	r3, r0, #0
 8009194:	d001      	beq.n	800919a <enableMicrophone+0x42>
        {
            return false;
 8009196:	2300      	movs	r3, #0
 8009198:	e033      	b.n	8009202 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800919a:	f7ff ff99 	bl	80090d0 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800919e:	4b1e      	ldr	r3, [pc, #120]	@ (8009218 <enableMicrophone+0xc0>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80091a4:	4b1d      	ldr	r3, [pc, #116]	@ (800921c <enableMicrophone+0xc4>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	b25b      	sxtb	r3, r3
 80091aa:	0018      	movs	r0, r3
 80091ac:	f7ff fe56 	bl	8008e5c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 80091b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009220 <enableMicrophone+0xc8>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 80091b6:	4b15      	ldr	r3, [pc, #84]	@ (800920c <enableMicrophone+0xb4>)
 80091b8:	2201      	movs	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80091bc:	4b19      	ldr	r3, [pc, #100]	@ (8009224 <enableMicrophone+0xcc>)
 80091be:	2200      	movs	r2, #0
 80091c0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80091c2:	4b19      	ldr	r3, [pc, #100]	@ (8009228 <enableMicrophone+0xd0>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	e01a      	b.n	8009200 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80091ca:	4b14      	ldr	r3, [pc, #80]	@ (800921c <enableMicrophone+0xc4>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	b25b      	sxtb	r3, r3
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7ff fe5d 	bl	8008e90 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 80091d6:	4b12      	ldr	r3, [pc, #72]	@ (8009220 <enableMicrophone+0xc8>)
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80091dc:	4b11      	ldr	r3, [pc, #68]	@ (8009224 <enableMicrophone+0xcc>)
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80091e2:	4b11      	ldr	r3, [pc, #68]	@ (8009228 <enableMicrophone+0xd0>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 80091e8:	4b09      	ldr	r3, [pc, #36]	@ (8009210 <enableMicrophone+0xb8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	0018      	movs	r0, r3
 80091ee:	f005 fd97 	bl	800ed20 <HAL_I2S_DMAStop>
 80091f2:	1e03      	subs	r3, r0, #0
 80091f4:	d001      	beq.n	80091fa <enableMicrophone+0xa2>
        {
            return false;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e003      	b.n	8009202 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 80091fa:	4b04      	ldr	r3, [pc, #16]	@ (800920c <enableMicrophone+0xb4>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8009200:	2301      	movs	r3, #1
}
 8009202:	0018      	movs	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	b002      	add	sp, #8
 8009208:	bd80      	pop	{r7, pc}
 800920a:	46c0      	nop			@ (mov r8, r8)
 800920c:	2000120d 	.word	0x2000120d
 8009210:	20001c58 	.word	0x20001c58
 8009214:	20001254 	.word	0x20001254
 8009218:	20001214 	.word	0x20001214
 800921c:	20001c60 	.word	0x20001c60
 8009220:	2000120f 	.word	0x2000120f
 8009224:	2000120e 	.word	0x2000120e
 8009228:	20001210 	.word	0x20001210

0800922c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8009230:	4b0c      	ldr	r3, [pc, #48]	@ (8009264 <startSPLcalculation+0x38>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2201      	movs	r2, #1
 8009238:	4053      	eors	r3, r2
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <startSPLcalculation+0x18>
    {
        return false;
 8009240:	2300      	movs	r3, #0
 8009242:	e00c      	b.n	800925e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8009244:	4b08      	ldr	r3, [pc, #32]	@ (8009268 <startSPLcalculation+0x3c>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <startSPLcalculation+0x26>
    {
        return true;
 800924e:	2301      	movs	r3, #1
 8009250:	e005      	b.n	800925e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8009252:	f000 fb63 	bl	800991c <resetSPLstate>
    SPLcalcEnabled = true;
 8009256:	4b04      	ldr	r3, [pc, #16]	@ (8009268 <startSPLcalculation+0x3c>)
 8009258:	2201      	movs	r2, #1
 800925a:	701a      	strb	r2, [r3, #0]
    return true;
 800925c:	2301      	movs	r3, #1
}
 800925e:	0018      	movs	r0, r3
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	2000120d 	.word	0x2000120d
 8009268:	2000120e 	.word	0x2000120e

0800926c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009274:	4b05      	ldr	r3, [pc, #20]	@ (800928c <HAL_I2S_RxHalfCpltCallback+0x20>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d102      	bne.n	8009284 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800927e:	2000      	movs	r0, #0
 8009280:	f000 f81a 	bl	80092b8 <processHalfDMAbuffer>
  }
}
 8009284:	46c0      	nop			@ (mov r8, r8)
 8009286:	46bd      	mov	sp, r7
 8009288:	b002      	add	sp, #8
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20001c58 	.word	0x20001c58

08009290 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009298:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <HAL_I2S_RxCpltCallback+0x24>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d104      	bne.n	80092ac <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 80092a2:	2380      	movs	r3, #128	@ 0x80
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	0018      	movs	r0, r3
 80092a8:	f000 f806 	bl	80092b8 <processHalfDMAbuffer>
  }
}
 80092ac:	46c0      	nop			@ (mov r8, r8)
 80092ae:	46bd      	mov	sp, r7
 80092b0:	b002      	add	sp, #8
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20001c58 	.word	0x20001c58

080092b8 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	005a      	lsls	r2, r3, #1
 80092c4:	4b15      	ldr	r3, [pc, #84]	@ (800931c <processHalfDMAbuffer+0x64>)
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	4a15      	ldr	r2, [pc, #84]	@ (8009320 <processHalfDMAbuffer+0x68>)
 80092ca:	2180      	movs	r1, #128	@ 0x80
 80092cc:	0089      	lsls	r1, r1, #2
 80092ce:	0018      	movs	r0, r3
 80092d0:	f000 fd35 	bl	8009d3e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 80092d4:	4b13      	ldr	r3, [pc, #76]	@ (8009324 <processHalfDMAbuffer+0x6c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	425a      	negs	r2, r3
 80092da:	4153      	adcs	r3, r2
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	4b11      	ldr	r3, [pc, #68]	@ (8009324 <processHalfDMAbuffer+0x6c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2109      	movs	r1, #9
 80092e4:	4299      	cmp	r1, r3
 80092e6:	419b      	sbcs	r3, r3
 80092e8:	425b      	negs	r3, r3
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	480c      	ldr	r0, [pc, #48]	@ (8009320 <processHalfDMAbuffer+0x68>)
 80092ee:	2180      	movs	r1, #128	@ 0x80
 80092f0:	f000 fb46 	bl	8009980 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 80092f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009324 <processHalfDMAbuffer+0x6c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b09      	cmp	r3, #9
 80092fa:	d804      	bhi.n	8009306 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 80092fc:	4b09      	ldr	r3, [pc, #36]	@ (8009324 <processHalfDMAbuffer+0x6c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	4b08      	ldr	r3, [pc, #32]	@ (8009324 <processHalfDMAbuffer+0x6c>)
 8009304:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8009306:	4b08      	ldr	r3, [pc, #32]	@ (8009328 <processHalfDMAbuffer+0x70>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8009310:	f000 f826 	bl	8009360 <calculateSPLQ31>
    }
}
 8009314:	46c0      	nop			@ (mov r8, r8)
 8009316:	46bd      	mov	sp, r7
 8009318:	b002      	add	sp, #8
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20001254 	.word	0x20001254
 8009320:	20001a54 	.word	0x20001a54
 8009324:	20001214 	.word	0x20001214
 8009328:	2000120e 	.word	0x2000120e

0800932c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009334:	4b07      	ldr	r3, [pc, #28]	@ (8009354 <HAL_I2S_ErrorCallback+0x28>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	429a      	cmp	r2, r3
 800933c:	d106      	bne.n	800934c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800933e:	4a06      	ldr	r2, [pc, #24]	@ (8009358 <HAL_I2S_ErrorCallback+0x2c>)
 8009340:	239f      	movs	r3, #159	@ 0x9f
 8009342:	0059      	lsls	r1, r3, #1
 8009344:	4b05      	ldr	r3, [pc, #20]	@ (800935c <HAL_I2S_ErrorCallback+0x30>)
 8009346:	0018      	movs	r0, r3
 8009348:	f001 fdb4 	bl	800aeb4 <errorHandler>
  }
}
 800934c:	46c0      	nop			@ (mov r8, r8)
 800934e:	46bd      	mov	sp, r7
 8009350:	b002      	add	sp, #8
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20001c58 	.word	0x20001c58
 8009358:	0801ec6c 	.word	0x0801ec6c
 800935c:	0801f288 	.word	0x0801f288

08009360 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	b0b3      	sub	sp, #204	@ 0xcc
 8009364:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8009366:	4ae2      	ldr	r2, [pc, #904]	@ (80096f0 <calculateSPLQ31+0x390>)
 8009368:	2338      	movs	r3, #56	@ 0x38
 800936a:	2030      	movs	r0, #48	@ 0x30
 800936c:	181b      	adds	r3, r3, r0
 800936e:	19d9      	adds	r1, r3, r7
 8009370:	2334      	movs	r3, #52	@ 0x34
 8009372:	181b      	adds	r3, r3, r0
 8009374:	19d8      	adds	r0, r3, r7
 8009376:	2380      	movs	r3, #128	@ 0x80
 8009378:	f000 fc36 	bl	8009be8 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800937c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800937e:	2b00      	cmp	r3, #0
 8009380:	da00      	bge.n	8009384 <calculateSPLQ31+0x24>
 8009382:	3301      	adds	r3, #1
 8009384:	105b      	asrs	r3, r3, #1
 8009386:	001a      	movs	r2, r3
 8009388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800938a:	2b00      	cmp	r3, #0
 800938c:	da00      	bge.n	8009390 <calculateSPLQ31+0x30>
 800938e:	3301      	adds	r3, #1
 8009390:	105b      	asrs	r3, r3, #1
 8009392:	18d3      	adds	r3, r2, r3
 8009394:	2188      	movs	r1, #136	@ 0x88
 8009396:	187a      	adds	r2, r7, r1
 8009398:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800939a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800939c:	187b      	adds	r3, r7, r1
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	3304      	adds	r3, #4
 80093a4:	2284      	movs	r2, #132	@ 0x84
 80093a6:	18b9      	adds	r1, r7, r2
 80093a8:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 80093aa:	18bb      	adds	r3, r7, r2
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4ad1      	ldr	r2, [pc, #836]	@ (80096f4 <calculateSPLQ31+0x394>)
 80093b0:	0019      	movs	r1, r3
 80093b2:	0010      	movs	r0, r2
 80093b4:	f000 fc58 	bl	8009c68 <getPo2factor>
 80093b8:	0003      	movs	r3, r0
 80093ba:	2280      	movs	r2, #128	@ 0x80
 80093bc:	18ba      	adds	r2, r7, r2
 80093be:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	2284      	movs	r2, #132	@ 0x84
 80093c4:	2130      	movs	r1, #48	@ 0x30
 80093c6:	1852      	adds	r2, r2, r1
 80093c8:	19d2      	adds	r2, r2, r7
 80093ca:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 80093cc:	2300      	movs	r3, #0
 80093ce:	2280      	movs	r2, #128	@ 0x80
 80093d0:	1852      	adds	r2, r2, r1
 80093d2:	19d2      	adds	r2, r2, r7
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	e032      	b.n	800943e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 80093d8:	4ac5      	ldr	r2, [pc, #788]	@ (80096f0 <calculateSPLQ31+0x390>)
 80093da:	2680      	movs	r6, #128	@ 0x80
 80093dc:	2330      	movs	r3, #48	@ 0x30
 80093de:	18f1      	adds	r1, r6, r3
 80093e0:	19cb      	adds	r3, r1, r7
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	589a      	ldr	r2, [r3, r2]
 80093e8:	2188      	movs	r1, #136	@ 0x88
 80093ea:	1879      	adds	r1, r7, r1
 80093ec:	680b      	ldr	r3, [r1, #0]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	2180      	movs	r1, #128	@ 0x80
 80093f2:	1879      	adds	r1, r7, r1
 80093f4:	680b      	ldr	r3, [r1, #0]
 80093f6:	409a      	lsls	r2, r3
 80093f8:	0011      	movs	r1, r2
 80093fa:	4abf      	ldr	r2, [pc, #764]	@ (80096f8 <calculateSPLQ31+0x398>)
 80093fc:	2084      	movs	r0, #132	@ 0x84
 80093fe:	2330      	movs	r3, #48	@ 0x30
 8009400:	18c3      	adds	r3, r0, r3
 8009402:	19db      	adds	r3, r3, r7
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800940a:	2230      	movs	r2, #48	@ 0x30
 800940c:	1883      	adds	r3, r0, r2
 800940e:	19db      	adds	r3, r3, r7
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3301      	adds	r3, #1
 8009414:	49b8      	ldr	r1, [pc, #736]	@ (80096f8 <calculateSPLQ31+0x398>)
 8009416:	009a      	lsls	r2, r3, #2
 8009418:	2300      	movs	r3, #0
 800941a:	5053      	str	r3, [r2, r1]
        count += 2;
 800941c:	2230      	movs	r2, #48	@ 0x30
 800941e:	1883      	adds	r3, r0, r2
 8009420:	19db      	adds	r3, r3, r7
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3302      	adds	r3, #2
 8009426:	0011      	movs	r1, r2
 8009428:	1882      	adds	r2, r0, r2
 800942a:	19d2      	adds	r2, r2, r7
 800942c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800942e:	000a      	movs	r2, r1
 8009430:	18b3      	adds	r3, r6, r2
 8009432:	19db      	adds	r3, r3, r7
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3301      	adds	r3, #1
 8009438:	18b2      	adds	r2, r6, r2
 800943a:	19d2      	adds	r2, r2, r7
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	2380      	movs	r3, #128	@ 0x80
 8009440:	2630      	movs	r6, #48	@ 0x30
 8009442:	199b      	adds	r3, r3, r6
 8009444:	19db      	adds	r3, r3, r7
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b7f      	cmp	r3, #127	@ 0x7f
 800944a:	d9c5      	bls.n	80093d8 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800944c:	4bab      	ldr	r3, [pc, #684]	@ (80096fc <calculateSPLQ31+0x39c>)
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	49a9      	ldr	r1, [pc, #676]	@ (80096f8 <calculateSPLQ31+0x398>)
 8009452:	2301      	movs	r3, #1
 8009454:	2200      	movs	r2, #0
 8009456:	f00f fc3b 	bl	8018cd0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800945a:	4aa9      	ldr	r2, [pc, #676]	@ (8009700 <calculateSPLQ31+0x3a0>)
 800945c:	2338      	movs	r3, #56	@ 0x38
 800945e:	199b      	adds	r3, r3, r6
 8009460:	19d9      	adds	r1, r3, r7
 8009462:	2334      	movs	r3, #52	@ 0x34
 8009464:	199b      	adds	r3, r3, r6
 8009466:	19d8      	adds	r0, r3, r7
 8009468:	237e      	movs	r3, #126	@ 0x7e
 800946a:	f000 fbbd 	bl	8009be8 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800946e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009470:	2380      	movs	r3, #128	@ 0x80
 8009472:	061b      	lsls	r3, r3, #24
 8009474:	429a      	cmp	r2, r3
 8009476:	d101      	bne.n	800947c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8009478:	4b9e      	ldr	r3, [pc, #632]	@ (80096f4 <calculateSPLQ31+0x394>)
 800947a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800947c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800947e:	2380      	movs	r3, #128	@ 0x80
 8009480:	061b      	lsls	r3, r3, #24
 8009482:	429a      	cmp	r2, r3
 8009484:	d101      	bne.n	800948a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8009486:	4b9b      	ldr	r3, [pc, #620]	@ (80096f4 <calculateSPLQ31+0x394>)
 8009488:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800948a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800948c:	17da      	asrs	r2, r3, #31
 800948e:	189b      	adds	r3, r3, r2
 8009490:	4053      	eors	r3, r2
 8009492:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8009494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009496:	17da      	asrs	r2, r3, #31
 8009498:	189b      	adds	r3, r3, r2
 800949a:	4053      	eors	r3, r2
 800949c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800949e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094a2:	429a      	cmp	r2, r3
 80094a4:	dd01      	ble.n	80094aa <calculateSPLQ31+0x14a>
    {
        max = min;
 80094a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 80094aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094ac:	3304      	adds	r3, #4
 80094ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 80094b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094b2:	4a90      	ldr	r2, [pc, #576]	@ (80096f4 <calculateSPLQ31+0x394>)
 80094b4:	0019      	movs	r1, r3
 80094b6:	0010      	movs	r0, r2
 80094b8:	f000 fbd6 	bl	8009c68 <getPo2factor>
 80094bc:	0003      	movs	r3, r0
 80094be:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 80094c0:	2302      	movs	r3, #2
 80094c2:	22ac      	movs	r2, #172	@ 0xac
 80094c4:	18ba      	adds	r2, r7, r2
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	e012      	b.n	80094f0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 80094ca:	4a8b      	ldr	r2, [pc, #556]	@ (80096f8 <calculateSPLQ31+0x398>)
 80094cc:	20ac      	movs	r0, #172	@ 0xac
 80094ce:	183b      	adds	r3, r7, r0
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	589a      	ldr	r2, [r3, r2]
 80094d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094d8:	409a      	lsls	r2, r3
 80094da:	0011      	movs	r1, r2
 80094dc:	4a86      	ldr	r2, [pc, #536]	@ (80096f8 <calculateSPLQ31+0x398>)
 80094de:	183b      	adds	r3, r7, r0
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 80094e6:	183b      	adds	r3, r7, r0
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	183a      	adds	r2, r7, r0
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	23ac      	movs	r3, #172	@ 0xac
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80094f8:	d9e7      	bls.n	80094ca <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 80094fa:	4b7d      	ldr	r3, [pc, #500]	@ (80096f0 <calculateSPLQ31+0x390>)
 80094fc:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 80094fe:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009500:	4b7d      	ldr	r3, [pc, #500]	@ (80096f8 <calculateSPLQ31+0x398>)
 8009502:	2240      	movs	r2, #64	@ 0x40
 8009504:	0018      	movs	r0, r3
 8009506:	f010 f98d 	bl	8019824 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800950a:	2330      	movs	r3, #48	@ 0x30
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	0018      	movs	r0, r3
 8009510:	2330      	movs	r3, #48	@ 0x30
 8009512:	001a      	movs	r2, r3
 8009514:	2100      	movs	r1, #0
 8009516:	f011 fe0d 	bl	801b134 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800951a:	2200      	movs	r2, #0
 800951c:	2300      	movs	r3, #0
 800951e:	21a0      	movs	r1, #160	@ 0xa0
 8009520:	1879      	adds	r1, r7, r1
 8009522:	600a      	str	r2, [r1, #0]
 8009524:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009526:	2301      	movs	r3, #1
 8009528:	229c      	movs	r2, #156	@ 0x9c
 800952a:	18ba      	adds	r2, r7, r2
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	e05b      	b.n	80095e8 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8009530:	269c      	movs	r6, #156	@ 0x9c
 8009532:	19bb      	adds	r3, r7, r6
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	009a      	lsls	r2, r3, #2
 8009538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800953a:	189b      	adds	r3, r3, r2
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	17db      	asrs	r3, r3, #31
 8009542:	617b      	str	r3, [r7, #20]
 8009544:	4b6f      	ldr	r3, [pc, #444]	@ (8009704 <calculateSPLQ31+0x3a4>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	19bb      	adds	r3, r7, r6
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	18d3      	adds	r3, r2, r3
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	60bb      	str	r3, [r7, #8]
 8009554:	2300      	movs	r3, #0
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6938      	ldr	r0, [r7, #16]
 800955e:	6979      	ldr	r1, [r7, #20]
 8009560:	f7f7 f824 	bl	80005ac <__aeabi_lmul>
 8009564:	0002      	movs	r2, r0
 8009566:	000b      	movs	r3, r1
 8009568:	0010      	movs	r0, r2
 800956a:	0019      	movs	r1, r3
 800956c:	23a0      	movs	r3, #160	@ 0xa0
 800956e:	18fa      	adds	r2, r7, r3
 8009570:	6853      	ldr	r3, [r2, #4]
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	1812      	adds	r2, r2, r0
 8009576:	414b      	adcs	r3, r1
 8009578:	21a0      	movs	r1, #160	@ 0xa0
 800957a:	1879      	adds	r1, r7, r1
 800957c:	600a      	str	r2, [r1, #0]
 800957e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8009580:	4b61      	ldr	r3, [pc, #388]	@ (8009708 <calculateSPLQ31+0x3a8>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	19bb      	adds	r3, r7, r6
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	18d3      	adds	r3, r2, r3
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b06      	cmp	r3, #6
 800958e:	d025      	beq.n	80095dc <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8009590:	4b5d      	ldr	r3, [pc, #372]	@ (8009708 <calculateSPLQ31+0x3a8>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	19bb      	adds	r3, r7, r6
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	18d3      	adds	r3, r2, r3
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2230      	movs	r2, #48	@ 0x30
 800959e:	18ba      	adds	r2, r7, r2
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	18d3      	adds	r3, r2, r3
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	6859      	ldr	r1, [r3, #4]
 80095a8:	19bb      	adds	r3, r7, r6
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	009a      	lsls	r2, r3, #2
 80095ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095b0:	189b      	adds	r3, r3, r2
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	603b      	str	r3, [r7, #0]
 80095b6:	17db      	asrs	r3, r3, #31
 80095b8:	607b      	str	r3, [r7, #4]
 80095ba:	4b53      	ldr	r3, [pc, #332]	@ (8009708 <calculateSPLQ31+0x3a8>)
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	19be      	adds	r6, r7, r6
 80095c0:	6833      	ldr	r3, [r6, #0]
 80095c2:	18d3      	adds	r3, r2, r3
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	001e      	movs	r6, r3
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	1880      	adds	r0, r0, r2
 80095ce:	4159      	adcs	r1, r3
 80095d0:	2330      	movs	r3, #48	@ 0x30
 80095d2:	18fa      	adds	r2, r7, r3
 80095d4:	00f3      	lsls	r3, r6, #3
 80095d6:	18d3      	adds	r3, r2, r3
 80095d8:	6018      	str	r0, [r3, #0]
 80095da:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 80095dc:	229c      	movs	r2, #156	@ 0x9c
 80095de:	18bb      	adds	r3, r7, r2
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3301      	adds	r3, #1
 80095e4:	18ba      	adds	r2, r7, r2
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	239c      	movs	r3, #156	@ 0x9c
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80095f0:	d99e      	bls.n	8009530 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 80095f2:	2380      	movs	r3, #128	@ 0x80
 80095f4:	18fb      	adds	r3, r7, r3
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	001a      	movs	r2, r3
 80095fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	18d3      	adds	r3, r2, r3
 8009602:	3b22      	subs	r3, #34	@ 0x22
 8009604:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8009606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009608:	17da      	asrs	r2, r3, #31
 800960a:	189b      	adds	r3, r3, r2
 800960c:	4053      	eors	r3, r2
 800960e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8009610:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009612:	2b00      	cmp	r3, #0
 8009614:	da62      	bge.n	80096dc <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8009616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009618:	3b20      	subs	r3, #32
 800961a:	2b00      	cmp	r3, #0
 800961c:	db05      	blt.n	800962a <calculateSPLQ31+0x2ca>
 800961e:	22a0      	movs	r2, #160	@ 0xa0
 8009620:	18ba      	adds	r2, r7, r2
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	409a      	lsls	r2, r3
 8009626:	627a      	str	r2, [r7, #36]	@ 0x24
 8009628:	e010      	b.n	800964c <calculateSPLQ31+0x2ec>
 800962a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800962c:	2220      	movs	r2, #32
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	22a0      	movs	r2, #160	@ 0xa0
 8009632:	18ba      	adds	r2, r7, r2
 8009634:	6812      	ldr	r2, [r2, #0]
 8009636:	40da      	lsrs	r2, r3
 8009638:	0013      	movs	r3, r2
 800963a:	22a4      	movs	r2, #164	@ 0xa4
 800963c:	18ba      	adds	r2, r7, r2
 800963e:	6811      	ldr	r1, [r2, #0]
 8009640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009642:	4091      	lsls	r1, r2
 8009644:	6279      	str	r1, [r7, #36]	@ 0x24
 8009646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009648:	431a      	orrs	r2, r3
 800964a:	627a      	str	r2, [r7, #36]	@ 0x24
 800964c:	21a0      	movs	r1, #160	@ 0xa0
 800964e:	187b      	adds	r3, r7, r1
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009654:	409a      	lsls	r2, r3
 8009656:	623a      	str	r2, [r7, #32]
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800965c:	187a      	adds	r2, r7, r1
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009662:	2300      	movs	r3, #0
 8009664:	2298      	movs	r2, #152	@ 0x98
 8009666:	18ba      	adds	r2, r7, r2
 8009668:	6013      	str	r3, [r2, #0]
 800966a:	e031      	b.n	80096d0 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800966c:	2330      	movs	r3, #48	@ 0x30
 800966e:	18fa      	adds	r2, r7, r3
 8009670:	2398      	movs	r3, #152	@ 0x98
 8009672:	18fb      	adds	r3, r7, r3
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	18d3      	adds	r3, r2, r3
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009680:	3920      	subs	r1, #32
 8009682:	2900      	cmp	r1, #0
 8009684:	db03      	blt.n	800968e <calculateSPLQ31+0x32e>
 8009686:	0010      	movs	r0, r2
 8009688:	4088      	lsls	r0, r1
 800968a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800968c:	e00c      	b.n	80096a8 <calculateSPLQ31+0x348>
 800968e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009690:	2020      	movs	r0, #32
 8009692:	1a41      	subs	r1, r0, r1
 8009694:	0010      	movs	r0, r2
 8009696:	40c8      	lsrs	r0, r1
 8009698:	0001      	movs	r1, r0
 800969a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800969c:	001c      	movs	r4, r3
 800969e:	4084      	lsls	r4, r0
 80096a0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80096a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096a4:	4308      	orrs	r0, r1
 80096a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80096a8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80096aa:	0013      	movs	r3, r2
 80096ac:	408b      	lsls	r3, r1
 80096ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096b0:	2330      	movs	r3, #48	@ 0x30
 80096b2:	18fa      	adds	r2, r7, r3
 80096b4:	2098      	movs	r0, #152	@ 0x98
 80096b6:	183b      	adds	r3, r7, r0
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	18d3      	adds	r3, r2, r3
 80096be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096c2:	6019      	str	r1, [r3, #0]
 80096c4:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80096c6:	183b      	adds	r3, r7, r0
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3301      	adds	r3, #1
 80096cc:	183a      	adds	r2, r7, r0
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	2398      	movs	r3, #152	@ 0x98
 80096d2:	18fb      	adds	r3, r7, r3
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b05      	cmp	r3, #5
 80096d8:	d9c8      	bls.n	800966c <calculateSPLQ31+0x30c>
 80096da:	e06b      	b.n	80097b4 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 80096dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096de:	3b20      	subs	r3, #32
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	db13      	blt.n	800970c <calculateSPLQ31+0x3ac>
 80096e4:	22a4      	movs	r2, #164	@ 0xa4
 80096e6:	18ba      	adds	r2, r7, r2
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	40da      	lsrs	r2, r3
 80096ec:	61ba      	str	r2, [r7, #24]
 80096ee:	e01e      	b.n	800972e <calculateSPLQ31+0x3ce>
 80096f0:	20001a54 	.word	0x20001a54
 80096f4:	7fffffff 	.word	0x7fffffff
 80096f8:	20001ca0 	.word	0x20001ca0
 80096fc:	20000058 	.word	0x20000058
 8009700:	20001ca8 	.word	0x20001ca8
 8009704:	2000005c 	.word	0x2000005c
 8009708:	20000068 	.word	0x20000068
 800970c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800970e:	2220      	movs	r2, #32
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	22a4      	movs	r2, #164	@ 0xa4
 8009714:	18ba      	adds	r2, r7, r2
 8009716:	6812      	ldr	r2, [r2, #0]
 8009718:	409a      	lsls	r2, r3
 800971a:	0013      	movs	r3, r2
 800971c:	22a0      	movs	r2, #160	@ 0xa0
 800971e:	18ba      	adds	r2, r7, r2
 8009720:	6811      	ldr	r1, [r2, #0]
 8009722:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009724:	40d1      	lsrs	r1, r2
 8009726:	61b9      	str	r1, [r7, #24]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	431a      	orrs	r2, r3
 800972c:	61ba      	str	r2, [r7, #24]
 800972e:	23a4      	movs	r3, #164	@ 0xa4
 8009730:	18fb      	adds	r3, r7, r3
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009736:	40da      	lsrs	r2, r3
 8009738:	61fa      	str	r2, [r7, #28]
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	21a0      	movs	r1, #160	@ 0xa0
 8009740:	1879      	adds	r1, r7, r1
 8009742:	600a      	str	r2, [r1, #0]
 8009744:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009746:	2300      	movs	r3, #0
 8009748:	2294      	movs	r2, #148	@ 0x94
 800974a:	18ba      	adds	r2, r7, r2
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	e02c      	b.n	80097aa <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8009750:	2330      	movs	r3, #48	@ 0x30
 8009752:	18fa      	adds	r2, r7, r3
 8009754:	2394      	movs	r3, #148	@ 0x94
 8009756:	18fb      	adds	r3, r7, r3
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	00db      	lsls	r3, r3, #3
 800975c:	18d3      	adds	r3, r2, r3
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009764:	3920      	subs	r1, #32
 8009766:	2900      	cmp	r1, #0
 8009768:	db03      	blt.n	8009772 <calculateSPLQ31+0x412>
 800976a:	0018      	movs	r0, r3
 800976c:	40c8      	lsrs	r0, r1
 800976e:	0004      	movs	r4, r0
 8009770:	e00a      	b.n	8009788 <calculateSPLQ31+0x428>
 8009772:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009774:	2020      	movs	r0, #32
 8009776:	1a41      	subs	r1, r0, r1
 8009778:	0018      	movs	r0, r3
 800977a:	4088      	lsls	r0, r1
 800977c:	0001      	movs	r1, r0
 800977e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009780:	0016      	movs	r6, r2
 8009782:	40c6      	lsrs	r6, r0
 8009784:	0034      	movs	r4, r6
 8009786:	430c      	orrs	r4, r1
 8009788:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800978a:	40cb      	lsrs	r3, r1
 800978c:	001d      	movs	r5, r3
 800978e:	2330      	movs	r3, #48	@ 0x30
 8009790:	18fa      	adds	r2, r7, r3
 8009792:	2194      	movs	r1, #148	@ 0x94
 8009794:	187b      	adds	r3, r7, r1
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	18d3      	adds	r3, r2, r3
 800979c:	601c      	str	r4, [r3, #0]
 800979e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	187a      	adds	r2, r7, r1
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	2394      	movs	r3, #148	@ 0x94
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b05      	cmp	r3, #5
 80097b2:	d9cd      	bls.n	8009750 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 80097b4:	230f      	movs	r3, #15
 80097b6:	425d      	negs	r5, r3
 80097b8:	2305      	movs	r3, #5
 80097ba:	425e      	negs	r6, r3
 80097bc:	4b4a      	ldr	r3, [pc, #296]	@ (80098e8 <calculateSPLQ31+0x588>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b4a      	ldr	r3, [pc, #296]	@ (80098ec <calculateSPLQ31+0x58c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	21a0      	movs	r1, #160	@ 0xa0
 80097ca:	1879      	adds	r1, r7, r1
 80097cc:	6808      	ldr	r0, [r1, #0]
 80097ce:	6849      	ldr	r1, [r1, #4]
 80097d0:	4c47      	ldr	r4, [pc, #284]	@ (80098f0 <calculateSPLQ31+0x590>)
 80097d2:	9403      	str	r4, [sp, #12]
 80097d4:	4c47      	ldr	r4, [pc, #284]	@ (80098f4 <calculateSPLQ31+0x594>)
 80097d6:	9402      	str	r4, [sp, #8]
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	9200      	str	r2, [sp, #0]
 80097dc:	0033      	movs	r3, r6
 80097de:	002a      	movs	r2, r5
 80097e0:	f000 fa86 	bl	8009cf0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80097e4:	2300      	movs	r3, #0
 80097e6:	2290      	movs	r2, #144	@ 0x90
 80097e8:	18ba      	adds	r2, r7, r2
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	e026      	b.n	800983c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 80097ee:	2330      	movs	r3, #48	@ 0x30
 80097f0:	18fa      	adds	r2, r7, r3
 80097f2:	2490      	movs	r4, #144	@ 0x90
 80097f4:	193b      	adds	r3, r7, r4
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	18d3      	adds	r3, r2, r3
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	6859      	ldr	r1, [r3, #4]
 8009800:	230f      	movs	r3, #15
 8009802:	425d      	negs	r5, r3
 8009804:	2305      	movs	r3, #5
 8009806:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8009808:	193b      	adds	r3, r7, r4
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	009a      	lsls	r2, r3, #2
 800980e:	4b3a      	ldr	r3, [pc, #232]	@ (80098f8 <calculateSPLQ31+0x598>)
 8009810:	18d3      	adds	r3, r2, r3
 8009812:	193a      	adds	r2, r7, r4
 8009814:	6812      	ldr	r2, [r2, #0]
 8009816:	0094      	lsls	r4, r2, #2
 8009818:	4a38      	ldr	r2, [pc, #224]	@ (80098fc <calculateSPLQ31+0x59c>)
 800981a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800981c:	9203      	str	r2, [sp, #12]
 800981e:	9302      	str	r3, [sp, #8]
 8009820:	2300      	movs	r3, #0
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	2300      	movs	r3, #0
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	0033      	movs	r3, r6
 800982a:	002a      	movs	r2, r5
 800982c:	f000 fa60 	bl	8009cf0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8009830:	2490      	movs	r4, #144	@ 0x90
 8009832:	193b      	adds	r3, r7, r4
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3301      	adds	r3, #1
 8009838:	193a      	adds	r2, r7, r4
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	2390      	movs	r3, #144	@ 0x90
 800983e:	18fb      	adds	r3, r7, r3
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b05      	cmp	r3, #5
 8009844:	d9d3      	bls.n	80097ee <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8009846:	4b2b      	ldr	r3, [pc, #172]	@ (80098f4 <calculateSPLQ31+0x594>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	4b2d      	ldr	r3, [pc, #180]	@ (8009900 <calculateSPLQ31+0x5a0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	18d2      	adds	r2, r2, r3
 8009850:	4b2b      	ldr	r3, [pc, #172]	@ (8009900 <calculateSPLQ31+0x5a0>)
 8009852:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8009854:	4b26      	ldr	r3, [pc, #152]	@ (80098f0 <calculateSPLQ31+0x590>)
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	4b2a      	ldr	r3, [pc, #168]	@ (8009904 <calculateSPLQ31+0x5a4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	18d2      	adds	r2, r2, r3
 800985e:	4b29      	ldr	r3, [pc, #164]	@ (8009904 <calculateSPLQ31+0x5a4>)
 8009860:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009862:	2300      	movs	r3, #0
 8009864:	228c      	movs	r2, #140	@ 0x8c
 8009866:	18ba      	adds	r2, r7, r2
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	e025      	b.n	80098b8 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800986c:	4b22      	ldr	r3, [pc, #136]	@ (80098f8 <calculateSPLQ31+0x598>)
 800986e:	208c      	movs	r0, #140	@ 0x8c
 8009870:	183a      	adds	r2, r7, r0
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	0092      	lsls	r2, r2, #2
 8009876:	58d2      	ldr	r2, [r2, r3]
 8009878:	4b23      	ldr	r3, [pc, #140]	@ (8009908 <calculateSPLQ31+0x5a8>)
 800987a:	1839      	adds	r1, r7, r0
 800987c:	6809      	ldr	r1, [r1, #0]
 800987e:	0089      	lsls	r1, r1, #2
 8009880:	58cb      	ldr	r3, [r1, r3]
 8009882:	18d1      	adds	r1, r2, r3
 8009884:	4b20      	ldr	r3, [pc, #128]	@ (8009908 <calculateSPLQ31+0x5a8>)
 8009886:	183a      	adds	r2, r7, r0
 8009888:	6812      	ldr	r2, [r2, #0]
 800988a:	0092      	lsls	r2, r2, #2
 800988c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800988e:	4b1b      	ldr	r3, [pc, #108]	@ (80098fc <calculateSPLQ31+0x59c>)
 8009890:	183a      	adds	r2, r7, r0
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	0092      	lsls	r2, r2, #2
 8009896:	58d2      	ldr	r2, [r2, r3]
 8009898:	4b1c      	ldr	r3, [pc, #112]	@ (800990c <calculateSPLQ31+0x5ac>)
 800989a:	1839      	adds	r1, r7, r0
 800989c:	6809      	ldr	r1, [r1, #0]
 800989e:	0089      	lsls	r1, r1, #2
 80098a0:	58cb      	ldr	r3, [r1, r3]
 80098a2:	18d1      	adds	r1, r2, r3
 80098a4:	4b19      	ldr	r3, [pc, #100]	@ (800990c <calculateSPLQ31+0x5ac>)
 80098a6:	183a      	adds	r2, r7, r0
 80098a8:	6812      	ldr	r2, [r2, #0]
 80098aa:	0092      	lsls	r2, r2, #2
 80098ac:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80098ae:	183b      	adds	r3, r7, r0
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3301      	adds	r3, #1
 80098b4:	183a      	adds	r2, r7, r0
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	238c      	movs	r3, #140	@ 0x8c
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d9d4      	bls.n	800986c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 80098c2:	4b13      	ldr	r3, [pc, #76]	@ (8009910 <calculateSPLQ31+0x5b0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	4b11      	ldr	r3, [pc, #68]	@ (8009910 <calculateSPLQ31+0x5b0>)
 80098ca:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 80098cc:	4b10      	ldr	r3, [pc, #64]	@ (8009910 <calculateSPLQ31+0x5b0>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b0f      	cmp	r3, #15
 80098d2:	d905      	bls.n	80098e0 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 80098d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009914 <calculateSPLQ31+0x5b4>)
 80098d6:	2201      	movs	r2, #1
 80098d8:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80098da:	4b0f      	ldr	r3, [pc, #60]	@ (8009918 <calculateSPLQ31+0x5b8>)
 80098dc:	2200      	movs	r2, #0
 80098de:	701a      	strb	r2, [r3, #0]
    }
}
 80098e0:	46c0      	nop			@ (mov r8, r8)
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b02f      	add	sp, #188	@ 0xbc
 80098e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e8:	20000060 	.word	0x20000060
 80098ec:	20000064 	.word	0x20000064
 80098f0:	20001220 	.word	0x20001220
 80098f4:	2000121c 	.word	0x2000121c
 80098f8:	20001224 	.word	0x20001224
 80098fc:	2000123c 	.word	0x2000123c
 8009900:	20001c64 	.word	0x20001c64
 8009904:	20001c68 	.word	0x20001c68
 8009908:	20001c6c 	.word	0x20001c6c
 800990c:	20001c84 	.word	0x20001c84
 8009910:	20001c9c 	.word	0x20001c9c
 8009914:	20001210 	.word	0x20001210
 8009918:	2000120e 	.word	0x2000120e

0800991c <resetSPLstate>:

static void resetSPLstate(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8009922:	4b11      	ldr	r3, [pc, #68]	@ (8009968 <resetSPLstate+0x4c>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8009928:	4b10      	ldr	r3, [pc, #64]	@ (800996c <resetSPLstate+0x50>)
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800992e:	4b10      	ldr	r3, [pc, #64]	@ (8009970 <resetSPLstate+0x54>)
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8009934:	2300      	movs	r3, #0
 8009936:	607b      	str	r3, [r7, #4]
 8009938:	e00c      	b.n	8009954 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800993a:	4b0e      	ldr	r3, [pc, #56]	@ (8009974 <resetSPLstate+0x58>)
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	0092      	lsls	r2, r2, #2
 8009940:	2100      	movs	r1, #0
 8009942:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8009944:	4b0c      	ldr	r3, [pc, #48]	@ (8009978 <resetSPLstate+0x5c>)
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	0092      	lsls	r2, r2, #2
 800994a:	2100      	movs	r1, #0
 800994c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3301      	adds	r3, #1
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b05      	cmp	r3, #5
 8009958:	d9ef      	bls.n	800993a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800995a:	4b08      	ldr	r3, [pc, #32]	@ (800997c <resetSPLstate+0x60>)
 800995c:	2200      	movs	r2, #0
 800995e:	701a      	strb	r2, [r3, #0]
}
 8009960:	46c0      	nop			@ (mov r8, r8)
 8009962:	46bd      	mov	sp, r7
 8009964:	b002      	add	sp, #8
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20001c64 	.word	0x20001c64
 800996c:	20001c68 	.word	0x20001c68
 8009970:	20001c9c 	.word	0x20001c9c
 8009974:	20001c6c 	.word	0x20001c6c
 8009978:	20001c84 	.word	0x20001c84
 800997c:	20001210 	.word	0x20001210

08009980 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8009980:	b5b0      	push	{r4, r5, r7, lr}
 8009982:	b090      	sub	sp, #64	@ 0x40
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	0019      	movs	r1, r3
 800998c:	1dfb      	adds	r3, r7, #7
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	1dbb      	adds	r3, r7, #6
 8009992:	1c0a      	adds	r2, r1, #0
 8009994:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8009996:	1dfb      	adds	r3, r7, #7
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800999e:	4b3b      	ldr	r3, [pc, #236]	@ (8009a8c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80099a4:	4b3a      	ldr	r3, [pc, #232]	@ (8009a90 <getFilteredMaxAmplitudeQ31+0x110>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80099b2:	2305      	movs	r3, #5
 80099b4:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ba:	e040      	b.n	8009a3e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 80099bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	18d3      	adds	r3, r2, r3
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	409a      	lsls	r2, r3
 80099ca:	0013      	movs	r3, r2
 80099cc:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 80099ce:	4b30      	ldr	r3, [pc, #192]	@ (8009a90 <getFilteredMaxAmplitudeQ31+0x110>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	425a      	negs	r2, r3
 80099d4:	4b2e      	ldr	r3, [pc, #184]	@ (8009a90 <getFilteredMaxAmplitudeQ31+0x110>)
 80099d6:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 80099d8:	2418      	movs	r4, #24
 80099da:	193a      	adds	r2, r7, r4
 80099dc:	492c      	ldr	r1, [pc, #176]	@ (8009a90 <getFilteredMaxAmplitudeQ31+0x110>)
 80099de:	231c      	movs	r3, #28
 80099e0:	18f8      	adds	r0, r7, r3
 80099e2:	2301      	movs	r3, #1
 80099e4:	f00f ff76 	bl	80198d4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 80099e8:	2514      	movs	r5, #20
 80099ea:	197a      	adds	r2, r7, r5
 80099ec:	1939      	adds	r1, r7, r4
 80099ee:	4829      	ldr	r0, [pc, #164]	@ (8009a94 <getFilteredMaxAmplitudeQ31+0x114>)
 80099f0:	2301      	movs	r3, #1
 80099f2:	f00f ff3d 	bl	8019870 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 80099f6:	2410      	movs	r4, #16
 80099f8:	193a      	adds	r2, r7, r4
 80099fa:	4924      	ldr	r1, [pc, #144]	@ (8009a8c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099fc:	4826      	ldr	r0, [pc, #152]	@ (8009a98 <getFilteredMaxAmplitudeQ31+0x118>)
 80099fe:	2301      	movs	r3, #1
 8009a00:	f00f ff36 	bl	8019870 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8009a04:	4a21      	ldr	r2, [pc, #132]	@ (8009a8c <getFilteredMaxAmplitudeQ31+0x10c>)
 8009a06:	1939      	adds	r1, r7, r4
 8009a08:	1978      	adds	r0, r7, r5
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f00f ff62 	bl	80198d4 <arm_add_q31>

        lastData = fx;
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	4b1f      	ldr	r3, [pc, #124]	@ (8009a90 <getFilteredMaxAmplitudeQ31+0x110>)
 8009a14:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8009a16:	4b1d      	ldr	r3, [pc, #116]	@ (8009a8c <getFilteredMaxAmplitudeQ31+0x10c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	da03      	bge.n	8009a28 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8009a20:	4b1a      	ldr	r3, [pc, #104]	@ (8009a8c <getFilteredMaxAmplitudeQ31+0x10c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a26:	e007      	b.n	8009a38 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8009a28:	4b18      	ldr	r3, [pc, #96]	@ (8009a8c <getFilteredMaxAmplitudeQ31+0x10c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	dd02      	ble.n	8009a38 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8009a32:	4b16      	ldr	r3, [pc, #88]	@ (8009a8c <getFilteredMaxAmplitudeQ31+0x10c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8009a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d3ba      	bcc.n	80099bc <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8009a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a48:	17da      	asrs	r2, r3, #31
 8009a4a:	189b      	adds	r3, r3, r2
 8009a4c:	4053      	eors	r3, r2
 8009a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8009a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8009a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d200      	bcs.n	8009a5e <getFilteredMaxAmplitudeQ31+0xde>
 8009a5c:	0013      	movs	r3, r2
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 8009a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a64:	40da      	lsrs	r2, r3
 8009a66:	0013      	movs	r3, r2
 8009a68:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8009a6a:	1dbb      	adds	r3, r7, #6
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d007      	beq.n	8009a82 <getFilteredMaxAmplitudeQ31+0x102>
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <getFilteredMaxAmplitudeQ31+0x11c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6a3a      	ldr	r2, [r7, #32]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d902      	bls.n	8009a82 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8009a7c:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <getFilteredMaxAmplitudeQ31+0x11c>)
 8009a7e:	6a3a      	ldr	r2, [r7, #32]
 8009a80:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 8009a82:	6a3b      	ldr	r3, [r7, #32]
}
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b010      	add	sp, #64	@ 0x40
 8009a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a8c:	200020a0 	.word	0x200020a0
 8009a90:	200020a4 	.word	0x200020a4
 8009a94:	0801f280 	.word	0x0801f280
 8009a98:	0801f284 	.word	0x0801f284
 8009a9c:	20001218 	.word	0x20001218

08009aa0 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8009aac:	4913      	ldr	r1, [pc, #76]	@ (8009afc <floatToIntAndFrac2dp+0x5c>)
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7f7 fa6c 	bl	8000f8c <__aeabi_fmul>
 8009ab4:	1c03      	adds	r3, r0, #0
 8009ab6:	1c18      	adds	r0, r3, #0
 8009ab8:	f014 fa46 	bl	801df48 <roundf>
 8009abc:	1c03      	adds	r3, r0, #0
 8009abe:	1c18      	adds	r0, r3, #0
 8009ac0:	f7f6 fda2 	bl	8000608 <__aeabi_f2uiz>
 8009ac4:	0003      	movs	r3, r0
 8009ac6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2164      	movs	r1, #100	@ 0x64
 8009acc:	0018      	movs	r0, r3
 8009ace:	f7f6 fb5f 	bl	8000190 <__udivsi3>
 8009ad2:	0003      	movs	r3, r0
 8009ad4:	001a      	movs	r2, r3
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2164      	movs	r1, #100	@ 0x64
 8009ae6:	434b      	muls	r3, r1
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	701a      	strb	r2, [r3, #0]
}
 8009af2:	46c0      	nop			@ (mov r8, r8)
 8009af4:	46bd      	mov	sp, r7
 8009af6:	b006      	add	sp, #24
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	46c0      	nop			@ (mov r8, r8)
 8009afc:	42c80000 	.word	0x42c80000

08009b00 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8009b0c:	4914      	ldr	r1, [pc, #80]	@ (8009b60 <floatToIntAndFrac1dp+0x60>)
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7f7 fa3c 	bl	8000f8c <__aeabi_fmul>
 8009b14:	1c03      	adds	r3, r0, #0
 8009b16:	1c18      	adds	r0, r3, #0
 8009b18:	f014 fa16 	bl	801df48 <roundf>
 8009b1c:	1c03      	adds	r3, r0, #0
 8009b1e:	1c18      	adds	r0, r3, #0
 8009b20:	f7f6 fd72 	bl	8000608 <__aeabi_f2uiz>
 8009b24:	0003      	movs	r3, r0
 8009b26:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	210a      	movs	r1, #10
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f7f6 fb2f 	bl	8000190 <__udivsi3>
 8009b32:	0003      	movs	r3, r0
 8009b34:	001a      	movs	r2, r3
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	1c19      	adds	r1, r3, #0
 8009b46:	0089      	lsls	r1, r1, #2
 8009b48:	18cb      	adds	r3, r1, r3
 8009b4a:	18db      	adds	r3, r3, r3
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	701a      	strb	r2, [r3, #0]
}
 8009b56:	46c0      	nop			@ (mov r8, r8)
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	b006      	add	sp, #24
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	46c0      	nop			@ (mov r8, r8)
 8009b60:	41200000 	.word	0x41200000

08009b64 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7f7 fd22 	bl	80015bc <__aeabi_i2f>
 8009b78:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8009b7a:	6838      	ldr	r0, [r7, #0]
 8009b7c:	f7f7 fd1e 	bl	80015bc <__aeabi_i2f>
 8009b80:	1c03      	adds	r3, r0, #0
 8009b82:	4918      	ldr	r1, [pc, #96]	@ (8009be4 <sumToIntAverage+0x80>)
 8009b84:	1c18      	adds	r0, r3, #0
 8009b86:	f7f7 f81b 	bl	8000bc0 <__aeabi_fdiv>
 8009b8a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8009b8c:	1c19      	adds	r1, r3, #0
 8009b8e:	1c20      	adds	r0, r4, #0
 8009b90:	f7f6 fe8c 	bl	80008ac <__aeabi_fadd>
 8009b94:	1c03      	adds	r3, r0, #0
 8009b96:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8009b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b9a:	f7f7 fd5b 	bl	8001654 <__aeabi_ui2f>
 8009b9e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8009ba0:	1c19      	adds	r1, r3, #0
 8009ba2:	1c20      	adds	r0, r4, #0
 8009ba4:	f7f7 f80c 	bl	8000bc0 <__aeabi_fdiv>
 8009ba8:	1c03      	adds	r3, r0, #0
 8009baa:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	2310      	movs	r3, #16
 8009bb4:	18f9      	adds	r1, r7, r3
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	1c18      	adds	r0, r3, #0
 8009bba:	f7ff ffa1 	bl	8009b00 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2bff      	cmp	r3, #255	@ 0xff
 8009bc2:	d906      	bls.n	8009bd2 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	22ff      	movs	r2, #255	@ 0xff
 8009bc8:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2209      	movs	r2, #9
 8009bce:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8009bd0:	e003      	b.n	8009bda <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	701a      	strb	r2, [r3, #0]
}
 8009bda:	46c0      	nop			@ (mov r8, r8)
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	b007      	add	sp, #28
 8009be0:	bd90      	pop	{r4, r7, pc}
 8009be2:	46c0      	nop			@ (mov r8, r8)
 8009be4:	41200000 	.word	0x41200000

08009be8 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2280      	movs	r2, #128	@ 0x80
 8009bfa:	0612      	lsls	r2, r2, #24
 8009bfc:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4a18      	ldr	r2, [pc, #96]	@ (8009c64 <findMinMax+0x7c>)
 8009c02:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8009c04:	2300      	movs	r3, #0
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	e022      	b.n	8009c50 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	18d3      	adds	r3, r2, r3
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	da06      	bge.n	8009c2a <findMinMax+0x42>
        {
            min[0] = array[i];
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	18d3      	adds	r3, r2, r3
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	18d3      	adds	r3, r2, r3
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	dd06      	ble.n	8009c4a <findMinMax+0x62>
        {
            max[0] = array[i];
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	18d3      	adds	r3, r2, r3
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	617b      	str	r3, [r7, #20]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d3d8      	bcc.n	8009c0a <findMinMax+0x22>
        }
    }
}
 8009c58:	46c0      	nop			@ (mov r8, r8)
 8009c5a:	46c0      	nop			@ (mov r8, r8)
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	b006      	add	sp, #24
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	7fffffff 	.word	0x7fffffff

08009c68 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d302      	bcc.n	8009c84 <getPo2factor+0x1c>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d107      	bne.n	8009c94 <getPo2factor+0x2c>
    {
        return 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	e00d      	b.n	8009ca4 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	085b      	lsrs	r3, r3, #1
 8009c8c:	607b      	str	r3, [r7, #4]
        bitShift++;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d2f5      	bcs.n	8009c88 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
}
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	b004      	add	sp, #16
 8009caa:	bd80      	pop	{r7, pc}

08009cac <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7f7 fcca 	bl	8001654 <__aeabi_ui2f>
 8009cc0:	1c03      	adds	r3, r0, #0
 8009cc2:	1c19      	adds	r1, r3, #0
 8009cc4:	68b8      	ldr	r0, [r7, #8]
 8009cc6:	f7f7 f961 	bl	8000f8c <__aeabi_fmul>
 8009cca:	1c03      	adds	r3, r0, #0
 8009ccc:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	2310      	movs	r3, #16
 8009cd6:	18f9      	adds	r1, r7, r3
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	1c18      	adds	r0, r3, #0
 8009cdc:	f7ff fee0 	bl	8009aa0 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	801a      	strh	r2, [r3, #0]
}
 8009ce8:	46c0      	nop			@ (mov r8, r8)
 8009cea:	46bd      	mov	sp, r7
 8009cec:	b006      	add	sp, #24
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60b8      	str	r0, [r7, #8]
 8009cf8:	60f9      	str	r1, [r7, #12]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d00:	6a3a      	ldr	r2, [r7, #32]
 8009d02:	68b8      	ldr	r0, [r7, #8]
 8009d04:	68f9      	ldr	r1, [r7, #12]
 8009d06:	f7fc f863 	bl	8005dd0 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	18d2      	adds	r2, r2, r3
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	18d2      	adds	r2, r2, r3
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	18d2      	adds	r2, r2, r3
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	18d2      	adds	r2, r2, r3
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8009d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	0011      	movs	r1, r2
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7fc f8dd 	bl	8005ef0 <correctIntFracNumber>
}
 8009d36:	46c0      	nop			@ (mov r8, r8)
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	b004      	add	sp, #16
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b086      	sub	sp, #24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8009d4e:	2300      	movs	r3, #0
 8009d50:	613b      	str	r3, [r7, #16]
 8009d52:	e019      	b.n	8009d88 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	18d3      	adds	r3, r2, r3
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	3201      	adds	r2, #1
 8009d64:	0052      	lsls	r2, r2, #1
 8009d66:	68f9      	ldr	r1, [r7, #12]
 8009d68:	188a      	adds	r2, r1, r2
 8009d6a:	8812      	ldrh	r2, [r2, #0]
 8009d6c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8009d6e:	0019      	movs	r1, r3
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8009d78:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8009d7a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	3304      	adds	r3, #4
 8009d86:	613b      	str	r3, [r7, #16]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d3e1      	bcc.n	8009d54 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8009d90:	46c0      	nop			@ (mov r8, r8)
 8009d92:	46c0      	nop			@ (mov r8, r8)
 8009d94:	46bd      	mov	sp, r7
 8009d96:	b006      	add	sp, #24
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  init = false;
 8009da0:	4b02      	ldr	r3, [pc, #8]	@ (8009dac <InitDone+0x10>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	701a      	strb	r2, [r3, #0]
}
 8009da6:	46c0      	nop			@ (mov r8, r8)
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	2000006c 	.word	0x2000006c

08009db0 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8009db6:	f7fb fdc1 	bl	800593c <ReadBatteryVoltage>
 8009dba:	1c03      	adds	r3, r0, #0
 8009dbc:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8009dbe:	491f      	ldr	r1, [pc, #124]	@ (8009e3c <batteryChargeCheck+0x8c>)
 8009dc0:	6838      	ldr	r0, [r7, #0]
 8009dc2:	f7f6 fbab 	bl	800051c <__aeabi_fcmplt>
 8009dc6:	1e03      	subs	r3, r0, #0
 8009dc8:	d002      	beq.n	8009dd0 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8009dca:	1dfb      	adds	r3, r7, #7
 8009dcc:	2200      	movs	r2, #0
 8009dce:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8009dd0:	6838      	ldr	r0, [r7, #0]
 8009dd2:	f7f9 fb3d 	bl	8003450 <__aeabi_f2d>
 8009dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8009e40 <batteryChargeCheck+0x90>)
 8009dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e44 <batteryChargeCheck+0x94>)
 8009dda:	f7f6 fb65 	bl	80004a8 <__aeabi_dcmplt>
 8009dde:	1e03      	subs	r3, r0, #0
 8009de0:	d008      	beq.n	8009df4 <batteryChargeCheck+0x44>
 8009de2:	4916      	ldr	r1, [pc, #88]	@ (8009e3c <batteryChargeCheck+0x8c>)
 8009de4:	6838      	ldr	r0, [r7, #0]
 8009de6:	f7f6 fbb7 	bl	8000558 <__aeabi_fcmpge>
 8009dea:	1e03      	subs	r3, r0, #0
 8009dec:	d002      	beq.n	8009df4 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8009dee:	1dfb      	adds	r3, r7, #7
 8009df0:	2202      	movs	r2, #2
 8009df2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8009df4:	2181      	movs	r1, #129	@ 0x81
 8009df6:	05c9      	lsls	r1, r1, #23
 8009df8:	6838      	ldr	r0, [r7, #0]
 8009dfa:	f7f6 fb8f 	bl	800051c <__aeabi_fcmplt>
 8009dfe:	1e03      	subs	r3, r0, #0
 8009e00:	d00b      	beq.n	8009e1a <batteryChargeCheck+0x6a>
 8009e02:	6838      	ldr	r0, [r7, #0]
 8009e04:	f7f9 fb24 	bl	8003450 <__aeabi_f2d>
 8009e08:	4a0d      	ldr	r2, [pc, #52]	@ (8009e40 <batteryChargeCheck+0x90>)
 8009e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e44 <batteryChargeCheck+0x94>)
 8009e0c:	f7f6 fb6a 	bl	80004e4 <__aeabi_dcmpge>
 8009e10:	1e03      	subs	r3, r0, #0
 8009e12:	d002      	beq.n	8009e1a <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8009e14:	1dfb      	adds	r3, r7, #7
 8009e16:	2203      	movs	r2, #3
 8009e18:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8009e1a:	2181      	movs	r1, #129	@ 0x81
 8009e1c:	05c9      	lsls	r1, r1, #23
 8009e1e:	6838      	ldr	r0, [r7, #0]
 8009e20:	f7f6 fb9a 	bl	8000558 <__aeabi_fcmpge>
 8009e24:	1e03      	subs	r3, r0, #0
 8009e26:	d002      	beq.n	8009e2e <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8009e28:	1dfb      	adds	r3, r7, #7
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8009e2e:	1dfb      	adds	r3, r7, #7
 8009e30:	781b      	ldrb	r3, [r3, #0]
}
 8009e32:	0018      	movs	r0, r3
 8009e34:	46bd      	mov	sp, r7
 8009e36:	b002      	add	sp, #8
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	46c0      	nop			@ (mov r8, r8)
 8009e3c:	40600000 	.word	0x40600000
 8009e40:	9999999a 	.word	0x9999999a
 8009e44:	400d9999 	.word	0x400d9999

08009e48 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8009e48:	b590      	push	{r4, r7, lr}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	0004      	movs	r4, r0
 8009e50:	0008      	movs	r0, r1
 8009e52:	0011      	movs	r1, r2
 8009e54:	1dbb      	adds	r3, r7, #6
 8009e56:	1c22      	adds	r2, r4, #0
 8009e58:	801a      	strh	r2, [r3, #0]
 8009e5a:	1d3b      	adds	r3, r7, #4
 8009e5c:	1c02      	adds	r2, r0, #0
 8009e5e:	801a      	strh	r2, [r3, #0]
 8009e60:	1cbb      	adds	r3, r7, #2
 8009e62:	1c0a      	adds	r2, r1, #0
 8009e64:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8009e66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea4 <SetStatusLED+0x5c>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d107      	bne.n	8009e7e <SetStatusLED+0x36>
 8009e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea8 <SetStatusLED+0x60>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d103      	bne.n	8009e7e <SetStatusLED+0x36>
 8009e76:	4b0d      	ldr	r3, [pc, #52]	@ (8009eac <SetStatusLED+0x64>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00e      	beq.n	8009e9c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8009e7e:	2380      	movs	r3, #128	@ 0x80
 8009e80:	05db      	lsls	r3, r3, #23
 8009e82:	1dba      	adds	r2, r7, #6
 8009e84:	8812      	ldrh	r2, [r2, #0]
 8009e86:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8009e88:	2380      	movs	r3, #128	@ 0x80
 8009e8a:	05db      	lsls	r3, r3, #23
 8009e8c:	1d3a      	adds	r2, r7, #4
 8009e8e:	8812      	ldrh	r2, [r2, #0]
 8009e90:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8009e92:	2380      	movs	r3, #128	@ 0x80
 8009e94:	05db      	lsls	r3, r3, #23
 8009e96:	1cba      	adds	r2, r7, #2
 8009e98:	8812      	ldrh	r2, [r2, #0]
 8009e9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8009e9c:	46c0      	nop			@ (mov r8, r8)
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	b003      	add	sp, #12
 8009ea2:	bd90      	pop	{r4, r7, pc}
 8009ea4:	200020a9 	.word	0x200020a9
 8009ea8:	2000006c 	.word	0x2000006c
 8009eac:	200020aa 	.word	0x200020aa

08009eb0 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8009eb0:	b590      	push	{r4, r7, lr}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	0004      	movs	r4, r0
 8009eb8:	0008      	movs	r0, r1
 8009eba:	0011      	movs	r1, r2
 8009ebc:	1dfb      	adds	r3, r7, #7
 8009ebe:	1c22      	adds	r2, r4, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
 8009ec2:	1dbb      	adds	r3, r7, #6
 8009ec4:	1c02      	adds	r2, r0, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	1d7b      	adds	r3, r7, #5
 8009eca:	1c0a      	adds	r2, r1, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8009ece:	4b19      	ldr	r3, [pc, #100]	@ (8009f34 <SetDBLED+0x84>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d107      	bne.n	8009ee6 <SetDBLED+0x36>
 8009ed6:	4b18      	ldr	r3, [pc, #96]	@ (8009f38 <SetDBLED+0x88>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d103      	bne.n	8009ee6 <SetDBLED+0x36>
 8009ede:	4b17      	ldr	r3, [pc, #92]	@ (8009f3c <SetDBLED+0x8c>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d022      	beq.n	8009f2c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8009ee6:	1dfb      	adds	r3, r7, #7
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2201      	movs	r2, #1
 8009eec:	4053      	eors	r3, r2
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	001a      	movs	r2, r3
 8009ef2:	4b13      	ldr	r3, [pc, #76]	@ (8009f40 <SetDBLED+0x90>)
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f002 fd31 	bl	800c95e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8009efc:	1dbb      	adds	r3, r7, #6
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2201      	movs	r2, #1
 8009f02:	4053      	eors	r3, r2
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	001a      	movs	r2, r3
 8009f08:	2380      	movs	r3, #128	@ 0x80
 8009f0a:	005b      	lsls	r3, r3, #1
 8009f0c:	480c      	ldr	r0, [pc, #48]	@ (8009f40 <SetDBLED+0x90>)
 8009f0e:	0019      	movs	r1, r3
 8009f10:	f002 fd25 	bl	800c95e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8009f14:	1d7b      	adds	r3, r7, #5
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	4053      	eors	r3, r2
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	001a      	movs	r2, r3
 8009f20:	2380      	movs	r3, #128	@ 0x80
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4806      	ldr	r0, [pc, #24]	@ (8009f40 <SetDBLED+0x90>)
 8009f26:	0019      	movs	r1, r3
 8009f28:	f002 fd19 	bl	800c95e <HAL_GPIO_WritePin>
  }
}
 8009f2c:	46c0      	nop			@ (mov r8, r8)
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	b003      	add	sp, #12
 8009f32:	bd90      	pop	{r4, r7, pc}
 8009f34:	200020a9 	.word	0x200020a9
 8009f38:	2000006c 	.word	0x2000006c
 8009f3c:	200020aa 	.word	0x200020aa
 8009f40:	50000400 	.word	0x50000400

08009f44 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	0004      	movs	r4, r0
 8009f4c:	0008      	movs	r0, r1
 8009f4e:	0011      	movs	r1, r2
 8009f50:	1dbb      	adds	r3, r7, #6
 8009f52:	1c22      	adds	r2, r4, #0
 8009f54:	801a      	strh	r2, [r3, #0]
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	1c02      	adds	r2, r0, #0
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	1cbb      	adds	r3, r7, #2
 8009f5e:	1c0a      	adds	r2, r1, #0
 8009f60:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8009f62:	4b0e      	ldr	r3, [pc, #56]	@ (8009f9c <SetVocLED+0x58>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d107      	bne.n	8009f7a <SetVocLED+0x36>
 8009f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa0 <SetVocLED+0x5c>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <SetVocLED+0x36>
 8009f72:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa4 <SetVocLED+0x60>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00b      	beq.n	8009f92 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa8 <SetVocLED+0x64>)
 8009f7c:	1dba      	adds	r2, r7, #6
 8009f7e:	8812      	ldrh	r2, [r2, #0]
 8009f80:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8009f82:	4b09      	ldr	r3, [pc, #36]	@ (8009fa8 <SetVocLED+0x64>)
 8009f84:	1d3a      	adds	r2, r7, #4
 8009f86:	8812      	ldrh	r2, [r2, #0]
 8009f88:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8009f8a:	4b07      	ldr	r3, [pc, #28]	@ (8009fa8 <SetVocLED+0x64>)
 8009f8c:	1cba      	adds	r2, r7, #2
 8009f8e:	8812      	ldrh	r2, [r2, #0]
 8009f90:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8009f92:	46c0      	nop			@ (mov r8, r8)
 8009f94:	46bd      	mov	sp, r7
 8009f96:	b003      	add	sp, #12
 8009f98:	bd90      	pop	{r4, r7, pc}
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	200020a9 	.word	0x200020a9
 8009fa0:	2000006c 	.word	0x2000006c
 8009fa4:	200020aa 	.word	0x200020aa
 8009fa8:	40000400 	.word	0x40000400

08009fac <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009fb0:	4b07      	ldr	r3, [pc, #28]	@ (8009fd0 <SetMeasurementIndicator+0x24>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <SetMeasurementIndicator+0x14>
 8009fb8:	4b06      	ldr	r3, [pc, #24]	@ (8009fd4 <SetMeasurementIndicator+0x28>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 8009fc0:	2380      	movs	r3, #128	@ 0x80
 8009fc2:	05db      	lsls	r3, r3, #23
 8009fc4:	4a04      	ldr	r2, [pc, #16]	@ (8009fd8 <SetMeasurementIndicator+0x2c>)
 8009fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8009fc8:	46c0      	nop			@ (mov r8, r8)
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	46c0      	nop			@ (mov r8, r8)
 8009fd0:	200020a9 	.word	0x200020a9
 8009fd4:	200020aa 	.word	0x200020aa
 8009fd8:	00000bb8 	.word	0x00000bb8

08009fdc <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009fe0:	4b07      	ldr	r3, [pc, #28]	@ (800a000 <ResetMeasurementIndicator+0x24>)
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <ResetMeasurementIndicator+0x14>
 8009fe8:	4b06      	ldr	r3, [pc, #24]	@ (800a004 <ResetMeasurementIndicator+0x28>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8009ff0:	2380      	movs	r3, #128	@ 0x80
 8009ff2:	05db      	lsls	r3, r3, #23
 8009ff4:	22fa      	movs	r2, #250	@ 0xfa
 8009ff6:	0112      	lsls	r2, r2, #4
 8009ff8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8009ffa:	46c0      	nop			@ (mov r8, r8)
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	200020a9 	.word	0x200020a9
 800a004:	200020aa 	.word	0x200020aa

0800a008 <SetMICIndicator>:
void SetMICIndicator(){
 800a008:	b580      	push	{r7, lr}
 800a00a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a00c:	4b07      	ldr	r3, [pc, #28]	@ (800a02c <SetMICIndicator+0x24>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <SetMICIndicator+0x14>
 800a014:	4b06      	ldr	r3, [pc, #24]	@ (800a030 <SetMICIndicator+0x28>)
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800a01c:	2380      	movs	r3, #128	@ 0x80
 800a01e:	05db      	lsls	r3, r3, #23
 800a020:	4a04      	ldr	r2, [pc, #16]	@ (800a034 <SetMICIndicator+0x2c>)
 800a022:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a024:	46c0      	nop			@ (mov r8, r8)
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	46c0      	nop			@ (mov r8, r8)
 800a02c:	200020a9 	.word	0x200020a9
 800a030:	200020aa 	.word	0x200020aa
 800a034:	00000bb8 	.word	0x00000bb8

0800a038 <ResetMICIndicator>:
void ResetMICIndicator(){
 800a038:	b580      	push	{r7, lr}
 800a03a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a03c:	4b07      	ldr	r3, [pc, #28]	@ (800a05c <ResetMICIndicator+0x24>)
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d103      	bne.n	800a04c <ResetMICIndicator+0x14>
 800a044:	4b06      	ldr	r3, [pc, #24]	@ (800a060 <ResetMICIndicator+0x28>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800a04c:	2380      	movs	r3, #128	@ 0x80
 800a04e:	05db      	lsls	r3, r3, #23
 800a050:	22fa      	movs	r2, #250	@ 0xfa
 800a052:	0112      	lsls	r2, r2, #4
 800a054:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a056:	46c0      	nop			@ (mov r8, r8)
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	200020a9 	.word	0x200020a9
 800a060:	200020aa 	.word	0x200020aa

0800a064 <SetESPIndicator>:
void SetESPIndicator(){
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a068:	4b07      	ldr	r3, [pc, #28]	@ (800a088 <SetESPIndicator+0x24>)
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d103      	bne.n	800a078 <SetESPIndicator+0x14>
 800a070:	4b06      	ldr	r3, [pc, #24]	@ (800a08c <SetESPIndicator+0x28>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800a078:	2380      	movs	r3, #128	@ 0x80
 800a07a:	05db      	lsls	r3, r3, #23
 800a07c:	4a04      	ldr	r2, [pc, #16]	@ (800a090 <SetESPIndicator+0x2c>)
 800a07e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a080:	46c0      	nop			@ (mov r8, r8)
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	46c0      	nop			@ (mov r8, r8)
 800a088:	200020a9 	.word	0x200020a9
 800a08c:	200020aa 	.word	0x200020aa
 800a090:	00000bb8 	.word	0x00000bb8

0800a094 <ResetESPIndicator>:
void ResetESPIndicator(){
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a098:	4b07      	ldr	r3, [pc, #28]	@ (800a0b8 <ResetESPIndicator+0x24>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d103      	bne.n	800a0a8 <ResetESPIndicator+0x14>
 800a0a0:	4b06      	ldr	r3, [pc, #24]	@ (800a0bc <ResetESPIndicator+0x28>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800a0a8:	2380      	movs	r3, #128	@ 0x80
 800a0aa:	05db      	lsls	r3, r3, #23
 800a0ac:	22fa      	movs	r2, #250	@ 0xfa
 800a0ae:	0112      	lsls	r2, r2, #4
 800a0b0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a0b2:	46c0      	nop			@ (mov r8, r8)
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	200020a9 	.word	0x200020a9
 800a0bc:	200020aa 	.word	0x200020aa

0800a0c0 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800a0c4:	23fa      	movs	r3, #250	@ 0xfa
 800a0c6:	011a      	lsls	r2, r3, #4
 800a0c8:	23fa      	movs	r3, #250	@ 0xfa
 800a0ca:	0119      	lsls	r1, r3, #4
 800a0cc:	23fa      	movs	r3, #250	@ 0xfa
 800a0ce:	011b      	lsls	r3, r3, #4
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f7ff feb9 	bl	8009e48 <SetStatusLED>
  SetDBLED(false,false,false);
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2100      	movs	r1, #0
 800a0da:	2000      	movs	r0, #0
 800a0dc:	f7ff fee8 	bl	8009eb0 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800a0e0:	23fa      	movs	r3, #250	@ 0xfa
 800a0e2:	011a      	lsls	r2, r3, #4
 800a0e4:	23fa      	movs	r3, #250	@ 0xfa
 800a0e6:	0119      	lsls	r1, r3, #4
 800a0e8:	23fa      	movs	r3, #250	@ 0xfa
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f7ff ff29 	bl	8009f44 <SetVocLED>
return;
 800a0f2:	46c0      	nop			@ (mov r8, r8)
}
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <powerCheck>:

Battery_Status powerCheck(){
 800a0f8:	b590      	push	{r4, r7, lr}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800a0fe:	f7fb fce3 	bl	8005ac8 <Check_USB_PowerOn>
 800a102:	0003      	movs	r3, r0
 800a104:	001a      	movs	r2, r3
 800a106:	2301      	movs	r3, #1
 800a108:	4053      	eors	r3, r2
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <powerCheck+0x24>
    status = batteryChargeCheck();
 800a110:	1dfc      	adds	r4, r7, #7
 800a112:	f7ff fe4d 	bl	8009db0 <batteryChargeCheck>
 800a116:	0003      	movs	r3, r0
 800a118:	7023      	strb	r3, [r4, #0]
 800a11a:	e002      	b.n	800a122 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800a11c:	1dfb      	adds	r3, r7, #7
 800a11e:	2201      	movs	r2, #1
 800a120:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a122:	1dfb      	adds	r3, r7, #7
 800a124:	781b      	ldrb	r3, [r3, #0]
}
 800a126:	0018      	movs	r0, r3
 800a128:	46bd      	mov	sp, r7
 800a12a:	b003      	add	sp, #12
 800a12c:	bd90      	pop	{r4, r7, pc}
	...

0800a130 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	0002      	movs	r2, r0
 800a138:	1dfb      	adds	r3, r7, #7
 800a13a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800a13c:	1dfb      	adds	r3, r7, #7
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d105      	bne.n	800a150 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800a144:	4a18      	ldr	r2, [pc, #96]	@ (800a1a8 <powerDisplay+0x78>)
 800a146:	4b19      	ldr	r3, [pc, #100]	@ (800a1ac <powerDisplay+0x7c>)
 800a148:	0019      	movs	r1, r3
 800a14a:	2003      	movs	r0, #3
 800a14c:	f000 fe06 	bl	800ad5c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800a150:	1dfb      	adds	r3, r7, #7
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b04      	cmp	r3, #4
 800a156:	d105      	bne.n	800a164 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800a158:	4a15      	ldr	r2, [pc, #84]	@ (800a1b0 <powerDisplay+0x80>)
 800a15a:	4b14      	ldr	r3, [pc, #80]	@ (800a1ac <powerDisplay+0x7c>)
 800a15c:	0019      	movs	r1, r3
 800a15e:	2003      	movs	r0, #3
 800a160:	f000 fdfc 	bl	800ad5c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800a164:	1dfb      	adds	r3, r7, #7
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d105      	bne.n	800a178 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800a16c:	4a11      	ldr	r2, [pc, #68]	@ (800a1b4 <powerDisplay+0x84>)
 800a16e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1ac <powerDisplay+0x7c>)
 800a170:	0019      	movs	r1, r3
 800a172:	2003      	movs	r0, #3
 800a174:	f000 fdf2 	bl	800ad5c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800a178:	1dfb      	adds	r3, r7, #7
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d105      	bne.n	800a18c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800a180:	4a0d      	ldr	r2, [pc, #52]	@ (800a1b8 <powerDisplay+0x88>)
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <powerDisplay+0x7c>)
 800a184:	0019      	movs	r1, r3
 800a186:	2003      	movs	r0, #3
 800a188:	f000 fde8 	bl	800ad5c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800a18c:	1dfb      	adds	r3, r7, #7
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800a194:	4a09      	ldr	r2, [pc, #36]	@ (800a1bc <powerDisplay+0x8c>)
 800a196:	4b05      	ldr	r3, [pc, #20]	@ (800a1ac <powerDisplay+0x7c>)
 800a198:	0019      	movs	r1, r3
 800a19a:	2003      	movs	r0, #3
 800a19c:	f000 fdde 	bl	800ad5c <CreateLine>
  }
}
 800a1a0:	46c0      	nop			@ (mov r8, r8)
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b002      	add	sp, #8
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	0801ec8c 	.word	0x0801ec8c
 800a1ac:	0801ec9c 	.word	0x0801ec9c
 800a1b0:	0801eca0 	.word	0x0801eca0
 800a1b4:	0801ecb8 	.word	0x0801ecb8
 800a1b8:	0801ecd8 	.word	0x0801ecd8
 800a1bc:	0801ecf0 	.word	0x0801ecf0

0800a1c0 <configCheck>:

void configCheck(){
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800a1c4:	f7fb fc8f 	bl	8005ae6 <BootButton_Pressed>
 800a1c8:	1e03      	subs	r3, r0, #0
 800a1ca:	d007      	beq.n	800a1dc <configCheck+0x1c>
 800a1cc:	f7fb fc9c 	bl	8005b08 <UserButton_Pressed>
 800a1d0:	1e03      	subs	r3, r0, #0
 800a1d2:	d003      	beq.n	800a1dc <configCheck+0x1c>
    configSet = true;
 800a1d4:	4b3d      	ldr	r3, [pc, #244]	@ (800a2cc <configCheck+0x10c>)
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	e00a      	b.n	800a1f2 <configCheck+0x32>
  }
  else{
    configSet = false;
 800a1dc:	4b3b      	ldr	r3, [pc, #236]	@ (800a2cc <configCheck+0x10c>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800a1e2:	f001 f95d 	bl	800b4a0 <HAL_GetTick>
 800a1e6:	0003      	movs	r3, r0
 800a1e8:	22fa      	movs	r2, #250	@ 0xfa
 800a1ea:	00d2      	lsls	r2, r2, #3
 800a1ec:	189a      	adds	r2, r3, r2
 800a1ee:	4b38      	ldr	r3, [pc, #224]	@ (800a2d0 <configCheck+0x110>)
 800a1f0:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800a1f2:	4b36      	ldr	r3, [pc, #216]	@ (800a2cc <configCheck+0x10c>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00d      	beq.n	800a216 <configCheck+0x56>
 800a1fa:	4b35      	ldr	r3, [pc, #212]	@ (800a2d0 <configCheck+0x110>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	0018      	movs	r0, r3
 800a200:	f000 fd56 	bl	800acb0 <TimestampIsReached>
 800a204:	1e03      	subs	r3, r0, #0
 800a206:	d006      	beq.n	800a216 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800a208:	f7f9 fb7c 	bl	8003904 <SetConfigMode>
    SetDBLED(true, true, true);
 800a20c:	2201      	movs	r2, #1
 800a20e:	2101      	movs	r1, #1
 800a210:	2001      	movs	r0, #1
 800a212:	f7ff fe4d 	bl	8009eb0 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800a216:	f7fb fc66 	bl	8005ae6 <BootButton_Pressed>
 800a21a:	0003      	movs	r3, r0
 800a21c:	001a      	movs	r2, r3
 800a21e:	2301      	movs	r3, #1
 800a220:	4053      	eors	r3, r2
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01d      	beq.n	800a264 <configCheck+0xa4>
 800a228:	f7fb fc6e 	bl	8005b08 <UserButton_Pressed>
 800a22c:	1e03      	subs	r3, r0, #0
 800a22e:	d019      	beq.n	800a264 <configCheck+0xa4>
 800a230:	4b28      	ldr	r3, [pc, #160]	@ (800a2d4 <configCheck+0x114>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	2201      	movs	r2, #1
 800a236:	4053      	eors	r3, r2
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d012      	beq.n	800a264 <configCheck+0xa4>
    SetLEDsOff();
 800a23e:	f7ff ff3f 	bl	800a0c0 <SetLEDsOff>
    userToggle = !userToggle;
 800a242:	4b25      	ldr	r3, [pc, #148]	@ (800a2d8 <configCheck+0x118>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	1e5a      	subs	r2, r3, #1
 800a248:	4193      	sbcs	r3, r2
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2201      	movs	r2, #1
 800a24e:	4053      	eors	r3, r2
 800a250:	b2db      	uxtb	r3, r3
 800a252:	1c1a      	adds	r2, r3, #0
 800a254:	2301      	movs	r3, #1
 800a256:	4013      	ands	r3, r2
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4b1f      	ldr	r3, [pc, #124]	@ (800a2d8 <configCheck+0x118>)
 800a25c:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800a25e:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d4 <configCheck+0x114>)
 800a260:	2201      	movs	r2, #1
 800a262:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800a264:	f7fb fc3f 	bl	8005ae6 <BootButton_Pressed>
 800a268:	0003      	movs	r3, r0
 800a26a:	001a      	movs	r2, r3
 800a26c:	2301      	movs	r3, #1
 800a26e:	4053      	eors	r3, r2
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00b      	beq.n	800a28e <configCheck+0xce>
 800a276:	f7fb fc47 	bl	8005b08 <UserButton_Pressed>
 800a27a:	0003      	movs	r3, r0
 800a27c:	001a      	movs	r2, r3
 800a27e:	2301      	movs	r3, #1
 800a280:	4053      	eors	r3, r2
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <configCheck+0xce>
    buttonHeld = false;
 800a288:	4b12      	ldr	r3, [pc, #72]	@ (800a2d4 <configCheck+0x114>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800a28e:	f7fb fc1b 	bl	8005ac8 <Check_USB_PowerOn>
 800a292:	1e03      	subs	r3, r0, #0
 800a294:	d003      	beq.n	800a29e <configCheck+0xde>
    usbPluggedIn = true;
 800a296:	4b11      	ldr	r3, [pc, #68]	@ (800a2dc <configCheck+0x11c>)
 800a298:	2201      	movs	r2, #1
 800a29a:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800a29c:	e012      	b.n	800a2c4 <configCheck+0x104>
    if(!userToggle && !init){
 800a29e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d8 <configCheck+0x118>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	4053      	eors	r3, r2
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d008      	beq.n	800a2be <configCheck+0xfe>
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e0 <configCheck+0x120>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	4053      	eors	r3, r2
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <configCheck+0xfe>
      SetLEDsOff();
 800a2ba:	f7ff ff01 	bl	800a0c0 <SetLEDsOff>
    usbPluggedIn = false;
 800a2be:	4b07      	ldr	r3, [pc, #28]	@ (800a2dc <configCheck+0x11c>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
}
 800a2c4:	46c0      	nop			@ (mov r8, r8)
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	46c0      	nop			@ (mov r8, r8)
 800a2cc:	200020a8 	.word	0x200020a8
 800a2d0:	200020ac 	.word	0x200020ac
 800a2d4:	200020ab 	.word	0x200020ab
 800a2d8:	200020aa 	.word	0x200020aa
 800a2dc:	200020a9 	.word	0x200020a9
 800a2e0:	2000006c 	.word	0x2000006c

0800a2e4 <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
  configCheck();
 800a2e8:	f7ff ff6a 	bl	800a1c0 <configCheck>
}
 800a2ec:	46c0      	nop			@ (mov r8, r8)
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800a2f2:	b590      	push	{r4, r7, lr}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800a2f8:	1dfc      	adds	r4, r7, #7
 800a2fa:	f7ff fefd 	bl	800a0f8 <powerCheck>
 800a2fe:	0003      	movs	r3, r0
 800a300:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);
 800a302:	1dfb      	adds	r3, r7, #7
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	0018      	movs	r0, r3
 800a308:	f7ff ff12 	bl	800a130 <powerDisplay>
  return status;
 800a30c:	1dfb      	adds	r3, r7, #7
 800a30e:	781b      	ldrb	r3, [r3, #0]

}
 800a310:	0018      	movs	r0, r3
 800a312:	46bd      	mov	sp, r7
 800a314:	b003      	add	sp, #12
 800a316:	bd90      	pop	{r4, r7, pc}

0800a318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a31c:	4b07      	ldr	r3, [pc, #28]	@ (800a33c <HAL_MspInit+0x24>)
 800a31e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a320:	4b06      	ldr	r3, [pc, #24]	@ (800a33c <HAL_MspInit+0x24>)
 800a322:	2101      	movs	r1, #1
 800a324:	430a      	orrs	r2, r1
 800a326:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800a328:	4b04      	ldr	r3, [pc, #16]	@ (800a33c <HAL_MspInit+0x24>)
 800a32a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a32c:	4b03      	ldr	r3, [pc, #12]	@ (800a33c <HAL_MspInit+0x24>)
 800a32e:	2180      	movs	r1, #128	@ 0x80
 800a330:	0549      	lsls	r1, r1, #21
 800a332:	430a      	orrs	r2, r1
 800a334:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a336:	46c0      	nop			@ (mov r8, r8)
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	40021000 	.word	0x40021000

0800a340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a344:	46c0      	nop			@ (mov r8, r8)
 800a346:	e7fd      	b.n	800a344 <NMI_Handler+0x4>

0800a348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a34c:	46c0      	nop			@ (mov r8, r8)
 800a34e:	e7fd      	b.n	800a34c <HardFault_Handler+0x4>

0800a350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a354:	46c0      	nop			@ (mov r8, r8)
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a35e:	46c0      	nop			@ (mov r8, r8)
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a368:	f001 f888 	bl	800b47c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a36c:	46c0      	nop			@ (mov r8, r8)
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a378:	4b05      	ldr	r3, [pc, #20]	@ (800a390 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800a37a:	0018      	movs	r0, r3
 800a37c:	f001 fe9d 	bl	800c0ba <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a380:	4b04      	ldr	r3, [pc, #16]	@ (800a394 <DMA1_Channel2_3_IRQHandler+0x20>)
 800a382:	0018      	movs	r0, r3
 800a384:	f001 fe99 	bl	800c0ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800a388:	46c0      	nop			@ (mov r8, r8)
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	46c0      	nop			@ (mov r8, r8)
 800a390:	20000dac 	.word	0x20000dac
 800a394:	20000d64 	.word	0x20000d64

0800a398 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800a39c:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800a39e:	0018      	movs	r0, r3
 800a3a0:	f001 fe8b 	bl	800c0ba <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800a3a4:	4b06      	ldr	r3, [pc, #24]	@ (800a3c0 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800a3a6:	0018      	movs	r0, r3
 800a3a8:	f001 fe87 	bl	800c0ba <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800a3ac:	4b05      	ldr	r3, [pc, #20]	@ (800a3c4 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f001 fe83 	bl	800c0ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800a3b4:	46c0      	nop			@ (mov r8, r8)
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	46c0      	nop			@ (mov r8, r8)
 800a3bc:	20000e30 	.word	0x20000e30
 800a3c0:	2000239c 	.word	0x2000239c
 800a3c4:	200023e4 	.word	0x200023e4

0800a3c8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a3cc:	4b03      	ldr	r3, [pc, #12]	@ (800a3dc <USART4_5_IRQHandler+0x14>)
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f008 fc9a 	bl	8012d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800a3d4:	46c0      	nop			@ (mov r8, r8)
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	46c0      	nop			@ (mov r8, r8)
 800a3dc:	200022e4 	.word	0x200022e4

0800a3e0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800a3e4:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <I2C1_IRQHandler+0x2c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	23e0      	movs	r3, #224	@ 0xe0
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	d004      	beq.n	800a3fc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800a3f2:	4b06      	ldr	r3, [pc, #24]	@ (800a40c <I2C1_IRQHandler+0x2c>)
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f002 fd8b 	bl	800cf10 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800a3fa:	e003      	b.n	800a404 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800a3fc:	4b03      	ldr	r3, [pc, #12]	@ (800a40c <I2C1_IRQHandler+0x2c>)
 800a3fe:	0018      	movs	r0, r3
 800a400:	f002 fd6c 	bl	800cedc <HAL_I2C_EV_IRQHandler>
}
 800a404:	46c0      	nop			@ (mov r8, r8)
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	20000cbc 	.word	0x20000cbc

0800a410 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a414:	4b03      	ldr	r3, [pc, #12]	@ (800a424 <USB_IRQHandler+0x14>)
 800a416:	0018      	movs	r0, r3
 800a418:	f004 ff06 	bl	800f228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800a41c:	46c0      	nop			@ (mov r8, r8)
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	46c0      	nop			@ (mov r8, r8)
 800a424:	200031ec 	.word	0x200031ec

0800a428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
  return 1;
 800a42c:	2301      	movs	r3, #1
}
 800a42e:	0018      	movs	r0, r3
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <_kill>:

int _kill(int pid, int sig)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a43e:	f010 ff1d 	bl	801b27c <__errno>
 800a442:	0003      	movs	r3, r0
 800a444:	2216      	movs	r2, #22
 800a446:	601a      	str	r2, [r3, #0]
  return -1;
 800a448:	2301      	movs	r3, #1
 800a44a:	425b      	negs	r3, r3
}
 800a44c:	0018      	movs	r0, r3
 800a44e:	46bd      	mov	sp, r7
 800a450:	b002      	add	sp, #8
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_exit>:

void _exit (int status)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a45c:	2301      	movs	r3, #1
 800a45e:	425a      	negs	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	0011      	movs	r1, r2
 800a464:	0018      	movs	r0, r3
 800a466:	f7ff ffe5 	bl	800a434 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a46a:	46c0      	nop			@ (mov r8, r8)
 800a46c:	e7fd      	b.n	800a46a <_exit+0x16>

0800a46e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b086      	sub	sp, #24
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a47a:	2300      	movs	r3, #0
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	e00a      	b.n	800a496 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a480:	e000      	b.n	800a484 <_read+0x16>
 800a482:	bf00      	nop
 800a484:	0001      	movs	r1, r0
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	60ba      	str	r2, [r7, #8]
 800a48c:	b2ca      	uxtb	r2, r1
 800a48e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	3301      	adds	r3, #1
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	dbf0      	blt.n	800a480 <_read+0x12>
  }

  return len;
 800a49e:	687b      	ldr	r3, [r7, #4]
}
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	b006      	add	sp, #24
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	425b      	negs	r3, r3
}
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	b002      	add	sp, #8
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2280      	movs	r2, #128	@ 0x80
 800a4ca:	0192      	lsls	r2, r2, #6
 800a4cc:	605a      	str	r2, [r3, #4]
  return 0;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	b002      	add	sp, #8
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <_isatty>:

int _isatty(int file)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a4e0:	2301      	movs	r3, #1
}
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	b002      	add	sp, #8
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	b004      	add	sp, #16
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a508:	4a14      	ldr	r2, [pc, #80]	@ (800a55c <_sbrk+0x5c>)
 800a50a:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <_sbrk+0x60>)
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a514:	4b13      	ldr	r3, [pc, #76]	@ (800a564 <_sbrk+0x64>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a51c:	4b11      	ldr	r3, [pc, #68]	@ (800a564 <_sbrk+0x64>)
 800a51e:	4a12      	ldr	r2, [pc, #72]	@ (800a568 <_sbrk+0x68>)
 800a520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a522:	4b10      	ldr	r3, [pc, #64]	@ (800a564 <_sbrk+0x64>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	18d3      	adds	r3, r2, r3
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d207      	bcs.n	800a540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a530:	f010 fea4 	bl	801b27c <__errno>
 800a534:	0003      	movs	r3, r0
 800a536:	220c      	movs	r2, #12
 800a538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a53a:	2301      	movs	r3, #1
 800a53c:	425b      	negs	r3, r3
 800a53e:	e009      	b.n	800a554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a540:	4b08      	ldr	r3, [pc, #32]	@ (800a564 <_sbrk+0x64>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a546:	4b07      	ldr	r3, [pc, #28]	@ (800a564 <_sbrk+0x64>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	18d2      	adds	r2, r2, r3
 800a54e:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <_sbrk+0x64>)
 800a550:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800a552:	68fb      	ldr	r3, [r7, #12]
}
 800a554:	0018      	movs	r0, r3
 800a556:	46bd      	mov	sp, r7
 800a558:	b006      	add	sp, #24
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20005000 	.word	0x20005000
 800a560:	00000400 	.word	0x00000400
 800a564:	200020b0 	.word	0x200020b0
 800a568:	20003850 	.word	0x20003850

0800a56c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a570:	46c0      	nop			@ (mov r8, r8)
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a57e:	2310      	movs	r3, #16
 800a580:	18fb      	adds	r3, r7, r3
 800a582:	0018      	movs	r0, r3
 800a584:	2308      	movs	r3, #8
 800a586:	001a      	movs	r2, r3
 800a588:	2100      	movs	r1, #0
 800a58a:	f010 fdd3 	bl	801b134 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a58e:	003b      	movs	r3, r7
 800a590:	0018      	movs	r0, r3
 800a592:	2310      	movs	r3, #16
 800a594:	001a      	movs	r2, r3
 800a596:	2100      	movs	r1, #0
 800a598:	f010 fdcc 	bl	801b134 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a59c:	4b2e      	ldr	r3, [pc, #184]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a59e:	2280      	movs	r2, #128	@ 0x80
 800a5a0:	05d2      	lsls	r2, r2, #23
 800a5a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a5a4:	4b2c      	ldr	r3, [pc, #176]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5aa:	4b2b      	ldr	r3, [pc, #172]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800a5b0:	4b29      	ldr	r3, [pc, #164]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a5b2:	4a2a      	ldr	r2, [pc, #168]	@ (800a65c <MX_TIM2_Init+0xe4>)
 800a5b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a5b6:	4b28      	ldr	r3, [pc, #160]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5bc:	4b26      	ldr	r3, [pc, #152]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a5c2:	4b25      	ldr	r3, [pc, #148]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f007 fe11 	bl	80121ec <HAL_TIM_PWM_Init>
 800a5ca:	1e03      	subs	r3, r0, #0
 800a5cc:	d001      	beq.n	800a5d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800a5ce:	f7fc faa1 	bl	8006b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a5d2:	2110      	movs	r1, #16
 800a5d4:	187b      	adds	r3, r7, r1
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a5da:	187b      	adds	r3, r7, r1
 800a5dc:	2200      	movs	r2, #0
 800a5de:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a5e0:	187a      	adds	r2, r7, r1
 800a5e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a5e4:	0011      	movs	r1, r2
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f008 f91e 	bl	8012828 <HAL_TIMEx_MasterConfigSynchronization>
 800a5ec:	1e03      	subs	r3, r0, #0
 800a5ee:	d001      	beq.n	800a5f4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800a5f0:	f7fc fa90 	bl	8006b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a5f4:	003b      	movs	r3, r7
 800a5f6:	2260      	movs	r2, #96	@ 0x60
 800a5f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800a5fa:	003b      	movs	r3, r7
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a600:	003b      	movs	r3, r7
 800a602:	2200      	movs	r2, #0
 800a604:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a606:	003b      	movs	r3, r7
 800a608:	2200      	movs	r2, #0
 800a60a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a60c:	0039      	movs	r1, r7
 800a60e:	4b12      	ldr	r3, [pc, #72]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a610:	2200      	movs	r2, #0
 800a612:	0018      	movs	r0, r3
 800a614:	f007 febc 	bl	8012390 <HAL_TIM_PWM_ConfigChannel>
 800a618:	1e03      	subs	r3, r0, #0
 800a61a:	d001      	beq.n	800a620 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800a61c:	f7fc fa7a 	bl	8006b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a620:	0039      	movs	r1, r7
 800a622:	4b0d      	ldr	r3, [pc, #52]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a624:	2208      	movs	r2, #8
 800a626:	0018      	movs	r0, r3
 800a628:	f007 feb2 	bl	8012390 <HAL_TIM_PWM_ConfigChannel>
 800a62c:	1e03      	subs	r3, r0, #0
 800a62e:	d001      	beq.n	800a634 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800a630:	f7fc fa70 	bl	8006b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a634:	0039      	movs	r1, r7
 800a636:	4b08      	ldr	r3, [pc, #32]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a638:	220c      	movs	r2, #12
 800a63a:	0018      	movs	r0, r3
 800a63c:	f007 fea8 	bl	8012390 <HAL_TIM_PWM_ConfigChannel>
 800a640:	1e03      	subs	r3, r0, #0
 800a642:	d001      	beq.n	800a648 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800a644:	f7fc fa66 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a648:	4b03      	ldr	r3, [pc, #12]	@ (800a658 <MX_TIM2_Init+0xe0>)
 800a64a:	0018      	movs	r0, r3
 800a64c:	f000 f8fe 	bl	800a84c <HAL_TIM_MspPostInit>

}
 800a650:	46c0      	nop			@ (mov r8, r8)
 800a652:	46bd      	mov	sp, r7
 800a654:	b006      	add	sp, #24
 800a656:	bd80      	pop	{r7, pc}
 800a658:	200020b4 	.word	0x200020b4
 800a65c:	0000ffff 	.word	0x0000ffff

0800a660 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a666:	2310      	movs	r3, #16
 800a668:	18fb      	adds	r3, r7, r3
 800a66a:	0018      	movs	r0, r3
 800a66c:	2308      	movs	r3, #8
 800a66e:	001a      	movs	r2, r3
 800a670:	2100      	movs	r1, #0
 800a672:	f010 fd5f 	bl	801b134 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a676:	003b      	movs	r3, r7
 800a678:	0018      	movs	r0, r3
 800a67a:	2310      	movs	r3, #16
 800a67c:	001a      	movs	r2, r3
 800a67e:	2100      	movs	r1, #0
 800a680:	f010 fd58 	bl	801b134 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a684:	4b32      	ldr	r3, [pc, #200]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a686:	4a33      	ldr	r2, [pc, #204]	@ (800a754 <MX_TIM3_Init+0xf4>)
 800a688:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a68a:	4b31      	ldr	r3, [pc, #196]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a690:	4b2f      	ldr	r3, [pc, #188]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a692:	2200      	movs	r2, #0
 800a694:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a696:	4b2e      	ldr	r3, [pc, #184]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a698:	4a2f      	ldr	r2, [pc, #188]	@ (800a758 <MX_TIM3_Init+0xf8>)
 800a69a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a69c:	4b2c      	ldr	r3, [pc, #176]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a6a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a6a8:	4b29      	ldr	r3, [pc, #164]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f007 fd9e 	bl	80121ec <HAL_TIM_PWM_Init>
 800a6b0:	1e03      	subs	r3, r0, #0
 800a6b2:	d001      	beq.n	800a6b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800a6b4:	f7fc fa2e 	bl	8006b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a6b8:	2110      	movs	r1, #16
 800a6ba:	187b      	adds	r3, r7, r1
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a6c0:	187b      	adds	r3, r7, r1
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a6c6:	187a      	adds	r2, r7, r1
 800a6c8:	4b21      	ldr	r3, [pc, #132]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a6ca:	0011      	movs	r1, r2
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	f008 f8ab 	bl	8012828 <HAL_TIMEx_MasterConfigSynchronization>
 800a6d2:	1e03      	subs	r3, r0, #0
 800a6d4:	d001      	beq.n	800a6da <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800a6d6:	f7fc fa1d 	bl	8006b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a6da:	003b      	movs	r3, r7
 800a6dc:	2260      	movs	r2, #96	@ 0x60
 800a6de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800a6e0:	003b      	movs	r3, r7
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a6e6:	003b      	movs	r3, r7
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a6ec:	003b      	movs	r3, r7
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a6f2:	0039      	movs	r1, r7
 800a6f4:	4b16      	ldr	r3, [pc, #88]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f007 fe49 	bl	8012390 <HAL_TIM_PWM_ConfigChannel>
 800a6fe:	1e03      	subs	r3, r0, #0
 800a700:	d001      	beq.n	800a706 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800a702:	f7fc fa07 	bl	8006b14 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800a706:	4b12      	ldr	r3, [pc, #72]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a708:	2104      	movs	r1, #4
 800a70a:	0018      	movs	r0, r3
 800a70c:	f008 f8ea 	bl	80128e4 <HAL_TIMEx_RemapConfig>
 800a710:	1e03      	subs	r3, r0, #0
 800a712:	d001      	beq.n	800a718 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800a714:	f7fc f9fe 	bl	8006b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a718:	0039      	movs	r1, r7
 800a71a:	4b0d      	ldr	r3, [pc, #52]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a71c:	2204      	movs	r2, #4
 800a71e:	0018      	movs	r0, r3
 800a720:	f007 fe36 	bl	8012390 <HAL_TIM_PWM_ConfigChannel>
 800a724:	1e03      	subs	r3, r0, #0
 800a726:	d001      	beq.n	800a72c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800a728:	f7fc f9f4 	bl	8006b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a72c:	0039      	movs	r1, r7
 800a72e:	4b08      	ldr	r3, [pc, #32]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a730:	2208      	movs	r2, #8
 800a732:	0018      	movs	r0, r3
 800a734:	f007 fe2c 	bl	8012390 <HAL_TIM_PWM_ConfigChannel>
 800a738:	1e03      	subs	r3, r0, #0
 800a73a:	d001      	beq.n	800a740 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800a73c:	f7fc f9ea 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a740:	4b03      	ldr	r3, [pc, #12]	@ (800a750 <MX_TIM3_Init+0xf0>)
 800a742:	0018      	movs	r0, r3
 800a744:	f000 f882 	bl	800a84c <HAL_TIM_MspPostInit>

}
 800a748:	46c0      	nop			@ (mov r8, r8)
 800a74a:	46bd      	mov	sp, r7
 800a74c:	b006      	add	sp, #24
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	200020f4 	.word	0x200020f4
 800a754:	40000400 	.word	0x40000400
 800a758:	0000ffff 	.word	0x0000ffff

0800a75c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a762:	003b      	movs	r3, r7
 800a764:	0018      	movs	r0, r3
 800a766:	2308      	movs	r3, #8
 800a768:	001a      	movs	r2, r3
 800a76a:	2100      	movs	r1, #0
 800a76c:	f010 fce2 	bl	801b134 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a770:	4b15      	ldr	r3, [pc, #84]	@ (800a7c8 <MX_TIM6_Init+0x6c>)
 800a772:	4a16      	ldr	r2, [pc, #88]	@ (800a7cc <MX_TIM6_Init+0x70>)
 800a774:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800a776:	4b14      	ldr	r3, [pc, #80]	@ (800a7c8 <MX_TIM6_Init+0x6c>)
 800a778:	220a      	movs	r2, #10
 800a77a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a77c:	4b12      	ldr	r3, [pc, #72]	@ (800a7c8 <MX_TIM6_Init+0x6c>)
 800a77e:	2200      	movs	r2, #0
 800a780:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800a782:	4b11      	ldr	r3, [pc, #68]	@ (800a7c8 <MX_TIM6_Init+0x6c>)
 800a784:	4a12      	ldr	r2, [pc, #72]	@ (800a7d0 <MX_TIM6_Init+0x74>)
 800a786:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a788:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c8 <MX_TIM6_Init+0x6c>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a78e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c8 <MX_TIM6_Init+0x6c>)
 800a790:	0018      	movs	r0, r3
 800a792:	f007 fc83 	bl	801209c <HAL_TIM_Base_Init>
 800a796:	1e03      	subs	r3, r0, #0
 800a798:	d001      	beq.n	800a79e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800a79a:	f7fc f9bb 	bl	8006b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a79e:	003b      	movs	r3, r7
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7a4:	003b      	movs	r3, r7
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a7aa:	003a      	movs	r2, r7
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <MX_TIM6_Init+0x6c>)
 800a7ae:	0011      	movs	r1, r2
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f008 f839 	bl	8012828 <HAL_TIMEx_MasterConfigSynchronization>
 800a7b6:	1e03      	subs	r3, r0, #0
 800a7b8:	d001      	beq.n	800a7be <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800a7ba:	f7fc f9ab 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a7be:	46c0      	nop			@ (mov r8, r8)
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	b002      	add	sp, #8
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	46c0      	nop			@ (mov r8, r8)
 800a7c8:	20002134 	.word	0x20002134
 800a7cc:	40001000 	.word	0x40001000
 800a7d0:	0000ffff 	.word	0x0000ffff

0800a7d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	2380      	movs	r3, #128	@ 0x80
 800a7e2:	05db      	lsls	r3, r3, #23
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d106      	bne.n	800a7f6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a814 <HAL_TIM_PWM_MspInit+0x40>)
 800a7ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7ec:	4b09      	ldr	r3, [pc, #36]	@ (800a814 <HAL_TIM_PWM_MspInit+0x40>)
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a7f4:	e00a      	b.n	800a80c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a07      	ldr	r2, [pc, #28]	@ (800a818 <HAL_TIM_PWM_MspInit+0x44>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d105      	bne.n	800a80c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a800:	4b04      	ldr	r3, [pc, #16]	@ (800a814 <HAL_TIM_PWM_MspInit+0x40>)
 800a802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a804:	4b03      	ldr	r3, [pc, #12]	@ (800a814 <HAL_TIM_PWM_MspInit+0x40>)
 800a806:	2102      	movs	r1, #2
 800a808:	430a      	orrs	r2, r1
 800a80a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a80c:	46c0      	nop			@ (mov r8, r8)
 800a80e:	46bd      	mov	sp, r7
 800a810:	b002      	add	sp, #8
 800a812:	bd80      	pop	{r7, pc}
 800a814:	40021000 	.word	0x40021000
 800a818:	40000400 	.word	0x40000400

0800a81c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a06      	ldr	r2, [pc, #24]	@ (800a844 <HAL_TIM_Base_MspInit+0x28>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d105      	bne.n	800a83a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a82e:	4b06      	ldr	r3, [pc, #24]	@ (800a848 <HAL_TIM_Base_MspInit+0x2c>)
 800a830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a832:	4b05      	ldr	r3, [pc, #20]	@ (800a848 <HAL_TIM_Base_MspInit+0x2c>)
 800a834:	2110      	movs	r1, #16
 800a836:	430a      	orrs	r2, r1
 800a838:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800a83a:	46c0      	nop			@ (mov r8, r8)
 800a83c:	46bd      	mov	sp, r7
 800a83e:	b002      	add	sp, #8
 800a840:	bd80      	pop	{r7, pc}
 800a842:	46c0      	nop			@ (mov r8, r8)
 800a844:	40001000 	.word	0x40001000
 800a848:	40021000 	.word	0x40021000

0800a84c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a84c:	b590      	push	{r4, r7, lr}
 800a84e:	b08b      	sub	sp, #44	@ 0x2c
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a854:	2414      	movs	r4, #20
 800a856:	193b      	adds	r3, r7, r4
 800a858:	0018      	movs	r0, r3
 800a85a:	2314      	movs	r3, #20
 800a85c:	001a      	movs	r2, r3
 800a85e:	2100      	movs	r1, #0
 800a860:	f010 fc68 	bl	801b134 <memset>
  if(timHandle->Instance==TIM2)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	2380      	movs	r3, #128	@ 0x80
 800a86a:	05db      	lsls	r3, r3, #23
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d123      	bne.n	800a8b8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a870:	4b27      	ldr	r3, [pc, #156]	@ (800a910 <HAL_TIM_MspPostInit+0xc4>)
 800a872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a874:	4b26      	ldr	r3, [pc, #152]	@ (800a910 <HAL_TIM_MspPostInit+0xc4>)
 800a876:	2101      	movs	r1, #1
 800a878:	430a      	orrs	r2, r1
 800a87a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a87c:	4b24      	ldr	r3, [pc, #144]	@ (800a910 <HAL_TIM_MspPostInit+0xc4>)
 800a87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a880:	2201      	movs	r2, #1
 800a882:	4013      	ands	r3, r2
 800a884:	613b      	str	r3, [r7, #16]
 800a886:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800a888:	0021      	movs	r1, r4
 800a88a:	187b      	adds	r3, r7, r1
 800a88c:	220d      	movs	r2, #13
 800a88e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a890:	187b      	adds	r3, r7, r1
 800a892:	2202      	movs	r2, #2
 800a894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a896:	187b      	adds	r3, r7, r1
 800a898:	2200      	movs	r2, #0
 800a89a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a89c:	187b      	adds	r3, r7, r1
 800a89e:	2200      	movs	r2, #0
 800a8a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800a8a2:	187b      	adds	r3, r7, r1
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8a8:	187a      	adds	r2, r7, r1
 800a8aa:	23a0      	movs	r3, #160	@ 0xa0
 800a8ac:	05db      	lsls	r3, r3, #23
 800a8ae:	0011      	movs	r1, r2
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	f001 feb9 	bl	800c628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a8b6:	e027      	b.n	800a908 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a15      	ldr	r2, [pc, #84]	@ (800a914 <HAL_TIM_MspPostInit+0xc8>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d122      	bne.n	800a908 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8c2:	4b13      	ldr	r3, [pc, #76]	@ (800a910 <HAL_TIM_MspPostInit+0xc4>)
 800a8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c6:	4b12      	ldr	r3, [pc, #72]	@ (800a910 <HAL_TIM_MspPostInit+0xc4>)
 800a8c8:	2104      	movs	r1, #4
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a8ce:	4b10      	ldr	r3, [pc, #64]	@ (800a910 <HAL_TIM_MspPostInit+0xc4>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d2:	2204      	movs	r2, #4
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800a8da:	2114      	movs	r1, #20
 800a8dc:	187b      	adds	r3, r7, r1
 800a8de:	22e0      	movs	r2, #224	@ 0xe0
 800a8e0:	0052      	lsls	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8e4:	187b      	adds	r3, r7, r1
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ea:	187b      	adds	r3, r7, r1
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8f0:	187b      	adds	r3, r7, r1
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a8f6:	187b      	adds	r3, r7, r1
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8fc:	187b      	adds	r3, r7, r1
 800a8fe:	4a06      	ldr	r2, [pc, #24]	@ (800a918 <HAL_TIM_MspPostInit+0xcc>)
 800a900:	0019      	movs	r1, r3
 800a902:	0010      	movs	r0, r2
 800a904:	f001 fe90 	bl	800c628 <HAL_GPIO_Init>
}
 800a908:	46c0      	nop			@ (mov r8, r8)
 800a90a:	46bd      	mov	sp, r7
 800a90c:	b00b      	add	sp, #44	@ 0x2c
 800a90e:	bd90      	pop	{r4, r7, pc}
 800a910:	40021000 	.word	0x40021000
 800a914:	40000400 	.word	0x40000400
 800a918:	50000800 	.word	0x50000800

0800a91c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800a920:	4b17      	ldr	r3, [pc, #92]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a922:	4a18      	ldr	r2, [pc, #96]	@ (800a984 <MX_LPUART1_UART_Init+0x68>)
 800a924:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800a926:	4b16      	ldr	r3, [pc, #88]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a928:	22e1      	movs	r2, #225	@ 0xe1
 800a92a:	0252      	lsls	r2, r2, #9
 800a92c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a92e:	4b14      	ldr	r3, [pc, #80]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a930:	2200      	movs	r2, #0
 800a932:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a934:	4b12      	ldr	r3, [pc, #72]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a936:	2200      	movs	r2, #0
 800a938:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a93a:	4b11      	ldr	r3, [pc, #68]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a940:	4b0f      	ldr	r3, [pc, #60]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a942:	220c      	movs	r2, #12
 800a944:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a946:	4b0e      	ldr	r3, [pc, #56]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a948:	2200      	movs	r2, #0
 800a94a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a94c:	4b0c      	ldr	r3, [pc, #48]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a94e:	2200      	movs	r2, #0
 800a950:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800a952:	4b0b      	ldr	r3, [pc, #44]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a954:	2218      	movs	r2, #24
 800a956:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a95a:	2280      	movs	r2, #128	@ 0x80
 800a95c:	0212      	lsls	r2, r2, #8
 800a95e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800a960:	4b07      	ldr	r3, [pc, #28]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a962:	2280      	movs	r2, #128	@ 0x80
 800a964:	0152      	lsls	r2, r2, #5
 800a966:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a968:	4b05      	ldr	r3, [pc, #20]	@ (800a980 <MX_LPUART1_UART_Init+0x64>)
 800a96a:	0018      	movs	r0, r3
 800a96c:	f007 ffd8 	bl	8012920 <HAL_UART_Init>
 800a970:	1e03      	subs	r3, r0, #0
 800a972:	d001      	beq.n	800a978 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800a974:	f7fc f8ce 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a978:	46c0      	nop			@ (mov r8, r8)
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	46c0      	nop			@ (mov r8, r8)
 800a980:	20002174 	.word	0x20002174
 800a984:	40004800 	.word	0x40004800

0800a988 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a98c:	4b16      	ldr	r3, [pc, #88]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a98e:	4a17      	ldr	r2, [pc, #92]	@ (800a9ec <MX_USART1_UART_Init+0x64>)
 800a990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a992:	4b15      	ldr	r3, [pc, #84]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a994:	22e1      	movs	r2, #225	@ 0xe1
 800a996:	0252      	lsls	r2, r2, #9
 800a998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a99a:	4b13      	ldr	r3, [pc, #76]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a9a0:	4b11      	ldr	r3, [pc, #68]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a9a6:	4b10      	ldr	r3, [pc, #64]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a9ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9ae:	220c      	movs	r2, #12
 800a9b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a9b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a9be:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800a9c4:	4b08      	ldr	r3, [pc, #32]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9c6:	2208      	movs	r2, #8
 800a9c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800a9ca:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9cc:	2280      	movs	r2, #128	@ 0x80
 800a9ce:	0212      	lsls	r2, r2, #8
 800a9d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a9d2:	4b05      	ldr	r3, [pc, #20]	@ (800a9e8 <MX_USART1_UART_Init+0x60>)
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f007 ffa3 	bl	8012920 <HAL_UART_Init>
 800a9da:	1e03      	subs	r3, r0, #0
 800a9dc:	d001      	beq.n	800a9e2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800a9de:	f7fc f899 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a9e2:	46c0      	nop			@ (mov r8, r8)
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	2000222c 	.word	0x2000222c
 800a9ec:	40013800 	.word	0x40013800

0800a9f0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800a9f4:	4b14      	ldr	r3, [pc, #80]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800a9f6:	4a15      	ldr	r2, [pc, #84]	@ (800aa4c <MX_USART4_UART_Init+0x5c>)
 800a9f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a9fa:	4b13      	ldr	r3, [pc, #76]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800a9fc:	22e1      	movs	r2, #225	@ 0xe1
 800a9fe:	0252      	lsls	r2, r2, #9
 800aa00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800aa02:	4b11      	ldr	r3, [pc, #68]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800aa08:	4b0f      	ldr	r3, [pc, #60]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800aa0e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800aa14:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa16:	220c      	movs	r2, #12
 800aa18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa1a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa20:	4b09      	ldr	r3, [pc, #36]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa26:	4b08      	ldr	r3, [pc, #32]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa2c:	4b06      	ldr	r3, [pc, #24]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800aa32:	4b05      	ldr	r3, [pc, #20]	@ (800aa48 <MX_USART4_UART_Init+0x58>)
 800aa34:	0018      	movs	r0, r3
 800aa36:	f007 ff73 	bl	8012920 <HAL_UART_Init>
 800aa3a:	1e03      	subs	r3, r0, #0
 800aa3c:	d001      	beq.n	800aa42 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800aa3e:	f7fc f869 	bl	8006b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800aa42:	46c0      	nop			@ (mov r8, r8)
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	200022e4 	.word	0x200022e4
 800aa4c:	40004c00 	.word	0x40004c00

0800aa50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b08d      	sub	sp, #52	@ 0x34
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa58:	241c      	movs	r4, #28
 800aa5a:	193b      	adds	r3, r7, r4
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	2314      	movs	r3, #20
 800aa60:	001a      	movs	r2, r3
 800aa62:	2100      	movs	r1, #0
 800aa64:	f010 fb66 	bl	801b134 <memset>
  if(uartHandle->Instance==LPUART1)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a87      	ldr	r2, [pc, #540]	@ (800ac8c <HAL_UART_MspInit+0x23c>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d129      	bne.n	800aac6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800aa72:	4b87      	ldr	r3, [pc, #540]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aa74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa76:	4b86      	ldr	r3, [pc, #536]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aa78:	2180      	movs	r1, #128	@ 0x80
 800aa7a:	02c9      	lsls	r1, r1, #11
 800aa7c:	430a      	orrs	r2, r1
 800aa7e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa80:	4b83      	ldr	r3, [pc, #524]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aa82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa84:	4b82      	ldr	r3, [pc, #520]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aa86:	2104      	movs	r1, #4
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aa8c:	4b80      	ldr	r3, [pc, #512]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aa8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa90:	2204      	movs	r2, #4
 800aa92:	4013      	ands	r3, r2
 800aa94:	61bb      	str	r3, [r7, #24]
 800aa96:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800aa98:	0021      	movs	r1, r4
 800aa9a:	187b      	adds	r3, r7, r1
 800aa9c:	2203      	movs	r2, #3
 800aa9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaa0:	187b      	adds	r3, r7, r1
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaa6:	187b      	adds	r3, r7, r1
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaac:	187b      	adds	r3, r7, r1
 800aaae:	2203      	movs	r2, #3
 800aab0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800aab2:	187b      	adds	r3, r7, r1
 800aab4:	2206      	movs	r2, #6
 800aab6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aab8:	187b      	adds	r3, r7, r1
 800aaba:	4a76      	ldr	r2, [pc, #472]	@ (800ac94 <HAL_UART_MspInit+0x244>)
 800aabc:	0019      	movs	r1, r3
 800aabe:	0010      	movs	r0, r2
 800aac0:	f001 fdb2 	bl	800c628 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800aac4:	e0dd      	b.n	800ac82 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a73      	ldr	r2, [pc, #460]	@ (800ac98 <HAL_UART_MspInit+0x248>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d12b      	bne.n	800ab28 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800aad0:	4b6f      	ldr	r3, [pc, #444]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aad4:	4b6e      	ldr	r3, [pc, #440]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aad6:	2180      	movs	r1, #128	@ 0x80
 800aad8:	01c9      	lsls	r1, r1, #7
 800aada:	430a      	orrs	r2, r1
 800aadc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aade:	4b6c      	ldr	r3, [pc, #432]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae2:	4b6b      	ldr	r3, [pc, #428]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aae4:	2101      	movs	r1, #1
 800aae6:	430a      	orrs	r2, r1
 800aae8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aaea:	4b69      	ldr	r3, [pc, #420]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800aaf6:	211c      	movs	r1, #28
 800aaf8:	187b      	adds	r3, r7, r1
 800aafa:	22c0      	movs	r2, #192	@ 0xc0
 800aafc:	00d2      	lsls	r2, r2, #3
 800aafe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab00:	187b      	adds	r3, r7, r1
 800ab02:	2202      	movs	r2, #2
 800ab04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab06:	187b      	adds	r3, r7, r1
 800ab08:	2200      	movs	r2, #0
 800ab0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab0c:	187b      	adds	r3, r7, r1
 800ab0e:	2203      	movs	r2, #3
 800ab10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800ab12:	187b      	adds	r3, r7, r1
 800ab14:	2204      	movs	r2, #4
 800ab16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab18:	187a      	adds	r2, r7, r1
 800ab1a:	23a0      	movs	r3, #160	@ 0xa0
 800ab1c:	05db      	lsls	r3, r3, #23
 800ab1e:	0011      	movs	r1, r2
 800ab20:	0018      	movs	r0, r3
 800ab22:	f001 fd81 	bl	800c628 <HAL_GPIO_Init>
}
 800ab26:	e0ac      	b.n	800ac82 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a5b      	ldr	r2, [pc, #364]	@ (800ac9c <HAL_UART_MspInit+0x24c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d000      	beq.n	800ab34 <HAL_UART_MspInit+0xe4>
 800ab32:	e0a6      	b.n	800ac82 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 800ab34:	4b56      	ldr	r3, [pc, #344]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab38:	4b55      	ldr	r3, [pc, #340]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab3a:	2180      	movs	r1, #128	@ 0x80
 800ab3c:	0309      	lsls	r1, r1, #12
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab42:	4b53      	ldr	r3, [pc, #332]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab46:	4b52      	ldr	r3, [pc, #328]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab48:	2101      	movs	r1, #1
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ab4e:	4b50      	ldr	r3, [pc, #320]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab52:	2201      	movs	r2, #1
 800ab54:	4013      	ands	r3, r2
 800ab56:	613b      	str	r3, [r7, #16]
 800ab58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab5a:	4b4d      	ldr	r3, [pc, #308]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab5e:	4b4c      	ldr	r3, [pc, #304]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab60:	2104      	movs	r1, #4
 800ab62:	430a      	orrs	r2, r1
 800ab64:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ab66:	4b4a      	ldr	r3, [pc, #296]	@ (800ac90 <HAL_UART_MspInit+0x240>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6a:	2204      	movs	r2, #4
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ab72:	241c      	movs	r4, #28
 800ab74:	193b      	adds	r3, r7, r4
 800ab76:	2202      	movs	r2, #2
 800ab78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab7a:	193b      	adds	r3, r7, r4
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab80:	193b      	adds	r3, r7, r4
 800ab82:	2200      	movs	r2, #0
 800ab84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab86:	193b      	adds	r3, r7, r4
 800ab88:	2203      	movs	r2, #3
 800ab8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ab8c:	193b      	adds	r3, r7, r4
 800ab8e:	2206      	movs	r2, #6
 800ab90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab92:	193a      	adds	r2, r7, r4
 800ab94:	23a0      	movs	r3, #160	@ 0xa0
 800ab96:	05db      	lsls	r3, r3, #23
 800ab98:	0011      	movs	r1, r2
 800ab9a:	0018      	movs	r0, r3
 800ab9c:	f001 fd44 	bl	800c628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800aba0:	0021      	movs	r1, r4
 800aba2:	187b      	adds	r3, r7, r1
 800aba4:	2280      	movs	r2, #128	@ 0x80
 800aba6:	00d2      	lsls	r2, r2, #3
 800aba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abaa:	187b      	adds	r3, r7, r1
 800abac:	2202      	movs	r2, #2
 800abae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb0:	187b      	adds	r3, r7, r1
 800abb2:	2200      	movs	r2, #0
 800abb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abb6:	187b      	adds	r3, r7, r1
 800abb8:	2203      	movs	r2, #3
 800abba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	2206      	movs	r2, #6
 800abc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abc2:	187b      	adds	r3, r7, r1
 800abc4:	4a33      	ldr	r2, [pc, #204]	@ (800ac94 <HAL_UART_MspInit+0x244>)
 800abc6:	0019      	movs	r1, r3
 800abc8:	0010      	movs	r0, r2
 800abca:	f001 fd2d 	bl	800c628 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800abce:	4b34      	ldr	r3, [pc, #208]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abd0:	4a34      	ldr	r2, [pc, #208]	@ (800aca4 <HAL_UART_MspInit+0x254>)
 800abd2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800abd4:	4b32      	ldr	r3, [pc, #200]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abd6:	220c      	movs	r2, #12
 800abd8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abda:	4b31      	ldr	r3, [pc, #196]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abdc:	2200      	movs	r2, #0
 800abde:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800abe0:	4b2f      	ldr	r3, [pc, #188]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800abe6:	4b2e      	ldr	r3, [pc, #184]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abe8:	2280      	movs	r2, #128	@ 0x80
 800abea:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abec:	4b2c      	ldr	r3, [pc, #176]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abee:	2200      	movs	r2, #0
 800abf0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abf2:	4b2b      	ldr	r3, [pc, #172]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800abf8:	4b29      	ldr	r3, [pc, #164]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800abfa:	2220      	movs	r2, #32
 800abfc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800abfe:	4b28      	ldr	r3, [pc, #160]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800ac04:	4b26      	ldr	r3, [pc, #152]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800ac06:	0018      	movs	r0, r3
 800ac08:	f001 f8f2 	bl	800bdf0 <HAL_DMA_Init>
 800ac0c:	1e03      	subs	r3, r0, #0
 800ac0e:	d001      	beq.n	800ac14 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 800ac10:	f7fb ff80 	bl	8006b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a22      	ldr	r2, [pc, #136]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800ac18:	675a      	str	r2, [r3, #116]	@ 0x74
 800ac1a:	4b21      	ldr	r3, [pc, #132]	@ (800aca0 <HAL_UART_MspInit+0x250>)
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800ac20:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac22:	4a22      	ldr	r2, [pc, #136]	@ (800acac <HAL_UART_MspInit+0x25c>)
 800ac24:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800ac26:	4b20      	ldr	r3, [pc, #128]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac28:	220c      	movs	r2, #12
 800ac2a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac2c:	4b1e      	ldr	r3, [pc, #120]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac2e:	2210      	movs	r2, #16
 800ac30:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac32:	4b1d      	ldr	r3, [pc, #116]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ac38:	4b1b      	ldr	r3, [pc, #108]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac3a:	2280      	movs	r2, #128	@ 0x80
 800ac3c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac44:	4b18      	ldr	r3, [pc, #96]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800ac4a:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ac50:	4b15      	ldr	r3, [pc, #84]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800ac56:	4b14      	ldr	r3, [pc, #80]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac58:	0018      	movs	r0, r3
 800ac5a:	f001 f8c9 	bl	800bdf0 <HAL_DMA_Init>
 800ac5e:	1e03      	subs	r3, r0, #0
 800ac60:	d001      	beq.n	800ac66 <HAL_UART_MspInit+0x216>
      Error_Handler();
 800ac62:	f7fb ff57 	bl	8006b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a0f      	ldr	r2, [pc, #60]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac6a:	671a      	str	r2, [r3, #112]	@ 0x70
 800ac6c:	4b0e      	ldr	r3, [pc, #56]	@ (800aca8 <HAL_UART_MspInit+0x258>)
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800ac72:	2200      	movs	r2, #0
 800ac74:	2100      	movs	r1, #0
 800ac76:	200e      	movs	r0, #14
 800ac78:	f001 f888 	bl	800bd8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800ac7c:	200e      	movs	r0, #14
 800ac7e:	f001 f89a 	bl	800bdb6 <HAL_NVIC_EnableIRQ>
}
 800ac82:	46c0      	nop			@ (mov r8, r8)
 800ac84:	46bd      	mov	sp, r7
 800ac86:	b00d      	add	sp, #52	@ 0x34
 800ac88:	bd90      	pop	{r4, r7, pc}
 800ac8a:	46c0      	nop			@ (mov r8, r8)
 800ac8c:	40004800 	.word	0x40004800
 800ac90:	40021000 	.word	0x40021000
 800ac94:	50000800 	.word	0x50000800
 800ac98:	40013800 	.word	0x40013800
 800ac9c:	40004c00 	.word	0x40004c00
 800aca0:	2000239c 	.word	0x2000239c
 800aca4:	4002006c 	.word	0x4002006c
 800aca8:	200023e4 	.word	0x200023e4
 800acac:	40020080 	.word	0x40020080

0800acb0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 80

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800acb8:	f000 fbf2 	bl	800b4a0 <HAL_GetTick>
 800acbc:	0003      	movs	r3, r0
 800acbe:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800acc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad34 <TimestampIsReached+0x84>)
 800acc2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d307      	bcc.n	800acdc <TimestampIsReached+0x2c>
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d901      	bls.n	800acdc <TimestampIsReached+0x2c>
 800acd8:	2201      	movs	r2, #1
 800acda:	e000      	b.n	800acde <TimestampIsReached+0x2e>
 800acdc:	2200      	movs	r2, #0
 800acde:	230f      	movs	r3, #15
 800ace0:	18fb      	adds	r3, r7, r3
 800ace2:	701a      	strb	r2, [r3, #0]
 800ace4:	781a      	ldrb	r2, [r3, #0]
 800ace6:	2101      	movs	r1, #1
 800ace8:	400a      	ands	r2, r1
 800acea:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d207      	bcs.n	800ad04 <TimestampIsReached+0x54>
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d201      	bcs.n	800ad04 <TimestampIsReached+0x54>
 800ad00:	2201      	movs	r2, #1
 800ad02:	e000      	b.n	800ad06 <TimestampIsReached+0x56>
 800ad04:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800ad06:	200e      	movs	r0, #14
 800ad08:	183b      	adds	r3, r7, r0
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	781a      	ldrb	r2, [r3, #0]
 800ad0e:	2101      	movs	r1, #1
 800ad10:	400a      	ands	r2, r1
 800ad12:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800ad14:	230f      	movs	r3, #15
 800ad16:	18fb      	adds	r3, r7, r3
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d103      	bne.n	800ad26 <TimestampIsReached+0x76>
 800ad1e:	183b      	adds	r3, r7, r0
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b006      	add	sp, #24
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	7fffffff 	.word	0x7fffffff

0800ad38 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800ad40:	f000 fbae 	bl	800b4a0 <HAL_GetTick>
 800ad44:	0002      	movs	r2, r0
 800ad46:	4904      	ldr	r1, [pc, #16]	@ (800ad58 <AddTimestamp+0x20>)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	f010 f94e 	bl	801afec <siprintf>
}
 800ad50:	46c0      	nop			@ (mov r8, r8)
 800ad52:	46bd      	mov	sp, r7
 800ad54:	b002      	add	sp, #8
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	0801ed14 	.word	0x0801ed14

0800ad5c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800ad5c:	b40c      	push	{r2, r3}
 800ad5e:	b590      	push	{r4, r7, lr}
 800ad60:	b099      	sub	sp, #100	@ 0x64
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	0002      	movs	r2, r0
 800ad66:	6039      	str	r1, [r7, #0]
 800ad68:	1dfb      	adds	r3, r7, #7
 800ad6a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800ad6c:	4b1f      	ldr	r3, [pc, #124]	@ (800adec <CreateLine+0x90>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	1dfa      	adds	r2, r7, #7
 800ad72:	7812      	ldrb	r2, [r2, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d832      	bhi.n	800adde <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	491d      	ldr	r1, [pc, #116]	@ (800adf0 <CreateLine+0x94>)
 800ad7c:	240c      	movs	r4, #12
 800ad7e:	193b      	adds	r3, r7, r4
 800ad80:	0018      	movs	r0, r3
 800ad82:	f010 f933 	bl	801afec <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800ad86:	4b19      	ldr	r3, [pc, #100]	@ (800adec <CreateLine+0x90>)
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d909      	bls.n	800ada2 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800ad8e:	193b      	adds	r3, r7, r4
 800ad90:	0018      	movs	r0, r3
 800ad92:	f7f5 f9e1 	bl	8000158 <strlen>
 800ad96:	0002      	movs	r2, r0
 800ad98:	193b      	adds	r3, r7, r4
 800ad9a:	189b      	adds	r3, r3, r2
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	f7ff ffcb 	bl	800ad38 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800ada2:	240c      	movs	r4, #12
 800ada4:	193b      	adds	r3, r7, r4
 800ada6:	0018      	movs	r0, r3
 800ada8:	f7f5 f9d6 	bl	8000158 <strlen>
 800adac:	0003      	movs	r3, r0
 800adae:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800adb0:	236c      	movs	r3, #108	@ 0x6c
 800adb2:	2208      	movs	r2, #8
 800adb4:	189b      	adds	r3, r3, r2
 800adb6:	19db      	adds	r3, r3, r7
 800adb8:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800adba:	193a      	adds	r2, r7, r4
 800adbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adbe:	18d0      	adds	r0, r2, r3
 800adc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adc2:	2250      	movs	r2, #80	@ 0x50
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	0019      	movs	r1, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800adcc:	f010 f9a6 	bl	801b11c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800add0:	193a      	adds	r2, r7, r4
 800add2:	4b08      	ldr	r3, [pc, #32]	@ (800adf4 <CreateLine+0x98>)
 800add4:	0011      	movs	r1, r2
 800add6:	0018      	movs	r0, r3
 800add8:	f010 f8f8 	bl	801afcc <iprintf>
 800addc:	e000      	b.n	800ade0 <CreateLine+0x84>
    return;
 800adde:	46c0      	nop			@ (mov r8, r8)
}
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b019      	add	sp, #100	@ 0x64
 800ade4:	bc90      	pop	{r4, r7}
 800ade6:	bc08      	pop	{r3}
 800ade8:	b002      	add	sp, #8
 800adea:	4718      	bx	r3
 800adec:	20000074 	.word	0x20000074
 800adf0:	0801ed20 	.word	0x0801ed20
 800adf4:	0801ed24 	.word	0x0801ed24

0800adf8 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	4804      	ldr	r0, [pc, #16]	@ (800ae1c <_write+0x24>)
 800ae0c:	2364      	movs	r3, #100	@ 0x64
 800ae0e:	f007 fded 	bl	80129ec <HAL_UART_Transmit>
  return count;
 800ae12:	687b      	ldr	r3, [r7, #4]
}
 800ae14:	0018      	movs	r0, r3
 800ae16:	46bd      	mov	sp, r7
 800ae18:	b004      	add	sp, #16
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	2000222c 	.word	0x2000222c

0800ae20 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	0002      	movs	r2, r0
 800ae28:	1dfb      	adds	r3, r7, #7
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	4b03      	ldr	r3, [pc, #12]	@ (800ae3c <SetVerboseLevel+0x1c>)
 800ae2e:	1dfa      	adds	r2, r7, #7
 800ae30:	7812      	ldrb	r2, [r2, #0]
 800ae32:	701a      	strb	r2, [r3, #0]
 800ae34:	46c0      	nop			@ (mov r8, r8)
 800ae36:	46bd      	mov	sp, r7
 800ae38:	b002      	add	sp, #8
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000074 	.word	0x20000074

0800ae40 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ae44:	f000 fb2c 	bl	800b4a0 <HAL_GetTick>
 800ae48:	0003      	movs	r3, r0
}
 800ae4a:	0018      	movs	r0, r3
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800ae56:	4a0f      	ldr	r2, [pc, #60]	@ (800ae94 <BinaryReleaseInfo+0x44>)
 800ae58:	4b0f      	ldr	r3, [pc, #60]	@ (800ae98 <BinaryReleaseInfo+0x48>)
 800ae5a:	0019      	movs	r1, r3
 800ae5c:	2002      	movs	r0, #2
 800ae5e:	f7ff ff7d 	bl	800ad5c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800ae62:	480e      	ldr	r0, [pc, #56]	@ (800ae9c <BinaryReleaseInfo+0x4c>)
 800ae64:	4a0e      	ldr	r2, [pc, #56]	@ (800aea0 <BinaryReleaseInfo+0x50>)
 800ae66:	490c      	ldr	r1, [pc, #48]	@ (800ae98 <BinaryReleaseInfo+0x48>)
 800ae68:	4b0e      	ldr	r3, [pc, #56]	@ (800aea4 <BinaryReleaseInfo+0x54>)
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	0003      	movs	r3, r0
 800ae6e:	2002      	movs	r0, #2
 800ae70:	f7ff ff74 	bl	800ad5c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w46a");
 800ae74:	4a0c      	ldr	r2, [pc, #48]	@ (800aea8 <BinaryReleaseInfo+0x58>)
 800ae76:	4b08      	ldr	r3, [pc, #32]	@ (800ae98 <BinaryReleaseInfo+0x48>)
 800ae78:	0019      	movs	r1, r3
 800ae7a:	2002      	movs	r0, #2
 800ae7c:	f7ff ff6e 	bl	800ad5c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800ae80:	4b0a      	ldr	r3, [pc, #40]	@ (800aeac <BinaryReleaseInfo+0x5c>)
 800ae82:	4a0b      	ldr	r2, [pc, #44]	@ (800aeb0 <BinaryReleaseInfo+0x60>)
 800ae84:	4904      	ldr	r1, [pc, #16]	@ (800ae98 <BinaryReleaseInfo+0x48>)
 800ae86:	2002      	movs	r0, #2
 800ae88:	f7ff ff68 	bl	800ad5c <CreateLine>
}
 800ae8c:	46c0      	nop			@ (mov r8, r8)
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	46c0      	nop			@ (mov r8, r8)
 800ae94:	0801ed2c 	.word	0x0801ed2c
 800ae98:	0801ed58 	.word	0x0801ed58
 800ae9c:	0801ed5c 	.word	0x0801ed5c
 800aea0:	0801ed68 	.word	0x0801ed68
 800aea4:	0801ed7c 	.word	0x0801ed7c
 800aea8:	0801ed88 	.word	0x0801ed88
 800aeac:	0801ed94 	.word	0x0801ed94
 800aeb0:	0801ed9c 	.word	0x0801ed9c

0800aeb4 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	4803      	ldr	r0, [pc, #12]	@ (800aed4 <errorHandler+0x20>)
 800aec8:	f010 f880 	bl	801afcc <iprintf>
//    while (true)
//    {
//    }
}
 800aecc:	46c0      	nop			@ (mov r8, r8)
 800aece:	46bd      	mov	sp, r7
 800aed0:	b004      	add	sp, #16
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	0801edb4 	.word	0x0801edb4

0800aed8 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800aed8:	b590      	push	{r4, r7, lr}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6039      	str	r1, [r7, #0]
 800aee0:	0011      	movs	r1, r2
 800aee2:	1dfb      	adds	r3, r7, #7
 800aee4:	1c02      	adds	r2, r0, #0
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	1dbb      	adds	r3, r7, #6
 800aeea:	1c0a      	adds	r2, r1, #0
 800aeec:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800aeee:	4b0a      	ldr	r3, [pc, #40]	@ (800af18 <ReadRegister+0x40>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800aef6:	4b08      	ldr	r3, [pc, #32]	@ (800af18 <ReadRegister+0x40>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	1dba      	adds	r2, r7, #6
 800aefc:	7814      	ldrb	r4, [r2, #0]
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	1dfa      	adds	r2, r7, #7
 800af02:	7810      	ldrb	r0, [r2, #0]
 800af04:	0022      	movs	r2, r4
 800af06:	4798      	blx	r3
 800af08:	0003      	movs	r3, r0
 800af0a:	e000      	b.n	800af0e <ReadRegister+0x36>
	}
	return false;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	0018      	movs	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	b003      	add	sp, #12
 800af14:	bd90      	pop	{r4, r7, pc}
 800af16:	46c0      	nop			@ (mov r8, r8)
 800af18:	2000242c 	.word	0x2000242c

0800af1c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800af1c:	b590      	push	{r4, r7, lr}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6039      	str	r1, [r7, #0]
 800af24:	0011      	movs	r1, r2
 800af26:	1dfb      	adds	r3, r7, #7
 800af28:	1c02      	adds	r2, r0, #0
 800af2a:	701a      	strb	r2, [r3, #0]
 800af2c:	1dbb      	adds	r3, r7, #6
 800af2e:	1c0a      	adds	r2, r1, #0
 800af30:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800af32:	4b0a      	ldr	r3, [pc, #40]	@ (800af5c <WriteRegister+0x40>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800af3a:	4b08      	ldr	r3, [pc, #32]	@ (800af5c <WriteRegister+0x40>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	1dba      	adds	r2, r7, #6
 800af40:	7814      	ldrb	r4, [r2, #0]
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	1dfa      	adds	r2, r7, #7
 800af46:	7810      	ldrb	r0, [r2, #0]
 800af48:	0022      	movs	r2, r4
 800af4a:	4798      	blx	r3
 800af4c:	0003      	movs	r3, r0
 800af4e:	e000      	b.n	800af52 <WriteRegister+0x36>
  }
  return false;
 800af50:	2300      	movs	r3, #0
}
 800af52:	0018      	movs	r0, r3
 800af54:	46bd      	mov	sp, r7
 800af56:	b003      	add	sp, #12
 800af58:	bd90      	pop	{r4, r7, pc}
 800af5a:	46c0      	nop			@ (mov r8, r8)
 800af5c:	20002430 	.word	0x20002430

0800af60 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	000a      	movs	r2, r1
 800af6a:	1cfb      	adds	r3, r7, #3
 800af6c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800af6e:	230f      	movs	r3, #15
 800af70:	18fb      	adds	r3, r7, r3
 800af72:	22ff      	movs	r2, #255	@ 0xff
 800af74:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800af76:	230e      	movs	r3, #14
 800af78:	18fb      	adds	r3, r7, r3
 800af7a:	2200      	movs	r2, #0
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	e037      	b.n	800aff0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800af80:	230e      	movs	r3, #14
 800af82:	18fb      	adds	r3, r7, r3
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	18d3      	adds	r3, r2, r3
 800af8a:	7819      	ldrb	r1, [r3, #0]
 800af8c:	220f      	movs	r2, #15
 800af8e:	18bb      	adds	r3, r7, r2
 800af90:	18ba      	adds	r2, r7, r2
 800af92:	7812      	ldrb	r2, [r2, #0]
 800af94:	404a      	eors	r2, r1
 800af96:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800af98:	230d      	movs	r3, #13
 800af9a:	18fb      	adds	r3, r7, r3
 800af9c:	2200      	movs	r2, #0
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	e01b      	b.n	800afda <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800afa2:	210f      	movs	r1, #15
 800afa4:	187b      	adds	r3, r7, r1
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	b25b      	sxtb	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	da09      	bge.n	800afc2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800afae:	187b      	adds	r3, r7, r1
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	b25b      	sxtb	r3, r3
 800afb6:	2231      	movs	r2, #49	@ 0x31
 800afb8:	4053      	eors	r3, r2
 800afba:	b25a      	sxtb	r2, r3
 800afbc:	187b      	adds	r3, r7, r1
 800afbe:	701a      	strb	r2, [r3, #0]
 800afc0:	e005      	b.n	800afce <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800afc2:	230f      	movs	r3, #15
 800afc4:	18fa      	adds	r2, r7, r3
 800afc6:	18fb      	adds	r3, r7, r3
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	18db      	adds	r3, r3, r3
 800afcc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800afce:	210d      	movs	r1, #13
 800afd0:	187b      	adds	r3, r7, r1
 800afd2:	781a      	ldrb	r2, [r3, #0]
 800afd4:	187b      	adds	r3, r7, r1
 800afd6:	3201      	adds	r2, #1
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	230d      	movs	r3, #13
 800afdc:	18fb      	adds	r3, r7, r3
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b07      	cmp	r3, #7
 800afe2:	d9de      	bls.n	800afa2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800afe4:	210e      	movs	r1, #14
 800afe6:	187b      	adds	r3, r7, r1
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	187b      	adds	r3, r7, r1
 800afec:	3201      	adds	r2, #1
 800afee:	701a      	strb	r2, [r3, #0]
 800aff0:	230e      	movs	r3, #14
 800aff2:	18fa      	adds	r2, r7, r3
 800aff4:	1cfb      	adds	r3, r7, #3
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d3c0      	bcc.n	800af80 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800affe:	230f      	movs	r3, #15
 800b000:	18fb      	adds	r3, r7, r3
 800b002:	781b      	ldrb	r3, [r3, #0]
}
 800b004:	0018      	movs	r0, r3
 800b006:	46bd      	mov	sp, r7
 800b008:	b004      	add	sp, #16
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800b016:	4b0a      	ldr	r3, [pc, #40]	@ (800b040 <HIDS_Init+0x34>)
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800b01c:	4b09      	ldr	r3, [pc, #36]	@ (800b044 <HIDS_Init+0x38>)
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800b022:	4b09      	ldr	r3, [pc, #36]	@ (800b048 <HIDS_Init+0x3c>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	0018      	movs	r0, r3
 800b028:	f000 f8da 	bl	800b1e0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800b02c:	4b07      	ldr	r3, [pc, #28]	@ (800b04c <HIDS_Init+0x40>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	0018      	movs	r0, r3
 800b032:	f000 f82b 	bl	800b08c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800b036:	46c0      	nop			@ (mov r8, r8)
 800b038:	46bd      	mov	sp, r7
 800b03a:	b002      	add	sp, #8
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	46c0      	nop			@ (mov r8, r8)
 800b040:	2000242c 	.word	0x2000242c
 800b044:	20002430 	.word	0x20002430
 800b048:	20000076 	.word	0x20000076
 800b04c:	20000075 	.word	0x20000075

0800b050 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800b050:	b580      	push	{r7, lr}
 800b052:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800b054:	f7ff fef4 	bl	800ae40 <GetCurrentHalTicks>
 800b058:	0002      	movs	r2, r0
 800b05a:	4b08      	ldr	r3, [pc, #32]	@ (800b07c <HIDS_StartMeasurement+0x2c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	18d2      	adds	r2, r2, r3
 800b060:	4b07      	ldr	r3, [pc, #28]	@ (800b080 <HIDS_StartMeasurement+0x30>)
 800b062:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800b064:	4b07      	ldr	r3, [pc, #28]	@ (800b084 <HIDS_StartMeasurement+0x34>)
 800b066:	2201      	movs	r2, #1
 800b068:	0019      	movs	r1, r3
 800b06a:	2044      	movs	r0, #68	@ 0x44
 800b06c:	f7ff ff56 	bl	800af1c <WriteRegister>
  MeasurementDone = false;
 800b070:	4b05      	ldr	r3, [pc, #20]	@ (800b088 <HIDS_StartMeasurement+0x38>)
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]
}
 800b076:	46c0      	nop			@ (mov r8, r8)
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	2000007c 	.word	0x2000007c
 800b080:	20000078 	.word	0x20000078
 800b084:	20000076 	.word	0x20000076
 800b088:	20002442 	.word	0x20002442

0800b08c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	0002      	movs	r2, r0
 800b094:	1dfb      	adds	r3, r7, #7
 800b096:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800b098:	4b03      	ldr	r3, [pc, #12]	@ (800b0a8 <HIDS_SetHeaterMode+0x1c>)
 800b09a:	1dfa      	adds	r2, r7, #7
 800b09c:	7812      	ldrb	r2, [r2, #0]
 800b09e:	701a      	strb	r2, [r3, #0]
}
 800b0a0:	46c0      	nop			@ (mov r8, r8)
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20000075 	.word	0x20000075

0800b0ac <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800b0ac:	b590      	push	{r4, r7, lr}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	781a      	ldrb	r2, [r3, #0]
 800b0b8:	210c      	movs	r1, #12
 800b0ba:	187b      	adds	r3, r7, r1
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	785a      	ldrb	r2, [r3, #1]
 800b0c2:	187b      	adds	r3, r7, r1
 800b0c4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800b0c6:	240f      	movs	r4, #15
 800b0c8:	193b      	adds	r3, r7, r4
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	7892      	ldrb	r2, [r2, #2]
 800b0ce:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800b0d0:	187b      	adds	r3, r7, r1
 800b0d2:	2102      	movs	r1, #2
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	f7ff ff43 	bl	800af60 <CalculateCRC>
 800b0da:	0003      	movs	r3, r0
 800b0dc:	001a      	movs	r2, r3
 800b0de:	193b      	adds	r3, r7, r4
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d007      	beq.n	800b0f6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800b0e6:	4a1a      	ldr	r2, [pc, #104]	@ (800b150 <CheckCRC+0xa4>)
 800b0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b154 <CheckCRC+0xa8>)
 800b0ea:	0019      	movs	r1, r3
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	f7ff fe35 	bl	800ad5c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e027      	b.n	800b146 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	78da      	ldrb	r2, [r3, #3]
 800b0fa:	2108      	movs	r1, #8
 800b0fc:	187b      	adds	r3, r7, r1
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	791a      	ldrb	r2, [r3, #4]
 800b104:	187b      	adds	r3, r7, r1
 800b106:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800b108:	240e      	movs	r4, #14
 800b10a:	193b      	adds	r3, r7, r4
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	7952      	ldrb	r2, [r2, #5]
 800b110:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800b112:	187b      	adds	r3, r7, r1
 800b114:	2102      	movs	r1, #2
 800b116:	0018      	movs	r0, r3
 800b118:	f7ff ff22 	bl	800af60 <CalculateCRC>
 800b11c:	0003      	movs	r3, r0
 800b11e:	001a      	movs	r2, r3
 800b120:	193b      	adds	r3, r7, r4
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	4293      	cmp	r3, r2
 800b126:	d00d      	beq.n	800b144 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800b128:	4a0b      	ldr	r2, [pc, #44]	@ (800b158 <CheckCRC+0xac>)
 800b12a:	4b0a      	ldr	r3, [pc, #40]	@ (800b154 <CheckCRC+0xa8>)
 800b12c:	0019      	movs	r1, r3
 800b12e:	2001      	movs	r0, #1
 800b130:	f7ff fe14 	bl	800ad5c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800b134:	4a09      	ldr	r2, [pc, #36]	@ (800b15c <CheckCRC+0xb0>)
 800b136:	4b0a      	ldr	r3, [pc, #40]	@ (800b160 <CheckCRC+0xb4>)
 800b138:	2170      	movs	r1, #112	@ 0x70
 800b13a:	0018      	movs	r0, r3
 800b13c:	f7ff feba 	bl	800aeb4 <errorHandler>
		return false;
 800b140:	2300      	movs	r3, #0
 800b142:	e000      	b.n	800b146 <CheckCRC+0x9a>
	}
	return true;
 800b144:	2301      	movs	r3, #1
}
 800b146:	0018      	movs	r0, r3
 800b148:	46bd      	mov	sp, r7
 800b14a:	b005      	add	sp, #20
 800b14c:	bd90      	pop	{r4, r7, pc}
 800b14e:	46c0      	nop			@ (mov r8, r8)
 800b150:	0801ee00 	.word	0x0801ee00
 800b154:	0801ee28 	.word	0x0801ee28
 800b158:	0801ee2c 	.word	0x0801ee2c
 800b15c:	0801ee58 	.word	0x0801ee58
 800b160:	0801f2c4 	.word	0x0801f2c4

0800b164 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800b16a:	1dbb      	adds	r3, r7, #6
 800b16c:	2289      	movs	r2, #137	@ 0x89
 800b16e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800b170:	1dbb      	adds	r3, r7, #6
 800b172:	2201      	movs	r2, #1
 800b174:	0019      	movs	r1, r3
 800b176:	2044      	movs	r0, #68	@ 0x44
 800b178:	f7ff fed0 	bl	800af1c <WriteRegister>
	HAL_Delay(30);
 800b17c:	201e      	movs	r0, #30
 800b17e:	f000 f999 	bl	800b4b4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800b182:	4b14      	ldr	r3, [pc, #80]	@ (800b1d4 <HIDS_DeviceConnected+0x70>)
 800b184:	2206      	movs	r2, #6
 800b186:	0019      	movs	r1, r3
 800b188:	2044      	movs	r0, #68	@ 0x44
 800b18a:	f7ff fea5 	bl	800aed8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800b18e:	1dfb      	adds	r3, r7, #7
 800b190:	2200      	movs	r2, #0
 800b192:	701a      	strb	r2, [r3, #0]
 800b194:	e011      	b.n	800b1ba <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800b196:	1dfb      	adds	r3, r7, #7
 800b198:	7818      	ldrb	r0, [r3, #0]
 800b19a:	1dfb      	adds	r3, r7, #7
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	4a0d      	ldr	r2, [pc, #52]	@ (800b1d4 <HIDS_DeviceConnected+0x70>)
 800b1a0:	5cd3      	ldrb	r3, [r2, r3]
 800b1a2:	4a0d      	ldr	r2, [pc, #52]	@ (800b1d8 <HIDS_DeviceConnected+0x74>)
 800b1a4:	490d      	ldr	r1, [pc, #52]	@ (800b1dc <HIDS_DeviceConnected+0x78>)
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	0003      	movs	r3, r0
 800b1aa:	2002      	movs	r0, #2
 800b1ac:	f7ff fdd6 	bl	800ad5c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800b1b0:	1dfb      	adds	r3, r7, #7
 800b1b2:	781a      	ldrb	r2, [r3, #0]
 800b1b4:	1dfb      	adds	r3, r7, #7
 800b1b6:	3201      	adds	r2, #1
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	1dfb      	adds	r3, r7, #7
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2b05      	cmp	r3, #5
 800b1c0:	d9e9      	bls.n	800b196 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800b1c2:	4b04      	ldr	r3, [pc, #16]	@ (800b1d4 <HIDS_DeviceConnected+0x70>)
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f7ff ff71 	bl	800b0ac <CheckCRC>
 800b1ca:	0003      	movs	r3, r0
}
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	b002      	add	sp, #8
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20002434 	.word	0x20002434
 800b1d8:	0801ee70 	.word	0x0801ee70
 800b1dc:	0801edfc 	.word	0x0801edfc

0800b1e0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	0002      	movs	r2, r0
 800b1e8:	1dfb      	adds	r3, r7, #7
 800b1ea:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800b1ec:	4b03      	ldr	r3, [pc, #12]	@ (800b1fc <HIDS_SetMeasurementMode+0x1c>)
 800b1ee:	1dfa      	adds	r2, r7, #7
 800b1f0:	7812      	ldrb	r2, [r2, #0]
 800b1f2:	701a      	strb	r2, [r3, #0]
}
 800b1f4:	46c0      	nop			@ (mov r8, r8)
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	b002      	add	sp, #8
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000076 	.word	0x20000076

0800b200 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800b200:	b580      	push	{r7, lr}
 800b202:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800b204:	4b04      	ldr	r3, [pc, #16]	@ (800b218 <HIDS_MeasurementReady+0x18>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	0018      	movs	r0, r3
 800b20a:	f7ff fd51 	bl	800acb0 <TimestampIsReached>
 800b20e:	0003      	movs	r3, r0
}
 800b210:	0018      	movs	r0, r3
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	46c0      	nop			@ (mov r8, r8)
 800b218:	20000078 	.word	0x20000078

0800b21c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800b21c:	b590      	push	{r4, r7, lr}
 800b21e:	b089      	sub	sp, #36	@ 0x24
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800b226:	4b4e      	ldr	r3, [pc, #312]	@ (800b360 <HIDS_GetMeasurementValues+0x144>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <HIDS_GetMeasurementValues+0x16>
 800b22e:	2301      	movs	r3, #1
 800b230:	e091      	b.n	800b356 <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 800b232:	f7ff ffe5 	bl	800b200 <HIDS_MeasurementReady>
 800b236:	0003      	movs	r3, r0
 800b238:	001a      	movs	r2, r3
 800b23a:	2301      	movs	r3, #1
 800b23c:	4053      	eors	r3, r2
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <HIDS_GetMeasurementValues+0x2c>
 800b244:	2300      	movs	r3, #0
 800b246:	e086      	b.n	800b356 <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800b248:	4b46      	ldr	r3, [pc, #280]	@ (800b364 <HIDS_GetMeasurementValues+0x148>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	4b46      	ldr	r3, [pc, #280]	@ (800b368 <HIDS_GetMeasurementValues+0x14c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	0019      	movs	r1, r3
 800b252:	0010      	movs	r0, r2
 800b254:	f7f4 ff9c 	bl	8000190 <__udivsi3>
 800b258:	0003      	movs	r3, r0
 800b25a:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800b25c:	2317      	movs	r3, #23
 800b25e:	18fc      	adds	r4, r7, r3
 800b260:	4b42      	ldr	r3, [pc, #264]	@ (800b36c <HIDS_GetMeasurementValues+0x150>)
 800b262:	2206      	movs	r2, #6
 800b264:	0019      	movs	r1, r3
 800b266:	2044      	movs	r0, #68	@ 0x44
 800b268:	f7ff fe36 	bl	800aed8 <ReadRegister>
 800b26c:	0003      	movs	r3, r0
 800b26e:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800b270:	4b3e      	ldr	r3, [pc, #248]	@ (800b36c <HIDS_GetMeasurementValues+0x150>)
 800b272:	0018      	movs	r0, r3
 800b274:	f7ff ff1a 	bl	800b0ac <CheckCRC>
 800b278:	0003      	movs	r3, r0
 800b27a:	001a      	movs	r2, r3
 800b27c:	2301      	movs	r3, #1
 800b27e:	4053      	eors	r3, r2
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d011      	beq.n	800b2aa <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800b286:	231f      	movs	r3, #31
 800b288:	18fb      	adds	r3, r7, r3
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	e005      	b.n	800b29c <HIDS_GetMeasurementValues+0x80>
 800b290:	211f      	movs	r1, #31
 800b292:	187b      	adds	r3, r7, r1
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	187b      	adds	r3, r7, r1
 800b298:	3201      	adds	r2, #1
 800b29a:	701a      	strb	r2, [r3, #0]
 800b29c:	231f      	movs	r3, #31
 800b29e:	18fb      	adds	r3, r7, r3
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	d9f4      	bls.n	800b290 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e055      	b.n	800b356 <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800b2aa:	4b30      	ldr	r3, [pc, #192]	@ (800b36c <HIDS_GetMeasurementValues+0x150>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	4a2e      	ldr	r2, [pc, #184]	@ (800b36c <HIDS_GetMeasurementValues+0x150>)
 800b2b2:	7852      	ldrb	r2, [r2, #1]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	22af      	movs	r2, #175	@ 0xaf
 800b2b8:	4353      	muls	r3, r2
 800b2ba:	0018      	movs	r0, r3
 800b2bc:	f7f8 f876 	bl	80033ac <__aeabi_i2d>
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	4b2b      	ldr	r3, [pc, #172]	@ (800b370 <HIDS_GetMeasurementValues+0x154>)
 800b2c4:	f7f6 fd6c 	bl	8001da0 <__aeabi_ddiv>
 800b2c8:	0002      	movs	r2, r0
 800b2ca:	000b      	movs	r3, r1
 800b2cc:	0010      	movs	r0, r2
 800b2ce:	0019      	movs	r1, r3
 800b2d0:	f7f8 f906 	bl	80034e0 <__aeabi_d2f>
 800b2d4:	1c03      	adds	r3, r0, #0
 800b2d6:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800b2d8:	4926      	ldr	r1, [pc, #152]	@ (800b374 <HIDS_GetMeasurementValues+0x158>)
 800b2da:	6938      	ldr	r0, [r7, #16]
 800b2dc:	f7f5 ff94 	bl	8001208 <__aeabi_fsub>
 800b2e0:	1c03      	adds	r3, r0, #0
 800b2e2:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800b2e4:	4b21      	ldr	r3, [pc, #132]	@ (800b36c <HIDS_GetMeasurementValues+0x150>)
 800b2e6:	78db      	ldrb	r3, [r3, #3]
 800b2e8:	021b      	lsls	r3, r3, #8
 800b2ea:	4a20      	ldr	r2, [pc, #128]	@ (800b36c <HIDS_GetMeasurementValues+0x150>)
 800b2ec:	7912      	ldrb	r2, [r2, #4]
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	0013      	movs	r3, r2
 800b2f2:	015b      	lsls	r3, r3, #5
 800b2f4:	1a9b      	subs	r3, r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	189b      	adds	r3, r3, r2
 800b2fa:	0018      	movs	r0, r3
 800b2fc:	f7f8 f856 	bl	80033ac <__aeabi_i2d>
 800b300:	2200      	movs	r2, #0
 800b302:	4b1b      	ldr	r3, [pc, #108]	@ (800b370 <HIDS_GetMeasurementValues+0x154>)
 800b304:	f7f6 fd4c 	bl	8001da0 <__aeabi_ddiv>
 800b308:	0002      	movs	r2, r0
 800b30a:	000b      	movs	r3, r1
 800b30c:	0010      	movs	r0, r2
 800b30e:	0019      	movs	r1, r3
 800b310:	f7f8 f8e6 	bl	80034e0 <__aeabi_d2f>
 800b314:	1c03      	adds	r3, r0, #0
 800b316:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800b318:	4917      	ldr	r1, [pc, #92]	@ (800b378 <HIDS_GetMeasurementValues+0x15c>)
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7f5 ff74 	bl	8001208 <__aeabi_fsub>
 800b320:	1c03      	adds	r3, r0, #0
 800b322:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	0011      	movs	r1, r2
 800b336:	0018      	movs	r0, r3
 800b338:	f7fd fd0c 	bl	8008d54 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	1c11      	adds	r1, r2, #0
 800b342:	1c18      	adds	r0, r3, #0
 800b344:	f7f8 faa0 	bl	8003888 <ESP_GetHT>

   measurements = 0;
 800b348:	4b0c      	ldr	r3, [pc, #48]	@ (800b37c <HIDS_GetMeasurementValues+0x160>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800b34e:	4b04      	ldr	r3, [pc, #16]	@ (800b360 <HIDS_GetMeasurementValues+0x144>)
 800b350:	2201      	movs	r2, #1
 800b352:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800b354:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800b356:	0018      	movs	r0, r3
 800b358:	46bd      	mov	sp, r7
 800b35a:	b009      	add	sp, #36	@ 0x24
 800b35c:	bd90      	pop	{r4, r7, pc}
 800b35e:	46c0      	nop			@ (mov r8, r8)
 800b360:	20002442 	.word	0x20002442
 800b364:	20000080 	.word	0x20000080
 800b368:	2000007c 	.word	0x2000007c
 800b36c:	2000243c 	.word	0x2000243c
 800b370:	40efffe0 	.word	0x40efffe0
 800b374:	42340000 	.word	0x42340000
 800b378:	40c00000 	.word	0x40c00000
 800b37c:	20002444 	.word	0x20002444

0800b380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800b380:	480d      	ldr	r0, [pc, #52]	@ (800b3b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800b382:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800b384:	f7ff f8f2 	bl	800a56c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b388:	480c      	ldr	r0, [pc, #48]	@ (800b3bc <LoopForever+0x6>)
  ldr r1, =_edata
 800b38a:	490d      	ldr	r1, [pc, #52]	@ (800b3c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b38c:	4a0d      	ldr	r2, [pc, #52]	@ (800b3c4 <LoopForever+0xe>)
  movs r3, #0
 800b38e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b390:	e002      	b.n	800b398 <LoopCopyDataInit>

0800b392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b396:	3304      	adds	r3, #4

0800b398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b39a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b39c:	d3f9      	bcc.n	800b392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b39e:	4a0a      	ldr	r2, [pc, #40]	@ (800b3c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b3a0:	4c0a      	ldr	r4, [pc, #40]	@ (800b3cc <LoopForever+0x16>)
  movs r3, #0
 800b3a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b3a4:	e001      	b.n	800b3aa <LoopFillZerobss>

0800b3a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b3a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b3a8:	3204      	adds	r2, #4

0800b3aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b3aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b3ac:	d3fb      	bcc.n	800b3a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b3ae:	f00f ff6b 	bl	801b288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b3b2:	f7fb fa3d 	bl	8006830 <main>

0800b3b6 <LoopForever>:

LoopForever:
    b LoopForever
 800b3b6:	e7fe      	b.n	800b3b6 <LoopForever>
   ldr   r0, =_estack
 800b3b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800b3bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b3c0:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 800b3c4:	0801fc48 	.word	0x0801fc48
  ldr r2, =_sbss
 800b3c8:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 800b3cc:	2000384c 	.word	0x2000384c

0800b3d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3d0:	e7fe      	b.n	800b3d0 <ADC1_COMP_IRQHandler>
	...

0800b3d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b3da:	1dfb      	adds	r3, r7, #7
 800b3dc:	2200      	movs	r2, #0
 800b3de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800b3e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b410 <HAL_Init+0x3c>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b410 <HAL_Init+0x3c>)
 800b3e6:	2140      	movs	r1, #64	@ 0x40
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b3ec:	2003      	movs	r0, #3
 800b3ee:	f000 f811 	bl	800b414 <HAL_InitTick>
 800b3f2:	1e03      	subs	r3, r0, #0
 800b3f4:	d003      	beq.n	800b3fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800b3f6:	1dfb      	adds	r3, r7, #7
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	701a      	strb	r2, [r3, #0]
 800b3fc:	e001      	b.n	800b402 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b3fe:	f7fe ff8b 	bl	800a318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b402:	1dfb      	adds	r3, r7, #7
 800b404:	781b      	ldrb	r3, [r3, #0]
}
 800b406:	0018      	movs	r0, r3
 800b408:	46bd      	mov	sp, r7
 800b40a:	b002      	add	sp, #8
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	46c0      	nop			@ (mov r8, r8)
 800b410:	40022000 	.word	0x40022000

0800b414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b41c:	4b14      	ldr	r3, [pc, #80]	@ (800b470 <HAL_InitTick+0x5c>)
 800b41e:	681c      	ldr	r4, [r3, #0]
 800b420:	4b14      	ldr	r3, [pc, #80]	@ (800b474 <HAL_InitTick+0x60>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	0019      	movs	r1, r3
 800b426:	23fa      	movs	r3, #250	@ 0xfa
 800b428:	0098      	lsls	r0, r3, #2
 800b42a:	f7f4 feb1 	bl	8000190 <__udivsi3>
 800b42e:	0003      	movs	r3, r0
 800b430:	0019      	movs	r1, r3
 800b432:	0020      	movs	r0, r4
 800b434:	f7f4 feac 	bl	8000190 <__udivsi3>
 800b438:	0003      	movs	r3, r0
 800b43a:	0018      	movs	r0, r3
 800b43c:	f000 fccb 	bl	800bdd6 <HAL_SYSTICK_Config>
 800b440:	1e03      	subs	r3, r0, #0
 800b442:	d001      	beq.n	800b448 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e00f      	b.n	800b468 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d80b      	bhi.n	800b466 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	2301      	movs	r3, #1
 800b452:	425b      	negs	r3, r3
 800b454:	2200      	movs	r2, #0
 800b456:	0018      	movs	r0, r3
 800b458:	f000 fc98 	bl	800bd8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b45c:	4b06      	ldr	r3, [pc, #24]	@ (800b478 <HAL_InitTick+0x64>)
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	e000      	b.n	800b468 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
}
 800b468:	0018      	movs	r0, r3
 800b46a:	46bd      	mov	sp, r7
 800b46c:	b003      	add	sp, #12
 800b46e:	bd90      	pop	{r4, r7, pc}
 800b470:	20000070 	.word	0x20000070
 800b474:	20000088 	.word	0x20000088
 800b478:	20000084 	.word	0x20000084

0800b47c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b480:	4b05      	ldr	r3, [pc, #20]	@ (800b498 <HAL_IncTick+0x1c>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	001a      	movs	r2, r3
 800b486:	4b05      	ldr	r3, [pc, #20]	@ (800b49c <HAL_IncTick+0x20>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	18d2      	adds	r2, r2, r3
 800b48c:	4b03      	ldr	r3, [pc, #12]	@ (800b49c <HAL_IncTick+0x20>)
 800b48e:	601a      	str	r2, [r3, #0]
}
 800b490:	46c0      	nop			@ (mov r8, r8)
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	46c0      	nop			@ (mov r8, r8)
 800b498:	20000088 	.word	0x20000088
 800b49c:	20002448 	.word	0x20002448

0800b4a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  return uwTick;
 800b4a4:	4b02      	ldr	r3, [pc, #8]	@ (800b4b0 <HAL_GetTick+0x10>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
}
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	46c0      	nop			@ (mov r8, r8)
 800b4b0:	20002448 	.word	0x20002448

0800b4b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b4bc:	f7ff fff0 	bl	800b4a0 <HAL_GetTick>
 800b4c0:	0003      	movs	r3, r0
 800b4c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	d005      	beq.n	800b4da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f8 <HAL_Delay+0x44>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	001a      	movs	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	189b      	adds	r3, r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b4da:	46c0      	nop			@ (mov r8, r8)
 800b4dc:	f7ff ffe0 	bl	800b4a0 <HAL_GetTick>
 800b4e0:	0002      	movs	r2, r0
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d8f7      	bhi.n	800b4dc <HAL_Delay+0x28>
  {
  }
}
 800b4ec:	46c0      	nop			@ (mov r8, r8)
 800b4ee:	46c0      	nop			@ (mov r8, r8)
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	b004      	add	sp, #16
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	46c0      	nop			@ (mov r8, r8)
 800b4f8:	20000088 	.word	0x20000088

0800b4fc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800b500:	4b02      	ldr	r3, [pc, #8]	@ (800b50c <HAL_GetUIDw0+0x10>)
 800b502:	681b      	ldr	r3, [r3, #0]
}
 800b504:	0018      	movs	r0, r3
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	46c0      	nop			@ (mov r8, r8)
 800b50c:	1ff80050 	.word	0x1ff80050

0800b510 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800b514:	4b02      	ldr	r3, [pc, #8]	@ (800b520 <HAL_GetUIDw1+0x10>)
 800b516:	681b      	ldr	r3, [r3, #0]
}
 800b518:	0018      	movs	r0, r3
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	46c0      	nop			@ (mov r8, r8)
 800b520:	1ff80054 	.word	0x1ff80054

0800b524 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800b528:	4b02      	ldr	r3, [pc, #8]	@ (800b534 <HAL_GetUIDw2+0x10>)
 800b52a:	681b      	ldr	r3, [r3, #0]
}
 800b52c:	0018      	movs	r0, r3
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	46c0      	nop			@ (mov r8, r8)
 800b534:	1ff80064 	.word	0x1ff80064

0800b538 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e159      	b.n	800b7fe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10a      	bne.n	800b568 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2250      	movs	r2, #80	@ 0x50
 800b55c:	2100      	movs	r1, #0
 800b55e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	0018      	movs	r0, r3
 800b564:	f7fa fba6 	bl	8005cb4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b56c:	2210      	movs	r2, #16
 800b56e:	4013      	ands	r3, r2
 800b570:	2b10      	cmp	r3, #16
 800b572:	d005      	beq.n	800b580 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	2204      	movs	r2, #4
 800b57c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800b57e:	d00b      	beq.n	800b598 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b584:	2210      	movs	r2, #16
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2250      	movs	r2, #80	@ 0x50
 800b590:	2100      	movs	r1, #0
 800b592:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e132      	b.n	800b7fe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b59c:	4a9a      	ldr	r2, [pc, #616]	@ (800b808 <HAL_ADC_Init+0x2d0>)
 800b59e:	4013      	ands	r3, r2
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d108      	bne.n	800b5c8 <HAL_ADC_Init+0x90>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	4013      	ands	r3, r2
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d101      	bne.n	800b5c8 <HAL_ADC_Init+0x90>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e000      	b.n	800b5ca <HAL_ADC_Init+0x92>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d149      	bne.n	800b662 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	23c0      	movs	r3, #192	@ 0xc0
 800b5d4:	061b      	lsls	r3, r3, #24
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d00b      	beq.n	800b5f2 <HAL_ADC_Init+0xba>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	2380      	movs	r3, #128	@ 0x80
 800b5e0:	05db      	lsls	r3, r3, #23
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d005      	beq.n	800b5f2 <HAL_ADC_Init+0xba>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	2380      	movs	r3, #128	@ 0x80
 800b5ec:	061b      	lsls	r3, r3, #24
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d111      	bne.n	800b616 <HAL_ADC_Init+0xde>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	691a      	ldr	r2, [r3, #16]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	0092      	lsls	r2, r2, #2
 800b5fe:	0892      	lsrs	r2, r2, #2
 800b600:	611a      	str	r2, [r3, #16]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6919      	ldr	r1, [r3, #16]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	430a      	orrs	r2, r1
 800b612:	611a      	str	r2, [r3, #16]
 800b614:	e014      	b.n	800b640 <HAL_ADC_Init+0x108>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	691a      	ldr	r2, [r3, #16]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	0092      	lsls	r2, r2, #2
 800b622:	0892      	lsrs	r2, r2, #2
 800b624:	611a      	str	r2, [r3, #16]
 800b626:	4b79      	ldr	r3, [pc, #484]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	4b78      	ldr	r3, [pc, #480]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b62c:	4978      	ldr	r1, [pc, #480]	@ (800b810 <HAL_ADC_Init+0x2d8>)
 800b62e:	400a      	ands	r2, r1
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	4b76      	ldr	r3, [pc, #472]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b634:	6819      	ldr	r1, [r3, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685a      	ldr	r2, [r3, #4]
 800b63a:	4b74      	ldr	r3, [pc, #464]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b63c:	430a      	orrs	r2, r1
 800b63e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68da      	ldr	r2, [r3, #12]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2118      	movs	r1, #24
 800b64c:	438a      	bics	r2, r1
 800b64e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68d9      	ldr	r1, [r3, #12]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689a      	ldr	r2, [r3, #8]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	430a      	orrs	r2, r1
 800b660:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800b662:	4b6a      	ldr	r3, [pc, #424]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	4b69      	ldr	r3, [pc, #420]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b668:	496a      	ldr	r1, [pc, #424]	@ (800b814 <HAL_ADC_Init+0x2dc>)
 800b66a:	400a      	ands	r2, r1
 800b66c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800b66e:	4b67      	ldr	r3, [pc, #412]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b670:	6819      	ldr	r1, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b676:	065a      	lsls	r2, r3, #25
 800b678:	4b64      	ldr	r3, [pc, #400]	@ (800b80c <HAL_ADC_Init+0x2d4>)
 800b67a:	430a      	orrs	r2, r1
 800b67c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689a      	ldr	r2, [r3, #8]
 800b684:	2380      	movs	r3, #128	@ 0x80
 800b686:	055b      	lsls	r3, r3, #21
 800b688:	4013      	ands	r3, r2
 800b68a:	d108      	bne.n	800b69e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	689a      	ldr	r2, [r3, #8]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2180      	movs	r1, #128	@ 0x80
 800b698:	0549      	lsls	r1, r1, #21
 800b69a:	430a      	orrs	r2, r1
 800b69c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	495b      	ldr	r1, [pc, #364]	@ (800b818 <HAL_ADC_Init+0x2e0>)
 800b6aa:	400a      	ands	r2, r1
 800b6ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68d9      	ldr	r1, [r3, #12]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d101      	bne.n	800b6c4 <HAL_ADC_Init+0x18c>
 800b6c0:	2304      	movs	r3, #4
 800b6c2:	e000      	b.n	800b6c6 <HAL_ADC_Init+0x18e>
 800b6c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b6c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2020      	movs	r0, #32
 800b6cc:	5c1b      	ldrb	r3, [r3, r0]
 800b6ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800b6d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	202c      	movs	r0, #44	@ 0x2c
 800b6d6:	5c1b      	ldrb	r3, [r3, r0]
 800b6d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800b6da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800b6e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800b6e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800b6f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6fe:	23c2      	movs	r3, #194	@ 0xc2
 800b700:	33ff      	adds	r3, #255	@ 0xff
 800b702:	429a      	cmp	r2, r3
 800b704:	d00b      	beq.n	800b71e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68d9      	ldr	r1, [r3, #12]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	430a      	orrs	r2, r1
 800b71c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2221      	movs	r2, #33	@ 0x21
 800b722:	5c9b      	ldrb	r3, [r3, r2]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d11a      	bne.n	800b75e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2220      	movs	r2, #32
 800b72c:	5c9b      	ldrb	r3, [r3, r2]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d109      	bne.n	800b746 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2180      	movs	r1, #128	@ 0x80
 800b73e:	0249      	lsls	r1, r1, #9
 800b740:	430a      	orrs	r2, r1
 800b742:	60da      	str	r2, [r3, #12]
 800b744:	e00b      	b.n	800b75e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b74a:	2220      	movs	r2, #32
 800b74c:	431a      	orrs	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b756:	2201      	movs	r2, #1
 800b758:	431a      	orrs	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b762:	2b01      	cmp	r3, #1
 800b764:	d11f      	bne.n	800b7a6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691a      	ldr	r2, [r3, #16]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	492a      	ldr	r1, [pc, #168]	@ (800b81c <HAL_ADC_Init+0x2e4>)
 800b772:	400a      	ands	r2, r1
 800b774:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6919      	ldr	r1, [r3, #16]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800b784:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800b78a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	430a      	orrs	r2, r1
 800b792:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	691a      	ldr	r2, [r3, #16]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2101      	movs	r1, #1
 800b7a0:	430a      	orrs	r2, r1
 800b7a2:	611a      	str	r2, [r3, #16]
 800b7a4:	e00e      	b.n	800b7c4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d107      	bne.n	800b7c4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	691a      	ldr	r2, [r3, #16]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2101      	movs	r1, #1
 800b7c0:	438a      	bics	r2, r1
 800b7c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695a      	ldr	r2, [r3, #20]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2107      	movs	r1, #7
 800b7d0:	438a      	bics	r2, r1
 800b7d2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6959      	ldr	r1, [r3, #20]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7f0:	2203      	movs	r2, #3
 800b7f2:	4393      	bics	r3, r2
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	0018      	movs	r0, r3
 800b800:	46bd      	mov	sp, r7
 800b802:	b002      	add	sp, #8
 800b804:	bd80      	pop	{r7, pc}
 800b806:	46c0      	nop			@ (mov r8, r8)
 800b808:	fffffefd 	.word	0xfffffefd
 800b80c:	40012708 	.word	0x40012708
 800b810:	ffc3ffff 	.word	0xffc3ffff
 800b814:	fdffffff 	.word	0xfdffffff
 800b818:	fffe0219 	.word	0xfffe0219
 800b81c:	fffffc03 	.word	0xfffffc03

0800b820 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b820:	b590      	push	{r4, r7, lr}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b828:	230f      	movs	r3, #15
 800b82a:	18fb      	adds	r3, r7, r3
 800b82c:	2200      	movs	r2, #0
 800b82e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	2204      	movs	r2, #4
 800b838:	4013      	ands	r3, r2
 800b83a:	d138      	bne.n	800b8ae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2250      	movs	r2, #80	@ 0x50
 800b840:	5c9b      	ldrb	r3, [r3, r2]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d101      	bne.n	800b84a <HAL_ADC_Start+0x2a>
 800b846:	2302      	movs	r3, #2
 800b848:	e038      	b.n	800b8bc <HAL_ADC_Start+0x9c>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2250      	movs	r2, #80	@ 0x50
 800b84e:	2101      	movs	r1, #1
 800b850:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	69db      	ldr	r3, [r3, #28]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d007      	beq.n	800b86a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800b85a:	230f      	movs	r3, #15
 800b85c:	18fc      	adds	r4, r7, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	0018      	movs	r0, r3
 800b862:	f000 f95f 	bl	800bb24 <ADC_Enable>
 800b866:	0003      	movs	r3, r0
 800b868:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800b86a:	230f      	movs	r3, #15
 800b86c:	18fb      	adds	r3, r7, r3
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d120      	bne.n	800b8b6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b878:	4a12      	ldr	r2, [pc, #72]	@ (800b8c4 <HAL_ADC_Start+0xa4>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	2280      	movs	r2, #128	@ 0x80
 800b87e:	0052      	lsls	r2, r2, #1
 800b880:	431a      	orrs	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2250      	movs	r2, #80	@ 0x50
 800b890:	2100      	movs	r1, #0
 800b892:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	221c      	movs	r2, #28
 800b89a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	689a      	ldr	r2, [r3, #8]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2104      	movs	r1, #4
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	609a      	str	r2, [r3, #8]
 800b8ac:	e003      	b.n	800b8b6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b8ae:	230f      	movs	r3, #15
 800b8b0:	18fb      	adds	r3, r7, r3
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800b8b6:	230f      	movs	r3, #15
 800b8b8:	18fb      	adds	r3, r7, r3
 800b8ba:	781b      	ldrb	r3, [r3, #0]
}
 800b8bc:	0018      	movs	r0, r3
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b005      	add	sp, #20
 800b8c2:	bd90      	pop	{r4, r7, pc}
 800b8c4:	fffff0fe 	.word	0xfffff0fe

0800b8c8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d102      	bne.n	800b8e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800b8e2:	2308      	movs	r3, #8
 800b8e4:	60fb      	str	r3, [r7, #12]
 800b8e6:	e014      	b.n	800b912 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d10b      	bne.n	800b90e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8fa:	2220      	movs	r2, #32
 800b8fc:	431a      	orrs	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2250      	movs	r2, #80	@ 0x50
 800b906:	2100      	movs	r1, #0
 800b908:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e072      	b.n	800b9f4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800b90e:	230c      	movs	r3, #12
 800b910:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800b912:	f7ff fdc5 	bl	800b4a0 <HAL_GetTick>
 800b916:	0003      	movs	r3, r0
 800b918:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800b91a:	e01f      	b.n	800b95c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	3301      	adds	r3, #1
 800b920:	d01c      	beq.n	800b95c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d007      	beq.n	800b938 <HAL_ADC_PollForConversion+0x70>
 800b928:	f7ff fdba 	bl	800b4a0 <HAL_GetTick>
 800b92c:	0002      	movs	r2, r0
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d211      	bcs.n	800b95c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	4013      	ands	r3, r2
 800b942:	d10b      	bne.n	800b95c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b948:	2204      	movs	r2, #4
 800b94a:	431a      	orrs	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2250      	movs	r2, #80	@ 0x50
 800b954:	2100      	movs	r1, #0
 800b956:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e04b      	b.n	800b9f4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	4013      	ands	r3, r2
 800b966:	d0d9      	beq.n	800b91c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b96c:	2280      	movs	r2, #128	@ 0x80
 800b96e:	0092      	lsls	r2, r2, #2
 800b970:	431a      	orrs	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68da      	ldr	r2, [r3, #12]
 800b97c:	23c0      	movs	r3, #192	@ 0xc0
 800b97e:	011b      	lsls	r3, r3, #4
 800b980:	4013      	ands	r3, r2
 800b982:	d12e      	bne.n	800b9e2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2220      	movs	r2, #32
 800b988:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d129      	bne.n	800b9e2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2208      	movs	r2, #8
 800b996:	4013      	ands	r3, r2
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d122      	bne.n	800b9e2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	2204      	movs	r2, #4
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	d110      	bne.n	800b9ca <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	210c      	movs	r1, #12
 800b9b4:	438a      	bics	r2, r1
 800b9b6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9bc:	4a0f      	ldr	r2, [pc, #60]	@ (800b9fc <HAL_ADC_PollForConversion+0x134>)
 800b9be:	4013      	ands	r3, r2
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	655a      	str	r2, [r3, #84]	@ 0x54
 800b9c8:	e00b      	b.n	800b9e2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ce:	2220      	movs	r2, #32
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9da:	2201      	movs	r2, #1
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d103      	bne.n	800b9f2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	220c      	movs	r2, #12
 800b9f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	0018      	movs	r0, r3
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	b004      	add	sp, #16
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	fffffefe 	.word	0xfffffefe

0800ba00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800ba0e:	0018      	movs	r0, r3
 800ba10:	46bd      	mov	sp, r7
 800ba12:	b002      	add	sp, #8
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2250      	movs	r2, #80	@ 0x50
 800ba26:	5c9b      	ldrb	r3, [r3, r2]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d101      	bne.n	800ba30 <HAL_ADC_ConfigChannel+0x18>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e06c      	b.n	800bb0a <HAL_ADC_ConfigChannel+0xf2>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2250      	movs	r2, #80	@ 0x50
 800ba34:	2101      	movs	r1, #1
 800ba36:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	2204      	movs	r2, #4
 800ba40:	4013      	ands	r3, r2
 800ba42:	d00b      	beq.n	800ba5c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba48:	2220      	movs	r2, #32
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2250      	movs	r2, #80	@ 0x50
 800ba54:	2100      	movs	r1, #0
 800ba56:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e056      	b.n	800bb0a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	4a2c      	ldr	r2, [pc, #176]	@ (800bb14 <HAL_ADC_ConfigChannel+0xfc>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d028      	beq.n	800bab8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	035b      	lsls	r3, r3, #13
 800ba72:	0b5a      	lsrs	r2, r3, #13
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	430a      	orrs	r2, r1
 800ba7a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	2380      	movs	r3, #128	@ 0x80
 800ba82:	02db      	lsls	r3, r3, #11
 800ba84:	4013      	ands	r3, r2
 800ba86:	d009      	beq.n	800ba9c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800ba88:	4b23      	ldr	r3, [pc, #140]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	4b22      	ldr	r3, [pc, #136]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800ba8e:	2180      	movs	r1, #128	@ 0x80
 800ba90:	0409      	lsls	r1, r1, #16
 800ba92:	430a      	orrs	r2, r1
 800ba94:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800ba96:	200a      	movs	r0, #10
 800ba98:	f000 f8ac 	bl	800bbf4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	2380      	movs	r3, #128	@ 0x80
 800baa2:	029b      	lsls	r3, r3, #10
 800baa4:	4013      	ands	r3, r2
 800baa6:	d02b      	beq.n	800bb00 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800baa8:	4b1b      	ldr	r3, [pc, #108]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	4b1a      	ldr	r3, [pc, #104]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800baae:	2180      	movs	r1, #128	@ 0x80
 800bab0:	03c9      	lsls	r1, r1, #15
 800bab2:	430a      	orrs	r2, r1
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	e023      	b.n	800bb00 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	035b      	lsls	r3, r3, #13
 800bac4:	0b5b      	lsrs	r3, r3, #13
 800bac6:	43d9      	mvns	r1, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	400a      	ands	r2, r1
 800bace:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	2380      	movs	r3, #128	@ 0x80
 800bad6:	02db      	lsls	r3, r3, #11
 800bad8:	4013      	ands	r3, r2
 800bada:	d005      	beq.n	800bae8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800badc:	4b0e      	ldr	r3, [pc, #56]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	4b0d      	ldr	r3, [pc, #52]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800bae2:	490e      	ldr	r1, [pc, #56]	@ (800bb1c <HAL_ADC_ConfigChannel+0x104>)
 800bae4:	400a      	ands	r2, r1
 800bae6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	2380      	movs	r3, #128	@ 0x80
 800baee:	029b      	lsls	r3, r3, #10
 800baf0:	4013      	ands	r3, r2
 800baf2:	d005      	beq.n	800bb00 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800baf4:	4b08      	ldr	r3, [pc, #32]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	4b07      	ldr	r3, [pc, #28]	@ (800bb18 <HAL_ADC_ConfigChannel+0x100>)
 800bafa:	4909      	ldr	r1, [pc, #36]	@ (800bb20 <HAL_ADC_ConfigChannel+0x108>)
 800bafc:	400a      	ands	r2, r1
 800bafe:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2250      	movs	r2, #80	@ 0x50
 800bb04:	2100      	movs	r1, #0
 800bb06:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	0018      	movs	r0, r3
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	b002      	add	sp, #8
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	46c0      	nop			@ (mov r8, r8)
 800bb14:	00001001 	.word	0x00001001
 800bb18:	40012708 	.word	0x40012708
 800bb1c:	ff7fffff 	.word	0xff7fffff
 800bb20:	ffbfffff 	.word	0xffbfffff

0800bb24 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	2203      	movs	r2, #3
 800bb38:	4013      	ands	r3, r2
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d108      	bne.n	800bb50 <ADC_Enable+0x2c>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2201      	movs	r2, #1
 800bb46:	4013      	ands	r3, r2
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d101      	bne.n	800bb50 <ADC_Enable+0x2c>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e000      	b.n	800bb52 <ADC_Enable+0x2e>
 800bb50:	2300      	movs	r3, #0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d146      	bne.n	800bbe4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	4a24      	ldr	r2, [pc, #144]	@ (800bbf0 <ADC_Enable+0xcc>)
 800bb5e:	4013      	ands	r3, r2
 800bb60:	d00d      	beq.n	800bb7e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb66:	2210      	movs	r2, #16
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb72:	2201      	movs	r2, #1
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e033      	b.n	800bbe6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2101      	movs	r1, #1
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800bb8e:	2001      	movs	r0, #1
 800bb90:	f000 f830 	bl	800bbf4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800bb94:	f7ff fc84 	bl	800b4a0 <HAL_GetTick>
 800bb98:	0003      	movs	r3, r0
 800bb9a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800bb9c:	e01b      	b.n	800bbd6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bb9e:	f7ff fc7f 	bl	800b4a0 <HAL_GetTick>
 800bba2:	0002      	movs	r2, r0
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	2b0a      	cmp	r3, #10
 800bbaa:	d914      	bls.n	800bbd6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d00d      	beq.n	800bbd6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbbe:	2210      	movs	r2, #16
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbca:	2201      	movs	r2, #1
 800bbcc:	431a      	orrs	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e007      	b.n	800bbe6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	4013      	ands	r3, r2
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d1dc      	bne.n	800bb9e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	0018      	movs	r0, r3
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b004      	add	sp, #16
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	46c0      	nop			@ (mov r8, r8)
 800bbf0:	80000017 	.word	0x80000017

0800bbf4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800bbfc:	4b0b      	ldr	r3, [pc, #44]	@ (800bc2c <ADC_DelayMicroSecond+0x38>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	490b      	ldr	r1, [pc, #44]	@ (800bc30 <ADC_DelayMicroSecond+0x3c>)
 800bc02:	0018      	movs	r0, r3
 800bc04:	f7f4 fac4 	bl	8000190 <__udivsi3>
 800bc08:	0003      	movs	r3, r0
 800bc0a:	001a      	movs	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4353      	muls	r3, r2
 800bc10:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800bc12:	e002      	b.n	800bc1a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1f9      	bne.n	800bc14 <ADC_DelayMicroSecond+0x20>
  }
}
 800bc20:	46c0      	nop			@ (mov r8, r8)
 800bc22:	46c0      	nop			@ (mov r8, r8)
 800bc24:	46bd      	mov	sp, r7
 800bc26:	b004      	add	sp, #16
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	46c0      	nop			@ (mov r8, r8)
 800bc2c:	20000070 	.word	0x20000070
 800bc30:	000f4240 	.word	0x000f4240

0800bc34 <__NVIC_EnableIRQ>:
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	0002      	movs	r2, r0
 800bc3c:	1dfb      	adds	r3, r7, #7
 800bc3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bc40:	1dfb      	adds	r3, r7, #7
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc46:	d809      	bhi.n	800bc5c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc48:	1dfb      	adds	r3, r7, #7
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	001a      	movs	r2, r3
 800bc4e:	231f      	movs	r3, #31
 800bc50:	401a      	ands	r2, r3
 800bc52:	4b04      	ldr	r3, [pc, #16]	@ (800bc64 <__NVIC_EnableIRQ+0x30>)
 800bc54:	2101      	movs	r1, #1
 800bc56:	4091      	lsls	r1, r2
 800bc58:	000a      	movs	r2, r1
 800bc5a:	601a      	str	r2, [r3, #0]
}
 800bc5c:	46c0      	nop			@ (mov r8, r8)
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	b002      	add	sp, #8
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	e000e100 	.word	0xe000e100

0800bc68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bc68:	b590      	push	{r4, r7, lr}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	0002      	movs	r2, r0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	1dfb      	adds	r3, r7, #7
 800bc74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bc76:	1dfb      	adds	r3, r7, #7
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc7c:	d828      	bhi.n	800bcd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bc7e:	4a2f      	ldr	r2, [pc, #188]	@ (800bd3c <__NVIC_SetPriority+0xd4>)
 800bc80:	1dfb      	adds	r3, r7, #7
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	b25b      	sxtb	r3, r3
 800bc86:	089b      	lsrs	r3, r3, #2
 800bc88:	33c0      	adds	r3, #192	@ 0xc0
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	589b      	ldr	r3, [r3, r2]
 800bc8e:	1dfa      	adds	r2, r7, #7
 800bc90:	7812      	ldrb	r2, [r2, #0]
 800bc92:	0011      	movs	r1, r2
 800bc94:	2203      	movs	r2, #3
 800bc96:	400a      	ands	r2, r1
 800bc98:	00d2      	lsls	r2, r2, #3
 800bc9a:	21ff      	movs	r1, #255	@ 0xff
 800bc9c:	4091      	lsls	r1, r2
 800bc9e:	000a      	movs	r2, r1
 800bca0:	43d2      	mvns	r2, r2
 800bca2:	401a      	ands	r2, r3
 800bca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	019b      	lsls	r3, r3, #6
 800bcaa:	22ff      	movs	r2, #255	@ 0xff
 800bcac:	401a      	ands	r2, r3
 800bcae:	1dfb      	adds	r3, r7, #7
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	4003      	ands	r3, r0
 800bcb8:	00db      	lsls	r3, r3, #3
 800bcba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bcbc:	481f      	ldr	r0, [pc, #124]	@ (800bd3c <__NVIC_SetPriority+0xd4>)
 800bcbe:	1dfb      	adds	r3, r7, #7
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	b25b      	sxtb	r3, r3
 800bcc4:	089b      	lsrs	r3, r3, #2
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	33c0      	adds	r3, #192	@ 0xc0
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800bcce:	e031      	b.n	800bd34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bcd0:	4a1b      	ldr	r2, [pc, #108]	@ (800bd40 <__NVIC_SetPriority+0xd8>)
 800bcd2:	1dfb      	adds	r3, r7, #7
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	0019      	movs	r1, r3
 800bcd8:	230f      	movs	r3, #15
 800bcda:	400b      	ands	r3, r1
 800bcdc:	3b08      	subs	r3, #8
 800bcde:	089b      	lsrs	r3, r3, #2
 800bce0:	3306      	adds	r3, #6
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	18d3      	adds	r3, r2, r3
 800bce6:	3304      	adds	r3, #4
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	1dfa      	adds	r2, r7, #7
 800bcec:	7812      	ldrb	r2, [r2, #0]
 800bcee:	0011      	movs	r1, r2
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	400a      	ands	r2, r1
 800bcf4:	00d2      	lsls	r2, r2, #3
 800bcf6:	21ff      	movs	r1, #255	@ 0xff
 800bcf8:	4091      	lsls	r1, r2
 800bcfa:	000a      	movs	r2, r1
 800bcfc:	43d2      	mvns	r2, r2
 800bcfe:	401a      	ands	r2, r3
 800bd00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	019b      	lsls	r3, r3, #6
 800bd06:	22ff      	movs	r2, #255	@ 0xff
 800bd08:	401a      	ands	r2, r3
 800bd0a:	1dfb      	adds	r3, r7, #7
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	0018      	movs	r0, r3
 800bd10:	2303      	movs	r3, #3
 800bd12:	4003      	ands	r3, r0
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bd18:	4809      	ldr	r0, [pc, #36]	@ (800bd40 <__NVIC_SetPriority+0xd8>)
 800bd1a:	1dfb      	adds	r3, r7, #7
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	001c      	movs	r4, r3
 800bd20:	230f      	movs	r3, #15
 800bd22:	4023      	ands	r3, r4
 800bd24:	3b08      	subs	r3, #8
 800bd26:	089b      	lsrs	r3, r3, #2
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	3306      	adds	r3, #6
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	18c3      	adds	r3, r0, r3
 800bd30:	3304      	adds	r3, #4
 800bd32:	601a      	str	r2, [r3, #0]
}
 800bd34:	46c0      	nop			@ (mov r8, r8)
 800bd36:	46bd      	mov	sp, r7
 800bd38:	b003      	add	sp, #12
 800bd3a:	bd90      	pop	{r4, r7, pc}
 800bd3c:	e000e100 	.word	0xe000e100
 800bd40:	e000ed00 	.word	0xe000ed00

0800bd44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	1e5a      	subs	r2, r3, #1
 800bd50:	2380      	movs	r3, #128	@ 0x80
 800bd52:	045b      	lsls	r3, r3, #17
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d301      	bcc.n	800bd5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e010      	b.n	800bd7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd88 <SysTick_Config+0x44>)
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	3a01      	subs	r2, #1
 800bd62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bd64:	2301      	movs	r3, #1
 800bd66:	425b      	negs	r3, r3
 800bd68:	2103      	movs	r1, #3
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	f7ff ff7c 	bl	800bc68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bd70:	4b05      	ldr	r3, [pc, #20]	@ (800bd88 <SysTick_Config+0x44>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bd76:	4b04      	ldr	r3, [pc, #16]	@ (800bd88 <SysTick_Config+0x44>)
 800bd78:	2207      	movs	r2, #7
 800bd7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	0018      	movs	r0, r3
 800bd80:	46bd      	mov	sp, r7
 800bd82:	b002      	add	sp, #8
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	46c0      	nop			@ (mov r8, r8)
 800bd88:	e000e010 	.word	0xe000e010

0800bd8c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60b9      	str	r1, [r7, #8]
 800bd94:	607a      	str	r2, [r7, #4]
 800bd96:	210f      	movs	r1, #15
 800bd98:	187b      	adds	r3, r7, r1
 800bd9a:	1c02      	adds	r2, r0, #0
 800bd9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	187b      	adds	r3, r7, r1
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	b25b      	sxtb	r3, r3
 800bda6:	0011      	movs	r1, r2
 800bda8:	0018      	movs	r0, r3
 800bdaa:	f7ff ff5d 	bl	800bc68 <__NVIC_SetPriority>
}
 800bdae:	46c0      	nop			@ (mov r8, r8)
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	b004      	add	sp, #16
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	0002      	movs	r2, r0
 800bdbe:	1dfb      	adds	r3, r7, #7
 800bdc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bdc2:	1dfb      	adds	r3, r7, #7
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	b25b      	sxtb	r3, r3
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f7ff ff33 	bl	800bc34 <__NVIC_EnableIRQ>
}
 800bdce:	46c0      	nop			@ (mov r8, r8)
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	b002      	add	sp, #8
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b082      	sub	sp, #8
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	0018      	movs	r0, r3
 800bde2:	f7ff ffaf 	bl	800bd44 <SysTick_Config>
 800bde6:	0003      	movs	r3, r0
}
 800bde8:	0018      	movs	r0, r3
 800bdea:	46bd      	mov	sp, r7
 800bdec:	b002      	add	sp, #8
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d101      	bne.n	800be02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e061      	b.n	800bec6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a32      	ldr	r2, [pc, #200]	@ (800bed0 <HAL_DMA_Init+0xe0>)
 800be08:	4694      	mov	ip, r2
 800be0a:	4463      	add	r3, ip
 800be0c:	2114      	movs	r1, #20
 800be0e:	0018      	movs	r0, r3
 800be10:	f7f4 f9be 	bl	8000190 <__udivsi3>
 800be14:	0003      	movs	r3, r0
 800be16:	009a      	lsls	r2, r3, #2
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a2d      	ldr	r2, [pc, #180]	@ (800bed4 <HAL_DMA_Init+0xe4>)
 800be20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2225      	movs	r2, #37	@ 0x25
 800be26:	2102      	movs	r1, #2
 800be28:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	4a28      	ldr	r2, [pc, #160]	@ (800bed8 <HAL_DMA_Init+0xe8>)
 800be36:	4013      	ands	r3, r2
 800be38:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800be42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	4313      	orrs	r3, r2
 800be66:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689a      	ldr	r2, [r3, #8]
 800be74:	2380      	movs	r3, #128	@ 0x80
 800be76:	01db      	lsls	r3, r3, #7
 800be78:	429a      	cmp	r2, r3
 800be7a:	d018      	beq.n	800beae <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800be7c:	4b17      	ldr	r3, [pc, #92]	@ (800bedc <HAL_DMA_Init+0xec>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be84:	211c      	movs	r1, #28
 800be86:	400b      	ands	r3, r1
 800be88:	210f      	movs	r1, #15
 800be8a:	4099      	lsls	r1, r3
 800be8c:	000b      	movs	r3, r1
 800be8e:	43d9      	mvns	r1, r3
 800be90:	4b12      	ldr	r3, [pc, #72]	@ (800bedc <HAL_DMA_Init+0xec>)
 800be92:	400a      	ands	r2, r1
 800be94:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800be96:	4b11      	ldr	r3, [pc, #68]	@ (800bedc <HAL_DMA_Init+0xec>)
 800be98:	6819      	ldr	r1, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	685a      	ldr	r2, [r3, #4]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bea2:	201c      	movs	r0, #28
 800bea4:	4003      	ands	r3, r0
 800bea6:	409a      	lsls	r2, r3
 800bea8:	4b0c      	ldr	r3, [pc, #48]	@ (800bedc <HAL_DMA_Init+0xec>)
 800beaa:	430a      	orrs	r2, r1
 800beac:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2225      	movs	r2, #37	@ 0x25
 800beb8:	2101      	movs	r1, #1
 800beba:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2224      	movs	r2, #36	@ 0x24
 800bec0:	2100      	movs	r1, #0
 800bec2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	0018      	movs	r0, r3
 800bec8:	46bd      	mov	sp, r7
 800beca:	b004      	add	sp, #16
 800becc:	bd80      	pop	{r7, pc}
 800bece:	46c0      	nop			@ (mov r8, r8)
 800bed0:	bffdfff8 	.word	0xbffdfff8
 800bed4:	40020000 	.word	0x40020000
 800bed8:	ffff800f 	.word	0xffff800f
 800bedc:	400200a8 	.word	0x400200a8

0800bee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
 800beec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800beee:	2317      	movs	r3, #23
 800bef0:	18fb      	adds	r3, r7, r3
 800bef2:	2200      	movs	r2, #0
 800bef4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2224      	movs	r2, #36	@ 0x24
 800befa:	5c9b      	ldrb	r3, [r3, r2]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d101      	bne.n	800bf04 <HAL_DMA_Start_IT+0x24>
 800bf00:	2302      	movs	r3, #2
 800bf02:	e04f      	b.n	800bfa4 <HAL_DMA_Start_IT+0xc4>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2224      	movs	r2, #36	@ 0x24
 800bf08:	2101      	movs	r1, #1
 800bf0a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2225      	movs	r2, #37	@ 0x25
 800bf10:	5c9b      	ldrb	r3, [r3, r2]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d13a      	bne.n	800bf8e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2225      	movs	r2, #37	@ 0x25
 800bf1c:	2102      	movs	r1, #2
 800bf1e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2101      	movs	r1, #1
 800bf32:	438a      	bics	r2, r1
 800bf34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	68b9      	ldr	r1, [r7, #8]
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 f976 	bl	800c22e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d008      	beq.n	800bf5c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	210e      	movs	r1, #14
 800bf56:	430a      	orrs	r2, r1
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	e00f      	b.n	800bf7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2104      	movs	r1, #4
 800bf68:	438a      	bics	r2, r1
 800bf6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	210a      	movs	r1, #10
 800bf78:	430a      	orrs	r2, r1
 800bf7a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2101      	movs	r1, #1
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	e007      	b.n	800bf9e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2224      	movs	r2, #36	@ 0x24
 800bf92:	2100      	movs	r1, #0
 800bf94:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800bf96:	2317      	movs	r3, #23
 800bf98:	18fb      	adds	r3, r7, r3
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800bf9e:	2317      	movs	r3, #23
 800bfa0:	18fb      	adds	r3, r7, r3
 800bfa2:	781b      	ldrb	r3, [r3, #0]
}
 800bfa4:	0018      	movs	r0, r3
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	b006      	add	sp, #24
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfb4:	230f      	movs	r3, #15
 800bfb6:	18fb      	adds	r3, r7, r3
 800bfb8:	2200      	movs	r2, #0
 800bfba:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2225      	movs	r2, #37	@ 0x25
 800bfc0:	5c9b      	ldrb	r3, [r3, r2]
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d008      	beq.n	800bfda <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2204      	movs	r2, #4
 800bfcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2224      	movs	r2, #36	@ 0x24
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e024      	b.n	800c024 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	210e      	movs	r1, #14
 800bfe6:	438a      	bics	r2, r1
 800bfe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2101      	movs	r1, #1
 800bff6:	438a      	bics	r2, r1
 800bff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bffe:	221c      	movs	r2, #28
 800c000:	401a      	ands	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c006:	2101      	movs	r1, #1
 800c008:	4091      	lsls	r1, r2
 800c00a:	000a      	movs	r2, r1
 800c00c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2225      	movs	r2, #37	@ 0x25
 800c012:	2101      	movs	r1, #1
 800c014:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2224      	movs	r2, #36	@ 0x24
 800c01a:	2100      	movs	r1, #0
 800c01c:	5499      	strb	r1, [r3, r2]

    return status;
 800c01e:	230f      	movs	r3, #15
 800c020:	18fb      	adds	r3, r7, r3
 800c022:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c024:	0018      	movs	r0, r3
 800c026:	46bd      	mov	sp, r7
 800c028:	b004      	add	sp, #16
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c034:	210f      	movs	r1, #15
 800c036:	187b      	adds	r3, r7, r1
 800c038:	2200      	movs	r2, #0
 800c03a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2225      	movs	r2, #37	@ 0x25
 800c040:	5c9b      	ldrb	r3, [r3, r2]
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d006      	beq.n	800c056 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2204      	movs	r2, #4
 800c04c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c04e:	187b      	adds	r3, r7, r1
 800c050:	2201      	movs	r2, #1
 800c052:	701a      	strb	r2, [r3, #0]
 800c054:	e02a      	b.n	800c0ac <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	210e      	movs	r1, #14
 800c062:	438a      	bics	r2, r1
 800c064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2101      	movs	r1, #1
 800c072:	438a      	bics	r2, r1
 800c074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c07a:	221c      	movs	r2, #28
 800c07c:	401a      	ands	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c082:	2101      	movs	r1, #1
 800c084:	4091      	lsls	r1, r2
 800c086:	000a      	movs	r2, r1
 800c088:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2225      	movs	r2, #37	@ 0x25
 800c08e:	2101      	movs	r1, #1
 800c090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2224      	movs	r2, #36	@ 0x24
 800c096:	2100      	movs	r1, #0
 800c098:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d004      	beq.n	800c0ac <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	0010      	movs	r0, r2
 800c0aa:	4798      	blx	r3
    }
  }
  return status;
 800c0ac:	230f      	movs	r3, #15
 800c0ae:	18fb      	adds	r3, r7, r3
 800c0b0:	781b      	ldrb	r3, [r3, #0]
}
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	b004      	add	sp, #16
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0d6:	221c      	movs	r2, #28
 800c0d8:	4013      	ands	r3, r2
 800c0da:	2204      	movs	r2, #4
 800c0dc:	409a      	lsls	r2, r3
 800c0de:	0013      	movs	r3, r2
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	d026      	beq.n	800c134 <HAL_DMA_IRQHandler+0x7a>
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2204      	movs	r2, #4
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	d022      	beq.n	800c134 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	d107      	bne.n	800c10a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2104      	movs	r1, #4
 800c106:	438a      	bics	r2, r1
 800c108:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c10e:	221c      	movs	r2, #28
 800c110:	401a      	ands	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c116:	2104      	movs	r1, #4
 800c118:	4091      	lsls	r1, r2
 800c11a:	000a      	movs	r2, r1
 800c11c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c122:	2b00      	cmp	r3, #0
 800c124:	d100      	bne.n	800c128 <HAL_DMA_IRQHandler+0x6e>
 800c126:	e071      	b.n	800c20c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	0010      	movs	r0, r2
 800c130:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800c132:	e06b      	b.n	800c20c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c138:	221c      	movs	r2, #28
 800c13a:	4013      	ands	r3, r2
 800c13c:	2202      	movs	r2, #2
 800c13e:	409a      	lsls	r2, r3
 800c140:	0013      	movs	r3, r2
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	4013      	ands	r3, r2
 800c146:	d02d      	beq.n	800c1a4 <HAL_DMA_IRQHandler+0xea>
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2202      	movs	r2, #2
 800c14c:	4013      	ands	r3, r2
 800c14e:	d029      	beq.n	800c1a4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2220      	movs	r2, #32
 800c158:	4013      	ands	r3, r2
 800c15a:	d10b      	bne.n	800c174 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	210a      	movs	r1, #10
 800c168:	438a      	bics	r2, r1
 800c16a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2225      	movs	r2, #37	@ 0x25
 800c170:	2101      	movs	r1, #1
 800c172:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c178:	221c      	movs	r2, #28
 800c17a:	401a      	ands	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c180:	2102      	movs	r1, #2
 800c182:	4091      	lsls	r1, r2
 800c184:	000a      	movs	r2, r1
 800c186:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2224      	movs	r2, #36	@ 0x24
 800c18c:	2100      	movs	r1, #0
 800c18e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c194:	2b00      	cmp	r3, #0
 800c196:	d039      	beq.n	800c20c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	0010      	movs	r0, r2
 800c1a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800c1a2:	e033      	b.n	800c20c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1a8:	221c      	movs	r2, #28
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	409a      	lsls	r2, r3
 800c1b0:	0013      	movs	r3, r2
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	d02a      	beq.n	800c20e <HAL_DMA_IRQHandler+0x154>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2208      	movs	r2, #8
 800c1bc:	4013      	ands	r3, r2
 800c1be:	d026      	beq.n	800c20e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	210e      	movs	r1, #14
 800c1cc:	438a      	bics	r2, r1
 800c1ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1d4:	221c      	movs	r2, #28
 800c1d6:	401a      	ands	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1dc:	2101      	movs	r1, #1
 800c1de:	4091      	lsls	r1, r2
 800c1e0:	000a      	movs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2225      	movs	r2, #37	@ 0x25
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2224      	movs	r2, #36	@ 0x24
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d005      	beq.n	800c20e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	0010      	movs	r0, r2
 800c20a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c20c:	46c0      	nop			@ (mov r8, r8)
 800c20e:	46c0      	nop			@ (mov r8, r8)
}
 800c210:	46bd      	mov	sp, r7
 800c212:	b004      	add	sp, #16
 800c214:	bd80      	pop	{r7, pc}

0800c216 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2225      	movs	r2, #37	@ 0x25
 800c222:	5c9b      	ldrb	r3, [r3, r2]
 800c224:	b2db      	uxtb	r3, r3
}
 800c226:	0018      	movs	r0, r3
 800c228:	46bd      	mov	sp, r7
 800c22a:	b002      	add	sp, #8
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b084      	sub	sp, #16
 800c232:	af00      	add	r7, sp, #0
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	607a      	str	r2, [r7, #4]
 800c23a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c240:	221c      	movs	r2, #28
 800c242:	401a      	ands	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c248:	2101      	movs	r1, #1
 800c24a:	4091      	lsls	r1, r2
 800c24c:	000a      	movs	r2, r1
 800c24e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	2b10      	cmp	r3, #16
 800c25e:	d108      	bne.n	800c272 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c270:	e007      	b.n	800c282 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	60da      	str	r2, [r3, #12]
}
 800c282:	46c0      	nop			@ (mov r8, r8)
 800c284:	46bd      	mov	sp, r7
 800c286:	b004      	add	sp, #16
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800c294:	f7ff f904 	bl	800b4a0 <HAL_GetTick>
 800c298:	0003      	movs	r3, r0
 800c29a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c29c:	e00f      	b.n	800c2be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	d00c      	beq.n	800c2be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d007      	beq.n	800c2ba <FLASH_WaitForLastOperation+0x2e>
 800c2aa:	f7ff f8f9 	bl	800b4a0 <HAL_GetTick>
 800c2ae:	0002      	movs	r2, r0
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d201      	bcs.n	800c2be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e052      	b.n	800c364 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c2be:	4b2b      	ldr	r3, [pc, #172]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d0e9      	beq.n	800c29e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c2ca:	4b28      	ldr	r3, [pc, #160]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d102      	bne.n	800c2dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c2d6:	4b25      	ldr	r3, [pc, #148]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c2d8:	2202      	movs	r2, #2
 800c2da:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800c2dc:	4b23      	ldr	r3, [pc, #140]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c2de:	699a      	ldr	r2, [r3, #24]
 800c2e0:	2380      	movs	r3, #128	@ 0x80
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	401a      	ands	r2, r3
 800c2e6:	2380      	movs	r3, #128	@ 0x80
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d035      	beq.n	800c35a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800c2ee:	4b1f      	ldr	r3, [pc, #124]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	2380      	movs	r3, #128	@ 0x80
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800c2f8:	2380      	movs	r3, #128	@ 0x80
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d02c      	beq.n	800c35a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800c300:	4b1a      	ldr	r3, [pc, #104]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c302:	699a      	ldr	r2, [r3, #24]
 800c304:	2380      	movs	r3, #128	@ 0x80
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800c30a:	2380      	movs	r3, #128	@ 0x80
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	429a      	cmp	r2, r3
 800c310:	d023      	beq.n	800c35a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800c312:	4b16      	ldr	r3, [pc, #88]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c314:	699a      	ldr	r2, [r3, #24]
 800c316:	2380      	movs	r3, #128	@ 0x80
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800c31c:	2380      	movs	r3, #128	@ 0x80
 800c31e:	011b      	lsls	r3, r3, #4
 800c320:	429a      	cmp	r2, r3
 800c322:	d01a      	beq.n	800c35a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800c324:	4b11      	ldr	r3, [pc, #68]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c326:	699a      	ldr	r2, [r3, #24]
 800c328:	2380      	movs	r3, #128	@ 0x80
 800c32a:	019b      	lsls	r3, r3, #6
 800c32c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800c32e:	2380      	movs	r3, #128	@ 0x80
 800c330:	019b      	lsls	r3, r3, #6
 800c332:	429a      	cmp	r2, r3
 800c334:	d011      	beq.n	800c35a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800c336:	4b0d      	ldr	r3, [pc, #52]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	2380      	movs	r3, #128	@ 0x80
 800c33c:	029b      	lsls	r3, r3, #10
 800c33e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800c340:	2380      	movs	r3, #128	@ 0x80
 800c342:	029b      	lsls	r3, r3, #10
 800c344:	429a      	cmp	r2, r3
 800c346:	d008      	beq.n	800c35a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800c348:	4b08      	ldr	r3, [pc, #32]	@ (800c36c <FLASH_WaitForLastOperation+0xe0>)
 800c34a:	699a      	ldr	r2, [r3, #24]
 800c34c:	2380      	movs	r3, #128	@ 0x80
 800c34e:	025b      	lsls	r3, r3, #9
 800c350:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800c352:	2380      	movs	r3, #128	@ 0x80
 800c354:	025b      	lsls	r3, r3, #9
 800c356:	429a      	cmp	r2, r3
 800c358:	d103      	bne.n	800c362 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800c35a:	f000 f809 	bl	800c370 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e000      	b.n	800c364 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	0018      	movs	r0, r3
 800c366:	46bd      	mov	sp, r7
 800c368:	b004      	add	sp, #16
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	40022000 	.word	0x40022000

0800c370 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800c37a:	4b49      	ldr	r3, [pc, #292]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c37c:	699a      	ldr	r2, [r3, #24]
 800c37e:	2380      	movs	r3, #128	@ 0x80
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	401a      	ands	r2, r3
 800c384:	2380      	movs	r3, #128	@ 0x80
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	429a      	cmp	r2, r3
 800c38a:	d10a      	bne.n	800c3a2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c38c:	4b45      	ldr	r3, [pc, #276]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	2202      	movs	r2, #2
 800c392:	431a      	orrs	r2, r3
 800c394:	4b43      	ldr	r3, [pc, #268]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c396:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2280      	movs	r2, #128	@ 0x80
 800c39c:	0052      	lsls	r2, r2, #1
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800c3a2:	4b3f      	ldr	r3, [pc, #252]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	2380      	movs	r3, #128	@ 0x80
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	401a      	ands	r2, r3
 800c3ac:	2380      	movs	r3, #128	@ 0x80
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d10a      	bne.n	800c3ca <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c3b4:	4b3b      	ldr	r3, [pc, #236]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	431a      	orrs	r2, r3
 800c3bc:	4b39      	ldr	r3, [pc, #228]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c3be:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2280      	movs	r2, #128	@ 0x80
 800c3c4:	0092      	lsls	r2, r2, #2
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800c3ca:	4b35      	ldr	r3, [pc, #212]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c3cc:	699a      	ldr	r2, [r3, #24]
 800c3ce:	2380      	movs	r3, #128	@ 0x80
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	401a      	ands	r2, r3
 800c3d4:	2380      	movs	r3, #128	@ 0x80
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d10a      	bne.n	800c3f2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800c3dc:	4b31      	ldr	r3, [pc, #196]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	2208      	movs	r2, #8
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	4b2f      	ldr	r3, [pc, #188]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c3e6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2280      	movs	r2, #128	@ 0x80
 800c3ec:	00d2      	lsls	r2, r2, #3
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800c3f2:	4b2b      	ldr	r3, [pc, #172]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c3f4:	699a      	ldr	r2, [r3, #24]
 800c3f6:	2380      	movs	r3, #128	@ 0x80
 800c3f8:	011b      	lsls	r3, r3, #4
 800c3fa:	401a      	ands	r2, r3
 800c3fc:	2380      	movs	r3, #128	@ 0x80
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	429a      	cmp	r2, r3
 800c402:	d10a      	bne.n	800c41a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800c404:	4b27      	ldr	r3, [pc, #156]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	2204      	movs	r2, #4
 800c40a:	431a      	orrs	r2, r3
 800c40c:	4b25      	ldr	r3, [pc, #148]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c40e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2280      	movs	r2, #128	@ 0x80
 800c414:	0112      	lsls	r2, r2, #4
 800c416:	4313      	orrs	r3, r2
 800c418:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800c41a:	4b21      	ldr	r3, [pc, #132]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c41c:	699a      	ldr	r2, [r3, #24]
 800c41e:	2380      	movs	r3, #128	@ 0x80
 800c420:	019b      	lsls	r3, r3, #6
 800c422:	401a      	ands	r2, r3
 800c424:	2380      	movs	r3, #128	@ 0x80
 800c426:	019b      	lsls	r3, r3, #6
 800c428:	429a      	cmp	r2, r3
 800c42a:	d10a      	bne.n	800c442 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800c42c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c42e:	695b      	ldr	r3, [r3, #20]
 800c430:	2210      	movs	r2, #16
 800c432:	431a      	orrs	r2, r3
 800c434:	4b1b      	ldr	r3, [pc, #108]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c436:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2280      	movs	r2, #128	@ 0x80
 800c43c:	0192      	lsls	r2, r2, #6
 800c43e:	4313      	orrs	r3, r2
 800c440:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800c442:	4b17      	ldr	r3, [pc, #92]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c444:	699a      	ldr	r2, [r3, #24]
 800c446:	2380      	movs	r3, #128	@ 0x80
 800c448:	029b      	lsls	r3, r3, #10
 800c44a:	401a      	ands	r2, r3
 800c44c:	2380      	movs	r3, #128	@ 0x80
 800c44e:	029b      	lsls	r3, r3, #10
 800c450:	429a      	cmp	r2, r3
 800c452:	d109      	bne.n	800c468 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800c454:	4b13      	ldr	r3, [pc, #76]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	2220      	movs	r2, #32
 800c45a:	431a      	orrs	r2, r3
 800c45c:	4b11      	ldr	r3, [pc, #68]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c45e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2220      	movs	r2, #32
 800c464:	4313      	orrs	r3, r2
 800c466:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800c468:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c46a:	699a      	ldr	r2, [r3, #24]
 800c46c:	2380      	movs	r3, #128	@ 0x80
 800c46e:	025b      	lsls	r3, r3, #9
 800c470:	401a      	ands	r2, r3
 800c472:	2380      	movs	r3, #128	@ 0x80
 800c474:	025b      	lsls	r3, r3, #9
 800c476:	429a      	cmp	r2, r3
 800c478:	d10a      	bne.n	800c490 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800c47a:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	2240      	movs	r2, #64	@ 0x40
 800c480:	431a      	orrs	r2, r3
 800c482:	4b08      	ldr	r3, [pc, #32]	@ (800c4a4 <FLASH_SetErrorCode+0x134>)
 800c484:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2280      	movs	r2, #128	@ 0x80
 800c48a:	0252      	lsls	r2, r2, #9
 800c48c:	4313      	orrs	r3, r2
 800c48e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800c490:	4b03      	ldr	r3, [pc, #12]	@ (800c4a0 <FLASH_SetErrorCode+0x130>)
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	619a      	str	r2, [r3, #24]
}  
 800c496:	46c0      	nop			@ (mov r8, r8)
 800c498:	46bd      	mov	sp, r7
 800c49a:	b002      	add	sp, #8
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	46c0      	nop			@ (mov r8, r8)
 800c4a0:	40022000 	.word	0x40022000
 800c4a4:	2000244c 	.word	0x2000244c

0800c4a8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800c4ae:	4b12      	ldr	r3, [pc, #72]	@ (800c4f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	d019      	beq.n	800c4ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4b8:	f3ef 8310 	mrs	r3, PRIMASK
 800c4bc:	607b      	str	r3, [r7, #4]
  return(result);
 800c4be:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800c4c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4c2:	b672      	cpsid	i
}
 800c4c4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800c4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c4c8:	4a0c      	ldr	r2, [pc, #48]	@ (800c4fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800c4ca:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c4ce:	4a0c      	ldr	r2, [pc, #48]	@ (800c500 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800c4d0:	60da      	str	r2, [r3, #12]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f383 8810 	msr	PRIMASK, r3
}
 800c4dc:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800c4de:	4b06      	ldr	r3, [pc, #24]	@ (800c4f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	d001      	beq.n	800c4ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e000      	b.n	800c4ee <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	0018      	movs	r0, r3
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	b004      	add	sp, #16
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	46c0      	nop			@ (mov r8, r8)
 800c4f8:	40022000 	.word	0x40022000
 800c4fc:	89abcdef 	.word	0x89abcdef
 800c500:	02030405 	.word	0x02030405

0800c504 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800c508:	4b04      	ldr	r3, [pc, #16]	@ (800c51c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	4b03      	ldr	r3, [pc, #12]	@ (800c51c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800c50e:	2101      	movs	r1, #1
 800c510:	430a      	orrs	r2, r1
 800c512:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	0018      	movs	r0, r3
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	40022000 	.word	0x40022000

0800c520 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800c520:	b5b0      	push	{r4, r5, r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c528:	250f      	movs	r5, #15
 800c52a:	197b      	adds	r3, r7, r5
 800c52c:	2200      	movs	r2, #0
 800c52e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c530:	197c      	adds	r4, r7, r5
 800c532:	4b0f      	ldr	r3, [pc, #60]	@ (800c570 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800c534:	0018      	movs	r0, r3
 800c536:	f7ff fea9 	bl	800c28c <FLASH_WaitForLastOperation>
 800c53a:	0003      	movs	r3, r0
 800c53c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800c53e:	0029      	movs	r1, r5
 800c540:	187b      	adds	r3, r7, r1
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10c      	bne.n	800c562 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c548:	4b0a      	ldr	r3, [pc, #40]	@ (800c574 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c554:	187c      	adds	r4, r7, r1
 800c556:	4b06      	ldr	r3, [pc, #24]	@ (800c570 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800c558:	0018      	movs	r0, r3
 800c55a:	f7ff fe97 	bl	800c28c <FLASH_WaitForLastOperation>
 800c55e:	0003      	movs	r3, r0
 800c560:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800c562:	230f      	movs	r3, #15
 800c564:	18fb      	adds	r3, r7, r3
 800c566:	781b      	ldrb	r3, [r3, #0]
}  
 800c568:	0018      	movs	r0, r3
 800c56a:	46bd      	mov	sp, r7
 800c56c:	b004      	add	sp, #16
 800c56e:	bdb0      	pop	{r4, r5, r7, pc}
 800c570:	0000c350 	.word	0x0000c350
 800c574:	2000244c 	.word	0x2000244c

0800c578 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800c578:	b5b0      	push	{r4, r5, r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c584:	2317      	movs	r3, #23
 800c586:	18fb      	adds	r3, r7, r3
 800c588:	2201      	movs	r2, #1
 800c58a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c58c:	4b24      	ldr	r3, [pc, #144]	@ (800c620 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c58e:	7c1b      	ldrb	r3, [r3, #16]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d101      	bne.n	800c598 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800c594:	2302      	movs	r3, #2
 800c596:	e03e      	b.n	800c616 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800c598:	4b21      	ldr	r3, [pc, #132]	@ (800c620 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c59a:	2201      	movs	r2, #1
 800c59c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c59e:	2517      	movs	r5, #23
 800c5a0:	197c      	adds	r4, r7, r5
 800c5a2:	4b20      	ldr	r3, [pc, #128]	@ (800c624 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f7ff fe71 	bl	800c28c <FLASH_WaitForLastOperation>
 800c5aa:	0003      	movs	r3, r0
 800c5ac:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800c5ae:	197b      	adds	r3, r7, r5
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d129      	bne.n	800c60a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c5b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c620 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d103      	bne.n	800c5ca <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	601a      	str	r2, [r3, #0]
 800c5c8:	e013      	b.n	800c5f2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d104      	bne.n	800c5da <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	b292      	uxth	r2, r2
 800c5d6:	801a      	strh	r2, [r3, #0]
 800c5d8:	e00b      	b.n	800c5f2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d104      	bne.n	800c5ea <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	b2d2      	uxtb	r2, r2
 800c5e6:	701a      	strb	r2, [r3, #0]
 800c5e8:	e003      	b.n	800c5f2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800c5ea:	2317      	movs	r3, #23
 800c5ec:	18fb      	adds	r3, r7, r3
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800c5f2:	2217      	movs	r2, #23
 800c5f4:	18bb      	adds	r3, r7, r2
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c5fc:	18bc      	adds	r4, r7, r2
 800c5fe:	4b09      	ldr	r3, [pc, #36]	@ (800c624 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800c600:	0018      	movs	r0, r3
 800c602:	f7ff fe43 	bl	800c28c <FLASH_WaitForLastOperation>
 800c606:	0003      	movs	r3, r0
 800c608:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c60a:	4b05      	ldr	r3, [pc, #20]	@ (800c620 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c60c:	2200      	movs	r2, #0
 800c60e:	741a      	strb	r2, [r3, #16]

  return status;
 800c610:	2317      	movs	r3, #23
 800c612:	18fb      	adds	r3, r7, r3
 800c614:	781b      	ldrb	r3, [r3, #0]
}
 800c616:	0018      	movs	r0, r3
 800c618:	46bd      	mov	sp, r7
 800c61a:	b006      	add	sp, #24
 800c61c:	bdb0      	pop	{r4, r5, r7, pc}
 800c61e:	46c0      	nop			@ (mov r8, r8)
 800c620:	2000244c 	.word	0x2000244c
 800c624:	0000c350 	.word	0x0000c350

0800c628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c632:	2300      	movs	r3, #0
 800c634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c636:	2300      	movs	r3, #0
 800c638:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800c63a:	2300      	movs	r3, #0
 800c63c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800c63e:	e155      	b.n	800c8ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2101      	movs	r1, #1
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	4091      	lsls	r1, r2
 800c64a:	000a      	movs	r2, r1
 800c64c:	4013      	ands	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d100      	bne.n	800c658 <HAL_GPIO_Init+0x30>
 800c656:	e146      	b.n	800c8e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	2203      	movs	r2, #3
 800c65e:	4013      	ands	r3, r2
 800c660:	2b01      	cmp	r3, #1
 800c662:	d005      	beq.n	800c670 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	2203      	movs	r2, #3
 800c66a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d130      	bne.n	800c6d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	2203      	movs	r2, #3
 800c67c:	409a      	lsls	r2, r3
 800c67e:	0013      	movs	r3, r2
 800c680:	43da      	mvns	r2, r3
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	4013      	ands	r3, r2
 800c686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	68da      	ldr	r2, [r3, #12]
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	409a      	lsls	r2, r3
 800c692:	0013      	movs	r3, r2
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	4313      	orrs	r3, r2
 800c698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	409a      	lsls	r2, r3
 800c6ac:	0013      	movs	r3, r2
 800c6ae:	43da      	mvns	r2, r3
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	091b      	lsrs	r3, r3, #4
 800c6bc:	2201      	movs	r2, #1
 800c6be:	401a      	ands	r2, r3
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	409a      	lsls	r2, r3
 800c6c4:	0013      	movs	r3, r2
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	2203      	movs	r2, #3
 800c6d8:	4013      	ands	r3, r2
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d017      	beq.n	800c70e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	409a      	lsls	r2, r3
 800c6ec:	0013      	movs	r3, r2
 800c6ee:	43da      	mvns	r2, r3
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	689a      	ldr	r2, [r3, #8]
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	005b      	lsls	r3, r3, #1
 800c6fe:	409a      	lsls	r2, r3
 800c700:	0013      	movs	r3, r2
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	2203      	movs	r2, #3
 800c714:	4013      	ands	r3, r2
 800c716:	2b02      	cmp	r3, #2
 800c718:	d123      	bne.n	800c762 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	08da      	lsrs	r2, r3, #3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3208      	adds	r2, #8
 800c722:	0092      	lsls	r2, r2, #2
 800c724:	58d3      	ldr	r3, [r2, r3]
 800c726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2207      	movs	r2, #7
 800c72c:	4013      	ands	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	220f      	movs	r2, #15
 800c732:	409a      	lsls	r2, r3
 800c734:	0013      	movs	r3, r2
 800c736:	43da      	mvns	r2, r3
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	4013      	ands	r3, r2
 800c73c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	691a      	ldr	r2, [r3, #16]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	2107      	movs	r1, #7
 800c746:	400b      	ands	r3, r1
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	409a      	lsls	r2, r3
 800c74c:	0013      	movs	r3, r2
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	4313      	orrs	r3, r2
 800c752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	08da      	lsrs	r2, r3, #3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3208      	adds	r2, #8
 800c75c:	0092      	lsls	r2, r2, #2
 800c75e:	6939      	ldr	r1, [r7, #16]
 800c760:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	2203      	movs	r2, #3
 800c76e:	409a      	lsls	r2, r3
 800c770:	0013      	movs	r3, r2
 800c772:	43da      	mvns	r2, r3
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	4013      	ands	r3, r2
 800c778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	2203      	movs	r2, #3
 800c780:	401a      	ands	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	409a      	lsls	r2, r3
 800c788:	0013      	movs	r3, r2
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	685a      	ldr	r2, [r3, #4]
 800c79a:	23c0      	movs	r3, #192	@ 0xc0
 800c79c:	029b      	lsls	r3, r3, #10
 800c79e:	4013      	ands	r3, r2
 800c7a0:	d100      	bne.n	800c7a4 <HAL_GPIO_Init+0x17c>
 800c7a2:	e0a0      	b.n	800c8e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c7a4:	4b57      	ldr	r3, [pc, #348]	@ (800c904 <HAL_GPIO_Init+0x2dc>)
 800c7a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7a8:	4b56      	ldr	r3, [pc, #344]	@ (800c904 <HAL_GPIO_Init+0x2dc>)
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	430a      	orrs	r2, r1
 800c7ae:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800c7b0:	4a55      	ldr	r2, [pc, #340]	@ (800c908 <HAL_GPIO_Init+0x2e0>)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	089b      	lsrs	r3, r3, #2
 800c7b6:	3302      	adds	r3, #2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	589b      	ldr	r3, [r3, r2]
 800c7bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2203      	movs	r2, #3
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	220f      	movs	r2, #15
 800c7c8:	409a      	lsls	r2, r3
 800c7ca:	0013      	movs	r3, r2
 800c7cc:	43da      	mvns	r2, r3
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	23a0      	movs	r3, #160	@ 0xa0
 800c7d8:	05db      	lsls	r3, r3, #23
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d01f      	beq.n	800c81e <HAL_GPIO_Init+0x1f6>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a4a      	ldr	r2, [pc, #296]	@ (800c90c <HAL_GPIO_Init+0x2e4>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d019      	beq.n	800c81a <HAL_GPIO_Init+0x1f2>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a49      	ldr	r2, [pc, #292]	@ (800c910 <HAL_GPIO_Init+0x2e8>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d013      	beq.n	800c816 <HAL_GPIO_Init+0x1ee>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a48      	ldr	r2, [pc, #288]	@ (800c914 <HAL_GPIO_Init+0x2ec>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00d      	beq.n	800c812 <HAL_GPIO_Init+0x1ea>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a47      	ldr	r2, [pc, #284]	@ (800c918 <HAL_GPIO_Init+0x2f0>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d007      	beq.n	800c80e <HAL_GPIO_Init+0x1e6>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a46      	ldr	r2, [pc, #280]	@ (800c91c <HAL_GPIO_Init+0x2f4>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d101      	bne.n	800c80a <HAL_GPIO_Init+0x1e2>
 800c806:	2305      	movs	r3, #5
 800c808:	e00a      	b.n	800c820 <HAL_GPIO_Init+0x1f8>
 800c80a:	2306      	movs	r3, #6
 800c80c:	e008      	b.n	800c820 <HAL_GPIO_Init+0x1f8>
 800c80e:	2304      	movs	r3, #4
 800c810:	e006      	b.n	800c820 <HAL_GPIO_Init+0x1f8>
 800c812:	2303      	movs	r3, #3
 800c814:	e004      	b.n	800c820 <HAL_GPIO_Init+0x1f8>
 800c816:	2302      	movs	r3, #2
 800c818:	e002      	b.n	800c820 <HAL_GPIO_Init+0x1f8>
 800c81a:	2301      	movs	r3, #1
 800c81c:	e000      	b.n	800c820 <HAL_GPIO_Init+0x1f8>
 800c81e:	2300      	movs	r3, #0
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	2103      	movs	r1, #3
 800c824:	400a      	ands	r2, r1
 800c826:	0092      	lsls	r2, r2, #2
 800c828:	4093      	lsls	r3, r2
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c830:	4935      	ldr	r1, [pc, #212]	@ (800c908 <HAL_GPIO_Init+0x2e0>)
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	089b      	lsrs	r3, r3, #2
 800c836:	3302      	adds	r3, #2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c83e:	4b38      	ldr	r3, [pc, #224]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	43da      	mvns	r2, r3
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	4013      	ands	r3, r2
 800c84c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	2380      	movs	r3, #128	@ 0x80
 800c854:	035b      	lsls	r3, r3, #13
 800c856:	4013      	ands	r3, r2
 800c858:	d003      	beq.n	800c862 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4313      	orrs	r3, r2
 800c860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800c862:	4b2f      	ldr	r3, [pc, #188]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800c868:	4b2d      	ldr	r3, [pc, #180]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	43da      	mvns	r2, r3
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	4013      	ands	r3, r2
 800c876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	2380      	movs	r3, #128	@ 0x80
 800c87e:	039b      	lsls	r3, r3, #14
 800c880:	4013      	ands	r3, r2
 800c882:	d003      	beq.n	800c88c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4313      	orrs	r3, r2
 800c88a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800c88c:	4b24      	ldr	r3, [pc, #144]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800c892:	4b23      	ldr	r3, [pc, #140]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	43da      	mvns	r2, r3
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	4013      	ands	r3, r2
 800c8a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	2380      	movs	r3, #128	@ 0x80
 800c8a8:	029b      	lsls	r3, r3, #10
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	d003      	beq.n	800c8b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800c8b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c8bc:	4b18      	ldr	r3, [pc, #96]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	43da      	mvns	r2, r3
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	2380      	movs	r3, #128	@ 0x80
 800c8d2:	025b      	lsls	r3, r3, #9
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	d003      	beq.n	800c8e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800c8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c920 <HAL_GPIO_Init+0x2f8>)
 800c8e2:	693a      	ldr	r2, [r7, #16]
 800c8e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	40da      	lsrs	r2, r3
 800c8f4:	1e13      	subs	r3, r2, #0
 800c8f6:	d000      	beq.n	800c8fa <HAL_GPIO_Init+0x2d2>
 800c8f8:	e6a2      	b.n	800c640 <HAL_GPIO_Init+0x18>
  }
}
 800c8fa:	46c0      	nop			@ (mov r8, r8)
 800c8fc:	46c0      	nop			@ (mov r8, r8)
 800c8fe:	46bd      	mov	sp, r7
 800c900:	b006      	add	sp, #24
 800c902:	bd80      	pop	{r7, pc}
 800c904:	40021000 	.word	0x40021000
 800c908:	40010000 	.word	0x40010000
 800c90c:	50000400 	.word	0x50000400
 800c910:	50000800 	.word	0x50000800
 800c914:	50000c00 	.word	0x50000c00
 800c918:	50001000 	.word	0x50001000
 800c91c:	50001c00 	.word	0x50001c00
 800c920:	40010400 	.word	0x40010400

0800c924 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	000a      	movs	r2, r1
 800c92e:	1cbb      	adds	r3, r7, #2
 800c930:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	1cba      	adds	r2, r7, #2
 800c938:	8812      	ldrh	r2, [r2, #0]
 800c93a:	4013      	ands	r3, r2
 800c93c:	d004      	beq.n	800c948 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800c93e:	230f      	movs	r3, #15
 800c940:	18fb      	adds	r3, r7, r3
 800c942:	2201      	movs	r2, #1
 800c944:	701a      	strb	r2, [r3, #0]
 800c946:	e003      	b.n	800c950 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c948:	230f      	movs	r3, #15
 800c94a:	18fb      	adds	r3, r7, r3
 800c94c:	2200      	movs	r2, #0
 800c94e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800c950:	230f      	movs	r3, #15
 800c952:	18fb      	adds	r3, r7, r3
 800c954:	781b      	ldrb	r3, [r3, #0]
}
 800c956:	0018      	movs	r0, r3
 800c958:	46bd      	mov	sp, r7
 800c95a:	b004      	add	sp, #16
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	0008      	movs	r0, r1
 800c968:	0011      	movs	r1, r2
 800c96a:	1cbb      	adds	r3, r7, #2
 800c96c:	1c02      	adds	r2, r0, #0
 800c96e:	801a      	strh	r2, [r3, #0]
 800c970:	1c7b      	adds	r3, r7, #1
 800c972:	1c0a      	adds	r2, r1, #0
 800c974:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c976:	1c7b      	adds	r3, r7, #1
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c97e:	1cbb      	adds	r3, r7, #2
 800c980:	881a      	ldrh	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800c986:	e003      	b.n	800c990 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800c988:	1cbb      	adds	r3, r7, #2
 800c98a:	881a      	ldrh	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c990:	46c0      	nop			@ (mov r8, r8)
 800c992:	46bd      	mov	sp, r7
 800c994:	b002      	add	sp, #8
 800c996:	bd80      	pop	{r7, pc}

0800c998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e082      	b.n	800cab0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2241      	movs	r2, #65	@ 0x41
 800c9ae:	5c9b      	ldrb	r3, [r3, r2]
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d107      	bne.n	800c9c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2240      	movs	r2, #64	@ 0x40
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	0018      	movs	r0, r3
 800c9c2:	f7f9 fd7b 	bl	80064bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2241      	movs	r2, #65	@ 0x41
 800c9ca:	2124      	movs	r1, #36	@ 0x24
 800c9cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2101      	movs	r1, #1
 800c9da:	438a      	bics	r2, r1
 800c9dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4934      	ldr	r1, [pc, #208]	@ (800cab8 <HAL_I2C_Init+0x120>)
 800c9e8:	400a      	ands	r2, r1
 800c9ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	689a      	ldr	r2, [r3, #8]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4931      	ldr	r1, [pc, #196]	@ (800cabc <HAL_I2C_Init+0x124>)
 800c9f8:	400a      	ands	r2, r1
 800c9fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d108      	bne.n	800ca16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689a      	ldr	r2, [r3, #8]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2180      	movs	r1, #128	@ 0x80
 800ca0e:	0209      	lsls	r1, r1, #8
 800ca10:	430a      	orrs	r2, r1
 800ca12:	609a      	str	r2, [r3, #8]
 800ca14:	e007      	b.n	800ca26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	689a      	ldr	r2, [r3, #8]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2184      	movs	r1, #132	@ 0x84
 800ca20:	0209      	lsls	r1, r1, #8
 800ca22:	430a      	orrs	r2, r1
 800ca24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d104      	bne.n	800ca38 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2280      	movs	r2, #128	@ 0x80
 800ca34:	0112      	lsls	r2, r2, #4
 800ca36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	685a      	ldr	r2, [r3, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	491f      	ldr	r1, [pc, #124]	@ (800cac0 <HAL_I2C_Init+0x128>)
 800ca44:	430a      	orrs	r2, r1
 800ca46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68da      	ldr	r2, [r3, #12]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	491a      	ldr	r1, [pc, #104]	@ (800cabc <HAL_I2C_Init+0x124>)
 800ca54:	400a      	ands	r2, r1
 800ca56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	691a      	ldr	r2, [r3, #16]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	695b      	ldr	r3, [r3, #20]
 800ca60:	431a      	orrs	r2, r3
 800ca62:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	699b      	ldr	r3, [r3, #24]
 800ca68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	430a      	orrs	r2, r1
 800ca70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	69d9      	ldr	r1, [r3, #28]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1a      	ldr	r2, [r3, #32]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	430a      	orrs	r2, r1
 800ca80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	430a      	orrs	r2, r1
 800ca90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2241      	movs	r2, #65	@ 0x41
 800ca9c:	2120      	movs	r1, #32
 800ca9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2242      	movs	r2, #66	@ 0x42
 800caaa:	2100      	movs	r1, #0
 800caac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	0018      	movs	r0, r3
 800cab2:	46bd      	mov	sp, r7
 800cab4:	b002      	add	sp, #8
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	f0ffffff 	.word	0xf0ffffff
 800cabc:	ffff7fff 	.word	0xffff7fff
 800cac0:	02008000 	.word	0x02008000

0800cac4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800cac4:	b5b0      	push	{r4, r5, r7, lr}
 800cac6:	b088      	sub	sp, #32
 800cac8:	af02      	add	r7, sp, #8
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	0008      	movs	r0, r1
 800cace:	607a      	str	r2, [r7, #4]
 800cad0:	0019      	movs	r1, r3
 800cad2:	230a      	movs	r3, #10
 800cad4:	18fb      	adds	r3, r7, r3
 800cad6:	1c02      	adds	r2, r0, #0
 800cad8:	801a      	strh	r2, [r3, #0]
 800cada:	2308      	movs	r3, #8
 800cadc:	18fb      	adds	r3, r7, r3
 800cade:	1c0a      	adds	r2, r1, #0
 800cae0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2241      	movs	r2, #65	@ 0x41
 800cae6:	5c9b      	ldrb	r3, [r3, r2]
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	2b20      	cmp	r3, #32
 800caec:	d000      	beq.n	800caf0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800caee:	e0dd      	b.n	800ccac <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	699a      	ldr	r2, [r3, #24]
 800caf6:	2380      	movs	r3, #128	@ 0x80
 800caf8:	021b      	lsls	r3, r3, #8
 800cafa:	401a      	ands	r2, r3
 800cafc:	2380      	movs	r3, #128	@ 0x80
 800cafe:	021b      	lsls	r3, r3, #8
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d101      	bne.n	800cb08 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800cb04:	2302      	movs	r3, #2
 800cb06:	e0d2      	b.n	800ccae <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2240      	movs	r2, #64	@ 0x40
 800cb0c:	5c9b      	ldrb	r3, [r3, r2]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d101      	bne.n	800cb16 <HAL_I2C_Master_Transmit_DMA+0x52>
 800cb12:	2302      	movs	r3, #2
 800cb14:	e0cb      	b.n	800ccae <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2240      	movs	r2, #64	@ 0x40
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2241      	movs	r2, #65	@ 0x41
 800cb22:	2121      	movs	r1, #33	@ 0x21
 800cb24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2242      	movs	r2, #66	@ 0x42
 800cb2a:	2110      	movs	r1, #16
 800cb2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2208      	movs	r2, #8
 800cb3e:	18ba      	adds	r2, r7, r2
 800cb40:	8812      	ldrh	r2, [r2, #0]
 800cb42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4a5c      	ldr	r2, [pc, #368]	@ (800ccb8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800cb48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	4a5b      	ldr	r2, [pc, #364]	@ (800ccbc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800cb4e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	2bff      	cmp	r3, #255	@ 0xff
 800cb58:	d906      	bls.n	800cb68 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	22ff      	movs	r2, #255	@ 0xff
 800cb5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800cb60:	2380      	movs	r3, #128	@ 0x80
 800cb62:	045b      	lsls	r3, r3, #17
 800cb64:	617b      	str	r3, [r7, #20]
 800cb66:	e007      	b.n	800cb78 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cb72:	2380      	movs	r3, #128	@ 0x80
 800cb74:	049b      	lsls	r3, r3, #18
 800cb76:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d100      	bne.n	800cb82 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800cb80:	e078      	b.n	800cc74 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d023      	beq.n	800cbd2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb8e:	4a4c      	ldr	r2, [pc, #304]	@ (800ccc0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800cb90:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb96:	4a4b      	ldr	r2, [pc, #300]	@ (800ccc4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800cb98:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb9e:	2200      	movs	r2, #0
 800cba0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba6:	2200      	movs	r2, #0
 800cba8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3328      	adds	r3, #40	@ 0x28
 800cbb6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800cbbc:	2513      	movs	r5, #19
 800cbbe:	197c      	adds	r4, r7, r5
 800cbc0:	f7ff f98e 	bl	800bee0 <HAL_DMA_Start_IT>
 800cbc4:	0003      	movs	r3, r0
 800cbc6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cbc8:	197b      	adds	r3, r7, r5
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d13d      	bne.n	800cc4c <HAL_I2C_Master_Transmit_DMA+0x188>
 800cbd0:	e013      	b.n	800cbfa <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2241      	movs	r2, #65	@ 0x41
 800cbd6:	2120      	movs	r1, #32
 800cbd8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2242      	movs	r2, #66	@ 0x42
 800cbde:	2100      	movs	r1, #0
 800cbe0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbe6:	2280      	movs	r2, #128	@ 0x80
 800cbe8:	431a      	orrs	r2, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2240      	movs	r2, #64	@ 0x40
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e059      	b.n	800ccae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	697c      	ldr	r4, [r7, #20]
 800cc02:	230a      	movs	r3, #10
 800cc04:	18fb      	adds	r3, r7, r3
 800cc06:	8819      	ldrh	r1, [r3, #0]
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	4b2f      	ldr	r3, [pc, #188]	@ (800ccc8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	0023      	movs	r3, r4
 800cc10:	f001 fd0e 	bl	800e630 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2240      	movs	r2, #64	@ 0x40
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2110      	movs	r1, #16
 800cc32:	0018      	movs	r0, r3
 800cc34:	f001 fd36 	bl	800e6a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2180      	movs	r1, #128	@ 0x80
 800cc44:	01c9      	lsls	r1, r1, #7
 800cc46:	430a      	orrs	r2, r1
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	e02d      	b.n	800cca8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2241      	movs	r2, #65	@ 0x41
 800cc50:	2120      	movs	r1, #32
 800cc52:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2242      	movs	r2, #66	@ 0x42
 800cc58:	2100      	movs	r1, #0
 800cc5a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc60:	2210      	movs	r2, #16
 800cc62:	431a      	orrs	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2240      	movs	r2, #64	@ 0x40
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e01c      	b.n	800ccae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	4a15      	ldr	r2, [pc, #84]	@ (800cccc <HAL_I2C_Master_Transmit_DMA+0x208>)
 800cc78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	2380      	movs	r3, #128	@ 0x80
 800cc82:	049c      	lsls	r4, r3, #18
 800cc84:	230a      	movs	r3, #10
 800cc86:	18fb      	adds	r3, r7, r3
 800cc88:	8819      	ldrh	r1, [r3, #0]
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	4b0e      	ldr	r3, [pc, #56]	@ (800ccc8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	0023      	movs	r3, r4
 800cc92:	f001 fccd 	bl	800e630 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2240      	movs	r2, #64	@ 0x40
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2101      	movs	r1, #1
 800cca2:	0018      	movs	r0, r3
 800cca4:	f001 fcfe 	bl	800e6a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	e000      	b.n	800ccae <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ccac:	2302      	movs	r3, #2
  }
}
 800ccae:	0018      	movs	r0, r3
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	b006      	add	sp, #24
 800ccb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ccb6:	46c0      	nop			@ (mov r8, r8)
 800ccb8:	ffff0000 	.word	0xffff0000
 800ccbc:	0800d4c9 	.word	0x0800d4c9
 800ccc0:	0800e481 	.word	0x0800e481
 800ccc4:	0800e5c1 	.word	0x0800e5c1
 800ccc8:	80002000 	.word	0x80002000
 800cccc:	0800d075 	.word	0x0800d075

0800ccd0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800ccd0:	b5b0      	push	{r4, r5, r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	0008      	movs	r0, r1
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	0019      	movs	r1, r3
 800ccde:	230a      	movs	r3, #10
 800cce0:	18fb      	adds	r3, r7, r3
 800cce2:	1c02      	adds	r2, r0, #0
 800cce4:	801a      	strh	r2, [r3, #0]
 800cce6:	2308      	movs	r3, #8
 800cce8:	18fb      	adds	r3, r7, r3
 800ccea:	1c0a      	adds	r2, r1, #0
 800ccec:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2241      	movs	r2, #65	@ 0x41
 800ccf2:	5c9b      	ldrb	r3, [r3, r2]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b20      	cmp	r3, #32
 800ccf8:	d000      	beq.n	800ccfc <HAL_I2C_Master_Receive_DMA+0x2c>
 800ccfa:	e0dd      	b.n	800ceb8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	699a      	ldr	r2, [r3, #24]
 800cd02:	2380      	movs	r3, #128	@ 0x80
 800cd04:	021b      	lsls	r3, r3, #8
 800cd06:	401a      	ands	r2, r3
 800cd08:	2380      	movs	r3, #128	@ 0x80
 800cd0a:	021b      	lsls	r3, r3, #8
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d101      	bne.n	800cd14 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800cd10:	2302      	movs	r3, #2
 800cd12:	e0d2      	b.n	800ceba <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2240      	movs	r2, #64	@ 0x40
 800cd18:	5c9b      	ldrb	r3, [r3, r2]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d101      	bne.n	800cd22 <HAL_I2C_Master_Receive_DMA+0x52>
 800cd1e:	2302      	movs	r3, #2
 800cd20:	e0cb      	b.n	800ceba <HAL_I2C_Master_Receive_DMA+0x1ea>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2240      	movs	r2, #64	@ 0x40
 800cd26:	2101      	movs	r1, #1
 800cd28:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2241      	movs	r2, #65	@ 0x41
 800cd2e:	2122      	movs	r1, #34	@ 0x22
 800cd30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2242      	movs	r2, #66	@ 0x42
 800cd36:	2110      	movs	r1, #16
 800cd38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2208      	movs	r2, #8
 800cd4a:	18ba      	adds	r2, r7, r2
 800cd4c:	8812      	ldrh	r2, [r2, #0]
 800cd4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4a5c      	ldr	r2, [pc, #368]	@ (800cec4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800cd54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	4a5b      	ldr	r2, [pc, #364]	@ (800cec8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800cd5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	2bff      	cmp	r3, #255	@ 0xff
 800cd64:	d906      	bls.n	800cd74 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	22ff      	movs	r2, #255	@ 0xff
 800cd6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800cd6c:	2380      	movs	r3, #128	@ 0x80
 800cd6e:	045b      	lsls	r3, r3, #17
 800cd70:	617b      	str	r3, [r7, #20]
 800cd72:	e007      	b.n	800cd84 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cd7e:	2380      	movs	r3, #128	@ 0x80
 800cd80:	049b      	lsls	r3, r3, #18
 800cd82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d100      	bne.n	800cd8e <HAL_I2C_Master_Receive_DMA+0xbe>
 800cd8c:	e078      	b.n	800ce80 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d023      	beq.n	800cdde <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd9a:	4a4c      	ldr	r2, [pc, #304]	@ (800cecc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800cd9c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cda2:	4a4b      	ldr	r2, [pc, #300]	@ (800ced0 <HAL_I2C_Master_Receive_DMA+0x200>)
 800cda4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdaa:	2200      	movs	r2, #0
 800cdac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3324      	adds	r3, #36	@ 0x24
 800cdc0:	0019      	movs	r1, r3
 800cdc2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800cdc8:	2513      	movs	r5, #19
 800cdca:	197c      	adds	r4, r7, r5
 800cdcc:	f7ff f888 	bl	800bee0 <HAL_DMA_Start_IT>
 800cdd0:	0003      	movs	r3, r0
 800cdd2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cdd4:	197b      	adds	r3, r7, r5
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d13d      	bne.n	800ce58 <HAL_I2C_Master_Receive_DMA+0x188>
 800cddc:	e013      	b.n	800ce06 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2241      	movs	r2, #65	@ 0x41
 800cde2:	2120      	movs	r1, #32
 800cde4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2242      	movs	r2, #66	@ 0x42
 800cdea:	2100      	movs	r1, #0
 800cdec:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdf2:	2280      	movs	r2, #128	@ 0x80
 800cdf4:	431a      	orrs	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2240      	movs	r2, #64	@ 0x40
 800cdfe:	2100      	movs	r1, #0
 800ce00:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e059      	b.n	800ceba <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	697c      	ldr	r4, [r7, #20]
 800ce0e:	230a      	movs	r3, #10
 800ce10:	18fb      	adds	r3, r7, r3
 800ce12:	8819      	ldrh	r1, [r3, #0]
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	4b2f      	ldr	r3, [pc, #188]	@ (800ced4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	0023      	movs	r3, r4
 800ce1c:	f001 fc08 	bl	800e630 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2240      	movs	r2, #64	@ 0x40
 800ce36:	2100      	movs	r1, #0
 800ce38:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2110      	movs	r1, #16
 800ce3e:	0018      	movs	r0, r3
 800ce40:	f001 fc30 	bl	800e6a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2180      	movs	r1, #128	@ 0x80
 800ce50:	0209      	lsls	r1, r1, #8
 800ce52:	430a      	orrs	r2, r1
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	e02d      	b.n	800ceb4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2241      	movs	r2, #65	@ 0x41
 800ce5c:	2120      	movs	r1, #32
 800ce5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2242      	movs	r2, #66	@ 0x42
 800ce64:	2100      	movs	r1, #0
 800ce66:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce6c:	2210      	movs	r2, #16
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2240      	movs	r2, #64	@ 0x40
 800ce78:	2100      	movs	r1, #0
 800ce7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e01c      	b.n	800ceba <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	4a15      	ldr	r2, [pc, #84]	@ (800ced8 <HAL_I2C_Master_Receive_DMA+0x208>)
 800ce84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	2380      	movs	r3, #128	@ 0x80
 800ce8e:	049c      	lsls	r4, r3, #18
 800ce90:	230a      	movs	r3, #10
 800ce92:	18fb      	adds	r3, r7, r3
 800ce94:	8819      	ldrh	r1, [r3, #0]
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	4b0e      	ldr	r3, [pc, #56]	@ (800ced4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	0023      	movs	r3, r4
 800ce9e:	f001 fbc7 	bl	800e630 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2240      	movs	r2, #64	@ 0x40
 800cea6:	2100      	movs	r1, #0
 800cea8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2101      	movs	r1, #1
 800ceae:	0018      	movs	r0, r3
 800ceb0:	f001 fbf8 	bl	800e6a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	e000      	b.n	800ceba <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ceb8:	2302      	movs	r3, #2
  }
}
 800ceba:	0018      	movs	r0, r3
 800cebc:	46bd      	mov	sp, r7
 800cebe:	b006      	add	sp, #24
 800cec0:	bdb0      	pop	{r4, r5, r7, pc}
 800cec2:	46c0      	nop			@ (mov r8, r8)
 800cec4:	ffff0000 	.word	0xffff0000
 800cec8:	0800d4c9 	.word	0x0800d4c9
 800cecc:	0800e521 	.word	0x0800e521
 800ced0:	0800e5c1 	.word	0x0800e5c1
 800ced4:	80002400 	.word	0x80002400
 800ced8:	0800d075 	.word	0x0800d075

0800cedc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d005      	beq.n	800cf08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	68f9      	ldr	r1, [r7, #12]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	4798      	blx	r3
  }
}
 800cf08:	46c0      	nop			@ (mov r8, r8)
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	b004      	add	sp, #16
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	699b      	ldr	r3, [r3, #24]
 800cf1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	2380      	movs	r3, #128	@ 0x80
 800cf2c:	005b      	lsls	r3, r3, #1
 800cf2e:	4013      	ands	r3, r2
 800cf30:	d00e      	beq.n	800cf50 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2280      	movs	r2, #128	@ 0x80
 800cf36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cf38:	d00a      	beq.n	800cf50 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf3e:	2201      	movs	r2, #1
 800cf40:	431a      	orrs	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2280      	movs	r2, #128	@ 0x80
 800cf4c:	0052      	lsls	r2, r2, #1
 800cf4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	2380      	movs	r3, #128	@ 0x80
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	4013      	ands	r3, r2
 800cf58:	d00e      	beq.n	800cf78 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	2280      	movs	r2, #128	@ 0x80
 800cf5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cf60:	d00a      	beq.n	800cf78 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf66:	2208      	movs	r2, #8
 800cf68:	431a      	orrs	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2280      	movs	r2, #128	@ 0x80
 800cf74:	00d2      	lsls	r2, r2, #3
 800cf76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	2380      	movs	r3, #128	@ 0x80
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	4013      	ands	r3, r2
 800cf80:	d00e      	beq.n	800cfa0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	2280      	movs	r2, #128	@ 0x80
 800cf86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cf88:	d00a      	beq.n	800cfa0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf8e:	2202      	movs	r2, #2
 800cf90:	431a      	orrs	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2280      	movs	r2, #128	@ 0x80
 800cf9c:	0092      	lsls	r2, r2, #2
 800cf9e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	220b      	movs	r2, #11
 800cfaa:	4013      	ands	r3, r2
 800cfac:	d005      	beq.n	800cfba <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	0011      	movs	r1, r2
 800cfb4:	0018      	movs	r0, r3
 800cfb6:	f001 f915 	bl	800e1e4 <I2C_ITError>
  }
}
 800cfba:	46c0      	nop			@ (mov r8, r8)
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	b006      	add	sp, #24
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800cfca:	46c0      	nop			@ (mov r8, r8)
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b002      	add	sp, #8
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800cfda:	46c0      	nop			@ (mov r8, r8)
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	b002      	add	sp, #8
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800cfea:	46c0      	nop			@ (mov r8, r8)
 800cfec:	46bd      	mov	sp, r7
 800cfee:	b002      	add	sp, #8
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cffa:	46c0      	nop			@ (mov r8, r8)
 800cffc:	46bd      	mov	sp, r7
 800cffe:	b002      	add	sp, #8
 800d000:	bd80      	pop	{r7, pc}

0800d002 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
 800d00a:	0008      	movs	r0, r1
 800d00c:	0011      	movs	r1, r2
 800d00e:	1cfb      	adds	r3, r7, #3
 800d010:	1c02      	adds	r2, r0, #0
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	003b      	movs	r3, r7
 800d016:	1c0a      	adds	r2, r1, #0
 800d018:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d01a:	46c0      	nop			@ (mov r8, r8)
 800d01c:	46bd      	mov	sp, r7
 800d01e:	b002      	add	sp, #8
 800d020:	bd80      	pop	{r7, pc}

0800d022 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b082      	sub	sp, #8
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d02a:	46c0      	nop			@ (mov r8, r8)
 800d02c:	46bd      	mov	sp, r7
 800d02e:	b002      	add	sp, #8
 800d030:	bd80      	pop	{r7, pc}

0800d032 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b082      	sub	sp, #8
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d03a:	46c0      	nop			@ (mov r8, r8)
 800d03c:	46bd      	mov	sp, r7
 800d03e:	b002      	add	sp, #8
 800d040:	bd80      	pop	{r7, pc}

0800d042 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b082      	sub	sp, #8
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d04a:	46c0      	nop			@ (mov r8, r8)
 800d04c:	46bd      	mov	sp, r7
 800d04e:	b002      	add	sp, #8
 800d050:	bd80      	pop	{r7, pc}

0800d052 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b082      	sub	sp, #8
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d05a:	46c0      	nop			@ (mov r8, r8)
 800d05c:	46bd      	mov	sp, r7
 800d05e:	b002      	add	sp, #8
 800d060:	bd80      	pop	{r7, pc}

0800d062 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d06a:	46c0      	nop			@ (mov r8, r8)
 800d06c:	46bd      	mov	sp, r7
 800d06e:	b002      	add	sp, #8
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d074:	b590      	push	{r4, r7, lr}
 800d076:	b089      	sub	sp, #36	@ 0x24
 800d078:	af02      	add	r7, sp, #8
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2240      	movs	r2, #64	@ 0x40
 800d088:	5c9b      	ldrb	r3, [r3, r2]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d101      	bne.n	800d092 <I2C_Master_ISR_IT+0x1e>
 800d08e:	2302      	movs	r3, #2
 800d090:	e113      	b.n	800d2ba <I2C_Master_ISR_IT+0x246>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2240      	movs	r2, #64	@ 0x40
 800d096:	2101      	movs	r1, #1
 800d098:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	2210      	movs	r2, #16
 800d09e:	4013      	ands	r3, r2
 800d0a0:	d012      	beq.n	800d0c8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2210      	movs	r2, #16
 800d0a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d0a8:	d00e      	beq.n	800d0c8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2210      	movs	r2, #16
 800d0b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0b6:	2204      	movs	r2, #4
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	0018      	movs	r0, r3
 800d0c2:	f001 f9ba 	bl	800e43a <I2C_Flush_TXDR>
 800d0c6:	e0e5      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	d021      	beq.n	800d114 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2204      	movs	r2, #4
 800d0d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d0d6:	d01d      	beq.n	800d114 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2204      	movs	r2, #4
 800d0dc:	4393      	bics	r3, r2
 800d0de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ea:	b2d2      	uxtb	r2, r2
 800d0ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d108:	b29b      	uxth	r3, r3
 800d10a:	3b01      	subs	r3, #1
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d112:	e0bf      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2202      	movs	r2, #2
 800d118:	4013      	ands	r3, r2
 800d11a:	d01c      	beq.n	800d156 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2202      	movs	r2, #2
 800d120:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d122:	d018      	beq.n	800d156 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d128:	781a      	ldrb	r2, [r3, #0]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d134:	1c5a      	adds	r2, r3, #1
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d13e:	3b01      	subs	r3, #1
 800d140:	b29a      	uxth	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	3b01      	subs	r3, #1
 800d14e:	b29a      	uxth	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d154:	e09e      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2280      	movs	r2, #128	@ 0x80
 800d15a:	4013      	ands	r3, r2
 800d15c:	d100      	bne.n	800d160 <I2C_Master_ISR_IT+0xec>
 800d15e:	e069      	b.n	800d234 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2240      	movs	r2, #64	@ 0x40
 800d164:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d166:	d065      	beq.n	800d234 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d04a      	beq.n	800d208 <I2C_Master_ISR_IT+0x194>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d176:	2b00      	cmp	r3, #0
 800d178:	d146      	bne.n	800d208 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	b29a      	uxth	r2, r3
 800d182:	2112      	movs	r1, #18
 800d184:	187b      	adds	r3, r7, r1
 800d186:	0592      	lsls	r2, r2, #22
 800d188:	0d92      	lsrs	r2, r2, #22
 800d18a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d190:	b29b      	uxth	r3, r3
 800d192:	2bff      	cmp	r3, #255	@ 0xff
 800d194:	d910      	bls.n	800d1b8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	22ff      	movs	r2, #255	@ 0xff
 800d19a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1a0:	b2da      	uxtb	r2, r3
 800d1a2:	2380      	movs	r3, #128	@ 0x80
 800d1a4:	045c      	lsls	r4, r3, #17
 800d1a6:	187b      	adds	r3, r7, r1
 800d1a8:	8819      	ldrh	r1, [r3, #0]
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	0023      	movs	r3, r4
 800d1b2:	f001 fa3d 	bl	800e630 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1b6:	e03c      	b.n	800d232 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c6:	4a3f      	ldr	r2, [pc, #252]	@ (800d2c4 <I2C_Master_ISR_IT+0x250>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d00e      	beq.n	800d1ea <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1d0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d1d6:	2312      	movs	r3, #18
 800d1d8:	18fb      	adds	r3, r7, r3
 800d1da:	8819      	ldrh	r1, [r3, #0]
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	0023      	movs	r3, r4
 800d1e4:	f001 fa24 	bl	800e630 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1e8:	e023      	b.n	800d232 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	2380      	movs	r3, #128	@ 0x80
 800d1f2:	049c      	lsls	r4, r3, #18
 800d1f4:	2312      	movs	r3, #18
 800d1f6:	18fb      	adds	r3, r7, r3
 800d1f8:	8819      	ldrh	r1, [r3, #0]
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	0023      	movs	r3, r4
 800d202:	f001 fa15 	bl	800e630 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d206:	e014      	b.n	800d232 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	2380      	movs	r3, #128	@ 0x80
 800d210:	049b      	lsls	r3, r3, #18
 800d212:	401a      	ands	r2, r3
 800d214:	2380      	movs	r3, #128	@ 0x80
 800d216:	049b      	lsls	r3, r3, #18
 800d218:	429a      	cmp	r2, r3
 800d21a:	d004      	beq.n	800d226 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	0018      	movs	r0, r3
 800d220:	f000 fcf4 	bl	800dc0c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d224:	e036      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2140      	movs	r1, #64	@ 0x40
 800d22a:	0018      	movs	r0, r3
 800d22c:	f000 ffda 	bl	800e1e4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d230:	e030      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
 800d232:	e02f      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	2240      	movs	r2, #64	@ 0x40
 800d238:	4013      	ands	r3, r2
 800d23a:	d02b      	beq.n	800d294 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2240      	movs	r2, #64	@ 0x40
 800d240:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d242:	d027      	beq.n	800d294 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d248:	b29b      	uxth	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d11d      	bne.n	800d28a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	2380      	movs	r3, #128	@ 0x80
 800d256:	049b      	lsls	r3, r3, #18
 800d258:	401a      	ands	r2, r3
 800d25a:	2380      	movs	r3, #128	@ 0x80
 800d25c:	049b      	lsls	r3, r3, #18
 800d25e:	429a      	cmp	r2, r3
 800d260:	d018      	beq.n	800d294 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d266:	4a17      	ldr	r2, [pc, #92]	@ (800d2c4 <I2C_Master_ISR_IT+0x250>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d109      	bne.n	800d280 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2180      	movs	r1, #128	@ 0x80
 800d278:	01c9      	lsls	r1, r1, #7
 800d27a:	430a      	orrs	r2, r1
 800d27c:	605a      	str	r2, [r3, #4]
 800d27e:	e009      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	0018      	movs	r0, r3
 800d284:	f000 fcc2 	bl	800dc0c <I2C_ITMasterSeqCplt>
 800d288:	e004      	b.n	800d294 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2140      	movs	r1, #64	@ 0x40
 800d28e:	0018      	movs	r0, r3
 800d290:	f000 ffa8 	bl	800e1e4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	2220      	movs	r2, #32
 800d298:	4013      	ands	r3, r2
 800d29a:	d009      	beq.n	800d2b0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2220      	movs	r2, #32
 800d2a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d2a2:	d005      	beq.n	800d2b0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800d2a4:	697a      	ldr	r2, [r7, #20]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	0011      	movs	r1, r2
 800d2aa:	0018      	movs	r0, r3
 800d2ac:	f000 fd54 	bl	800dd58 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2240      	movs	r2, #64	@ 0x40
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	0018      	movs	r0, r3
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	b007      	add	sp, #28
 800d2c0:	bd90      	pop	{r4, r7, pc}
 800d2c2:	46c0      	nop			@ (mov r8, r8)
 800d2c4:	ffff0000 	.word	0xffff0000

0800d2c8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2240      	movs	r2, #64	@ 0x40
 800d2e2:	5c9b      	ldrb	r3, [r3, r2]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d101      	bne.n	800d2ec <I2C_Slave_ISR_IT+0x24>
 800d2e8:	2302      	movs	r3, #2
 800d2ea:	e0e6      	b.n	800d4ba <I2C_Slave_ISR_IT+0x1f2>
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2240      	movs	r2, #64	@ 0x40
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	2220      	movs	r2, #32
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	d009      	beq.n	800d310 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2220      	movs	r2, #32
 800d300:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d302:	d005      	beq.n	800d310 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	0011      	movs	r1, r2
 800d30a:	0018      	movs	r0, r3
 800d30c:	f000 fdf2 	bl	800def4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	2210      	movs	r2, #16
 800d314:	4013      	ands	r3, r2
 800d316:	d052      	beq.n	800d3be <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2210      	movs	r2, #16
 800d31c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d31e:	d04e      	beq.n	800d3be <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d324:	b29b      	uxth	r3, r3
 800d326:	2b00      	cmp	r3, #0
 800d328:	d12d      	bne.n	800d386 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2241      	movs	r2, #65	@ 0x41
 800d32e:	5c9b      	ldrb	r3, [r3, r2]
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b28      	cmp	r3, #40	@ 0x28
 800d334:	d10b      	bne.n	800d34e <I2C_Slave_ISR_IT+0x86>
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	2380      	movs	r3, #128	@ 0x80
 800d33a:	049b      	lsls	r3, r3, #18
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d106      	bne.n	800d34e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	0011      	movs	r1, r2
 800d346:	0018      	movs	r0, r3
 800d348:	f000 fef4 	bl	800e134 <I2C_ITListenCplt>
 800d34c:	e036      	b.n	800d3bc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2241      	movs	r2, #65	@ 0x41
 800d352:	5c9b      	ldrb	r3, [r3, r2]
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b29      	cmp	r3, #41	@ 0x29
 800d358:	d110      	bne.n	800d37c <I2C_Slave_ISR_IT+0xb4>
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	4a59      	ldr	r2, [pc, #356]	@ (800d4c4 <I2C_Slave_ISR_IT+0x1fc>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d00c      	beq.n	800d37c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2210      	movs	r2, #16
 800d368:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	0018      	movs	r0, r3
 800d36e:	f001 f864 	bl	800e43a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	0018      	movs	r0, r3
 800d376:	f000 fc8b 	bl	800dc90 <I2C_ITSlaveSeqCplt>
 800d37a:	e01f      	b.n	800d3bc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2210      	movs	r2, #16
 800d382:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d384:	e091      	b.n	800d4aa <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2210      	movs	r2, #16
 800d38c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d392:	2204      	movs	r2, #4
 800d394:	431a      	orrs	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d005      	beq.n	800d3ac <I2C_Slave_ISR_IT+0xe4>
 800d3a0:	697a      	ldr	r2, [r7, #20]
 800d3a2:	2380      	movs	r3, #128	@ 0x80
 800d3a4:	045b      	lsls	r3, r3, #17
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d000      	beq.n	800d3ac <I2C_Slave_ISR_IT+0xe4>
 800d3aa:	e07e      	b.n	800d4aa <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	0011      	movs	r1, r2
 800d3b4:	0018      	movs	r0, r3
 800d3b6:	f000 ff15 	bl	800e1e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d3ba:	e076      	b.n	800d4aa <I2C_Slave_ISR_IT+0x1e2>
 800d3bc:	e075      	b.n	800d4aa <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2204      	movs	r2, #4
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	d02f      	beq.n	800d426 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d3cc:	d02b      	beq.n	800d426 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d018      	beq.n	800d40a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e2:	b2d2      	uxtb	r2, r2
 800d3e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ea:	1c5a      	adds	r2, r3, #1
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d40e:	b29b      	uxth	r3, r3
 800d410:	2b00      	cmp	r3, #0
 800d412:	d14c      	bne.n	800d4ae <I2C_Slave_ISR_IT+0x1e6>
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	4a2b      	ldr	r2, [pc, #172]	@ (800d4c4 <I2C_Slave_ISR_IT+0x1fc>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d048      	beq.n	800d4ae <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	0018      	movs	r0, r3
 800d420:	f000 fc36 	bl	800dc90 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d424:	e043      	b.n	800d4ae <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2208      	movs	r2, #8
 800d42a:	4013      	ands	r3, r2
 800d42c:	d00a      	beq.n	800d444 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2208      	movs	r2, #8
 800d432:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d434:	d006      	beq.n	800d444 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	0011      	movs	r1, r2
 800d43c:	0018      	movs	r0, r3
 800d43e:	f000 fb41 	bl	800dac4 <I2C_ITAddrCplt>
 800d442:	e035      	b.n	800d4b0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	2202      	movs	r2, #2
 800d448:	4013      	ands	r3, r2
 800d44a:	d031      	beq.n	800d4b0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2202      	movs	r2, #2
 800d450:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d452:	d02d      	beq.n	800d4b0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d458:	b29b      	uxth	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d018      	beq.n	800d490 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d462:	781a      	ldrb	r2, [r3, #0]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d478:	b29b      	uxth	r3, r3
 800d47a:	3b01      	subs	r3, #1
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d486:	3b01      	subs	r3, #1
 800d488:	b29a      	uxth	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d48e:	e00f      	b.n	800d4b0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	2380      	movs	r3, #128	@ 0x80
 800d494:	045b      	lsls	r3, r3, #17
 800d496:	429a      	cmp	r2, r3
 800d498:	d002      	beq.n	800d4a0 <I2C_Slave_ISR_IT+0x1d8>
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d107      	bne.n	800d4b0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	0018      	movs	r0, r3
 800d4a4:	f000 fbf4 	bl	800dc90 <I2C_ITSlaveSeqCplt>
 800d4a8:	e002      	b.n	800d4b0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800d4aa:	46c0      	nop			@ (mov r8, r8)
 800d4ac:	e000      	b.n	800d4b0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800d4ae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2240      	movs	r2, #64	@ 0x40
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	0018      	movs	r0, r3
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	b006      	add	sp, #24
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	46c0      	nop			@ (mov r8, r8)
 800d4c4:	ffff0000 	.word	0xffff0000

0800d4c8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800d4c8:	b590      	push	{r4, r7, lr}
 800d4ca:	b089      	sub	sp, #36	@ 0x24
 800d4cc:	af02      	add	r7, sp, #8
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2240      	movs	r2, #64	@ 0x40
 800d4d8:	5c9b      	ldrb	r3, [r3, r2]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d101      	bne.n	800d4e2 <I2C_Master_ISR_DMA+0x1a>
 800d4de:	2302      	movs	r3, #2
 800d4e0:	e0e7      	b.n	800d6b2 <I2C_Master_ISR_DMA+0x1ea>
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2240      	movs	r2, #64	@ 0x40
 800d4e6:	2101      	movs	r1, #1
 800d4e8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2210      	movs	r2, #16
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	d017      	beq.n	800d522 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2210      	movs	r2, #16
 800d4f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d4f8:	d013      	beq.n	800d522 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2210      	movs	r2, #16
 800d500:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d506:	2204      	movs	r2, #4
 800d508:	431a      	orrs	r2, r3
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2120      	movs	r1, #32
 800d512:	0018      	movs	r0, r3
 800d514:	f001 f8c6 	bl	800e6a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	0018      	movs	r0, r3
 800d51c:	f000 ff8d 	bl	800e43a <I2C_Flush_TXDR>
 800d520:	e0c2      	b.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2280      	movs	r2, #128	@ 0x80
 800d526:	4013      	ands	r3, r2
 800d528:	d100      	bne.n	800d52c <I2C_Master_ISR_DMA+0x64>
 800d52a:	e07c      	b.n	800d626 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2240      	movs	r2, #64	@ 0x40
 800d530:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d532:	d100      	bne.n	800d536 <I2C_Master_ISR_DMA+0x6e>
 800d534:	e077      	b.n	800d626 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2140      	movs	r1, #64	@ 0x40
 800d542:	438a      	bics	r2, r1
 800d544:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d055      	beq.n	800d5fc <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	b29a      	uxth	r2, r3
 800d558:	2312      	movs	r3, #18
 800d55a:	18fb      	adds	r3, r7, r3
 800d55c:	0592      	lsls	r2, r2, #22
 800d55e:	0d92      	lsrs	r2, r2, #22
 800d560:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d566:	b29b      	uxth	r3, r3
 800d568:	2bff      	cmp	r3, #255	@ 0xff
 800d56a:	d906      	bls.n	800d57a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	22ff      	movs	r2, #255	@ 0xff
 800d570:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800d572:	2380      	movs	r3, #128	@ 0x80
 800d574:	045b      	lsls	r3, r3, #17
 800d576:	617b      	str	r3, [r7, #20]
 800d578:	e010      	b.n	800d59c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d57e:	b29a      	uxth	r2, r3
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d588:	4a4c      	ldr	r2, [pc, #304]	@ (800d6bc <I2C_Master_ISR_DMA+0x1f4>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d003      	beq.n	800d596 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	e002      	b.n	800d59c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800d596:	2380      	movs	r3, #128	@ 0x80
 800d598:	049b      	lsls	r3, r3, #18
 800d59a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5a0:	b2da      	uxtb	r2, r3
 800d5a2:	697c      	ldr	r4, [r7, #20]
 800d5a4:	2312      	movs	r3, #18
 800d5a6:	18fb      	adds	r3, r7, r3
 800d5a8:	8819      	ldrh	r1, [r3, #0]
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	0023      	movs	r3, r4
 800d5b2:	f001 f83d 	bl	800e630 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2241      	movs	r2, #65	@ 0x41
 800d5cc:	5c9b      	ldrb	r3, [r3, r2]
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b22      	cmp	r3, #34	@ 0x22
 800d5d2:	d109      	bne.n	800d5e8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2180      	movs	r1, #128	@ 0x80
 800d5e0:	0209      	lsls	r1, r1, #8
 800d5e2:	430a      	orrs	r2, r1
 800d5e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d5e6:	e05f      	b.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2180      	movs	r1, #128	@ 0x80
 800d5f4:	01c9      	lsls	r1, r1, #7
 800d5f6:	430a      	orrs	r2, r1
 800d5f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d5fa:	e055      	b.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685a      	ldr	r2, [r3, #4]
 800d602:	2380      	movs	r3, #128	@ 0x80
 800d604:	049b      	lsls	r3, r3, #18
 800d606:	401a      	ands	r2, r3
 800d608:	2380      	movs	r3, #128	@ 0x80
 800d60a:	049b      	lsls	r3, r3, #18
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d004      	beq.n	800d61a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	0018      	movs	r0, r3
 800d614:	f000 fafa 	bl	800dc0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800d618:	e046      	b.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2140      	movs	r1, #64	@ 0x40
 800d61e:	0018      	movs	r0, r3
 800d620:	f000 fde0 	bl	800e1e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d624:	e040      	b.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2240      	movs	r2, #64	@ 0x40
 800d62a:	4013      	ands	r3, r2
 800d62c:	d02c      	beq.n	800d688 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2240      	movs	r2, #64	@ 0x40
 800d632:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d634:	d028      	beq.n	800d688 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d11d      	bne.n	800d67c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	685a      	ldr	r2, [r3, #4]
 800d646:	2380      	movs	r3, #128	@ 0x80
 800d648:	049b      	lsls	r3, r3, #18
 800d64a:	401a      	ands	r2, r3
 800d64c:	2380      	movs	r3, #128	@ 0x80
 800d64e:	049b      	lsls	r3, r3, #18
 800d650:	429a      	cmp	r2, r3
 800d652:	d028      	beq.n	800d6a6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d658:	4a18      	ldr	r2, [pc, #96]	@ (800d6bc <I2C_Master_ISR_DMA+0x1f4>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d109      	bne.n	800d672 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	685a      	ldr	r2, [r3, #4]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2180      	movs	r1, #128	@ 0x80
 800d66a:	01c9      	lsls	r1, r1, #7
 800d66c:	430a      	orrs	r2, r1
 800d66e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800d670:	e019      	b.n	800d6a6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	0018      	movs	r0, r3
 800d676:	f000 fac9 	bl	800dc0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800d67a:	e014      	b.n	800d6a6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2140      	movs	r1, #64	@ 0x40
 800d680:	0018      	movs	r0, r3
 800d682:	f000 fdaf 	bl	800e1e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d686:	e00e      	b.n	800d6a6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	2220      	movs	r2, #32
 800d68c:	4013      	ands	r3, r2
 800d68e:	d00b      	beq.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2220      	movs	r2, #32
 800d694:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d696:	d007      	beq.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	0011      	movs	r1, r2
 800d69e:	0018      	movs	r0, r3
 800d6a0:	f000 fb5a 	bl	800dd58 <I2C_ITMasterCplt>
 800d6a4:	e000      	b.n	800d6a8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800d6a6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2240      	movs	r2, #64	@ 0x40
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	0018      	movs	r0, r3
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	b007      	add	sp, #28
 800d6b8:	bd90      	pop	{r4, r7, pc}
 800d6ba:	46c0      	nop			@ (mov r8, r8)
 800d6bc:	ffff0000 	.word	0xffff0000

0800d6c0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800d6c0:	b590      	push	{r4, r7, lr}
 800d6c2:	b089      	sub	sp, #36	@ 0x24
 800d6c4:	af02      	add	r7, sp, #8
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800d6cc:	4b88      	ldr	r3, [pc, #544]	@ (800d8f0 <I2C_Mem_ISR_DMA+0x230>)
 800d6ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2240      	movs	r2, #64	@ 0x40
 800d6d4:	5c9b      	ldrb	r3, [r3, r2]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d101      	bne.n	800d6de <I2C_Mem_ISR_DMA+0x1e>
 800d6da:	2302      	movs	r3, #2
 800d6dc:	e104      	b.n	800d8e8 <I2C_Mem_ISR_DMA+0x228>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2240      	movs	r2, #64	@ 0x40
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2210      	movs	r2, #16
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	d017      	beq.n	800d71e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2210      	movs	r2, #16
 800d6f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d6f4:	d013      	beq.n	800d71e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2210      	movs	r2, #16
 800d6fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d702:	2204      	movs	r2, #4
 800d704:	431a      	orrs	r2, r3
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2120      	movs	r1, #32
 800d70e:	0018      	movs	r0, r3
 800d710:	f000 ffc8 	bl	800e6a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	0018      	movs	r0, r3
 800d718:	f000 fe8f 	bl	800e43a <I2C_Flush_TXDR>
 800d71c:	e0df      	b.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2202      	movs	r2, #2
 800d722:	4013      	ands	r3, r2
 800d724:	d00d      	beq.n	800d742 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2202      	movs	r2, #2
 800d72a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d72c:	d009      	beq.n	800d742 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d736:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2201      	movs	r2, #1
 800d73c:	4252      	negs	r2, r2
 800d73e:	651a      	str	r2, [r3, #80]	@ 0x50
 800d740:	e0cd      	b.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	2280      	movs	r2, #128	@ 0x80
 800d746:	4013      	ands	r3, r2
 800d748:	d05e      	beq.n	800d808 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2240      	movs	r2, #64	@ 0x40
 800d74e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d750:	d05a      	beq.n	800d808 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2110      	movs	r1, #16
 800d756:	0018      	movs	r0, r3
 800d758:	f000 ffa4 	bl	800e6a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d760:	b29b      	uxth	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d04a      	beq.n	800d7fc <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	2bff      	cmp	r3, #255	@ 0xff
 800d76e:	d910      	bls.n	800d792 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	22ff      	movs	r2, #255	@ 0xff
 800d774:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d77a:	b299      	uxth	r1, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d780:	b2da      	uxtb	r2, r3
 800d782:	2380      	movs	r3, #128	@ 0x80
 800d784:	045b      	lsls	r3, r3, #17
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	2400      	movs	r4, #0
 800d78a:	9400      	str	r4, [sp, #0]
 800d78c:	f000 ff50 	bl	800e630 <I2C_TransferConfig>
 800d790:	e011      	b.n	800d7b6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d796:	b29a      	uxth	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7a0:	b299      	uxth	r1, r3
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	2380      	movs	r3, #128	@ 0x80
 800d7aa:	049b      	lsls	r3, r3, #18
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	2400      	movs	r4, #0
 800d7b0:	9400      	str	r4, [sp, #0]
 800d7b2:	f000 ff3d 	bl	800e630 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2241      	movs	r2, #65	@ 0x41
 800d7cc:	5c9b      	ldrb	r3, [r3, r2]
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b22      	cmp	r3, #34	@ 0x22
 800d7d2:	d109      	bne.n	800d7e8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2180      	movs	r1, #128	@ 0x80
 800d7e0:	0209      	lsls	r1, r1, #8
 800d7e2:	430a      	orrs	r2, r1
 800d7e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d7e6:	e07a      	b.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2180      	movs	r1, #128	@ 0x80
 800d7f4:	01c9      	lsls	r1, r1, #7
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d7fa:	e070      	b.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2140      	movs	r1, #64	@ 0x40
 800d800:	0018      	movs	r0, r3
 800d802:	f000 fcef 	bl	800e1e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d806:	e06a      	b.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	2240      	movs	r2, #64	@ 0x40
 800d80c:	4013      	ands	r3, r2
 800d80e:	d058      	beq.n	800d8c2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2240      	movs	r2, #64	@ 0x40
 800d814:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d816:	d054      	beq.n	800d8c2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2241      	movs	r2, #65	@ 0x41
 800d81c:	5c9b      	ldrb	r3, [r3, r2]
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b22      	cmp	r3, #34	@ 0x22
 800d822:	d101      	bne.n	800d828 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800d824:	4b33      	ldr	r3, [pc, #204]	@ (800d8f4 <I2C_Mem_ISR_DMA+0x234>)
 800d826:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	2bff      	cmp	r3, #255	@ 0xff
 800d830:	d911      	bls.n	800d856 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	22ff      	movs	r2, #255	@ 0xff
 800d836:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d83c:	b299      	uxth	r1, r3
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d842:	b2da      	uxtb	r2, r3
 800d844:	2380      	movs	r3, #128	@ 0x80
 800d846:	045c      	lsls	r4, r3, #17
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	0023      	movs	r3, r4
 800d850:	f000 feee 	bl	800e630 <I2C_TransferConfig>
 800d854:	e012      	b.n	800d87c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d864:	b299      	uxth	r1, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	2380      	movs	r3, #128	@ 0x80
 800d86e:	049c      	lsls	r4, r3, #18
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	0023      	movs	r3, r4
 800d878:	f000 feda 	bl	800e630 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d880:	b29a      	uxth	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d886:	1ad3      	subs	r3, r2, r3
 800d888:	b29a      	uxth	r2, r3
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2241      	movs	r2, #65	@ 0x41
 800d892:	5c9b      	ldrb	r3, [r3, r2]
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b22      	cmp	r3, #34	@ 0x22
 800d898:	d109      	bne.n	800d8ae <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2180      	movs	r1, #128	@ 0x80
 800d8a6:	0209      	lsls	r1, r1, #8
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d8ac:	e017      	b.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2180      	movs	r1, #128	@ 0x80
 800d8ba:	01c9      	lsls	r1, r1, #7
 800d8bc:	430a      	orrs	r2, r1
 800d8be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d8c0:	e00d      	b.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	2220      	movs	r2, #32
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	d009      	beq.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2220      	movs	r2, #32
 800d8ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d8d0:	d005      	beq.n	800d8de <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	0011      	movs	r1, r2
 800d8d8:	0018      	movs	r0, r3
 800d8da:	f000 fa3d 	bl	800dd58 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2240      	movs	r2, #64	@ 0x40
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	0018      	movs	r0, r3
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	b007      	add	sp, #28
 800d8ee:	bd90      	pop	{r4, r7, pc}
 800d8f0:	80002000 	.word	0x80002000
 800d8f4:	80002400 	.word	0x80002400

0800d8f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d908:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800d90a:	2300      	movs	r3, #0
 800d90c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2240      	movs	r2, #64	@ 0x40
 800d912:	5c9b      	ldrb	r3, [r3, r2]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d101      	bne.n	800d91c <I2C_Slave_ISR_DMA+0x24>
 800d918:	2302      	movs	r3, #2
 800d91a:	e0cd      	b.n	800dab8 <I2C_Slave_ISR_DMA+0x1c0>
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2240      	movs	r2, #64	@ 0x40
 800d920:	2101      	movs	r1, #1
 800d922:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	2220      	movs	r2, #32
 800d928:	4013      	ands	r3, r2
 800d92a:	d009      	beq.n	800d940 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2220      	movs	r2, #32
 800d930:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d932:	d005      	beq.n	800d940 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	0011      	movs	r1, r2
 800d93a:	0018      	movs	r0, r3
 800d93c:	f000 fada 	bl	800def4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2210      	movs	r2, #16
 800d944:	4013      	ands	r3, r2
 800d946:	d100      	bne.n	800d94a <I2C_Slave_ISR_DMA+0x52>
 800d948:	e0a3      	b.n	800da92 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2210      	movs	r2, #16
 800d94e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d950:	d100      	bne.n	800d954 <I2C_Slave_ISR_DMA+0x5c>
 800d952:	e09e      	b.n	800da92 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	2380      	movs	r3, #128	@ 0x80
 800d958:	01db      	lsls	r3, r3, #7
 800d95a:	4013      	ands	r3, r2
 800d95c:	d105      	bne.n	800d96a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	2380      	movs	r3, #128	@ 0x80
 800d962:	021b      	lsls	r3, r3, #8
 800d964:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d966:	d100      	bne.n	800d96a <I2C_Slave_ISR_DMA+0x72>
 800d968:	e08c      	b.n	800da84 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00c      	beq.n	800d98c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	2380      	movs	r3, #128	@ 0x80
 800d976:	021b      	lsls	r3, r3, #8
 800d978:	4013      	ands	r3, r2
 800d97a:	d007      	beq.n	800d98c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800d988:	2301      	movs	r3, #1
 800d98a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00c      	beq.n	800d9ae <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	2380      	movs	r3, #128	@ 0x80
 800d998:	01db      	lsls	r3, r3, #7
 800d99a:	4013      	ands	r3, r2
 800d99c:	d007      	beq.n	800d9ae <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d12d      	bne.n	800da10 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2241      	movs	r2, #65	@ 0x41
 800d9b8:	5c9b      	ldrb	r3, [r3, r2]
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b28      	cmp	r3, #40	@ 0x28
 800d9be:	d10b      	bne.n	800d9d8 <I2C_Slave_ISR_DMA+0xe0>
 800d9c0:	69ba      	ldr	r2, [r7, #24]
 800d9c2:	2380      	movs	r3, #128	@ 0x80
 800d9c4:	049b      	lsls	r3, r3, #18
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d106      	bne.n	800d9d8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	0011      	movs	r1, r2
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	f000 fbaf 	bl	800e134 <I2C_ITListenCplt>
 800d9d6:	e054      	b.n	800da82 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2241      	movs	r2, #65	@ 0x41
 800d9dc:	5c9b      	ldrb	r3, [r3, r2]
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b29      	cmp	r3, #41	@ 0x29
 800d9e2:	d110      	bne.n	800da06 <I2C_Slave_ISR_DMA+0x10e>
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	4a36      	ldr	r2, [pc, #216]	@ (800dac0 <I2C_Slave_ISR_DMA+0x1c8>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d00c      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2210      	movs	r2, #16
 800d9f2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	0018      	movs	r0, r3
 800d9f8:	f000 fd1f 	bl	800e43a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	0018      	movs	r0, r3
 800da00:	f000 f946 	bl	800dc90 <I2C_ITSlaveSeqCplt>
 800da04:	e03d      	b.n	800da82 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2210      	movs	r2, #16
 800da0c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800da0e:	e03e      	b.n	800da8e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2210      	movs	r2, #16
 800da16:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da1c:	2204      	movs	r2, #4
 800da1e:	431a      	orrs	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800da24:	2317      	movs	r3, #23
 800da26:	18fb      	adds	r3, r7, r3
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	2141      	movs	r1, #65	@ 0x41
 800da2c:	5c52      	ldrb	r2, [r2, r1]
 800da2e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d004      	beq.n	800da40 <I2C_Slave_ISR_DMA+0x148>
 800da36:	69ba      	ldr	r2, [r7, #24]
 800da38:	2380      	movs	r3, #128	@ 0x80
 800da3a:	045b      	lsls	r3, r3, #17
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d126      	bne.n	800da8e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800da40:	2217      	movs	r2, #23
 800da42:	18bb      	adds	r3, r7, r2
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2b21      	cmp	r3, #33	@ 0x21
 800da48:	d003      	beq.n	800da52 <I2C_Slave_ISR_DMA+0x15a>
 800da4a:	18bb      	adds	r3, r7, r2
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	2b29      	cmp	r3, #41	@ 0x29
 800da50:	d103      	bne.n	800da5a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2221      	movs	r2, #33	@ 0x21
 800da56:	631a      	str	r2, [r3, #48]	@ 0x30
 800da58:	e00b      	b.n	800da72 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800da5a:	2217      	movs	r2, #23
 800da5c:	18bb      	adds	r3, r7, r2
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2b22      	cmp	r3, #34	@ 0x22
 800da62:	d003      	beq.n	800da6c <I2C_Slave_ISR_DMA+0x174>
 800da64:	18bb      	adds	r3, r7, r2
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b2a      	cmp	r3, #42	@ 0x2a
 800da6a:	d102      	bne.n	800da72 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2222      	movs	r2, #34	@ 0x22
 800da70:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	0011      	movs	r1, r2
 800da7a:	0018      	movs	r0, r3
 800da7c:	f000 fbb2 	bl	800e1e4 <I2C_ITError>
      if (treatdmanack == 1U)
 800da80:	e005      	b.n	800da8e <I2C_Slave_ISR_DMA+0x196>
 800da82:	e004      	b.n	800da8e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2210      	movs	r2, #16
 800da8a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800da8c:	e00f      	b.n	800daae <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800da8e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800da90:	e00d      	b.n	800daae <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	2208      	movs	r2, #8
 800da96:	4013      	ands	r3, r2
 800da98:	d009      	beq.n	800daae <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2208      	movs	r2, #8
 800da9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800daa0:	d005      	beq.n	800daae <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	0011      	movs	r1, r2
 800daa8:	0018      	movs	r0, r3
 800daaa:	f000 f80b 	bl	800dac4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2240      	movs	r2, #64	@ 0x40
 800dab2:	2100      	movs	r1, #0
 800dab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	0018      	movs	r0, r3
 800daba:	46bd      	mov	sp, r7
 800dabc:	b008      	add	sp, #32
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	ffff0000 	.word	0xffff0000

0800dac4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dac4:	b5b0      	push	{r4, r5, r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2241      	movs	r2, #65	@ 0x41
 800dad2:	5c9b      	ldrb	r3, [r3, r2]
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	001a      	movs	r2, r3
 800dad8:	2328      	movs	r3, #40	@ 0x28
 800dada:	4013      	ands	r3, r2
 800dadc:	2b28      	cmp	r3, #40	@ 0x28
 800dade:	d000      	beq.n	800dae2 <I2C_ITAddrCplt+0x1e>
 800dae0:	e088      	b.n	800dbf4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	699b      	ldr	r3, [r3, #24]
 800dae8:	0c1b      	lsrs	r3, r3, #16
 800daea:	b2da      	uxtb	r2, r3
 800daec:	250f      	movs	r5, #15
 800daee:	197b      	adds	r3, r7, r5
 800daf0:	2101      	movs	r1, #1
 800daf2:	400a      	ands	r2, r1
 800daf4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	0c1b      	lsrs	r3, r3, #16
 800dafe:	b29a      	uxth	r2, r3
 800db00:	200c      	movs	r0, #12
 800db02:	183b      	adds	r3, r7, r0
 800db04:	21fe      	movs	r1, #254	@ 0xfe
 800db06:	400a      	ands	r2, r1
 800db08:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	b29a      	uxth	r2, r3
 800db12:	240a      	movs	r4, #10
 800db14:	193b      	adds	r3, r7, r4
 800db16:	0592      	lsls	r2, r2, #22
 800db18:	0d92      	lsrs	r2, r2, #22
 800db1a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	b29a      	uxth	r2, r3
 800db24:	2308      	movs	r3, #8
 800db26:	18fb      	adds	r3, r7, r3
 800db28:	21fe      	movs	r1, #254	@ 0xfe
 800db2a:	400a      	ands	r2, r1
 800db2c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	2b02      	cmp	r3, #2
 800db34:	d148      	bne.n	800dbc8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800db36:	0021      	movs	r1, r4
 800db38:	187b      	adds	r3, r7, r1
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	09db      	lsrs	r3, r3, #7
 800db3e:	b29a      	uxth	r2, r3
 800db40:	183b      	adds	r3, r7, r0
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	4053      	eors	r3, r2
 800db46:	b29b      	uxth	r3, r3
 800db48:	001a      	movs	r2, r3
 800db4a:	2306      	movs	r3, #6
 800db4c:	4013      	ands	r3, r2
 800db4e:	d120      	bne.n	800db92 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800db50:	183b      	adds	r3, r7, r0
 800db52:	187a      	adds	r2, r7, r1
 800db54:	8812      	ldrh	r2, [r2, #0]
 800db56:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db66:	2b02      	cmp	r3, #2
 800db68:	d14c      	bne.n	800dc04 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2208      	movs	r2, #8
 800db76:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2240      	movs	r2, #64	@ 0x40
 800db7c:	2100      	movs	r1, #0
 800db7e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800db80:	183b      	adds	r3, r7, r0
 800db82:	881a      	ldrh	r2, [r3, #0]
 800db84:	197b      	adds	r3, r7, r5
 800db86:	7819      	ldrb	r1, [r3, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	0018      	movs	r0, r3
 800db8c:	f7ff fa39 	bl	800d002 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800db90:	e038      	b.n	800dc04 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800db92:	240c      	movs	r4, #12
 800db94:	193b      	adds	r3, r7, r4
 800db96:	2208      	movs	r2, #8
 800db98:	18ba      	adds	r2, r7, r2
 800db9a:	8812      	ldrh	r2, [r2, #0]
 800db9c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800db9e:	2380      	movs	r3, #128	@ 0x80
 800dba0:	021a      	lsls	r2, r3, #8
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	0011      	movs	r1, r2
 800dba6:	0018      	movs	r0, r3
 800dba8:	f000 fe0a 	bl	800e7c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2240      	movs	r2, #64	@ 0x40
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800dbb4:	193b      	adds	r3, r7, r4
 800dbb6:	881a      	ldrh	r2, [r3, #0]
 800dbb8:	230f      	movs	r3, #15
 800dbba:	18fb      	adds	r3, r7, r3
 800dbbc:	7819      	ldrb	r1, [r3, #0]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	0018      	movs	r0, r3
 800dbc2:	f7ff fa1e 	bl	800d002 <HAL_I2C_AddrCallback>
}
 800dbc6:	e01d      	b.n	800dc04 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800dbc8:	2380      	movs	r3, #128	@ 0x80
 800dbca:	021a      	lsls	r2, r3, #8
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	0011      	movs	r1, r2
 800dbd0:	0018      	movs	r0, r3
 800dbd2:	f000 fdf5 	bl	800e7c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2240      	movs	r2, #64	@ 0x40
 800dbda:	2100      	movs	r1, #0
 800dbdc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800dbde:	230c      	movs	r3, #12
 800dbe0:	18fb      	adds	r3, r7, r3
 800dbe2:	881a      	ldrh	r2, [r3, #0]
 800dbe4:	230f      	movs	r3, #15
 800dbe6:	18fb      	adds	r3, r7, r3
 800dbe8:	7819      	ldrb	r1, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	0018      	movs	r0, r3
 800dbee:	f7ff fa08 	bl	800d002 <HAL_I2C_AddrCallback>
}
 800dbf2:	e007      	b.n	800dc04 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2208      	movs	r2, #8
 800dbfa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2240      	movs	r2, #64	@ 0x40
 800dc00:	2100      	movs	r1, #0
 800dc02:	5499      	strb	r1, [r3, r2]
}
 800dc04:	46c0      	nop			@ (mov r8, r8)
 800dc06:	46bd      	mov	sp, r7
 800dc08:	b004      	add	sp, #16
 800dc0a:	bdb0      	pop	{r4, r5, r7, pc}

0800dc0c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2242      	movs	r2, #66	@ 0x42
 800dc18:	2100      	movs	r1, #0
 800dc1a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2241      	movs	r2, #65	@ 0x41
 800dc20:	5c9b      	ldrb	r3, [r3, r2]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b21      	cmp	r3, #33	@ 0x21
 800dc26:	d117      	bne.n	800dc58 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2241      	movs	r2, #65	@ 0x41
 800dc2c:	2120      	movs	r1, #32
 800dc2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2211      	movs	r2, #17
 800dc34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2101      	movs	r1, #1
 800dc40:	0018      	movs	r0, r3
 800dc42:	f000 fdbd 	bl	800e7c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2240      	movs	r2, #64	@ 0x40
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	0018      	movs	r0, r3
 800dc52:	f7ff f9b6 	bl	800cfc2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dc56:	e016      	b.n	800dc86 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2241      	movs	r2, #65	@ 0x41
 800dc5c:	2120      	movs	r1, #32
 800dc5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2212      	movs	r2, #18
 800dc64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2102      	movs	r1, #2
 800dc70:	0018      	movs	r0, r3
 800dc72:	f000 fda5 	bl	800e7c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2240      	movs	r2, #64	@ 0x40
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	0018      	movs	r0, r3
 800dc82:	f7ff f9a6 	bl	800cfd2 <HAL_I2C_MasterRxCpltCallback>
}
 800dc86:	46c0      	nop			@ (mov r8, r8)
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	b002      	add	sp, #8
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2242      	movs	r2, #66	@ 0x42
 800dca4:	2100      	movs	r1, #0
 800dca6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	2380      	movs	r3, #128	@ 0x80
 800dcac:	01db      	lsls	r3, r3, #7
 800dcae:	4013      	ands	r3, r2
 800dcb0:	d008      	beq.n	800dcc4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4924      	ldr	r1, [pc, #144]	@ (800dd50 <I2C_ITSlaveSeqCplt+0xc0>)
 800dcbe:	400a      	ands	r2, r1
 800dcc0:	601a      	str	r2, [r3, #0]
 800dcc2:	e00c      	b.n	800dcde <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dcc4:	68fa      	ldr	r2, [r7, #12]
 800dcc6:	2380      	movs	r3, #128	@ 0x80
 800dcc8:	021b      	lsls	r3, r3, #8
 800dcca:	4013      	ands	r3, r2
 800dccc:	d007      	beq.n	800dcde <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	491e      	ldr	r1, [pc, #120]	@ (800dd54 <I2C_ITSlaveSeqCplt+0xc4>)
 800dcda:	400a      	ands	r2, r1
 800dcdc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2241      	movs	r2, #65	@ 0x41
 800dce2:	5c9b      	ldrb	r3, [r3, r2]
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b29      	cmp	r3, #41	@ 0x29
 800dce8:	d114      	bne.n	800dd14 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2241      	movs	r2, #65	@ 0x41
 800dcee:	2128      	movs	r1, #40	@ 0x28
 800dcf0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2221      	movs	r2, #33	@ 0x21
 800dcf6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	0018      	movs	r0, r3
 800dcfe:	f000 fd5f 	bl	800e7c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2240      	movs	r2, #64	@ 0x40
 800dd06:	2100      	movs	r1, #0
 800dd08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	0018      	movs	r0, r3
 800dd0e:	f7ff f968 	bl	800cfe2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dd12:	e019      	b.n	800dd48 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2241      	movs	r2, #65	@ 0x41
 800dd18:	5c9b      	ldrb	r3, [r3, r2]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd1e:	d113      	bne.n	800dd48 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2241      	movs	r2, #65	@ 0x41
 800dd24:	2128      	movs	r1, #40	@ 0x28
 800dd26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2222      	movs	r2, #34	@ 0x22
 800dd2c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2102      	movs	r1, #2
 800dd32:	0018      	movs	r0, r3
 800dd34:	f000 fd44 	bl	800e7c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2240      	movs	r2, #64	@ 0x40
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	0018      	movs	r0, r3
 800dd44:	f7ff f955 	bl	800cff2 <HAL_I2C_SlaveRxCpltCallback>
}
 800dd48:	46c0      	nop			@ (mov r8, r8)
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	b004      	add	sp, #16
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	ffffbfff 	.word	0xffffbfff
 800dd54:	ffff7fff 	.word	0xffff7fff

0800dd58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2241      	movs	r2, #65	@ 0x41
 800dd72:	5c9b      	ldrb	r3, [r3, r2]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b21      	cmp	r3, #33	@ 0x21
 800dd78:	d108      	bne.n	800dd8c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2101      	movs	r1, #1
 800dd7e:	0018      	movs	r0, r3
 800dd80:	f000 fd1e 	bl	800e7c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2211      	movs	r2, #17
 800dd88:	631a      	str	r2, [r3, #48]	@ 0x30
 800dd8a:	e00d      	b.n	800dda8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2241      	movs	r2, #65	@ 0x41
 800dd90:	5c9b      	ldrb	r3, [r3, r2]
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b22      	cmp	r3, #34	@ 0x22
 800dd96:	d107      	bne.n	800dda8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2102      	movs	r1, #2
 800dd9c:	0018      	movs	r0, r3
 800dd9e:	f000 fd0f 	bl	800e7c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2212      	movs	r2, #18
 800dda6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	685a      	ldr	r2, [r3, #4]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	494e      	ldr	r1, [pc, #312]	@ (800deec <I2C_ITMasterCplt+0x194>)
 800ddb4:	400a      	ands	r2, r1
 800ddb6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a4b      	ldr	r2, [pc, #300]	@ (800def0 <I2C_ITMasterCplt+0x198>)
 800ddc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2210      	movs	r2, #16
 800ddc8:	4013      	ands	r3, r2
 800ddca:	d009      	beq.n	800dde0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2210      	movs	r2, #16
 800ddd2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddd8:	2204      	movs	r2, #4
 800ddda:	431a      	orrs	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2241      	movs	r2, #65	@ 0x41
 800dde4:	5c9b      	ldrb	r3, [r3, r2]
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b60      	cmp	r3, #96	@ 0x60
 800ddea:	d109      	bne.n	800de00 <I2C_ITMasterCplt+0xa8>
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2204      	movs	r2, #4
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	d005      	beq.n	800de00 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	0018      	movs	r0, r3
 800de04:	f000 fb19 	bl	800e43a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de0c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2241      	movs	r2, #65	@ 0x41
 800de12:	5c9b      	ldrb	r3, [r3, r2]
 800de14:	b2db      	uxtb	r3, r3
 800de16:	2b60      	cmp	r3, #96	@ 0x60
 800de18:	d002      	beq.n	800de20 <I2C_ITMasterCplt+0xc8>
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d007      	beq.n	800de30 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	0011      	movs	r1, r2
 800de28:	0018      	movs	r0, r3
 800de2a:	f000 f9db 	bl	800e1e4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800de2e:	e058      	b.n	800dee2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2241      	movs	r2, #65	@ 0x41
 800de34:	5c9b      	ldrb	r3, [r3, r2]
 800de36:	b2db      	uxtb	r3, r3
 800de38:	2b21      	cmp	r3, #33	@ 0x21
 800de3a:	d126      	bne.n	800de8a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2241      	movs	r2, #65	@ 0x41
 800de40:	2120      	movs	r1, #32
 800de42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2242      	movs	r2, #66	@ 0x42
 800de4e:	5c9b      	ldrb	r3, [r3, r2]
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b40      	cmp	r3, #64	@ 0x40
 800de54:	d10c      	bne.n	800de70 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2242      	movs	r2, #66	@ 0x42
 800de5a:	2100      	movs	r1, #0
 800de5c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2240      	movs	r2, #64	@ 0x40
 800de62:	2100      	movs	r1, #0
 800de64:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	0018      	movs	r0, r3
 800de6a:	f7ff f8e2 	bl	800d032 <HAL_I2C_MemTxCpltCallback>
}
 800de6e:	e038      	b.n	800dee2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2242      	movs	r2, #66	@ 0x42
 800de74:	2100      	movs	r1, #0
 800de76:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2240      	movs	r2, #64	@ 0x40
 800de7c:	2100      	movs	r1, #0
 800de7e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	0018      	movs	r0, r3
 800de84:	f7ff f89d 	bl	800cfc2 <HAL_I2C_MasterTxCpltCallback>
}
 800de88:	e02b      	b.n	800dee2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2241      	movs	r2, #65	@ 0x41
 800de8e:	5c9b      	ldrb	r3, [r3, r2]
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b22      	cmp	r3, #34	@ 0x22
 800de94:	d125      	bne.n	800dee2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2241      	movs	r2, #65	@ 0x41
 800de9a:	2120      	movs	r1, #32
 800de9c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2242      	movs	r2, #66	@ 0x42
 800dea8:	5c9b      	ldrb	r3, [r3, r2]
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b40      	cmp	r3, #64	@ 0x40
 800deae:	d10c      	bne.n	800deca <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2242      	movs	r2, #66	@ 0x42
 800deb4:	2100      	movs	r1, #0
 800deb6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2240      	movs	r2, #64	@ 0x40
 800debc:	2100      	movs	r1, #0
 800debe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	0018      	movs	r0, r3
 800dec4:	f7ff f8bd 	bl	800d042 <HAL_I2C_MemRxCpltCallback>
}
 800dec8:	e00b      	b.n	800dee2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2242      	movs	r2, #66	@ 0x42
 800dece:	2100      	movs	r1, #0
 800ded0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2240      	movs	r2, #64	@ 0x40
 800ded6:	2100      	movs	r1, #0
 800ded8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	0018      	movs	r0, r3
 800dede:	f7ff f878 	bl	800cfd2 <HAL_I2C_MasterRxCpltCallback>
}
 800dee2:	46c0      	nop			@ (mov r8, r8)
 800dee4:	46bd      	mov	sp, r7
 800dee6:	b006      	add	sp, #24
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	46c0      	nop			@ (mov r8, r8)
 800deec:	fe00e800 	.word	0xfe00e800
 800def0:	ffff0000 	.word	0xffff0000

0800def4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800df0a:	200f      	movs	r0, #15
 800df0c:	183b      	adds	r3, r7, r0
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	2141      	movs	r1, #65	@ 0x41
 800df12:	5c52      	ldrb	r2, [r2, r1]
 800df14:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2220      	movs	r2, #32
 800df1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800df1e:	183b      	adds	r3, r7, r0
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b21      	cmp	r3, #33	@ 0x21
 800df24:	d003      	beq.n	800df2e <I2C_ITSlaveCplt+0x3a>
 800df26:	183b      	adds	r3, r7, r0
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b29      	cmp	r3, #41	@ 0x29
 800df2c:	d109      	bne.n	800df42 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800df2e:	4a7b      	ldr	r2, [pc, #492]	@ (800e11c <I2C_ITSlaveCplt+0x228>)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	0011      	movs	r1, r2
 800df34:	0018      	movs	r0, r3
 800df36:	f000 fc43 	bl	800e7c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2221      	movs	r2, #33	@ 0x21
 800df3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800df40:	e011      	b.n	800df66 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800df42:	220f      	movs	r2, #15
 800df44:	18bb      	adds	r3, r7, r2
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b22      	cmp	r3, #34	@ 0x22
 800df4a:	d003      	beq.n	800df54 <I2C_ITSlaveCplt+0x60>
 800df4c:	18bb      	adds	r3, r7, r2
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2b2a      	cmp	r3, #42	@ 0x2a
 800df52:	d108      	bne.n	800df66 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800df54:	4a72      	ldr	r2, [pc, #456]	@ (800e120 <I2C_ITSlaveCplt+0x22c>)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	0011      	movs	r1, r2
 800df5a:	0018      	movs	r0, r3
 800df5c:	f000 fc30 	bl	800e7c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2222      	movs	r2, #34	@ 0x22
 800df64:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	685a      	ldr	r2, [r3, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2180      	movs	r1, #128	@ 0x80
 800df72:	0209      	lsls	r1, r1, #8
 800df74:	430a      	orrs	r2, r1
 800df76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	685a      	ldr	r2, [r3, #4]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4968      	ldr	r1, [pc, #416]	@ (800e124 <I2C_ITSlaveCplt+0x230>)
 800df84:	400a      	ands	r2, r1
 800df86:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	0018      	movs	r0, r3
 800df8c:	f000 fa55 	bl	800e43a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	2380      	movs	r3, #128	@ 0x80
 800df94:	01db      	lsls	r3, r3, #7
 800df96:	4013      	ands	r3, r2
 800df98:	d013      	beq.n	800dfc2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4960      	ldr	r1, [pc, #384]	@ (800e128 <I2C_ITSlaveCplt+0x234>)
 800dfa6:	400a      	ands	r2, r1
 800dfa8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d01f      	beq.n	800dff2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dfc0:	e017      	b.n	800dff2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	2380      	movs	r3, #128	@ 0x80
 800dfc6:	021b      	lsls	r3, r3, #8
 800dfc8:	4013      	ands	r3, r2
 800dfca:	d012      	beq.n	800dff2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4955      	ldr	r1, [pc, #340]	@ (800e12c <I2C_ITSlaveCplt+0x238>)
 800dfd8:	400a      	ands	r2, r1
 800dfda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d006      	beq.n	800dff2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	2204      	movs	r2, #4
 800dff6:	4013      	ands	r3, r2
 800dff8:	d020      	beq.n	800e03c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	2204      	movs	r2, #4
 800dffe:	4393      	bics	r3, r2
 800e000:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e00c:	b2d2      	uxtb	r2, r2
 800e00e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e014:	1c5a      	adds	r2, r3, #1
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00c      	beq.n	800e03c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e026:	3b01      	subs	r3, #1
 800e028:	b29a      	uxth	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e032:	b29b      	uxth	r3, r3
 800e034:	3b01      	subs	r3, #1
 800e036:	b29a      	uxth	r2, r3
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e040:	b29b      	uxth	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d005      	beq.n	800e052 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e04a:	2204      	movs	r2, #4
 800e04c:	431a      	orrs	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2242      	movs	r2, #66	@ 0x42
 800e056:	2100      	movs	r1, #0
 800e058:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e064:	2b00      	cmp	r3, #0
 800e066:	d013      	beq.n	800e090 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	0011      	movs	r1, r2
 800e070:	0018      	movs	r0, r3
 800e072:	f000 f8b7 	bl	800e1e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2241      	movs	r2, #65	@ 0x41
 800e07a:	5c9b      	ldrb	r3, [r3, r2]
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b28      	cmp	r3, #40	@ 0x28
 800e080:	d147      	bne.n	800e112 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e082:	697a      	ldr	r2, [r7, #20]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	0011      	movs	r1, r2
 800e088:	0018      	movs	r0, r3
 800e08a:	f000 f853 	bl	800e134 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e08e:	e040      	b.n	800e112 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e094:	4a26      	ldr	r2, [pc, #152]	@ (800e130 <I2C_ITSlaveCplt+0x23c>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d016      	beq.n	800e0c8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	0018      	movs	r0, r3
 800e09e:	f7ff fdf7 	bl	800dc90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a22      	ldr	r2, [pc, #136]	@ (800e130 <I2C_ITSlaveCplt+0x23c>)
 800e0a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2241      	movs	r2, #65	@ 0x41
 800e0ac:	2120      	movs	r1, #32
 800e0ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2240      	movs	r2, #64	@ 0x40
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	0018      	movs	r0, r3
 800e0c2:	f7fe ffae 	bl	800d022 <HAL_I2C_ListenCpltCallback>
}
 800e0c6:	e024      	b.n	800e112 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2241      	movs	r2, #65	@ 0x41
 800e0cc:	5c9b      	ldrb	r3, [r3, r2]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	2b22      	cmp	r3, #34	@ 0x22
 800e0d2:	d10f      	bne.n	800e0f4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2241      	movs	r2, #65	@ 0x41
 800e0d8:	2120      	movs	r1, #32
 800e0da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2240      	movs	r2, #64	@ 0x40
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	0018      	movs	r0, r3
 800e0ee:	f7fe ff80 	bl	800cff2 <HAL_I2C_SlaveRxCpltCallback>
}
 800e0f2:	e00e      	b.n	800e112 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2241      	movs	r2, #65	@ 0x41
 800e0f8:	2120      	movs	r1, #32
 800e0fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2240      	movs	r2, #64	@ 0x40
 800e106:	2100      	movs	r1, #0
 800e108:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	0018      	movs	r0, r3
 800e10e:	f7fe ff68 	bl	800cfe2 <HAL_I2C_SlaveTxCpltCallback>
}
 800e112:	46c0      	nop			@ (mov r8, r8)
 800e114:	46bd      	mov	sp, r7
 800e116:	b006      	add	sp, #24
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	46c0      	nop			@ (mov r8, r8)
 800e11c:	00008001 	.word	0x00008001
 800e120:	00008002 	.word	0x00008002
 800e124:	fe00e800 	.word	0xfe00e800
 800e128:	ffffbfff 	.word	0xffffbfff
 800e12c:	ffff7fff 	.word	0xffff7fff
 800e130:	ffff0000 	.word	0xffff0000

0800e134 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4a26      	ldr	r2, [pc, #152]	@ (800e1dc <I2C_ITListenCplt+0xa8>)
 800e142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2241      	movs	r2, #65	@ 0x41
 800e14e:	2120      	movs	r1, #32
 800e150:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2242      	movs	r2, #66	@ 0x42
 800e156:	2100      	movs	r1, #0
 800e158:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2204      	movs	r2, #4
 800e164:	4013      	ands	r3, r2
 800e166:	d022      	beq.n	800e1ae <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e172:	b2d2      	uxtb	r2, r2
 800e174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e184:	2b00      	cmp	r3, #0
 800e186:	d012      	beq.n	800e1ae <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e18c:	3b01      	subs	r3, #1
 800e18e:	b29a      	uxth	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e198:	b29b      	uxth	r3, r3
 800e19a:	3b01      	subs	r3, #1
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1a6:	2204      	movs	r2, #4
 800e1a8:	431a      	orrs	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e1ae:	4a0c      	ldr	r2, [pc, #48]	@ (800e1e0 <I2C_ITListenCplt+0xac>)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	0011      	movs	r1, r2
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	f000 fb03 	bl	800e7c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2210      	movs	r2, #16
 800e1c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2240      	movs	r2, #64	@ 0x40
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	0018      	movs	r0, r3
 800e1ce:	f7fe ff28 	bl	800d022 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e1d2:	46c0      	nop			@ (mov r8, r8)
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	b002      	add	sp, #8
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	46c0      	nop			@ (mov r8, r8)
 800e1dc:	ffff0000 	.word	0xffff0000
 800e1e0:	00008003 	.word	0x00008003

0800e1e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e1ee:	200f      	movs	r0, #15
 800e1f0:	183b      	adds	r3, r7, r0
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	2141      	movs	r1, #65	@ 0x41
 800e1f6:	5c52      	ldrb	r2, [r2, r1]
 800e1f8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2242      	movs	r2, #66	@ 0x42
 800e1fe:	2100      	movs	r1, #0
 800e200:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4a72      	ldr	r2, [pc, #456]	@ (800e3d0 <I2C_ITError+0x1ec>)
 800e206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	431a      	orrs	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e21a:	183b      	adds	r3, r7, r0
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	2b28      	cmp	r3, #40	@ 0x28
 800e220:	d007      	beq.n	800e232 <I2C_ITError+0x4e>
 800e222:	183b      	adds	r3, r7, r0
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	2b29      	cmp	r3, #41	@ 0x29
 800e228:	d003      	beq.n	800e232 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e22a:	183b      	adds	r3, r7, r0
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e230:	d10c      	bne.n	800e24c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2103      	movs	r1, #3
 800e236:	0018      	movs	r0, r3
 800e238:	f000 fac2 	bl	800e7c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2241      	movs	r2, #65	@ 0x41
 800e240:	2128      	movs	r1, #40	@ 0x28
 800e242:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a63      	ldr	r2, [pc, #396]	@ (800e3d4 <I2C_ITError+0x1f0>)
 800e248:	635a      	str	r2, [r3, #52]	@ 0x34
 800e24a:	e032      	b.n	800e2b2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e24c:	4a62      	ldr	r2, [pc, #392]	@ (800e3d8 <I2C_ITError+0x1f4>)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	0011      	movs	r1, r2
 800e252:	0018      	movs	r0, r3
 800e254:	f000 fab4 	bl	800e7c0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	0018      	movs	r0, r3
 800e25c:	f000 f8ed 	bl	800e43a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2241      	movs	r2, #65	@ 0x41
 800e264:	5c9b      	ldrb	r3, [r3, r2]
 800e266:	b2db      	uxtb	r3, r3
 800e268:	2b60      	cmp	r3, #96	@ 0x60
 800e26a:	d01f      	beq.n	800e2ac <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2241      	movs	r2, #65	@ 0x41
 800e270:	2120      	movs	r1, #32
 800e272:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	2220      	movs	r2, #32
 800e27c:	4013      	ands	r3, r2
 800e27e:	2b20      	cmp	r3, #32
 800e280:	d114      	bne.n	800e2ac <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	699b      	ldr	r3, [r3, #24]
 800e288:	2210      	movs	r2, #16
 800e28a:	4013      	ands	r3, r2
 800e28c:	2b10      	cmp	r3, #16
 800e28e:	d109      	bne.n	800e2a4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2210      	movs	r2, #16
 800e296:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e29c:	2204      	movs	r2, #4
 800e29e:	431a      	orrs	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2220      	movs	r2, #32
 800e2aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d03b      	beq.n	800e338 <I2C_ITError+0x154>
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2b11      	cmp	r3, #17
 800e2c4:	d002      	beq.n	800e2cc <I2C_ITError+0xe8>
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	2b21      	cmp	r3, #33	@ 0x21
 800e2ca:	d135      	bne.n	800e338 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	2380      	movs	r3, #128	@ 0x80
 800e2d4:	01db      	lsls	r3, r3, #7
 800e2d6:	401a      	ands	r2, r3
 800e2d8:	2380      	movs	r3, #128	@ 0x80
 800e2da:	01db      	lsls	r3, r3, #7
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d107      	bne.n	800e2f0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	493c      	ldr	r1, [pc, #240]	@ (800e3dc <I2C_ITError+0x1f8>)
 800e2ec:	400a      	ands	r2, r1
 800e2ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2f4:	0018      	movs	r0, r3
 800e2f6:	f7fd ff8e 	bl	800c216 <HAL_DMA_GetState>
 800e2fa:	0003      	movs	r3, r0
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d016      	beq.n	800e32e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e304:	4a36      	ldr	r2, [pc, #216]	@ (800e3e0 <I2C_ITError+0x1fc>)
 800e306:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2240      	movs	r2, #64	@ 0x40
 800e30c:	2100      	movs	r1, #0
 800e30e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e314:	0018      	movs	r0, r3
 800e316:	f7fd fe89 	bl	800c02c <HAL_DMA_Abort_IT>
 800e31a:	1e03      	subs	r3, r0, #0
 800e31c:	d051      	beq.n	800e3c2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e328:	0018      	movs	r0, r3
 800e32a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e32c:	e049      	b.n	800e3c2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	0018      	movs	r0, r3
 800e332:	f000 f859 	bl	800e3e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e336:	e044      	b.n	800e3c2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d03b      	beq.n	800e3b8 <I2C_ITError+0x1d4>
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2b12      	cmp	r3, #18
 800e344:	d002      	beq.n	800e34c <I2C_ITError+0x168>
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	2b22      	cmp	r3, #34	@ 0x22
 800e34a:	d135      	bne.n	800e3b8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	2380      	movs	r3, #128	@ 0x80
 800e354:	021b      	lsls	r3, r3, #8
 800e356:	401a      	ands	r2, r3
 800e358:	2380      	movs	r3, #128	@ 0x80
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d107      	bne.n	800e370 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	491e      	ldr	r1, [pc, #120]	@ (800e3e4 <I2C_ITError+0x200>)
 800e36c:	400a      	ands	r2, r1
 800e36e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e374:	0018      	movs	r0, r3
 800e376:	f7fd ff4e 	bl	800c216 <HAL_DMA_GetState>
 800e37a:	0003      	movs	r3, r0
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d016      	beq.n	800e3ae <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e384:	4a16      	ldr	r2, [pc, #88]	@ (800e3e0 <I2C_ITError+0x1fc>)
 800e386:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2240      	movs	r2, #64	@ 0x40
 800e38c:	2100      	movs	r1, #0
 800e38e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e394:	0018      	movs	r0, r3
 800e396:	f7fd fe49 	bl	800c02c <HAL_DMA_Abort_IT>
 800e39a:	1e03      	subs	r3, r0, #0
 800e39c:	d013      	beq.n	800e3c6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e3ac:	e00b      	b.n	800e3c6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	0018      	movs	r0, r3
 800e3b2:	f000 f819 	bl	800e3e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e3b6:	e006      	b.n	800e3c6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	0018      	movs	r0, r3
 800e3bc:	f000 f814 	bl	800e3e8 <I2C_TreatErrorCallback>
  }
}
 800e3c0:	e002      	b.n	800e3c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e3c2:	46c0      	nop			@ (mov r8, r8)
 800e3c4:	e000      	b.n	800e3c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e3c6:	46c0      	nop			@ (mov r8, r8)
}
 800e3c8:	46c0      	nop			@ (mov r8, r8)
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	b004      	add	sp, #16
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	ffff0000 	.word	0xffff0000
 800e3d4:	0800d2c9 	.word	0x0800d2c9
 800e3d8:	00008003 	.word	0x00008003
 800e3dc:	ffffbfff 	.word	0xffffbfff
 800e3e0:	0800e5f3 	.word	0x0800e5f3
 800e3e4:	ffff7fff 	.word	0xffff7fff

0800e3e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2241      	movs	r2, #65	@ 0x41
 800e3f4:	5c9b      	ldrb	r3, [r3, r2]
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b60      	cmp	r3, #96	@ 0x60
 800e3fa:	d10f      	bne.n	800e41c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2241      	movs	r2, #65	@ 0x41
 800e400:	2120      	movs	r1, #32
 800e402:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2240      	movs	r2, #64	@ 0x40
 800e40e:	2100      	movs	r1, #0
 800e410:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	0018      	movs	r0, r3
 800e416:	f7fe fe24 	bl	800d062 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e41a:	e00a      	b.n	800e432 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2240      	movs	r2, #64	@ 0x40
 800e426:	2100      	movs	r1, #0
 800e428:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	0018      	movs	r0, r3
 800e42e:	f7fe fe10 	bl	800d052 <HAL_I2C_ErrorCallback>
}
 800e432:	46c0      	nop			@ (mov r8, r8)
 800e434:	46bd      	mov	sp, r7
 800e436:	b002      	add	sp, #8
 800e438:	bd80      	pop	{r7, pc}

0800e43a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b082      	sub	sp, #8
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	699b      	ldr	r3, [r3, #24]
 800e448:	2202      	movs	r2, #2
 800e44a:	4013      	ands	r3, r2
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d103      	bne.n	800e458 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2200      	movs	r2, #0
 800e456:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	2201      	movs	r2, #1
 800e460:	4013      	ands	r3, r2
 800e462:	2b01      	cmp	r3, #1
 800e464:	d007      	beq.n	800e476 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	699a      	ldr	r2, [r3, #24]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2101      	movs	r1, #1
 800e472:	430a      	orrs	r2, r1
 800e474:	619a      	str	r2, [r3, #24]
  }
}
 800e476:	46c0      	nop			@ (mov r8, r8)
 800e478:	46bd      	mov	sp, r7
 800e47a:	b002      	add	sp, #8
 800e47c:	bd80      	pop	{r7, pc}
	...

0800e480 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e48c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4920      	ldr	r1, [pc, #128]	@ (800e51c <I2C_DMAMasterTransmitCplt+0x9c>)
 800e49a:	400a      	ands	r2, r1
 800e49c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d105      	bne.n	800e4b4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2120      	movs	r1, #32
 800e4ac:	0018      	movs	r0, r3
 800e4ae:	f000 f8f9 	bl	800e6a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e4b2:	e02e      	b.n	800e512 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e4bc:	189a      	adds	r2, r3, r2
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	2bff      	cmp	r3, #255	@ 0xff
 800e4ca:	d903      	bls.n	800e4d4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	22ff      	movs	r2, #255	@ 0xff
 800e4d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e4d2:	e004      	b.n	800e4de <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e6:	0019      	movs	r1, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3328      	adds	r3, #40	@ 0x28
 800e4ee:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e4f4:	f7fd fcf4 	bl	800bee0 <HAL_DMA_Start_IT>
 800e4f8:	1e03      	subs	r3, r0, #0
 800e4fa:	d005      	beq.n	800e508 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2110      	movs	r1, #16
 800e500:	0018      	movs	r0, r3
 800e502:	f7ff fe6f 	bl	800e1e4 <I2C_ITError>
}
 800e506:	e004      	b.n	800e512 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2140      	movs	r1, #64	@ 0x40
 800e50c:	0018      	movs	r0, r3
 800e50e:	f000 f8c9 	bl	800e6a4 <I2C_Enable_IRQ>
}
 800e512:	46c0      	nop			@ (mov r8, r8)
 800e514:	46bd      	mov	sp, r7
 800e516:	b004      	add	sp, #16
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	46c0      	nop			@ (mov r8, r8)
 800e51c:	ffffbfff 	.word	0xffffbfff

0800e520 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4920      	ldr	r1, [pc, #128]	@ (800e5bc <I2C_DMAMasterReceiveCplt+0x9c>)
 800e53a:	400a      	ands	r2, r1
 800e53c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e542:	b29b      	uxth	r3, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	d105      	bne.n	800e554 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2120      	movs	r1, #32
 800e54c:	0018      	movs	r0, r3
 800e54e:	f000 f8a9 	bl	800e6a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e552:	e02e      	b.n	800e5b2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e55c:	189a      	adds	r2, r3, r2
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e566:	b29b      	uxth	r3, r3
 800e568:	2bff      	cmp	r3, #255	@ 0xff
 800e56a:	d903      	bls.n	800e574 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	22ff      	movs	r2, #255	@ 0xff
 800e570:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e572:	e004      	b.n	800e57e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e578:	b29a      	uxth	r2, r3
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	3324      	adds	r3, #36	@ 0x24
 800e588:	0019      	movs	r1, r3
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e58e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e594:	f7fd fca4 	bl	800bee0 <HAL_DMA_Start_IT>
 800e598:	1e03      	subs	r3, r0, #0
 800e59a:	d005      	beq.n	800e5a8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2110      	movs	r1, #16
 800e5a0:	0018      	movs	r0, r3
 800e5a2:	f7ff fe1f 	bl	800e1e4 <I2C_ITError>
}
 800e5a6:	e004      	b.n	800e5b2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2140      	movs	r1, #64	@ 0x40
 800e5ac:	0018      	movs	r0, r3
 800e5ae:	f000 f879 	bl	800e6a4 <I2C_Enable_IRQ>
}
 800e5b2:	46c0      	nop			@ (mov r8, r8)
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	b004      	add	sp, #16
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	46c0      	nop			@ (mov r8, r8)
 800e5bc:	ffff7fff 	.word	0xffff7fff

0800e5c0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5cc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2180      	movs	r1, #128	@ 0x80
 800e5da:	0209      	lsls	r1, r1, #8
 800e5dc:	430a      	orrs	r2, r1
 800e5de:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2110      	movs	r1, #16
 800e5e4:	0018      	movs	r0, r3
 800e5e6:	f7ff fdfd 	bl	800e1e4 <I2C_ITError>
}
 800e5ea:	46c0      	nop			@ (mov r8, r8)
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	b004      	add	sp, #16
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e604:	2b00      	cmp	r3, #0
 800e606:	d003      	beq.n	800e610 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e60c:	2200      	movs	r2, #0
 800e60e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e61c:	2200      	movs	r2, #0
 800e61e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	0018      	movs	r0, r3
 800e624:	f7ff fee0 	bl	800e3e8 <I2C_TreatErrorCallback>
}
 800e628:	46c0      	nop			@ (mov r8, r8)
 800e62a:	46bd      	mov	sp, r7
 800e62c:	b004      	add	sp, #16
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e630:	b590      	push	{r4, r7, lr}
 800e632:	b087      	sub	sp, #28
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	0008      	movs	r0, r1
 800e63a:	0011      	movs	r1, r2
 800e63c:	607b      	str	r3, [r7, #4]
 800e63e:	240a      	movs	r4, #10
 800e640:	193b      	adds	r3, r7, r4
 800e642:	1c02      	adds	r2, r0, #0
 800e644:	801a      	strh	r2, [r3, #0]
 800e646:	2009      	movs	r0, #9
 800e648:	183b      	adds	r3, r7, r0
 800e64a:	1c0a      	adds	r2, r1, #0
 800e64c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e64e:	193b      	adds	r3, r7, r4
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	059b      	lsls	r3, r3, #22
 800e654:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e656:	183b      	adds	r3, r7, r0
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	0419      	lsls	r1, r3, #16
 800e65c:	23ff      	movs	r3, #255	@ 0xff
 800e65e:	041b      	lsls	r3, r3, #16
 800e660:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e662:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e66a:	4313      	orrs	r3, r2
 800e66c:	005b      	lsls	r3, r3, #1
 800e66e:	085b      	lsrs	r3, r3, #1
 800e670:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e67a:	0d51      	lsrs	r1, r2, #21
 800e67c:	2280      	movs	r2, #128	@ 0x80
 800e67e:	00d2      	lsls	r2, r2, #3
 800e680:	400a      	ands	r2, r1
 800e682:	4907      	ldr	r1, [pc, #28]	@ (800e6a0 <I2C_TransferConfig+0x70>)
 800e684:	430a      	orrs	r2, r1
 800e686:	43d2      	mvns	r2, r2
 800e688:	401a      	ands	r2, r3
 800e68a:	0011      	movs	r1, r2
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	697a      	ldr	r2, [r7, #20]
 800e692:	430a      	orrs	r2, r1
 800e694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e696:	46c0      	nop			@ (mov r8, r8)
 800e698:	46bd      	mov	sp, r7
 800e69a:	b007      	add	sp, #28
 800e69c:	bd90      	pop	{r4, r7, pc}
 800e69e:	46c0      	nop			@ (mov r8, r8)
 800e6a0:	03ff63ff 	.word	0x03ff63ff

0800e6a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	000a      	movs	r2, r1
 800e6ae:	1cbb      	adds	r3, r7, #2
 800e6b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e6ba:	4b3e      	ldr	r3, [pc, #248]	@ (800e7b4 <I2C_Enable_IRQ+0x110>)
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d035      	beq.n	800e72c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800e6c4:	4b3c      	ldr	r3, [pc, #240]	@ (800e7b8 <I2C_Enable_IRQ+0x114>)
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d030      	beq.n	800e72c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800e6ce:	4b3b      	ldr	r3, [pc, #236]	@ (800e7bc <I2C_Enable_IRQ+0x118>)
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d02b      	beq.n	800e72c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e6d4:	1cbb      	adds	r3, r7, #2
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	5e9b      	ldrsh	r3, [r3, r2]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	da03      	bge.n	800e6e6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	22b8      	movs	r2, #184	@ 0xb8
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e6e6:	1cbb      	adds	r3, r7, #2
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	4013      	ands	r3, r2
 800e6ee:	d003      	beq.n	800e6f8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	22f2      	movs	r2, #242	@ 0xf2
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e6f8:	1cbb      	adds	r3, r7, #2
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	2202      	movs	r2, #2
 800e6fe:	4013      	ands	r3, r2
 800e700:	d003      	beq.n	800e70a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	22f4      	movs	r2, #244	@ 0xf4
 800e706:	4313      	orrs	r3, r2
 800e708:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e70a:	1cbb      	adds	r3, r7, #2
 800e70c:	881b      	ldrh	r3, [r3, #0]
 800e70e:	2b10      	cmp	r3, #16
 800e710:	d103      	bne.n	800e71a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2290      	movs	r2, #144	@ 0x90
 800e716:	4313      	orrs	r3, r2
 800e718:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e71a:	1cbb      	adds	r3, r7, #2
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	2b20      	cmp	r3, #32
 800e720:	d13c      	bne.n	800e79c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2220      	movs	r2, #32
 800e726:	4313      	orrs	r3, r2
 800e728:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e72a:	e037      	b.n	800e79c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e72c:	1cbb      	adds	r3, r7, #2
 800e72e:	2200      	movs	r2, #0
 800e730:	5e9b      	ldrsh	r3, [r3, r2]
 800e732:	2b00      	cmp	r3, #0
 800e734:	da03      	bge.n	800e73e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	22b8      	movs	r2, #184	@ 0xb8
 800e73a:	4313      	orrs	r3, r2
 800e73c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e73e:	1cbb      	adds	r3, r7, #2
 800e740:	881b      	ldrh	r3, [r3, #0]
 800e742:	2201      	movs	r2, #1
 800e744:	4013      	ands	r3, r2
 800e746:	d003      	beq.n	800e750 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	22f2      	movs	r2, #242	@ 0xf2
 800e74c:	4313      	orrs	r3, r2
 800e74e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e750:	1cbb      	adds	r3, r7, #2
 800e752:	881b      	ldrh	r3, [r3, #0]
 800e754:	2202      	movs	r2, #2
 800e756:	4013      	ands	r3, r2
 800e758:	d003      	beq.n	800e762 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	22f4      	movs	r2, #244	@ 0xf4
 800e75e:	4313      	orrs	r3, r2
 800e760:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e762:	1cbb      	adds	r3, r7, #2
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	2b10      	cmp	r3, #16
 800e768:	d103      	bne.n	800e772 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2290      	movs	r2, #144	@ 0x90
 800e76e:	4313      	orrs	r3, r2
 800e770:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e772:	1cbb      	adds	r3, r7, #2
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	2b20      	cmp	r3, #32
 800e778:	d103      	bne.n	800e782 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2260      	movs	r2, #96	@ 0x60
 800e77e:	4313      	orrs	r3, r2
 800e780:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e786:	4b0d      	ldr	r3, [pc, #52]	@ (800e7bc <I2C_Enable_IRQ+0x118>)
 800e788:	429a      	cmp	r2, r3
 800e78a:	d007      	beq.n	800e79c <I2C_Enable_IRQ+0xf8>
 800e78c:	1cbb      	adds	r3, r7, #2
 800e78e:	881b      	ldrh	r3, [r3, #0]
 800e790:	2b40      	cmp	r3, #64	@ 0x40
 800e792:	d103      	bne.n	800e79c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2240      	movs	r2, #64	@ 0x40
 800e798:	4313      	orrs	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6819      	ldr	r1, [r3, #0]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	430a      	orrs	r2, r1
 800e7aa:	601a      	str	r2, [r3, #0]
}
 800e7ac:	46c0      	nop			@ (mov r8, r8)
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	b004      	add	sp, #16
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	0800d4c9 	.word	0x0800d4c9
 800e7b8:	0800d8f9 	.word	0x0800d8f9
 800e7bc:	0800d6c1 	.word	0x0800d6c1

0800e7c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	000a      	movs	r2, r1
 800e7ca:	1cbb      	adds	r3, r7, #2
 800e7cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e7d2:	1cbb      	adds	r3, r7, #2
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	4013      	ands	r3, r2
 800e7da:	d010      	beq.n	800e7fe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2242      	movs	r2, #66	@ 0x42
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2241      	movs	r2, #65	@ 0x41
 800e7e8:	5c9b      	ldrb	r3, [r3, r2]
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	001a      	movs	r2, r3
 800e7ee:	2328      	movs	r3, #40	@ 0x28
 800e7f0:	4013      	ands	r3, r2
 800e7f2:	2b28      	cmp	r3, #40	@ 0x28
 800e7f4:	d003      	beq.n	800e7fe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	22b0      	movs	r2, #176	@ 0xb0
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e7fe:	1cbb      	adds	r3, r7, #2
 800e800:	881b      	ldrh	r3, [r3, #0]
 800e802:	2202      	movs	r2, #2
 800e804:	4013      	ands	r3, r2
 800e806:	d010      	beq.n	800e82a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2244      	movs	r2, #68	@ 0x44
 800e80c:	4313      	orrs	r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2241      	movs	r2, #65	@ 0x41
 800e814:	5c9b      	ldrb	r3, [r3, r2]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	001a      	movs	r2, r3
 800e81a:	2328      	movs	r3, #40	@ 0x28
 800e81c:	4013      	ands	r3, r2
 800e81e:	2b28      	cmp	r3, #40	@ 0x28
 800e820:	d003      	beq.n	800e82a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	22b0      	movs	r2, #176	@ 0xb0
 800e826:	4313      	orrs	r3, r2
 800e828:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e82a:	1cbb      	adds	r3, r7, #2
 800e82c:	2200      	movs	r2, #0
 800e82e:	5e9b      	ldrsh	r3, [r3, r2]
 800e830:	2b00      	cmp	r3, #0
 800e832:	da03      	bge.n	800e83c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	22b8      	movs	r2, #184	@ 0xb8
 800e838:	4313      	orrs	r3, r2
 800e83a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e83c:	1cbb      	adds	r3, r7, #2
 800e83e:	881b      	ldrh	r3, [r3, #0]
 800e840:	2b10      	cmp	r3, #16
 800e842:	d103      	bne.n	800e84c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2290      	movs	r2, #144	@ 0x90
 800e848:	4313      	orrs	r3, r2
 800e84a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e84c:	1cbb      	adds	r3, r7, #2
 800e84e:	881b      	ldrh	r3, [r3, #0]
 800e850:	2b20      	cmp	r3, #32
 800e852:	d103      	bne.n	800e85c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2220      	movs	r2, #32
 800e858:	4313      	orrs	r3, r2
 800e85a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e85c:	1cbb      	adds	r3, r7, #2
 800e85e:	881b      	ldrh	r3, [r3, #0]
 800e860:	2b40      	cmp	r3, #64	@ 0x40
 800e862:	d103      	bne.n	800e86c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2240      	movs	r2, #64	@ 0x40
 800e868:	4313      	orrs	r3, r2
 800e86a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	43d9      	mvns	r1, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	400a      	ands	r2, r1
 800e87c:	601a      	str	r2, [r3, #0]
}
 800e87e:	46c0      	nop			@ (mov r8, r8)
 800e880:	46bd      	mov	sp, r7
 800e882:	b004      	add	sp, #16
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2241      	movs	r2, #65	@ 0x41
 800e896:	5c9b      	ldrb	r3, [r3, r2]
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b20      	cmp	r3, #32
 800e89c:	d138      	bne.n	800e910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2240      	movs	r2, #64	@ 0x40
 800e8a2:	5c9b      	ldrb	r3, [r3, r2]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d101      	bne.n	800e8ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	e032      	b.n	800e912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2240      	movs	r2, #64	@ 0x40
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2241      	movs	r2, #65	@ 0x41
 800e8b8:	2124      	movs	r1, #36	@ 0x24
 800e8ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2101      	movs	r1, #1
 800e8c8:	438a      	bics	r2, r1
 800e8ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4911      	ldr	r1, [pc, #68]	@ (800e91c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800e8d8:	400a      	ands	r2, r1
 800e8da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6819      	ldr	r1, [r3, #0]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	683a      	ldr	r2, [r7, #0]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2101      	movs	r1, #1
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2241      	movs	r2, #65	@ 0x41
 800e900:	2120      	movs	r1, #32
 800e902:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2240      	movs	r2, #64	@ 0x40
 800e908:	2100      	movs	r1, #0
 800e90a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800e90c:	2300      	movs	r3, #0
 800e90e:	e000      	b.n	800e912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e910:	2302      	movs	r3, #2
  }
}
 800e912:	0018      	movs	r0, r3
 800e914:	46bd      	mov	sp, r7
 800e916:	b002      	add	sp, #8
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	46c0      	nop			@ (mov r8, r8)
 800e91c:	ffffefff 	.word	0xffffefff

0800e920 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2241      	movs	r2, #65	@ 0x41
 800e92e:	5c9b      	ldrb	r3, [r3, r2]
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b20      	cmp	r3, #32
 800e934:	d139      	bne.n	800e9aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2240      	movs	r2, #64	@ 0x40
 800e93a:	5c9b      	ldrb	r3, [r3, r2]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d101      	bne.n	800e944 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e940:	2302      	movs	r3, #2
 800e942:	e033      	b.n	800e9ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2240      	movs	r2, #64	@ 0x40
 800e948:	2101      	movs	r1, #1
 800e94a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2241      	movs	r2, #65	@ 0x41
 800e950:	2124      	movs	r1, #36	@ 0x24
 800e952:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2101      	movs	r1, #1
 800e960:	438a      	bics	r2, r1
 800e962:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	4a11      	ldr	r2, [pc, #68]	@ (800e9b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800e970:	4013      	ands	r3, r2
 800e972:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	021b      	lsls	r3, r3, #8
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2101      	movs	r1, #1
 800e992:	430a      	orrs	r2, r1
 800e994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2241      	movs	r2, #65	@ 0x41
 800e99a:	2120      	movs	r1, #32
 800e99c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2240      	movs	r2, #64	@ 0x40
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e000      	b.n	800e9ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e9aa:	2302      	movs	r3, #2
  }
}
 800e9ac:	0018      	movs	r0, r3
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	b004      	add	sp, #16
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	fffff0ff 	.word	0xfffff0ff

0800e9b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b088      	sub	sp, #32
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d101      	bne.n	800e9ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e0e1      	b.n	800eb8e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2235      	movs	r2, #53	@ 0x35
 800e9ce:	5c9b      	ldrb	r3, [r3, r2]
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d107      	bne.n	800e9e6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2234      	movs	r2, #52	@ 0x34
 800e9da:	2100      	movs	r1, #0
 800e9dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	0018      	movs	r0, r3
 800e9e2:	f7f7 fe6d 	bl	80066c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2235      	movs	r2, #53	@ 0x35
 800e9ea:	2102      	movs	r1, #2
 800e9ec:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	69da      	ldr	r2, [r3, #28]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4967      	ldr	r1, [pc, #412]	@ (800eb98 <HAL_I2S_Init+0x1e0>)
 800e9fa:	400a      	ands	r2, r1
 800e9fc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2202      	movs	r2, #2
 800ea04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	695b      	ldr	r3, [r3, #20]
 800ea0a:	2b02      	cmp	r3, #2
 800ea0c:	d073      	beq.n	800eaf6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d102      	bne.n	800ea1c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800ea16:	2310      	movs	r3, #16
 800ea18:	617b      	str	r3, [r7, #20]
 800ea1a:	e001      	b.n	800ea20 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800ea1c:	2320      	movs	r3, #32
 800ea1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	2b20      	cmp	r3, #32
 800ea26:	d802      	bhi.n	800ea2e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800ea2e:	f002 fe51 	bl	80116d4 <HAL_RCC_GetSysClockFreq>
 800ea32:	0003      	movs	r3, r0
 800ea34:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	691a      	ldr	r2, [r3, #16]
 800ea3a:	2380      	movs	r3, #128	@ 0x80
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d131      	bne.n	800eaa6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d016      	beq.n	800ea78 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	0019      	movs	r1, r3
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7f1 fb9d 	bl	8000190 <__udivsi3>
 800ea56:	0003      	movs	r3, r0
 800ea58:	001a      	movs	r2, r3
 800ea5a:	0013      	movs	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	189b      	adds	r3, r3, r2
 800ea60:	005b      	lsls	r3, r3, #1
 800ea62:	001a      	movs	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	695b      	ldr	r3, [r3, #20]
 800ea68:	0019      	movs	r1, r3
 800ea6a:	0010      	movs	r0, r2
 800ea6c:	f7f1 fb90 	bl	8000190 <__udivsi3>
 800ea70:	0003      	movs	r3, r0
 800ea72:	3305      	adds	r3, #5
 800ea74:	613b      	str	r3, [r7, #16]
 800ea76:	e02a      	b.n	800eace <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	0019      	movs	r1, r3
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f7f1 fb86 	bl	8000190 <__udivsi3>
 800ea84:	0003      	movs	r3, r0
 800ea86:	001a      	movs	r2, r3
 800ea88:	0013      	movs	r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	189b      	adds	r3, r3, r2
 800ea8e:	005b      	lsls	r3, r3, #1
 800ea90:	001a      	movs	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	695b      	ldr	r3, [r3, #20]
 800ea96:	0019      	movs	r1, r3
 800ea98:	0010      	movs	r0, r2
 800ea9a:	f7f1 fb79 	bl	8000190 <__udivsi3>
 800ea9e:	0003      	movs	r3, r0
 800eaa0:	3305      	adds	r3, #5
 800eaa2:	613b      	str	r3, [r7, #16]
 800eaa4:	e013      	b.n	800eace <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800eaa6:	6979      	ldr	r1, [r7, #20]
 800eaa8:	68f8      	ldr	r0, [r7, #12]
 800eaaa:	f7f1 fb71 	bl	8000190 <__udivsi3>
 800eaae:	0003      	movs	r3, r0
 800eab0:	001a      	movs	r2, r3
 800eab2:	0013      	movs	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	189b      	adds	r3, r3, r2
 800eab8:	005b      	lsls	r3, r3, #1
 800eaba:	001a      	movs	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	695b      	ldr	r3, [r3, #20]
 800eac0:	0019      	movs	r1, r3
 800eac2:	0010      	movs	r0, r2
 800eac4:	f7f1 fb64 	bl	8000190 <__udivsi3>
 800eac8:	0003      	movs	r3, r0
 800eaca:	3305      	adds	r3, #5
 800eacc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	210a      	movs	r1, #10
 800ead2:	0018      	movs	r0, r3
 800ead4:	f7f1 fb5c 	bl	8000190 <__udivsi3>
 800ead8:	0003      	movs	r3, r0
 800eada:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	2201      	movs	r2, #1
 800eae0:	4013      	ands	r3, r2
 800eae2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800eae4:	693a      	ldr	r2, [r7, #16]
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	085b      	lsrs	r3, r3, #1
 800eaec:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	021b      	lsls	r3, r3, #8
 800eaf2:	61bb      	str	r3, [r7, #24]
 800eaf4:	e003      	b.n	800eafe <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800eaf6:	2302      	movs	r3, #2
 800eaf8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800eafa:	2300      	movs	r3, #0
 800eafc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d902      	bls.n	800eb0a <HAL_I2S_Init+0x152>
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2bff      	cmp	r3, #255	@ 0xff
 800eb08:	d907      	bls.n	800eb1a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb0e:	2210      	movs	r2, #16
 800eb10:	431a      	orrs	r2, r3
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e039      	b.n	800eb8e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	691a      	ldr	r2, [r3, #16]
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	431a      	orrs	r2, r3
 800eb22:	0011      	movs	r1, r2
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	69fa      	ldr	r2, [r7, #28]
 800eb2a:	430a      	orrs	r2, r1
 800eb2c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	69db      	ldr	r3, [r3, #28]
 800eb34:	4a18      	ldr	r2, [pc, #96]	@ (800eb98 <HAL_I2S_Init+0x1e0>)
 800eb36:	401a      	ands	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6859      	ldr	r1, [r3, #4]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	689b      	ldr	r3, [r3, #8]
 800eb40:	4319      	orrs	r1, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	4319      	orrs	r1, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	430b      	orrs	r3, r1
 800eb4e:	431a      	orrs	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2180      	movs	r1, #128	@ 0x80
 800eb56:	0109      	lsls	r1, r1, #4
 800eb58:	430a      	orrs	r2, r1
 800eb5a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	2b30      	cmp	r3, #48	@ 0x30
 800eb62:	d003      	beq.n	800eb6c <HAL_I2S_Init+0x1b4>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	2bb0      	cmp	r3, #176	@ 0xb0
 800eb6a:	d108      	bne.n	800eb7e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	69da      	ldr	r2, [r3, #28]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2180      	movs	r1, #128	@ 0x80
 800eb78:	0149      	lsls	r1, r1, #5
 800eb7a:	430a      	orrs	r2, r1
 800eb7c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2235      	movs	r2, #53	@ 0x35
 800eb88:	2101      	movs	r1, #1
 800eb8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	0018      	movs	r0, r3
 800eb90:	46bd      	mov	sp, r7
 800eb92:	b008      	add	sp, #32
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	46c0      	nop			@ (mov r8, r8)
 800eb98:	fffff040 	.word	0xfffff040

0800eb9c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	1dbb      	adds	r3, r7, #6
 800eba8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <HAL_I2S_Receive_DMA+0x1c>
 800ebb0:	1dbb      	adds	r3, r7, #6
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d101      	bne.n	800ebbc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e0a6      	b.n	800ed0a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2234      	movs	r2, #52	@ 0x34
 800ebc0:	5c9b      	ldrb	r3, [r3, r2]
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d101      	bne.n	800ebcc <HAL_I2S_Receive_DMA+0x30>
 800ebc8:	2302      	movs	r3, #2
 800ebca:	e09e      	b.n	800ed0a <HAL_I2S_Receive_DMA+0x16e>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2234      	movs	r2, #52	@ 0x34
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2235      	movs	r2, #53	@ 0x35
 800ebd8:	5c9b      	ldrb	r3, [r3, r2]
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d005      	beq.n	800ebec <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2234      	movs	r2, #52	@ 0x34
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800ebe8:	2302      	movs	r3, #2
 800ebea:	e08e      	b.n	800ed0a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2235      	movs	r2, #53	@ 0x35
 800ebf0:	2104      	movs	r1, #4
 800ebf2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	69db      	ldr	r3, [r3, #28]
 800ec06:	2207      	movs	r2, #7
 800ec08:	4013      	ands	r3, r2
 800ec0a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	2b03      	cmp	r3, #3
 800ec10:	d002      	beq.n	800ec18 <HAL_I2S_Receive_DMA+0x7c>
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	2b05      	cmp	r3, #5
 800ec16:	d10c      	bne.n	800ec32 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800ec18:	1dbb      	adds	r3, r7, #6
 800ec1a:	881b      	ldrh	r3, [r3, #0]
 800ec1c:	18db      	adds	r3, r3, r3
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800ec24:	1dbb      	adds	r3, r7, #6
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	18db      	adds	r3, r3, r3
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ec30:	e007      	b.n	800ec42 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	1dba      	adds	r2, r7, #6
 800ec36:	8812      	ldrh	r2, [r2, #0]
 800ec38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	1dba      	adds	r2, r7, #6
 800ec3e:	8812      	ldrh	r2, [r2, #0]
 800ec40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec46:	4a33      	ldr	r2, [pc, #204]	@ (800ed14 <HAL_I2S_Receive_DMA+0x178>)
 800ec48:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec4e:	4a32      	ldr	r2, [pc, #200]	@ (800ed18 <HAL_I2S_Receive_DMA+0x17c>)
 800ec50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec56:	4a31      	ldr	r2, [pc, #196]	@ (800ed1c <HAL_I2S_Receive_DMA+0x180>)
 800ec58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	69da      	ldr	r2, [r3, #28]
 800ec60:	23c0      	movs	r3, #192	@ 0xc0
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	401a      	ands	r2, r3
 800ec66:	23c0      	movs	r3, #192	@ 0xc0
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d10a      	bne.n	800ec84 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800ec6e:	2300      	movs	r3, #0
 800ec70:	613b      	str	r3, [r7, #16]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	613b      	str	r3, [r7, #16]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	613b      	str	r3, [r7, #16]
 800ec82:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	330c      	adds	r3, #12
 800ec8e:	0019      	movs	r1, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec94:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800ec9c:	f7fd f920 	bl	800bee0 <HAL_DMA_Start_IT>
 800eca0:	1e03      	subs	r3, r0, #0
 800eca2:	d00f      	beq.n	800ecc4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eca8:	2208      	movs	r2, #8
 800ecaa:	431a      	orrs	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2235      	movs	r2, #53	@ 0x35
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2234      	movs	r2, #52	@ 0x34
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e022      	b.n	800ed0a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	69da      	ldr	r2, [r3, #28]
 800ecca:	2380      	movs	r3, #128	@ 0x80
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	4013      	ands	r3, r2
 800ecd0:	d108      	bne.n	800ece4 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	69da      	ldr	r2, [r3, #28]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2180      	movs	r1, #128	@ 0x80
 800ecde:	00c9      	lsls	r1, r1, #3
 800ece0:	430a      	orrs	r2, r1
 800ece2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	4013      	ands	r3, r2
 800ecee:	d107      	bne.n	800ed00 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2101      	movs	r1, #1
 800ecfc:	430a      	orrs	r2, r1
 800ecfe:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2234      	movs	r2, #52	@ 0x34
 800ed04:	2100      	movs	r1, #0
 800ed06:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	b006      	add	sp, #24
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	46c0      	nop			@ (mov r8, r8)
 800ed14:	0800eefd 	.word	0x0800eefd
 800ed18:	0800eeb9 	.word	0x0800eeb9
 800ed1c:	0800ef1b 	.word	0x0800ef1b

0800ed20 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed28:	2317      	movs	r3, #23
 800ed2a:	18fb      	adds	r3, r7, r3
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685a      	ldr	r2, [r3, #4]
 800ed34:	2380      	movs	r3, #128	@ 0x80
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d003      	beq.n	800ed44 <HAL_I2S_DMAStop+0x24>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d158      	bne.n	800edf6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d010      	beq.n	800ed6e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed50:	0018      	movs	r0, r3
 800ed52:	f7fd f92b 	bl	800bfac <HAL_DMA_Abort>
 800ed56:	1e03      	subs	r3, r0, #0
 800ed58:	d009      	beq.n	800ed6e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed5e:	2208      	movs	r2, #8
 800ed60:	431a      	orrs	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ed66:	2317      	movs	r3, #23
 800ed68:	18fb      	adds	r3, r7, r3
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	2364      	movs	r3, #100	@ 0x64
 800ed72:	2201      	movs	r2, #1
 800ed74:	2102      	movs	r1, #2
 800ed76:	f000 f8f7 	bl	800ef68 <I2S_WaitFlagStateUntilTimeout>
 800ed7a:	1e03      	subs	r3, r0, #0
 800ed7c:	d00d      	beq.n	800ed9a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed82:	2201      	movs	r2, #1
 800ed84:	431a      	orrs	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2235      	movs	r2, #53	@ 0x35
 800ed8e:	2101      	movs	r1, #1
 800ed90:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800ed92:	2317      	movs	r3, #23
 800ed94:	18fb      	adds	r3, r7, r3
 800ed96:	2201      	movs	r2, #1
 800ed98:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	2364      	movs	r3, #100	@ 0x64
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2180      	movs	r1, #128	@ 0x80
 800eda2:	f000 f8e1 	bl	800ef68 <I2S_WaitFlagStateUntilTimeout>
 800eda6:	1e03      	subs	r3, r0, #0
 800eda8:	d00d      	beq.n	800edc6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edae:	2201      	movs	r2, #1
 800edb0:	431a      	orrs	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2235      	movs	r2, #53	@ 0x35
 800edba:	2101      	movs	r1, #1
 800edbc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800edbe:	2317      	movs	r3, #23
 800edc0:	18fb      	adds	r3, r7, r3
 800edc2:	2201      	movs	r2, #1
 800edc4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	69da      	ldr	r2, [r3, #28]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4938      	ldr	r1, [pc, #224]	@ (800eeb4 <HAL_I2S_DMAStop+0x194>)
 800edd2:	400a      	ands	r2, r1
 800edd4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800edd6:	2300      	movs	r3, #0
 800edd8:	613b      	str	r3, [r7, #16]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	613b      	str	r3, [r7, #16]
 800ede2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	685a      	ldr	r2, [r3, #4]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2102      	movs	r1, #2
 800edf0:	438a      	bics	r2, r1
 800edf2:	605a      	str	r2, [r3, #4]
 800edf4:	e053      	b.n	800ee9e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	23c0      	movs	r3, #192	@ 0xc0
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d005      	beq.n	800ee0e <HAL_I2S_DMAStop+0xee>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	2380      	movs	r3, #128	@ 0x80
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d147      	bne.n	800ee9e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d010      	beq.n	800ee38 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee1a:	0018      	movs	r0, r3
 800ee1c:	f7fd f8c6 	bl	800bfac <HAL_DMA_Abort>
 800ee20:	1e03      	subs	r3, r0, #0
 800ee22:	d009      	beq.n	800ee38 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee28:	2208      	movs	r2, #8
 800ee2a:	431a      	orrs	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ee30:	2317      	movs	r3, #23
 800ee32:	18fb      	adds	r3, r7, r3
 800ee34:	2201      	movs	r2, #1
 800ee36:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	69da      	ldr	r2, [r3, #28]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	491c      	ldr	r1, [pc, #112]	@ (800eeb4 <HAL_I2S_DMAStop+0x194>)
 800ee44:	400a      	ands	r2, r1
 800ee46:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800ee48:	2300      	movs	r3, #0
 800ee4a:	60fb      	str	r3, [r7, #12]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	60fb      	str	r3, [r7, #12]
 800ee5c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	685a      	ldr	r2, [r3, #4]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2101      	movs	r1, #1
 800ee6a:	438a      	bics	r2, r1
 800ee6c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	2380      	movs	r3, #128	@ 0x80
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d10e      	bne.n	800ee98 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee7e:	2240      	movs	r2, #64	@ 0x40
 800ee80:	431a      	orrs	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2235      	movs	r2, #53	@ 0x35
 800ee8a:	2101      	movs	r1, #1
 800ee8c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800ee8e:	2317      	movs	r3, #23
 800ee90:	18fb      	adds	r3, r7, r3
 800ee92:	2201      	movs	r2, #1
 800ee94:	701a      	strb	r2, [r3, #0]
 800ee96:	e002      	b.n	800ee9e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2235      	movs	r2, #53	@ 0x35
 800eea2:	2101      	movs	r1, #1
 800eea4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800eea6:	2317      	movs	r3, #23
 800eea8:	18fb      	adds	r3, r7, r3
 800eeaa:	781b      	ldrb	r3, [r3, #0]
}
 800eeac:	0018      	movs	r0, r3
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	b006      	add	sp, #24
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	fffffbff 	.word	0xfffffbff

0800eeb8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eec4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	69db      	ldr	r3, [r3, #28]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d10e      	bne.n	800eeec <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2101      	movs	r1, #1
 800eeda:	438a      	bics	r2, r1
 800eedc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2235      	movs	r2, #53	@ 0x35
 800eee8:	2101      	movs	r1, #1
 800eeea:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	0018      	movs	r0, r3
 800eef0:	f7fa f9ce 	bl	8009290 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800eef4:	46c0      	nop			@ (mov r8, r8)
 800eef6:	46bd      	mov	sp, r7
 800eef8:	b004      	add	sp, #16
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef08:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	0018      	movs	r0, r3
 800ef0e:	f7fa f9ad 	bl	800926c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ef12:	46c0      	nop			@ (mov r8, r8)
 800ef14:	46bd      	mov	sp, r7
 800ef16:	b004      	add	sp, #16
 800ef18:	bd80      	pop	{r7, pc}

0800ef1a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef26:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	685a      	ldr	r2, [r3, #4]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2103      	movs	r1, #3
 800ef34:	438a      	bics	r2, r1
 800ef36:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2235      	movs	r2, #53	@ 0x35
 800ef48:	2101      	movs	r1, #1
 800ef4a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef50:	2208      	movs	r2, #8
 800ef52:	431a      	orrs	r2, r3
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	0018      	movs	r0, r3
 800ef5c:	f7fa f9e6 	bl	800932c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ef60:	46c0      	nop			@ (mov r8, r8)
 800ef62:	46bd      	mov	sp, r7
 800ef64:	b004      	add	sp, #16
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	603b      	str	r3, [r7, #0]
 800ef74:	1dfb      	adds	r3, r7, #7
 800ef76:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ef78:	f7fc fa92 	bl	800b4a0 <HAL_GetTick>
 800ef7c:	0003      	movs	r3, r0
 800ef7e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ef80:	e017      	b.n	800efb2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	3301      	adds	r3, #1
 800ef86:	d014      	beq.n	800efb2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800ef88:	f7fc fa8a 	bl	800b4a0 <HAL_GetTick>
 800ef8c:	0002      	movs	r2, r0
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	1ad3      	subs	r3, r2, r3
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d902      	bls.n	800ef9e <I2S_WaitFlagStateUntilTimeout+0x36>
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d109      	bne.n	800efb2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2235      	movs	r2, #53	@ 0x35
 800efa2:	2101      	movs	r1, #1
 800efa4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2234      	movs	r2, #52	@ 0x34
 800efaa:	2100      	movs	r1, #0
 800efac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e00f      	b.n	800efd2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	4013      	ands	r3, r2
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	425a      	negs	r2, r3
 800efc2:	4153      	adcs	r3, r2
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	001a      	movs	r2, r3
 800efc8:	1dfb      	adds	r3, r7, #7
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d1d8      	bne.n	800ef82 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	0018      	movs	r0, r3
 800efd4:	46bd      	mov	sp, r7
 800efd6:	b006      	add	sp, #24
 800efd8:	bd80      	pop	{r7, pc}
	...

0800efdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efde:	b08b      	sub	sp, #44	@ 0x2c
 800efe0:	af06      	add	r7, sp, #24
 800efe2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d101      	bne.n	800efee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	e0f0      	b.n	800f1d0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a79      	ldr	r2, [pc, #484]	@ (800f1d8 <HAL_PCD_Init+0x1fc>)
 800eff2:	5c9b      	ldrb	r3, [r3, r2]
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d108      	bne.n	800f00c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	23aa      	movs	r3, #170	@ 0xaa
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	2100      	movs	r1, #0
 800f002:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	0018      	movs	r0, r3
 800f008:	f009 f988 	bl	801831c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a72      	ldr	r2, [pc, #456]	@ (800f1d8 <HAL_PCD_Init+0x1fc>)
 800f010:	2103      	movs	r1, #3
 800f012:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	0018      	movs	r0, r3
 800f01a:	f005 f93b 	bl	8014294 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f01e:	230f      	movs	r3, #15
 800f020:	18fb      	adds	r3, r7, r3
 800f022:	2200      	movs	r2, #0
 800f024:	701a      	strb	r2, [r3, #0]
 800f026:	e049      	b.n	800f0bc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f028:	200f      	movs	r0, #15
 800f02a:	183b      	adds	r3, r7, r0
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	6879      	ldr	r1, [r7, #4]
 800f030:	1c5a      	adds	r2, r3, #1
 800f032:	0013      	movs	r3, r2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	189b      	adds	r3, r3, r2
 800f038:	00db      	lsls	r3, r3, #3
 800f03a:	18cb      	adds	r3, r1, r3
 800f03c:	3301      	adds	r3, #1
 800f03e:	2201      	movs	r2, #1
 800f040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f042:	183b      	adds	r3, r7, r0
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	6879      	ldr	r1, [r7, #4]
 800f048:	1c5a      	adds	r2, r3, #1
 800f04a:	0013      	movs	r3, r2
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	189b      	adds	r3, r3, r2
 800f050:	00db      	lsls	r3, r3, #3
 800f052:	183a      	adds	r2, r7, r0
 800f054:	7812      	ldrb	r2, [r2, #0]
 800f056:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f058:	183b      	adds	r3, r7, r0
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	1c5a      	adds	r2, r3, #1
 800f060:	0013      	movs	r3, r2
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	189b      	adds	r3, r3, r2
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	18cb      	adds	r3, r1, r3
 800f06a:	3303      	adds	r3, #3
 800f06c:	2200      	movs	r2, #0
 800f06e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f070:	183b      	adds	r3, r7, r0
 800f072:	781a      	ldrb	r2, [r3, #0]
 800f074:	6879      	ldr	r1, [r7, #4]
 800f076:	0013      	movs	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	189b      	adds	r3, r3, r2
 800f07c:	00db      	lsls	r3, r3, #3
 800f07e:	18cb      	adds	r3, r1, r3
 800f080:	3338      	adds	r3, #56	@ 0x38
 800f082:	2200      	movs	r2, #0
 800f084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f086:	183b      	adds	r3, r7, r0
 800f088:	781a      	ldrb	r2, [r3, #0]
 800f08a:	6879      	ldr	r1, [r7, #4]
 800f08c:	0013      	movs	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	189b      	adds	r3, r3, r2
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	18cb      	adds	r3, r1, r3
 800f096:	333c      	adds	r3, #60	@ 0x3c
 800f098:	2200      	movs	r2, #0
 800f09a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f09c:	183b      	adds	r3, r7, r0
 800f09e:	781a      	ldrb	r2, [r3, #0]
 800f0a0:	6879      	ldr	r1, [r7, #4]
 800f0a2:	0013      	movs	r3, r2
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	189b      	adds	r3, r3, r2
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	18cb      	adds	r3, r1, r3
 800f0ac:	3340      	adds	r3, #64	@ 0x40
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f0b2:	183b      	adds	r3, r7, r0
 800f0b4:	781a      	ldrb	r2, [r3, #0]
 800f0b6:	183b      	adds	r3, r7, r0
 800f0b8:	3201      	adds	r2, #1
 800f0ba:	701a      	strb	r2, [r3, #0]
 800f0bc:	210f      	movs	r1, #15
 800f0be:	187b      	adds	r3, r7, r1
 800f0c0:	781a      	ldrb	r2, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d3ae      	bcc.n	800f028 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f0ca:	187b      	adds	r3, r7, r1
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	701a      	strb	r2, [r3, #0]
 800f0d0:	e056      	b.n	800f180 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f0d2:	240f      	movs	r4, #15
 800f0d4:	193b      	adds	r3, r7, r4
 800f0d6:	781a      	ldrb	r2, [r3, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	236a      	movs	r3, #106	@ 0x6a
 800f0dc:	33ff      	adds	r3, #255	@ 0xff
 800f0de:	0019      	movs	r1, r3
 800f0e0:	0013      	movs	r3, r2
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	189b      	adds	r3, r3, r2
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	18c3      	adds	r3, r0, r3
 800f0ea:	185b      	adds	r3, r3, r1
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f0f0:	193b      	adds	r3, r7, r4
 800f0f2:	781a      	ldrb	r2, [r3, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	23b4      	movs	r3, #180	@ 0xb4
 800f0f8:	0059      	lsls	r1, r3, #1
 800f0fa:	0013      	movs	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	189b      	adds	r3, r3, r2
 800f100:	00db      	lsls	r3, r3, #3
 800f102:	18c3      	adds	r3, r0, r3
 800f104:	185b      	adds	r3, r3, r1
 800f106:	193a      	adds	r2, r7, r4
 800f108:	7812      	ldrb	r2, [r2, #0]
 800f10a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f10c:	193b      	adds	r3, r7, r4
 800f10e:	781a      	ldrb	r2, [r3, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	236c      	movs	r3, #108	@ 0x6c
 800f114:	33ff      	adds	r3, #255	@ 0xff
 800f116:	0019      	movs	r1, r3
 800f118:	0013      	movs	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	189b      	adds	r3, r3, r2
 800f11e:	00db      	lsls	r3, r3, #3
 800f120:	18c3      	adds	r3, r0, r3
 800f122:	185b      	adds	r3, r3, r1
 800f124:	2200      	movs	r2, #0
 800f126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f128:	193b      	adds	r3, r7, r4
 800f12a:	781a      	ldrb	r2, [r3, #0]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	23bc      	movs	r3, #188	@ 0xbc
 800f130:	0059      	lsls	r1, r3, #1
 800f132:	0013      	movs	r3, r2
 800f134:	009b      	lsls	r3, r3, #2
 800f136:	189b      	adds	r3, r3, r2
 800f138:	00db      	lsls	r3, r3, #3
 800f13a:	18c3      	adds	r3, r0, r3
 800f13c:	185b      	adds	r3, r3, r1
 800f13e:	2200      	movs	r2, #0
 800f140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f142:	193b      	adds	r3, r7, r4
 800f144:	781a      	ldrb	r2, [r3, #0]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	23be      	movs	r3, #190	@ 0xbe
 800f14a:	0059      	lsls	r1, r3, #1
 800f14c:	0013      	movs	r3, r2
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	189b      	adds	r3, r3, r2
 800f152:	00db      	lsls	r3, r3, #3
 800f154:	18c3      	adds	r3, r0, r3
 800f156:	185b      	adds	r3, r3, r1
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f15c:	193b      	adds	r3, r7, r4
 800f15e:	781a      	ldrb	r2, [r3, #0]
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	23c0      	movs	r3, #192	@ 0xc0
 800f164:	0059      	lsls	r1, r3, #1
 800f166:	0013      	movs	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	189b      	adds	r3, r3, r2
 800f16c:	00db      	lsls	r3, r3, #3
 800f16e:	18c3      	adds	r3, r0, r3
 800f170:	185b      	adds	r3, r3, r1
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f176:	193b      	adds	r3, r7, r4
 800f178:	781a      	ldrb	r2, [r3, #0]
 800f17a:	193b      	adds	r3, r7, r4
 800f17c:	3201      	adds	r2, #1
 800f17e:	701a      	strb	r2, [r3, #0]
 800f180:	230f      	movs	r3, #15
 800f182:	18fb      	adds	r3, r7, r3
 800f184:	781a      	ldrb	r2, [r3, #0]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d3a1      	bcc.n	800f0d2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6818      	ldr	r0, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	466a      	mov	r2, sp
 800f196:	0011      	movs	r1, r2
 800f198:	001a      	movs	r2, r3
 800f19a:	3210      	adds	r2, #16
 800f19c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800f19e:	c170      	stmia	r1!, {r4, r5, r6}
 800f1a0:	ca30      	ldmia	r2!, {r4, r5}
 800f1a2:	c130      	stmia	r1!, {r4, r5}
 800f1a4:	6859      	ldr	r1, [r3, #4]
 800f1a6:	689a      	ldr	r2, [r3, #8]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	f005 f88d 	bl	80142c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2224      	movs	r2, #36	@ 0x24
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a07      	ldr	r2, [pc, #28]	@ (800f1d8 <HAL_PCD_Init+0x1fc>)
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d103      	bne.n	800f1ce <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	0018      	movs	r0, r3
 800f1ca:	f001 fd23 	bl	8010c14 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	0018      	movs	r0, r3
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	b005      	add	sp, #20
 800f1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1d8:	000002a9 	.word	0x000002a9

0800f1dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	23aa      	movs	r3, #170	@ 0xaa
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	5cd3      	ldrb	r3, [r2, r3]
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d101      	bne.n	800f1f4 <HAL_PCD_Start+0x18>
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	e014      	b.n	800f21e <HAL_PCD_Start+0x42>
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	23aa      	movs	r3, #170	@ 0xaa
 800f1f8:	009b      	lsls	r3, r3, #2
 800f1fa:	2101      	movs	r1, #1
 800f1fc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	0018      	movs	r0, r3
 800f204:	f005 f830 	bl	8014268 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	0018      	movs	r0, r3
 800f20e:	f007 f833 	bl	8016278 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	23aa      	movs	r3, #170	@ 0xaa
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	2100      	movs	r1, #0
 800f21a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	0018      	movs	r0, r3
 800f220:	46bd      	mov	sp, r7
 800f222:	b002      	add	sp, #8
 800f224:	bd80      	pop	{r7, pc}
	...

0800f228 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	0018      	movs	r0, r3
 800f236:	f007 f835 	bl	80162a4 <USB_ReadInterrupts>
 800f23a:	0003      	movs	r3, r0
 800f23c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	2380      	movs	r3, #128	@ 0x80
 800f242:	021b      	lsls	r3, r3, #8
 800f244:	4013      	ands	r3, r2
 800f246:	d004      	beq.n	800f252 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	0018      	movs	r0, r3
 800f24c:	f000 fb62 	bl	800f914 <PCD_EP_ISR_Handler>

    return;
 800f250:	e11d      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	2380      	movs	r3, #128	@ 0x80
 800f256:	00db      	lsls	r3, r3, #3
 800f258:	4013      	ands	r3, r2
 800f25a:	d015      	beq.n	800f288 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2244      	movs	r2, #68	@ 0x44
 800f262:	5a9b      	ldrh	r3, [r3, r2]
 800f264:	b29a      	uxth	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	498a      	ldr	r1, [pc, #552]	@ (800f494 <HAL_PCD_IRQHandler+0x26c>)
 800f26c:	400a      	ands	r2, r1
 800f26e:	b291      	uxth	r1, r2
 800f270:	2244      	movs	r2, #68	@ 0x44
 800f272:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	0018      	movs	r0, r3
 800f278:	f009 f8d3 	bl	8018422 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2100      	movs	r1, #0
 800f280:	0018      	movs	r0, r3
 800f282:	f000 f915 	bl	800f4b0 <HAL_PCD_SetAddress>

    return;
 800f286:	e102      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	2380      	movs	r3, #128	@ 0x80
 800f28c:	01db      	lsls	r3, r3, #7
 800f28e:	4013      	ands	r3, r2
 800f290:	d00c      	beq.n	800f2ac <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2244      	movs	r2, #68	@ 0x44
 800f298:	5a9b      	ldrh	r3, [r3, r2]
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	497d      	ldr	r1, [pc, #500]	@ (800f498 <HAL_PCD_IRQHandler+0x270>)
 800f2a2:	400a      	ands	r2, r1
 800f2a4:	b291      	uxth	r1, r2
 800f2a6:	2244      	movs	r2, #68	@ 0x44
 800f2a8:	5299      	strh	r1, [r3, r2]

    return;
 800f2aa:	e0f0      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800f2ac:	68fa      	ldr	r2, [r7, #12]
 800f2ae:	2380      	movs	r3, #128	@ 0x80
 800f2b0:	019b      	lsls	r3, r3, #6
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	d00c      	beq.n	800f2d0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2244      	movs	r2, #68	@ 0x44
 800f2bc:	5a9b      	ldrh	r3, [r3, r2]
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4975      	ldr	r1, [pc, #468]	@ (800f49c <HAL_PCD_IRQHandler+0x274>)
 800f2c6:	400a      	ands	r2, r1
 800f2c8:	b291      	uxth	r1, r2
 800f2ca:	2244      	movs	r2, #68	@ 0x44
 800f2cc:	5299      	strh	r1, [r3, r2]

    return;
 800f2ce:	e0de      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800f2d0:	68fa      	ldr	r2, [r7, #12]
 800f2d2:	2380      	movs	r3, #128	@ 0x80
 800f2d4:	015b      	lsls	r3, r3, #5
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	d038      	beq.n	800f34c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2240      	movs	r2, #64	@ 0x40
 800f2e0:	5a9b      	ldrh	r3, [r3, r2]
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2104      	movs	r1, #4
 800f2ea:	438a      	bics	r2, r1
 800f2ec:	b291      	uxth	r1, r2
 800f2ee:	2240      	movs	r2, #64	@ 0x40
 800f2f0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	2240      	movs	r2, #64	@ 0x40
 800f2f8:	5a9b      	ldrh	r3, [r3, r2]
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2108      	movs	r1, #8
 800f302:	438a      	bics	r2, r1
 800f304:	b291      	uxth	r1, r2
 800f306:	2240      	movs	r2, #64	@ 0x40
 800f308:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	23b8      	movs	r3, #184	@ 0xb8
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	5cd3      	ldrb	r3, [r2, r3]
 800f312:	2b01      	cmp	r3, #1
 800f314:	d109      	bne.n	800f32a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	23b8      	movs	r3, #184	@ 0xb8
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	2100      	movs	r1, #0
 800f31e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2100      	movs	r1, #0
 800f324:	0018      	movs	r0, r3
 800f326:	f001 fc9f 	bl	8010c68 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	0018      	movs	r0, r3
 800f32e:	f009 f8b9 	bl	80184a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2244      	movs	r2, #68	@ 0x44
 800f338:	5a9b      	ldrh	r3, [r3, r2]
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4957      	ldr	r1, [pc, #348]	@ (800f4a0 <HAL_PCD_IRQHandler+0x278>)
 800f342:	400a      	ands	r2, r1
 800f344:	b291      	uxth	r1, r2
 800f346:	2244      	movs	r2, #68	@ 0x44
 800f348:	5299      	strh	r1, [r3, r2]

    return;
 800f34a:	e0a0      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	2380      	movs	r3, #128	@ 0x80
 800f350:	011b      	lsls	r3, r3, #4
 800f352:	4013      	ands	r3, r2
 800f354:	d028      	beq.n	800f3a8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2240      	movs	r2, #64	@ 0x40
 800f35c:	5a9b      	ldrh	r3, [r3, r2]
 800f35e:	b29a      	uxth	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2108      	movs	r1, #8
 800f366:	430a      	orrs	r2, r1
 800f368:	b291      	uxth	r1, r2
 800f36a:	2240      	movs	r2, #64	@ 0x40
 800f36c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2244      	movs	r2, #68	@ 0x44
 800f374:	5a9b      	ldrh	r3, [r3, r2]
 800f376:	b29a      	uxth	r2, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4949      	ldr	r1, [pc, #292]	@ (800f4a4 <HAL_PCD_IRQHandler+0x27c>)
 800f37e:	400a      	ands	r2, r1
 800f380:	b291      	uxth	r1, r2
 800f382:	2244      	movs	r2, #68	@ 0x44
 800f384:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2240      	movs	r2, #64	@ 0x40
 800f38c:	5a9b      	ldrh	r3, [r3, r2]
 800f38e:	b29a      	uxth	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2104      	movs	r1, #4
 800f396:	430a      	orrs	r2, r1
 800f398:	b291      	uxth	r1, r2
 800f39a:	2240      	movs	r2, #64	@ 0x40
 800f39c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	0018      	movs	r0, r3
 800f3a2:	f009 f863 	bl	801846c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800f3a6:	e072      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2280      	movs	r2, #128	@ 0x80
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	d046      	beq.n	800f43e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2244      	movs	r2, #68	@ 0x44
 800f3b6:	5a9b      	ldrh	r3, [r3, r2]
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2180      	movs	r1, #128	@ 0x80
 800f3c0:	438a      	bics	r2, r1
 800f3c2:	b291      	uxth	r1, r2
 800f3c4:	2244      	movs	r2, #68	@ 0x44
 800f3c6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	23b8      	movs	r3, #184	@ 0xb8
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	5cd3      	ldrb	r3, [r2, r3]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d12f      	bne.n	800f434 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2240      	movs	r2, #64	@ 0x40
 800f3da:	5a9b      	ldrh	r3, [r3, r2]
 800f3dc:	b29a      	uxth	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2104      	movs	r1, #4
 800f3e4:	430a      	orrs	r2, r1
 800f3e6:	b291      	uxth	r1, r2
 800f3e8:	2240      	movs	r2, #64	@ 0x40
 800f3ea:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2240      	movs	r2, #64	@ 0x40
 800f3f2:	5a9b      	ldrh	r3, [r3, r2]
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2108      	movs	r1, #8
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	b291      	uxth	r1, r2
 800f400:	2240      	movs	r2, #64	@ 0x40
 800f402:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	23b8      	movs	r3, #184	@ 0xb8
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	2101      	movs	r1, #1
 800f40c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2254      	movs	r2, #84	@ 0x54
 800f414:	5a9b      	ldrh	r3, [r3, r2]
 800f416:	b29b      	uxth	r3, r3
 800f418:	089b      	lsrs	r3, r3, #2
 800f41a:	223c      	movs	r2, #60	@ 0x3c
 800f41c:	4013      	ands	r3, r2
 800f41e:	0019      	movs	r1, r3
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	23b9      	movs	r3, #185	@ 0xb9
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2101      	movs	r1, #1
 800f42c:	0018      	movs	r0, r3
 800f42e:	f001 fc1b 	bl	8010c68 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800f432:	e02c      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	0018      	movs	r0, r3
 800f438:	f009 f818 	bl	801846c <HAL_PCD_SuspendCallback>
    return;
 800f43c:	e027      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800f43e:	68fa      	ldr	r2, [r7, #12]
 800f440:	2380      	movs	r3, #128	@ 0x80
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4013      	ands	r3, r2
 800f446:	d010      	beq.n	800f46a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2244      	movs	r2, #68	@ 0x44
 800f44e:	5a9b      	ldrh	r3, [r3, r2]
 800f450:	b29a      	uxth	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4914      	ldr	r1, [pc, #80]	@ (800f4a8 <HAL_PCD_IRQHandler+0x280>)
 800f458:	400a      	ands	r2, r1
 800f45a:	b291      	uxth	r1, r2
 800f45c:	2244      	movs	r2, #68	@ 0x44
 800f45e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	0018      	movs	r0, r3
 800f464:	f008 ffce 	bl	8018404 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800f468:	e011      	b.n	800f48e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	2380      	movs	r3, #128	@ 0x80
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	4013      	ands	r3, r2
 800f472:	d00c      	beq.n	800f48e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2244      	movs	r2, #68	@ 0x44
 800f47a:	5a9b      	ldrh	r3, [r3, r2]
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	490a      	ldr	r1, [pc, #40]	@ (800f4ac <HAL_PCD_IRQHandler+0x284>)
 800f484:	400a      	ands	r2, r1
 800f486:	b291      	uxth	r1, r2
 800f488:	2244      	movs	r2, #68	@ 0x44
 800f48a:	5299      	strh	r1, [r3, r2]

    return;
 800f48c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800f48e:	46bd      	mov	sp, r7
 800f490:	b004      	add	sp, #16
 800f492:	bd80      	pop	{r7, pc}
 800f494:	fffffbff 	.word	0xfffffbff
 800f498:	ffffbfff 	.word	0xffffbfff
 800f49c:	ffffdfff 	.word	0xffffdfff
 800f4a0:	ffffefff 	.word	0xffffefff
 800f4a4:	fffff7ff 	.word	0xfffff7ff
 800f4a8:	fffffdff 	.word	0xfffffdff
 800f4ac:	fffffeff 	.word	0xfffffeff

0800f4b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	000a      	movs	r2, r1
 800f4ba:	1cfb      	adds	r3, r7, #3
 800f4bc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	23aa      	movs	r3, #170	@ 0xaa
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	5cd3      	ldrb	r3, [r2, r3]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d101      	bne.n	800f4ce <HAL_PCD_SetAddress+0x1e>
 800f4ca:	2302      	movs	r3, #2
 800f4cc:	e017      	b.n	800f4fe <HAL_PCD_SetAddress+0x4e>
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	23aa      	movs	r3, #170	@ 0xaa
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	2101      	movs	r1, #1
 800f4d6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	1cfa      	adds	r2, r7, #3
 800f4dc:	2124      	movs	r1, #36	@ 0x24
 800f4de:	7812      	ldrb	r2, [r2, #0]
 800f4e0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	1cfb      	adds	r3, r7, #3
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	0019      	movs	r1, r3
 800f4ec:	0010      	movs	r0, r2
 800f4ee:	f006 feaf 	bl	8016250 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	23aa      	movs	r3, #170	@ 0xaa
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	0018      	movs	r0, r3
 800f500:	46bd      	mov	sp, r7
 800f502:	b002      	add	sp, #8
 800f504:	bd80      	pop	{r7, pc}

0800f506 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f506:	b590      	push	{r4, r7, lr}
 800f508:	b085      	sub	sp, #20
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
 800f50e:	000c      	movs	r4, r1
 800f510:	0010      	movs	r0, r2
 800f512:	0019      	movs	r1, r3
 800f514:	1cfb      	adds	r3, r7, #3
 800f516:	1c22      	adds	r2, r4, #0
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	003b      	movs	r3, r7
 800f51c:	1c02      	adds	r2, r0, #0
 800f51e:	801a      	strh	r2, [r3, #0]
 800f520:	1cbb      	adds	r3, r7, #2
 800f522:	1c0a      	adds	r2, r1, #0
 800f524:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f526:	230b      	movs	r3, #11
 800f528:	18fb      	adds	r3, r7, r3
 800f52a:	2200      	movs	r2, #0
 800f52c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f52e:	1cfb      	adds	r3, r7, #3
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	b25b      	sxtb	r3, r3
 800f534:	2b00      	cmp	r3, #0
 800f536:	da0f      	bge.n	800f558 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f538:	1cfb      	adds	r3, r7, #3
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	2207      	movs	r2, #7
 800f53e:	4013      	ands	r3, r2
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	0013      	movs	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	189b      	adds	r3, r3, r2
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	18d3      	adds	r3, r2, r3
 800f54e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2201      	movs	r2, #1
 800f554:	705a      	strb	r2, [r3, #1]
 800f556:	e00f      	b.n	800f578 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f558:	1cfb      	adds	r3, r7, #3
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	2207      	movs	r2, #7
 800f55e:	401a      	ands	r2, r3
 800f560:	0013      	movs	r3, r2
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	189b      	adds	r3, r3, r2
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	3369      	adds	r3, #105	@ 0x69
 800f56a:	33ff      	adds	r3, #255	@ 0xff
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	18d3      	adds	r3, r2, r3
 800f570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2200      	movs	r2, #0
 800f576:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f578:	1cfb      	adds	r3, r7, #3
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2207      	movs	r2, #7
 800f57e:	4013      	ands	r3, r2
 800f580:	b2da      	uxtb	r2, r3
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f586:	003b      	movs	r3, r7
 800f588:	881a      	ldrh	r2, [r3, #0]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	1cba      	adds	r2, r7, #2
 800f592:	7812      	ldrb	r2, [r2, #0]
 800f594:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f596:	1cbb      	adds	r3, r7, #2
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	2b02      	cmp	r3, #2
 800f59c:	d102      	bne.n	800f5a4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	23aa      	movs	r3, #170	@ 0xaa
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	5cd3      	ldrb	r3, [r2, r3]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d101      	bne.n	800f5b4 <HAL_PCD_EP_Open+0xae>
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	e013      	b.n	800f5dc <HAL_PCD_EP_Open+0xd6>
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	23aa      	movs	r3, #170	@ 0xaa
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	0011      	movs	r1, r2
 800f5c6:	0018      	movs	r0, r3
 800f5c8:	f004 fea6 	bl	8014318 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	23aa      	movs	r3, #170	@ 0xaa
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	54d1      	strb	r1, [r2, r3]

  return ret;
 800f5d6:	230b      	movs	r3, #11
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	781b      	ldrb	r3, [r3, #0]
}
 800f5dc:	0018      	movs	r0, r3
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	b005      	add	sp, #20
 800f5e2:	bd90      	pop	{r4, r7, pc}

0800f5e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	000a      	movs	r2, r1
 800f5ee:	1cfb      	adds	r3, r7, #3
 800f5f0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f5f2:	1cfb      	adds	r3, r7, #3
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	b25b      	sxtb	r3, r3
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	da0f      	bge.n	800f61c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f5fc:	1cfb      	adds	r3, r7, #3
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2207      	movs	r2, #7
 800f602:	4013      	ands	r3, r2
 800f604:	1c5a      	adds	r2, r3, #1
 800f606:	0013      	movs	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	189b      	adds	r3, r3, r2
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	18d3      	adds	r3, r2, r3
 800f612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2201      	movs	r2, #1
 800f618:	705a      	strb	r2, [r3, #1]
 800f61a:	e00f      	b.n	800f63c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f61c:	1cfb      	adds	r3, r7, #3
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	2207      	movs	r2, #7
 800f622:	401a      	ands	r2, r3
 800f624:	0013      	movs	r3, r2
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	189b      	adds	r3, r3, r2
 800f62a:	00db      	lsls	r3, r3, #3
 800f62c:	3369      	adds	r3, #105	@ 0x69
 800f62e:	33ff      	adds	r3, #255	@ 0xff
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	18d3      	adds	r3, r2, r3
 800f634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800f63c:	1cfb      	adds	r3, r7, #3
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	2207      	movs	r2, #7
 800f642:	4013      	ands	r3, r2
 800f644:	b2da      	uxtb	r2, r3
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	23aa      	movs	r3, #170	@ 0xaa
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	5cd3      	ldrb	r3, [r2, r3]
 800f652:	2b01      	cmp	r3, #1
 800f654:	d101      	bne.n	800f65a <HAL_PCD_EP_Close+0x76>
 800f656:	2302      	movs	r3, #2
 800f658:	e011      	b.n	800f67e <HAL_PCD_EP_Close+0x9a>
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	23aa      	movs	r3, #170	@ 0xaa
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	2101      	movs	r1, #1
 800f662:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	0011      	movs	r1, r2
 800f66c:	0018      	movs	r0, r3
 800f66e:	f005 f9f5 	bl	8014a5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	23aa      	movs	r3, #170	@ 0xaa
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	2100      	movs	r1, #0
 800f67a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	0018      	movs	r0, r3
 800f680:	46bd      	mov	sp, r7
 800f682:	b004      	add	sp, #16
 800f684:	bd80      	pop	{r7, pc}

0800f686 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b086      	sub	sp, #24
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	60f8      	str	r0, [r7, #12]
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]
 800f692:	200b      	movs	r0, #11
 800f694:	183b      	adds	r3, r7, r0
 800f696:	1c0a      	adds	r2, r1, #0
 800f698:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f69a:	0001      	movs	r1, r0
 800f69c:	187b      	adds	r3, r7, r1
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	2207      	movs	r2, #7
 800f6a2:	401a      	ands	r2, r3
 800f6a4:	0013      	movs	r3, r2
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	189b      	adds	r3, r3, r2
 800f6aa:	00db      	lsls	r3, r3, #3
 800f6ac:	3369      	adds	r3, #105	@ 0x69
 800f6ae:	33ff      	adds	r3, #255	@ 0xff
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	18d3      	adds	r3, r2, r3
 800f6b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	683a      	ldr	r2, [r7, #0]
 800f6c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f6ce:	187b      	adds	r3, r7, r1
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2207      	movs	r2, #7
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	697a      	ldr	r2, [r7, #20]
 800f6e2:	0011      	movs	r1, r2
 800f6e4:	0018      	movs	r0, r3
 800f6e6:	f005 fb79 	bl	8014ddc <USB_EPStartXfer>

  return HAL_OK;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	0018      	movs	r0, r3
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	b006      	add	sp, #24
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	000a      	movs	r2, r1
 800f6fe:	1cfb      	adds	r3, r7, #3
 800f700:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f702:	1cfb      	adds	r3, r7, #3
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2207      	movs	r2, #7
 800f708:	401a      	ands	r2, r3
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	23c2      	movs	r3, #194	@ 0xc2
 800f70e:	0059      	lsls	r1, r3, #1
 800f710:	0013      	movs	r3, r2
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	189b      	adds	r3, r3, r2
 800f716:	00db      	lsls	r3, r3, #3
 800f718:	18c3      	adds	r3, r0, r3
 800f71a:	185b      	adds	r3, r3, r1
 800f71c:	681b      	ldr	r3, [r3, #0]
}
 800f71e:	0018      	movs	r0, r3
 800f720:	46bd      	mov	sp, r7
 800f722:	b002      	add	sp, #8
 800f724:	bd80      	pop	{r7, pc}

0800f726 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b086      	sub	sp, #24
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	60f8      	str	r0, [r7, #12]
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	603b      	str	r3, [r7, #0]
 800f732:	200b      	movs	r0, #11
 800f734:	183b      	adds	r3, r7, r0
 800f736:	1c0a      	adds	r2, r1, #0
 800f738:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f73a:	183b      	adds	r3, r7, r0
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	2207      	movs	r2, #7
 800f740:	4013      	ands	r3, r2
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	0013      	movs	r3, r2
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	189b      	adds	r3, r3, r2
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	68fa      	ldr	r2, [r7, #12]
 800f74e:	18d3      	adds	r3, r2, r3
 800f750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2224      	movs	r2, #36	@ 0x24
 800f762:	2101      	movs	r1, #1
 800f764:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	2200      	movs	r2, #0
 800f770:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	2201      	movs	r2, #1
 800f776:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f778:	183b      	adds	r3, r7, r0
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	2207      	movs	r2, #7
 800f77e:	4013      	ands	r3, r2
 800f780:	b2da      	uxtb	r2, r3
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	0011      	movs	r1, r2
 800f78e:	0018      	movs	r0, r3
 800f790:	f005 fb24 	bl	8014ddc <USB_EPStartXfer>

  return HAL_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	0018      	movs	r0, r3
 800f798:	46bd      	mov	sp, r7
 800f79a:	b006      	add	sp, #24
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b084      	sub	sp, #16
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
 800f7a6:	000a      	movs	r2, r1
 800f7a8:	1cfb      	adds	r3, r7, #3
 800f7aa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800f7ac:	1cfb      	adds	r3, r7, #3
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	2207      	movs	r2, #7
 800f7b2:	401a      	ands	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d901      	bls.n	800f7c0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e046      	b.n	800f84e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f7c0:	1cfb      	adds	r3, r7, #3
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	b25b      	sxtb	r3, r3
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	da0f      	bge.n	800f7ea <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f7ca:	1cfb      	adds	r3, r7, #3
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	2207      	movs	r2, #7
 800f7d0:	4013      	ands	r3, r2
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	0013      	movs	r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	189b      	adds	r3, r3, r2
 800f7da:	00db      	lsls	r3, r3, #3
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	18d3      	adds	r3, r2, r3
 800f7e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	705a      	strb	r2, [r3, #1]
 800f7e8:	e00d      	b.n	800f806 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f7ea:	1cfb      	adds	r3, r7, #3
 800f7ec:	781a      	ldrb	r2, [r3, #0]
 800f7ee:	0013      	movs	r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	189b      	adds	r3, r3, r2
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	3369      	adds	r3, #105	@ 0x69
 800f7f8:	33ff      	adds	r3, #255	@ 0xff
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	18d3      	adds	r3, r2, r3
 800f7fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2200      	movs	r2, #0
 800f804:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2201      	movs	r2, #1
 800f80a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f80c:	1cfb      	adds	r3, r7, #3
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2207      	movs	r2, #7
 800f812:	4013      	ands	r3, r2
 800f814:	b2da      	uxtb	r2, r3
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	23aa      	movs	r3, #170	@ 0xaa
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	5cd3      	ldrb	r3, [r2, r3]
 800f822:	2b01      	cmp	r3, #1
 800f824:	d101      	bne.n	800f82a <HAL_PCD_EP_SetStall+0x8c>
 800f826:	2302      	movs	r3, #2
 800f828:	e011      	b.n	800f84e <HAL_PCD_EP_SetStall+0xb0>
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	23aa      	movs	r3, #170	@ 0xaa
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	2101      	movs	r1, #1
 800f832:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	0011      	movs	r1, r2
 800f83c:	0018      	movs	r0, r3
 800f83e:	f006 fc05 	bl	801604c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	23aa      	movs	r3, #170	@ 0xaa
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	2100      	movs	r1, #0
 800f84a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	0018      	movs	r0, r3
 800f850:	46bd      	mov	sp, r7
 800f852:	b004      	add	sp, #16
 800f854:	bd80      	pop	{r7, pc}

0800f856 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b084      	sub	sp, #16
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	000a      	movs	r2, r1
 800f860:	1cfb      	adds	r3, r7, #3
 800f862:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f864:	1cfb      	adds	r3, r7, #3
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	220f      	movs	r2, #15
 800f86a:	401a      	ands	r2, r3
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	429a      	cmp	r2, r3
 800f872:	d901      	bls.n	800f878 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800f874:	2301      	movs	r3, #1
 800f876:	e048      	b.n	800f90a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f878:	1cfb      	adds	r3, r7, #3
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	b25b      	sxtb	r3, r3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	da0f      	bge.n	800f8a2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f882:	1cfb      	adds	r3, r7, #3
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	2207      	movs	r2, #7
 800f888:	4013      	ands	r3, r2
 800f88a:	1c5a      	adds	r2, r3, #1
 800f88c:	0013      	movs	r3, r2
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	189b      	adds	r3, r3, r2
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	18d3      	adds	r3, r2, r3
 800f898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2201      	movs	r2, #1
 800f89e:	705a      	strb	r2, [r3, #1]
 800f8a0:	e00f      	b.n	800f8c2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f8a2:	1cfb      	adds	r3, r7, #3
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	2207      	movs	r2, #7
 800f8a8:	401a      	ands	r2, r3
 800f8aa:	0013      	movs	r3, r2
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	189b      	adds	r3, r3, r2
 800f8b0:	00db      	lsls	r3, r3, #3
 800f8b2:	3369      	adds	r3, #105	@ 0x69
 800f8b4:	33ff      	adds	r3, #255	@ 0xff
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	18d3      	adds	r3, r2, r3
 800f8ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f8c8:	1cfb      	adds	r3, r7, #3
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	2207      	movs	r2, #7
 800f8ce:	4013      	ands	r3, r2
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	23aa      	movs	r3, #170	@ 0xaa
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	5cd3      	ldrb	r3, [r2, r3]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d101      	bne.n	800f8e6 <HAL_PCD_EP_ClrStall+0x90>
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	e011      	b.n	800f90a <HAL_PCD_EP_ClrStall+0xb4>
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	23aa      	movs	r3, #170	@ 0xaa
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	2101      	movs	r1, #1
 800f8ee:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	0011      	movs	r1, r2
 800f8f8:	0018      	movs	r0, r3
 800f8fa:	f006 fbf7 	bl	80160ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	23aa      	movs	r3, #170	@ 0xaa
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	2100      	movs	r1, #0
 800f906:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	0018      	movs	r0, r3
 800f90c:	46bd      	mov	sp, r7
 800f90e:	b004      	add	sp, #16
 800f910:	bd80      	pop	{r7, pc}
	...

0800f914 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800f914:	b5b0      	push	{r4, r5, r7, lr}
 800f916:	b096      	sub	sp, #88	@ 0x58
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f91c:	f000 fbec 	bl	80100f8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	204e      	movs	r0, #78	@ 0x4e
 800f926:	183b      	adds	r3, r7, r0
 800f928:	2144      	movs	r1, #68	@ 0x44
 800f92a:	5a52      	ldrh	r2, [r2, r1]
 800f92c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800f92e:	183b      	adds	r3, r7, r0
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	b2da      	uxtb	r2, r3
 800f934:	244d      	movs	r4, #77	@ 0x4d
 800f936:	193b      	adds	r3, r7, r4
 800f938:	210f      	movs	r1, #15
 800f93a:	400a      	ands	r2, r1
 800f93c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800f93e:	193b      	adds	r3, r7, r4
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d000      	beq.n	800f948 <PCD_EP_ISR_Handler+0x34>
 800f946:	e18f      	b.n	800fc68 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800f948:	183b      	adds	r3, r7, r0
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	2210      	movs	r2, #16
 800f94e:	4013      	ands	r3, r2
 800f950:	d155      	bne.n	800f9fe <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	b29a      	uxth	r2, r3
 800f95a:	200e      	movs	r0, #14
 800f95c:	183b      	adds	r3, r7, r0
 800f95e:	49bb      	ldr	r1, [pc, #748]	@ (800fc4c <PCD_EP_ISR_Handler+0x338>)
 800f960:	400a      	ands	r2, r1
 800f962:	801a      	strh	r2, [r3, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	183a      	adds	r2, r7, r0
 800f96a:	8812      	ldrh	r2, [r2, #0]
 800f96c:	49b8      	ldr	r1, [pc, #736]	@ (800fc50 <PCD_EP_ISR_Handler+0x33c>)
 800f96e:	430a      	orrs	r2, r1
 800f970:	b292      	uxth	r2, r2
 800f972:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	3328      	adds	r3, #40	@ 0x28
 800f978:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2250      	movs	r2, #80	@ 0x50
 800f980:	5a9b      	ldrh	r3, [r3, r2]
 800f982:	b29b      	uxth	r3, r3
 800f984:	001a      	movs	r2, r3
 800f986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	00db      	lsls	r3, r3, #3
 800f98c:	18d2      	adds	r2, r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	18d3      	adds	r3, r2, r3
 800f994:	4aaf      	ldr	r2, [pc, #700]	@ (800fc54 <PCD_EP_ISR_Handler+0x340>)
 800f996:	4694      	mov	ip, r2
 800f998:	4463      	add	r3, ip
 800f99a:	881b      	ldrh	r3, [r3, #0]
 800f99c:	059b      	lsls	r3, r3, #22
 800f99e:	0d9a      	lsrs	r2, r3, #22
 800f9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800f9a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9a6:	695a      	ldr	r2, [r3, #20]
 800f9a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9aa:	69db      	ldr	r3, [r3, #28]
 800f9ac:	18d2      	adds	r2, r2, r3
 800f9ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	0018      	movs	r0, r3
 800f9b8:	f008 fd06 	bl	80183c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2224      	movs	r2, #36	@ 0x24
 800f9c0:	5c9b      	ldrb	r3, [r3, r2]
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d101      	bne.n	800f9cc <PCD_EP_ISR_Handler+0xb8>
 800f9c8:	f000 fb96 	bl	80100f8 <PCD_EP_ISR_Handler+0x7e4>
 800f9cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9ce:	699b      	ldr	r3, [r3, #24]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <PCD_EP_ISR_Handler+0xc4>
 800f9d4:	f000 fb90 	bl	80100f8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2224      	movs	r2, #36	@ 0x24
 800f9dc:	5c9b      	ldrb	r3, [r3, r2]
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2280      	movs	r2, #128	@ 0x80
 800f9e2:	4252      	negs	r2, r2
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	b2da      	uxtb	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	0011      	movs	r1, r2
 800f9ee:	224c      	movs	r2, #76	@ 0x4c
 800f9f0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2224      	movs	r2, #36	@ 0x24
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	5499      	strb	r1, [r3, r2]
 800f9fa:	f000 fb7d 	bl	80100f8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3369      	adds	r3, #105	@ 0x69
 800fa02:	33ff      	adds	r3, #255	@ 0xff
 800fa04:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	214a      	movs	r1, #74	@ 0x4a
 800fa0c:	187b      	adds	r3, r7, r1
 800fa0e:	8812      	ldrh	r2, [r2, #0]
 800fa10:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800fa12:	187b      	adds	r3, r7, r1
 800fa14:	881a      	ldrh	r2, [r3, #0]
 800fa16:	2380      	movs	r3, #128	@ 0x80
 800fa18:	011b      	lsls	r3, r3, #4
 800fa1a:	4013      	ands	r3, r2
 800fa1c:	d037      	beq.n	800fa8e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2250      	movs	r2, #80	@ 0x50
 800fa24:	5a9b      	ldrh	r3, [r3, r2]
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	001a      	movs	r2, r3
 800fa2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	00db      	lsls	r3, r3, #3
 800fa30:	18d2      	adds	r2, r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	18d3      	adds	r3, r2, r3
 800fa38:	4a87      	ldr	r2, [pc, #540]	@ (800fc58 <PCD_EP_ISR_Handler+0x344>)
 800fa3a:	4694      	mov	ip, r2
 800fa3c:	4463      	add	r3, ip
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	059b      	lsls	r3, r3, #22
 800fa42:	0d9a      	lsrs	r2, r3, #22
 800fa44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6818      	ldr	r0, [r3, #0]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	22ac      	movs	r2, #172	@ 0xac
 800fa50:	0092      	lsls	r2, r2, #2
 800fa52:	1899      	adds	r1, r3, r2
 800fa54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa56:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800fa58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa5a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	f006 fc78 	bl	8016352 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	881b      	ldrh	r3, [r3, #0]
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	2010      	movs	r0, #16
 800fa6c:	183b      	adds	r3, r7, r0
 800fa6e:	497b      	ldr	r1, [pc, #492]	@ (800fc5c <PCD_EP_ISR_Handler+0x348>)
 800fa70:	400a      	ands	r2, r1
 800fa72:	801a      	strh	r2, [r3, #0]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	183a      	adds	r2, r7, r0
 800fa7a:	8812      	ldrh	r2, [r2, #0]
 800fa7c:	2180      	movs	r1, #128	@ 0x80
 800fa7e:	430a      	orrs	r2, r1
 800fa80:	b292      	uxth	r2, r2
 800fa82:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	0018      	movs	r0, r3
 800fa88:	f008 fc68 	bl	801835c <HAL_PCD_SetupStageCallback>
 800fa8c:	e334      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800fa8e:	234a      	movs	r3, #74	@ 0x4a
 800fa90:	18fb      	adds	r3, r7, r3
 800fa92:	2200      	movs	r2, #0
 800fa94:	5e9b      	ldrsh	r3, [r3, r2]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	db00      	blt.n	800fa9c <PCD_EP_ISR_Handler+0x188>
 800fa9a:	e32d      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	201e      	movs	r0, #30
 800faa6:	183b      	adds	r3, r7, r0
 800faa8:	496c      	ldr	r1, [pc, #432]	@ (800fc5c <PCD_EP_ISR_Handler+0x348>)
 800faaa:	400a      	ands	r2, r1
 800faac:	801a      	strh	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	183a      	adds	r2, r7, r0
 800fab4:	8812      	ldrh	r2, [r2, #0]
 800fab6:	2180      	movs	r1, #128	@ 0x80
 800fab8:	430a      	orrs	r2, r1
 800faba:	b292      	uxth	r2, r2
 800fabc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	2250      	movs	r2, #80	@ 0x50
 800fac4:	5a9b      	ldrh	r3, [r3, r2]
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	001a      	movs	r2, r3
 800faca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	18d2      	adds	r2, r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	18d3      	adds	r3, r2, r3
 800fad8:	4a5f      	ldr	r2, [pc, #380]	@ (800fc58 <PCD_EP_ISR_Handler+0x344>)
 800fada:	4694      	mov	ip, r2
 800fadc:	4463      	add	r3, ip
 800fade:	881b      	ldrh	r3, [r3, #0]
 800fae0:	059b      	lsls	r3, r3, #22
 800fae2:	0d9a      	lsrs	r2, r3, #22
 800fae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fae6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800fae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faea:	69db      	ldr	r3, [r3, #28]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d01a      	beq.n	800fb26 <PCD_EP_ISR_Handler+0x212>
 800faf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faf2:	695b      	ldr	r3, [r3, #20]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d016      	beq.n	800fb26 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6818      	ldr	r0, [r3, #0]
 800fafc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fafe:	6959      	ldr	r1, [r3, #20]
 800fb00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb02:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800fb04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb06:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	f006 fc22 	bl	8016352 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800fb0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb10:	695a      	ldr	r2, [r3, #20]
 800fb12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb14:	69db      	ldr	r3, [r3, #28]
 800fb16:	18d2      	adds	r2, r2, r3
 800fb18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb1a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2100      	movs	r1, #0
 800fb20:	0018      	movs	r0, r3
 800fb22:	f008 fc30 	bl	8018386 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	214a      	movs	r1, #74	@ 0x4a
 800fb2c:	187b      	adds	r3, r7, r1
 800fb2e:	8812      	ldrh	r2, [r2, #0]
 800fb30:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800fb32:	187b      	adds	r3, r7, r1
 800fb34:	881a      	ldrh	r2, [r3, #0]
 800fb36:	2380      	movs	r3, #128	@ 0x80
 800fb38:	011b      	lsls	r3, r3, #4
 800fb3a:	4013      	ands	r3, r2
 800fb3c:	d000      	beq.n	800fb40 <PCD_EP_ISR_Handler+0x22c>
 800fb3e:	e2db      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
 800fb40:	187b      	adds	r3, r7, r1
 800fb42:	881a      	ldrh	r2, [r3, #0]
 800fb44:	23c0      	movs	r3, #192	@ 0xc0
 800fb46:	019b      	lsls	r3, r3, #6
 800fb48:	401a      	ands	r2, r3
 800fb4a:	23c0      	movs	r3, #192	@ 0xc0
 800fb4c:	019b      	lsls	r3, r3, #6
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d100      	bne.n	800fb54 <PCD_EP_ISR_Handler+0x240>
 800fb52:	e2d1      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	61bb      	str	r3, [r7, #24]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2250      	movs	r2, #80	@ 0x50
 800fb60:	5a9b      	ldrh	r3, [r3, r2]
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	001a      	movs	r2, r3
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	189b      	adds	r3, r3, r2
 800fb6a:	61bb      	str	r3, [r7, #24]
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	4a3a      	ldr	r2, [pc, #232]	@ (800fc58 <PCD_EP_ISR_Handler+0x344>)
 800fb70:	4694      	mov	ip, r2
 800fb72:	4463      	add	r3, ip
 800fb74:	617b      	str	r3, [r7, #20]
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	059b      	lsls	r3, r3, #22
 800fb7e:	0d9b      	lsrs	r3, r3, #22
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	801a      	strh	r2, [r3, #0]
 800fb86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	2b3e      	cmp	r3, #62	@ 0x3e
 800fb8c:	d91a      	bls.n	800fbc4 <PCD_EP_ISR_Handler+0x2b0>
 800fb8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb90:	691b      	ldr	r3, [r3, #16]
 800fb92:	095b      	lsrs	r3, r3, #5
 800fb94:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	221f      	movs	r2, #31
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	d102      	bne.n	800fba6 <PCD_EP_ISR_Handler+0x292>
 800fba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fba2:	3b01      	subs	r3, #1
 800fba4:	647b      	str	r3, [r7, #68]	@ 0x44
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	029b      	lsls	r3, r3, #10
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	4a25      	ldr	r2, [pc, #148]	@ (800fc50 <PCD_EP_ISR_Handler+0x33c>)
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	801a      	strh	r2, [r3, #0]
 800fbc2:	e023      	b.n	800fc0c <PCD_EP_ISR_Handler+0x2f8>
 800fbc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbc6:	691b      	ldr	r3, [r3, #16]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d108      	bne.n	800fbde <PCD_EP_ISR_Handler+0x2ca>
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	4a1f      	ldr	r2, [pc, #124]	@ (800fc50 <PCD_EP_ISR_Handler+0x33c>)
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	801a      	strh	r2, [r3, #0]
 800fbdc:	e016      	b.n	800fc0c <PCD_EP_ISR_Handler+0x2f8>
 800fbde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbe0:	691b      	ldr	r3, [r3, #16]
 800fbe2:	085b      	lsrs	r3, r3, #1
 800fbe4:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbe8:	691b      	ldr	r3, [r3, #16]
 800fbea:	2201      	movs	r2, #1
 800fbec:	4013      	ands	r3, r2
 800fbee:	d002      	beq.n	800fbf6 <PCD_EP_ISR_Handler+0x2e2>
 800fbf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	881b      	ldrh	r3, [r3, #0]
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	029b      	lsls	r3, r3, #10
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	4313      	orrs	r3, r2
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	b29a      	uxth	r2, r3
 800fc14:	2012      	movs	r0, #18
 800fc16:	183b      	adds	r3, r7, r0
 800fc18:	4911      	ldr	r1, [pc, #68]	@ (800fc60 <PCD_EP_ISR_Handler+0x34c>)
 800fc1a:	400a      	ands	r2, r1
 800fc1c:	801a      	strh	r2, [r3, #0]
 800fc1e:	183b      	adds	r3, r7, r0
 800fc20:	183a      	adds	r2, r7, r0
 800fc22:	8812      	ldrh	r2, [r2, #0]
 800fc24:	2180      	movs	r1, #128	@ 0x80
 800fc26:	0149      	lsls	r1, r1, #5
 800fc28:	404a      	eors	r2, r1
 800fc2a:	801a      	strh	r2, [r3, #0]
 800fc2c:	183b      	adds	r3, r7, r0
 800fc2e:	183a      	adds	r2, r7, r0
 800fc30:	8812      	ldrh	r2, [r2, #0]
 800fc32:	2180      	movs	r1, #128	@ 0x80
 800fc34:	0189      	lsls	r1, r1, #6
 800fc36:	404a      	eors	r2, r1
 800fc38:	801a      	strh	r2, [r3, #0]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	183a      	adds	r2, r7, r0
 800fc40:	8812      	ldrh	r2, [r2, #0]
 800fc42:	4908      	ldr	r1, [pc, #32]	@ (800fc64 <PCD_EP_ISR_Handler+0x350>)
 800fc44:	430a      	orrs	r2, r1
 800fc46:	b292      	uxth	r2, r2
 800fc48:	801a      	strh	r2, [r3, #0]
 800fc4a:	e255      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
 800fc4c:	ffff8f0f 	.word	0xffff8f0f
 800fc50:	ffff8000 	.word	0xffff8000
 800fc54:	00000402 	.word	0x00000402
 800fc58:	00000406 	.word	0x00000406
 800fc5c:	00000f8f 	.word	0x00000f8f
 800fc60:	ffffbf8f 	.word	0xffffbf8f
 800fc64:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	001a      	movs	r2, r3
 800fc6e:	204d      	movs	r0, #77	@ 0x4d
 800fc70:	183b      	adds	r3, r7, r0
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	18d2      	adds	r2, r2, r3
 800fc78:	214a      	movs	r1, #74	@ 0x4a
 800fc7a:	187b      	adds	r3, r7, r1
 800fc7c:	8812      	ldrh	r2, [r2, #0]
 800fc7e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800fc80:	187b      	adds	r3, r7, r1
 800fc82:	2200      	movs	r2, #0
 800fc84:	5e9b      	ldrsh	r3, [r3, r2]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	db00      	blt.n	800fc8c <PCD_EP_ISR_Handler+0x378>
 800fc8a:	e0fa      	b.n	800fe82 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	001a      	movs	r2, r3
 800fc92:	183b      	adds	r3, r7, r0
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	18d3      	adds	r3, r2, r3
 800fc9a:	881b      	ldrh	r3, [r3, #0]
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	2448      	movs	r4, #72	@ 0x48
 800fca0:	193b      	adds	r3, r7, r4
 800fca2:	49d1      	ldr	r1, [pc, #836]	@ (800ffe8 <PCD_EP_ISR_Handler+0x6d4>)
 800fca4:	400a      	ands	r2, r1
 800fca6:	801a      	strh	r2, [r3, #0]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	001a      	movs	r2, r3
 800fcae:	183b      	adds	r3, r7, r0
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	18d3      	adds	r3, r2, r3
 800fcb6:	193a      	adds	r2, r7, r4
 800fcb8:	8812      	ldrh	r2, [r2, #0]
 800fcba:	2180      	movs	r1, #128	@ 0x80
 800fcbc:	430a      	orrs	r2, r1
 800fcbe:	b292      	uxth	r2, r2
 800fcc0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800fcc2:	183b      	adds	r3, r7, r0
 800fcc4:	781a      	ldrb	r2, [r3, #0]
 800fcc6:	0013      	movs	r3, r2
 800fcc8:	009b      	lsls	r3, r3, #2
 800fcca:	189b      	adds	r3, r3, r2
 800fccc:	00db      	lsls	r3, r3, #3
 800fcce:	3369      	adds	r3, #105	@ 0x69
 800fcd0:	33ff      	adds	r3, #255	@ 0xff
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	18d3      	adds	r3, r2, r3
 800fcd6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800fcd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcda:	7b1b      	ldrb	r3, [r3, #12]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d125      	bne.n	800fd2c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2250      	movs	r2, #80	@ 0x50
 800fce6:	5a9b      	ldrh	r3, [r3, r2]
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	001a      	movs	r2, r3
 800fcec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	18d2      	adds	r2, r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	18d3      	adds	r3, r2, r3
 800fcfa:	4abc      	ldr	r2, [pc, #752]	@ (800ffec <PCD_EP_ISR_Handler+0x6d8>)
 800fcfc:	4694      	mov	ip, r2
 800fcfe:	4463      	add	r3, ip
 800fd00:	881a      	ldrh	r2, [r3, #0]
 800fd02:	2450      	movs	r4, #80	@ 0x50
 800fd04:	193b      	adds	r3, r7, r4
 800fd06:	0592      	lsls	r2, r2, #22
 800fd08:	0d92      	lsrs	r2, r2, #22
 800fd0a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800fd0c:	193b      	adds	r3, r7, r4
 800fd0e:	881b      	ldrh	r3, [r3, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d100      	bne.n	800fd16 <PCD_EP_ISR_Handler+0x402>
 800fd14:	e08d      	b.n	800fe32 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd1c:	6959      	ldr	r1, [r3, #20]
 800fd1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd20:	88da      	ldrh	r2, [r3, #6]
 800fd22:	193b      	adds	r3, r7, r4
 800fd24:	881b      	ldrh	r3, [r3, #0]
 800fd26:	f006 fb14 	bl	8016352 <USB_ReadPMA>
 800fd2a:	e082      	b.n	800fe32 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800fd2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd2e:	78db      	ldrb	r3, [r3, #3]
 800fd30:	2b02      	cmp	r3, #2
 800fd32:	d10c      	bne.n	800fd4e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800fd34:	2350      	movs	r3, #80	@ 0x50
 800fd36:	18fc      	adds	r4, r7, r3
 800fd38:	234a      	movs	r3, #74	@ 0x4a
 800fd3a:	18fb      	adds	r3, r7, r3
 800fd3c:	881a      	ldrh	r2, [r3, #0]
 800fd3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	0018      	movs	r0, r3
 800fd44:	f000 f9ec 	bl	8010120 <HAL_PCD_EP_DB_Receive>
 800fd48:	0003      	movs	r3, r0
 800fd4a:	8023      	strh	r3, [r4, #0]
 800fd4c:	e071      	b.n	800fe32 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	001a      	movs	r2, r3
 800fd54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	18d3      	adds	r3, r2, r3
 800fd5c:	881b      	ldrh	r3, [r3, #0]
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	2052      	movs	r0, #82	@ 0x52
 800fd62:	183b      	adds	r3, r7, r0
 800fd64:	49a2      	ldr	r1, [pc, #648]	@ (800fff0 <PCD_EP_ISR_Handler+0x6dc>)
 800fd66:	400a      	ands	r2, r1
 800fd68:	801a      	strh	r2, [r3, #0]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	001a      	movs	r2, r3
 800fd70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	18d3      	adds	r3, r2, r3
 800fd78:	183a      	adds	r2, r7, r0
 800fd7a:	8812      	ldrh	r2, [r2, #0]
 800fd7c:	499d      	ldr	r1, [pc, #628]	@ (800fff4 <PCD_EP_ISR_Handler+0x6e0>)
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	b292      	uxth	r2, r2
 800fd82:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	001a      	movs	r2, r3
 800fd8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	18d3      	adds	r3, r2, r3
 800fd92:	881b      	ldrh	r3, [r3, #0]
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	001a      	movs	r2, r3
 800fd98:	2380      	movs	r3, #128	@ 0x80
 800fd9a:	01db      	lsls	r3, r3, #7
 800fd9c:	4013      	ands	r3, r2
 800fd9e:	d024      	beq.n	800fdea <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2250      	movs	r2, #80	@ 0x50
 800fda6:	5a9b      	ldrh	r3, [r3, r2]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	001a      	movs	r2, r3
 800fdac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	00db      	lsls	r3, r3, #3
 800fdb2:	18d2      	adds	r2, r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	18d3      	adds	r3, r2, r3
 800fdba:	4a8f      	ldr	r2, [pc, #572]	@ (800fff8 <PCD_EP_ISR_Handler+0x6e4>)
 800fdbc:	4694      	mov	ip, r2
 800fdbe:	4463      	add	r3, ip
 800fdc0:	881a      	ldrh	r2, [r3, #0]
 800fdc2:	2450      	movs	r4, #80	@ 0x50
 800fdc4:	193b      	adds	r3, r7, r4
 800fdc6:	0592      	lsls	r2, r2, #22
 800fdc8:	0d92      	lsrs	r2, r2, #22
 800fdca:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800fdcc:	193b      	adds	r3, r7, r4
 800fdce:	881b      	ldrh	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d02e      	beq.n	800fe32 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6818      	ldr	r0, [r3, #0]
 800fdd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdda:	6959      	ldr	r1, [r3, #20]
 800fddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdde:	891a      	ldrh	r2, [r3, #8]
 800fde0:	193b      	adds	r3, r7, r4
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	f006 fab5 	bl	8016352 <USB_ReadPMA>
 800fde8:	e023      	b.n	800fe32 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2250      	movs	r2, #80	@ 0x50
 800fdf0:	5a9b      	ldrh	r3, [r3, r2]
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	001a      	movs	r2, r3
 800fdf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	00db      	lsls	r3, r3, #3
 800fdfc:	18d2      	adds	r2, r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	18d3      	adds	r3, r2, r3
 800fe04:	4a79      	ldr	r2, [pc, #484]	@ (800ffec <PCD_EP_ISR_Handler+0x6d8>)
 800fe06:	4694      	mov	ip, r2
 800fe08:	4463      	add	r3, ip
 800fe0a:	881a      	ldrh	r2, [r3, #0]
 800fe0c:	2450      	movs	r4, #80	@ 0x50
 800fe0e:	193b      	adds	r3, r7, r4
 800fe10:	0592      	lsls	r2, r2, #22
 800fe12:	0d92      	lsrs	r2, r2, #22
 800fe14:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800fe16:	193b      	adds	r3, r7, r4
 800fe18:	881b      	ldrh	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d009      	beq.n	800fe32 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6818      	ldr	r0, [r3, #0]
 800fe22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe24:	6959      	ldr	r1, [r3, #20]
 800fe26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe28:	895a      	ldrh	r2, [r3, #10]
 800fe2a:	193b      	adds	r3, r7, r4
 800fe2c:	881b      	ldrh	r3, [r3, #0]
 800fe2e:	f006 fa90 	bl	8016352 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800fe32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe34:	69da      	ldr	r2, [r3, #28]
 800fe36:	2150      	movs	r1, #80	@ 0x50
 800fe38:	187b      	adds	r3, r7, r1
 800fe3a:	881b      	ldrh	r3, [r3, #0]
 800fe3c:	18d2      	adds	r2, r2, r3
 800fe3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800fe42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe44:	695a      	ldr	r2, [r3, #20]
 800fe46:	187b      	adds	r3, r7, r1
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	18d2      	adds	r2, r2, r3
 800fe4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe4e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800fe50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d005      	beq.n	800fe64 <PCD_EP_ISR_Handler+0x550>
 800fe58:	187b      	adds	r3, r7, r1
 800fe5a:	881a      	ldrh	r2, [r3, #0]
 800fe5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe5e:	691b      	ldr	r3, [r3, #16]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d207      	bcs.n	800fe74 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800fe64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe66:	781a      	ldrb	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	0011      	movs	r1, r2
 800fe6c:	0018      	movs	r0, r3
 800fe6e:	f008 fa8a 	bl	8018386 <HAL_PCD_DataOutStageCallback>
 800fe72:	e006      	b.n	800fe82 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe7a:	0011      	movs	r1, r2
 800fe7c:	0018      	movs	r0, r3
 800fe7e:	f004 ffad 	bl	8014ddc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800fe82:	244a      	movs	r4, #74	@ 0x4a
 800fe84:	193b      	adds	r3, r7, r4
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	2280      	movs	r2, #128	@ 0x80
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	d100      	bne.n	800fe90 <PCD_EP_ISR_Handler+0x57c>
 800fe8e:	e133      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800fe90:	204d      	movs	r0, #77	@ 0x4d
 800fe92:	183b      	adds	r3, r7, r0
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	1c5a      	adds	r2, r3, #1
 800fe98:	0013      	movs	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	189b      	adds	r3, r3, r2
 800fe9e:	00db      	lsls	r3, r3, #3
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	18d3      	adds	r3, r2, r3
 800fea4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	001a      	movs	r2, r3
 800feac:	183b      	adds	r3, r7, r0
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	18d3      	adds	r3, r2, r3
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	2542      	movs	r5, #66	@ 0x42
 800feba:	197b      	adds	r3, r7, r5
 800febc:	494f      	ldr	r1, [pc, #316]	@ (800fffc <PCD_EP_ISR_Handler+0x6e8>)
 800febe:	400a      	ands	r2, r1
 800fec0:	801a      	strh	r2, [r3, #0]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	001a      	movs	r2, r3
 800fec8:	183b      	adds	r3, r7, r0
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	18d3      	adds	r3, r2, r3
 800fed0:	197a      	adds	r2, r7, r5
 800fed2:	8812      	ldrh	r2, [r2, #0]
 800fed4:	494a      	ldr	r1, [pc, #296]	@ (8010000 <PCD_EP_ISR_Handler+0x6ec>)
 800fed6:	430a      	orrs	r2, r1
 800fed8:	b292      	uxth	r2, r2
 800feda:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800fedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fede:	78db      	ldrb	r3, [r3, #3]
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d000      	beq.n	800fee6 <PCD_EP_ISR_Handler+0x5d2>
 800fee4:	e0af      	b.n	8010046 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800fee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fee8:	2200      	movs	r2, #0
 800feea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800feec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800feee:	7b1b      	ldrb	r3, [r3, #12]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d100      	bne.n	800fef6 <PCD_EP_ISR_Handler+0x5e2>
 800fef4:	e09f      	b.n	8010036 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800fef6:	193b      	adds	r3, r7, r4
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	2240      	movs	r2, #64	@ 0x40
 800fefc:	4013      	ands	r3, r2
 800fefe:	d046      	beq.n	800ff8e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ff00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff02:	785b      	ldrb	r3, [r3, #1]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d125      	bne.n	800ff54 <PCD_EP_ISR_Handler+0x640>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2250      	movs	r2, #80	@ 0x50
 800ff14:	5a9b      	ldrh	r3, [r3, r2]
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	001a      	movs	r2, r3
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff1c:	189b      	adds	r3, r3, r2
 800ff1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	00da      	lsls	r2, r3, #3
 800ff26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff28:	18d3      	adds	r3, r2, r3
 800ff2a:	4a33      	ldr	r2, [pc, #204]	@ (800fff8 <PCD_EP_ISR_Handler+0x6e4>)
 800ff2c:	4694      	mov	ip, r2
 800ff2e:	4463      	add	r3, ip
 800ff30:	623b      	str	r3, [r7, #32]
 800ff32:	6a3b      	ldr	r3, [r7, #32]
 800ff34:	881b      	ldrh	r3, [r3, #0]
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	059b      	lsls	r3, r3, #22
 800ff3a:	0d9b      	lsrs	r3, r3, #22
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	6a3b      	ldr	r3, [r7, #32]
 800ff40:	801a      	strh	r2, [r3, #0]
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	881b      	ldrh	r3, [r3, #0]
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	4a2d      	ldr	r2, [pc, #180]	@ (8010000 <PCD_EP_ISR_Handler+0x6ec>)
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	6a3b      	ldr	r3, [r7, #32]
 800ff50:	801a      	strh	r2, [r3, #0]
 800ff52:	e070      	b.n	8010036 <PCD_EP_ISR_Handler+0x722>
 800ff54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff56:	785b      	ldrb	r3, [r3, #1]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d16c      	bne.n	8010036 <PCD_EP_ISR_Handler+0x722>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2250      	movs	r2, #80	@ 0x50
 800ff68:	5a9b      	ldrh	r3, [r3, r2]
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	001a      	movs	r2, r3
 800ff6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff70:	189b      	adds	r3, r3, r2
 800ff72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	00da      	lsls	r2, r3, #3
 800ff7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff7c:	18d3      	adds	r3, r2, r3
 800ff7e:	4a1e      	ldr	r2, [pc, #120]	@ (800fff8 <PCD_EP_ISR_Handler+0x6e4>)
 800ff80:	4694      	mov	ip, r2
 800ff82:	4463      	add	r3, ip
 800ff84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff88:	2200      	movs	r2, #0
 800ff8a:	801a      	strh	r2, [r3, #0]
 800ff8c:	e053      	b.n	8010036 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff96:	785b      	ldrb	r3, [r3, #1]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d133      	bne.n	8010004 <PCD_EP_ISR_Handler+0x6f0>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2250      	movs	r2, #80	@ 0x50
 800ffa8:	5a9b      	ldrh	r3, [r3, r2]
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	001a      	movs	r2, r3
 800ffae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffb0:	189b      	adds	r3, r3, r2
 800ffb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	00da      	lsls	r2, r3, #3
 800ffba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffbc:	18d3      	adds	r3, r2, r3
 800ffbe:	4a0b      	ldr	r2, [pc, #44]	@ (800ffec <PCD_EP_ISR_Handler+0x6d8>)
 800ffc0:	4694      	mov	ip, r2
 800ffc2:	4463      	add	r3, ip
 800ffc4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ffc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc8:	881b      	ldrh	r3, [r3, #0]
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	059b      	lsls	r3, r3, #22
 800ffce:	0d9b      	lsrs	r3, r3, #22
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd4:	801a      	strh	r2, [r3, #0]
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd8:	881b      	ldrh	r3, [r3, #0]
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	4a08      	ldr	r2, [pc, #32]	@ (8010000 <PCD_EP_ISR_Handler+0x6ec>)
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffe4:	801a      	strh	r2, [r3, #0]
 800ffe6:	e026      	b.n	8010036 <PCD_EP_ISR_Handler+0x722>
 800ffe8:	00000f8f 	.word	0x00000f8f
 800ffec:	00000406 	.word	0x00000406
 800fff0:	ffff8f8f 	.word	0xffff8f8f
 800fff4:	ffff80c0 	.word	0xffff80c0
 800fff8:	00000402 	.word	0x00000402
 800fffc:	ffff8f0f 	.word	0xffff8f0f
 8010000:	ffff8000 	.word	0xffff8000
 8010004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010006:	785b      	ldrb	r3, [r3, #1]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d114      	bne.n	8010036 <PCD_EP_ISR_Handler+0x722>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2250      	movs	r2, #80	@ 0x50
 8010012:	5a9b      	ldrh	r3, [r3, r2]
 8010014:	b29b      	uxth	r3, r3
 8010016:	001a      	movs	r2, r3
 8010018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801001a:	189b      	adds	r3, r3, r2
 801001c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801001e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	00da      	lsls	r2, r3, #3
 8010024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010026:	18d3      	adds	r3, r2, r3
 8010028:	4a3b      	ldr	r2, [pc, #236]	@ (8010118 <PCD_EP_ISR_Handler+0x804>)
 801002a:	4694      	mov	ip, r2
 801002c:	4463      	add	r3, ip
 801002e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010032:	2200      	movs	r2, #0
 8010034:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010038:	781a      	ldrb	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	0011      	movs	r1, r2
 801003e:	0018      	movs	r0, r3
 8010040:	f008 f9c2 	bl	80183c8 <HAL_PCD_DataInStageCallback>
 8010044:	e058      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8010046:	234a      	movs	r3, #74	@ 0x4a
 8010048:	18fb      	adds	r3, r7, r3
 801004a:	881a      	ldrh	r2, [r3, #0]
 801004c:	2380      	movs	r3, #128	@ 0x80
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	4013      	ands	r3, r2
 8010052:	d149      	bne.n	80100e8 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2250      	movs	r2, #80	@ 0x50
 801005a:	5a9b      	ldrh	r3, [r3, r2]
 801005c:	b29b      	uxth	r3, r3
 801005e:	001a      	movs	r2, r3
 8010060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	00db      	lsls	r3, r3, #3
 8010066:	18d2      	adds	r2, r2, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	18d3      	adds	r3, r2, r3
 801006e:	4a2b      	ldr	r2, [pc, #172]	@ (801011c <PCD_EP_ISR_Handler+0x808>)
 8010070:	4694      	mov	ip, r2
 8010072:	4463      	add	r3, ip
 8010074:	881a      	ldrh	r2, [r3, #0]
 8010076:	2140      	movs	r1, #64	@ 0x40
 8010078:	187b      	adds	r3, r7, r1
 801007a:	0592      	lsls	r2, r2, #22
 801007c:	0d92      	lsrs	r2, r2, #22
 801007e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8010080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010082:	699a      	ldr	r2, [r3, #24]
 8010084:	187b      	adds	r3, r7, r1
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	429a      	cmp	r2, r3
 801008a:	d907      	bls.n	801009c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801008c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801008e:	699a      	ldr	r2, [r3, #24]
 8010090:	187b      	adds	r3, r7, r1
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	1ad2      	subs	r2, r2, r3
 8010096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010098:	619a      	str	r2, [r3, #24]
 801009a:	e002      	b.n	80100a2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801009c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801009e:	2200      	movs	r2, #0
 80100a0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80100a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100a4:	699b      	ldr	r3, [r3, #24]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d107      	bne.n	80100ba <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80100aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100ac:	781a      	ldrb	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	0011      	movs	r1, r2
 80100b2:	0018      	movs	r0, r3
 80100b4:	f008 f988 	bl	80183c8 <HAL_PCD_DataInStageCallback>
 80100b8:	e01e      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80100ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100bc:	695a      	ldr	r2, [r3, #20]
 80100be:	2140      	movs	r1, #64	@ 0x40
 80100c0:	187b      	adds	r3, r7, r1
 80100c2:	881b      	ldrh	r3, [r3, #0]
 80100c4:	18d2      	adds	r2, r2, r3
 80100c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100c8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80100ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100cc:	69da      	ldr	r2, [r3, #28]
 80100ce:	187b      	adds	r3, r7, r1
 80100d0:	881b      	ldrh	r3, [r3, #0]
 80100d2:	18d2      	adds	r2, r2, r3
 80100d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100d6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80100de:	0011      	movs	r1, r2
 80100e0:	0018      	movs	r0, r3
 80100e2:	f004 fe7b 	bl	8014ddc <USB_EPStartXfer>
 80100e6:	e007      	b.n	80100f8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80100e8:	234a      	movs	r3, #74	@ 0x4a
 80100ea:	18fb      	adds	r3, r7, r3
 80100ec:	881a      	ldrh	r2, [r3, #0]
 80100ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	0018      	movs	r0, r3
 80100f4:	f000 f930 	bl	8010358 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2244      	movs	r2, #68	@ 0x44
 80100fe:	5a9b      	ldrh	r3, [r3, r2]
 8010100:	b29b      	uxth	r3, r3
 8010102:	b21b      	sxth	r3, r3
 8010104:	2b00      	cmp	r3, #0
 8010106:	da01      	bge.n	801010c <PCD_EP_ISR_Handler+0x7f8>
 8010108:	f7ff fc0a 	bl	800f920 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801010c:	2300      	movs	r3, #0
}
 801010e:	0018      	movs	r0, r3
 8010110:	46bd      	mov	sp, r7
 8010112:	b016      	add	sp, #88	@ 0x58
 8010114:	bdb0      	pop	{r4, r5, r7, pc}
 8010116:	46c0      	nop			@ (mov r8, r8)
 8010118:	00000406 	.word	0x00000406
 801011c:	00000402 	.word	0x00000402

08010120 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010120:	b590      	push	{r4, r7, lr}
 8010122:	b089      	sub	sp, #36	@ 0x24
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	1dbb      	adds	r3, r7, #6
 801012c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801012e:	1dbb      	adds	r3, r7, #6
 8010130:	881a      	ldrh	r2, [r3, #0]
 8010132:	2380      	movs	r3, #128	@ 0x80
 8010134:	01db      	lsls	r3, r3, #7
 8010136:	4013      	ands	r3, r2
 8010138:	d100      	bne.n	801013c <HAL_PCD_EP_DB_Receive+0x1c>
 801013a:	e07d      	b.n	8010238 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2250      	movs	r2, #80	@ 0x50
 8010142:	5a9b      	ldrh	r3, [r3, r2]
 8010144:	b29b      	uxth	r3, r3
 8010146:	001a      	movs	r2, r3
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	00db      	lsls	r3, r3, #3
 801014e:	18d2      	adds	r2, r2, r3
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	18d3      	adds	r3, r2, r3
 8010156:	4a7a      	ldr	r2, [pc, #488]	@ (8010340 <HAL_PCD_EP_DB_Receive+0x220>)
 8010158:	4694      	mov	ip, r2
 801015a:	4463      	add	r3, ip
 801015c:	881a      	ldrh	r2, [r3, #0]
 801015e:	211a      	movs	r1, #26
 8010160:	187b      	adds	r3, r7, r1
 8010162:	0592      	lsls	r2, r2, #22
 8010164:	0d92      	lsrs	r2, r2, #22
 8010166:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	699a      	ldr	r2, [r3, #24]
 801016c:	187b      	adds	r3, r7, r1
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	429a      	cmp	r2, r3
 8010172:	d307      	bcc.n	8010184 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	699a      	ldr	r2, [r3, #24]
 8010178:	187b      	adds	r3, r7, r1
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	1ad2      	subs	r2, r2, r3
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	619a      	str	r2, [r3, #24]
 8010182:	e002      	b.n	801018a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	2200      	movs	r2, #0
 8010188:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	699b      	ldr	r3, [r3, #24]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d121      	bne.n	80101d6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	001a      	movs	r2, r3
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	18d3      	adds	r3, r2, r3
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	2018      	movs	r0, #24
 80101a6:	183b      	adds	r3, r7, r0
 80101a8:	4966      	ldr	r1, [pc, #408]	@ (8010344 <HAL_PCD_EP_DB_Receive+0x224>)
 80101aa:	400a      	ands	r2, r1
 80101ac:	801a      	strh	r2, [r3, #0]
 80101ae:	183b      	adds	r3, r7, r0
 80101b0:	183a      	adds	r2, r7, r0
 80101b2:	8812      	ldrh	r2, [r2, #0]
 80101b4:	2180      	movs	r1, #128	@ 0x80
 80101b6:	0189      	lsls	r1, r1, #6
 80101b8:	404a      	eors	r2, r1
 80101ba:	801a      	strh	r2, [r3, #0]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	001a      	movs	r2, r3
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	18d3      	adds	r3, r2, r3
 80101ca:	183a      	adds	r2, r7, r0
 80101cc:	8812      	ldrh	r2, [r2, #0]
 80101ce:	495e      	ldr	r1, [pc, #376]	@ (8010348 <HAL_PCD_EP_DB_Receive+0x228>)
 80101d0:	430a      	orrs	r2, r1
 80101d2:	b292      	uxth	r2, r2
 80101d4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80101d6:	1dbb      	adds	r3, r7, #6
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	2240      	movs	r2, #64	@ 0x40
 80101dc:	4013      	ands	r3, r2
 80101de:	d01a      	beq.n	8010216 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	001a      	movs	r2, r3
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	18d3      	adds	r3, r2, r3
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	2016      	movs	r0, #22
 80101f4:	183b      	adds	r3, r7, r0
 80101f6:	4955      	ldr	r1, [pc, #340]	@ (801034c <HAL_PCD_EP_DB_Receive+0x22c>)
 80101f8:	400a      	ands	r2, r1
 80101fa:	801a      	strh	r2, [r3, #0]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	001a      	movs	r2, r3
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	18d3      	adds	r3, r2, r3
 801020a:	183a      	adds	r2, r7, r0
 801020c:	8812      	ldrh	r2, [r2, #0]
 801020e:	4950      	ldr	r1, [pc, #320]	@ (8010350 <HAL_PCD_EP_DB_Receive+0x230>)
 8010210:	430a      	orrs	r2, r1
 8010212:	b292      	uxth	r2, r2
 8010214:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010216:	241a      	movs	r4, #26
 8010218:	193b      	adds	r3, r7, r4
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d100      	bne.n	8010222 <HAL_PCD_EP_DB_Receive+0x102>
 8010220:	e086      	b.n	8010330 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	6959      	ldr	r1, [r3, #20]
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	891a      	ldrh	r2, [r3, #8]
 801022e:	193b      	adds	r3, r7, r4
 8010230:	881b      	ldrh	r3, [r3, #0]
 8010232:	f006 f88e 	bl	8016352 <USB_ReadPMA>
 8010236:	e07b      	b.n	8010330 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2250      	movs	r2, #80	@ 0x50
 801023e:	5a9b      	ldrh	r3, [r3, r2]
 8010240:	b29b      	uxth	r3, r3
 8010242:	001a      	movs	r2, r3
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	00db      	lsls	r3, r3, #3
 801024a:	18d2      	adds	r2, r2, r3
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	18d3      	adds	r3, r2, r3
 8010252:	4a40      	ldr	r2, [pc, #256]	@ (8010354 <HAL_PCD_EP_DB_Receive+0x234>)
 8010254:	4694      	mov	ip, r2
 8010256:	4463      	add	r3, ip
 8010258:	881a      	ldrh	r2, [r3, #0]
 801025a:	211a      	movs	r1, #26
 801025c:	187b      	adds	r3, r7, r1
 801025e:	0592      	lsls	r2, r2, #22
 8010260:	0d92      	lsrs	r2, r2, #22
 8010262:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	699a      	ldr	r2, [r3, #24]
 8010268:	187b      	adds	r3, r7, r1
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	429a      	cmp	r2, r3
 801026e:	d307      	bcc.n	8010280 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	699a      	ldr	r2, [r3, #24]
 8010274:	187b      	adds	r3, r7, r1
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	1ad2      	subs	r2, r2, r3
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	619a      	str	r2, [r3, #24]
 801027e:	e002      	b.n	8010286 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	2200      	movs	r2, #0
 8010284:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	699b      	ldr	r3, [r3, #24]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d121      	bne.n	80102d2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	001a      	movs	r2, r3
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	18d3      	adds	r3, r2, r3
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	b29a      	uxth	r2, r3
 80102a0:	201e      	movs	r0, #30
 80102a2:	183b      	adds	r3, r7, r0
 80102a4:	4927      	ldr	r1, [pc, #156]	@ (8010344 <HAL_PCD_EP_DB_Receive+0x224>)
 80102a6:	400a      	ands	r2, r1
 80102a8:	801a      	strh	r2, [r3, #0]
 80102aa:	183b      	adds	r3, r7, r0
 80102ac:	183a      	adds	r2, r7, r0
 80102ae:	8812      	ldrh	r2, [r2, #0]
 80102b0:	2180      	movs	r1, #128	@ 0x80
 80102b2:	0189      	lsls	r1, r1, #6
 80102b4:	404a      	eors	r2, r1
 80102b6:	801a      	strh	r2, [r3, #0]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	001a      	movs	r2, r3
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	18d3      	adds	r3, r2, r3
 80102c6:	183a      	adds	r2, r7, r0
 80102c8:	8812      	ldrh	r2, [r2, #0]
 80102ca:	491f      	ldr	r1, [pc, #124]	@ (8010348 <HAL_PCD_EP_DB_Receive+0x228>)
 80102cc:	430a      	orrs	r2, r1
 80102ce:	b292      	uxth	r2, r2
 80102d0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80102d2:	1dbb      	adds	r3, r7, #6
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	2240      	movs	r2, #64	@ 0x40
 80102d8:	4013      	ands	r3, r2
 80102da:	d11a      	bne.n	8010312 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	001a      	movs	r2, r3
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	18d3      	adds	r3, r2, r3
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	201c      	movs	r0, #28
 80102f0:	183b      	adds	r3, r7, r0
 80102f2:	4916      	ldr	r1, [pc, #88]	@ (801034c <HAL_PCD_EP_DB_Receive+0x22c>)
 80102f4:	400a      	ands	r2, r1
 80102f6:	801a      	strh	r2, [r3, #0]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	001a      	movs	r2, r3
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	18d3      	adds	r3, r2, r3
 8010306:	183a      	adds	r2, r7, r0
 8010308:	8812      	ldrh	r2, [r2, #0]
 801030a:	4911      	ldr	r1, [pc, #68]	@ (8010350 <HAL_PCD_EP_DB_Receive+0x230>)
 801030c:	430a      	orrs	r2, r1
 801030e:	b292      	uxth	r2, r2
 8010310:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010312:	241a      	movs	r4, #26
 8010314:	193b      	adds	r3, r7, r4
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d009      	beq.n	8010330 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	6818      	ldr	r0, [r3, #0]
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	6959      	ldr	r1, [r3, #20]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	895a      	ldrh	r2, [r3, #10]
 8010328:	193b      	adds	r3, r7, r4
 801032a:	881b      	ldrh	r3, [r3, #0]
 801032c:	f006 f811 	bl	8016352 <USB_ReadPMA>
    }
  }

  return count;
 8010330:	231a      	movs	r3, #26
 8010332:	18fb      	adds	r3, r7, r3
 8010334:	881b      	ldrh	r3, [r3, #0]
}
 8010336:	0018      	movs	r0, r3
 8010338:	46bd      	mov	sp, r7
 801033a:	b009      	add	sp, #36	@ 0x24
 801033c:	bd90      	pop	{r4, r7, pc}
 801033e:	46c0      	nop			@ (mov r8, r8)
 8010340:	00000402 	.word	0x00000402
 8010344:	ffffbf8f 	.word	0xffffbf8f
 8010348:	ffff8080 	.word	0xffff8080
 801034c:	ffff8f8f 	.word	0xffff8f8f
 8010350:	ffff80c0 	.word	0xffff80c0
 8010354:	00000406 	.word	0x00000406

08010358 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b0a4      	sub	sp, #144	@ 0x90
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	1dbb      	adds	r3, r7, #6
 8010364:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010366:	1dbb      	adds	r3, r7, #6
 8010368:	881b      	ldrh	r3, [r3, #0]
 801036a:	2240      	movs	r2, #64	@ 0x40
 801036c:	4013      	ands	r3, r2
 801036e:	d100      	bne.n	8010372 <HAL_PCD_EP_DB_Transmit+0x1a>
 8010370:	e1e4      	b.n	801073c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	2250      	movs	r2, #80	@ 0x50
 8010378:	5a9b      	ldrh	r3, [r3, r2]
 801037a:	b29b      	uxth	r3, r3
 801037c:	001a      	movs	r2, r3
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	00db      	lsls	r3, r3, #3
 8010384:	18d2      	adds	r2, r2, r3
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	18d3      	adds	r3, r2, r3
 801038c:	4ad0      	ldr	r2, [pc, #832]	@ (80106d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 801038e:	4694      	mov	ip, r2
 8010390:	4463      	add	r3, ip
 8010392:	881a      	ldrh	r2, [r3, #0]
 8010394:	2186      	movs	r1, #134	@ 0x86
 8010396:	187b      	adds	r3, r7, r1
 8010398:	0592      	lsls	r2, r2, #22
 801039a:	0d92      	lsrs	r2, r2, #22
 801039c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	699a      	ldr	r2, [r3, #24]
 80103a2:	187b      	adds	r3, r7, r1
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d907      	bls.n	80103ba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	699a      	ldr	r2, [r3, #24]
 80103ae:	187b      	adds	r3, r7, r1
 80103b0:	881b      	ldrh	r3, [r3, #0]
 80103b2:	1ad2      	subs	r2, r2, r3
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	619a      	str	r2, [r3, #24]
 80103b8:	e002      	b.n	80103c0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	2200      	movs	r2, #0
 80103be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	699b      	ldr	r3, [r3, #24]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d000      	beq.n	80103ca <HAL_PCD_EP_DB_Transmit+0x72>
 80103c8:	e0b5      	b.n	8010536 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	785b      	ldrb	r3, [r3, #1]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d125      	bne.n	801041e <HAL_PCD_EP_DB_Transmit+0xc6>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2250      	movs	r2, #80	@ 0x50
 80103de:	5a9b      	ldrh	r3, [r3, r2]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	001a      	movs	r2, r3
 80103e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e6:	189b      	adds	r3, r3, r2
 80103e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	00da      	lsls	r2, r3, #3
 80103f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f2:	18d3      	adds	r3, r2, r3
 80103f4:	4ab6      	ldr	r2, [pc, #728]	@ (80106d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80103f6:	4694      	mov	ip, r2
 80103f8:	4463      	add	r3, ip
 80103fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103fe:	881b      	ldrh	r3, [r3, #0]
 8010400:	b29b      	uxth	r3, r3
 8010402:	059b      	lsls	r3, r3, #22
 8010404:	0d9b      	lsrs	r3, r3, #22
 8010406:	b29a      	uxth	r2, r3
 8010408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801040a:	801a      	strh	r2, [r3, #0]
 801040c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	b29b      	uxth	r3, r3
 8010412:	4ab0      	ldr	r2, [pc, #704]	@ (80106d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010414:	4313      	orrs	r3, r2
 8010416:	b29a      	uxth	r2, r3
 8010418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801041a:	801a      	strh	r2, [r3, #0]
 801041c:	e01b      	b.n	8010456 <HAL_PCD_EP_DB_Transmit+0xfe>
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	785b      	ldrb	r3, [r3, #1]
 8010422:	2b01      	cmp	r3, #1
 8010424:	d117      	bne.n	8010456 <HAL_PCD_EP_DB_Transmit+0xfe>
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	637b      	str	r3, [r7, #52]	@ 0x34
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2250      	movs	r2, #80	@ 0x50
 8010432:	5a9b      	ldrh	r3, [r3, r2]
 8010434:	b29b      	uxth	r3, r3
 8010436:	001a      	movs	r2, r3
 8010438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043a:	189b      	adds	r3, r3, r2
 801043c:	637b      	str	r3, [r7, #52]	@ 0x34
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	00da      	lsls	r2, r3, #3
 8010444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010446:	18d3      	adds	r3, r2, r3
 8010448:	4aa1      	ldr	r2, [pc, #644]	@ (80106d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 801044a:	4694      	mov	ip, r2
 801044c:	4463      	add	r3, ip
 801044e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010452:	2200      	movs	r2, #0
 8010454:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	627b      	str	r3, [r7, #36]	@ 0x24
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	785b      	ldrb	r3, [r3, #1]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d125      	bne.n	80104b0 <HAL_PCD_EP_DB_Transmit+0x158>
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	61fb      	str	r3, [r7, #28]
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2250      	movs	r2, #80	@ 0x50
 8010470:	5a9b      	ldrh	r3, [r3, r2]
 8010472:	b29b      	uxth	r3, r3
 8010474:	001a      	movs	r2, r3
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	189b      	adds	r3, r3, r2
 801047a:	61fb      	str	r3, [r7, #28]
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	00da      	lsls	r2, r3, #3
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	18d3      	adds	r3, r2, r3
 8010486:	4a94      	ldr	r2, [pc, #592]	@ (80106d8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8010488:	4694      	mov	ip, r2
 801048a:	4463      	add	r3, ip
 801048c:	61bb      	str	r3, [r7, #24]
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	881b      	ldrh	r3, [r3, #0]
 8010492:	b29b      	uxth	r3, r3
 8010494:	059b      	lsls	r3, r3, #22
 8010496:	0d9b      	lsrs	r3, r3, #22
 8010498:	b29a      	uxth	r2, r3
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	801a      	strh	r2, [r3, #0]
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	881b      	ldrh	r3, [r3, #0]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4a8b      	ldr	r2, [pc, #556]	@ (80106d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80104a6:	4313      	orrs	r3, r2
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	801a      	strh	r2, [r3, #0]
 80104ae:	e018      	b.n	80104e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	785b      	ldrb	r3, [r3, #1]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d114      	bne.n	80104e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2250      	movs	r2, #80	@ 0x50
 80104be:	5a9b      	ldrh	r3, [r3, r2]
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	001a      	movs	r2, r3
 80104c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c6:	189b      	adds	r3, r3, r2
 80104c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	00da      	lsls	r2, r3, #3
 80104d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d2:	18d3      	adds	r3, r2, r3
 80104d4:	4a80      	ldr	r2, [pc, #512]	@ (80106d8 <HAL_PCD_EP_DB_Transmit+0x380>)
 80104d6:	4694      	mov	ip, r2
 80104d8:	4463      	add	r3, ip
 80104da:	623b      	str	r3, [r7, #32]
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	2200      	movs	r2, #0
 80104e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	781a      	ldrb	r2, [r3, #0]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	0011      	movs	r1, r2
 80104ea:	0018      	movs	r0, r3
 80104ec:	f007 ff6c 	bl	80183c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80104f0:	1dbb      	adds	r3, r7, #6
 80104f2:	881a      	ldrh	r2, [r3, #0]
 80104f4:	2380      	movs	r3, #128	@ 0x80
 80104f6:	01db      	lsls	r3, r3, #7
 80104f8:	4013      	ands	r3, r2
 80104fa:	d100      	bne.n	80104fe <HAL_PCD_EP_DB_Transmit+0x1a6>
 80104fc:	e309      	b.n	8010b12 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	001a      	movs	r2, r3
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	18d3      	adds	r3, r2, r3
 801050c:	881b      	ldrh	r3, [r3, #0]
 801050e:	b29a      	uxth	r2, r3
 8010510:	2016      	movs	r0, #22
 8010512:	183b      	adds	r3, r7, r0
 8010514:	4971      	ldr	r1, [pc, #452]	@ (80106dc <HAL_PCD_EP_DB_Transmit+0x384>)
 8010516:	400a      	ands	r2, r1
 8010518:	801a      	strh	r2, [r3, #0]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	001a      	movs	r2, r3
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	009b      	lsls	r3, r3, #2
 8010526:	18d3      	adds	r3, r2, r3
 8010528:	183a      	adds	r2, r7, r0
 801052a:	8812      	ldrh	r2, [r2, #0]
 801052c:	496c      	ldr	r1, [pc, #432]	@ (80106e0 <HAL_PCD_EP_DB_Transmit+0x388>)
 801052e:	430a      	orrs	r2, r1
 8010530:	b292      	uxth	r2, r2
 8010532:	801a      	strh	r2, [r3, #0]
 8010534:	e2ed      	b.n	8010b12 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010536:	1dbb      	adds	r3, r7, #6
 8010538:	881a      	ldrh	r2, [r3, #0]
 801053a:	2380      	movs	r3, #128	@ 0x80
 801053c:	01db      	lsls	r3, r3, #7
 801053e:	4013      	ands	r3, r2
 8010540:	d01a      	beq.n	8010578 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	001a      	movs	r2, r3
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	18d3      	adds	r3, r2, r3
 8010550:	881b      	ldrh	r3, [r3, #0]
 8010552:	b29a      	uxth	r2, r3
 8010554:	208a      	movs	r0, #138	@ 0x8a
 8010556:	183b      	adds	r3, r7, r0
 8010558:	4960      	ldr	r1, [pc, #384]	@ (80106dc <HAL_PCD_EP_DB_Transmit+0x384>)
 801055a:	400a      	ands	r2, r1
 801055c:	801a      	strh	r2, [r3, #0]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	001a      	movs	r2, r3
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	18d3      	adds	r3, r2, r3
 801056c:	183a      	adds	r2, r7, r0
 801056e:	8812      	ldrh	r2, [r2, #0]
 8010570:	495b      	ldr	r1, [pc, #364]	@ (80106e0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010572:	430a      	orrs	r2, r1
 8010574:	b292      	uxth	r2, r2
 8010576:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	2224      	movs	r2, #36	@ 0x24
 801057c:	5c9b      	ldrb	r3, [r3, r2]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d000      	beq.n	8010584 <HAL_PCD_EP_DB_Transmit+0x22c>
 8010582:	e2c6      	b.n	8010b12 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	695a      	ldr	r2, [r3, #20]
 8010588:	2186      	movs	r1, #134	@ 0x86
 801058a:	187b      	adds	r3, r7, r1
 801058c:	881b      	ldrh	r3, [r3, #0]
 801058e:	18d2      	adds	r2, r2, r3
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	69da      	ldr	r2, [r3, #28]
 8010598:	187b      	adds	r3, r7, r1
 801059a:	881b      	ldrh	r3, [r3, #0]
 801059c:	18d2      	adds	r2, r2, r3
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	6a1a      	ldr	r2, [r3, #32]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	691b      	ldr	r3, [r3, #16]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d30c      	bcc.n	80105c8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	691b      	ldr	r3, [r3, #16]
 80105b2:	218c      	movs	r1, #140	@ 0x8c
 80105b4:	187a      	adds	r2, r7, r1
 80105b6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	6a1a      	ldr	r2, [r3, #32]
 80105bc:	187b      	adds	r3, r7, r1
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	1ad2      	subs	r2, r2, r3
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	621a      	str	r2, [r3, #32]
 80105c6:	e01a      	b.n	80105fe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	6a1b      	ldr	r3, [r3, #32]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10a      	bne.n	80105e6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80105d0:	2386      	movs	r3, #134	@ 0x86
 80105d2:	18fb      	adds	r3, r7, r3
 80105d4:	881b      	ldrh	r3, [r3, #0]
 80105d6:	228c      	movs	r2, #140	@ 0x8c
 80105d8:	18ba      	adds	r2, r7, r2
 80105da:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	2224      	movs	r2, #36	@ 0x24
 80105e0:	2100      	movs	r1, #0
 80105e2:	5499      	strb	r1, [r3, r2]
 80105e4:	e00b      	b.n	80105fe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	2224      	movs	r2, #36	@ 0x24
 80105ea:	2100      	movs	r1, #0
 80105ec:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	6a1b      	ldr	r3, [r3, #32]
 80105f2:	228c      	movs	r2, #140	@ 0x8c
 80105f4:	18ba      	adds	r2, r7, r2
 80105f6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	2200      	movs	r2, #0
 80105fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	785b      	ldrb	r3, [r3, #1]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d000      	beq.n	8010608 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8010606:	e06d      	b.n	80106e4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2250      	movs	r2, #80	@ 0x50
 8010614:	5a9b      	ldrh	r3, [r3, r2]
 8010616:	b29b      	uxth	r3, r3
 8010618:	001a      	movs	r2, r3
 801061a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801061c:	189b      	adds	r3, r3, r2
 801061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	00da      	lsls	r2, r3, #3
 8010626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010628:	18d3      	adds	r3, r2, r3
 801062a:	4a29      	ldr	r2, [pc, #164]	@ (80106d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 801062c:	4694      	mov	ip, r2
 801062e:	4463      	add	r3, ip
 8010630:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010634:	881b      	ldrh	r3, [r3, #0]
 8010636:	b29b      	uxth	r3, r3
 8010638:	059b      	lsls	r3, r3, #22
 801063a:	0d9b      	lsrs	r3, r3, #22
 801063c:	b29a      	uxth	r2, r3
 801063e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010640:	801a      	strh	r2, [r3, #0]
 8010642:	228c      	movs	r2, #140	@ 0x8c
 8010644:	18bb      	adds	r3, r7, r2
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b3e      	cmp	r3, #62	@ 0x3e
 801064a:	d91a      	bls.n	8010682 <HAL_PCD_EP_DB_Transmit+0x32a>
 801064c:	18bb      	adds	r3, r7, r2
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	095b      	lsrs	r3, r3, #5
 8010652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010654:	18bb      	adds	r3, r7, r2
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	221f      	movs	r2, #31
 801065a:	4013      	ands	r3, r2
 801065c:	d102      	bne.n	8010664 <HAL_PCD_EP_DB_Transmit+0x30c>
 801065e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010660:	3b01      	subs	r3, #1
 8010662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010666:	881b      	ldrh	r3, [r3, #0]
 8010668:	b29a      	uxth	r2, r3
 801066a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801066c:	b29b      	uxth	r3, r3
 801066e:	029b      	lsls	r3, r3, #10
 8010670:	b29b      	uxth	r3, r3
 8010672:	4313      	orrs	r3, r2
 8010674:	b29b      	uxth	r3, r3
 8010676:	4a17      	ldr	r2, [pc, #92]	@ (80106d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010678:	4313      	orrs	r3, r2
 801067a:	b29a      	uxth	r2, r3
 801067c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067e:	801a      	strh	r2, [r3, #0]
 8010680:	e04f      	b.n	8010722 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010682:	238c      	movs	r3, #140	@ 0x8c
 8010684:	18fb      	adds	r3, r7, r3
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d108      	bne.n	801069e <HAL_PCD_EP_DB_Transmit+0x346>
 801068c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801068e:	881b      	ldrh	r3, [r3, #0]
 8010690:	b29b      	uxth	r3, r3
 8010692:	4a10      	ldr	r2, [pc, #64]	@ (80106d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010694:	4313      	orrs	r3, r2
 8010696:	b29a      	uxth	r2, r3
 8010698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801069a:	801a      	strh	r2, [r3, #0]
 801069c:	e041      	b.n	8010722 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801069e:	228c      	movs	r2, #140	@ 0x8c
 80106a0:	18bb      	adds	r3, r7, r2
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	085b      	lsrs	r3, r3, #1
 80106a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106a8:	18bb      	adds	r3, r7, r2
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2201      	movs	r2, #1
 80106ae:	4013      	ands	r3, r2
 80106b0:	d002      	beq.n	80106b8 <HAL_PCD_EP_DB_Transmit+0x360>
 80106b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106b4:	3301      	adds	r3, #1
 80106b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ba:	881b      	ldrh	r3, [r3, #0]
 80106bc:	b29a      	uxth	r2, r3
 80106be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	029b      	lsls	r3, r3, #10
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	4313      	orrs	r3, r2
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106cc:	801a      	strh	r2, [r3, #0]
 80106ce:	e028      	b.n	8010722 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80106d0:	00000402 	.word	0x00000402
 80106d4:	ffff8000 	.word	0xffff8000
 80106d8:	00000406 	.word	0x00000406
 80106dc:	ffff8f8f 	.word	0xffff8f8f
 80106e0:	ffffc080 	.word	0xffffc080
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	785b      	ldrb	r3, [r3, #1]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d11a      	bne.n	8010722 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2250      	movs	r2, #80	@ 0x50
 80106f8:	5a9b      	ldrh	r3, [r3, r2]
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	001a      	movs	r2, r3
 80106fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010700:	189b      	adds	r3, r3, r2
 8010702:	647b      	str	r3, [r7, #68]	@ 0x44
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	00da      	lsls	r2, r3, #3
 801070a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801070c:	18d3      	adds	r3, r2, r3
 801070e:	4adb      	ldr	r2, [pc, #876]	@ (8010a7c <HAL_PCD_EP_DB_Transmit+0x724>)
 8010710:	4694      	mov	ip, r2
 8010712:	4463      	add	r3, ip
 8010714:	643b      	str	r3, [r7, #64]	@ 0x40
 8010716:	238c      	movs	r3, #140	@ 0x8c
 8010718:	18fb      	adds	r3, r7, r3
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	b29a      	uxth	r2, r3
 801071e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010720:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	6818      	ldr	r0, [r3, #0]
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	6959      	ldr	r1, [r3, #20]
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	891a      	ldrh	r2, [r3, #8]
 801072e:	238c      	movs	r3, #140	@ 0x8c
 8010730:	18fb      	adds	r3, r7, r3
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	b29b      	uxth	r3, r3
 8010736:	f005 fdc3 	bl	80162c0 <USB_WritePMA>
 801073a:	e1ea      	b.n	8010b12 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2250      	movs	r2, #80	@ 0x50
 8010742:	5a9b      	ldrh	r3, [r3, r2]
 8010744:	b29b      	uxth	r3, r3
 8010746:	001a      	movs	r2, r3
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	00db      	lsls	r3, r3, #3
 801074e:	18d2      	adds	r2, r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	18d3      	adds	r3, r2, r3
 8010756:	4aca      	ldr	r2, [pc, #808]	@ (8010a80 <HAL_PCD_EP_DB_Transmit+0x728>)
 8010758:	4694      	mov	ip, r2
 801075a:	4463      	add	r3, ip
 801075c:	881a      	ldrh	r2, [r3, #0]
 801075e:	2186      	movs	r1, #134	@ 0x86
 8010760:	187b      	adds	r3, r7, r1
 8010762:	0592      	lsls	r2, r2, #22
 8010764:	0d92      	lsrs	r2, r2, #22
 8010766:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	699a      	ldr	r2, [r3, #24]
 801076c:	187b      	adds	r3, r7, r1
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	429a      	cmp	r2, r3
 8010772:	d307      	bcc.n	8010784 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	699a      	ldr	r2, [r3, #24]
 8010778:	187b      	adds	r3, r7, r1
 801077a:	881b      	ldrh	r3, [r3, #0]
 801077c:	1ad2      	subs	r2, r2, r3
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	619a      	str	r2, [r3, #24]
 8010782:	e002      	b.n	801078a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	2200      	movs	r2, #0
 8010788:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	699b      	ldr	r3, [r3, #24]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d000      	beq.n	8010794 <HAL_PCD_EP_DB_Transmit+0x43c>
 8010792:	e0bb      	b.n	801090c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	785b      	ldrb	r3, [r3, #1]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d125      	bne.n	80107e8 <HAL_PCD_EP_DB_Transmit+0x490>
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2250      	movs	r2, #80	@ 0x50
 80107a8:	5a9b      	ldrh	r3, [r3, r2]
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	001a      	movs	r2, r3
 80107ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107b0:	189b      	adds	r3, r3, r2
 80107b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	00da      	lsls	r2, r3, #3
 80107ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107bc:	18d3      	adds	r3, r2, r3
 80107be:	4aaf      	ldr	r2, [pc, #700]	@ (8010a7c <HAL_PCD_EP_DB_Transmit+0x724>)
 80107c0:	4694      	mov	ip, r2
 80107c2:	4463      	add	r3, ip
 80107c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80107c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80107c8:	881b      	ldrh	r3, [r3, #0]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	059b      	lsls	r3, r3, #22
 80107ce:	0d9b      	lsrs	r3, r3, #22
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80107d4:	801a      	strh	r2, [r3, #0]
 80107d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	b29b      	uxth	r3, r3
 80107dc:	4aa9      	ldr	r2, [pc, #676]	@ (8010a84 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80107de:	4313      	orrs	r3, r2
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80107e4:	801a      	strh	r2, [r3, #0]
 80107e6:	e01b      	b.n	8010820 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	785b      	ldrb	r3, [r3, #1]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d117      	bne.n	8010820 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2250      	movs	r2, #80	@ 0x50
 80107fc:	5a9b      	ldrh	r3, [r3, r2]
 80107fe:	b29b      	uxth	r3, r3
 8010800:	001a      	movs	r2, r3
 8010802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010804:	189b      	adds	r3, r3, r2
 8010806:	667b      	str	r3, [r7, #100]	@ 0x64
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	00da      	lsls	r2, r3, #3
 801080e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010810:	18d3      	adds	r3, r2, r3
 8010812:	4a9a      	ldr	r2, [pc, #616]	@ (8010a7c <HAL_PCD_EP_DB_Transmit+0x724>)
 8010814:	4694      	mov	ip, r2
 8010816:	4463      	add	r3, ip
 8010818:	663b      	str	r3, [r7, #96]	@ 0x60
 801081a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801081c:	2200      	movs	r2, #0
 801081e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	677b      	str	r3, [r7, #116]	@ 0x74
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	785b      	ldrb	r3, [r3, #1]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d12b      	bne.n	8010886 <HAL_PCD_EP_DB_Transmit+0x52e>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2250      	movs	r2, #80	@ 0x50
 801083a:	5a9b      	ldrh	r3, [r3, r2]
 801083c:	b29b      	uxth	r3, r3
 801083e:	001a      	movs	r2, r3
 8010840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010842:	189b      	adds	r3, r3, r2
 8010844:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	00da      	lsls	r2, r3, #3
 801084c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801084e:	18d3      	adds	r3, r2, r3
 8010850:	4a8b      	ldr	r2, [pc, #556]	@ (8010a80 <HAL_PCD_EP_DB_Transmit+0x728>)
 8010852:	4694      	mov	ip, r2
 8010854:	4463      	add	r3, ip
 8010856:	2180      	movs	r1, #128	@ 0x80
 8010858:	187a      	adds	r2, r7, r1
 801085a:	6013      	str	r3, [r2, #0]
 801085c:	187b      	adds	r3, r7, r1
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	b29b      	uxth	r3, r3
 8010864:	059b      	lsls	r3, r3, #22
 8010866:	0d9b      	lsrs	r3, r3, #22
 8010868:	b29a      	uxth	r2, r3
 801086a:	187b      	adds	r3, r7, r1
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	801a      	strh	r2, [r3, #0]
 8010870:	187b      	adds	r3, r7, r1
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	b29b      	uxth	r3, r3
 8010878:	4a82      	ldr	r2, [pc, #520]	@ (8010a84 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801087a:	4313      	orrs	r3, r2
 801087c:	b29a      	uxth	r2, r3
 801087e:	187b      	adds	r3, r7, r1
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	801a      	strh	r2, [r3, #0]
 8010884:	e018      	b.n	80108b8 <HAL_PCD_EP_DB_Transmit+0x560>
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	785b      	ldrb	r3, [r3, #1]
 801088a:	2b01      	cmp	r3, #1
 801088c:	d114      	bne.n	80108b8 <HAL_PCD_EP_DB_Transmit+0x560>
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2250      	movs	r2, #80	@ 0x50
 8010894:	5a9b      	ldrh	r3, [r3, r2]
 8010896:	b29b      	uxth	r3, r3
 8010898:	001a      	movs	r2, r3
 801089a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801089c:	189b      	adds	r3, r3, r2
 801089e:	677b      	str	r3, [r7, #116]	@ 0x74
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	00da      	lsls	r2, r3, #3
 80108a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80108a8:	18d3      	adds	r3, r2, r3
 80108aa:	4a75      	ldr	r2, [pc, #468]	@ (8010a80 <HAL_PCD_EP_DB_Transmit+0x728>)
 80108ac:	4694      	mov	ip, r2
 80108ae:	4463      	add	r3, ip
 80108b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80108b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80108b4:	2200      	movs	r2, #0
 80108b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	781a      	ldrb	r2, [r3, #0]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	0011      	movs	r1, r2
 80108c0:	0018      	movs	r0, r3
 80108c2:	f007 fd81 	bl	80183c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80108c6:	1dbb      	adds	r3, r7, #6
 80108c8:	881a      	ldrh	r2, [r3, #0]
 80108ca:	2380      	movs	r3, #128	@ 0x80
 80108cc:	01db      	lsls	r3, r3, #7
 80108ce:	4013      	ands	r3, r2
 80108d0:	d000      	beq.n	80108d4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80108d2:	e11e      	b.n	8010b12 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	001a      	movs	r2, r3
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	18d3      	adds	r3, r2, r3
 80108e2:	881b      	ldrh	r3, [r3, #0]
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	2088      	movs	r0, #136	@ 0x88
 80108e8:	183b      	adds	r3, r7, r0
 80108ea:	4967      	ldr	r1, [pc, #412]	@ (8010a88 <HAL_PCD_EP_DB_Transmit+0x730>)
 80108ec:	400a      	ands	r2, r1
 80108ee:	801a      	strh	r2, [r3, #0]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	001a      	movs	r2, r3
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	18d3      	adds	r3, r2, r3
 80108fe:	183a      	adds	r2, r7, r0
 8010900:	8812      	ldrh	r2, [r2, #0]
 8010902:	4962      	ldr	r1, [pc, #392]	@ (8010a8c <HAL_PCD_EP_DB_Transmit+0x734>)
 8010904:	430a      	orrs	r2, r1
 8010906:	b292      	uxth	r2, r2
 8010908:	801a      	strh	r2, [r3, #0]
 801090a:	e102      	b.n	8010b12 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801090c:	1dbb      	adds	r3, r7, #6
 801090e:	881a      	ldrh	r2, [r3, #0]
 8010910:	2380      	movs	r3, #128	@ 0x80
 8010912:	01db      	lsls	r3, r3, #7
 8010914:	4013      	ands	r3, r2
 8010916:	d11a      	bne.n	801094e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	001a      	movs	r2, r3
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	009b      	lsls	r3, r3, #2
 8010924:	18d3      	adds	r3, r2, r3
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	b29a      	uxth	r2, r3
 801092a:	204e      	movs	r0, #78	@ 0x4e
 801092c:	183b      	adds	r3, r7, r0
 801092e:	4956      	ldr	r1, [pc, #344]	@ (8010a88 <HAL_PCD_EP_DB_Transmit+0x730>)
 8010930:	400a      	ands	r2, r1
 8010932:	801a      	strh	r2, [r3, #0]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	001a      	movs	r2, r3
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	18d3      	adds	r3, r2, r3
 8010942:	183a      	adds	r2, r7, r0
 8010944:	8812      	ldrh	r2, [r2, #0]
 8010946:	4951      	ldr	r1, [pc, #324]	@ (8010a8c <HAL_PCD_EP_DB_Transmit+0x734>)
 8010948:	430a      	orrs	r2, r1
 801094a:	b292      	uxth	r2, r2
 801094c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	2224      	movs	r2, #36	@ 0x24
 8010952:	5c9b      	ldrb	r3, [r3, r2]
 8010954:	2b01      	cmp	r3, #1
 8010956:	d000      	beq.n	801095a <HAL_PCD_EP_DB_Transmit+0x602>
 8010958:	e0db      	b.n	8010b12 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	695a      	ldr	r2, [r3, #20]
 801095e:	2186      	movs	r1, #134	@ 0x86
 8010960:	187b      	adds	r3, r7, r1
 8010962:	881b      	ldrh	r3, [r3, #0]
 8010964:	18d2      	adds	r2, r2, r3
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	69da      	ldr	r2, [r3, #28]
 801096e:	187b      	adds	r3, r7, r1
 8010970:	881b      	ldrh	r3, [r3, #0]
 8010972:	18d2      	adds	r2, r2, r3
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	6a1a      	ldr	r2, [r3, #32]
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	691b      	ldr	r3, [r3, #16]
 8010980:	429a      	cmp	r2, r3
 8010982:	d30c      	bcc.n	801099e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	691b      	ldr	r3, [r3, #16]
 8010988:	218c      	movs	r1, #140	@ 0x8c
 801098a:	187a      	adds	r2, r7, r1
 801098c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	6a1a      	ldr	r2, [r3, #32]
 8010992:	187b      	adds	r3, r7, r1
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	1ad2      	subs	r2, r2, r3
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	621a      	str	r2, [r3, #32]
 801099c:	e01a      	b.n	80109d4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	6a1b      	ldr	r3, [r3, #32]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d10a      	bne.n	80109bc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80109a6:	2386      	movs	r3, #134	@ 0x86
 80109a8:	18fb      	adds	r3, r7, r3
 80109aa:	881b      	ldrh	r3, [r3, #0]
 80109ac:	228c      	movs	r2, #140	@ 0x8c
 80109ae:	18ba      	adds	r2, r7, r2
 80109b0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2224      	movs	r2, #36	@ 0x24
 80109b6:	2100      	movs	r1, #0
 80109b8:	5499      	strb	r1, [r3, r2]
 80109ba:	e00b      	b.n	80109d4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	6a1b      	ldr	r3, [r3, #32]
 80109c0:	228c      	movs	r2, #140	@ 0x8c
 80109c2:	18ba      	adds	r2, r7, r2
 80109c4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2200      	movs	r2, #0
 80109ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	2224      	movs	r2, #36	@ 0x24
 80109d0:	2100      	movs	r1, #0
 80109d2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	785b      	ldrb	r3, [r3, #1]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d000      	beq.n	80109e4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80109e2:	e06e      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x76a>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2250      	movs	r2, #80	@ 0x50
 80109f0:	5a9b      	ldrh	r3, [r3, r2]
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	001a      	movs	r2, r3
 80109f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109f8:	189b      	adds	r3, r3, r2
 80109fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	00da      	lsls	r2, r3, #3
 8010a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a04:	18d3      	adds	r3, r2, r3
 8010a06:	4a1e      	ldr	r2, [pc, #120]	@ (8010a80 <HAL_PCD_EP_DB_Transmit+0x728>)
 8010a08:	4694      	mov	ip, r2
 8010a0a:	4463      	add	r3, ip
 8010a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	059b      	lsls	r3, r3, #22
 8010a16:	0d9b      	lsrs	r3, r3, #22
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a1c:	801a      	strh	r2, [r3, #0]
 8010a1e:	228c      	movs	r2, #140	@ 0x8c
 8010a20:	18bb      	adds	r3, r7, r2
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2b3e      	cmp	r3, #62	@ 0x3e
 8010a26:	d91a      	bls.n	8010a5e <HAL_PCD_EP_DB_Transmit+0x706>
 8010a28:	18bb      	adds	r3, r7, r2
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	095b      	lsrs	r3, r3, #5
 8010a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a30:	18bb      	adds	r3, r7, r2
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	221f      	movs	r2, #31
 8010a36:	4013      	ands	r3, r2
 8010a38:	d102      	bne.n	8010a40 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8010a3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	029b      	lsls	r3, r3, #10
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	4313      	orrs	r3, r2
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	4a0c      	ldr	r2, [pc, #48]	@ (8010a84 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8010a54:	4313      	orrs	r3, r2
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a5a:	801a      	strh	r2, [r3, #0]
 8010a5c:	e04d      	b.n	8010afa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010a5e:	238c      	movs	r3, #140	@ 0x8c
 8010a60:	18fb      	adds	r3, r7, r3
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d113      	bne.n	8010a90 <HAL_PCD_EP_DB_Transmit+0x738>
 8010a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a6a:	881b      	ldrh	r3, [r3, #0]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	4a05      	ldr	r2, [pc, #20]	@ (8010a84 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8010a70:	4313      	orrs	r3, r2
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a76:	801a      	strh	r2, [r3, #0]
 8010a78:	e03f      	b.n	8010afa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010a7a:	46c0      	nop			@ (mov r8, r8)
 8010a7c:	00000402 	.word	0x00000402
 8010a80:	00000406 	.word	0x00000406
 8010a84:	ffff8000 	.word	0xffff8000
 8010a88:	ffff8f8f 	.word	0xffff8f8f
 8010a8c:	ffffc080 	.word	0xffffc080
 8010a90:	228c      	movs	r2, #140	@ 0x8c
 8010a92:	18bb      	adds	r3, r7, r2
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	085b      	lsrs	r3, r3, #1
 8010a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a9a:	18bb      	adds	r3, r7, r2
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	d002      	beq.n	8010aaa <HAL_PCD_EP_DB_Transmit+0x752>
 8010aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010aac:	881b      	ldrh	r3, [r3, #0]
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	029b      	lsls	r3, r3, #10
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	b29a      	uxth	r2, r3
 8010abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010abe:	801a      	strh	r2, [r3, #0]
 8010ac0:	e01b      	b.n	8010afa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	785b      	ldrb	r3, [r3, #1]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d117      	bne.n	8010afa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2250      	movs	r2, #80	@ 0x50
 8010ad0:	5a9b      	ldrh	r3, [r3, r2]
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	001a      	movs	r2, r3
 8010ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ad8:	189b      	adds	r3, r3, r2
 8010ada:	657b      	str	r3, [r7, #84]	@ 0x54
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	00da      	lsls	r2, r3, #3
 8010ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ae4:	18d3      	adds	r3, r2, r3
 8010ae6:	4a21      	ldr	r2, [pc, #132]	@ (8010b6c <HAL_PCD_EP_DB_Transmit+0x814>)
 8010ae8:	4694      	mov	ip, r2
 8010aea:	4463      	add	r3, ip
 8010aec:	653b      	str	r3, [r7, #80]	@ 0x50
 8010aee:	238c      	movs	r3, #140	@ 0x8c
 8010af0:	18fb      	adds	r3, r7, r3
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010af8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6818      	ldr	r0, [r3, #0]
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	6959      	ldr	r1, [r3, #20]
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	895a      	ldrh	r2, [r3, #10]
 8010b06:	238c      	movs	r3, #140	@ 0x8c
 8010b08:	18fb      	adds	r3, r7, r3
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	f005 fbd7 	bl	80162c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	001a      	movs	r2, r3
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	18d3      	adds	r3, r2, r3
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	2014      	movs	r0, #20
 8010b26:	183b      	adds	r3, r7, r0
 8010b28:	4911      	ldr	r1, [pc, #68]	@ (8010b70 <HAL_PCD_EP_DB_Transmit+0x818>)
 8010b2a:	400a      	ands	r2, r1
 8010b2c:	801a      	strh	r2, [r3, #0]
 8010b2e:	183b      	adds	r3, r7, r0
 8010b30:	183a      	adds	r2, r7, r0
 8010b32:	8812      	ldrh	r2, [r2, #0]
 8010b34:	2110      	movs	r1, #16
 8010b36:	404a      	eors	r2, r1
 8010b38:	801a      	strh	r2, [r3, #0]
 8010b3a:	183b      	adds	r3, r7, r0
 8010b3c:	183a      	adds	r2, r7, r0
 8010b3e:	8812      	ldrh	r2, [r2, #0]
 8010b40:	2120      	movs	r1, #32
 8010b42:	404a      	eors	r2, r1
 8010b44:	801a      	strh	r2, [r3, #0]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	001a      	movs	r2, r3
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	009b      	lsls	r3, r3, #2
 8010b52:	18d3      	adds	r3, r2, r3
 8010b54:	183a      	adds	r2, r7, r0
 8010b56:	8812      	ldrh	r2, [r2, #0]
 8010b58:	4906      	ldr	r1, [pc, #24]	@ (8010b74 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8010b5a:	430a      	orrs	r2, r1
 8010b5c:	b292      	uxth	r2, r2
 8010b5e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	0018      	movs	r0, r3
 8010b64:	46bd      	mov	sp, r7
 8010b66:	b024      	add	sp, #144	@ 0x90
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	46c0      	nop			@ (mov r8, r8)
 8010b6c:	00000406 	.word	0x00000406
 8010b70:	ffff8fbf 	.word	0xffff8fbf
 8010b74:	ffff8080 	.word	0xffff8080

08010b78 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8010b78:	b590      	push	{r4, r7, lr}
 8010b7a:	b087      	sub	sp, #28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	0008      	movs	r0, r1
 8010b82:	0011      	movs	r1, r2
 8010b84:	607b      	str	r3, [r7, #4]
 8010b86:	240a      	movs	r4, #10
 8010b88:	193b      	adds	r3, r7, r4
 8010b8a:	1c02      	adds	r2, r0, #0
 8010b8c:	801a      	strh	r2, [r3, #0]
 8010b8e:	2308      	movs	r3, #8
 8010b90:	18fb      	adds	r3, r7, r3
 8010b92:	1c0a      	adds	r2, r1, #0
 8010b94:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8010b96:	0021      	movs	r1, r4
 8010b98:	187b      	adds	r3, r7, r1
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	2280      	movs	r2, #128	@ 0x80
 8010b9e:	4013      	ands	r3, r2
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00c      	beq.n	8010bc0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010ba6:	187b      	adds	r3, r7, r1
 8010ba8:	881b      	ldrh	r3, [r3, #0]
 8010baa:	2207      	movs	r2, #7
 8010bac:	4013      	ands	r3, r2
 8010bae:	1c5a      	adds	r2, r3, #1
 8010bb0:	0013      	movs	r3, r2
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	189b      	adds	r3, r3, r2
 8010bb6:	00db      	lsls	r3, r3, #3
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	18d3      	adds	r3, r2, r3
 8010bbc:	617b      	str	r3, [r7, #20]
 8010bbe:	e00b      	b.n	8010bd8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010bc0:	230a      	movs	r3, #10
 8010bc2:	18fb      	adds	r3, r7, r3
 8010bc4:	881a      	ldrh	r2, [r3, #0]
 8010bc6:	0013      	movs	r3, r2
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	189b      	adds	r3, r3, r2
 8010bcc:	00db      	lsls	r3, r3, #3
 8010bce:	3369      	adds	r3, #105	@ 0x69
 8010bd0:	33ff      	adds	r3, #255	@ 0xff
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	18d3      	adds	r3, r2, r3
 8010bd6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8010bd8:	2308      	movs	r3, #8
 8010bda:	18fb      	adds	r3, r7, r3
 8010bdc:	881b      	ldrh	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d107      	bne.n	8010bf2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	2200      	movs	r2, #0
 8010be6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	80da      	strh	r2, [r3, #6]
 8010bf0:	e00b      	b.n	8010c0a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	0c1b      	lsrs	r3, r3, #16
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	0018      	movs	r0, r3
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	b007      	add	sp, #28
 8010c12:	bd90      	pop	{r4, r7, pc}

08010c14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	23ba      	movs	r3, #186	@ 0xba
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	2101      	movs	r1, #1
 8010c2a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	23b8      	movs	r3, #184	@ 0xb8
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	2100      	movs	r1, #0
 8010c34:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2254      	movs	r2, #84	@ 0x54
 8010c3a:	5a9b      	ldrh	r3, [r3, r2]
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	2201      	movs	r2, #1
 8010c40:	4313      	orrs	r3, r2
 8010c42:	b299      	uxth	r1, r3
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2254      	movs	r2, #84	@ 0x54
 8010c48:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2254      	movs	r2, #84	@ 0x54
 8010c4e:	5a9b      	ldrh	r3, [r3, r2]
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	2202      	movs	r2, #2
 8010c54:	4313      	orrs	r3, r2
 8010c56:	b299      	uxth	r1, r3
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2254      	movs	r2, #84	@ 0x54
 8010c5c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	0018      	movs	r0, r3
 8010c62:	46bd      	mov	sp, r7
 8010c64:	b004      	add	sp, #16
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	000a      	movs	r2, r1
 8010c72:	1cfb      	adds	r3, r7, #3
 8010c74:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8010c76:	46c0      	nop			@ (mov r8, r8)
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	b002      	add	sp, #8
 8010c7c:	bd80      	pop	{r7, pc}
	...

08010c80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8010c84:	4b04      	ldr	r3, [pc, #16]	@ (8010c98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	4b03      	ldr	r3, [pc, #12]	@ (8010c98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8010c8a:	2180      	movs	r1, #128	@ 0x80
 8010c8c:	0049      	lsls	r1, r1, #1
 8010c8e:	430a      	orrs	r2, r1
 8010c90:	601a      	str	r2, [r3, #0]
}
 8010c92:	46c0      	nop			@ (mov r8, r8)
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	40007000 	.word	0x40007000

08010c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010c9c:	b5b0      	push	{r4, r5, r7, lr}
 8010c9e:	b08a      	sub	sp, #40	@ 0x28
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d102      	bne.n	8010cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010caa:	2301      	movs	r3, #1
 8010cac:	f000 fbbf 	bl	801142e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010cb0:	4bc9      	ldr	r3, [pc, #804]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	220c      	movs	r2, #12
 8010cb6:	4013      	ands	r3, r2
 8010cb8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010cba:	4bc7      	ldr	r3, [pc, #796]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010cbc:	68da      	ldr	r2, [r3, #12]
 8010cbe:	2380      	movs	r3, #128	@ 0x80
 8010cc0:	025b      	lsls	r3, r3, #9
 8010cc2:	4013      	ands	r3, r2
 8010cc4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	4013      	ands	r3, r2
 8010cce:	d100      	bne.n	8010cd2 <HAL_RCC_OscConfig+0x36>
 8010cd0:	e07e      	b.n	8010dd0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	2b08      	cmp	r3, #8
 8010cd6:	d007      	beq.n	8010ce8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	2b0c      	cmp	r3, #12
 8010cdc:	d112      	bne.n	8010d04 <HAL_RCC_OscConfig+0x68>
 8010cde:	69ba      	ldr	r2, [r7, #24]
 8010ce0:	2380      	movs	r3, #128	@ 0x80
 8010ce2:	025b      	lsls	r3, r3, #9
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d10d      	bne.n	8010d04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ce8:	4bbb      	ldr	r3, [pc, #748]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	2380      	movs	r3, #128	@ 0x80
 8010cee:	029b      	lsls	r3, r3, #10
 8010cf0:	4013      	ands	r3, r2
 8010cf2:	d100      	bne.n	8010cf6 <HAL_RCC_OscConfig+0x5a>
 8010cf4:	e06b      	b.n	8010dce <HAL_RCC_OscConfig+0x132>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d167      	bne.n	8010dce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	f000 fb95 	bl	801142e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	685a      	ldr	r2, [r3, #4]
 8010d08:	2380      	movs	r3, #128	@ 0x80
 8010d0a:	025b      	lsls	r3, r3, #9
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d107      	bne.n	8010d20 <HAL_RCC_OscConfig+0x84>
 8010d10:	4bb1      	ldr	r3, [pc, #708]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	4bb0      	ldr	r3, [pc, #704]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d16:	2180      	movs	r1, #128	@ 0x80
 8010d18:	0249      	lsls	r1, r1, #9
 8010d1a:	430a      	orrs	r2, r1
 8010d1c:	601a      	str	r2, [r3, #0]
 8010d1e:	e027      	b.n	8010d70 <HAL_RCC_OscConfig+0xd4>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	685a      	ldr	r2, [r3, #4]
 8010d24:	23a0      	movs	r3, #160	@ 0xa0
 8010d26:	02db      	lsls	r3, r3, #11
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d10e      	bne.n	8010d4a <HAL_RCC_OscConfig+0xae>
 8010d2c:	4baa      	ldr	r3, [pc, #680]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	4ba9      	ldr	r3, [pc, #676]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d32:	2180      	movs	r1, #128	@ 0x80
 8010d34:	02c9      	lsls	r1, r1, #11
 8010d36:	430a      	orrs	r2, r1
 8010d38:	601a      	str	r2, [r3, #0]
 8010d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	4ba6      	ldr	r3, [pc, #664]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d40:	2180      	movs	r1, #128	@ 0x80
 8010d42:	0249      	lsls	r1, r1, #9
 8010d44:	430a      	orrs	r2, r1
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	e012      	b.n	8010d70 <HAL_RCC_OscConfig+0xd4>
 8010d4a:	4ba3      	ldr	r3, [pc, #652]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d4c:	681a      	ldr	r2, [r3, #0]
 8010d4e:	4ba2      	ldr	r3, [pc, #648]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d50:	49a2      	ldr	r1, [pc, #648]	@ (8010fdc <HAL_RCC_OscConfig+0x340>)
 8010d52:	400a      	ands	r2, r1
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	4ba0      	ldr	r3, [pc, #640]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	2380      	movs	r3, #128	@ 0x80
 8010d5c:	025b      	lsls	r3, r3, #9
 8010d5e:	4013      	ands	r3, r2
 8010d60:	60fb      	str	r3, [r7, #12]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	4b9c      	ldr	r3, [pc, #624]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	4b9b      	ldr	r3, [pc, #620]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d6a:	499d      	ldr	r1, [pc, #628]	@ (8010fe0 <HAL_RCC_OscConfig+0x344>)
 8010d6c:	400a      	ands	r2, r1
 8010d6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d015      	beq.n	8010da4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d78:	f7fa fb92 	bl	800b4a0 <HAL_GetTick>
 8010d7c:	0003      	movs	r3, r0
 8010d7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010d80:	e009      	b.n	8010d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010d82:	f7fa fb8d 	bl	800b4a0 <HAL_GetTick>
 8010d86:	0002      	movs	r2, r0
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	2b64      	cmp	r3, #100	@ 0x64
 8010d8e:	d902      	bls.n	8010d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010d90:	2303      	movs	r3, #3
 8010d92:	f000 fb4c 	bl	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010d96:	4b90      	ldr	r3, [pc, #576]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010d98:	681a      	ldr	r2, [r3, #0]
 8010d9a:	2380      	movs	r3, #128	@ 0x80
 8010d9c:	029b      	lsls	r3, r3, #10
 8010d9e:	4013      	ands	r3, r2
 8010da0:	d0ef      	beq.n	8010d82 <HAL_RCC_OscConfig+0xe6>
 8010da2:	e015      	b.n	8010dd0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010da4:	f7fa fb7c 	bl	800b4a0 <HAL_GetTick>
 8010da8:	0003      	movs	r3, r0
 8010daa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010dac:	e008      	b.n	8010dc0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010dae:	f7fa fb77 	bl	800b4a0 <HAL_GetTick>
 8010db2:	0002      	movs	r2, r0
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	2b64      	cmp	r3, #100	@ 0x64
 8010dba:	d901      	bls.n	8010dc0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8010dbc:	2303      	movs	r3, #3
 8010dbe:	e336      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010dc0:	4b85      	ldr	r3, [pc, #532]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	2380      	movs	r3, #128	@ 0x80
 8010dc6:	029b      	lsls	r3, r3, #10
 8010dc8:	4013      	ands	r3, r2
 8010dca:	d1f0      	bne.n	8010dae <HAL_RCC_OscConfig+0x112>
 8010dcc:	e000      	b.n	8010dd0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010dce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2202      	movs	r2, #2
 8010dd6:	4013      	ands	r3, r2
 8010dd8:	d100      	bne.n	8010ddc <HAL_RCC_OscConfig+0x140>
 8010dda:	e099      	b.n	8010f10 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8010de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de4:	2220      	movs	r2, #32
 8010de6:	4013      	ands	r3, r2
 8010de8:	d009      	beq.n	8010dfe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8010dea:	4b7b      	ldr	r3, [pc, #492]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	4b7a      	ldr	r3, [pc, #488]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010df0:	2120      	movs	r1, #32
 8010df2:	430a      	orrs	r2, r1
 8010df4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8010df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df8:	2220      	movs	r2, #32
 8010dfa:	4393      	bics	r3, r2
 8010dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	2b04      	cmp	r3, #4
 8010e02:	d005      	beq.n	8010e10 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	2b0c      	cmp	r3, #12
 8010e08:	d13e      	bne.n	8010e88 <HAL_RCC_OscConfig+0x1ec>
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d13b      	bne.n	8010e88 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8010e10:	4b71      	ldr	r3, [pc, #452]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2204      	movs	r2, #4
 8010e16:	4013      	ands	r3, r2
 8010e18:	d004      	beq.n	8010e24 <HAL_RCC_OscConfig+0x188>
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d101      	bne.n	8010e24 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	e304      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e24:	4b6c      	ldr	r3, [pc, #432]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	4a6e      	ldr	r2, [pc, #440]	@ (8010fe4 <HAL_RCC_OscConfig+0x348>)
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	0019      	movs	r1, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	691b      	ldr	r3, [r3, #16]
 8010e32:	021a      	lsls	r2, r3, #8
 8010e34:	4b68      	ldr	r3, [pc, #416]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e36:	430a      	orrs	r2, r1
 8010e38:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8010e3a:	4b67      	ldr	r3, [pc, #412]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2209      	movs	r2, #9
 8010e40:	4393      	bics	r3, r2
 8010e42:	0019      	movs	r1, r3
 8010e44:	4b64      	ldr	r3, [pc, #400]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e48:	430a      	orrs	r2, r1
 8010e4a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010e4c:	f000 fc42 	bl	80116d4 <HAL_RCC_GetSysClockFreq>
 8010e50:	0001      	movs	r1, r0
 8010e52:	4b61      	ldr	r3, [pc, #388]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	091b      	lsrs	r3, r3, #4
 8010e58:	220f      	movs	r2, #15
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	4a62      	ldr	r2, [pc, #392]	@ (8010fe8 <HAL_RCC_OscConfig+0x34c>)
 8010e5e:	5cd3      	ldrb	r3, [r2, r3]
 8010e60:	000a      	movs	r2, r1
 8010e62:	40da      	lsrs	r2, r3
 8010e64:	4b61      	ldr	r3, [pc, #388]	@ (8010fec <HAL_RCC_OscConfig+0x350>)
 8010e66:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8010e68:	4b61      	ldr	r3, [pc, #388]	@ (8010ff0 <HAL_RCC_OscConfig+0x354>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2513      	movs	r5, #19
 8010e6e:	197c      	adds	r4, r7, r5
 8010e70:	0018      	movs	r0, r3
 8010e72:	f7fa facf 	bl	800b414 <HAL_InitTick>
 8010e76:	0003      	movs	r3, r0
 8010e78:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8010e7a:	197b      	adds	r3, r7, r5
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d046      	beq.n	8010f10 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8010e82:	197b      	adds	r3, r7, r5
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	e2d2      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8010e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d027      	beq.n	8010ede <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8010e8e:	4b52      	ldr	r3, [pc, #328]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2209      	movs	r2, #9
 8010e94:	4393      	bics	r3, r2
 8010e96:	0019      	movs	r1, r3
 8010e98:	4b4f      	ldr	r3, [pc, #316]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e9c:	430a      	orrs	r2, r1
 8010e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010ea0:	f7fa fafe 	bl	800b4a0 <HAL_GetTick>
 8010ea4:	0003      	movs	r3, r0
 8010ea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010ea8:	e008      	b.n	8010ebc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010eaa:	f7fa faf9 	bl	800b4a0 <HAL_GetTick>
 8010eae:	0002      	movs	r2, r0
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d901      	bls.n	8010ebc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8010eb8:	2303      	movs	r3, #3
 8010eba:	e2b8      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010ebc:	4b46      	ldr	r3, [pc, #280]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2204      	movs	r2, #4
 8010ec2:	4013      	ands	r3, r2
 8010ec4:	d0f1      	beq.n	8010eaa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ec6:	4b44      	ldr	r3, [pc, #272]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	4a46      	ldr	r2, [pc, #280]	@ (8010fe4 <HAL_RCC_OscConfig+0x348>)
 8010ecc:	4013      	ands	r3, r2
 8010ece:	0019      	movs	r1, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	691b      	ldr	r3, [r3, #16]
 8010ed4:	021a      	lsls	r2, r3, #8
 8010ed6:	4b40      	ldr	r3, [pc, #256]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010ed8:	430a      	orrs	r2, r1
 8010eda:	605a      	str	r2, [r3, #4]
 8010edc:	e018      	b.n	8010f10 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010ede:	4b3e      	ldr	r3, [pc, #248]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010ee4:	2101      	movs	r1, #1
 8010ee6:	438a      	bics	r2, r1
 8010ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010eea:	f7fa fad9 	bl	800b4a0 <HAL_GetTick>
 8010eee:	0003      	movs	r3, r0
 8010ef0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010ef2:	e008      	b.n	8010f06 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010ef4:	f7fa fad4 	bl	800b4a0 <HAL_GetTick>
 8010ef8:	0002      	movs	r2, r0
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d901      	bls.n	8010f06 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8010f02:	2303      	movs	r3, #3
 8010f04:	e293      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010f06:	4b34      	ldr	r3, [pc, #208]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2204      	movs	r2, #4
 8010f0c:	4013      	ands	r3, r2
 8010f0e:	d1f1      	bne.n	8010ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2210      	movs	r2, #16
 8010f16:	4013      	ands	r3, r2
 8010f18:	d100      	bne.n	8010f1c <HAL_RCC_OscConfig+0x280>
 8010f1a:	e0a2      	b.n	8011062 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d140      	bne.n	8010fa4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010f22:	4b2d      	ldr	r3, [pc, #180]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	2380      	movs	r3, #128	@ 0x80
 8010f28:	009b      	lsls	r3, r3, #2
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	d005      	beq.n	8010f3a <HAL_RCC_OscConfig+0x29e>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	69db      	ldr	r3, [r3, #28]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d101      	bne.n	8010f3a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8010f36:	2301      	movs	r3, #1
 8010f38:	e279      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010f3a:	4b27      	ldr	r3, [pc, #156]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8010ff4 <HAL_RCC_OscConfig+0x358>)
 8010f40:	4013      	ands	r3, r2
 8010f42:	0019      	movs	r1, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f48:	4b23      	ldr	r3, [pc, #140]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010f4a:	430a      	orrs	r2, r1
 8010f4c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010f4e:	4b22      	ldr	r3, [pc, #136]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	021b      	lsls	r3, r3, #8
 8010f54:	0a19      	lsrs	r1, r3, #8
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6a1b      	ldr	r3, [r3, #32]
 8010f5a:	061a      	lsls	r2, r3, #24
 8010f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010f5e:	430a      	orrs	r2, r1
 8010f60:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f66:	0b5b      	lsrs	r3, r3, #13
 8010f68:	3301      	adds	r3, #1
 8010f6a:	2280      	movs	r2, #128	@ 0x80
 8010f6c:	0212      	lsls	r2, r2, #8
 8010f6e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8010f70:	4b19      	ldr	r3, [pc, #100]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	091b      	lsrs	r3, r3, #4
 8010f76:	210f      	movs	r1, #15
 8010f78:	400b      	ands	r3, r1
 8010f7a:	491b      	ldr	r1, [pc, #108]	@ (8010fe8 <HAL_RCC_OscConfig+0x34c>)
 8010f7c:	5ccb      	ldrb	r3, [r1, r3]
 8010f7e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010f80:	4b1a      	ldr	r3, [pc, #104]	@ (8010fec <HAL_RCC_OscConfig+0x350>)
 8010f82:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8010f84:	4b1a      	ldr	r3, [pc, #104]	@ (8010ff0 <HAL_RCC_OscConfig+0x354>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2513      	movs	r5, #19
 8010f8a:	197c      	adds	r4, r7, r5
 8010f8c:	0018      	movs	r0, r3
 8010f8e:	f7fa fa41 	bl	800b414 <HAL_InitTick>
 8010f92:	0003      	movs	r3, r0
 8010f94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8010f96:	197b      	adds	r3, r7, r5
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d061      	beq.n	8011062 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8010f9e:	197b      	adds	r3, r7, r5
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	e244      	b.n	801142e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	69db      	ldr	r3, [r3, #28]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d040      	beq.n	801102e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010fac:	4b0a      	ldr	r3, [pc, #40]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010fae:	681a      	ldr	r2, [r3, #0]
 8010fb0:	4b09      	ldr	r3, [pc, #36]	@ (8010fd8 <HAL_RCC_OscConfig+0x33c>)
 8010fb2:	2180      	movs	r1, #128	@ 0x80
 8010fb4:	0049      	lsls	r1, r1, #1
 8010fb6:	430a      	orrs	r2, r1
 8010fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010fba:	f7fa fa71 	bl	800b4a0 <HAL_GetTick>
 8010fbe:	0003      	movs	r3, r0
 8010fc0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010fc2:	e019      	b.n	8010ff8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010fc4:	f7fa fa6c 	bl	800b4a0 <HAL_GetTick>
 8010fc8:	0002      	movs	r2, r0
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	d912      	bls.n	8010ff8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8010fd2:	2303      	movs	r3, #3
 8010fd4:	e22b      	b.n	801142e <HAL_RCC_OscConfig+0x792>
 8010fd6:	46c0      	nop			@ (mov r8, r8)
 8010fd8:	40021000 	.word	0x40021000
 8010fdc:	fffeffff 	.word	0xfffeffff
 8010fe0:	fffbffff 	.word	0xfffbffff
 8010fe4:	ffffe0ff 	.word	0xffffe0ff
 8010fe8:	0801f2a0 	.word	0x0801f2a0
 8010fec:	20000070 	.word	0x20000070
 8010ff0:	20000084 	.word	0x20000084
 8010ff4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010ff8:	4bca      	ldr	r3, [pc, #808]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	2380      	movs	r3, #128	@ 0x80
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	4013      	ands	r3, r2
 8011002:	d0df      	beq.n	8010fc4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011004:	4bc7      	ldr	r3, [pc, #796]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	4ac7      	ldr	r2, [pc, #796]	@ (8011328 <HAL_RCC_OscConfig+0x68c>)
 801100a:	4013      	ands	r3, r2
 801100c:	0019      	movs	r1, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011012:	4bc4      	ldr	r3, [pc, #784]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011014:	430a      	orrs	r2, r1
 8011016:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011018:	4bc2      	ldr	r3, [pc, #776]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	021b      	lsls	r3, r3, #8
 801101e:	0a19      	lsrs	r1, r3, #8
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6a1b      	ldr	r3, [r3, #32]
 8011024:	061a      	lsls	r2, r3, #24
 8011026:	4bbf      	ldr	r3, [pc, #764]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011028:	430a      	orrs	r2, r1
 801102a:	605a      	str	r2, [r3, #4]
 801102c:	e019      	b.n	8011062 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801102e:	4bbd      	ldr	r3, [pc, #756]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	4bbc      	ldr	r3, [pc, #752]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011034:	49bd      	ldr	r1, [pc, #756]	@ (801132c <HAL_RCC_OscConfig+0x690>)
 8011036:	400a      	ands	r2, r1
 8011038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801103a:	f7fa fa31 	bl	800b4a0 <HAL_GetTick>
 801103e:	0003      	movs	r3, r0
 8011040:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011042:	e008      	b.n	8011056 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011044:	f7fa fa2c 	bl	800b4a0 <HAL_GetTick>
 8011048:	0002      	movs	r2, r0
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	2b02      	cmp	r3, #2
 8011050:	d901      	bls.n	8011056 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8011052:	2303      	movs	r3, #3
 8011054:	e1eb      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011056:	4bb3      	ldr	r3, [pc, #716]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	2380      	movs	r3, #128	@ 0x80
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	4013      	ands	r3, r2
 8011060:	d1f0      	bne.n	8011044 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2208      	movs	r2, #8
 8011068:	4013      	ands	r3, r2
 801106a:	d036      	beq.n	80110da <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	695b      	ldr	r3, [r3, #20]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d019      	beq.n	80110a8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011074:	4bab      	ldr	r3, [pc, #684]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011078:	4baa      	ldr	r3, [pc, #680]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801107a:	2101      	movs	r1, #1
 801107c:	430a      	orrs	r2, r1
 801107e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011080:	f7fa fa0e 	bl	800b4a0 <HAL_GetTick>
 8011084:	0003      	movs	r3, r0
 8011086:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011088:	e008      	b.n	801109c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801108a:	f7fa fa09 	bl	800b4a0 <HAL_GetTick>
 801108e:	0002      	movs	r2, r0
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	1ad3      	subs	r3, r2, r3
 8011094:	2b02      	cmp	r3, #2
 8011096:	d901      	bls.n	801109c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8011098:	2303      	movs	r3, #3
 801109a:	e1c8      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801109c:	4ba1      	ldr	r3, [pc, #644]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801109e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110a0:	2202      	movs	r2, #2
 80110a2:	4013      	ands	r3, r2
 80110a4:	d0f1      	beq.n	801108a <HAL_RCC_OscConfig+0x3ee>
 80110a6:	e018      	b.n	80110da <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80110a8:	4b9e      	ldr	r3, [pc, #632]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80110aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110ac:	4b9d      	ldr	r3, [pc, #628]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80110ae:	2101      	movs	r1, #1
 80110b0:	438a      	bics	r2, r1
 80110b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80110b4:	f7fa f9f4 	bl	800b4a0 <HAL_GetTick>
 80110b8:	0003      	movs	r3, r0
 80110ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80110bc:	e008      	b.n	80110d0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80110be:	f7fa f9ef 	bl	800b4a0 <HAL_GetTick>
 80110c2:	0002      	movs	r2, r0
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d901      	bls.n	80110d0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80110cc:	2303      	movs	r3, #3
 80110ce:	e1ae      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80110d0:	4b94      	ldr	r3, [pc, #592]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80110d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110d4:	2202      	movs	r2, #2
 80110d6:	4013      	ands	r3, r2
 80110d8:	d1f1      	bne.n	80110be <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2204      	movs	r2, #4
 80110e0:	4013      	ands	r3, r2
 80110e2:	d100      	bne.n	80110e6 <HAL_RCC_OscConfig+0x44a>
 80110e4:	e0ae      	b.n	8011244 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80110e6:	2023      	movs	r0, #35	@ 0x23
 80110e8:	183b      	adds	r3, r7, r0
 80110ea:	2200      	movs	r2, #0
 80110ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80110ee:	4b8d      	ldr	r3, [pc, #564]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80110f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110f2:	2380      	movs	r3, #128	@ 0x80
 80110f4:	055b      	lsls	r3, r3, #21
 80110f6:	4013      	ands	r3, r2
 80110f8:	d109      	bne.n	801110e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80110fa:	4b8a      	ldr	r3, [pc, #552]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80110fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110fe:	4b89      	ldr	r3, [pc, #548]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011100:	2180      	movs	r1, #128	@ 0x80
 8011102:	0549      	lsls	r1, r1, #21
 8011104:	430a      	orrs	r2, r1
 8011106:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8011108:	183b      	adds	r3, r7, r0
 801110a:	2201      	movs	r2, #1
 801110c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801110e:	4b88      	ldr	r3, [pc, #544]	@ (8011330 <HAL_RCC_OscConfig+0x694>)
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	2380      	movs	r3, #128	@ 0x80
 8011114:	005b      	lsls	r3, r3, #1
 8011116:	4013      	ands	r3, r2
 8011118:	d11a      	bne.n	8011150 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801111a:	4b85      	ldr	r3, [pc, #532]	@ (8011330 <HAL_RCC_OscConfig+0x694>)
 801111c:	681a      	ldr	r2, [r3, #0]
 801111e:	4b84      	ldr	r3, [pc, #528]	@ (8011330 <HAL_RCC_OscConfig+0x694>)
 8011120:	2180      	movs	r1, #128	@ 0x80
 8011122:	0049      	lsls	r1, r1, #1
 8011124:	430a      	orrs	r2, r1
 8011126:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011128:	f7fa f9ba 	bl	800b4a0 <HAL_GetTick>
 801112c:	0003      	movs	r3, r0
 801112e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011130:	e008      	b.n	8011144 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011132:	f7fa f9b5 	bl	800b4a0 <HAL_GetTick>
 8011136:	0002      	movs	r2, r0
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	2b64      	cmp	r3, #100	@ 0x64
 801113e:	d901      	bls.n	8011144 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8011140:	2303      	movs	r3, #3
 8011142:	e174      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011144:	4b7a      	ldr	r3, [pc, #488]	@ (8011330 <HAL_RCC_OscConfig+0x694>)
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	2380      	movs	r3, #128	@ 0x80
 801114a:	005b      	lsls	r3, r3, #1
 801114c:	4013      	ands	r3, r2
 801114e:	d0f0      	beq.n	8011132 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	689a      	ldr	r2, [r3, #8]
 8011154:	2380      	movs	r3, #128	@ 0x80
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	429a      	cmp	r2, r3
 801115a:	d107      	bne.n	801116c <HAL_RCC_OscConfig+0x4d0>
 801115c:	4b71      	ldr	r3, [pc, #452]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801115e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011160:	4b70      	ldr	r3, [pc, #448]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011162:	2180      	movs	r1, #128	@ 0x80
 8011164:	0049      	lsls	r1, r1, #1
 8011166:	430a      	orrs	r2, r1
 8011168:	651a      	str	r2, [r3, #80]	@ 0x50
 801116a:	e031      	b.n	80111d0 <HAL_RCC_OscConfig+0x534>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	689b      	ldr	r3, [r3, #8]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d10c      	bne.n	801118e <HAL_RCC_OscConfig+0x4f2>
 8011174:	4b6b      	ldr	r3, [pc, #428]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011178:	4b6a      	ldr	r3, [pc, #424]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801117a:	496c      	ldr	r1, [pc, #432]	@ (801132c <HAL_RCC_OscConfig+0x690>)
 801117c:	400a      	ands	r2, r1
 801117e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011180:	4b68      	ldr	r3, [pc, #416]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011184:	4b67      	ldr	r3, [pc, #412]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011186:	496b      	ldr	r1, [pc, #428]	@ (8011334 <HAL_RCC_OscConfig+0x698>)
 8011188:	400a      	ands	r2, r1
 801118a:	651a      	str	r2, [r3, #80]	@ 0x50
 801118c:	e020      	b.n	80111d0 <HAL_RCC_OscConfig+0x534>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	23a0      	movs	r3, #160	@ 0xa0
 8011194:	00db      	lsls	r3, r3, #3
 8011196:	429a      	cmp	r2, r3
 8011198:	d10e      	bne.n	80111b8 <HAL_RCC_OscConfig+0x51c>
 801119a:	4b62      	ldr	r3, [pc, #392]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801119c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801119e:	4b61      	ldr	r3, [pc, #388]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111a0:	2180      	movs	r1, #128	@ 0x80
 80111a2:	00c9      	lsls	r1, r1, #3
 80111a4:	430a      	orrs	r2, r1
 80111a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80111a8:	4b5e      	ldr	r3, [pc, #376]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111ac:	4b5d      	ldr	r3, [pc, #372]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111ae:	2180      	movs	r1, #128	@ 0x80
 80111b0:	0049      	lsls	r1, r1, #1
 80111b2:	430a      	orrs	r2, r1
 80111b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80111b6:	e00b      	b.n	80111d0 <HAL_RCC_OscConfig+0x534>
 80111b8:	4b5a      	ldr	r3, [pc, #360]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111bc:	4b59      	ldr	r3, [pc, #356]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111be:	495b      	ldr	r1, [pc, #364]	@ (801132c <HAL_RCC_OscConfig+0x690>)
 80111c0:	400a      	ands	r2, r1
 80111c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80111c4:	4b57      	ldr	r3, [pc, #348]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111c8:	4b56      	ldr	r3, [pc, #344]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111ca:	495a      	ldr	r1, [pc, #360]	@ (8011334 <HAL_RCC_OscConfig+0x698>)
 80111cc:	400a      	ands	r2, r1
 80111ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	689b      	ldr	r3, [r3, #8]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d015      	beq.n	8011204 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80111d8:	f7fa f962 	bl	800b4a0 <HAL_GetTick>
 80111dc:	0003      	movs	r3, r0
 80111de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80111e0:	e009      	b.n	80111f6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80111e2:	f7fa f95d 	bl	800b4a0 <HAL_GetTick>
 80111e6:	0002      	movs	r2, r0
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	4a52      	ldr	r2, [pc, #328]	@ (8011338 <HAL_RCC_OscConfig+0x69c>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d901      	bls.n	80111f6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80111f2:	2303      	movs	r3, #3
 80111f4:	e11b      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80111f6:	4b4b      	ldr	r3, [pc, #300]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80111f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111fa:	2380      	movs	r3, #128	@ 0x80
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	4013      	ands	r3, r2
 8011200:	d0ef      	beq.n	80111e2 <HAL_RCC_OscConfig+0x546>
 8011202:	e014      	b.n	801122e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011204:	f7fa f94c 	bl	800b4a0 <HAL_GetTick>
 8011208:	0003      	movs	r3, r0
 801120a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801120c:	e009      	b.n	8011222 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801120e:	f7fa f947 	bl	800b4a0 <HAL_GetTick>
 8011212:	0002      	movs	r2, r0
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	4a47      	ldr	r2, [pc, #284]	@ (8011338 <HAL_RCC_OscConfig+0x69c>)
 801121a:	4293      	cmp	r3, r2
 801121c:	d901      	bls.n	8011222 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801121e:	2303      	movs	r3, #3
 8011220:	e105      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011222:	4b40      	ldr	r3, [pc, #256]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011226:	2380      	movs	r3, #128	@ 0x80
 8011228:	009b      	lsls	r3, r3, #2
 801122a:	4013      	ands	r3, r2
 801122c:	d1ef      	bne.n	801120e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801122e:	2323      	movs	r3, #35	@ 0x23
 8011230:	18fb      	adds	r3, r7, r3
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d105      	bne.n	8011244 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011238:	4b3a      	ldr	r3, [pc, #232]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801123a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801123c:	4b39      	ldr	r3, [pc, #228]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801123e:	493f      	ldr	r1, [pc, #252]	@ (801133c <HAL_RCC_OscConfig+0x6a0>)
 8011240:	400a      	ands	r2, r1
 8011242:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2220      	movs	r2, #32
 801124a:	4013      	ands	r3, r2
 801124c:	d049      	beq.n	80112e2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	699b      	ldr	r3, [r3, #24]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d026      	beq.n	80112a4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011256:	4b33      	ldr	r3, [pc, #204]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011258:	689a      	ldr	r2, [r3, #8]
 801125a:	4b32      	ldr	r3, [pc, #200]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801125c:	2101      	movs	r1, #1
 801125e:	430a      	orrs	r2, r1
 8011260:	609a      	str	r2, [r3, #8]
 8011262:	4b30      	ldr	r3, [pc, #192]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011266:	4b2f      	ldr	r3, [pc, #188]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011268:	2101      	movs	r1, #1
 801126a:	430a      	orrs	r2, r1
 801126c:	635a      	str	r2, [r3, #52]	@ 0x34
 801126e:	4b34      	ldr	r3, [pc, #208]	@ (8011340 <HAL_RCC_OscConfig+0x6a4>)
 8011270:	6a1a      	ldr	r2, [r3, #32]
 8011272:	4b33      	ldr	r3, [pc, #204]	@ (8011340 <HAL_RCC_OscConfig+0x6a4>)
 8011274:	2180      	movs	r1, #128	@ 0x80
 8011276:	0189      	lsls	r1, r1, #6
 8011278:	430a      	orrs	r2, r1
 801127a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801127c:	f7fa f910 	bl	800b4a0 <HAL_GetTick>
 8011280:	0003      	movs	r3, r0
 8011282:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011284:	e008      	b.n	8011298 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011286:	f7fa f90b 	bl	800b4a0 <HAL_GetTick>
 801128a:	0002      	movs	r2, r0
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	2b02      	cmp	r3, #2
 8011292:	d901      	bls.n	8011298 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e0ca      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011298:	4b22      	ldr	r3, [pc, #136]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	2202      	movs	r2, #2
 801129e:	4013      	ands	r3, r2
 80112a0:	d0f1      	beq.n	8011286 <HAL_RCC_OscConfig+0x5ea>
 80112a2:	e01e      	b.n	80112e2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80112a4:	4b1f      	ldr	r3, [pc, #124]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80112a6:	689a      	ldr	r2, [r3, #8]
 80112a8:	4b1e      	ldr	r3, [pc, #120]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80112aa:	2101      	movs	r1, #1
 80112ac:	438a      	bics	r2, r1
 80112ae:	609a      	str	r2, [r3, #8]
 80112b0:	4b23      	ldr	r3, [pc, #140]	@ (8011340 <HAL_RCC_OscConfig+0x6a4>)
 80112b2:	6a1a      	ldr	r2, [r3, #32]
 80112b4:	4b22      	ldr	r3, [pc, #136]	@ (8011340 <HAL_RCC_OscConfig+0x6a4>)
 80112b6:	4923      	ldr	r1, [pc, #140]	@ (8011344 <HAL_RCC_OscConfig+0x6a8>)
 80112b8:	400a      	ands	r2, r1
 80112ba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80112bc:	f7fa f8f0 	bl	800b4a0 <HAL_GetTick>
 80112c0:	0003      	movs	r3, r0
 80112c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80112c4:	e008      	b.n	80112d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80112c6:	f7fa f8eb 	bl	800b4a0 <HAL_GetTick>
 80112ca:	0002      	movs	r2, r0
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	2b02      	cmp	r3, #2
 80112d2:	d901      	bls.n	80112d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80112d4:	2303      	movs	r3, #3
 80112d6:	e0aa      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80112d8:	4b12      	ldr	r3, [pc, #72]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	2202      	movs	r2, #2
 80112de:	4013      	ands	r3, r2
 80112e0:	d1f1      	bne.n	80112c6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d100      	bne.n	80112ec <HAL_RCC_OscConfig+0x650>
 80112ea:	e09f      	b.n	801142c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	2b0c      	cmp	r3, #12
 80112f0:	d100      	bne.n	80112f4 <HAL_RCC_OscConfig+0x658>
 80112f2:	e078      	b.n	80113e6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112f8:	2b02      	cmp	r3, #2
 80112fa:	d159      	bne.n	80113b0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112fc:	4b09      	ldr	r3, [pc, #36]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	4b08      	ldr	r3, [pc, #32]	@ (8011324 <HAL_RCC_OscConfig+0x688>)
 8011302:	4911      	ldr	r1, [pc, #68]	@ (8011348 <HAL_RCC_OscConfig+0x6ac>)
 8011304:	400a      	ands	r2, r1
 8011306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011308:	f7fa f8ca 	bl	800b4a0 <HAL_GetTick>
 801130c:	0003      	movs	r3, r0
 801130e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011310:	e01c      	b.n	801134c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011312:	f7fa f8c5 	bl	800b4a0 <HAL_GetTick>
 8011316:	0002      	movs	r2, r0
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	2b02      	cmp	r3, #2
 801131e:	d915      	bls.n	801134c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8011320:	2303      	movs	r3, #3
 8011322:	e084      	b.n	801142e <HAL_RCC_OscConfig+0x792>
 8011324:	40021000 	.word	0x40021000
 8011328:	ffff1fff 	.word	0xffff1fff
 801132c:	fffffeff 	.word	0xfffffeff
 8011330:	40007000 	.word	0x40007000
 8011334:	fffffbff 	.word	0xfffffbff
 8011338:	00001388 	.word	0x00001388
 801133c:	efffffff 	.word	0xefffffff
 8011340:	40010000 	.word	0x40010000
 8011344:	ffffdfff 	.word	0xffffdfff
 8011348:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801134c:	4b3a      	ldr	r3, [pc, #232]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	2380      	movs	r3, #128	@ 0x80
 8011352:	049b      	lsls	r3, r3, #18
 8011354:	4013      	ands	r3, r2
 8011356:	d1dc      	bne.n	8011312 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011358:	4b37      	ldr	r3, [pc, #220]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	4a37      	ldr	r2, [pc, #220]	@ (801143c <HAL_RCC_OscConfig+0x7a0>)
 801135e:	4013      	ands	r3, r2
 8011360:	0019      	movs	r1, r3
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801136a:	431a      	orrs	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011370:	431a      	orrs	r2, r3
 8011372:	4b31      	ldr	r3, [pc, #196]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 8011374:	430a      	orrs	r2, r1
 8011376:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011378:	4b2f      	ldr	r3, [pc, #188]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	4b2e      	ldr	r3, [pc, #184]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 801137e:	2180      	movs	r1, #128	@ 0x80
 8011380:	0449      	lsls	r1, r1, #17
 8011382:	430a      	orrs	r2, r1
 8011384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011386:	f7fa f88b 	bl	800b4a0 <HAL_GetTick>
 801138a:	0003      	movs	r3, r0
 801138c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801138e:	e008      	b.n	80113a2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011390:	f7fa f886 	bl	800b4a0 <HAL_GetTick>
 8011394:	0002      	movs	r2, r0
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	1ad3      	subs	r3, r2, r3
 801139a:	2b02      	cmp	r3, #2
 801139c:	d901      	bls.n	80113a2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801139e:	2303      	movs	r3, #3
 80113a0:	e045      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80113a2:	4b25      	ldr	r3, [pc, #148]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	2380      	movs	r3, #128	@ 0x80
 80113a8:	049b      	lsls	r3, r3, #18
 80113aa:	4013      	ands	r3, r2
 80113ac:	d0f0      	beq.n	8011390 <HAL_RCC_OscConfig+0x6f4>
 80113ae:	e03d      	b.n	801142c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80113b0:	4b21      	ldr	r3, [pc, #132]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	4b20      	ldr	r3, [pc, #128]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 80113b6:	4922      	ldr	r1, [pc, #136]	@ (8011440 <HAL_RCC_OscConfig+0x7a4>)
 80113b8:	400a      	ands	r2, r1
 80113ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80113bc:	f7fa f870 	bl	800b4a0 <HAL_GetTick>
 80113c0:	0003      	movs	r3, r0
 80113c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80113c4:	e008      	b.n	80113d8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80113c6:	f7fa f86b 	bl	800b4a0 <HAL_GetTick>
 80113ca:	0002      	movs	r2, r0
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	2b02      	cmp	r3, #2
 80113d2:	d901      	bls.n	80113d8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80113d4:	2303      	movs	r3, #3
 80113d6:	e02a      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80113d8:	4b17      	ldr	r3, [pc, #92]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	2380      	movs	r3, #128	@ 0x80
 80113de:	049b      	lsls	r3, r3, #18
 80113e0:	4013      	ands	r3, r2
 80113e2:	d1f0      	bne.n	80113c6 <HAL_RCC_OscConfig+0x72a>
 80113e4:	e022      	b.n	801142c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d101      	bne.n	80113f2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80113ee:	2301      	movs	r3, #1
 80113f0:	e01d      	b.n	801142e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80113f2:	4b11      	ldr	r3, [pc, #68]	@ (8011438 <HAL_RCC_OscConfig+0x79c>)
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80113f8:	69ba      	ldr	r2, [r7, #24]
 80113fa:	2380      	movs	r3, #128	@ 0x80
 80113fc:	025b      	lsls	r3, r3, #9
 80113fe:	401a      	ands	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011404:	429a      	cmp	r2, r3
 8011406:	d10f      	bne.n	8011428 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011408:	69ba      	ldr	r2, [r7, #24]
 801140a:	23f0      	movs	r3, #240	@ 0xf0
 801140c:	039b      	lsls	r3, r3, #14
 801140e:	401a      	ands	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011414:	429a      	cmp	r2, r3
 8011416:	d107      	bne.n	8011428 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8011418:	69ba      	ldr	r2, [r7, #24]
 801141a:	23c0      	movs	r3, #192	@ 0xc0
 801141c:	041b      	lsls	r3, r3, #16
 801141e:	401a      	ands	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011424:	429a      	cmp	r2, r3
 8011426:	d001      	beq.n	801142c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8011428:	2301      	movs	r3, #1
 801142a:	e000      	b.n	801142e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801142c:	2300      	movs	r3, #0
}
 801142e:	0018      	movs	r0, r3
 8011430:	46bd      	mov	sp, r7
 8011432:	b00a      	add	sp, #40	@ 0x28
 8011434:	bdb0      	pop	{r4, r5, r7, pc}
 8011436:	46c0      	nop			@ (mov r8, r8)
 8011438:	40021000 	.word	0x40021000
 801143c:	ff02ffff 	.word	0xff02ffff
 8011440:	feffffff 	.word	0xfeffffff

08011444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011444:	b5b0      	push	{r4, r5, r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011454:	2301      	movs	r3, #1
 8011456:	e128      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011458:	4b96      	ldr	r3, [pc, #600]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2201      	movs	r2, #1
 801145e:	4013      	ands	r3, r2
 8011460:	683a      	ldr	r2, [r7, #0]
 8011462:	429a      	cmp	r2, r3
 8011464:	d91e      	bls.n	80114a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011466:	4b93      	ldr	r3, [pc, #588]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2201      	movs	r2, #1
 801146c:	4393      	bics	r3, r2
 801146e:	0019      	movs	r1, r3
 8011470:	4b90      	ldr	r3, [pc, #576]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 8011472:	683a      	ldr	r2, [r7, #0]
 8011474:	430a      	orrs	r2, r1
 8011476:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011478:	f7fa f812 	bl	800b4a0 <HAL_GetTick>
 801147c:	0003      	movs	r3, r0
 801147e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011480:	e009      	b.n	8011496 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011482:	f7fa f80d 	bl	800b4a0 <HAL_GetTick>
 8011486:	0002      	movs	r2, r0
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	1ad3      	subs	r3, r2, r3
 801148c:	4a8a      	ldr	r2, [pc, #552]	@ (80116b8 <HAL_RCC_ClockConfig+0x274>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d901      	bls.n	8011496 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8011492:	2303      	movs	r3, #3
 8011494:	e109      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011496:	4b87      	ldr	r3, [pc, #540]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2201      	movs	r2, #1
 801149c:	4013      	ands	r3, r2
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d1ee      	bne.n	8011482 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2202      	movs	r2, #2
 80114aa:	4013      	ands	r3, r2
 80114ac:	d009      	beq.n	80114c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80114ae:	4b83      	ldr	r3, [pc, #524]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	22f0      	movs	r2, #240	@ 0xf0
 80114b4:	4393      	bics	r3, r2
 80114b6:	0019      	movs	r1, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	689a      	ldr	r2, [r3, #8]
 80114bc:	4b7f      	ldr	r3, [pc, #508]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 80114be:	430a      	orrs	r2, r1
 80114c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2201      	movs	r2, #1
 80114c8:	4013      	ands	r3, r2
 80114ca:	d100      	bne.n	80114ce <HAL_RCC_ClockConfig+0x8a>
 80114cc:	e089      	b.n	80115e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	d107      	bne.n	80114e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80114d6:	4b79      	ldr	r3, [pc, #484]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	2380      	movs	r3, #128	@ 0x80
 80114dc:	029b      	lsls	r3, r3, #10
 80114de:	4013      	ands	r3, r2
 80114e0:	d120      	bne.n	8011524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80114e2:	2301      	movs	r3, #1
 80114e4:	e0e1      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	2b03      	cmp	r3, #3
 80114ec:	d107      	bne.n	80114fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80114ee:	4b73      	ldr	r3, [pc, #460]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	2380      	movs	r3, #128	@ 0x80
 80114f4:	049b      	lsls	r3, r3, #18
 80114f6:	4013      	ands	r3, r2
 80114f8:	d114      	bne.n	8011524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	e0d5      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d106      	bne.n	8011514 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011506:	4b6d      	ldr	r3, [pc, #436]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2204      	movs	r2, #4
 801150c:	4013      	ands	r3, r2
 801150e:	d109      	bne.n	8011524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011510:	2301      	movs	r3, #1
 8011512:	e0ca      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011514:	4b69      	ldr	r3, [pc, #420]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	2380      	movs	r3, #128	@ 0x80
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	4013      	ands	r3, r2
 801151e:	d101      	bne.n	8011524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011520:	2301      	movs	r3, #1
 8011522:	e0c2      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011524:	4b65      	ldr	r3, [pc, #404]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	2203      	movs	r2, #3
 801152a:	4393      	bics	r3, r2
 801152c:	0019      	movs	r1, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	685a      	ldr	r2, [r3, #4]
 8011532:	4b62      	ldr	r3, [pc, #392]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011534:	430a      	orrs	r2, r1
 8011536:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011538:	f7f9 ffb2 	bl	800b4a0 <HAL_GetTick>
 801153c:	0003      	movs	r3, r0
 801153e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	2b02      	cmp	r3, #2
 8011546:	d111      	bne.n	801156c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011548:	e009      	b.n	801155e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801154a:	f7f9 ffa9 	bl	800b4a0 <HAL_GetTick>
 801154e:	0002      	movs	r2, r0
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	1ad3      	subs	r3, r2, r3
 8011554:	4a58      	ldr	r2, [pc, #352]	@ (80116b8 <HAL_RCC_ClockConfig+0x274>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d901      	bls.n	801155e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801155a:	2303      	movs	r3, #3
 801155c:	e0a5      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801155e:	4b57      	ldr	r3, [pc, #348]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	220c      	movs	r2, #12
 8011564:	4013      	ands	r3, r2
 8011566:	2b08      	cmp	r3, #8
 8011568:	d1ef      	bne.n	801154a <HAL_RCC_ClockConfig+0x106>
 801156a:	e03a      	b.n	80115e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	2b03      	cmp	r3, #3
 8011572:	d111      	bne.n	8011598 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011574:	e009      	b.n	801158a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011576:	f7f9 ff93 	bl	800b4a0 <HAL_GetTick>
 801157a:	0002      	movs	r2, r0
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	4a4d      	ldr	r2, [pc, #308]	@ (80116b8 <HAL_RCC_ClockConfig+0x274>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d901      	bls.n	801158a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8011586:	2303      	movs	r3, #3
 8011588:	e08f      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801158a:	4b4c      	ldr	r3, [pc, #304]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	220c      	movs	r2, #12
 8011590:	4013      	ands	r3, r2
 8011592:	2b0c      	cmp	r3, #12
 8011594:	d1ef      	bne.n	8011576 <HAL_RCC_ClockConfig+0x132>
 8011596:	e024      	b.n	80115e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	2b01      	cmp	r3, #1
 801159e:	d11b      	bne.n	80115d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80115a0:	e009      	b.n	80115b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115a2:	f7f9 ff7d 	bl	800b4a0 <HAL_GetTick>
 80115a6:	0002      	movs	r2, r0
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	1ad3      	subs	r3, r2, r3
 80115ac:	4a42      	ldr	r2, [pc, #264]	@ (80116b8 <HAL_RCC_ClockConfig+0x274>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d901      	bls.n	80115b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80115b2:	2303      	movs	r3, #3
 80115b4:	e079      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80115b6:	4b41      	ldr	r3, [pc, #260]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	220c      	movs	r2, #12
 80115bc:	4013      	ands	r3, r2
 80115be:	2b04      	cmp	r3, #4
 80115c0:	d1ef      	bne.n	80115a2 <HAL_RCC_ClockConfig+0x15e>
 80115c2:	e00e      	b.n	80115e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115c4:	f7f9 ff6c 	bl	800b4a0 <HAL_GetTick>
 80115c8:	0002      	movs	r2, r0
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	4a3a      	ldr	r2, [pc, #232]	@ (80116b8 <HAL_RCC_ClockConfig+0x274>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d901      	bls.n	80115d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80115d4:	2303      	movs	r3, #3
 80115d6:	e068      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80115d8:	4b38      	ldr	r3, [pc, #224]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	220c      	movs	r2, #12
 80115de:	4013      	ands	r3, r2
 80115e0:	d1f0      	bne.n	80115c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80115e2:	4b34      	ldr	r3, [pc, #208]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2201      	movs	r2, #1
 80115e8:	4013      	ands	r3, r2
 80115ea:	683a      	ldr	r2, [r7, #0]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d21e      	bcs.n	801162e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80115f0:	4b30      	ldr	r3, [pc, #192]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2201      	movs	r2, #1
 80115f6:	4393      	bics	r3, r2
 80115f8:	0019      	movs	r1, r3
 80115fa:	4b2e      	ldr	r3, [pc, #184]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 80115fc:	683a      	ldr	r2, [r7, #0]
 80115fe:	430a      	orrs	r2, r1
 8011600:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011602:	f7f9 ff4d 	bl	800b4a0 <HAL_GetTick>
 8011606:	0003      	movs	r3, r0
 8011608:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801160a:	e009      	b.n	8011620 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801160c:	f7f9 ff48 	bl	800b4a0 <HAL_GetTick>
 8011610:	0002      	movs	r2, r0
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	4a28      	ldr	r2, [pc, #160]	@ (80116b8 <HAL_RCC_ClockConfig+0x274>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d901      	bls.n	8011620 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801161c:	2303      	movs	r3, #3
 801161e:	e044      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011620:	4b24      	ldr	r3, [pc, #144]	@ (80116b4 <HAL_RCC_ClockConfig+0x270>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	2201      	movs	r2, #1
 8011626:	4013      	ands	r3, r2
 8011628:	683a      	ldr	r2, [r7, #0]
 801162a:	429a      	cmp	r2, r3
 801162c:	d1ee      	bne.n	801160c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2204      	movs	r2, #4
 8011634:	4013      	ands	r3, r2
 8011636:	d009      	beq.n	801164c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011638:	4b20      	ldr	r3, [pc, #128]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 801163a:	68db      	ldr	r3, [r3, #12]
 801163c:	4a20      	ldr	r2, [pc, #128]	@ (80116c0 <HAL_RCC_ClockConfig+0x27c>)
 801163e:	4013      	ands	r3, r2
 8011640:	0019      	movs	r1, r3
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	68da      	ldr	r2, [r3, #12]
 8011646:	4b1d      	ldr	r3, [pc, #116]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011648:	430a      	orrs	r2, r1
 801164a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2208      	movs	r2, #8
 8011652:	4013      	ands	r3, r2
 8011654:	d00a      	beq.n	801166c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8011656:	4b19      	ldr	r3, [pc, #100]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011658:	68db      	ldr	r3, [r3, #12]
 801165a:	4a1a      	ldr	r2, [pc, #104]	@ (80116c4 <HAL_RCC_ClockConfig+0x280>)
 801165c:	4013      	ands	r3, r2
 801165e:	0019      	movs	r1, r3
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	691b      	ldr	r3, [r3, #16]
 8011664:	00da      	lsls	r2, r3, #3
 8011666:	4b15      	ldr	r3, [pc, #84]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011668:	430a      	orrs	r2, r1
 801166a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801166c:	f000 f832 	bl	80116d4 <HAL_RCC_GetSysClockFreq>
 8011670:	0001      	movs	r1, r0
 8011672:	4b12      	ldr	r3, [pc, #72]	@ (80116bc <HAL_RCC_ClockConfig+0x278>)
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	091b      	lsrs	r3, r3, #4
 8011678:	220f      	movs	r2, #15
 801167a:	4013      	ands	r3, r2
 801167c:	4a12      	ldr	r2, [pc, #72]	@ (80116c8 <HAL_RCC_ClockConfig+0x284>)
 801167e:	5cd3      	ldrb	r3, [r2, r3]
 8011680:	000a      	movs	r2, r1
 8011682:	40da      	lsrs	r2, r3
 8011684:	4b11      	ldr	r3, [pc, #68]	@ (80116cc <HAL_RCC_ClockConfig+0x288>)
 8011686:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011688:	4b11      	ldr	r3, [pc, #68]	@ (80116d0 <HAL_RCC_ClockConfig+0x28c>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	250b      	movs	r5, #11
 801168e:	197c      	adds	r4, r7, r5
 8011690:	0018      	movs	r0, r3
 8011692:	f7f9 febf 	bl	800b414 <HAL_InitTick>
 8011696:	0003      	movs	r3, r0
 8011698:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801169a:	197b      	adds	r3, r7, r5
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d002      	beq.n	80116a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80116a2:	197b      	adds	r3, r7, r5
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	e000      	b.n	80116aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80116a8:	2300      	movs	r3, #0
}
 80116aa:	0018      	movs	r0, r3
 80116ac:	46bd      	mov	sp, r7
 80116ae:	b004      	add	sp, #16
 80116b0:	bdb0      	pop	{r4, r5, r7, pc}
 80116b2:	46c0      	nop			@ (mov r8, r8)
 80116b4:	40022000 	.word	0x40022000
 80116b8:	00001388 	.word	0x00001388
 80116bc:	40021000 	.word	0x40021000
 80116c0:	fffff8ff 	.word	0xfffff8ff
 80116c4:	ffffc7ff 	.word	0xffffc7ff
 80116c8:	0801f2a0 	.word	0x0801f2a0
 80116cc:	20000070 	.word	0x20000070
 80116d0:	20000084 	.word	0x20000084

080116d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80116d4:	b5b0      	push	{r4, r5, r7, lr}
 80116d6:	b08e      	sub	sp, #56	@ 0x38
 80116d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80116da:	4b4c      	ldr	r3, [pc, #304]	@ (801180c <HAL_RCC_GetSysClockFreq+0x138>)
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80116e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116e2:	230c      	movs	r3, #12
 80116e4:	4013      	ands	r3, r2
 80116e6:	2b0c      	cmp	r3, #12
 80116e8:	d014      	beq.n	8011714 <HAL_RCC_GetSysClockFreq+0x40>
 80116ea:	d900      	bls.n	80116ee <HAL_RCC_GetSysClockFreq+0x1a>
 80116ec:	e07b      	b.n	80117e6 <HAL_RCC_GetSysClockFreq+0x112>
 80116ee:	2b04      	cmp	r3, #4
 80116f0:	d002      	beq.n	80116f8 <HAL_RCC_GetSysClockFreq+0x24>
 80116f2:	2b08      	cmp	r3, #8
 80116f4:	d00b      	beq.n	801170e <HAL_RCC_GetSysClockFreq+0x3a>
 80116f6:	e076      	b.n	80117e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80116f8:	4b44      	ldr	r3, [pc, #272]	@ (801180c <HAL_RCC_GetSysClockFreq+0x138>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2210      	movs	r2, #16
 80116fe:	4013      	ands	r3, r2
 8011700:	d002      	beq.n	8011708 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8011702:	4b43      	ldr	r3, [pc, #268]	@ (8011810 <HAL_RCC_GetSysClockFreq+0x13c>)
 8011704:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8011706:	e07c      	b.n	8011802 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8011708:	4b42      	ldr	r3, [pc, #264]	@ (8011814 <HAL_RCC_GetSysClockFreq+0x140>)
 801170a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801170c:	e079      	b.n	8011802 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801170e:	4b42      	ldr	r3, [pc, #264]	@ (8011818 <HAL_RCC_GetSysClockFreq+0x144>)
 8011710:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011712:	e076      	b.n	8011802 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8011714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011716:	0c9a      	lsrs	r2, r3, #18
 8011718:	230f      	movs	r3, #15
 801171a:	401a      	ands	r2, r3
 801171c:	4b3f      	ldr	r3, [pc, #252]	@ (801181c <HAL_RCC_GetSysClockFreq+0x148>)
 801171e:	5c9b      	ldrb	r3, [r3, r2]
 8011720:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8011722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011724:	0d9a      	lsrs	r2, r3, #22
 8011726:	2303      	movs	r3, #3
 8011728:	4013      	ands	r3, r2
 801172a:	3301      	adds	r3, #1
 801172c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801172e:	4b37      	ldr	r3, [pc, #220]	@ (801180c <HAL_RCC_GetSysClockFreq+0x138>)
 8011730:	68da      	ldr	r2, [r3, #12]
 8011732:	2380      	movs	r3, #128	@ 0x80
 8011734:	025b      	lsls	r3, r3, #9
 8011736:	4013      	ands	r3, r2
 8011738:	d01a      	beq.n	8011770 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801173a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801173c:	61bb      	str	r3, [r7, #24]
 801173e:	2300      	movs	r3, #0
 8011740:	61fb      	str	r3, [r7, #28]
 8011742:	4a35      	ldr	r2, [pc, #212]	@ (8011818 <HAL_RCC_GetSysClockFreq+0x144>)
 8011744:	2300      	movs	r3, #0
 8011746:	69b8      	ldr	r0, [r7, #24]
 8011748:	69f9      	ldr	r1, [r7, #28]
 801174a:	f7ee ff2f 	bl	80005ac <__aeabi_lmul>
 801174e:	0002      	movs	r2, r0
 8011750:	000b      	movs	r3, r1
 8011752:	0010      	movs	r0, r2
 8011754:	0019      	movs	r1, r3
 8011756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011758:	613b      	str	r3, [r7, #16]
 801175a:	2300      	movs	r3, #0
 801175c:	617b      	str	r3, [r7, #20]
 801175e:	693a      	ldr	r2, [r7, #16]
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	f7ee ff03 	bl	800056c <__aeabi_uldivmod>
 8011766:	0002      	movs	r2, r0
 8011768:	000b      	movs	r3, r1
 801176a:	0013      	movs	r3, r2
 801176c:	637b      	str	r3, [r7, #52]	@ 0x34
 801176e:	e037      	b.n	80117e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8011770:	4b26      	ldr	r3, [pc, #152]	@ (801180c <HAL_RCC_GetSysClockFreq+0x138>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2210      	movs	r2, #16
 8011776:	4013      	ands	r3, r2
 8011778:	d01a      	beq.n	80117b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801177a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801177c:	60bb      	str	r3, [r7, #8]
 801177e:	2300      	movs	r3, #0
 8011780:	60fb      	str	r3, [r7, #12]
 8011782:	4a23      	ldr	r2, [pc, #140]	@ (8011810 <HAL_RCC_GetSysClockFreq+0x13c>)
 8011784:	2300      	movs	r3, #0
 8011786:	68b8      	ldr	r0, [r7, #8]
 8011788:	68f9      	ldr	r1, [r7, #12]
 801178a:	f7ee ff0f 	bl	80005ac <__aeabi_lmul>
 801178e:	0002      	movs	r2, r0
 8011790:	000b      	movs	r3, r1
 8011792:	0010      	movs	r0, r2
 8011794:	0019      	movs	r1, r3
 8011796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011798:	603b      	str	r3, [r7, #0]
 801179a:	2300      	movs	r3, #0
 801179c:	607b      	str	r3, [r7, #4]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f7ee fee3 	bl	800056c <__aeabi_uldivmod>
 80117a6:	0002      	movs	r2, r0
 80117a8:	000b      	movs	r3, r1
 80117aa:	0013      	movs	r3, r2
 80117ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80117ae:	e017      	b.n	80117e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80117b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117b2:	0018      	movs	r0, r3
 80117b4:	2300      	movs	r3, #0
 80117b6:	0019      	movs	r1, r3
 80117b8:	4a16      	ldr	r2, [pc, #88]	@ (8011814 <HAL_RCC_GetSysClockFreq+0x140>)
 80117ba:	2300      	movs	r3, #0
 80117bc:	f7ee fef6 	bl	80005ac <__aeabi_lmul>
 80117c0:	0002      	movs	r2, r0
 80117c2:	000b      	movs	r3, r1
 80117c4:	0010      	movs	r0, r2
 80117c6:	0019      	movs	r1, r3
 80117c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ca:	001c      	movs	r4, r3
 80117cc:	2300      	movs	r3, #0
 80117ce:	001d      	movs	r5, r3
 80117d0:	0022      	movs	r2, r4
 80117d2:	002b      	movs	r3, r5
 80117d4:	f7ee feca 	bl	800056c <__aeabi_uldivmod>
 80117d8:	0002      	movs	r2, r0
 80117da:	000b      	movs	r3, r1
 80117dc:	0013      	movs	r3, r2
 80117de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80117e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80117e4:	e00d      	b.n	8011802 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80117e6:	4b09      	ldr	r3, [pc, #36]	@ (801180c <HAL_RCC_GetSysClockFreq+0x138>)
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	0b5b      	lsrs	r3, r3, #13
 80117ec:	2207      	movs	r2, #7
 80117ee:	4013      	ands	r3, r2
 80117f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80117f2:	6a3b      	ldr	r3, [r7, #32]
 80117f4:	3301      	adds	r3, #1
 80117f6:	2280      	movs	r2, #128	@ 0x80
 80117f8:	0212      	lsls	r2, r2, #8
 80117fa:	409a      	lsls	r2, r3
 80117fc:	0013      	movs	r3, r2
 80117fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011800:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8011802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8011804:	0018      	movs	r0, r3
 8011806:	46bd      	mov	sp, r7
 8011808:	b00e      	add	sp, #56	@ 0x38
 801180a:	bdb0      	pop	{r4, r5, r7, pc}
 801180c:	40021000 	.word	0x40021000
 8011810:	003d0900 	.word	0x003d0900
 8011814:	00f42400 	.word	0x00f42400
 8011818:	007a1200 	.word	0x007a1200
 801181c:	0801f2b8 	.word	0x0801f2b8

08011820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011824:	4b02      	ldr	r3, [pc, #8]	@ (8011830 <HAL_RCC_GetHCLKFreq+0x10>)
 8011826:	681b      	ldr	r3, [r3, #0]
}
 8011828:	0018      	movs	r0, r3
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	46c0      	nop			@ (mov r8, r8)
 8011830:	20000070 	.word	0x20000070

08011834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011838:	f7ff fff2 	bl	8011820 <HAL_RCC_GetHCLKFreq>
 801183c:	0001      	movs	r1, r0
 801183e:	4b06      	ldr	r3, [pc, #24]	@ (8011858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	0a1b      	lsrs	r3, r3, #8
 8011844:	2207      	movs	r2, #7
 8011846:	4013      	ands	r3, r2
 8011848:	4a04      	ldr	r2, [pc, #16]	@ (801185c <HAL_RCC_GetPCLK1Freq+0x28>)
 801184a:	5cd3      	ldrb	r3, [r2, r3]
 801184c:	40d9      	lsrs	r1, r3
 801184e:	000b      	movs	r3, r1
}
 8011850:	0018      	movs	r0, r3
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	46c0      	nop			@ (mov r8, r8)
 8011858:	40021000 	.word	0x40021000
 801185c:	0801f2b0 	.word	0x0801f2b0

08011860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011864:	f7ff ffdc 	bl	8011820 <HAL_RCC_GetHCLKFreq>
 8011868:	0001      	movs	r1, r0
 801186a:	4b06      	ldr	r3, [pc, #24]	@ (8011884 <HAL_RCC_GetPCLK2Freq+0x24>)
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	0adb      	lsrs	r3, r3, #11
 8011870:	2207      	movs	r2, #7
 8011872:	4013      	ands	r3, r2
 8011874:	4a04      	ldr	r2, [pc, #16]	@ (8011888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011876:	5cd3      	ldrb	r3, [r2, r3]
 8011878:	40d9      	lsrs	r1, r3
 801187a:	000b      	movs	r3, r1
}
 801187c:	0018      	movs	r0, r3
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	46c0      	nop			@ (mov r8, r8)
 8011884:	40021000 	.word	0x40021000
 8011888:	0801f2b0 	.word	0x0801f2b0

0801188c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b086      	sub	sp, #24
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8011894:	2017      	movs	r0, #23
 8011896:	183b      	adds	r3, r7, r0
 8011898:	2200      	movs	r2, #0
 801189a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2220      	movs	r2, #32
 80118a2:	4013      	ands	r3, r2
 80118a4:	d100      	bne.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80118a6:	e0c7      	b.n	8011a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80118a8:	4b9b      	ldr	r3, [pc, #620]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80118aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118ac:	2380      	movs	r3, #128	@ 0x80
 80118ae:	055b      	lsls	r3, r3, #21
 80118b0:	4013      	ands	r3, r2
 80118b2:	d109      	bne.n	80118c8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80118b4:	4b98      	ldr	r3, [pc, #608]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80118b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118b8:	4b97      	ldr	r3, [pc, #604]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80118ba:	2180      	movs	r1, #128	@ 0x80
 80118bc:	0549      	lsls	r1, r1, #21
 80118be:	430a      	orrs	r2, r1
 80118c0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80118c2:	183b      	adds	r3, r7, r0
 80118c4:	2201      	movs	r2, #1
 80118c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118c8:	4b94      	ldr	r3, [pc, #592]	@ (8011b1c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	2380      	movs	r3, #128	@ 0x80
 80118ce:	005b      	lsls	r3, r3, #1
 80118d0:	4013      	ands	r3, r2
 80118d2:	d11a      	bne.n	801190a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80118d4:	4b91      	ldr	r3, [pc, #580]	@ (8011b1c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	4b90      	ldr	r3, [pc, #576]	@ (8011b1c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80118da:	2180      	movs	r1, #128	@ 0x80
 80118dc:	0049      	lsls	r1, r1, #1
 80118de:	430a      	orrs	r2, r1
 80118e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80118e2:	f7f9 fddd 	bl	800b4a0 <HAL_GetTick>
 80118e6:	0003      	movs	r3, r0
 80118e8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118ea:	e008      	b.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80118ec:	f7f9 fdd8 	bl	800b4a0 <HAL_GetTick>
 80118f0:	0002      	movs	r2, r0
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	2b64      	cmp	r3, #100	@ 0x64
 80118f8:	d901      	bls.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80118fa:	2303      	movs	r3, #3
 80118fc:	e107      	b.n	8011b0e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118fe:	4b87      	ldr	r3, [pc, #540]	@ (8011b1c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	2380      	movs	r3, #128	@ 0x80
 8011904:	005b      	lsls	r3, r3, #1
 8011906:	4013      	ands	r3, r2
 8011908:	d0f0      	beq.n	80118ec <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801190a:	4b83      	ldr	r3, [pc, #524]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	23c0      	movs	r3, #192	@ 0xc0
 8011910:	039b      	lsls	r3, r3, #14
 8011912:	4013      	ands	r3, r2
 8011914:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	685a      	ldr	r2, [r3, #4]
 801191a:	23c0      	movs	r3, #192	@ 0xc0
 801191c:	039b      	lsls	r3, r3, #14
 801191e:	4013      	ands	r3, r2
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	429a      	cmp	r2, r3
 8011924:	d013      	beq.n	801194e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	685a      	ldr	r2, [r3, #4]
 801192a:	23c0      	movs	r3, #192	@ 0xc0
 801192c:	029b      	lsls	r3, r3, #10
 801192e:	401a      	ands	r2, r3
 8011930:	23c0      	movs	r3, #192	@ 0xc0
 8011932:	029b      	lsls	r3, r3, #10
 8011934:	429a      	cmp	r2, r3
 8011936:	d10a      	bne.n	801194e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011938:	4b77      	ldr	r3, [pc, #476]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	2380      	movs	r3, #128	@ 0x80
 801193e:	029b      	lsls	r3, r3, #10
 8011940:	401a      	ands	r2, r3
 8011942:	2380      	movs	r3, #128	@ 0x80
 8011944:	029b      	lsls	r3, r3, #10
 8011946:	429a      	cmp	r2, r3
 8011948:	d101      	bne.n	801194e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801194a:	2301      	movs	r3, #1
 801194c:	e0df      	b.n	8011b0e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801194e:	4b72      	ldr	r3, [pc, #456]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011952:	23c0      	movs	r3, #192	@ 0xc0
 8011954:	029b      	lsls	r3, r3, #10
 8011956:	4013      	ands	r3, r2
 8011958:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d03b      	beq.n	80119d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685a      	ldr	r2, [r3, #4]
 8011964:	23c0      	movs	r3, #192	@ 0xc0
 8011966:	029b      	lsls	r3, r3, #10
 8011968:	4013      	ands	r3, r2
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	429a      	cmp	r2, r3
 801196e:	d033      	beq.n	80119d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2220      	movs	r2, #32
 8011976:	4013      	ands	r3, r2
 8011978:	d02e      	beq.n	80119d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801197a:	4b67      	ldr	r3, [pc, #412]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801197c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801197e:	4a68      	ldr	r2, [pc, #416]	@ (8011b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8011980:	4013      	ands	r3, r2
 8011982:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8011984:	4b64      	ldr	r3, [pc, #400]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011988:	4b63      	ldr	r3, [pc, #396]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801198a:	2180      	movs	r1, #128	@ 0x80
 801198c:	0309      	lsls	r1, r1, #12
 801198e:	430a      	orrs	r2, r1
 8011990:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011992:	4b61      	ldr	r3, [pc, #388]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011996:	4b60      	ldr	r3, [pc, #384]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011998:	4962      	ldr	r1, [pc, #392]	@ (8011b24 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801199a:	400a      	ands	r2, r1
 801199c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801199e:	4b5e      	ldr	r3, [pc, #376]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119a0:	68fa      	ldr	r2, [r7, #12]
 80119a2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	2380      	movs	r3, #128	@ 0x80
 80119a8:	005b      	lsls	r3, r3, #1
 80119aa:	4013      	ands	r3, r2
 80119ac:	d014      	beq.n	80119d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119ae:	f7f9 fd77 	bl	800b4a0 <HAL_GetTick>
 80119b2:	0003      	movs	r3, r0
 80119b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80119b6:	e009      	b.n	80119cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80119b8:	f7f9 fd72 	bl	800b4a0 <HAL_GetTick>
 80119bc:	0002      	movs	r2, r0
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	1ad3      	subs	r3, r2, r3
 80119c2:	4a59      	ldr	r2, [pc, #356]	@ (8011b28 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d901      	bls.n	80119cc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80119c8:	2303      	movs	r3, #3
 80119ca:	e0a0      	b.n	8011b0e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80119cc:	4b52      	ldr	r3, [pc, #328]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80119d0:	2380      	movs	r3, #128	@ 0x80
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	4013      	ands	r3, r2
 80119d6:	d0ef      	beq.n	80119b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	2220      	movs	r2, #32
 80119de:	4013      	ands	r3, r2
 80119e0:	d01f      	beq.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	685a      	ldr	r2, [r3, #4]
 80119e6:	23c0      	movs	r3, #192	@ 0xc0
 80119e8:	029b      	lsls	r3, r3, #10
 80119ea:	401a      	ands	r2, r3
 80119ec:	23c0      	movs	r3, #192	@ 0xc0
 80119ee:	029b      	lsls	r3, r3, #10
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d10c      	bne.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x182>
 80119f4:	4b48      	ldr	r3, [pc, #288]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	4a4c      	ldr	r2, [pc, #304]	@ (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80119fa:	4013      	ands	r3, r2
 80119fc:	0019      	movs	r1, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	685a      	ldr	r2, [r3, #4]
 8011a02:	23c0      	movs	r3, #192	@ 0xc0
 8011a04:	039b      	lsls	r3, r3, #14
 8011a06:	401a      	ands	r2, r3
 8011a08:	4b43      	ldr	r3, [pc, #268]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a0a:	430a      	orrs	r2, r1
 8011a0c:	601a      	str	r2, [r3, #0]
 8011a0e:	4b42      	ldr	r3, [pc, #264]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	685a      	ldr	r2, [r3, #4]
 8011a16:	23c0      	movs	r3, #192	@ 0xc0
 8011a18:	029b      	lsls	r3, r3, #10
 8011a1a:	401a      	ands	r2, r3
 8011a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a1e:	430a      	orrs	r2, r1
 8011a20:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011a22:	2317      	movs	r3, #23
 8011a24:	18fb      	adds	r3, r7, r3
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d105      	bne.n	8011a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a30:	4b39      	ldr	r3, [pc, #228]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a32:	493f      	ldr	r1, [pc, #252]	@ (8011b30 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8011a34:	400a      	ands	r2, r1
 8011a36:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	4013      	ands	r3, r2
 8011a40:	d009      	beq.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011a42:	4b35      	ldr	r3, [pc, #212]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a46:	2203      	movs	r2, #3
 8011a48:	4393      	bics	r3, r2
 8011a4a:	0019      	movs	r1, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	689a      	ldr	r2, [r3, #8]
 8011a50:	4b31      	ldr	r3, [pc, #196]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a52:	430a      	orrs	r2, r1
 8011a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2202      	movs	r2, #2
 8011a5c:	4013      	ands	r3, r2
 8011a5e:	d009      	beq.n	8011a74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011a60:	4b2d      	ldr	r3, [pc, #180]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a64:	220c      	movs	r2, #12
 8011a66:	4393      	bics	r3, r2
 8011a68:	0019      	movs	r1, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	68da      	ldr	r2, [r3, #12]
 8011a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a70:	430a      	orrs	r2, r1
 8011a72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2204      	movs	r2, #4
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	d009      	beq.n	8011a92 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011a7e:	4b26      	ldr	r3, [pc, #152]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a82:	4a2c      	ldr	r2, [pc, #176]	@ (8011b34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8011a84:	4013      	ands	r3, r2
 8011a86:	0019      	movs	r1, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	691a      	ldr	r2, [r3, #16]
 8011a8c:	4b22      	ldr	r3, [pc, #136]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a8e:	430a      	orrs	r2, r1
 8011a90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2208      	movs	r2, #8
 8011a98:	4013      	ands	r3, r2
 8011a9a:	d009      	beq.n	8011ab0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011aa0:	4a25      	ldr	r2, [pc, #148]	@ (8011b38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8011aa2:	4013      	ands	r3, r2
 8011aa4:	0019      	movs	r1, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	695a      	ldr	r2, [r3, #20]
 8011aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011aac:	430a      	orrs	r2, r1
 8011aae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	2380      	movs	r3, #128	@ 0x80
 8011ab6:	005b      	lsls	r3, r3, #1
 8011ab8:	4013      	ands	r3, r2
 8011aba:	d009      	beq.n	8011ad0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011abc:	4b16      	ldr	r3, [pc, #88]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ac0:	4a17      	ldr	r2, [pc, #92]	@ (8011b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	0019      	movs	r1, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	699a      	ldr	r2, [r3, #24]
 8011aca:	4b13      	ldr	r3, [pc, #76]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011acc:	430a      	orrs	r2, r1
 8011ace:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2240      	movs	r2, #64	@ 0x40
 8011ad6:	4013      	ands	r3, r2
 8011ad8:	d009      	beq.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011ada:	4b0f      	ldr	r3, [pc, #60]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ade:	4a17      	ldr	r2, [pc, #92]	@ (8011b3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8011ae0:	4013      	ands	r3, r2
 8011ae2:	0019      	movs	r1, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6a1a      	ldr	r2, [r3, #32]
 8011ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011aea:	430a      	orrs	r2, r1
 8011aec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2280      	movs	r2, #128	@ 0x80
 8011af4:	4013      	ands	r3, r2
 8011af6:	d009      	beq.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8011af8:	4b07      	ldr	r3, [pc, #28]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011afc:	4a10      	ldr	r2, [pc, #64]	@ (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8011afe:	4013      	ands	r3, r2
 8011b00:	0019      	movs	r1, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	69da      	ldr	r2, [r3, #28]
 8011b06:	4b04      	ldr	r3, [pc, #16]	@ (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011b08:	430a      	orrs	r2, r1
 8011b0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	0018      	movs	r0, r3
 8011b10:	46bd      	mov	sp, r7
 8011b12:	b006      	add	sp, #24
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	46c0      	nop			@ (mov r8, r8)
 8011b18:	40021000 	.word	0x40021000
 8011b1c:	40007000 	.word	0x40007000
 8011b20:	fffcffff 	.word	0xfffcffff
 8011b24:	fff7ffff 	.word	0xfff7ffff
 8011b28:	00001388 	.word	0x00001388
 8011b2c:	ffcfffff 	.word	0xffcfffff
 8011b30:	efffffff 	.word	0xefffffff
 8011b34:	fffff3ff 	.word	0xfffff3ff
 8011b38:	ffffcfff 	.word	0xffffcfff
 8011b3c:	fbffffff 	.word	0xfbffffff
 8011b40:	fff3ffff 	.word	0xfff3ffff

08011b44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011b44:	b5b0      	push	{r4, r5, r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011b4c:	230f      	movs	r3, #15
 8011b4e:	18fb      	adds	r3, r7, r3
 8011b50:	2201      	movs	r2, #1
 8011b52:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d101      	bne.n	8011b5e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e088      	b.n	8011c70 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2221      	movs	r2, #33	@ 0x21
 8011b62:	5c9b      	ldrb	r3, [r3, r2]
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d107      	bne.n	8011b7a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2220      	movs	r2, #32
 8011b6e:	2100      	movs	r1, #0
 8011b70:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	0018      	movs	r0, r3
 8011b76:	f7f5 fdaf 	bl	80076d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2221      	movs	r2, #33	@ 0x21
 8011b7e:	2102      	movs	r1, #2
 8011b80:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	2210      	movs	r2, #16
 8011b8a:	4013      	ands	r3, r2
 8011b8c:	2b10      	cmp	r3, #16
 8011b8e:	d05f      	beq.n	8011c50 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	22ca      	movs	r2, #202	@ 0xca
 8011b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2253      	movs	r2, #83	@ 0x53
 8011b9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8011ba0:	250f      	movs	r5, #15
 8011ba2:	197c      	adds	r4, r7, r5
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	0018      	movs	r0, r3
 8011ba8:	f000 f93a 	bl	8011e20 <RTC_EnterInitMode>
 8011bac:	0003      	movs	r3, r0
 8011bae:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8011bb0:	0028      	movs	r0, r5
 8011bb2:	183b      	adds	r3, r7, r0
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d12c      	bne.n	8011c14 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	689a      	ldr	r2, [r3, #8]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	492c      	ldr	r1, [pc, #176]	@ (8011c78 <HAL_RTC_Init+0x134>)
 8011bc6:	400a      	ands	r2, r1
 8011bc8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	6899      	ldr	r1, [r3, #8]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	685a      	ldr	r2, [r3, #4]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	691b      	ldr	r3, [r3, #16]
 8011bd8:	431a      	orrs	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	431a      	orrs	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	430a      	orrs	r2, r1
 8011be6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	68d2      	ldr	r2, [r2, #12]
 8011bf0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	6919      	ldr	r1, [r3, #16]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	689b      	ldr	r3, [r3, #8]
 8011bfc:	041a      	lsls	r2, r3, #16
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	430a      	orrs	r2, r1
 8011c04:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8011c06:	183c      	adds	r4, r7, r0
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	0018      	movs	r0, r3
 8011c0c:	f000 f94c 	bl	8011ea8 <RTC_ExitInitMode>
 8011c10:	0003      	movs	r3, r0
 8011c12:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8011c14:	230f      	movs	r3, #15
 8011c16:	18fb      	adds	r3, r7, r3
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d113      	bne.n	8011c46 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	2103      	movs	r1, #3
 8011c2a:	438a      	bics	r2, r1
 8011c2c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	69da      	ldr	r2, [r3, #28]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	695b      	ldr	r3, [r3, #20]
 8011c3c:	431a      	orrs	r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	430a      	orrs	r2, r1
 8011c44:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	22ff      	movs	r2, #255	@ 0xff
 8011c4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8011c4e:	e003      	b.n	8011c58 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8011c50:	230f      	movs	r3, #15
 8011c52:	18fb      	adds	r3, r7, r3
 8011c54:	2200      	movs	r2, #0
 8011c56:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8011c58:	230f      	movs	r3, #15
 8011c5a:	18fb      	adds	r3, r7, r3
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d103      	bne.n	8011c6a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2221      	movs	r2, #33	@ 0x21
 8011c66:	2101      	movs	r1, #1
 8011c68:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011c6a:	230f      	movs	r3, #15
 8011c6c:	18fb      	adds	r3, r7, r3
 8011c6e:	781b      	ldrb	r3, [r3, #0]
}
 8011c70:	0018      	movs	r0, r3
 8011c72:	46bd      	mov	sp, r7
 8011c74:	b004      	add	sp, #16
 8011c76:	bdb0      	pop	{r4, r5, r7, pc}
 8011c78:	ff8fffbf 	.word	0xff8fffbf

08011c7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011c7c:	b5b0      	push	{r4, r5, r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2220      	movs	r2, #32
 8011c90:	5c9b      	ldrb	r3, [r3, r2]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d101      	bne.n	8011c9a <HAL_RTC_SetTime+0x1e>
 8011c96:	2302      	movs	r3, #2
 8011c98:	e092      	b.n	8011dc0 <HAL_RTC_SetTime+0x144>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2220      	movs	r2, #32
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2221      	movs	r2, #33	@ 0x21
 8011ca6:	2102      	movs	r1, #2
 8011ca8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d125      	bne.n	8011cfc <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	689b      	ldr	r3, [r3, #8]
 8011cb6:	2240      	movs	r2, #64	@ 0x40
 8011cb8:	4013      	ands	r3, r2
 8011cba:	d102      	bne.n	8011cc2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	0018      	movs	r0, r3
 8011cc8:	f000 f918 	bl	8011efc <RTC_ByteToBcd2>
 8011ccc:	0003      	movs	r3, r0
 8011cce:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	785b      	ldrb	r3, [r3, #1]
 8011cd4:	0018      	movs	r0, r3
 8011cd6:	f000 f911 	bl	8011efc <RTC_ByteToBcd2>
 8011cda:	0003      	movs	r3, r0
 8011cdc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011cde:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	789b      	ldrb	r3, [r3, #2]
 8011ce4:	0018      	movs	r0, r3
 8011ce6:	f000 f909 	bl	8011efc <RTC_ByteToBcd2>
 8011cea:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011cec:	0022      	movs	r2, r4
 8011cee:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	78db      	ldrb	r3, [r3, #3]
 8011cf4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	617b      	str	r3, [r7, #20]
 8011cfa:	e017      	b.n	8011d2c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	689b      	ldr	r3, [r3, #8]
 8011d02:	2240      	movs	r2, #64	@ 0x40
 8011d04:	4013      	ands	r3, r2
 8011d06:	d102      	bne.n	8011d0e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	785b      	ldrb	r3, [r3, #1]
 8011d18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8011d1a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8011d1c:	68ba      	ldr	r2, [r7, #8]
 8011d1e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8011d20:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	78db      	ldrb	r3, [r3, #3]
 8011d26:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8011d28:	4313      	orrs	r3, r2
 8011d2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	22ca      	movs	r2, #202	@ 0xca
 8011d32:	625a      	str	r2, [r3, #36]	@ 0x24
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2253      	movs	r2, #83	@ 0x53
 8011d3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011d3c:	2513      	movs	r5, #19
 8011d3e:	197c      	adds	r4, r7, r5
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	0018      	movs	r0, r3
 8011d44:	f000 f86c 	bl	8011e20 <RTC_EnterInitMode>
 8011d48:	0003      	movs	r3, r0
 8011d4a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8011d4c:	0028      	movs	r0, r5
 8011d4e:	183b      	adds	r3, r7, r0
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d120      	bne.n	8011d98 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	697a      	ldr	r2, [r7, #20]
 8011d5c:	491a      	ldr	r1, [pc, #104]	@ (8011dc8 <HAL_RTC_SetTime+0x14c>)
 8011d5e:	400a      	ands	r2, r1
 8011d60:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	689a      	ldr	r2, [r3, #8]
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	4917      	ldr	r1, [pc, #92]	@ (8011dcc <HAL_RTC_SetTime+0x150>)
 8011d6e:	400a      	ands	r2, r1
 8011d70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	6899      	ldr	r1, [r3, #8]
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	68da      	ldr	r2, [r3, #12]
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	691b      	ldr	r3, [r3, #16]
 8011d80:	431a      	orrs	r2, r3
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	430a      	orrs	r2, r1
 8011d88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011d8a:	183c      	adds	r4, r7, r0
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	0018      	movs	r0, r3
 8011d90:	f000 f88a 	bl	8011ea8 <RTC_ExitInitMode>
 8011d94:	0003      	movs	r3, r0
 8011d96:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8011d98:	2313      	movs	r3, #19
 8011d9a:	18fb      	adds	r3, r7, r3
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d103      	bne.n	8011daa <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2221      	movs	r2, #33	@ 0x21
 8011da6:	2101      	movs	r1, #1
 8011da8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	22ff      	movs	r2, #255	@ 0xff
 8011db0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2220      	movs	r2, #32
 8011db6:	2100      	movs	r1, #0
 8011db8:	5499      	strb	r1, [r3, r2]

  return status;
 8011dba:	2313      	movs	r3, #19
 8011dbc:	18fb      	adds	r3, r7, r3
 8011dbe:	781b      	ldrb	r3, [r3, #0]
}
 8011dc0:	0018      	movs	r0, r3
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	b006      	add	sp, #24
 8011dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8011dc8:	007f7f7f 	.word	0x007f7f7f
 8011dcc:	fffbffff 	.word	0xfffbffff

08011dd0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	4a0e      	ldr	r2, [pc, #56]	@ (8011e1c <HAL_RTC_WaitForSynchro+0x4c>)
 8011de2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011de4:	f7f9 fb5c 	bl	800b4a0 <HAL_GetTick>
 8011de8:	0003      	movs	r3, r0
 8011dea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011dec:	e00a      	b.n	8011e04 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011dee:	f7f9 fb57 	bl	800b4a0 <HAL_GetTick>
 8011df2:	0002      	movs	r2, r0
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	1ad2      	subs	r2, r2, r3
 8011df8:	23fa      	movs	r3, #250	@ 0xfa
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d901      	bls.n	8011e04 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8011e00:	2303      	movs	r3, #3
 8011e02:	e006      	b.n	8011e12 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	2220      	movs	r2, #32
 8011e0c:	4013      	ands	r3, r2
 8011e0e:	d0ee      	beq.n	8011dee <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	0018      	movs	r0, r3
 8011e14:	46bd      	mov	sp, r7
 8011e16:	b004      	add	sp, #16
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	46c0      	nop			@ (mov r8, r8)
 8011e1c:	0001ff5f 	.word	0x0001ff5f

08011e20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8011e2c:	230f      	movs	r3, #15
 8011e2e:	18fb      	adds	r3, r7, r3
 8011e30:	2200      	movs	r2, #0
 8011e32:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	2240      	movs	r2, #64	@ 0x40
 8011e3c:	4013      	ands	r3, r2
 8011e3e:	d12c      	bne.n	8011e9a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	68da      	ldr	r2, [r3, #12]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2180      	movs	r1, #128	@ 0x80
 8011e4c:	430a      	orrs	r2, r1
 8011e4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011e50:	f7f9 fb26 	bl	800b4a0 <HAL_GetTick>
 8011e54:	0003      	movs	r3, r0
 8011e56:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8011e58:	e014      	b.n	8011e84 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011e5a:	f7f9 fb21 	bl	800b4a0 <HAL_GetTick>
 8011e5e:	0002      	movs	r2, r0
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	1ad2      	subs	r2, r2, r3
 8011e64:	200f      	movs	r0, #15
 8011e66:	183b      	adds	r3, r7, r0
 8011e68:	1839      	adds	r1, r7, r0
 8011e6a:	7809      	ldrb	r1, [r1, #0]
 8011e6c:	7019      	strb	r1, [r3, #0]
 8011e6e:	23fa      	movs	r3, #250	@ 0xfa
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d906      	bls.n	8011e84 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2221      	movs	r2, #33	@ 0x21
 8011e7a:	2104      	movs	r1, #4
 8011e7c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8011e7e:	183b      	adds	r3, r7, r0
 8011e80:	2201      	movs	r2, #1
 8011e82:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	2240      	movs	r2, #64	@ 0x40
 8011e8c:	4013      	ands	r3, r2
 8011e8e:	d104      	bne.n	8011e9a <RTC_EnterInitMode+0x7a>
 8011e90:	230f      	movs	r3, #15
 8011e92:	18fb      	adds	r3, r7, r3
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d1df      	bne.n	8011e5a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8011e9a:	230f      	movs	r3, #15
 8011e9c:	18fb      	adds	r3, r7, r3
 8011e9e:	781b      	ldrb	r3, [r3, #0]
}
 8011ea0:	0018      	movs	r0, r3
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	b004      	add	sp, #16
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011ea8:	b590      	push	{r4, r7, lr}
 8011eaa:	b085      	sub	sp, #20
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011eb0:	240f      	movs	r4, #15
 8011eb2:	193b      	adds	r3, r7, r4
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	68da      	ldr	r2, [r3, #12]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2180      	movs	r1, #128	@ 0x80
 8011ec4:	438a      	bics	r2, r1
 8011ec6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	2220      	movs	r2, #32
 8011ed0:	4013      	ands	r3, r2
 8011ed2:	d10c      	bne.n	8011eee <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	0018      	movs	r0, r3
 8011ed8:	f7ff ff7a 	bl	8011dd0 <HAL_RTC_WaitForSynchro>
 8011edc:	1e03      	subs	r3, r0, #0
 8011ede:	d006      	beq.n	8011eee <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2221      	movs	r2, #33	@ 0x21
 8011ee4:	2104      	movs	r1, #4
 8011ee6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8011ee8:	193b      	adds	r3, r7, r4
 8011eea:	2201      	movs	r2, #1
 8011eec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8011eee:	230f      	movs	r3, #15
 8011ef0:	18fb      	adds	r3, r7, r3
 8011ef2:	781b      	ldrb	r3, [r3, #0]
}
 8011ef4:	0018      	movs	r0, r3
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	b005      	add	sp, #20
 8011efa:	bd90      	pop	{r4, r7, pc}

08011efc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	0002      	movs	r2, r0
 8011f04:	1dfb      	adds	r3, r7, #7
 8011f06:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8011f0c:	e007      	b.n	8011f1e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	3301      	adds	r3, #1
 8011f12:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8011f14:	1dfb      	adds	r3, r7, #7
 8011f16:	1dfa      	adds	r2, r7, #7
 8011f18:	7812      	ldrb	r2, [r2, #0]
 8011f1a:	3a0a      	subs	r2, #10
 8011f1c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8011f1e:	1dfb      	adds	r3, r7, #7
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	2b09      	cmp	r3, #9
 8011f24:	d8f3      	bhi.n	8011f0e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	011b      	lsls	r3, r3, #4
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	1dfb      	adds	r3, r7, #7
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	4313      	orrs	r3, r2
 8011f34:	b2db      	uxtb	r3, r3
}
 8011f36:	0018      	movs	r0, r3
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	b004      	add	sp, #16
 8011f3c:	bd80      	pop	{r7, pc}
	...

08011f40 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b086      	sub	sp, #24
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2220      	movs	r2, #32
 8011f54:	5c9b      	ldrb	r3, [r3, r2]
 8011f56:	2b01      	cmp	r3, #1
 8011f58:	d101      	bne.n	8011f5e <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8011f5a:	2302      	movs	r3, #2
 8011f5c:	e096      	b.n	801208c <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2220      	movs	r2, #32
 8011f62:	2101      	movs	r1, #1
 8011f64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2221      	movs	r2, #33	@ 0x21
 8011f6a:	2102      	movs	r1, #2
 8011f6c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	22ca      	movs	r2, #202	@ 0xca
 8011f74:	625a      	str	r2, [r3, #36]	@ 0x24
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	2253      	movs	r2, #83	@ 0x53
 8011f7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	689a      	ldr	r2, [r3, #8]
 8011f84:	2380      	movs	r3, #128	@ 0x80
 8011f86:	00db      	lsls	r3, r3, #3
 8011f88:	4013      	ands	r3, r2
 8011f8a:	d021      	beq.n	8011fd0 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8011f8c:	f7f9 fa88 	bl	800b4a0 <HAL_GetTick>
 8011f90:	0003      	movs	r3, r0
 8011f92:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011f94:	e016      	b.n	8011fc4 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011f96:	f7f9 fa83 	bl	800b4a0 <HAL_GetTick>
 8011f9a:	0002      	movs	r2, r0
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	1ad2      	subs	r2, r2, r3
 8011fa0:	23fa      	movs	r3, #250	@ 0xfa
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d90d      	bls.n	8011fc4 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	22ff      	movs	r2, #255	@ 0xff
 8011fae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2221      	movs	r2, #33	@ 0x21
 8011fb4:	2103      	movs	r1, #3
 8011fb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2220      	movs	r2, #32
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011fc0:	2303      	movs	r3, #3
 8011fc2:	e063      	b.n	801208c <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	2204      	movs	r2, #4
 8011fcc:	4013      	ands	r3, r2
 8011fce:	d1e2      	bne.n	8011f96 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	689a      	ldr	r2, [r3, #8]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	492e      	ldr	r1, [pc, #184]	@ (8012094 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8011fdc:	400a      	ands	r2, r1
 8011fde:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	22ff      	movs	r2, #255	@ 0xff
 8011fe8:	401a      	ands	r2, r3
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	492a      	ldr	r1, [pc, #168]	@ (8012098 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8011ff0:	430a      	orrs	r2, r1
 8011ff2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011ff4:	f7f9 fa54 	bl	800b4a0 <HAL_GetTick>
 8011ff8:	0003      	movs	r3, r0
 8011ffa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8011ffc:	e016      	b.n	801202c <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ffe:	f7f9 fa4f 	bl	800b4a0 <HAL_GetTick>
 8012002:	0002      	movs	r2, r0
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	1ad2      	subs	r2, r2, r3
 8012008:	23fa      	movs	r3, #250	@ 0xfa
 801200a:	009b      	lsls	r3, r3, #2
 801200c:	429a      	cmp	r2, r3
 801200e:	d90d      	bls.n	801202c <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	22ff      	movs	r2, #255	@ 0xff
 8012016:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2221      	movs	r2, #33	@ 0x21
 801201c:	2103      	movs	r1, #3
 801201e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2220      	movs	r2, #32
 8012024:	2100      	movs	r1, #0
 8012026:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8012028:	2303      	movs	r3, #3
 801202a:	e02f      	b.n	801208c <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	2204      	movs	r2, #4
 8012034:	4013      	ands	r3, r2
 8012036:	d0e2      	beq.n	8011ffe <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	689a      	ldr	r2, [r3, #8]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2107      	movs	r1, #7
 8012044:	438a      	bics	r2, r1
 8012046:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	6899      	ldr	r1, [r3, #8]
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	430a      	orrs	r2, r1
 8012056:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	68ba      	ldr	r2, [r7, #8]
 801205e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	689a      	ldr	r2, [r3, #8]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2180      	movs	r1, #128	@ 0x80
 801206c:	00c9      	lsls	r1, r1, #3
 801206e:	430a      	orrs	r2, r1
 8012070:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	22ff      	movs	r2, #255	@ 0xff
 8012078:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2221      	movs	r2, #33	@ 0x21
 801207e:	2101      	movs	r1, #1
 8012080:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2220      	movs	r2, #32
 8012086:	2100      	movs	r1, #0
 8012088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801208a:	2300      	movs	r3, #0
}
 801208c:	0018      	movs	r0, r3
 801208e:	46bd      	mov	sp, r7
 8012090:	b006      	add	sp, #24
 8012092:	bd80      	pop	{r7, pc}
 8012094:	fffffbff 	.word	0xfffffbff
 8012098:	fffffb7f 	.word	0xfffffb7f

0801209c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d101      	bne.n	80120ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80120aa:	2301      	movs	r3, #1
 80120ac:	e032      	b.n	8012114 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2239      	movs	r2, #57	@ 0x39
 80120b2:	5c9b      	ldrb	r3, [r3, r2]
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d107      	bne.n	80120ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2238      	movs	r2, #56	@ 0x38
 80120be:	2100      	movs	r1, #0
 80120c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	0018      	movs	r0, r3
 80120c6:	f7f8 fba9 	bl	800a81c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2239      	movs	r2, #57	@ 0x39
 80120ce:	2102      	movs	r1, #2
 80120d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	3304      	adds	r3, #4
 80120da:	0019      	movs	r1, r3
 80120dc:	0010      	movs	r0, r2
 80120de:	f000 fa1d 	bl	801251c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	223e      	movs	r2, #62	@ 0x3e
 80120e6:	2101      	movs	r1, #1
 80120e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	223a      	movs	r2, #58	@ 0x3a
 80120ee:	2101      	movs	r1, #1
 80120f0:	5499      	strb	r1, [r3, r2]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	223b      	movs	r2, #59	@ 0x3b
 80120f6:	2101      	movs	r1, #1
 80120f8:	5499      	strb	r1, [r3, r2]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	223c      	movs	r2, #60	@ 0x3c
 80120fe:	2101      	movs	r1, #1
 8012100:	5499      	strb	r1, [r3, r2]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	223d      	movs	r2, #61	@ 0x3d
 8012106:	2101      	movs	r1, #1
 8012108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2239      	movs	r2, #57	@ 0x39
 801210e:	2101      	movs	r1, #1
 8012110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012112:	2300      	movs	r3, #0
}
 8012114:	0018      	movs	r0, r3
 8012116:	46bd      	mov	sp, r7
 8012118:	b002      	add	sp, #8
 801211a:	bd80      	pop	{r7, pc}

0801211c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b084      	sub	sp, #16
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2239      	movs	r2, #57	@ 0x39
 8012128:	5c9b      	ldrb	r3, [r3, r2]
 801212a:	b2db      	uxtb	r3, r3
 801212c:	2b01      	cmp	r3, #1
 801212e:	d001      	beq.n	8012134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012130:	2301      	movs	r3, #1
 8012132:	e033      	b.n	801219c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2239      	movs	r2, #57	@ 0x39
 8012138:	2102      	movs	r1, #2
 801213a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	2380      	movs	r3, #128	@ 0x80
 8012142:	05db      	lsls	r3, r3, #23
 8012144:	429a      	cmp	r2, r3
 8012146:	d00e      	beq.n	8012166 <HAL_TIM_Base_Start+0x4a>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	4a15      	ldr	r2, [pc, #84]	@ (80121a4 <HAL_TIM_Base_Start+0x88>)
 801214e:	4293      	cmp	r3, r2
 8012150:	d009      	beq.n	8012166 <HAL_TIM_Base_Start+0x4a>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	4a14      	ldr	r2, [pc, #80]	@ (80121a8 <HAL_TIM_Base_Start+0x8c>)
 8012158:	4293      	cmp	r3, r2
 801215a:	d004      	beq.n	8012166 <HAL_TIM_Base_Start+0x4a>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4a12      	ldr	r2, [pc, #72]	@ (80121ac <HAL_TIM_Base_Start+0x90>)
 8012162:	4293      	cmp	r3, r2
 8012164:	d111      	bne.n	801218a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	2207      	movs	r2, #7
 801216e:	4013      	ands	r3, r2
 8012170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2b06      	cmp	r3, #6
 8012176:	d010      	beq.n	801219a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	2101      	movs	r1, #1
 8012184:	430a      	orrs	r2, r1
 8012186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012188:	e007      	b.n	801219a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2101      	movs	r1, #1
 8012196:	430a      	orrs	r2, r1
 8012198:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801219a:	2300      	movs	r3, #0
}
 801219c:	0018      	movs	r0, r3
 801219e:	46bd      	mov	sp, r7
 80121a0:	b004      	add	sp, #16
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	40000400 	.word	0x40000400
 80121a8:	40010800 	.word	0x40010800
 80121ac:	40011400 	.word	0x40011400

080121b0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	6a1b      	ldr	r3, [r3, #32]
 80121be:	4a0a      	ldr	r2, [pc, #40]	@ (80121e8 <HAL_TIM_Base_Stop+0x38>)
 80121c0:	4013      	ands	r3, r2
 80121c2:	d107      	bne.n	80121d4 <HAL_TIM_Base_Stop+0x24>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2101      	movs	r1, #1
 80121d0:	438a      	bics	r2, r1
 80121d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2239      	movs	r2, #57	@ 0x39
 80121d8:	2101      	movs	r1, #1
 80121da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80121dc:	2300      	movs	r3, #0
}
 80121de:	0018      	movs	r0, r3
 80121e0:	46bd      	mov	sp, r7
 80121e2:	b002      	add	sp, #8
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	46c0      	nop			@ (mov r8, r8)
 80121e8:	00001111 	.word	0x00001111

080121ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d101      	bne.n	80121fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80121fa:	2301      	movs	r3, #1
 80121fc:	e032      	b.n	8012264 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2239      	movs	r2, #57	@ 0x39
 8012202:	5c9b      	ldrb	r3, [r3, r2]
 8012204:	b2db      	uxtb	r3, r3
 8012206:	2b00      	cmp	r3, #0
 8012208:	d107      	bne.n	801221a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2238      	movs	r2, #56	@ 0x38
 801220e:	2100      	movs	r1, #0
 8012210:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	0018      	movs	r0, r3
 8012216:	f7f8 fadd 	bl	800a7d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2239      	movs	r2, #57	@ 0x39
 801221e:	2102      	movs	r1, #2
 8012220:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	3304      	adds	r3, #4
 801222a:	0019      	movs	r1, r3
 801222c:	0010      	movs	r0, r2
 801222e:	f000 f975 	bl	801251c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	223e      	movs	r2, #62	@ 0x3e
 8012236:	2101      	movs	r1, #1
 8012238:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	223a      	movs	r2, #58	@ 0x3a
 801223e:	2101      	movs	r1, #1
 8012240:	5499      	strb	r1, [r3, r2]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	223b      	movs	r2, #59	@ 0x3b
 8012246:	2101      	movs	r1, #1
 8012248:	5499      	strb	r1, [r3, r2]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	223c      	movs	r2, #60	@ 0x3c
 801224e:	2101      	movs	r1, #1
 8012250:	5499      	strb	r1, [r3, r2]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	223d      	movs	r2, #61	@ 0x3d
 8012256:	2101      	movs	r1, #1
 8012258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2239      	movs	r2, #57	@ 0x39
 801225e:	2101      	movs	r1, #1
 8012260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012262:	2300      	movs	r3, #0
}
 8012264:	0018      	movs	r0, r3
 8012266:	46bd      	mov	sp, r7
 8012268:	b002      	add	sp, #8
 801226a:	bd80      	pop	{r7, pc}

0801226c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d108      	bne.n	801228e <HAL_TIM_PWM_Start+0x22>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	223a      	movs	r2, #58	@ 0x3a
 8012280:	5c9b      	ldrb	r3, [r3, r2]
 8012282:	b2db      	uxtb	r3, r3
 8012284:	3b01      	subs	r3, #1
 8012286:	1e5a      	subs	r2, r3, #1
 8012288:	4193      	sbcs	r3, r2
 801228a:	b2db      	uxtb	r3, r3
 801228c:	e01f      	b.n	80122ce <HAL_TIM_PWM_Start+0x62>
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	2b04      	cmp	r3, #4
 8012292:	d108      	bne.n	80122a6 <HAL_TIM_PWM_Start+0x3a>
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	223b      	movs	r2, #59	@ 0x3b
 8012298:	5c9b      	ldrb	r3, [r3, r2]
 801229a:	b2db      	uxtb	r3, r3
 801229c:	3b01      	subs	r3, #1
 801229e:	1e5a      	subs	r2, r3, #1
 80122a0:	4193      	sbcs	r3, r2
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	e013      	b.n	80122ce <HAL_TIM_PWM_Start+0x62>
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	2b08      	cmp	r3, #8
 80122aa:	d108      	bne.n	80122be <HAL_TIM_PWM_Start+0x52>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	223c      	movs	r2, #60	@ 0x3c
 80122b0:	5c9b      	ldrb	r3, [r3, r2]
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	3b01      	subs	r3, #1
 80122b6:	1e5a      	subs	r2, r3, #1
 80122b8:	4193      	sbcs	r3, r2
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	e007      	b.n	80122ce <HAL_TIM_PWM_Start+0x62>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	223d      	movs	r2, #61	@ 0x3d
 80122c2:	5c9b      	ldrb	r3, [r3, r2]
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	3b01      	subs	r3, #1
 80122c8:	1e5a      	subs	r2, r3, #1
 80122ca:	4193      	sbcs	r3, r2
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d001      	beq.n	80122d6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80122d2:	2301      	movs	r3, #1
 80122d4:	e052      	b.n	801237c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d104      	bne.n	80122e6 <HAL_TIM_PWM_Start+0x7a>
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	223a      	movs	r2, #58	@ 0x3a
 80122e0:	2102      	movs	r1, #2
 80122e2:	5499      	strb	r1, [r3, r2]
 80122e4:	e013      	b.n	801230e <HAL_TIM_PWM_Start+0xa2>
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	2b04      	cmp	r3, #4
 80122ea:	d104      	bne.n	80122f6 <HAL_TIM_PWM_Start+0x8a>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	223b      	movs	r2, #59	@ 0x3b
 80122f0:	2102      	movs	r1, #2
 80122f2:	5499      	strb	r1, [r3, r2]
 80122f4:	e00b      	b.n	801230e <HAL_TIM_PWM_Start+0xa2>
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	2b08      	cmp	r3, #8
 80122fa:	d104      	bne.n	8012306 <HAL_TIM_PWM_Start+0x9a>
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	223c      	movs	r2, #60	@ 0x3c
 8012300:	2102      	movs	r1, #2
 8012302:	5499      	strb	r1, [r3, r2]
 8012304:	e003      	b.n	801230e <HAL_TIM_PWM_Start+0xa2>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	223d      	movs	r2, #61	@ 0x3d
 801230a:	2102      	movs	r1, #2
 801230c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	2201      	movs	r2, #1
 8012316:	0018      	movs	r0, r3
 8012318:	f000 fa62 	bl	80127e0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	2380      	movs	r3, #128	@ 0x80
 8012322:	05db      	lsls	r3, r3, #23
 8012324:	429a      	cmp	r2, r3
 8012326:	d00e      	beq.n	8012346 <HAL_TIM_PWM_Start+0xda>
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4a15      	ldr	r2, [pc, #84]	@ (8012384 <HAL_TIM_PWM_Start+0x118>)
 801232e:	4293      	cmp	r3, r2
 8012330:	d009      	beq.n	8012346 <HAL_TIM_PWM_Start+0xda>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	4a14      	ldr	r2, [pc, #80]	@ (8012388 <HAL_TIM_PWM_Start+0x11c>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d004      	beq.n	8012346 <HAL_TIM_PWM_Start+0xda>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4a12      	ldr	r2, [pc, #72]	@ (801238c <HAL_TIM_PWM_Start+0x120>)
 8012342:	4293      	cmp	r3, r2
 8012344:	d111      	bne.n	801236a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	2207      	movs	r2, #7
 801234e:	4013      	ands	r3, r2
 8012350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2b06      	cmp	r3, #6
 8012356:	d010      	beq.n	801237a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2101      	movs	r1, #1
 8012364:	430a      	orrs	r2, r1
 8012366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012368:	e007      	b.n	801237a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	681a      	ldr	r2, [r3, #0]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2101      	movs	r1, #1
 8012376:	430a      	orrs	r2, r1
 8012378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801237a:	2300      	movs	r3, #0
}
 801237c:	0018      	movs	r0, r3
 801237e:	46bd      	mov	sp, r7
 8012380:	b004      	add	sp, #16
 8012382:	bd80      	pop	{r7, pc}
 8012384:	40000400 	.word	0x40000400
 8012388:	40010800 	.word	0x40010800
 801238c:	40011400 	.word	0x40011400

08012390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801239c:	2317      	movs	r3, #23
 801239e:	18fb      	adds	r3, r7, r3
 80123a0:	2200      	movs	r2, #0
 80123a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2238      	movs	r2, #56	@ 0x38
 80123a8:	5c9b      	ldrb	r3, [r3, r2]
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d101      	bne.n	80123b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80123ae:	2302      	movs	r3, #2
 80123b0:	e0ad      	b.n	801250e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2238      	movs	r2, #56	@ 0x38
 80123b6:	2101      	movs	r1, #1
 80123b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2b0c      	cmp	r3, #12
 80123be:	d100      	bne.n	80123c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80123c0:	e076      	b.n	80124b0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2b0c      	cmp	r3, #12
 80123c6:	d900      	bls.n	80123ca <HAL_TIM_PWM_ConfigChannel+0x3a>
 80123c8:	e095      	b.n	80124f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2b08      	cmp	r3, #8
 80123ce:	d04e      	beq.n	801246e <HAL_TIM_PWM_ConfigChannel+0xde>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b08      	cmp	r3, #8
 80123d4:	d900      	bls.n	80123d8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80123d6:	e08e      	b.n	80124f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d003      	beq.n	80123e6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2b04      	cmp	r3, #4
 80123e2:	d021      	beq.n	8012428 <HAL_TIM_PWM_ConfigChannel+0x98>
 80123e4:	e087      	b.n	80124f6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	0011      	movs	r1, r2
 80123ee:	0018      	movs	r0, r3
 80123f0:	f000 f8f2 	bl	80125d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	699a      	ldr	r2, [r3, #24]
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	2108      	movs	r1, #8
 8012400:	430a      	orrs	r2, r1
 8012402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	699a      	ldr	r2, [r3, #24]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2104      	movs	r1, #4
 8012410:	438a      	bics	r2, r1
 8012412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	6999      	ldr	r1, [r3, #24]
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	68da      	ldr	r2, [r3, #12]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	430a      	orrs	r2, r1
 8012424:	619a      	str	r2, [r3, #24]
      break;
 8012426:	e06b      	b.n	8012500 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	68ba      	ldr	r2, [r7, #8]
 801242e:	0011      	movs	r1, r2
 8012430:	0018      	movs	r0, r3
 8012432:	f000 f90d 	bl	8012650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	699a      	ldr	r2, [r3, #24]
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	2180      	movs	r1, #128	@ 0x80
 8012442:	0109      	lsls	r1, r1, #4
 8012444:	430a      	orrs	r2, r1
 8012446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	699a      	ldr	r2, [r3, #24]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	4931      	ldr	r1, [pc, #196]	@ (8012518 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8012454:	400a      	ands	r2, r1
 8012456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	6999      	ldr	r1, [r3, #24]
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	021a      	lsls	r2, r3, #8
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	430a      	orrs	r2, r1
 801246a:	619a      	str	r2, [r3, #24]
      break;
 801246c:	e048      	b.n	8012500 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	68ba      	ldr	r2, [r7, #8]
 8012474:	0011      	movs	r1, r2
 8012476:	0018      	movs	r0, r3
 8012478:	f000 f92c 	bl	80126d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	69da      	ldr	r2, [r3, #28]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2108      	movs	r1, #8
 8012488:	430a      	orrs	r2, r1
 801248a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	69da      	ldr	r2, [r3, #28]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2104      	movs	r1, #4
 8012498:	438a      	bics	r2, r1
 801249a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	69d9      	ldr	r1, [r3, #28]
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	68da      	ldr	r2, [r3, #12]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	430a      	orrs	r2, r1
 80124ac:	61da      	str	r2, [r3, #28]
      break;
 80124ae:	e027      	b.n	8012500 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	68ba      	ldr	r2, [r7, #8]
 80124b6:	0011      	movs	r1, r2
 80124b8:	0018      	movs	r0, r3
 80124ba:	f000 f94b 	bl	8012754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	69da      	ldr	r2, [r3, #28]
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2180      	movs	r1, #128	@ 0x80
 80124ca:	0109      	lsls	r1, r1, #4
 80124cc:	430a      	orrs	r2, r1
 80124ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	69da      	ldr	r2, [r3, #28]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	490f      	ldr	r1, [pc, #60]	@ (8012518 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80124dc:	400a      	ands	r2, r1
 80124de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	69d9      	ldr	r1, [r3, #28]
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	021a      	lsls	r2, r3, #8
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	430a      	orrs	r2, r1
 80124f2:	61da      	str	r2, [r3, #28]
      break;
 80124f4:	e004      	b.n	8012500 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80124f6:	2317      	movs	r3, #23
 80124f8:	18fb      	adds	r3, r7, r3
 80124fa:	2201      	movs	r2, #1
 80124fc:	701a      	strb	r2, [r3, #0]
      break;
 80124fe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	2238      	movs	r2, #56	@ 0x38
 8012504:	2100      	movs	r1, #0
 8012506:	5499      	strb	r1, [r3, r2]

  return status;
 8012508:	2317      	movs	r3, #23
 801250a:	18fb      	adds	r3, r7, r3
 801250c:	781b      	ldrb	r3, [r3, #0]
}
 801250e:	0018      	movs	r0, r3
 8012510:	46bd      	mov	sp, r7
 8012512:	b006      	add	sp, #24
 8012514:	bd80      	pop	{r7, pc}
 8012516:	46c0      	nop			@ (mov r8, r8)
 8012518:	fffffbff 	.word	0xfffffbff

0801251c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	2380      	movs	r3, #128	@ 0x80
 8012530:	05db      	lsls	r3, r3, #23
 8012532:	429a      	cmp	r2, r3
 8012534:	d00b      	beq.n	801254e <TIM_Base_SetConfig+0x32>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	4a23      	ldr	r2, [pc, #140]	@ (80125c8 <TIM_Base_SetConfig+0xac>)
 801253a:	4293      	cmp	r3, r2
 801253c:	d007      	beq.n	801254e <TIM_Base_SetConfig+0x32>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4a22      	ldr	r2, [pc, #136]	@ (80125cc <TIM_Base_SetConfig+0xb0>)
 8012542:	4293      	cmp	r3, r2
 8012544:	d003      	beq.n	801254e <TIM_Base_SetConfig+0x32>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4a21      	ldr	r2, [pc, #132]	@ (80125d0 <TIM_Base_SetConfig+0xb4>)
 801254a:	4293      	cmp	r3, r2
 801254c:	d108      	bne.n	8012560 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	2270      	movs	r2, #112	@ 0x70
 8012552:	4393      	bics	r3, r2
 8012554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	4313      	orrs	r3, r2
 801255e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	2380      	movs	r3, #128	@ 0x80
 8012564:	05db      	lsls	r3, r3, #23
 8012566:	429a      	cmp	r2, r3
 8012568:	d00b      	beq.n	8012582 <TIM_Base_SetConfig+0x66>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4a16      	ldr	r2, [pc, #88]	@ (80125c8 <TIM_Base_SetConfig+0xac>)
 801256e:	4293      	cmp	r3, r2
 8012570:	d007      	beq.n	8012582 <TIM_Base_SetConfig+0x66>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	4a15      	ldr	r2, [pc, #84]	@ (80125cc <TIM_Base_SetConfig+0xb0>)
 8012576:	4293      	cmp	r3, r2
 8012578:	d003      	beq.n	8012582 <TIM_Base_SetConfig+0x66>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	4a14      	ldr	r2, [pc, #80]	@ (80125d0 <TIM_Base_SetConfig+0xb4>)
 801257e:	4293      	cmp	r3, r2
 8012580:	d108      	bne.n	8012594 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	4a13      	ldr	r2, [pc, #76]	@ (80125d4 <TIM_Base_SetConfig+0xb8>)
 8012586:	4013      	ands	r3, r2
 8012588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	68db      	ldr	r3, [r3, #12]
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	4313      	orrs	r3, r2
 8012592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2280      	movs	r2, #128	@ 0x80
 8012598:	4393      	bics	r3, r2
 801259a:	001a      	movs	r2, r3
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	691b      	ldr	r3, [r3, #16]
 80125a0:	4313      	orrs	r3, r2
 80125a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	68fa      	ldr	r2, [r7, #12]
 80125a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	689a      	ldr	r2, [r3, #8]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2201      	movs	r2, #1
 80125be:	615a      	str	r2, [r3, #20]
}
 80125c0:	46c0      	nop			@ (mov r8, r8)
 80125c2:	46bd      	mov	sp, r7
 80125c4:	b004      	add	sp, #16
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	40000400 	.word	0x40000400
 80125cc:	40010800 	.word	0x40010800
 80125d0:	40011400 	.word	0x40011400
 80125d4:	fffffcff 	.word	0xfffffcff

080125d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b086      	sub	sp, #24
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6a1b      	ldr	r3, [r3, #32]
 80125e6:	2201      	movs	r2, #1
 80125e8:	4393      	bics	r3, r2
 80125ea:	001a      	movs	r2, r3
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a1b      	ldr	r3, [r3, #32]
 80125f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	699b      	ldr	r3, [r3, #24]
 8012600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2270      	movs	r2, #112	@ 0x70
 8012606:	4393      	bics	r3, r2
 8012608:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2203      	movs	r2, #3
 801260e:	4393      	bics	r3, r2
 8012610:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	68fa      	ldr	r2, [r7, #12]
 8012618:	4313      	orrs	r3, r2
 801261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	2202      	movs	r2, #2
 8012620:	4393      	bics	r3, r2
 8012622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	689b      	ldr	r3, [r3, #8]
 8012628:	697a      	ldr	r2, [r7, #20]
 801262a:	4313      	orrs	r3, r2
 801262c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	693a      	ldr	r2, [r7, #16]
 8012632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	68fa      	ldr	r2, [r7, #12]
 8012638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	685a      	ldr	r2, [r3, #4]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	697a      	ldr	r2, [r7, #20]
 8012646:	621a      	str	r2, [r3, #32]
}
 8012648:	46c0      	nop			@ (mov r8, r8)
 801264a:	46bd      	mov	sp, r7
 801264c:	b006      	add	sp, #24
 801264e:	bd80      	pop	{r7, pc}

08012650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b086      	sub	sp, #24
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	2210      	movs	r2, #16
 8012660:	4393      	bics	r3, r2
 8012662:	001a      	movs	r2, r3
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6a1b      	ldr	r3, [r3, #32]
 801266c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	699b      	ldr	r3, [r3, #24]
 8012678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	4a13      	ldr	r2, [pc, #76]	@ (80126cc <TIM_OC2_SetConfig+0x7c>)
 801267e:	4013      	ands	r3, r2
 8012680:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	4a12      	ldr	r2, [pc, #72]	@ (80126d0 <TIM_OC2_SetConfig+0x80>)
 8012686:	4013      	ands	r3, r2
 8012688:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	021b      	lsls	r3, r3, #8
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	4313      	orrs	r3, r2
 8012694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	2220      	movs	r2, #32
 801269a:	4393      	bics	r3, r2
 801269c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	011b      	lsls	r3, r3, #4
 80126a4:	697a      	ldr	r2, [r7, #20]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	693a      	ldr	r2, [r7, #16]
 80126ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68fa      	ldr	r2, [r7, #12]
 80126b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	685a      	ldr	r2, [r3, #4]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	697a      	ldr	r2, [r7, #20]
 80126c2:	621a      	str	r2, [r3, #32]
}
 80126c4:	46c0      	nop			@ (mov r8, r8)
 80126c6:	46bd      	mov	sp, r7
 80126c8:	b006      	add	sp, #24
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	ffff8fff 	.word	0xffff8fff
 80126d0:	fffffcff 	.word	0xfffffcff

080126d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b086      	sub	sp, #24
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6a1b      	ldr	r3, [r3, #32]
 80126e2:	4a1a      	ldr	r2, [pc, #104]	@ (801274c <TIM_OC3_SetConfig+0x78>)
 80126e4:	401a      	ands	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6a1b      	ldr	r3, [r3, #32]
 80126ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	69db      	ldr	r3, [r3, #28]
 80126fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	2270      	movs	r2, #112	@ 0x70
 8012700:	4393      	bics	r3, r2
 8012702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2203      	movs	r2, #3
 8012708:	4393      	bics	r3, r2
 801270a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	68fa      	ldr	r2, [r7, #12]
 8012712:	4313      	orrs	r3, r2
 8012714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	4a0d      	ldr	r2, [pc, #52]	@ (8012750 <TIM_OC3_SetConfig+0x7c>)
 801271a:	4013      	ands	r3, r2
 801271c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	021b      	lsls	r3, r3, #8
 8012724:	697a      	ldr	r2, [r7, #20]
 8012726:	4313      	orrs	r3, r2
 8012728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	693a      	ldr	r2, [r7, #16]
 801272e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	68fa      	ldr	r2, [r7, #12]
 8012734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	685a      	ldr	r2, [r3, #4]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	697a      	ldr	r2, [r7, #20]
 8012742:	621a      	str	r2, [r3, #32]
}
 8012744:	46c0      	nop			@ (mov r8, r8)
 8012746:	46bd      	mov	sp, r7
 8012748:	b006      	add	sp, #24
 801274a:	bd80      	pop	{r7, pc}
 801274c:	fffffeff 	.word	0xfffffeff
 8012750:	fffffdff 	.word	0xfffffdff

08012754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b086      	sub	sp, #24
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6a1b      	ldr	r3, [r3, #32]
 8012762:	4a1b      	ldr	r2, [pc, #108]	@ (80127d0 <TIM_OC4_SetConfig+0x7c>)
 8012764:	401a      	ands	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6a1b      	ldr	r3, [r3, #32]
 801276e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	69db      	ldr	r3, [r3, #28]
 801277a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	4a15      	ldr	r2, [pc, #84]	@ (80127d4 <TIM_OC4_SetConfig+0x80>)
 8012780:	4013      	ands	r3, r2
 8012782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	4a14      	ldr	r2, [pc, #80]	@ (80127d8 <TIM_OC4_SetConfig+0x84>)
 8012788:	4013      	ands	r3, r2
 801278a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	021b      	lsls	r3, r3, #8
 8012792:	68fa      	ldr	r2, [r7, #12]
 8012794:	4313      	orrs	r3, r2
 8012796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	4a10      	ldr	r2, [pc, #64]	@ (80127dc <TIM_OC4_SetConfig+0x88>)
 801279c:	4013      	ands	r3, r2
 801279e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	031b      	lsls	r3, r3, #12
 80127a6:	697a      	ldr	r2, [r7, #20]
 80127a8:	4313      	orrs	r3, r2
 80127aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	693a      	ldr	r2, [r7, #16]
 80127b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	68fa      	ldr	r2, [r7, #12]
 80127b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	685a      	ldr	r2, [r3, #4]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	697a      	ldr	r2, [r7, #20]
 80127c4:	621a      	str	r2, [r3, #32]
}
 80127c6:	46c0      	nop			@ (mov r8, r8)
 80127c8:	46bd      	mov	sp, r7
 80127ca:	b006      	add	sp, #24
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	46c0      	nop			@ (mov r8, r8)
 80127d0:	ffffefff 	.word	0xffffefff
 80127d4:	ffff8fff 	.word	0xffff8fff
 80127d8:	fffffcff 	.word	0xfffffcff
 80127dc:	ffffdfff 	.word	0xffffdfff

080127e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	221f      	movs	r2, #31
 80127f0:	4013      	ands	r3, r2
 80127f2:	2201      	movs	r2, #1
 80127f4:	409a      	lsls	r2, r3
 80127f6:	0013      	movs	r3, r2
 80127f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	6a1b      	ldr	r3, [r3, #32]
 80127fe:	697a      	ldr	r2, [r7, #20]
 8012800:	43d2      	mvns	r2, r2
 8012802:	401a      	ands	r2, r3
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	6a1a      	ldr	r2, [r3, #32]
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	211f      	movs	r1, #31
 8012810:	400b      	ands	r3, r1
 8012812:	6879      	ldr	r1, [r7, #4]
 8012814:	4099      	lsls	r1, r3
 8012816:	000b      	movs	r3, r1
 8012818:	431a      	orrs	r2, r3
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	621a      	str	r2, [r3, #32]
}
 801281e:	46c0      	nop			@ (mov r8, r8)
 8012820:	46bd      	mov	sp, r7
 8012822:	b006      	add	sp, #24
 8012824:	bd80      	pop	{r7, pc}
	...

08012828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2238      	movs	r2, #56	@ 0x38
 8012836:	5c9b      	ldrb	r3, [r3, r2]
 8012838:	2b01      	cmp	r3, #1
 801283a:	d101      	bne.n	8012840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801283c:	2302      	movs	r3, #2
 801283e:	e047      	b.n	80128d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2238      	movs	r2, #56	@ 0x38
 8012844:	2101      	movs	r1, #1
 8012846:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2239      	movs	r2, #57	@ 0x39
 801284c:	2102      	movs	r1, #2
 801284e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2270      	movs	r2, #112	@ 0x70
 8012864:	4393      	bics	r3, r2
 8012866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	68fa      	ldr	r2, [r7, #12]
 801286e:	4313      	orrs	r3, r2
 8012870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	2380      	movs	r3, #128	@ 0x80
 8012880:	05db      	lsls	r3, r3, #23
 8012882:	429a      	cmp	r2, r3
 8012884:	d00e      	beq.n	80128a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a13      	ldr	r2, [pc, #76]	@ (80128d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d009      	beq.n	80128a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4a11      	ldr	r2, [pc, #68]	@ (80128dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d004      	beq.n	80128a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	4a10      	ldr	r2, [pc, #64]	@ (80128e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d10c      	bne.n	80128be <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	2280      	movs	r2, #128	@ 0x80
 80128a8:	4393      	bics	r3, r2
 80128aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	4313      	orrs	r3, r2
 80128b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	68ba      	ldr	r2, [r7, #8]
 80128bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2239      	movs	r2, #57	@ 0x39
 80128c2:	2101      	movs	r1, #1
 80128c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2238      	movs	r2, #56	@ 0x38
 80128ca:	2100      	movs	r1, #0
 80128cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80128ce:	2300      	movs	r3, #0
}
 80128d0:	0018      	movs	r0, r3
 80128d2:	46bd      	mov	sp, r7
 80128d4:	b004      	add	sp, #16
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	40000400 	.word	0x40000400
 80128dc:	40010800 	.word	0x40010800
 80128e0:	40011400 	.word	0x40011400

080128e4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2238      	movs	r2, #56	@ 0x38
 80128f2:	5c9b      	ldrb	r3, [r3, r2]
 80128f4:	2b01      	cmp	r3, #1
 80128f6:	d101      	bne.n	80128fc <HAL_TIMEx_RemapConfig+0x18>
 80128f8:	2302      	movs	r3, #2
 80128fa:	e00c      	b.n	8012916 <HAL_TIMEx_RemapConfig+0x32>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2238      	movs	r2, #56	@ 0x38
 8012900:	2101      	movs	r1, #1
 8012902:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	683a      	ldr	r2, [r7, #0]
 801290a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2238      	movs	r2, #56	@ 0x38
 8012910:	2100      	movs	r1, #0
 8012912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012914:	2300      	movs	r3, #0
}
 8012916:	0018      	movs	r0, r3
 8012918:	46bd      	mov	sp, r7
 801291a:	b002      	add	sp, #8
 801291c:	bd80      	pop	{r7, pc}
	...

08012920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d101      	bne.n	8012932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801292e:	2301      	movs	r3, #1
 8012930:	e053      	b.n	80129da <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012936:	2b00      	cmp	r3, #0
 8012938:	d116      	bne.n	8012968 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2278      	movs	r2, #120	@ 0x78
 801293e:	2100      	movs	r1, #0
 8012940:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	0018      	movs	r0, r3
 8012946:	f000 fd0f 	bl	8013368 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	22b0      	movs	r2, #176	@ 0xb0
 801294e:	589b      	ldr	r3, [r3, r2]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d103      	bne.n	801295c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	21b0      	movs	r1, #176	@ 0xb0
 8012958:	4a22      	ldr	r2, [pc, #136]	@ (80129e4 <HAL_UART_Init+0xc4>)
 801295a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	22b0      	movs	r2, #176	@ 0xb0
 8012960:	589b      	ldr	r3, [r3, r2]
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	0010      	movs	r0, r2
 8012966:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2224      	movs	r2, #36	@ 0x24
 801296c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2101      	movs	r1, #1
 801297a:	438a      	bics	r2, r1
 801297c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	0018      	movs	r0, r3
 8012982:	f000 fd35 	bl	80133f0 <UART_SetConfig>
 8012986:	0003      	movs	r3, r0
 8012988:	2b01      	cmp	r3, #1
 801298a:	d101      	bne.n	8012990 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801298c:	2301      	movs	r3, #1
 801298e:	e024      	b.n	80129da <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012994:	2b00      	cmp	r3, #0
 8012996:	d003      	beq.n	80129a0 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	0018      	movs	r0, r3
 801299c:	f000 ffc6 	bl	801392c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	685a      	ldr	r2, [r3, #4]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	490f      	ldr	r1, [pc, #60]	@ (80129e8 <HAL_UART_Init+0xc8>)
 80129ac:	400a      	ands	r2, r1
 80129ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	689a      	ldr	r2, [r3, #8]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	212a      	movs	r1, #42	@ 0x2a
 80129bc:	438a      	bics	r2, r1
 80129be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2101      	movs	r1, #1
 80129cc:	430a      	orrs	r2, r1
 80129ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	0018      	movs	r0, r3
 80129d4:	f001 f85e 	bl	8013a94 <UART_CheckIdleState>
 80129d8:	0003      	movs	r3, r0
}
 80129da:	0018      	movs	r0, r3
 80129dc:	46bd      	mov	sp, r7
 80129de:	b002      	add	sp, #8
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	46c0      	nop			@ (mov r8, r8)
 80129e4:	0800aa51 	.word	0x0800aa51
 80129e8:	ffffb7ff 	.word	0xffffb7ff

080129ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b08a      	sub	sp, #40	@ 0x28
 80129f0:	af02      	add	r7, sp, #8
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	603b      	str	r3, [r7, #0]
 80129f8:	1dbb      	adds	r3, r7, #6
 80129fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012a00:	2b20      	cmp	r3, #32
 8012a02:	d000      	beq.n	8012a06 <HAL_UART_Transmit+0x1a>
 8012a04:	e08c      	b.n	8012b20 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d003      	beq.n	8012a14 <HAL_UART_Transmit+0x28>
 8012a0c:	1dbb      	adds	r3, r7, #6
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d101      	bne.n	8012a18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012a14:	2301      	movs	r3, #1
 8012a16:	e084      	b.n	8012b22 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	689a      	ldr	r2, [r3, #8]
 8012a1c:	2380      	movs	r3, #128	@ 0x80
 8012a1e:	015b      	lsls	r3, r3, #5
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d109      	bne.n	8012a38 <HAL_UART_Transmit+0x4c>
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	691b      	ldr	r3, [r3, #16]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d105      	bne.n	8012a38 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	4013      	ands	r3, r2
 8012a32:	d001      	beq.n	8012a38 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8012a34:	2301      	movs	r3, #1
 8012a36:	e074      	b.n	8012b22 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	2284      	movs	r2, #132	@ 0x84
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2221      	movs	r2, #33	@ 0x21
 8012a44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012a46:	f7f8 fd2b 	bl	800b4a0 <HAL_GetTick>
 8012a4a:	0003      	movs	r3, r0
 8012a4c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	1dba      	adds	r2, r7, #6
 8012a52:	2150      	movs	r1, #80	@ 0x50
 8012a54:	8812      	ldrh	r2, [r2, #0]
 8012a56:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	1dba      	adds	r2, r7, #6
 8012a5c:	2152      	movs	r1, #82	@ 0x52
 8012a5e:	8812      	ldrh	r2, [r2, #0]
 8012a60:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	689a      	ldr	r2, [r3, #8]
 8012a66:	2380      	movs	r3, #128	@ 0x80
 8012a68:	015b      	lsls	r3, r3, #5
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d108      	bne.n	8012a80 <HAL_UART_Transmit+0x94>
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	691b      	ldr	r3, [r3, #16]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d104      	bne.n	8012a80 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8012a76:	2300      	movs	r3, #0
 8012a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	61bb      	str	r3, [r7, #24]
 8012a7e:	e003      	b.n	8012a88 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012a84:	2300      	movs	r3, #0
 8012a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012a88:	e02f      	b.n	8012aea <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012a8a:	697a      	ldr	r2, [r7, #20]
 8012a8c:	68f8      	ldr	r0, [r7, #12]
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	0013      	movs	r3, r2
 8012a94:	2200      	movs	r2, #0
 8012a96:	2180      	movs	r1, #128	@ 0x80
 8012a98:	f001 f8a4 	bl	8013be4 <UART_WaitOnFlagUntilTimeout>
 8012a9c:	1e03      	subs	r3, r0, #0
 8012a9e:	d004      	beq.n	8012aaa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2220      	movs	r2, #32
 8012aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8012aa6:	2303      	movs	r3, #3
 8012aa8:	e03b      	b.n	8012b22 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d10b      	bne.n	8012ac8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012ab0:	69bb      	ldr	r3, [r7, #24]
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	001a      	movs	r2, r3
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	05d2      	lsls	r2, r2, #23
 8012abc:	0dd2      	lsrs	r2, r2, #23
 8012abe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	3302      	adds	r3, #2
 8012ac4:	61bb      	str	r3, [r7, #24]
 8012ac6:	e007      	b.n	8012ad8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	781a      	ldrb	r2, [r3, #0]
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	2252      	movs	r2, #82	@ 0x52
 8012adc:	5a9b      	ldrh	r3, [r3, r2]
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	b299      	uxth	r1, r3
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2252      	movs	r2, #82	@ 0x52
 8012ae8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	2252      	movs	r2, #82	@ 0x52
 8012aee:	5a9b      	ldrh	r3, [r3, r2]
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1c9      	bne.n	8012a8a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012af6:	697a      	ldr	r2, [r7, #20]
 8012af8:	68f8      	ldr	r0, [r7, #12]
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	0013      	movs	r3, r2
 8012b00:	2200      	movs	r2, #0
 8012b02:	2140      	movs	r1, #64	@ 0x40
 8012b04:	f001 f86e 	bl	8013be4 <UART_WaitOnFlagUntilTimeout>
 8012b08:	1e03      	subs	r3, r0, #0
 8012b0a:	d004      	beq.n	8012b16 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	2220      	movs	r2, #32
 8012b10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8012b12:	2303      	movs	r3, #3
 8012b14:	e005      	b.n	8012b22 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2220      	movs	r2, #32
 8012b1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	e000      	b.n	8012b22 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8012b20:	2302      	movs	r3, #2
  }
}
 8012b22:	0018      	movs	r0, r3
 8012b24:	46bd      	mov	sp, r7
 8012b26:	b008      	add	sp, #32
 8012b28:	bd80      	pop	{r7, pc}
	...

08012b2c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b088      	sub	sp, #32
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	1dbb      	adds	r3, r7, #6
 8012b38:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012b3e:	2b20      	cmp	r3, #32
 8012b40:	d000      	beq.n	8012b44 <HAL_UART_Transmit_DMA+0x18>
 8012b42:	e077      	b.n	8012c34 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d003      	beq.n	8012b52 <HAL_UART_Transmit_DMA+0x26>
 8012b4a:	1dbb      	adds	r3, r7, #6
 8012b4c:	881b      	ldrh	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d101      	bne.n	8012b56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8012b52:	2301      	movs	r3, #1
 8012b54:	e06f      	b.n	8012c36 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	689a      	ldr	r2, [r3, #8]
 8012b5a:	2380      	movs	r3, #128	@ 0x80
 8012b5c:	015b      	lsls	r3, r3, #5
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d109      	bne.n	8012b76 <HAL_UART_Transmit_DMA+0x4a>
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	691b      	ldr	r3, [r3, #16]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d105      	bne.n	8012b76 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	4013      	ands	r3, r2
 8012b70:	d001      	beq.n	8012b76 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8012b72:	2301      	movs	r3, #1
 8012b74:	e05f      	b.n	8012c36 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	1dba      	adds	r2, r7, #6
 8012b80:	2150      	movs	r1, #80	@ 0x50
 8012b82:	8812      	ldrh	r2, [r2, #0]
 8012b84:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	1dba      	adds	r2, r7, #6
 8012b8a:	2152      	movs	r1, #82	@ 0x52
 8012b8c:	8812      	ldrh	r2, [r2, #0]
 8012b8e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	2284      	movs	r2, #132	@ 0x84
 8012b94:	2100      	movs	r1, #0
 8012b96:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2221      	movs	r2, #33	@ 0x21
 8012b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d027      	beq.n	8012bf6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012baa:	4a25      	ldr	r2, [pc, #148]	@ (8012c40 <HAL_UART_Transmit_DMA+0x114>)
 8012bac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bb2:	4a24      	ldr	r2, [pc, #144]	@ (8012c44 <HAL_UART_Transmit_DMA+0x118>)
 8012bb4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bba:	4a23      	ldr	r2, [pc, #140]	@ (8012c48 <HAL_UART_Transmit_DMA+0x11c>)
 8012bbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bce:	0019      	movs	r1, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	3328      	adds	r3, #40	@ 0x28
 8012bd6:	001a      	movs	r2, r3
 8012bd8:	1dbb      	adds	r3, r7, #6
 8012bda:	881b      	ldrh	r3, [r3, #0]
 8012bdc:	f7f9 f980 	bl	800bee0 <HAL_DMA_Start_IT>
 8012be0:	1e03      	subs	r3, r0, #0
 8012be2:	d008      	beq.n	8012bf6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2284      	movs	r2, #132	@ 0x84
 8012be8:	2110      	movs	r1, #16
 8012bea:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2220      	movs	r2, #32
 8012bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	e01f      	b.n	8012c36 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2240      	movs	r2, #64	@ 0x40
 8012bfc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8012c02:	613b      	str	r3, [r7, #16]
  return(result);
 8012c04:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012c06:	61fb      	str	r3, [r7, #28]
 8012c08:	2301      	movs	r3, #1
 8012c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	f383 8810 	msr	PRIMASK, r3
}
 8012c12:	46c0      	nop			@ (mov r8, r8)
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	689a      	ldr	r2, [r3, #8]
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2180      	movs	r1, #128	@ 0x80
 8012c20:	430a      	orrs	r2, r1
 8012c22:	609a      	str	r2, [r3, #8]
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	f383 8810 	msr	PRIMASK, r3
}
 8012c2e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8012c30:	2300      	movs	r3, #0
 8012c32:	e000      	b.n	8012c36 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8012c34:	2302      	movs	r3, #2
  }
}
 8012c36:	0018      	movs	r0, r3
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	b008      	add	sp, #32
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	46c0      	nop			@ (mov r8, r8)
 8012c40:	08013f09 	.word	0x08013f09
 8012c44:	08013fa5 	.word	0x08013fa5
 8012c48:	08014145 	.word	0x08014145

08012c4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b088      	sub	sp, #32
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	1dbb      	adds	r3, r7, #6
 8012c58:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2280      	movs	r2, #128	@ 0x80
 8012c5e:	589b      	ldr	r3, [r3, r2]
 8012c60:	2b20      	cmp	r3, #32
 8012c62:	d14a      	bne.n	8012cfa <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d003      	beq.n	8012c72 <HAL_UART_Receive_DMA+0x26>
 8012c6a:	1dbb      	adds	r3, r7, #6
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d101      	bne.n	8012c76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8012c72:	2301      	movs	r3, #1
 8012c74:	e042      	b.n	8012cfc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	689a      	ldr	r2, [r3, #8]
 8012c7a:	2380      	movs	r3, #128	@ 0x80
 8012c7c:	015b      	lsls	r3, r3, #5
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d109      	bne.n	8012c96 <HAL_UART_Receive_DMA+0x4a>
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	691b      	ldr	r3, [r3, #16]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d105      	bne.n	8012c96 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	4013      	ands	r3, r2
 8012c90:	d001      	beq.n	8012c96 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8012c92:	2301      	movs	r3, #1
 8012c94:	e032      	b.n	8012cfc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a18      	ldr	r2, [pc, #96]	@ (8012d04 <HAL_UART_Receive_DMA+0xb8>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d020      	beq.n	8012ce8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	685a      	ldr	r2, [r3, #4]
 8012cac:	2380      	movs	r3, #128	@ 0x80
 8012cae:	041b      	lsls	r3, r3, #16
 8012cb0:	4013      	ands	r3, r2
 8012cb2:	d019      	beq.n	8012ce8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8012cb8:	613b      	str	r3, [r7, #16]
  return(result);
 8012cba:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012cbc:	61fb      	str	r3, [r7, #28]
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	f383 8810 	msr	PRIMASK, r3
}
 8012cc8:	46c0      	nop			@ (mov r8, r8)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2180      	movs	r1, #128	@ 0x80
 8012cd6:	04c9      	lsls	r1, r1, #19
 8012cd8:	430a      	orrs	r2, r1
 8012cda:	601a      	str	r2, [r3, #0]
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	f383 8810 	msr	PRIMASK, r3
}
 8012ce6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012ce8:	1dbb      	adds	r3, r7, #6
 8012cea:	881a      	ldrh	r2, [r3, #0]
 8012cec:	68b9      	ldr	r1, [r7, #8]
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	0018      	movs	r0, r3
 8012cf2:	f000 ffe1 	bl	8013cb8 <UART_Start_Receive_DMA>
 8012cf6:	0003      	movs	r3, r0
 8012cf8:	e000      	b.n	8012cfc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8012cfa:	2302      	movs	r3, #2
  }
}
 8012cfc:	0018      	movs	r0, r3
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	b008      	add	sp, #32
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	40004800 	.word	0x40004800

08012d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012d08:	b590      	push	{r4, r7, lr}
 8012d0a:	b0ab      	sub	sp, #172	@ 0xac
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	69db      	ldr	r3, [r3, #28]
 8012d16:	22a4      	movs	r2, #164	@ 0xa4
 8012d18:	18b9      	adds	r1, r7, r2
 8012d1a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	20a0      	movs	r0, #160	@ 0xa0
 8012d24:	1839      	adds	r1, r7, r0
 8012d26:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	689b      	ldr	r3, [r3, #8]
 8012d2e:	219c      	movs	r1, #156	@ 0x9c
 8012d30:	1879      	adds	r1, r7, r1
 8012d32:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012d34:	0011      	movs	r1, r2
 8012d36:	18bb      	adds	r3, r7, r2
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a9c      	ldr	r2, [pc, #624]	@ (8012fac <HAL_UART_IRQHandler+0x2a4>)
 8012d3c:	4013      	ands	r3, r2
 8012d3e:	2298      	movs	r2, #152	@ 0x98
 8012d40:	18bc      	adds	r4, r7, r2
 8012d42:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8012d44:	18bb      	adds	r3, r7, r2
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d114      	bne.n	8012d76 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012d4c:	187b      	adds	r3, r7, r1
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	2220      	movs	r2, #32
 8012d52:	4013      	ands	r3, r2
 8012d54:	d00f      	beq.n	8012d76 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012d56:	183b      	adds	r3, r7, r0
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2220      	movs	r2, #32
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	d00a      	beq.n	8012d76 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d100      	bne.n	8012d6a <HAL_UART_IRQHandler+0x62>
 8012d68:	e2aa      	b.n	80132c0 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	0010      	movs	r0, r2
 8012d72:	4798      	blx	r3
      }
      return;
 8012d74:	e2a4      	b.n	80132c0 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012d76:	2398      	movs	r3, #152	@ 0x98
 8012d78:	18fb      	adds	r3, r7, r3
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d100      	bne.n	8012d82 <HAL_UART_IRQHandler+0x7a>
 8012d80:	e11a      	b.n	8012fb8 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012d82:	239c      	movs	r3, #156	@ 0x9c
 8012d84:	18fb      	adds	r3, r7, r3
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2201      	movs	r2, #1
 8012d8a:	4013      	ands	r3, r2
 8012d8c:	d106      	bne.n	8012d9c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8012d8e:	23a0      	movs	r3, #160	@ 0xa0
 8012d90:	18fb      	adds	r3, r7, r3
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a86      	ldr	r2, [pc, #536]	@ (8012fb0 <HAL_UART_IRQHandler+0x2a8>)
 8012d96:	4013      	ands	r3, r2
 8012d98:	d100      	bne.n	8012d9c <HAL_UART_IRQHandler+0x94>
 8012d9a:	e10d      	b.n	8012fb8 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012d9c:	23a4      	movs	r3, #164	@ 0xa4
 8012d9e:	18fb      	adds	r3, r7, r3
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2201      	movs	r2, #1
 8012da4:	4013      	ands	r3, r2
 8012da6:	d012      	beq.n	8012dce <HAL_UART_IRQHandler+0xc6>
 8012da8:	23a0      	movs	r3, #160	@ 0xa0
 8012daa:	18fb      	adds	r3, r7, r3
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	2380      	movs	r3, #128	@ 0x80
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	4013      	ands	r3, r2
 8012db4:	d00b      	beq.n	8012dce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	2201      	movs	r2, #1
 8012dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2284      	movs	r2, #132	@ 0x84
 8012dc2:	589b      	ldr	r3, [r3, r2]
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	431a      	orrs	r2, r3
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2184      	movs	r1, #132	@ 0x84
 8012dcc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012dce:	23a4      	movs	r3, #164	@ 0xa4
 8012dd0:	18fb      	adds	r3, r7, r3
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2202      	movs	r2, #2
 8012dd6:	4013      	ands	r3, r2
 8012dd8:	d011      	beq.n	8012dfe <HAL_UART_IRQHandler+0xf6>
 8012dda:	239c      	movs	r3, #156	@ 0x9c
 8012ddc:	18fb      	adds	r3, r7, r3
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2201      	movs	r2, #1
 8012de2:	4013      	ands	r3, r2
 8012de4:	d00b      	beq.n	8012dfe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2202      	movs	r2, #2
 8012dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2284      	movs	r2, #132	@ 0x84
 8012df2:	589b      	ldr	r3, [r3, r2]
 8012df4:	2204      	movs	r2, #4
 8012df6:	431a      	orrs	r2, r3
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2184      	movs	r1, #132	@ 0x84
 8012dfc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012dfe:	23a4      	movs	r3, #164	@ 0xa4
 8012e00:	18fb      	adds	r3, r7, r3
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2204      	movs	r2, #4
 8012e06:	4013      	ands	r3, r2
 8012e08:	d011      	beq.n	8012e2e <HAL_UART_IRQHandler+0x126>
 8012e0a:	239c      	movs	r3, #156	@ 0x9c
 8012e0c:	18fb      	adds	r3, r7, r3
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	2201      	movs	r2, #1
 8012e12:	4013      	ands	r3, r2
 8012e14:	d00b      	beq.n	8012e2e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2204      	movs	r2, #4
 8012e1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2284      	movs	r2, #132	@ 0x84
 8012e22:	589b      	ldr	r3, [r3, r2]
 8012e24:	2202      	movs	r2, #2
 8012e26:	431a      	orrs	r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2184      	movs	r1, #132	@ 0x84
 8012e2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012e2e:	23a4      	movs	r3, #164	@ 0xa4
 8012e30:	18fb      	adds	r3, r7, r3
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	2208      	movs	r2, #8
 8012e36:	4013      	ands	r3, r2
 8012e38:	d017      	beq.n	8012e6a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012e3a:	23a0      	movs	r3, #160	@ 0xa0
 8012e3c:	18fb      	adds	r3, r7, r3
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2220      	movs	r2, #32
 8012e42:	4013      	ands	r3, r2
 8012e44:	d105      	bne.n	8012e52 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012e46:	239c      	movs	r3, #156	@ 0x9c
 8012e48:	18fb      	adds	r3, r7, r3
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012e50:	d00b      	beq.n	8012e6a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	2208      	movs	r2, #8
 8012e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2284      	movs	r2, #132	@ 0x84
 8012e5e:	589b      	ldr	r3, [r3, r2]
 8012e60:	2208      	movs	r2, #8
 8012e62:	431a      	orrs	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2184      	movs	r1, #132	@ 0x84
 8012e68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012e6a:	23a4      	movs	r3, #164	@ 0xa4
 8012e6c:	18fb      	adds	r3, r7, r3
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	2380      	movs	r3, #128	@ 0x80
 8012e72:	011b      	lsls	r3, r3, #4
 8012e74:	4013      	ands	r3, r2
 8012e76:	d013      	beq.n	8012ea0 <HAL_UART_IRQHandler+0x198>
 8012e78:	23a0      	movs	r3, #160	@ 0xa0
 8012e7a:	18fb      	adds	r3, r7, r3
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	2380      	movs	r3, #128	@ 0x80
 8012e80:	04db      	lsls	r3, r3, #19
 8012e82:	4013      	ands	r3, r2
 8012e84:	d00c      	beq.n	8012ea0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	2280      	movs	r2, #128	@ 0x80
 8012e8c:	0112      	lsls	r2, r2, #4
 8012e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2284      	movs	r2, #132	@ 0x84
 8012e94:	589b      	ldr	r3, [r3, r2]
 8012e96:	2220      	movs	r2, #32
 8012e98:	431a      	orrs	r2, r3
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2184      	movs	r1, #132	@ 0x84
 8012e9e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2284      	movs	r2, #132	@ 0x84
 8012ea4:	589b      	ldr	r3, [r3, r2]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d100      	bne.n	8012eac <HAL_UART_IRQHandler+0x1a4>
 8012eaa:	e20b      	b.n	80132c4 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012eac:	23a4      	movs	r3, #164	@ 0xa4
 8012eae:	18fb      	adds	r3, r7, r3
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2220      	movs	r2, #32
 8012eb4:	4013      	ands	r3, r2
 8012eb6:	d00e      	beq.n	8012ed6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012eb8:	23a0      	movs	r3, #160	@ 0xa0
 8012eba:	18fb      	adds	r3, r7, r3
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2220      	movs	r2, #32
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	d008      	beq.n	8012ed6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d004      	beq.n	8012ed6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	0010      	movs	r0, r2
 8012ed4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2284      	movs	r2, #132	@ 0x84
 8012eda:	589b      	ldr	r3, [r3, r2]
 8012edc:	2194      	movs	r1, #148	@ 0x94
 8012ede:	187a      	adds	r2, r7, r1
 8012ee0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	689b      	ldr	r3, [r3, #8]
 8012ee8:	2240      	movs	r2, #64	@ 0x40
 8012eea:	4013      	ands	r3, r2
 8012eec:	2b40      	cmp	r3, #64	@ 0x40
 8012eee:	d004      	beq.n	8012efa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012ef0:	187b      	adds	r3, r7, r1
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2228      	movs	r2, #40	@ 0x28
 8012ef6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012ef8:	d04b      	beq.n	8012f92 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	0018      	movs	r0, r3
 8012efe:	f000 ff9f 	bl	8013e40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	689b      	ldr	r3, [r3, #8]
 8012f08:	2240      	movs	r2, #64	@ 0x40
 8012f0a:	4013      	ands	r3, r2
 8012f0c:	2b40      	cmp	r3, #64	@ 0x40
 8012f0e:	d139      	bne.n	8012f84 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f10:	f3ef 8310 	mrs	r3, PRIMASK
 8012f14:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8012f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012f18:	2090      	movs	r0, #144	@ 0x90
 8012f1a:	183a      	adds	r2, r7, r0
 8012f1c:	6013      	str	r3, [r2, #0]
 8012f1e:	2301      	movs	r3, #1
 8012f20:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012f24:	f383 8810 	msr	PRIMASK, r3
}
 8012f28:	46c0      	nop			@ (mov r8, r8)
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	689a      	ldr	r2, [r3, #8]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2140      	movs	r1, #64	@ 0x40
 8012f36:	438a      	bics	r2, r1
 8012f38:	609a      	str	r2, [r3, #8]
 8012f3a:	183b      	adds	r3, r7, r0
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012f42:	f383 8810 	msr	PRIMASK, r3
}
 8012f46:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d012      	beq.n	8012f76 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f54:	4a17      	ldr	r2, [pc, #92]	@ (8012fb4 <HAL_UART_IRQHandler+0x2ac>)
 8012f56:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f5c:	0018      	movs	r0, r3
 8012f5e:	f7f9 f865 	bl	800c02c <HAL_DMA_Abort_IT>
 8012f62:	1e03      	subs	r3, r0, #0
 8012f64:	d020      	beq.n	8012fa8 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f70:	0018      	movs	r0, r3
 8012f72:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f74:	e018      	b.n	8012fa8 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2298      	movs	r2, #152	@ 0x98
 8012f7a:	589b      	ldr	r3, [r3, r2]
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	0010      	movs	r0, r2
 8012f80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f82:	e011      	b.n	8012fa8 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2298      	movs	r2, #152	@ 0x98
 8012f88:	589b      	ldr	r3, [r3, r2]
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	0010      	movs	r0, r2
 8012f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f90:	e00a      	b.n	8012fa8 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2298      	movs	r2, #152	@ 0x98
 8012f96:	589b      	ldr	r3, [r3, r2]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	0010      	movs	r0, r2
 8012f9c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2284      	movs	r2, #132	@ 0x84
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8012fa6:	e18d      	b.n	80132c4 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012fa8:	46c0      	nop			@ (mov r8, r8)
    return;
 8012faa:	e18b      	b.n	80132c4 <HAL_UART_IRQHandler+0x5bc>
 8012fac:	0000080f 	.word	0x0000080f
 8012fb0:	04000120 	.word	0x04000120
 8012fb4:	080141cd 	.word	0x080141cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d000      	beq.n	8012fc2 <HAL_UART_IRQHandler+0x2ba>
 8012fc0:	e13d      	b.n	801323e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012fc2:	23a4      	movs	r3, #164	@ 0xa4
 8012fc4:	18fb      	adds	r3, r7, r3
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	2210      	movs	r2, #16
 8012fca:	4013      	ands	r3, r2
 8012fcc:	d100      	bne.n	8012fd0 <HAL_UART_IRQHandler+0x2c8>
 8012fce:	e136      	b.n	801323e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012fd0:	23a0      	movs	r3, #160	@ 0xa0
 8012fd2:	18fb      	adds	r3, r7, r3
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2210      	movs	r2, #16
 8012fd8:	4013      	ands	r3, r2
 8012fda:	d100      	bne.n	8012fde <HAL_UART_IRQHandler+0x2d6>
 8012fdc:	e12f      	b.n	801323e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2210      	movs	r2, #16
 8012fe4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	2240      	movs	r2, #64	@ 0x40
 8012fee:	4013      	ands	r3, r2
 8012ff0:	2b40      	cmp	r3, #64	@ 0x40
 8012ff2:	d000      	beq.n	8012ff6 <HAL_UART_IRQHandler+0x2ee>
 8012ff4:	e0a2      	b.n	801313c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	685a      	ldr	r2, [r3, #4]
 8012ffe:	217e      	movs	r1, #126	@ 0x7e
 8013000:	187b      	adds	r3, r7, r1
 8013002:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8013004:	187b      	adds	r3, r7, r1
 8013006:	881b      	ldrh	r3, [r3, #0]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d100      	bne.n	801300e <HAL_UART_IRQHandler+0x306>
 801300c:	e15c      	b.n	80132c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2258      	movs	r2, #88	@ 0x58
 8013012:	5a9b      	ldrh	r3, [r3, r2]
 8013014:	187a      	adds	r2, r7, r1
 8013016:	8812      	ldrh	r2, [r2, #0]
 8013018:	429a      	cmp	r2, r3
 801301a:	d300      	bcc.n	801301e <HAL_UART_IRQHandler+0x316>
 801301c:	e154      	b.n	80132c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	187a      	adds	r2, r7, r1
 8013022:	215a      	movs	r1, #90	@ 0x5a
 8013024:	8812      	ldrh	r2, [r2, #0]
 8013026:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	2220      	movs	r2, #32
 8013032:	4013      	ands	r3, r2
 8013034:	d16f      	bne.n	8013116 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013036:	f3ef 8310 	mrs	r3, PRIMASK
 801303a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801303e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013040:	2301      	movs	r3, #1
 8013042:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013046:	f383 8810 	msr	PRIMASK, r3
}
 801304a:	46c0      	nop			@ (mov r8, r8)
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	49a0      	ldr	r1, [pc, #640]	@ (80132d8 <HAL_UART_IRQHandler+0x5d0>)
 8013058:	400a      	ands	r2, r1
 801305a:	601a      	str	r2, [r3, #0]
 801305c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801305e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013062:	f383 8810 	msr	PRIMASK, r3
}
 8013066:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013068:	f3ef 8310 	mrs	r3, PRIMASK
 801306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013070:	677b      	str	r3, [r7, #116]	@ 0x74
 8013072:	2301      	movs	r3, #1
 8013074:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013078:	f383 8810 	msr	PRIMASK, r3
}
 801307c:	46c0      	nop			@ (mov r8, r8)
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	689a      	ldr	r2, [r3, #8]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2101      	movs	r1, #1
 801308a:	438a      	bics	r2, r1
 801308c:	609a      	str	r2, [r3, #8]
 801308e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013090:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013094:	f383 8810 	msr	PRIMASK, r3
}
 8013098:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801309a:	f3ef 8310 	mrs	r3, PRIMASK
 801309e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80130a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80130a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80130a4:	2301      	movs	r3, #1
 80130a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130aa:	f383 8810 	msr	PRIMASK, r3
}
 80130ae:	46c0      	nop			@ (mov r8, r8)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	689a      	ldr	r2, [r3, #8]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2140      	movs	r1, #64	@ 0x40
 80130bc:	438a      	bics	r2, r1
 80130be:	609a      	str	r2, [r3, #8]
 80130c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80130c2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130c6:	f383 8810 	msr	PRIMASK, r3
}
 80130ca:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2280      	movs	r2, #128	@ 0x80
 80130d0:	2120      	movs	r1, #32
 80130d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130da:	f3ef 8310 	mrs	r3, PRIMASK
 80130de:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80130e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80130e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80130e4:	2301      	movs	r3, #1
 80130e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80130ea:	f383 8810 	msr	PRIMASK, r3
}
 80130ee:	46c0      	nop			@ (mov r8, r8)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2110      	movs	r1, #16
 80130fc:	438a      	bics	r2, r1
 80130fe:	601a      	str	r2, [r3, #0]
 8013100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013102:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013106:	f383 8810 	msr	PRIMASK, r3
}
 801310a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013110:	0018      	movs	r0, r3
 8013112:	f7f8 ff4b 	bl	800bfac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2202      	movs	r2, #2
 801311a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	22ac      	movs	r2, #172	@ 0xac
 8013120:	589b      	ldr	r3, [r3, r2]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	2158      	movs	r1, #88	@ 0x58
 8013126:	5a51      	ldrh	r1, [r2, r1]
 8013128:	687a      	ldr	r2, [r7, #4]
 801312a:	205a      	movs	r0, #90	@ 0x5a
 801312c:	5a12      	ldrh	r2, [r2, r0]
 801312e:	b292      	uxth	r2, r2
 8013130:	1a8a      	subs	r2, r1, r2
 8013132:	b291      	uxth	r1, r2
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	0010      	movs	r0, r2
 8013138:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801313a:	e0c5      	b.n	80132c8 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2258      	movs	r2, #88	@ 0x58
 8013140:	5a99      	ldrh	r1, [r3, r2]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	225a      	movs	r2, #90	@ 0x5a
 8013146:	5a9b      	ldrh	r3, [r3, r2]
 8013148:	b29a      	uxth	r2, r3
 801314a:	208e      	movs	r0, #142	@ 0x8e
 801314c:	183b      	adds	r3, r7, r0
 801314e:	1a8a      	subs	r2, r1, r2
 8013150:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	225a      	movs	r2, #90	@ 0x5a
 8013156:	5a9b      	ldrh	r3, [r3, r2]
 8013158:	b29b      	uxth	r3, r3
 801315a:	2b00      	cmp	r3, #0
 801315c:	d100      	bne.n	8013160 <HAL_UART_IRQHandler+0x458>
 801315e:	e0b5      	b.n	80132cc <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8013160:	183b      	adds	r3, r7, r0
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d100      	bne.n	801316a <HAL_UART_IRQHandler+0x462>
 8013168:	e0b0      	b.n	80132cc <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801316a:	f3ef 8310 	mrs	r3, PRIMASK
 801316e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013170:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013172:	2488      	movs	r4, #136	@ 0x88
 8013174:	193a      	adds	r2, r7, r4
 8013176:	6013      	str	r3, [r2, #0]
 8013178:	2301      	movs	r3, #1
 801317a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	f383 8810 	msr	PRIMASK, r3
}
 8013182:	46c0      	nop			@ (mov r8, r8)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4953      	ldr	r1, [pc, #332]	@ (80132dc <HAL_UART_IRQHandler+0x5d4>)
 8013190:	400a      	ands	r2, r1
 8013192:	601a      	str	r2, [r3, #0]
 8013194:	193b      	adds	r3, r7, r4
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	f383 8810 	msr	PRIMASK, r3
}
 80131a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131a2:	f3ef 8310 	mrs	r3, PRIMASK
 80131a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80131a8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80131aa:	2484      	movs	r4, #132	@ 0x84
 80131ac:	193a      	adds	r2, r7, r4
 80131ae:	6013      	str	r3, [r2, #0]
 80131b0:	2301      	movs	r3, #1
 80131b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131b4:	69fb      	ldr	r3, [r7, #28]
 80131b6:	f383 8810 	msr	PRIMASK, r3
}
 80131ba:	46c0      	nop			@ (mov r8, r8)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	689a      	ldr	r2, [r3, #8]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2101      	movs	r1, #1
 80131c8:	438a      	bics	r2, r1
 80131ca:	609a      	str	r2, [r3, #8]
 80131cc:	193b      	adds	r3, r7, r4
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131d2:	6a3b      	ldr	r3, [r7, #32]
 80131d4:	f383 8810 	msr	PRIMASK, r3
}
 80131d8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2280      	movs	r2, #128	@ 0x80
 80131de:	2120      	movs	r1, #32
 80131e0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2200      	movs	r2, #0
 80131e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131ee:	f3ef 8310 	mrs	r3, PRIMASK
 80131f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80131f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80131f6:	2480      	movs	r4, #128	@ 0x80
 80131f8:	193a      	adds	r2, r7, r4
 80131fa:	6013      	str	r3, [r2, #0]
 80131fc:	2301      	movs	r3, #1
 80131fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013202:	f383 8810 	msr	PRIMASK, r3
}
 8013206:	46c0      	nop			@ (mov r8, r8)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2110      	movs	r1, #16
 8013214:	438a      	bics	r2, r1
 8013216:	601a      	str	r2, [r3, #0]
 8013218:	193b      	adds	r3, r7, r4
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801321e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013220:	f383 8810 	msr	PRIMASK, r3
}
 8013224:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2202      	movs	r2, #2
 801322a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	22ac      	movs	r2, #172	@ 0xac
 8013230:	589b      	ldr	r3, [r3, r2]
 8013232:	183a      	adds	r2, r7, r0
 8013234:	8811      	ldrh	r1, [r2, #0]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	0010      	movs	r0, r2
 801323a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801323c:	e046      	b.n	80132cc <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801323e:	23a4      	movs	r3, #164	@ 0xa4
 8013240:	18fb      	adds	r3, r7, r3
 8013242:	681a      	ldr	r2, [r3, #0]
 8013244:	2380      	movs	r3, #128	@ 0x80
 8013246:	035b      	lsls	r3, r3, #13
 8013248:	4013      	ands	r3, r2
 801324a:	d012      	beq.n	8013272 <HAL_UART_IRQHandler+0x56a>
 801324c:	239c      	movs	r3, #156	@ 0x9c
 801324e:	18fb      	adds	r3, r7, r3
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	2380      	movs	r3, #128	@ 0x80
 8013254:	03db      	lsls	r3, r3, #15
 8013256:	4013      	ands	r3, r2
 8013258:	d00b      	beq.n	8013272 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2280      	movs	r2, #128	@ 0x80
 8013260:	0352      	lsls	r2, r2, #13
 8013262:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	22a8      	movs	r2, #168	@ 0xa8
 8013268:	589b      	ldr	r3, [r3, r2]
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	0010      	movs	r0, r2
 801326e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013270:	e02f      	b.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8013272:	23a4      	movs	r3, #164	@ 0xa4
 8013274:	18fb      	adds	r3, r7, r3
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2280      	movs	r2, #128	@ 0x80
 801327a:	4013      	ands	r3, r2
 801327c:	d00f      	beq.n	801329e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801327e:	23a0      	movs	r3, #160	@ 0xa0
 8013280:	18fb      	adds	r3, r7, r3
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	2280      	movs	r2, #128	@ 0x80
 8013286:	4013      	ands	r3, r2
 8013288:	d009      	beq.n	801329e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801328e:	2b00      	cmp	r3, #0
 8013290:	d01e      	beq.n	80132d0 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	0010      	movs	r0, r2
 801329a:	4798      	blx	r3
    }
    return;
 801329c:	e018      	b.n	80132d0 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801329e:	23a4      	movs	r3, #164	@ 0xa4
 80132a0:	18fb      	adds	r3, r7, r3
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2240      	movs	r2, #64	@ 0x40
 80132a6:	4013      	ands	r3, r2
 80132a8:	d013      	beq.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
 80132aa:	23a0      	movs	r3, #160	@ 0xa0
 80132ac:	18fb      	adds	r3, r7, r3
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2240      	movs	r2, #64	@ 0x40
 80132b2:	4013      	ands	r3, r2
 80132b4:	d00d      	beq.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	0018      	movs	r0, r3
 80132ba:	f000 ffa0 	bl	80141fe <UART_EndTransmit_IT>
    return;
 80132be:	e008      	b.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
      return;
 80132c0:	46c0      	nop			@ (mov r8, r8)
 80132c2:	e006      	b.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
    return;
 80132c4:	46c0      	nop			@ (mov r8, r8)
 80132c6:	e004      	b.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
      return;
 80132c8:	46c0      	nop			@ (mov r8, r8)
 80132ca:	e002      	b.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
      return;
 80132cc:	46c0      	nop			@ (mov r8, r8)
 80132ce:	e000      	b.n	80132d2 <HAL_UART_IRQHandler+0x5ca>
    return;
 80132d0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80132d2:	46bd      	mov	sp, r7
 80132d4:	b02b      	add	sp, #172	@ 0xac
 80132d6:	bd90      	pop	{r4, r7, pc}
 80132d8:	fffffeff 	.word	0xfffffeff
 80132dc:	fffffedf 	.word	0xfffffedf

080132e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80132e8:	46c0      	nop			@ (mov r8, r8)
 80132ea:	46bd      	mov	sp, r7
 80132ec:	b002      	add	sp, #8
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80132f8:	46c0      	nop			@ (mov r8, r8)
 80132fa:	46bd      	mov	sp, r7
 80132fc:	b002      	add	sp, #8
 80132fe:	bd80      	pop	{r7, pc}

08013300 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8013308:	46c0      	nop			@ (mov r8, r8)
 801330a:	46bd      	mov	sp, r7
 801330c:	b002      	add	sp, #8
 801330e:	bd80      	pop	{r7, pc}

08013310 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013318:	46c0      	nop			@ (mov r8, r8)
 801331a:	46bd      	mov	sp, r7
 801331c:	b002      	add	sp, #8
 801331e:	bd80      	pop	{r7, pc}

08013320 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8013328:	46c0      	nop			@ (mov r8, r8)
 801332a:	46bd      	mov	sp, r7
 801332c:	b002      	add	sp, #8
 801332e:	bd80      	pop	{r7, pc}

08013330 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8013338:	46c0      	nop			@ (mov r8, r8)
 801333a:	46bd      	mov	sp, r7
 801333c:	b002      	add	sp, #8
 801333e:	bd80      	pop	{r7, pc}

08013340 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8013348:	46c0      	nop			@ (mov r8, r8)
 801334a:	46bd      	mov	sp, r7
 801334c:	b002      	add	sp, #8
 801334e:	bd80      	pop	{r7, pc}

08013350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	000a      	movs	r2, r1
 801335a:	1cbb      	adds	r3, r7, #2
 801335c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801335e:	46c0      	nop			@ (mov r8, r8)
 8013360:	46bd      	mov	sp, r7
 8013362:	b002      	add	sp, #8
 8013364:	bd80      	pop	{r7, pc}
	...

08013368 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2188      	movs	r1, #136	@ 0x88
 8013374:	4a14      	ldr	r2, [pc, #80]	@ (80133c8 <UART_InitCallbacksToDefault+0x60>)
 8013376:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	218c      	movs	r1, #140	@ 0x8c
 801337c:	4a13      	ldr	r2, [pc, #76]	@ (80133cc <UART_InitCallbacksToDefault+0x64>)
 801337e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2190      	movs	r1, #144	@ 0x90
 8013384:	4a12      	ldr	r2, [pc, #72]	@ (80133d0 <UART_InitCallbacksToDefault+0x68>)
 8013386:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2194      	movs	r1, #148	@ 0x94
 801338c:	4a11      	ldr	r2, [pc, #68]	@ (80133d4 <UART_InitCallbacksToDefault+0x6c>)
 801338e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2198      	movs	r1, #152	@ 0x98
 8013394:	4a10      	ldr	r2, [pc, #64]	@ (80133d8 <UART_InitCallbacksToDefault+0x70>)
 8013396:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	219c      	movs	r1, #156	@ 0x9c
 801339c:	4a0f      	ldr	r2, [pc, #60]	@ (80133dc <UART_InitCallbacksToDefault+0x74>)
 801339e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	21a0      	movs	r1, #160	@ 0xa0
 80133a4:	4a0e      	ldr	r2, [pc, #56]	@ (80133e0 <UART_InitCallbacksToDefault+0x78>)
 80133a6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	21a4      	movs	r1, #164	@ 0xa4
 80133ac:	4a0d      	ldr	r2, [pc, #52]	@ (80133e4 <UART_InitCallbacksToDefault+0x7c>)
 80133ae:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	21a8      	movs	r1, #168	@ 0xa8
 80133b4:	4a0c      	ldr	r2, [pc, #48]	@ (80133e8 <UART_InitCallbacksToDefault+0x80>)
 80133b6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	21ac      	movs	r1, #172	@ 0xac
 80133bc:	4a0b      	ldr	r2, [pc, #44]	@ (80133ec <UART_InitCallbacksToDefault+0x84>)
 80133be:	505a      	str	r2, [r3, r1]

}
 80133c0:	46c0      	nop			@ (mov r8, r8)
 80133c2:	46bd      	mov	sp, r7
 80133c4:	b002      	add	sp, #8
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	080132f1 	.word	0x080132f1
 80133cc:	080132e1 	.word	0x080132e1
 80133d0:	08013311 	.word	0x08013311
 80133d4:	08013301 	.word	0x08013301
 80133d8:	08003a4d 	.word	0x08003a4d
 80133dc:	08013321 	.word	0x08013321
 80133e0:	08013331 	.word	0x08013331
 80133e4:	08013341 	.word	0x08013341
 80133e8:	08014259 	.word	0x08014259
 80133ec:	08013351 	.word	0x08013351

080133f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80133f0:	b5b0      	push	{r4, r5, r7, lr}
 80133f2:	b08e      	sub	sp, #56	@ 0x38
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80133f8:	231a      	movs	r3, #26
 80133fa:	2218      	movs	r2, #24
 80133fc:	189b      	adds	r3, r3, r2
 80133fe:	19db      	adds	r3, r3, r7
 8013400:	2200      	movs	r2, #0
 8013402:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	689a      	ldr	r2, [r3, #8]
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	691b      	ldr	r3, [r3, #16]
 801340c:	431a      	orrs	r2, r3
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	695b      	ldr	r3, [r3, #20]
 8013412:	431a      	orrs	r2, r3
 8013414:	69fb      	ldr	r3, [r7, #28]
 8013416:	69db      	ldr	r3, [r3, #28]
 8013418:	4313      	orrs	r3, r2
 801341a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4ac3      	ldr	r2, [pc, #780]	@ (8013730 <UART_SetConfig+0x340>)
 8013424:	4013      	ands	r3, r2
 8013426:	0019      	movs	r1, r3
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801342e:	430a      	orrs	r2, r1
 8013430:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	4abe      	ldr	r2, [pc, #760]	@ (8013734 <UART_SetConfig+0x344>)
 801343a:	4013      	ands	r3, r2
 801343c:	0019      	movs	r1, r3
 801343e:	69fb      	ldr	r3, [r7, #28]
 8013440:	68da      	ldr	r2, [r3, #12]
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	430a      	orrs	r2, r1
 8013448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	699b      	ldr	r3, [r3, #24]
 801344e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	4ab8      	ldr	r2, [pc, #736]	@ (8013738 <UART_SetConfig+0x348>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d004      	beq.n	8013464 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	6a1b      	ldr	r3, [r3, #32]
 801345e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013460:	4313      	orrs	r3, r2
 8013462:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013464:	69fb      	ldr	r3, [r7, #28]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	4ab4      	ldr	r2, [pc, #720]	@ (801373c <UART_SetConfig+0x34c>)
 801346c:	4013      	ands	r3, r2
 801346e:	0019      	movs	r1, r3
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013476:	430a      	orrs	r2, r1
 8013478:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801347a:	69fb      	ldr	r3, [r7, #28]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	4ab0      	ldr	r2, [pc, #704]	@ (8013740 <UART_SetConfig+0x350>)
 8013480:	4293      	cmp	r3, r2
 8013482:	d131      	bne.n	80134e8 <UART_SetConfig+0xf8>
 8013484:	4baf      	ldr	r3, [pc, #700]	@ (8013744 <UART_SetConfig+0x354>)
 8013486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013488:	2203      	movs	r2, #3
 801348a:	4013      	ands	r3, r2
 801348c:	2b03      	cmp	r3, #3
 801348e:	d01d      	beq.n	80134cc <UART_SetConfig+0xdc>
 8013490:	d823      	bhi.n	80134da <UART_SetConfig+0xea>
 8013492:	2b02      	cmp	r3, #2
 8013494:	d00c      	beq.n	80134b0 <UART_SetConfig+0xc0>
 8013496:	d820      	bhi.n	80134da <UART_SetConfig+0xea>
 8013498:	2b00      	cmp	r3, #0
 801349a:	d002      	beq.n	80134a2 <UART_SetConfig+0xb2>
 801349c:	2b01      	cmp	r3, #1
 801349e:	d00e      	beq.n	80134be <UART_SetConfig+0xce>
 80134a0:	e01b      	b.n	80134da <UART_SetConfig+0xea>
 80134a2:	231b      	movs	r3, #27
 80134a4:	2218      	movs	r2, #24
 80134a6:	189b      	adds	r3, r3, r2
 80134a8:	19db      	adds	r3, r3, r7
 80134aa:	2201      	movs	r2, #1
 80134ac:	701a      	strb	r2, [r3, #0]
 80134ae:	e0b4      	b.n	801361a <UART_SetConfig+0x22a>
 80134b0:	231b      	movs	r3, #27
 80134b2:	2218      	movs	r2, #24
 80134b4:	189b      	adds	r3, r3, r2
 80134b6:	19db      	adds	r3, r3, r7
 80134b8:	2202      	movs	r2, #2
 80134ba:	701a      	strb	r2, [r3, #0]
 80134bc:	e0ad      	b.n	801361a <UART_SetConfig+0x22a>
 80134be:	231b      	movs	r3, #27
 80134c0:	2218      	movs	r2, #24
 80134c2:	189b      	adds	r3, r3, r2
 80134c4:	19db      	adds	r3, r3, r7
 80134c6:	2204      	movs	r2, #4
 80134c8:	701a      	strb	r2, [r3, #0]
 80134ca:	e0a6      	b.n	801361a <UART_SetConfig+0x22a>
 80134cc:	231b      	movs	r3, #27
 80134ce:	2218      	movs	r2, #24
 80134d0:	189b      	adds	r3, r3, r2
 80134d2:	19db      	adds	r3, r3, r7
 80134d4:	2208      	movs	r2, #8
 80134d6:	701a      	strb	r2, [r3, #0]
 80134d8:	e09f      	b.n	801361a <UART_SetConfig+0x22a>
 80134da:	231b      	movs	r3, #27
 80134dc:	2218      	movs	r2, #24
 80134de:	189b      	adds	r3, r3, r2
 80134e0:	19db      	adds	r3, r3, r7
 80134e2:	2210      	movs	r2, #16
 80134e4:	701a      	strb	r2, [r3, #0]
 80134e6:	e098      	b.n	801361a <UART_SetConfig+0x22a>
 80134e8:	69fb      	ldr	r3, [r7, #28]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	4a96      	ldr	r2, [pc, #600]	@ (8013748 <UART_SetConfig+0x358>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d131      	bne.n	8013556 <UART_SetConfig+0x166>
 80134f2:	4b94      	ldr	r3, [pc, #592]	@ (8013744 <UART_SetConfig+0x354>)
 80134f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134f6:	220c      	movs	r2, #12
 80134f8:	4013      	ands	r3, r2
 80134fa:	2b0c      	cmp	r3, #12
 80134fc:	d01d      	beq.n	801353a <UART_SetConfig+0x14a>
 80134fe:	d823      	bhi.n	8013548 <UART_SetConfig+0x158>
 8013500:	2b08      	cmp	r3, #8
 8013502:	d00c      	beq.n	801351e <UART_SetConfig+0x12e>
 8013504:	d820      	bhi.n	8013548 <UART_SetConfig+0x158>
 8013506:	2b00      	cmp	r3, #0
 8013508:	d002      	beq.n	8013510 <UART_SetConfig+0x120>
 801350a:	2b04      	cmp	r3, #4
 801350c:	d00e      	beq.n	801352c <UART_SetConfig+0x13c>
 801350e:	e01b      	b.n	8013548 <UART_SetConfig+0x158>
 8013510:	231b      	movs	r3, #27
 8013512:	2218      	movs	r2, #24
 8013514:	189b      	adds	r3, r3, r2
 8013516:	19db      	adds	r3, r3, r7
 8013518:	2200      	movs	r2, #0
 801351a:	701a      	strb	r2, [r3, #0]
 801351c:	e07d      	b.n	801361a <UART_SetConfig+0x22a>
 801351e:	231b      	movs	r3, #27
 8013520:	2218      	movs	r2, #24
 8013522:	189b      	adds	r3, r3, r2
 8013524:	19db      	adds	r3, r3, r7
 8013526:	2202      	movs	r2, #2
 8013528:	701a      	strb	r2, [r3, #0]
 801352a:	e076      	b.n	801361a <UART_SetConfig+0x22a>
 801352c:	231b      	movs	r3, #27
 801352e:	2218      	movs	r2, #24
 8013530:	189b      	adds	r3, r3, r2
 8013532:	19db      	adds	r3, r3, r7
 8013534:	2204      	movs	r2, #4
 8013536:	701a      	strb	r2, [r3, #0]
 8013538:	e06f      	b.n	801361a <UART_SetConfig+0x22a>
 801353a:	231b      	movs	r3, #27
 801353c:	2218      	movs	r2, #24
 801353e:	189b      	adds	r3, r3, r2
 8013540:	19db      	adds	r3, r3, r7
 8013542:	2208      	movs	r2, #8
 8013544:	701a      	strb	r2, [r3, #0]
 8013546:	e068      	b.n	801361a <UART_SetConfig+0x22a>
 8013548:	231b      	movs	r3, #27
 801354a:	2218      	movs	r2, #24
 801354c:	189b      	adds	r3, r3, r2
 801354e:	19db      	adds	r3, r3, r7
 8013550:	2210      	movs	r2, #16
 8013552:	701a      	strb	r2, [r3, #0]
 8013554:	e061      	b.n	801361a <UART_SetConfig+0x22a>
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	4a7c      	ldr	r2, [pc, #496]	@ (801374c <UART_SetConfig+0x35c>)
 801355c:	4293      	cmp	r3, r2
 801355e:	d106      	bne.n	801356e <UART_SetConfig+0x17e>
 8013560:	231b      	movs	r3, #27
 8013562:	2218      	movs	r2, #24
 8013564:	189b      	adds	r3, r3, r2
 8013566:	19db      	adds	r3, r3, r7
 8013568:	2200      	movs	r2, #0
 801356a:	701a      	strb	r2, [r3, #0]
 801356c:	e055      	b.n	801361a <UART_SetConfig+0x22a>
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4a77      	ldr	r2, [pc, #476]	@ (8013750 <UART_SetConfig+0x360>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d106      	bne.n	8013586 <UART_SetConfig+0x196>
 8013578:	231b      	movs	r3, #27
 801357a:	2218      	movs	r2, #24
 801357c:	189b      	adds	r3, r3, r2
 801357e:	19db      	adds	r3, r3, r7
 8013580:	2200      	movs	r2, #0
 8013582:	701a      	strb	r2, [r3, #0]
 8013584:	e049      	b.n	801361a <UART_SetConfig+0x22a>
 8013586:	69fb      	ldr	r3, [r7, #28]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4a6b      	ldr	r2, [pc, #428]	@ (8013738 <UART_SetConfig+0x348>)
 801358c:	4293      	cmp	r3, r2
 801358e:	d13e      	bne.n	801360e <UART_SetConfig+0x21e>
 8013590:	4b6c      	ldr	r3, [pc, #432]	@ (8013744 <UART_SetConfig+0x354>)
 8013592:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013594:	23c0      	movs	r3, #192	@ 0xc0
 8013596:	011b      	lsls	r3, r3, #4
 8013598:	4013      	ands	r3, r2
 801359a:	22c0      	movs	r2, #192	@ 0xc0
 801359c:	0112      	lsls	r2, r2, #4
 801359e:	4293      	cmp	r3, r2
 80135a0:	d027      	beq.n	80135f2 <UART_SetConfig+0x202>
 80135a2:	22c0      	movs	r2, #192	@ 0xc0
 80135a4:	0112      	lsls	r2, r2, #4
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d82a      	bhi.n	8013600 <UART_SetConfig+0x210>
 80135aa:	2280      	movs	r2, #128	@ 0x80
 80135ac:	0112      	lsls	r2, r2, #4
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d011      	beq.n	80135d6 <UART_SetConfig+0x1e6>
 80135b2:	2280      	movs	r2, #128	@ 0x80
 80135b4:	0112      	lsls	r2, r2, #4
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d822      	bhi.n	8013600 <UART_SetConfig+0x210>
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d004      	beq.n	80135c8 <UART_SetConfig+0x1d8>
 80135be:	2280      	movs	r2, #128	@ 0x80
 80135c0:	00d2      	lsls	r2, r2, #3
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d00e      	beq.n	80135e4 <UART_SetConfig+0x1f4>
 80135c6:	e01b      	b.n	8013600 <UART_SetConfig+0x210>
 80135c8:	231b      	movs	r3, #27
 80135ca:	2218      	movs	r2, #24
 80135cc:	189b      	adds	r3, r3, r2
 80135ce:	19db      	adds	r3, r3, r7
 80135d0:	2200      	movs	r2, #0
 80135d2:	701a      	strb	r2, [r3, #0]
 80135d4:	e021      	b.n	801361a <UART_SetConfig+0x22a>
 80135d6:	231b      	movs	r3, #27
 80135d8:	2218      	movs	r2, #24
 80135da:	189b      	adds	r3, r3, r2
 80135dc:	19db      	adds	r3, r3, r7
 80135de:	2202      	movs	r2, #2
 80135e0:	701a      	strb	r2, [r3, #0]
 80135e2:	e01a      	b.n	801361a <UART_SetConfig+0x22a>
 80135e4:	231b      	movs	r3, #27
 80135e6:	2218      	movs	r2, #24
 80135e8:	189b      	adds	r3, r3, r2
 80135ea:	19db      	adds	r3, r3, r7
 80135ec:	2204      	movs	r2, #4
 80135ee:	701a      	strb	r2, [r3, #0]
 80135f0:	e013      	b.n	801361a <UART_SetConfig+0x22a>
 80135f2:	231b      	movs	r3, #27
 80135f4:	2218      	movs	r2, #24
 80135f6:	189b      	adds	r3, r3, r2
 80135f8:	19db      	adds	r3, r3, r7
 80135fa:	2208      	movs	r2, #8
 80135fc:	701a      	strb	r2, [r3, #0]
 80135fe:	e00c      	b.n	801361a <UART_SetConfig+0x22a>
 8013600:	231b      	movs	r3, #27
 8013602:	2218      	movs	r2, #24
 8013604:	189b      	adds	r3, r3, r2
 8013606:	19db      	adds	r3, r3, r7
 8013608:	2210      	movs	r2, #16
 801360a:	701a      	strb	r2, [r3, #0]
 801360c:	e005      	b.n	801361a <UART_SetConfig+0x22a>
 801360e:	231b      	movs	r3, #27
 8013610:	2218      	movs	r2, #24
 8013612:	189b      	adds	r3, r3, r2
 8013614:	19db      	adds	r3, r3, r7
 8013616:	2210      	movs	r2, #16
 8013618:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801361a:	69fb      	ldr	r3, [r7, #28]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	4a46      	ldr	r2, [pc, #280]	@ (8013738 <UART_SetConfig+0x348>)
 8013620:	4293      	cmp	r3, r2
 8013622:	d000      	beq.n	8013626 <UART_SetConfig+0x236>
 8013624:	e09a      	b.n	801375c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013626:	231b      	movs	r3, #27
 8013628:	2218      	movs	r2, #24
 801362a:	189b      	adds	r3, r3, r2
 801362c:	19db      	adds	r3, r3, r7
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	2b08      	cmp	r3, #8
 8013632:	d01d      	beq.n	8013670 <UART_SetConfig+0x280>
 8013634:	dc20      	bgt.n	8013678 <UART_SetConfig+0x288>
 8013636:	2b04      	cmp	r3, #4
 8013638:	d015      	beq.n	8013666 <UART_SetConfig+0x276>
 801363a:	dc1d      	bgt.n	8013678 <UART_SetConfig+0x288>
 801363c:	2b00      	cmp	r3, #0
 801363e:	d002      	beq.n	8013646 <UART_SetConfig+0x256>
 8013640:	2b02      	cmp	r3, #2
 8013642:	d005      	beq.n	8013650 <UART_SetConfig+0x260>
 8013644:	e018      	b.n	8013678 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013646:	f7fe f8f5 	bl	8011834 <HAL_RCC_GetPCLK1Freq>
 801364a:	0003      	movs	r3, r0
 801364c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801364e:	e01c      	b.n	801368a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013650:	4b3c      	ldr	r3, [pc, #240]	@ (8013744 <UART_SetConfig+0x354>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	2210      	movs	r2, #16
 8013656:	4013      	ands	r3, r2
 8013658:	d002      	beq.n	8013660 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801365a:	4b3e      	ldr	r3, [pc, #248]	@ (8013754 <UART_SetConfig+0x364>)
 801365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801365e:	e014      	b.n	801368a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8013660:	4b3d      	ldr	r3, [pc, #244]	@ (8013758 <UART_SetConfig+0x368>)
 8013662:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013664:	e011      	b.n	801368a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013666:	f7fe f835 	bl	80116d4 <HAL_RCC_GetSysClockFreq>
 801366a:	0003      	movs	r3, r0
 801366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801366e:	e00c      	b.n	801368a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013670:	2380      	movs	r3, #128	@ 0x80
 8013672:	021b      	lsls	r3, r3, #8
 8013674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013676:	e008      	b.n	801368a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8013678:	2300      	movs	r3, #0
 801367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801367c:	231a      	movs	r3, #26
 801367e:	2218      	movs	r2, #24
 8013680:	189b      	adds	r3, r3, r2
 8013682:	19db      	adds	r3, r3, r7
 8013684:	2201      	movs	r2, #1
 8013686:	701a      	strb	r2, [r3, #0]
        break;
 8013688:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801368a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801368c:	2b00      	cmp	r3, #0
 801368e:	d100      	bne.n	8013692 <UART_SetConfig+0x2a2>
 8013690:	e133      	b.n	80138fa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	685a      	ldr	r2, [r3, #4]
 8013696:	0013      	movs	r3, r2
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	189b      	adds	r3, r3, r2
 801369c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801369e:	429a      	cmp	r2, r3
 80136a0:	d305      	bcc.n	80136ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80136a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d906      	bls.n	80136bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80136ae:	231a      	movs	r3, #26
 80136b0:	2218      	movs	r2, #24
 80136b2:	189b      	adds	r3, r3, r2
 80136b4:	19db      	adds	r3, r3, r7
 80136b6:	2201      	movs	r2, #1
 80136b8:	701a      	strb	r2, [r3, #0]
 80136ba:	e11e      	b.n	80138fa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80136bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136be:	613b      	str	r3, [r7, #16]
 80136c0:	2300      	movs	r3, #0
 80136c2:	617b      	str	r3, [r7, #20]
 80136c4:	6939      	ldr	r1, [r7, #16]
 80136c6:	697a      	ldr	r2, [r7, #20]
 80136c8:	000b      	movs	r3, r1
 80136ca:	0e1b      	lsrs	r3, r3, #24
 80136cc:	0010      	movs	r0, r2
 80136ce:	0205      	lsls	r5, r0, #8
 80136d0:	431d      	orrs	r5, r3
 80136d2:	000b      	movs	r3, r1
 80136d4:	021c      	lsls	r4, r3, #8
 80136d6:	69fb      	ldr	r3, [r7, #28]
 80136d8:	685b      	ldr	r3, [r3, #4]
 80136da:	085b      	lsrs	r3, r3, #1
 80136dc:	60bb      	str	r3, [r7, #8]
 80136de:	2300      	movs	r3, #0
 80136e0:	60fb      	str	r3, [r7, #12]
 80136e2:	68b8      	ldr	r0, [r7, #8]
 80136e4:	68f9      	ldr	r1, [r7, #12]
 80136e6:	1900      	adds	r0, r0, r4
 80136e8:	4169      	adcs	r1, r5
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	603b      	str	r3, [r7, #0]
 80136f0:	2300      	movs	r3, #0
 80136f2:	607b      	str	r3, [r7, #4]
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f7ec ff38 	bl	800056c <__aeabi_uldivmod>
 80136fc:	0002      	movs	r2, r0
 80136fe:	000b      	movs	r3, r1
 8013700:	0013      	movs	r3, r2
 8013702:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013706:	23c0      	movs	r3, #192	@ 0xc0
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	429a      	cmp	r2, r3
 801370c:	d309      	bcc.n	8013722 <UART_SetConfig+0x332>
 801370e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013710:	2380      	movs	r3, #128	@ 0x80
 8013712:	035b      	lsls	r3, r3, #13
 8013714:	429a      	cmp	r2, r3
 8013716:	d204      	bcs.n	8013722 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801371e:	60da      	str	r2, [r3, #12]
 8013720:	e0eb      	b.n	80138fa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8013722:	231a      	movs	r3, #26
 8013724:	2218      	movs	r2, #24
 8013726:	189b      	adds	r3, r3, r2
 8013728:	19db      	adds	r3, r3, r7
 801372a:	2201      	movs	r2, #1
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	e0e4      	b.n	80138fa <UART_SetConfig+0x50a>
 8013730:	efff69f3 	.word	0xefff69f3
 8013734:	ffffcfff 	.word	0xffffcfff
 8013738:	40004800 	.word	0x40004800
 801373c:	fffff4ff 	.word	0xfffff4ff
 8013740:	40013800 	.word	0x40013800
 8013744:	40021000 	.word	0x40021000
 8013748:	40004400 	.word	0x40004400
 801374c:	40004c00 	.word	0x40004c00
 8013750:	40005000 	.word	0x40005000
 8013754:	003d0900 	.word	0x003d0900
 8013758:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801375c:	69fb      	ldr	r3, [r7, #28]
 801375e:	69da      	ldr	r2, [r3, #28]
 8013760:	2380      	movs	r3, #128	@ 0x80
 8013762:	021b      	lsls	r3, r3, #8
 8013764:	429a      	cmp	r2, r3
 8013766:	d000      	beq.n	801376a <UART_SetConfig+0x37a>
 8013768:	e070      	b.n	801384c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801376a:	231b      	movs	r3, #27
 801376c:	2218      	movs	r2, #24
 801376e:	189b      	adds	r3, r3, r2
 8013770:	19db      	adds	r3, r3, r7
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	2b08      	cmp	r3, #8
 8013776:	d822      	bhi.n	80137be <UART_SetConfig+0x3ce>
 8013778:	009a      	lsls	r2, r3, #2
 801377a:	4b67      	ldr	r3, [pc, #412]	@ (8013918 <UART_SetConfig+0x528>)
 801377c:	18d3      	adds	r3, r2, r3
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013782:	f7fe f857 	bl	8011834 <HAL_RCC_GetPCLK1Freq>
 8013786:	0003      	movs	r3, r0
 8013788:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801378a:	e021      	b.n	80137d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801378c:	f7fe f868 	bl	8011860 <HAL_RCC_GetPCLK2Freq>
 8013790:	0003      	movs	r3, r0
 8013792:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013794:	e01c      	b.n	80137d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013796:	4b61      	ldr	r3, [pc, #388]	@ (801391c <UART_SetConfig+0x52c>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	2210      	movs	r2, #16
 801379c:	4013      	ands	r3, r2
 801379e:	d002      	beq.n	80137a6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80137a0:	4b5f      	ldr	r3, [pc, #380]	@ (8013920 <UART_SetConfig+0x530>)
 80137a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80137a4:	e014      	b.n	80137d0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80137a6:	4b5f      	ldr	r3, [pc, #380]	@ (8013924 <UART_SetConfig+0x534>)
 80137a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80137aa:	e011      	b.n	80137d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80137ac:	f7fd ff92 	bl	80116d4 <HAL_RCC_GetSysClockFreq>
 80137b0:	0003      	movs	r3, r0
 80137b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80137b4:	e00c      	b.n	80137d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80137b6:	2380      	movs	r3, #128	@ 0x80
 80137b8:	021b      	lsls	r3, r3, #8
 80137ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80137bc:	e008      	b.n	80137d0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80137be:	2300      	movs	r3, #0
 80137c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80137c2:	231a      	movs	r3, #26
 80137c4:	2218      	movs	r2, #24
 80137c6:	189b      	adds	r3, r3, r2
 80137c8:	19db      	adds	r3, r3, r7
 80137ca:	2201      	movs	r2, #1
 80137cc:	701a      	strb	r2, [r3, #0]
        break;
 80137ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80137d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d100      	bne.n	80137d8 <UART_SetConfig+0x3e8>
 80137d6:	e090      	b.n	80138fa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80137d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137da:	005a      	lsls	r2, r3, #1
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	085b      	lsrs	r3, r3, #1
 80137e2:	18d2      	adds	r2, r2, r3
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	0019      	movs	r1, r3
 80137ea:	0010      	movs	r0, r2
 80137ec:	f7ec fcd0 	bl	8000190 <__udivsi3>
 80137f0:	0003      	movs	r3, r0
 80137f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80137f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137f6:	2b0f      	cmp	r3, #15
 80137f8:	d921      	bls.n	801383e <UART_SetConfig+0x44e>
 80137fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137fc:	2380      	movs	r3, #128	@ 0x80
 80137fe:	025b      	lsls	r3, r3, #9
 8013800:	429a      	cmp	r2, r3
 8013802:	d21c      	bcs.n	801383e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013806:	b29a      	uxth	r2, r3
 8013808:	200e      	movs	r0, #14
 801380a:	2418      	movs	r4, #24
 801380c:	1903      	adds	r3, r0, r4
 801380e:	19db      	adds	r3, r3, r7
 8013810:	210f      	movs	r1, #15
 8013812:	438a      	bics	r2, r1
 8013814:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013818:	085b      	lsrs	r3, r3, #1
 801381a:	b29b      	uxth	r3, r3
 801381c:	2207      	movs	r2, #7
 801381e:	4013      	ands	r3, r2
 8013820:	b299      	uxth	r1, r3
 8013822:	1903      	adds	r3, r0, r4
 8013824:	19db      	adds	r3, r3, r7
 8013826:	1902      	adds	r2, r0, r4
 8013828:	19d2      	adds	r2, r2, r7
 801382a:	8812      	ldrh	r2, [r2, #0]
 801382c:	430a      	orrs	r2, r1
 801382e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	1902      	adds	r2, r0, r4
 8013836:	19d2      	adds	r2, r2, r7
 8013838:	8812      	ldrh	r2, [r2, #0]
 801383a:	60da      	str	r2, [r3, #12]
 801383c:	e05d      	b.n	80138fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801383e:	231a      	movs	r3, #26
 8013840:	2218      	movs	r2, #24
 8013842:	189b      	adds	r3, r3, r2
 8013844:	19db      	adds	r3, r3, r7
 8013846:	2201      	movs	r2, #1
 8013848:	701a      	strb	r2, [r3, #0]
 801384a:	e056      	b.n	80138fa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801384c:	231b      	movs	r3, #27
 801384e:	2218      	movs	r2, #24
 8013850:	189b      	adds	r3, r3, r2
 8013852:	19db      	adds	r3, r3, r7
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	2b08      	cmp	r3, #8
 8013858:	d822      	bhi.n	80138a0 <UART_SetConfig+0x4b0>
 801385a:	009a      	lsls	r2, r3, #2
 801385c:	4b32      	ldr	r3, [pc, #200]	@ (8013928 <UART_SetConfig+0x538>)
 801385e:	18d3      	adds	r3, r2, r3
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013864:	f7fd ffe6 	bl	8011834 <HAL_RCC_GetPCLK1Freq>
 8013868:	0003      	movs	r3, r0
 801386a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801386c:	e021      	b.n	80138b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801386e:	f7fd fff7 	bl	8011860 <HAL_RCC_GetPCLK2Freq>
 8013872:	0003      	movs	r3, r0
 8013874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013876:	e01c      	b.n	80138b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013878:	4b28      	ldr	r3, [pc, #160]	@ (801391c <UART_SetConfig+0x52c>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2210      	movs	r2, #16
 801387e:	4013      	ands	r3, r2
 8013880:	d002      	beq.n	8013888 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8013882:	4b27      	ldr	r3, [pc, #156]	@ (8013920 <UART_SetConfig+0x530>)
 8013884:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013886:	e014      	b.n	80138b2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8013888:	4b26      	ldr	r3, [pc, #152]	@ (8013924 <UART_SetConfig+0x534>)
 801388a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801388c:	e011      	b.n	80138b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801388e:	f7fd ff21 	bl	80116d4 <HAL_RCC_GetSysClockFreq>
 8013892:	0003      	movs	r3, r0
 8013894:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013896:	e00c      	b.n	80138b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013898:	2380      	movs	r3, #128	@ 0x80
 801389a:	021b      	lsls	r3, r3, #8
 801389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801389e:	e008      	b.n	80138b2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80138a0:	2300      	movs	r3, #0
 80138a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80138a4:	231a      	movs	r3, #26
 80138a6:	2218      	movs	r2, #24
 80138a8:	189b      	adds	r3, r3, r2
 80138aa:	19db      	adds	r3, r3, r7
 80138ac:	2201      	movs	r2, #1
 80138ae:	701a      	strb	r2, [r3, #0]
        break;
 80138b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80138b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d020      	beq.n	80138fa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	085a      	lsrs	r2, r3, #1
 80138be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c0:	18d2      	adds	r2, r2, r3
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	0019      	movs	r1, r3
 80138c8:	0010      	movs	r0, r2
 80138ca:	f7ec fc61 	bl	8000190 <__udivsi3>
 80138ce:	0003      	movs	r3, r0
 80138d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80138d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d4:	2b0f      	cmp	r3, #15
 80138d6:	d90a      	bls.n	80138ee <UART_SetConfig+0x4fe>
 80138d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138da:	2380      	movs	r3, #128	@ 0x80
 80138dc:	025b      	lsls	r3, r3, #9
 80138de:	429a      	cmp	r2, r3
 80138e0:	d205      	bcs.n	80138ee <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80138e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	60da      	str	r2, [r3, #12]
 80138ec:	e005      	b.n	80138fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80138ee:	231a      	movs	r3, #26
 80138f0:	2218      	movs	r2, #24
 80138f2:	189b      	adds	r3, r3, r2
 80138f4:	19db      	adds	r3, r3, r7
 80138f6:	2201      	movs	r2, #1
 80138f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	2200      	movs	r2, #0
 80138fe:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	2200      	movs	r2, #0
 8013904:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8013906:	231a      	movs	r3, #26
 8013908:	2218      	movs	r2, #24
 801390a:	189b      	adds	r3, r3, r2
 801390c:	19db      	adds	r3, r3, r7
 801390e:	781b      	ldrb	r3, [r3, #0]
}
 8013910:	0018      	movs	r0, r3
 8013912:	46bd      	mov	sp, r7
 8013914:	b00e      	add	sp, #56	@ 0x38
 8013916:	bdb0      	pop	{r4, r5, r7, pc}
 8013918:	0801f2d0 	.word	0x0801f2d0
 801391c:	40021000 	.word	0x40021000
 8013920:	003d0900 	.word	0x003d0900
 8013924:	00f42400 	.word	0x00f42400
 8013928:	0801f2f4 	.word	0x0801f2f4

0801392c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013938:	2201      	movs	r2, #1
 801393a:	4013      	ands	r3, r2
 801393c:	d00b      	beq.n	8013956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	4a4a      	ldr	r2, [pc, #296]	@ (8013a70 <UART_AdvFeatureConfig+0x144>)
 8013946:	4013      	ands	r3, r2
 8013948:	0019      	movs	r1, r3
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	430a      	orrs	r2, r1
 8013954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801395a:	2202      	movs	r2, #2
 801395c:	4013      	ands	r3, r2
 801395e:	d00b      	beq.n	8013978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	4a43      	ldr	r2, [pc, #268]	@ (8013a74 <UART_AdvFeatureConfig+0x148>)
 8013968:	4013      	ands	r3, r2
 801396a:	0019      	movs	r1, r3
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	430a      	orrs	r2, r1
 8013976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801397c:	2204      	movs	r2, #4
 801397e:	4013      	ands	r3, r2
 8013980:	d00b      	beq.n	801399a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	4a3b      	ldr	r2, [pc, #236]	@ (8013a78 <UART_AdvFeatureConfig+0x14c>)
 801398a:	4013      	ands	r3, r2
 801398c:	0019      	movs	r1, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	430a      	orrs	r2, r1
 8013998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801399e:	2208      	movs	r2, #8
 80139a0:	4013      	ands	r3, r2
 80139a2:	d00b      	beq.n	80139bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	4a34      	ldr	r2, [pc, #208]	@ (8013a7c <UART_AdvFeatureConfig+0x150>)
 80139ac:	4013      	ands	r3, r2
 80139ae:	0019      	movs	r1, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	430a      	orrs	r2, r1
 80139ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139c0:	2210      	movs	r2, #16
 80139c2:	4013      	ands	r3, r2
 80139c4:	d00b      	beq.n	80139de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	689b      	ldr	r3, [r3, #8]
 80139cc:	4a2c      	ldr	r2, [pc, #176]	@ (8013a80 <UART_AdvFeatureConfig+0x154>)
 80139ce:	4013      	ands	r3, r2
 80139d0:	0019      	movs	r1, r3
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	430a      	orrs	r2, r1
 80139dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139e2:	2220      	movs	r2, #32
 80139e4:	4013      	ands	r3, r2
 80139e6:	d00b      	beq.n	8013a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	689b      	ldr	r3, [r3, #8]
 80139ee:	4a25      	ldr	r2, [pc, #148]	@ (8013a84 <UART_AdvFeatureConfig+0x158>)
 80139f0:	4013      	ands	r3, r2
 80139f2:	0019      	movs	r1, r3
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	430a      	orrs	r2, r1
 80139fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a04:	2240      	movs	r2, #64	@ 0x40
 8013a06:	4013      	ands	r3, r2
 8013a08:	d01d      	beq.n	8013a46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	4a1d      	ldr	r2, [pc, #116]	@ (8013a88 <UART_AdvFeatureConfig+0x15c>)
 8013a12:	4013      	ands	r3, r2
 8013a14:	0019      	movs	r1, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	430a      	orrs	r2, r1
 8013a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013a26:	2380      	movs	r3, #128	@ 0x80
 8013a28:	035b      	lsls	r3, r3, #13
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d10b      	bne.n	8013a46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	4a15      	ldr	r2, [pc, #84]	@ (8013a8c <UART_AdvFeatureConfig+0x160>)
 8013a36:	4013      	ands	r3, r2
 8013a38:	0019      	movs	r1, r3
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	430a      	orrs	r2, r1
 8013a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a4a:	2280      	movs	r2, #128	@ 0x80
 8013a4c:	4013      	ands	r3, r2
 8013a4e:	d00b      	beq.n	8013a68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	4a0e      	ldr	r2, [pc, #56]	@ (8013a90 <UART_AdvFeatureConfig+0x164>)
 8013a58:	4013      	ands	r3, r2
 8013a5a:	0019      	movs	r1, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	430a      	orrs	r2, r1
 8013a66:	605a      	str	r2, [r3, #4]
  }
}
 8013a68:	46c0      	nop			@ (mov r8, r8)
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	b002      	add	sp, #8
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	fffdffff 	.word	0xfffdffff
 8013a74:	fffeffff 	.word	0xfffeffff
 8013a78:	fffbffff 	.word	0xfffbffff
 8013a7c:	ffff7fff 	.word	0xffff7fff
 8013a80:	ffffefff 	.word	0xffffefff
 8013a84:	ffffdfff 	.word	0xffffdfff
 8013a88:	ffefffff 	.word	0xffefffff
 8013a8c:	ff9fffff 	.word	0xff9fffff
 8013a90:	fff7ffff 	.word	0xfff7ffff

08013a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b092      	sub	sp, #72	@ 0x48
 8013a98:	af02      	add	r7, sp, #8
 8013a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2284      	movs	r2, #132	@ 0x84
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013aa4:	f7f7 fcfc 	bl	800b4a0 <HAL_GetTick>
 8013aa8:	0003      	movs	r3, r0
 8013aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2208      	movs	r2, #8
 8013ab4:	4013      	ands	r3, r2
 8013ab6:	2b08      	cmp	r3, #8
 8013ab8:	d12c      	bne.n	8013b14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013abc:	2280      	movs	r2, #128	@ 0x80
 8013abe:	0391      	lsls	r1, r2, #14
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	4a46      	ldr	r2, [pc, #280]	@ (8013bdc <UART_CheckIdleState+0x148>)
 8013ac4:	9200      	str	r2, [sp, #0]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	f000 f88c 	bl	8013be4 <UART_WaitOnFlagUntilTimeout>
 8013acc:	1e03      	subs	r3, r0, #0
 8013ace:	d021      	beq.n	8013b14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8013ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8013ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013ada:	2301      	movs	r3, #1
 8013adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ae0:	f383 8810 	msr	PRIMASK, r3
}
 8013ae4:	46c0      	nop			@ (mov r8, r8)
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2180      	movs	r1, #128	@ 0x80
 8013af2:	438a      	bics	r2, r1
 8013af4:	601a      	str	r2, [r3, #0]
 8013af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013afc:	f383 8810 	msr	PRIMASK, r3
}
 8013b00:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2220      	movs	r2, #32
 8013b06:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2278      	movs	r2, #120	@ 0x78
 8013b0c:	2100      	movs	r1, #0
 8013b0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b10:	2303      	movs	r3, #3
 8013b12:	e05f      	b.n	8013bd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	2204      	movs	r2, #4
 8013b1c:	4013      	ands	r3, r2
 8013b1e:	2b04      	cmp	r3, #4
 8013b20:	d146      	bne.n	8013bb0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b24:	2280      	movs	r2, #128	@ 0x80
 8013b26:	03d1      	lsls	r1, r2, #15
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8013bdc <UART_CheckIdleState+0x148>)
 8013b2c:	9200      	str	r2, [sp, #0]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f000 f858 	bl	8013be4 <UART_WaitOnFlagUntilTimeout>
 8013b34:	1e03      	subs	r3, r0, #0
 8013b36:	d03b      	beq.n	8013bb0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b38:	f3ef 8310 	mrs	r3, PRIMASK
 8013b3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b42:	2301      	movs	r3, #1
 8013b44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	f383 8810 	msr	PRIMASK, r3
}
 8013b4c:	46c0      	nop			@ (mov r8, r8)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	681a      	ldr	r2, [r3, #0]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4921      	ldr	r1, [pc, #132]	@ (8013be0 <UART_CheckIdleState+0x14c>)
 8013b5a:	400a      	ands	r2, r1
 8013b5c:	601a      	str	r2, [r3, #0]
 8013b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	f383 8810 	msr	PRIMASK, r3
}
 8013b68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8013b6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8013b70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b72:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b74:	2301      	movs	r3, #1
 8013b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	f383 8810 	msr	PRIMASK, r3
}
 8013b7e:	46c0      	nop			@ (mov r8, r8)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	689a      	ldr	r2, [r3, #8]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	438a      	bics	r2, r1
 8013b8e:	609a      	str	r2, [r3, #8]
 8013b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b94:	6a3b      	ldr	r3, [r7, #32]
 8013b96:	f383 8810 	msr	PRIMASK, r3
}
 8013b9a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2280      	movs	r2, #128	@ 0x80
 8013ba0:	2120      	movs	r1, #32
 8013ba2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2278      	movs	r2, #120	@ 0x78
 8013ba8:	2100      	movs	r1, #0
 8013baa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013bac:	2303      	movs	r3, #3
 8013bae:	e011      	b.n	8013bd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2220      	movs	r2, #32
 8013bb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2280      	movs	r2, #128	@ 0x80
 8013bba:	2120      	movs	r1, #32
 8013bbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2278      	movs	r2, #120	@ 0x78
 8013bce:	2100      	movs	r1, #0
 8013bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013bd2:	2300      	movs	r3, #0
}
 8013bd4:	0018      	movs	r0, r3
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	b010      	add	sp, #64	@ 0x40
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	01ffffff 	.word	0x01ffffff
 8013be0:	fffffedf 	.word	0xfffffedf

08013be4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	603b      	str	r3, [r7, #0]
 8013bf0:	1dfb      	adds	r3, r7, #7
 8013bf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013bf4:	e04b      	b.n	8013c8e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	d048      	beq.n	8013c8e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013bfc:	f7f7 fc50 	bl	800b4a0 <HAL_GetTick>
 8013c00:	0002      	movs	r2, r0
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	1ad3      	subs	r3, r2, r3
 8013c06:	69ba      	ldr	r2, [r7, #24]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d302      	bcc.n	8013c12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8013c0c:	69bb      	ldr	r3, [r7, #24]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8013c12:	2303      	movs	r3, #3
 8013c14:	e04b      	b.n	8013cae <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2204      	movs	r2, #4
 8013c1e:	4013      	ands	r3, r2
 8013c20:	d035      	beq.n	8013c8e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	69db      	ldr	r3, [r3, #28]
 8013c28:	2208      	movs	r2, #8
 8013c2a:	4013      	ands	r3, r2
 8013c2c:	2b08      	cmp	r3, #8
 8013c2e:	d111      	bne.n	8013c54 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2208      	movs	r2, #8
 8013c36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	0018      	movs	r0, r3
 8013c3c:	f000 f900 	bl	8013e40 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2284      	movs	r2, #132	@ 0x84
 8013c44:	2108      	movs	r1, #8
 8013c46:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2278      	movs	r2, #120	@ 0x78
 8013c4c:	2100      	movs	r1, #0
 8013c4e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8013c50:	2301      	movs	r3, #1
 8013c52:	e02c      	b.n	8013cae <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	69da      	ldr	r2, [r3, #28]
 8013c5a:	2380      	movs	r3, #128	@ 0x80
 8013c5c:	011b      	lsls	r3, r3, #4
 8013c5e:	401a      	ands	r2, r3
 8013c60:	2380      	movs	r3, #128	@ 0x80
 8013c62:	011b      	lsls	r3, r3, #4
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d112      	bne.n	8013c8e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	2280      	movs	r2, #128	@ 0x80
 8013c6e:	0112      	lsls	r2, r2, #4
 8013c70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	0018      	movs	r0, r3
 8013c76:	f000 f8e3 	bl	8013e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2284      	movs	r2, #132	@ 0x84
 8013c7e:	2120      	movs	r1, #32
 8013c80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2278      	movs	r2, #120	@ 0x78
 8013c86:	2100      	movs	r1, #0
 8013c88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013c8a:	2303      	movs	r3, #3
 8013c8c:	e00f      	b.n	8013cae <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	69db      	ldr	r3, [r3, #28]
 8013c94:	68ba      	ldr	r2, [r7, #8]
 8013c96:	4013      	ands	r3, r2
 8013c98:	68ba      	ldr	r2, [r7, #8]
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	425a      	negs	r2, r3
 8013c9e:	4153      	adcs	r3, r2
 8013ca0:	b2db      	uxtb	r3, r3
 8013ca2:	001a      	movs	r2, r3
 8013ca4:	1dfb      	adds	r3, r7, #7
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d0a4      	beq.n	8013bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013cac:	2300      	movs	r3, #0
}
 8013cae:	0018      	movs	r0, r3
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	b004      	add	sp, #16
 8013cb4:	bd80      	pop	{r7, pc}
	...

08013cb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b090      	sub	sp, #64	@ 0x40
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	60f8      	str	r0, [r7, #12]
 8013cc0:	60b9      	str	r1, [r7, #8]
 8013cc2:	1dbb      	adds	r3, r7, #6
 8013cc4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	68ba      	ldr	r2, [r7, #8]
 8013cca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	1dba      	adds	r2, r7, #6
 8013cd0:	2158      	movs	r1, #88	@ 0x58
 8013cd2:	8812      	ldrh	r2, [r2, #0]
 8013cd4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2284      	movs	r2, #132	@ 0x84
 8013cda:	2100      	movs	r1, #0
 8013cdc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2280      	movs	r2, #128	@ 0x80
 8013ce2:	2122      	movs	r1, #34	@ 0x22
 8013ce4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d028      	beq.n	8013d40 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8013dec <UART_Start_Receive_DMA+0x134>)
 8013cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8013df0 <UART_Start_Receive_DMA+0x138>)
 8013cfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d02:	4a3c      	ldr	r2, [pc, #240]	@ (8013df4 <UART_Start_Receive_DMA+0x13c>)
 8013d04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	3324      	adds	r3, #36	@ 0x24
 8013d18:	0019      	movs	r1, r3
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d1e:	001a      	movs	r2, r3
 8013d20:	1dbb      	adds	r3, r7, #6
 8013d22:	881b      	ldrh	r3, [r3, #0]
 8013d24:	f7f8 f8dc 	bl	800bee0 <HAL_DMA_Start_IT>
 8013d28:	1e03      	subs	r3, r0, #0
 8013d2a:	d009      	beq.n	8013d40 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	2284      	movs	r2, #132	@ 0x84
 8013d30:	2110      	movs	r1, #16
 8013d32:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2280      	movs	r2, #128	@ 0x80
 8013d38:	2120      	movs	r1, #32
 8013d3a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	e050      	b.n	8013de2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	691b      	ldr	r3, [r3, #16]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d019      	beq.n	8013d7c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d48:	f3ef 8310 	mrs	r3, PRIMASK
 8013d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8013d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d52:	2301      	movs	r3, #1
 8013d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d58:	f383 8810 	msr	PRIMASK, r3
}
 8013d5c:	46c0      	nop			@ (mov r8, r8)
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2180      	movs	r1, #128	@ 0x80
 8013d6a:	0049      	lsls	r1, r1, #1
 8013d6c:	430a      	orrs	r2, r1
 8013d6e:	601a      	str	r2, [r3, #0]
 8013d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d72:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d76:	f383 8810 	msr	PRIMASK, r3
}
 8013d7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d80:	613b      	str	r3, [r7, #16]
  return(result);
 8013d82:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013d86:	2301      	movs	r3, #1
 8013d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	f383 8810 	msr	PRIMASK, r3
}
 8013d90:	46c0      	nop			@ (mov r8, r8)
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	689a      	ldr	r2, [r3, #8]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	2101      	movs	r1, #1
 8013d9e:	430a      	orrs	r2, r1
 8013da0:	609a      	str	r2, [r3, #8]
 8013da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013da4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	f383 8810 	msr	PRIMASK, r3
}
 8013dac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dae:	f3ef 8310 	mrs	r3, PRIMASK
 8013db2:	61fb      	str	r3, [r7, #28]
  return(result);
 8013db4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8013db8:	2301      	movs	r3, #1
 8013dba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dbc:	6a3b      	ldr	r3, [r7, #32]
 8013dbe:	f383 8810 	msr	PRIMASK, r3
}
 8013dc2:	46c0      	nop			@ (mov r8, r8)
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	689a      	ldr	r2, [r3, #8]
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2140      	movs	r1, #64	@ 0x40
 8013dd0:	430a      	orrs	r2, r1
 8013dd2:	609a      	str	r2, [r3, #8]
 8013dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dda:	f383 8810 	msr	PRIMASK, r3
}
 8013dde:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8013de0:	2300      	movs	r3, #0
}
 8013de2:	0018      	movs	r0, r3
 8013de4:	46bd      	mov	sp, r7
 8013de6:	b010      	add	sp, #64	@ 0x40
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	46c0      	nop			@ (mov r8, r8)
 8013dec:	08013fc9 	.word	0x08013fc9
 8013df0:	080140fd 	.word	0x080140fd
 8013df4:	08014145 	.word	0x08014145

08013df8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b086      	sub	sp, #24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e00:	f3ef 8310 	mrs	r3, PRIMASK
 8013e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8013e06:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013e08:	617b      	str	r3, [r7, #20]
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f383 8810 	msr	PRIMASK, r3
}
 8013e14:	46c0      	nop			@ (mov r8, r8)
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	681a      	ldr	r2, [r3, #0]
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	21c0      	movs	r1, #192	@ 0xc0
 8013e22:	438a      	bics	r2, r1
 8013e24:	601a      	str	r2, [r3, #0]
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	f383 8810 	msr	PRIMASK, r3
}
 8013e30:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2220      	movs	r2, #32
 8013e36:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8013e38:	46c0      	nop			@ (mov r8, r8)
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	b006      	add	sp, #24
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b08e      	sub	sp, #56	@ 0x38
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e48:	f3ef 8310 	mrs	r3, PRIMASK
 8013e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8013e4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8013e52:	2301      	movs	r3, #1
 8013e54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e56:	69bb      	ldr	r3, [r7, #24]
 8013e58:	f383 8810 	msr	PRIMASK, r3
}
 8013e5c:	46c0      	nop			@ (mov r8, r8)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	4926      	ldr	r1, [pc, #152]	@ (8013f04 <UART_EndRxTransfer+0xc4>)
 8013e6a:	400a      	ands	r2, r1
 8013e6c:	601a      	str	r2, [r3, #0]
 8013e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	f383 8810 	msr	PRIMASK, r3
}
 8013e78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e7e:	623b      	str	r3, [r7, #32]
  return(result);
 8013e80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e84:	2301      	movs	r3, #1
 8013e86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e8a:	f383 8810 	msr	PRIMASK, r3
}
 8013e8e:	46c0      	nop			@ (mov r8, r8)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	689a      	ldr	r2, [r3, #8]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2101      	movs	r1, #1
 8013e9c:	438a      	bics	r2, r1
 8013e9e:	609a      	str	r2, [r3, #8]
 8013ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ea6:	f383 8810 	msr	PRIMASK, r3
}
 8013eaa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d118      	bne.n	8013ee6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8013eb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8013eba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	f383 8810 	msr	PRIMASK, r3
}
 8013ec8:	46c0      	nop			@ (mov r8, r8)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2110      	movs	r1, #16
 8013ed6:	438a      	bics	r2, r1
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013edc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	f383 8810 	msr	PRIMASK, r3
}
 8013ee4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2280      	movs	r2, #128	@ 0x80
 8013eea:	2120      	movs	r1, #32
 8013eec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8013efa:	46c0      	nop			@ (mov r8, r8)
 8013efc:	46bd      	mov	sp, r7
 8013efe:	b00e      	add	sp, #56	@ 0x38
 8013f00:	bd80      	pop	{r7, pc}
 8013f02:	46c0      	nop			@ (mov r8, r8)
 8013f04:	fffffedf 	.word	0xfffffedf

08013f08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b08c      	sub	sp, #48	@ 0x30
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	2220      	movs	r2, #32
 8013f1e:	4013      	ands	r3, r2
 8013f20:	d135      	bne.n	8013f8e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8013f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f24:	2252      	movs	r2, #82	@ 0x52
 8013f26:	2100      	movs	r1, #0
 8013f28:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f30:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f34:	2301      	movs	r3, #1
 8013f36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	f383 8810 	msr	PRIMASK, r3
}
 8013f3e:	46c0      	nop			@ (mov r8, r8)
 8013f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	689a      	ldr	r2, [r3, #8]
 8013f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	2180      	movs	r1, #128	@ 0x80
 8013f4c:	438a      	bics	r2, r1
 8013f4e:	609a      	str	r2, [r3, #8]
 8013f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	f383 8810 	msr	PRIMASK, r3
}
 8013f5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8013f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8013f62:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f66:	2301      	movs	r3, #1
 8013f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f6a:	69fb      	ldr	r3, [r7, #28]
 8013f6c:	f383 8810 	msr	PRIMASK, r3
}
 8013f70:	46c0      	nop			@ (mov r8, r8)
 8013f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2140      	movs	r1, #64	@ 0x40
 8013f7e:	430a      	orrs	r2, r1
 8013f80:	601a      	str	r2, [r3, #0]
 8013f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f86:	6a3b      	ldr	r3, [r7, #32]
 8013f88:	f383 8810 	msr	PRIMASK, r3
}
 8013f8c:	e006      	b.n	8013f9c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8013f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f90:	228c      	movs	r2, #140	@ 0x8c
 8013f92:	589b      	ldr	r3, [r3, r2]
 8013f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013f96:	0010      	movs	r0, r2
 8013f98:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013f9a:	46c0      	nop			@ (mov r8, r8)
 8013f9c:	46c0      	nop			@ (mov r8, r8)
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	b00c      	add	sp, #48	@ 0x30
 8013fa2:	bd80      	pop	{r7, pc}

08013fa4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b084      	sub	sp, #16
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fb0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2288      	movs	r2, #136	@ 0x88
 8013fb6:	589b      	ldr	r3, [r3, r2]
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	0010      	movs	r0, r2
 8013fbc:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013fbe:	46c0      	nop			@ (mov r8, r8)
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	b004      	add	sp, #16
 8013fc4:	bd80      	pop	{r7, pc}
	...

08013fc8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b094      	sub	sp, #80	@ 0x50
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2220      	movs	r2, #32
 8013fde:	4013      	ands	r3, r2
 8013fe0:	d16f      	bne.n	80140c2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8013fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fe4:	225a      	movs	r2, #90	@ 0x5a
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fea:	f3ef 8310 	mrs	r3, PRIMASK
 8013fee:	61bb      	str	r3, [r7, #24]
  return(result);
 8013ff0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ff8:	69fb      	ldr	r3, [r7, #28]
 8013ffa:	f383 8810 	msr	PRIMASK, r3
}
 8013ffe:	46c0      	nop			@ (mov r8, r8)
 8014000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	493b      	ldr	r1, [pc, #236]	@ (80140f8 <UART_DMAReceiveCplt+0x130>)
 801400c:	400a      	ands	r2, r1
 801400e:	601a      	str	r2, [r3, #0]
 8014010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014012:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014014:	6a3b      	ldr	r3, [r7, #32]
 8014016:	f383 8810 	msr	PRIMASK, r3
}
 801401a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801401c:	f3ef 8310 	mrs	r3, PRIMASK
 8014020:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8014022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014024:	647b      	str	r3, [r7, #68]	@ 0x44
 8014026:	2301      	movs	r3, #1
 8014028:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801402a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801402c:	f383 8810 	msr	PRIMASK, r3
}
 8014030:	46c0      	nop			@ (mov r8, r8)
 8014032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	689a      	ldr	r2, [r3, #8]
 8014038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	2101      	movs	r1, #1
 801403e:	438a      	bics	r2, r1
 8014040:	609a      	str	r2, [r3, #8]
 8014042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014048:	f383 8810 	msr	PRIMASK, r3
}
 801404c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801404e:	f3ef 8310 	mrs	r3, PRIMASK
 8014052:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8014054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014056:	643b      	str	r3, [r7, #64]	@ 0x40
 8014058:	2301      	movs	r3, #1
 801405a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801405e:	f383 8810 	msr	PRIMASK, r3
}
 8014062:	46c0      	nop			@ (mov r8, r8)
 8014064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	689a      	ldr	r2, [r3, #8]
 801406a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2140      	movs	r1, #64	@ 0x40
 8014070:	438a      	bics	r2, r1
 8014072:	609a      	str	r2, [r3, #8]
 8014074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014076:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801407a:	f383 8810 	msr	PRIMASK, r3
}
 801407e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014082:	2280      	movs	r2, #128	@ 0x80
 8014084:	2120      	movs	r1, #32
 8014086:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801408a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801408c:	2b01      	cmp	r3, #1
 801408e:	d118      	bne.n	80140c2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014090:	f3ef 8310 	mrs	r3, PRIMASK
 8014094:	60fb      	str	r3, [r7, #12]
  return(result);
 8014096:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801409a:	2301      	movs	r3, #1
 801409c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	f383 8810 	msr	PRIMASK, r3
}
 80140a4:	46c0      	nop			@ (mov r8, r8)
 80140a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	681a      	ldr	r2, [r3, #0]
 80140ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	2110      	movs	r1, #16
 80140b2:	438a      	bics	r2, r1
 80140b4:	601a      	str	r2, [r3, #0]
 80140b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	f383 8810 	msr	PRIMASK, r3
}
 80140c0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80140c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140c4:	2200      	movs	r2, #0
 80140c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80140cc:	2b01      	cmp	r3, #1
 80140ce:	d109      	bne.n	80140e4 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80140d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140d2:	22ac      	movs	r2, #172	@ 0xac
 80140d4:	589b      	ldr	r3, [r3, r2]
 80140d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80140d8:	2158      	movs	r1, #88	@ 0x58
 80140da:	5a51      	ldrh	r1, [r2, r1]
 80140dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80140de:	0010      	movs	r0, r2
 80140e0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80140e2:	e005      	b.n	80140f0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80140e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140e6:	2294      	movs	r2, #148	@ 0x94
 80140e8:	589b      	ldr	r3, [r3, r2]
 80140ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80140ec:	0010      	movs	r0, r2
 80140ee:	4798      	blx	r3
}
 80140f0:	46c0      	nop			@ (mov r8, r8)
 80140f2:	46bd      	mov	sp, r7
 80140f4:	b014      	add	sp, #80	@ 0x50
 80140f6:	bd80      	pop	{r7, pc}
 80140f8:	fffffeff 	.word	0xfffffeff

080140fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b084      	sub	sp, #16
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014108:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2201      	movs	r2, #1
 801410e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014114:	2b01      	cmp	r3, #1
 8014116:	d10b      	bne.n	8014130 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	22ac      	movs	r2, #172	@ 0xac
 801411c:	589b      	ldr	r3, [r3, r2]
 801411e:	68fa      	ldr	r2, [r7, #12]
 8014120:	2158      	movs	r1, #88	@ 0x58
 8014122:	5a52      	ldrh	r2, [r2, r1]
 8014124:	0852      	lsrs	r2, r2, #1
 8014126:	b291      	uxth	r1, r2
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	0010      	movs	r0, r2
 801412c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801412e:	e005      	b.n	801413c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	2290      	movs	r2, #144	@ 0x90
 8014134:	589b      	ldr	r3, [r3, r2]
 8014136:	68fa      	ldr	r2, [r7, #12]
 8014138:	0010      	movs	r0, r2
 801413a:	4798      	blx	r3
}
 801413c:	46c0      	nop			@ (mov r8, r8)
 801413e:	46bd      	mov	sp, r7
 8014140:	b004      	add	sp, #16
 8014142:	bd80      	pop	{r7, pc}

08014144 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b086      	sub	sp, #24
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014150:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014156:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	2280      	movs	r2, #128	@ 0x80
 801415c:	589b      	ldr	r3, [r3, r2]
 801415e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	689b      	ldr	r3, [r3, #8]
 8014166:	2280      	movs	r2, #128	@ 0x80
 8014168:	4013      	ands	r3, r2
 801416a:	2b80      	cmp	r3, #128	@ 0x80
 801416c:	d10a      	bne.n	8014184 <UART_DMAError+0x40>
 801416e:	693b      	ldr	r3, [r7, #16]
 8014170:	2b21      	cmp	r3, #33	@ 0x21
 8014172:	d107      	bne.n	8014184 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	2252      	movs	r2, #82	@ 0x52
 8014178:	2100      	movs	r1, #0
 801417a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	0018      	movs	r0, r3
 8014180:	f7ff fe3a 	bl	8013df8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	689b      	ldr	r3, [r3, #8]
 801418a:	2240      	movs	r2, #64	@ 0x40
 801418c:	4013      	ands	r3, r2
 801418e:	2b40      	cmp	r3, #64	@ 0x40
 8014190:	d10a      	bne.n	80141a8 <UART_DMAError+0x64>
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2b22      	cmp	r3, #34	@ 0x22
 8014196:	d107      	bne.n	80141a8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	225a      	movs	r2, #90	@ 0x5a
 801419c:	2100      	movs	r1, #0
 801419e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	0018      	movs	r0, r3
 80141a4:	f7ff fe4c 	bl	8013e40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	2284      	movs	r2, #132	@ 0x84
 80141ac:	589b      	ldr	r3, [r3, r2]
 80141ae:	2210      	movs	r2, #16
 80141b0:	431a      	orrs	r2, r3
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	2184      	movs	r1, #132	@ 0x84
 80141b6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	2298      	movs	r2, #152	@ 0x98
 80141bc:	589b      	ldr	r3, [r3, r2]
 80141be:	697a      	ldr	r2, [r7, #20]
 80141c0:	0010      	movs	r0, r2
 80141c2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80141c4:	46c0      	nop			@ (mov r8, r8)
 80141c6:	46bd      	mov	sp, r7
 80141c8:	b006      	add	sp, #24
 80141ca:	bd80      	pop	{r7, pc}

080141cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	225a      	movs	r2, #90	@ 0x5a
 80141de:	2100      	movs	r1, #0
 80141e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2252      	movs	r2, #82	@ 0x52
 80141e6:	2100      	movs	r1, #0
 80141e8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2298      	movs	r2, #152	@ 0x98
 80141ee:	589b      	ldr	r3, [r3, r2]
 80141f0:	68fa      	ldr	r2, [r7, #12]
 80141f2:	0010      	movs	r0, r2
 80141f4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80141f6:	46c0      	nop			@ (mov r8, r8)
 80141f8:	46bd      	mov	sp, r7
 80141fa:	b004      	add	sp, #16
 80141fc:	bd80      	pop	{r7, pc}

080141fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b086      	sub	sp, #24
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014206:	f3ef 8310 	mrs	r3, PRIMASK
 801420a:	60bb      	str	r3, [r7, #8]
  return(result);
 801420c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801420e:	617b      	str	r3, [r7, #20]
 8014210:	2301      	movs	r3, #1
 8014212:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f383 8810 	msr	PRIMASK, r3
}
 801421a:	46c0      	nop			@ (mov r8, r8)
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	2140      	movs	r1, #64	@ 0x40
 8014228:	438a      	bics	r2, r1
 801422a:	601a      	str	r2, [r3, #0]
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014230:	693b      	ldr	r3, [r7, #16]
 8014232:	f383 8810 	msr	PRIMASK, r3
}
 8014236:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2220      	movs	r2, #32
 801423c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2200      	movs	r2, #0
 8014242:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	228c      	movs	r2, #140	@ 0x8c
 8014248:	589b      	ldr	r3, [r3, r2]
 801424a:	687a      	ldr	r2, [r7, #4]
 801424c:	0010      	movs	r0, r2
 801424e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014250:	46c0      	nop			@ (mov r8, r8)
 8014252:	46bd      	mov	sp, r7
 8014254:	b006      	add	sp, #24
 8014256:	bd80      	pop	{r7, pc}

08014258 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014260:	46c0      	nop			@ (mov r8, r8)
 8014262:	46bd      	mov	sp, r7
 8014264:	b002      	add	sp, #8
 8014266:	bd80      	pop	{r7, pc}

08014268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2244      	movs	r2, #68	@ 0x44
 8014274:	2100      	movs	r1, #0
 8014276:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8014278:	4b05      	ldr	r3, [pc, #20]	@ (8014290 <USB_EnableGlobalInt+0x28>)
 801427a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	b299      	uxth	r1, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2240      	movs	r2, #64	@ 0x40
 8014284:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014286:	2300      	movs	r3, #0
}
 8014288:	0018      	movs	r0, r3
 801428a:	46bd      	mov	sp, r7
 801428c:	b004      	add	sp, #16
 801428e:	bd80      	pop	{r7, pc}
 8014290:	0000bf80 	.word	0x0000bf80

08014294 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801429c:	4b09      	ldr	r3, [pc, #36]	@ (80142c4 <USB_DisableGlobalInt+0x30>)
 801429e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2240      	movs	r2, #64	@ 0x40
 80142a4:	5a9b      	ldrh	r3, [r3, r2]
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	68fa      	ldr	r2, [r7, #12]
 80142aa:	b292      	uxth	r2, r2
 80142ac:	43d2      	mvns	r2, r2
 80142ae:	b292      	uxth	r2, r2
 80142b0:	4013      	ands	r3, r2
 80142b2:	b299      	uxth	r1, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2240      	movs	r2, #64	@ 0x40
 80142b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80142ba:	2300      	movs	r3, #0
}
 80142bc:	0018      	movs	r0, r3
 80142be:	46bd      	mov	sp, r7
 80142c0:	b004      	add	sp, #16
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	0000bf80 	.word	0x0000bf80

080142c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80142c8:	b084      	sub	sp, #16
 80142ca:	b590      	push	{r4, r7, lr}
 80142cc:	b083      	sub	sp, #12
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
 80142d2:	2004      	movs	r0, #4
 80142d4:	2410      	movs	r4, #16
 80142d6:	1900      	adds	r0, r0, r4
 80142d8:	2408      	movs	r4, #8
 80142da:	46a4      	mov	ip, r4
 80142dc:	44bc      	add	ip, r7
 80142de:	4460      	add	r0, ip
 80142e0:	6001      	str	r1, [r0, #0]
 80142e2:	6042      	str	r2, [r0, #4]
 80142e4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2240      	movs	r2, #64	@ 0x40
 80142ea:	2101      	movs	r1, #1
 80142ec:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2240      	movs	r2, #64	@ 0x40
 80142f2:	2100      	movs	r1, #0
 80142f4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2244      	movs	r2, #68	@ 0x44
 80142fa:	2100      	movs	r1, #0
 80142fc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2250      	movs	r2, #80	@ 0x50
 8014302:	2100      	movs	r1, #0
 8014304:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014306:	2300      	movs	r3, #0
}
 8014308:	0018      	movs	r0, r3
 801430a:	46bd      	mov	sp, r7
 801430c:	b003      	add	sp, #12
 801430e:	bc90      	pop	{r4, r7}
 8014310:	bc08      	pop	{r3}
 8014312:	b004      	add	sp, #16
 8014314:	4718      	bx	r3
	...

08014318 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b09c      	sub	sp, #112	@ 0x70
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8014322:	236f      	movs	r3, #111	@ 0x6f
 8014324:	18fb      	adds	r3, r7, r3
 8014326:	2200      	movs	r2, #0
 8014328:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	18d3      	adds	r3, r2, r3
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	b29a      	uxth	r2, r3
 8014338:	236c      	movs	r3, #108	@ 0x6c
 801433a:	18fb      	adds	r3, r7, r3
 801433c:	49a3      	ldr	r1, [pc, #652]	@ (80145cc <USB_ActivateEndpoint+0x2b4>)
 801433e:	400a      	ands	r2, r1
 8014340:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	78db      	ldrb	r3, [r3, #3]
 8014346:	2b03      	cmp	r3, #3
 8014348:	d017      	beq.n	801437a <USB_ActivateEndpoint+0x62>
 801434a:	dc28      	bgt.n	801439e <USB_ActivateEndpoint+0x86>
 801434c:	2b02      	cmp	r3, #2
 801434e:	d00e      	beq.n	801436e <USB_ActivateEndpoint+0x56>
 8014350:	dc25      	bgt.n	801439e <USB_ActivateEndpoint+0x86>
 8014352:	2b00      	cmp	r3, #0
 8014354:	d002      	beq.n	801435c <USB_ActivateEndpoint+0x44>
 8014356:	2b01      	cmp	r3, #1
 8014358:	d018      	beq.n	801438c <USB_ActivateEndpoint+0x74>
 801435a:	e020      	b.n	801439e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801435c:	226c      	movs	r2, #108	@ 0x6c
 801435e:	18bb      	adds	r3, r7, r2
 8014360:	18ba      	adds	r2, r7, r2
 8014362:	8812      	ldrh	r2, [r2, #0]
 8014364:	2180      	movs	r1, #128	@ 0x80
 8014366:	0089      	lsls	r1, r1, #2
 8014368:	430a      	orrs	r2, r1
 801436a:	801a      	strh	r2, [r3, #0]
      break;
 801436c:	e01c      	b.n	80143a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801436e:	226c      	movs	r2, #108	@ 0x6c
 8014370:	18bb      	adds	r3, r7, r2
 8014372:	18ba      	adds	r2, r7, r2
 8014374:	8812      	ldrh	r2, [r2, #0]
 8014376:	801a      	strh	r2, [r3, #0]
      break;
 8014378:	e016      	b.n	80143a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801437a:	226c      	movs	r2, #108	@ 0x6c
 801437c:	18bb      	adds	r3, r7, r2
 801437e:	18ba      	adds	r2, r7, r2
 8014380:	8812      	ldrh	r2, [r2, #0]
 8014382:	21c0      	movs	r1, #192	@ 0xc0
 8014384:	00c9      	lsls	r1, r1, #3
 8014386:	430a      	orrs	r2, r1
 8014388:	801a      	strh	r2, [r3, #0]
      break;
 801438a:	e00d      	b.n	80143a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801438c:	226c      	movs	r2, #108	@ 0x6c
 801438e:	18bb      	adds	r3, r7, r2
 8014390:	18ba      	adds	r2, r7, r2
 8014392:	8812      	ldrh	r2, [r2, #0]
 8014394:	2180      	movs	r1, #128	@ 0x80
 8014396:	00c9      	lsls	r1, r1, #3
 8014398:	430a      	orrs	r2, r1
 801439a:	801a      	strh	r2, [r3, #0]
      break;
 801439c:	e004      	b.n	80143a8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801439e:	236f      	movs	r3, #111	@ 0x6f
 80143a0:	18fb      	adds	r3, r7, r3
 80143a2:	2201      	movs	r2, #1
 80143a4:	701a      	strb	r2, [r3, #0]
      break;
 80143a6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80143a8:	687a      	ldr	r2, [r7, #4]
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	009b      	lsls	r3, r3, #2
 80143b0:	18d3      	adds	r3, r2, r3
 80143b2:	226c      	movs	r2, #108	@ 0x6c
 80143b4:	18ba      	adds	r2, r7, r2
 80143b6:	8812      	ldrh	r2, [r2, #0]
 80143b8:	4985      	ldr	r1, [pc, #532]	@ (80145d0 <USB_ActivateEndpoint+0x2b8>)
 80143ba:	430a      	orrs	r2, r1
 80143bc:	b292      	uxth	r2, r2
 80143be:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80143c0:	687a      	ldr	r2, [r7, #4]
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	009b      	lsls	r3, r3, #2
 80143c8:	18d3      	adds	r3, r2, r3
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	b21b      	sxth	r3, r3
 80143d0:	4a80      	ldr	r2, [pc, #512]	@ (80145d4 <USB_ActivateEndpoint+0x2bc>)
 80143d2:	4013      	ands	r3, r2
 80143d4:	b21a      	sxth	r2, r3
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	b21b      	sxth	r3, r3
 80143dc:	4313      	orrs	r3, r2
 80143de:	b21a      	sxth	r2, r3
 80143e0:	2166      	movs	r1, #102	@ 0x66
 80143e2:	187b      	adds	r3, r7, r1
 80143e4:	801a      	strh	r2, [r3, #0]
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	18d3      	adds	r3, r2, r3
 80143f0:	187a      	adds	r2, r7, r1
 80143f2:	8812      	ldrh	r2, [r2, #0]
 80143f4:	4976      	ldr	r1, [pc, #472]	@ (80145d0 <USB_ActivateEndpoint+0x2b8>)
 80143f6:	430a      	orrs	r2, r1
 80143f8:	b292      	uxth	r2, r2
 80143fa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	7b1b      	ldrb	r3, [r3, #12]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d000      	beq.n	8014406 <USB_ActivateEndpoint+0xee>
 8014404:	e178      	b.n	80146f8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	785b      	ldrb	r3, [r3, #1]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d100      	bne.n	8014410 <USB_ActivateEndpoint+0xf8>
 801440e:	e07a      	b.n	8014506 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	61bb      	str	r3, [r7, #24]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2250      	movs	r2, #80	@ 0x50
 8014418:	5a9b      	ldrh	r3, [r3, r2]
 801441a:	b29b      	uxth	r3, r3
 801441c:	001a      	movs	r2, r3
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	189b      	adds	r3, r3, r2
 8014422:	61bb      	str	r3, [r7, #24]
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	00da      	lsls	r2, r3, #3
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	18d3      	adds	r3, r2, r3
 801442e:	2280      	movs	r2, #128	@ 0x80
 8014430:	00d2      	lsls	r2, r2, #3
 8014432:	4694      	mov	ip, r2
 8014434:	4463      	add	r3, ip
 8014436:	617b      	str	r3, [r7, #20]
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	88db      	ldrh	r3, [r3, #6]
 801443c:	085b      	lsrs	r3, r3, #1
 801443e:	b29b      	uxth	r3, r3
 8014440:	18db      	adds	r3, r3, r3
 8014442:	b29a      	uxth	r2, r3
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	18d2      	adds	r2, r2, r3
 8014452:	2112      	movs	r1, #18
 8014454:	187b      	adds	r3, r7, r1
 8014456:	8812      	ldrh	r2, [r2, #0]
 8014458:	801a      	strh	r2, [r3, #0]
 801445a:	187b      	adds	r3, r7, r1
 801445c:	881b      	ldrh	r3, [r3, #0]
 801445e:	2240      	movs	r2, #64	@ 0x40
 8014460:	4013      	ands	r3, r2
 8014462:	d016      	beq.n	8014492 <USB_ActivateEndpoint+0x17a>
 8014464:	687a      	ldr	r2, [r7, #4]
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	18d3      	adds	r3, r2, r3
 801446e:	881b      	ldrh	r3, [r3, #0]
 8014470:	b29a      	uxth	r2, r3
 8014472:	2010      	movs	r0, #16
 8014474:	183b      	adds	r3, r7, r0
 8014476:	4957      	ldr	r1, [pc, #348]	@ (80145d4 <USB_ActivateEndpoint+0x2bc>)
 8014478:	400a      	ands	r2, r1
 801447a:	801a      	strh	r2, [r3, #0]
 801447c:	687a      	ldr	r2, [r7, #4]
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	009b      	lsls	r3, r3, #2
 8014484:	18d3      	adds	r3, r2, r3
 8014486:	183a      	adds	r2, r7, r0
 8014488:	8812      	ldrh	r2, [r2, #0]
 801448a:	4953      	ldr	r1, [pc, #332]	@ (80145d8 <USB_ActivateEndpoint+0x2c0>)
 801448c:	430a      	orrs	r2, r1
 801448e:	b292      	uxth	r2, r2
 8014490:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	78db      	ldrb	r3, [r3, #3]
 8014496:	2b01      	cmp	r3, #1
 8014498:	d01d      	beq.n	80144d6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	009b      	lsls	r3, r3, #2
 80144a2:	18d3      	adds	r3, r2, r3
 80144a4:	881b      	ldrh	r3, [r3, #0]
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	200c      	movs	r0, #12
 80144aa:	183b      	adds	r3, r7, r0
 80144ac:	494b      	ldr	r1, [pc, #300]	@ (80145dc <USB_ActivateEndpoint+0x2c4>)
 80144ae:	400a      	ands	r2, r1
 80144b0:	801a      	strh	r2, [r3, #0]
 80144b2:	183b      	adds	r3, r7, r0
 80144b4:	183a      	adds	r2, r7, r0
 80144b6:	8812      	ldrh	r2, [r2, #0]
 80144b8:	2120      	movs	r1, #32
 80144ba:	404a      	eors	r2, r1
 80144bc:	801a      	strh	r2, [r3, #0]
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	009b      	lsls	r3, r3, #2
 80144c6:	18d3      	adds	r3, r2, r3
 80144c8:	183a      	adds	r2, r7, r0
 80144ca:	8812      	ldrh	r2, [r2, #0]
 80144cc:	4940      	ldr	r1, [pc, #256]	@ (80145d0 <USB_ActivateEndpoint+0x2b8>)
 80144ce:	430a      	orrs	r2, r1
 80144d0:	b292      	uxth	r2, r2
 80144d2:	801a      	strh	r2, [r3, #0]
 80144d4:	e2b4      	b.n	8014a40 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	18d3      	adds	r3, r2, r3
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	b29a      	uxth	r2, r3
 80144e4:	200e      	movs	r0, #14
 80144e6:	183b      	adds	r3, r7, r0
 80144e8:	493c      	ldr	r1, [pc, #240]	@ (80145dc <USB_ActivateEndpoint+0x2c4>)
 80144ea:	400a      	ands	r2, r1
 80144ec:	801a      	strh	r2, [r3, #0]
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	18d3      	adds	r3, r2, r3
 80144f8:	183a      	adds	r2, r7, r0
 80144fa:	8812      	ldrh	r2, [r2, #0]
 80144fc:	4934      	ldr	r1, [pc, #208]	@ (80145d0 <USB_ActivateEndpoint+0x2b8>)
 80144fe:	430a      	orrs	r2, r1
 8014500:	b292      	uxth	r2, r2
 8014502:	801a      	strh	r2, [r3, #0]
 8014504:	e29c      	b.n	8014a40 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	633b      	str	r3, [r7, #48]	@ 0x30
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2250      	movs	r2, #80	@ 0x50
 801450e:	5a9b      	ldrh	r3, [r3, r2]
 8014510:	b29b      	uxth	r3, r3
 8014512:	001a      	movs	r2, r3
 8014514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014516:	189b      	adds	r3, r3, r2
 8014518:	633b      	str	r3, [r7, #48]	@ 0x30
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	00da      	lsls	r2, r3, #3
 8014520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014522:	18d3      	adds	r3, r2, r3
 8014524:	4a2e      	ldr	r2, [pc, #184]	@ (80145e0 <USB_ActivateEndpoint+0x2c8>)
 8014526:	4694      	mov	ip, r2
 8014528:	4463      	add	r3, ip
 801452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	88db      	ldrh	r3, [r3, #6]
 8014530:	085b      	lsrs	r3, r3, #1
 8014532:	b29b      	uxth	r3, r3
 8014534:	18db      	adds	r3, r3, r3
 8014536:	b29a      	uxth	r2, r3
 8014538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801453a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2250      	movs	r2, #80	@ 0x50
 8014544:	5a9b      	ldrh	r3, [r3, r2]
 8014546:	b29b      	uxth	r3, r3
 8014548:	001a      	movs	r2, r3
 801454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801454c:	189b      	adds	r3, r3, r2
 801454e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	00da      	lsls	r2, r3, #3
 8014556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014558:	18d3      	adds	r3, r2, r3
 801455a:	4a22      	ldr	r2, [pc, #136]	@ (80145e4 <USB_ActivateEndpoint+0x2cc>)
 801455c:	4694      	mov	ip, r2
 801455e:	4463      	add	r3, ip
 8014560:	627b      	str	r3, [r7, #36]	@ 0x24
 8014562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014564:	881b      	ldrh	r3, [r3, #0]
 8014566:	b29b      	uxth	r3, r3
 8014568:	059b      	lsls	r3, r3, #22
 801456a:	0d9b      	lsrs	r3, r3, #22
 801456c:	b29a      	uxth	r2, r3
 801456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014570:	801a      	strh	r2, [r3, #0]
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	691b      	ldr	r3, [r3, #16]
 8014576:	2b3e      	cmp	r3, #62	@ 0x3e
 8014578:	d91a      	bls.n	80145b0 <USB_ActivateEndpoint+0x298>
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	095b      	lsrs	r3, r3, #5
 8014580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	691b      	ldr	r3, [r3, #16]
 8014586:	221f      	movs	r2, #31
 8014588:	4013      	ands	r3, r2
 801458a:	d102      	bne.n	8014592 <USB_ActivateEndpoint+0x27a>
 801458c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801458e:	3b01      	subs	r3, #1
 8014590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014594:	881b      	ldrh	r3, [r3, #0]
 8014596:	b29a      	uxth	r2, r3
 8014598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801459a:	b29b      	uxth	r3, r3
 801459c:	029b      	lsls	r3, r3, #10
 801459e:	b29b      	uxth	r3, r3
 80145a0:	4313      	orrs	r3, r2
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	4a10      	ldr	r2, [pc, #64]	@ (80145e8 <USB_ActivateEndpoint+0x2d0>)
 80145a6:	4313      	orrs	r3, r2
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ac:	801a      	strh	r2, [r3, #0]
 80145ae:	e034      	b.n	801461a <USB_ActivateEndpoint+0x302>
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	691b      	ldr	r3, [r3, #16]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d119      	bne.n	80145ec <USB_ActivateEndpoint+0x2d4>
 80145b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ba:	881b      	ldrh	r3, [r3, #0]
 80145bc:	b29b      	uxth	r3, r3
 80145be:	4a0a      	ldr	r2, [pc, #40]	@ (80145e8 <USB_ActivateEndpoint+0x2d0>)
 80145c0:	4313      	orrs	r3, r2
 80145c2:	b29a      	uxth	r2, r3
 80145c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145c6:	801a      	strh	r2, [r3, #0]
 80145c8:	e027      	b.n	801461a <USB_ActivateEndpoint+0x302>
 80145ca:	46c0      	nop			@ (mov r8, r8)
 80145cc:	ffff898f 	.word	0xffff898f
 80145d0:	ffff8080 	.word	0xffff8080
 80145d4:	ffff8f8f 	.word	0xffff8f8f
 80145d8:	ffff80c0 	.word	0xffff80c0
 80145dc:	ffff8fbf 	.word	0xffff8fbf
 80145e0:	00000404 	.word	0x00000404
 80145e4:	00000406 	.word	0x00000406
 80145e8:	ffff8000 	.word	0xffff8000
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	691b      	ldr	r3, [r3, #16]
 80145f0:	085b      	lsrs	r3, r3, #1
 80145f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	691b      	ldr	r3, [r3, #16]
 80145f8:	2201      	movs	r2, #1
 80145fa:	4013      	ands	r3, r2
 80145fc:	d002      	beq.n	8014604 <USB_ActivateEndpoint+0x2ec>
 80145fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014600:	3301      	adds	r3, #1
 8014602:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014606:	881b      	ldrh	r3, [r3, #0]
 8014608:	b29a      	uxth	r2, r3
 801460a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801460c:	b29b      	uxth	r3, r3
 801460e:	029b      	lsls	r3, r3, #10
 8014610:	b29b      	uxth	r3, r3
 8014612:	4313      	orrs	r3, r2
 8014614:	b29a      	uxth	r2, r3
 8014616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014618:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	009b      	lsls	r3, r3, #2
 8014622:	18d2      	adds	r2, r2, r3
 8014624:	2122      	movs	r1, #34	@ 0x22
 8014626:	187b      	adds	r3, r7, r1
 8014628:	8812      	ldrh	r2, [r2, #0]
 801462a:	801a      	strh	r2, [r3, #0]
 801462c:	187b      	adds	r3, r7, r1
 801462e:	881a      	ldrh	r2, [r3, #0]
 8014630:	2380      	movs	r3, #128	@ 0x80
 8014632:	01db      	lsls	r3, r3, #7
 8014634:	4013      	ands	r3, r2
 8014636:	d016      	beq.n	8014666 <USB_ActivateEndpoint+0x34e>
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	009b      	lsls	r3, r3, #2
 8014640:	18d3      	adds	r3, r2, r3
 8014642:	881b      	ldrh	r3, [r3, #0]
 8014644:	b29a      	uxth	r2, r3
 8014646:	2020      	movs	r0, #32
 8014648:	183b      	adds	r3, r7, r0
 801464a:	49dd      	ldr	r1, [pc, #884]	@ (80149c0 <USB_ActivateEndpoint+0x6a8>)
 801464c:	400a      	ands	r2, r1
 801464e:	801a      	strh	r2, [r3, #0]
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	009b      	lsls	r3, r3, #2
 8014658:	18d3      	adds	r3, r2, r3
 801465a:	183a      	adds	r2, r7, r0
 801465c:	8812      	ldrh	r2, [r2, #0]
 801465e:	49d9      	ldr	r1, [pc, #868]	@ (80149c4 <USB_ActivateEndpoint+0x6ac>)
 8014660:	430a      	orrs	r2, r1
 8014662:	b292      	uxth	r2, r2
 8014664:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d125      	bne.n	80146ba <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	009b      	lsls	r3, r3, #2
 8014676:	18d3      	adds	r3, r2, r3
 8014678:	881b      	ldrh	r3, [r3, #0]
 801467a:	b29a      	uxth	r2, r3
 801467c:	201c      	movs	r0, #28
 801467e:	183b      	adds	r3, r7, r0
 8014680:	49d1      	ldr	r1, [pc, #836]	@ (80149c8 <USB_ActivateEndpoint+0x6b0>)
 8014682:	400a      	ands	r2, r1
 8014684:	801a      	strh	r2, [r3, #0]
 8014686:	183b      	adds	r3, r7, r0
 8014688:	183a      	adds	r2, r7, r0
 801468a:	8812      	ldrh	r2, [r2, #0]
 801468c:	2180      	movs	r1, #128	@ 0x80
 801468e:	0149      	lsls	r1, r1, #5
 8014690:	404a      	eors	r2, r1
 8014692:	801a      	strh	r2, [r3, #0]
 8014694:	183b      	adds	r3, r7, r0
 8014696:	183a      	adds	r2, r7, r0
 8014698:	8812      	ldrh	r2, [r2, #0]
 801469a:	2180      	movs	r1, #128	@ 0x80
 801469c:	0189      	lsls	r1, r1, #6
 801469e:	404a      	eors	r2, r1
 80146a0:	801a      	strh	r2, [r3, #0]
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	18d3      	adds	r3, r2, r3
 80146ac:	183a      	adds	r2, r7, r0
 80146ae:	8812      	ldrh	r2, [r2, #0]
 80146b0:	49c6      	ldr	r1, [pc, #792]	@ (80149cc <USB_ActivateEndpoint+0x6b4>)
 80146b2:	430a      	orrs	r2, r1
 80146b4:	b292      	uxth	r2, r2
 80146b6:	801a      	strh	r2, [r3, #0]
 80146b8:	e1c2      	b.n	8014a40 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80146ba:	687a      	ldr	r2, [r7, #4]
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	18d3      	adds	r3, r2, r3
 80146c4:	881b      	ldrh	r3, [r3, #0]
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	201e      	movs	r0, #30
 80146ca:	183b      	adds	r3, r7, r0
 80146cc:	49be      	ldr	r1, [pc, #760]	@ (80149c8 <USB_ActivateEndpoint+0x6b0>)
 80146ce:	400a      	ands	r2, r1
 80146d0:	801a      	strh	r2, [r3, #0]
 80146d2:	183b      	adds	r3, r7, r0
 80146d4:	183a      	adds	r2, r7, r0
 80146d6:	8812      	ldrh	r2, [r2, #0]
 80146d8:	2180      	movs	r1, #128	@ 0x80
 80146da:	0189      	lsls	r1, r1, #6
 80146dc:	404a      	eors	r2, r1
 80146de:	801a      	strh	r2, [r3, #0]
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	009b      	lsls	r3, r3, #2
 80146e8:	18d3      	adds	r3, r2, r3
 80146ea:	183a      	adds	r2, r7, r0
 80146ec:	8812      	ldrh	r2, [r2, #0]
 80146ee:	49b7      	ldr	r1, [pc, #732]	@ (80149cc <USB_ActivateEndpoint+0x6b4>)
 80146f0:	430a      	orrs	r2, r1
 80146f2:	b292      	uxth	r2, r2
 80146f4:	801a      	strh	r2, [r3, #0]
 80146f6:	e1a3      	b.n	8014a40 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	78db      	ldrb	r3, [r3, #3]
 80146fc:	2b02      	cmp	r3, #2
 80146fe:	d117      	bne.n	8014730 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	009b      	lsls	r3, r3, #2
 8014708:	18d3      	adds	r3, r2, r3
 801470a:	881b      	ldrh	r3, [r3, #0]
 801470c:	b29a      	uxth	r2, r3
 801470e:	2062      	movs	r0, #98	@ 0x62
 8014710:	183b      	adds	r3, r7, r0
 8014712:	49ab      	ldr	r1, [pc, #684]	@ (80149c0 <USB_ActivateEndpoint+0x6a8>)
 8014714:	400a      	ands	r2, r1
 8014716:	801a      	strh	r2, [r3, #0]
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	781b      	ldrb	r3, [r3, #0]
 801471e:	009b      	lsls	r3, r3, #2
 8014720:	18d3      	adds	r3, r2, r3
 8014722:	183a      	adds	r2, r7, r0
 8014724:	8812      	ldrh	r2, [r2, #0]
 8014726:	49aa      	ldr	r1, [pc, #680]	@ (80149d0 <USB_ActivateEndpoint+0x6b8>)
 8014728:	430a      	orrs	r2, r1
 801472a:	b292      	uxth	r2, r2
 801472c:	801a      	strh	r2, [r3, #0]
 801472e:	e016      	b.n	801475e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8014730:	687a      	ldr	r2, [r7, #4]
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	18d3      	adds	r3, r2, r3
 801473a:	881b      	ldrh	r3, [r3, #0]
 801473c:	b29a      	uxth	r2, r3
 801473e:	2064      	movs	r0, #100	@ 0x64
 8014740:	183b      	adds	r3, r7, r0
 8014742:	49a4      	ldr	r1, [pc, #656]	@ (80149d4 <USB_ActivateEndpoint+0x6bc>)
 8014744:	400a      	ands	r2, r1
 8014746:	801a      	strh	r2, [r3, #0]
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	009b      	lsls	r3, r3, #2
 8014750:	18d3      	adds	r3, r2, r3
 8014752:	183a      	adds	r2, r7, r0
 8014754:	8812      	ldrh	r2, [r2, #0]
 8014756:	499d      	ldr	r1, [pc, #628]	@ (80149cc <USB_ActivateEndpoint+0x6b4>)
 8014758:	430a      	orrs	r2, r1
 801475a:	b292      	uxth	r2, r2
 801475c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2250      	movs	r2, #80	@ 0x50
 8014766:	5a9b      	ldrh	r3, [r3, r2]
 8014768:	b29b      	uxth	r3, r3
 801476a:	001a      	movs	r2, r3
 801476c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801476e:	189b      	adds	r3, r3, r2
 8014770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	00da      	lsls	r2, r3, #3
 8014778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801477a:	18d3      	adds	r3, r2, r3
 801477c:	2280      	movs	r2, #128	@ 0x80
 801477e:	00d2      	lsls	r2, r2, #3
 8014780:	4694      	mov	ip, r2
 8014782:	4463      	add	r3, ip
 8014784:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	891b      	ldrh	r3, [r3, #8]
 801478a:	085b      	lsrs	r3, r3, #1
 801478c:	b29b      	uxth	r3, r3
 801478e:	18db      	adds	r3, r3, r3
 8014790:	b29a      	uxth	r2, r3
 8014792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014794:	801a      	strh	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	657b      	str	r3, [r7, #84]	@ 0x54
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2250      	movs	r2, #80	@ 0x50
 801479e:	5a9b      	ldrh	r3, [r3, r2]
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	001a      	movs	r2, r3
 80147a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147a6:	189b      	adds	r3, r3, r2
 80147a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	00da      	lsls	r2, r3, #3
 80147b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147b2:	18d3      	adds	r3, r2, r3
 80147b4:	4a88      	ldr	r2, [pc, #544]	@ (80149d8 <USB_ActivateEndpoint+0x6c0>)
 80147b6:	4694      	mov	ip, r2
 80147b8:	4463      	add	r3, ip
 80147ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	895b      	ldrh	r3, [r3, #10]
 80147c0:	085b      	lsrs	r3, r3, #1
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	18db      	adds	r3, r3, r3
 80147c6:	b29a      	uxth	r2, r3
 80147c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	785b      	ldrb	r3, [r3, #1]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d000      	beq.n	80147d6 <USB_ActivateEndpoint+0x4be>
 80147d4:	e087      	b.n	80148e6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80147d6:	687a      	ldr	r2, [r7, #4]
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	009b      	lsls	r3, r3, #2
 80147de:	18d2      	adds	r2, r2, r3
 80147e0:	2140      	movs	r1, #64	@ 0x40
 80147e2:	187b      	adds	r3, r7, r1
 80147e4:	8812      	ldrh	r2, [r2, #0]
 80147e6:	801a      	strh	r2, [r3, #0]
 80147e8:	187b      	adds	r3, r7, r1
 80147ea:	881a      	ldrh	r2, [r3, #0]
 80147ec:	2380      	movs	r3, #128	@ 0x80
 80147ee:	01db      	lsls	r3, r3, #7
 80147f0:	4013      	ands	r3, r2
 80147f2:	d016      	beq.n	8014822 <USB_ActivateEndpoint+0x50a>
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	18d3      	adds	r3, r2, r3
 80147fe:	881b      	ldrh	r3, [r3, #0]
 8014800:	b29a      	uxth	r2, r3
 8014802:	203e      	movs	r0, #62	@ 0x3e
 8014804:	183b      	adds	r3, r7, r0
 8014806:	496e      	ldr	r1, [pc, #440]	@ (80149c0 <USB_ActivateEndpoint+0x6a8>)
 8014808:	400a      	ands	r2, r1
 801480a:	801a      	strh	r2, [r3, #0]
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	009b      	lsls	r3, r3, #2
 8014814:	18d3      	adds	r3, r2, r3
 8014816:	183a      	adds	r2, r7, r0
 8014818:	8812      	ldrh	r2, [r2, #0]
 801481a:	496a      	ldr	r1, [pc, #424]	@ (80149c4 <USB_ActivateEndpoint+0x6ac>)
 801481c:	430a      	orrs	r2, r1
 801481e:	b292      	uxth	r2, r2
 8014820:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014822:	687a      	ldr	r2, [r7, #4]
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	18d2      	adds	r2, r2, r3
 801482c:	213c      	movs	r1, #60	@ 0x3c
 801482e:	187b      	adds	r3, r7, r1
 8014830:	8812      	ldrh	r2, [r2, #0]
 8014832:	801a      	strh	r2, [r3, #0]
 8014834:	187b      	adds	r3, r7, r1
 8014836:	881b      	ldrh	r3, [r3, #0]
 8014838:	2240      	movs	r2, #64	@ 0x40
 801483a:	4013      	ands	r3, r2
 801483c:	d016      	beq.n	801486c <USB_ActivateEndpoint+0x554>
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	18d3      	adds	r3, r2, r3
 8014848:	881b      	ldrh	r3, [r3, #0]
 801484a:	b29a      	uxth	r2, r3
 801484c:	203a      	movs	r0, #58	@ 0x3a
 801484e:	183b      	adds	r3, r7, r0
 8014850:	495b      	ldr	r1, [pc, #364]	@ (80149c0 <USB_ActivateEndpoint+0x6a8>)
 8014852:	400a      	ands	r2, r1
 8014854:	801a      	strh	r2, [r3, #0]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	009b      	lsls	r3, r3, #2
 801485e:	18d3      	adds	r3, r2, r3
 8014860:	183a      	adds	r2, r7, r0
 8014862:	8812      	ldrh	r2, [r2, #0]
 8014864:	495d      	ldr	r1, [pc, #372]	@ (80149dc <USB_ActivateEndpoint+0x6c4>)
 8014866:	430a      	orrs	r2, r1
 8014868:	b292      	uxth	r2, r2
 801486a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	781b      	ldrb	r3, [r3, #0]
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	18d3      	adds	r3, r2, r3
 8014876:	881b      	ldrh	r3, [r3, #0]
 8014878:	b29a      	uxth	r2, r3
 801487a:	2038      	movs	r0, #56	@ 0x38
 801487c:	183b      	adds	r3, r7, r0
 801487e:	4952      	ldr	r1, [pc, #328]	@ (80149c8 <USB_ActivateEndpoint+0x6b0>)
 8014880:	400a      	ands	r2, r1
 8014882:	801a      	strh	r2, [r3, #0]
 8014884:	183b      	adds	r3, r7, r0
 8014886:	183a      	adds	r2, r7, r0
 8014888:	8812      	ldrh	r2, [r2, #0]
 801488a:	2180      	movs	r1, #128	@ 0x80
 801488c:	0149      	lsls	r1, r1, #5
 801488e:	404a      	eors	r2, r1
 8014890:	801a      	strh	r2, [r3, #0]
 8014892:	183b      	adds	r3, r7, r0
 8014894:	183a      	adds	r2, r7, r0
 8014896:	8812      	ldrh	r2, [r2, #0]
 8014898:	2180      	movs	r1, #128	@ 0x80
 801489a:	0189      	lsls	r1, r1, #6
 801489c:	404a      	eors	r2, r1
 801489e:	801a      	strh	r2, [r3, #0]
 80148a0:	687a      	ldr	r2, [r7, #4]
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	009b      	lsls	r3, r3, #2
 80148a8:	18d3      	adds	r3, r2, r3
 80148aa:	183a      	adds	r2, r7, r0
 80148ac:	8812      	ldrh	r2, [r2, #0]
 80148ae:	4947      	ldr	r1, [pc, #284]	@ (80149cc <USB_ActivateEndpoint+0x6b4>)
 80148b0:	430a      	orrs	r2, r1
 80148b2:	b292      	uxth	r2, r2
 80148b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	009b      	lsls	r3, r3, #2
 80148be:	18d3      	adds	r3, r2, r3
 80148c0:	881b      	ldrh	r3, [r3, #0]
 80148c2:	b29a      	uxth	r2, r3
 80148c4:	2036      	movs	r0, #54	@ 0x36
 80148c6:	183b      	adds	r3, r7, r0
 80148c8:	4945      	ldr	r1, [pc, #276]	@ (80149e0 <USB_ActivateEndpoint+0x6c8>)
 80148ca:	400a      	ands	r2, r1
 80148cc:	801a      	strh	r2, [r3, #0]
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	18d3      	adds	r3, r2, r3
 80148d8:	183a      	adds	r2, r7, r0
 80148da:	8812      	ldrh	r2, [r2, #0]
 80148dc:	493b      	ldr	r1, [pc, #236]	@ (80149cc <USB_ActivateEndpoint+0x6b4>)
 80148de:	430a      	orrs	r2, r1
 80148e0:	b292      	uxth	r2, r2
 80148e2:	801a      	strh	r2, [r3, #0]
 80148e4:	e0ac      	b.n	8014a40 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80148e6:	687a      	ldr	r2, [r7, #4]
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	18d2      	adds	r2, r2, r3
 80148f0:	214e      	movs	r1, #78	@ 0x4e
 80148f2:	187b      	adds	r3, r7, r1
 80148f4:	8812      	ldrh	r2, [r2, #0]
 80148f6:	801a      	strh	r2, [r3, #0]
 80148f8:	187b      	adds	r3, r7, r1
 80148fa:	881a      	ldrh	r2, [r3, #0]
 80148fc:	2380      	movs	r3, #128	@ 0x80
 80148fe:	01db      	lsls	r3, r3, #7
 8014900:	4013      	ands	r3, r2
 8014902:	d016      	beq.n	8014932 <USB_ActivateEndpoint+0x61a>
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	781b      	ldrb	r3, [r3, #0]
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	18d3      	adds	r3, r2, r3
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	b29a      	uxth	r2, r3
 8014912:	204c      	movs	r0, #76	@ 0x4c
 8014914:	183b      	adds	r3, r7, r0
 8014916:	492a      	ldr	r1, [pc, #168]	@ (80149c0 <USB_ActivateEndpoint+0x6a8>)
 8014918:	400a      	ands	r2, r1
 801491a:	801a      	strh	r2, [r3, #0]
 801491c:	687a      	ldr	r2, [r7, #4]
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	18d3      	adds	r3, r2, r3
 8014926:	183a      	adds	r2, r7, r0
 8014928:	8812      	ldrh	r2, [r2, #0]
 801492a:	4926      	ldr	r1, [pc, #152]	@ (80149c4 <USB_ActivateEndpoint+0x6ac>)
 801492c:	430a      	orrs	r2, r1
 801492e:	b292      	uxth	r2, r2
 8014930:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	18d2      	adds	r2, r2, r3
 801493c:	214a      	movs	r1, #74	@ 0x4a
 801493e:	187b      	adds	r3, r7, r1
 8014940:	8812      	ldrh	r2, [r2, #0]
 8014942:	801a      	strh	r2, [r3, #0]
 8014944:	187b      	adds	r3, r7, r1
 8014946:	881b      	ldrh	r3, [r3, #0]
 8014948:	2240      	movs	r2, #64	@ 0x40
 801494a:	4013      	ands	r3, r2
 801494c:	d016      	beq.n	801497c <USB_ActivateEndpoint+0x664>
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	18d3      	adds	r3, r2, r3
 8014958:	881b      	ldrh	r3, [r3, #0]
 801495a:	b29a      	uxth	r2, r3
 801495c:	2048      	movs	r0, #72	@ 0x48
 801495e:	183b      	adds	r3, r7, r0
 8014960:	4917      	ldr	r1, [pc, #92]	@ (80149c0 <USB_ActivateEndpoint+0x6a8>)
 8014962:	400a      	ands	r2, r1
 8014964:	801a      	strh	r2, [r3, #0]
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	009b      	lsls	r3, r3, #2
 801496e:	18d3      	adds	r3, r2, r3
 8014970:	183a      	adds	r2, r7, r0
 8014972:	8812      	ldrh	r2, [r2, #0]
 8014974:	4919      	ldr	r1, [pc, #100]	@ (80149dc <USB_ActivateEndpoint+0x6c4>)
 8014976:	430a      	orrs	r2, r1
 8014978:	b292      	uxth	r2, r2
 801497a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	78db      	ldrb	r3, [r3, #3]
 8014980:	2b01      	cmp	r3, #1
 8014982:	d02f      	beq.n	80149e4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	781b      	ldrb	r3, [r3, #0]
 801498a:	009b      	lsls	r3, r3, #2
 801498c:	18d3      	adds	r3, r2, r3
 801498e:	881b      	ldrh	r3, [r3, #0]
 8014990:	b29a      	uxth	r2, r3
 8014992:	2044      	movs	r0, #68	@ 0x44
 8014994:	183b      	adds	r3, r7, r0
 8014996:	4912      	ldr	r1, [pc, #72]	@ (80149e0 <USB_ActivateEndpoint+0x6c8>)
 8014998:	400a      	ands	r2, r1
 801499a:	801a      	strh	r2, [r3, #0]
 801499c:	183b      	adds	r3, r7, r0
 801499e:	183a      	adds	r2, r7, r0
 80149a0:	8812      	ldrh	r2, [r2, #0]
 80149a2:	2120      	movs	r1, #32
 80149a4:	404a      	eors	r2, r1
 80149a6:	801a      	strh	r2, [r3, #0]
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	781b      	ldrb	r3, [r3, #0]
 80149ae:	009b      	lsls	r3, r3, #2
 80149b0:	18d3      	adds	r3, r2, r3
 80149b2:	183a      	adds	r2, r7, r0
 80149b4:	8812      	ldrh	r2, [r2, #0]
 80149b6:	4905      	ldr	r1, [pc, #20]	@ (80149cc <USB_ActivateEndpoint+0x6b4>)
 80149b8:	430a      	orrs	r2, r1
 80149ba:	b292      	uxth	r2, r2
 80149bc:	801a      	strh	r2, [r3, #0]
 80149be:	e028      	b.n	8014a12 <USB_ActivateEndpoint+0x6fa>
 80149c0:	ffff8f8f 	.word	0xffff8f8f
 80149c4:	ffffc080 	.word	0xffffc080
 80149c8:	ffffbf8f 	.word	0xffffbf8f
 80149cc:	ffff8080 	.word	0xffff8080
 80149d0:	ffff8180 	.word	0xffff8180
 80149d4:	ffff8e8f 	.word	0xffff8e8f
 80149d8:	00000404 	.word	0x00000404
 80149dc:	ffff80c0 	.word	0xffff80c0
 80149e0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	009b      	lsls	r3, r3, #2
 80149ec:	18d3      	adds	r3, r2, r3
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	2046      	movs	r0, #70	@ 0x46
 80149f4:	183b      	adds	r3, r7, r0
 80149f6:	4916      	ldr	r1, [pc, #88]	@ (8014a50 <USB_ActivateEndpoint+0x738>)
 80149f8:	400a      	ands	r2, r1
 80149fa:	801a      	strh	r2, [r3, #0]
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	18d3      	adds	r3, r2, r3
 8014a06:	183a      	adds	r2, r7, r0
 8014a08:	8812      	ldrh	r2, [r2, #0]
 8014a0a:	4912      	ldr	r1, [pc, #72]	@ (8014a54 <USB_ActivateEndpoint+0x73c>)
 8014a0c:	430a      	orrs	r2, r1
 8014a0e:	b292      	uxth	r2, r2
 8014a10:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	18d3      	adds	r3, r2, r3
 8014a1c:	881b      	ldrh	r3, [r3, #0]
 8014a1e:	b29a      	uxth	r2, r3
 8014a20:	2042      	movs	r0, #66	@ 0x42
 8014a22:	183b      	adds	r3, r7, r0
 8014a24:	490c      	ldr	r1, [pc, #48]	@ (8014a58 <USB_ActivateEndpoint+0x740>)
 8014a26:	400a      	ands	r2, r1
 8014a28:	801a      	strh	r2, [r3, #0]
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	18d3      	adds	r3, r2, r3
 8014a34:	183a      	adds	r2, r7, r0
 8014a36:	8812      	ldrh	r2, [r2, #0]
 8014a38:	4906      	ldr	r1, [pc, #24]	@ (8014a54 <USB_ActivateEndpoint+0x73c>)
 8014a3a:	430a      	orrs	r2, r1
 8014a3c:	b292      	uxth	r2, r2
 8014a3e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8014a40:	236f      	movs	r3, #111	@ 0x6f
 8014a42:	18fb      	adds	r3, r7, r3
 8014a44:	781b      	ldrb	r3, [r3, #0]
}
 8014a46:	0018      	movs	r0, r3
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	b01c      	add	sp, #112	@ 0x70
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	46c0      	nop			@ (mov r8, r8)
 8014a50:	ffff8fbf 	.word	0xffff8fbf
 8014a54:	ffff8080 	.word	0xffff8080
 8014a58:	ffffbf8f 	.word	0xffffbf8f

08014a5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b08c      	sub	sp, #48	@ 0x30
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	7b1b      	ldrb	r3, [r3, #12]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d000      	beq.n	8014a70 <USB_DeactivateEndpoint+0x14>
 8014a6e:	e07e      	b.n	8014b6e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	785b      	ldrb	r3, [r3, #1]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d03c      	beq.n	8014af2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	18d2      	adds	r2, r2, r3
 8014a82:	210c      	movs	r1, #12
 8014a84:	187b      	adds	r3, r7, r1
 8014a86:	8812      	ldrh	r2, [r2, #0]
 8014a88:	801a      	strh	r2, [r3, #0]
 8014a8a:	187b      	adds	r3, r7, r1
 8014a8c:	881b      	ldrh	r3, [r3, #0]
 8014a8e:	2240      	movs	r2, #64	@ 0x40
 8014a90:	4013      	ands	r3, r2
 8014a92:	d016      	beq.n	8014ac2 <USB_DeactivateEndpoint+0x66>
 8014a94:	687a      	ldr	r2, [r7, #4]
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	18d3      	adds	r3, r2, r3
 8014a9e:	881b      	ldrh	r3, [r3, #0]
 8014aa0:	b29a      	uxth	r2, r3
 8014aa2:	200a      	movs	r0, #10
 8014aa4:	183b      	adds	r3, r7, r0
 8014aa6:	49c7      	ldr	r1, [pc, #796]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014aa8:	400a      	ands	r2, r1
 8014aaa:	801a      	strh	r2, [r3, #0]
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	18d3      	adds	r3, r2, r3
 8014ab6:	183a      	adds	r2, r7, r0
 8014ab8:	8812      	ldrh	r2, [r2, #0]
 8014aba:	49c3      	ldr	r1, [pc, #780]	@ (8014dc8 <USB_DeactivateEndpoint+0x36c>)
 8014abc:	430a      	orrs	r2, r1
 8014abe:	b292      	uxth	r2, r2
 8014ac0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	18d3      	adds	r3, r2, r3
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	2008      	movs	r0, #8
 8014ad2:	183b      	adds	r3, r7, r0
 8014ad4:	49bd      	ldr	r1, [pc, #756]	@ (8014dcc <USB_DeactivateEndpoint+0x370>)
 8014ad6:	400a      	ands	r2, r1
 8014ad8:	801a      	strh	r2, [r3, #0]
 8014ada:	687a      	ldr	r2, [r7, #4]
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	009b      	lsls	r3, r3, #2
 8014ae2:	18d3      	adds	r3, r2, r3
 8014ae4:	183a      	adds	r2, r7, r0
 8014ae6:	8812      	ldrh	r2, [r2, #0]
 8014ae8:	49b9      	ldr	r1, [pc, #740]	@ (8014dd0 <USB_DeactivateEndpoint+0x374>)
 8014aea:	430a      	orrs	r2, r1
 8014aec:	b292      	uxth	r2, r2
 8014aee:	801a      	strh	r2, [r3, #0]
 8014af0:	e163      	b.n	8014dba <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	18d2      	adds	r2, r2, r3
 8014afc:	2112      	movs	r1, #18
 8014afe:	187b      	adds	r3, r7, r1
 8014b00:	8812      	ldrh	r2, [r2, #0]
 8014b02:	801a      	strh	r2, [r3, #0]
 8014b04:	187b      	adds	r3, r7, r1
 8014b06:	881a      	ldrh	r2, [r3, #0]
 8014b08:	2380      	movs	r3, #128	@ 0x80
 8014b0a:	01db      	lsls	r3, r3, #7
 8014b0c:	4013      	ands	r3, r2
 8014b0e:	d016      	beq.n	8014b3e <USB_DeactivateEndpoint+0xe2>
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	781b      	ldrb	r3, [r3, #0]
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	18d3      	adds	r3, r2, r3
 8014b1a:	881b      	ldrh	r3, [r3, #0]
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	2010      	movs	r0, #16
 8014b20:	183b      	adds	r3, r7, r0
 8014b22:	49a8      	ldr	r1, [pc, #672]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014b24:	400a      	ands	r2, r1
 8014b26:	801a      	strh	r2, [r3, #0]
 8014b28:	687a      	ldr	r2, [r7, #4]
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	18d3      	adds	r3, r2, r3
 8014b32:	183a      	adds	r2, r7, r0
 8014b34:	8812      	ldrh	r2, [r2, #0]
 8014b36:	49a7      	ldr	r1, [pc, #668]	@ (8014dd4 <USB_DeactivateEndpoint+0x378>)
 8014b38:	430a      	orrs	r2, r1
 8014b3a:	b292      	uxth	r2, r2
 8014b3c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014b3e:	687a      	ldr	r2, [r7, #4]
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	18d3      	adds	r3, r2, r3
 8014b48:	881b      	ldrh	r3, [r3, #0]
 8014b4a:	b29a      	uxth	r2, r3
 8014b4c:	200e      	movs	r0, #14
 8014b4e:	183b      	adds	r3, r7, r0
 8014b50:	49a1      	ldr	r1, [pc, #644]	@ (8014dd8 <USB_DeactivateEndpoint+0x37c>)
 8014b52:	400a      	ands	r2, r1
 8014b54:	801a      	strh	r2, [r3, #0]
 8014b56:	687a      	ldr	r2, [r7, #4]
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	18d3      	adds	r3, r2, r3
 8014b60:	183a      	adds	r2, r7, r0
 8014b62:	8812      	ldrh	r2, [r2, #0]
 8014b64:	499a      	ldr	r1, [pc, #616]	@ (8014dd0 <USB_DeactivateEndpoint+0x374>)
 8014b66:	430a      	orrs	r2, r1
 8014b68:	b292      	uxth	r2, r2
 8014b6a:	801a      	strh	r2, [r3, #0]
 8014b6c:	e125      	b.n	8014dba <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	785b      	ldrb	r3, [r3, #1]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d000      	beq.n	8014b78 <USB_DeactivateEndpoint+0x11c>
 8014b76:	e090      	b.n	8014c9a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	18d2      	adds	r2, r2, r3
 8014b82:	2120      	movs	r1, #32
 8014b84:	187b      	adds	r3, r7, r1
 8014b86:	8812      	ldrh	r2, [r2, #0]
 8014b88:	801a      	strh	r2, [r3, #0]
 8014b8a:	187b      	adds	r3, r7, r1
 8014b8c:	881a      	ldrh	r2, [r3, #0]
 8014b8e:	2380      	movs	r3, #128	@ 0x80
 8014b90:	01db      	lsls	r3, r3, #7
 8014b92:	4013      	ands	r3, r2
 8014b94:	d016      	beq.n	8014bc4 <USB_DeactivateEndpoint+0x168>
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	009b      	lsls	r3, r3, #2
 8014b9e:	18d3      	adds	r3, r2, r3
 8014ba0:	881b      	ldrh	r3, [r3, #0]
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	201e      	movs	r0, #30
 8014ba6:	183b      	adds	r3, r7, r0
 8014ba8:	4986      	ldr	r1, [pc, #536]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014baa:	400a      	ands	r2, r1
 8014bac:	801a      	strh	r2, [r3, #0]
 8014bae:	687a      	ldr	r2, [r7, #4]
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	18d3      	adds	r3, r2, r3
 8014bb8:	183a      	adds	r2, r7, r0
 8014bba:	8812      	ldrh	r2, [r2, #0]
 8014bbc:	4985      	ldr	r1, [pc, #532]	@ (8014dd4 <USB_DeactivateEndpoint+0x378>)
 8014bbe:	430a      	orrs	r2, r1
 8014bc0:	b292      	uxth	r2, r2
 8014bc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	781b      	ldrb	r3, [r3, #0]
 8014bca:	009b      	lsls	r3, r3, #2
 8014bcc:	18d2      	adds	r2, r2, r3
 8014bce:	211c      	movs	r1, #28
 8014bd0:	187b      	adds	r3, r7, r1
 8014bd2:	8812      	ldrh	r2, [r2, #0]
 8014bd4:	801a      	strh	r2, [r3, #0]
 8014bd6:	187b      	adds	r3, r7, r1
 8014bd8:	881b      	ldrh	r3, [r3, #0]
 8014bda:	2240      	movs	r2, #64	@ 0x40
 8014bdc:	4013      	ands	r3, r2
 8014bde:	d016      	beq.n	8014c0e <USB_DeactivateEndpoint+0x1b2>
 8014be0:	687a      	ldr	r2, [r7, #4]
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	18d3      	adds	r3, r2, r3
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	b29a      	uxth	r2, r3
 8014bee:	201a      	movs	r0, #26
 8014bf0:	183b      	adds	r3, r7, r0
 8014bf2:	4974      	ldr	r1, [pc, #464]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014bf4:	400a      	ands	r2, r1
 8014bf6:	801a      	strh	r2, [r3, #0]
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	18d3      	adds	r3, r2, r3
 8014c02:	183a      	adds	r2, r7, r0
 8014c04:	8812      	ldrh	r2, [r2, #0]
 8014c06:	4970      	ldr	r1, [pc, #448]	@ (8014dc8 <USB_DeactivateEndpoint+0x36c>)
 8014c08:	430a      	orrs	r2, r1
 8014c0a:	b292      	uxth	r2, r2
 8014c0c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	009b      	lsls	r3, r3, #2
 8014c16:	18d3      	adds	r3, r2, r3
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	b29a      	uxth	r2, r3
 8014c1c:	2018      	movs	r0, #24
 8014c1e:	183b      	adds	r3, r7, r0
 8014c20:	4968      	ldr	r1, [pc, #416]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014c22:	400a      	ands	r2, r1
 8014c24:	801a      	strh	r2, [r3, #0]
 8014c26:	687a      	ldr	r2, [r7, #4]
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	18d3      	adds	r3, r2, r3
 8014c30:	183a      	adds	r2, r7, r0
 8014c32:	8812      	ldrh	r2, [r2, #0]
 8014c34:	4964      	ldr	r1, [pc, #400]	@ (8014dc8 <USB_DeactivateEndpoint+0x36c>)
 8014c36:	430a      	orrs	r2, r1
 8014c38:	b292      	uxth	r2, r2
 8014c3a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	009b      	lsls	r3, r3, #2
 8014c44:	18d3      	adds	r3, r2, r3
 8014c46:	881b      	ldrh	r3, [r3, #0]
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	2016      	movs	r0, #22
 8014c4c:	183b      	adds	r3, r7, r0
 8014c4e:	4962      	ldr	r1, [pc, #392]	@ (8014dd8 <USB_DeactivateEndpoint+0x37c>)
 8014c50:	400a      	ands	r2, r1
 8014c52:	801a      	strh	r2, [r3, #0]
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	18d3      	adds	r3, r2, r3
 8014c5e:	183a      	adds	r2, r7, r0
 8014c60:	8812      	ldrh	r2, [r2, #0]
 8014c62:	495b      	ldr	r1, [pc, #364]	@ (8014dd0 <USB_DeactivateEndpoint+0x374>)
 8014c64:	430a      	orrs	r2, r1
 8014c66:	b292      	uxth	r2, r2
 8014c68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	18d3      	adds	r3, r2, r3
 8014c74:	881b      	ldrh	r3, [r3, #0]
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	2014      	movs	r0, #20
 8014c7a:	183b      	adds	r3, r7, r0
 8014c7c:	4953      	ldr	r1, [pc, #332]	@ (8014dcc <USB_DeactivateEndpoint+0x370>)
 8014c7e:	400a      	ands	r2, r1
 8014c80:	801a      	strh	r2, [r3, #0]
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	18d3      	adds	r3, r2, r3
 8014c8c:	183a      	adds	r2, r7, r0
 8014c8e:	8812      	ldrh	r2, [r2, #0]
 8014c90:	494f      	ldr	r1, [pc, #316]	@ (8014dd0 <USB_DeactivateEndpoint+0x374>)
 8014c92:	430a      	orrs	r2, r1
 8014c94:	b292      	uxth	r2, r2
 8014c96:	801a      	strh	r2, [r3, #0]
 8014c98:	e08f      	b.n	8014dba <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	18d2      	adds	r2, r2, r3
 8014ca4:	212e      	movs	r1, #46	@ 0x2e
 8014ca6:	187b      	adds	r3, r7, r1
 8014ca8:	8812      	ldrh	r2, [r2, #0]
 8014caa:	801a      	strh	r2, [r3, #0]
 8014cac:	187b      	adds	r3, r7, r1
 8014cae:	881a      	ldrh	r2, [r3, #0]
 8014cb0:	2380      	movs	r3, #128	@ 0x80
 8014cb2:	01db      	lsls	r3, r3, #7
 8014cb4:	4013      	ands	r3, r2
 8014cb6:	d016      	beq.n	8014ce6 <USB_DeactivateEndpoint+0x28a>
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	781b      	ldrb	r3, [r3, #0]
 8014cbe:	009b      	lsls	r3, r3, #2
 8014cc0:	18d3      	adds	r3, r2, r3
 8014cc2:	881b      	ldrh	r3, [r3, #0]
 8014cc4:	b29a      	uxth	r2, r3
 8014cc6:	202c      	movs	r0, #44	@ 0x2c
 8014cc8:	183b      	adds	r3, r7, r0
 8014cca:	493e      	ldr	r1, [pc, #248]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014ccc:	400a      	ands	r2, r1
 8014cce:	801a      	strh	r2, [r3, #0]
 8014cd0:	687a      	ldr	r2, [r7, #4]
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	18d3      	adds	r3, r2, r3
 8014cda:	183a      	adds	r2, r7, r0
 8014cdc:	8812      	ldrh	r2, [r2, #0]
 8014cde:	493d      	ldr	r1, [pc, #244]	@ (8014dd4 <USB_DeactivateEndpoint+0x378>)
 8014ce0:	430a      	orrs	r2, r1
 8014ce2:	b292      	uxth	r2, r2
 8014ce4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	009b      	lsls	r3, r3, #2
 8014cee:	18d2      	adds	r2, r2, r3
 8014cf0:	212a      	movs	r1, #42	@ 0x2a
 8014cf2:	187b      	adds	r3, r7, r1
 8014cf4:	8812      	ldrh	r2, [r2, #0]
 8014cf6:	801a      	strh	r2, [r3, #0]
 8014cf8:	187b      	adds	r3, r7, r1
 8014cfa:	881b      	ldrh	r3, [r3, #0]
 8014cfc:	2240      	movs	r2, #64	@ 0x40
 8014cfe:	4013      	ands	r3, r2
 8014d00:	d016      	beq.n	8014d30 <USB_DeactivateEndpoint+0x2d4>
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	18d3      	adds	r3, r2, r3
 8014d0c:	881b      	ldrh	r3, [r3, #0]
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	2028      	movs	r0, #40	@ 0x28
 8014d12:	183b      	adds	r3, r7, r0
 8014d14:	492b      	ldr	r1, [pc, #172]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014d16:	400a      	ands	r2, r1
 8014d18:	801a      	strh	r2, [r3, #0]
 8014d1a:	687a      	ldr	r2, [r7, #4]
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	009b      	lsls	r3, r3, #2
 8014d22:	18d3      	adds	r3, r2, r3
 8014d24:	183a      	adds	r2, r7, r0
 8014d26:	8812      	ldrh	r2, [r2, #0]
 8014d28:	4927      	ldr	r1, [pc, #156]	@ (8014dc8 <USB_DeactivateEndpoint+0x36c>)
 8014d2a:	430a      	orrs	r2, r1
 8014d2c:	b292      	uxth	r2, r2
 8014d2e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	781b      	ldrb	r3, [r3, #0]
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	18d3      	adds	r3, r2, r3
 8014d3a:	881b      	ldrh	r3, [r3, #0]
 8014d3c:	b29a      	uxth	r2, r3
 8014d3e:	2026      	movs	r0, #38	@ 0x26
 8014d40:	183b      	adds	r3, r7, r0
 8014d42:	4920      	ldr	r1, [pc, #128]	@ (8014dc4 <USB_DeactivateEndpoint+0x368>)
 8014d44:	400a      	ands	r2, r1
 8014d46:	801a      	strh	r2, [r3, #0]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	009b      	lsls	r3, r3, #2
 8014d50:	18d3      	adds	r3, r2, r3
 8014d52:	183a      	adds	r2, r7, r0
 8014d54:	8812      	ldrh	r2, [r2, #0]
 8014d56:	491f      	ldr	r1, [pc, #124]	@ (8014dd4 <USB_DeactivateEndpoint+0x378>)
 8014d58:	430a      	orrs	r2, r1
 8014d5a:	b292      	uxth	r2, r2
 8014d5c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	18d3      	adds	r3, r2, r3
 8014d68:	881b      	ldrh	r3, [r3, #0]
 8014d6a:	b29a      	uxth	r2, r3
 8014d6c:	2024      	movs	r0, #36	@ 0x24
 8014d6e:	183b      	adds	r3, r7, r0
 8014d70:	4916      	ldr	r1, [pc, #88]	@ (8014dcc <USB_DeactivateEndpoint+0x370>)
 8014d72:	400a      	ands	r2, r1
 8014d74:	801a      	strh	r2, [r3, #0]
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	18d3      	adds	r3, r2, r3
 8014d80:	183a      	adds	r2, r7, r0
 8014d82:	8812      	ldrh	r2, [r2, #0]
 8014d84:	4912      	ldr	r1, [pc, #72]	@ (8014dd0 <USB_DeactivateEndpoint+0x374>)
 8014d86:	430a      	orrs	r2, r1
 8014d88:	b292      	uxth	r2, r2
 8014d8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	781b      	ldrb	r3, [r3, #0]
 8014d92:	009b      	lsls	r3, r3, #2
 8014d94:	18d3      	adds	r3, r2, r3
 8014d96:	881b      	ldrh	r3, [r3, #0]
 8014d98:	b29a      	uxth	r2, r3
 8014d9a:	2022      	movs	r0, #34	@ 0x22
 8014d9c:	183b      	adds	r3, r7, r0
 8014d9e:	490e      	ldr	r1, [pc, #56]	@ (8014dd8 <USB_DeactivateEndpoint+0x37c>)
 8014da0:	400a      	ands	r2, r1
 8014da2:	801a      	strh	r2, [r3, #0]
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	18d3      	adds	r3, r2, r3
 8014dae:	183a      	adds	r2, r7, r0
 8014db0:	8812      	ldrh	r2, [r2, #0]
 8014db2:	4907      	ldr	r1, [pc, #28]	@ (8014dd0 <USB_DeactivateEndpoint+0x374>)
 8014db4:	430a      	orrs	r2, r1
 8014db6:	b292      	uxth	r2, r2
 8014db8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014dba:	2300      	movs	r3, #0
}
 8014dbc:	0018      	movs	r0, r3
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	b00c      	add	sp, #48	@ 0x30
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	ffff8f8f 	.word	0xffff8f8f
 8014dc8:	ffff80c0 	.word	0xffff80c0
 8014dcc:	ffff8fbf 	.word	0xffff8fbf
 8014dd0:	ffff8080 	.word	0xffff8080
 8014dd4:	ffffc080 	.word	0xffffc080
 8014dd8:	ffffbf8f 	.word	0xffffbf8f

08014ddc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014ddc:	b590      	push	{r4, r7, lr}
 8014dde:	b0c3      	sub	sp, #268	@ 0x10c
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	785b      	ldrb	r3, [r3, #1]
 8014dea:	2b01      	cmp	r3, #1
 8014dec:	d001      	beq.n	8014df2 <USB_EPStartXfer+0x16>
 8014dee:	f000 fd2d 	bl	801584c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	699a      	ldr	r2, [r3, #24]
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	691b      	ldr	r3, [r3, #16]
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	d905      	bls.n	8014e0a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	691b      	ldr	r3, [r3, #16]
 8014e02:	1d7a      	adds	r2, r7, #5
 8014e04:	32ff      	adds	r2, #255	@ 0xff
 8014e06:	6013      	str	r3, [r2, #0]
 8014e08:	e004      	b.n	8014e14 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	699b      	ldr	r3, [r3, #24]
 8014e0e:	1d7a      	adds	r2, r7, #5
 8014e10:	32ff      	adds	r2, #255	@ 0xff
 8014e12:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	7b1b      	ldrb	r3, [r3, #12]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d125      	bne.n	8014e68 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	6959      	ldr	r1, [r3, #20]
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	88da      	ldrh	r2, [r3, #6]
 8014e24:	1d7b      	adds	r3, r7, #5
 8014e26:	33ff      	adds	r3, #255	@ 0xff
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f001 fa47 	bl	80162c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	613b      	str	r3, [r7, #16]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2250      	movs	r2, #80	@ 0x50
 8014e3a:	5a9b      	ldrh	r3, [r3, r2]
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	001a      	movs	r2, r3
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	189b      	adds	r3, r3, r2
 8014e44:	613b      	str	r3, [r7, #16]
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	781b      	ldrb	r3, [r3, #0]
 8014e4a:	00da      	lsls	r2, r3, #3
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	18d3      	adds	r3, r2, r3
 8014e50:	4ad7      	ldr	r2, [pc, #860]	@ (80151b0 <USB_EPStartXfer+0x3d4>)
 8014e52:	4694      	mov	ip, r2
 8014e54:	4463      	add	r3, ip
 8014e56:	60fb      	str	r3, [r7, #12]
 8014e58:	1d7b      	adds	r3, r7, #5
 8014e5a:	33ff      	adds	r3, #255	@ 0xff
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	801a      	strh	r2, [r3, #0]
 8014e64:	f000 fccd 	bl	8015802 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	78db      	ldrb	r3, [r3, #3]
 8014e6c:	2b02      	cmp	r3, #2
 8014e6e:	d000      	beq.n	8014e72 <USB_EPStartXfer+0x96>
 8014e70:	e362      	b.n	8015538 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	6a1a      	ldr	r2, [r3, #32]
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	691b      	ldr	r3, [r3, #16]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d800      	bhi.n	8014e80 <USB_EPStartXfer+0xa4>
 8014e7e:	e309      	b.n	8015494 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8014e80:	687a      	ldr	r2, [r7, #4]
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	009b      	lsls	r3, r3, #2
 8014e88:	18d3      	adds	r3, r2, r3
 8014e8a:	881b      	ldrh	r3, [r3, #0]
 8014e8c:	b29a      	uxth	r2, r3
 8014e8e:	2056      	movs	r0, #86	@ 0x56
 8014e90:	183b      	adds	r3, r7, r0
 8014e92:	49c8      	ldr	r1, [pc, #800]	@ (80151b4 <USB_EPStartXfer+0x3d8>)
 8014e94:	400a      	ands	r2, r1
 8014e96:	801a      	strh	r2, [r3, #0]
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	009b      	lsls	r3, r3, #2
 8014ea0:	18d3      	adds	r3, r2, r3
 8014ea2:	183a      	adds	r2, r7, r0
 8014ea4:	8812      	ldrh	r2, [r2, #0]
 8014ea6:	49c4      	ldr	r1, [pc, #784]	@ (80151b8 <USB_EPStartXfer+0x3dc>)
 8014ea8:	430a      	orrs	r2, r1
 8014eaa:	b292      	uxth	r2, r2
 8014eac:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	6a1a      	ldr	r2, [r3, #32]
 8014eb2:	1d7b      	adds	r3, r7, #5
 8014eb4:	33ff      	adds	r3, #255	@ 0xff
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	1ad2      	subs	r2, r2, r3
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	18d3      	adds	r3, r2, r3
 8014ec8:	881b      	ldrh	r3, [r3, #0]
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	001a      	movs	r2, r3
 8014ece:	2340      	movs	r3, #64	@ 0x40
 8014ed0:	4013      	ands	r3, r2
 8014ed2:	d100      	bne.n	8014ed6 <USB_EPStartXfer+0xfa>
 8014ed4:	e176      	b.n	80151c4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	785b      	ldrb	r3, [r3, #1]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d000      	beq.n	8014ee4 <USB_EPStartXfer+0x108>
 8014ee2:	e074      	b.n	8014fce <USB_EPStartXfer+0x1f2>
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2250      	movs	r2, #80	@ 0x50
 8014eec:	5a9b      	ldrh	r3, [r3, r2]
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	001a      	movs	r2, r3
 8014ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ef4:	189b      	adds	r3, r3, r2
 8014ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	00da      	lsls	r2, r3, #3
 8014efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f00:	18d3      	adds	r3, r2, r3
 8014f02:	4aae      	ldr	r2, [pc, #696]	@ (80151bc <USB_EPStartXfer+0x3e0>)
 8014f04:	4694      	mov	ip, r2
 8014f06:	4463      	add	r3, ip
 8014f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f0c:	881b      	ldrh	r3, [r3, #0]
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	059b      	lsls	r3, r3, #22
 8014f12:	0d9b      	lsrs	r3, r3, #22
 8014f14:	b29a      	uxth	r2, r3
 8014f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f18:	801a      	strh	r2, [r3, #0]
 8014f1a:	1d7b      	adds	r3, r7, #5
 8014f1c:	33ff      	adds	r3, #255	@ 0xff
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b3e      	cmp	r3, #62	@ 0x3e
 8014f22:	d924      	bls.n	8014f6e <USB_EPStartXfer+0x192>
 8014f24:	1d7b      	adds	r3, r7, #5
 8014f26:	33ff      	adds	r3, #255	@ 0xff
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	095b      	lsrs	r3, r3, #5
 8014f2c:	1c7a      	adds	r2, r7, #1
 8014f2e:	32ff      	adds	r2, #255	@ 0xff
 8014f30:	6013      	str	r3, [r2, #0]
 8014f32:	1d7b      	adds	r3, r7, #5
 8014f34:	33ff      	adds	r3, #255	@ 0xff
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	221f      	movs	r2, #31
 8014f3a:	4013      	ands	r3, r2
 8014f3c:	d106      	bne.n	8014f4c <USB_EPStartXfer+0x170>
 8014f3e:	1c7b      	adds	r3, r7, #1
 8014f40:	33ff      	adds	r3, #255	@ 0xff
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	3b01      	subs	r3, #1
 8014f46:	1c7a      	adds	r2, r7, #1
 8014f48:	32ff      	adds	r2, #255	@ 0xff
 8014f4a:	6013      	str	r3, [r2, #0]
 8014f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f4e:	881b      	ldrh	r3, [r3, #0]
 8014f50:	b29a      	uxth	r2, r3
 8014f52:	1c7b      	adds	r3, r7, #1
 8014f54:	33ff      	adds	r3, #255	@ 0xff
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	029b      	lsls	r3, r3, #10
 8014f5c:	b29b      	uxth	r3, r3
 8014f5e:	4313      	orrs	r3, r2
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	4a97      	ldr	r2, [pc, #604]	@ (80151c0 <USB_EPStartXfer+0x3e4>)
 8014f64:	4313      	orrs	r3, r2
 8014f66:	b29a      	uxth	r2, r3
 8014f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f6a:	801a      	strh	r2, [r3, #0]
 8014f6c:	e04a      	b.n	8015004 <USB_EPStartXfer+0x228>
 8014f6e:	1d7b      	adds	r3, r7, #5
 8014f70:	33ff      	adds	r3, #255	@ 0xff
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d108      	bne.n	8014f8a <USB_EPStartXfer+0x1ae>
 8014f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f7a:	881b      	ldrh	r3, [r3, #0]
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	4a90      	ldr	r2, [pc, #576]	@ (80151c0 <USB_EPStartXfer+0x3e4>)
 8014f80:	4313      	orrs	r3, r2
 8014f82:	b29a      	uxth	r2, r3
 8014f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f86:	801a      	strh	r2, [r3, #0]
 8014f88:	e03c      	b.n	8015004 <USB_EPStartXfer+0x228>
 8014f8a:	1d7b      	adds	r3, r7, #5
 8014f8c:	33ff      	adds	r3, #255	@ 0xff
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	085b      	lsrs	r3, r3, #1
 8014f92:	1c7a      	adds	r2, r7, #1
 8014f94:	32ff      	adds	r2, #255	@ 0xff
 8014f96:	6013      	str	r3, [r2, #0]
 8014f98:	1d7b      	adds	r3, r7, #5
 8014f9a:	33ff      	adds	r3, #255	@ 0xff
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	4013      	ands	r3, r2
 8014fa2:	d006      	beq.n	8014fb2 <USB_EPStartXfer+0x1d6>
 8014fa4:	1c7b      	adds	r3, r7, #1
 8014fa6:	33ff      	adds	r3, #255	@ 0xff
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	3301      	adds	r3, #1
 8014fac:	1c7a      	adds	r2, r7, #1
 8014fae:	32ff      	adds	r2, #255	@ 0xff
 8014fb0:	6013      	str	r3, [r2, #0]
 8014fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fb4:	881b      	ldrh	r3, [r3, #0]
 8014fb6:	b29a      	uxth	r2, r3
 8014fb8:	1c7b      	adds	r3, r7, #1
 8014fba:	33ff      	adds	r3, #255	@ 0xff
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	029b      	lsls	r3, r3, #10
 8014fc2:	b29b      	uxth	r3, r3
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	b29a      	uxth	r2, r3
 8014fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fca:	801a      	strh	r2, [r3, #0]
 8014fcc:	e01a      	b.n	8015004 <USB_EPStartXfer+0x228>
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	785b      	ldrb	r3, [r3, #1]
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d116      	bne.n	8015004 <USB_EPStartXfer+0x228>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2250      	movs	r2, #80	@ 0x50
 8014fda:	5a9b      	ldrh	r3, [r3, r2]
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	001a      	movs	r2, r3
 8014fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fe2:	189b      	adds	r3, r3, r2
 8014fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	781b      	ldrb	r3, [r3, #0]
 8014fea:	00da      	lsls	r2, r3, #3
 8014fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fee:	18d3      	adds	r3, r2, r3
 8014ff0:	4a72      	ldr	r2, [pc, #456]	@ (80151bc <USB_EPStartXfer+0x3e0>)
 8014ff2:	4694      	mov	ip, r2
 8014ff4:	4463      	add	r3, ip
 8014ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ff8:	1d7b      	adds	r3, r7, #5
 8014ffa:	33ff      	adds	r3, #255	@ 0xff
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015002:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8015004:	2076      	movs	r0, #118	@ 0x76
 8015006:	183b      	adds	r3, r7, r0
 8015008:	683a      	ldr	r2, [r7, #0]
 801500a:	8952      	ldrh	r2, [r2, #10]
 801500c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	6959      	ldr	r1, [r3, #20]
 8015012:	1d7b      	adds	r3, r7, #5
 8015014:	33ff      	adds	r3, #255	@ 0xff
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	b29c      	uxth	r4, r3
 801501a:	183b      	adds	r3, r7, r0
 801501c:	881a      	ldrh	r2, [r3, #0]
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	0023      	movs	r3, r4
 8015022:	f001 f94d 	bl	80162c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	695a      	ldr	r2, [r3, #20]
 801502a:	1d7b      	adds	r3, r7, #5
 801502c:	33ff      	adds	r3, #255	@ 0xff
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	18d2      	adds	r2, r2, r3
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	6a1a      	ldr	r2, [r3, #32]
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	691b      	ldr	r3, [r3, #16]
 801503e:	429a      	cmp	r2, r3
 8015040:	d908      	bls.n	8015054 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	6a1a      	ldr	r2, [r3, #32]
 8015046:	1d7b      	adds	r3, r7, #5
 8015048:	33ff      	adds	r3, #255	@ 0xff
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	1ad2      	subs	r2, r2, r3
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	621a      	str	r2, [r3, #32]
 8015052:	e007      	b.n	8015064 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	6a1b      	ldr	r3, [r3, #32]
 8015058:	1d7a      	adds	r2, r7, #5
 801505a:	32ff      	adds	r2, #255	@ 0xff
 801505c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	2200      	movs	r2, #0
 8015062:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	785b      	ldrb	r3, [r3, #1]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d000      	beq.n	801506e <USB_EPStartXfer+0x292>
 801506c:	e070      	b.n	8015150 <USB_EPStartXfer+0x374>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	61bb      	str	r3, [r7, #24]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2250      	movs	r2, #80	@ 0x50
 8015076:	5a9b      	ldrh	r3, [r3, r2]
 8015078:	b29b      	uxth	r3, r3
 801507a:	001a      	movs	r2, r3
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	189b      	adds	r3, r3, r2
 8015080:	61bb      	str	r3, [r7, #24]
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	00da      	lsls	r2, r3, #3
 8015088:	69bb      	ldr	r3, [r7, #24]
 801508a:	18d3      	adds	r3, r2, r3
 801508c:	4a48      	ldr	r2, [pc, #288]	@ (80151b0 <USB_EPStartXfer+0x3d4>)
 801508e:	4694      	mov	ip, r2
 8015090:	4463      	add	r3, ip
 8015092:	617b      	str	r3, [r7, #20]
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	881b      	ldrh	r3, [r3, #0]
 8015098:	b29b      	uxth	r3, r3
 801509a:	059b      	lsls	r3, r3, #22
 801509c:	0d9b      	lsrs	r3, r3, #22
 801509e:	b29a      	uxth	r2, r3
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	801a      	strh	r2, [r3, #0]
 80150a4:	1d7b      	adds	r3, r7, #5
 80150a6:	33ff      	adds	r3, #255	@ 0xff
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80150ac:	d922      	bls.n	80150f4 <USB_EPStartXfer+0x318>
 80150ae:	1d7b      	adds	r3, r7, #5
 80150b0:	33ff      	adds	r3, #255	@ 0xff
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	095b      	lsrs	r3, r3, #5
 80150b6:	21fc      	movs	r1, #252	@ 0xfc
 80150b8:	187a      	adds	r2, r7, r1
 80150ba:	6013      	str	r3, [r2, #0]
 80150bc:	1d7b      	adds	r3, r7, #5
 80150be:	33ff      	adds	r3, #255	@ 0xff
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	221f      	movs	r2, #31
 80150c4:	4013      	ands	r3, r2
 80150c6:	d104      	bne.n	80150d2 <USB_EPStartXfer+0x2f6>
 80150c8:	187b      	adds	r3, r7, r1
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	3b01      	subs	r3, #1
 80150ce:	187a      	adds	r2, r7, r1
 80150d0:	6013      	str	r3, [r2, #0]
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	881b      	ldrh	r3, [r3, #0]
 80150d6:	b29a      	uxth	r2, r3
 80150d8:	23fc      	movs	r3, #252	@ 0xfc
 80150da:	18fb      	adds	r3, r7, r3
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	b29b      	uxth	r3, r3
 80150e0:	029b      	lsls	r3, r3, #10
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	4313      	orrs	r3, r2
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	4a35      	ldr	r2, [pc, #212]	@ (80151c0 <USB_EPStartXfer+0x3e4>)
 80150ea:	4313      	orrs	r3, r2
 80150ec:	b29a      	uxth	r2, r3
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	801a      	strh	r2, [r3, #0]
 80150f2:	e04a      	b.n	801518a <USB_EPStartXfer+0x3ae>
 80150f4:	1d7b      	adds	r3, r7, #5
 80150f6:	33ff      	adds	r3, #255	@ 0xff
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d108      	bne.n	8015110 <USB_EPStartXfer+0x334>
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	881b      	ldrh	r3, [r3, #0]
 8015102:	b29b      	uxth	r3, r3
 8015104:	4a2e      	ldr	r2, [pc, #184]	@ (80151c0 <USB_EPStartXfer+0x3e4>)
 8015106:	4313      	orrs	r3, r2
 8015108:	b29a      	uxth	r2, r3
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	801a      	strh	r2, [r3, #0]
 801510e:	e03c      	b.n	801518a <USB_EPStartXfer+0x3ae>
 8015110:	1d7b      	adds	r3, r7, #5
 8015112:	33ff      	adds	r3, #255	@ 0xff
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	085b      	lsrs	r3, r3, #1
 8015118:	21fc      	movs	r1, #252	@ 0xfc
 801511a:	187a      	adds	r2, r7, r1
 801511c:	6013      	str	r3, [r2, #0]
 801511e:	1d7b      	adds	r3, r7, #5
 8015120:	33ff      	adds	r3, #255	@ 0xff
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2201      	movs	r2, #1
 8015126:	4013      	ands	r3, r2
 8015128:	d004      	beq.n	8015134 <USB_EPStartXfer+0x358>
 801512a:	187b      	adds	r3, r7, r1
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	3301      	adds	r3, #1
 8015130:	187a      	adds	r2, r7, r1
 8015132:	6013      	str	r3, [r2, #0]
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	881b      	ldrh	r3, [r3, #0]
 8015138:	b29a      	uxth	r2, r3
 801513a:	23fc      	movs	r3, #252	@ 0xfc
 801513c:	18fb      	adds	r3, r7, r3
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	b29b      	uxth	r3, r3
 8015142:	029b      	lsls	r3, r3, #10
 8015144:	b29b      	uxth	r3, r3
 8015146:	4313      	orrs	r3, r2
 8015148:	b29a      	uxth	r2, r3
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	801a      	strh	r2, [r3, #0]
 801514e:	e01c      	b.n	801518a <USB_EPStartXfer+0x3ae>
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	785b      	ldrb	r3, [r3, #1]
 8015154:	2b01      	cmp	r3, #1
 8015156:	d118      	bne.n	801518a <USB_EPStartXfer+0x3ae>
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	623b      	str	r3, [r7, #32]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2250      	movs	r2, #80	@ 0x50
 8015160:	5a9b      	ldrh	r3, [r3, r2]
 8015162:	b29b      	uxth	r3, r3
 8015164:	001a      	movs	r2, r3
 8015166:	6a3b      	ldr	r3, [r7, #32]
 8015168:	189b      	adds	r3, r3, r2
 801516a:	623b      	str	r3, [r7, #32]
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	00da      	lsls	r2, r3, #3
 8015172:	6a3b      	ldr	r3, [r7, #32]
 8015174:	18d3      	adds	r3, r2, r3
 8015176:	4a0e      	ldr	r2, [pc, #56]	@ (80151b0 <USB_EPStartXfer+0x3d4>)
 8015178:	4694      	mov	ip, r2
 801517a:	4463      	add	r3, ip
 801517c:	61fb      	str	r3, [r7, #28]
 801517e:	1d7b      	adds	r3, r7, #5
 8015180:	33ff      	adds	r3, #255	@ 0xff
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	b29a      	uxth	r2, r3
 8015186:	69fb      	ldr	r3, [r7, #28]
 8015188:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801518a:	2076      	movs	r0, #118	@ 0x76
 801518c:	183b      	adds	r3, r7, r0
 801518e:	683a      	ldr	r2, [r7, #0]
 8015190:	8912      	ldrh	r2, [r2, #8]
 8015192:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	6959      	ldr	r1, [r3, #20]
 8015198:	1d7b      	adds	r3, r7, #5
 801519a:	33ff      	adds	r3, #255	@ 0xff
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	b29c      	uxth	r4, r3
 80151a0:	183b      	adds	r3, r7, r0
 80151a2:	881a      	ldrh	r2, [r3, #0]
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	0023      	movs	r3, r4
 80151a8:	f001 f88a 	bl	80162c0 <USB_WritePMA>
 80151ac:	e329      	b.n	8015802 <USB_EPStartXfer+0xa26>
 80151ae:	46c0      	nop			@ (mov r8, r8)
 80151b0:	00000402 	.word	0x00000402
 80151b4:	ffff8f8f 	.word	0xffff8f8f
 80151b8:	ffff8180 	.word	0xffff8180
 80151bc:	00000406 	.word	0x00000406
 80151c0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	785b      	ldrb	r3, [r3, #1]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d000      	beq.n	80151ce <USB_EPStartXfer+0x3f2>
 80151cc:	e070      	b.n	80152b0 <USB_EPStartXfer+0x4d4>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2250      	movs	r2, #80	@ 0x50
 80151d6:	5a9b      	ldrh	r3, [r3, r2]
 80151d8:	b29b      	uxth	r3, r3
 80151da:	001a      	movs	r2, r3
 80151dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80151de:	189b      	adds	r3, r3, r2
 80151e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	781b      	ldrb	r3, [r3, #0]
 80151e6:	00da      	lsls	r2, r3, #3
 80151e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80151ea:	18d3      	adds	r3, r2, r3
 80151ec:	4acd      	ldr	r2, [pc, #820]	@ (8015524 <USB_EPStartXfer+0x748>)
 80151ee:	4694      	mov	ip, r2
 80151f0:	4463      	add	r3, ip
 80151f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80151f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151f6:	881b      	ldrh	r3, [r3, #0]
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	059b      	lsls	r3, r3, #22
 80151fc:	0d9b      	lsrs	r3, r3, #22
 80151fe:	b29a      	uxth	r2, r3
 8015200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015202:	801a      	strh	r2, [r3, #0]
 8015204:	1d7b      	adds	r3, r7, #5
 8015206:	33ff      	adds	r3, #255	@ 0xff
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b3e      	cmp	r3, #62	@ 0x3e
 801520c:	d922      	bls.n	8015254 <USB_EPStartXfer+0x478>
 801520e:	1d7b      	adds	r3, r7, #5
 8015210:	33ff      	adds	r3, #255	@ 0xff
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	095b      	lsrs	r3, r3, #5
 8015216:	21f8      	movs	r1, #248	@ 0xf8
 8015218:	187a      	adds	r2, r7, r1
 801521a:	6013      	str	r3, [r2, #0]
 801521c:	1d7b      	adds	r3, r7, #5
 801521e:	33ff      	adds	r3, #255	@ 0xff
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	221f      	movs	r2, #31
 8015224:	4013      	ands	r3, r2
 8015226:	d104      	bne.n	8015232 <USB_EPStartXfer+0x456>
 8015228:	187b      	adds	r3, r7, r1
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	3b01      	subs	r3, #1
 801522e:	187a      	adds	r2, r7, r1
 8015230:	6013      	str	r3, [r2, #0]
 8015232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015234:	881b      	ldrh	r3, [r3, #0]
 8015236:	b29a      	uxth	r2, r3
 8015238:	23f8      	movs	r3, #248	@ 0xf8
 801523a:	18fb      	adds	r3, r7, r3
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	b29b      	uxth	r3, r3
 8015240:	029b      	lsls	r3, r3, #10
 8015242:	b29b      	uxth	r3, r3
 8015244:	4313      	orrs	r3, r2
 8015246:	b29b      	uxth	r3, r3
 8015248:	4ab7      	ldr	r2, [pc, #732]	@ (8015528 <USB_EPStartXfer+0x74c>)
 801524a:	4313      	orrs	r3, r2
 801524c:	b29a      	uxth	r2, r3
 801524e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015250:	801a      	strh	r2, [r3, #0]
 8015252:	e04a      	b.n	80152ea <USB_EPStartXfer+0x50e>
 8015254:	1d7b      	adds	r3, r7, #5
 8015256:	33ff      	adds	r3, #255	@ 0xff
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d108      	bne.n	8015270 <USB_EPStartXfer+0x494>
 801525e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015260:	881b      	ldrh	r3, [r3, #0]
 8015262:	b29b      	uxth	r3, r3
 8015264:	4ab0      	ldr	r2, [pc, #704]	@ (8015528 <USB_EPStartXfer+0x74c>)
 8015266:	4313      	orrs	r3, r2
 8015268:	b29a      	uxth	r2, r3
 801526a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801526c:	801a      	strh	r2, [r3, #0]
 801526e:	e03c      	b.n	80152ea <USB_EPStartXfer+0x50e>
 8015270:	1d7b      	adds	r3, r7, #5
 8015272:	33ff      	adds	r3, #255	@ 0xff
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	085b      	lsrs	r3, r3, #1
 8015278:	21f8      	movs	r1, #248	@ 0xf8
 801527a:	187a      	adds	r2, r7, r1
 801527c:	6013      	str	r3, [r2, #0]
 801527e:	1d7b      	adds	r3, r7, #5
 8015280:	33ff      	adds	r3, #255	@ 0xff
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	2201      	movs	r2, #1
 8015286:	4013      	ands	r3, r2
 8015288:	d004      	beq.n	8015294 <USB_EPStartXfer+0x4b8>
 801528a:	187b      	adds	r3, r7, r1
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	3301      	adds	r3, #1
 8015290:	187a      	adds	r2, r7, r1
 8015292:	6013      	str	r3, [r2, #0]
 8015294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015296:	881b      	ldrh	r3, [r3, #0]
 8015298:	b29a      	uxth	r2, r3
 801529a:	23f8      	movs	r3, #248	@ 0xf8
 801529c:	18fb      	adds	r3, r7, r3
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	029b      	lsls	r3, r3, #10
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	4313      	orrs	r3, r2
 80152a8:	b29a      	uxth	r2, r3
 80152aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152ac:	801a      	strh	r2, [r3, #0]
 80152ae:	e01c      	b.n	80152ea <USB_EPStartXfer+0x50e>
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	785b      	ldrb	r3, [r3, #1]
 80152b4:	2b01      	cmp	r3, #1
 80152b6:	d118      	bne.n	80152ea <USB_EPStartXfer+0x50e>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2250      	movs	r2, #80	@ 0x50
 80152c0:	5a9b      	ldrh	r3, [r3, r2]
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	001a      	movs	r2, r3
 80152c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80152c8:	189b      	adds	r3, r3, r2
 80152ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	00da      	lsls	r2, r3, #3
 80152d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80152d4:	18d3      	adds	r3, r2, r3
 80152d6:	4a93      	ldr	r2, [pc, #588]	@ (8015524 <USB_EPStartXfer+0x748>)
 80152d8:	4694      	mov	ip, r2
 80152da:	4463      	add	r3, ip
 80152dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80152de:	1d7b      	adds	r3, r7, #5
 80152e0:	33ff      	adds	r3, #255	@ 0xff
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80152e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80152ea:	2076      	movs	r0, #118	@ 0x76
 80152ec:	183b      	adds	r3, r7, r0
 80152ee:	683a      	ldr	r2, [r7, #0]
 80152f0:	8912      	ldrh	r2, [r2, #8]
 80152f2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	6959      	ldr	r1, [r3, #20]
 80152f8:	1d7b      	adds	r3, r7, #5
 80152fa:	33ff      	adds	r3, #255	@ 0xff
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	b29c      	uxth	r4, r3
 8015300:	183b      	adds	r3, r7, r0
 8015302:	881a      	ldrh	r2, [r3, #0]
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	0023      	movs	r3, r4
 8015308:	f000 ffda 	bl	80162c0 <USB_WritePMA>
            ep->xfer_buff += len;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	695a      	ldr	r2, [r3, #20]
 8015310:	1d7b      	adds	r3, r7, #5
 8015312:	33ff      	adds	r3, #255	@ 0xff
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	18d2      	adds	r2, r2, r3
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	6a1a      	ldr	r2, [r3, #32]
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	691b      	ldr	r3, [r3, #16]
 8015324:	429a      	cmp	r2, r3
 8015326:	d908      	bls.n	801533a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	6a1a      	ldr	r2, [r3, #32]
 801532c:	1d7b      	adds	r3, r7, #5
 801532e:	33ff      	adds	r3, #255	@ 0xff
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	1ad2      	subs	r2, r2, r3
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	621a      	str	r2, [r3, #32]
 8015338:	e007      	b.n	801534a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	6a1b      	ldr	r3, [r3, #32]
 801533e:	1d7a      	adds	r2, r7, #5
 8015340:	32ff      	adds	r2, #255	@ 0xff
 8015342:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	2200      	movs	r2, #0
 8015348:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	643b      	str	r3, [r7, #64]	@ 0x40
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	785b      	ldrb	r3, [r3, #1]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d000      	beq.n	8015358 <USB_EPStartXfer+0x57c>
 8015356:	e070      	b.n	801543a <USB_EPStartXfer+0x65e>
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2250      	movs	r2, #80	@ 0x50
 8015360:	5a9b      	ldrh	r3, [r3, r2]
 8015362:	b29b      	uxth	r3, r3
 8015364:	001a      	movs	r2, r3
 8015366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015368:	189b      	adds	r3, r3, r2
 801536a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	00da      	lsls	r2, r3, #3
 8015372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015374:	18d3      	adds	r3, r2, r3
 8015376:	4a6d      	ldr	r2, [pc, #436]	@ (801552c <USB_EPStartXfer+0x750>)
 8015378:	4694      	mov	ip, r2
 801537a:	4463      	add	r3, ip
 801537c:	637b      	str	r3, [r7, #52]	@ 0x34
 801537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015380:	881b      	ldrh	r3, [r3, #0]
 8015382:	b29b      	uxth	r3, r3
 8015384:	059b      	lsls	r3, r3, #22
 8015386:	0d9b      	lsrs	r3, r3, #22
 8015388:	b29a      	uxth	r2, r3
 801538a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801538c:	801a      	strh	r2, [r3, #0]
 801538e:	1d7b      	adds	r3, r7, #5
 8015390:	33ff      	adds	r3, #255	@ 0xff
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	2b3e      	cmp	r3, #62	@ 0x3e
 8015396:	d922      	bls.n	80153de <USB_EPStartXfer+0x602>
 8015398:	1d7b      	adds	r3, r7, #5
 801539a:	33ff      	adds	r3, #255	@ 0xff
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	095b      	lsrs	r3, r3, #5
 80153a0:	21f4      	movs	r1, #244	@ 0xf4
 80153a2:	187a      	adds	r2, r7, r1
 80153a4:	6013      	str	r3, [r2, #0]
 80153a6:	1d7b      	adds	r3, r7, #5
 80153a8:	33ff      	adds	r3, #255	@ 0xff
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	221f      	movs	r2, #31
 80153ae:	4013      	ands	r3, r2
 80153b0:	d104      	bne.n	80153bc <USB_EPStartXfer+0x5e0>
 80153b2:	187b      	adds	r3, r7, r1
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	3b01      	subs	r3, #1
 80153b8:	187a      	adds	r2, r7, r1
 80153ba:	6013      	str	r3, [r2, #0]
 80153bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153be:	881b      	ldrh	r3, [r3, #0]
 80153c0:	b29a      	uxth	r2, r3
 80153c2:	23f4      	movs	r3, #244	@ 0xf4
 80153c4:	18fb      	adds	r3, r7, r3
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	b29b      	uxth	r3, r3
 80153ca:	029b      	lsls	r3, r3, #10
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	4313      	orrs	r3, r2
 80153d0:	b29b      	uxth	r3, r3
 80153d2:	4a55      	ldr	r2, [pc, #340]	@ (8015528 <USB_EPStartXfer+0x74c>)
 80153d4:	4313      	orrs	r3, r2
 80153d6:	b29a      	uxth	r2, r3
 80153d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153da:	801a      	strh	r2, [r3, #0]
 80153dc:	e048      	b.n	8015470 <USB_EPStartXfer+0x694>
 80153de:	1d7b      	adds	r3, r7, #5
 80153e0:	33ff      	adds	r3, #255	@ 0xff
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d108      	bne.n	80153fa <USB_EPStartXfer+0x61e>
 80153e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153ea:	881b      	ldrh	r3, [r3, #0]
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	4a4e      	ldr	r2, [pc, #312]	@ (8015528 <USB_EPStartXfer+0x74c>)
 80153f0:	4313      	orrs	r3, r2
 80153f2:	b29a      	uxth	r2, r3
 80153f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153f6:	801a      	strh	r2, [r3, #0]
 80153f8:	e03a      	b.n	8015470 <USB_EPStartXfer+0x694>
 80153fa:	1d7b      	adds	r3, r7, #5
 80153fc:	33ff      	adds	r3, #255	@ 0xff
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	085b      	lsrs	r3, r3, #1
 8015402:	21f4      	movs	r1, #244	@ 0xf4
 8015404:	187a      	adds	r2, r7, r1
 8015406:	6013      	str	r3, [r2, #0]
 8015408:	1d7b      	adds	r3, r7, #5
 801540a:	33ff      	adds	r3, #255	@ 0xff
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2201      	movs	r2, #1
 8015410:	4013      	ands	r3, r2
 8015412:	d004      	beq.n	801541e <USB_EPStartXfer+0x642>
 8015414:	187b      	adds	r3, r7, r1
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	3301      	adds	r3, #1
 801541a:	187a      	adds	r2, r7, r1
 801541c:	6013      	str	r3, [r2, #0]
 801541e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015420:	881b      	ldrh	r3, [r3, #0]
 8015422:	b29a      	uxth	r2, r3
 8015424:	23f4      	movs	r3, #244	@ 0xf4
 8015426:	18fb      	adds	r3, r7, r3
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	b29b      	uxth	r3, r3
 801542c:	029b      	lsls	r3, r3, #10
 801542e:	b29b      	uxth	r3, r3
 8015430:	4313      	orrs	r3, r2
 8015432:	b29a      	uxth	r2, r3
 8015434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015436:	801a      	strh	r2, [r3, #0]
 8015438:	e01a      	b.n	8015470 <USB_EPStartXfer+0x694>
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	785b      	ldrb	r3, [r3, #1]
 801543e:	2b01      	cmp	r3, #1
 8015440:	d116      	bne.n	8015470 <USB_EPStartXfer+0x694>
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	2250      	movs	r2, #80	@ 0x50
 8015446:	5a9b      	ldrh	r3, [r3, r2]
 8015448:	b29b      	uxth	r3, r3
 801544a:	001a      	movs	r2, r3
 801544c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801544e:	189b      	adds	r3, r3, r2
 8015450:	643b      	str	r3, [r7, #64]	@ 0x40
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	00da      	lsls	r2, r3, #3
 8015458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801545a:	18d3      	adds	r3, r2, r3
 801545c:	4a33      	ldr	r2, [pc, #204]	@ (801552c <USB_EPStartXfer+0x750>)
 801545e:	4694      	mov	ip, r2
 8015460:	4463      	add	r3, ip
 8015462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015464:	1d7b      	adds	r3, r7, #5
 8015466:	33ff      	adds	r3, #255	@ 0xff
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	b29a      	uxth	r2, r3
 801546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801546e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8015470:	2076      	movs	r0, #118	@ 0x76
 8015472:	183b      	adds	r3, r7, r0
 8015474:	683a      	ldr	r2, [r7, #0]
 8015476:	8952      	ldrh	r2, [r2, #10]
 8015478:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	6959      	ldr	r1, [r3, #20]
 801547e:	1d7b      	adds	r3, r7, #5
 8015480:	33ff      	adds	r3, #255	@ 0xff
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	b29c      	uxth	r4, r3
 8015486:	183b      	adds	r3, r7, r0
 8015488:	881a      	ldrh	r2, [r3, #0]
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	0023      	movs	r3, r4
 801548e:	f000 ff17 	bl	80162c0 <USB_WritePMA>
 8015492:	e1b6      	b.n	8015802 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	6a1b      	ldr	r3, [r3, #32]
 8015498:	1d7a      	adds	r2, r7, #5
 801549a:	32ff      	adds	r2, #255	@ 0xff
 801549c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	18d3      	adds	r3, r2, r3
 80154a8:	881b      	ldrh	r3, [r3, #0]
 80154aa:	b29a      	uxth	r2, r3
 80154ac:	2062      	movs	r0, #98	@ 0x62
 80154ae:	183b      	adds	r3, r7, r0
 80154b0:	491f      	ldr	r1, [pc, #124]	@ (8015530 <USB_EPStartXfer+0x754>)
 80154b2:	400a      	ands	r2, r1
 80154b4:	801a      	strh	r2, [r3, #0]
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	18d3      	adds	r3, r2, r3
 80154c0:	183a      	adds	r2, r7, r0
 80154c2:	8812      	ldrh	r2, [r2, #0]
 80154c4:	491b      	ldr	r1, [pc, #108]	@ (8015534 <USB_EPStartXfer+0x758>)
 80154c6:	430a      	orrs	r2, r1
 80154c8:	b292      	uxth	r2, r2
 80154ca:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2250      	movs	r2, #80	@ 0x50
 80154d4:	5a9b      	ldrh	r3, [r3, r2]
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	001a      	movs	r2, r3
 80154da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80154dc:	189b      	adds	r3, r3, r2
 80154de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	00da      	lsls	r2, r3, #3
 80154e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80154e8:	18d3      	adds	r3, r2, r3
 80154ea:	4a0e      	ldr	r2, [pc, #56]	@ (8015524 <USB_EPStartXfer+0x748>)
 80154ec:	4694      	mov	ip, r2
 80154ee:	4463      	add	r3, ip
 80154f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80154f2:	1d7b      	adds	r3, r7, #5
 80154f4:	33ff      	adds	r3, #255	@ 0xff
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80154fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80154fe:	2076      	movs	r0, #118	@ 0x76
 8015500:	183b      	adds	r3, r7, r0
 8015502:	683a      	ldr	r2, [r7, #0]
 8015504:	8912      	ldrh	r2, [r2, #8]
 8015506:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	6959      	ldr	r1, [r3, #20]
 801550c:	1d7b      	adds	r3, r7, #5
 801550e:	33ff      	adds	r3, #255	@ 0xff
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	b29c      	uxth	r4, r3
 8015514:	183b      	adds	r3, r7, r0
 8015516:	881a      	ldrh	r2, [r3, #0]
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	0023      	movs	r3, r4
 801551c:	f000 fed0 	bl	80162c0 <USB_WritePMA>
 8015520:	e16f      	b.n	8015802 <USB_EPStartXfer+0xa26>
 8015522:	46c0      	nop			@ (mov r8, r8)
 8015524:	00000402 	.word	0x00000402
 8015528:	ffff8000 	.word	0xffff8000
 801552c:	00000406 	.word	0x00000406
 8015530:	ffff8e8f 	.word	0xffff8e8f
 8015534:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	6a1a      	ldr	r2, [r3, #32]
 801553c:	1d7b      	adds	r3, r7, #5
 801553e:	33ff      	adds	r3, #255	@ 0xff
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	1ad2      	subs	r2, r2, r3
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8015548:	687a      	ldr	r2, [r7, #4]
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	781b      	ldrb	r3, [r3, #0]
 801554e:	009b      	lsls	r3, r3, #2
 8015550:	18d3      	adds	r3, r2, r3
 8015552:	881b      	ldrh	r3, [r3, #0]
 8015554:	b29b      	uxth	r3, r3
 8015556:	001a      	movs	r2, r3
 8015558:	2340      	movs	r3, #64	@ 0x40
 801555a:	4013      	ands	r3, r2
 801555c:	d100      	bne.n	8015560 <USB_EPStartXfer+0x784>
 801555e:	e0a4      	b.n	80156aa <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	673b      	str	r3, [r7, #112]	@ 0x70
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	785b      	ldrb	r3, [r3, #1]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d000      	beq.n	801556e <USB_EPStartXfer+0x792>
 801556c:	e070      	b.n	8015650 <USB_EPStartXfer+0x874>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	2250      	movs	r2, #80	@ 0x50
 8015576:	5a9b      	ldrh	r3, [r3, r2]
 8015578:	b29b      	uxth	r3, r3
 801557a:	001a      	movs	r2, r3
 801557c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801557e:	189b      	adds	r3, r3, r2
 8015580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	781b      	ldrb	r3, [r3, #0]
 8015586:	00da      	lsls	r2, r3, #3
 8015588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801558a:	18d3      	adds	r3, r2, r3
 801558c:	4abc      	ldr	r2, [pc, #752]	@ (8015880 <USB_EPStartXfer+0xaa4>)
 801558e:	4694      	mov	ip, r2
 8015590:	4463      	add	r3, ip
 8015592:	667b      	str	r3, [r7, #100]	@ 0x64
 8015594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015596:	881b      	ldrh	r3, [r3, #0]
 8015598:	b29b      	uxth	r3, r3
 801559a:	059b      	lsls	r3, r3, #22
 801559c:	0d9b      	lsrs	r3, r3, #22
 801559e:	b29a      	uxth	r2, r3
 80155a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155a2:	801a      	strh	r2, [r3, #0]
 80155a4:	1d7b      	adds	r3, r7, #5
 80155a6:	33ff      	adds	r3, #255	@ 0xff
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80155ac:	d922      	bls.n	80155f4 <USB_EPStartXfer+0x818>
 80155ae:	1d7b      	adds	r3, r7, #5
 80155b0:	33ff      	adds	r3, #255	@ 0xff
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	095b      	lsrs	r3, r3, #5
 80155b6:	21f0      	movs	r1, #240	@ 0xf0
 80155b8:	187a      	adds	r2, r7, r1
 80155ba:	6013      	str	r3, [r2, #0]
 80155bc:	1d7b      	adds	r3, r7, #5
 80155be:	33ff      	adds	r3, #255	@ 0xff
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	221f      	movs	r2, #31
 80155c4:	4013      	ands	r3, r2
 80155c6:	d104      	bne.n	80155d2 <USB_EPStartXfer+0x7f6>
 80155c8:	187b      	adds	r3, r7, r1
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	3b01      	subs	r3, #1
 80155ce:	187a      	adds	r2, r7, r1
 80155d0:	6013      	str	r3, [r2, #0]
 80155d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155d4:	881b      	ldrh	r3, [r3, #0]
 80155d6:	b29a      	uxth	r2, r3
 80155d8:	23f0      	movs	r3, #240	@ 0xf0
 80155da:	18fb      	adds	r3, r7, r3
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	b29b      	uxth	r3, r3
 80155e0:	029b      	lsls	r3, r3, #10
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	4313      	orrs	r3, r2
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	4aa6      	ldr	r2, [pc, #664]	@ (8015884 <USB_EPStartXfer+0xaa8>)
 80155ea:	4313      	orrs	r3, r2
 80155ec:	b29a      	uxth	r2, r3
 80155ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155f0:	801a      	strh	r2, [r3, #0]
 80155f2:	e048      	b.n	8015686 <USB_EPStartXfer+0x8aa>
 80155f4:	1d7b      	adds	r3, r7, #5
 80155f6:	33ff      	adds	r3, #255	@ 0xff
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d108      	bne.n	8015610 <USB_EPStartXfer+0x834>
 80155fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015600:	881b      	ldrh	r3, [r3, #0]
 8015602:	b29b      	uxth	r3, r3
 8015604:	4a9f      	ldr	r2, [pc, #636]	@ (8015884 <USB_EPStartXfer+0xaa8>)
 8015606:	4313      	orrs	r3, r2
 8015608:	b29a      	uxth	r2, r3
 801560a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801560c:	801a      	strh	r2, [r3, #0]
 801560e:	e03a      	b.n	8015686 <USB_EPStartXfer+0x8aa>
 8015610:	1d7b      	adds	r3, r7, #5
 8015612:	33ff      	adds	r3, #255	@ 0xff
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	085b      	lsrs	r3, r3, #1
 8015618:	21f0      	movs	r1, #240	@ 0xf0
 801561a:	187a      	adds	r2, r7, r1
 801561c:	6013      	str	r3, [r2, #0]
 801561e:	1d7b      	adds	r3, r7, #5
 8015620:	33ff      	adds	r3, #255	@ 0xff
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	2201      	movs	r2, #1
 8015626:	4013      	ands	r3, r2
 8015628:	d004      	beq.n	8015634 <USB_EPStartXfer+0x858>
 801562a:	187b      	adds	r3, r7, r1
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	3301      	adds	r3, #1
 8015630:	187a      	adds	r2, r7, r1
 8015632:	6013      	str	r3, [r2, #0]
 8015634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015636:	881b      	ldrh	r3, [r3, #0]
 8015638:	b29a      	uxth	r2, r3
 801563a:	23f0      	movs	r3, #240	@ 0xf0
 801563c:	18fb      	adds	r3, r7, r3
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	b29b      	uxth	r3, r3
 8015642:	029b      	lsls	r3, r3, #10
 8015644:	b29b      	uxth	r3, r3
 8015646:	4313      	orrs	r3, r2
 8015648:	b29a      	uxth	r2, r3
 801564a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801564c:	801a      	strh	r2, [r3, #0]
 801564e:	e01a      	b.n	8015686 <USB_EPStartXfer+0x8aa>
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	785b      	ldrb	r3, [r3, #1]
 8015654:	2b01      	cmp	r3, #1
 8015656:	d116      	bne.n	8015686 <USB_EPStartXfer+0x8aa>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2250      	movs	r2, #80	@ 0x50
 801565c:	5a9b      	ldrh	r3, [r3, r2]
 801565e:	b29b      	uxth	r3, r3
 8015660:	001a      	movs	r2, r3
 8015662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015664:	189b      	adds	r3, r3, r2
 8015666:	673b      	str	r3, [r7, #112]	@ 0x70
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	781b      	ldrb	r3, [r3, #0]
 801566c:	00da      	lsls	r2, r3, #3
 801566e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015670:	18d3      	adds	r3, r2, r3
 8015672:	4a83      	ldr	r2, [pc, #524]	@ (8015880 <USB_EPStartXfer+0xaa4>)
 8015674:	4694      	mov	ip, r2
 8015676:	4463      	add	r3, ip
 8015678:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801567a:	1d7b      	adds	r3, r7, #5
 801567c:	33ff      	adds	r3, #255	@ 0xff
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	b29a      	uxth	r2, r3
 8015682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015684:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8015686:	2076      	movs	r0, #118	@ 0x76
 8015688:	183b      	adds	r3, r7, r0
 801568a:	683a      	ldr	r2, [r7, #0]
 801568c:	8952      	ldrh	r2, [r2, #10]
 801568e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	6959      	ldr	r1, [r3, #20]
 8015694:	1d7b      	adds	r3, r7, #5
 8015696:	33ff      	adds	r3, #255	@ 0xff
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	b29c      	uxth	r4, r3
 801569c:	183b      	adds	r3, r7, r0
 801569e:	881a      	ldrh	r2, [r3, #0]
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	0023      	movs	r3, r4
 80156a4:	f000 fe0c 	bl	80162c0 <USB_WritePMA>
 80156a8:	e0ab      	b.n	8015802 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	785b      	ldrb	r3, [r3, #1]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d000      	beq.n	80156b4 <USB_EPStartXfer+0x8d8>
 80156b2:	e070      	b.n	8015796 <USB_EPStartXfer+0x9ba>
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2250      	movs	r2, #80	@ 0x50
 80156bc:	5a9b      	ldrh	r3, [r3, r2]
 80156be:	b29b      	uxth	r3, r3
 80156c0:	001a      	movs	r2, r3
 80156c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80156c4:	189b      	adds	r3, r3, r2
 80156c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	00da      	lsls	r2, r3, #3
 80156ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80156d0:	18d3      	adds	r3, r2, r3
 80156d2:	4a6d      	ldr	r2, [pc, #436]	@ (8015888 <USB_EPStartXfer+0xaac>)
 80156d4:	4694      	mov	ip, r2
 80156d6:	4463      	add	r3, ip
 80156d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80156da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80156dc:	881b      	ldrh	r3, [r3, #0]
 80156de:	b29b      	uxth	r3, r3
 80156e0:	059b      	lsls	r3, r3, #22
 80156e2:	0d9b      	lsrs	r3, r3, #22
 80156e4:	b29a      	uxth	r2, r3
 80156e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80156e8:	801a      	strh	r2, [r3, #0]
 80156ea:	1d7b      	adds	r3, r7, #5
 80156ec:	33ff      	adds	r3, #255	@ 0xff
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80156f2:	d922      	bls.n	801573a <USB_EPStartXfer+0x95e>
 80156f4:	1d7b      	adds	r3, r7, #5
 80156f6:	33ff      	adds	r3, #255	@ 0xff
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	095b      	lsrs	r3, r3, #5
 80156fc:	21ec      	movs	r1, #236	@ 0xec
 80156fe:	187a      	adds	r2, r7, r1
 8015700:	6013      	str	r3, [r2, #0]
 8015702:	1d7b      	adds	r3, r7, #5
 8015704:	33ff      	adds	r3, #255	@ 0xff
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	221f      	movs	r2, #31
 801570a:	4013      	ands	r3, r2
 801570c:	d104      	bne.n	8015718 <USB_EPStartXfer+0x93c>
 801570e:	187b      	adds	r3, r7, r1
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	3b01      	subs	r3, #1
 8015714:	187a      	adds	r2, r7, r1
 8015716:	6013      	str	r3, [r2, #0]
 8015718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801571a:	881b      	ldrh	r3, [r3, #0]
 801571c:	b29a      	uxth	r2, r3
 801571e:	23ec      	movs	r3, #236	@ 0xec
 8015720:	18fb      	adds	r3, r7, r3
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	b29b      	uxth	r3, r3
 8015726:	029b      	lsls	r3, r3, #10
 8015728:	b29b      	uxth	r3, r3
 801572a:	4313      	orrs	r3, r2
 801572c:	b29b      	uxth	r3, r3
 801572e:	4a55      	ldr	r2, [pc, #340]	@ (8015884 <USB_EPStartXfer+0xaa8>)
 8015730:	4313      	orrs	r3, r2
 8015732:	b29a      	uxth	r2, r3
 8015734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015736:	801a      	strh	r2, [r3, #0]
 8015738:	e052      	b.n	80157e0 <USB_EPStartXfer+0xa04>
 801573a:	1d7b      	adds	r3, r7, #5
 801573c:	33ff      	adds	r3, #255	@ 0xff
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d108      	bne.n	8015756 <USB_EPStartXfer+0x97a>
 8015744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015746:	881b      	ldrh	r3, [r3, #0]
 8015748:	b29b      	uxth	r3, r3
 801574a:	4a4e      	ldr	r2, [pc, #312]	@ (8015884 <USB_EPStartXfer+0xaa8>)
 801574c:	4313      	orrs	r3, r2
 801574e:	b29a      	uxth	r2, r3
 8015750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015752:	801a      	strh	r2, [r3, #0]
 8015754:	e044      	b.n	80157e0 <USB_EPStartXfer+0xa04>
 8015756:	1d7b      	adds	r3, r7, #5
 8015758:	33ff      	adds	r3, #255	@ 0xff
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	085b      	lsrs	r3, r3, #1
 801575e:	21ec      	movs	r1, #236	@ 0xec
 8015760:	187a      	adds	r2, r7, r1
 8015762:	6013      	str	r3, [r2, #0]
 8015764:	1d7b      	adds	r3, r7, #5
 8015766:	33ff      	adds	r3, #255	@ 0xff
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	2201      	movs	r2, #1
 801576c:	4013      	ands	r3, r2
 801576e:	d004      	beq.n	801577a <USB_EPStartXfer+0x99e>
 8015770:	187b      	adds	r3, r7, r1
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	3301      	adds	r3, #1
 8015776:	187a      	adds	r2, r7, r1
 8015778:	6013      	str	r3, [r2, #0]
 801577a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801577c:	881b      	ldrh	r3, [r3, #0]
 801577e:	b29a      	uxth	r2, r3
 8015780:	23ec      	movs	r3, #236	@ 0xec
 8015782:	18fb      	adds	r3, r7, r3
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	b29b      	uxth	r3, r3
 8015788:	029b      	lsls	r3, r3, #10
 801578a:	b29b      	uxth	r3, r3
 801578c:	4313      	orrs	r3, r2
 801578e:	b29a      	uxth	r2, r3
 8015790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015792:	801a      	strh	r2, [r3, #0]
 8015794:	e024      	b.n	80157e0 <USB_EPStartXfer+0xa04>
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	785b      	ldrb	r3, [r3, #1]
 801579a:	2b01      	cmp	r3, #1
 801579c:	d120      	bne.n	80157e0 <USB_EPStartXfer+0xa04>
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2184      	movs	r1, #132	@ 0x84
 80157a2:	187a      	adds	r2, r7, r1
 80157a4:	6013      	str	r3, [r2, #0]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2250      	movs	r2, #80	@ 0x50
 80157aa:	5a9b      	ldrh	r3, [r3, r2]
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	001a      	movs	r2, r3
 80157b0:	187b      	adds	r3, r7, r1
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	189b      	adds	r3, r3, r2
 80157b6:	187a      	adds	r2, r7, r1
 80157b8:	6013      	str	r3, [r2, #0]
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	00da      	lsls	r2, r3, #3
 80157c0:	187b      	adds	r3, r7, r1
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	18d3      	adds	r3, r2, r3
 80157c6:	4a30      	ldr	r2, [pc, #192]	@ (8015888 <USB_EPStartXfer+0xaac>)
 80157c8:	4694      	mov	ip, r2
 80157ca:	4463      	add	r3, ip
 80157cc:	2180      	movs	r1, #128	@ 0x80
 80157ce:	187a      	adds	r2, r7, r1
 80157d0:	6013      	str	r3, [r2, #0]
 80157d2:	1d7b      	adds	r3, r7, #5
 80157d4:	33ff      	adds	r3, #255	@ 0xff
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	b29a      	uxth	r2, r3
 80157da:	187b      	adds	r3, r7, r1
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80157e0:	2076      	movs	r0, #118	@ 0x76
 80157e2:	183b      	adds	r3, r7, r0
 80157e4:	683a      	ldr	r2, [r7, #0]
 80157e6:	8912      	ldrh	r2, [r2, #8]
 80157e8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	6959      	ldr	r1, [r3, #20]
 80157ee:	1d7b      	adds	r3, r7, #5
 80157f0:	33ff      	adds	r3, #255	@ 0xff
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	b29c      	uxth	r4, r3
 80157f6:	183b      	adds	r3, r7, r0
 80157f8:	881a      	ldrh	r2, [r3, #0]
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	0023      	movs	r3, r4
 80157fe:	f000 fd5f 	bl	80162c0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	18d3      	adds	r3, r2, r3
 801580c:	881b      	ldrh	r3, [r3, #0]
 801580e:	b29a      	uxth	r2, r3
 8015810:	200a      	movs	r0, #10
 8015812:	183b      	adds	r3, r7, r0
 8015814:	491d      	ldr	r1, [pc, #116]	@ (801588c <USB_EPStartXfer+0xab0>)
 8015816:	400a      	ands	r2, r1
 8015818:	801a      	strh	r2, [r3, #0]
 801581a:	183b      	adds	r3, r7, r0
 801581c:	183a      	adds	r2, r7, r0
 801581e:	8812      	ldrh	r2, [r2, #0]
 8015820:	2110      	movs	r1, #16
 8015822:	404a      	eors	r2, r1
 8015824:	801a      	strh	r2, [r3, #0]
 8015826:	183b      	adds	r3, r7, r0
 8015828:	183a      	adds	r2, r7, r0
 801582a:	8812      	ldrh	r2, [r2, #0]
 801582c:	2120      	movs	r1, #32
 801582e:	404a      	eors	r2, r1
 8015830:	801a      	strh	r2, [r3, #0]
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	009b      	lsls	r3, r3, #2
 801583a:	18d3      	adds	r3, r2, r3
 801583c:	183a      	adds	r2, r7, r0
 801583e:	8812      	ldrh	r2, [r2, #0]
 8015840:	4913      	ldr	r1, [pc, #76]	@ (8015890 <USB_EPStartXfer+0xab4>)
 8015842:	430a      	orrs	r2, r1
 8015844:	b292      	uxth	r2, r2
 8015846:	801a      	strh	r2, [r3, #0]
 8015848:	f000 fbf4 	bl	8016034 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	7b1b      	ldrb	r3, [r3, #12]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d000      	beq.n	8015856 <USB_EPStartXfer+0xa7a>
 8015854:	e0a9      	b.n	80159aa <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	699a      	ldr	r2, [r3, #24]
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	429a      	cmp	r2, r3
 8015860:	d918      	bls.n	8015894 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	691b      	ldr	r3, [r3, #16]
 8015866:	1d7a      	adds	r2, r7, #5
 8015868:	32ff      	adds	r2, #255	@ 0xff
 801586a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	699a      	ldr	r2, [r3, #24]
 8015870:	1d7b      	adds	r3, r7, #5
 8015872:	33ff      	adds	r3, #255	@ 0xff
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	1ad2      	subs	r2, r2, r3
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	619a      	str	r2, [r3, #24]
 801587c:	e012      	b.n	80158a4 <USB_EPStartXfer+0xac8>
 801587e:	46c0      	nop			@ (mov r8, r8)
 8015880:	00000406 	.word	0x00000406
 8015884:	ffff8000 	.word	0xffff8000
 8015888:	00000402 	.word	0x00000402
 801588c:	ffff8fbf 	.word	0xffff8fbf
 8015890:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	699b      	ldr	r3, [r3, #24]
 8015898:	1d7a      	adds	r2, r7, #5
 801589a:	32ff      	adds	r2, #255	@ 0xff
 801589c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	2200      	movs	r2, #0
 80158a2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2190      	movs	r1, #144	@ 0x90
 80158a8:	187a      	adds	r2, r7, r1
 80158aa:	6013      	str	r3, [r2, #0]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2250      	movs	r2, #80	@ 0x50
 80158b0:	5a9b      	ldrh	r3, [r3, r2]
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	001a      	movs	r2, r3
 80158b6:	187b      	adds	r3, r7, r1
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	189b      	adds	r3, r3, r2
 80158bc:	187a      	adds	r2, r7, r1
 80158be:	6013      	str	r3, [r2, #0]
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	00da      	lsls	r2, r3, #3
 80158c6:	187b      	adds	r3, r7, r1
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	18d3      	adds	r3, r2, r3
 80158cc:	4acf      	ldr	r2, [pc, #828]	@ (8015c0c <USB_EPStartXfer+0xe30>)
 80158ce:	4694      	mov	ip, r2
 80158d0:	4463      	add	r3, ip
 80158d2:	218c      	movs	r1, #140	@ 0x8c
 80158d4:	187a      	adds	r2, r7, r1
 80158d6:	6013      	str	r3, [r2, #0]
 80158d8:	187b      	adds	r3, r7, r1
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	881b      	ldrh	r3, [r3, #0]
 80158de:	b29b      	uxth	r3, r3
 80158e0:	059b      	lsls	r3, r3, #22
 80158e2:	0d9b      	lsrs	r3, r3, #22
 80158e4:	b29a      	uxth	r2, r3
 80158e6:	187b      	adds	r3, r7, r1
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	801a      	strh	r2, [r3, #0]
 80158ec:	1d7b      	adds	r3, r7, #5
 80158ee:	33ff      	adds	r3, #255	@ 0xff
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80158f4:	d925      	bls.n	8015942 <USB_EPStartXfer+0xb66>
 80158f6:	1d7b      	adds	r3, r7, #5
 80158f8:	33ff      	adds	r3, #255	@ 0xff
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	095b      	lsrs	r3, r3, #5
 80158fe:	21e8      	movs	r1, #232	@ 0xe8
 8015900:	187a      	adds	r2, r7, r1
 8015902:	6013      	str	r3, [r2, #0]
 8015904:	1d7b      	adds	r3, r7, #5
 8015906:	33ff      	adds	r3, #255	@ 0xff
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	221f      	movs	r2, #31
 801590c:	4013      	ands	r3, r2
 801590e:	d104      	bne.n	801591a <USB_EPStartXfer+0xb3e>
 8015910:	187b      	adds	r3, r7, r1
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	3b01      	subs	r3, #1
 8015916:	187a      	adds	r2, r7, r1
 8015918:	6013      	str	r3, [r2, #0]
 801591a:	218c      	movs	r1, #140	@ 0x8c
 801591c:	187b      	adds	r3, r7, r1
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	881b      	ldrh	r3, [r3, #0]
 8015922:	b29a      	uxth	r2, r3
 8015924:	23e8      	movs	r3, #232	@ 0xe8
 8015926:	18fb      	adds	r3, r7, r3
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	b29b      	uxth	r3, r3
 801592c:	029b      	lsls	r3, r3, #10
 801592e:	b29b      	uxth	r3, r3
 8015930:	4313      	orrs	r3, r2
 8015932:	b29b      	uxth	r3, r3
 8015934:	4ab6      	ldr	r2, [pc, #728]	@ (8015c10 <USB_EPStartXfer+0xe34>)
 8015936:	4313      	orrs	r3, r2
 8015938:	b29a      	uxth	r2, r3
 801593a:	187b      	adds	r3, r7, r1
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	801a      	strh	r2, [r3, #0]
 8015940:	e353      	b.n	8015fea <USB_EPStartXfer+0x120e>
 8015942:	1d7b      	adds	r3, r7, #5
 8015944:	33ff      	adds	r3, #255	@ 0xff
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d10b      	bne.n	8015964 <USB_EPStartXfer+0xb88>
 801594c:	218c      	movs	r1, #140	@ 0x8c
 801594e:	187b      	adds	r3, r7, r1
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	881b      	ldrh	r3, [r3, #0]
 8015954:	b29b      	uxth	r3, r3
 8015956:	4aae      	ldr	r2, [pc, #696]	@ (8015c10 <USB_EPStartXfer+0xe34>)
 8015958:	4313      	orrs	r3, r2
 801595a:	b29a      	uxth	r2, r3
 801595c:	187b      	adds	r3, r7, r1
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	801a      	strh	r2, [r3, #0]
 8015962:	e342      	b.n	8015fea <USB_EPStartXfer+0x120e>
 8015964:	1d7b      	adds	r3, r7, #5
 8015966:	33ff      	adds	r3, #255	@ 0xff
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	085b      	lsrs	r3, r3, #1
 801596c:	21e8      	movs	r1, #232	@ 0xe8
 801596e:	187a      	adds	r2, r7, r1
 8015970:	6013      	str	r3, [r2, #0]
 8015972:	1d7b      	adds	r3, r7, #5
 8015974:	33ff      	adds	r3, #255	@ 0xff
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	2201      	movs	r2, #1
 801597a:	4013      	ands	r3, r2
 801597c:	d004      	beq.n	8015988 <USB_EPStartXfer+0xbac>
 801597e:	187b      	adds	r3, r7, r1
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	3301      	adds	r3, #1
 8015984:	187a      	adds	r2, r7, r1
 8015986:	6013      	str	r3, [r2, #0]
 8015988:	218c      	movs	r1, #140	@ 0x8c
 801598a:	187b      	adds	r3, r7, r1
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	881b      	ldrh	r3, [r3, #0]
 8015990:	b29a      	uxth	r2, r3
 8015992:	23e8      	movs	r3, #232	@ 0xe8
 8015994:	18fb      	adds	r3, r7, r3
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	b29b      	uxth	r3, r3
 801599a:	029b      	lsls	r3, r3, #10
 801599c:	b29b      	uxth	r3, r3
 801599e:	4313      	orrs	r3, r2
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	187b      	adds	r3, r7, r1
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	801a      	strh	r2, [r3, #0]
 80159a8:	e31f      	b.n	8015fea <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	78db      	ldrb	r3, [r3, #3]
 80159ae:	2b02      	cmp	r3, #2
 80159b0:	d000      	beq.n	80159b4 <USB_EPStartXfer+0xbd8>
 80159b2:	e191      	b.n	8015cd8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	785b      	ldrb	r3, [r3, #1]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d000      	beq.n	80159be <USB_EPStartXfer+0xbe2>
 80159bc:	e07c      	b.n	8015ab8 <USB_EPStartXfer+0xcdc>
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	21ac      	movs	r1, #172	@ 0xac
 80159c2:	187a      	adds	r2, r7, r1
 80159c4:	6013      	str	r3, [r2, #0]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2250      	movs	r2, #80	@ 0x50
 80159ca:	5a9b      	ldrh	r3, [r3, r2]
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	001a      	movs	r2, r3
 80159d0:	187b      	adds	r3, r7, r1
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	189b      	adds	r3, r3, r2
 80159d6:	187a      	adds	r2, r7, r1
 80159d8:	6013      	str	r3, [r2, #0]
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	00da      	lsls	r2, r3, #3
 80159e0:	187b      	adds	r3, r7, r1
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	18d3      	adds	r3, r2, r3
 80159e6:	4a8b      	ldr	r2, [pc, #556]	@ (8015c14 <USB_EPStartXfer+0xe38>)
 80159e8:	4694      	mov	ip, r2
 80159ea:	4463      	add	r3, ip
 80159ec:	21a8      	movs	r1, #168	@ 0xa8
 80159ee:	187a      	adds	r2, r7, r1
 80159f0:	6013      	str	r3, [r2, #0]
 80159f2:	187b      	adds	r3, r7, r1
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	881b      	ldrh	r3, [r3, #0]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	059b      	lsls	r3, r3, #22
 80159fc:	0d9b      	lsrs	r3, r3, #22
 80159fe:	b29a      	uxth	r2, r3
 8015a00:	187b      	adds	r3, r7, r1
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	801a      	strh	r2, [r3, #0]
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	691b      	ldr	r3, [r3, #16]
 8015a0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8015a0c:	d923      	bls.n	8015a56 <USB_EPStartXfer+0xc7a>
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	691b      	ldr	r3, [r3, #16]
 8015a12:	095b      	lsrs	r3, r3, #5
 8015a14:	21e4      	movs	r1, #228	@ 0xe4
 8015a16:	187a      	adds	r2, r7, r1
 8015a18:	6013      	str	r3, [r2, #0]
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	691b      	ldr	r3, [r3, #16]
 8015a1e:	221f      	movs	r2, #31
 8015a20:	4013      	ands	r3, r2
 8015a22:	d104      	bne.n	8015a2e <USB_EPStartXfer+0xc52>
 8015a24:	187b      	adds	r3, r7, r1
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	3b01      	subs	r3, #1
 8015a2a:	187a      	adds	r2, r7, r1
 8015a2c:	6013      	str	r3, [r2, #0]
 8015a2e:	21a8      	movs	r1, #168	@ 0xa8
 8015a30:	187b      	adds	r3, r7, r1
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	881b      	ldrh	r3, [r3, #0]
 8015a36:	b29a      	uxth	r2, r3
 8015a38:	23e4      	movs	r3, #228	@ 0xe4
 8015a3a:	18fb      	adds	r3, r7, r3
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	029b      	lsls	r3, r3, #10
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	4313      	orrs	r3, r2
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	4a71      	ldr	r2, [pc, #452]	@ (8015c10 <USB_EPStartXfer+0xe34>)
 8015a4a:	4313      	orrs	r3, r2
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	187b      	adds	r3, r7, r1
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	801a      	strh	r2, [r3, #0]
 8015a54:	e054      	b.n	8015b00 <USB_EPStartXfer+0xd24>
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	691b      	ldr	r3, [r3, #16]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d10b      	bne.n	8015a76 <USB_EPStartXfer+0xc9a>
 8015a5e:	21a8      	movs	r1, #168	@ 0xa8
 8015a60:	187b      	adds	r3, r7, r1
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	881b      	ldrh	r3, [r3, #0]
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	4a69      	ldr	r2, [pc, #420]	@ (8015c10 <USB_EPStartXfer+0xe34>)
 8015a6a:	4313      	orrs	r3, r2
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	187b      	adds	r3, r7, r1
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	801a      	strh	r2, [r3, #0]
 8015a74:	e044      	b.n	8015b00 <USB_EPStartXfer+0xd24>
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	691b      	ldr	r3, [r3, #16]
 8015a7a:	085b      	lsrs	r3, r3, #1
 8015a7c:	21e4      	movs	r1, #228	@ 0xe4
 8015a7e:	187a      	adds	r2, r7, r1
 8015a80:	6013      	str	r3, [r2, #0]
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	691b      	ldr	r3, [r3, #16]
 8015a86:	2201      	movs	r2, #1
 8015a88:	4013      	ands	r3, r2
 8015a8a:	d004      	beq.n	8015a96 <USB_EPStartXfer+0xcba>
 8015a8c:	187b      	adds	r3, r7, r1
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	3301      	adds	r3, #1
 8015a92:	187a      	adds	r2, r7, r1
 8015a94:	6013      	str	r3, [r2, #0]
 8015a96:	21a8      	movs	r1, #168	@ 0xa8
 8015a98:	187b      	adds	r3, r7, r1
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	881b      	ldrh	r3, [r3, #0]
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	23e4      	movs	r3, #228	@ 0xe4
 8015aa2:	18fb      	adds	r3, r7, r3
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	029b      	lsls	r3, r3, #10
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	4313      	orrs	r3, r2
 8015aae:	b29a      	uxth	r2, r3
 8015ab0:	187b      	adds	r3, r7, r1
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	801a      	strh	r2, [r3, #0]
 8015ab6:	e023      	b.n	8015b00 <USB_EPStartXfer+0xd24>
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	785b      	ldrb	r3, [r3, #1]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d11f      	bne.n	8015b00 <USB_EPStartXfer+0xd24>
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	21b4      	movs	r1, #180	@ 0xb4
 8015ac4:	187a      	adds	r2, r7, r1
 8015ac6:	6013      	str	r3, [r2, #0]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2250      	movs	r2, #80	@ 0x50
 8015acc:	5a9b      	ldrh	r3, [r3, r2]
 8015ace:	b29b      	uxth	r3, r3
 8015ad0:	001a      	movs	r2, r3
 8015ad2:	187b      	adds	r3, r7, r1
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	189b      	adds	r3, r3, r2
 8015ad8:	187a      	adds	r2, r7, r1
 8015ada:	6013      	str	r3, [r2, #0]
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	00da      	lsls	r2, r3, #3
 8015ae2:	187b      	adds	r3, r7, r1
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	18d3      	adds	r3, r2, r3
 8015ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8015c14 <USB_EPStartXfer+0xe38>)
 8015aea:	4694      	mov	ip, r2
 8015aec:	4463      	add	r3, ip
 8015aee:	21b0      	movs	r1, #176	@ 0xb0
 8015af0:	187a      	adds	r2, r7, r1
 8015af2:	6013      	str	r3, [r2, #0]
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	691b      	ldr	r3, [r3, #16]
 8015af8:	b29a      	uxth	r2, r3
 8015afa:	187b      	adds	r3, r7, r1
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	801a      	strh	r2, [r3, #0]
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	22a4      	movs	r2, #164	@ 0xa4
 8015b04:	18ba      	adds	r2, r7, r2
 8015b06:	6013      	str	r3, [r2, #0]
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	785b      	ldrb	r3, [r3, #1]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d000      	beq.n	8015b12 <USB_EPStartXfer+0xd36>
 8015b10:	e082      	b.n	8015c18 <USB_EPStartXfer+0xe3c>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	219c      	movs	r1, #156	@ 0x9c
 8015b16:	187a      	adds	r2, r7, r1
 8015b18:	6013      	str	r3, [r2, #0]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	2250      	movs	r2, #80	@ 0x50
 8015b1e:	5a9b      	ldrh	r3, [r3, r2]
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	001a      	movs	r2, r3
 8015b24:	187b      	adds	r3, r7, r1
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	189b      	adds	r3, r3, r2
 8015b2a:	187a      	adds	r2, r7, r1
 8015b2c:	6013      	str	r3, [r2, #0]
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	00da      	lsls	r2, r3, #3
 8015b34:	187b      	adds	r3, r7, r1
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	18d3      	adds	r3, r2, r3
 8015b3a:	4a34      	ldr	r2, [pc, #208]	@ (8015c0c <USB_EPStartXfer+0xe30>)
 8015b3c:	4694      	mov	ip, r2
 8015b3e:	4463      	add	r3, ip
 8015b40:	2198      	movs	r1, #152	@ 0x98
 8015b42:	187a      	adds	r2, r7, r1
 8015b44:	6013      	str	r3, [r2, #0]
 8015b46:	187b      	adds	r3, r7, r1
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	881b      	ldrh	r3, [r3, #0]
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	059b      	lsls	r3, r3, #22
 8015b50:	0d9b      	lsrs	r3, r3, #22
 8015b52:	b29a      	uxth	r2, r3
 8015b54:	187b      	adds	r3, r7, r1
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	801a      	strh	r2, [r3, #0]
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	691b      	ldr	r3, [r3, #16]
 8015b5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8015b60:	d923      	bls.n	8015baa <USB_EPStartXfer+0xdce>
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	691b      	ldr	r3, [r3, #16]
 8015b66:	095b      	lsrs	r3, r3, #5
 8015b68:	21e0      	movs	r1, #224	@ 0xe0
 8015b6a:	187a      	adds	r2, r7, r1
 8015b6c:	6013      	str	r3, [r2, #0]
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	691b      	ldr	r3, [r3, #16]
 8015b72:	221f      	movs	r2, #31
 8015b74:	4013      	ands	r3, r2
 8015b76:	d104      	bne.n	8015b82 <USB_EPStartXfer+0xda6>
 8015b78:	187b      	adds	r3, r7, r1
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	3b01      	subs	r3, #1
 8015b7e:	187a      	adds	r2, r7, r1
 8015b80:	6013      	str	r3, [r2, #0]
 8015b82:	2198      	movs	r1, #152	@ 0x98
 8015b84:	187b      	adds	r3, r7, r1
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	881b      	ldrh	r3, [r3, #0]
 8015b8a:	b29a      	uxth	r2, r3
 8015b8c:	23e0      	movs	r3, #224	@ 0xe0
 8015b8e:	18fb      	adds	r3, r7, r3
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	029b      	lsls	r3, r3, #10
 8015b96:	b29b      	uxth	r3, r3
 8015b98:	4313      	orrs	r3, r2
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8015c10 <USB_EPStartXfer+0xe34>)
 8015b9e:	4313      	orrs	r3, r2
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	187b      	adds	r3, r7, r1
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	801a      	strh	r2, [r3, #0]
 8015ba8:	e057      	b.n	8015c5a <USB_EPStartXfer+0xe7e>
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	691b      	ldr	r3, [r3, #16]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d10b      	bne.n	8015bca <USB_EPStartXfer+0xdee>
 8015bb2:	2198      	movs	r1, #152	@ 0x98
 8015bb4:	187b      	adds	r3, r7, r1
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	881b      	ldrh	r3, [r3, #0]
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	4a14      	ldr	r2, [pc, #80]	@ (8015c10 <USB_EPStartXfer+0xe34>)
 8015bbe:	4313      	orrs	r3, r2
 8015bc0:	b29a      	uxth	r2, r3
 8015bc2:	187b      	adds	r3, r7, r1
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	801a      	strh	r2, [r3, #0]
 8015bc8:	e047      	b.n	8015c5a <USB_EPStartXfer+0xe7e>
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	691b      	ldr	r3, [r3, #16]
 8015bce:	085b      	lsrs	r3, r3, #1
 8015bd0:	21e0      	movs	r1, #224	@ 0xe0
 8015bd2:	187a      	adds	r2, r7, r1
 8015bd4:	6013      	str	r3, [r2, #0]
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	691b      	ldr	r3, [r3, #16]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	4013      	ands	r3, r2
 8015bde:	d004      	beq.n	8015bea <USB_EPStartXfer+0xe0e>
 8015be0:	187b      	adds	r3, r7, r1
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	3301      	adds	r3, #1
 8015be6:	187a      	adds	r2, r7, r1
 8015be8:	6013      	str	r3, [r2, #0]
 8015bea:	2198      	movs	r1, #152	@ 0x98
 8015bec:	187b      	adds	r3, r7, r1
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	881b      	ldrh	r3, [r3, #0]
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	23e0      	movs	r3, #224	@ 0xe0
 8015bf6:	18fb      	adds	r3, r7, r3
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	b29b      	uxth	r3, r3
 8015bfc:	029b      	lsls	r3, r3, #10
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	4313      	orrs	r3, r2
 8015c02:	b29a      	uxth	r2, r3
 8015c04:	187b      	adds	r3, r7, r1
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	801a      	strh	r2, [r3, #0]
 8015c0a:	e026      	b.n	8015c5a <USB_EPStartXfer+0xe7e>
 8015c0c:	00000406 	.word	0x00000406
 8015c10:	ffff8000 	.word	0xffff8000
 8015c14:	00000402 	.word	0x00000402
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	785b      	ldrb	r3, [r3, #1]
 8015c1c:	2b01      	cmp	r3, #1
 8015c1e:	d11c      	bne.n	8015c5a <USB_EPStartXfer+0xe7e>
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2250      	movs	r2, #80	@ 0x50
 8015c24:	5a9b      	ldrh	r3, [r3, r2]
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	001a      	movs	r2, r3
 8015c2a:	21a4      	movs	r1, #164	@ 0xa4
 8015c2c:	187b      	adds	r3, r7, r1
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	189b      	adds	r3, r3, r2
 8015c32:	187a      	adds	r2, r7, r1
 8015c34:	6013      	str	r3, [r2, #0]
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	781b      	ldrb	r3, [r3, #0]
 8015c3a:	00da      	lsls	r2, r3, #3
 8015c3c:	187b      	adds	r3, r7, r1
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	18d3      	adds	r3, r2, r3
 8015c42:	4ad2      	ldr	r2, [pc, #840]	@ (8015f8c <USB_EPStartXfer+0x11b0>)
 8015c44:	4694      	mov	ip, r2
 8015c46:	4463      	add	r3, ip
 8015c48:	21a0      	movs	r1, #160	@ 0xa0
 8015c4a:	187a      	adds	r2, r7, r1
 8015c4c:	6013      	str	r3, [r2, #0]
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	691b      	ldr	r3, [r3, #16]
 8015c52:	b29a      	uxth	r2, r3
 8015c54:	187b      	adds	r3, r7, r1
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	69db      	ldr	r3, [r3, #28]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d100      	bne.n	8015c64 <USB_EPStartXfer+0xe88>
 8015c62:	e1c2      	b.n	8015fea <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	781b      	ldrb	r3, [r3, #0]
 8015c6a:	009b      	lsls	r3, r3, #2
 8015c6c:	18d2      	adds	r2, r2, r3
 8015c6e:	2196      	movs	r1, #150	@ 0x96
 8015c70:	187b      	adds	r3, r7, r1
 8015c72:	8812      	ldrh	r2, [r2, #0]
 8015c74:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8015c76:	187b      	adds	r3, r7, r1
 8015c78:	881a      	ldrh	r2, [r3, #0]
 8015c7a:	2380      	movs	r3, #128	@ 0x80
 8015c7c:	01db      	lsls	r3, r3, #7
 8015c7e:	4013      	ands	r3, r2
 8015c80:	d004      	beq.n	8015c8c <USB_EPStartXfer+0xeb0>
 8015c82:	187b      	adds	r3, r7, r1
 8015c84:	881b      	ldrh	r3, [r3, #0]
 8015c86:	2240      	movs	r2, #64	@ 0x40
 8015c88:	4013      	ands	r3, r2
 8015c8a:	d10d      	bne.n	8015ca8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015c8c:	2196      	movs	r1, #150	@ 0x96
 8015c8e:	187b      	adds	r3, r7, r1
 8015c90:	881a      	ldrh	r2, [r3, #0]
 8015c92:	2380      	movs	r3, #128	@ 0x80
 8015c94:	01db      	lsls	r3, r3, #7
 8015c96:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8015c98:	d000      	beq.n	8015c9c <USB_EPStartXfer+0xec0>
 8015c9a:	e1a6      	b.n	8015fea <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015c9c:	187b      	adds	r3, r7, r1
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	2240      	movs	r2, #64	@ 0x40
 8015ca2:	4013      	ands	r3, r2
 8015ca4:	d000      	beq.n	8015ca8 <USB_EPStartXfer+0xecc>
 8015ca6:	e1a0      	b.n	8015fea <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	009b      	lsls	r3, r3, #2
 8015cb0:	18d3      	adds	r3, r2, r3
 8015cb2:	881b      	ldrh	r3, [r3, #0]
 8015cb4:	b29a      	uxth	r2, r3
 8015cb6:	2094      	movs	r0, #148	@ 0x94
 8015cb8:	183b      	adds	r3, r7, r0
 8015cba:	49b5      	ldr	r1, [pc, #724]	@ (8015f90 <USB_EPStartXfer+0x11b4>)
 8015cbc:	400a      	ands	r2, r1
 8015cbe:	801a      	strh	r2, [r3, #0]
 8015cc0:	687a      	ldr	r2, [r7, #4]
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	18d3      	adds	r3, r2, r3
 8015cca:	183a      	adds	r2, r7, r0
 8015ccc:	8812      	ldrh	r2, [r2, #0]
 8015cce:	49b1      	ldr	r1, [pc, #708]	@ (8015f94 <USB_EPStartXfer+0x11b8>)
 8015cd0:	430a      	orrs	r2, r1
 8015cd2:	b292      	uxth	r2, r2
 8015cd4:	801a      	strh	r2, [r3, #0]
 8015cd6:	e188      	b.n	8015fea <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	78db      	ldrb	r3, [r3, #3]
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d000      	beq.n	8015ce2 <USB_EPStartXfer+0xf06>
 8015ce0:	e181      	b.n	8015fe6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	699a      	ldr	r2, [r3, #24]
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	691b      	ldr	r3, [r3, #16]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d90d      	bls.n	8015d0a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	691b      	ldr	r3, [r3, #16]
 8015cf2:	1d7a      	adds	r2, r7, #5
 8015cf4:	32ff      	adds	r2, #255	@ 0xff
 8015cf6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	699a      	ldr	r2, [r3, #24]
 8015cfc:	1d7b      	adds	r3, r7, #5
 8015cfe:	33ff      	adds	r3, #255	@ 0xff
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	1ad2      	subs	r2, r2, r3
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	619a      	str	r2, [r3, #24]
 8015d08:	e007      	b.n	8015d1a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	699b      	ldr	r3, [r3, #24]
 8015d0e:	1d7a      	adds	r2, r7, #5
 8015d10:	32ff      	adds	r2, #255	@ 0xff
 8015d12:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	2200      	movs	r2, #0
 8015d18:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	785b      	ldrb	r3, [r3, #1]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d000      	beq.n	8015d24 <USB_EPStartXfer+0xf48>
 8015d22:	e082      	b.n	8015e2a <USB_EPStartXfer+0x104e>
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	21cc      	movs	r1, #204	@ 0xcc
 8015d28:	187a      	adds	r2, r7, r1
 8015d2a:	6013      	str	r3, [r2, #0]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2250      	movs	r2, #80	@ 0x50
 8015d30:	5a9b      	ldrh	r3, [r3, r2]
 8015d32:	b29b      	uxth	r3, r3
 8015d34:	001a      	movs	r2, r3
 8015d36:	187b      	adds	r3, r7, r1
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	189b      	adds	r3, r3, r2
 8015d3c:	187a      	adds	r2, r7, r1
 8015d3e:	6013      	str	r3, [r2, #0]
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	00da      	lsls	r2, r3, #3
 8015d46:	187b      	adds	r3, r7, r1
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	18d3      	adds	r3, r2, r3
 8015d4c:	4a92      	ldr	r2, [pc, #584]	@ (8015f98 <USB_EPStartXfer+0x11bc>)
 8015d4e:	4694      	mov	ip, r2
 8015d50:	4463      	add	r3, ip
 8015d52:	21c8      	movs	r1, #200	@ 0xc8
 8015d54:	187a      	adds	r2, r7, r1
 8015d56:	6013      	str	r3, [r2, #0]
 8015d58:	187b      	adds	r3, r7, r1
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	881b      	ldrh	r3, [r3, #0]
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	059b      	lsls	r3, r3, #22
 8015d62:	0d9b      	lsrs	r3, r3, #22
 8015d64:	b29a      	uxth	r2, r3
 8015d66:	187b      	adds	r3, r7, r1
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	801a      	strh	r2, [r3, #0]
 8015d6c:	1d7b      	adds	r3, r7, #5
 8015d6e:	33ff      	adds	r3, #255	@ 0xff
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	2b3e      	cmp	r3, #62	@ 0x3e
 8015d74:	d925      	bls.n	8015dc2 <USB_EPStartXfer+0xfe6>
 8015d76:	1d7b      	adds	r3, r7, #5
 8015d78:	33ff      	adds	r3, #255	@ 0xff
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	095b      	lsrs	r3, r3, #5
 8015d7e:	21dc      	movs	r1, #220	@ 0xdc
 8015d80:	187a      	adds	r2, r7, r1
 8015d82:	6013      	str	r3, [r2, #0]
 8015d84:	1d7b      	adds	r3, r7, #5
 8015d86:	33ff      	adds	r3, #255	@ 0xff
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	221f      	movs	r2, #31
 8015d8c:	4013      	ands	r3, r2
 8015d8e:	d104      	bne.n	8015d9a <USB_EPStartXfer+0xfbe>
 8015d90:	187b      	adds	r3, r7, r1
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	3b01      	subs	r3, #1
 8015d96:	187a      	adds	r2, r7, r1
 8015d98:	6013      	str	r3, [r2, #0]
 8015d9a:	21c8      	movs	r1, #200	@ 0xc8
 8015d9c:	187b      	adds	r3, r7, r1
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	881b      	ldrh	r3, [r3, #0]
 8015da2:	b29a      	uxth	r2, r3
 8015da4:	23dc      	movs	r3, #220	@ 0xdc
 8015da6:	18fb      	adds	r3, r7, r3
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	029b      	lsls	r3, r3, #10
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	4313      	orrs	r3, r2
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	4a79      	ldr	r2, [pc, #484]	@ (8015f9c <USB_EPStartXfer+0x11c0>)
 8015db6:	4313      	orrs	r3, r2
 8015db8:	b29a      	uxth	r2, r3
 8015dba:	187b      	adds	r3, r7, r1
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	801a      	strh	r2, [r3, #0]
 8015dc0:	e058      	b.n	8015e74 <USB_EPStartXfer+0x1098>
 8015dc2:	1d7b      	adds	r3, r7, #5
 8015dc4:	33ff      	adds	r3, #255	@ 0xff
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d10b      	bne.n	8015de4 <USB_EPStartXfer+0x1008>
 8015dcc:	21c8      	movs	r1, #200	@ 0xc8
 8015dce:	187b      	adds	r3, r7, r1
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	881b      	ldrh	r3, [r3, #0]
 8015dd4:	b29b      	uxth	r3, r3
 8015dd6:	4a71      	ldr	r2, [pc, #452]	@ (8015f9c <USB_EPStartXfer+0x11c0>)
 8015dd8:	4313      	orrs	r3, r2
 8015dda:	b29a      	uxth	r2, r3
 8015ddc:	187b      	adds	r3, r7, r1
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	801a      	strh	r2, [r3, #0]
 8015de2:	e047      	b.n	8015e74 <USB_EPStartXfer+0x1098>
 8015de4:	1d7b      	adds	r3, r7, #5
 8015de6:	33ff      	adds	r3, #255	@ 0xff
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	085b      	lsrs	r3, r3, #1
 8015dec:	21dc      	movs	r1, #220	@ 0xdc
 8015dee:	187a      	adds	r2, r7, r1
 8015df0:	6013      	str	r3, [r2, #0]
 8015df2:	1d7b      	adds	r3, r7, #5
 8015df4:	33ff      	adds	r3, #255	@ 0xff
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	2201      	movs	r2, #1
 8015dfa:	4013      	ands	r3, r2
 8015dfc:	d004      	beq.n	8015e08 <USB_EPStartXfer+0x102c>
 8015dfe:	187b      	adds	r3, r7, r1
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	3301      	adds	r3, #1
 8015e04:	187a      	adds	r2, r7, r1
 8015e06:	6013      	str	r3, [r2, #0]
 8015e08:	21c8      	movs	r1, #200	@ 0xc8
 8015e0a:	187b      	adds	r3, r7, r1
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	881b      	ldrh	r3, [r3, #0]
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	23dc      	movs	r3, #220	@ 0xdc
 8015e14:	18fb      	adds	r3, r7, r3
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	029b      	lsls	r3, r3, #10
 8015e1c:	b29b      	uxth	r3, r3
 8015e1e:	4313      	orrs	r3, r2
 8015e20:	b29a      	uxth	r2, r3
 8015e22:	187b      	adds	r3, r7, r1
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	801a      	strh	r2, [r3, #0]
 8015e28:	e024      	b.n	8015e74 <USB_EPStartXfer+0x1098>
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	785b      	ldrb	r3, [r3, #1]
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	d120      	bne.n	8015e74 <USB_EPStartXfer+0x1098>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	21d4      	movs	r1, #212	@ 0xd4
 8015e36:	187a      	adds	r2, r7, r1
 8015e38:	6013      	str	r3, [r2, #0]
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2250      	movs	r2, #80	@ 0x50
 8015e3e:	5a9b      	ldrh	r3, [r3, r2]
 8015e40:	b29b      	uxth	r3, r3
 8015e42:	001a      	movs	r2, r3
 8015e44:	187b      	adds	r3, r7, r1
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	189b      	adds	r3, r3, r2
 8015e4a:	187a      	adds	r2, r7, r1
 8015e4c:	6013      	str	r3, [r2, #0]
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	00da      	lsls	r2, r3, #3
 8015e54:	187b      	adds	r3, r7, r1
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	18d3      	adds	r3, r2, r3
 8015e5a:	4a4f      	ldr	r2, [pc, #316]	@ (8015f98 <USB_EPStartXfer+0x11bc>)
 8015e5c:	4694      	mov	ip, r2
 8015e5e:	4463      	add	r3, ip
 8015e60:	21d0      	movs	r1, #208	@ 0xd0
 8015e62:	187a      	adds	r2, r7, r1
 8015e64:	6013      	str	r3, [r2, #0]
 8015e66:	1d7b      	adds	r3, r7, #5
 8015e68:	33ff      	adds	r3, #255	@ 0xff
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	b29a      	uxth	r2, r3
 8015e6e:	187b      	adds	r3, r7, r1
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	801a      	strh	r2, [r3, #0]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	22c4      	movs	r2, #196	@ 0xc4
 8015e78:	18ba      	adds	r2, r7, r2
 8015e7a:	6013      	str	r3, [r2, #0]
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	785b      	ldrb	r3, [r3, #1]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d000      	beq.n	8015e86 <USB_EPStartXfer+0x10aa>
 8015e84:	e08c      	b.n	8015fa0 <USB_EPStartXfer+0x11c4>
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	21bc      	movs	r1, #188	@ 0xbc
 8015e8a:	187a      	adds	r2, r7, r1
 8015e8c:	6013      	str	r3, [r2, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2250      	movs	r2, #80	@ 0x50
 8015e92:	5a9b      	ldrh	r3, [r3, r2]
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	001a      	movs	r2, r3
 8015e98:	187b      	adds	r3, r7, r1
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	189b      	adds	r3, r3, r2
 8015e9e:	187a      	adds	r2, r7, r1
 8015ea0:	6013      	str	r3, [r2, #0]
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	00da      	lsls	r2, r3, #3
 8015ea8:	187b      	adds	r3, r7, r1
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	18d3      	adds	r3, r2, r3
 8015eae:	4a37      	ldr	r2, [pc, #220]	@ (8015f8c <USB_EPStartXfer+0x11b0>)
 8015eb0:	4694      	mov	ip, r2
 8015eb2:	4463      	add	r3, ip
 8015eb4:	21b8      	movs	r1, #184	@ 0xb8
 8015eb6:	187a      	adds	r2, r7, r1
 8015eb8:	6013      	str	r3, [r2, #0]
 8015eba:	187b      	adds	r3, r7, r1
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	881b      	ldrh	r3, [r3, #0]
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	059b      	lsls	r3, r3, #22
 8015ec4:	0d9b      	lsrs	r3, r3, #22
 8015ec6:	b29a      	uxth	r2, r3
 8015ec8:	187b      	adds	r3, r7, r1
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	801a      	strh	r2, [r3, #0]
 8015ece:	1d7b      	adds	r3, r7, #5
 8015ed0:	33ff      	adds	r3, #255	@ 0xff
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	2b3e      	cmp	r3, #62	@ 0x3e
 8015ed6:	d925      	bls.n	8015f24 <USB_EPStartXfer+0x1148>
 8015ed8:	1d7b      	adds	r3, r7, #5
 8015eda:	33ff      	adds	r3, #255	@ 0xff
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	095b      	lsrs	r3, r3, #5
 8015ee0:	21d8      	movs	r1, #216	@ 0xd8
 8015ee2:	187a      	adds	r2, r7, r1
 8015ee4:	6013      	str	r3, [r2, #0]
 8015ee6:	1d7b      	adds	r3, r7, #5
 8015ee8:	33ff      	adds	r3, #255	@ 0xff
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	221f      	movs	r2, #31
 8015eee:	4013      	ands	r3, r2
 8015ef0:	d104      	bne.n	8015efc <USB_EPStartXfer+0x1120>
 8015ef2:	187b      	adds	r3, r7, r1
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	3b01      	subs	r3, #1
 8015ef8:	187a      	adds	r2, r7, r1
 8015efa:	6013      	str	r3, [r2, #0]
 8015efc:	21b8      	movs	r1, #184	@ 0xb8
 8015efe:	187b      	adds	r3, r7, r1
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	881b      	ldrh	r3, [r3, #0]
 8015f04:	b29a      	uxth	r2, r3
 8015f06:	23d8      	movs	r3, #216	@ 0xd8
 8015f08:	18fb      	adds	r3, r7, r3
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	029b      	lsls	r3, r3, #10
 8015f10:	b29b      	uxth	r3, r3
 8015f12:	4313      	orrs	r3, r2
 8015f14:	b29b      	uxth	r3, r3
 8015f16:	4a21      	ldr	r2, [pc, #132]	@ (8015f9c <USB_EPStartXfer+0x11c0>)
 8015f18:	4313      	orrs	r3, r2
 8015f1a:	b29a      	uxth	r2, r3
 8015f1c:	187b      	adds	r3, r7, r1
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	801a      	strh	r2, [r3, #0]
 8015f22:	e062      	b.n	8015fea <USB_EPStartXfer+0x120e>
 8015f24:	1d7b      	adds	r3, r7, #5
 8015f26:	33ff      	adds	r3, #255	@ 0xff
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d10b      	bne.n	8015f46 <USB_EPStartXfer+0x116a>
 8015f2e:	21b8      	movs	r1, #184	@ 0xb8
 8015f30:	187b      	adds	r3, r7, r1
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	881b      	ldrh	r3, [r3, #0]
 8015f36:	b29b      	uxth	r3, r3
 8015f38:	4a18      	ldr	r2, [pc, #96]	@ (8015f9c <USB_EPStartXfer+0x11c0>)
 8015f3a:	4313      	orrs	r3, r2
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	187b      	adds	r3, r7, r1
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	801a      	strh	r2, [r3, #0]
 8015f44:	e051      	b.n	8015fea <USB_EPStartXfer+0x120e>
 8015f46:	1d7b      	adds	r3, r7, #5
 8015f48:	33ff      	adds	r3, #255	@ 0xff
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	085b      	lsrs	r3, r3, #1
 8015f4e:	21d8      	movs	r1, #216	@ 0xd8
 8015f50:	187a      	adds	r2, r7, r1
 8015f52:	6013      	str	r3, [r2, #0]
 8015f54:	1d7b      	adds	r3, r7, #5
 8015f56:	33ff      	adds	r3, #255	@ 0xff
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	4013      	ands	r3, r2
 8015f5e:	d004      	beq.n	8015f6a <USB_EPStartXfer+0x118e>
 8015f60:	187b      	adds	r3, r7, r1
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	3301      	adds	r3, #1
 8015f66:	187a      	adds	r2, r7, r1
 8015f68:	6013      	str	r3, [r2, #0]
 8015f6a:	21b8      	movs	r1, #184	@ 0xb8
 8015f6c:	187b      	adds	r3, r7, r1
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	881b      	ldrh	r3, [r3, #0]
 8015f72:	b29a      	uxth	r2, r3
 8015f74:	23d8      	movs	r3, #216	@ 0xd8
 8015f76:	18fb      	adds	r3, r7, r3
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	029b      	lsls	r3, r3, #10
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	4313      	orrs	r3, r2
 8015f82:	b29a      	uxth	r2, r3
 8015f84:	187b      	adds	r3, r7, r1
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	801a      	strh	r2, [r3, #0]
 8015f8a:	e02e      	b.n	8015fea <USB_EPStartXfer+0x120e>
 8015f8c:	00000406 	.word	0x00000406
 8015f90:	ffff8f8f 	.word	0xffff8f8f
 8015f94:	ffff80c0 	.word	0xffff80c0
 8015f98:	00000402 	.word	0x00000402
 8015f9c:	ffff8000 	.word	0xffff8000
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	785b      	ldrb	r3, [r3, #1]
 8015fa4:	2b01      	cmp	r3, #1
 8015fa6:	d120      	bne.n	8015fea <USB_EPStartXfer+0x120e>
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2250      	movs	r2, #80	@ 0x50
 8015fac:	5a9b      	ldrh	r3, [r3, r2]
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	001a      	movs	r2, r3
 8015fb2:	21c4      	movs	r1, #196	@ 0xc4
 8015fb4:	187b      	adds	r3, r7, r1
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	189b      	adds	r3, r3, r2
 8015fba:	187a      	adds	r2, r7, r1
 8015fbc:	6013      	str	r3, [r2, #0]
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	781b      	ldrb	r3, [r3, #0]
 8015fc2:	00da      	lsls	r2, r3, #3
 8015fc4:	187b      	adds	r3, r7, r1
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	18d3      	adds	r3, r2, r3
 8015fca:	4a1d      	ldr	r2, [pc, #116]	@ (8016040 <USB_EPStartXfer+0x1264>)
 8015fcc:	4694      	mov	ip, r2
 8015fce:	4463      	add	r3, ip
 8015fd0:	21c0      	movs	r1, #192	@ 0xc0
 8015fd2:	187a      	adds	r2, r7, r1
 8015fd4:	6013      	str	r3, [r2, #0]
 8015fd6:	1d7b      	adds	r3, r7, #5
 8015fd8:	33ff      	adds	r3, #255	@ 0xff
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	b29a      	uxth	r2, r3
 8015fde:	187b      	adds	r3, r7, r1
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	801a      	strh	r2, [r3, #0]
 8015fe4:	e001      	b.n	8015fea <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	e025      	b.n	8016036 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	009b      	lsls	r3, r3, #2
 8015ff2:	18d3      	adds	r3, r2, r3
 8015ff4:	881b      	ldrh	r3, [r3, #0]
 8015ff6:	b29a      	uxth	r2, r3
 8015ff8:	208a      	movs	r0, #138	@ 0x8a
 8015ffa:	183b      	adds	r3, r7, r0
 8015ffc:	4911      	ldr	r1, [pc, #68]	@ (8016044 <USB_EPStartXfer+0x1268>)
 8015ffe:	400a      	ands	r2, r1
 8016000:	801a      	strh	r2, [r3, #0]
 8016002:	183b      	adds	r3, r7, r0
 8016004:	183a      	adds	r2, r7, r0
 8016006:	8812      	ldrh	r2, [r2, #0]
 8016008:	2180      	movs	r1, #128	@ 0x80
 801600a:	0149      	lsls	r1, r1, #5
 801600c:	404a      	eors	r2, r1
 801600e:	801a      	strh	r2, [r3, #0]
 8016010:	183b      	adds	r3, r7, r0
 8016012:	183a      	adds	r2, r7, r0
 8016014:	8812      	ldrh	r2, [r2, #0]
 8016016:	2180      	movs	r1, #128	@ 0x80
 8016018:	0189      	lsls	r1, r1, #6
 801601a:	404a      	eors	r2, r1
 801601c:	801a      	strh	r2, [r3, #0]
 801601e:	687a      	ldr	r2, [r7, #4]
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	009b      	lsls	r3, r3, #2
 8016026:	18d3      	adds	r3, r2, r3
 8016028:	183a      	adds	r2, r7, r0
 801602a:	8812      	ldrh	r2, [r2, #0]
 801602c:	4906      	ldr	r1, [pc, #24]	@ (8016048 <USB_EPStartXfer+0x126c>)
 801602e:	430a      	orrs	r2, r1
 8016030:	b292      	uxth	r2, r2
 8016032:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8016034:	2300      	movs	r3, #0
}
 8016036:	0018      	movs	r0, r3
 8016038:	46bd      	mov	sp, r7
 801603a:	b043      	add	sp, #268	@ 0x10c
 801603c:	bd90      	pop	{r4, r7, pc}
 801603e:	46c0      	nop			@ (mov r8, r8)
 8016040:	00000406 	.word	0x00000406
 8016044:	ffffbf8f 	.word	0xffffbf8f
 8016048:	ffff8080 	.word	0xffff8080

0801604c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b084      	sub	sp, #16
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	785b      	ldrb	r3, [r3, #1]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d01d      	beq.n	801609a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	009b      	lsls	r3, r3, #2
 8016066:	18d3      	adds	r3, r2, r3
 8016068:	881b      	ldrh	r3, [r3, #0]
 801606a:	b29a      	uxth	r2, r3
 801606c:	200c      	movs	r0, #12
 801606e:	183b      	adds	r3, r7, r0
 8016070:	491b      	ldr	r1, [pc, #108]	@ (80160e0 <USB_EPSetStall+0x94>)
 8016072:	400a      	ands	r2, r1
 8016074:	801a      	strh	r2, [r3, #0]
 8016076:	183b      	adds	r3, r7, r0
 8016078:	183a      	adds	r2, r7, r0
 801607a:	8812      	ldrh	r2, [r2, #0]
 801607c:	2110      	movs	r1, #16
 801607e:	404a      	eors	r2, r1
 8016080:	801a      	strh	r2, [r3, #0]
 8016082:	687a      	ldr	r2, [r7, #4]
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	18d3      	adds	r3, r2, r3
 801608c:	183a      	adds	r2, r7, r0
 801608e:	8812      	ldrh	r2, [r2, #0]
 8016090:	4914      	ldr	r1, [pc, #80]	@ (80160e4 <USB_EPSetStall+0x98>)
 8016092:	430a      	orrs	r2, r1
 8016094:	b292      	uxth	r2, r2
 8016096:	801a      	strh	r2, [r3, #0]
 8016098:	e01d      	b.n	80160d6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	009b      	lsls	r3, r3, #2
 80160a2:	18d3      	adds	r3, r2, r3
 80160a4:	881b      	ldrh	r3, [r3, #0]
 80160a6:	b29a      	uxth	r2, r3
 80160a8:	200e      	movs	r0, #14
 80160aa:	183b      	adds	r3, r7, r0
 80160ac:	490e      	ldr	r1, [pc, #56]	@ (80160e8 <USB_EPSetStall+0x9c>)
 80160ae:	400a      	ands	r2, r1
 80160b0:	801a      	strh	r2, [r3, #0]
 80160b2:	183b      	adds	r3, r7, r0
 80160b4:	183a      	adds	r2, r7, r0
 80160b6:	8812      	ldrh	r2, [r2, #0]
 80160b8:	2180      	movs	r1, #128	@ 0x80
 80160ba:	0149      	lsls	r1, r1, #5
 80160bc:	404a      	eors	r2, r1
 80160be:	801a      	strh	r2, [r3, #0]
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	009b      	lsls	r3, r3, #2
 80160c8:	18d3      	adds	r3, r2, r3
 80160ca:	183a      	adds	r2, r7, r0
 80160cc:	8812      	ldrh	r2, [r2, #0]
 80160ce:	4905      	ldr	r1, [pc, #20]	@ (80160e4 <USB_EPSetStall+0x98>)
 80160d0:	430a      	orrs	r2, r1
 80160d2:	b292      	uxth	r2, r2
 80160d4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80160d6:	2300      	movs	r3, #0
}
 80160d8:	0018      	movs	r0, r3
 80160da:	46bd      	mov	sp, r7
 80160dc:	b004      	add	sp, #16
 80160de:	bd80      	pop	{r7, pc}
 80160e0:	ffff8fbf 	.word	0xffff8fbf
 80160e4:	ffff8080 	.word	0xffff8080
 80160e8:	ffffbf8f 	.word	0xffffbf8f

080160ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b086      	sub	sp, #24
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	7b1b      	ldrb	r3, [r3, #12]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d000      	beq.n	8016100 <USB_EPClearStall+0x14>
 80160fe:	e095      	b.n	801622c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	785b      	ldrb	r3, [r3, #1]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d046      	beq.n	8016196 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8016108:	687a      	ldr	r2, [r7, #4]
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	009b      	lsls	r3, r3, #2
 8016110:	18d2      	adds	r2, r2, r3
 8016112:	2110      	movs	r1, #16
 8016114:	187b      	adds	r3, r7, r1
 8016116:	8812      	ldrh	r2, [r2, #0]
 8016118:	801a      	strh	r2, [r3, #0]
 801611a:	187b      	adds	r3, r7, r1
 801611c:	881b      	ldrh	r3, [r3, #0]
 801611e:	2240      	movs	r2, #64	@ 0x40
 8016120:	4013      	ands	r3, r2
 8016122:	d016      	beq.n	8016152 <USB_EPClearStall+0x66>
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	781b      	ldrb	r3, [r3, #0]
 801612a:	009b      	lsls	r3, r3, #2
 801612c:	18d3      	adds	r3, r2, r3
 801612e:	881b      	ldrh	r3, [r3, #0]
 8016130:	b29a      	uxth	r2, r3
 8016132:	200e      	movs	r0, #14
 8016134:	183b      	adds	r3, r7, r0
 8016136:	4940      	ldr	r1, [pc, #256]	@ (8016238 <USB_EPClearStall+0x14c>)
 8016138:	400a      	ands	r2, r1
 801613a:	801a      	strh	r2, [r3, #0]
 801613c:	687a      	ldr	r2, [r7, #4]
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	009b      	lsls	r3, r3, #2
 8016144:	18d3      	adds	r3, r2, r3
 8016146:	183a      	adds	r2, r7, r0
 8016148:	8812      	ldrh	r2, [r2, #0]
 801614a:	493c      	ldr	r1, [pc, #240]	@ (801623c <USB_EPClearStall+0x150>)
 801614c:	430a      	orrs	r2, r1
 801614e:	b292      	uxth	r2, r2
 8016150:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	78db      	ldrb	r3, [r3, #3]
 8016156:	2b01      	cmp	r3, #1
 8016158:	d068      	beq.n	801622c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801615a:	687a      	ldr	r2, [r7, #4]
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	781b      	ldrb	r3, [r3, #0]
 8016160:	009b      	lsls	r3, r3, #2
 8016162:	18d3      	adds	r3, r2, r3
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	b29a      	uxth	r2, r3
 8016168:	200c      	movs	r0, #12
 801616a:	183b      	adds	r3, r7, r0
 801616c:	4934      	ldr	r1, [pc, #208]	@ (8016240 <USB_EPClearStall+0x154>)
 801616e:	400a      	ands	r2, r1
 8016170:	801a      	strh	r2, [r3, #0]
 8016172:	183b      	adds	r3, r7, r0
 8016174:	183a      	adds	r2, r7, r0
 8016176:	8812      	ldrh	r2, [r2, #0]
 8016178:	2120      	movs	r1, #32
 801617a:	404a      	eors	r2, r1
 801617c:	801a      	strh	r2, [r3, #0]
 801617e:	687a      	ldr	r2, [r7, #4]
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	009b      	lsls	r3, r3, #2
 8016186:	18d3      	adds	r3, r2, r3
 8016188:	183a      	adds	r2, r7, r0
 801618a:	8812      	ldrh	r2, [r2, #0]
 801618c:	492d      	ldr	r1, [pc, #180]	@ (8016244 <USB_EPClearStall+0x158>)
 801618e:	430a      	orrs	r2, r1
 8016190:	b292      	uxth	r2, r2
 8016192:	801a      	strh	r2, [r3, #0]
 8016194:	e04a      	b.n	801622c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8016196:	687a      	ldr	r2, [r7, #4]
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	009b      	lsls	r3, r3, #2
 801619e:	18d2      	adds	r2, r2, r3
 80161a0:	2116      	movs	r1, #22
 80161a2:	187b      	adds	r3, r7, r1
 80161a4:	8812      	ldrh	r2, [r2, #0]
 80161a6:	801a      	strh	r2, [r3, #0]
 80161a8:	187b      	adds	r3, r7, r1
 80161aa:	881a      	ldrh	r2, [r3, #0]
 80161ac:	2380      	movs	r3, #128	@ 0x80
 80161ae:	01db      	lsls	r3, r3, #7
 80161b0:	4013      	ands	r3, r2
 80161b2:	d016      	beq.n	80161e2 <USB_EPClearStall+0xf6>
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	009b      	lsls	r3, r3, #2
 80161bc:	18d3      	adds	r3, r2, r3
 80161be:	881b      	ldrh	r3, [r3, #0]
 80161c0:	b29a      	uxth	r2, r3
 80161c2:	2014      	movs	r0, #20
 80161c4:	183b      	adds	r3, r7, r0
 80161c6:	491c      	ldr	r1, [pc, #112]	@ (8016238 <USB_EPClearStall+0x14c>)
 80161c8:	400a      	ands	r2, r1
 80161ca:	801a      	strh	r2, [r3, #0]
 80161cc:	687a      	ldr	r2, [r7, #4]
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	781b      	ldrb	r3, [r3, #0]
 80161d2:	009b      	lsls	r3, r3, #2
 80161d4:	18d3      	adds	r3, r2, r3
 80161d6:	183a      	adds	r2, r7, r0
 80161d8:	8812      	ldrh	r2, [r2, #0]
 80161da:	491b      	ldr	r1, [pc, #108]	@ (8016248 <USB_EPClearStall+0x15c>)
 80161dc:	430a      	orrs	r2, r1
 80161de:	b292      	uxth	r2, r2
 80161e0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	781b      	ldrb	r3, [r3, #0]
 80161e8:	009b      	lsls	r3, r3, #2
 80161ea:	18d3      	adds	r3, r2, r3
 80161ec:	881b      	ldrh	r3, [r3, #0]
 80161ee:	b29a      	uxth	r2, r3
 80161f0:	2012      	movs	r0, #18
 80161f2:	183b      	adds	r3, r7, r0
 80161f4:	4915      	ldr	r1, [pc, #84]	@ (801624c <USB_EPClearStall+0x160>)
 80161f6:	400a      	ands	r2, r1
 80161f8:	801a      	strh	r2, [r3, #0]
 80161fa:	183b      	adds	r3, r7, r0
 80161fc:	183a      	adds	r2, r7, r0
 80161fe:	8812      	ldrh	r2, [r2, #0]
 8016200:	2180      	movs	r1, #128	@ 0x80
 8016202:	0149      	lsls	r1, r1, #5
 8016204:	404a      	eors	r2, r1
 8016206:	801a      	strh	r2, [r3, #0]
 8016208:	183b      	adds	r3, r7, r0
 801620a:	183a      	adds	r2, r7, r0
 801620c:	8812      	ldrh	r2, [r2, #0]
 801620e:	2180      	movs	r1, #128	@ 0x80
 8016210:	0189      	lsls	r1, r1, #6
 8016212:	404a      	eors	r2, r1
 8016214:	801a      	strh	r2, [r3, #0]
 8016216:	687a      	ldr	r2, [r7, #4]
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	18d3      	adds	r3, r2, r3
 8016220:	183a      	adds	r2, r7, r0
 8016222:	8812      	ldrh	r2, [r2, #0]
 8016224:	4907      	ldr	r1, [pc, #28]	@ (8016244 <USB_EPClearStall+0x158>)
 8016226:	430a      	orrs	r2, r1
 8016228:	b292      	uxth	r2, r2
 801622a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801622c:	2300      	movs	r3, #0
}
 801622e:	0018      	movs	r0, r3
 8016230:	46bd      	mov	sp, r7
 8016232:	b006      	add	sp, #24
 8016234:	bd80      	pop	{r7, pc}
 8016236:	46c0      	nop			@ (mov r8, r8)
 8016238:	ffff8f8f 	.word	0xffff8f8f
 801623c:	ffff80c0 	.word	0xffff80c0
 8016240:	ffff8fbf 	.word	0xffff8fbf
 8016244:	ffff8080 	.word	0xffff8080
 8016248:	ffffc080 	.word	0xffffc080
 801624c:	ffffbf8f 	.word	0xffffbf8f

08016250 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	000a      	movs	r2, r1
 801625a:	1cfb      	adds	r3, r7, #3
 801625c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801625e:	1cfb      	adds	r3, r7, #3
 8016260:	781b      	ldrb	r3, [r3, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d103      	bne.n	801626e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	224c      	movs	r2, #76	@ 0x4c
 801626a:	2180      	movs	r1, #128	@ 0x80
 801626c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801626e:	2300      	movs	r3, #0
}
 8016270:	0018      	movs	r0, r3
 8016272:	46bd      	mov	sp, r7
 8016274:	b002      	add	sp, #8
 8016276:	bd80      	pop	{r7, pc}

08016278 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2258      	movs	r2, #88	@ 0x58
 8016284:	5a9b      	ldrh	r3, [r3, r2]
 8016286:	b29b      	uxth	r3, r3
 8016288:	4a05      	ldr	r2, [pc, #20]	@ (80162a0 <USB_DevConnect+0x28>)
 801628a:	4313      	orrs	r3, r2
 801628c:	b299      	uxth	r1, r3
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2258      	movs	r2, #88	@ 0x58
 8016292:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8016294:	2300      	movs	r3, #0
}
 8016296:	0018      	movs	r0, r3
 8016298:	46bd      	mov	sp, r7
 801629a:	b002      	add	sp, #8
 801629c:	bd80      	pop	{r7, pc}
 801629e:	46c0      	nop			@ (mov r8, r8)
 80162a0:	ffff8000 	.word	0xffff8000

080162a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b084      	sub	sp, #16
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2244      	movs	r2, #68	@ 0x44
 80162b0:	5a9b      	ldrh	r3, [r3, r2]
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80162b6:	68fb      	ldr	r3, [r7, #12]
}
 80162b8:	0018      	movs	r0, r3
 80162ba:	46bd      	mov	sp, r7
 80162bc:	b004      	add	sp, #16
 80162be:	bd80      	pop	{r7, pc}

080162c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b08a      	sub	sp, #40	@ 0x28
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	60f8      	str	r0, [r7, #12]
 80162c8:	60b9      	str	r1, [r7, #8]
 80162ca:	0019      	movs	r1, r3
 80162cc:	1dbb      	adds	r3, r7, #6
 80162ce:	801a      	strh	r2, [r3, #0]
 80162d0:	1d3b      	adds	r3, r7, #4
 80162d2:	1c0a      	adds	r2, r1, #0
 80162d4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80162d6:	1d3b      	adds	r3, r7, #4
 80162d8:	881b      	ldrh	r3, [r3, #0]
 80162da:	3301      	adds	r3, #1
 80162dc:	085b      	lsrs	r3, r3, #1
 80162de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80162e8:	1dbb      	adds	r3, r7, #6
 80162ea:	881a      	ldrh	r2, [r3, #0]
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	18d3      	adds	r3, r2, r3
 80162f0:	2280      	movs	r2, #128	@ 0x80
 80162f2:	00d2      	lsls	r2, r2, #3
 80162f4:	4694      	mov	ip, r2
 80162f6:	4463      	add	r3, ip
 80162f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80162fe:	e020      	b.n	8016342 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8016300:	69fb      	ldr	r3, [r7, #28]
 8016302:	781a      	ldrb	r2, [r3, #0]
 8016304:	2112      	movs	r1, #18
 8016306:	187b      	adds	r3, r7, r1
 8016308:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	3301      	adds	r3, #1
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	021b      	lsls	r3, r3, #8
 8016312:	b21a      	sxth	r2, r3
 8016314:	187b      	adds	r3, r7, r1
 8016316:	2000      	movs	r0, #0
 8016318:	5e1b      	ldrsh	r3, [r3, r0]
 801631a:	4313      	orrs	r3, r2
 801631c:	b21a      	sxth	r2, r3
 801631e:	187b      	adds	r3, r7, r1
 8016320:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8016322:	6a3b      	ldr	r3, [r7, #32]
 8016324:	187a      	adds	r2, r7, r1
 8016326:	8812      	ldrh	r2, [r2, #0]
 8016328:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801632a:	6a3b      	ldr	r3, [r7, #32]
 801632c:	3302      	adds	r3, #2
 801632e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	3301      	adds	r3, #1
 8016334:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8016336:	69fb      	ldr	r3, [r7, #28]
 8016338:	3301      	adds	r3, #1
 801633a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801633e:	3b01      	subs	r3, #1
 8016340:	627b      	str	r3, [r7, #36]	@ 0x24
 8016342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016344:	2b00      	cmp	r3, #0
 8016346:	d1db      	bne.n	8016300 <USB_WritePMA+0x40>
  }
}
 8016348:	46c0      	nop			@ (mov r8, r8)
 801634a:	46c0      	nop			@ (mov r8, r8)
 801634c:	46bd      	mov	sp, r7
 801634e:	b00a      	add	sp, #40	@ 0x28
 8016350:	bd80      	pop	{r7, pc}

08016352 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8016352:	b580      	push	{r7, lr}
 8016354:	b08a      	sub	sp, #40	@ 0x28
 8016356:	af00      	add	r7, sp, #0
 8016358:	60f8      	str	r0, [r7, #12]
 801635a:	60b9      	str	r1, [r7, #8]
 801635c:	0019      	movs	r1, r3
 801635e:	1dbb      	adds	r3, r7, #6
 8016360:	801a      	strh	r2, [r3, #0]
 8016362:	1d3b      	adds	r3, r7, #4
 8016364:	1c0a      	adds	r2, r1, #0
 8016366:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8016368:	1d3b      	adds	r3, r7, #4
 801636a:	881b      	ldrh	r3, [r3, #0]
 801636c:	085b      	lsrs	r3, r3, #1
 801636e:	b29b      	uxth	r3, r3
 8016370:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801637a:	1dbb      	adds	r3, r7, #6
 801637c:	881a      	ldrh	r2, [r3, #0]
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	18d3      	adds	r3, r2, r3
 8016382:	2280      	movs	r2, #128	@ 0x80
 8016384:	00d2      	lsls	r2, r2, #3
 8016386:	4694      	mov	ip, r2
 8016388:	4463      	add	r3, ip
 801638a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801638c:	69bb      	ldr	r3, [r7, #24]
 801638e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016390:	e018      	b.n	80163c4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8016392:	6a3b      	ldr	r3, [r7, #32]
 8016394:	881b      	ldrh	r3, [r3, #0]
 8016396:	b29b      	uxth	r3, r3
 8016398:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801639a:	6a3b      	ldr	r3, [r7, #32]
 801639c:	3302      	adds	r3, #2
 801639e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	b2da      	uxtb	r2, r3
 80163a4:	69fb      	ldr	r3, [r7, #28]
 80163a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	3301      	adds	r3, #1
 80163ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	0a1b      	lsrs	r3, r3, #8
 80163b2:	b2da      	uxtb	r2, r3
 80163b4:	69fb      	ldr	r3, [r7, #28]
 80163b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80163b8:	69fb      	ldr	r3, [r7, #28]
 80163ba:	3301      	adds	r3, #1
 80163bc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80163be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c0:	3b01      	subs	r3, #1
 80163c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80163c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d1e3      	bne.n	8016392 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80163ca:	1d3b      	adds	r3, r7, #4
 80163cc:	881b      	ldrh	r3, [r3, #0]
 80163ce:	2201      	movs	r2, #1
 80163d0:	4013      	ands	r3, r2
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d007      	beq.n	80163e8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80163d8:	6a3b      	ldr	r3, [r7, #32]
 80163da:	881b      	ldrh	r3, [r3, #0]
 80163dc:	b29b      	uxth	r3, r3
 80163de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80163e0:	693b      	ldr	r3, [r7, #16]
 80163e2:	b2da      	uxtb	r2, r3
 80163e4:	69fb      	ldr	r3, [r7, #28]
 80163e6:	701a      	strb	r2, [r3, #0]
  }
}
 80163e8:	46c0      	nop			@ (mov r8, r8)
 80163ea:	46bd      	mov	sp, r7
 80163ec:	b00a      	add	sp, #40	@ 0x28
 80163ee:	bd80      	pop	{r7, pc}

080163f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b084      	sub	sp, #16
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
 80163f8:	000a      	movs	r2, r1
 80163fa:	1cfb      	adds	r3, r7, #3
 80163fc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80163fe:	230f      	movs	r3, #15
 8016400:	18fb      	adds	r3, r7, r3
 8016402:	2200      	movs	r2, #0
 8016404:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	7c1b      	ldrb	r3, [r3, #16]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d116      	bne.n	801643c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801640e:	2380      	movs	r3, #128	@ 0x80
 8016410:	009b      	lsls	r3, r3, #2
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	2202      	movs	r2, #2
 8016416:	2181      	movs	r1, #129	@ 0x81
 8016418:	f002 f8eb 	bl	80185f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2201      	movs	r2, #1
 8016420:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016422:	2380      	movs	r3, #128	@ 0x80
 8016424:	009b      	lsls	r3, r3, #2
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	2202      	movs	r2, #2
 801642a:	2101      	movs	r1, #1
 801642c:	f002 f8e1 	bl	80185f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	23b6      	movs	r3, #182	@ 0xb6
 8016434:	005b      	lsls	r3, r3, #1
 8016436:	2101      	movs	r1, #1
 8016438:	50d1      	str	r1, [r2, r3]
 801643a:	e013      	b.n	8016464 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	2340      	movs	r3, #64	@ 0x40
 8016440:	2202      	movs	r2, #2
 8016442:	2181      	movs	r1, #129	@ 0x81
 8016444:	f002 f8d5 	bl	80185f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2201      	movs	r2, #1
 801644c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	2340      	movs	r3, #64	@ 0x40
 8016452:	2202      	movs	r2, #2
 8016454:	2101      	movs	r1, #1
 8016456:	f002 f8cc 	bl	80185f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	23b6      	movs	r3, #182	@ 0xb6
 801645e:	005b      	lsls	r3, r3, #1
 8016460:	2101      	movs	r1, #1
 8016462:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	2308      	movs	r3, #8
 8016468:	2203      	movs	r2, #3
 801646a:	2182      	movs	r1, #130	@ 0x82
 801646c:	f002 f8c1 	bl	80185f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2201      	movs	r2, #1
 8016474:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016476:	2387      	movs	r3, #135	@ 0x87
 8016478:	009b      	lsls	r3, r3, #2
 801647a:	0018      	movs	r0, r3
 801647c:	f002 fa52 	bl	8018924 <USBD_static_malloc>
 8016480:	0001      	movs	r1, r0
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	23ae      	movs	r3, #174	@ 0xae
 8016486:	009b      	lsls	r3, r3, #2
 8016488:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	23ae      	movs	r3, #174	@ 0xae
 801648e:	009b      	lsls	r3, r3, #2
 8016490:	58d3      	ldr	r3, [r2, r3]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d104      	bne.n	80164a0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8016496:	230f      	movs	r3, #15
 8016498:	18fb      	adds	r3, r7, r3
 801649a:	2201      	movs	r2, #1
 801649c:	701a      	strb	r2, [r3, #0]
 801649e:	e02c      	b.n	80164fa <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	23ae      	movs	r3, #174	@ 0xae
 80164a4:	009b      	lsls	r3, r3, #2
 80164a6:	58d3      	ldr	r3, [r2, r3]
 80164a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80164aa:	687a      	ldr	r2, [r7, #4]
 80164ac:	23af      	movs	r3, #175	@ 0xaf
 80164ae:	009b      	lsls	r3, r3, #2
 80164b0:	58d3      	ldr	r3, [r2, r3]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80164b6:	68ba      	ldr	r2, [r7, #8]
 80164b8:	2385      	movs	r3, #133	@ 0x85
 80164ba:	009b      	lsls	r3, r3, #2
 80164bc:	2100      	movs	r1, #0
 80164be:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80164c0:	68ba      	ldr	r2, [r7, #8]
 80164c2:	2386      	movs	r3, #134	@ 0x86
 80164c4:	009b      	lsls	r3, r3, #2
 80164c6:	2100      	movs	r1, #0
 80164c8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	7c1b      	ldrb	r3, [r3, #16]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d10a      	bne.n	80164e8 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80164d2:	68ba      	ldr	r2, [r7, #8]
 80164d4:	2381      	movs	r3, #129	@ 0x81
 80164d6:	009b      	lsls	r3, r3, #2
 80164d8:	58d2      	ldr	r2, [r2, r3]
 80164da:	2380      	movs	r3, #128	@ 0x80
 80164dc:	009b      	lsls	r3, r3, #2
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	2101      	movs	r1, #1
 80164e2:	f002 f9d1 	bl	8018888 <USBD_LL_PrepareReceive>
 80164e6:	e008      	b.n	80164fa <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80164e8:	68ba      	ldr	r2, [r7, #8]
 80164ea:	2381      	movs	r3, #129	@ 0x81
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	58d2      	ldr	r2, [r2, r3]
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	2340      	movs	r3, #64	@ 0x40
 80164f4:	2101      	movs	r1, #1
 80164f6:	f002 f9c7 	bl	8018888 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80164fa:	230f      	movs	r3, #15
 80164fc:	18fb      	adds	r3, r7, r3
 80164fe:	781b      	ldrb	r3, [r3, #0]
}
 8016500:	0018      	movs	r0, r3
 8016502:	46bd      	mov	sp, r7
 8016504:	b004      	add	sp, #16
 8016506:	bd80      	pop	{r7, pc}

08016508 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b084      	sub	sp, #16
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	000a      	movs	r2, r1
 8016512:	1cfb      	adds	r3, r7, #3
 8016514:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8016516:	230f      	movs	r3, #15
 8016518:	18fb      	adds	r3, r7, r3
 801651a:	2200      	movs	r2, #0
 801651c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2181      	movs	r1, #129	@ 0x81
 8016522:	0018      	movs	r0, r3
 8016524:	f002 f89c 	bl	8018660 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2200      	movs	r2, #0
 801652c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2101      	movs	r1, #1
 8016532:	0018      	movs	r0, r3
 8016534:	f002 f894 	bl	8018660 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016538:	687a      	ldr	r2, [r7, #4]
 801653a:	23b6      	movs	r3, #182	@ 0xb6
 801653c:	005b      	lsls	r3, r3, #1
 801653e:	2100      	movs	r1, #0
 8016540:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2182      	movs	r1, #130	@ 0x82
 8016546:	0018      	movs	r0, r3
 8016548:	f002 f88a 	bl	8018660 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2200      	movs	r2, #0
 8016550:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	23ae      	movs	r3, #174	@ 0xae
 8016556:	009b      	lsls	r3, r3, #2
 8016558:	58d3      	ldr	r3, [r2, r3]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d011      	beq.n	8016582 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801655e:	687a      	ldr	r2, [r7, #4]
 8016560:	23af      	movs	r3, #175	@ 0xaf
 8016562:	009b      	lsls	r3, r3, #2
 8016564:	58d3      	ldr	r3, [r2, r3]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	23ae      	movs	r3, #174	@ 0xae
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	58d3      	ldr	r3, [r2, r3]
 8016572:	0018      	movs	r0, r3
 8016574:	f002 f9e2 	bl	801893c <USBD_static_free>
    pdev->pClassData = NULL;
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	23ae      	movs	r3, #174	@ 0xae
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	2100      	movs	r1, #0
 8016580:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8016582:	230f      	movs	r3, #15
 8016584:	18fb      	adds	r3, r7, r3
 8016586:	781b      	ldrb	r3, [r3, #0]
}
 8016588:	0018      	movs	r0, r3
 801658a:	46bd      	mov	sp, r7
 801658c:	b004      	add	sp, #16
 801658e:	bd80      	pop	{r7, pc}

08016590 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b086      	sub	sp, #24
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801659a:	687a      	ldr	r2, [r7, #4]
 801659c:	23ae      	movs	r3, #174	@ 0xae
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	58d3      	ldr	r3, [r2, r3]
 80165a2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80165a4:	230f      	movs	r3, #15
 80165a6:	18fb      	adds	r3, r7, r3
 80165a8:	2200      	movs	r2, #0
 80165aa:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80165ac:	230c      	movs	r3, #12
 80165ae:	18fb      	adds	r3, r7, r3
 80165b0:	2200      	movs	r2, #0
 80165b2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80165b4:	2317      	movs	r3, #23
 80165b6:	18fb      	adds	r3, r7, r3
 80165b8:	2200      	movs	r2, #0
 80165ba:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	001a      	movs	r2, r3
 80165c2:	2360      	movs	r3, #96	@ 0x60
 80165c4:	4013      	ands	r3, r2
 80165c6:	d03d      	beq.n	8016644 <USBD_CDC_Setup+0xb4>
 80165c8:	2b20      	cmp	r3, #32
 80165ca:	d000      	beq.n	80165ce <USBD_CDC_Setup+0x3e>
 80165cc:	e094      	b.n	80166f8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80165ce:	683b      	ldr	r3, [r7, #0]
 80165d0:	88db      	ldrh	r3, [r3, #6]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d02b      	beq.n	801662e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80165d6:	683b      	ldr	r3, [r7, #0]
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	b25b      	sxtb	r3, r3
 80165dc:	2b00      	cmp	r3, #0
 80165de:	da12      	bge.n	8016606 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	23af      	movs	r3, #175	@ 0xaf
 80165e4:	009b      	lsls	r3, r3, #2
 80165e6:	58d3      	ldr	r3, [r2, r3]
 80165e8:	689b      	ldr	r3, [r3, #8]
 80165ea:	683a      	ldr	r2, [r7, #0]
 80165ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80165ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80165f0:	683a      	ldr	r2, [r7, #0]
 80165f2:	88d2      	ldrh	r2, [r2, #6]
 80165f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80165f6:	6939      	ldr	r1, [r7, #16]
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	88da      	ldrh	r2, [r3, #6]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	0018      	movs	r0, r3
 8016600:	f001 fbaf 	bl	8017d62 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8016604:	e083      	b.n	801670e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	7859      	ldrb	r1, [r3, #1]
 801660a:	693a      	ldr	r2, [r7, #16]
 801660c:	2380      	movs	r3, #128	@ 0x80
 801660e:	009b      	lsls	r3, r3, #2
 8016610:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	88db      	ldrh	r3, [r3, #6]
 8016616:	b2d9      	uxtb	r1, r3
 8016618:	693b      	ldr	r3, [r7, #16]
 801661a:	4a40      	ldr	r2, [pc, #256]	@ (801671c <USBD_CDC_Setup+0x18c>)
 801661c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801661e:	6939      	ldr	r1, [r7, #16]
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	88da      	ldrh	r2, [r3, #6]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	0018      	movs	r0, r3
 8016628:	f001 fbce 	bl	8017dc8 <USBD_CtlPrepareRx>
      break;
 801662c:	e06f      	b.n	801670e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	23af      	movs	r3, #175	@ 0xaf
 8016632:	009b      	lsls	r3, r3, #2
 8016634:	58d3      	ldr	r3, [r2, r3]
 8016636:	689b      	ldr	r3, [r3, #8]
 8016638:	683a      	ldr	r2, [r7, #0]
 801663a:	7850      	ldrb	r0, [r2, #1]
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	2200      	movs	r2, #0
 8016640:	4798      	blx	r3
      break;
 8016642:	e064      	b.n	801670e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	785b      	ldrb	r3, [r3, #1]
 8016648:	2b0b      	cmp	r3, #11
 801664a:	d037      	beq.n	80166bc <USBD_CDC_Setup+0x12c>
 801664c:	dc47      	bgt.n	80166de <USBD_CDC_Setup+0x14e>
 801664e:	2b00      	cmp	r3, #0
 8016650:	d002      	beq.n	8016658 <USBD_CDC_Setup+0xc8>
 8016652:	2b0a      	cmp	r3, #10
 8016654:	d019      	beq.n	801668a <USBD_CDC_Setup+0xfa>
 8016656:	e042      	b.n	80166de <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016658:	687a      	ldr	r2, [r7, #4]
 801665a:	23a7      	movs	r3, #167	@ 0xa7
 801665c:	009b      	lsls	r3, r3, #2
 801665e:	5cd3      	ldrb	r3, [r2, r3]
 8016660:	2b03      	cmp	r3, #3
 8016662:	d107      	bne.n	8016674 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8016664:	230c      	movs	r3, #12
 8016666:	18f9      	adds	r1, r7, r3
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2202      	movs	r2, #2
 801666c:	0018      	movs	r0, r3
 801666e:	f001 fb78 	bl	8017d62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016672:	e040      	b.n	80166f6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8016674:	683a      	ldr	r2, [r7, #0]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	0011      	movs	r1, r2
 801667a:	0018      	movs	r0, r3
 801667c:	f001 faf3 	bl	8017c66 <USBD_CtlError>
            ret = USBD_FAIL;
 8016680:	2317      	movs	r3, #23
 8016682:	18fb      	adds	r3, r7, r3
 8016684:	2202      	movs	r2, #2
 8016686:	701a      	strb	r2, [r3, #0]
          break;
 8016688:	e035      	b.n	80166f6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801668a:	687a      	ldr	r2, [r7, #4]
 801668c:	23a7      	movs	r3, #167	@ 0xa7
 801668e:	009b      	lsls	r3, r3, #2
 8016690:	5cd3      	ldrb	r3, [r2, r3]
 8016692:	2b03      	cmp	r3, #3
 8016694:	d107      	bne.n	80166a6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8016696:	230f      	movs	r3, #15
 8016698:	18f9      	adds	r1, r7, r3
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2201      	movs	r2, #1
 801669e:	0018      	movs	r0, r3
 80166a0:	f001 fb5f 	bl	8017d62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80166a4:	e027      	b.n	80166f6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80166a6:	683a      	ldr	r2, [r7, #0]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	0011      	movs	r1, r2
 80166ac:	0018      	movs	r0, r3
 80166ae:	f001 fada 	bl	8017c66 <USBD_CtlError>
            ret = USBD_FAIL;
 80166b2:	2317      	movs	r3, #23
 80166b4:	18fb      	adds	r3, r7, r3
 80166b6:	2202      	movs	r2, #2
 80166b8:	701a      	strb	r2, [r3, #0]
          break;
 80166ba:	e01c      	b.n	80166f6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	23a7      	movs	r3, #167	@ 0xa7
 80166c0:	009b      	lsls	r3, r3, #2
 80166c2:	5cd3      	ldrb	r3, [r2, r3]
 80166c4:	2b03      	cmp	r3, #3
 80166c6:	d015      	beq.n	80166f4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80166c8:	683a      	ldr	r2, [r7, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	0011      	movs	r1, r2
 80166ce:	0018      	movs	r0, r3
 80166d0:	f001 fac9 	bl	8017c66 <USBD_CtlError>
            ret = USBD_FAIL;
 80166d4:	2317      	movs	r3, #23
 80166d6:	18fb      	adds	r3, r7, r3
 80166d8:	2202      	movs	r2, #2
 80166da:	701a      	strb	r2, [r3, #0]
          }
          break;
 80166dc:	e00a      	b.n	80166f4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80166de:	683a      	ldr	r2, [r7, #0]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	0011      	movs	r1, r2
 80166e4:	0018      	movs	r0, r3
 80166e6:	f001 fabe 	bl	8017c66 <USBD_CtlError>
          ret = USBD_FAIL;
 80166ea:	2317      	movs	r3, #23
 80166ec:	18fb      	adds	r3, r7, r3
 80166ee:	2202      	movs	r2, #2
 80166f0:	701a      	strb	r2, [r3, #0]
          break;
 80166f2:	e000      	b.n	80166f6 <USBD_CDC_Setup+0x166>
          break;
 80166f4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80166f6:	e00a      	b.n	801670e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80166f8:	683a      	ldr	r2, [r7, #0]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	0011      	movs	r1, r2
 80166fe:	0018      	movs	r0, r3
 8016700:	f001 fab1 	bl	8017c66 <USBD_CtlError>
      ret = USBD_FAIL;
 8016704:	2317      	movs	r3, #23
 8016706:	18fb      	adds	r3, r7, r3
 8016708:	2202      	movs	r2, #2
 801670a:	701a      	strb	r2, [r3, #0]
      break;
 801670c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801670e:	2317      	movs	r3, #23
 8016710:	18fb      	adds	r3, r7, r3
 8016712:	781b      	ldrb	r3, [r3, #0]
}
 8016714:	0018      	movs	r0, r3
 8016716:	46bd      	mov	sp, r7
 8016718:	b006      	add	sp, #24
 801671a:	bd80      	pop	{r7, pc}
 801671c:	00000201 	.word	0x00000201

08016720 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
 8016728:	000a      	movs	r2, r1
 801672a:	1cfb      	adds	r3, r7, #3
 801672c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801672e:	687a      	ldr	r2, [r7, #4]
 8016730:	23ae      	movs	r3, #174	@ 0xae
 8016732:	009b      	lsls	r3, r3, #2
 8016734:	58d3      	ldr	r3, [r2, r3]
 8016736:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016738:	687a      	ldr	r2, [r7, #4]
 801673a:	23b0      	movs	r3, #176	@ 0xb0
 801673c:	009b      	lsls	r3, r3, #2
 801673e:	58d3      	ldr	r3, [r2, r3]
 8016740:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8016742:	687a      	ldr	r2, [r7, #4]
 8016744:	23ae      	movs	r3, #174	@ 0xae
 8016746:	009b      	lsls	r3, r3, #2
 8016748:	58d3      	ldr	r3, [r2, r3]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d03e      	beq.n	80167cc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801674e:	1cfb      	adds	r3, r7, #3
 8016750:	781a      	ldrb	r2, [r3, #0]
 8016752:	6879      	ldr	r1, [r7, #4]
 8016754:	0013      	movs	r3, r2
 8016756:	009b      	lsls	r3, r3, #2
 8016758:	189b      	adds	r3, r3, r2
 801675a:	009b      	lsls	r3, r3, #2
 801675c:	18cb      	adds	r3, r1, r3
 801675e:	331c      	adds	r3, #28
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d02b      	beq.n	80167be <USBD_CDC_DataIn+0x9e>
 8016766:	1cfb      	adds	r3, r7, #3
 8016768:	781a      	ldrb	r2, [r3, #0]
 801676a:	6879      	ldr	r1, [r7, #4]
 801676c:	0013      	movs	r3, r2
 801676e:	009b      	lsls	r3, r3, #2
 8016770:	189b      	adds	r3, r3, r2
 8016772:	009b      	lsls	r3, r3, #2
 8016774:	18cb      	adds	r3, r1, r3
 8016776:	331c      	adds	r3, #28
 8016778:	6818      	ldr	r0, [r3, #0]
 801677a:	1cfb      	adds	r3, r7, #3
 801677c:	781a      	ldrb	r2, [r3, #0]
 801677e:	68b9      	ldr	r1, [r7, #8]
 8016780:	0013      	movs	r3, r2
 8016782:	009b      	lsls	r3, r3, #2
 8016784:	189b      	adds	r3, r3, r2
 8016786:	00db      	lsls	r3, r3, #3
 8016788:	18cb      	adds	r3, r1, r3
 801678a:	3338      	adds	r3, #56	@ 0x38
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	0019      	movs	r1, r3
 8016790:	f7e9 fd84 	bl	800029c <__aeabi_uidivmod>
 8016794:	1e0b      	subs	r3, r1, #0
 8016796:	d112      	bne.n	80167be <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8016798:	1cfb      	adds	r3, r7, #3
 801679a:	781a      	ldrb	r2, [r3, #0]
 801679c:	6879      	ldr	r1, [r7, #4]
 801679e:	0013      	movs	r3, r2
 80167a0:	009b      	lsls	r3, r3, #2
 80167a2:	189b      	adds	r3, r3, r2
 80167a4:	009b      	lsls	r3, r3, #2
 80167a6:	18cb      	adds	r3, r1, r3
 80167a8:	331c      	adds	r3, #28
 80167aa:	2200      	movs	r2, #0
 80167ac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80167ae:	1cfb      	adds	r3, r7, #3
 80167b0:	7819      	ldrb	r1, [r3, #0]
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	2300      	movs	r3, #0
 80167b6:	2200      	movs	r2, #0
 80167b8:	f002 f82f 	bl	801881a <USBD_LL_Transmit>
 80167bc:	e004      	b.n	80167c8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80167be:	68fa      	ldr	r2, [r7, #12]
 80167c0:	2385      	movs	r3, #133	@ 0x85
 80167c2:	009b      	lsls	r3, r3, #2
 80167c4:	2100      	movs	r1, #0
 80167c6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80167c8:	2300      	movs	r3, #0
 80167ca:	e000      	b.n	80167ce <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80167cc:	2302      	movs	r3, #2
  }
}
 80167ce:	0018      	movs	r0, r3
 80167d0:	46bd      	mov	sp, r7
 80167d2:	b004      	add	sp, #16
 80167d4:	bd80      	pop	{r7, pc}

080167d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80167d6:	b580      	push	{r7, lr}
 80167d8:	b084      	sub	sp, #16
 80167da:	af00      	add	r7, sp, #0
 80167dc:	6078      	str	r0, [r7, #4]
 80167de:	000a      	movs	r2, r1
 80167e0:	1cfb      	adds	r3, r7, #3
 80167e2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	23ae      	movs	r3, #174	@ 0xae
 80167e8:	009b      	lsls	r3, r3, #2
 80167ea:	58d3      	ldr	r3, [r2, r3]
 80167ec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80167ee:	1cfb      	adds	r3, r7, #3
 80167f0:	781a      	ldrb	r2, [r3, #0]
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	0011      	movs	r1, r2
 80167f6:	0018      	movs	r0, r3
 80167f8:	f002 f87d 	bl	80188f6 <USBD_LL_GetRxDataSize>
 80167fc:	0001      	movs	r1, r0
 80167fe:	68fa      	ldr	r2, [r7, #12]
 8016800:	2383      	movs	r3, #131	@ 0x83
 8016802:	009b      	lsls	r3, r3, #2
 8016804:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	23ae      	movs	r3, #174	@ 0xae
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	58d3      	ldr	r3, [r2, r3]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d011      	beq.n	8016836 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016812:	687a      	ldr	r2, [r7, #4]
 8016814:	23af      	movs	r3, #175	@ 0xaf
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	58d3      	ldr	r3, [r2, r3]
 801681a:	68da      	ldr	r2, [r3, #12]
 801681c:	68f9      	ldr	r1, [r7, #12]
 801681e:	2381      	movs	r3, #129	@ 0x81
 8016820:	009b      	lsls	r3, r3, #2
 8016822:	58c8      	ldr	r0, [r1, r3]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2183      	movs	r1, #131	@ 0x83
 8016828:	0089      	lsls	r1, r1, #2
 801682a:	468c      	mov	ip, r1
 801682c:	4463      	add	r3, ip
 801682e:	0019      	movs	r1, r3
 8016830:	4790      	blx	r2

    return USBD_OK;
 8016832:	2300      	movs	r3, #0
 8016834:	e000      	b.n	8016838 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8016836:	2302      	movs	r3, #2
  }
}
 8016838:	0018      	movs	r0, r3
 801683a:	46bd      	mov	sp, r7
 801683c:	b004      	add	sp, #16
 801683e:	bd80      	pop	{r7, pc}

08016840 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016840:	b590      	push	{r4, r7, lr}
 8016842:	b085      	sub	sp, #20
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016848:	687a      	ldr	r2, [r7, #4]
 801684a:	23ae      	movs	r3, #174	@ 0xae
 801684c:	009b      	lsls	r3, r3, #2
 801684e:	58d3      	ldr	r3, [r2, r3]
 8016850:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	23af      	movs	r3, #175	@ 0xaf
 8016856:	009b      	lsls	r3, r3, #2
 8016858:	58d3      	ldr	r3, [r2, r3]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d018      	beq.n	8016890 <USBD_CDC_EP0_RxReady+0x50>
 801685e:	68fa      	ldr	r2, [r7, #12]
 8016860:	2380      	movs	r3, #128	@ 0x80
 8016862:	009b      	lsls	r3, r3, #2
 8016864:	5cd3      	ldrb	r3, [r2, r3]
 8016866:	2bff      	cmp	r3, #255	@ 0xff
 8016868:	d012      	beq.n	8016890 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801686a:	687a      	ldr	r2, [r7, #4]
 801686c:	23af      	movs	r3, #175	@ 0xaf
 801686e:	009b      	lsls	r3, r3, #2
 8016870:	58d3      	ldr	r3, [r2, r3]
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	68f9      	ldr	r1, [r7, #12]
 8016876:	2280      	movs	r2, #128	@ 0x80
 8016878:	0092      	lsls	r2, r2, #2
 801687a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801687c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801687e:	68fa      	ldr	r2, [r7, #12]
 8016880:	4c06      	ldr	r4, [pc, #24]	@ (801689c <USBD_CDC_EP0_RxReady+0x5c>)
 8016882:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016884:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016886:	68fa      	ldr	r2, [r7, #12]
 8016888:	2380      	movs	r3, #128	@ 0x80
 801688a:	009b      	lsls	r3, r3, #2
 801688c:	21ff      	movs	r1, #255	@ 0xff
 801688e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8016890:	2300      	movs	r3, #0
}
 8016892:	0018      	movs	r0, r3
 8016894:	46bd      	mov	sp, r7
 8016896:	b005      	add	sp, #20
 8016898:	bd90      	pop	{r4, r7, pc}
 801689a:	46c0      	nop			@ (mov r8, r8)
 801689c:	00000201 	.word	0x00000201

080168a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2243      	movs	r2, #67	@ 0x43
 80168ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80168ae:	4b02      	ldr	r3, [pc, #8]	@ (80168b8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80168b0:	0018      	movs	r0, r3
 80168b2:	46bd      	mov	sp, r7
 80168b4:	b002      	add	sp, #8
 80168b6:	bd80      	pop	{r7, pc}
 80168b8:	20000114 	.word	0x20000114

080168bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2243      	movs	r2, #67	@ 0x43
 80168c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80168ca:	4b02      	ldr	r3, [pc, #8]	@ (80168d4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80168cc:	0018      	movs	r0, r3
 80168ce:	46bd      	mov	sp, r7
 80168d0:	b002      	add	sp, #8
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	200000d0 	.word	0x200000d0

080168d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2243      	movs	r2, #67	@ 0x43
 80168e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80168e6:	4b02      	ldr	r3, [pc, #8]	@ (80168f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80168e8:	0018      	movs	r0, r3
 80168ea:	46bd      	mov	sp, r7
 80168ec:	b002      	add	sp, #8
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	20000158 	.word	0x20000158

080168f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	220a      	movs	r2, #10
 8016900:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8016902:	4b02      	ldr	r3, [pc, #8]	@ (801690c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8016904:	0018      	movs	r0, r3
 8016906:	46bd      	mov	sp, r7
 8016908:	b002      	add	sp, #8
 801690a:	bd80      	pop	{r7, pc}
 801690c:	2000008c 	.word	0x2000008c

08016910 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801691a:	200f      	movs	r0, #15
 801691c:	183b      	adds	r3, r7, r0
 801691e:	2202      	movs	r2, #2
 8016920:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d007      	beq.n	8016938 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8016928:	687a      	ldr	r2, [r7, #4]
 801692a:	23af      	movs	r3, #175	@ 0xaf
 801692c:	009b      	lsls	r3, r3, #2
 801692e:	6839      	ldr	r1, [r7, #0]
 8016930:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8016932:	183b      	adds	r3, r7, r0
 8016934:	2200      	movs	r2, #0
 8016936:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8016938:	230f      	movs	r3, #15
 801693a:	18fb      	adds	r3, r7, r3
 801693c:	781b      	ldrb	r3, [r3, #0]
}
 801693e:	0018      	movs	r0, r3
 8016940:	46bd      	mov	sp, r7
 8016942:	b004      	add	sp, #16
 8016944:	bd80      	pop	{r7, pc}

08016946 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b086      	sub	sp, #24
 801694a:	af00      	add	r7, sp, #0
 801694c:	60f8      	str	r0, [r7, #12]
 801694e:	60b9      	str	r1, [r7, #8]
 8016950:	1dbb      	adds	r3, r7, #6
 8016952:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016954:	68fa      	ldr	r2, [r7, #12]
 8016956:	23ae      	movs	r3, #174	@ 0xae
 8016958:	009b      	lsls	r3, r3, #2
 801695a:	58d3      	ldr	r3, [r2, r3]
 801695c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801695e:	697a      	ldr	r2, [r7, #20]
 8016960:	2382      	movs	r3, #130	@ 0x82
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	68b9      	ldr	r1, [r7, #8]
 8016966:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8016968:	1dbb      	adds	r3, r7, #6
 801696a:	8819      	ldrh	r1, [r3, #0]
 801696c:	697a      	ldr	r2, [r7, #20]
 801696e:	2384      	movs	r3, #132	@ 0x84
 8016970:	009b      	lsls	r3, r3, #2
 8016972:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8016974:	2300      	movs	r3, #0
}
 8016976:	0018      	movs	r0, r3
 8016978:	46bd      	mov	sp, r7
 801697a:	b006      	add	sp, #24
 801697c:	bd80      	pop	{r7, pc}

0801697e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801697e:	b580      	push	{r7, lr}
 8016980:	b084      	sub	sp, #16
 8016982:	af00      	add	r7, sp, #0
 8016984:	6078      	str	r0, [r7, #4]
 8016986:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016988:	687a      	ldr	r2, [r7, #4]
 801698a:	23ae      	movs	r3, #174	@ 0xae
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	58d3      	ldr	r3, [r2, r3]
 8016990:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8016992:	68fa      	ldr	r2, [r7, #12]
 8016994:	2381      	movs	r3, #129	@ 0x81
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	6839      	ldr	r1, [r7, #0]
 801699a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801699c:	2300      	movs	r3, #0
}
 801699e:	0018      	movs	r0, r3
 80169a0:	46bd      	mov	sp, r7
 80169a2:	b004      	add	sp, #16
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80169a6:	b580      	push	{r7, lr}
 80169a8:	b084      	sub	sp, #16
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	23ae      	movs	r3, #174	@ 0xae
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	58d3      	ldr	r3, [r2, r3]
 80169b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80169b8:	687a      	ldr	r2, [r7, #4]
 80169ba:	23ae      	movs	r3, #174	@ 0xae
 80169bc:	009b      	lsls	r3, r3, #2
 80169be:	58d3      	ldr	r3, [r2, r3]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d022      	beq.n	8016a0a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	2385      	movs	r3, #133	@ 0x85
 80169c8:	009b      	lsls	r3, r3, #2
 80169ca:	58d3      	ldr	r3, [r2, r3]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d11a      	bne.n	8016a06 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80169d0:	68fa      	ldr	r2, [r7, #12]
 80169d2:	2385      	movs	r3, #133	@ 0x85
 80169d4:	009b      	lsls	r3, r3, #2
 80169d6:	2101      	movs	r1, #1
 80169d8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80169da:	68fa      	ldr	r2, [r7, #12]
 80169dc:	2384      	movs	r3, #132	@ 0x84
 80169de:	009b      	lsls	r3, r3, #2
 80169e0:	58d2      	ldr	r2, [r2, r3]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80169e6:	68fa      	ldr	r2, [r7, #12]
 80169e8:	2382      	movs	r3, #130	@ 0x82
 80169ea:	009b      	lsls	r3, r3, #2
 80169ec:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80169ee:	68fa      	ldr	r2, [r7, #12]
 80169f0:	2384      	movs	r3, #132	@ 0x84
 80169f2:	009b      	lsls	r3, r3, #2
 80169f4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	000a      	movs	r2, r1
 80169fc:	2181      	movs	r1, #129	@ 0x81
 80169fe:	f001 ff0c 	bl	801881a <USBD_LL_Transmit>

      return USBD_OK;
 8016a02:	2300      	movs	r3, #0
 8016a04:	e002      	b.n	8016a0c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8016a06:	2301      	movs	r3, #1
 8016a08:	e000      	b.n	8016a0c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8016a0a:	2302      	movs	r3, #2
  }
}
 8016a0c:	0018      	movs	r0, r3
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	b004      	add	sp, #16
 8016a12:	bd80      	pop	{r7, pc}

08016a14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016a1c:	687a      	ldr	r2, [r7, #4]
 8016a1e:	23ae      	movs	r3, #174	@ 0xae
 8016a20:	009b      	lsls	r3, r3, #2
 8016a22:	58d3      	ldr	r3, [r2, r3]
 8016a24:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8016a26:	687a      	ldr	r2, [r7, #4]
 8016a28:	23ae      	movs	r3, #174	@ 0xae
 8016a2a:	009b      	lsls	r3, r3, #2
 8016a2c:	58d3      	ldr	r3, [r2, r3]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d019      	beq.n	8016a66 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	7c1b      	ldrb	r3, [r3, #16]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d10a      	bne.n	8016a50 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016a3a:	68fa      	ldr	r2, [r7, #12]
 8016a3c:	2381      	movs	r3, #129	@ 0x81
 8016a3e:	009b      	lsls	r3, r3, #2
 8016a40:	58d2      	ldr	r2, [r2, r3]
 8016a42:	2380      	movs	r3, #128	@ 0x80
 8016a44:	009b      	lsls	r3, r3, #2
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	2101      	movs	r1, #1
 8016a4a:	f001 ff1d 	bl	8018888 <USBD_LL_PrepareReceive>
 8016a4e:	e008      	b.n	8016a62 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016a50:	68fa      	ldr	r2, [r7, #12]
 8016a52:	2381      	movs	r3, #129	@ 0x81
 8016a54:	009b      	lsls	r3, r3, #2
 8016a56:	58d2      	ldr	r2, [r2, r3]
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	2340      	movs	r3, #64	@ 0x40
 8016a5c:	2101      	movs	r1, #1
 8016a5e:	f001 ff13 	bl	8018888 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8016a62:	2300      	movs	r3, #0
 8016a64:	e000      	b.n	8016a68 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8016a66:	2302      	movs	r3, #2
  }
}
 8016a68:	0018      	movs	r0, r3
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	b004      	add	sp, #16
 8016a6e:	bd80      	pop	{r7, pc}

08016a70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b084      	sub	sp, #16
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	60f8      	str	r0, [r7, #12]
 8016a78:	60b9      	str	r1, [r7, #8]
 8016a7a:	1dfb      	adds	r3, r7, #7
 8016a7c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d101      	bne.n	8016a88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016a84:	2302      	movs	r3, #2
 8016a86:	e020      	b.n	8016aca <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8016a88:	68fa      	ldr	r2, [r7, #12]
 8016a8a:	23ad      	movs	r3, #173	@ 0xad
 8016a8c:	009b      	lsls	r3, r3, #2
 8016a8e:	58d3      	ldr	r3, [r2, r3]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d004      	beq.n	8016a9e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8016a94:	68fa      	ldr	r2, [r7, #12]
 8016a96:	23ad      	movs	r3, #173	@ 0xad
 8016a98:	009b      	lsls	r3, r3, #2
 8016a9a:	2100      	movs	r1, #0
 8016a9c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d004      	beq.n	8016aae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016aa4:	68fa      	ldr	r2, [r7, #12]
 8016aa6:	23ac      	movs	r3, #172	@ 0xac
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	68b9      	ldr	r1, [r7, #8]
 8016aac:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	23a7      	movs	r3, #167	@ 0xa7
 8016ab2:	009b      	lsls	r3, r3, #2
 8016ab4:	2101      	movs	r1, #1
 8016ab6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	1dfa      	adds	r2, r7, #7
 8016abc:	7812      	ldrb	r2, [r2, #0]
 8016abe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	0018      	movs	r0, r3
 8016ac4:	f001 fd0c 	bl	80184e0 <USBD_LL_Init>

  return USBD_OK;
 8016ac8:	2300      	movs	r3, #0
}
 8016aca:	0018      	movs	r0, r3
 8016acc:	46bd      	mov	sp, r7
 8016ace:	b004      	add	sp, #16
 8016ad0:	bd80      	pop	{r7, pc}

08016ad2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016ad2:	b580      	push	{r7, lr}
 8016ad4:	b084      	sub	sp, #16
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	6078      	str	r0, [r7, #4]
 8016ada:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8016adc:	200f      	movs	r0, #15
 8016ade:	183b      	adds	r3, r7, r0
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8016ae4:	683b      	ldr	r3, [r7, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d008      	beq.n	8016afc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	23ad      	movs	r3, #173	@ 0xad
 8016aee:	009b      	lsls	r3, r3, #2
 8016af0:	6839      	ldr	r1, [r7, #0]
 8016af2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8016af4:	183b      	adds	r3, r7, r0
 8016af6:	2200      	movs	r2, #0
 8016af8:	701a      	strb	r2, [r3, #0]
 8016afa:	e003      	b.n	8016b04 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8016afc:	230f      	movs	r3, #15
 8016afe:	18fb      	adds	r3, r7, r3
 8016b00:	2202      	movs	r2, #2
 8016b02:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8016b04:	230f      	movs	r3, #15
 8016b06:	18fb      	adds	r3, r7, r3
 8016b08:	781b      	ldrb	r3, [r3, #0]
}
 8016b0a:	0018      	movs	r0, r3
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	b004      	add	sp, #16
 8016b10:	bd80      	pop	{r7, pc}

08016b12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016b12:	b580      	push	{r7, lr}
 8016b14:	b082      	sub	sp, #8
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	0018      	movs	r0, r3
 8016b1e:	f001 fd43 	bl	80185a8 <USBD_LL_Start>

  return USBD_OK;
 8016b22:	2300      	movs	r3, #0
}
 8016b24:	0018      	movs	r0, r3
 8016b26:	46bd      	mov	sp, r7
 8016b28:	b002      	add	sp, #8
 8016b2a:	bd80      	pop	{r7, pc}

08016b2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b34:	2300      	movs	r3, #0
}
 8016b36:	0018      	movs	r0, r3
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	b002      	add	sp, #8
 8016b3c:	bd80      	pop	{r7, pc}

08016b3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016b3e:	b590      	push	{r4, r7, lr}
 8016b40:	b085      	sub	sp, #20
 8016b42:	af00      	add	r7, sp, #0
 8016b44:	6078      	str	r0, [r7, #4]
 8016b46:	000a      	movs	r2, r1
 8016b48:	1cfb      	adds	r3, r7, #3
 8016b4a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016b4c:	240f      	movs	r4, #15
 8016b4e:	193b      	adds	r3, r7, r4
 8016b50:	2202      	movs	r2, #2
 8016b52:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8016b54:	687a      	ldr	r2, [r7, #4]
 8016b56:	23ad      	movs	r3, #173	@ 0xad
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	58d3      	ldr	r3, [r2, r3]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d00e      	beq.n	8016b7e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8016b60:	687a      	ldr	r2, [r7, #4]
 8016b62:	23ad      	movs	r3, #173	@ 0xad
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	58d3      	ldr	r3, [r2, r3]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	1cfa      	adds	r2, r7, #3
 8016b6c:	7811      	ldrb	r1, [r2, #0]
 8016b6e:	687a      	ldr	r2, [r7, #4]
 8016b70:	0010      	movs	r0, r2
 8016b72:	4798      	blx	r3
 8016b74:	1e03      	subs	r3, r0, #0
 8016b76:	d102      	bne.n	8016b7e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8016b78:	193b      	adds	r3, r7, r4
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8016b7e:	230f      	movs	r3, #15
 8016b80:	18fb      	adds	r3, r7, r3
 8016b82:	781b      	ldrb	r3, [r3, #0]
}
 8016b84:	0018      	movs	r0, r3
 8016b86:	46bd      	mov	sp, r7
 8016b88:	b005      	add	sp, #20
 8016b8a:	bd90      	pop	{r4, r7, pc}

08016b8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	000a      	movs	r2, r1
 8016b96:	1cfb      	adds	r3, r7, #3
 8016b98:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8016b9a:	687a      	ldr	r2, [r7, #4]
 8016b9c:	23ad      	movs	r3, #173	@ 0xad
 8016b9e:	009b      	lsls	r3, r3, #2
 8016ba0:	58d3      	ldr	r3, [r2, r3]
 8016ba2:	685b      	ldr	r3, [r3, #4]
 8016ba4:	1cfa      	adds	r2, r7, #3
 8016ba6:	7811      	ldrb	r1, [r2, #0]
 8016ba8:	687a      	ldr	r2, [r7, #4]
 8016baa:	0010      	movs	r0, r2
 8016bac:	4798      	blx	r3

  return USBD_OK;
 8016bae:	2300      	movs	r3, #0
}
 8016bb0:	0018      	movs	r0, r3
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	b002      	add	sp, #8
 8016bb6:	bd80      	pop	{r7, pc}

08016bb8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	22aa      	movs	r2, #170	@ 0xaa
 8016bc6:	0092      	lsls	r2, r2, #2
 8016bc8:	4694      	mov	ip, r2
 8016bca:	4463      	add	r3, ip
 8016bcc:	683a      	ldr	r2, [r7, #0]
 8016bce:	0011      	movs	r1, r2
 8016bd0:	0018      	movs	r0, r3
 8016bd2:	f001 f810 	bl	8017bf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	23a5      	movs	r3, #165	@ 0xa5
 8016bda:	009b      	lsls	r3, r3, #2
 8016bdc:	2101      	movs	r1, #1
 8016bde:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	4a23      	ldr	r2, [pc, #140]	@ (8016c70 <USBD_LL_SetupStage+0xb8>)
 8016be4:	5a9b      	ldrh	r3, [r3, r2]
 8016be6:	0019      	movs	r1, r3
 8016be8:	687a      	ldr	r2, [r7, #4]
 8016bea:	23a6      	movs	r3, #166	@ 0xa6
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	23aa      	movs	r3, #170	@ 0xaa
 8016bf4:	009b      	lsls	r3, r3, #2
 8016bf6:	5cd3      	ldrb	r3, [r2, r3]
 8016bf8:	001a      	movs	r2, r3
 8016bfa:	231f      	movs	r3, #31
 8016bfc:	4013      	ands	r3, r2
 8016bfe:	2b02      	cmp	r3, #2
 8016c00:	d019      	beq.n	8016c36 <USBD_LL_SetupStage+0x7e>
 8016c02:	d822      	bhi.n	8016c4a <USBD_LL_SetupStage+0x92>
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d002      	beq.n	8016c0e <USBD_LL_SetupStage+0x56>
 8016c08:	2b01      	cmp	r3, #1
 8016c0a:	d00a      	beq.n	8016c22 <USBD_LL_SetupStage+0x6a>
 8016c0c:	e01d      	b.n	8016c4a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	22aa      	movs	r2, #170	@ 0xaa
 8016c12:	0092      	lsls	r2, r2, #2
 8016c14:	189a      	adds	r2, r3, r2
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	0011      	movs	r1, r2
 8016c1a:	0018      	movs	r0, r3
 8016c1c:	f000 fa10 	bl	8017040 <USBD_StdDevReq>
      break;
 8016c20:	e020      	b.n	8016c64 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	22aa      	movs	r2, #170	@ 0xaa
 8016c26:	0092      	lsls	r2, r2, #2
 8016c28:	189a      	adds	r2, r3, r2
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	0011      	movs	r1, r2
 8016c2e:	0018      	movs	r0, r3
 8016c30:	f000 fa78 	bl	8017124 <USBD_StdItfReq>
      break;
 8016c34:	e016      	b.n	8016c64 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	22aa      	movs	r2, #170	@ 0xaa
 8016c3a:	0092      	lsls	r2, r2, #2
 8016c3c:	189a      	adds	r2, r3, r2
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	0011      	movs	r1, r2
 8016c42:	0018      	movs	r0, r3
 8016c44:	f000 fac5 	bl	80171d2 <USBD_StdEPReq>
      break;
 8016c48:	e00c      	b.n	8016c64 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	23aa      	movs	r3, #170	@ 0xaa
 8016c4e:	009b      	lsls	r3, r3, #2
 8016c50:	5cd3      	ldrb	r3, [r2, r3]
 8016c52:	227f      	movs	r2, #127	@ 0x7f
 8016c54:	4393      	bics	r3, r2
 8016c56:	b2da      	uxtb	r2, r3
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	0011      	movs	r1, r2
 8016c5c:	0018      	movs	r0, r3
 8016c5e:	f001 fd2a 	bl	80186b6 <USBD_LL_StallEP>
      break;
 8016c62:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8016c64:	2300      	movs	r3, #0
}
 8016c66:	0018      	movs	r0, r3
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	b002      	add	sp, #8
 8016c6c:	bd80      	pop	{r7, pc}
 8016c6e:	46c0      	nop			@ (mov r8, r8)
 8016c70:	000002ae 	.word	0x000002ae

08016c74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b086      	sub	sp, #24
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	607a      	str	r2, [r7, #4]
 8016c7e:	200b      	movs	r0, #11
 8016c80:	183b      	adds	r3, r7, r0
 8016c82:	1c0a      	adds	r2, r1, #0
 8016c84:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016c86:	183b      	adds	r3, r7, r0
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d154      	bne.n	8016d38 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	3355      	adds	r3, #85	@ 0x55
 8016c92:	33ff      	adds	r3, #255	@ 0xff
 8016c94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016c96:	68fa      	ldr	r2, [r7, #12]
 8016c98:	23a5      	movs	r3, #165	@ 0xa5
 8016c9a:	009b      	lsls	r3, r3, #2
 8016c9c:	58d3      	ldr	r3, [r2, r3]
 8016c9e:	2b03      	cmp	r3, #3
 8016ca0:	d139      	bne.n	8016d16 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	68da      	ldr	r2, [r3, #12]
 8016ca6:	697b      	ldr	r3, [r7, #20]
 8016ca8:	691b      	ldr	r3, [r3, #16]
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d919      	bls.n	8016ce2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	68da      	ldr	r2, [r3, #12]
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	691b      	ldr	r3, [r3, #16]
 8016cb6:	1ad2      	subs	r2, r2, r3
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016cbc:	697b      	ldr	r3, [r7, #20]
 8016cbe:	68da      	ldr	r2, [r3, #12]
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d203      	bcs.n	8016cd0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	e002      	b.n	8016cd6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	6879      	ldr	r1, [r7, #4]
 8016cd8:	68f8      	ldr	r0, [r7, #12]
 8016cda:	001a      	movs	r2, r3
 8016cdc:	f001 f898 	bl	8017e10 <USBD_CtlContinueRx>
 8016ce0:	e045      	b.n	8016d6e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016ce2:	68fa      	ldr	r2, [r7, #12]
 8016ce4:	23ad      	movs	r3, #173	@ 0xad
 8016ce6:	009b      	lsls	r3, r3, #2
 8016ce8:	58d3      	ldr	r3, [r2, r3]
 8016cea:	691b      	ldr	r3, [r3, #16]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d00d      	beq.n	8016d0c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016cf0:	68fa      	ldr	r2, [r7, #12]
 8016cf2:	23a7      	movs	r3, #167	@ 0xa7
 8016cf4:	009b      	lsls	r3, r3, #2
 8016cf6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016cf8:	2b03      	cmp	r3, #3
 8016cfa:	d107      	bne.n	8016d0c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8016cfc:	68fa      	ldr	r2, [r7, #12]
 8016cfe:	23ad      	movs	r3, #173	@ 0xad
 8016d00:	009b      	lsls	r3, r3, #2
 8016d02:	58d3      	ldr	r3, [r2, r3]
 8016d04:	691b      	ldr	r3, [r3, #16]
 8016d06:	68fa      	ldr	r2, [r7, #12]
 8016d08:	0010      	movs	r0, r2
 8016d0a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	0018      	movs	r0, r3
 8016d10:	f001 f891 	bl	8017e36 <USBD_CtlSendStatus>
 8016d14:	e02b      	b.n	8016d6e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8016d16:	68fa      	ldr	r2, [r7, #12]
 8016d18:	23a5      	movs	r3, #165	@ 0xa5
 8016d1a:	009b      	lsls	r3, r3, #2
 8016d1c:	58d3      	ldr	r3, [r2, r3]
 8016d1e:	2b05      	cmp	r3, #5
 8016d20:	d125      	bne.n	8016d6e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8016d22:	68fa      	ldr	r2, [r7, #12]
 8016d24:	23a5      	movs	r3, #165	@ 0xa5
 8016d26:	009b      	lsls	r3, r3, #2
 8016d28:	2100      	movs	r1, #0
 8016d2a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	2100      	movs	r1, #0
 8016d30:	0018      	movs	r0, r3
 8016d32:	f001 fcc0 	bl	80186b6 <USBD_LL_StallEP>
 8016d36:	e01a      	b.n	8016d6e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8016d38:	68fa      	ldr	r2, [r7, #12]
 8016d3a:	23ad      	movs	r3, #173	@ 0xad
 8016d3c:	009b      	lsls	r3, r3, #2
 8016d3e:	58d3      	ldr	r3, [r2, r3]
 8016d40:	699b      	ldr	r3, [r3, #24]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d011      	beq.n	8016d6a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016d46:	68fa      	ldr	r2, [r7, #12]
 8016d48:	23a7      	movs	r3, #167	@ 0xa7
 8016d4a:	009b      	lsls	r3, r3, #2
 8016d4c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8016d4e:	2b03      	cmp	r3, #3
 8016d50:	d10b      	bne.n	8016d6a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8016d52:	68fa      	ldr	r2, [r7, #12]
 8016d54:	23ad      	movs	r3, #173	@ 0xad
 8016d56:	009b      	lsls	r3, r3, #2
 8016d58:	58d3      	ldr	r3, [r2, r3]
 8016d5a:	699b      	ldr	r3, [r3, #24]
 8016d5c:	220b      	movs	r2, #11
 8016d5e:	18ba      	adds	r2, r7, r2
 8016d60:	7811      	ldrb	r1, [r2, #0]
 8016d62:	68fa      	ldr	r2, [r7, #12]
 8016d64:	0010      	movs	r0, r2
 8016d66:	4798      	blx	r3
 8016d68:	e001      	b.n	8016d6e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016d6a:	2302      	movs	r3, #2
 8016d6c:	e000      	b.n	8016d70 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8016d6e:	2300      	movs	r3, #0
}
 8016d70:	0018      	movs	r0, r3
 8016d72:	46bd      	mov	sp, r7
 8016d74:	b006      	add	sp, #24
 8016d76:	bd80      	pop	{r7, pc}

08016d78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b086      	sub	sp, #24
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	60f8      	str	r0, [r7, #12]
 8016d80:	607a      	str	r2, [r7, #4]
 8016d82:	200b      	movs	r0, #11
 8016d84:	183b      	adds	r3, r7, r0
 8016d86:	1c0a      	adds	r2, r1, #0
 8016d88:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016d8a:	183b      	adds	r3, r7, r0
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d000      	beq.n	8016d94 <USBD_LL_DataInStage+0x1c>
 8016d92:	e08e      	b.n	8016eb2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	3314      	adds	r3, #20
 8016d98:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016d9a:	68fa      	ldr	r2, [r7, #12]
 8016d9c:	23a5      	movs	r3, #165	@ 0xa5
 8016d9e:	009b      	lsls	r3, r3, #2
 8016da0:	58d3      	ldr	r3, [r2, r3]
 8016da2:	2b02      	cmp	r3, #2
 8016da4:	d164      	bne.n	8016e70 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	68da      	ldr	r2, [r3, #12]
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	691b      	ldr	r3, [r3, #16]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d915      	bls.n	8016dde <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	68da      	ldr	r2, [r3, #12]
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	691b      	ldr	r3, [r3, #16]
 8016dba:	1ad2      	subs	r2, r2, r3
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	68db      	ldr	r3, [r3, #12]
 8016dc4:	b29a      	uxth	r2, r3
 8016dc6:	6879      	ldr	r1, [r7, #4]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	0018      	movs	r0, r3
 8016dcc:	f000 ffe9 	bl	8017da2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016dd0:	68f8      	ldr	r0, [r7, #12]
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	f001 fd56 	bl	8018888 <USBD_LL_PrepareReceive>
 8016ddc:	e059      	b.n	8016e92 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	689a      	ldr	r2, [r3, #8]
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	691b      	ldr	r3, [r3, #16]
 8016de6:	0019      	movs	r1, r3
 8016de8:	0010      	movs	r0, r2
 8016dea:	f7e9 fa57 	bl	800029c <__aeabi_uidivmod>
 8016dee:	1e0b      	subs	r3, r1, #0
 8016df0:	d11f      	bne.n	8016e32 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	689a      	ldr	r2, [r3, #8]
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d319      	bcc.n	8016e32 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	689a      	ldr	r2, [r3, #8]
 8016e02:	68f9      	ldr	r1, [r7, #12]
 8016e04:	23a6      	movs	r3, #166	@ 0xa6
 8016e06:	009b      	lsls	r3, r3, #2
 8016e08:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	d211      	bcs.n	8016e32 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	2200      	movs	r2, #0
 8016e12:	2100      	movs	r1, #0
 8016e14:	0018      	movs	r0, r3
 8016e16:	f000 ffc4 	bl	8017da2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016e1a:	68fa      	ldr	r2, [r7, #12]
 8016e1c:	23a6      	movs	r3, #166	@ 0xa6
 8016e1e:	009b      	lsls	r3, r3, #2
 8016e20:	2100      	movs	r1, #0
 8016e22:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e24:	68f8      	ldr	r0, [r7, #12]
 8016e26:	2300      	movs	r3, #0
 8016e28:	2200      	movs	r2, #0
 8016e2a:	2100      	movs	r1, #0
 8016e2c:	f001 fd2c 	bl	8018888 <USBD_LL_PrepareReceive>
 8016e30:	e02f      	b.n	8016e92 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016e32:	68fa      	ldr	r2, [r7, #12]
 8016e34:	23ad      	movs	r3, #173	@ 0xad
 8016e36:	009b      	lsls	r3, r3, #2
 8016e38:	58d3      	ldr	r3, [r2, r3]
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d00d      	beq.n	8016e5c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016e40:	68fa      	ldr	r2, [r7, #12]
 8016e42:	23a7      	movs	r3, #167	@ 0xa7
 8016e44:	009b      	lsls	r3, r3, #2
 8016e46:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016e48:	2b03      	cmp	r3, #3
 8016e4a:	d107      	bne.n	8016e5c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8016e4c:	68fa      	ldr	r2, [r7, #12]
 8016e4e:	23ad      	movs	r3, #173	@ 0xad
 8016e50:	009b      	lsls	r3, r3, #2
 8016e52:	58d3      	ldr	r3, [r2, r3]
 8016e54:	68db      	ldr	r3, [r3, #12]
 8016e56:	68fa      	ldr	r2, [r7, #12]
 8016e58:	0010      	movs	r0, r2
 8016e5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	2180      	movs	r1, #128	@ 0x80
 8016e60:	0018      	movs	r0, r3
 8016e62:	f001 fc28 	bl	80186b6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	0018      	movs	r0, r3
 8016e6a:	f000 fff8 	bl	8017e5e <USBD_CtlReceiveStatus>
 8016e6e:	e010      	b.n	8016e92 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e70:	68fa      	ldr	r2, [r7, #12]
 8016e72:	23a5      	movs	r3, #165	@ 0xa5
 8016e74:	009b      	lsls	r3, r3, #2
 8016e76:	58d3      	ldr	r3, [r2, r3]
 8016e78:	2b04      	cmp	r3, #4
 8016e7a:	d005      	beq.n	8016e88 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8016e7c:	68fa      	ldr	r2, [r7, #12]
 8016e7e:	23a5      	movs	r3, #165	@ 0xa5
 8016e80:	009b      	lsls	r3, r3, #2
 8016e82:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d104      	bne.n	8016e92 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	2180      	movs	r1, #128	@ 0x80
 8016e8c:	0018      	movs	r0, r3
 8016e8e:	f001 fc12 	bl	80186b6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8016e92:	68fa      	ldr	r2, [r7, #12]
 8016e94:	23a8      	movs	r3, #168	@ 0xa8
 8016e96:	009b      	lsls	r3, r3, #2
 8016e98:	5cd3      	ldrb	r3, [r2, r3]
 8016e9a:	2b01      	cmp	r3, #1
 8016e9c:	d124      	bne.n	8016ee8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	0018      	movs	r0, r3
 8016ea2:	f7ff fe43 	bl	8016b2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016ea6:	68fa      	ldr	r2, [r7, #12]
 8016ea8:	23a8      	movs	r3, #168	@ 0xa8
 8016eaa:	009b      	lsls	r3, r3, #2
 8016eac:	2100      	movs	r1, #0
 8016eae:	54d1      	strb	r1, [r2, r3]
 8016eb0:	e01a      	b.n	8016ee8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8016eb2:	68fa      	ldr	r2, [r7, #12]
 8016eb4:	23ad      	movs	r3, #173	@ 0xad
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	58d3      	ldr	r3, [r2, r3]
 8016eba:	695b      	ldr	r3, [r3, #20]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d011      	beq.n	8016ee4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016ec0:	68fa      	ldr	r2, [r7, #12]
 8016ec2:	23a7      	movs	r3, #167	@ 0xa7
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8016ec8:	2b03      	cmp	r3, #3
 8016eca:	d10b      	bne.n	8016ee4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8016ecc:	68fa      	ldr	r2, [r7, #12]
 8016ece:	23ad      	movs	r3, #173	@ 0xad
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	58d3      	ldr	r3, [r2, r3]
 8016ed4:	695b      	ldr	r3, [r3, #20]
 8016ed6:	220b      	movs	r2, #11
 8016ed8:	18ba      	adds	r2, r7, r2
 8016eda:	7811      	ldrb	r1, [r2, #0]
 8016edc:	68fa      	ldr	r2, [r7, #12]
 8016ede:	0010      	movs	r0, r2
 8016ee0:	4798      	blx	r3
 8016ee2:	e001      	b.n	8016ee8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016ee4:	2302      	movs	r3, #2
 8016ee6:	e000      	b.n	8016eea <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8016ee8:	2300      	movs	r3, #0
}
 8016eea:	0018      	movs	r0, r3
 8016eec:	46bd      	mov	sp, r7
 8016eee:	b006      	add	sp, #24
 8016ef0:	bd80      	pop	{r7, pc}

08016ef2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016ef2:	b580      	push	{r7, lr}
 8016ef4:	b082      	sub	sp, #8
 8016ef6:	af00      	add	r7, sp, #0
 8016ef8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016efa:	6878      	ldr	r0, [r7, #4]
 8016efc:	2340      	movs	r3, #64	@ 0x40
 8016efe:	2200      	movs	r2, #0
 8016f00:	2100      	movs	r1, #0
 8016f02:	f001 fb76 	bl	80185f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016f06:	687a      	ldr	r2, [r7, #4]
 8016f08:	23ac      	movs	r3, #172	@ 0xac
 8016f0a:	005b      	lsls	r3, r3, #1
 8016f0c:	2101      	movs	r1, #1
 8016f0e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	23b2      	movs	r3, #178	@ 0xb2
 8016f14:	005b      	lsls	r3, r3, #1
 8016f16:	2140      	movs	r1, #64	@ 0x40
 8016f18:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016f1a:	6878      	ldr	r0, [r7, #4]
 8016f1c:	2340      	movs	r3, #64	@ 0x40
 8016f1e:	2200      	movs	r2, #0
 8016f20:	2180      	movs	r1, #128	@ 0x80
 8016f22:	f001 fb66 	bl	80185f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2201      	movs	r2, #1
 8016f2a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2240      	movs	r2, #64	@ 0x40
 8016f30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f32:	687a      	ldr	r2, [r7, #4]
 8016f34:	23a7      	movs	r3, #167	@ 0xa7
 8016f36:	009b      	lsls	r3, r3, #2
 8016f38:	2101      	movs	r1, #1
 8016f3a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	23a5      	movs	r3, #165	@ 0xa5
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	2100      	movs	r1, #0
 8016f44:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	2200      	movs	r2, #0
 8016f4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016f4c:	687a      	ldr	r2, [r7, #4]
 8016f4e:	23a9      	movs	r3, #169	@ 0xa9
 8016f50:	009b      	lsls	r3, r3, #2
 8016f52:	2100      	movs	r1, #0
 8016f54:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	23ae      	movs	r3, #174	@ 0xae
 8016f5a:	009b      	lsls	r3, r3, #2
 8016f5c:	58d3      	ldr	r3, [r2, r3]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d00a      	beq.n	8016f78 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016f62:	687a      	ldr	r2, [r7, #4]
 8016f64:	23ad      	movs	r3, #173	@ 0xad
 8016f66:	009b      	lsls	r3, r3, #2
 8016f68:	58d3      	ldr	r3, [r2, r3]
 8016f6a:	685a      	ldr	r2, [r3, #4]
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	b2d9      	uxtb	r1, r3
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	0018      	movs	r0, r3
 8016f76:	4790      	blx	r2
  }

  return USBD_OK;
 8016f78:	2300      	movs	r3, #0
}
 8016f7a:	0018      	movs	r0, r3
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	b002      	add	sp, #8
 8016f80:	bd80      	pop	{r7, pc}

08016f82 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016f82:	b580      	push	{r7, lr}
 8016f84:	b082      	sub	sp, #8
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	6078      	str	r0, [r7, #4]
 8016f8a:	000a      	movs	r2, r1
 8016f8c:	1cfb      	adds	r3, r7, #3
 8016f8e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	1cfa      	adds	r2, r7, #3
 8016f94:	7812      	ldrb	r2, [r2, #0]
 8016f96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016f98:	2300      	movs	r3, #0
}
 8016f9a:	0018      	movs	r0, r3
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	b002      	add	sp, #8
 8016fa0:	bd80      	pop	{r7, pc}
	...

08016fa4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b082      	sub	sp, #8
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8016fac:	687a      	ldr	r2, [r7, #4]
 8016fae:	23a7      	movs	r3, #167	@ 0xa7
 8016fb0:	009b      	lsls	r3, r3, #2
 8016fb2:	5cd1      	ldrb	r1, [r2, r3]
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	4a06      	ldr	r2, [pc, #24]	@ (8016fd0 <USBD_LL_Suspend+0x2c>)
 8016fb8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	23a7      	movs	r3, #167	@ 0xa7
 8016fbe:	009b      	lsls	r3, r3, #2
 8016fc0:	2104      	movs	r1, #4
 8016fc2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8016fc4:	2300      	movs	r3, #0
}
 8016fc6:	0018      	movs	r0, r3
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	b002      	add	sp, #8
 8016fcc:	bd80      	pop	{r7, pc}
 8016fce:	46c0      	nop			@ (mov r8, r8)
 8016fd0:	0000029d 	.word	0x0000029d

08016fd4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	23a7      	movs	r3, #167	@ 0xa7
 8016fe0:	009b      	lsls	r3, r3, #2
 8016fe2:	5cd3      	ldrb	r3, [r2, r3]
 8016fe4:	2b04      	cmp	r3, #4
 8016fe6:	d106      	bne.n	8016ff6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	4a05      	ldr	r2, [pc, #20]	@ (8017000 <USBD_LL_Resume+0x2c>)
 8016fec:	5c99      	ldrb	r1, [r3, r2]
 8016fee:	687a      	ldr	r2, [r7, #4]
 8016ff0:	23a7      	movs	r3, #167	@ 0xa7
 8016ff2:	009b      	lsls	r3, r3, #2
 8016ff4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8016ff6:	2300      	movs	r3, #0
}
 8016ff8:	0018      	movs	r0, r3
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	b002      	add	sp, #8
 8016ffe:	bd80      	pop	{r7, pc}
 8017000:	0000029d 	.word	0x0000029d

08017004 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b082      	sub	sp, #8
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	23a7      	movs	r3, #167	@ 0xa7
 8017010:	009b      	lsls	r3, r3, #2
 8017012:	5cd3      	ldrb	r3, [r2, r3]
 8017014:	2b03      	cmp	r3, #3
 8017016:	d10e      	bne.n	8017036 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8017018:	687a      	ldr	r2, [r7, #4]
 801701a:	23ad      	movs	r3, #173	@ 0xad
 801701c:	009b      	lsls	r3, r3, #2
 801701e:	58d3      	ldr	r3, [r2, r3]
 8017020:	69db      	ldr	r3, [r3, #28]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d007      	beq.n	8017036 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	23ad      	movs	r3, #173	@ 0xad
 801702a:	009b      	lsls	r3, r3, #2
 801702c:	58d3      	ldr	r3, [r2, r3]
 801702e:	69db      	ldr	r3, [r3, #28]
 8017030:	687a      	ldr	r2, [r7, #4]
 8017032:	0010      	movs	r0, r2
 8017034:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017036:	2300      	movs	r3, #0
}
 8017038:	0018      	movs	r0, r3
 801703a:	46bd      	mov	sp, r7
 801703c:	b002      	add	sp, #8
 801703e:	bd80      	pop	{r7, pc}

08017040 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b084      	sub	sp, #16
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801704a:	230f      	movs	r3, #15
 801704c:	18fb      	adds	r3, r7, r3
 801704e:	2200      	movs	r2, #0
 8017050:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	781b      	ldrb	r3, [r3, #0]
 8017056:	001a      	movs	r2, r3
 8017058:	2360      	movs	r3, #96	@ 0x60
 801705a:	4013      	ands	r3, r2
 801705c:	2b40      	cmp	r3, #64	@ 0x40
 801705e:	d004      	beq.n	801706a <USBD_StdDevReq+0x2a>
 8017060:	d84f      	bhi.n	8017102 <USBD_StdDevReq+0xc2>
 8017062:	2b00      	cmp	r3, #0
 8017064:	d00b      	beq.n	801707e <USBD_StdDevReq+0x3e>
 8017066:	2b20      	cmp	r3, #32
 8017068:	d14b      	bne.n	8017102 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801706a:	687a      	ldr	r2, [r7, #4]
 801706c:	23ad      	movs	r3, #173	@ 0xad
 801706e:	009b      	lsls	r3, r3, #2
 8017070:	58d3      	ldr	r3, [r2, r3]
 8017072:	689b      	ldr	r3, [r3, #8]
 8017074:	6839      	ldr	r1, [r7, #0]
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	0010      	movs	r0, r2
 801707a:	4798      	blx	r3
      break;
 801707c:	e048      	b.n	8017110 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	785b      	ldrb	r3, [r3, #1]
 8017082:	2b09      	cmp	r3, #9
 8017084:	d835      	bhi.n	80170f2 <USBD_StdDevReq+0xb2>
 8017086:	009a      	lsls	r2, r3, #2
 8017088:	4b25      	ldr	r3, [pc, #148]	@ (8017120 <USBD_StdDevReq+0xe0>)
 801708a:	18d3      	adds	r3, r2, r3
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017090:	683a      	ldr	r2, [r7, #0]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	0011      	movs	r1, r2
 8017096:	0018      	movs	r0, r3
 8017098:	f000 fa52 	bl	8017540 <USBD_GetDescriptor>
          break;
 801709c:	e030      	b.n	8017100 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801709e:	683a      	ldr	r2, [r7, #0]
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	0011      	movs	r1, r2
 80170a4:	0018      	movs	r0, r3
 80170a6:	f000 fbfd 	bl	80178a4 <USBD_SetAddress>
          break;
 80170aa:	e029      	b.n	8017100 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80170ac:	683a      	ldr	r2, [r7, #0]
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	0011      	movs	r1, r2
 80170b2:	0018      	movs	r0, r3
 80170b4:	f000 fc4a 	bl	801794c <USBD_SetConfig>
          break;
 80170b8:	e022      	b.n	8017100 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80170ba:	683a      	ldr	r2, [r7, #0]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	0011      	movs	r1, r2
 80170c0:	0018      	movs	r0, r3
 80170c2:	f000 fce7 	bl	8017a94 <USBD_GetConfig>
          break;
 80170c6:	e01b      	b.n	8017100 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80170c8:	683a      	ldr	r2, [r7, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	0011      	movs	r1, r2
 80170ce:	0018      	movs	r0, r3
 80170d0:	f000 fd1b 	bl	8017b0a <USBD_GetStatus>
          break;
 80170d4:	e014      	b.n	8017100 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80170d6:	683a      	ldr	r2, [r7, #0]
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	0011      	movs	r1, r2
 80170dc:	0018      	movs	r0, r3
 80170de:	f000 fd4e 	bl	8017b7e <USBD_SetFeature>
          break;
 80170e2:	e00d      	b.n	8017100 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80170e4:	683a      	ldr	r2, [r7, #0]
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	0011      	movs	r1, r2
 80170ea:	0018      	movs	r0, r3
 80170ec:	f000 fd5d 	bl	8017baa <USBD_ClrFeature>
          break;
 80170f0:	e006      	b.n	8017100 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80170f2:	683a      	ldr	r2, [r7, #0]
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	0011      	movs	r1, r2
 80170f8:	0018      	movs	r0, r3
 80170fa:	f000 fdb4 	bl	8017c66 <USBD_CtlError>
          break;
 80170fe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017100:	e006      	b.n	8017110 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8017102:	683a      	ldr	r2, [r7, #0]
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	0011      	movs	r1, r2
 8017108:	0018      	movs	r0, r3
 801710a:	f000 fdac 	bl	8017c66 <USBD_CtlError>
      break;
 801710e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8017110:	230f      	movs	r3, #15
 8017112:	18fb      	adds	r3, r7, r3
 8017114:	781b      	ldrb	r3, [r3, #0]
}
 8017116:	0018      	movs	r0, r3
 8017118:	46bd      	mov	sp, r7
 801711a:	b004      	add	sp, #16
 801711c:	bd80      	pop	{r7, pc}
 801711e:	46c0      	nop			@ (mov r8, r8)
 8017120:	0801f318 	.word	0x0801f318

08017124 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8017124:	b5b0      	push	{r4, r5, r7, lr}
 8017126:	b084      	sub	sp, #16
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
 801712c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801712e:	230f      	movs	r3, #15
 8017130:	18fb      	adds	r3, r7, r3
 8017132:	2200      	movs	r2, #0
 8017134:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	001a      	movs	r2, r3
 801713c:	2360      	movs	r3, #96	@ 0x60
 801713e:	4013      	ands	r3, r2
 8017140:	2b40      	cmp	r3, #64	@ 0x40
 8017142:	d004      	beq.n	801714e <USBD_StdItfReq+0x2a>
 8017144:	d839      	bhi.n	80171ba <USBD_StdItfReq+0x96>
 8017146:	2b00      	cmp	r3, #0
 8017148:	d001      	beq.n	801714e <USBD_StdItfReq+0x2a>
 801714a:	2b20      	cmp	r3, #32
 801714c:	d135      	bne.n	80171ba <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801714e:	687a      	ldr	r2, [r7, #4]
 8017150:	23a7      	movs	r3, #167	@ 0xa7
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	5cd3      	ldrb	r3, [r2, r3]
 8017156:	3b01      	subs	r3, #1
 8017158:	2b02      	cmp	r3, #2
 801715a:	d825      	bhi.n	80171a8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	889b      	ldrh	r3, [r3, #4]
 8017160:	b2db      	uxtb	r3, r3
 8017162:	2b01      	cmp	r3, #1
 8017164:	d819      	bhi.n	801719a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017166:	687a      	ldr	r2, [r7, #4]
 8017168:	23ad      	movs	r3, #173	@ 0xad
 801716a:	009b      	lsls	r3, r3, #2
 801716c:	58d3      	ldr	r3, [r2, r3]
 801716e:	689b      	ldr	r3, [r3, #8]
 8017170:	250f      	movs	r5, #15
 8017172:	197c      	adds	r4, r7, r5
 8017174:	6839      	ldr	r1, [r7, #0]
 8017176:	687a      	ldr	r2, [r7, #4]
 8017178:	0010      	movs	r0, r2
 801717a:	4798      	blx	r3
 801717c:	0003      	movs	r3, r0
 801717e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	88db      	ldrh	r3, [r3, #6]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d116      	bne.n	80171b6 <USBD_StdItfReq+0x92>
 8017188:	197b      	adds	r3, r7, r5
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d112      	bne.n	80171b6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	0018      	movs	r0, r3
 8017194:	f000 fe4f 	bl	8017e36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017198:	e00d      	b.n	80171b6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801719a:	683a      	ldr	r2, [r7, #0]
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	0011      	movs	r1, r2
 80171a0:	0018      	movs	r0, r3
 80171a2:	f000 fd60 	bl	8017c66 <USBD_CtlError>
          break;
 80171a6:	e006      	b.n	80171b6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80171a8:	683a      	ldr	r2, [r7, #0]
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	0011      	movs	r1, r2
 80171ae:	0018      	movs	r0, r3
 80171b0:	f000 fd59 	bl	8017c66 <USBD_CtlError>
          break;
 80171b4:	e000      	b.n	80171b8 <USBD_StdItfReq+0x94>
          break;
 80171b6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80171b8:	e006      	b.n	80171c8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80171ba:	683a      	ldr	r2, [r7, #0]
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	0011      	movs	r1, r2
 80171c0:	0018      	movs	r0, r3
 80171c2:	f000 fd50 	bl	8017c66 <USBD_CtlError>
      break;
 80171c6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80171c8:	2300      	movs	r3, #0
}
 80171ca:	0018      	movs	r0, r3
 80171cc:	46bd      	mov	sp, r7
 80171ce:	b004      	add	sp, #16
 80171d0:	bdb0      	pop	{r4, r5, r7, pc}

080171d2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80171d2:	b5b0      	push	{r4, r5, r7, lr}
 80171d4:	b084      	sub	sp, #16
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
 80171da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80171dc:	230f      	movs	r3, #15
 80171de:	18fb      	adds	r3, r7, r3
 80171e0:	2200      	movs	r2, #0
 80171e2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	889a      	ldrh	r2, [r3, #4]
 80171e8:	230e      	movs	r3, #14
 80171ea:	18fb      	adds	r3, r7, r3
 80171ec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	001a      	movs	r2, r3
 80171f4:	2360      	movs	r3, #96	@ 0x60
 80171f6:	4013      	ands	r3, r2
 80171f8:	2b40      	cmp	r3, #64	@ 0x40
 80171fa:	d006      	beq.n	801720a <USBD_StdEPReq+0x38>
 80171fc:	d900      	bls.n	8017200 <USBD_StdEPReq+0x2e>
 80171fe:	e190      	b.n	8017522 <USBD_StdEPReq+0x350>
 8017200:	2b00      	cmp	r3, #0
 8017202:	d00c      	beq.n	801721e <USBD_StdEPReq+0x4c>
 8017204:	2b20      	cmp	r3, #32
 8017206:	d000      	beq.n	801720a <USBD_StdEPReq+0x38>
 8017208:	e18b      	b.n	8017522 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801720a:	687a      	ldr	r2, [r7, #4]
 801720c:	23ad      	movs	r3, #173	@ 0xad
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	58d3      	ldr	r3, [r2, r3]
 8017212:	689b      	ldr	r3, [r3, #8]
 8017214:	6839      	ldr	r1, [r7, #0]
 8017216:	687a      	ldr	r2, [r7, #4]
 8017218:	0010      	movs	r0, r2
 801721a:	4798      	blx	r3
      break;
 801721c:	e188      	b.n	8017530 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	001a      	movs	r2, r3
 8017224:	2360      	movs	r3, #96	@ 0x60
 8017226:	4013      	ands	r3, r2
 8017228:	2b20      	cmp	r3, #32
 801722a:	d10f      	bne.n	801724c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801722c:	687a      	ldr	r2, [r7, #4]
 801722e:	23ad      	movs	r3, #173	@ 0xad
 8017230:	009b      	lsls	r3, r3, #2
 8017232:	58d3      	ldr	r3, [r2, r3]
 8017234:	689b      	ldr	r3, [r3, #8]
 8017236:	250f      	movs	r5, #15
 8017238:	197c      	adds	r4, r7, r5
 801723a:	6839      	ldr	r1, [r7, #0]
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	0010      	movs	r0, r2
 8017240:	4798      	blx	r3
 8017242:	0003      	movs	r3, r0
 8017244:	7023      	strb	r3, [r4, #0]

        return ret;
 8017246:	197b      	adds	r3, r7, r5
 8017248:	781b      	ldrb	r3, [r3, #0]
 801724a:	e174      	b.n	8017536 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	785b      	ldrb	r3, [r3, #1]
 8017250:	2b03      	cmp	r3, #3
 8017252:	d007      	beq.n	8017264 <USBD_StdEPReq+0x92>
 8017254:	dd00      	ble.n	8017258 <USBD_StdEPReq+0x86>
 8017256:	e15c      	b.n	8017512 <USBD_StdEPReq+0x340>
 8017258:	2b00      	cmp	r3, #0
 801725a:	d100      	bne.n	801725e <USBD_StdEPReq+0x8c>
 801725c:	e092      	b.n	8017384 <USBD_StdEPReq+0x1b2>
 801725e:	2b01      	cmp	r3, #1
 8017260:	d04b      	beq.n	80172fa <USBD_StdEPReq+0x128>
 8017262:	e156      	b.n	8017512 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017264:	687a      	ldr	r2, [r7, #4]
 8017266:	23a7      	movs	r3, #167	@ 0xa7
 8017268:	009b      	lsls	r3, r3, #2
 801726a:	5cd3      	ldrb	r3, [r2, r3]
 801726c:	2b02      	cmp	r3, #2
 801726e:	d002      	beq.n	8017276 <USBD_StdEPReq+0xa4>
 8017270:	2b03      	cmp	r3, #3
 8017272:	d01d      	beq.n	80172b0 <USBD_StdEPReq+0xde>
 8017274:	e039      	b.n	80172ea <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017276:	220e      	movs	r2, #14
 8017278:	18bb      	adds	r3, r7, r2
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d010      	beq.n	80172a2 <USBD_StdEPReq+0xd0>
 8017280:	18bb      	adds	r3, r7, r2
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	2b80      	cmp	r3, #128	@ 0x80
 8017286:	d00c      	beq.n	80172a2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017288:	18bb      	adds	r3, r7, r2
 801728a:	781a      	ldrb	r2, [r3, #0]
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	0011      	movs	r1, r2
 8017290:	0018      	movs	r0, r3
 8017292:	f001 fa10 	bl	80186b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2180      	movs	r1, #128	@ 0x80
 801729a:	0018      	movs	r0, r3
 801729c:	f001 fa0b 	bl	80186b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80172a0:	e02a      	b.n	80172f8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80172a2:	683a      	ldr	r2, [r7, #0]
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	0011      	movs	r1, r2
 80172a8:	0018      	movs	r0, r3
 80172aa:	f000 fcdc 	bl	8017c66 <USBD_CtlError>
              break;
 80172ae:	e023      	b.n	80172f8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	885b      	ldrh	r3, [r3, #2]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d113      	bne.n	80172e0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80172b8:	220e      	movs	r2, #14
 80172ba:	18bb      	adds	r3, r7, r2
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d00e      	beq.n	80172e0 <USBD_StdEPReq+0x10e>
 80172c2:	18bb      	adds	r3, r7, r2
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	2b80      	cmp	r3, #128	@ 0x80
 80172c8:	d00a      	beq.n	80172e0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	88db      	ldrh	r3, [r3, #6]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d106      	bne.n	80172e0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80172d2:	18bb      	adds	r3, r7, r2
 80172d4:	781a      	ldrb	r2, [r3, #0]
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	0011      	movs	r1, r2
 80172da:	0018      	movs	r0, r3
 80172dc:	f001 f9eb 	bl	80186b6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	0018      	movs	r0, r3
 80172e4:	f000 fda7 	bl	8017e36 <USBD_CtlSendStatus>

              break;
 80172e8:	e006      	b.n	80172f8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80172ea:	683a      	ldr	r2, [r7, #0]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	0011      	movs	r1, r2
 80172f0:	0018      	movs	r0, r3
 80172f2:	f000 fcb8 	bl	8017c66 <USBD_CtlError>
              break;
 80172f6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80172f8:	e112      	b.n	8017520 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80172fa:	687a      	ldr	r2, [r7, #4]
 80172fc:	23a7      	movs	r3, #167	@ 0xa7
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	5cd3      	ldrb	r3, [r2, r3]
 8017302:	2b02      	cmp	r3, #2
 8017304:	d002      	beq.n	801730c <USBD_StdEPReq+0x13a>
 8017306:	2b03      	cmp	r3, #3
 8017308:	d01d      	beq.n	8017346 <USBD_StdEPReq+0x174>
 801730a:	e032      	b.n	8017372 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801730c:	220e      	movs	r2, #14
 801730e:	18bb      	adds	r3, r7, r2
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d010      	beq.n	8017338 <USBD_StdEPReq+0x166>
 8017316:	18bb      	adds	r3, r7, r2
 8017318:	781b      	ldrb	r3, [r3, #0]
 801731a:	2b80      	cmp	r3, #128	@ 0x80
 801731c:	d00c      	beq.n	8017338 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801731e:	18bb      	adds	r3, r7, r2
 8017320:	781a      	ldrb	r2, [r3, #0]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	0011      	movs	r1, r2
 8017326:	0018      	movs	r0, r3
 8017328:	f001 f9c5 	bl	80186b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2180      	movs	r1, #128	@ 0x80
 8017330:	0018      	movs	r0, r3
 8017332:	f001 f9c0 	bl	80186b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017336:	e024      	b.n	8017382 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8017338:	683a      	ldr	r2, [r7, #0]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	0011      	movs	r1, r2
 801733e:	0018      	movs	r0, r3
 8017340:	f000 fc91 	bl	8017c66 <USBD_CtlError>
              break;
 8017344:	e01d      	b.n	8017382 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	885b      	ldrh	r3, [r3, #2]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d118      	bne.n	8017380 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801734e:	210e      	movs	r1, #14
 8017350:	187b      	adds	r3, r7, r1
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	227f      	movs	r2, #127	@ 0x7f
 8017356:	4013      	ands	r3, r2
 8017358:	d006      	beq.n	8017368 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801735a:	187b      	adds	r3, r7, r1
 801735c:	781a      	ldrb	r2, [r3, #0]
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	0011      	movs	r1, r2
 8017362:	0018      	movs	r0, r3
 8017364:	f001 f9d2 	bl	801870c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	0018      	movs	r0, r3
 801736c:	f000 fd63 	bl	8017e36 <USBD_CtlSendStatus>
              }
              break;
 8017370:	e006      	b.n	8017380 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8017372:	683a      	ldr	r2, [r7, #0]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	0011      	movs	r1, r2
 8017378:	0018      	movs	r0, r3
 801737a:	f000 fc74 	bl	8017c66 <USBD_CtlError>
              break;
 801737e:	e000      	b.n	8017382 <USBD_StdEPReq+0x1b0>
              break;
 8017380:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8017382:	e0cd      	b.n	8017520 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017384:	687a      	ldr	r2, [r7, #4]
 8017386:	23a7      	movs	r3, #167	@ 0xa7
 8017388:	009b      	lsls	r3, r3, #2
 801738a:	5cd3      	ldrb	r3, [r2, r3]
 801738c:	2b02      	cmp	r3, #2
 801738e:	d002      	beq.n	8017396 <USBD_StdEPReq+0x1c4>
 8017390:	2b03      	cmp	r3, #3
 8017392:	d03c      	beq.n	801740e <USBD_StdEPReq+0x23c>
 8017394:	e0b5      	b.n	8017502 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017396:	220e      	movs	r2, #14
 8017398:	18bb      	adds	r3, r7, r2
 801739a:	781b      	ldrb	r3, [r3, #0]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d00a      	beq.n	80173b6 <USBD_StdEPReq+0x1e4>
 80173a0:	18bb      	adds	r3, r7, r2
 80173a2:	781b      	ldrb	r3, [r3, #0]
 80173a4:	2b80      	cmp	r3, #128	@ 0x80
 80173a6:	d006      	beq.n	80173b6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80173a8:	683a      	ldr	r2, [r7, #0]
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	0011      	movs	r1, r2
 80173ae:	0018      	movs	r0, r3
 80173b0:	f000 fc59 	bl	8017c66 <USBD_CtlError>
                break;
 80173b4:	e0ac      	b.n	8017510 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80173b6:	220e      	movs	r2, #14
 80173b8:	18bb      	adds	r3, r7, r2
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	b25b      	sxtb	r3, r3
 80173be:	2b00      	cmp	r3, #0
 80173c0:	da0c      	bge.n	80173dc <USBD_StdEPReq+0x20a>
 80173c2:	18bb      	adds	r3, r7, r2
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	227f      	movs	r2, #127	@ 0x7f
 80173c8:	401a      	ands	r2, r3
 80173ca:	0013      	movs	r3, r2
 80173cc:	009b      	lsls	r3, r3, #2
 80173ce:	189b      	adds	r3, r3, r2
 80173d0:	009b      	lsls	r3, r3, #2
 80173d2:	3310      	adds	r3, #16
 80173d4:	687a      	ldr	r2, [r7, #4]
 80173d6:	18d3      	adds	r3, r2, r3
 80173d8:	3304      	adds	r3, #4
 80173da:	e00d      	b.n	80173f8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80173dc:	230e      	movs	r3, #14
 80173de:	18fb      	adds	r3, r7, r3
 80173e0:	781b      	ldrb	r3, [r3, #0]
 80173e2:	227f      	movs	r2, #127	@ 0x7f
 80173e4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80173e6:	0013      	movs	r3, r2
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	189b      	adds	r3, r3, r2
 80173ec:	009b      	lsls	r3, r3, #2
 80173ee:	3351      	adds	r3, #81	@ 0x51
 80173f0:	33ff      	adds	r3, #255	@ 0xff
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	18d3      	adds	r3, r2, r3
 80173f6:	3304      	adds	r3, #4
 80173f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	2200      	movs	r2, #0
 80173fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017400:	68b9      	ldr	r1, [r7, #8]
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	2202      	movs	r2, #2
 8017406:	0018      	movs	r0, r3
 8017408:	f000 fcab 	bl	8017d62 <USBD_CtlSendData>
              break;
 801740c:	e080      	b.n	8017510 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801740e:	220e      	movs	r2, #14
 8017410:	18bb      	adds	r3, r7, r2
 8017412:	781b      	ldrb	r3, [r3, #0]
 8017414:	b25b      	sxtb	r3, r3
 8017416:	2b00      	cmp	r3, #0
 8017418:	da14      	bge.n	8017444 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801741a:	18bb      	adds	r3, r7, r2
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	220f      	movs	r2, #15
 8017420:	401a      	ands	r2, r3
 8017422:	6879      	ldr	r1, [r7, #4]
 8017424:	0013      	movs	r3, r2
 8017426:	009b      	lsls	r3, r3, #2
 8017428:	189b      	adds	r3, r3, r2
 801742a:	009b      	lsls	r3, r3, #2
 801742c:	18cb      	adds	r3, r1, r3
 801742e:	3318      	adds	r3, #24
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d11e      	bne.n	8017474 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8017436:	683a      	ldr	r2, [r7, #0]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	0011      	movs	r1, r2
 801743c:	0018      	movs	r0, r3
 801743e:	f000 fc12 	bl	8017c66 <USBD_CtlError>
                  break;
 8017442:	e065      	b.n	8017510 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017444:	230e      	movs	r3, #14
 8017446:	18fb      	adds	r3, r7, r3
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	220f      	movs	r2, #15
 801744c:	401a      	ands	r2, r3
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	23ac      	movs	r3, #172	@ 0xac
 8017452:	0059      	lsls	r1, r3, #1
 8017454:	0013      	movs	r3, r2
 8017456:	009b      	lsls	r3, r3, #2
 8017458:	189b      	adds	r3, r3, r2
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	18c3      	adds	r3, r0, r3
 801745e:	185b      	adds	r3, r3, r1
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d106      	bne.n	8017474 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8017466:	683a      	ldr	r2, [r7, #0]
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	0011      	movs	r1, r2
 801746c:	0018      	movs	r0, r3
 801746e:	f000 fbfa 	bl	8017c66 <USBD_CtlError>
                  break;
 8017472:	e04d      	b.n	8017510 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017474:	220e      	movs	r2, #14
 8017476:	18bb      	adds	r3, r7, r2
 8017478:	781b      	ldrb	r3, [r3, #0]
 801747a:	b25b      	sxtb	r3, r3
 801747c:	2b00      	cmp	r3, #0
 801747e:	da0c      	bge.n	801749a <USBD_StdEPReq+0x2c8>
 8017480:	18bb      	adds	r3, r7, r2
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	227f      	movs	r2, #127	@ 0x7f
 8017486:	401a      	ands	r2, r3
 8017488:	0013      	movs	r3, r2
 801748a:	009b      	lsls	r3, r3, #2
 801748c:	189b      	adds	r3, r3, r2
 801748e:	009b      	lsls	r3, r3, #2
 8017490:	3310      	adds	r3, #16
 8017492:	687a      	ldr	r2, [r7, #4]
 8017494:	18d3      	adds	r3, r2, r3
 8017496:	3304      	adds	r3, #4
 8017498:	e00d      	b.n	80174b6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801749a:	230e      	movs	r3, #14
 801749c:	18fb      	adds	r3, r7, r3
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	227f      	movs	r2, #127	@ 0x7f
 80174a2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80174a4:	0013      	movs	r3, r2
 80174a6:	009b      	lsls	r3, r3, #2
 80174a8:	189b      	adds	r3, r3, r2
 80174aa:	009b      	lsls	r3, r3, #2
 80174ac:	3351      	adds	r3, #81	@ 0x51
 80174ae:	33ff      	adds	r3, #255	@ 0xff
 80174b0:	687a      	ldr	r2, [r7, #4]
 80174b2:	18d3      	adds	r3, r2, r3
 80174b4:	3304      	adds	r3, #4
 80174b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80174b8:	220e      	movs	r2, #14
 80174ba:	18bb      	adds	r3, r7, r2
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d003      	beq.n	80174ca <USBD_StdEPReq+0x2f8>
 80174c2:	18bb      	adds	r3, r7, r2
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	2b80      	cmp	r3, #128	@ 0x80
 80174c8:	d103      	bne.n	80174d2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	2200      	movs	r2, #0
 80174ce:	601a      	str	r2, [r3, #0]
 80174d0:	e010      	b.n	80174f4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80174d2:	230e      	movs	r3, #14
 80174d4:	18fb      	adds	r3, r7, r3
 80174d6:	781a      	ldrb	r2, [r3, #0]
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	0011      	movs	r1, r2
 80174dc:	0018      	movs	r0, r3
 80174de:	f001 f940 	bl	8018762 <USBD_LL_IsStallEP>
 80174e2:	1e03      	subs	r3, r0, #0
 80174e4:	d003      	beq.n	80174ee <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	2201      	movs	r2, #1
 80174ea:	601a      	str	r2, [r3, #0]
 80174ec:	e002      	b.n	80174f4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	2200      	movs	r2, #0
 80174f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80174f4:	68b9      	ldr	r1, [r7, #8]
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	2202      	movs	r2, #2
 80174fa:	0018      	movs	r0, r3
 80174fc:	f000 fc31 	bl	8017d62 <USBD_CtlSendData>
              break;
 8017500:	e006      	b.n	8017510 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8017502:	683a      	ldr	r2, [r7, #0]
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	0011      	movs	r1, r2
 8017508:	0018      	movs	r0, r3
 801750a:	f000 fbac 	bl	8017c66 <USBD_CtlError>
              break;
 801750e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8017510:	e006      	b.n	8017520 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8017512:	683a      	ldr	r2, [r7, #0]
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	0011      	movs	r1, r2
 8017518:	0018      	movs	r0, r3
 801751a:	f000 fba4 	bl	8017c66 <USBD_CtlError>
          break;
 801751e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017520:	e006      	b.n	8017530 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8017522:	683a      	ldr	r2, [r7, #0]
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	0011      	movs	r1, r2
 8017528:	0018      	movs	r0, r3
 801752a:	f000 fb9c 	bl	8017c66 <USBD_CtlError>
      break;
 801752e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8017530:	230f      	movs	r3, #15
 8017532:	18fb      	adds	r3, r7, r3
 8017534:	781b      	ldrb	r3, [r3, #0]
}
 8017536:	0018      	movs	r0, r3
 8017538:	46bd      	mov	sp, r7
 801753a:	b004      	add	sp, #16
 801753c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017540 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b084      	sub	sp, #16
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801754a:	2308      	movs	r3, #8
 801754c:	18fb      	adds	r3, r7, r3
 801754e:	2200      	movs	r2, #0
 8017550:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8017552:	2300      	movs	r3, #0
 8017554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017556:	230b      	movs	r3, #11
 8017558:	18fb      	adds	r3, r7, r3
 801755a:	2200      	movs	r2, #0
 801755c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	885b      	ldrh	r3, [r3, #2]
 8017562:	0a1b      	lsrs	r3, r3, #8
 8017564:	b29b      	uxth	r3, r3
 8017566:	2b07      	cmp	r3, #7
 8017568:	d900      	bls.n	801756c <USBD_GetDescriptor+0x2c>
 801756a:	e159      	b.n	8017820 <USBD_GetDescriptor+0x2e0>
 801756c:	009a      	lsls	r2, r3, #2
 801756e:	4bcb      	ldr	r3, [pc, #812]	@ (801789c <USBD_GetDescriptor+0x35c>)
 8017570:	18d3      	adds	r3, r2, r3
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	23ac      	movs	r3, #172	@ 0xac
 801757a:	009b      	lsls	r3, r3, #2
 801757c:	58d3      	ldr	r3, [r2, r3]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	687a      	ldr	r2, [r7, #4]
 8017582:	7c12      	ldrb	r2, [r2, #16]
 8017584:	2108      	movs	r1, #8
 8017586:	1879      	adds	r1, r7, r1
 8017588:	0010      	movs	r0, r2
 801758a:	4798      	blx	r3
 801758c:	0003      	movs	r3, r0
 801758e:	60fb      	str	r3, [r7, #12]
      break;
 8017590:	e153      	b.n	801783a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	7c1b      	ldrb	r3, [r3, #16]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d10f      	bne.n	80175ba <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	23ad      	movs	r3, #173	@ 0xad
 801759e:	009b      	lsls	r3, r3, #2
 80175a0:	58d3      	ldr	r3, [r2, r3]
 80175a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175a4:	2208      	movs	r2, #8
 80175a6:	18ba      	adds	r2, r7, r2
 80175a8:	0010      	movs	r0, r2
 80175aa:	4798      	blx	r3
 80175ac:	0003      	movs	r3, r0
 80175ae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	3301      	adds	r3, #1
 80175b4:	2202      	movs	r2, #2
 80175b6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80175b8:	e13f      	b.n	801783a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80175ba:	687a      	ldr	r2, [r7, #4]
 80175bc:	23ad      	movs	r3, #173	@ 0xad
 80175be:	009b      	lsls	r3, r3, #2
 80175c0:	58d3      	ldr	r3, [r2, r3]
 80175c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175c4:	2208      	movs	r2, #8
 80175c6:	18ba      	adds	r2, r7, r2
 80175c8:	0010      	movs	r0, r2
 80175ca:	4798      	blx	r3
 80175cc:	0003      	movs	r3, r0
 80175ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	3301      	adds	r3, #1
 80175d4:	2202      	movs	r2, #2
 80175d6:	701a      	strb	r2, [r3, #0]
      break;
 80175d8:	e12f      	b.n	801783a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	885b      	ldrh	r3, [r3, #2]
 80175de:	b2db      	uxtb	r3, r3
 80175e0:	2b05      	cmp	r3, #5
 80175e2:	d900      	bls.n	80175e6 <USBD_GetDescriptor+0xa6>
 80175e4:	e0d0      	b.n	8017788 <USBD_GetDescriptor+0x248>
 80175e6:	009a      	lsls	r2, r3, #2
 80175e8:	4bad      	ldr	r3, [pc, #692]	@ (80178a0 <USBD_GetDescriptor+0x360>)
 80175ea:	18d3      	adds	r3, r2, r3
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80175f0:	687a      	ldr	r2, [r7, #4]
 80175f2:	23ac      	movs	r3, #172	@ 0xac
 80175f4:	009b      	lsls	r3, r3, #2
 80175f6:	58d3      	ldr	r3, [r2, r3]
 80175f8:	685b      	ldr	r3, [r3, #4]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d00d      	beq.n	801761a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80175fe:	687a      	ldr	r2, [r7, #4]
 8017600:	23ac      	movs	r3, #172	@ 0xac
 8017602:	009b      	lsls	r3, r3, #2
 8017604:	58d3      	ldr	r3, [r2, r3]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	687a      	ldr	r2, [r7, #4]
 801760a:	7c12      	ldrb	r2, [r2, #16]
 801760c:	2108      	movs	r1, #8
 801760e:	1879      	adds	r1, r7, r1
 8017610:	0010      	movs	r0, r2
 8017612:	4798      	blx	r3
 8017614:	0003      	movs	r3, r0
 8017616:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017618:	e0c3      	b.n	80177a2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801761a:	683a      	ldr	r2, [r7, #0]
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	0011      	movs	r1, r2
 8017620:	0018      	movs	r0, r3
 8017622:	f000 fb20 	bl	8017c66 <USBD_CtlError>
            err++;
 8017626:	210b      	movs	r1, #11
 8017628:	187b      	adds	r3, r7, r1
 801762a:	781a      	ldrb	r2, [r3, #0]
 801762c:	187b      	adds	r3, r7, r1
 801762e:	3201      	adds	r2, #1
 8017630:	701a      	strb	r2, [r3, #0]
          break;
 8017632:	e0b6      	b.n	80177a2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017634:	687a      	ldr	r2, [r7, #4]
 8017636:	23ac      	movs	r3, #172	@ 0xac
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	58d3      	ldr	r3, [r2, r3]
 801763c:	689b      	ldr	r3, [r3, #8]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d00d      	beq.n	801765e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017642:	687a      	ldr	r2, [r7, #4]
 8017644:	23ac      	movs	r3, #172	@ 0xac
 8017646:	009b      	lsls	r3, r3, #2
 8017648:	58d3      	ldr	r3, [r2, r3]
 801764a:	689b      	ldr	r3, [r3, #8]
 801764c:	687a      	ldr	r2, [r7, #4]
 801764e:	7c12      	ldrb	r2, [r2, #16]
 8017650:	2108      	movs	r1, #8
 8017652:	1879      	adds	r1, r7, r1
 8017654:	0010      	movs	r0, r2
 8017656:	4798      	blx	r3
 8017658:	0003      	movs	r3, r0
 801765a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801765c:	e0a1      	b.n	80177a2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801765e:	683a      	ldr	r2, [r7, #0]
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	0011      	movs	r1, r2
 8017664:	0018      	movs	r0, r3
 8017666:	f000 fafe 	bl	8017c66 <USBD_CtlError>
            err++;
 801766a:	210b      	movs	r1, #11
 801766c:	187b      	adds	r3, r7, r1
 801766e:	781a      	ldrb	r2, [r3, #0]
 8017670:	187b      	adds	r3, r7, r1
 8017672:	3201      	adds	r2, #1
 8017674:	701a      	strb	r2, [r3, #0]
          break;
 8017676:	e094      	b.n	80177a2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017678:	687a      	ldr	r2, [r7, #4]
 801767a:	23ac      	movs	r3, #172	@ 0xac
 801767c:	009b      	lsls	r3, r3, #2
 801767e:	58d3      	ldr	r3, [r2, r3]
 8017680:	68db      	ldr	r3, [r3, #12]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d00d      	beq.n	80176a2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	23ac      	movs	r3, #172	@ 0xac
 801768a:	009b      	lsls	r3, r3, #2
 801768c:	58d3      	ldr	r3, [r2, r3]
 801768e:	68db      	ldr	r3, [r3, #12]
 8017690:	687a      	ldr	r2, [r7, #4]
 8017692:	7c12      	ldrb	r2, [r2, #16]
 8017694:	2108      	movs	r1, #8
 8017696:	1879      	adds	r1, r7, r1
 8017698:	0010      	movs	r0, r2
 801769a:	4798      	blx	r3
 801769c:	0003      	movs	r3, r0
 801769e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176a0:	e07f      	b.n	80177a2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80176a2:	683a      	ldr	r2, [r7, #0]
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	0011      	movs	r1, r2
 80176a8:	0018      	movs	r0, r3
 80176aa:	f000 fadc 	bl	8017c66 <USBD_CtlError>
            err++;
 80176ae:	210b      	movs	r1, #11
 80176b0:	187b      	adds	r3, r7, r1
 80176b2:	781a      	ldrb	r2, [r3, #0]
 80176b4:	187b      	adds	r3, r7, r1
 80176b6:	3201      	adds	r2, #1
 80176b8:	701a      	strb	r2, [r3, #0]
          break;
 80176ba:	e072      	b.n	80177a2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80176bc:	687a      	ldr	r2, [r7, #4]
 80176be:	23ac      	movs	r3, #172	@ 0xac
 80176c0:	009b      	lsls	r3, r3, #2
 80176c2:	58d3      	ldr	r3, [r2, r3]
 80176c4:	691b      	ldr	r3, [r3, #16]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d00d      	beq.n	80176e6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80176ca:	687a      	ldr	r2, [r7, #4]
 80176cc:	23ac      	movs	r3, #172	@ 0xac
 80176ce:	009b      	lsls	r3, r3, #2
 80176d0:	58d3      	ldr	r3, [r2, r3]
 80176d2:	691b      	ldr	r3, [r3, #16]
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	7c12      	ldrb	r2, [r2, #16]
 80176d8:	2108      	movs	r1, #8
 80176da:	1879      	adds	r1, r7, r1
 80176dc:	0010      	movs	r0, r2
 80176de:	4798      	blx	r3
 80176e0:	0003      	movs	r3, r0
 80176e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176e4:	e05d      	b.n	80177a2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80176e6:	683a      	ldr	r2, [r7, #0]
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	0011      	movs	r1, r2
 80176ec:	0018      	movs	r0, r3
 80176ee:	f000 faba 	bl	8017c66 <USBD_CtlError>
            err++;
 80176f2:	210b      	movs	r1, #11
 80176f4:	187b      	adds	r3, r7, r1
 80176f6:	781a      	ldrb	r2, [r3, #0]
 80176f8:	187b      	adds	r3, r7, r1
 80176fa:	3201      	adds	r2, #1
 80176fc:	701a      	strb	r2, [r3, #0]
          break;
 80176fe:	e050      	b.n	80177a2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017700:	687a      	ldr	r2, [r7, #4]
 8017702:	23ac      	movs	r3, #172	@ 0xac
 8017704:	009b      	lsls	r3, r3, #2
 8017706:	58d3      	ldr	r3, [r2, r3]
 8017708:	695b      	ldr	r3, [r3, #20]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d00d      	beq.n	801772a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801770e:	687a      	ldr	r2, [r7, #4]
 8017710:	23ac      	movs	r3, #172	@ 0xac
 8017712:	009b      	lsls	r3, r3, #2
 8017714:	58d3      	ldr	r3, [r2, r3]
 8017716:	695b      	ldr	r3, [r3, #20]
 8017718:	687a      	ldr	r2, [r7, #4]
 801771a:	7c12      	ldrb	r2, [r2, #16]
 801771c:	2108      	movs	r1, #8
 801771e:	1879      	adds	r1, r7, r1
 8017720:	0010      	movs	r0, r2
 8017722:	4798      	blx	r3
 8017724:	0003      	movs	r3, r0
 8017726:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017728:	e03b      	b.n	80177a2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801772a:	683a      	ldr	r2, [r7, #0]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	0011      	movs	r1, r2
 8017730:	0018      	movs	r0, r3
 8017732:	f000 fa98 	bl	8017c66 <USBD_CtlError>
            err++;
 8017736:	210b      	movs	r1, #11
 8017738:	187b      	adds	r3, r7, r1
 801773a:	781a      	ldrb	r2, [r3, #0]
 801773c:	187b      	adds	r3, r7, r1
 801773e:	3201      	adds	r2, #1
 8017740:	701a      	strb	r2, [r3, #0]
          break;
 8017742:	e02e      	b.n	80177a2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017744:	687a      	ldr	r2, [r7, #4]
 8017746:	23ac      	movs	r3, #172	@ 0xac
 8017748:	009b      	lsls	r3, r3, #2
 801774a:	58d3      	ldr	r3, [r2, r3]
 801774c:	699b      	ldr	r3, [r3, #24]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00d      	beq.n	801776e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	23ac      	movs	r3, #172	@ 0xac
 8017756:	009b      	lsls	r3, r3, #2
 8017758:	58d3      	ldr	r3, [r2, r3]
 801775a:	699b      	ldr	r3, [r3, #24]
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	7c12      	ldrb	r2, [r2, #16]
 8017760:	2108      	movs	r1, #8
 8017762:	1879      	adds	r1, r7, r1
 8017764:	0010      	movs	r0, r2
 8017766:	4798      	blx	r3
 8017768:	0003      	movs	r3, r0
 801776a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801776c:	e019      	b.n	80177a2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801776e:	683a      	ldr	r2, [r7, #0]
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	0011      	movs	r1, r2
 8017774:	0018      	movs	r0, r3
 8017776:	f000 fa76 	bl	8017c66 <USBD_CtlError>
            err++;
 801777a:	210b      	movs	r1, #11
 801777c:	187b      	adds	r3, r7, r1
 801777e:	781a      	ldrb	r2, [r3, #0]
 8017780:	187b      	adds	r3, r7, r1
 8017782:	3201      	adds	r2, #1
 8017784:	701a      	strb	r2, [r3, #0]
          break;
 8017786:	e00c      	b.n	80177a2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8017788:	683a      	ldr	r2, [r7, #0]
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	0011      	movs	r1, r2
 801778e:	0018      	movs	r0, r3
 8017790:	f000 fa69 	bl	8017c66 <USBD_CtlError>
          err++;
 8017794:	210b      	movs	r1, #11
 8017796:	187b      	adds	r3, r7, r1
 8017798:	781a      	ldrb	r2, [r3, #0]
 801779a:	187b      	adds	r3, r7, r1
 801779c:	3201      	adds	r2, #1
 801779e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80177a0:	e04b      	b.n	801783a <USBD_GetDescriptor+0x2fa>
 80177a2:	e04a      	b.n	801783a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	7c1b      	ldrb	r3, [r3, #16]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d10b      	bne.n	80177c4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80177ac:	687a      	ldr	r2, [r7, #4]
 80177ae:	23ad      	movs	r3, #173	@ 0xad
 80177b0:	009b      	lsls	r3, r3, #2
 80177b2:	58d3      	ldr	r3, [r2, r3]
 80177b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80177b6:	2208      	movs	r2, #8
 80177b8:	18ba      	adds	r2, r7, r2
 80177ba:	0010      	movs	r0, r2
 80177bc:	4798      	blx	r3
 80177be:	0003      	movs	r3, r0
 80177c0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80177c2:	e03a      	b.n	801783a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80177c4:	683a      	ldr	r2, [r7, #0]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	0011      	movs	r1, r2
 80177ca:	0018      	movs	r0, r3
 80177cc:	f000 fa4b 	bl	8017c66 <USBD_CtlError>
        err++;
 80177d0:	210b      	movs	r1, #11
 80177d2:	187b      	adds	r3, r7, r1
 80177d4:	781a      	ldrb	r2, [r3, #0]
 80177d6:	187b      	adds	r3, r7, r1
 80177d8:	3201      	adds	r2, #1
 80177da:	701a      	strb	r2, [r3, #0]
      break;
 80177dc:	e02d      	b.n	801783a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	7c1b      	ldrb	r3, [r3, #16]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d10f      	bne.n	8017806 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	23ad      	movs	r3, #173	@ 0xad
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	58d3      	ldr	r3, [r2, r3]
 80177ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177f0:	2208      	movs	r2, #8
 80177f2:	18ba      	adds	r2, r7, r2
 80177f4:	0010      	movs	r0, r2
 80177f6:	4798      	blx	r3
 80177f8:	0003      	movs	r3, r0
 80177fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	3301      	adds	r3, #1
 8017800:	2207      	movs	r2, #7
 8017802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017804:	e019      	b.n	801783a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8017806:	683a      	ldr	r2, [r7, #0]
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	0011      	movs	r1, r2
 801780c:	0018      	movs	r0, r3
 801780e:	f000 fa2a 	bl	8017c66 <USBD_CtlError>
        err++;
 8017812:	210b      	movs	r1, #11
 8017814:	187b      	adds	r3, r7, r1
 8017816:	781a      	ldrb	r2, [r3, #0]
 8017818:	187b      	adds	r3, r7, r1
 801781a:	3201      	adds	r2, #1
 801781c:	701a      	strb	r2, [r3, #0]
      break;
 801781e:	e00c      	b.n	801783a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8017820:	683a      	ldr	r2, [r7, #0]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	0011      	movs	r1, r2
 8017826:	0018      	movs	r0, r3
 8017828:	f000 fa1d 	bl	8017c66 <USBD_CtlError>
      err++;
 801782c:	210b      	movs	r1, #11
 801782e:	187b      	adds	r3, r7, r1
 8017830:	781a      	ldrb	r2, [r3, #0]
 8017832:	187b      	adds	r3, r7, r1
 8017834:	3201      	adds	r2, #1
 8017836:	701a      	strb	r2, [r3, #0]
      break;
 8017838:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801783a:	230b      	movs	r3, #11
 801783c:	18fb      	adds	r3, r7, r3
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d127      	bne.n	8017894 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8017844:	2108      	movs	r1, #8
 8017846:	187b      	adds	r3, r7, r1
 8017848:	881b      	ldrh	r3, [r3, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d019      	beq.n	8017882 <USBD_GetDescriptor+0x342>
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	88db      	ldrh	r3, [r3, #6]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d015      	beq.n	8017882 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8017856:	683b      	ldr	r3, [r7, #0]
 8017858:	88da      	ldrh	r2, [r3, #6]
 801785a:	187b      	adds	r3, r7, r1
 801785c:	881b      	ldrh	r3, [r3, #0]
 801785e:	1c18      	adds	r0, r3, #0
 8017860:	1c11      	adds	r1, r2, #0
 8017862:	b28a      	uxth	r2, r1
 8017864:	b283      	uxth	r3, r0
 8017866:	429a      	cmp	r2, r3
 8017868:	d900      	bls.n	801786c <USBD_GetDescriptor+0x32c>
 801786a:	1c01      	adds	r1, r0, #0
 801786c:	b28a      	uxth	r2, r1
 801786e:	2108      	movs	r1, #8
 8017870:	187b      	adds	r3, r7, r1
 8017872:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017874:	187b      	adds	r3, r7, r1
 8017876:	881a      	ldrh	r2, [r3, #0]
 8017878:	68f9      	ldr	r1, [r7, #12]
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	0018      	movs	r0, r3
 801787e:	f000 fa70 	bl	8017d62 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	88db      	ldrh	r3, [r3, #6]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d105      	bne.n	8017896 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	0018      	movs	r0, r3
 801788e:	f000 fad2 	bl	8017e36 <USBD_CtlSendStatus>
 8017892:	e000      	b.n	8017896 <USBD_GetDescriptor+0x356>
    return;
 8017894:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8017896:	46bd      	mov	sp, r7
 8017898:	b004      	add	sp, #16
 801789a:	bd80      	pop	{r7, pc}
 801789c:	0801f340 	.word	0x0801f340
 80178a0:	0801f360 	.word	0x0801f360

080178a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80178a4:	b590      	push	{r4, r7, lr}
 80178a6:	b085      	sub	sp, #20
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
 80178ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	889b      	ldrh	r3, [r3, #4]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d13d      	bne.n	8017932 <USBD_SetAddress+0x8e>
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	88db      	ldrh	r3, [r3, #6]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d139      	bne.n	8017932 <USBD_SetAddress+0x8e>
 80178be:	683b      	ldr	r3, [r7, #0]
 80178c0:	885b      	ldrh	r3, [r3, #2]
 80178c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80178c4:	d835      	bhi.n	8017932 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	885b      	ldrh	r3, [r3, #2]
 80178ca:	b2da      	uxtb	r2, r3
 80178cc:	230f      	movs	r3, #15
 80178ce:	18fb      	adds	r3, r7, r3
 80178d0:	217f      	movs	r1, #127	@ 0x7f
 80178d2:	400a      	ands	r2, r1
 80178d4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178d6:	687a      	ldr	r2, [r7, #4]
 80178d8:	23a7      	movs	r3, #167	@ 0xa7
 80178da:	009b      	lsls	r3, r3, #2
 80178dc:	5cd3      	ldrb	r3, [r2, r3]
 80178de:	2b03      	cmp	r3, #3
 80178e0:	d106      	bne.n	80178f0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80178e2:	683a      	ldr	r2, [r7, #0]
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	0011      	movs	r1, r2
 80178e8:	0018      	movs	r0, r3
 80178ea:	f000 f9bc 	bl	8017c66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178ee:	e027      	b.n	8017940 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	240f      	movs	r4, #15
 80178f4:	193a      	adds	r2, r7, r4
 80178f6:	4914      	ldr	r1, [pc, #80]	@ (8017948 <USBD_SetAddress+0xa4>)
 80178f8:	7812      	ldrb	r2, [r2, #0]
 80178fa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80178fc:	193b      	adds	r3, r7, r4
 80178fe:	781a      	ldrb	r2, [r3, #0]
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	0011      	movs	r1, r2
 8017904:	0018      	movs	r0, r3
 8017906:	f000 ff5d 	bl	80187c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	0018      	movs	r0, r3
 801790e:	f000 fa92 	bl	8017e36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017912:	193b      	adds	r3, r7, r4
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d005      	beq.n	8017926 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801791a:	687a      	ldr	r2, [r7, #4]
 801791c:	23a7      	movs	r3, #167	@ 0xa7
 801791e:	009b      	lsls	r3, r3, #2
 8017920:	2102      	movs	r1, #2
 8017922:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017924:	e00c      	b.n	8017940 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017926:	687a      	ldr	r2, [r7, #4]
 8017928:	23a7      	movs	r3, #167	@ 0xa7
 801792a:	009b      	lsls	r3, r3, #2
 801792c:	2101      	movs	r1, #1
 801792e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017930:	e006      	b.n	8017940 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017932:	683a      	ldr	r2, [r7, #0]
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	0011      	movs	r1, r2
 8017938:	0018      	movs	r0, r3
 801793a:	f000 f994 	bl	8017c66 <USBD_CtlError>
  }
}
 801793e:	46c0      	nop			@ (mov r8, r8)
 8017940:	46c0      	nop			@ (mov r8, r8)
 8017942:	46bd      	mov	sp, r7
 8017944:	b005      	add	sp, #20
 8017946:	bd90      	pop	{r4, r7, pc}
 8017948:	0000029e 	.word	0x0000029e

0801794c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	885b      	ldrh	r3, [r3, #2]
 801795a:	b2da      	uxtb	r2, r3
 801795c:	4b4c      	ldr	r3, [pc, #304]	@ (8017a90 <USBD_SetConfig+0x144>)
 801795e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017960:	4b4b      	ldr	r3, [pc, #300]	@ (8017a90 <USBD_SetConfig+0x144>)
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	2b01      	cmp	r3, #1
 8017966:	d906      	bls.n	8017976 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8017968:	683a      	ldr	r2, [r7, #0]
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	0011      	movs	r1, r2
 801796e:	0018      	movs	r0, r3
 8017970:	f000 f979 	bl	8017c66 <USBD_CtlError>
 8017974:	e088      	b.n	8017a88 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8017976:	687a      	ldr	r2, [r7, #4]
 8017978:	23a7      	movs	r3, #167	@ 0xa7
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	5cd3      	ldrb	r3, [r2, r3]
 801797e:	2b02      	cmp	r3, #2
 8017980:	d002      	beq.n	8017988 <USBD_SetConfig+0x3c>
 8017982:	2b03      	cmp	r3, #3
 8017984:	d029      	beq.n	80179da <USBD_SetConfig+0x8e>
 8017986:	e071      	b.n	8017a6c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8017988:	4b41      	ldr	r3, [pc, #260]	@ (8017a90 <USBD_SetConfig+0x144>)
 801798a:	781b      	ldrb	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d01f      	beq.n	80179d0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8017990:	4b3f      	ldr	r3, [pc, #252]	@ (8017a90 <USBD_SetConfig+0x144>)
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	001a      	movs	r2, r3
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	23a7      	movs	r3, #167	@ 0xa7
 801799e:	009b      	lsls	r3, r3, #2
 80179a0:	2103      	movs	r1, #3
 80179a2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80179a4:	4b3a      	ldr	r3, [pc, #232]	@ (8017a90 <USBD_SetConfig+0x144>)
 80179a6:	781a      	ldrb	r2, [r3, #0]
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	0011      	movs	r1, r2
 80179ac:	0018      	movs	r0, r3
 80179ae:	f7ff f8c6 	bl	8016b3e <USBD_SetClassConfig>
 80179b2:	0003      	movs	r3, r0
 80179b4:	2b02      	cmp	r3, #2
 80179b6:	d106      	bne.n	80179c6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80179b8:	683a      	ldr	r2, [r7, #0]
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	0011      	movs	r1, r2
 80179be:	0018      	movs	r0, r3
 80179c0:	f000 f951 	bl	8017c66 <USBD_CtlError>
            return;
 80179c4:	e060      	b.n	8017a88 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	0018      	movs	r0, r3
 80179ca:	f000 fa34 	bl	8017e36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80179ce:	e05b      	b.n	8017a88 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	0018      	movs	r0, r3
 80179d4:	f000 fa2f 	bl	8017e36 <USBD_CtlSendStatus>
        break;
 80179d8:	e056      	b.n	8017a88 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80179da:	4b2d      	ldr	r3, [pc, #180]	@ (8017a90 <USBD_SetConfig+0x144>)
 80179dc:	781b      	ldrb	r3, [r3, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d115      	bne.n	8017a0e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	23a7      	movs	r3, #167	@ 0xa7
 80179e6:	009b      	lsls	r3, r3, #2
 80179e8:	2102      	movs	r1, #2
 80179ea:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80179ec:	4b28      	ldr	r3, [pc, #160]	@ (8017a90 <USBD_SetConfig+0x144>)
 80179ee:	781b      	ldrb	r3, [r3, #0]
 80179f0:	001a      	movs	r2, r3
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80179f6:	4b26      	ldr	r3, [pc, #152]	@ (8017a90 <USBD_SetConfig+0x144>)
 80179f8:	781a      	ldrb	r2, [r3, #0]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	0011      	movs	r1, r2
 80179fe:	0018      	movs	r0, r3
 8017a00:	f7ff f8c4 	bl	8016b8c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	0018      	movs	r0, r3
 8017a08:	f000 fa15 	bl	8017e36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017a0c:	e03c      	b.n	8017a88 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8017a0e:	4b20      	ldr	r3, [pc, #128]	@ (8017a90 <USBD_SetConfig+0x144>)
 8017a10:	781b      	ldrb	r3, [r3, #0]
 8017a12:	001a      	movs	r2, r3
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	685b      	ldr	r3, [r3, #4]
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d022      	beq.n	8017a62 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	685b      	ldr	r3, [r3, #4]
 8017a20:	b2da      	uxtb	r2, r3
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	0011      	movs	r1, r2
 8017a26:	0018      	movs	r0, r3
 8017a28:	f7ff f8b0 	bl	8016b8c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8017a2c:	4b18      	ldr	r3, [pc, #96]	@ (8017a90 <USBD_SetConfig+0x144>)
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	001a      	movs	r2, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017a36:	4b16      	ldr	r3, [pc, #88]	@ (8017a90 <USBD_SetConfig+0x144>)
 8017a38:	781a      	ldrb	r2, [r3, #0]
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	0011      	movs	r1, r2
 8017a3e:	0018      	movs	r0, r3
 8017a40:	f7ff f87d 	bl	8016b3e <USBD_SetClassConfig>
 8017a44:	0003      	movs	r3, r0
 8017a46:	2b02      	cmp	r3, #2
 8017a48:	d106      	bne.n	8017a58 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8017a4a:	683a      	ldr	r2, [r7, #0]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	0011      	movs	r1, r2
 8017a50:	0018      	movs	r0, r3
 8017a52:	f000 f908 	bl	8017c66 <USBD_CtlError>
            return;
 8017a56:	e017      	b.n	8017a88 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	0018      	movs	r0, r3
 8017a5c:	f000 f9eb 	bl	8017e36 <USBD_CtlSendStatus>
        break;
 8017a60:	e012      	b.n	8017a88 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	0018      	movs	r0, r3
 8017a66:	f000 f9e6 	bl	8017e36 <USBD_CtlSendStatus>
        break;
 8017a6a:	e00d      	b.n	8017a88 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8017a6c:	683a      	ldr	r2, [r7, #0]
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	0011      	movs	r1, r2
 8017a72:	0018      	movs	r0, r3
 8017a74:	f000 f8f7 	bl	8017c66 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8017a78:	4b05      	ldr	r3, [pc, #20]	@ (8017a90 <USBD_SetConfig+0x144>)
 8017a7a:	781a      	ldrb	r2, [r3, #0]
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	0011      	movs	r1, r2
 8017a80:	0018      	movs	r0, r3
 8017a82:	f7ff f883 	bl	8016b8c <USBD_ClrClassConfig>
        break;
 8017a86:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	b002      	add	sp, #8
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	46c0      	nop			@ (mov r8, r8)
 8017a90:	20002464 	.word	0x20002464

08017a94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
 8017a9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017a9e:	683b      	ldr	r3, [r7, #0]
 8017aa0:	88db      	ldrh	r3, [r3, #6]
 8017aa2:	2b01      	cmp	r3, #1
 8017aa4:	d006      	beq.n	8017ab4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8017aa6:	683a      	ldr	r2, [r7, #0]
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	0011      	movs	r1, r2
 8017aac:	0018      	movs	r0, r3
 8017aae:	f000 f8da 	bl	8017c66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017ab2:	e026      	b.n	8017b02 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8017ab4:	687a      	ldr	r2, [r7, #4]
 8017ab6:	23a7      	movs	r3, #167	@ 0xa7
 8017ab8:	009b      	lsls	r3, r3, #2
 8017aba:	5cd3      	ldrb	r3, [r2, r3]
 8017abc:	2b02      	cmp	r3, #2
 8017abe:	dc02      	bgt.n	8017ac6 <USBD_GetConfig+0x32>
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	dc03      	bgt.n	8017acc <USBD_GetConfig+0x38>
 8017ac4:	e016      	b.n	8017af4 <USBD_GetConfig+0x60>
 8017ac6:	2b03      	cmp	r3, #3
 8017ac8:	d00c      	beq.n	8017ae4 <USBD_GetConfig+0x50>
 8017aca:	e013      	b.n	8017af4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2200      	movs	r2, #0
 8017ad0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	3308      	adds	r3, #8
 8017ad6:	0019      	movs	r1, r3
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	2201      	movs	r2, #1
 8017adc:	0018      	movs	r0, r3
 8017ade:	f000 f940 	bl	8017d62 <USBD_CtlSendData>
        break;
 8017ae2:	e00e      	b.n	8017b02 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	1d19      	adds	r1, r3, #4
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	2201      	movs	r2, #1
 8017aec:	0018      	movs	r0, r3
 8017aee:	f000 f938 	bl	8017d62 <USBD_CtlSendData>
        break;
 8017af2:	e006      	b.n	8017b02 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8017af4:	683a      	ldr	r2, [r7, #0]
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	0011      	movs	r1, r2
 8017afa:	0018      	movs	r0, r3
 8017afc:	f000 f8b3 	bl	8017c66 <USBD_CtlError>
        break;
 8017b00:	46c0      	nop			@ (mov r8, r8)
}
 8017b02:	46c0      	nop			@ (mov r8, r8)
 8017b04:	46bd      	mov	sp, r7
 8017b06:	b002      	add	sp, #8
 8017b08:	bd80      	pop	{r7, pc}

08017b0a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b0a:	b580      	push	{r7, lr}
 8017b0c:	b082      	sub	sp, #8
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	6078      	str	r0, [r7, #4]
 8017b12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017b14:	687a      	ldr	r2, [r7, #4]
 8017b16:	23a7      	movs	r3, #167	@ 0xa7
 8017b18:	009b      	lsls	r3, r3, #2
 8017b1a:	5cd3      	ldrb	r3, [r2, r3]
 8017b1c:	3b01      	subs	r3, #1
 8017b1e:	2b02      	cmp	r3, #2
 8017b20:	d822      	bhi.n	8017b68 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	88db      	ldrh	r3, [r3, #6]
 8017b26:	2b02      	cmp	r3, #2
 8017b28:	d006      	beq.n	8017b38 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8017b2a:	683a      	ldr	r2, [r7, #0]
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	0011      	movs	r1, r2
 8017b30:	0018      	movs	r0, r3
 8017b32:	f000 f898 	bl	8017c66 <USBD_CtlError>
        break;
 8017b36:	e01e      	b.n	8017b76 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8017b3e:	687a      	ldr	r2, [r7, #4]
 8017b40:	23a9      	movs	r3, #169	@ 0xa9
 8017b42:	009b      	lsls	r3, r3, #2
 8017b44:	58d3      	ldr	r3, [r2, r3]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d005      	beq.n	8017b56 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	68db      	ldr	r3, [r3, #12]
 8017b4e:	2202      	movs	r2, #2
 8017b50:	431a      	orrs	r2, r3
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	330c      	adds	r3, #12
 8017b5a:	0019      	movs	r1, r3
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2202      	movs	r2, #2
 8017b60:	0018      	movs	r0, r3
 8017b62:	f000 f8fe 	bl	8017d62 <USBD_CtlSendData>
      break;
 8017b66:	e006      	b.n	8017b76 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8017b68:	683a      	ldr	r2, [r7, #0]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	0011      	movs	r1, r2
 8017b6e:	0018      	movs	r0, r3
 8017b70:	f000 f879 	bl	8017c66 <USBD_CtlError>
      break;
 8017b74:	46c0      	nop			@ (mov r8, r8)
  }
}
 8017b76:	46c0      	nop			@ (mov r8, r8)
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	b002      	add	sp, #8
 8017b7c:	bd80      	pop	{r7, pc}

08017b7e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017b7e:	b580      	push	{r7, lr}
 8017b80:	b082      	sub	sp, #8
 8017b82:	af00      	add	r7, sp, #0
 8017b84:	6078      	str	r0, [r7, #4]
 8017b86:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	885b      	ldrh	r3, [r3, #2]
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d108      	bne.n	8017ba2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	23a9      	movs	r3, #169	@ 0xa9
 8017b94:	009b      	lsls	r3, r3, #2
 8017b96:	2101      	movs	r1, #1
 8017b98:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	0018      	movs	r0, r3
 8017b9e:	f000 f94a 	bl	8017e36 <USBD_CtlSendStatus>
  }
}
 8017ba2:	46c0      	nop			@ (mov r8, r8)
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	b002      	add	sp, #8
 8017ba8:	bd80      	pop	{r7, pc}

08017baa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017baa:	b580      	push	{r7, lr}
 8017bac:	b082      	sub	sp, #8
 8017bae:	af00      	add	r7, sp, #0
 8017bb0:	6078      	str	r0, [r7, #4]
 8017bb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	23a7      	movs	r3, #167	@ 0xa7
 8017bb8:	009b      	lsls	r3, r3, #2
 8017bba:	5cd3      	ldrb	r3, [r2, r3]
 8017bbc:	3b01      	subs	r3, #1
 8017bbe:	2b02      	cmp	r3, #2
 8017bc0:	d80d      	bhi.n	8017bde <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	885b      	ldrh	r3, [r3, #2]
 8017bc6:	2b01      	cmp	r3, #1
 8017bc8:	d110      	bne.n	8017bec <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8017bca:	687a      	ldr	r2, [r7, #4]
 8017bcc:	23a9      	movs	r3, #169	@ 0xa9
 8017bce:	009b      	lsls	r3, r3, #2
 8017bd0:	2100      	movs	r1, #0
 8017bd2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	0018      	movs	r0, r3
 8017bd8:	f000 f92d 	bl	8017e36 <USBD_CtlSendStatus>
      }
      break;
 8017bdc:	e006      	b.n	8017bec <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8017bde:	683a      	ldr	r2, [r7, #0]
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	0011      	movs	r1, r2
 8017be4:	0018      	movs	r0, r3
 8017be6:	f000 f83e 	bl	8017c66 <USBD_CtlError>
      break;
 8017bea:	e000      	b.n	8017bee <USBD_ClrFeature+0x44>
      break;
 8017bec:	46c0      	nop			@ (mov r8, r8)
  }
}
 8017bee:	46c0      	nop			@ (mov r8, r8)
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	b002      	add	sp, #8
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b082      	sub	sp, #8
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
 8017bfe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8017c00:	683b      	ldr	r3, [r7, #0]
 8017c02:	781a      	ldrb	r2, [r3, #0]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	785a      	ldrb	r2, [r3, #1]
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	3302      	adds	r3, #2
 8017c14:	781b      	ldrb	r3, [r3, #0]
 8017c16:	001a      	movs	r2, r3
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	3303      	adds	r3, #3
 8017c1c:	781b      	ldrb	r3, [r3, #0]
 8017c1e:	021b      	lsls	r3, r3, #8
 8017c20:	b29b      	uxth	r3, r3
 8017c22:	18d3      	adds	r3, r2, r3
 8017c24:	b29a      	uxth	r2, r3
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	781b      	ldrb	r3, [r3, #0]
 8017c30:	001a      	movs	r2, r3
 8017c32:	683b      	ldr	r3, [r7, #0]
 8017c34:	3305      	adds	r3, #5
 8017c36:	781b      	ldrb	r3, [r3, #0]
 8017c38:	021b      	lsls	r3, r3, #8
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	18d3      	adds	r3, r2, r3
 8017c3e:	b29a      	uxth	r2, r3
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8017c44:	683b      	ldr	r3, [r7, #0]
 8017c46:	3306      	adds	r3, #6
 8017c48:	781b      	ldrb	r3, [r3, #0]
 8017c4a:	001a      	movs	r2, r3
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	3307      	adds	r3, #7
 8017c50:	781b      	ldrb	r3, [r3, #0]
 8017c52:	021b      	lsls	r3, r3, #8
 8017c54:	b29b      	uxth	r3, r3
 8017c56:	18d3      	adds	r3, r2, r3
 8017c58:	b29a      	uxth	r2, r3
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	80da      	strh	r2, [r3, #6]

}
 8017c5e:	46c0      	nop			@ (mov r8, r8)
 8017c60:	46bd      	mov	sp, r7
 8017c62:	b002      	add	sp, #8
 8017c64:	bd80      	pop	{r7, pc}

08017c66 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8017c66:	b580      	push	{r7, lr}
 8017c68:	b082      	sub	sp, #8
 8017c6a:	af00      	add	r7, sp, #0
 8017c6c:	6078      	str	r0, [r7, #4]
 8017c6e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2180      	movs	r1, #128	@ 0x80
 8017c74:	0018      	movs	r0, r3
 8017c76:	f000 fd1e 	bl	80186b6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	2100      	movs	r1, #0
 8017c7e:	0018      	movs	r0, r3
 8017c80:	f000 fd19 	bl	80186b6 <USBD_LL_StallEP>
}
 8017c84:	46c0      	nop			@ (mov r8, r8)
 8017c86:	46bd      	mov	sp, r7
 8017c88:	b002      	add	sp, #8
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017c8c:	b590      	push	{r4, r7, lr}
 8017c8e:	b087      	sub	sp, #28
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	60f8      	str	r0, [r7, #12]
 8017c94:	60b9      	str	r1, [r7, #8]
 8017c96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017c98:	2417      	movs	r4, #23
 8017c9a:	193b      	adds	r3, r7, r4
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d03c      	beq.n	8017d20 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	0018      	movs	r0, r3
 8017caa:	f000 f83d 	bl	8017d28 <USBD_GetLen>
 8017cae:	0003      	movs	r3, r0
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	b29b      	uxth	r3, r3
 8017cb4:	18db      	adds	r3, r3, r3
 8017cb6:	b29a      	uxth	r2, r3
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8017cbc:	193b      	adds	r3, r7, r4
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	193a      	adds	r2, r7, r4
 8017cc2:	1c59      	adds	r1, r3, #1
 8017cc4:	7011      	strb	r1, [r2, #0]
 8017cc6:	001a      	movs	r2, r3
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	189b      	adds	r3, r3, r2
 8017ccc:	687a      	ldr	r2, [r7, #4]
 8017cce:	7812      	ldrb	r2, [r2, #0]
 8017cd0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8017cd2:	193b      	adds	r3, r7, r4
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	193a      	adds	r2, r7, r4
 8017cd8:	1c59      	adds	r1, r3, #1
 8017cda:	7011      	strb	r1, [r2, #0]
 8017cdc:	001a      	movs	r2, r3
 8017cde:	68bb      	ldr	r3, [r7, #8]
 8017ce0:	189b      	adds	r3, r3, r2
 8017ce2:	2203      	movs	r2, #3
 8017ce4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8017ce6:	e017      	b.n	8017d18 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	1c5a      	adds	r2, r3, #1
 8017cec:	60fa      	str	r2, [r7, #12]
 8017cee:	2417      	movs	r4, #23
 8017cf0:	193a      	adds	r2, r7, r4
 8017cf2:	7812      	ldrb	r2, [r2, #0]
 8017cf4:	1939      	adds	r1, r7, r4
 8017cf6:	1c50      	adds	r0, r2, #1
 8017cf8:	7008      	strb	r0, [r1, #0]
 8017cfa:	0011      	movs	r1, r2
 8017cfc:	68ba      	ldr	r2, [r7, #8]
 8017cfe:	1852      	adds	r2, r2, r1
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8017d04:	193b      	adds	r3, r7, r4
 8017d06:	781b      	ldrb	r3, [r3, #0]
 8017d08:	193a      	adds	r2, r7, r4
 8017d0a:	1c59      	adds	r1, r3, #1
 8017d0c:	7011      	strb	r1, [r2, #0]
 8017d0e:	001a      	movs	r2, r3
 8017d10:	68bb      	ldr	r3, [r7, #8]
 8017d12:	189b      	adds	r3, r3, r2
 8017d14:	2200      	movs	r2, #0
 8017d16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	781b      	ldrb	r3, [r3, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d1e3      	bne.n	8017ce8 <USBD_GetString+0x5c>
    }
  }
}
 8017d20:	46c0      	nop			@ (mov r8, r8)
 8017d22:	46bd      	mov	sp, r7
 8017d24:	b007      	add	sp, #28
 8017d26:	bd90      	pop	{r4, r7, pc}

08017d28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b084      	sub	sp, #16
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017d30:	230f      	movs	r3, #15
 8017d32:	18fb      	adds	r3, r7, r3
 8017d34:	2200      	movs	r2, #0
 8017d36:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8017d38:	e008      	b.n	8017d4c <USBD_GetLen+0x24>
  {
    len++;
 8017d3a:	210f      	movs	r1, #15
 8017d3c:	187b      	adds	r3, r7, r1
 8017d3e:	781a      	ldrb	r2, [r3, #0]
 8017d40:	187b      	adds	r3, r7, r1
 8017d42:	3201      	adds	r2, #1
 8017d44:	701a      	strb	r2, [r3, #0]
    buf++;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	3301      	adds	r3, #1
 8017d4a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d1f2      	bne.n	8017d3a <USBD_GetLen+0x12>
  }

  return len;
 8017d54:	230f      	movs	r3, #15
 8017d56:	18fb      	adds	r3, r7, r3
 8017d58:	781b      	ldrb	r3, [r3, #0]
}
 8017d5a:	0018      	movs	r0, r3
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	b004      	add	sp, #16
 8017d60:	bd80      	pop	{r7, pc}

08017d62 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8017d62:	b580      	push	{r7, lr}
 8017d64:	b084      	sub	sp, #16
 8017d66:	af00      	add	r7, sp, #0
 8017d68:	60f8      	str	r0, [r7, #12]
 8017d6a:	60b9      	str	r1, [r7, #8]
 8017d6c:	1dbb      	adds	r3, r7, #6
 8017d6e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017d70:	68fa      	ldr	r2, [r7, #12]
 8017d72:	23a5      	movs	r3, #165	@ 0xa5
 8017d74:	009b      	lsls	r3, r3, #2
 8017d76:	2102      	movs	r1, #2
 8017d78:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8017d7a:	1dbb      	adds	r3, r7, #6
 8017d7c:	881a      	ldrh	r2, [r3, #0]
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8017d82:	1dbb      	adds	r3, r7, #6
 8017d84:	881a      	ldrh	r2, [r3, #0]
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017d8a:	1dbb      	adds	r3, r7, #6
 8017d8c:	881b      	ldrh	r3, [r3, #0]
 8017d8e:	68ba      	ldr	r2, [r7, #8]
 8017d90:	68f8      	ldr	r0, [r7, #12]
 8017d92:	2100      	movs	r1, #0
 8017d94:	f000 fd41 	bl	801881a <USBD_LL_Transmit>

  return USBD_OK;
 8017d98:	2300      	movs	r3, #0
}
 8017d9a:	0018      	movs	r0, r3
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	b004      	add	sp, #16
 8017da0:	bd80      	pop	{r7, pc}

08017da2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8017da2:	b580      	push	{r7, lr}
 8017da4:	b084      	sub	sp, #16
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	60f8      	str	r0, [r7, #12]
 8017daa:	60b9      	str	r1, [r7, #8]
 8017dac:	1dbb      	adds	r3, r7, #6
 8017dae:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017db0:	1dbb      	adds	r3, r7, #6
 8017db2:	881b      	ldrh	r3, [r3, #0]
 8017db4:	68ba      	ldr	r2, [r7, #8]
 8017db6:	68f8      	ldr	r0, [r7, #12]
 8017db8:	2100      	movs	r1, #0
 8017dba:	f000 fd2e 	bl	801881a <USBD_LL_Transmit>

  return USBD_OK;
 8017dbe:	2300      	movs	r3, #0
}
 8017dc0:	0018      	movs	r0, r3
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	b004      	add	sp, #16
 8017dc6:	bd80      	pop	{r7, pc}

08017dc8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b084      	sub	sp, #16
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	60f8      	str	r0, [r7, #12]
 8017dd0:	60b9      	str	r1, [r7, #8]
 8017dd2:	1dbb      	adds	r3, r7, #6
 8017dd4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017dd6:	68fa      	ldr	r2, [r7, #12]
 8017dd8:	23a5      	movs	r3, #165	@ 0xa5
 8017dda:	009b      	lsls	r3, r3, #2
 8017ddc:	2103      	movs	r1, #3
 8017dde:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8017de0:	1dbb      	adds	r3, r7, #6
 8017de2:	8819      	ldrh	r1, [r3, #0]
 8017de4:	68fa      	ldr	r2, [r7, #12]
 8017de6:	23ae      	movs	r3, #174	@ 0xae
 8017de8:	005b      	lsls	r3, r3, #1
 8017dea:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8017dec:	1dbb      	adds	r3, r7, #6
 8017dee:	8819      	ldrh	r1, [r3, #0]
 8017df0:	68fa      	ldr	r2, [r7, #12]
 8017df2:	23b0      	movs	r3, #176	@ 0xb0
 8017df4:	005b      	lsls	r3, r3, #1
 8017df6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017df8:	1dbb      	adds	r3, r7, #6
 8017dfa:	881b      	ldrh	r3, [r3, #0]
 8017dfc:	68ba      	ldr	r2, [r7, #8]
 8017dfe:	68f8      	ldr	r0, [r7, #12]
 8017e00:	2100      	movs	r1, #0
 8017e02:	f000 fd41 	bl	8018888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017e06:	2300      	movs	r3, #0
}
 8017e08:	0018      	movs	r0, r3
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	b004      	add	sp, #16
 8017e0e:	bd80      	pop	{r7, pc}

08017e10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	60f8      	str	r0, [r7, #12]
 8017e18:	60b9      	str	r1, [r7, #8]
 8017e1a:	1dbb      	adds	r3, r7, #6
 8017e1c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017e1e:	1dbb      	adds	r3, r7, #6
 8017e20:	881b      	ldrh	r3, [r3, #0]
 8017e22:	68ba      	ldr	r2, [r7, #8]
 8017e24:	68f8      	ldr	r0, [r7, #12]
 8017e26:	2100      	movs	r1, #0
 8017e28:	f000 fd2e 	bl	8018888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017e2c:	2300      	movs	r3, #0
}
 8017e2e:	0018      	movs	r0, r3
 8017e30:	46bd      	mov	sp, r7
 8017e32:	b004      	add	sp, #16
 8017e34:	bd80      	pop	{r7, pc}

08017e36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017e36:	b580      	push	{r7, lr}
 8017e38:	b082      	sub	sp, #8
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017e3e:	687a      	ldr	r2, [r7, #4]
 8017e40:	23a5      	movs	r3, #165	@ 0xa5
 8017e42:	009b      	lsls	r3, r3, #2
 8017e44:	2104      	movs	r1, #4
 8017e46:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	2100      	movs	r1, #0
 8017e50:	f000 fce3 	bl	801881a <USBD_LL_Transmit>

  return USBD_OK;
 8017e54:	2300      	movs	r3, #0
}
 8017e56:	0018      	movs	r0, r3
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	b002      	add	sp, #8
 8017e5c:	bd80      	pop	{r7, pc}

08017e5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017e5e:	b580      	push	{r7, lr}
 8017e60:	b082      	sub	sp, #8
 8017e62:	af00      	add	r7, sp, #0
 8017e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017e66:	687a      	ldr	r2, [r7, #4]
 8017e68:	23a5      	movs	r3, #165	@ 0xa5
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	2105      	movs	r1, #5
 8017e6e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	2300      	movs	r3, #0
 8017e74:	2200      	movs	r2, #0
 8017e76:	2100      	movs	r1, #0
 8017e78:	f000 fd06 	bl	8018888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017e7c:	2300      	movs	r3, #0
}
 8017e7e:	0018      	movs	r0, r3
 8017e80:	46bd      	mov	sp, r7
 8017e82:	b002      	add	sp, #8
 8017e84:	bd80      	pop	{r7, pc}
	...

08017e88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017e8c:	4914      	ldr	r1, [pc, #80]	@ (8017ee0 <MX_USB_DEVICE_Init+0x58>)
 8017e8e:	4b15      	ldr	r3, [pc, #84]	@ (8017ee4 <MX_USB_DEVICE_Init+0x5c>)
 8017e90:	2200      	movs	r2, #0
 8017e92:	0018      	movs	r0, r3
 8017e94:	f7fe fdec 	bl	8016a70 <USBD_Init>
 8017e98:	1e03      	subs	r3, r0, #0
 8017e9a:	d001      	beq.n	8017ea0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017e9c:	f7ee fe3a 	bl	8006b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017ea0:	4a11      	ldr	r2, [pc, #68]	@ (8017ee8 <MX_USB_DEVICE_Init+0x60>)
 8017ea2:	4b10      	ldr	r3, [pc, #64]	@ (8017ee4 <MX_USB_DEVICE_Init+0x5c>)
 8017ea4:	0011      	movs	r1, r2
 8017ea6:	0018      	movs	r0, r3
 8017ea8:	f7fe fe13 	bl	8016ad2 <USBD_RegisterClass>
 8017eac:	1e03      	subs	r3, r0, #0
 8017eae:	d001      	beq.n	8017eb4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8017eb0:	f7ee fe30 	bl	8006b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8017eec <MX_USB_DEVICE_Init+0x64>)
 8017eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8017ee4 <MX_USB_DEVICE_Init+0x5c>)
 8017eb8:	0011      	movs	r1, r2
 8017eba:	0018      	movs	r0, r3
 8017ebc:	f7fe fd28 	bl	8016910 <USBD_CDC_RegisterInterface>
 8017ec0:	1e03      	subs	r3, r0, #0
 8017ec2:	d001      	beq.n	8017ec8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8017ec4:	f7ee fe26 	bl	8006b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017ec8:	4b06      	ldr	r3, [pc, #24]	@ (8017ee4 <MX_USB_DEVICE_Init+0x5c>)
 8017eca:	0018      	movs	r0, r3
 8017ecc:	f7fe fe21 	bl	8016b12 <USBD_Start>
 8017ed0:	1e03      	subs	r3, r0, #0
 8017ed2:	d001      	beq.n	8017ed8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8017ed4:	f7ee fe1e 	bl	8006b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017ed8:	46c0      	nop			@ (mov r8, r8)
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	46c0      	nop			@ (mov r8, r8)
 8017ee0:	200001ac 	.word	0x200001ac
 8017ee4:	20002468 	.word	0x20002468
 8017ee8:	20000098 	.word	0x20000098
 8017eec:	2000019c 	.word	0x2000019c

08017ef0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017ef4:	4907      	ldr	r1, [pc, #28]	@ (8017f14 <CDC_Init_FS+0x24>)
 8017ef6:	4b08      	ldr	r3, [pc, #32]	@ (8017f18 <CDC_Init_FS+0x28>)
 8017ef8:	2200      	movs	r2, #0
 8017efa:	0018      	movs	r0, r3
 8017efc:	f7fe fd23 	bl	8016946 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017f00:	4a06      	ldr	r2, [pc, #24]	@ (8017f1c <CDC_Init_FS+0x2c>)
 8017f02:	4b05      	ldr	r3, [pc, #20]	@ (8017f18 <CDC_Init_FS+0x28>)
 8017f04:	0011      	movs	r1, r2
 8017f06:	0018      	movs	r0, r3
 8017f08:	f7fe fd39 	bl	801697e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017f0c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017f0e:	0018      	movs	r0, r3
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}
 8017f14:	20002bec 	.word	0x20002bec
 8017f18:	20002468 	.word	0x20002468
 8017f1c:	200027ec 	.word	0x200027ec

08017f20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017f24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017f26:	0018      	movs	r0, r3
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	bd80      	pop	{r7, pc}

08017f2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b082      	sub	sp, #8
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6039      	str	r1, [r7, #0]
 8017f34:	0011      	movs	r1, r2
 8017f36:	1dfb      	adds	r3, r7, #7
 8017f38:	1c02      	adds	r2, r0, #0
 8017f3a:	701a      	strb	r2, [r3, #0]
 8017f3c:	1d3b      	adds	r3, r7, #4
 8017f3e:	1c0a      	adds	r2, r1, #0
 8017f40:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017f42:	1dfb      	adds	r3, r7, #7
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	2b23      	cmp	r3, #35	@ 0x23
 8017f48:	d804      	bhi.n	8017f54 <CDC_Control_FS+0x28>
 8017f4a:	009a      	lsls	r2, r3, #2
 8017f4c:	4b04      	ldr	r3, [pc, #16]	@ (8017f60 <CDC_Control_FS+0x34>)
 8017f4e:	18d3      	adds	r3, r2, r3
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017f54:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8017f56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017f58:	0018      	movs	r0, r3
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	b002      	add	sp, #8
 8017f5e:	bd80      	pop	{r7, pc}
 8017f60:	0801f378 	.word	0x0801f378

08017f64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b082      	sub	sp, #8
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
 8017f6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8017f6e:	4b12      	ldr	r3, [pc, #72]	@ (8017fb8 <CDC_Receive_FS+0x54>)
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d013      	beq.n	8017f9e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8017f76:	683b      	ldr	r3, [r7, #0]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	b29a      	uxth	r2, r3
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	425b      	negs	r3, r3
 8017f80:	6879      	ldr	r1, [r7, #4]
 8017f82:	480e      	ldr	r0, [pc, #56]	@ (8017fbc <CDC_Receive_FS+0x58>)
 8017f84:	f7fa fd32 	bl	80129ec <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017f88:	687a      	ldr	r2, [r7, #4]
 8017f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8017fc0 <CDC_Receive_FS+0x5c>)
 8017f8c:	0011      	movs	r1, r2
 8017f8e:	0018      	movs	r0, r3
 8017f90:	f7fe fcf5 	bl	801697e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017f94:	4b0a      	ldr	r3, [pc, #40]	@ (8017fc0 <CDC_Receive_FS+0x5c>)
 8017f96:	0018      	movs	r0, r3
 8017f98:	f7fe fd3c 	bl	8016a14 <USBD_CDC_ReceivePacket>
 8017f9c:	e006      	b.n	8017fac <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	4b08      	ldr	r3, [pc, #32]	@ (8017fc4 <CDC_Receive_FS+0x60>)
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	18d2      	adds	r2, r2, r3
 8017fa8:	4b06      	ldr	r3, [pc, #24]	@ (8017fc4 <CDC_Receive_FS+0x60>)
 8017faa:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8017fac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017fae:	0018      	movs	r0, r3
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	b002      	add	sp, #8
 8017fb4:	bd80      	pop	{r7, pc}
 8017fb6:	46c0      	nop			@ (mov r8, r8)
 8017fb8:	2000272c 	.word	0x2000272c
 8017fbc:	20002730 	.word	0x20002730
 8017fc0:	20002468 	.word	0x20002468
 8017fc4:	200027e8 	.word	0x200027e8

08017fc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017fc8:	b5b0      	push	{r4, r5, r7, lr}
 8017fca:	b084      	sub	sp, #16
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	000a      	movs	r2, r1
 8017fd2:	1cbb      	adds	r3, r7, #2
 8017fd4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8017fd6:	230f      	movs	r3, #15
 8017fd8:	18fb      	adds	r3, r7, r3
 8017fda:	2200      	movs	r2, #0
 8017fdc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017fde:	4a11      	ldr	r2, [pc, #68]	@ (8018024 <CDC_Transmit_FS+0x5c>)
 8017fe0:	23ae      	movs	r3, #174	@ 0xae
 8017fe2:	009b      	lsls	r3, r3, #2
 8017fe4:	58d3      	ldr	r3, [r2, r3]
 8017fe6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017fe8:	68ba      	ldr	r2, [r7, #8]
 8017fea:	2385      	movs	r3, #133	@ 0x85
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	58d3      	ldr	r3, [r2, r3]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d001      	beq.n	8017ff8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8017ff4:	2301      	movs	r3, #1
 8017ff6:	e010      	b.n	801801a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017ff8:	1cbb      	adds	r3, r7, #2
 8017ffa:	881a      	ldrh	r2, [r3, #0]
 8017ffc:	6879      	ldr	r1, [r7, #4]
 8017ffe:	4b09      	ldr	r3, [pc, #36]	@ (8018024 <CDC_Transmit_FS+0x5c>)
 8018000:	0018      	movs	r0, r3
 8018002:	f7fe fca0 	bl	8016946 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018006:	250f      	movs	r5, #15
 8018008:	197c      	adds	r4, r7, r5
 801800a:	4b06      	ldr	r3, [pc, #24]	@ (8018024 <CDC_Transmit_FS+0x5c>)
 801800c:	0018      	movs	r0, r3
 801800e:	f7fe fcca 	bl	80169a6 <USBD_CDC_TransmitPacket>
 8018012:	0003      	movs	r3, r0
 8018014:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8018016:	197b      	adds	r3, r7, r5
 8018018:	781b      	ldrb	r3, [r3, #0]
}
 801801a:	0018      	movs	r0, r3
 801801c:	46bd      	mov	sp, r7
 801801e:	b004      	add	sp, #16
 8018020:	bdb0      	pop	{r4, r5, r7, pc}
 8018022:	46c0      	nop			@ (mov r8, r8)
 8018024:	20002468 	.word	0x20002468

08018028 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8018028:	b580      	push	{r7, lr}
 801802a:	af00      	add	r7, sp, #0
  ESPProg = true;
 801802c:	4b02      	ldr	r3, [pc, #8]	@ (8018038 <EnableESPProg+0x10>)
 801802e:	2201      	movs	r2, #1
 8018030:	701a      	strb	r2, [r3, #0]
}
 8018032:	46c0      	nop			@ (mov r8, r8)
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	2000272c 	.word	0x2000272c

0801803c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8018040:	4b01      	ldr	r3, [pc, #4]	@ (8018048 <GetUsbRxPointer+0xc>)
}
 8018042:	0018      	movs	r0, r3
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}
 8018048:	200027ec 	.word	0x200027ec

0801804c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8018050:	4b07      	ldr	r3, [pc, #28]	@ (8018070 <ResetUsbRxDataSize+0x24>)
 8018052:	2200      	movs	r2, #0
 8018054:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8018056:	4a07      	ldr	r2, [pc, #28]	@ (8018074 <ResetUsbRxDataSize+0x28>)
 8018058:	4b07      	ldr	r3, [pc, #28]	@ (8018078 <ResetUsbRxDataSize+0x2c>)
 801805a:	0011      	movs	r1, r2
 801805c:	0018      	movs	r0, r3
 801805e:	f7fe fc8e 	bl	801697e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018062:	4b05      	ldr	r3, [pc, #20]	@ (8018078 <ResetUsbRxDataSize+0x2c>)
 8018064:	0018      	movs	r0, r3
 8018066:	f7fe fcd5 	bl	8016a14 <USBD_CDC_ReceivePacket>
}
 801806a:	46c0      	nop			@ (mov r8, r8)
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}
 8018070:	200027e8 	.word	0x200027e8
 8018074:	200027ec 	.word	0x200027ec
 8018078:	20002468 	.word	0x20002468

0801807c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801807c:	b580      	push	{r7, lr}
 801807e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8018080:	4b02      	ldr	r3, [pc, #8]	@ (801808c <GetUsbRxDataSize+0x10>)
 8018082:	681b      	ldr	r3, [r3, #0]
}
 8018084:	0018      	movs	r0, r3
 8018086:	46bd      	mov	sp, r7
 8018088:	bd80      	pop	{r7, pc}
 801808a:	46c0      	nop			@ (mov r8, r8)
 801808c:	200027e8 	.word	0x200027e8

08018090 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8018098:	687a      	ldr	r2, [r7, #4]
 801809a:	4b07      	ldr	r3, [pc, #28]	@ (80180b8 <GetUsbRxNextChunk+0x28>)
 801809c:	18d2      	adds	r2, r2, r3
 801809e:	4b07      	ldr	r3, [pc, #28]	@ (80180bc <GetUsbRxNextChunk+0x2c>)
 80180a0:	0011      	movs	r1, r2
 80180a2:	0018      	movs	r0, r3
 80180a4:	f7fe fc6b 	bl	801697e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80180a8:	4b04      	ldr	r3, [pc, #16]	@ (80180bc <GetUsbRxNextChunk+0x2c>)
 80180aa:	0018      	movs	r0, r3
 80180ac:	f7fe fcb2 	bl	8016a14 <USBD_CDC_ReceivePacket>
}
 80180b0:	46c0      	nop			@ (mov r8, r8)
 80180b2:	46bd      	mov	sp, r7
 80180b4:	b002      	add	sp, #8
 80180b6:	bd80      	pop	{r7, pc}
 80180b8:	200027ec 	.word	0x200027ec
 80180bc:	20002468 	.word	0x20002468

080180c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	0002      	movs	r2, r0
 80180c8:	6039      	str	r1, [r7, #0]
 80180ca:	1dfb      	adds	r3, r7, #7
 80180cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80180ce:	683b      	ldr	r3, [r7, #0]
 80180d0:	2212      	movs	r2, #18
 80180d2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80180d4:	4b02      	ldr	r3, [pc, #8]	@ (80180e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80180d6:	0018      	movs	r0, r3
 80180d8:	46bd      	mov	sp, r7
 80180da:	b002      	add	sp, #8
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	46c0      	nop			@ (mov r8, r8)
 80180e0:	200001c8 	.word	0x200001c8

080180e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	0002      	movs	r2, r0
 80180ec:	6039      	str	r1, [r7, #0]
 80180ee:	1dfb      	adds	r3, r7, #7
 80180f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	2204      	movs	r2, #4
 80180f6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80180f8:	4b02      	ldr	r3, [pc, #8]	@ (8018104 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80180fa:	0018      	movs	r0, r3
 80180fc:	46bd      	mov	sp, r7
 80180fe:	b002      	add	sp, #8
 8018100:	bd80      	pop	{r7, pc}
 8018102:	46c0      	nop			@ (mov r8, r8)
 8018104:	200001dc 	.word	0x200001dc

08018108 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b082      	sub	sp, #8
 801810c:	af00      	add	r7, sp, #0
 801810e:	0002      	movs	r2, r0
 8018110:	6039      	str	r1, [r7, #0]
 8018112:	1dfb      	adds	r3, r7, #7
 8018114:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8018116:	1dfb      	adds	r3, r7, #7
 8018118:	781b      	ldrb	r3, [r3, #0]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d106      	bne.n	801812c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801811e:	683a      	ldr	r2, [r7, #0]
 8018120:	4908      	ldr	r1, [pc, #32]	@ (8018144 <USBD_FS_ProductStrDescriptor+0x3c>)
 8018122:	4b09      	ldr	r3, [pc, #36]	@ (8018148 <USBD_FS_ProductStrDescriptor+0x40>)
 8018124:	0018      	movs	r0, r3
 8018126:	f7ff fdb1 	bl	8017c8c <USBD_GetString>
 801812a:	e005      	b.n	8018138 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801812c:	683a      	ldr	r2, [r7, #0]
 801812e:	4905      	ldr	r1, [pc, #20]	@ (8018144 <USBD_FS_ProductStrDescriptor+0x3c>)
 8018130:	4b05      	ldr	r3, [pc, #20]	@ (8018148 <USBD_FS_ProductStrDescriptor+0x40>)
 8018132:	0018      	movs	r0, r3
 8018134:	f7ff fdaa 	bl	8017c8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018138:	4b02      	ldr	r3, [pc, #8]	@ (8018144 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801813a:	0018      	movs	r0, r3
 801813c:	46bd      	mov	sp, r7
 801813e:	b002      	add	sp, #8
 8018140:	bd80      	pop	{r7, pc}
 8018142:	46c0      	nop			@ (mov r8, r8)
 8018144:	20002fec 	.word	0x20002fec
 8018148:	0801ee90 	.word	0x0801ee90

0801814c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b082      	sub	sp, #8
 8018150:	af00      	add	r7, sp, #0
 8018152:	0002      	movs	r2, r0
 8018154:	6039      	str	r1, [r7, #0]
 8018156:	1dfb      	adds	r3, r7, #7
 8018158:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801815a:	683a      	ldr	r2, [r7, #0]
 801815c:	4904      	ldr	r1, [pc, #16]	@ (8018170 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801815e:	4b05      	ldr	r3, [pc, #20]	@ (8018174 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8018160:	0018      	movs	r0, r3
 8018162:	f7ff fd93 	bl	8017c8c <USBD_GetString>
  return USBD_StrDesc;
 8018166:	4b02      	ldr	r3, [pc, #8]	@ (8018170 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8018168:	0018      	movs	r0, r3
 801816a:	46bd      	mov	sp, r7
 801816c:	b002      	add	sp, #8
 801816e:	bd80      	pop	{r7, pc}
 8018170:	20002fec 	.word	0x20002fec
 8018174:	0801eea8 	.word	0x0801eea8

08018178 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b082      	sub	sp, #8
 801817c:	af00      	add	r7, sp, #0
 801817e:	0002      	movs	r2, r0
 8018180:	6039      	str	r1, [r7, #0]
 8018182:	1dfb      	adds	r3, r7, #7
 8018184:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018186:	683b      	ldr	r3, [r7, #0]
 8018188:	221a      	movs	r2, #26
 801818a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801818c:	f000 f84c 	bl	8018228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018190:	4b02      	ldr	r3, [pc, #8]	@ (801819c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8018192:	0018      	movs	r0, r3
 8018194:	46bd      	mov	sp, r7
 8018196:	b002      	add	sp, #8
 8018198:	bd80      	pop	{r7, pc}
 801819a:	46c0      	nop			@ (mov r8, r8)
 801819c:	200001e0 	.word	0x200001e0

080181a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b082      	sub	sp, #8
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	0002      	movs	r2, r0
 80181a8:	6039      	str	r1, [r7, #0]
 80181aa:	1dfb      	adds	r3, r7, #7
 80181ac:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80181ae:	1dfb      	adds	r3, r7, #7
 80181b0:	781b      	ldrb	r3, [r3, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d106      	bne.n	80181c4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80181b6:	683a      	ldr	r2, [r7, #0]
 80181b8:	4908      	ldr	r1, [pc, #32]	@ (80181dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80181ba:	4b09      	ldr	r3, [pc, #36]	@ (80181e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80181bc:	0018      	movs	r0, r3
 80181be:	f7ff fd65 	bl	8017c8c <USBD_GetString>
 80181c2:	e005      	b.n	80181d0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80181c4:	683a      	ldr	r2, [r7, #0]
 80181c6:	4905      	ldr	r1, [pc, #20]	@ (80181dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80181c8:	4b05      	ldr	r3, [pc, #20]	@ (80181e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80181ca:	0018      	movs	r0, r3
 80181cc:	f7ff fd5e 	bl	8017c8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80181d0:	4b02      	ldr	r3, [pc, #8]	@ (80181dc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80181d2:	0018      	movs	r0, r3
 80181d4:	46bd      	mov	sp, r7
 80181d6:	b002      	add	sp, #8
 80181d8:	bd80      	pop	{r7, pc}
 80181da:	46c0      	nop			@ (mov r8, r8)
 80181dc:	20002fec 	.word	0x20002fec
 80181e0:	0801eebc 	.word	0x0801eebc

080181e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b082      	sub	sp, #8
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	0002      	movs	r2, r0
 80181ec:	6039      	str	r1, [r7, #0]
 80181ee:	1dfb      	adds	r3, r7, #7
 80181f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80181f2:	1dfb      	adds	r3, r7, #7
 80181f4:	781b      	ldrb	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d106      	bne.n	8018208 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80181fa:	683a      	ldr	r2, [r7, #0]
 80181fc:	4908      	ldr	r1, [pc, #32]	@ (8018220 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80181fe:	4b09      	ldr	r3, [pc, #36]	@ (8018224 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8018200:	0018      	movs	r0, r3
 8018202:	f7ff fd43 	bl	8017c8c <USBD_GetString>
 8018206:	e005      	b.n	8018214 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018208:	683a      	ldr	r2, [r7, #0]
 801820a:	4905      	ldr	r1, [pc, #20]	@ (8018220 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801820c:	4b05      	ldr	r3, [pc, #20]	@ (8018224 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801820e:	0018      	movs	r0, r3
 8018210:	f7ff fd3c 	bl	8017c8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018214:	4b02      	ldr	r3, [pc, #8]	@ (8018220 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8018216:	0018      	movs	r0, r3
 8018218:	46bd      	mov	sp, r7
 801821a:	b002      	add	sp, #8
 801821c:	bd80      	pop	{r7, pc}
 801821e:	46c0      	nop			@ (mov r8, r8)
 8018220:	20002fec 	.word	0x20002fec
 8018224:	0801eec8 	.word	0x0801eec8

08018228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b084      	sub	sp, #16
 801822c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801822e:	4b10      	ldr	r3, [pc, #64]	@ (8018270 <Get_SerialNum+0x48>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018234:	4b0f      	ldr	r3, [pc, #60]	@ (8018274 <Get_SerialNum+0x4c>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801823a:	4b0f      	ldr	r3, [pc, #60]	@ (8018278 <Get_SerialNum+0x50>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018240:	68fa      	ldr	r2, [r7, #12]
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	18d3      	adds	r3, r2, r3
 8018246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d00b      	beq.n	8018266 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801824e:	490b      	ldr	r1, [pc, #44]	@ (801827c <Get_SerialNum+0x54>)
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	2208      	movs	r2, #8
 8018254:	0018      	movs	r0, r3
 8018256:	f000 f815 	bl	8018284 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801825a:	4909      	ldr	r1, [pc, #36]	@ (8018280 <Get_SerialNum+0x58>)
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	2204      	movs	r2, #4
 8018260:	0018      	movs	r0, r3
 8018262:	f000 f80f 	bl	8018284 <IntToUnicode>
  }
}
 8018266:	46c0      	nop			@ (mov r8, r8)
 8018268:	46bd      	mov	sp, r7
 801826a:	b004      	add	sp, #16
 801826c:	bd80      	pop	{r7, pc}
 801826e:	46c0      	nop			@ (mov r8, r8)
 8018270:	1ff80050 	.word	0x1ff80050
 8018274:	1ff80054 	.word	0x1ff80054
 8018278:	1ff80058 	.word	0x1ff80058
 801827c:	200001e2 	.word	0x200001e2
 8018280:	200001f2 	.word	0x200001f2

08018284 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b086      	sub	sp, #24
 8018288:	af00      	add	r7, sp, #0
 801828a:	60f8      	str	r0, [r7, #12]
 801828c:	60b9      	str	r1, [r7, #8]
 801828e:	1dfb      	adds	r3, r7, #7
 8018290:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8018292:	2117      	movs	r1, #23
 8018294:	187b      	adds	r3, r7, r1
 8018296:	2200      	movs	r2, #0
 8018298:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801829a:	187b      	adds	r3, r7, r1
 801829c:	2200      	movs	r2, #0
 801829e:	701a      	strb	r2, [r3, #0]
 80182a0:	e02f      	b.n	8018302 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	0f1b      	lsrs	r3, r3, #28
 80182a6:	2b09      	cmp	r3, #9
 80182a8:	d80d      	bhi.n	80182c6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	0f1b      	lsrs	r3, r3, #28
 80182ae:	b2da      	uxtb	r2, r3
 80182b0:	2317      	movs	r3, #23
 80182b2:	18fb      	adds	r3, r7, r3
 80182b4:	781b      	ldrb	r3, [r3, #0]
 80182b6:	005b      	lsls	r3, r3, #1
 80182b8:	0019      	movs	r1, r3
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	185b      	adds	r3, r3, r1
 80182be:	3230      	adds	r2, #48	@ 0x30
 80182c0:	b2d2      	uxtb	r2, r2
 80182c2:	701a      	strb	r2, [r3, #0]
 80182c4:	e00c      	b.n	80182e0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	0f1b      	lsrs	r3, r3, #28
 80182ca:	b2da      	uxtb	r2, r3
 80182cc:	2317      	movs	r3, #23
 80182ce:	18fb      	adds	r3, r7, r3
 80182d0:	781b      	ldrb	r3, [r3, #0]
 80182d2:	005b      	lsls	r3, r3, #1
 80182d4:	0019      	movs	r1, r3
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	185b      	adds	r3, r3, r1
 80182da:	3237      	adds	r2, #55	@ 0x37
 80182dc:	b2d2      	uxtb	r2, r2
 80182de:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	011b      	lsls	r3, r3, #4
 80182e4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80182e6:	2117      	movs	r1, #23
 80182e8:	187b      	adds	r3, r7, r1
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	005b      	lsls	r3, r3, #1
 80182ee:	3301      	adds	r3, #1
 80182f0:	68ba      	ldr	r2, [r7, #8]
 80182f2:	18d3      	adds	r3, r2, r3
 80182f4:	2200      	movs	r2, #0
 80182f6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80182f8:	187b      	adds	r3, r7, r1
 80182fa:	781a      	ldrb	r2, [r3, #0]
 80182fc:	187b      	adds	r3, r7, r1
 80182fe:	3201      	adds	r2, #1
 8018300:	701a      	strb	r2, [r3, #0]
 8018302:	2317      	movs	r3, #23
 8018304:	18fa      	adds	r2, r7, r3
 8018306:	1dfb      	adds	r3, r7, #7
 8018308:	7812      	ldrb	r2, [r2, #0]
 801830a:	781b      	ldrb	r3, [r3, #0]
 801830c:	429a      	cmp	r2, r3
 801830e:	d3c8      	bcc.n	80182a2 <IntToUnicode+0x1e>
  }
}
 8018310:	46c0      	nop			@ (mov r8, r8)
 8018312:	46c0      	nop			@ (mov r8, r8)
 8018314:	46bd      	mov	sp, r7
 8018316:	b006      	add	sp, #24
 8018318:	bd80      	pop	{r7, pc}
	...

0801831c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b082      	sub	sp, #8
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4a0a      	ldr	r2, [pc, #40]	@ (8018354 <HAL_PCD_MspInit+0x38>)
 801832a:	4293      	cmp	r3, r2
 801832c:	d10e      	bne.n	801834c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801832e:	4b0a      	ldr	r3, [pc, #40]	@ (8018358 <HAL_PCD_MspInit+0x3c>)
 8018330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018332:	4b09      	ldr	r3, [pc, #36]	@ (8018358 <HAL_PCD_MspInit+0x3c>)
 8018334:	2180      	movs	r1, #128	@ 0x80
 8018336:	0409      	lsls	r1, r1, #16
 8018338:	430a      	orrs	r2, r1
 801833a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801833c:	2200      	movs	r2, #0
 801833e:	2100      	movs	r1, #0
 8018340:	201f      	movs	r0, #31
 8018342:	f7f3 fd23 	bl	800bd8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8018346:	201f      	movs	r0, #31
 8018348:	f7f3 fd35 	bl	800bdb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801834c:	46c0      	nop			@ (mov r8, r8)
 801834e:	46bd      	mov	sp, r7
 8018350:	b002      	add	sp, #8
 8018352:	bd80      	pop	{r7, pc}
 8018354:	40005c00 	.word	0x40005c00
 8018358:	40021000 	.word	0x40021000

0801835c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b082      	sub	sp, #8
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	23bc      	movs	r3, #188	@ 0xbc
 8018368:	009b      	lsls	r3, r3, #2
 801836a:	58d2      	ldr	r2, [r2, r3]
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	21ac      	movs	r1, #172	@ 0xac
 8018370:	0089      	lsls	r1, r1, #2
 8018372:	468c      	mov	ip, r1
 8018374:	4463      	add	r3, ip
 8018376:	0019      	movs	r1, r3
 8018378:	0010      	movs	r0, r2
 801837a:	f7fe fc1d 	bl	8016bb8 <USBD_LL_SetupStage>
}
 801837e:	46c0      	nop			@ (mov r8, r8)
 8018380:	46bd      	mov	sp, r7
 8018382:	b002      	add	sp, #8
 8018384:	bd80      	pop	{r7, pc}

08018386 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018386:	b590      	push	{r4, r7, lr}
 8018388:	b083      	sub	sp, #12
 801838a:	af00      	add	r7, sp, #0
 801838c:	6078      	str	r0, [r7, #4]
 801838e:	000a      	movs	r2, r1
 8018390:	1cfb      	adds	r3, r7, #3
 8018392:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018394:	687a      	ldr	r2, [r7, #4]
 8018396:	23bc      	movs	r3, #188	@ 0xbc
 8018398:	009b      	lsls	r3, r3, #2
 801839a:	58d4      	ldr	r4, [r2, r3]
 801839c:	1cfb      	adds	r3, r7, #3
 801839e:	781a      	ldrb	r2, [r3, #0]
 80183a0:	6878      	ldr	r0, [r7, #4]
 80183a2:	23be      	movs	r3, #190	@ 0xbe
 80183a4:	0059      	lsls	r1, r3, #1
 80183a6:	0013      	movs	r3, r2
 80183a8:	009b      	lsls	r3, r3, #2
 80183aa:	189b      	adds	r3, r3, r2
 80183ac:	00db      	lsls	r3, r3, #3
 80183ae:	18c3      	adds	r3, r0, r3
 80183b0:	185b      	adds	r3, r3, r1
 80183b2:	681a      	ldr	r2, [r3, #0]
 80183b4:	1cfb      	adds	r3, r7, #3
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	0019      	movs	r1, r3
 80183ba:	0020      	movs	r0, r4
 80183bc:	f7fe fc5a 	bl	8016c74 <USBD_LL_DataOutStage>
}
 80183c0:	46c0      	nop			@ (mov r8, r8)
 80183c2:	46bd      	mov	sp, r7
 80183c4:	b003      	add	sp, #12
 80183c6:	bd90      	pop	{r4, r7, pc}

080183c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b082      	sub	sp, #8
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
 80183d0:	000a      	movs	r2, r1
 80183d2:	1cfb      	adds	r3, r7, #3
 80183d4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80183d6:	687a      	ldr	r2, [r7, #4]
 80183d8:	23bc      	movs	r3, #188	@ 0xbc
 80183da:	009b      	lsls	r3, r3, #2
 80183dc:	58d0      	ldr	r0, [r2, r3]
 80183de:	1cfb      	adds	r3, r7, #3
 80183e0:	781a      	ldrb	r2, [r3, #0]
 80183e2:	6879      	ldr	r1, [r7, #4]
 80183e4:	0013      	movs	r3, r2
 80183e6:	009b      	lsls	r3, r3, #2
 80183e8:	189b      	adds	r3, r3, r2
 80183ea:	00db      	lsls	r3, r3, #3
 80183ec:	18cb      	adds	r3, r1, r3
 80183ee:	333c      	adds	r3, #60	@ 0x3c
 80183f0:	681a      	ldr	r2, [r3, #0]
 80183f2:	1cfb      	adds	r3, r7, #3
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	0019      	movs	r1, r3
 80183f8:	f7fe fcbe 	bl	8016d78 <USBD_LL_DataInStage>
}
 80183fc:	46c0      	nop			@ (mov r8, r8)
 80183fe:	46bd      	mov	sp, r7
 8018400:	b002      	add	sp, #8
 8018402:	bd80      	pop	{r7, pc}

08018404 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801840c:	687a      	ldr	r2, [r7, #4]
 801840e:	23bc      	movs	r3, #188	@ 0xbc
 8018410:	009b      	lsls	r3, r3, #2
 8018412:	58d3      	ldr	r3, [r2, r3]
 8018414:	0018      	movs	r0, r3
 8018416:	f7fe fdf5 	bl	8017004 <USBD_LL_SOF>
}
 801841a:	46c0      	nop			@ (mov r8, r8)
 801841c:	46bd      	mov	sp, r7
 801841e:	b002      	add	sp, #8
 8018420:	bd80      	pop	{r7, pc}

08018422 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018422:	b580      	push	{r7, lr}
 8018424:	b084      	sub	sp, #16
 8018426:	af00      	add	r7, sp, #0
 8018428:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801842a:	230f      	movs	r3, #15
 801842c:	18fb      	adds	r3, r7, r3
 801842e:	2201      	movs	r2, #1
 8018430:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	689b      	ldr	r3, [r3, #8]
 8018436:	2b02      	cmp	r3, #2
 8018438:	d001      	beq.n	801843e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801843a:	f7ee fb6b 	bl	8006b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801843e:	687a      	ldr	r2, [r7, #4]
 8018440:	23bc      	movs	r3, #188	@ 0xbc
 8018442:	009b      	lsls	r3, r3, #2
 8018444:	58d2      	ldr	r2, [r2, r3]
 8018446:	230f      	movs	r3, #15
 8018448:	18fb      	adds	r3, r7, r3
 801844a:	781b      	ldrb	r3, [r3, #0]
 801844c:	0019      	movs	r1, r3
 801844e:	0010      	movs	r0, r2
 8018450:	f7fe fd97 	bl	8016f82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018454:	687a      	ldr	r2, [r7, #4]
 8018456:	23bc      	movs	r3, #188	@ 0xbc
 8018458:	009b      	lsls	r3, r3, #2
 801845a:	58d3      	ldr	r3, [r2, r3]
 801845c:	0018      	movs	r0, r3
 801845e:	f7fe fd48 	bl	8016ef2 <USBD_LL_Reset>
}
 8018462:	46c0      	nop			@ (mov r8, r8)
 8018464:	46bd      	mov	sp, r7
 8018466:	b004      	add	sp, #16
 8018468:	bd80      	pop	{r7, pc}
	...

0801846c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018474:	687a      	ldr	r2, [r7, #4]
 8018476:	23bc      	movs	r3, #188	@ 0xbc
 8018478:	009b      	lsls	r3, r3, #2
 801847a:	58d3      	ldr	r3, [r2, r3]
 801847c:	0018      	movs	r0, r3
 801847e:	f7fe fd91 	bl	8016fa4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	699b      	ldr	r3, [r3, #24]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d005      	beq.n	8018496 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801848a:	4b05      	ldr	r3, [pc, #20]	@ (80184a0 <HAL_PCD_SuspendCallback+0x34>)
 801848c:	691a      	ldr	r2, [r3, #16]
 801848e:	4b04      	ldr	r3, [pc, #16]	@ (80184a0 <HAL_PCD_SuspendCallback+0x34>)
 8018490:	2106      	movs	r1, #6
 8018492:	430a      	orrs	r2, r1
 8018494:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8018496:	46c0      	nop			@ (mov r8, r8)
 8018498:	46bd      	mov	sp, r7
 801849a:	b002      	add	sp, #8
 801849c:	bd80      	pop	{r7, pc}
 801849e:	46c0      	nop			@ (mov r8, r8)
 80184a0:	e000ed00 	.word	0xe000ed00

080184a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b082      	sub	sp, #8
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	699b      	ldr	r3, [r3, #24]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d007      	beq.n	80184c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80184b4:	4b09      	ldr	r3, [pc, #36]	@ (80184dc <HAL_PCD_ResumeCallback+0x38>)
 80184b6:	691a      	ldr	r2, [r3, #16]
 80184b8:	4b08      	ldr	r3, [pc, #32]	@ (80184dc <HAL_PCD_ResumeCallback+0x38>)
 80184ba:	2106      	movs	r1, #6
 80184bc:	438a      	bics	r2, r1
 80184be:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80184c0:	f000 fa44 	bl	801894c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80184c4:	687a      	ldr	r2, [r7, #4]
 80184c6:	23bc      	movs	r3, #188	@ 0xbc
 80184c8:	009b      	lsls	r3, r3, #2
 80184ca:	58d3      	ldr	r3, [r2, r3]
 80184cc:	0018      	movs	r0, r3
 80184ce:	f7fe fd81 	bl	8016fd4 <USBD_LL_Resume>
}
 80184d2:	46c0      	nop			@ (mov r8, r8)
 80184d4:	46bd      	mov	sp, r7
 80184d6:	b002      	add	sp, #8
 80184d8:	bd80      	pop	{r7, pc}
 80184da:	46c0      	nop			@ (mov r8, r8)
 80184dc:	e000ed00 	.word	0xe000ed00

080184e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b082      	sub	sp, #8
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80184e8:	4a2d      	ldr	r2, [pc, #180]	@ (80185a0 <USBD_LL_Init+0xc0>)
 80184ea:	23bc      	movs	r3, #188	@ 0xbc
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	6879      	ldr	r1, [r7, #4]
 80184f0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80184f2:	687a      	ldr	r2, [r7, #4]
 80184f4:	23b0      	movs	r3, #176	@ 0xb0
 80184f6:	009b      	lsls	r3, r3, #2
 80184f8:	4929      	ldr	r1, [pc, #164]	@ (80185a0 <USBD_LL_Init+0xc0>)
 80184fa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80184fc:	4b28      	ldr	r3, [pc, #160]	@ (80185a0 <USBD_LL_Init+0xc0>)
 80184fe:	4a29      	ldr	r2, [pc, #164]	@ (80185a4 <USBD_LL_Init+0xc4>)
 8018500:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018502:	4b27      	ldr	r3, [pc, #156]	@ (80185a0 <USBD_LL_Init+0xc0>)
 8018504:	2208      	movs	r2, #8
 8018506:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018508:	4b25      	ldr	r3, [pc, #148]	@ (80185a0 <USBD_LL_Init+0xc0>)
 801850a:	2202      	movs	r2, #2
 801850c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801850e:	4b24      	ldr	r3, [pc, #144]	@ (80185a0 <USBD_LL_Init+0xc0>)
 8018510:	2202      	movs	r2, #2
 8018512:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018514:	4b22      	ldr	r3, [pc, #136]	@ (80185a0 <USBD_LL_Init+0xc0>)
 8018516:	2200      	movs	r2, #0
 8018518:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801851a:	4b21      	ldr	r3, [pc, #132]	@ (80185a0 <USBD_LL_Init+0xc0>)
 801851c:	2200      	movs	r2, #0
 801851e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018520:	4b1f      	ldr	r3, [pc, #124]	@ (80185a0 <USBD_LL_Init+0xc0>)
 8018522:	2200      	movs	r2, #0
 8018524:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018526:	4b1e      	ldr	r3, [pc, #120]	@ (80185a0 <USBD_LL_Init+0xc0>)
 8018528:	0018      	movs	r0, r3
 801852a:	f7f6 fd57 	bl	800efdc <HAL_PCD_Init>
 801852e:	1e03      	subs	r3, r0, #0
 8018530:	d001      	beq.n	8018536 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8018532:	f7ee faef 	bl	8006b14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	23b0      	movs	r3, #176	@ 0xb0
 801853a:	009b      	lsls	r3, r3, #2
 801853c:	58d0      	ldr	r0, [r2, r3]
 801853e:	2318      	movs	r3, #24
 8018540:	2200      	movs	r2, #0
 8018542:	2100      	movs	r1, #0
 8018544:	f7f8 fb18 	bl	8010b78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018548:	687a      	ldr	r2, [r7, #4]
 801854a:	23b0      	movs	r3, #176	@ 0xb0
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	58d0      	ldr	r0, [r2, r3]
 8018550:	2358      	movs	r3, #88	@ 0x58
 8018552:	2200      	movs	r2, #0
 8018554:	2180      	movs	r1, #128	@ 0x80
 8018556:	f7f8 fb0f 	bl	8010b78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801855a:	687a      	ldr	r2, [r7, #4]
 801855c:	23b0      	movs	r3, #176	@ 0xb0
 801855e:	009b      	lsls	r3, r3, #2
 8018560:	58d0      	ldr	r0, [r2, r3]
 8018562:	23c0      	movs	r3, #192	@ 0xc0
 8018564:	2200      	movs	r2, #0
 8018566:	2181      	movs	r1, #129	@ 0x81
 8018568:	f7f8 fb06 	bl	8010b78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801856c:	687a      	ldr	r2, [r7, #4]
 801856e:	23b0      	movs	r3, #176	@ 0xb0
 8018570:	009b      	lsls	r3, r3, #2
 8018572:	58d0      	ldr	r0, [r2, r3]
 8018574:	2388      	movs	r3, #136	@ 0x88
 8018576:	005b      	lsls	r3, r3, #1
 8018578:	2200      	movs	r2, #0
 801857a:	2101      	movs	r1, #1
 801857c:	f7f8 fafc 	bl	8010b78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018580:	687a      	ldr	r2, [r7, #4]
 8018582:	23b0      	movs	r3, #176	@ 0xb0
 8018584:	009b      	lsls	r3, r3, #2
 8018586:	58d0      	ldr	r0, [r2, r3]
 8018588:	2380      	movs	r3, #128	@ 0x80
 801858a:	005b      	lsls	r3, r3, #1
 801858c:	2200      	movs	r2, #0
 801858e:	2182      	movs	r1, #130	@ 0x82
 8018590:	f7f8 faf2 	bl	8010b78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018594:	2300      	movs	r3, #0
}
 8018596:	0018      	movs	r0, r3
 8018598:	46bd      	mov	sp, r7
 801859a:	b002      	add	sp, #8
 801859c:	bd80      	pop	{r7, pc}
 801859e:	46c0      	nop			@ (mov r8, r8)
 80185a0:	200031ec 	.word	0x200031ec
 80185a4:	40005c00 	.word	0x40005c00

080185a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80185a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185aa:	b085      	sub	sp, #20
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185b0:	210f      	movs	r1, #15
 80185b2:	187b      	adds	r3, r7, r1
 80185b4:	2200      	movs	r2, #0
 80185b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185b8:	260e      	movs	r6, #14
 80185ba:	19bb      	adds	r3, r7, r6
 80185bc:	2200      	movs	r2, #0
 80185be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80185c0:	687a      	ldr	r2, [r7, #4]
 80185c2:	23b0      	movs	r3, #176	@ 0xb0
 80185c4:	009b      	lsls	r3, r3, #2
 80185c6:	58d3      	ldr	r3, [r2, r3]
 80185c8:	000d      	movs	r5, r1
 80185ca:	187c      	adds	r4, r7, r1
 80185cc:	0018      	movs	r0, r3
 80185ce:	f7f6 fe05 	bl	800f1dc <HAL_PCD_Start>
 80185d2:	0003      	movs	r3, r0
 80185d4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185d6:	19bc      	adds	r4, r7, r6
 80185d8:	197b      	adds	r3, r7, r5
 80185da:	781b      	ldrb	r3, [r3, #0]
 80185dc:	0018      	movs	r0, r3
 80185de:	f000 f9bc 	bl	801895a <USBD_Get_USB_Status>
 80185e2:	0003      	movs	r3, r0
 80185e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80185e6:	19bb      	adds	r3, r7, r6
 80185e8:	781b      	ldrb	r3, [r3, #0]
}
 80185ea:	0018      	movs	r0, r3
 80185ec:	46bd      	mov	sp, r7
 80185ee:	b005      	add	sp, #20
 80185f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080185f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80185f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185f4:	b085      	sub	sp, #20
 80185f6:	af00      	add	r7, sp, #0
 80185f8:	6078      	str	r0, [r7, #4]
 80185fa:	000c      	movs	r4, r1
 80185fc:	0010      	movs	r0, r2
 80185fe:	0019      	movs	r1, r3
 8018600:	1cfb      	adds	r3, r7, #3
 8018602:	1c22      	adds	r2, r4, #0
 8018604:	701a      	strb	r2, [r3, #0]
 8018606:	1cbb      	adds	r3, r7, #2
 8018608:	1c02      	adds	r2, r0, #0
 801860a:	701a      	strb	r2, [r3, #0]
 801860c:	003b      	movs	r3, r7
 801860e:	1c0a      	adds	r2, r1, #0
 8018610:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018612:	260f      	movs	r6, #15
 8018614:	19bb      	adds	r3, r7, r6
 8018616:	2200      	movs	r2, #0
 8018618:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801861a:	250e      	movs	r5, #14
 801861c:	197b      	adds	r3, r7, r5
 801861e:	2200      	movs	r2, #0
 8018620:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018622:	687a      	ldr	r2, [r7, #4]
 8018624:	23b0      	movs	r3, #176	@ 0xb0
 8018626:	009b      	lsls	r3, r3, #2
 8018628:	58d0      	ldr	r0, [r2, r3]
 801862a:	19bc      	adds	r4, r7, r6
 801862c:	1cbb      	adds	r3, r7, #2
 801862e:	781d      	ldrb	r5, [r3, #0]
 8018630:	003b      	movs	r3, r7
 8018632:	881a      	ldrh	r2, [r3, #0]
 8018634:	1cfb      	adds	r3, r7, #3
 8018636:	7819      	ldrb	r1, [r3, #0]
 8018638:	002b      	movs	r3, r5
 801863a:	f7f6 ff64 	bl	800f506 <HAL_PCD_EP_Open>
 801863e:	0003      	movs	r3, r0
 8018640:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018642:	250e      	movs	r5, #14
 8018644:	197c      	adds	r4, r7, r5
 8018646:	19bb      	adds	r3, r7, r6
 8018648:	781b      	ldrb	r3, [r3, #0]
 801864a:	0018      	movs	r0, r3
 801864c:	f000 f985 	bl	801895a <USBD_Get_USB_Status>
 8018650:	0003      	movs	r3, r0
 8018652:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018654:	197b      	adds	r3, r7, r5
 8018656:	781b      	ldrb	r3, [r3, #0]
}
 8018658:	0018      	movs	r0, r3
 801865a:	46bd      	mov	sp, r7
 801865c:	b005      	add	sp, #20
 801865e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018660 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018662:	b085      	sub	sp, #20
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	000a      	movs	r2, r1
 801866a:	1cfb      	adds	r3, r7, #3
 801866c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801866e:	210f      	movs	r1, #15
 8018670:	187b      	adds	r3, r7, r1
 8018672:	2200      	movs	r2, #0
 8018674:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018676:	260e      	movs	r6, #14
 8018678:	19bb      	adds	r3, r7, r6
 801867a:	2200      	movs	r2, #0
 801867c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801867e:	687a      	ldr	r2, [r7, #4]
 8018680:	23b0      	movs	r3, #176	@ 0xb0
 8018682:	009b      	lsls	r3, r3, #2
 8018684:	58d2      	ldr	r2, [r2, r3]
 8018686:	000d      	movs	r5, r1
 8018688:	187c      	adds	r4, r7, r1
 801868a:	1cfb      	adds	r3, r7, #3
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	0019      	movs	r1, r3
 8018690:	0010      	movs	r0, r2
 8018692:	f7f6 ffa7 	bl	800f5e4 <HAL_PCD_EP_Close>
 8018696:	0003      	movs	r3, r0
 8018698:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801869a:	19bc      	adds	r4, r7, r6
 801869c:	197b      	adds	r3, r7, r5
 801869e:	781b      	ldrb	r3, [r3, #0]
 80186a0:	0018      	movs	r0, r3
 80186a2:	f000 f95a 	bl	801895a <USBD_Get_USB_Status>
 80186a6:	0003      	movs	r3, r0
 80186a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80186aa:	19bb      	adds	r3, r7, r6
 80186ac:	781b      	ldrb	r3, [r3, #0]
}
 80186ae:	0018      	movs	r0, r3
 80186b0:	46bd      	mov	sp, r7
 80186b2:	b005      	add	sp, #20
 80186b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186b6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186b8:	b085      	sub	sp, #20
 80186ba:	af00      	add	r7, sp, #0
 80186bc:	6078      	str	r0, [r7, #4]
 80186be:	000a      	movs	r2, r1
 80186c0:	1cfb      	adds	r3, r7, #3
 80186c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186c4:	210f      	movs	r1, #15
 80186c6:	187b      	adds	r3, r7, r1
 80186c8:	2200      	movs	r2, #0
 80186ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186cc:	260e      	movs	r6, #14
 80186ce:	19bb      	adds	r3, r7, r6
 80186d0:	2200      	movs	r2, #0
 80186d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80186d4:	687a      	ldr	r2, [r7, #4]
 80186d6:	23b0      	movs	r3, #176	@ 0xb0
 80186d8:	009b      	lsls	r3, r3, #2
 80186da:	58d2      	ldr	r2, [r2, r3]
 80186dc:	000d      	movs	r5, r1
 80186de:	187c      	adds	r4, r7, r1
 80186e0:	1cfb      	adds	r3, r7, #3
 80186e2:	781b      	ldrb	r3, [r3, #0]
 80186e4:	0019      	movs	r1, r3
 80186e6:	0010      	movs	r0, r2
 80186e8:	f7f7 f859 	bl	800f79e <HAL_PCD_EP_SetStall>
 80186ec:	0003      	movs	r3, r0
 80186ee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186f0:	19bc      	adds	r4, r7, r6
 80186f2:	197b      	adds	r3, r7, r5
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	0018      	movs	r0, r3
 80186f8:	f000 f92f 	bl	801895a <USBD_Get_USB_Status>
 80186fc:	0003      	movs	r3, r0
 80186fe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018700:	19bb      	adds	r3, r7, r6
 8018702:	781b      	ldrb	r3, [r3, #0]
}
 8018704:	0018      	movs	r0, r3
 8018706:	46bd      	mov	sp, r7
 8018708:	b005      	add	sp, #20
 801870a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801870c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801870c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801870e:	b085      	sub	sp, #20
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	000a      	movs	r2, r1
 8018716:	1cfb      	adds	r3, r7, #3
 8018718:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801871a:	210f      	movs	r1, #15
 801871c:	187b      	adds	r3, r7, r1
 801871e:	2200      	movs	r2, #0
 8018720:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018722:	260e      	movs	r6, #14
 8018724:	19bb      	adds	r3, r7, r6
 8018726:	2200      	movs	r2, #0
 8018728:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801872a:	687a      	ldr	r2, [r7, #4]
 801872c:	23b0      	movs	r3, #176	@ 0xb0
 801872e:	009b      	lsls	r3, r3, #2
 8018730:	58d2      	ldr	r2, [r2, r3]
 8018732:	000d      	movs	r5, r1
 8018734:	187c      	adds	r4, r7, r1
 8018736:	1cfb      	adds	r3, r7, #3
 8018738:	781b      	ldrb	r3, [r3, #0]
 801873a:	0019      	movs	r1, r3
 801873c:	0010      	movs	r0, r2
 801873e:	f7f7 f88a 	bl	800f856 <HAL_PCD_EP_ClrStall>
 8018742:	0003      	movs	r3, r0
 8018744:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018746:	19bc      	adds	r4, r7, r6
 8018748:	197b      	adds	r3, r7, r5
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	0018      	movs	r0, r3
 801874e:	f000 f904 	bl	801895a <USBD_Get_USB_Status>
 8018752:	0003      	movs	r3, r0
 8018754:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018756:	19bb      	adds	r3, r7, r6
 8018758:	781b      	ldrb	r3, [r3, #0]
}
 801875a:	0018      	movs	r0, r3
 801875c:	46bd      	mov	sp, r7
 801875e:	b005      	add	sp, #20
 8018760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018762 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018762:	b580      	push	{r7, lr}
 8018764:	b084      	sub	sp, #16
 8018766:	af00      	add	r7, sp, #0
 8018768:	6078      	str	r0, [r7, #4]
 801876a:	000a      	movs	r2, r1
 801876c:	1cfb      	adds	r3, r7, #3
 801876e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018770:	687a      	ldr	r2, [r7, #4]
 8018772:	23b0      	movs	r3, #176	@ 0xb0
 8018774:	009b      	lsls	r3, r3, #2
 8018776:	58d3      	ldr	r3, [r2, r3]
 8018778:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801877a:	1cfb      	adds	r3, r7, #3
 801877c:	781b      	ldrb	r3, [r3, #0]
 801877e:	b25b      	sxtb	r3, r3
 8018780:	2b00      	cmp	r3, #0
 8018782:	da0d      	bge.n	80187a0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018784:	1cfb      	adds	r3, r7, #3
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	227f      	movs	r2, #127	@ 0x7f
 801878a:	4013      	ands	r3, r2
 801878c:	68f9      	ldr	r1, [r7, #12]
 801878e:	1c5a      	adds	r2, r3, #1
 8018790:	0013      	movs	r3, r2
 8018792:	009b      	lsls	r3, r3, #2
 8018794:	189b      	adds	r3, r3, r2
 8018796:	00db      	lsls	r3, r3, #3
 8018798:	18cb      	adds	r3, r1, r3
 801879a:	3302      	adds	r3, #2
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	e00d      	b.n	80187bc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80187a0:	1cfb      	adds	r3, r7, #3
 80187a2:	781b      	ldrb	r3, [r3, #0]
 80187a4:	227f      	movs	r2, #127	@ 0x7f
 80187a6:	401a      	ands	r2, r3
 80187a8:	68f8      	ldr	r0, [r7, #12]
 80187aa:	23b5      	movs	r3, #181	@ 0xb5
 80187ac:	0059      	lsls	r1, r3, #1
 80187ae:	0013      	movs	r3, r2
 80187b0:	009b      	lsls	r3, r3, #2
 80187b2:	189b      	adds	r3, r3, r2
 80187b4:	00db      	lsls	r3, r3, #3
 80187b6:	18c3      	adds	r3, r0, r3
 80187b8:	185b      	adds	r3, r3, r1
 80187ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80187bc:	0018      	movs	r0, r3
 80187be:	46bd      	mov	sp, r7
 80187c0:	b004      	add	sp, #16
 80187c2:	bd80      	pop	{r7, pc}

080187c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80187c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187c6:	b085      	sub	sp, #20
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
 80187cc:	000a      	movs	r2, r1
 80187ce:	1cfb      	adds	r3, r7, #3
 80187d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187d2:	210f      	movs	r1, #15
 80187d4:	187b      	adds	r3, r7, r1
 80187d6:	2200      	movs	r2, #0
 80187d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187da:	260e      	movs	r6, #14
 80187dc:	19bb      	adds	r3, r7, r6
 80187de:	2200      	movs	r2, #0
 80187e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80187e2:	687a      	ldr	r2, [r7, #4]
 80187e4:	23b0      	movs	r3, #176	@ 0xb0
 80187e6:	009b      	lsls	r3, r3, #2
 80187e8:	58d2      	ldr	r2, [r2, r3]
 80187ea:	000d      	movs	r5, r1
 80187ec:	187c      	adds	r4, r7, r1
 80187ee:	1cfb      	adds	r3, r7, #3
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	0019      	movs	r1, r3
 80187f4:	0010      	movs	r0, r2
 80187f6:	f7f6 fe5b 	bl	800f4b0 <HAL_PCD_SetAddress>
 80187fa:	0003      	movs	r3, r0
 80187fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187fe:	19bc      	adds	r4, r7, r6
 8018800:	197b      	adds	r3, r7, r5
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	0018      	movs	r0, r3
 8018806:	f000 f8a8 	bl	801895a <USBD_Get_USB_Status>
 801880a:	0003      	movs	r3, r0
 801880c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801880e:	19bb      	adds	r3, r7, r6
 8018810:	781b      	ldrb	r3, [r3, #0]
}
 8018812:	0018      	movs	r0, r3
 8018814:	46bd      	mov	sp, r7
 8018816:	b005      	add	sp, #20
 8018818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801881a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801881a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801881c:	b087      	sub	sp, #28
 801881e:	af00      	add	r7, sp, #0
 8018820:	60f8      	str	r0, [r7, #12]
 8018822:	0008      	movs	r0, r1
 8018824:	607a      	str	r2, [r7, #4]
 8018826:	0019      	movs	r1, r3
 8018828:	230b      	movs	r3, #11
 801882a:	18fb      	adds	r3, r7, r3
 801882c:	1c02      	adds	r2, r0, #0
 801882e:	701a      	strb	r2, [r3, #0]
 8018830:	2408      	movs	r4, #8
 8018832:	193b      	adds	r3, r7, r4
 8018834:	1c0a      	adds	r2, r1, #0
 8018836:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018838:	2117      	movs	r1, #23
 801883a:	187b      	adds	r3, r7, r1
 801883c:	2200      	movs	r2, #0
 801883e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018840:	2516      	movs	r5, #22
 8018842:	197b      	adds	r3, r7, r5
 8018844:	2200      	movs	r2, #0
 8018846:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018848:	68fa      	ldr	r2, [r7, #12]
 801884a:	23b0      	movs	r3, #176	@ 0xb0
 801884c:	009b      	lsls	r3, r3, #2
 801884e:	58d0      	ldr	r0, [r2, r3]
 8018850:	193b      	adds	r3, r7, r4
 8018852:	881d      	ldrh	r5, [r3, #0]
 8018854:	000e      	movs	r6, r1
 8018856:	187c      	adds	r4, r7, r1
 8018858:	687a      	ldr	r2, [r7, #4]
 801885a:	230b      	movs	r3, #11
 801885c:	18fb      	adds	r3, r7, r3
 801885e:	7819      	ldrb	r1, [r3, #0]
 8018860:	002b      	movs	r3, r5
 8018862:	f7f6 ff60 	bl	800f726 <HAL_PCD_EP_Transmit>
 8018866:	0003      	movs	r3, r0
 8018868:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801886a:	2516      	movs	r5, #22
 801886c:	197c      	adds	r4, r7, r5
 801886e:	19bb      	adds	r3, r7, r6
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	0018      	movs	r0, r3
 8018874:	f000 f871 	bl	801895a <USBD_Get_USB_Status>
 8018878:	0003      	movs	r3, r0
 801887a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801887c:	197b      	adds	r3, r7, r5
 801887e:	781b      	ldrb	r3, [r3, #0]
}
 8018880:	0018      	movs	r0, r3
 8018882:	46bd      	mov	sp, r7
 8018884:	b007      	add	sp, #28
 8018886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018888 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801888a:	b087      	sub	sp, #28
 801888c:	af00      	add	r7, sp, #0
 801888e:	60f8      	str	r0, [r7, #12]
 8018890:	0008      	movs	r0, r1
 8018892:	607a      	str	r2, [r7, #4]
 8018894:	0019      	movs	r1, r3
 8018896:	230b      	movs	r3, #11
 8018898:	18fb      	adds	r3, r7, r3
 801889a:	1c02      	adds	r2, r0, #0
 801889c:	701a      	strb	r2, [r3, #0]
 801889e:	2408      	movs	r4, #8
 80188a0:	193b      	adds	r3, r7, r4
 80188a2:	1c0a      	adds	r2, r1, #0
 80188a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188a6:	2117      	movs	r1, #23
 80188a8:	187b      	adds	r3, r7, r1
 80188aa:	2200      	movs	r2, #0
 80188ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188ae:	2516      	movs	r5, #22
 80188b0:	197b      	adds	r3, r7, r5
 80188b2:	2200      	movs	r2, #0
 80188b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80188b6:	68fa      	ldr	r2, [r7, #12]
 80188b8:	23b0      	movs	r3, #176	@ 0xb0
 80188ba:	009b      	lsls	r3, r3, #2
 80188bc:	58d0      	ldr	r0, [r2, r3]
 80188be:	193b      	adds	r3, r7, r4
 80188c0:	881d      	ldrh	r5, [r3, #0]
 80188c2:	000e      	movs	r6, r1
 80188c4:	187c      	adds	r4, r7, r1
 80188c6:	687a      	ldr	r2, [r7, #4]
 80188c8:	230b      	movs	r3, #11
 80188ca:	18fb      	adds	r3, r7, r3
 80188cc:	7819      	ldrb	r1, [r3, #0]
 80188ce:	002b      	movs	r3, r5
 80188d0:	f7f6 fed9 	bl	800f686 <HAL_PCD_EP_Receive>
 80188d4:	0003      	movs	r3, r0
 80188d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188d8:	2516      	movs	r5, #22
 80188da:	197c      	adds	r4, r7, r5
 80188dc:	19bb      	adds	r3, r7, r6
 80188de:	781b      	ldrb	r3, [r3, #0]
 80188e0:	0018      	movs	r0, r3
 80188e2:	f000 f83a 	bl	801895a <USBD_Get_USB_Status>
 80188e6:	0003      	movs	r3, r0
 80188e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80188ea:	197b      	adds	r3, r7, r5
 80188ec:	781b      	ldrb	r3, [r3, #0]
}
 80188ee:	0018      	movs	r0, r3
 80188f0:	46bd      	mov	sp, r7
 80188f2:	b007      	add	sp, #28
 80188f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188f6:	b580      	push	{r7, lr}
 80188f8:	b082      	sub	sp, #8
 80188fa:	af00      	add	r7, sp, #0
 80188fc:	6078      	str	r0, [r7, #4]
 80188fe:	000a      	movs	r2, r1
 8018900:	1cfb      	adds	r3, r7, #3
 8018902:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018904:	687a      	ldr	r2, [r7, #4]
 8018906:	23b0      	movs	r3, #176	@ 0xb0
 8018908:	009b      	lsls	r3, r3, #2
 801890a:	58d2      	ldr	r2, [r2, r3]
 801890c:	1cfb      	adds	r3, r7, #3
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	0019      	movs	r1, r3
 8018912:	0010      	movs	r0, r2
 8018914:	f7f6 feee 	bl	800f6f4 <HAL_PCD_EP_GetRxCount>
 8018918:	0003      	movs	r3, r0
}
 801891a:	0018      	movs	r0, r3
 801891c:	46bd      	mov	sp, r7
 801891e:	b002      	add	sp, #8
 8018920:	bd80      	pop	{r7, pc}
	...

08018924 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801892c:	4b02      	ldr	r3, [pc, #8]	@ (8018938 <USBD_static_malloc+0x14>)
}
 801892e:	0018      	movs	r0, r3
 8018930:	46bd      	mov	sp, r7
 8018932:	b002      	add	sp, #8
 8018934:	bd80      	pop	{r7, pc}
 8018936:	46c0      	nop			@ (mov r8, r8)
 8018938:	200034e0 	.word	0x200034e0

0801893c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]

}
 8018944:	46c0      	nop			@ (mov r8, r8)
 8018946:	46bd      	mov	sp, r7
 8018948:	b002      	add	sp, #8
 801894a:	bd80      	pop	{r7, pc}

0801894c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018950:	f7ee f842 	bl	80069d8 <SystemClock_Config>
}
 8018954:	46c0      	nop			@ (mov r8, r8)
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}

0801895a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801895a:	b580      	push	{r7, lr}
 801895c:	b084      	sub	sp, #16
 801895e:	af00      	add	r7, sp, #0
 8018960:	0002      	movs	r2, r0
 8018962:	1dfb      	adds	r3, r7, #7
 8018964:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018966:	230f      	movs	r3, #15
 8018968:	18fb      	adds	r3, r7, r3
 801896a:	2200      	movs	r2, #0
 801896c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801896e:	1dfb      	adds	r3, r7, #7
 8018970:	781b      	ldrb	r3, [r3, #0]
 8018972:	2b03      	cmp	r3, #3
 8018974:	d017      	beq.n	80189a6 <USBD_Get_USB_Status+0x4c>
 8018976:	dc1b      	bgt.n	80189b0 <USBD_Get_USB_Status+0x56>
 8018978:	2b02      	cmp	r3, #2
 801897a:	d00f      	beq.n	801899c <USBD_Get_USB_Status+0x42>
 801897c:	dc18      	bgt.n	80189b0 <USBD_Get_USB_Status+0x56>
 801897e:	2b00      	cmp	r3, #0
 8018980:	d002      	beq.n	8018988 <USBD_Get_USB_Status+0x2e>
 8018982:	2b01      	cmp	r3, #1
 8018984:	d005      	beq.n	8018992 <USBD_Get_USB_Status+0x38>
 8018986:	e013      	b.n	80189b0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018988:	230f      	movs	r3, #15
 801898a:	18fb      	adds	r3, r7, r3
 801898c:	2200      	movs	r2, #0
 801898e:	701a      	strb	r2, [r3, #0]
    break;
 8018990:	e013      	b.n	80189ba <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018992:	230f      	movs	r3, #15
 8018994:	18fb      	adds	r3, r7, r3
 8018996:	2202      	movs	r2, #2
 8018998:	701a      	strb	r2, [r3, #0]
    break;
 801899a:	e00e      	b.n	80189ba <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801899c:	230f      	movs	r3, #15
 801899e:	18fb      	adds	r3, r7, r3
 80189a0:	2201      	movs	r2, #1
 80189a2:	701a      	strb	r2, [r3, #0]
    break;
 80189a4:	e009      	b.n	80189ba <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80189a6:	230f      	movs	r3, #15
 80189a8:	18fb      	adds	r3, r7, r3
 80189aa:	2202      	movs	r2, #2
 80189ac:	701a      	strb	r2, [r3, #0]
    break;
 80189ae:	e004      	b.n	80189ba <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80189b0:	230f      	movs	r3, #15
 80189b2:	18fb      	adds	r3, r7, r3
 80189b4:	2202      	movs	r2, #2
 80189b6:	701a      	strb	r2, [r3, #0]
    break;
 80189b8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80189ba:	230f      	movs	r3, #15
 80189bc:	18fb      	adds	r3, r7, r3
 80189be:	781b      	ldrb	r3, [r3, #0]
}
 80189c0:	0018      	movs	r0, r3
 80189c2:	46bd      	mov	sp, r7
 80189c4:	b004      	add	sp, #16
 80189c6:	bd80      	pop	{r7, pc}

080189c8 <arm_cfft_radix4by2_q31>:
 80189c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189ca:	465f      	mov	r7, fp
 80189cc:	4656      	mov	r6, sl
 80189ce:	464d      	mov	r5, r9
 80189d0:	4644      	mov	r4, r8
 80189d2:	000b      	movs	r3, r1
 80189d4:	b4f0      	push	{r4, r5, r6, r7}
 80189d6:	085b      	lsrs	r3, r3, #1
 80189d8:	b08f      	sub	sp, #60	@ 0x3c
 80189da:	910a      	str	r1, [sp, #40]	@ 0x28
 80189dc:	0007      	movs	r7, r0
 80189de:	9009      	str	r0, [sp, #36]	@ 0x24
 80189e0:	0011      	movs	r1, r2
 80189e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80189e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d100      	bne.n	80189ec <arm_cfft_radix4by2_q31+0x24>
 80189ea:	e0a0      	b.n	8018b2e <arm_cfft_radix4by2_q31+0x166>
 80189ec:	0002      	movs	r2, r0
 80189ee:	00db      	lsls	r3, r3, #3
 80189f0:	3204      	adds	r2, #4
 80189f2:	4691      	mov	r9, r2
 80189f4:	4698      	mov	r8, r3
 80189f6:	000a      	movs	r2, r1
 80189f8:	464e      	mov	r6, r9
 80189fa:	4442      	add	r2, r8
 80189fc:	4699      	mov	r9, r3
 80189fe:	4688      	mov	r8, r1
 8018a00:	9208      	str	r2, [sp, #32]
 8018a02:	900d      	str	r0, [sp, #52]	@ 0x34
 8018a04:	4643      	mov	r3, r8
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	469b      	mov	fp, r3
 8018a0a:	4643      	mov	r3, r8
 8018a0c:	685b      	ldr	r3, [r3, #4]
 8018a0e:	469a      	mov	sl, r3
 8018a10:	683b      	ldr	r3, [r7, #0]
 8018a12:	109c      	asrs	r4, r3, #2
 8018a14:	464b      	mov	r3, r9
 8018a16:	58fb      	ldr	r3, [r7, r3]
 8018a18:	109a      	asrs	r2, r3, #2
 8018a1a:	18a3      	adds	r3, r4, r2
 8018a1c:	603b      	str	r3, [r7, #0]
 8018a1e:	6833      	ldr	r3, [r6, #0]
 8018a20:	1aa4      	subs	r4, r4, r2
 8018a22:	109d      	asrs	r5, r3, #2
 8018a24:	464b      	mov	r3, r9
 8018a26:	58f3      	ldr	r3, [r6, r3]
 8018a28:	17e2      	asrs	r2, r4, #31
 8018a2a:	109b      	asrs	r3, r3, #2
 8018a2c:	18e9      	adds	r1, r5, r3
 8018a2e:	6031      	str	r1, [r6, #0]
 8018a30:	0011      	movs	r1, r2
 8018a32:	465a      	mov	r2, fp
 8018a34:	17d2      	asrs	r2, r2, #31
 8018a36:	0010      	movs	r0, r2
 8018a38:	4652      	mov	r2, sl
 8018a3a:	1aed      	subs	r5, r5, r3
 8018a3c:	17eb      	asrs	r3, r5, #31
 8018a3e:	17d2      	asrs	r2, r2, #31
 8018a40:	9307      	str	r3, [sp, #28]
 8018a42:	9204      	str	r2, [sp, #16]
 8018a44:	0003      	movs	r3, r0
 8018a46:	465a      	mov	r2, fp
 8018a48:	9006      	str	r0, [sp, #24]
 8018a4a:	0020      	movs	r0, r4
 8018a4c:	9105      	str	r1, [sp, #20]
 8018a4e:	f7e7 fdad 	bl	80005ac <__aeabi_lmul>
 8018a52:	2280      	movs	r2, #128	@ 0x80
 8018a54:	2300      	movs	r3, #0
 8018a56:	0612      	lsls	r2, r2, #24
 8018a58:	1880      	adds	r0, r0, r2
 8018a5a:	4159      	adcs	r1, r3
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	9101      	str	r1, [sp, #4]
 8018a60:	9300      	str	r3, [sp, #0]
 8018a62:	4652      	mov	r2, sl
 8018a64:	9b04      	ldr	r3, [sp, #16]
 8018a66:	0028      	movs	r0, r5
 8018a68:	17e9      	asrs	r1, r5, #31
 8018a6a:	f7e7 fd9f 	bl	80005ac <__aeabi_lmul>
 8018a6e:	9a00      	ldr	r2, [sp, #0]
 8018a70:	9b01      	ldr	r3, [sp, #4]
 8018a72:	1880      	adds	r0, r0, r2
 8018a74:	4159      	adcs	r1, r3
 8018a76:	2280      	movs	r2, #128	@ 0x80
 8018a78:	2300      	movs	r3, #0
 8018a7a:	0612      	lsls	r2, r2, #24
 8018a7c:	1880      	adds	r0, r0, r2
 8018a7e:	4159      	adcs	r1, r3
 8018a80:	464a      	mov	r2, r9
 8018a82:	004b      	lsls	r3, r1, #1
 8018a84:	50bb      	str	r3, [r7, r2]
 8018a86:	4658      	mov	r0, fp
 8018a88:	002a      	movs	r2, r5
 8018a8a:	9b07      	ldr	r3, [sp, #28]
 8018a8c:	9906      	ldr	r1, [sp, #24]
 8018a8e:	f7e7 fd8d 	bl	80005ac <__aeabi_lmul>
 8018a92:	2280      	movs	r2, #128	@ 0x80
 8018a94:	2300      	movs	r3, #0
 8018a96:	0612      	lsls	r2, r2, #24
 8018a98:	1880      	adds	r0, r0, r2
 8018a9a:	4159      	adcs	r1, r3
 8018a9c:	2000      	movs	r0, #0
 8018a9e:	9103      	str	r1, [sp, #12]
 8018aa0:	9002      	str	r0, [sp, #8]
 8018aa2:	4652      	mov	r2, sl
 8018aa4:	9b04      	ldr	r3, [sp, #16]
 8018aa6:	0020      	movs	r0, r4
 8018aa8:	9905      	ldr	r1, [sp, #20]
 8018aaa:	f7e7 fd7f 	bl	80005ac <__aeabi_lmul>
 8018aae:	9a02      	ldr	r2, [sp, #8]
 8018ab0:	9b03      	ldr	r3, [sp, #12]
 8018ab2:	1a12      	subs	r2, r2, r0
 8018ab4:	418b      	sbcs	r3, r1
 8018ab6:	2080      	movs	r0, #128	@ 0x80
 8018ab8:	2100      	movs	r1, #0
 8018aba:	0600      	lsls	r0, r0, #24
 8018abc:	1812      	adds	r2, r2, r0
 8018abe:	414b      	adcs	r3, r1
 8018ac0:	464a      	mov	r2, r9
 8018ac2:	005b      	lsls	r3, r3, #1
 8018ac4:	50b3      	str	r3, [r6, r2]
 8018ac6:	2308      	movs	r3, #8
 8018ac8:	469c      	mov	ip, r3
 8018aca:	9b08      	ldr	r3, [sp, #32]
 8018acc:	44e0      	add	r8, ip
 8018ace:	3708      	adds	r7, #8
 8018ad0:	3608      	adds	r6, #8
 8018ad2:	4598      	cmp	r8, r3
 8018ad4:	d196      	bne.n	8018a04 <arm_cfft_radix4by2_q31+0x3c>
 8018ad6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8018ad8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018ada:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018adc:	2302      	movs	r3, #2
 8018ade:	003a      	movs	r2, r7
 8018ae0:	0029      	movs	r1, r5
 8018ae2:	0020      	movs	r0, r4
 8018ae4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8018ae6:	f000 f957 	bl	8018d98 <arm_radix4_butterfly_q31>
 8018aea:	46a4      	mov	ip, r4
 8018aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018aee:	2302      	movs	r3, #2
 8018af0:	0088      	lsls	r0, r1, #2
 8018af2:	4460      	add	r0, ip
 8018af4:	003a      	movs	r2, r7
 8018af6:	0029      	movs	r1, r5
 8018af8:	f000 f94e 	bl	8018d98 <arm_radix4_butterfly_q31>
 8018afc:	46a4      	mov	ip, r4
 8018afe:	0128      	lsls	r0, r5, #4
 8018b00:	4460      	add	r0, ip
 8018b02:	6833      	ldr	r3, [r6, #0]
 8018b04:	005b      	lsls	r3, r3, #1
 8018b06:	6033      	str	r3, [r6, #0]
 8018b08:	6873      	ldr	r3, [r6, #4]
 8018b0a:	005b      	lsls	r3, r3, #1
 8018b0c:	6073      	str	r3, [r6, #4]
 8018b0e:	68b3      	ldr	r3, [r6, #8]
 8018b10:	005b      	lsls	r3, r3, #1
 8018b12:	60b3      	str	r3, [r6, #8]
 8018b14:	68f3      	ldr	r3, [r6, #12]
 8018b16:	005b      	lsls	r3, r3, #1
 8018b18:	60f3      	str	r3, [r6, #12]
 8018b1a:	3610      	adds	r6, #16
 8018b1c:	42b0      	cmp	r0, r6
 8018b1e:	d1f0      	bne.n	8018b02 <arm_cfft_radix4by2_q31+0x13a>
 8018b20:	b00f      	add	sp, #60	@ 0x3c
 8018b22:	bc3c      	pop	{r2, r3, r4, r5}
 8018b24:	4690      	mov	r8, r2
 8018b26:	4699      	mov	r9, r3
 8018b28:	46a2      	mov	sl, r4
 8018b2a:	46ab      	mov	fp, r5
 8018b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b2e:	2302      	movs	r3, #2
 8018b30:	2100      	movs	r1, #0
 8018b32:	0015      	movs	r5, r2
 8018b34:	f000 f930 	bl	8018d98 <arm_radix4_butterfly_q31>
 8018b38:	46bc      	mov	ip, r7
 8018b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b3c:	002a      	movs	r2, r5
 8018b3e:	0098      	lsls	r0, r3, #2
 8018b40:	4460      	add	r0, ip
 8018b42:	2302      	movs	r3, #2
 8018b44:	2100      	movs	r1, #0
 8018b46:	f000 f927 	bl	8018d98 <arm_radix4_butterfly_q31>
 8018b4a:	e7e9      	b.n	8018b20 <arm_cfft_radix4by2_q31+0x158>

08018b4c <arm_cfft_radix4by2_inverse_q31>:
 8018b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b4e:	465f      	mov	r7, fp
 8018b50:	4656      	mov	r6, sl
 8018b52:	464d      	mov	r5, r9
 8018b54:	4644      	mov	r4, r8
 8018b56:	000b      	movs	r3, r1
 8018b58:	b4f0      	push	{r4, r5, r6, r7}
 8018b5a:	085b      	lsrs	r3, r3, #1
 8018b5c:	b08f      	sub	sp, #60	@ 0x3c
 8018b5e:	910a      	str	r1, [sp, #40]	@ 0x28
 8018b60:	0007      	movs	r7, r0
 8018b62:	9009      	str	r0, [sp, #36]	@ 0x24
 8018b64:	0011      	movs	r1, r2
 8018b66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018b68:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d100      	bne.n	8018b70 <arm_cfft_radix4by2_inverse_q31+0x24>
 8018b6e:	e0a0      	b.n	8018cb2 <arm_cfft_radix4by2_inverse_q31+0x166>
 8018b70:	0002      	movs	r2, r0
 8018b72:	00db      	lsls	r3, r3, #3
 8018b74:	3204      	adds	r2, #4
 8018b76:	4691      	mov	r9, r2
 8018b78:	4698      	mov	r8, r3
 8018b7a:	000a      	movs	r2, r1
 8018b7c:	464e      	mov	r6, r9
 8018b7e:	4442      	add	r2, r8
 8018b80:	4699      	mov	r9, r3
 8018b82:	4688      	mov	r8, r1
 8018b84:	9208      	str	r2, [sp, #32]
 8018b86:	900d      	str	r0, [sp, #52]	@ 0x34
 8018b88:	4643      	mov	r3, r8
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	469b      	mov	fp, r3
 8018b8e:	4643      	mov	r3, r8
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	469a      	mov	sl, r3
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	109c      	asrs	r4, r3, #2
 8018b98:	464b      	mov	r3, r9
 8018b9a:	58fb      	ldr	r3, [r7, r3]
 8018b9c:	109a      	asrs	r2, r3, #2
 8018b9e:	18a3      	adds	r3, r4, r2
 8018ba0:	603b      	str	r3, [r7, #0]
 8018ba2:	6833      	ldr	r3, [r6, #0]
 8018ba4:	1aa4      	subs	r4, r4, r2
 8018ba6:	109d      	asrs	r5, r3, #2
 8018ba8:	464b      	mov	r3, r9
 8018baa:	58f3      	ldr	r3, [r6, r3]
 8018bac:	17e2      	asrs	r2, r4, #31
 8018bae:	109b      	asrs	r3, r3, #2
 8018bb0:	18e9      	adds	r1, r5, r3
 8018bb2:	6031      	str	r1, [r6, #0]
 8018bb4:	0011      	movs	r1, r2
 8018bb6:	465a      	mov	r2, fp
 8018bb8:	17d2      	asrs	r2, r2, #31
 8018bba:	0010      	movs	r0, r2
 8018bbc:	4652      	mov	r2, sl
 8018bbe:	1aed      	subs	r5, r5, r3
 8018bc0:	17eb      	asrs	r3, r5, #31
 8018bc2:	17d2      	asrs	r2, r2, #31
 8018bc4:	9307      	str	r3, [sp, #28]
 8018bc6:	9204      	str	r2, [sp, #16]
 8018bc8:	0003      	movs	r3, r0
 8018bca:	465a      	mov	r2, fp
 8018bcc:	9006      	str	r0, [sp, #24]
 8018bce:	0020      	movs	r0, r4
 8018bd0:	9105      	str	r1, [sp, #20]
 8018bd2:	f7e7 fceb 	bl	80005ac <__aeabi_lmul>
 8018bd6:	2280      	movs	r2, #128	@ 0x80
 8018bd8:	2300      	movs	r3, #0
 8018bda:	0612      	lsls	r2, r2, #24
 8018bdc:	1880      	adds	r0, r0, r2
 8018bde:	4159      	adcs	r1, r3
 8018be0:	2300      	movs	r3, #0
 8018be2:	9101      	str	r1, [sp, #4]
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	4652      	mov	r2, sl
 8018be8:	9b04      	ldr	r3, [sp, #16]
 8018bea:	0028      	movs	r0, r5
 8018bec:	17e9      	asrs	r1, r5, #31
 8018bee:	f7e7 fcdd 	bl	80005ac <__aeabi_lmul>
 8018bf2:	9a00      	ldr	r2, [sp, #0]
 8018bf4:	9b01      	ldr	r3, [sp, #4]
 8018bf6:	1a12      	subs	r2, r2, r0
 8018bf8:	418b      	sbcs	r3, r1
 8018bfa:	2080      	movs	r0, #128	@ 0x80
 8018bfc:	2100      	movs	r1, #0
 8018bfe:	0600      	lsls	r0, r0, #24
 8018c00:	1812      	adds	r2, r2, r0
 8018c02:	414b      	adcs	r3, r1
 8018c04:	464a      	mov	r2, r9
 8018c06:	005b      	lsls	r3, r3, #1
 8018c08:	50bb      	str	r3, [r7, r2]
 8018c0a:	4658      	mov	r0, fp
 8018c0c:	002a      	movs	r2, r5
 8018c0e:	9b07      	ldr	r3, [sp, #28]
 8018c10:	9906      	ldr	r1, [sp, #24]
 8018c12:	f7e7 fccb 	bl	80005ac <__aeabi_lmul>
 8018c16:	2280      	movs	r2, #128	@ 0x80
 8018c18:	2300      	movs	r3, #0
 8018c1a:	0612      	lsls	r2, r2, #24
 8018c1c:	1880      	adds	r0, r0, r2
 8018c1e:	4159      	adcs	r1, r3
 8018c20:	2000      	movs	r0, #0
 8018c22:	9103      	str	r1, [sp, #12]
 8018c24:	9002      	str	r0, [sp, #8]
 8018c26:	4652      	mov	r2, sl
 8018c28:	9b04      	ldr	r3, [sp, #16]
 8018c2a:	0020      	movs	r0, r4
 8018c2c:	9905      	ldr	r1, [sp, #20]
 8018c2e:	f7e7 fcbd 	bl	80005ac <__aeabi_lmul>
 8018c32:	9b02      	ldr	r3, [sp, #8]
 8018c34:	9c03      	ldr	r4, [sp, #12]
 8018c36:	18c0      	adds	r0, r0, r3
 8018c38:	4161      	adcs	r1, r4
 8018c3a:	2380      	movs	r3, #128	@ 0x80
 8018c3c:	2400      	movs	r4, #0
 8018c3e:	061b      	lsls	r3, r3, #24
 8018c40:	18c0      	adds	r0, r0, r3
 8018c42:	4161      	adcs	r1, r4
 8018c44:	464a      	mov	r2, r9
 8018c46:	004b      	lsls	r3, r1, #1
 8018c48:	50b3      	str	r3, [r6, r2]
 8018c4a:	2308      	movs	r3, #8
 8018c4c:	469c      	mov	ip, r3
 8018c4e:	9b08      	ldr	r3, [sp, #32]
 8018c50:	44e0      	add	r8, ip
 8018c52:	3708      	adds	r7, #8
 8018c54:	3608      	adds	r6, #8
 8018c56:	4598      	cmp	r8, r3
 8018c58:	d196      	bne.n	8018b88 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8018c5a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8018c5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018c5e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c60:	2302      	movs	r3, #2
 8018c62:	003a      	movs	r2, r7
 8018c64:	0029      	movs	r1, r5
 8018c66:	0020      	movs	r0, r4
 8018c68:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8018c6a:	f000 fb3b 	bl	80192e4 <arm_radix4_butterfly_inverse_q31>
 8018c6e:	46a4      	mov	ip, r4
 8018c70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018c72:	2302      	movs	r3, #2
 8018c74:	0088      	lsls	r0, r1, #2
 8018c76:	4460      	add	r0, ip
 8018c78:	003a      	movs	r2, r7
 8018c7a:	0029      	movs	r1, r5
 8018c7c:	f000 fb32 	bl	80192e4 <arm_radix4_butterfly_inverse_q31>
 8018c80:	46a4      	mov	ip, r4
 8018c82:	0128      	lsls	r0, r5, #4
 8018c84:	4460      	add	r0, ip
 8018c86:	6833      	ldr	r3, [r6, #0]
 8018c88:	005b      	lsls	r3, r3, #1
 8018c8a:	6033      	str	r3, [r6, #0]
 8018c8c:	6873      	ldr	r3, [r6, #4]
 8018c8e:	005b      	lsls	r3, r3, #1
 8018c90:	6073      	str	r3, [r6, #4]
 8018c92:	68b3      	ldr	r3, [r6, #8]
 8018c94:	005b      	lsls	r3, r3, #1
 8018c96:	60b3      	str	r3, [r6, #8]
 8018c98:	68f3      	ldr	r3, [r6, #12]
 8018c9a:	005b      	lsls	r3, r3, #1
 8018c9c:	60f3      	str	r3, [r6, #12]
 8018c9e:	3610      	adds	r6, #16
 8018ca0:	42b0      	cmp	r0, r6
 8018ca2:	d1f0      	bne.n	8018c86 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8018ca4:	b00f      	add	sp, #60	@ 0x3c
 8018ca6:	bc3c      	pop	{r2, r3, r4, r5}
 8018ca8:	4690      	mov	r8, r2
 8018caa:	4699      	mov	r9, r3
 8018cac:	46a2      	mov	sl, r4
 8018cae:	46ab      	mov	fp, r5
 8018cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cb2:	2302      	movs	r3, #2
 8018cb4:	2100      	movs	r1, #0
 8018cb6:	0015      	movs	r5, r2
 8018cb8:	f000 fb14 	bl	80192e4 <arm_radix4_butterfly_inverse_q31>
 8018cbc:	46bc      	mov	ip, r7
 8018cbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018cc0:	002a      	movs	r2, r5
 8018cc2:	0098      	lsls	r0, r3, #2
 8018cc4:	4460      	add	r0, ip
 8018cc6:	2302      	movs	r3, #2
 8018cc8:	2100      	movs	r1, #0
 8018cca:	f000 fb0b 	bl	80192e4 <arm_radix4_butterfly_inverse_q31>
 8018cce:	e7e9      	b.n	8018ca4 <arm_cfft_radix4by2_inverse_q31+0x158>

08018cd0 <arm_cfft_q31>:
 8018cd0:	b570      	push	{r4, r5, r6, lr}
 8018cd2:	001e      	movs	r6, r3
 8018cd4:	2380      	movs	r3, #128	@ 0x80
 8018cd6:	000d      	movs	r5, r1
 8018cd8:	0004      	movs	r4, r0
 8018cda:	8801      	ldrh	r1, [r0, #0]
 8018cdc:	005b      	lsls	r3, r3, #1
 8018cde:	2a01      	cmp	r2, #1
 8018ce0:	d028      	beq.n	8018d34 <arm_cfft_q31+0x64>
 8018ce2:	4299      	cmp	r1, r3
 8018ce4:	d020      	beq.n	8018d28 <arm_cfft_q31+0x58>
 8018ce6:	d812      	bhi.n	8018d0e <arm_cfft_q31+0x3e>
 8018ce8:	2920      	cmp	r1, #32
 8018cea:	d004      	beq.n	8018cf6 <arm_cfft_q31+0x26>
 8018cec:	d949      	bls.n	8018d82 <arm_cfft_q31+0xb2>
 8018cee:	2940      	cmp	r1, #64	@ 0x40
 8018cf0:	d01a      	beq.n	8018d28 <arm_cfft_q31+0x58>
 8018cf2:	2980      	cmp	r1, #128	@ 0x80
 8018cf4:	d103      	bne.n	8018cfe <arm_cfft_q31+0x2e>
 8018cf6:	6862      	ldr	r2, [r4, #4]
 8018cf8:	0028      	movs	r0, r5
 8018cfa:	f7ff fe65 	bl	80189c8 <arm_cfft_radix4by2_q31>
 8018cfe:	2e00      	cmp	r6, #0
 8018d00:	d004      	beq.n	8018d0c <arm_cfft_q31+0x3c>
 8018d02:	68a2      	ldr	r2, [r4, #8]
 8018d04:	89a1      	ldrh	r1, [r4, #12]
 8018d06:	0028      	movs	r0, r5
 8018d08:	f7e7 f9fe 	bl	8000108 <arm_bitreversal_32>
 8018d0c:	bd70      	pop	{r4, r5, r6, pc}
 8018d0e:	2380      	movs	r3, #128	@ 0x80
 8018d10:	00db      	lsls	r3, r3, #3
 8018d12:	4299      	cmp	r1, r3
 8018d14:	d008      	beq.n	8018d28 <arm_cfft_q31+0x58>
 8018d16:	d92f      	bls.n	8018d78 <arm_cfft_q31+0xa8>
 8018d18:	2380      	movs	r3, #128	@ 0x80
 8018d1a:	011b      	lsls	r3, r3, #4
 8018d1c:	4299      	cmp	r1, r3
 8018d1e:	d0ea      	beq.n	8018cf6 <arm_cfft_q31+0x26>
 8018d20:	2380      	movs	r3, #128	@ 0x80
 8018d22:	015b      	lsls	r3, r3, #5
 8018d24:	4299      	cmp	r1, r3
 8018d26:	d1ea      	bne.n	8018cfe <arm_cfft_q31+0x2e>
 8018d28:	2301      	movs	r3, #1
 8018d2a:	6862      	ldr	r2, [r4, #4]
 8018d2c:	0028      	movs	r0, r5
 8018d2e:	f000 f833 	bl	8018d98 <arm_radix4_butterfly_q31>
 8018d32:	e7e4      	b.n	8018cfe <arm_cfft_q31+0x2e>
 8018d34:	4299      	cmp	r1, r3
 8018d36:	d019      	beq.n	8018d6c <arm_cfft_q31+0x9c>
 8018d38:	d80b      	bhi.n	8018d52 <arm_cfft_q31+0x82>
 8018d3a:	2920      	cmp	r1, #32
 8018d3c:	d004      	beq.n	8018d48 <arm_cfft_q31+0x78>
 8018d3e:	d928      	bls.n	8018d92 <arm_cfft_q31+0xc2>
 8018d40:	2940      	cmp	r1, #64	@ 0x40
 8018d42:	d013      	beq.n	8018d6c <arm_cfft_q31+0x9c>
 8018d44:	2980      	cmp	r1, #128	@ 0x80
 8018d46:	d1da      	bne.n	8018cfe <arm_cfft_q31+0x2e>
 8018d48:	6862      	ldr	r2, [r4, #4]
 8018d4a:	0028      	movs	r0, r5
 8018d4c:	f7ff fefe 	bl	8018b4c <arm_cfft_radix4by2_inverse_q31>
 8018d50:	e7d5      	b.n	8018cfe <arm_cfft_q31+0x2e>
 8018d52:	2380      	movs	r3, #128	@ 0x80
 8018d54:	00db      	lsls	r3, r3, #3
 8018d56:	4299      	cmp	r1, r3
 8018d58:	d008      	beq.n	8018d6c <arm_cfft_q31+0x9c>
 8018d5a:	d915      	bls.n	8018d88 <arm_cfft_q31+0xb8>
 8018d5c:	2380      	movs	r3, #128	@ 0x80
 8018d5e:	011b      	lsls	r3, r3, #4
 8018d60:	4299      	cmp	r1, r3
 8018d62:	d0f1      	beq.n	8018d48 <arm_cfft_q31+0x78>
 8018d64:	2380      	movs	r3, #128	@ 0x80
 8018d66:	015b      	lsls	r3, r3, #5
 8018d68:	4299      	cmp	r1, r3
 8018d6a:	d1c8      	bne.n	8018cfe <arm_cfft_q31+0x2e>
 8018d6c:	2301      	movs	r3, #1
 8018d6e:	6862      	ldr	r2, [r4, #4]
 8018d70:	0028      	movs	r0, r5
 8018d72:	f000 fab7 	bl	80192e4 <arm_radix4_butterfly_inverse_q31>
 8018d76:	e7c2      	b.n	8018cfe <arm_cfft_q31+0x2e>
 8018d78:	2380      	movs	r3, #128	@ 0x80
 8018d7a:	009b      	lsls	r3, r3, #2
 8018d7c:	4299      	cmp	r1, r3
 8018d7e:	d0ba      	beq.n	8018cf6 <arm_cfft_q31+0x26>
 8018d80:	e7bd      	b.n	8018cfe <arm_cfft_q31+0x2e>
 8018d82:	2910      	cmp	r1, #16
 8018d84:	d1bb      	bne.n	8018cfe <arm_cfft_q31+0x2e>
 8018d86:	e7cf      	b.n	8018d28 <arm_cfft_q31+0x58>
 8018d88:	2380      	movs	r3, #128	@ 0x80
 8018d8a:	009b      	lsls	r3, r3, #2
 8018d8c:	4299      	cmp	r1, r3
 8018d8e:	d0db      	beq.n	8018d48 <arm_cfft_q31+0x78>
 8018d90:	e7b5      	b.n	8018cfe <arm_cfft_q31+0x2e>
 8018d92:	2910      	cmp	r1, #16
 8018d94:	d1b3      	bne.n	8018cfe <arm_cfft_q31+0x2e>
 8018d96:	e7e9      	b.n	8018d6c <arm_cfft_q31+0x9c>

08018d98 <arm_radix4_butterfly_q31>:
 8018d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d9a:	464d      	mov	r5, r9
 8018d9c:	4644      	mov	r4, r8
 8018d9e:	465f      	mov	r7, fp
 8018da0:	4656      	mov	r6, sl
 8018da2:	469c      	mov	ip, r3
 8018da4:	b4f0      	push	{r4, r5, r6, r7}
 8018da6:	b0a7      	sub	sp, #156	@ 0x9c
 8018da8:	9114      	str	r1, [sp, #80]	@ 0x50
 8018daa:	0889      	lsrs	r1, r1, #2
 8018dac:	9310      	str	r3, [sp, #64]	@ 0x40
 8018dae:	00cb      	lsls	r3, r1, #3
 8018db0:	0015      	movs	r5, r2
 8018db2:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018db4:	18c2      	adds	r2, r0, r3
 8018db6:	000c      	movs	r4, r1
 8018db8:	469a      	mov	sl, r3
 8018dba:	9124      	str	r1, [sp, #144]	@ 0x90
 8018dbc:	18d1      	adds	r1, r2, r3
 8018dbe:	4663      	mov	r3, ip
 8018dc0:	468b      	mov	fp, r1
 8018dc2:	0119      	lsls	r1, r3, #4
 8018dc4:	910d      	str	r1, [sp, #52]	@ 0x34
 8018dc6:	00d9      	lsls	r1, r3, #3
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	4463      	add	r3, ip
 8018dcc:	910e      	str	r1, [sp, #56]	@ 0x38
 8018dce:	00d9      	lsls	r1, r3, #3
 8018dd0:	465b      	mov	r3, fp
 8018dd2:	44da      	add	sl, fp
 8018dd4:	4690      	mov	r8, r2
 8018dd6:	4683      	mov	fp, r0
 8018dd8:	4699      	mov	r9, r3
 8018dda:	9022      	str	r0, [sp, #136]	@ 0x88
 8018ddc:	9025      	str	r0, [sp, #148]	@ 0x94
 8018dde:	910f      	str	r1, [sp, #60]	@ 0x3c
 8018de0:	9502      	str	r5, [sp, #8]
 8018de2:	9500      	str	r5, [sp, #0]
 8018de4:	9501      	str	r5, [sp, #4]
 8018de6:	9407      	str	r4, [sp, #28]
 8018de8:	465b      	mov	r3, fp
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	4642      	mov	r2, r8
 8018dee:	111c      	asrs	r4, r3, #4
 8018df0:	464b      	mov	r3, r9
 8018df2:	4658      	mov	r0, fp
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	6812      	ldr	r2, [r2, #0]
 8018df8:	111b      	asrs	r3, r3, #4
 8018dfa:	18e7      	adds	r7, r4, r3
 8018dfc:	1ae3      	subs	r3, r4, r3
 8018dfe:	1114      	asrs	r4, r2, #4
 8018e00:	4652      	mov	r2, sl
 8018e02:	6840      	ldr	r0, [r0, #4]
 8018e04:	6812      	ldr	r2, [r2, #0]
 8018e06:	1105      	asrs	r5, r0, #4
 8018e08:	4648      	mov	r0, r9
 8018e0a:	9303      	str	r3, [sp, #12]
 8018e0c:	1113      	asrs	r3, r2, #4
 8018e0e:	18e2      	adds	r2, r4, r3
 8018e10:	465c      	mov	r4, fp
 8018e12:	6840      	ldr	r0, [r0, #4]
 8018e14:	1103      	asrs	r3, r0, #4
 8018e16:	18ee      	adds	r6, r5, r3
 8018e18:	1ae8      	subs	r0, r5, r3
 8018e1a:	18bb      	adds	r3, r7, r2
 8018e1c:	6023      	str	r3, [r4, #0]
 8018e1e:	4644      	mov	r4, r8
 8018e20:	6864      	ldr	r4, [r4, #4]
 8018e22:	9004      	str	r0, [sp, #16]
 8018e24:	1125      	asrs	r5, r4, #4
 8018e26:	4654      	mov	r4, sl
 8018e28:	6864      	ldr	r4, [r4, #4]
 8018e2a:	1123      	asrs	r3, r4, #4
 8018e2c:	465c      	mov	r4, fp
 8018e2e:	18eb      	adds	r3, r5, r3
 8018e30:	18f1      	adds	r1, r6, r3
 8018e32:	6061      	str	r1, [r4, #4]
 8018e34:	4655      	mov	r5, sl
 8018e36:	4644      	mov	r4, r8
 8018e38:	686d      	ldr	r5, [r5, #4]
 8018e3a:	6864      	ldr	r4, [r4, #4]
 8018e3c:	1129      	asrs	r1, r5, #4
 8018e3e:	1124      	asrs	r4, r4, #4
 8018e40:	1a64      	subs	r4, r4, r1
 8018e42:	4641      	mov	r1, r8
 8018e44:	6809      	ldr	r1, [r1, #0]
 8018e46:	9405      	str	r4, [sp, #20]
 8018e48:	1108      	asrs	r0, r1, #4
 8018e4a:	4651      	mov	r1, sl
 8018e4c:	6809      	ldr	r1, [r1, #0]
 8018e4e:	1abc      	subs	r4, r7, r2
 8018e50:	1109      	asrs	r1, r1, #4
 8018e52:	1a41      	subs	r1, r0, r1
 8018e54:	17e2      	asrs	r2, r4, #31
 8018e56:	9106      	str	r1, [sp, #24]
 8018e58:	0011      	movs	r1, r2
 8018e5a:	9a01      	ldr	r2, [sp, #4]
 8018e5c:	9108      	str	r1, [sp, #32]
 8018e5e:	6817      	ldr	r7, [r2, #0]
 8018e60:	17fd      	asrs	r5, r7, #31
 8018e62:	0028      	movs	r0, r5
 8018e64:	1af5      	subs	r5, r6, r3
 8018e66:	17ee      	asrs	r6, r5, #31
 8018e68:	960a      	str	r6, [sp, #40]	@ 0x28
 8018e6a:	6856      	ldr	r6, [r2, #4]
 8018e6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8018e6e:	17f3      	asrs	r3, r6, #31
 8018e70:	003a      	movs	r2, r7
 8018e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018e74:	0003      	movs	r3, r0
 8018e76:	0020      	movs	r0, r4
 8018e78:	f7e7 fb98 	bl	80005ac <__aeabi_lmul>
 8018e7c:	0032      	movs	r2, r6
 8018e7e:	17f3      	asrs	r3, r6, #31
 8018e80:	910c      	str	r1, [sp, #48]	@ 0x30
 8018e82:	0028      	movs	r0, r5
 8018e84:	17e9      	asrs	r1, r5, #31
 8018e86:	f7e7 fb91 	bl	80005ac <__aeabi_lmul>
 8018e8a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018e8c:	002a      	movs	r2, r5
 8018e8e:	4684      	mov	ip, r0
 8018e90:	4640      	mov	r0, r8
 8018e92:	4461      	add	r1, ip
 8018e94:	0049      	lsls	r1, r1, #1
 8018e96:	6001      	str	r1, [r0, #0]
 8018e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018e9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e9c:	0038      	movs	r0, r7
 8018e9e:	f7e7 fb85 	bl	80005ac <__aeabi_lmul>
 8018ea2:	0032      	movs	r2, r6
 8018ea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ea6:	000d      	movs	r5, r1
 8018ea8:	0020      	movs	r0, r4
 8018eaa:	9908      	ldr	r1, [sp, #32]
 8018eac:	f7e7 fb7e 	bl	80005ac <__aeabi_lmul>
 8018eb0:	4646      	mov	r6, r8
 8018eb2:	1a6d      	subs	r5, r5, r1
 8018eb4:	006d      	lsls	r5, r5, #1
 8018eb6:	6075      	str	r5, [r6, #4]
 8018eb8:	9903      	ldr	r1, [sp, #12]
 8018eba:	9d05      	ldr	r5, [sp, #20]
 8018ebc:	000c      	movs	r4, r1
 8018ebe:	46ac      	mov	ip, r5
 8018ec0:	4464      	add	r4, ip
 8018ec2:	17e6      	asrs	r6, r4, #31
 8018ec4:	0031      	movs	r1, r6
 8018ec6:	9b00      	ldr	r3, [sp, #0]
 8018ec8:	9804      	ldr	r0, [sp, #16]
 8018eca:	681e      	ldr	r6, [r3, #0]
 8018ecc:	17f7      	asrs	r7, r6, #31
 8018ece:	9709      	str	r7, [sp, #36]	@ 0x24
 8018ed0:	9f06      	ldr	r7, [sp, #24]
 8018ed2:	0032      	movs	r2, r6
 8018ed4:	1bc7      	subs	r7, r0, r7
 8018ed6:	17fd      	asrs	r5, r7, #31
 8018ed8:	950a      	str	r5, [sp, #40]	@ 0x28
 8018eda:	685d      	ldr	r5, [r3, #4]
 8018edc:	17f3      	asrs	r3, r6, #31
 8018ede:	17e8      	asrs	r0, r5, #31
 8018ee0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018ee2:	0020      	movs	r0, r4
 8018ee4:	9108      	str	r1, [sp, #32]
 8018ee6:	f7e7 fb61 	bl	80005ac <__aeabi_lmul>
 8018eea:	002a      	movs	r2, r5
 8018eec:	17eb      	asrs	r3, r5, #31
 8018eee:	910c      	str	r1, [sp, #48]	@ 0x30
 8018ef0:	0038      	movs	r0, r7
 8018ef2:	17f9      	asrs	r1, r7, #31
 8018ef4:	f7e7 fb5a 	bl	80005ac <__aeabi_lmul>
 8018ef8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018efa:	003a      	movs	r2, r7
 8018efc:	4684      	mov	ip, r0
 8018efe:	4648      	mov	r0, r9
 8018f00:	4461      	add	r1, ip
 8018f02:	0049      	lsls	r1, r1, #1
 8018f04:	6001      	str	r1, [r0, #0]
 8018f06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018f08:	0030      	movs	r0, r6
 8018f0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018f0c:	f7e7 fb4e 	bl	80005ac <__aeabi_lmul>
 8018f10:	002a      	movs	r2, r5
 8018f12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018f14:	000e      	movs	r6, r1
 8018f16:	0020      	movs	r0, r4
 8018f18:	9908      	ldr	r1, [sp, #32]
 8018f1a:	f7e7 fb47 	bl	80005ac <__aeabi_lmul>
 8018f1e:	464c      	mov	r4, r9
 8018f20:	9d05      	ldr	r5, [sp, #20]
 8018f22:	1a76      	subs	r6, r6, r1
 8018f24:	9903      	ldr	r1, [sp, #12]
 8018f26:	0076      	lsls	r6, r6, #1
 8018f28:	6066      	str	r6, [r4, #4]
 8018f2a:	1b4c      	subs	r4, r1, r5
 8018f2c:	9e06      	ldr	r6, [sp, #24]
 8018f2e:	17e1      	asrs	r1, r4, #31
 8018f30:	9103      	str	r1, [sp, #12]
 8018f32:	9902      	ldr	r1, [sp, #8]
 8018f34:	46b4      	mov	ip, r6
 8018f36:	680f      	ldr	r7, [r1, #0]
 8018f38:	9804      	ldr	r0, [sp, #16]
 8018f3a:	17fd      	asrs	r5, r7, #31
 8018f3c:	002b      	movs	r3, r5
 8018f3e:	684e      	ldr	r6, [r1, #4]
 8018f40:	4460      	add	r0, ip
 8018f42:	0005      	movs	r5, r0
 8018f44:	17c0      	asrs	r0, r0, #31
 8018f46:	9005      	str	r0, [sp, #20]
 8018f48:	17f0      	asrs	r0, r6, #31
 8018f4a:	9006      	str	r0, [sp, #24]
 8018f4c:	003a      	movs	r2, r7
 8018f4e:	0020      	movs	r0, r4
 8018f50:	17e1      	asrs	r1, r4, #31
 8018f52:	9304      	str	r3, [sp, #16]
 8018f54:	f7e7 fb2a 	bl	80005ac <__aeabi_lmul>
 8018f58:	0032      	movs	r2, r6
 8018f5a:	9108      	str	r1, [sp, #32]
 8018f5c:	17f3      	asrs	r3, r6, #31
 8018f5e:	0028      	movs	r0, r5
 8018f60:	17e9      	asrs	r1, r5, #31
 8018f62:	f7e7 fb23 	bl	80005ac <__aeabi_lmul>
 8018f66:	9808      	ldr	r0, [sp, #32]
 8018f68:	002a      	movs	r2, r5
 8018f6a:	4684      	mov	ip, r0
 8018f6c:	4650      	mov	r0, sl
 8018f6e:	4461      	add	r1, ip
 8018f70:	0049      	lsls	r1, r1, #1
 8018f72:	6001      	str	r1, [r0, #0]
 8018f74:	9b05      	ldr	r3, [sp, #20]
 8018f76:	9904      	ldr	r1, [sp, #16]
 8018f78:	0038      	movs	r0, r7
 8018f7a:	f7e7 fb17 	bl	80005ac <__aeabi_lmul>
 8018f7e:	0020      	movs	r0, r4
 8018f80:	2408      	movs	r4, #8
 8018f82:	000d      	movs	r5, r1
 8018f84:	0032      	movs	r2, r6
 8018f86:	9b06      	ldr	r3, [sp, #24]
 8018f88:	9903      	ldr	r1, [sp, #12]
 8018f8a:	f7e7 fb0f 	bl	80005ac <__aeabi_lmul>
 8018f8e:	46a4      	mov	ip, r4
 8018f90:	4650      	mov	r0, sl
 8018f92:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8018f94:	44e3      	add	fp, ip
 8018f96:	44e0      	add	r8, ip
 8018f98:	44e1      	add	r9, ip
 8018f9a:	44e2      	add	sl, ip
 8018f9c:	46a4      	mov	ip, r4
 8018f9e:	1a6d      	subs	r5, r5, r1
 8018fa0:	006d      	lsls	r5, r5, #1
 8018fa2:	9a01      	ldr	r2, [sp, #4]
 8018fa4:	6045      	str	r5, [r0, #4]
 8018fa6:	9807      	ldr	r0, [sp, #28]
 8018fa8:	4462      	add	r2, ip
 8018faa:	3801      	subs	r0, #1
 8018fac:	9201      	str	r2, [sp, #4]
 8018fae:	9007      	str	r0, [sp, #28]
 8018fb0:	9b00      	ldr	r3, [sp, #0]
 8018fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018fb4:	9902      	ldr	r1, [sp, #8]
 8018fb6:	4694      	mov	ip, r2
 8018fb8:	4463      	add	r3, ip
 8018fba:	9300      	str	r3, [sp, #0]
 8018fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fbe:	469c      	mov	ip, r3
 8018fc0:	4461      	add	r1, ip
 8018fc2:	9102      	str	r1, [sp, #8]
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d000      	beq.n	8018fca <arm_radix4_butterfly_q31+0x232>
 8018fc8:	e70e      	b.n	8018de8 <arm_radix4_butterfly_q31+0x50>
 8018fca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018fcc:	009b      	lsls	r3, r3, #2
 8018fce:	931f      	str	r3, [sp, #124]	@ 0x7c
 8018fd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018fd2:	9320      	str	r3, [sp, #128]	@ 0x80
 8018fd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018fd6:	2b04      	cmp	r3, #4
 8018fd8:	d800      	bhi.n	8018fdc <arm_radix4_butterfly_q31+0x244>
 8018fda:	e180      	b.n	80192de <arm_radix4_butterfly_q31+0x546>
 8018fdc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018fde:	0893      	lsrs	r3, r2, #2
 8018fe0:	1e59      	subs	r1, r3, #1
 8018fe2:	9321      	str	r3, [sp, #132]	@ 0x84
 8018fe4:	00db      	lsls	r3, r3, #3
 8018fe6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8018fe8:	00d3      	lsls	r3, r2, #3
 8018fea:	9300      	str	r3, [sp, #0]
 8018fec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8018fee:	911a      	str	r1, [sp, #104]	@ 0x68
 8018ff0:	00da      	lsls	r2, r3, #3
 8018ff2:	921e      	str	r2, [sp, #120]	@ 0x78
 8018ff4:	011a      	lsls	r2, r3, #4
 8018ff6:	921d      	str	r2, [sp, #116]	@ 0x74
 8018ff8:	001a      	movs	r2, r3
 8018ffa:	4694      	mov	ip, r2
 8018ffc:	005b      	lsls	r3, r3, #1
 8018ffe:	4463      	add	r3, ip
 8019000:	00db      	lsls	r3, r3, #3
 8019002:	931c      	str	r3, [sp, #112]	@ 0x70
 8019004:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019006:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019008:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801900a:	9318      	str	r3, [sp, #96]	@ 0x60
 801900c:	9319      	str	r3, [sp, #100]	@ 0x64
 801900e:	9316      	str	r3, [sp, #88]	@ 0x58
 8019010:	2300      	movs	r3, #0
 8019012:	9315      	str	r3, [sp, #84]	@ 0x54
 8019014:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019016:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8019018:	681a      	ldr	r2, [r3, #0]
 801901a:	685b      	ldr	r3, [r3, #4]
 801901c:	9205      	str	r2, [sp, #20]
 801901e:	9306      	str	r3, [sp, #24]
 8019020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019022:	468c      	mov	ip, r1
 8019024:	681a      	ldr	r2, [r3, #0]
 8019026:	685b      	ldr	r3, [r3, #4]
 8019028:	9207      	str	r2, [sp, #28]
 801902a:	9308      	str	r3, [sp, #32]
 801902c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801902e:	681a      	ldr	r2, [r3, #0]
 8019030:	685b      	ldr	r3, [r3, #4]
 8019032:	9209      	str	r2, [sp, #36]	@ 0x24
 8019034:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019036:	930a      	str	r3, [sp, #40]	@ 0x28
 8019038:	0013      	movs	r3, r2
 801903a:	4463      	add	r3, ip
 801903c:	4698      	mov	r8, r3
 801903e:	0013      	movs	r3, r2
 8019040:	4442      	add	r2, r8
 8019042:	4691      	mov	r9, r2
 8019044:	001a      	movs	r2, r3
 8019046:	444a      	add	r2, r9
 8019048:	4692      	mov	sl, r2
 801904a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801904c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801904e:	4293      	cmp	r3, r2
 8019050:	d800      	bhi.n	8019054 <arm_radix4_butterfly_q31+0x2bc>
 8019052:	e0dd      	b.n	8019210 <arm_radix4_butterfly_q31+0x478>
 8019054:	4694      	mov	ip, r2
 8019056:	468b      	mov	fp, r1
 8019058:	4644      	mov	r4, r8
 801905a:	4655      	mov	r5, sl
 801905c:	9b07      	ldr	r3, [sp, #28]
 801905e:	17db      	asrs	r3, r3, #31
 8019060:	930c      	str	r3, [sp, #48]	@ 0x30
 8019062:	9b08      	ldr	r3, [sp, #32]
 8019064:	17db      	asrs	r3, r3, #31
 8019066:	930d      	str	r3, [sp, #52]	@ 0x34
 8019068:	9b05      	ldr	r3, [sp, #20]
 801906a:	17db      	asrs	r3, r3, #31
 801906c:	930e      	str	r3, [sp, #56]	@ 0x38
 801906e:	9b06      	ldr	r3, [sp, #24]
 8019070:	17db      	asrs	r3, r3, #31
 8019072:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019076:	17db      	asrs	r3, r3, #31
 8019078:	9310      	str	r3, [sp, #64]	@ 0x40
 801907a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801907c:	17db      	asrs	r3, r3, #31
 801907e:	9311      	str	r3, [sp, #68]	@ 0x44
 8019080:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019082:	4463      	add	r3, ip
 8019084:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019086:	465b      	mov	r3, fp
 8019088:	4659      	mov	r1, fp
 801908a:	681a      	ldr	r2, [r3, #0]
 801908c:	464b      	mov	r3, r9
 801908e:	684f      	ldr	r7, [r1, #4]
 8019090:	4649      	mov	r1, r9
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	18d6      	adds	r6, r2, r3
 8019096:	1ad3      	subs	r3, r2, r3
 8019098:	9301      	str	r3, [sp, #4]
 801909a:	684b      	ldr	r3, [r1, #4]
 801909c:	18f8      	adds	r0, r7, r3
 801909e:	1af9      	subs	r1, r7, r3
 80190a0:	6827      	ldr	r7, [r4, #0]
 80190a2:	9102      	str	r1, [sp, #8]
 80190a4:	003a      	movs	r2, r7
 80190a6:	682f      	ldr	r7, [r5, #0]
 80190a8:	46bc      	mov	ip, r7
 80190aa:	465f      	mov	r7, fp
 80190ac:	4462      	add	r2, ip
 80190ae:	18b3      	adds	r3, r6, r2
 80190b0:	109b      	asrs	r3, r3, #2
 80190b2:	603b      	str	r3, [r7, #0]
 80190b4:	6867      	ldr	r7, [r4, #4]
 80190b6:	1ab6      	subs	r6, r6, r2
 80190b8:	46b8      	mov	r8, r7
 80190ba:	686f      	ldr	r7, [r5, #4]
 80190bc:	17f2      	asrs	r2, r6, #31
 80190be:	46bc      	mov	ip, r7
 80190c0:	44e0      	add	r8, ip
 80190c2:	4643      	mov	r3, r8
 80190c4:	465f      	mov	r7, fp
 80190c6:	18c1      	adds	r1, r0, r3
 80190c8:	1089      	asrs	r1, r1, #2
 80190ca:	6079      	str	r1, [r7, #4]
 80190cc:	9900      	ldr	r1, [sp, #0]
 80190ce:	4690      	mov	r8, r2
 80190d0:	468c      	mov	ip, r1
 80190d2:	6867      	ldr	r7, [r4, #4]
 80190d4:	6869      	ldr	r1, [r5, #4]
 80190d6:	44e3      	add	fp, ip
 80190d8:	1a7f      	subs	r7, r7, r1
 80190da:	9703      	str	r7, [sp, #12]
 80190dc:	6829      	ldr	r1, [r5, #0]
 80190de:	6827      	ldr	r7, [r4, #0]
 80190e0:	1a7f      	subs	r7, r7, r1
 80190e2:	9704      	str	r7, [sp, #16]
 80190e4:	1ac7      	subs	r7, r0, r3
 80190e6:	17fa      	asrs	r2, r7, #31
 80190e8:	4692      	mov	sl, r2
 80190ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190ec:	9a07      	ldr	r2, [sp, #28]
 80190ee:	0030      	movs	r0, r6
 80190f0:	4641      	mov	r1, r8
 80190f2:	f7e7 fa5b 	bl	80005ac <__aeabi_lmul>
 80190f6:	9a08      	ldr	r2, [sp, #32]
 80190f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190fa:	9112      	str	r1, [sp, #72]	@ 0x48
 80190fc:	0038      	movs	r0, r7
 80190fe:	4651      	mov	r1, sl
 8019100:	f7e7 fa54 	bl	80005ac <__aeabi_lmul>
 8019104:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019106:	9a07      	ldr	r2, [sp, #28]
 8019108:	4684      	mov	ip, r0
 801910a:	4461      	add	r1, ip
 801910c:	1049      	asrs	r1, r1, #1
 801910e:	6021      	str	r1, [r4, #0]
 8019110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019112:	0038      	movs	r0, r7
 8019114:	4651      	mov	r1, sl
 8019116:	f7e7 fa49 	bl	80005ac <__aeabi_lmul>
 801911a:	9a08      	ldr	r2, [sp, #32]
 801911c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801911e:	000f      	movs	r7, r1
 8019120:	0030      	movs	r0, r6
 8019122:	4641      	mov	r1, r8
 8019124:	f7e7 fa42 	bl	80005ac <__aeabi_lmul>
 8019128:	9b00      	ldr	r3, [sp, #0]
 801912a:	9a01      	ldr	r2, [sp, #4]
 801912c:	469c      	mov	ip, r3
 801912e:	9803      	ldr	r0, [sp, #12]
 8019130:	1a7f      	subs	r7, r7, r1
 8019132:	107f      	asrs	r7, r7, #1
 8019134:	6067      	str	r7, [r4, #4]
 8019136:	0016      	movs	r6, r2
 8019138:	4464      	add	r4, ip
 801913a:	4684      	mov	ip, r0
 801913c:	4466      	add	r6, ip
 801913e:	17f2      	asrs	r2, r6, #31
 8019140:	4690      	mov	r8, r2
 8019142:	9902      	ldr	r1, [sp, #8]
 8019144:	9f04      	ldr	r7, [sp, #16]
 8019146:	0030      	movs	r0, r6
 8019148:	1bcf      	subs	r7, r1, r7
 801914a:	17fa      	asrs	r2, r7, #31
 801914c:	4692      	mov	sl, r2
 801914e:	4641      	mov	r1, r8
 8019150:	9a05      	ldr	r2, [sp, #20]
 8019152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019154:	f7e7 fa2a 	bl	80005ac <__aeabi_lmul>
 8019158:	9a06      	ldr	r2, [sp, #24]
 801915a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801915c:	9112      	str	r1, [sp, #72]	@ 0x48
 801915e:	0038      	movs	r0, r7
 8019160:	4651      	mov	r1, sl
 8019162:	f7e7 fa23 	bl	80005ac <__aeabi_lmul>
 8019166:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019168:	9a05      	ldr	r2, [sp, #20]
 801916a:	4684      	mov	ip, r0
 801916c:	4648      	mov	r0, r9
 801916e:	4461      	add	r1, ip
 8019170:	1049      	asrs	r1, r1, #1
 8019172:	6001      	str	r1, [r0, #0]
 8019174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019176:	0038      	movs	r0, r7
 8019178:	4651      	mov	r1, sl
 801917a:	f7e7 fa17 	bl	80005ac <__aeabi_lmul>
 801917e:	9a06      	ldr	r2, [sp, #24]
 8019180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019182:	000f      	movs	r7, r1
 8019184:	0030      	movs	r0, r6
 8019186:	4641      	mov	r1, r8
 8019188:	f7e7 fa10 	bl	80005ac <__aeabi_lmul>
 801918c:	464e      	mov	r6, r9
 801918e:	9a00      	ldr	r2, [sp, #0]
 8019190:	9b01      	ldr	r3, [sp, #4]
 8019192:	4694      	mov	ip, r2
 8019194:	9803      	ldr	r0, [sp, #12]
 8019196:	1a7f      	subs	r7, r7, r1
 8019198:	107f      	asrs	r7, r7, #1
 801919a:	6077      	str	r7, [r6, #4]
 801919c:	1a1e      	subs	r6, r3, r0
 801919e:	9b04      	ldr	r3, [sp, #16]
 80191a0:	44e1      	add	r9, ip
 80191a2:	469c      	mov	ip, r3
 80191a4:	17f0      	asrs	r0, r6, #31
 80191a6:	4680      	mov	r8, r0
 80191a8:	9902      	ldr	r1, [sp, #8]
 80191aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80191ac:	4461      	add	r1, ip
 80191ae:	17cb      	asrs	r3, r1, #31
 80191b0:	000f      	movs	r7, r1
 80191b2:	469a      	mov	sl, r3
 80191b4:	0030      	movs	r0, r6
 80191b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80191b8:	4641      	mov	r1, r8
 80191ba:	f7e7 f9f7 	bl	80005ac <__aeabi_lmul>
 80191be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80191c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80191c2:	9101      	str	r1, [sp, #4]
 80191c4:	0038      	movs	r0, r7
 80191c6:	4651      	mov	r1, sl
 80191c8:	f7e7 f9f0 	bl	80005ac <__aeabi_lmul>
 80191cc:	9801      	ldr	r0, [sp, #4]
 80191ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80191d0:	4684      	mov	ip, r0
 80191d2:	4461      	add	r1, ip
 80191d4:	1049      	asrs	r1, r1, #1
 80191d6:	6029      	str	r1, [r5, #0]
 80191d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80191da:	0038      	movs	r0, r7
 80191dc:	4651      	mov	r1, sl
 80191de:	f7e7 f9e5 	bl	80005ac <__aeabi_lmul>
 80191e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80191e4:	000f      	movs	r7, r1
 80191e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80191e8:	0030      	movs	r0, r6
 80191ea:	4641      	mov	r1, r8
 80191ec:	f7e7 f9de 	bl	80005ac <__aeabi_lmul>
 80191f0:	1a7f      	subs	r7, r7, r1
 80191f2:	107f      	asrs	r7, r7, #1
 80191f4:	606f      	str	r7, [r5, #4]
 80191f6:	9a00      	ldr	r2, [sp, #0]
 80191f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80191fa:	4694      	mov	ip, r2
 80191fc:	4465      	add	r5, ip
 80191fe:	468c      	mov	ip, r1
 8019200:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019202:	0013      	movs	r3, r2
 8019204:	4462      	add	r2, ip
 8019206:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019208:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801920a:	429a      	cmp	r2, r3
 801920c:	d900      	bls.n	8019210 <arm_radix4_butterfly_q31+0x478>
 801920e:	e73a      	b.n	8019086 <arm_radix4_butterfly_q31+0x2ee>
 8019210:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019212:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019214:	468c      	mov	ip, r1
 8019216:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8019218:	4462      	add	r2, ip
 801921a:	468c      	mov	ip, r1
 801921c:	9216      	str	r2, [sp, #88]	@ 0x58
 801921e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8019220:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019222:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019224:	4462      	add	r2, ip
 8019226:	468c      	mov	ip, r1
 8019228:	9219      	str	r2, [sp, #100]	@ 0x64
 801922a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801922c:	3301      	adds	r3, #1
 801922e:	4462      	add	r2, ip
 8019230:	9218      	str	r2, [sp, #96]	@ 0x60
 8019232:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019234:	9315      	str	r3, [sp, #84]	@ 0x54
 8019236:	3208      	adds	r2, #8
 8019238:	9217      	str	r2, [sp, #92]	@ 0x5c
 801923a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801923c:	4293      	cmp	r3, r2
 801923e:	d800      	bhi.n	8019242 <arm_radix4_butterfly_q31+0x4aa>
 8019240:	e6e8      	b.n	8019014 <arm_radix4_butterfly_q31+0x27c>
 8019242:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019244:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019246:	009b      	lsls	r3, r3, #2
 8019248:	931f      	str	r3, [sp, #124]	@ 0x7c
 801924a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801924c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801924e:	089b      	lsrs	r3, r3, #2
 8019250:	9320      	str	r3, [sp, #128]	@ 0x80
 8019252:	2b04      	cmp	r3, #4
 8019254:	d900      	bls.n	8019258 <arm_radix4_butterfly_q31+0x4c0>
 8019256:	e6c1      	b.n	8018fdc <arm_radix4_butterfly_q31+0x244>
 8019258:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801925a:	469a      	mov	sl, r3
 801925c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801925e:	691c      	ldr	r4, [r3, #16]
 8019260:	685a      	ldr	r2, [r3, #4]
 8019262:	46a1      	mov	r9, r4
 8019264:	4690      	mov	r8, r2
 8019266:	6819      	ldr	r1, [r3, #0]
 8019268:	689a      	ldr	r2, [r3, #8]
 801926a:	699f      	ldr	r7, [r3, #24]
 801926c:	188d      	adds	r5, r1, r2
 801926e:	444d      	add	r5, r9
 8019270:	19ed      	adds	r5, r5, r7
 8019272:	69de      	ldr	r6, [r3, #28]
 8019274:	601d      	str	r5, [r3, #0]
 8019276:	4645      	mov	r5, r8
 8019278:	46b4      	mov	ip, r6
 801927a:	68d8      	ldr	r0, [r3, #12]
 801927c:	695c      	ldr	r4, [r3, #20]
 801927e:	182d      	adds	r5, r5, r0
 8019280:	192d      	adds	r5, r5, r4
 8019282:	4465      	add	r5, ip
 8019284:	605d      	str	r5, [r3, #4]
 8019286:	1a8d      	subs	r5, r1, r2
 8019288:	444d      	add	r5, r9
 801928a:	1bed      	subs	r5, r5, r7
 801928c:	609d      	str	r5, [r3, #8]
 801928e:	4645      	mov	r5, r8
 8019290:	1a2d      	subs	r5, r5, r0
 8019292:	192d      	adds	r5, r5, r4
 8019294:	1bad      	subs	r5, r5, r6
 8019296:	464e      	mov	r6, r9
 8019298:	60dd      	str	r5, [r3, #12]
 801929a:	180d      	adds	r5, r1, r0
 801929c:	1bad      	subs	r5, r5, r6
 801929e:	4666      	mov	r6, ip
 80192a0:	1bad      	subs	r5, r5, r6
 80192a2:	611d      	str	r5, [r3, #16]
 80192a4:	4645      	mov	r5, r8
 80192a6:	1aad      	subs	r5, r5, r2
 80192a8:	4442      	add	r2, r8
 80192aa:	1b12      	subs	r2, r2, r4
 80192ac:	1bd2      	subs	r2, r2, r7
 80192ae:	1a08      	subs	r0, r1, r0
 80192b0:	61da      	str	r2, [r3, #28]
 80192b2:	4649      	mov	r1, r9
 80192b4:	2201      	movs	r2, #1
 80192b6:	1a41      	subs	r1, r0, r1
 80192b8:	4252      	negs	r2, r2
 80192ba:	4461      	add	r1, ip
 80192bc:	4694      	mov	ip, r2
 80192be:	44e2      	add	sl, ip
 80192c0:	4652      	mov	r2, sl
 80192c2:	1b2d      	subs	r5, r5, r4
 80192c4:	19ed      	adds	r5, r5, r7
 80192c6:	615d      	str	r5, [r3, #20]
 80192c8:	6199      	str	r1, [r3, #24]
 80192ca:	3320      	adds	r3, #32
 80192cc:	2a00      	cmp	r2, #0
 80192ce:	d1c6      	bne.n	801925e <arm_radix4_butterfly_q31+0x4c6>
 80192d0:	b027      	add	sp, #156	@ 0x9c
 80192d2:	bc3c      	pop	{r2, r3, r4, r5}
 80192d4:	4690      	mov	r8, r2
 80192d6:	4699      	mov	r9, r3
 80192d8:	46a2      	mov	sl, r4
 80192da:	46ab      	mov	fp, r5
 80192dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192de:	469a      	mov	sl, r3
 80192e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80192e2:	e7bc      	b.n	801925e <arm_radix4_butterfly_q31+0x4c6>

080192e4 <arm_radix4_butterfly_inverse_q31>:
 80192e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192e6:	464d      	mov	r5, r9
 80192e8:	4644      	mov	r4, r8
 80192ea:	465f      	mov	r7, fp
 80192ec:	4656      	mov	r6, sl
 80192ee:	b4f0      	push	{r4, r5, r6, r7}
 80192f0:	b0a7      	sub	sp, #156	@ 0x9c
 80192f2:	469c      	mov	ip, r3
 80192f4:	9114      	str	r1, [sp, #80]	@ 0x50
 80192f6:	0889      	lsrs	r1, r1, #2
 80192f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80192fa:	00cb      	lsls	r3, r1, #3
 80192fc:	0015      	movs	r5, r2
 80192fe:	9223      	str	r2, [sp, #140]	@ 0x8c
 8019300:	18c2      	adds	r2, r0, r3
 8019302:	000c      	movs	r4, r1
 8019304:	9124      	str	r1, [sp, #144]	@ 0x90
 8019306:	18d1      	adds	r1, r2, r3
 8019308:	468b      	mov	fp, r1
 801930a:	469a      	mov	sl, r3
 801930c:	4663      	mov	r3, ip
 801930e:	44da      	add	sl, fp
 8019310:	46d0      	mov	r8, sl
 8019312:	4681      	mov	r9, r0
 8019314:	4692      	mov	sl, r2
 8019316:	0119      	lsls	r1, r3, #4
 8019318:	910d      	str	r1, [sp, #52]	@ 0x34
 801931a:	00d9      	lsls	r1, r3, #3
 801931c:	005b      	lsls	r3, r3, #1
 801931e:	4463      	add	r3, ip
 8019320:	910e      	str	r1, [sp, #56]	@ 0x38
 8019322:	00d9      	lsls	r1, r3, #3
 8019324:	9022      	str	r0, [sp, #136]	@ 0x88
 8019326:	9025      	str	r0, [sp, #148]	@ 0x94
 8019328:	910f      	str	r1, [sp, #60]	@ 0x3c
 801932a:	9502      	str	r5, [sp, #8]
 801932c:	9500      	str	r5, [sp, #0]
 801932e:	9501      	str	r5, [sp, #4]
 8019330:	9409      	str	r4, [sp, #36]	@ 0x24
 8019332:	464b      	mov	r3, r9
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	4652      	mov	r2, sl
 8019338:	111c      	asrs	r4, r3, #4
 801933a:	465b      	mov	r3, fp
 801933c:	4648      	mov	r0, r9
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	6812      	ldr	r2, [r2, #0]
 8019342:	6840      	ldr	r0, [r0, #4]
 8019344:	111b      	asrs	r3, r3, #4
 8019346:	18e7      	adds	r7, r4, r3
 8019348:	1ae3      	subs	r3, r4, r3
 801934a:	1114      	asrs	r4, r2, #4
 801934c:	4642      	mov	r2, r8
 801934e:	1105      	asrs	r5, r0, #4
 8019350:	4658      	mov	r0, fp
 8019352:	6812      	ldr	r2, [r2, #0]
 8019354:	6840      	ldr	r0, [r0, #4]
 8019356:	9303      	str	r3, [sp, #12]
 8019358:	1113      	asrs	r3, r2, #4
 801935a:	18e2      	adds	r2, r4, r3
 801935c:	1103      	asrs	r3, r0, #4
 801935e:	18ee      	adds	r6, r5, r3
 8019360:	1ae8      	subs	r0, r5, r3
 8019362:	464d      	mov	r5, r9
 8019364:	18bb      	adds	r3, r7, r2
 8019366:	602b      	str	r3, [r5, #0]
 8019368:	4641      	mov	r1, r8
 801936a:	4655      	mov	r5, sl
 801936c:	6849      	ldr	r1, [r1, #4]
 801936e:	686d      	ldr	r5, [r5, #4]
 8019370:	110b      	asrs	r3, r1, #4
 8019372:	112d      	asrs	r5, r5, #4
 8019374:	18eb      	adds	r3, r5, r3
 8019376:	464d      	mov	r5, r9
 8019378:	18f1      	adds	r1, r6, r3
 801937a:	6069      	str	r1, [r5, #4]
 801937c:	4655      	mov	r5, sl
 801937e:	686d      	ldr	r5, [r5, #4]
 8019380:	9004      	str	r0, [sp, #16]
 8019382:	112c      	asrs	r4, r5, #4
 8019384:	4645      	mov	r5, r8
 8019386:	686d      	ldr	r5, [r5, #4]
 8019388:	1129      	asrs	r1, r5, #4
 801938a:	1a65      	subs	r5, r4, r1
 801938c:	4651      	mov	r1, sl
 801938e:	6809      	ldr	r1, [r1, #0]
 8019390:	1abc      	subs	r4, r7, r2
 8019392:	1108      	asrs	r0, r1, #4
 8019394:	4641      	mov	r1, r8
 8019396:	17e2      	asrs	r2, r4, #31
 8019398:	6809      	ldr	r1, [r1, #0]
 801939a:	9207      	str	r2, [sp, #28]
 801939c:	9a01      	ldr	r2, [sp, #4]
 801939e:	1109      	asrs	r1, r1, #4
 80193a0:	6817      	ldr	r7, [r2, #0]
 80193a2:	1a41      	subs	r1, r0, r1
 80193a4:	9106      	str	r1, [sp, #24]
 80193a6:	0039      	movs	r1, r7
 80193a8:	17ff      	asrs	r7, r7, #31
 80193aa:	0038      	movs	r0, r7
 80193ac:	9505      	str	r5, [sp, #20]
 80193ae:	1af5      	subs	r5, r6, r3
 80193b0:	17ef      	asrs	r7, r5, #31
 80193b2:	970b      	str	r7, [sp, #44]	@ 0x2c
 80193b4:	6857      	ldr	r7, [r2, #4]
 80193b6:	0003      	movs	r3, r0
 80193b8:	17fe      	asrs	r6, r7, #31
 80193ba:	000a      	movs	r2, r1
 80193bc:	9108      	str	r1, [sp, #32]
 80193be:	900a      	str	r0, [sp, #40]	@ 0x28
 80193c0:	17e1      	asrs	r1, r4, #31
 80193c2:	0020      	movs	r0, r4
 80193c4:	960c      	str	r6, [sp, #48]	@ 0x30
 80193c6:	f7e7 f8f1 	bl	80005ac <__aeabi_lmul>
 80193ca:	003a      	movs	r2, r7
 80193cc:	17fb      	asrs	r3, r7, #31
 80193ce:	000e      	movs	r6, r1
 80193d0:	0028      	movs	r0, r5
 80193d2:	17e9      	asrs	r1, r5, #31
 80193d4:	f7e7 f8ea 	bl	80005ac <__aeabi_lmul>
 80193d8:	4653      	mov	r3, sl
 80193da:	1a76      	subs	r6, r6, r1
 80193dc:	0076      	lsls	r6, r6, #1
 80193de:	601e      	str	r6, [r3, #0]
 80193e0:	002a      	movs	r2, r5
 80193e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80193e4:	9808      	ldr	r0, [sp, #32]
 80193e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80193e8:	f7e7 f8e0 	bl	80005ac <__aeabi_lmul>
 80193ec:	003a      	movs	r2, r7
 80193ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193f0:	000d      	movs	r5, r1
 80193f2:	0020      	movs	r0, r4
 80193f4:	9907      	ldr	r1, [sp, #28]
 80193f6:	f7e7 f8d9 	bl	80005ac <__aeabi_lmul>
 80193fa:	4657      	mov	r7, sl
 80193fc:	186d      	adds	r5, r5, r1
 80193fe:	006d      	lsls	r5, r5, #1
 8019400:	607d      	str	r5, [r7, #4]
 8019402:	9b03      	ldr	r3, [sp, #12]
 8019404:	9e06      	ldr	r6, [sp, #24]
 8019406:	9d05      	ldr	r5, [sp, #20]
 8019408:	46b4      	mov	ip, r6
 801940a:	1b5d      	subs	r5, r3, r5
 801940c:	9b00      	ldr	r3, [sp, #0]
 801940e:	17ef      	asrs	r7, r5, #31
 8019410:	0039      	movs	r1, r7
 8019412:	681f      	ldr	r7, [r3, #0]
 8019414:	17fc      	asrs	r4, r7, #31
 8019416:	0020      	movs	r0, r4
 8019418:	9c04      	ldr	r4, [sp, #16]
 801941a:	4464      	add	r4, ip
 801941c:	17e6      	asrs	r6, r4, #31
 801941e:	9407      	str	r4, [sp, #28]
 8019420:	9608      	str	r6, [sp, #32]
 8019422:	685e      	ldr	r6, [r3, #4]
 8019424:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019426:	17f2      	asrs	r2, r6, #31
 8019428:	0003      	movs	r3, r0
 801942a:	920c      	str	r2, [sp, #48]	@ 0x30
 801942c:	0028      	movs	r0, r5
 801942e:	003a      	movs	r2, r7
 8019430:	910a      	str	r1, [sp, #40]	@ 0x28
 8019432:	f7e7 f8bb 	bl	80005ac <__aeabi_lmul>
 8019436:	0032      	movs	r2, r6
 8019438:	17f3      	asrs	r3, r6, #31
 801943a:	9807      	ldr	r0, [sp, #28]
 801943c:	000c      	movs	r4, r1
 801943e:	9908      	ldr	r1, [sp, #32]
 8019440:	f7e7 f8b4 	bl	80005ac <__aeabi_lmul>
 8019444:	4658      	mov	r0, fp
 8019446:	1a64      	subs	r4, r4, r1
 8019448:	0064      	lsls	r4, r4, #1
 801944a:	9a07      	ldr	r2, [sp, #28]
 801944c:	6004      	str	r4, [r0, #0]
 801944e:	9b08      	ldr	r3, [sp, #32]
 8019450:	0038      	movs	r0, r7
 8019452:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019454:	f7e7 f8aa 	bl	80005ac <__aeabi_lmul>
 8019458:	0032      	movs	r2, r6
 801945a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801945c:	000c      	movs	r4, r1
 801945e:	0028      	movs	r0, r5
 8019460:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019462:	f7e7 f8a3 	bl	80005ac <__aeabi_lmul>
 8019466:	9d05      	ldr	r5, [sp, #20]
 8019468:	465f      	mov	r7, fp
 801946a:	46ac      	mov	ip, r5
 801946c:	1864      	adds	r4, r4, r1
 801946e:	9903      	ldr	r1, [sp, #12]
 8019470:	0064      	lsls	r4, r4, #1
 8019472:	4461      	add	r1, ip
 8019474:	607c      	str	r4, [r7, #4]
 8019476:	000c      	movs	r4, r1
 8019478:	17c9      	asrs	r1, r1, #31
 801947a:	9105      	str	r1, [sp, #20]
 801947c:	9902      	ldr	r1, [sp, #8]
 801947e:	9804      	ldr	r0, [sp, #16]
 8019480:	680d      	ldr	r5, [r1, #0]
 8019482:	9e06      	ldr	r6, [sp, #24]
 8019484:	002b      	movs	r3, r5
 8019486:	17ed      	asrs	r5, r5, #31
 8019488:	684f      	ldr	r7, [r1, #4]
 801948a:	9503      	str	r5, [sp, #12]
 801948c:	1b85      	subs	r5, r0, r6
 801948e:	17e8      	asrs	r0, r5, #31
 8019490:	001a      	movs	r2, r3
 8019492:	9006      	str	r0, [sp, #24]
 8019494:	17fe      	asrs	r6, r7, #31
 8019496:	9304      	str	r3, [sp, #16]
 8019498:	0020      	movs	r0, r4
 801949a:	9b03      	ldr	r3, [sp, #12]
 801949c:	17e1      	asrs	r1, r4, #31
 801949e:	9607      	str	r6, [sp, #28]
 80194a0:	f7e7 f884 	bl	80005ac <__aeabi_lmul>
 80194a4:	003a      	movs	r2, r7
 80194a6:	000e      	movs	r6, r1
 80194a8:	17fb      	asrs	r3, r7, #31
 80194aa:	0028      	movs	r0, r5
 80194ac:	17e9      	asrs	r1, r5, #31
 80194ae:	f7e7 f87d 	bl	80005ac <__aeabi_lmul>
 80194b2:	4640      	mov	r0, r8
 80194b4:	1a76      	subs	r6, r6, r1
 80194b6:	0076      	lsls	r6, r6, #1
 80194b8:	002a      	movs	r2, r5
 80194ba:	9b06      	ldr	r3, [sp, #24]
 80194bc:	6006      	str	r6, [r0, #0]
 80194be:	9903      	ldr	r1, [sp, #12]
 80194c0:	9804      	ldr	r0, [sp, #16]
 80194c2:	f7e7 f873 	bl	80005ac <__aeabi_lmul>
 80194c6:	0020      	movs	r0, r4
 80194c8:	2408      	movs	r4, #8
 80194ca:	9b07      	ldr	r3, [sp, #28]
 80194cc:	000d      	movs	r5, r1
 80194ce:	003a      	movs	r2, r7
 80194d0:	9905      	ldr	r1, [sp, #20]
 80194d2:	f7e7 f86b 	bl	80005ac <__aeabi_lmul>
 80194d6:	4640      	mov	r0, r8
 80194d8:	46a4      	mov	ip, r4
 80194da:	186d      	adds	r5, r5, r1
 80194dc:	006d      	lsls	r5, r5, #1
 80194de:	6045      	str	r5, [r0, #4]
 80194e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80194e2:	44e1      	add	r9, ip
 80194e4:	3801      	subs	r0, #1
 80194e6:	9009      	str	r0, [sp, #36]	@ 0x24
 80194e8:	9a01      	ldr	r2, [sp, #4]
 80194ea:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80194ec:	44e2      	add	sl, ip
 80194ee:	44e3      	add	fp, ip
 80194f0:	44e0      	add	r8, ip
 80194f2:	46a4      	mov	ip, r4
 80194f4:	4462      	add	r2, ip
 80194f6:	9201      	str	r2, [sp, #4]
 80194f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194fa:	9b00      	ldr	r3, [sp, #0]
 80194fc:	4694      	mov	ip, r2
 80194fe:	4463      	add	r3, ip
 8019500:	9300      	str	r3, [sp, #0]
 8019502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019504:	9902      	ldr	r1, [sp, #8]
 8019506:	469c      	mov	ip, r3
 8019508:	4461      	add	r1, ip
 801950a:	9102      	str	r1, [sp, #8]
 801950c:	2800      	cmp	r0, #0
 801950e:	d000      	beq.n	8019512 <arm_radix4_butterfly_inverse_q31+0x22e>
 8019510:	e70f      	b.n	8019332 <arm_radix4_butterfly_inverse_q31+0x4e>
 8019512:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019514:	009b      	lsls	r3, r3, #2
 8019516:	931f      	str	r3, [sp, #124]	@ 0x7c
 8019518:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801951a:	9320      	str	r3, [sp, #128]	@ 0x80
 801951c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801951e:	2b04      	cmp	r3, #4
 8019520:	d800      	bhi.n	8019524 <arm_radix4_butterfly_inverse_q31+0x240>
 8019522:	e17c      	b.n	801981e <arm_radix4_butterfly_inverse_q31+0x53a>
 8019524:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019526:	0893      	lsrs	r3, r2, #2
 8019528:	1e59      	subs	r1, r3, #1
 801952a:	9321      	str	r3, [sp, #132]	@ 0x84
 801952c:	00db      	lsls	r3, r3, #3
 801952e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019530:	00d3      	lsls	r3, r2, #3
 8019532:	9300      	str	r3, [sp, #0]
 8019534:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019536:	911a      	str	r1, [sp, #104]	@ 0x68
 8019538:	00da      	lsls	r2, r3, #3
 801953a:	921e      	str	r2, [sp, #120]	@ 0x78
 801953c:	011a      	lsls	r2, r3, #4
 801953e:	921d      	str	r2, [sp, #116]	@ 0x74
 8019540:	001a      	movs	r2, r3
 8019542:	4694      	mov	ip, r2
 8019544:	005b      	lsls	r3, r3, #1
 8019546:	4463      	add	r3, ip
 8019548:	00db      	lsls	r3, r3, #3
 801954a:	931c      	str	r3, [sp, #112]	@ 0x70
 801954c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801954e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019550:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019552:	9318      	str	r3, [sp, #96]	@ 0x60
 8019554:	9319      	str	r3, [sp, #100]	@ 0x64
 8019556:	9316      	str	r3, [sp, #88]	@ 0x58
 8019558:	2300      	movs	r3, #0
 801955a:	9315      	str	r3, [sp, #84]	@ 0x54
 801955c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801955e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8019560:	681a      	ldr	r2, [r3, #0]
 8019562:	685b      	ldr	r3, [r3, #4]
 8019564:	9205      	str	r2, [sp, #20]
 8019566:	9306      	str	r3, [sp, #24]
 8019568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801956a:	468c      	mov	ip, r1
 801956c:	681a      	ldr	r2, [r3, #0]
 801956e:	685b      	ldr	r3, [r3, #4]
 8019570:	9207      	str	r2, [sp, #28]
 8019572:	9308      	str	r3, [sp, #32]
 8019574:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019576:	681a      	ldr	r2, [r3, #0]
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	9209      	str	r2, [sp, #36]	@ 0x24
 801957c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801957e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019580:	0013      	movs	r3, r2
 8019582:	4463      	add	r3, ip
 8019584:	4698      	mov	r8, r3
 8019586:	0013      	movs	r3, r2
 8019588:	4442      	add	r2, r8
 801958a:	4691      	mov	r9, r2
 801958c:	001a      	movs	r2, r3
 801958e:	444a      	add	r2, r9
 8019590:	4692      	mov	sl, r2
 8019592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019594:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019596:	4293      	cmp	r3, r2
 8019598:	d800      	bhi.n	801959c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801959a:	e0d9      	b.n	8019750 <arm_radix4_butterfly_inverse_q31+0x46c>
 801959c:	4694      	mov	ip, r2
 801959e:	4644      	mov	r4, r8
 80195a0:	4655      	mov	r5, sl
 80195a2:	4688      	mov	r8, r1
 80195a4:	9b07      	ldr	r3, [sp, #28]
 80195a6:	17db      	asrs	r3, r3, #31
 80195a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80195aa:	9b08      	ldr	r3, [sp, #32]
 80195ac:	17db      	asrs	r3, r3, #31
 80195ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80195b0:	9b05      	ldr	r3, [sp, #20]
 80195b2:	17db      	asrs	r3, r3, #31
 80195b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80195b6:	9b06      	ldr	r3, [sp, #24]
 80195b8:	17db      	asrs	r3, r3, #31
 80195ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80195bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195be:	17db      	asrs	r3, r3, #31
 80195c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80195c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80195c4:	17db      	asrs	r3, r3, #31
 80195c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80195c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80195ca:	4463      	add	r3, ip
 80195cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80195ce:	4643      	mov	r3, r8
 80195d0:	4641      	mov	r1, r8
 80195d2:	681a      	ldr	r2, [r3, #0]
 80195d4:	464b      	mov	r3, r9
 80195d6:	684f      	ldr	r7, [r1, #4]
 80195d8:	4649      	mov	r1, r9
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	18d6      	adds	r6, r2, r3
 80195de:	1ad3      	subs	r3, r2, r3
 80195e0:	9301      	str	r3, [sp, #4]
 80195e2:	684b      	ldr	r3, [r1, #4]
 80195e4:	1af9      	subs	r1, r7, r3
 80195e6:	9102      	str	r1, [sp, #8]
 80195e8:	6829      	ldr	r1, [r5, #0]
 80195ea:	18f8      	adds	r0, r7, r3
 80195ec:	468c      	mov	ip, r1
 80195ee:	6827      	ldr	r7, [r4, #0]
 80195f0:	4467      	add	r7, ip
 80195f2:	003a      	movs	r2, r7
 80195f4:	19f3      	adds	r3, r6, r7
 80195f6:	4647      	mov	r7, r8
 80195f8:	109b      	asrs	r3, r3, #2
 80195fa:	603b      	str	r3, [r7, #0]
 80195fc:	6869      	ldr	r1, [r5, #4]
 80195fe:	6867      	ldr	r7, [r4, #4]
 8019600:	468c      	mov	ip, r1
 8019602:	4467      	add	r7, ip
 8019604:	003b      	movs	r3, r7
 8019606:	19c1      	adds	r1, r0, r7
 8019608:	4647      	mov	r7, r8
 801960a:	1ab6      	subs	r6, r6, r2
 801960c:	1089      	asrs	r1, r1, #2
 801960e:	6079      	str	r1, [r7, #4]
 8019610:	17f2      	asrs	r2, r6, #31
 8019612:	9900      	ldr	r1, [sp, #0]
 8019614:	4692      	mov	sl, r2
 8019616:	468c      	mov	ip, r1
 8019618:	6867      	ldr	r7, [r4, #4]
 801961a:	6869      	ldr	r1, [r5, #4]
 801961c:	44e0      	add	r8, ip
 801961e:	1a7f      	subs	r7, r7, r1
 8019620:	9703      	str	r7, [sp, #12]
 8019622:	6821      	ldr	r1, [r4, #0]
 8019624:	682f      	ldr	r7, [r5, #0]
 8019626:	1bc9      	subs	r1, r1, r7
 8019628:	1ac7      	subs	r7, r0, r3
 801962a:	17fa      	asrs	r2, r7, #31
 801962c:	4693      	mov	fp, r2
 801962e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019630:	9a07      	ldr	r2, [sp, #28]
 8019632:	9104      	str	r1, [sp, #16]
 8019634:	0030      	movs	r0, r6
 8019636:	4651      	mov	r1, sl
 8019638:	f7e6 ffb8 	bl	80005ac <__aeabi_lmul>
 801963c:	9a08      	ldr	r2, [sp, #32]
 801963e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019640:	9112      	str	r1, [sp, #72]	@ 0x48
 8019642:	0038      	movs	r0, r7
 8019644:	4659      	mov	r1, fp
 8019646:	f7e6 ffb1 	bl	80005ac <__aeabi_lmul>
 801964a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801964c:	9a07      	ldr	r2, [sp, #28]
 801964e:	1a41      	subs	r1, r0, r1
 8019650:	1049      	asrs	r1, r1, #1
 8019652:	6021      	str	r1, [r4, #0]
 8019654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019656:	0038      	movs	r0, r7
 8019658:	4659      	mov	r1, fp
 801965a:	f7e6 ffa7 	bl	80005ac <__aeabi_lmul>
 801965e:	9a08      	ldr	r2, [sp, #32]
 8019660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019662:	000f      	movs	r7, r1
 8019664:	0030      	movs	r0, r6
 8019666:	4651      	mov	r1, sl
 8019668:	f7e6 ffa0 	bl	80005ac <__aeabi_lmul>
 801966c:	9b00      	ldr	r3, [sp, #0]
 801966e:	187f      	adds	r7, r7, r1
 8019670:	469c      	mov	ip, r3
 8019672:	107f      	asrs	r7, r7, #1
 8019674:	6067      	str	r7, [r4, #4]
 8019676:	9a01      	ldr	r2, [sp, #4]
 8019678:	9f03      	ldr	r7, [sp, #12]
 801967a:	9802      	ldr	r0, [sp, #8]
 801967c:	1bd7      	subs	r7, r2, r7
 801967e:	17fe      	asrs	r6, r7, #31
 8019680:	0031      	movs	r1, r6
 8019682:	9e04      	ldr	r6, [sp, #16]
 8019684:	4682      	mov	sl, r0
 8019686:	4464      	add	r4, ip
 8019688:	46b4      	mov	ip, r6
 801968a:	44e2      	add	sl, ip
 801968c:	4652      	mov	r2, sl
 801968e:	17d2      	asrs	r2, r2, #31
 8019690:	4693      	mov	fp, r2
 8019692:	0038      	movs	r0, r7
 8019694:	9a05      	ldr	r2, [sp, #20]
 8019696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019698:	9112      	str	r1, [sp, #72]	@ 0x48
 801969a:	f7e6 ff87 	bl	80005ac <__aeabi_lmul>
 801969e:	9a06      	ldr	r2, [sp, #24]
 80196a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80196a2:	000e      	movs	r6, r1
 80196a4:	4650      	mov	r0, sl
 80196a6:	4659      	mov	r1, fp
 80196a8:	f7e6 ff80 	bl	80005ac <__aeabi_lmul>
 80196ac:	4648      	mov	r0, r9
 80196ae:	1a76      	subs	r6, r6, r1
 80196b0:	1076      	asrs	r6, r6, #1
 80196b2:	6006      	str	r6, [r0, #0]
 80196b4:	9a05      	ldr	r2, [sp, #20]
 80196b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80196b8:	4650      	mov	r0, sl
 80196ba:	4659      	mov	r1, fp
 80196bc:	f7e6 ff76 	bl	80005ac <__aeabi_lmul>
 80196c0:	9a06      	ldr	r2, [sp, #24]
 80196c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80196c4:	000e      	movs	r6, r1
 80196c6:	0038      	movs	r0, r7
 80196c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80196ca:	f7e6 ff6f 	bl	80005ac <__aeabi_lmul>
 80196ce:	9a00      	ldr	r2, [sp, #0]
 80196d0:	9f03      	ldr	r7, [sp, #12]
 80196d2:	4694      	mov	ip, r2
 80196d4:	1876      	adds	r6, r6, r1
 80196d6:	4649      	mov	r1, r9
 80196d8:	44e1      	add	r9, ip
 80196da:	46bc      	mov	ip, r7
 80196dc:	9b01      	ldr	r3, [sp, #4]
 80196de:	1076      	asrs	r6, r6, #1
 80196e0:	4463      	add	r3, ip
 80196e2:	17df      	asrs	r7, r3, #31
 80196e4:	604e      	str	r6, [r1, #4]
 80196e6:	46ba      	mov	sl, r7
 80196e8:	001e      	movs	r6, r3
 80196ea:	9802      	ldr	r0, [sp, #8]
 80196ec:	9b04      	ldr	r3, [sp, #16]
 80196ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196f0:	1ac7      	subs	r7, r0, r3
 80196f2:	17fb      	asrs	r3, r7, #31
 80196f4:	469b      	mov	fp, r3
 80196f6:	0030      	movs	r0, r6
 80196f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80196fa:	4651      	mov	r1, sl
 80196fc:	f7e6 ff56 	bl	80005ac <__aeabi_lmul>
 8019700:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019702:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019704:	9101      	str	r1, [sp, #4]
 8019706:	0038      	movs	r0, r7
 8019708:	4659      	mov	r1, fp
 801970a:	f7e6 ff4f 	bl	80005ac <__aeabi_lmul>
 801970e:	9801      	ldr	r0, [sp, #4]
 8019710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019712:	1a41      	subs	r1, r0, r1
 8019714:	1049      	asrs	r1, r1, #1
 8019716:	6029      	str	r1, [r5, #0]
 8019718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801971a:	0038      	movs	r0, r7
 801971c:	4659      	mov	r1, fp
 801971e:	f7e6 ff45 	bl	80005ac <__aeabi_lmul>
 8019722:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019724:	000f      	movs	r7, r1
 8019726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019728:	0030      	movs	r0, r6
 801972a:	4651      	mov	r1, sl
 801972c:	f7e6 ff3e 	bl	80005ac <__aeabi_lmul>
 8019730:	187f      	adds	r7, r7, r1
 8019732:	107f      	asrs	r7, r7, #1
 8019734:	606f      	str	r7, [r5, #4]
 8019736:	9a00      	ldr	r2, [sp, #0]
 8019738:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801973a:	4694      	mov	ip, r2
 801973c:	4465      	add	r5, ip
 801973e:	468c      	mov	ip, r1
 8019740:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019742:	0013      	movs	r3, r2
 8019744:	4462      	add	r2, ip
 8019746:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019748:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801974a:	429a      	cmp	r2, r3
 801974c:	d900      	bls.n	8019750 <arm_radix4_butterfly_inverse_q31+0x46c>
 801974e:	e73e      	b.n	80195ce <arm_radix4_butterfly_inverse_q31+0x2ea>
 8019750:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019752:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019754:	468c      	mov	ip, r1
 8019756:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8019758:	4462      	add	r2, ip
 801975a:	468c      	mov	ip, r1
 801975c:	9216      	str	r2, [sp, #88]	@ 0x58
 801975e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8019760:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019762:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019764:	4462      	add	r2, ip
 8019766:	468c      	mov	ip, r1
 8019768:	9219      	str	r2, [sp, #100]	@ 0x64
 801976a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801976c:	3301      	adds	r3, #1
 801976e:	4462      	add	r2, ip
 8019770:	9218      	str	r2, [sp, #96]	@ 0x60
 8019772:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019774:	9315      	str	r3, [sp, #84]	@ 0x54
 8019776:	3208      	adds	r2, #8
 8019778:	9217      	str	r2, [sp, #92]	@ 0x5c
 801977a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801977c:	4293      	cmp	r3, r2
 801977e:	d800      	bhi.n	8019782 <arm_radix4_butterfly_inverse_q31+0x49e>
 8019780:	e6ec      	b.n	801955c <arm_radix4_butterfly_inverse_q31+0x278>
 8019782:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019784:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019786:	009b      	lsls	r3, r3, #2
 8019788:	931f      	str	r3, [sp, #124]	@ 0x7c
 801978a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801978c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801978e:	089b      	lsrs	r3, r3, #2
 8019790:	9320      	str	r3, [sp, #128]	@ 0x80
 8019792:	2b04      	cmp	r3, #4
 8019794:	d900      	bls.n	8019798 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8019796:	e6c5      	b.n	8019524 <arm_radix4_butterfly_inverse_q31+0x240>
 8019798:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801979a:	469a      	mov	sl, r3
 801979c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801979e:	681a      	ldr	r2, [r3, #0]
 80197a0:	6918      	ldr	r0, [r3, #16]
 80197a2:	4691      	mov	r9, r2
 80197a4:	464c      	mov	r4, r9
 80197a6:	4680      	mov	r8, r0
 80197a8:	69de      	ldr	r6, [r3, #28]
 80197aa:	689d      	ldr	r5, [r3, #8]
 80197ac:	46b4      	mov	ip, r6
 80197ae:	6998      	ldr	r0, [r3, #24]
 80197b0:	1964      	adds	r4, r4, r5
 80197b2:	6859      	ldr	r1, [r3, #4]
 80197b4:	68da      	ldr	r2, [r3, #12]
 80197b6:	4444      	add	r4, r8
 80197b8:	695f      	ldr	r7, [r3, #20]
 80197ba:	1824      	adds	r4, r4, r0
 80197bc:	601c      	str	r4, [r3, #0]
 80197be:	188c      	adds	r4, r1, r2
 80197c0:	19e4      	adds	r4, r4, r7
 80197c2:	4464      	add	r4, ip
 80197c4:	605c      	str	r4, [r3, #4]
 80197c6:	464c      	mov	r4, r9
 80197c8:	1b64      	subs	r4, r4, r5
 80197ca:	4444      	add	r4, r8
 80197cc:	1a24      	subs	r4, r4, r0
 80197ce:	609c      	str	r4, [r3, #8]
 80197d0:	1a8c      	subs	r4, r1, r2
 80197d2:	19e4      	adds	r4, r4, r7
 80197d4:	1ba4      	subs	r4, r4, r6
 80197d6:	60dc      	str	r4, [r3, #12]
 80197d8:	464c      	mov	r4, r9
 80197da:	4646      	mov	r6, r8
 80197dc:	1aa4      	subs	r4, r4, r2
 80197de:	1ba4      	subs	r4, r4, r6
 80197e0:	4464      	add	r4, ip
 80197e2:	611c      	str	r4, [r3, #16]
 80197e4:	194c      	adds	r4, r1, r5
 80197e6:	1be4      	subs	r4, r4, r7
 80197e8:	1a24      	subs	r4, r4, r0
 80197ea:	615c      	str	r4, [r3, #20]
 80197ec:	4644      	mov	r4, r8
 80197ee:	4666      	mov	r6, ip
 80197f0:	444a      	add	r2, r9
 80197f2:	1b12      	subs	r2, r2, r4
 80197f4:	1b92      	subs	r2, r2, r6
 80197f6:	619a      	str	r2, [r3, #24]
 80197f8:	1b4a      	subs	r2, r1, r5
 80197fa:	1bd1      	subs	r1, r2, r7
 80197fc:	2201      	movs	r2, #1
 80197fe:	4252      	negs	r2, r2
 8019800:	4694      	mov	ip, r2
 8019802:	44e2      	add	sl, ip
 8019804:	4652      	mov	r2, sl
 8019806:	1809      	adds	r1, r1, r0
 8019808:	61d9      	str	r1, [r3, #28]
 801980a:	3320      	adds	r3, #32
 801980c:	2a00      	cmp	r2, #0
 801980e:	d1c6      	bne.n	801979e <arm_radix4_butterfly_inverse_q31+0x4ba>
 8019810:	b027      	add	sp, #156	@ 0x9c
 8019812:	bc3c      	pop	{r2, r3, r4, r5}
 8019814:	4690      	mov	r8, r2
 8019816:	4699      	mov	r9, r3
 8019818:	46a2      	mov	sl, r4
 801981a:	46ab      	mov	fp, r5
 801981c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801981e:	469a      	mov	sl, r3
 8019820:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8019822:	e7bc      	b.n	801979e <arm_radix4_butterfly_inverse_q31+0x4ba>

08019824 <arm_cmplx_mag_squared_q31>:
 8019824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019826:	464f      	mov	r7, r9
 8019828:	4646      	mov	r6, r8
 801982a:	0004      	movs	r4, r0
 801982c:	b4c0      	push	{r6, r7}
 801982e:	0016      	movs	r6, r2
 8019830:	000f      	movs	r7, r1
 8019832:	2a00      	cmp	r2, #0
 8019834:	d018      	beq.n	8019868 <arm_cmplx_mag_squared_q31+0x44>
 8019836:	6823      	ldr	r3, [r4, #0]
 8019838:	6822      	ldr	r2, [r4, #0]
 801983a:	17d9      	asrs	r1, r3, #31
 801983c:	6863      	ldr	r3, [r4, #4]
 801983e:	0010      	movs	r0, r2
 8019840:	4698      	mov	r8, r3
 8019842:	17db      	asrs	r3, r3, #31
 8019844:	4699      	mov	r9, r3
 8019846:	000b      	movs	r3, r1
 8019848:	f7e6 feb0 	bl	80005ac <__aeabi_lmul>
 801984c:	4642      	mov	r2, r8
 801984e:	104d      	asrs	r5, r1, #1
 8019850:	464b      	mov	r3, r9
 8019852:	4640      	mov	r0, r8
 8019854:	4649      	mov	r1, r9
 8019856:	f7e6 fea9 	bl	80005ac <__aeabi_lmul>
 801985a:	1049      	asrs	r1, r1, #1
 801985c:	1869      	adds	r1, r5, r1
 801985e:	3e01      	subs	r6, #1
 8019860:	c702      	stmia	r7!, {r1}
 8019862:	3408      	adds	r4, #8
 8019864:	2e00      	cmp	r6, #0
 8019866:	d1e6      	bne.n	8019836 <arm_cmplx_mag_squared_q31+0x12>
 8019868:	bc0c      	pop	{r2, r3}
 801986a:	4690      	mov	r8, r2
 801986c:	4699      	mov	r9, r3
 801986e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019870 <arm_mult_q31>:
 8019870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019872:	4646      	mov	r6, r8
 8019874:	464f      	mov	r7, r9
 8019876:	4690      	mov	r8, r2
 8019878:	b4c0      	push	{r6, r7}
 801987a:	001d      	movs	r5, r3
 801987c:	0006      	movs	r6, r0
 801987e:	000f      	movs	r7, r1
 8019880:	2400      	movs	r4, #0
 8019882:	2b00      	cmp	r3, #0
 8019884:	d020      	beq.n	80198c8 <arm_mult_q31+0x58>
 8019886:	4b12      	ldr	r3, [pc, #72]	@ (80198d0 <arm_mult_q31+0x60>)
 8019888:	4699      	mov	r9, r3
 801988a:	e007      	b.n	801989c <arm_mult_q31+0x2c>
 801988c:	464b      	mov	r3, r9
 801988e:	4059      	eors	r1, r3
 8019890:	4643      	mov	r3, r8
 8019892:	3d01      	subs	r5, #1
 8019894:	5119      	str	r1, [r3, r4]
 8019896:	3404      	adds	r4, #4
 8019898:	2d00      	cmp	r5, #0
 801989a:	d015      	beq.n	80198c8 <arm_mult_q31+0x58>
 801989c:	5933      	ldr	r3, [r6, r4]
 801989e:	593a      	ldr	r2, [r7, r4]
 80198a0:	17d9      	asrs	r1, r3, #31
 80198a2:	593b      	ldr	r3, [r7, r4]
 80198a4:	5930      	ldr	r0, [r6, r4]
 80198a6:	17db      	asrs	r3, r3, #31
 80198a8:	f7e6 fe80 	bl	80005ac <__aeabi_lmul>
 80198ac:	004b      	lsls	r3, r1, #1
 80198ae:	0fc0      	lsrs	r0, r0, #31
 80198b0:	4318      	orrs	r0, r3
 80198b2:	17c9      	asrs	r1, r1, #31
 80198b4:	17c3      	asrs	r3, r0, #31
 80198b6:	428b      	cmp	r3, r1
 80198b8:	d1e8      	bne.n	801988c <arm_mult_q31+0x1c>
 80198ba:	0001      	movs	r1, r0
 80198bc:	4643      	mov	r3, r8
 80198be:	3d01      	subs	r5, #1
 80198c0:	5119      	str	r1, [r3, r4]
 80198c2:	3404      	adds	r4, #4
 80198c4:	2d00      	cmp	r5, #0
 80198c6:	d1e9      	bne.n	801989c <arm_mult_q31+0x2c>
 80198c8:	bc0c      	pop	{r2, r3}
 80198ca:	4690      	mov	r8, r2
 80198cc:	4699      	mov	r9, r3
 80198ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198d0:	7fffffff 	.word	0x7fffffff

080198d4 <arm_add_q31>:
 80198d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198d6:	465f      	mov	r7, fp
 80198d8:	4656      	mov	r6, sl
 80198da:	464d      	mov	r5, r9
 80198dc:	4644      	mov	r4, r8
 80198de:	b4f0      	push	{r4, r5, r6, r7}
 80198e0:	4693      	mov	fp, r2
 80198e2:	b083      	sub	sp, #12
 80198e4:	4681      	mov	r9, r0
 80198e6:	468a      	mov	sl, r1
 80198e8:	4698      	mov	r8, r3
 80198ea:	2200      	movs	r2, #0
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d020      	beq.n	8019932 <arm_add_q31+0x5e>
 80198f0:	4649      	mov	r1, r9
 80198f2:	4653      	mov	r3, sl
 80198f4:	588e      	ldr	r6, [r1, r2]
 80198f6:	589b      	ldr	r3, [r3, r2]
 80198f8:	17f7      	asrs	r7, r6, #31
 80198fa:	001c      	movs	r4, r3
 80198fc:	0030      	movs	r0, r6
 80198fe:	0039      	movs	r1, r7
 8019900:	17dd      	asrs	r5, r3, #31
 8019902:	46b4      	mov	ip, r6
 8019904:	1900      	adds	r0, r0, r4
 8019906:	4169      	adcs	r1, r5
 8019908:	4463      	add	r3, ip
 801990a:	9000      	str	r0, [sp, #0]
 801990c:	9101      	str	r1, [sp, #4]
 801990e:	17d9      	asrs	r1, r3, #31
 8019910:	468c      	mov	ip, r1
 8019912:	9901      	ldr	r1, [sp, #4]
 8019914:	458c      	cmp	ip, r1
 8019916:	d002      	beq.n	801991e <arm_add_q31+0x4a>
 8019918:	17cb      	asrs	r3, r1, #31
 801991a:	4909      	ldr	r1, [pc, #36]	@ (8019940 <arm_add_q31+0x6c>)
 801991c:	404b      	eors	r3, r1
 801991e:	4659      	mov	r1, fp
 8019920:	508b      	str	r3, [r1, r2]
 8019922:	2301      	movs	r3, #1
 8019924:	425b      	negs	r3, r3
 8019926:	469c      	mov	ip, r3
 8019928:	44e0      	add	r8, ip
 801992a:	4643      	mov	r3, r8
 801992c:	3204      	adds	r2, #4
 801992e:	2b00      	cmp	r3, #0
 8019930:	d1de      	bne.n	80198f0 <arm_add_q31+0x1c>
 8019932:	b003      	add	sp, #12
 8019934:	bc3c      	pop	{r2, r3, r4, r5}
 8019936:	4690      	mov	r8, r2
 8019938:	4699      	mov	r9, r3
 801993a:	46a2      	mov	sl, r4
 801993c:	46ab      	mov	fp, r5
 801993e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019940:	7fffffff 	.word	0x7fffffff

08019944 <atof>:
 8019944:	b510      	push	{r4, lr}
 8019946:	2100      	movs	r1, #0
 8019948:	f000 fe0c 	bl	801a564 <strtod>
 801994c:	bd10      	pop	{r4, pc}
	...

08019950 <sulp>:
 8019950:	b570      	push	{r4, r5, r6, lr}
 8019952:	0016      	movs	r6, r2
 8019954:	000d      	movs	r5, r1
 8019956:	f003 fb5d 	bl	801d014 <__ulp>
 801995a:	2e00      	cmp	r6, #0
 801995c:	d00d      	beq.n	801997a <sulp+0x2a>
 801995e:	236b      	movs	r3, #107	@ 0x6b
 8019960:	006a      	lsls	r2, r5, #1
 8019962:	0d52      	lsrs	r2, r2, #21
 8019964:	1a9b      	subs	r3, r3, r2
 8019966:	2b00      	cmp	r3, #0
 8019968:	dd07      	ble.n	801997a <sulp+0x2a>
 801996a:	2400      	movs	r4, #0
 801996c:	4a03      	ldr	r2, [pc, #12]	@ (801997c <sulp+0x2c>)
 801996e:	051b      	lsls	r3, r3, #20
 8019970:	189d      	adds	r5, r3, r2
 8019972:	002b      	movs	r3, r5
 8019974:	0022      	movs	r2, r4
 8019976:	f7e8 fe57 	bl	8002628 <__aeabi_dmul>
 801997a:	bd70      	pop	{r4, r5, r6, pc}
 801997c:	3ff00000 	.word	0x3ff00000

08019980 <_strtod_l>:
 8019980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019982:	b0a3      	sub	sp, #140	@ 0x8c
 8019984:	921b      	str	r2, [sp, #108]	@ 0x6c
 8019986:	2200      	movs	r2, #0
 8019988:	2600      	movs	r6, #0
 801998a:	2700      	movs	r7, #0
 801998c:	9005      	str	r0, [sp, #20]
 801998e:	9109      	str	r1, [sp, #36]	@ 0x24
 8019990:	921e      	str	r2, [sp, #120]	@ 0x78
 8019992:	911d      	str	r1, [sp, #116]	@ 0x74
 8019994:	780a      	ldrb	r2, [r1, #0]
 8019996:	2a2b      	cmp	r2, #43	@ 0x2b
 8019998:	d053      	beq.n	8019a42 <_strtod_l+0xc2>
 801999a:	d83f      	bhi.n	8019a1c <_strtod_l+0x9c>
 801999c:	2a0d      	cmp	r2, #13
 801999e:	d839      	bhi.n	8019a14 <_strtod_l+0x94>
 80199a0:	2a08      	cmp	r2, #8
 80199a2:	d839      	bhi.n	8019a18 <_strtod_l+0x98>
 80199a4:	2a00      	cmp	r2, #0
 80199a6:	d042      	beq.n	8019a2e <_strtod_l+0xae>
 80199a8:	2200      	movs	r2, #0
 80199aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80199ac:	2100      	movs	r1, #0
 80199ae:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80199b0:	910c      	str	r1, [sp, #48]	@ 0x30
 80199b2:	782a      	ldrb	r2, [r5, #0]
 80199b4:	2a30      	cmp	r2, #48	@ 0x30
 80199b6:	d000      	beq.n	80199ba <_strtod_l+0x3a>
 80199b8:	e083      	b.n	8019ac2 <_strtod_l+0x142>
 80199ba:	786a      	ldrb	r2, [r5, #1]
 80199bc:	3120      	adds	r1, #32
 80199be:	438a      	bics	r2, r1
 80199c0:	2a58      	cmp	r2, #88	@ 0x58
 80199c2:	d000      	beq.n	80199c6 <_strtod_l+0x46>
 80199c4:	e073      	b.n	8019aae <_strtod_l+0x12e>
 80199c6:	9302      	str	r3, [sp, #8]
 80199c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80199ca:	4a95      	ldr	r2, [pc, #596]	@ (8019c20 <_strtod_l+0x2a0>)
 80199cc:	9301      	str	r3, [sp, #4]
 80199ce:	ab1e      	add	r3, sp, #120	@ 0x78
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	9805      	ldr	r0, [sp, #20]
 80199d4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80199d6:	a91d      	add	r1, sp, #116	@ 0x74
 80199d8:	f002 fbcc 	bl	801c174 <__gethex>
 80199dc:	230f      	movs	r3, #15
 80199de:	0002      	movs	r2, r0
 80199e0:	401a      	ands	r2, r3
 80199e2:	0004      	movs	r4, r0
 80199e4:	9206      	str	r2, [sp, #24]
 80199e6:	4218      	tst	r0, r3
 80199e8:	d005      	beq.n	80199f6 <_strtod_l+0x76>
 80199ea:	2a06      	cmp	r2, #6
 80199ec:	d12b      	bne.n	8019a46 <_strtod_l+0xc6>
 80199ee:	2300      	movs	r3, #0
 80199f0:	3501      	adds	r5, #1
 80199f2:	951d      	str	r5, [sp, #116]	@ 0x74
 80199f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80199f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d002      	beq.n	8019a02 <_strtod_l+0x82>
 80199fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80199fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019a00:	6013      	str	r3, [r2, #0]
 8019a02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d019      	beq.n	8019a3c <_strtod_l+0xbc>
 8019a08:	2380      	movs	r3, #128	@ 0x80
 8019a0a:	0030      	movs	r0, r6
 8019a0c:	061b      	lsls	r3, r3, #24
 8019a0e:	18f9      	adds	r1, r7, r3
 8019a10:	b023      	add	sp, #140	@ 0x8c
 8019a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a14:	2a20      	cmp	r2, #32
 8019a16:	d1c7      	bne.n	80199a8 <_strtod_l+0x28>
 8019a18:	3101      	adds	r1, #1
 8019a1a:	e7ba      	b.n	8019992 <_strtod_l+0x12>
 8019a1c:	2a2d      	cmp	r2, #45	@ 0x2d
 8019a1e:	d1c3      	bne.n	80199a8 <_strtod_l+0x28>
 8019a20:	3a2c      	subs	r2, #44	@ 0x2c
 8019a22:	9212      	str	r2, [sp, #72]	@ 0x48
 8019a24:	1c4a      	adds	r2, r1, #1
 8019a26:	921d      	str	r2, [sp, #116]	@ 0x74
 8019a28:	784a      	ldrb	r2, [r1, #1]
 8019a2a:	2a00      	cmp	r2, #0
 8019a2c:	d1be      	bne.n	80199ac <_strtod_l+0x2c>
 8019a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a30:	931d      	str	r3, [sp, #116]	@ 0x74
 8019a32:	2300      	movs	r3, #0
 8019a34:	9312      	str	r3, [sp, #72]	@ 0x48
 8019a36:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d1df      	bne.n	80199fc <_strtod_l+0x7c>
 8019a3c:	0030      	movs	r0, r6
 8019a3e:	0039      	movs	r1, r7
 8019a40:	e7e6      	b.n	8019a10 <_strtod_l+0x90>
 8019a42:	2200      	movs	r2, #0
 8019a44:	e7ed      	b.n	8019a22 <_strtod_l+0xa2>
 8019a46:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8019a48:	2a00      	cmp	r2, #0
 8019a4a:	d007      	beq.n	8019a5c <_strtod_l+0xdc>
 8019a4c:	2135      	movs	r1, #53	@ 0x35
 8019a4e:	a820      	add	r0, sp, #128	@ 0x80
 8019a50:	f003 fbd6 	bl	801d200 <__copybits>
 8019a54:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019a56:	9805      	ldr	r0, [sp, #20]
 8019a58:	f002 ff90 	bl	801c97c <_Bfree>
 8019a5c:	9806      	ldr	r0, [sp, #24]
 8019a5e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019a60:	3801      	subs	r0, #1
 8019a62:	2804      	cmp	r0, #4
 8019a64:	d806      	bhi.n	8019a74 <_strtod_l+0xf4>
 8019a66:	f7e6 fb7f 	bl	8000168 <__gnu_thumb1_case_uqi>
 8019a6a:	0312      	.short	0x0312
 8019a6c:	1e1c      	.short	0x1e1c
 8019a6e:	12          	.byte	0x12
 8019a6f:	00          	.byte	0x00
 8019a70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019a72:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8019a74:	05e4      	lsls	r4, r4, #23
 8019a76:	d502      	bpl.n	8019a7e <_strtod_l+0xfe>
 8019a78:	2380      	movs	r3, #128	@ 0x80
 8019a7a:	061b      	lsls	r3, r3, #24
 8019a7c:	431f      	orrs	r7, r3
 8019a7e:	4b69      	ldr	r3, [pc, #420]	@ (8019c24 <_strtod_l+0x2a4>)
 8019a80:	423b      	tst	r3, r7
 8019a82:	d1b8      	bne.n	80199f6 <_strtod_l+0x76>
 8019a84:	f001 fbfa 	bl	801b27c <__errno>
 8019a88:	2322      	movs	r3, #34	@ 0x22
 8019a8a:	6003      	str	r3, [r0, #0]
 8019a8c:	e7b3      	b.n	80199f6 <_strtod_l+0x76>
 8019a8e:	4966      	ldr	r1, [pc, #408]	@ (8019c28 <_strtod_l+0x2a8>)
 8019a90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019a92:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019a94:	400a      	ands	r2, r1
 8019a96:	4965      	ldr	r1, [pc, #404]	@ (8019c2c <_strtod_l+0x2ac>)
 8019a98:	185b      	adds	r3, r3, r1
 8019a9a:	051b      	lsls	r3, r3, #20
 8019a9c:	431a      	orrs	r2, r3
 8019a9e:	0017      	movs	r7, r2
 8019aa0:	e7e8      	b.n	8019a74 <_strtod_l+0xf4>
 8019aa2:	4f60      	ldr	r7, [pc, #384]	@ (8019c24 <_strtod_l+0x2a4>)
 8019aa4:	e7e6      	b.n	8019a74 <_strtod_l+0xf4>
 8019aa6:	2601      	movs	r6, #1
 8019aa8:	4f61      	ldr	r7, [pc, #388]	@ (8019c30 <_strtod_l+0x2b0>)
 8019aaa:	4276      	negs	r6, r6
 8019aac:	e7e2      	b.n	8019a74 <_strtod_l+0xf4>
 8019aae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019ab0:	1c5a      	adds	r2, r3, #1
 8019ab2:	921d      	str	r2, [sp, #116]	@ 0x74
 8019ab4:	785b      	ldrb	r3, [r3, #1]
 8019ab6:	2b30      	cmp	r3, #48	@ 0x30
 8019ab8:	d0f9      	beq.n	8019aae <_strtod_l+0x12e>
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d09b      	beq.n	80199f6 <_strtod_l+0x76>
 8019abe:	2301      	movs	r3, #1
 8019ac0:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ac2:	2500      	movs	r5, #0
 8019ac4:	220a      	movs	r2, #10
 8019ac6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019ac8:	950d      	str	r5, [sp, #52]	@ 0x34
 8019aca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019acc:	9508      	str	r5, [sp, #32]
 8019ace:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8019ad0:	7804      	ldrb	r4, [r0, #0]
 8019ad2:	0023      	movs	r3, r4
 8019ad4:	3b30      	subs	r3, #48	@ 0x30
 8019ad6:	b2d9      	uxtb	r1, r3
 8019ad8:	2909      	cmp	r1, #9
 8019ada:	d927      	bls.n	8019b2c <_strtod_l+0x1ac>
 8019adc:	2201      	movs	r2, #1
 8019ade:	4955      	ldr	r1, [pc, #340]	@ (8019c34 <_strtod_l+0x2b4>)
 8019ae0:	f001 fb3e 	bl	801b160 <strncmp>
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	d031      	beq.n	8019b4c <_strtod_l+0x1cc>
 8019ae8:	2000      	movs	r0, #0
 8019aea:	0023      	movs	r3, r4
 8019aec:	4684      	mov	ip, r0
 8019aee:	9a08      	ldr	r2, [sp, #32]
 8019af0:	900e      	str	r0, [sp, #56]	@ 0x38
 8019af2:	9206      	str	r2, [sp, #24]
 8019af4:	2220      	movs	r2, #32
 8019af6:	0019      	movs	r1, r3
 8019af8:	4391      	bics	r1, r2
 8019afa:	000a      	movs	r2, r1
 8019afc:	2100      	movs	r1, #0
 8019afe:	9107      	str	r1, [sp, #28]
 8019b00:	2a45      	cmp	r2, #69	@ 0x45
 8019b02:	d000      	beq.n	8019b06 <_strtod_l+0x186>
 8019b04:	e0c0      	b.n	8019c88 <_strtod_l+0x308>
 8019b06:	9b06      	ldr	r3, [sp, #24]
 8019b08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019b0a:	4303      	orrs	r3, r0
 8019b0c:	4313      	orrs	r3, r2
 8019b0e:	428b      	cmp	r3, r1
 8019b10:	d08d      	beq.n	8019a2e <_strtod_l+0xae>
 8019b12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b16:	3301      	adds	r3, #1
 8019b18:	931d      	str	r3, [sp, #116]	@ 0x74
 8019b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b1c:	785b      	ldrb	r3, [r3, #1]
 8019b1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8019b20:	d070      	beq.n	8019c04 <_strtod_l+0x284>
 8019b22:	000c      	movs	r4, r1
 8019b24:	2b2d      	cmp	r3, #45	@ 0x2d
 8019b26:	d173      	bne.n	8019c10 <_strtod_l+0x290>
 8019b28:	2401      	movs	r4, #1
 8019b2a:	e06c      	b.n	8019c06 <_strtod_l+0x286>
 8019b2c:	9908      	ldr	r1, [sp, #32]
 8019b2e:	2908      	cmp	r1, #8
 8019b30:	dc09      	bgt.n	8019b46 <_strtod_l+0x1c6>
 8019b32:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019b34:	4351      	muls	r1, r2
 8019b36:	185b      	adds	r3, r3, r1
 8019b38:	930d      	str	r3, [sp, #52]	@ 0x34
 8019b3a:	9b08      	ldr	r3, [sp, #32]
 8019b3c:	3001      	adds	r0, #1
 8019b3e:	3301      	adds	r3, #1
 8019b40:	9308      	str	r3, [sp, #32]
 8019b42:	901d      	str	r0, [sp, #116]	@ 0x74
 8019b44:	e7c3      	b.n	8019ace <_strtod_l+0x14e>
 8019b46:	4355      	muls	r5, r2
 8019b48:	195d      	adds	r5, r3, r5
 8019b4a:	e7f6      	b.n	8019b3a <_strtod_l+0x1ba>
 8019b4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019b4e:	1c5a      	adds	r2, r3, #1
 8019b50:	921d      	str	r2, [sp, #116]	@ 0x74
 8019b52:	9a08      	ldr	r2, [sp, #32]
 8019b54:	785b      	ldrb	r3, [r3, #1]
 8019b56:	2a00      	cmp	r2, #0
 8019b58:	d03a      	beq.n	8019bd0 <_strtod_l+0x250>
 8019b5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8019b5c:	9206      	str	r2, [sp, #24]
 8019b5e:	001a      	movs	r2, r3
 8019b60:	3a30      	subs	r2, #48	@ 0x30
 8019b62:	2a09      	cmp	r2, #9
 8019b64:	d912      	bls.n	8019b8c <_strtod_l+0x20c>
 8019b66:	2201      	movs	r2, #1
 8019b68:	4694      	mov	ip, r2
 8019b6a:	e7c3      	b.n	8019af4 <_strtod_l+0x174>
 8019b6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019b6e:	3001      	adds	r0, #1
 8019b70:	1c5a      	adds	r2, r3, #1
 8019b72:	921d      	str	r2, [sp, #116]	@ 0x74
 8019b74:	785b      	ldrb	r3, [r3, #1]
 8019b76:	2b30      	cmp	r3, #48	@ 0x30
 8019b78:	d0f8      	beq.n	8019b6c <_strtod_l+0x1ec>
 8019b7a:	001a      	movs	r2, r3
 8019b7c:	3a31      	subs	r2, #49	@ 0x31
 8019b7e:	2a08      	cmp	r2, #8
 8019b80:	d83b      	bhi.n	8019bfa <_strtod_l+0x27a>
 8019b82:	900e      	str	r0, [sp, #56]	@ 0x38
 8019b84:	2000      	movs	r0, #0
 8019b86:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019b88:	9006      	str	r0, [sp, #24]
 8019b8a:	9213      	str	r2, [sp, #76]	@ 0x4c
 8019b8c:	001a      	movs	r2, r3
 8019b8e:	1c41      	adds	r1, r0, #1
 8019b90:	3a30      	subs	r2, #48	@ 0x30
 8019b92:	2b30      	cmp	r3, #48	@ 0x30
 8019b94:	d016      	beq.n	8019bc4 <_strtod_l+0x244>
 8019b96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b98:	185b      	adds	r3, r3, r1
 8019b9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8019b9c:	9b06      	ldr	r3, [sp, #24]
 8019b9e:	210a      	movs	r1, #10
 8019ba0:	469c      	mov	ip, r3
 8019ba2:	4484      	add	ip, r0
 8019ba4:	459c      	cmp	ip, r3
 8019ba6:	d115      	bne.n	8019bd4 <_strtod_l+0x254>
 8019ba8:	9906      	ldr	r1, [sp, #24]
 8019baa:	9b06      	ldr	r3, [sp, #24]
 8019bac:	3101      	adds	r1, #1
 8019bae:	1809      	adds	r1, r1, r0
 8019bb0:	181b      	adds	r3, r3, r0
 8019bb2:	9106      	str	r1, [sp, #24]
 8019bb4:	2b08      	cmp	r3, #8
 8019bb6:	dc19      	bgt.n	8019bec <_strtod_l+0x26c>
 8019bb8:	230a      	movs	r3, #10
 8019bba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019bbc:	434b      	muls	r3, r1
 8019bbe:	2100      	movs	r1, #0
 8019bc0:	18d3      	adds	r3, r2, r3
 8019bc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8019bc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019bc6:	0008      	movs	r0, r1
 8019bc8:	1c5a      	adds	r2, r3, #1
 8019bca:	921d      	str	r2, [sp, #116]	@ 0x74
 8019bcc:	785b      	ldrb	r3, [r3, #1]
 8019bce:	e7c6      	b.n	8019b5e <_strtod_l+0x1de>
 8019bd0:	9808      	ldr	r0, [sp, #32]
 8019bd2:	e7d0      	b.n	8019b76 <_strtod_l+0x1f6>
 8019bd4:	1c5c      	adds	r4, r3, #1
 8019bd6:	2b08      	cmp	r3, #8
 8019bd8:	dc04      	bgt.n	8019be4 <_strtod_l+0x264>
 8019bda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019bdc:	434b      	muls	r3, r1
 8019bde:	930d      	str	r3, [sp, #52]	@ 0x34
 8019be0:	0023      	movs	r3, r4
 8019be2:	e7df      	b.n	8019ba4 <_strtod_l+0x224>
 8019be4:	2c10      	cmp	r4, #16
 8019be6:	dcfb      	bgt.n	8019be0 <_strtod_l+0x260>
 8019be8:	434d      	muls	r5, r1
 8019bea:	e7f9      	b.n	8019be0 <_strtod_l+0x260>
 8019bec:	2100      	movs	r1, #0
 8019bee:	2b0f      	cmp	r3, #15
 8019bf0:	dce8      	bgt.n	8019bc4 <_strtod_l+0x244>
 8019bf2:	230a      	movs	r3, #10
 8019bf4:	435d      	muls	r5, r3
 8019bf6:	1955      	adds	r5, r2, r5
 8019bf8:	e7e4      	b.n	8019bc4 <_strtod_l+0x244>
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	920e      	str	r2, [sp, #56]	@ 0x38
 8019bfe:	9206      	str	r2, [sp, #24]
 8019c00:	3201      	adds	r2, #1
 8019c02:	e7b1      	b.n	8019b68 <_strtod_l+0x1e8>
 8019c04:	2400      	movs	r4, #0
 8019c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c08:	3302      	adds	r3, #2
 8019c0a:	931d      	str	r3, [sp, #116]	@ 0x74
 8019c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c0e:	789b      	ldrb	r3, [r3, #2]
 8019c10:	001a      	movs	r2, r3
 8019c12:	3a30      	subs	r2, #48	@ 0x30
 8019c14:	2a09      	cmp	r2, #9
 8019c16:	d913      	bls.n	8019c40 <_strtod_l+0x2c0>
 8019c18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c1a:	921d      	str	r2, [sp, #116]	@ 0x74
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	e032      	b.n	8019c86 <_strtod_l+0x306>
 8019c20:	0801f810 	.word	0x0801f810
 8019c24:	7ff00000 	.word	0x7ff00000
 8019c28:	ffefffff 	.word	0xffefffff
 8019c2c:	00000433 	.word	0x00000433
 8019c30:	7fffffff 	.word	0x7fffffff
 8019c34:	0801f7f8 	.word	0x0801f7f8
 8019c38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c3a:	1c5a      	adds	r2, r3, #1
 8019c3c:	921d      	str	r2, [sp, #116]	@ 0x74
 8019c3e:	785b      	ldrb	r3, [r3, #1]
 8019c40:	2b30      	cmp	r3, #48	@ 0x30
 8019c42:	d0f9      	beq.n	8019c38 <_strtod_l+0x2b8>
 8019c44:	2200      	movs	r2, #0
 8019c46:	9207      	str	r2, [sp, #28]
 8019c48:	001a      	movs	r2, r3
 8019c4a:	3a31      	subs	r2, #49	@ 0x31
 8019c4c:	2a08      	cmp	r2, #8
 8019c4e:	d81b      	bhi.n	8019c88 <_strtod_l+0x308>
 8019c50:	3b30      	subs	r3, #48	@ 0x30
 8019c52:	9310      	str	r3, [sp, #64]	@ 0x40
 8019c54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c56:	9307      	str	r3, [sp, #28]
 8019c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c5a:	1c59      	adds	r1, r3, #1
 8019c5c:	911d      	str	r1, [sp, #116]	@ 0x74
 8019c5e:	785b      	ldrb	r3, [r3, #1]
 8019c60:	001a      	movs	r2, r3
 8019c62:	3a30      	subs	r2, #48	@ 0x30
 8019c64:	2a09      	cmp	r2, #9
 8019c66:	d93a      	bls.n	8019cde <_strtod_l+0x35e>
 8019c68:	9a07      	ldr	r2, [sp, #28]
 8019c6a:	1a8a      	subs	r2, r1, r2
 8019c6c:	49b4      	ldr	r1, [pc, #720]	@ (8019f40 <_strtod_l+0x5c0>)
 8019c6e:	9107      	str	r1, [sp, #28]
 8019c70:	2a08      	cmp	r2, #8
 8019c72:	dc04      	bgt.n	8019c7e <_strtod_l+0x2fe>
 8019c74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019c76:	9207      	str	r2, [sp, #28]
 8019c78:	428a      	cmp	r2, r1
 8019c7a:	dd00      	ble.n	8019c7e <_strtod_l+0x2fe>
 8019c7c:	9107      	str	r1, [sp, #28]
 8019c7e:	2c00      	cmp	r4, #0
 8019c80:	d002      	beq.n	8019c88 <_strtod_l+0x308>
 8019c82:	9a07      	ldr	r2, [sp, #28]
 8019c84:	4252      	negs	r2, r2
 8019c86:	9207      	str	r2, [sp, #28]
 8019c88:	9a06      	ldr	r2, [sp, #24]
 8019c8a:	2a00      	cmp	r2, #0
 8019c8c:	d14d      	bne.n	8019d2a <_strtod_l+0x3aa>
 8019c8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019c90:	4310      	orrs	r0, r2
 8019c92:	d000      	beq.n	8019c96 <_strtod_l+0x316>
 8019c94:	e6af      	b.n	80199f6 <_strtod_l+0x76>
 8019c96:	4662      	mov	r2, ip
 8019c98:	2a00      	cmp	r2, #0
 8019c9a:	d000      	beq.n	8019c9e <_strtod_l+0x31e>
 8019c9c:	e6c7      	b.n	8019a2e <_strtod_l+0xae>
 8019c9e:	2b69      	cmp	r3, #105	@ 0x69
 8019ca0:	d027      	beq.n	8019cf2 <_strtod_l+0x372>
 8019ca2:	dc23      	bgt.n	8019cec <_strtod_l+0x36c>
 8019ca4:	2b49      	cmp	r3, #73	@ 0x49
 8019ca6:	d024      	beq.n	8019cf2 <_strtod_l+0x372>
 8019ca8:	2b4e      	cmp	r3, #78	@ 0x4e
 8019caa:	d000      	beq.n	8019cae <_strtod_l+0x32e>
 8019cac:	e6bf      	b.n	8019a2e <_strtod_l+0xae>
 8019cae:	49a5      	ldr	r1, [pc, #660]	@ (8019f44 <_strtod_l+0x5c4>)
 8019cb0:	a81d      	add	r0, sp, #116	@ 0x74
 8019cb2:	f002 fc95 	bl	801c5e0 <__match>
 8019cb6:	2800      	cmp	r0, #0
 8019cb8:	d100      	bne.n	8019cbc <_strtod_l+0x33c>
 8019cba:	e6b8      	b.n	8019a2e <_strtod_l+0xae>
 8019cbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019cbe:	781b      	ldrb	r3, [r3, #0]
 8019cc0:	2b28      	cmp	r3, #40	@ 0x28
 8019cc2:	d12c      	bne.n	8019d1e <_strtod_l+0x39e>
 8019cc4:	49a0      	ldr	r1, [pc, #640]	@ (8019f48 <_strtod_l+0x5c8>)
 8019cc6:	aa20      	add	r2, sp, #128	@ 0x80
 8019cc8:	a81d      	add	r0, sp, #116	@ 0x74
 8019cca:	f002 fc9d 	bl	801c608 <__hexnan>
 8019cce:	2805      	cmp	r0, #5
 8019cd0:	d125      	bne.n	8019d1e <_strtod_l+0x39e>
 8019cd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019cd4:	4a9d      	ldr	r2, [pc, #628]	@ (8019f4c <_strtod_l+0x5cc>)
 8019cd6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019cd8:	431a      	orrs	r2, r3
 8019cda:	0017      	movs	r7, r2
 8019cdc:	e68b      	b.n	80199f6 <_strtod_l+0x76>
 8019cde:	220a      	movs	r2, #10
 8019ce0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019ce2:	434a      	muls	r2, r1
 8019ce4:	18d2      	adds	r2, r2, r3
 8019ce6:	3a30      	subs	r2, #48	@ 0x30
 8019ce8:	9210      	str	r2, [sp, #64]	@ 0x40
 8019cea:	e7b5      	b.n	8019c58 <_strtod_l+0x2d8>
 8019cec:	2b6e      	cmp	r3, #110	@ 0x6e
 8019cee:	d0de      	beq.n	8019cae <_strtod_l+0x32e>
 8019cf0:	e69d      	b.n	8019a2e <_strtod_l+0xae>
 8019cf2:	4997      	ldr	r1, [pc, #604]	@ (8019f50 <_strtod_l+0x5d0>)
 8019cf4:	a81d      	add	r0, sp, #116	@ 0x74
 8019cf6:	f002 fc73 	bl	801c5e0 <__match>
 8019cfa:	2800      	cmp	r0, #0
 8019cfc:	d100      	bne.n	8019d00 <_strtod_l+0x380>
 8019cfe:	e696      	b.n	8019a2e <_strtod_l+0xae>
 8019d00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019d02:	4994      	ldr	r1, [pc, #592]	@ (8019f54 <_strtod_l+0x5d4>)
 8019d04:	3b01      	subs	r3, #1
 8019d06:	a81d      	add	r0, sp, #116	@ 0x74
 8019d08:	931d      	str	r3, [sp, #116]	@ 0x74
 8019d0a:	f002 fc69 	bl	801c5e0 <__match>
 8019d0e:	2800      	cmp	r0, #0
 8019d10:	d102      	bne.n	8019d18 <_strtod_l+0x398>
 8019d12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019d14:	3301      	adds	r3, #1
 8019d16:	931d      	str	r3, [sp, #116]	@ 0x74
 8019d18:	2600      	movs	r6, #0
 8019d1a:	4f8c      	ldr	r7, [pc, #560]	@ (8019f4c <_strtod_l+0x5cc>)
 8019d1c:	e66b      	b.n	80199f6 <_strtod_l+0x76>
 8019d1e:	488e      	ldr	r0, [pc, #568]	@ (8019f58 <_strtod_l+0x5d8>)
 8019d20:	f001 faee 	bl	801b300 <nan>
 8019d24:	0006      	movs	r6, r0
 8019d26:	000f      	movs	r7, r1
 8019d28:	e665      	b.n	80199f6 <_strtod_l+0x76>
 8019d2a:	9b07      	ldr	r3, [sp, #28]
 8019d2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019d2e:	1a9b      	subs	r3, r3, r2
 8019d30:	930c      	str	r3, [sp, #48]	@ 0x30
 8019d32:	9b08      	ldr	r3, [sp, #32]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d101      	bne.n	8019d3c <_strtod_l+0x3bc>
 8019d38:	9b06      	ldr	r3, [sp, #24]
 8019d3a:	9308      	str	r3, [sp, #32]
 8019d3c:	9c06      	ldr	r4, [sp, #24]
 8019d3e:	2c10      	cmp	r4, #16
 8019d40:	dd00      	ble.n	8019d44 <_strtod_l+0x3c4>
 8019d42:	2410      	movs	r4, #16
 8019d44:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019d46:	f7e9 fb5f 	bl	8003408 <__aeabi_ui2d>
 8019d4a:	9b06      	ldr	r3, [sp, #24]
 8019d4c:	0006      	movs	r6, r0
 8019d4e:	000f      	movs	r7, r1
 8019d50:	2b09      	cmp	r3, #9
 8019d52:	dc13      	bgt.n	8019d7c <_strtod_l+0x3fc>
 8019d54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d100      	bne.n	8019d5c <_strtod_l+0x3dc>
 8019d5a:	e64c      	b.n	80199f6 <_strtod_l+0x76>
 8019d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	dc00      	bgt.n	8019d64 <_strtod_l+0x3e4>
 8019d62:	e07e      	b.n	8019e62 <_strtod_l+0x4e2>
 8019d64:	2b16      	cmp	r3, #22
 8019d66:	dc63      	bgt.n	8019e30 <_strtod_l+0x4b0>
 8019d68:	497c      	ldr	r1, [pc, #496]	@ (8019f5c <_strtod_l+0x5dc>)
 8019d6a:	00db      	lsls	r3, r3, #3
 8019d6c:	18c9      	adds	r1, r1, r3
 8019d6e:	0032      	movs	r2, r6
 8019d70:	6808      	ldr	r0, [r1, #0]
 8019d72:	6849      	ldr	r1, [r1, #4]
 8019d74:	003b      	movs	r3, r7
 8019d76:	f7e8 fc57 	bl	8002628 <__aeabi_dmul>
 8019d7a:	e7d3      	b.n	8019d24 <_strtod_l+0x3a4>
 8019d7c:	0022      	movs	r2, r4
 8019d7e:	4b77      	ldr	r3, [pc, #476]	@ (8019f5c <_strtod_l+0x5dc>)
 8019d80:	3a09      	subs	r2, #9
 8019d82:	00d2      	lsls	r2, r2, #3
 8019d84:	189b      	adds	r3, r3, r2
 8019d86:	681a      	ldr	r2, [r3, #0]
 8019d88:	685b      	ldr	r3, [r3, #4]
 8019d8a:	f7e8 fc4d 	bl	8002628 <__aeabi_dmul>
 8019d8e:	0006      	movs	r6, r0
 8019d90:	0028      	movs	r0, r5
 8019d92:	000f      	movs	r7, r1
 8019d94:	f7e9 fb38 	bl	8003408 <__aeabi_ui2d>
 8019d98:	000b      	movs	r3, r1
 8019d9a:	0002      	movs	r2, r0
 8019d9c:	0039      	movs	r1, r7
 8019d9e:	0030      	movs	r0, r6
 8019da0:	f7e7 fc9a 	bl	80016d8 <__aeabi_dadd>
 8019da4:	9b06      	ldr	r3, [sp, #24]
 8019da6:	0006      	movs	r6, r0
 8019da8:	000f      	movs	r7, r1
 8019daa:	2b0f      	cmp	r3, #15
 8019dac:	ddd2      	ble.n	8019d54 <_strtod_l+0x3d4>
 8019dae:	9b06      	ldr	r3, [sp, #24]
 8019db0:	1b1c      	subs	r4, r3, r4
 8019db2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019db4:	18e4      	adds	r4, r4, r3
 8019db6:	2c00      	cmp	r4, #0
 8019db8:	dc00      	bgt.n	8019dbc <_strtod_l+0x43c>
 8019dba:	e09b      	b.n	8019ef4 <_strtod_l+0x574>
 8019dbc:	220f      	movs	r2, #15
 8019dbe:	0023      	movs	r3, r4
 8019dc0:	4013      	ands	r3, r2
 8019dc2:	4214      	tst	r4, r2
 8019dc4:	d00a      	beq.n	8019ddc <_strtod_l+0x45c>
 8019dc6:	4965      	ldr	r1, [pc, #404]	@ (8019f5c <_strtod_l+0x5dc>)
 8019dc8:	00db      	lsls	r3, r3, #3
 8019dca:	18c9      	adds	r1, r1, r3
 8019dcc:	0032      	movs	r2, r6
 8019dce:	6808      	ldr	r0, [r1, #0]
 8019dd0:	6849      	ldr	r1, [r1, #4]
 8019dd2:	003b      	movs	r3, r7
 8019dd4:	f7e8 fc28 	bl	8002628 <__aeabi_dmul>
 8019dd8:	0006      	movs	r6, r0
 8019dda:	000f      	movs	r7, r1
 8019ddc:	230f      	movs	r3, #15
 8019dde:	439c      	bics	r4, r3
 8019de0:	d073      	beq.n	8019eca <_strtod_l+0x54a>
 8019de2:	3326      	adds	r3, #38	@ 0x26
 8019de4:	33ff      	adds	r3, #255	@ 0xff
 8019de6:	429c      	cmp	r4, r3
 8019de8:	dd4b      	ble.n	8019e82 <_strtod_l+0x502>
 8019dea:	2300      	movs	r3, #0
 8019dec:	9306      	str	r3, [sp, #24]
 8019dee:	9307      	str	r3, [sp, #28]
 8019df0:	930d      	str	r3, [sp, #52]	@ 0x34
 8019df2:	9308      	str	r3, [sp, #32]
 8019df4:	2322      	movs	r3, #34	@ 0x22
 8019df6:	2600      	movs	r6, #0
 8019df8:	9a05      	ldr	r2, [sp, #20]
 8019dfa:	4f54      	ldr	r7, [pc, #336]	@ (8019f4c <_strtod_l+0x5cc>)
 8019dfc:	6013      	str	r3, [r2, #0]
 8019dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019e00:	42b3      	cmp	r3, r6
 8019e02:	d100      	bne.n	8019e06 <_strtod_l+0x486>
 8019e04:	e5f7      	b.n	80199f6 <_strtod_l+0x76>
 8019e06:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019e08:	9805      	ldr	r0, [sp, #20]
 8019e0a:	f002 fdb7 	bl	801c97c <_Bfree>
 8019e0e:	9908      	ldr	r1, [sp, #32]
 8019e10:	9805      	ldr	r0, [sp, #20]
 8019e12:	f002 fdb3 	bl	801c97c <_Bfree>
 8019e16:	9907      	ldr	r1, [sp, #28]
 8019e18:	9805      	ldr	r0, [sp, #20]
 8019e1a:	f002 fdaf 	bl	801c97c <_Bfree>
 8019e1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019e20:	9805      	ldr	r0, [sp, #20]
 8019e22:	f002 fdab 	bl	801c97c <_Bfree>
 8019e26:	9906      	ldr	r1, [sp, #24]
 8019e28:	9805      	ldr	r0, [sp, #20]
 8019e2a:	f002 fda7 	bl	801c97c <_Bfree>
 8019e2e:	e5e2      	b.n	80199f6 <_strtod_l+0x76>
 8019e30:	2325      	movs	r3, #37	@ 0x25
 8019e32:	9a06      	ldr	r2, [sp, #24]
 8019e34:	1a9b      	subs	r3, r3, r2
 8019e36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019e38:	4293      	cmp	r3, r2
 8019e3a:	dbb8      	blt.n	8019dae <_strtod_l+0x42e>
 8019e3c:	240f      	movs	r4, #15
 8019e3e:	9b06      	ldr	r3, [sp, #24]
 8019e40:	4d46      	ldr	r5, [pc, #280]	@ (8019f5c <_strtod_l+0x5dc>)
 8019e42:	1ae4      	subs	r4, r4, r3
 8019e44:	00e1      	lsls	r1, r4, #3
 8019e46:	1869      	adds	r1, r5, r1
 8019e48:	0032      	movs	r2, r6
 8019e4a:	6808      	ldr	r0, [r1, #0]
 8019e4c:	6849      	ldr	r1, [r1, #4]
 8019e4e:	003b      	movs	r3, r7
 8019e50:	f7e8 fbea 	bl	8002628 <__aeabi_dmul>
 8019e54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e56:	1b1c      	subs	r4, r3, r4
 8019e58:	00e4      	lsls	r4, r4, #3
 8019e5a:	192d      	adds	r5, r5, r4
 8019e5c:	682a      	ldr	r2, [r5, #0]
 8019e5e:	686b      	ldr	r3, [r5, #4]
 8019e60:	e789      	b.n	8019d76 <_strtod_l+0x3f6>
 8019e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e64:	3316      	adds	r3, #22
 8019e66:	dba2      	blt.n	8019dae <_strtod_l+0x42e>
 8019e68:	9907      	ldr	r1, [sp, #28]
 8019e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8019f5c <_strtod_l+0x5dc>)
 8019e6e:	1a52      	subs	r2, r2, r1
 8019e70:	00d2      	lsls	r2, r2, #3
 8019e72:	189b      	adds	r3, r3, r2
 8019e74:	0030      	movs	r0, r6
 8019e76:	681a      	ldr	r2, [r3, #0]
 8019e78:	685b      	ldr	r3, [r3, #4]
 8019e7a:	0039      	movs	r1, r7
 8019e7c:	f7e7 ff90 	bl	8001da0 <__aeabi_ddiv>
 8019e80:	e750      	b.n	8019d24 <_strtod_l+0x3a4>
 8019e82:	2300      	movs	r3, #0
 8019e84:	0030      	movs	r0, r6
 8019e86:	0039      	movs	r1, r7
 8019e88:	4d35      	ldr	r5, [pc, #212]	@ (8019f60 <_strtod_l+0x5e0>)
 8019e8a:	1124      	asrs	r4, r4, #4
 8019e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e8e:	2c01      	cmp	r4, #1
 8019e90:	dc1e      	bgt.n	8019ed0 <_strtod_l+0x550>
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d001      	beq.n	8019e9a <_strtod_l+0x51a>
 8019e96:	0006      	movs	r6, r0
 8019e98:	000f      	movs	r7, r1
 8019e9a:	4b32      	ldr	r3, [pc, #200]	@ (8019f64 <_strtod_l+0x5e4>)
 8019e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e9e:	18ff      	adds	r7, r7, r3
 8019ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8019f60 <_strtod_l+0x5e0>)
 8019ea2:	00d5      	lsls	r5, r2, #3
 8019ea4:	195d      	adds	r5, r3, r5
 8019ea6:	0032      	movs	r2, r6
 8019ea8:	6828      	ldr	r0, [r5, #0]
 8019eaa:	6869      	ldr	r1, [r5, #4]
 8019eac:	003b      	movs	r3, r7
 8019eae:	f7e8 fbbb 	bl	8002628 <__aeabi_dmul>
 8019eb2:	4b26      	ldr	r3, [pc, #152]	@ (8019f4c <_strtod_l+0x5cc>)
 8019eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8019f68 <_strtod_l+0x5e8>)
 8019eb6:	0006      	movs	r6, r0
 8019eb8:	400b      	ands	r3, r1
 8019eba:	4293      	cmp	r3, r2
 8019ebc:	d895      	bhi.n	8019dea <_strtod_l+0x46a>
 8019ebe:	4a2b      	ldr	r2, [pc, #172]	@ (8019f6c <_strtod_l+0x5ec>)
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	d913      	bls.n	8019eec <_strtod_l+0x56c>
 8019ec4:	2601      	movs	r6, #1
 8019ec6:	4f2a      	ldr	r7, [pc, #168]	@ (8019f70 <_strtod_l+0x5f0>)
 8019ec8:	4276      	negs	r6, r6
 8019eca:	2300      	movs	r3, #0
 8019ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ece:	e086      	b.n	8019fde <_strtod_l+0x65e>
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	4214      	tst	r4, r2
 8019ed4:	d004      	beq.n	8019ee0 <_strtod_l+0x560>
 8019ed6:	682a      	ldr	r2, [r5, #0]
 8019ed8:	686b      	ldr	r3, [r5, #4]
 8019eda:	f7e8 fba5 	bl	8002628 <__aeabi_dmul>
 8019ede:	2301      	movs	r3, #1
 8019ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ee2:	1064      	asrs	r4, r4, #1
 8019ee4:	3201      	adds	r2, #1
 8019ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8019ee8:	3508      	adds	r5, #8
 8019eea:	e7d0      	b.n	8019e8e <_strtod_l+0x50e>
 8019eec:	23d4      	movs	r3, #212	@ 0xd4
 8019eee:	049b      	lsls	r3, r3, #18
 8019ef0:	18cf      	adds	r7, r1, r3
 8019ef2:	e7ea      	b.n	8019eca <_strtod_l+0x54a>
 8019ef4:	2c00      	cmp	r4, #0
 8019ef6:	d0e8      	beq.n	8019eca <_strtod_l+0x54a>
 8019ef8:	4264      	negs	r4, r4
 8019efa:	230f      	movs	r3, #15
 8019efc:	0022      	movs	r2, r4
 8019efe:	401a      	ands	r2, r3
 8019f00:	421c      	tst	r4, r3
 8019f02:	d00a      	beq.n	8019f1a <_strtod_l+0x59a>
 8019f04:	4b15      	ldr	r3, [pc, #84]	@ (8019f5c <_strtod_l+0x5dc>)
 8019f06:	00d2      	lsls	r2, r2, #3
 8019f08:	189b      	adds	r3, r3, r2
 8019f0a:	0030      	movs	r0, r6
 8019f0c:	681a      	ldr	r2, [r3, #0]
 8019f0e:	685b      	ldr	r3, [r3, #4]
 8019f10:	0039      	movs	r1, r7
 8019f12:	f7e7 ff45 	bl	8001da0 <__aeabi_ddiv>
 8019f16:	0006      	movs	r6, r0
 8019f18:	000f      	movs	r7, r1
 8019f1a:	1124      	asrs	r4, r4, #4
 8019f1c:	d0d5      	beq.n	8019eca <_strtod_l+0x54a>
 8019f1e:	2c1f      	cmp	r4, #31
 8019f20:	dd28      	ble.n	8019f74 <_strtod_l+0x5f4>
 8019f22:	2300      	movs	r3, #0
 8019f24:	9306      	str	r3, [sp, #24]
 8019f26:	9307      	str	r3, [sp, #28]
 8019f28:	930d      	str	r3, [sp, #52]	@ 0x34
 8019f2a:	9308      	str	r3, [sp, #32]
 8019f2c:	2322      	movs	r3, #34	@ 0x22
 8019f2e:	9a05      	ldr	r2, [sp, #20]
 8019f30:	2600      	movs	r6, #0
 8019f32:	6013      	str	r3, [r2, #0]
 8019f34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f36:	2700      	movs	r7, #0
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d000      	beq.n	8019f3e <_strtod_l+0x5be>
 8019f3c:	e763      	b.n	8019e06 <_strtod_l+0x486>
 8019f3e:	e55a      	b.n	80199f6 <_strtod_l+0x76>
 8019f40:	00004e1f 	.word	0x00004e1f
 8019f44:	0801f85d 	.word	0x0801f85d
 8019f48:	0801f7fc 	.word	0x0801f7fc
 8019f4c:	7ff00000 	.word	0x7ff00000
 8019f50:	0801f855 	.word	0x0801f855
 8019f54:	0801f88f 	.word	0x0801f88f
 8019f58:	0801fc1d 	.word	0x0801fc1d
 8019f5c:	0801fa08 	.word	0x0801fa08
 8019f60:	0801f9e0 	.word	0x0801f9e0
 8019f64:	fcb00000 	.word	0xfcb00000
 8019f68:	7ca00000 	.word	0x7ca00000
 8019f6c:	7c900000 	.word	0x7c900000
 8019f70:	7fefffff 	.word	0x7fefffff
 8019f74:	2310      	movs	r3, #16
 8019f76:	0022      	movs	r2, r4
 8019f78:	401a      	ands	r2, r3
 8019f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8019f7c:	421c      	tst	r4, r3
 8019f7e:	d001      	beq.n	8019f84 <_strtod_l+0x604>
 8019f80:	335a      	adds	r3, #90	@ 0x5a
 8019f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f84:	0030      	movs	r0, r6
 8019f86:	0039      	movs	r1, r7
 8019f88:	2300      	movs	r3, #0
 8019f8a:	4dbf      	ldr	r5, [pc, #764]	@ (801a288 <_strtod_l+0x908>)
 8019f8c:	2201      	movs	r2, #1
 8019f8e:	4214      	tst	r4, r2
 8019f90:	d004      	beq.n	8019f9c <_strtod_l+0x61c>
 8019f92:	682a      	ldr	r2, [r5, #0]
 8019f94:	686b      	ldr	r3, [r5, #4]
 8019f96:	f7e8 fb47 	bl	8002628 <__aeabi_dmul>
 8019f9a:	2301      	movs	r3, #1
 8019f9c:	1064      	asrs	r4, r4, #1
 8019f9e:	3508      	adds	r5, #8
 8019fa0:	2c00      	cmp	r4, #0
 8019fa2:	d1f3      	bne.n	8019f8c <_strtod_l+0x60c>
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d001      	beq.n	8019fac <_strtod_l+0x62c>
 8019fa8:	0006      	movs	r6, r0
 8019faa:	000f      	movs	r7, r1
 8019fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d00d      	beq.n	8019fce <_strtod_l+0x64e>
 8019fb2:	236b      	movs	r3, #107	@ 0x6b
 8019fb4:	007a      	lsls	r2, r7, #1
 8019fb6:	0d52      	lsrs	r2, r2, #21
 8019fb8:	0039      	movs	r1, r7
 8019fba:	1a9b      	subs	r3, r3, r2
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	dd06      	ble.n	8019fce <_strtod_l+0x64e>
 8019fc0:	2b1f      	cmp	r3, #31
 8019fc2:	dd5a      	ble.n	801a07a <_strtod_l+0x6fa>
 8019fc4:	2600      	movs	r6, #0
 8019fc6:	2b34      	cmp	r3, #52	@ 0x34
 8019fc8:	dd50      	ble.n	801a06c <_strtod_l+0x6ec>
 8019fca:	27dc      	movs	r7, #220	@ 0xdc
 8019fcc:	04bf      	lsls	r7, r7, #18
 8019fce:	2200      	movs	r2, #0
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	0030      	movs	r0, r6
 8019fd4:	0039      	movs	r1, r7
 8019fd6:	f7e6 fa61 	bl	800049c <__aeabi_dcmpeq>
 8019fda:	2800      	cmp	r0, #0
 8019fdc:	d1a1      	bne.n	8019f22 <_strtod_l+0x5a2>
 8019fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019fe0:	9a08      	ldr	r2, [sp, #32]
 8019fe2:	9300      	str	r3, [sp, #0]
 8019fe4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019fe6:	9b06      	ldr	r3, [sp, #24]
 8019fe8:	9805      	ldr	r0, [sp, #20]
 8019fea:	f002 fd2f 	bl	801ca4c <__s2b>
 8019fee:	900d      	str	r0, [sp, #52]	@ 0x34
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	d100      	bne.n	8019ff6 <_strtod_l+0x676>
 8019ff4:	e6f9      	b.n	8019dea <_strtod_l+0x46a>
 8019ff6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ff8:	9907      	ldr	r1, [sp, #28]
 8019ffa:	17da      	asrs	r2, r3, #31
 8019ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ffe:	1a5b      	subs	r3, r3, r1
 801a000:	401a      	ands	r2, r3
 801a002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a004:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a006:	43db      	mvns	r3, r3
 801a008:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a00a:	17db      	asrs	r3, r3, #31
 801a00c:	401a      	ands	r2, r3
 801a00e:	2300      	movs	r3, #0
 801a010:	921a      	str	r2, [sp, #104]	@ 0x68
 801a012:	9306      	str	r3, [sp, #24]
 801a014:	9307      	str	r3, [sp, #28]
 801a016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a018:	9805      	ldr	r0, [sp, #20]
 801a01a:	6859      	ldr	r1, [r3, #4]
 801a01c:	f002 fc6a 	bl	801c8f4 <_Balloc>
 801a020:	9008      	str	r0, [sp, #32]
 801a022:	2800      	cmp	r0, #0
 801a024:	d100      	bne.n	801a028 <_strtod_l+0x6a8>
 801a026:	e6e5      	b.n	8019df4 <_strtod_l+0x474>
 801a028:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a02a:	300c      	adds	r0, #12
 801a02c:	0019      	movs	r1, r3
 801a02e:	691a      	ldr	r2, [r3, #16]
 801a030:	310c      	adds	r1, #12
 801a032:	3202      	adds	r2, #2
 801a034:	0092      	lsls	r2, r2, #2
 801a036:	f001 f959 	bl	801b2ec <memcpy>
 801a03a:	ab20      	add	r3, sp, #128	@ 0x80
 801a03c:	9301      	str	r3, [sp, #4]
 801a03e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a040:	9300      	str	r3, [sp, #0]
 801a042:	0032      	movs	r2, r6
 801a044:	003b      	movs	r3, r7
 801a046:	9805      	ldr	r0, [sp, #20]
 801a048:	9610      	str	r6, [sp, #64]	@ 0x40
 801a04a:	9711      	str	r7, [sp, #68]	@ 0x44
 801a04c:	f003 f84e 	bl	801d0ec <__d2b>
 801a050:	901e      	str	r0, [sp, #120]	@ 0x78
 801a052:	2800      	cmp	r0, #0
 801a054:	d100      	bne.n	801a058 <_strtod_l+0x6d8>
 801a056:	e6cd      	b.n	8019df4 <_strtod_l+0x474>
 801a058:	2101      	movs	r1, #1
 801a05a:	9805      	ldr	r0, [sp, #20]
 801a05c:	f002 fd92 	bl	801cb84 <__i2b>
 801a060:	9007      	str	r0, [sp, #28]
 801a062:	2800      	cmp	r0, #0
 801a064:	d10e      	bne.n	801a084 <_strtod_l+0x704>
 801a066:	2300      	movs	r3, #0
 801a068:	9307      	str	r3, [sp, #28]
 801a06a:	e6c3      	b.n	8019df4 <_strtod_l+0x474>
 801a06c:	234b      	movs	r3, #75	@ 0x4b
 801a06e:	1a9a      	subs	r2, r3, r2
 801a070:	3b4c      	subs	r3, #76	@ 0x4c
 801a072:	4093      	lsls	r3, r2
 801a074:	4019      	ands	r1, r3
 801a076:	000f      	movs	r7, r1
 801a078:	e7a9      	b.n	8019fce <_strtod_l+0x64e>
 801a07a:	2201      	movs	r2, #1
 801a07c:	4252      	negs	r2, r2
 801a07e:	409a      	lsls	r2, r3
 801a080:	4016      	ands	r6, r2
 801a082:	e7a4      	b.n	8019fce <_strtod_l+0x64e>
 801a084:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a086:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a088:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801a08a:	1ad4      	subs	r4, r2, r3
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	db01      	blt.n	801a094 <_strtod_l+0x714>
 801a090:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801a092:	195d      	adds	r5, r3, r5
 801a094:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a096:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a098:	1a5b      	subs	r3, r3, r1
 801a09a:	2136      	movs	r1, #54	@ 0x36
 801a09c:	189b      	adds	r3, r3, r2
 801a09e:	1a8a      	subs	r2, r1, r2
 801a0a0:	497a      	ldr	r1, [pc, #488]	@ (801a28c <_strtod_l+0x90c>)
 801a0a2:	2001      	movs	r0, #1
 801a0a4:	468c      	mov	ip, r1
 801a0a6:	2100      	movs	r1, #0
 801a0a8:	3b01      	subs	r3, #1
 801a0aa:	9116      	str	r1, [sp, #88]	@ 0x58
 801a0ac:	9014      	str	r0, [sp, #80]	@ 0x50
 801a0ae:	4563      	cmp	r3, ip
 801a0b0:	da06      	bge.n	801a0c0 <_strtod_l+0x740>
 801a0b2:	4661      	mov	r1, ip
 801a0b4:	1ac9      	subs	r1, r1, r3
 801a0b6:	1a52      	subs	r2, r2, r1
 801a0b8:	291f      	cmp	r1, #31
 801a0ba:	dc3f      	bgt.n	801a13c <_strtod_l+0x7bc>
 801a0bc:	4088      	lsls	r0, r1
 801a0be:	9014      	str	r0, [sp, #80]	@ 0x50
 801a0c0:	18ab      	adds	r3, r5, r2
 801a0c2:	930e      	str	r3, [sp, #56]	@ 0x38
 801a0c4:	18a4      	adds	r4, r4, r2
 801a0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a0ca:	191c      	adds	r4, r3, r4
 801a0cc:	002b      	movs	r3, r5
 801a0ce:	4295      	cmp	r5, r2
 801a0d0:	dd00      	ble.n	801a0d4 <_strtod_l+0x754>
 801a0d2:	0013      	movs	r3, r2
 801a0d4:	42a3      	cmp	r3, r4
 801a0d6:	dd00      	ble.n	801a0da <_strtod_l+0x75a>
 801a0d8:	0023      	movs	r3, r4
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	dd04      	ble.n	801a0e8 <_strtod_l+0x768>
 801a0de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a0e0:	1ae4      	subs	r4, r4, r3
 801a0e2:	1ad2      	subs	r2, r2, r3
 801a0e4:	920e      	str	r2, [sp, #56]	@ 0x38
 801a0e6:	1aed      	subs	r5, r5, r3
 801a0e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	dd16      	ble.n	801a11c <_strtod_l+0x79c>
 801a0ee:	001a      	movs	r2, r3
 801a0f0:	9907      	ldr	r1, [sp, #28]
 801a0f2:	9805      	ldr	r0, [sp, #20]
 801a0f4:	f002 fe10 	bl	801cd18 <__pow5mult>
 801a0f8:	9007      	str	r0, [sp, #28]
 801a0fa:	2800      	cmp	r0, #0
 801a0fc:	d0b3      	beq.n	801a066 <_strtod_l+0x6e6>
 801a0fe:	0001      	movs	r1, r0
 801a100:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a102:	9805      	ldr	r0, [sp, #20]
 801a104:	f002 fd56 	bl	801cbb4 <__multiply>
 801a108:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a10a:	2800      	cmp	r0, #0
 801a10c:	d100      	bne.n	801a110 <_strtod_l+0x790>
 801a10e:	e671      	b.n	8019df4 <_strtod_l+0x474>
 801a110:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a112:	9805      	ldr	r0, [sp, #20]
 801a114:	f002 fc32 	bl	801c97c <_Bfree>
 801a118:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a11a:	931e      	str	r3, [sp, #120]	@ 0x78
 801a11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a11e:	2b00      	cmp	r3, #0
 801a120:	dc12      	bgt.n	801a148 <_strtod_l+0x7c8>
 801a122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a124:	2b00      	cmp	r3, #0
 801a126:	dd18      	ble.n	801a15a <_strtod_l+0x7da>
 801a128:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a12a:	9908      	ldr	r1, [sp, #32]
 801a12c:	9805      	ldr	r0, [sp, #20]
 801a12e:	f002 fdf3 	bl	801cd18 <__pow5mult>
 801a132:	9008      	str	r0, [sp, #32]
 801a134:	2800      	cmp	r0, #0
 801a136:	d110      	bne.n	801a15a <_strtod_l+0x7da>
 801a138:	2300      	movs	r3, #0
 801a13a:	e65a      	b.n	8019df2 <_strtod_l+0x472>
 801a13c:	4954      	ldr	r1, [pc, #336]	@ (801a290 <_strtod_l+0x910>)
 801a13e:	1acb      	subs	r3, r1, r3
 801a140:	0001      	movs	r1, r0
 801a142:	4099      	lsls	r1, r3
 801a144:	9116      	str	r1, [sp, #88]	@ 0x58
 801a146:	e7ba      	b.n	801a0be <_strtod_l+0x73e>
 801a148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a14a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a14c:	9805      	ldr	r0, [sp, #20]
 801a14e:	f002 fe3f 	bl	801cdd0 <__lshift>
 801a152:	901e      	str	r0, [sp, #120]	@ 0x78
 801a154:	2800      	cmp	r0, #0
 801a156:	d1e4      	bne.n	801a122 <_strtod_l+0x7a2>
 801a158:	e64c      	b.n	8019df4 <_strtod_l+0x474>
 801a15a:	2c00      	cmp	r4, #0
 801a15c:	dd07      	ble.n	801a16e <_strtod_l+0x7ee>
 801a15e:	0022      	movs	r2, r4
 801a160:	9908      	ldr	r1, [sp, #32]
 801a162:	9805      	ldr	r0, [sp, #20]
 801a164:	f002 fe34 	bl	801cdd0 <__lshift>
 801a168:	9008      	str	r0, [sp, #32]
 801a16a:	2800      	cmp	r0, #0
 801a16c:	d0e4      	beq.n	801a138 <_strtod_l+0x7b8>
 801a16e:	2d00      	cmp	r5, #0
 801a170:	dd08      	ble.n	801a184 <_strtod_l+0x804>
 801a172:	002a      	movs	r2, r5
 801a174:	9907      	ldr	r1, [sp, #28]
 801a176:	9805      	ldr	r0, [sp, #20]
 801a178:	f002 fe2a 	bl	801cdd0 <__lshift>
 801a17c:	9007      	str	r0, [sp, #28]
 801a17e:	2800      	cmp	r0, #0
 801a180:	d100      	bne.n	801a184 <_strtod_l+0x804>
 801a182:	e637      	b.n	8019df4 <_strtod_l+0x474>
 801a184:	9a08      	ldr	r2, [sp, #32]
 801a186:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a188:	9805      	ldr	r0, [sp, #20]
 801a18a:	f002 fea9 	bl	801cee0 <__mdiff>
 801a18e:	9006      	str	r0, [sp, #24]
 801a190:	2800      	cmp	r0, #0
 801a192:	d100      	bne.n	801a196 <_strtod_l+0x816>
 801a194:	e62e      	b.n	8019df4 <_strtod_l+0x474>
 801a196:	68c3      	ldr	r3, [r0, #12]
 801a198:	9907      	ldr	r1, [sp, #28]
 801a19a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a19c:	2300      	movs	r3, #0
 801a19e:	60c3      	str	r3, [r0, #12]
 801a1a0:	f002 fe82 	bl	801cea8 <__mcmp>
 801a1a4:	2800      	cmp	r0, #0
 801a1a6:	da3b      	bge.n	801a220 <_strtod_l+0x8a0>
 801a1a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a1aa:	4333      	orrs	r3, r6
 801a1ac:	d167      	bne.n	801a27e <_strtod_l+0x8fe>
 801a1ae:	033b      	lsls	r3, r7, #12
 801a1b0:	d165      	bne.n	801a27e <_strtod_l+0x8fe>
 801a1b2:	22d6      	movs	r2, #214	@ 0xd6
 801a1b4:	4b37      	ldr	r3, [pc, #220]	@ (801a294 <_strtod_l+0x914>)
 801a1b6:	04d2      	lsls	r2, r2, #19
 801a1b8:	403b      	ands	r3, r7
 801a1ba:	4293      	cmp	r3, r2
 801a1bc:	d95f      	bls.n	801a27e <_strtod_l+0x8fe>
 801a1be:	9b06      	ldr	r3, [sp, #24]
 801a1c0:	695b      	ldr	r3, [r3, #20]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d103      	bne.n	801a1ce <_strtod_l+0x84e>
 801a1c6:	9b06      	ldr	r3, [sp, #24]
 801a1c8:	691b      	ldr	r3, [r3, #16]
 801a1ca:	2b01      	cmp	r3, #1
 801a1cc:	dd57      	ble.n	801a27e <_strtod_l+0x8fe>
 801a1ce:	9906      	ldr	r1, [sp, #24]
 801a1d0:	2201      	movs	r2, #1
 801a1d2:	9805      	ldr	r0, [sp, #20]
 801a1d4:	f002 fdfc 	bl	801cdd0 <__lshift>
 801a1d8:	9907      	ldr	r1, [sp, #28]
 801a1da:	9006      	str	r0, [sp, #24]
 801a1dc:	f002 fe64 	bl	801cea8 <__mcmp>
 801a1e0:	2800      	cmp	r0, #0
 801a1e2:	dd4c      	ble.n	801a27e <_strtod_l+0x8fe>
 801a1e4:	4b2b      	ldr	r3, [pc, #172]	@ (801a294 <_strtod_l+0x914>)
 801a1e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1e8:	403b      	ands	r3, r7
 801a1ea:	2a00      	cmp	r2, #0
 801a1ec:	d074      	beq.n	801a2d8 <_strtod_l+0x958>
 801a1ee:	22d6      	movs	r2, #214	@ 0xd6
 801a1f0:	04d2      	lsls	r2, r2, #19
 801a1f2:	4293      	cmp	r3, r2
 801a1f4:	d870      	bhi.n	801a2d8 <_strtod_l+0x958>
 801a1f6:	22dc      	movs	r2, #220	@ 0xdc
 801a1f8:	0492      	lsls	r2, r2, #18
 801a1fa:	4293      	cmp	r3, r2
 801a1fc:	d800      	bhi.n	801a200 <_strtod_l+0x880>
 801a1fe:	e695      	b.n	8019f2c <_strtod_l+0x5ac>
 801a200:	0030      	movs	r0, r6
 801a202:	0039      	movs	r1, r7
 801a204:	4b24      	ldr	r3, [pc, #144]	@ (801a298 <_strtod_l+0x918>)
 801a206:	2200      	movs	r2, #0
 801a208:	f7e8 fa0e 	bl	8002628 <__aeabi_dmul>
 801a20c:	4b21      	ldr	r3, [pc, #132]	@ (801a294 <_strtod_l+0x914>)
 801a20e:	0006      	movs	r6, r0
 801a210:	000f      	movs	r7, r1
 801a212:	420b      	tst	r3, r1
 801a214:	d000      	beq.n	801a218 <_strtod_l+0x898>
 801a216:	e5f6      	b.n	8019e06 <_strtod_l+0x486>
 801a218:	2322      	movs	r3, #34	@ 0x22
 801a21a:	9a05      	ldr	r2, [sp, #20]
 801a21c:	6013      	str	r3, [r2, #0]
 801a21e:	e5f2      	b.n	8019e06 <_strtod_l+0x486>
 801a220:	970e      	str	r7, [sp, #56]	@ 0x38
 801a222:	2800      	cmp	r0, #0
 801a224:	d175      	bne.n	801a312 <_strtod_l+0x992>
 801a226:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a228:	033b      	lsls	r3, r7, #12
 801a22a:	0b1b      	lsrs	r3, r3, #12
 801a22c:	2a00      	cmp	r2, #0
 801a22e:	d039      	beq.n	801a2a4 <_strtod_l+0x924>
 801a230:	4a1a      	ldr	r2, [pc, #104]	@ (801a29c <_strtod_l+0x91c>)
 801a232:	4293      	cmp	r3, r2
 801a234:	d138      	bne.n	801a2a8 <_strtod_l+0x928>
 801a236:	2101      	movs	r1, #1
 801a238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a23a:	4249      	negs	r1, r1
 801a23c:	0032      	movs	r2, r6
 801a23e:	0008      	movs	r0, r1
 801a240:	2b00      	cmp	r3, #0
 801a242:	d00b      	beq.n	801a25c <_strtod_l+0x8dc>
 801a244:	24d4      	movs	r4, #212	@ 0xd4
 801a246:	4b13      	ldr	r3, [pc, #76]	@ (801a294 <_strtod_l+0x914>)
 801a248:	0008      	movs	r0, r1
 801a24a:	403b      	ands	r3, r7
 801a24c:	04e4      	lsls	r4, r4, #19
 801a24e:	42a3      	cmp	r3, r4
 801a250:	d804      	bhi.n	801a25c <_strtod_l+0x8dc>
 801a252:	306c      	adds	r0, #108	@ 0x6c
 801a254:	0d1b      	lsrs	r3, r3, #20
 801a256:	1ac3      	subs	r3, r0, r3
 801a258:	4099      	lsls	r1, r3
 801a25a:	0008      	movs	r0, r1
 801a25c:	4282      	cmp	r2, r0
 801a25e:	d123      	bne.n	801a2a8 <_strtod_l+0x928>
 801a260:	4b0f      	ldr	r3, [pc, #60]	@ (801a2a0 <_strtod_l+0x920>)
 801a262:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a264:	4299      	cmp	r1, r3
 801a266:	d102      	bne.n	801a26e <_strtod_l+0x8ee>
 801a268:	3201      	adds	r2, #1
 801a26a:	d100      	bne.n	801a26e <_strtod_l+0x8ee>
 801a26c:	e5c2      	b.n	8019df4 <_strtod_l+0x474>
 801a26e:	4b09      	ldr	r3, [pc, #36]	@ (801a294 <_strtod_l+0x914>)
 801a270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a272:	2600      	movs	r6, #0
 801a274:	401a      	ands	r2, r3
 801a276:	0013      	movs	r3, r2
 801a278:	2280      	movs	r2, #128	@ 0x80
 801a27a:	0352      	lsls	r2, r2, #13
 801a27c:	189f      	adds	r7, r3, r2
 801a27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a280:	2b00      	cmp	r3, #0
 801a282:	d1bd      	bne.n	801a200 <_strtod_l+0x880>
 801a284:	e5bf      	b.n	8019e06 <_strtod_l+0x486>
 801a286:	46c0      	nop			@ (mov r8, r8)
 801a288:	0801f828 	.word	0x0801f828
 801a28c:	fffffc02 	.word	0xfffffc02
 801a290:	fffffbe2 	.word	0xfffffbe2
 801a294:	7ff00000 	.word	0x7ff00000
 801a298:	39500000 	.word	0x39500000
 801a29c:	000fffff 	.word	0x000fffff
 801a2a0:	7fefffff 	.word	0x7fefffff
 801a2a4:	4333      	orrs	r3, r6
 801a2a6:	d09d      	beq.n	801a1e4 <_strtod_l+0x864>
 801a2a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d01c      	beq.n	801a2e8 <_strtod_l+0x968>
 801a2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2b0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a2b2:	4213      	tst	r3, r2
 801a2b4:	d0e3      	beq.n	801a27e <_strtod_l+0x8fe>
 801a2b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a2b8:	0030      	movs	r0, r6
 801a2ba:	0039      	movs	r1, r7
 801a2bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d016      	beq.n	801a2f0 <_strtod_l+0x970>
 801a2c2:	f7ff fb45 	bl	8019950 <sulp>
 801a2c6:	0002      	movs	r2, r0
 801a2c8:	000b      	movs	r3, r1
 801a2ca:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a2cc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a2ce:	f7e7 fa03 	bl	80016d8 <__aeabi_dadd>
 801a2d2:	0006      	movs	r6, r0
 801a2d4:	000f      	movs	r7, r1
 801a2d6:	e7d2      	b.n	801a27e <_strtod_l+0x8fe>
 801a2d8:	2601      	movs	r6, #1
 801a2da:	4a92      	ldr	r2, [pc, #584]	@ (801a524 <_strtod_l+0xba4>)
 801a2dc:	4276      	negs	r6, r6
 801a2de:	189b      	adds	r3, r3, r2
 801a2e0:	4a91      	ldr	r2, [pc, #580]	@ (801a528 <_strtod_l+0xba8>)
 801a2e2:	431a      	orrs	r2, r3
 801a2e4:	0017      	movs	r7, r2
 801a2e6:	e7ca      	b.n	801a27e <_strtod_l+0x8fe>
 801a2e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a2ea:	4233      	tst	r3, r6
 801a2ec:	d0c7      	beq.n	801a27e <_strtod_l+0x8fe>
 801a2ee:	e7e2      	b.n	801a2b6 <_strtod_l+0x936>
 801a2f0:	f7ff fb2e 	bl	8019950 <sulp>
 801a2f4:	0002      	movs	r2, r0
 801a2f6:	000b      	movs	r3, r1
 801a2f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a2fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a2fc:	f7e8 fc5c 	bl	8002bb8 <__aeabi_dsub>
 801a300:	2200      	movs	r2, #0
 801a302:	2300      	movs	r3, #0
 801a304:	0006      	movs	r6, r0
 801a306:	000f      	movs	r7, r1
 801a308:	f7e6 f8c8 	bl	800049c <__aeabi_dcmpeq>
 801a30c:	2800      	cmp	r0, #0
 801a30e:	d0b6      	beq.n	801a27e <_strtod_l+0x8fe>
 801a310:	e60c      	b.n	8019f2c <_strtod_l+0x5ac>
 801a312:	9907      	ldr	r1, [sp, #28]
 801a314:	9806      	ldr	r0, [sp, #24]
 801a316:	f002 ff49 	bl	801d1ac <__ratio>
 801a31a:	2380      	movs	r3, #128	@ 0x80
 801a31c:	2200      	movs	r2, #0
 801a31e:	05db      	lsls	r3, r3, #23
 801a320:	0004      	movs	r4, r0
 801a322:	000d      	movs	r5, r1
 801a324:	f7e6 f8ca 	bl	80004bc <__aeabi_dcmple>
 801a328:	2800      	cmp	r0, #0
 801a32a:	d06c      	beq.n	801a406 <_strtod_l+0xa86>
 801a32c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d177      	bne.n	801a422 <_strtod_l+0xaa2>
 801a332:	2e00      	cmp	r6, #0
 801a334:	d157      	bne.n	801a3e6 <_strtod_l+0xa66>
 801a336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a338:	031b      	lsls	r3, r3, #12
 801a33a:	d15a      	bne.n	801a3f2 <_strtod_l+0xa72>
 801a33c:	2200      	movs	r2, #0
 801a33e:	0020      	movs	r0, r4
 801a340:	0029      	movs	r1, r5
 801a342:	4b7a      	ldr	r3, [pc, #488]	@ (801a52c <_strtod_l+0xbac>)
 801a344:	f7e6 f8b0 	bl	80004a8 <__aeabi_dcmplt>
 801a348:	2800      	cmp	r0, #0
 801a34a:	d159      	bne.n	801a400 <_strtod_l+0xa80>
 801a34c:	0020      	movs	r0, r4
 801a34e:	0029      	movs	r1, r5
 801a350:	2200      	movs	r2, #0
 801a352:	4b77      	ldr	r3, [pc, #476]	@ (801a530 <_strtod_l+0xbb0>)
 801a354:	f7e8 f968 	bl	8002628 <__aeabi_dmul>
 801a358:	0004      	movs	r4, r0
 801a35a:	000d      	movs	r5, r1
 801a35c:	2380      	movs	r3, #128	@ 0x80
 801a35e:	061b      	lsls	r3, r3, #24
 801a360:	18eb      	adds	r3, r5, r3
 801a362:	940a      	str	r4, [sp, #40]	@ 0x28
 801a364:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a36a:	9214      	str	r2, [sp, #80]	@ 0x50
 801a36c:	9315      	str	r3, [sp, #84]	@ 0x54
 801a36e:	4a71      	ldr	r2, [pc, #452]	@ (801a534 <_strtod_l+0xbb4>)
 801a370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a372:	4013      	ands	r3, r2
 801a374:	9316      	str	r3, [sp, #88]	@ 0x58
 801a376:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a378:	4b6f      	ldr	r3, [pc, #444]	@ (801a538 <_strtod_l+0xbb8>)
 801a37a:	429a      	cmp	r2, r3
 801a37c:	d000      	beq.n	801a380 <_strtod_l+0xa00>
 801a37e:	e087      	b.n	801a490 <_strtod_l+0xb10>
 801a380:	4a6e      	ldr	r2, [pc, #440]	@ (801a53c <_strtod_l+0xbbc>)
 801a382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a384:	4694      	mov	ip, r2
 801a386:	4463      	add	r3, ip
 801a388:	001f      	movs	r7, r3
 801a38a:	0030      	movs	r0, r6
 801a38c:	0019      	movs	r1, r3
 801a38e:	f002 fe41 	bl	801d014 <__ulp>
 801a392:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a396:	f7e8 f947 	bl	8002628 <__aeabi_dmul>
 801a39a:	0032      	movs	r2, r6
 801a39c:	003b      	movs	r3, r7
 801a39e:	f7e7 f99b 	bl	80016d8 <__aeabi_dadd>
 801a3a2:	4a64      	ldr	r2, [pc, #400]	@ (801a534 <_strtod_l+0xbb4>)
 801a3a4:	4b66      	ldr	r3, [pc, #408]	@ (801a540 <_strtod_l+0xbc0>)
 801a3a6:	0006      	movs	r6, r0
 801a3a8:	400a      	ands	r2, r1
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d940      	bls.n	801a430 <_strtod_l+0xab0>
 801a3ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a3b0:	4a64      	ldr	r2, [pc, #400]	@ (801a544 <_strtod_l+0xbc4>)
 801a3b2:	4293      	cmp	r3, r2
 801a3b4:	d103      	bne.n	801a3be <_strtod_l+0xa3e>
 801a3b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a3b8:	3301      	adds	r3, #1
 801a3ba:	d100      	bne.n	801a3be <_strtod_l+0xa3e>
 801a3bc:	e51a      	b.n	8019df4 <_strtod_l+0x474>
 801a3be:	2601      	movs	r6, #1
 801a3c0:	4f60      	ldr	r7, [pc, #384]	@ (801a544 <_strtod_l+0xbc4>)
 801a3c2:	4276      	negs	r6, r6
 801a3c4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a3c6:	9805      	ldr	r0, [sp, #20]
 801a3c8:	f002 fad8 	bl	801c97c <_Bfree>
 801a3cc:	9908      	ldr	r1, [sp, #32]
 801a3ce:	9805      	ldr	r0, [sp, #20]
 801a3d0:	f002 fad4 	bl	801c97c <_Bfree>
 801a3d4:	9907      	ldr	r1, [sp, #28]
 801a3d6:	9805      	ldr	r0, [sp, #20]
 801a3d8:	f002 fad0 	bl	801c97c <_Bfree>
 801a3dc:	9906      	ldr	r1, [sp, #24]
 801a3de:	9805      	ldr	r0, [sp, #20]
 801a3e0:	f002 facc 	bl	801c97c <_Bfree>
 801a3e4:	e617      	b.n	801a016 <_strtod_l+0x696>
 801a3e6:	2e01      	cmp	r6, #1
 801a3e8:	d103      	bne.n	801a3f2 <_strtod_l+0xa72>
 801a3ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d100      	bne.n	801a3f2 <_strtod_l+0xa72>
 801a3f0:	e59c      	b.n	8019f2c <_strtod_l+0x5ac>
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	4c54      	ldr	r4, [pc, #336]	@ (801a548 <_strtod_l+0xbc8>)
 801a3f6:	4d4d      	ldr	r5, [pc, #308]	@ (801a52c <_strtod_l+0xbac>)
 801a3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801a3fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a3fc:	2400      	movs	r4, #0
 801a3fe:	e7b2      	b.n	801a366 <_strtod_l+0x9e6>
 801a400:	2400      	movs	r4, #0
 801a402:	4d4b      	ldr	r5, [pc, #300]	@ (801a530 <_strtod_l+0xbb0>)
 801a404:	e7aa      	b.n	801a35c <_strtod_l+0x9dc>
 801a406:	0020      	movs	r0, r4
 801a408:	0029      	movs	r1, r5
 801a40a:	4b49      	ldr	r3, [pc, #292]	@ (801a530 <_strtod_l+0xbb0>)
 801a40c:	2200      	movs	r2, #0
 801a40e:	f7e8 f90b 	bl	8002628 <__aeabi_dmul>
 801a412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a414:	0004      	movs	r4, r0
 801a416:	000d      	movs	r5, r1
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d09f      	beq.n	801a35c <_strtod_l+0x9dc>
 801a41c:	940a      	str	r4, [sp, #40]	@ 0x28
 801a41e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801a420:	e7a1      	b.n	801a366 <_strtod_l+0x9e6>
 801a422:	2300      	movs	r3, #0
 801a424:	4c41      	ldr	r4, [pc, #260]	@ (801a52c <_strtod_l+0xbac>)
 801a426:	0025      	movs	r5, r4
 801a428:	930a      	str	r3, [sp, #40]	@ 0x28
 801a42a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a42c:	001c      	movs	r4, r3
 801a42e:	e79a      	b.n	801a366 <_strtod_l+0x9e6>
 801a430:	23d4      	movs	r3, #212	@ 0xd4
 801a432:	049b      	lsls	r3, r3, #18
 801a434:	18cf      	adds	r7, r1, r3
 801a436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a438:	9710      	str	r7, [sp, #64]	@ 0x40
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d1c2      	bne.n	801a3c4 <_strtod_l+0xa44>
 801a43e:	4b3d      	ldr	r3, [pc, #244]	@ (801a534 <_strtod_l+0xbb4>)
 801a440:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a442:	403b      	ands	r3, r7
 801a444:	429a      	cmp	r2, r3
 801a446:	d1bd      	bne.n	801a3c4 <_strtod_l+0xa44>
 801a448:	0020      	movs	r0, r4
 801a44a:	0029      	movs	r1, r5
 801a44c:	f7e6 f912 	bl	8000674 <__aeabi_d2lz>
 801a450:	f7e6 f94a 	bl	80006e8 <__aeabi_l2d>
 801a454:	0002      	movs	r2, r0
 801a456:	000b      	movs	r3, r1
 801a458:	0020      	movs	r0, r4
 801a45a:	0029      	movs	r1, r5
 801a45c:	f7e8 fbac 	bl	8002bb8 <__aeabi_dsub>
 801a460:	033c      	lsls	r4, r7, #12
 801a462:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a464:	0b24      	lsrs	r4, r4, #12
 801a466:	4334      	orrs	r4, r6
 801a468:	900e      	str	r0, [sp, #56]	@ 0x38
 801a46a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a46c:	4a37      	ldr	r2, [pc, #220]	@ (801a54c <_strtod_l+0xbcc>)
 801a46e:	431c      	orrs	r4, r3
 801a470:	d052      	beq.n	801a518 <_strtod_l+0xb98>
 801a472:	4b37      	ldr	r3, [pc, #220]	@ (801a550 <_strtod_l+0xbd0>)
 801a474:	f7e6 f818 	bl	80004a8 <__aeabi_dcmplt>
 801a478:	2800      	cmp	r0, #0
 801a47a:	d000      	beq.n	801a47e <_strtod_l+0xafe>
 801a47c:	e4c3      	b.n	8019e06 <_strtod_l+0x486>
 801a47e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a480:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a482:	4a34      	ldr	r2, [pc, #208]	@ (801a554 <_strtod_l+0xbd4>)
 801a484:	4b2a      	ldr	r3, [pc, #168]	@ (801a530 <_strtod_l+0xbb0>)
 801a486:	f7e6 f823 	bl	80004d0 <__aeabi_dcmpgt>
 801a48a:	2800      	cmp	r0, #0
 801a48c:	d09a      	beq.n	801a3c4 <_strtod_l+0xa44>
 801a48e:	e4ba      	b.n	8019e06 <_strtod_l+0x486>
 801a490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a492:	2b00      	cmp	r3, #0
 801a494:	d02a      	beq.n	801a4ec <_strtod_l+0xb6c>
 801a496:	23d4      	movs	r3, #212	@ 0xd4
 801a498:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a49a:	04db      	lsls	r3, r3, #19
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d825      	bhi.n	801a4ec <_strtod_l+0xb6c>
 801a4a0:	0020      	movs	r0, r4
 801a4a2:	0029      	movs	r1, r5
 801a4a4:	4a2c      	ldr	r2, [pc, #176]	@ (801a558 <_strtod_l+0xbd8>)
 801a4a6:	4b2d      	ldr	r3, [pc, #180]	@ (801a55c <_strtod_l+0xbdc>)
 801a4a8:	f7e6 f808 	bl	80004bc <__aeabi_dcmple>
 801a4ac:	2800      	cmp	r0, #0
 801a4ae:	d016      	beq.n	801a4de <_strtod_l+0xb5e>
 801a4b0:	0020      	movs	r0, r4
 801a4b2:	0029      	movs	r1, r5
 801a4b4:	f7e6 f8c0 	bl	8000638 <__aeabi_d2uiz>
 801a4b8:	2800      	cmp	r0, #0
 801a4ba:	d100      	bne.n	801a4be <_strtod_l+0xb3e>
 801a4bc:	3001      	adds	r0, #1
 801a4be:	f7e8 ffa3 	bl	8003408 <__aeabi_ui2d>
 801a4c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a4c4:	0004      	movs	r4, r0
 801a4c6:	000d      	movs	r5, r1
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d122      	bne.n	801a512 <_strtod_l+0xb92>
 801a4cc:	2380      	movs	r3, #128	@ 0x80
 801a4ce:	061b      	lsls	r3, r3, #24
 801a4d0:	18cb      	adds	r3, r1, r3
 801a4d2:	9018      	str	r0, [sp, #96]	@ 0x60
 801a4d4:	9319      	str	r3, [sp, #100]	@ 0x64
 801a4d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a4d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a4da:	9214      	str	r2, [sp, #80]	@ 0x50
 801a4dc:	9315      	str	r3, [sp, #84]	@ 0x54
 801a4de:	22d6      	movs	r2, #214	@ 0xd6
 801a4e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a4e2:	04d2      	lsls	r2, r2, #19
 801a4e4:	189b      	adds	r3, r3, r2
 801a4e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a4e8:	1a9b      	subs	r3, r3, r2
 801a4ea:	9315      	str	r3, [sp, #84]	@ 0x54
 801a4ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a4ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a4f0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a4f2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801a4f4:	f002 fd8e 	bl	801d014 <__ulp>
 801a4f8:	0002      	movs	r2, r0
 801a4fa:	000b      	movs	r3, r1
 801a4fc:	0030      	movs	r0, r6
 801a4fe:	0039      	movs	r1, r7
 801a500:	f7e8 f892 	bl	8002628 <__aeabi_dmul>
 801a504:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a506:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a508:	f7e7 f8e6 	bl	80016d8 <__aeabi_dadd>
 801a50c:	0006      	movs	r6, r0
 801a50e:	000f      	movs	r7, r1
 801a510:	e791      	b.n	801a436 <_strtod_l+0xab6>
 801a512:	9418      	str	r4, [sp, #96]	@ 0x60
 801a514:	9519      	str	r5, [sp, #100]	@ 0x64
 801a516:	e7de      	b.n	801a4d6 <_strtod_l+0xb56>
 801a518:	4b11      	ldr	r3, [pc, #68]	@ (801a560 <_strtod_l+0xbe0>)
 801a51a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a51c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a51e:	f7e5 ffc3 	bl	80004a8 <__aeabi_dcmplt>
 801a522:	e7b2      	b.n	801a48a <_strtod_l+0xb0a>
 801a524:	fff00000 	.word	0xfff00000
 801a528:	000fffff 	.word	0x000fffff
 801a52c:	3ff00000 	.word	0x3ff00000
 801a530:	3fe00000 	.word	0x3fe00000
 801a534:	7ff00000 	.word	0x7ff00000
 801a538:	7fe00000 	.word	0x7fe00000
 801a53c:	fcb00000 	.word	0xfcb00000
 801a540:	7c9fffff 	.word	0x7c9fffff
 801a544:	7fefffff 	.word	0x7fefffff
 801a548:	bff00000 	.word	0xbff00000
 801a54c:	94a03595 	.word	0x94a03595
 801a550:	3fdfffff 	.word	0x3fdfffff
 801a554:	35afe535 	.word	0x35afe535
 801a558:	ffc00000 	.word	0xffc00000
 801a55c:	41dfffff 	.word	0x41dfffff
 801a560:	3fcfffff 	.word	0x3fcfffff

0801a564 <strtod>:
 801a564:	b510      	push	{r4, lr}
 801a566:	4c04      	ldr	r4, [pc, #16]	@ (801a578 <strtod+0x14>)
 801a568:	000a      	movs	r2, r1
 801a56a:	0001      	movs	r1, r0
 801a56c:	4b03      	ldr	r3, [pc, #12]	@ (801a57c <strtod+0x18>)
 801a56e:	6820      	ldr	r0, [r4, #0]
 801a570:	f7ff fa06 	bl	8019980 <_strtod_l>
 801a574:	bd10      	pop	{r4, pc}
 801a576:	46c0      	nop			@ (mov r8, r8)
 801a578:	20000374 	.word	0x20000374
 801a57c:	20000208 	.word	0x20000208

0801a580 <__cvt>:
 801a580:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a582:	001f      	movs	r7, r3
 801a584:	2300      	movs	r3, #0
 801a586:	0016      	movs	r6, r2
 801a588:	b08b      	sub	sp, #44	@ 0x2c
 801a58a:	429f      	cmp	r7, r3
 801a58c:	da04      	bge.n	801a598 <__cvt+0x18>
 801a58e:	2180      	movs	r1, #128	@ 0x80
 801a590:	0609      	lsls	r1, r1, #24
 801a592:	187b      	adds	r3, r7, r1
 801a594:	001f      	movs	r7, r3
 801a596:	232d      	movs	r3, #45	@ 0x2d
 801a598:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a59a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801a59c:	7013      	strb	r3, [r2, #0]
 801a59e:	2320      	movs	r3, #32
 801a5a0:	2203      	movs	r2, #3
 801a5a2:	439d      	bics	r5, r3
 801a5a4:	2d46      	cmp	r5, #70	@ 0x46
 801a5a6:	d007      	beq.n	801a5b8 <__cvt+0x38>
 801a5a8:	002b      	movs	r3, r5
 801a5aa:	3b45      	subs	r3, #69	@ 0x45
 801a5ac:	4259      	negs	r1, r3
 801a5ae:	414b      	adcs	r3, r1
 801a5b0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a5b2:	3a01      	subs	r2, #1
 801a5b4:	18cb      	adds	r3, r1, r3
 801a5b6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a5b8:	ab09      	add	r3, sp, #36	@ 0x24
 801a5ba:	9304      	str	r3, [sp, #16]
 801a5bc:	ab08      	add	r3, sp, #32
 801a5be:	9303      	str	r3, [sp, #12]
 801a5c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a5c2:	9200      	str	r2, [sp, #0]
 801a5c4:	9302      	str	r3, [sp, #8]
 801a5c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a5c8:	0032      	movs	r2, r6
 801a5ca:	9301      	str	r3, [sp, #4]
 801a5cc:	003b      	movs	r3, r7
 801a5ce:	f000 ff2b 	bl	801b428 <_dtoa_r>
 801a5d2:	0004      	movs	r4, r0
 801a5d4:	2d47      	cmp	r5, #71	@ 0x47
 801a5d6:	d11b      	bne.n	801a610 <__cvt+0x90>
 801a5d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a5da:	07db      	lsls	r3, r3, #31
 801a5dc:	d511      	bpl.n	801a602 <__cvt+0x82>
 801a5de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a5e0:	18c3      	adds	r3, r0, r3
 801a5e2:	9307      	str	r3, [sp, #28]
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	0030      	movs	r0, r6
 801a5ea:	0039      	movs	r1, r7
 801a5ec:	f7e5 ff56 	bl	800049c <__aeabi_dcmpeq>
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	d001      	beq.n	801a5f8 <__cvt+0x78>
 801a5f4:	9b07      	ldr	r3, [sp, #28]
 801a5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5f8:	2230      	movs	r2, #48	@ 0x30
 801a5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5fc:	9907      	ldr	r1, [sp, #28]
 801a5fe:	428b      	cmp	r3, r1
 801a600:	d320      	bcc.n	801a644 <__cvt+0xc4>
 801a602:	0020      	movs	r0, r4
 801a604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a606:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a608:	1b1b      	subs	r3, r3, r4
 801a60a:	6013      	str	r3, [r2, #0]
 801a60c:	b00b      	add	sp, #44	@ 0x2c
 801a60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a610:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a612:	18c3      	adds	r3, r0, r3
 801a614:	9307      	str	r3, [sp, #28]
 801a616:	2d46      	cmp	r5, #70	@ 0x46
 801a618:	d1e4      	bne.n	801a5e4 <__cvt+0x64>
 801a61a:	7803      	ldrb	r3, [r0, #0]
 801a61c:	2b30      	cmp	r3, #48	@ 0x30
 801a61e:	d10c      	bne.n	801a63a <__cvt+0xba>
 801a620:	2200      	movs	r2, #0
 801a622:	2300      	movs	r3, #0
 801a624:	0030      	movs	r0, r6
 801a626:	0039      	movs	r1, r7
 801a628:	f7e5 ff38 	bl	800049c <__aeabi_dcmpeq>
 801a62c:	2800      	cmp	r0, #0
 801a62e:	d104      	bne.n	801a63a <__cvt+0xba>
 801a630:	2301      	movs	r3, #1
 801a632:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a634:	1a9b      	subs	r3, r3, r2
 801a636:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a638:	6013      	str	r3, [r2, #0]
 801a63a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a63c:	9a07      	ldr	r2, [sp, #28]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	18d3      	adds	r3, r2, r3
 801a642:	e7ce      	b.n	801a5e2 <__cvt+0x62>
 801a644:	1c59      	adds	r1, r3, #1
 801a646:	9109      	str	r1, [sp, #36]	@ 0x24
 801a648:	701a      	strb	r2, [r3, #0]
 801a64a:	e7d6      	b.n	801a5fa <__cvt+0x7a>

0801a64c <__exponent>:
 801a64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a64e:	232b      	movs	r3, #43	@ 0x2b
 801a650:	0005      	movs	r5, r0
 801a652:	000c      	movs	r4, r1
 801a654:	b085      	sub	sp, #20
 801a656:	7002      	strb	r2, [r0, #0]
 801a658:	2900      	cmp	r1, #0
 801a65a:	da01      	bge.n	801a660 <__exponent+0x14>
 801a65c:	424c      	negs	r4, r1
 801a65e:	3302      	adds	r3, #2
 801a660:	706b      	strb	r3, [r5, #1]
 801a662:	2c09      	cmp	r4, #9
 801a664:	dd2c      	ble.n	801a6c0 <__exponent+0x74>
 801a666:	ab02      	add	r3, sp, #8
 801a668:	1dde      	adds	r6, r3, #7
 801a66a:	0020      	movs	r0, r4
 801a66c:	210a      	movs	r1, #10
 801a66e:	f7e5 feff 	bl	8000470 <__aeabi_idivmod>
 801a672:	0037      	movs	r7, r6
 801a674:	3130      	adds	r1, #48	@ 0x30
 801a676:	3e01      	subs	r6, #1
 801a678:	0020      	movs	r0, r4
 801a67a:	7031      	strb	r1, [r6, #0]
 801a67c:	210a      	movs	r1, #10
 801a67e:	9401      	str	r4, [sp, #4]
 801a680:	f7e5 fe10 	bl	80002a4 <__divsi3>
 801a684:	9b01      	ldr	r3, [sp, #4]
 801a686:	0004      	movs	r4, r0
 801a688:	2b63      	cmp	r3, #99	@ 0x63
 801a68a:	dcee      	bgt.n	801a66a <__exponent+0x1e>
 801a68c:	1eba      	subs	r2, r7, #2
 801a68e:	1ca8      	adds	r0, r5, #2
 801a690:	0001      	movs	r1, r0
 801a692:	0013      	movs	r3, r2
 801a694:	3430      	adds	r4, #48	@ 0x30
 801a696:	7014      	strb	r4, [r2, #0]
 801a698:	ac02      	add	r4, sp, #8
 801a69a:	3407      	adds	r4, #7
 801a69c:	429c      	cmp	r4, r3
 801a69e:	d80a      	bhi.n	801a6b6 <__exponent+0x6a>
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	42a2      	cmp	r2, r4
 801a6a4:	d803      	bhi.n	801a6ae <__exponent+0x62>
 801a6a6:	3309      	adds	r3, #9
 801a6a8:	aa02      	add	r2, sp, #8
 801a6aa:	189b      	adds	r3, r3, r2
 801a6ac:	1bdb      	subs	r3, r3, r7
 801a6ae:	18c0      	adds	r0, r0, r3
 801a6b0:	1b40      	subs	r0, r0, r5
 801a6b2:	b005      	add	sp, #20
 801a6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6b6:	781c      	ldrb	r4, [r3, #0]
 801a6b8:	3301      	adds	r3, #1
 801a6ba:	700c      	strb	r4, [r1, #0]
 801a6bc:	3101      	adds	r1, #1
 801a6be:	e7eb      	b.n	801a698 <__exponent+0x4c>
 801a6c0:	2330      	movs	r3, #48	@ 0x30
 801a6c2:	18e4      	adds	r4, r4, r3
 801a6c4:	70ab      	strb	r3, [r5, #2]
 801a6c6:	1d28      	adds	r0, r5, #4
 801a6c8:	70ec      	strb	r4, [r5, #3]
 801a6ca:	e7f1      	b.n	801a6b0 <__exponent+0x64>

0801a6cc <_printf_float>:
 801a6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6ce:	b097      	sub	sp, #92	@ 0x5c
 801a6d0:	000d      	movs	r5, r1
 801a6d2:	920a      	str	r2, [sp, #40]	@ 0x28
 801a6d4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801a6d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6d8:	9009      	str	r0, [sp, #36]	@ 0x24
 801a6da:	f000 fd7d 	bl	801b1d8 <_localeconv_r>
 801a6de:	6803      	ldr	r3, [r0, #0]
 801a6e0:	0018      	movs	r0, r3
 801a6e2:	930d      	str	r3, [sp, #52]	@ 0x34
 801a6e4:	f7e5 fd38 	bl	8000158 <strlen>
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 801a6ec:	9314      	str	r3, [sp, #80]	@ 0x50
 801a6ee:	7e2b      	ldrb	r3, [r5, #24]
 801a6f0:	2207      	movs	r2, #7
 801a6f2:	930c      	str	r3, [sp, #48]	@ 0x30
 801a6f4:	682b      	ldr	r3, [r5, #0]
 801a6f6:	930e      	str	r3, [sp, #56]	@ 0x38
 801a6f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a6fa:	6823      	ldr	r3, [r4, #0]
 801a6fc:	05c9      	lsls	r1, r1, #23
 801a6fe:	d545      	bpl.n	801a78c <_printf_float+0xc0>
 801a700:	189b      	adds	r3, r3, r2
 801a702:	4393      	bics	r3, r2
 801a704:	001a      	movs	r2, r3
 801a706:	3208      	adds	r2, #8
 801a708:	6022      	str	r2, [r4, #0]
 801a70a:	2201      	movs	r2, #1
 801a70c:	681e      	ldr	r6, [r3, #0]
 801a70e:	685f      	ldr	r7, [r3, #4]
 801a710:	007b      	lsls	r3, r7, #1
 801a712:	085b      	lsrs	r3, r3, #1
 801a714:	9311      	str	r3, [sp, #68]	@ 0x44
 801a716:	9610      	str	r6, [sp, #64]	@ 0x40
 801a718:	64ae      	str	r6, [r5, #72]	@ 0x48
 801a71a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801a71c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a71e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a720:	4ba7      	ldr	r3, [pc, #668]	@ (801a9c0 <_printf_float+0x2f4>)
 801a722:	4252      	negs	r2, r2
 801a724:	f7e8 fde4 	bl	80032f0 <__aeabi_dcmpun>
 801a728:	2800      	cmp	r0, #0
 801a72a:	d131      	bne.n	801a790 <_printf_float+0xc4>
 801a72c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a72e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a730:	2201      	movs	r2, #1
 801a732:	4ba3      	ldr	r3, [pc, #652]	@ (801a9c0 <_printf_float+0x2f4>)
 801a734:	4252      	negs	r2, r2
 801a736:	f7e5 fec1 	bl	80004bc <__aeabi_dcmple>
 801a73a:	2800      	cmp	r0, #0
 801a73c:	d128      	bne.n	801a790 <_printf_float+0xc4>
 801a73e:	2200      	movs	r2, #0
 801a740:	2300      	movs	r3, #0
 801a742:	0030      	movs	r0, r6
 801a744:	0039      	movs	r1, r7
 801a746:	f7e5 feaf 	bl	80004a8 <__aeabi_dcmplt>
 801a74a:	2800      	cmp	r0, #0
 801a74c:	d003      	beq.n	801a756 <_printf_float+0x8a>
 801a74e:	002b      	movs	r3, r5
 801a750:	222d      	movs	r2, #45	@ 0x2d
 801a752:	3343      	adds	r3, #67	@ 0x43
 801a754:	701a      	strb	r2, [r3, #0]
 801a756:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a758:	4f9a      	ldr	r7, [pc, #616]	@ (801a9c4 <_printf_float+0x2f8>)
 801a75a:	2b47      	cmp	r3, #71	@ 0x47
 801a75c:	d900      	bls.n	801a760 <_printf_float+0x94>
 801a75e:	4f9a      	ldr	r7, [pc, #616]	@ (801a9c8 <_printf_float+0x2fc>)
 801a760:	2303      	movs	r3, #3
 801a762:	2400      	movs	r4, #0
 801a764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a766:	612b      	str	r3, [r5, #16]
 801a768:	3301      	adds	r3, #1
 801a76a:	439a      	bics	r2, r3
 801a76c:	602a      	str	r2, [r5, #0]
 801a76e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a770:	0029      	movs	r1, r5
 801a772:	9300      	str	r3, [sp, #0]
 801a774:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a778:	aa15      	add	r2, sp, #84	@ 0x54
 801a77a:	f000 f9e5 	bl	801ab48 <_printf_common>
 801a77e:	3001      	adds	r0, #1
 801a780:	d000      	beq.n	801a784 <_printf_float+0xb8>
 801a782:	e09f      	b.n	801a8c4 <_printf_float+0x1f8>
 801a784:	2001      	movs	r0, #1
 801a786:	4240      	negs	r0, r0
 801a788:	b017      	add	sp, #92	@ 0x5c
 801a78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a78c:	3307      	adds	r3, #7
 801a78e:	e7b8      	b.n	801a702 <_printf_float+0x36>
 801a790:	0032      	movs	r2, r6
 801a792:	003b      	movs	r3, r7
 801a794:	0030      	movs	r0, r6
 801a796:	0039      	movs	r1, r7
 801a798:	f7e8 fdaa 	bl	80032f0 <__aeabi_dcmpun>
 801a79c:	2800      	cmp	r0, #0
 801a79e:	d00b      	beq.n	801a7b8 <_printf_float+0xec>
 801a7a0:	2f00      	cmp	r7, #0
 801a7a2:	da03      	bge.n	801a7ac <_printf_float+0xe0>
 801a7a4:	002b      	movs	r3, r5
 801a7a6:	222d      	movs	r2, #45	@ 0x2d
 801a7a8:	3343      	adds	r3, #67	@ 0x43
 801a7aa:	701a      	strb	r2, [r3, #0]
 801a7ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7ae:	4f87      	ldr	r7, [pc, #540]	@ (801a9cc <_printf_float+0x300>)
 801a7b0:	2b47      	cmp	r3, #71	@ 0x47
 801a7b2:	d9d5      	bls.n	801a760 <_printf_float+0x94>
 801a7b4:	4f86      	ldr	r7, [pc, #536]	@ (801a9d0 <_printf_float+0x304>)
 801a7b6:	e7d3      	b.n	801a760 <_printf_float+0x94>
 801a7b8:	2220      	movs	r2, #32
 801a7ba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801a7bc:	686b      	ldr	r3, [r5, #4]
 801a7be:	4394      	bics	r4, r2
 801a7c0:	1c5a      	adds	r2, r3, #1
 801a7c2:	d146      	bne.n	801a852 <_printf_float+0x186>
 801a7c4:	3307      	adds	r3, #7
 801a7c6:	606b      	str	r3, [r5, #4]
 801a7c8:	2380      	movs	r3, #128	@ 0x80
 801a7ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a7cc:	00db      	lsls	r3, r3, #3
 801a7ce:	4313      	orrs	r3, r2
 801a7d0:	2200      	movs	r2, #0
 801a7d2:	602b      	str	r3, [r5, #0]
 801a7d4:	9206      	str	r2, [sp, #24]
 801a7d6:	aa14      	add	r2, sp, #80	@ 0x50
 801a7d8:	9205      	str	r2, [sp, #20]
 801a7da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a7dc:	a90a      	add	r1, sp, #40	@ 0x28
 801a7de:	9204      	str	r2, [sp, #16]
 801a7e0:	aa13      	add	r2, sp, #76	@ 0x4c
 801a7e2:	9203      	str	r2, [sp, #12]
 801a7e4:	2223      	movs	r2, #35	@ 0x23
 801a7e6:	1852      	adds	r2, r2, r1
 801a7e8:	9202      	str	r2, [sp, #8]
 801a7ea:	9301      	str	r3, [sp, #4]
 801a7ec:	686b      	ldr	r3, [r5, #4]
 801a7ee:	0032      	movs	r2, r6
 801a7f0:	9300      	str	r3, [sp, #0]
 801a7f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a7f4:	003b      	movs	r3, r7
 801a7f6:	f7ff fec3 	bl	801a580 <__cvt>
 801a7fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a7fc:	0007      	movs	r7, r0
 801a7fe:	2c47      	cmp	r4, #71	@ 0x47
 801a800:	d12d      	bne.n	801a85e <_printf_float+0x192>
 801a802:	1cd3      	adds	r3, r2, #3
 801a804:	db02      	blt.n	801a80c <_printf_float+0x140>
 801a806:	686b      	ldr	r3, [r5, #4]
 801a808:	429a      	cmp	r2, r3
 801a80a:	dd48      	ble.n	801a89e <_printf_float+0x1d2>
 801a80c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a80e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a810:	3b02      	subs	r3, #2
 801a812:	b2db      	uxtb	r3, r3
 801a814:	930c      	str	r3, [sp, #48]	@ 0x30
 801a816:	0028      	movs	r0, r5
 801a818:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a81a:	3901      	subs	r1, #1
 801a81c:	3050      	adds	r0, #80	@ 0x50
 801a81e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a820:	f7ff ff14 	bl	801a64c <__exponent>
 801a824:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a826:	0004      	movs	r4, r0
 801a828:	1813      	adds	r3, r2, r0
 801a82a:	612b      	str	r3, [r5, #16]
 801a82c:	2a01      	cmp	r2, #1
 801a82e:	dc02      	bgt.n	801a836 <_printf_float+0x16a>
 801a830:	682a      	ldr	r2, [r5, #0]
 801a832:	07d2      	lsls	r2, r2, #31
 801a834:	d501      	bpl.n	801a83a <_printf_float+0x16e>
 801a836:	3301      	adds	r3, #1
 801a838:	612b      	str	r3, [r5, #16]
 801a83a:	2323      	movs	r3, #35	@ 0x23
 801a83c:	aa0a      	add	r2, sp, #40	@ 0x28
 801a83e:	189b      	adds	r3, r3, r2
 801a840:	781b      	ldrb	r3, [r3, #0]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d100      	bne.n	801a848 <_printf_float+0x17c>
 801a846:	e792      	b.n	801a76e <_printf_float+0xa2>
 801a848:	002b      	movs	r3, r5
 801a84a:	222d      	movs	r2, #45	@ 0x2d
 801a84c:	3343      	adds	r3, #67	@ 0x43
 801a84e:	701a      	strb	r2, [r3, #0]
 801a850:	e78d      	b.n	801a76e <_printf_float+0xa2>
 801a852:	2c47      	cmp	r4, #71	@ 0x47
 801a854:	d1b8      	bne.n	801a7c8 <_printf_float+0xfc>
 801a856:	2b00      	cmp	r3, #0
 801a858:	d1b6      	bne.n	801a7c8 <_printf_float+0xfc>
 801a85a:	3301      	adds	r3, #1
 801a85c:	e7b3      	b.n	801a7c6 <_printf_float+0xfa>
 801a85e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a860:	0011      	movs	r1, r2
 801a862:	2b65      	cmp	r3, #101	@ 0x65
 801a864:	d9d7      	bls.n	801a816 <_printf_float+0x14a>
 801a866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a868:	2b66      	cmp	r3, #102	@ 0x66
 801a86a:	d11a      	bne.n	801a8a2 <_printf_float+0x1d6>
 801a86c:	686b      	ldr	r3, [r5, #4]
 801a86e:	2a00      	cmp	r2, #0
 801a870:	dd09      	ble.n	801a886 <_printf_float+0x1ba>
 801a872:	612a      	str	r2, [r5, #16]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d102      	bne.n	801a87e <_printf_float+0x1b2>
 801a878:	6829      	ldr	r1, [r5, #0]
 801a87a:	07c9      	lsls	r1, r1, #31
 801a87c:	d50b      	bpl.n	801a896 <_printf_float+0x1ca>
 801a87e:	3301      	adds	r3, #1
 801a880:	189b      	adds	r3, r3, r2
 801a882:	612b      	str	r3, [r5, #16]
 801a884:	e007      	b.n	801a896 <_printf_float+0x1ca>
 801a886:	2b00      	cmp	r3, #0
 801a888:	d103      	bne.n	801a892 <_printf_float+0x1c6>
 801a88a:	2201      	movs	r2, #1
 801a88c:	6829      	ldr	r1, [r5, #0]
 801a88e:	4211      	tst	r1, r2
 801a890:	d000      	beq.n	801a894 <_printf_float+0x1c8>
 801a892:	1c9a      	adds	r2, r3, #2
 801a894:	612a      	str	r2, [r5, #16]
 801a896:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a898:	2400      	movs	r4, #0
 801a89a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801a89c:	e7cd      	b.n	801a83a <_printf_float+0x16e>
 801a89e:	2367      	movs	r3, #103	@ 0x67
 801a8a0:	930c      	str	r3, [sp, #48]	@ 0x30
 801a8a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a8a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a8a6:	4299      	cmp	r1, r3
 801a8a8:	db06      	blt.n	801a8b8 <_printf_float+0x1ec>
 801a8aa:	682b      	ldr	r3, [r5, #0]
 801a8ac:	6129      	str	r1, [r5, #16]
 801a8ae:	07db      	lsls	r3, r3, #31
 801a8b0:	d5f1      	bpl.n	801a896 <_printf_float+0x1ca>
 801a8b2:	3101      	adds	r1, #1
 801a8b4:	6129      	str	r1, [r5, #16]
 801a8b6:	e7ee      	b.n	801a896 <_printf_float+0x1ca>
 801a8b8:	2201      	movs	r2, #1
 801a8ba:	2900      	cmp	r1, #0
 801a8bc:	dce0      	bgt.n	801a880 <_printf_float+0x1b4>
 801a8be:	1892      	adds	r2, r2, r2
 801a8c0:	1a52      	subs	r2, r2, r1
 801a8c2:	e7dd      	b.n	801a880 <_printf_float+0x1b4>
 801a8c4:	682a      	ldr	r2, [r5, #0]
 801a8c6:	0553      	lsls	r3, r2, #21
 801a8c8:	d408      	bmi.n	801a8dc <_printf_float+0x210>
 801a8ca:	692b      	ldr	r3, [r5, #16]
 801a8cc:	003a      	movs	r2, r7
 801a8ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a8d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a8d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a8d4:	47a0      	blx	r4
 801a8d6:	3001      	adds	r0, #1
 801a8d8:	d129      	bne.n	801a92e <_printf_float+0x262>
 801a8da:	e753      	b.n	801a784 <_printf_float+0xb8>
 801a8dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8de:	2b65      	cmp	r3, #101	@ 0x65
 801a8e0:	d800      	bhi.n	801a8e4 <_printf_float+0x218>
 801a8e2:	e0da      	b.n	801aa9a <_printf_float+0x3ce>
 801a8e4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801a8e6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	f7e5 fdd6 	bl	800049c <__aeabi_dcmpeq>
 801a8f0:	2800      	cmp	r0, #0
 801a8f2:	d033      	beq.n	801a95c <_printf_float+0x290>
 801a8f4:	2301      	movs	r3, #1
 801a8f6:	4a37      	ldr	r2, [pc, #220]	@ (801a9d4 <_printf_float+0x308>)
 801a8f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a8fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a8fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a8fe:	47a0      	blx	r4
 801a900:	3001      	adds	r0, #1
 801a902:	d100      	bne.n	801a906 <_printf_float+0x23a>
 801a904:	e73e      	b.n	801a784 <_printf_float+0xb8>
 801a906:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a908:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a90a:	42b3      	cmp	r3, r6
 801a90c:	db02      	blt.n	801a914 <_printf_float+0x248>
 801a90e:	682b      	ldr	r3, [r5, #0]
 801a910:	07db      	lsls	r3, r3, #31
 801a912:	d50c      	bpl.n	801a92e <_printf_float+0x262>
 801a914:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a918:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a91a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a91c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a91e:	47a0      	blx	r4
 801a920:	2400      	movs	r4, #0
 801a922:	3001      	adds	r0, #1
 801a924:	d100      	bne.n	801a928 <_printf_float+0x25c>
 801a926:	e72d      	b.n	801a784 <_printf_float+0xb8>
 801a928:	1e73      	subs	r3, r6, #1
 801a92a:	42a3      	cmp	r3, r4
 801a92c:	dc0a      	bgt.n	801a944 <_printf_float+0x278>
 801a92e:	682b      	ldr	r3, [r5, #0]
 801a930:	079b      	lsls	r3, r3, #30
 801a932:	d500      	bpl.n	801a936 <_printf_float+0x26a>
 801a934:	e105      	b.n	801ab42 <_printf_float+0x476>
 801a936:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a938:	68e8      	ldr	r0, [r5, #12]
 801a93a:	4298      	cmp	r0, r3
 801a93c:	db00      	blt.n	801a940 <_printf_float+0x274>
 801a93e:	e723      	b.n	801a788 <_printf_float+0xbc>
 801a940:	0018      	movs	r0, r3
 801a942:	e721      	b.n	801a788 <_printf_float+0xbc>
 801a944:	002a      	movs	r2, r5
 801a946:	2301      	movs	r3, #1
 801a948:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a94a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a94c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a94e:	321a      	adds	r2, #26
 801a950:	47b8      	blx	r7
 801a952:	3001      	adds	r0, #1
 801a954:	d100      	bne.n	801a958 <_printf_float+0x28c>
 801a956:	e715      	b.n	801a784 <_printf_float+0xb8>
 801a958:	3401      	adds	r4, #1
 801a95a:	e7e5      	b.n	801a928 <_printf_float+0x25c>
 801a95c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a95e:	2b00      	cmp	r3, #0
 801a960:	dc3a      	bgt.n	801a9d8 <_printf_float+0x30c>
 801a962:	2301      	movs	r3, #1
 801a964:	4a1b      	ldr	r2, [pc, #108]	@ (801a9d4 <_printf_float+0x308>)
 801a966:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a968:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a96a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a96c:	47a0      	blx	r4
 801a96e:	3001      	adds	r0, #1
 801a970:	d100      	bne.n	801a974 <_printf_float+0x2a8>
 801a972:	e707      	b.n	801a784 <_printf_float+0xb8>
 801a974:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a976:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a978:	4333      	orrs	r3, r6
 801a97a:	d102      	bne.n	801a982 <_printf_float+0x2b6>
 801a97c:	682b      	ldr	r3, [r5, #0]
 801a97e:	07db      	lsls	r3, r3, #31
 801a980:	d5d5      	bpl.n	801a92e <_printf_float+0x262>
 801a982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a986:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a988:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a98a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a98c:	47a0      	blx	r4
 801a98e:	2300      	movs	r3, #0
 801a990:	3001      	adds	r0, #1
 801a992:	d100      	bne.n	801a996 <_printf_float+0x2ca>
 801a994:	e6f6      	b.n	801a784 <_printf_float+0xb8>
 801a996:	930c      	str	r3, [sp, #48]	@ 0x30
 801a998:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a99a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a99c:	425b      	negs	r3, r3
 801a99e:	4293      	cmp	r3, r2
 801a9a0:	dc01      	bgt.n	801a9a6 <_printf_float+0x2da>
 801a9a2:	0033      	movs	r3, r6
 801a9a4:	e792      	b.n	801a8cc <_printf_float+0x200>
 801a9a6:	002a      	movs	r2, r5
 801a9a8:	2301      	movs	r3, #1
 801a9aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a9ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a9ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a9b0:	321a      	adds	r2, #26
 801a9b2:	47a0      	blx	r4
 801a9b4:	3001      	adds	r0, #1
 801a9b6:	d100      	bne.n	801a9ba <_printf_float+0x2ee>
 801a9b8:	e6e4      	b.n	801a784 <_printf_float+0xb8>
 801a9ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a9bc:	3301      	adds	r3, #1
 801a9be:	e7ea      	b.n	801a996 <_printf_float+0x2ca>
 801a9c0:	7fefffff 	.word	0x7fefffff
 801a9c4:	0801f850 	.word	0x0801f850
 801a9c8:	0801f854 	.word	0x0801f854
 801a9cc:	0801f858 	.word	0x0801f858
 801a9d0:	0801f85c 	.word	0x0801f85c
 801a9d4:	0801f860 	.word	0x0801f860
 801a9d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a9da:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801a9dc:	930c      	str	r3, [sp, #48]	@ 0x30
 801a9de:	429e      	cmp	r6, r3
 801a9e0:	dd00      	ble.n	801a9e4 <_printf_float+0x318>
 801a9e2:	001e      	movs	r6, r3
 801a9e4:	2e00      	cmp	r6, #0
 801a9e6:	dc31      	bgt.n	801aa4c <_printf_float+0x380>
 801a9e8:	43f3      	mvns	r3, r6
 801a9ea:	2400      	movs	r4, #0
 801a9ec:	17db      	asrs	r3, r3, #31
 801a9ee:	4033      	ands	r3, r6
 801a9f0:	930e      	str	r3, [sp, #56]	@ 0x38
 801a9f2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801a9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a9f6:	1af3      	subs	r3, r6, r3
 801a9f8:	42a3      	cmp	r3, r4
 801a9fa:	dc30      	bgt.n	801aa5e <_printf_float+0x392>
 801a9fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a9fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa00:	429a      	cmp	r2, r3
 801aa02:	dc38      	bgt.n	801aa76 <_printf_float+0x3aa>
 801aa04:	682b      	ldr	r3, [r5, #0]
 801aa06:	07db      	lsls	r3, r3, #31
 801aa08:	d435      	bmi.n	801aa76 <_printf_float+0x3aa>
 801aa0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801aa0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa10:	1b9b      	subs	r3, r3, r6
 801aa12:	1b14      	subs	r4, r2, r4
 801aa14:	429c      	cmp	r4, r3
 801aa16:	dd00      	ble.n	801aa1a <_printf_float+0x34e>
 801aa18:	001c      	movs	r4, r3
 801aa1a:	2c00      	cmp	r4, #0
 801aa1c:	dc34      	bgt.n	801aa88 <_printf_float+0x3bc>
 801aa1e:	43e3      	mvns	r3, r4
 801aa20:	2600      	movs	r6, #0
 801aa22:	17db      	asrs	r3, r3, #31
 801aa24:	401c      	ands	r4, r3
 801aa26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801aa28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa2a:	1ad3      	subs	r3, r2, r3
 801aa2c:	1b1b      	subs	r3, r3, r4
 801aa2e:	42b3      	cmp	r3, r6
 801aa30:	dc00      	bgt.n	801aa34 <_printf_float+0x368>
 801aa32:	e77c      	b.n	801a92e <_printf_float+0x262>
 801aa34:	002a      	movs	r2, r5
 801aa36:	2301      	movs	r3, #1
 801aa38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801aa3e:	321a      	adds	r2, #26
 801aa40:	47b8      	blx	r7
 801aa42:	3001      	adds	r0, #1
 801aa44:	d100      	bne.n	801aa48 <_printf_float+0x37c>
 801aa46:	e69d      	b.n	801a784 <_printf_float+0xb8>
 801aa48:	3601      	adds	r6, #1
 801aa4a:	e7ec      	b.n	801aa26 <_printf_float+0x35a>
 801aa4c:	0033      	movs	r3, r6
 801aa4e:	003a      	movs	r2, r7
 801aa50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801aa56:	47a0      	blx	r4
 801aa58:	3001      	adds	r0, #1
 801aa5a:	d1c5      	bne.n	801a9e8 <_printf_float+0x31c>
 801aa5c:	e692      	b.n	801a784 <_printf_float+0xb8>
 801aa5e:	002a      	movs	r2, r5
 801aa60:	2301      	movs	r3, #1
 801aa62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa66:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aa68:	321a      	adds	r2, #26
 801aa6a:	47b0      	blx	r6
 801aa6c:	3001      	adds	r0, #1
 801aa6e:	d100      	bne.n	801aa72 <_printf_float+0x3a6>
 801aa70:	e688      	b.n	801a784 <_printf_float+0xb8>
 801aa72:	3401      	adds	r4, #1
 801aa74:	e7bd      	b.n	801a9f2 <_printf_float+0x326>
 801aa76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aa7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801aa80:	47a0      	blx	r4
 801aa82:	3001      	adds	r0, #1
 801aa84:	d1c1      	bne.n	801aa0a <_printf_float+0x33e>
 801aa86:	e67d      	b.n	801a784 <_printf_float+0xb8>
 801aa88:	19ba      	adds	r2, r7, r6
 801aa8a:	0023      	movs	r3, r4
 801aa8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa90:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aa92:	47b0      	blx	r6
 801aa94:	3001      	adds	r0, #1
 801aa96:	d1c2      	bne.n	801aa1e <_printf_float+0x352>
 801aa98:	e674      	b.n	801a784 <_printf_float+0xb8>
 801aa9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801aa9c:	930c      	str	r3, [sp, #48]	@ 0x30
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	dc02      	bgt.n	801aaa8 <_printf_float+0x3dc>
 801aaa2:	2301      	movs	r3, #1
 801aaa4:	421a      	tst	r2, r3
 801aaa6:	d039      	beq.n	801ab1c <_printf_float+0x450>
 801aaa8:	2301      	movs	r3, #1
 801aaaa:	003a      	movs	r2, r7
 801aaac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aaae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aab0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aab2:	47b0      	blx	r6
 801aab4:	3001      	adds	r0, #1
 801aab6:	d100      	bne.n	801aaba <_printf_float+0x3ee>
 801aab8:	e664      	b.n	801a784 <_printf_float+0xb8>
 801aaba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aabc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aabe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aac0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aac2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aac4:	47b0      	blx	r6
 801aac6:	3001      	adds	r0, #1
 801aac8:	d100      	bne.n	801aacc <_printf_float+0x400>
 801aaca:	e65b      	b.n	801a784 <_printf_float+0xb8>
 801aacc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801aace:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801aad0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aad2:	2200      	movs	r2, #0
 801aad4:	3b01      	subs	r3, #1
 801aad6:	930c      	str	r3, [sp, #48]	@ 0x30
 801aad8:	2300      	movs	r3, #0
 801aada:	f7e5 fcdf 	bl	800049c <__aeabi_dcmpeq>
 801aade:	2800      	cmp	r0, #0
 801aae0:	d11a      	bne.n	801ab18 <_printf_float+0x44c>
 801aae2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aae4:	1c7a      	adds	r2, r7, #1
 801aae6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aae8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aaea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aaec:	47b0      	blx	r6
 801aaee:	3001      	adds	r0, #1
 801aaf0:	d10e      	bne.n	801ab10 <_printf_float+0x444>
 801aaf2:	e647      	b.n	801a784 <_printf_float+0xb8>
 801aaf4:	002a      	movs	r2, r5
 801aaf6:	2301      	movs	r3, #1
 801aaf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aafa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aafc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801aafe:	321a      	adds	r2, #26
 801ab00:	47b8      	blx	r7
 801ab02:	3001      	adds	r0, #1
 801ab04:	d100      	bne.n	801ab08 <_printf_float+0x43c>
 801ab06:	e63d      	b.n	801a784 <_printf_float+0xb8>
 801ab08:	3601      	adds	r6, #1
 801ab0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab0c:	429e      	cmp	r6, r3
 801ab0e:	dbf1      	blt.n	801aaf4 <_printf_float+0x428>
 801ab10:	002a      	movs	r2, r5
 801ab12:	0023      	movs	r3, r4
 801ab14:	3250      	adds	r2, #80	@ 0x50
 801ab16:	e6da      	b.n	801a8ce <_printf_float+0x202>
 801ab18:	2600      	movs	r6, #0
 801ab1a:	e7f6      	b.n	801ab0a <_printf_float+0x43e>
 801ab1c:	003a      	movs	r2, r7
 801ab1e:	e7e2      	b.n	801aae6 <_printf_float+0x41a>
 801ab20:	002a      	movs	r2, r5
 801ab22:	2301      	movs	r3, #1
 801ab24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ab26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ab28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ab2a:	3219      	adds	r2, #25
 801ab2c:	47b0      	blx	r6
 801ab2e:	3001      	adds	r0, #1
 801ab30:	d100      	bne.n	801ab34 <_printf_float+0x468>
 801ab32:	e627      	b.n	801a784 <_printf_float+0xb8>
 801ab34:	3401      	adds	r4, #1
 801ab36:	68eb      	ldr	r3, [r5, #12]
 801ab38:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ab3a:	1a9b      	subs	r3, r3, r2
 801ab3c:	42a3      	cmp	r3, r4
 801ab3e:	dcef      	bgt.n	801ab20 <_printf_float+0x454>
 801ab40:	e6f9      	b.n	801a936 <_printf_float+0x26a>
 801ab42:	2400      	movs	r4, #0
 801ab44:	e7f7      	b.n	801ab36 <_printf_float+0x46a>
 801ab46:	46c0      	nop			@ (mov r8, r8)

0801ab48 <_printf_common>:
 801ab48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ab4a:	0016      	movs	r6, r2
 801ab4c:	9301      	str	r3, [sp, #4]
 801ab4e:	688a      	ldr	r2, [r1, #8]
 801ab50:	690b      	ldr	r3, [r1, #16]
 801ab52:	000c      	movs	r4, r1
 801ab54:	9000      	str	r0, [sp, #0]
 801ab56:	4293      	cmp	r3, r2
 801ab58:	da00      	bge.n	801ab5c <_printf_common+0x14>
 801ab5a:	0013      	movs	r3, r2
 801ab5c:	0022      	movs	r2, r4
 801ab5e:	6033      	str	r3, [r6, #0]
 801ab60:	3243      	adds	r2, #67	@ 0x43
 801ab62:	7812      	ldrb	r2, [r2, #0]
 801ab64:	2a00      	cmp	r2, #0
 801ab66:	d001      	beq.n	801ab6c <_printf_common+0x24>
 801ab68:	3301      	adds	r3, #1
 801ab6a:	6033      	str	r3, [r6, #0]
 801ab6c:	6823      	ldr	r3, [r4, #0]
 801ab6e:	069b      	lsls	r3, r3, #26
 801ab70:	d502      	bpl.n	801ab78 <_printf_common+0x30>
 801ab72:	6833      	ldr	r3, [r6, #0]
 801ab74:	3302      	adds	r3, #2
 801ab76:	6033      	str	r3, [r6, #0]
 801ab78:	6822      	ldr	r2, [r4, #0]
 801ab7a:	2306      	movs	r3, #6
 801ab7c:	0015      	movs	r5, r2
 801ab7e:	401d      	ands	r5, r3
 801ab80:	421a      	tst	r2, r3
 801ab82:	d027      	beq.n	801abd4 <_printf_common+0x8c>
 801ab84:	0023      	movs	r3, r4
 801ab86:	3343      	adds	r3, #67	@ 0x43
 801ab88:	781b      	ldrb	r3, [r3, #0]
 801ab8a:	1e5a      	subs	r2, r3, #1
 801ab8c:	4193      	sbcs	r3, r2
 801ab8e:	6822      	ldr	r2, [r4, #0]
 801ab90:	0692      	lsls	r2, r2, #26
 801ab92:	d430      	bmi.n	801abf6 <_printf_common+0xae>
 801ab94:	0022      	movs	r2, r4
 801ab96:	9901      	ldr	r1, [sp, #4]
 801ab98:	9800      	ldr	r0, [sp, #0]
 801ab9a:	9d08      	ldr	r5, [sp, #32]
 801ab9c:	3243      	adds	r2, #67	@ 0x43
 801ab9e:	47a8      	blx	r5
 801aba0:	3001      	adds	r0, #1
 801aba2:	d025      	beq.n	801abf0 <_printf_common+0xa8>
 801aba4:	2206      	movs	r2, #6
 801aba6:	6823      	ldr	r3, [r4, #0]
 801aba8:	2500      	movs	r5, #0
 801abaa:	4013      	ands	r3, r2
 801abac:	2b04      	cmp	r3, #4
 801abae:	d105      	bne.n	801abbc <_printf_common+0x74>
 801abb0:	6833      	ldr	r3, [r6, #0]
 801abb2:	68e5      	ldr	r5, [r4, #12]
 801abb4:	1aed      	subs	r5, r5, r3
 801abb6:	43eb      	mvns	r3, r5
 801abb8:	17db      	asrs	r3, r3, #31
 801abba:	401d      	ands	r5, r3
 801abbc:	68a3      	ldr	r3, [r4, #8]
 801abbe:	6922      	ldr	r2, [r4, #16]
 801abc0:	4293      	cmp	r3, r2
 801abc2:	dd01      	ble.n	801abc8 <_printf_common+0x80>
 801abc4:	1a9b      	subs	r3, r3, r2
 801abc6:	18ed      	adds	r5, r5, r3
 801abc8:	2600      	movs	r6, #0
 801abca:	42b5      	cmp	r5, r6
 801abcc:	d120      	bne.n	801ac10 <_printf_common+0xc8>
 801abce:	2000      	movs	r0, #0
 801abd0:	e010      	b.n	801abf4 <_printf_common+0xac>
 801abd2:	3501      	adds	r5, #1
 801abd4:	68e3      	ldr	r3, [r4, #12]
 801abd6:	6832      	ldr	r2, [r6, #0]
 801abd8:	1a9b      	subs	r3, r3, r2
 801abda:	42ab      	cmp	r3, r5
 801abdc:	ddd2      	ble.n	801ab84 <_printf_common+0x3c>
 801abde:	0022      	movs	r2, r4
 801abe0:	2301      	movs	r3, #1
 801abe2:	9901      	ldr	r1, [sp, #4]
 801abe4:	9800      	ldr	r0, [sp, #0]
 801abe6:	9f08      	ldr	r7, [sp, #32]
 801abe8:	3219      	adds	r2, #25
 801abea:	47b8      	blx	r7
 801abec:	3001      	adds	r0, #1
 801abee:	d1f0      	bne.n	801abd2 <_printf_common+0x8a>
 801abf0:	2001      	movs	r0, #1
 801abf2:	4240      	negs	r0, r0
 801abf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801abf6:	2030      	movs	r0, #48	@ 0x30
 801abf8:	18e1      	adds	r1, r4, r3
 801abfa:	3143      	adds	r1, #67	@ 0x43
 801abfc:	7008      	strb	r0, [r1, #0]
 801abfe:	0021      	movs	r1, r4
 801ac00:	1c5a      	adds	r2, r3, #1
 801ac02:	3145      	adds	r1, #69	@ 0x45
 801ac04:	7809      	ldrb	r1, [r1, #0]
 801ac06:	18a2      	adds	r2, r4, r2
 801ac08:	3243      	adds	r2, #67	@ 0x43
 801ac0a:	3302      	adds	r3, #2
 801ac0c:	7011      	strb	r1, [r2, #0]
 801ac0e:	e7c1      	b.n	801ab94 <_printf_common+0x4c>
 801ac10:	0022      	movs	r2, r4
 801ac12:	2301      	movs	r3, #1
 801ac14:	9901      	ldr	r1, [sp, #4]
 801ac16:	9800      	ldr	r0, [sp, #0]
 801ac18:	9f08      	ldr	r7, [sp, #32]
 801ac1a:	321a      	adds	r2, #26
 801ac1c:	47b8      	blx	r7
 801ac1e:	3001      	adds	r0, #1
 801ac20:	d0e6      	beq.n	801abf0 <_printf_common+0xa8>
 801ac22:	3601      	adds	r6, #1
 801ac24:	e7d1      	b.n	801abca <_printf_common+0x82>
	...

0801ac28 <_printf_i>:
 801ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac2a:	b08b      	sub	sp, #44	@ 0x2c
 801ac2c:	9206      	str	r2, [sp, #24]
 801ac2e:	000a      	movs	r2, r1
 801ac30:	3243      	adds	r2, #67	@ 0x43
 801ac32:	9307      	str	r3, [sp, #28]
 801ac34:	9005      	str	r0, [sp, #20]
 801ac36:	9203      	str	r2, [sp, #12]
 801ac38:	7e0a      	ldrb	r2, [r1, #24]
 801ac3a:	000c      	movs	r4, r1
 801ac3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ac3e:	2a78      	cmp	r2, #120	@ 0x78
 801ac40:	d809      	bhi.n	801ac56 <_printf_i+0x2e>
 801ac42:	2a62      	cmp	r2, #98	@ 0x62
 801ac44:	d80b      	bhi.n	801ac5e <_printf_i+0x36>
 801ac46:	2a00      	cmp	r2, #0
 801ac48:	d100      	bne.n	801ac4c <_printf_i+0x24>
 801ac4a:	e0bc      	b.n	801adc6 <_printf_i+0x19e>
 801ac4c:	497b      	ldr	r1, [pc, #492]	@ (801ae3c <_printf_i+0x214>)
 801ac4e:	9104      	str	r1, [sp, #16]
 801ac50:	2a58      	cmp	r2, #88	@ 0x58
 801ac52:	d100      	bne.n	801ac56 <_printf_i+0x2e>
 801ac54:	e090      	b.n	801ad78 <_printf_i+0x150>
 801ac56:	0025      	movs	r5, r4
 801ac58:	3542      	adds	r5, #66	@ 0x42
 801ac5a:	702a      	strb	r2, [r5, #0]
 801ac5c:	e022      	b.n	801aca4 <_printf_i+0x7c>
 801ac5e:	0010      	movs	r0, r2
 801ac60:	3863      	subs	r0, #99	@ 0x63
 801ac62:	2815      	cmp	r0, #21
 801ac64:	d8f7      	bhi.n	801ac56 <_printf_i+0x2e>
 801ac66:	f7e5 fa89 	bl	800017c <__gnu_thumb1_case_shi>
 801ac6a:	0016      	.short	0x0016
 801ac6c:	fff6001f 	.word	0xfff6001f
 801ac70:	fff6fff6 	.word	0xfff6fff6
 801ac74:	001ffff6 	.word	0x001ffff6
 801ac78:	fff6fff6 	.word	0xfff6fff6
 801ac7c:	fff6fff6 	.word	0xfff6fff6
 801ac80:	003600a1 	.word	0x003600a1
 801ac84:	fff60080 	.word	0xfff60080
 801ac88:	00b2fff6 	.word	0x00b2fff6
 801ac8c:	0036fff6 	.word	0x0036fff6
 801ac90:	fff6fff6 	.word	0xfff6fff6
 801ac94:	0084      	.short	0x0084
 801ac96:	0025      	movs	r5, r4
 801ac98:	681a      	ldr	r2, [r3, #0]
 801ac9a:	3542      	adds	r5, #66	@ 0x42
 801ac9c:	1d11      	adds	r1, r2, #4
 801ac9e:	6019      	str	r1, [r3, #0]
 801aca0:	6813      	ldr	r3, [r2, #0]
 801aca2:	702b      	strb	r3, [r5, #0]
 801aca4:	2301      	movs	r3, #1
 801aca6:	e0a0      	b.n	801adea <_printf_i+0x1c2>
 801aca8:	6818      	ldr	r0, [r3, #0]
 801acaa:	6809      	ldr	r1, [r1, #0]
 801acac:	1d02      	adds	r2, r0, #4
 801acae:	060d      	lsls	r5, r1, #24
 801acb0:	d50b      	bpl.n	801acca <_printf_i+0xa2>
 801acb2:	6806      	ldr	r6, [r0, #0]
 801acb4:	601a      	str	r2, [r3, #0]
 801acb6:	2e00      	cmp	r6, #0
 801acb8:	da03      	bge.n	801acc2 <_printf_i+0x9a>
 801acba:	232d      	movs	r3, #45	@ 0x2d
 801acbc:	9a03      	ldr	r2, [sp, #12]
 801acbe:	4276      	negs	r6, r6
 801acc0:	7013      	strb	r3, [r2, #0]
 801acc2:	4b5e      	ldr	r3, [pc, #376]	@ (801ae3c <_printf_i+0x214>)
 801acc4:	270a      	movs	r7, #10
 801acc6:	9304      	str	r3, [sp, #16]
 801acc8:	e018      	b.n	801acfc <_printf_i+0xd4>
 801acca:	6806      	ldr	r6, [r0, #0]
 801accc:	601a      	str	r2, [r3, #0]
 801acce:	0649      	lsls	r1, r1, #25
 801acd0:	d5f1      	bpl.n	801acb6 <_printf_i+0x8e>
 801acd2:	b236      	sxth	r6, r6
 801acd4:	e7ef      	b.n	801acb6 <_printf_i+0x8e>
 801acd6:	6808      	ldr	r0, [r1, #0]
 801acd8:	6819      	ldr	r1, [r3, #0]
 801acda:	c940      	ldmia	r1!, {r6}
 801acdc:	0605      	lsls	r5, r0, #24
 801acde:	d402      	bmi.n	801ace6 <_printf_i+0xbe>
 801ace0:	0640      	lsls	r0, r0, #25
 801ace2:	d500      	bpl.n	801ace6 <_printf_i+0xbe>
 801ace4:	b2b6      	uxth	r6, r6
 801ace6:	6019      	str	r1, [r3, #0]
 801ace8:	4b54      	ldr	r3, [pc, #336]	@ (801ae3c <_printf_i+0x214>)
 801acea:	270a      	movs	r7, #10
 801acec:	9304      	str	r3, [sp, #16]
 801acee:	2a6f      	cmp	r2, #111	@ 0x6f
 801acf0:	d100      	bne.n	801acf4 <_printf_i+0xcc>
 801acf2:	3f02      	subs	r7, #2
 801acf4:	0023      	movs	r3, r4
 801acf6:	2200      	movs	r2, #0
 801acf8:	3343      	adds	r3, #67	@ 0x43
 801acfa:	701a      	strb	r2, [r3, #0]
 801acfc:	6863      	ldr	r3, [r4, #4]
 801acfe:	60a3      	str	r3, [r4, #8]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	db03      	blt.n	801ad0c <_printf_i+0xe4>
 801ad04:	2104      	movs	r1, #4
 801ad06:	6822      	ldr	r2, [r4, #0]
 801ad08:	438a      	bics	r2, r1
 801ad0a:	6022      	str	r2, [r4, #0]
 801ad0c:	2e00      	cmp	r6, #0
 801ad0e:	d102      	bne.n	801ad16 <_printf_i+0xee>
 801ad10:	9d03      	ldr	r5, [sp, #12]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d00c      	beq.n	801ad30 <_printf_i+0x108>
 801ad16:	9d03      	ldr	r5, [sp, #12]
 801ad18:	0030      	movs	r0, r6
 801ad1a:	0039      	movs	r1, r7
 801ad1c:	f7e5 fabe 	bl	800029c <__aeabi_uidivmod>
 801ad20:	9b04      	ldr	r3, [sp, #16]
 801ad22:	3d01      	subs	r5, #1
 801ad24:	5c5b      	ldrb	r3, [r3, r1]
 801ad26:	702b      	strb	r3, [r5, #0]
 801ad28:	0033      	movs	r3, r6
 801ad2a:	0006      	movs	r6, r0
 801ad2c:	429f      	cmp	r7, r3
 801ad2e:	d9f3      	bls.n	801ad18 <_printf_i+0xf0>
 801ad30:	2f08      	cmp	r7, #8
 801ad32:	d109      	bne.n	801ad48 <_printf_i+0x120>
 801ad34:	6823      	ldr	r3, [r4, #0]
 801ad36:	07db      	lsls	r3, r3, #31
 801ad38:	d506      	bpl.n	801ad48 <_printf_i+0x120>
 801ad3a:	6862      	ldr	r2, [r4, #4]
 801ad3c:	6923      	ldr	r3, [r4, #16]
 801ad3e:	429a      	cmp	r2, r3
 801ad40:	dc02      	bgt.n	801ad48 <_printf_i+0x120>
 801ad42:	2330      	movs	r3, #48	@ 0x30
 801ad44:	3d01      	subs	r5, #1
 801ad46:	702b      	strb	r3, [r5, #0]
 801ad48:	9b03      	ldr	r3, [sp, #12]
 801ad4a:	1b5b      	subs	r3, r3, r5
 801ad4c:	6123      	str	r3, [r4, #16]
 801ad4e:	9b07      	ldr	r3, [sp, #28]
 801ad50:	0021      	movs	r1, r4
 801ad52:	9300      	str	r3, [sp, #0]
 801ad54:	9805      	ldr	r0, [sp, #20]
 801ad56:	9b06      	ldr	r3, [sp, #24]
 801ad58:	aa09      	add	r2, sp, #36	@ 0x24
 801ad5a:	f7ff fef5 	bl	801ab48 <_printf_common>
 801ad5e:	3001      	adds	r0, #1
 801ad60:	d148      	bne.n	801adf4 <_printf_i+0x1cc>
 801ad62:	2001      	movs	r0, #1
 801ad64:	4240      	negs	r0, r0
 801ad66:	b00b      	add	sp, #44	@ 0x2c
 801ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad6a:	2220      	movs	r2, #32
 801ad6c:	6809      	ldr	r1, [r1, #0]
 801ad6e:	430a      	orrs	r2, r1
 801ad70:	6022      	str	r2, [r4, #0]
 801ad72:	2278      	movs	r2, #120	@ 0x78
 801ad74:	4932      	ldr	r1, [pc, #200]	@ (801ae40 <_printf_i+0x218>)
 801ad76:	9104      	str	r1, [sp, #16]
 801ad78:	0021      	movs	r1, r4
 801ad7a:	3145      	adds	r1, #69	@ 0x45
 801ad7c:	700a      	strb	r2, [r1, #0]
 801ad7e:	6819      	ldr	r1, [r3, #0]
 801ad80:	6822      	ldr	r2, [r4, #0]
 801ad82:	c940      	ldmia	r1!, {r6}
 801ad84:	0610      	lsls	r0, r2, #24
 801ad86:	d402      	bmi.n	801ad8e <_printf_i+0x166>
 801ad88:	0650      	lsls	r0, r2, #25
 801ad8a:	d500      	bpl.n	801ad8e <_printf_i+0x166>
 801ad8c:	b2b6      	uxth	r6, r6
 801ad8e:	6019      	str	r1, [r3, #0]
 801ad90:	07d3      	lsls	r3, r2, #31
 801ad92:	d502      	bpl.n	801ad9a <_printf_i+0x172>
 801ad94:	2320      	movs	r3, #32
 801ad96:	4313      	orrs	r3, r2
 801ad98:	6023      	str	r3, [r4, #0]
 801ad9a:	2e00      	cmp	r6, #0
 801ad9c:	d001      	beq.n	801ada2 <_printf_i+0x17a>
 801ad9e:	2710      	movs	r7, #16
 801ada0:	e7a8      	b.n	801acf4 <_printf_i+0xcc>
 801ada2:	2220      	movs	r2, #32
 801ada4:	6823      	ldr	r3, [r4, #0]
 801ada6:	4393      	bics	r3, r2
 801ada8:	6023      	str	r3, [r4, #0]
 801adaa:	e7f8      	b.n	801ad9e <_printf_i+0x176>
 801adac:	681a      	ldr	r2, [r3, #0]
 801adae:	680d      	ldr	r5, [r1, #0]
 801adb0:	1d10      	adds	r0, r2, #4
 801adb2:	6949      	ldr	r1, [r1, #20]
 801adb4:	6018      	str	r0, [r3, #0]
 801adb6:	6813      	ldr	r3, [r2, #0]
 801adb8:	062e      	lsls	r6, r5, #24
 801adba:	d501      	bpl.n	801adc0 <_printf_i+0x198>
 801adbc:	6019      	str	r1, [r3, #0]
 801adbe:	e002      	b.n	801adc6 <_printf_i+0x19e>
 801adc0:	066d      	lsls	r5, r5, #25
 801adc2:	d5fb      	bpl.n	801adbc <_printf_i+0x194>
 801adc4:	8019      	strh	r1, [r3, #0]
 801adc6:	2300      	movs	r3, #0
 801adc8:	9d03      	ldr	r5, [sp, #12]
 801adca:	6123      	str	r3, [r4, #16]
 801adcc:	e7bf      	b.n	801ad4e <_printf_i+0x126>
 801adce:	681a      	ldr	r2, [r3, #0]
 801add0:	1d11      	adds	r1, r2, #4
 801add2:	6019      	str	r1, [r3, #0]
 801add4:	6815      	ldr	r5, [r2, #0]
 801add6:	2100      	movs	r1, #0
 801add8:	0028      	movs	r0, r5
 801adda:	6862      	ldr	r2, [r4, #4]
 801addc:	f000 fa7b 	bl	801b2d6 <memchr>
 801ade0:	2800      	cmp	r0, #0
 801ade2:	d001      	beq.n	801ade8 <_printf_i+0x1c0>
 801ade4:	1b40      	subs	r0, r0, r5
 801ade6:	6060      	str	r0, [r4, #4]
 801ade8:	6863      	ldr	r3, [r4, #4]
 801adea:	6123      	str	r3, [r4, #16]
 801adec:	2300      	movs	r3, #0
 801adee:	9a03      	ldr	r2, [sp, #12]
 801adf0:	7013      	strb	r3, [r2, #0]
 801adf2:	e7ac      	b.n	801ad4e <_printf_i+0x126>
 801adf4:	002a      	movs	r2, r5
 801adf6:	6923      	ldr	r3, [r4, #16]
 801adf8:	9906      	ldr	r1, [sp, #24]
 801adfa:	9805      	ldr	r0, [sp, #20]
 801adfc:	9d07      	ldr	r5, [sp, #28]
 801adfe:	47a8      	blx	r5
 801ae00:	3001      	adds	r0, #1
 801ae02:	d0ae      	beq.n	801ad62 <_printf_i+0x13a>
 801ae04:	6823      	ldr	r3, [r4, #0]
 801ae06:	079b      	lsls	r3, r3, #30
 801ae08:	d415      	bmi.n	801ae36 <_printf_i+0x20e>
 801ae0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae0c:	68e0      	ldr	r0, [r4, #12]
 801ae0e:	4298      	cmp	r0, r3
 801ae10:	daa9      	bge.n	801ad66 <_printf_i+0x13e>
 801ae12:	0018      	movs	r0, r3
 801ae14:	e7a7      	b.n	801ad66 <_printf_i+0x13e>
 801ae16:	0022      	movs	r2, r4
 801ae18:	2301      	movs	r3, #1
 801ae1a:	9906      	ldr	r1, [sp, #24]
 801ae1c:	9805      	ldr	r0, [sp, #20]
 801ae1e:	9e07      	ldr	r6, [sp, #28]
 801ae20:	3219      	adds	r2, #25
 801ae22:	47b0      	blx	r6
 801ae24:	3001      	adds	r0, #1
 801ae26:	d09c      	beq.n	801ad62 <_printf_i+0x13a>
 801ae28:	3501      	adds	r5, #1
 801ae2a:	68e3      	ldr	r3, [r4, #12]
 801ae2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae2e:	1a9b      	subs	r3, r3, r2
 801ae30:	42ab      	cmp	r3, r5
 801ae32:	dcf0      	bgt.n	801ae16 <_printf_i+0x1ee>
 801ae34:	e7e9      	b.n	801ae0a <_printf_i+0x1e2>
 801ae36:	2500      	movs	r5, #0
 801ae38:	e7f7      	b.n	801ae2a <_printf_i+0x202>
 801ae3a:	46c0      	nop			@ (mov r8, r8)
 801ae3c:	0801f862 	.word	0x0801f862
 801ae40:	0801f873 	.word	0x0801f873

0801ae44 <std>:
 801ae44:	2300      	movs	r3, #0
 801ae46:	b510      	push	{r4, lr}
 801ae48:	0004      	movs	r4, r0
 801ae4a:	6003      	str	r3, [r0, #0]
 801ae4c:	6043      	str	r3, [r0, #4]
 801ae4e:	6083      	str	r3, [r0, #8]
 801ae50:	8181      	strh	r1, [r0, #12]
 801ae52:	6643      	str	r3, [r0, #100]	@ 0x64
 801ae54:	81c2      	strh	r2, [r0, #14]
 801ae56:	6103      	str	r3, [r0, #16]
 801ae58:	6143      	str	r3, [r0, #20]
 801ae5a:	6183      	str	r3, [r0, #24]
 801ae5c:	0019      	movs	r1, r3
 801ae5e:	2208      	movs	r2, #8
 801ae60:	305c      	adds	r0, #92	@ 0x5c
 801ae62:	f000 f967 	bl	801b134 <memset>
 801ae66:	4b0b      	ldr	r3, [pc, #44]	@ (801ae94 <std+0x50>)
 801ae68:	6224      	str	r4, [r4, #32]
 801ae6a:	6263      	str	r3, [r4, #36]	@ 0x24
 801ae6c:	4b0a      	ldr	r3, [pc, #40]	@ (801ae98 <std+0x54>)
 801ae6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae70:	4b0a      	ldr	r3, [pc, #40]	@ (801ae9c <std+0x58>)
 801ae72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ae74:	4b0a      	ldr	r3, [pc, #40]	@ (801aea0 <std+0x5c>)
 801ae76:	6323      	str	r3, [r4, #48]	@ 0x30
 801ae78:	4b0a      	ldr	r3, [pc, #40]	@ (801aea4 <std+0x60>)
 801ae7a:	429c      	cmp	r4, r3
 801ae7c:	d005      	beq.n	801ae8a <std+0x46>
 801ae7e:	4b0a      	ldr	r3, [pc, #40]	@ (801aea8 <std+0x64>)
 801ae80:	429c      	cmp	r4, r3
 801ae82:	d002      	beq.n	801ae8a <std+0x46>
 801ae84:	4b09      	ldr	r3, [pc, #36]	@ (801aeac <std+0x68>)
 801ae86:	429c      	cmp	r4, r3
 801ae88:	d103      	bne.n	801ae92 <std+0x4e>
 801ae8a:	0020      	movs	r0, r4
 801ae8c:	3058      	adds	r0, #88	@ 0x58
 801ae8e:	f000 fa1f 	bl	801b2d0 <__retarget_lock_init_recursive>
 801ae92:	bd10      	pop	{r4, pc}
 801ae94:	0801b02d 	.word	0x0801b02d
 801ae98:	0801b055 	.word	0x0801b055
 801ae9c:	0801b08d 	.word	0x0801b08d
 801aea0:	0801b0b9 	.word	0x0801b0b9
 801aea4:	20003700 	.word	0x20003700
 801aea8:	20003768 	.word	0x20003768
 801aeac:	200037d0 	.word	0x200037d0

0801aeb0 <stdio_exit_handler>:
 801aeb0:	b510      	push	{r4, lr}
 801aeb2:	4a03      	ldr	r2, [pc, #12]	@ (801aec0 <stdio_exit_handler+0x10>)
 801aeb4:	4903      	ldr	r1, [pc, #12]	@ (801aec4 <stdio_exit_handler+0x14>)
 801aeb6:	4804      	ldr	r0, [pc, #16]	@ (801aec8 <stdio_exit_handler+0x18>)
 801aeb8:	f000 f86c 	bl	801af94 <_fwalk_sglue>
 801aebc:	bd10      	pop	{r4, pc}
 801aebe:	46c0      	nop			@ (mov r8, r8)
 801aec0:	200001fc 	.word	0x200001fc
 801aec4:	0801d8f5 	.word	0x0801d8f5
 801aec8:	20000378 	.word	0x20000378

0801aecc <cleanup_stdio>:
 801aecc:	6841      	ldr	r1, [r0, #4]
 801aece:	4b0b      	ldr	r3, [pc, #44]	@ (801aefc <cleanup_stdio+0x30>)
 801aed0:	b510      	push	{r4, lr}
 801aed2:	0004      	movs	r4, r0
 801aed4:	4299      	cmp	r1, r3
 801aed6:	d001      	beq.n	801aedc <cleanup_stdio+0x10>
 801aed8:	f002 fd0c 	bl	801d8f4 <_fflush_r>
 801aedc:	68a1      	ldr	r1, [r4, #8]
 801aede:	4b08      	ldr	r3, [pc, #32]	@ (801af00 <cleanup_stdio+0x34>)
 801aee0:	4299      	cmp	r1, r3
 801aee2:	d002      	beq.n	801aeea <cleanup_stdio+0x1e>
 801aee4:	0020      	movs	r0, r4
 801aee6:	f002 fd05 	bl	801d8f4 <_fflush_r>
 801aeea:	68e1      	ldr	r1, [r4, #12]
 801aeec:	4b05      	ldr	r3, [pc, #20]	@ (801af04 <cleanup_stdio+0x38>)
 801aeee:	4299      	cmp	r1, r3
 801aef0:	d002      	beq.n	801aef8 <cleanup_stdio+0x2c>
 801aef2:	0020      	movs	r0, r4
 801aef4:	f002 fcfe 	bl	801d8f4 <_fflush_r>
 801aef8:	bd10      	pop	{r4, pc}
 801aefa:	46c0      	nop			@ (mov r8, r8)
 801aefc:	20003700 	.word	0x20003700
 801af00:	20003768 	.word	0x20003768
 801af04:	200037d0 	.word	0x200037d0

0801af08 <global_stdio_init.part.0>:
 801af08:	b510      	push	{r4, lr}
 801af0a:	4b09      	ldr	r3, [pc, #36]	@ (801af30 <global_stdio_init.part.0+0x28>)
 801af0c:	4a09      	ldr	r2, [pc, #36]	@ (801af34 <global_stdio_init.part.0+0x2c>)
 801af0e:	2104      	movs	r1, #4
 801af10:	601a      	str	r2, [r3, #0]
 801af12:	4809      	ldr	r0, [pc, #36]	@ (801af38 <global_stdio_init.part.0+0x30>)
 801af14:	2200      	movs	r2, #0
 801af16:	f7ff ff95 	bl	801ae44 <std>
 801af1a:	2201      	movs	r2, #1
 801af1c:	2109      	movs	r1, #9
 801af1e:	4807      	ldr	r0, [pc, #28]	@ (801af3c <global_stdio_init.part.0+0x34>)
 801af20:	f7ff ff90 	bl	801ae44 <std>
 801af24:	2202      	movs	r2, #2
 801af26:	2112      	movs	r1, #18
 801af28:	4805      	ldr	r0, [pc, #20]	@ (801af40 <global_stdio_init.part.0+0x38>)
 801af2a:	f7ff ff8b 	bl	801ae44 <std>
 801af2e:	bd10      	pop	{r4, pc}
 801af30:	20003838 	.word	0x20003838
 801af34:	0801aeb1 	.word	0x0801aeb1
 801af38:	20003700 	.word	0x20003700
 801af3c:	20003768 	.word	0x20003768
 801af40:	200037d0 	.word	0x200037d0

0801af44 <__sfp_lock_acquire>:
 801af44:	b510      	push	{r4, lr}
 801af46:	4802      	ldr	r0, [pc, #8]	@ (801af50 <__sfp_lock_acquire+0xc>)
 801af48:	f000 f9c3 	bl	801b2d2 <__retarget_lock_acquire_recursive>
 801af4c:	bd10      	pop	{r4, pc}
 801af4e:	46c0      	nop			@ (mov r8, r8)
 801af50:	20003841 	.word	0x20003841

0801af54 <__sfp_lock_release>:
 801af54:	b510      	push	{r4, lr}
 801af56:	4802      	ldr	r0, [pc, #8]	@ (801af60 <__sfp_lock_release+0xc>)
 801af58:	f000 f9bc 	bl	801b2d4 <__retarget_lock_release_recursive>
 801af5c:	bd10      	pop	{r4, pc}
 801af5e:	46c0      	nop			@ (mov r8, r8)
 801af60:	20003841 	.word	0x20003841

0801af64 <__sinit>:
 801af64:	b510      	push	{r4, lr}
 801af66:	0004      	movs	r4, r0
 801af68:	f7ff ffec 	bl	801af44 <__sfp_lock_acquire>
 801af6c:	6a23      	ldr	r3, [r4, #32]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d002      	beq.n	801af78 <__sinit+0x14>
 801af72:	f7ff ffef 	bl	801af54 <__sfp_lock_release>
 801af76:	bd10      	pop	{r4, pc}
 801af78:	4b04      	ldr	r3, [pc, #16]	@ (801af8c <__sinit+0x28>)
 801af7a:	6223      	str	r3, [r4, #32]
 801af7c:	4b04      	ldr	r3, [pc, #16]	@ (801af90 <__sinit+0x2c>)
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d1f6      	bne.n	801af72 <__sinit+0xe>
 801af84:	f7ff ffc0 	bl	801af08 <global_stdio_init.part.0>
 801af88:	e7f3      	b.n	801af72 <__sinit+0xe>
 801af8a:	46c0      	nop			@ (mov r8, r8)
 801af8c:	0801aecd 	.word	0x0801aecd
 801af90:	20003838 	.word	0x20003838

0801af94 <_fwalk_sglue>:
 801af94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af96:	0014      	movs	r4, r2
 801af98:	2600      	movs	r6, #0
 801af9a:	9000      	str	r0, [sp, #0]
 801af9c:	9101      	str	r1, [sp, #4]
 801af9e:	68a5      	ldr	r5, [r4, #8]
 801afa0:	6867      	ldr	r7, [r4, #4]
 801afa2:	3f01      	subs	r7, #1
 801afa4:	d504      	bpl.n	801afb0 <_fwalk_sglue+0x1c>
 801afa6:	6824      	ldr	r4, [r4, #0]
 801afa8:	2c00      	cmp	r4, #0
 801afaa:	d1f8      	bne.n	801af9e <_fwalk_sglue+0xa>
 801afac:	0030      	movs	r0, r6
 801afae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801afb0:	89ab      	ldrh	r3, [r5, #12]
 801afb2:	2b01      	cmp	r3, #1
 801afb4:	d908      	bls.n	801afc8 <_fwalk_sglue+0x34>
 801afb6:	220e      	movs	r2, #14
 801afb8:	5eab      	ldrsh	r3, [r5, r2]
 801afba:	3301      	adds	r3, #1
 801afbc:	d004      	beq.n	801afc8 <_fwalk_sglue+0x34>
 801afbe:	0029      	movs	r1, r5
 801afc0:	9800      	ldr	r0, [sp, #0]
 801afc2:	9b01      	ldr	r3, [sp, #4]
 801afc4:	4798      	blx	r3
 801afc6:	4306      	orrs	r6, r0
 801afc8:	3568      	adds	r5, #104	@ 0x68
 801afca:	e7ea      	b.n	801afa2 <_fwalk_sglue+0xe>

0801afcc <iprintf>:
 801afcc:	b40f      	push	{r0, r1, r2, r3}
 801afce:	b507      	push	{r0, r1, r2, lr}
 801afd0:	4905      	ldr	r1, [pc, #20]	@ (801afe8 <iprintf+0x1c>)
 801afd2:	ab04      	add	r3, sp, #16
 801afd4:	6808      	ldr	r0, [r1, #0]
 801afd6:	cb04      	ldmia	r3!, {r2}
 801afd8:	6881      	ldr	r1, [r0, #8]
 801afda:	9301      	str	r3, [sp, #4]
 801afdc:	f002 fae8 	bl	801d5b0 <_vfiprintf_r>
 801afe0:	b003      	add	sp, #12
 801afe2:	bc08      	pop	{r3}
 801afe4:	b004      	add	sp, #16
 801afe6:	4718      	bx	r3
 801afe8:	20000374 	.word	0x20000374

0801afec <siprintf>:
 801afec:	b40e      	push	{r1, r2, r3}
 801afee:	b500      	push	{lr}
 801aff0:	490b      	ldr	r1, [pc, #44]	@ (801b020 <siprintf+0x34>)
 801aff2:	b09c      	sub	sp, #112	@ 0x70
 801aff4:	ab1d      	add	r3, sp, #116	@ 0x74
 801aff6:	9002      	str	r0, [sp, #8]
 801aff8:	9006      	str	r0, [sp, #24]
 801affa:	9107      	str	r1, [sp, #28]
 801affc:	9104      	str	r1, [sp, #16]
 801affe:	4809      	ldr	r0, [pc, #36]	@ (801b024 <siprintf+0x38>)
 801b000:	4909      	ldr	r1, [pc, #36]	@ (801b028 <siprintf+0x3c>)
 801b002:	cb04      	ldmia	r3!, {r2}
 801b004:	9105      	str	r1, [sp, #20]
 801b006:	6800      	ldr	r0, [r0, #0]
 801b008:	a902      	add	r1, sp, #8
 801b00a:	9301      	str	r3, [sp, #4]
 801b00c:	f002 f9aa 	bl	801d364 <_svfiprintf_r>
 801b010:	2200      	movs	r2, #0
 801b012:	9b02      	ldr	r3, [sp, #8]
 801b014:	701a      	strb	r2, [r3, #0]
 801b016:	b01c      	add	sp, #112	@ 0x70
 801b018:	bc08      	pop	{r3}
 801b01a:	b003      	add	sp, #12
 801b01c:	4718      	bx	r3
 801b01e:	46c0      	nop			@ (mov r8, r8)
 801b020:	7fffffff 	.word	0x7fffffff
 801b024:	20000374 	.word	0x20000374
 801b028:	ffff0208 	.word	0xffff0208

0801b02c <__sread>:
 801b02c:	b570      	push	{r4, r5, r6, lr}
 801b02e:	000c      	movs	r4, r1
 801b030:	250e      	movs	r5, #14
 801b032:	5f49      	ldrsh	r1, [r1, r5]
 801b034:	f000 f8fa 	bl	801b22c <_read_r>
 801b038:	2800      	cmp	r0, #0
 801b03a:	db03      	blt.n	801b044 <__sread+0x18>
 801b03c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801b03e:	181b      	adds	r3, r3, r0
 801b040:	6563      	str	r3, [r4, #84]	@ 0x54
 801b042:	bd70      	pop	{r4, r5, r6, pc}
 801b044:	89a3      	ldrh	r3, [r4, #12]
 801b046:	4a02      	ldr	r2, [pc, #8]	@ (801b050 <__sread+0x24>)
 801b048:	4013      	ands	r3, r2
 801b04a:	81a3      	strh	r3, [r4, #12]
 801b04c:	e7f9      	b.n	801b042 <__sread+0x16>
 801b04e:	46c0      	nop			@ (mov r8, r8)
 801b050:	ffffefff 	.word	0xffffefff

0801b054 <__swrite>:
 801b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b056:	001f      	movs	r7, r3
 801b058:	898b      	ldrh	r3, [r1, #12]
 801b05a:	0005      	movs	r5, r0
 801b05c:	000c      	movs	r4, r1
 801b05e:	0016      	movs	r6, r2
 801b060:	05db      	lsls	r3, r3, #23
 801b062:	d505      	bpl.n	801b070 <__swrite+0x1c>
 801b064:	230e      	movs	r3, #14
 801b066:	5ec9      	ldrsh	r1, [r1, r3]
 801b068:	2200      	movs	r2, #0
 801b06a:	2302      	movs	r3, #2
 801b06c:	f000 f8ca 	bl	801b204 <_lseek_r>
 801b070:	89a3      	ldrh	r3, [r4, #12]
 801b072:	4a05      	ldr	r2, [pc, #20]	@ (801b088 <__swrite+0x34>)
 801b074:	0028      	movs	r0, r5
 801b076:	4013      	ands	r3, r2
 801b078:	81a3      	strh	r3, [r4, #12]
 801b07a:	0032      	movs	r2, r6
 801b07c:	230e      	movs	r3, #14
 801b07e:	5ee1      	ldrsh	r1, [r4, r3]
 801b080:	003b      	movs	r3, r7
 801b082:	f000 f8e7 	bl	801b254 <_write_r>
 801b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b088:	ffffefff 	.word	0xffffefff

0801b08c <__sseek>:
 801b08c:	b570      	push	{r4, r5, r6, lr}
 801b08e:	000c      	movs	r4, r1
 801b090:	250e      	movs	r5, #14
 801b092:	5f49      	ldrsh	r1, [r1, r5]
 801b094:	f000 f8b6 	bl	801b204 <_lseek_r>
 801b098:	89a3      	ldrh	r3, [r4, #12]
 801b09a:	1c42      	adds	r2, r0, #1
 801b09c:	d103      	bne.n	801b0a6 <__sseek+0x1a>
 801b09e:	4a05      	ldr	r2, [pc, #20]	@ (801b0b4 <__sseek+0x28>)
 801b0a0:	4013      	ands	r3, r2
 801b0a2:	81a3      	strh	r3, [r4, #12]
 801b0a4:	bd70      	pop	{r4, r5, r6, pc}
 801b0a6:	2280      	movs	r2, #128	@ 0x80
 801b0a8:	0152      	lsls	r2, r2, #5
 801b0aa:	4313      	orrs	r3, r2
 801b0ac:	81a3      	strh	r3, [r4, #12]
 801b0ae:	6560      	str	r0, [r4, #84]	@ 0x54
 801b0b0:	e7f8      	b.n	801b0a4 <__sseek+0x18>
 801b0b2:	46c0      	nop			@ (mov r8, r8)
 801b0b4:	ffffefff 	.word	0xffffefff

0801b0b8 <__sclose>:
 801b0b8:	b510      	push	{r4, lr}
 801b0ba:	230e      	movs	r3, #14
 801b0bc:	5ec9      	ldrsh	r1, [r1, r3]
 801b0be:	f000 f88f 	bl	801b1e0 <_close_r>
 801b0c2:	bd10      	pop	{r4, pc}

0801b0c4 <_vsniprintf_r>:
 801b0c4:	b530      	push	{r4, r5, lr}
 801b0c6:	0014      	movs	r4, r2
 801b0c8:	0005      	movs	r5, r0
 801b0ca:	001a      	movs	r2, r3
 801b0cc:	b09b      	sub	sp, #108	@ 0x6c
 801b0ce:	2c00      	cmp	r4, #0
 801b0d0:	da05      	bge.n	801b0de <_vsniprintf_r+0x1a>
 801b0d2:	238b      	movs	r3, #139	@ 0x8b
 801b0d4:	6003      	str	r3, [r0, #0]
 801b0d6:	2001      	movs	r0, #1
 801b0d8:	4240      	negs	r0, r0
 801b0da:	b01b      	add	sp, #108	@ 0x6c
 801b0dc:	bd30      	pop	{r4, r5, pc}
 801b0de:	2382      	movs	r3, #130	@ 0x82
 801b0e0:	4668      	mov	r0, sp
 801b0e2:	009b      	lsls	r3, r3, #2
 801b0e4:	8183      	strh	r3, [r0, #12]
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	9100      	str	r1, [sp, #0]
 801b0ea:	9104      	str	r1, [sp, #16]
 801b0ec:	429c      	cmp	r4, r3
 801b0ee:	d000      	beq.n	801b0f2 <_vsniprintf_r+0x2e>
 801b0f0:	1e63      	subs	r3, r4, #1
 801b0f2:	9302      	str	r3, [sp, #8]
 801b0f4:	9305      	str	r3, [sp, #20]
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	4669      	mov	r1, sp
 801b0fa:	425b      	negs	r3, r3
 801b0fc:	81cb      	strh	r3, [r1, #14]
 801b0fe:	0028      	movs	r0, r5
 801b100:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b102:	f002 f92f 	bl	801d364 <_svfiprintf_r>
 801b106:	1c43      	adds	r3, r0, #1
 801b108:	da01      	bge.n	801b10e <_vsniprintf_r+0x4a>
 801b10a:	238b      	movs	r3, #139	@ 0x8b
 801b10c:	602b      	str	r3, [r5, #0]
 801b10e:	2c00      	cmp	r4, #0
 801b110:	d0e3      	beq.n	801b0da <_vsniprintf_r+0x16>
 801b112:	2200      	movs	r2, #0
 801b114:	9b00      	ldr	r3, [sp, #0]
 801b116:	701a      	strb	r2, [r3, #0]
 801b118:	e7df      	b.n	801b0da <_vsniprintf_r+0x16>
	...

0801b11c <vsniprintf>:
 801b11c:	b513      	push	{r0, r1, r4, lr}
 801b11e:	4c04      	ldr	r4, [pc, #16]	@ (801b130 <vsniprintf+0x14>)
 801b120:	9300      	str	r3, [sp, #0]
 801b122:	0013      	movs	r3, r2
 801b124:	000a      	movs	r2, r1
 801b126:	0001      	movs	r1, r0
 801b128:	6820      	ldr	r0, [r4, #0]
 801b12a:	f7ff ffcb 	bl	801b0c4 <_vsniprintf_r>
 801b12e:	bd16      	pop	{r1, r2, r4, pc}
 801b130:	20000374 	.word	0x20000374

0801b134 <memset>:
 801b134:	0003      	movs	r3, r0
 801b136:	1882      	adds	r2, r0, r2
 801b138:	4293      	cmp	r3, r2
 801b13a:	d100      	bne.n	801b13e <memset+0xa>
 801b13c:	4770      	bx	lr
 801b13e:	7019      	strb	r1, [r3, #0]
 801b140:	3301      	adds	r3, #1
 801b142:	e7f9      	b.n	801b138 <memset+0x4>

0801b144 <strchr>:
 801b144:	b2c9      	uxtb	r1, r1
 801b146:	7803      	ldrb	r3, [r0, #0]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d004      	beq.n	801b156 <strchr+0x12>
 801b14c:	428b      	cmp	r3, r1
 801b14e:	d100      	bne.n	801b152 <strchr+0xe>
 801b150:	4770      	bx	lr
 801b152:	3001      	adds	r0, #1
 801b154:	e7f7      	b.n	801b146 <strchr+0x2>
 801b156:	424b      	negs	r3, r1
 801b158:	4159      	adcs	r1, r3
 801b15a:	4249      	negs	r1, r1
 801b15c:	4008      	ands	r0, r1
 801b15e:	e7f7      	b.n	801b150 <strchr+0xc>

0801b160 <strncmp>:
 801b160:	b530      	push	{r4, r5, lr}
 801b162:	0005      	movs	r5, r0
 801b164:	1e10      	subs	r0, r2, #0
 801b166:	d00b      	beq.n	801b180 <strncmp+0x20>
 801b168:	2400      	movs	r4, #0
 801b16a:	3a01      	subs	r2, #1
 801b16c:	5d2b      	ldrb	r3, [r5, r4]
 801b16e:	5d08      	ldrb	r0, [r1, r4]
 801b170:	4283      	cmp	r3, r0
 801b172:	d104      	bne.n	801b17e <strncmp+0x1e>
 801b174:	42a2      	cmp	r2, r4
 801b176:	d002      	beq.n	801b17e <strncmp+0x1e>
 801b178:	3401      	adds	r4, #1
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d1f6      	bne.n	801b16c <strncmp+0xc>
 801b17e:	1a18      	subs	r0, r3, r0
 801b180:	bd30      	pop	{r4, r5, pc}

0801b182 <strncpy>:
 801b182:	0003      	movs	r3, r0
 801b184:	b530      	push	{r4, r5, lr}
 801b186:	001d      	movs	r5, r3
 801b188:	2a00      	cmp	r2, #0
 801b18a:	d006      	beq.n	801b19a <strncpy+0x18>
 801b18c:	780c      	ldrb	r4, [r1, #0]
 801b18e:	3a01      	subs	r2, #1
 801b190:	3301      	adds	r3, #1
 801b192:	702c      	strb	r4, [r5, #0]
 801b194:	3101      	adds	r1, #1
 801b196:	2c00      	cmp	r4, #0
 801b198:	d1f5      	bne.n	801b186 <strncpy+0x4>
 801b19a:	2100      	movs	r1, #0
 801b19c:	189a      	adds	r2, r3, r2
 801b19e:	4293      	cmp	r3, r2
 801b1a0:	d100      	bne.n	801b1a4 <strncpy+0x22>
 801b1a2:	bd30      	pop	{r4, r5, pc}
 801b1a4:	7019      	strb	r1, [r3, #0]
 801b1a6:	3301      	adds	r3, #1
 801b1a8:	e7f9      	b.n	801b19e <strncpy+0x1c>

0801b1aa <strstr>:
 801b1aa:	780a      	ldrb	r2, [r1, #0]
 801b1ac:	b530      	push	{r4, r5, lr}
 801b1ae:	2a00      	cmp	r2, #0
 801b1b0:	d10c      	bne.n	801b1cc <strstr+0x22>
 801b1b2:	bd30      	pop	{r4, r5, pc}
 801b1b4:	429a      	cmp	r2, r3
 801b1b6:	d108      	bne.n	801b1ca <strstr+0x20>
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	5ccc      	ldrb	r4, [r1, r3]
 801b1bc:	2c00      	cmp	r4, #0
 801b1be:	d0f8      	beq.n	801b1b2 <strstr+0x8>
 801b1c0:	5cc5      	ldrb	r5, [r0, r3]
 801b1c2:	42a5      	cmp	r5, r4
 801b1c4:	d101      	bne.n	801b1ca <strstr+0x20>
 801b1c6:	3301      	adds	r3, #1
 801b1c8:	e7f7      	b.n	801b1ba <strstr+0x10>
 801b1ca:	3001      	adds	r0, #1
 801b1cc:	7803      	ldrb	r3, [r0, #0]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d1f0      	bne.n	801b1b4 <strstr+0xa>
 801b1d2:	0018      	movs	r0, r3
 801b1d4:	e7ed      	b.n	801b1b2 <strstr+0x8>
	...

0801b1d8 <_localeconv_r>:
 801b1d8:	4800      	ldr	r0, [pc, #0]	@ (801b1dc <_localeconv_r+0x4>)
 801b1da:	4770      	bx	lr
 801b1dc:	200002f8 	.word	0x200002f8

0801b1e0 <_close_r>:
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	b570      	push	{r4, r5, r6, lr}
 801b1e4:	4d06      	ldr	r5, [pc, #24]	@ (801b200 <_close_r+0x20>)
 801b1e6:	0004      	movs	r4, r0
 801b1e8:	0008      	movs	r0, r1
 801b1ea:	602b      	str	r3, [r5, #0]
 801b1ec:	f7ef f95c 	bl	800a4a8 <_close>
 801b1f0:	1c43      	adds	r3, r0, #1
 801b1f2:	d103      	bne.n	801b1fc <_close_r+0x1c>
 801b1f4:	682b      	ldr	r3, [r5, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d000      	beq.n	801b1fc <_close_r+0x1c>
 801b1fa:	6023      	str	r3, [r4, #0]
 801b1fc:	bd70      	pop	{r4, r5, r6, pc}
 801b1fe:	46c0      	nop			@ (mov r8, r8)
 801b200:	2000383c 	.word	0x2000383c

0801b204 <_lseek_r>:
 801b204:	b570      	push	{r4, r5, r6, lr}
 801b206:	0004      	movs	r4, r0
 801b208:	0008      	movs	r0, r1
 801b20a:	0011      	movs	r1, r2
 801b20c:	001a      	movs	r2, r3
 801b20e:	2300      	movs	r3, #0
 801b210:	4d05      	ldr	r5, [pc, #20]	@ (801b228 <_lseek_r+0x24>)
 801b212:	602b      	str	r3, [r5, #0]
 801b214:	f7ef f969 	bl	800a4ea <_lseek>
 801b218:	1c43      	adds	r3, r0, #1
 801b21a:	d103      	bne.n	801b224 <_lseek_r+0x20>
 801b21c:	682b      	ldr	r3, [r5, #0]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d000      	beq.n	801b224 <_lseek_r+0x20>
 801b222:	6023      	str	r3, [r4, #0]
 801b224:	bd70      	pop	{r4, r5, r6, pc}
 801b226:	46c0      	nop			@ (mov r8, r8)
 801b228:	2000383c 	.word	0x2000383c

0801b22c <_read_r>:
 801b22c:	b570      	push	{r4, r5, r6, lr}
 801b22e:	0004      	movs	r4, r0
 801b230:	0008      	movs	r0, r1
 801b232:	0011      	movs	r1, r2
 801b234:	001a      	movs	r2, r3
 801b236:	2300      	movs	r3, #0
 801b238:	4d05      	ldr	r5, [pc, #20]	@ (801b250 <_read_r+0x24>)
 801b23a:	602b      	str	r3, [r5, #0]
 801b23c:	f7ef f917 	bl	800a46e <_read>
 801b240:	1c43      	adds	r3, r0, #1
 801b242:	d103      	bne.n	801b24c <_read_r+0x20>
 801b244:	682b      	ldr	r3, [r5, #0]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d000      	beq.n	801b24c <_read_r+0x20>
 801b24a:	6023      	str	r3, [r4, #0]
 801b24c:	bd70      	pop	{r4, r5, r6, pc}
 801b24e:	46c0      	nop			@ (mov r8, r8)
 801b250:	2000383c 	.word	0x2000383c

0801b254 <_write_r>:
 801b254:	b570      	push	{r4, r5, r6, lr}
 801b256:	0004      	movs	r4, r0
 801b258:	0008      	movs	r0, r1
 801b25a:	0011      	movs	r1, r2
 801b25c:	001a      	movs	r2, r3
 801b25e:	2300      	movs	r3, #0
 801b260:	4d05      	ldr	r5, [pc, #20]	@ (801b278 <_write_r+0x24>)
 801b262:	602b      	str	r3, [r5, #0]
 801b264:	f7ef fdc8 	bl	800adf8 <_write>
 801b268:	1c43      	adds	r3, r0, #1
 801b26a:	d103      	bne.n	801b274 <_write_r+0x20>
 801b26c:	682b      	ldr	r3, [r5, #0]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d000      	beq.n	801b274 <_write_r+0x20>
 801b272:	6023      	str	r3, [r4, #0]
 801b274:	bd70      	pop	{r4, r5, r6, pc}
 801b276:	46c0      	nop			@ (mov r8, r8)
 801b278:	2000383c 	.word	0x2000383c

0801b27c <__errno>:
 801b27c:	4b01      	ldr	r3, [pc, #4]	@ (801b284 <__errno+0x8>)
 801b27e:	6818      	ldr	r0, [r3, #0]
 801b280:	4770      	bx	lr
 801b282:	46c0      	nop			@ (mov r8, r8)
 801b284:	20000374 	.word	0x20000374

0801b288 <__libc_init_array>:
 801b288:	b570      	push	{r4, r5, r6, lr}
 801b28a:	2600      	movs	r6, #0
 801b28c:	4c0c      	ldr	r4, [pc, #48]	@ (801b2c0 <__libc_init_array+0x38>)
 801b28e:	4d0d      	ldr	r5, [pc, #52]	@ (801b2c4 <__libc_init_array+0x3c>)
 801b290:	1b64      	subs	r4, r4, r5
 801b292:	10a4      	asrs	r4, r4, #2
 801b294:	42a6      	cmp	r6, r4
 801b296:	d109      	bne.n	801b2ac <__libc_init_array+0x24>
 801b298:	2600      	movs	r6, #0
 801b29a:	f002 ff8b 	bl	801e1b4 <_init>
 801b29e:	4c0a      	ldr	r4, [pc, #40]	@ (801b2c8 <__libc_init_array+0x40>)
 801b2a0:	4d0a      	ldr	r5, [pc, #40]	@ (801b2cc <__libc_init_array+0x44>)
 801b2a2:	1b64      	subs	r4, r4, r5
 801b2a4:	10a4      	asrs	r4, r4, #2
 801b2a6:	42a6      	cmp	r6, r4
 801b2a8:	d105      	bne.n	801b2b6 <__libc_init_array+0x2e>
 801b2aa:	bd70      	pop	{r4, r5, r6, pc}
 801b2ac:	00b3      	lsls	r3, r6, #2
 801b2ae:	58eb      	ldr	r3, [r5, r3]
 801b2b0:	4798      	blx	r3
 801b2b2:	3601      	adds	r6, #1
 801b2b4:	e7ee      	b.n	801b294 <__libc_init_array+0xc>
 801b2b6:	00b3      	lsls	r3, r6, #2
 801b2b8:	58eb      	ldr	r3, [r5, r3]
 801b2ba:	4798      	blx	r3
 801b2bc:	3601      	adds	r6, #1
 801b2be:	e7f2      	b.n	801b2a6 <__libc_init_array+0x1e>
 801b2c0:	0801fc40 	.word	0x0801fc40
 801b2c4:	0801fc40 	.word	0x0801fc40
 801b2c8:	0801fc44 	.word	0x0801fc44
 801b2cc:	0801fc40 	.word	0x0801fc40

0801b2d0 <__retarget_lock_init_recursive>:
 801b2d0:	4770      	bx	lr

0801b2d2 <__retarget_lock_acquire_recursive>:
 801b2d2:	4770      	bx	lr

0801b2d4 <__retarget_lock_release_recursive>:
 801b2d4:	4770      	bx	lr

0801b2d6 <memchr>:
 801b2d6:	b2c9      	uxtb	r1, r1
 801b2d8:	1882      	adds	r2, r0, r2
 801b2da:	4290      	cmp	r0, r2
 801b2dc:	d101      	bne.n	801b2e2 <memchr+0xc>
 801b2de:	2000      	movs	r0, #0
 801b2e0:	4770      	bx	lr
 801b2e2:	7803      	ldrb	r3, [r0, #0]
 801b2e4:	428b      	cmp	r3, r1
 801b2e6:	d0fb      	beq.n	801b2e0 <memchr+0xa>
 801b2e8:	3001      	adds	r0, #1
 801b2ea:	e7f6      	b.n	801b2da <memchr+0x4>

0801b2ec <memcpy>:
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	b510      	push	{r4, lr}
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d100      	bne.n	801b2f6 <memcpy+0xa>
 801b2f4:	bd10      	pop	{r4, pc}
 801b2f6:	5ccc      	ldrb	r4, [r1, r3]
 801b2f8:	54c4      	strb	r4, [r0, r3]
 801b2fa:	3301      	adds	r3, #1
 801b2fc:	e7f8      	b.n	801b2f0 <memcpy+0x4>
	...

0801b300 <nan>:
 801b300:	2000      	movs	r0, #0
 801b302:	4901      	ldr	r1, [pc, #4]	@ (801b308 <nan+0x8>)
 801b304:	4770      	bx	lr
 801b306:	46c0      	nop			@ (mov r8, r8)
 801b308:	7ff80000 	.word	0x7ff80000

0801b30c <quorem>:
 801b30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b30e:	6902      	ldr	r2, [r0, #16]
 801b310:	690f      	ldr	r7, [r1, #16]
 801b312:	b087      	sub	sp, #28
 801b314:	0006      	movs	r6, r0
 801b316:	000b      	movs	r3, r1
 801b318:	2000      	movs	r0, #0
 801b31a:	9102      	str	r1, [sp, #8]
 801b31c:	42ba      	cmp	r2, r7
 801b31e:	db6d      	blt.n	801b3fc <quorem+0xf0>
 801b320:	3f01      	subs	r7, #1
 801b322:	00bc      	lsls	r4, r7, #2
 801b324:	3314      	adds	r3, #20
 801b326:	9305      	str	r3, [sp, #20]
 801b328:	191b      	adds	r3, r3, r4
 801b32a:	9303      	str	r3, [sp, #12]
 801b32c:	0033      	movs	r3, r6
 801b32e:	3314      	adds	r3, #20
 801b330:	191c      	adds	r4, r3, r4
 801b332:	9301      	str	r3, [sp, #4]
 801b334:	6823      	ldr	r3, [r4, #0]
 801b336:	9304      	str	r3, [sp, #16]
 801b338:	9b03      	ldr	r3, [sp, #12]
 801b33a:	9804      	ldr	r0, [sp, #16]
 801b33c:	681d      	ldr	r5, [r3, #0]
 801b33e:	3501      	adds	r5, #1
 801b340:	0029      	movs	r1, r5
 801b342:	f7e4 ff25 	bl	8000190 <__udivsi3>
 801b346:	9b04      	ldr	r3, [sp, #16]
 801b348:	9000      	str	r0, [sp, #0]
 801b34a:	42ab      	cmp	r3, r5
 801b34c:	d32b      	bcc.n	801b3a6 <quorem+0x9a>
 801b34e:	9b05      	ldr	r3, [sp, #20]
 801b350:	9d01      	ldr	r5, [sp, #4]
 801b352:	469c      	mov	ip, r3
 801b354:	2300      	movs	r3, #0
 801b356:	9305      	str	r3, [sp, #20]
 801b358:	9304      	str	r3, [sp, #16]
 801b35a:	4662      	mov	r2, ip
 801b35c:	ca08      	ldmia	r2!, {r3}
 801b35e:	6828      	ldr	r0, [r5, #0]
 801b360:	4694      	mov	ip, r2
 801b362:	9a00      	ldr	r2, [sp, #0]
 801b364:	b299      	uxth	r1, r3
 801b366:	4351      	muls	r1, r2
 801b368:	9a05      	ldr	r2, [sp, #20]
 801b36a:	0c1b      	lsrs	r3, r3, #16
 801b36c:	1889      	adds	r1, r1, r2
 801b36e:	9a00      	ldr	r2, [sp, #0]
 801b370:	4353      	muls	r3, r2
 801b372:	0c0a      	lsrs	r2, r1, #16
 801b374:	189b      	adds	r3, r3, r2
 801b376:	0c1a      	lsrs	r2, r3, #16
 801b378:	b289      	uxth	r1, r1
 801b37a:	9205      	str	r2, [sp, #20]
 801b37c:	b282      	uxth	r2, r0
 801b37e:	1a52      	subs	r2, r2, r1
 801b380:	9904      	ldr	r1, [sp, #16]
 801b382:	0c00      	lsrs	r0, r0, #16
 801b384:	1852      	adds	r2, r2, r1
 801b386:	b29b      	uxth	r3, r3
 801b388:	1411      	asrs	r1, r2, #16
 801b38a:	1ac3      	subs	r3, r0, r3
 801b38c:	185b      	adds	r3, r3, r1
 801b38e:	1419      	asrs	r1, r3, #16
 801b390:	b292      	uxth	r2, r2
 801b392:	041b      	lsls	r3, r3, #16
 801b394:	431a      	orrs	r2, r3
 801b396:	9b03      	ldr	r3, [sp, #12]
 801b398:	9104      	str	r1, [sp, #16]
 801b39a:	c504      	stmia	r5!, {r2}
 801b39c:	4563      	cmp	r3, ip
 801b39e:	d2dc      	bcs.n	801b35a <quorem+0x4e>
 801b3a0:	6823      	ldr	r3, [r4, #0]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d030      	beq.n	801b408 <quorem+0xfc>
 801b3a6:	0030      	movs	r0, r6
 801b3a8:	9902      	ldr	r1, [sp, #8]
 801b3aa:	f001 fd7d 	bl	801cea8 <__mcmp>
 801b3ae:	2800      	cmp	r0, #0
 801b3b0:	db23      	blt.n	801b3fa <quorem+0xee>
 801b3b2:	0034      	movs	r4, r6
 801b3b4:	2500      	movs	r5, #0
 801b3b6:	9902      	ldr	r1, [sp, #8]
 801b3b8:	3414      	adds	r4, #20
 801b3ba:	3114      	adds	r1, #20
 801b3bc:	6823      	ldr	r3, [r4, #0]
 801b3be:	c901      	ldmia	r1!, {r0}
 801b3c0:	9302      	str	r3, [sp, #8]
 801b3c2:	466b      	mov	r3, sp
 801b3c4:	891b      	ldrh	r3, [r3, #8]
 801b3c6:	b282      	uxth	r2, r0
 801b3c8:	1a9a      	subs	r2, r3, r2
 801b3ca:	9b02      	ldr	r3, [sp, #8]
 801b3cc:	1952      	adds	r2, r2, r5
 801b3ce:	0c00      	lsrs	r0, r0, #16
 801b3d0:	0c1b      	lsrs	r3, r3, #16
 801b3d2:	1a1b      	subs	r3, r3, r0
 801b3d4:	1410      	asrs	r0, r2, #16
 801b3d6:	181b      	adds	r3, r3, r0
 801b3d8:	141d      	asrs	r5, r3, #16
 801b3da:	b292      	uxth	r2, r2
 801b3dc:	041b      	lsls	r3, r3, #16
 801b3de:	431a      	orrs	r2, r3
 801b3e0:	9b03      	ldr	r3, [sp, #12]
 801b3e2:	c404      	stmia	r4!, {r2}
 801b3e4:	428b      	cmp	r3, r1
 801b3e6:	d2e9      	bcs.n	801b3bc <quorem+0xb0>
 801b3e8:	9a01      	ldr	r2, [sp, #4]
 801b3ea:	00bb      	lsls	r3, r7, #2
 801b3ec:	18d3      	adds	r3, r2, r3
 801b3ee:	681a      	ldr	r2, [r3, #0]
 801b3f0:	2a00      	cmp	r2, #0
 801b3f2:	d013      	beq.n	801b41c <quorem+0x110>
 801b3f4:	9b00      	ldr	r3, [sp, #0]
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	9300      	str	r3, [sp, #0]
 801b3fa:	9800      	ldr	r0, [sp, #0]
 801b3fc:	b007      	add	sp, #28
 801b3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b400:	6823      	ldr	r3, [r4, #0]
 801b402:	2b00      	cmp	r3, #0
 801b404:	d104      	bne.n	801b410 <quorem+0x104>
 801b406:	3f01      	subs	r7, #1
 801b408:	9b01      	ldr	r3, [sp, #4]
 801b40a:	3c04      	subs	r4, #4
 801b40c:	42a3      	cmp	r3, r4
 801b40e:	d3f7      	bcc.n	801b400 <quorem+0xf4>
 801b410:	6137      	str	r7, [r6, #16]
 801b412:	e7c8      	b.n	801b3a6 <quorem+0x9a>
 801b414:	681a      	ldr	r2, [r3, #0]
 801b416:	2a00      	cmp	r2, #0
 801b418:	d104      	bne.n	801b424 <quorem+0x118>
 801b41a:	3f01      	subs	r7, #1
 801b41c:	9a01      	ldr	r2, [sp, #4]
 801b41e:	3b04      	subs	r3, #4
 801b420:	429a      	cmp	r2, r3
 801b422:	d3f7      	bcc.n	801b414 <quorem+0x108>
 801b424:	6137      	str	r7, [r6, #16]
 801b426:	e7e5      	b.n	801b3f4 <quorem+0xe8>

0801b428 <_dtoa_r>:
 801b428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b42a:	0014      	movs	r4, r2
 801b42c:	001d      	movs	r5, r3
 801b42e:	69c6      	ldr	r6, [r0, #28]
 801b430:	b09d      	sub	sp, #116	@ 0x74
 801b432:	940a      	str	r4, [sp, #40]	@ 0x28
 801b434:	950b      	str	r5, [sp, #44]	@ 0x2c
 801b436:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801b438:	9003      	str	r0, [sp, #12]
 801b43a:	2e00      	cmp	r6, #0
 801b43c:	d10f      	bne.n	801b45e <_dtoa_r+0x36>
 801b43e:	2010      	movs	r0, #16
 801b440:	f001 f98a 	bl	801c758 <malloc>
 801b444:	9b03      	ldr	r3, [sp, #12]
 801b446:	1e02      	subs	r2, r0, #0
 801b448:	61d8      	str	r0, [r3, #28]
 801b44a:	d104      	bne.n	801b456 <_dtoa_r+0x2e>
 801b44c:	21ef      	movs	r1, #239	@ 0xef
 801b44e:	4bc7      	ldr	r3, [pc, #796]	@ (801b76c <_dtoa_r+0x344>)
 801b450:	48c7      	ldr	r0, [pc, #796]	@ (801b770 <_dtoa_r+0x348>)
 801b452:	f002 fb41 	bl	801dad8 <__assert_func>
 801b456:	6046      	str	r6, [r0, #4]
 801b458:	6086      	str	r6, [r0, #8]
 801b45a:	6006      	str	r6, [r0, #0]
 801b45c:	60c6      	str	r6, [r0, #12]
 801b45e:	9b03      	ldr	r3, [sp, #12]
 801b460:	69db      	ldr	r3, [r3, #28]
 801b462:	6819      	ldr	r1, [r3, #0]
 801b464:	2900      	cmp	r1, #0
 801b466:	d00b      	beq.n	801b480 <_dtoa_r+0x58>
 801b468:	685a      	ldr	r2, [r3, #4]
 801b46a:	2301      	movs	r3, #1
 801b46c:	4093      	lsls	r3, r2
 801b46e:	604a      	str	r2, [r1, #4]
 801b470:	608b      	str	r3, [r1, #8]
 801b472:	9803      	ldr	r0, [sp, #12]
 801b474:	f001 fa82 	bl	801c97c <_Bfree>
 801b478:	2200      	movs	r2, #0
 801b47a:	9b03      	ldr	r3, [sp, #12]
 801b47c:	69db      	ldr	r3, [r3, #28]
 801b47e:	601a      	str	r2, [r3, #0]
 801b480:	2d00      	cmp	r5, #0
 801b482:	da1e      	bge.n	801b4c2 <_dtoa_r+0x9a>
 801b484:	2301      	movs	r3, #1
 801b486:	603b      	str	r3, [r7, #0]
 801b488:	006b      	lsls	r3, r5, #1
 801b48a:	085b      	lsrs	r3, r3, #1
 801b48c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b48e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b490:	4bb8      	ldr	r3, [pc, #736]	@ (801b774 <_dtoa_r+0x34c>)
 801b492:	4ab8      	ldr	r2, [pc, #736]	@ (801b774 <_dtoa_r+0x34c>)
 801b494:	403b      	ands	r3, r7
 801b496:	4293      	cmp	r3, r2
 801b498:	d116      	bne.n	801b4c8 <_dtoa_r+0xa0>
 801b49a:	4bb7      	ldr	r3, [pc, #732]	@ (801b778 <_dtoa_r+0x350>)
 801b49c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b49e:	6013      	str	r3, [r2, #0]
 801b4a0:	033b      	lsls	r3, r7, #12
 801b4a2:	0b1b      	lsrs	r3, r3, #12
 801b4a4:	4323      	orrs	r3, r4
 801b4a6:	d101      	bne.n	801b4ac <_dtoa_r+0x84>
 801b4a8:	f000 fd83 	bl	801bfb2 <_dtoa_r+0xb8a>
 801b4ac:	4bb3      	ldr	r3, [pc, #716]	@ (801b77c <_dtoa_r+0x354>)
 801b4ae:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b4b0:	9308      	str	r3, [sp, #32]
 801b4b2:	2a00      	cmp	r2, #0
 801b4b4:	d002      	beq.n	801b4bc <_dtoa_r+0x94>
 801b4b6:	4bb2      	ldr	r3, [pc, #712]	@ (801b780 <_dtoa_r+0x358>)
 801b4b8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b4ba:	6013      	str	r3, [r2, #0]
 801b4bc:	9808      	ldr	r0, [sp, #32]
 801b4be:	b01d      	add	sp, #116	@ 0x74
 801b4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	603b      	str	r3, [r7, #0]
 801b4c6:	e7e2      	b.n	801b48e <_dtoa_r+0x66>
 801b4c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b4ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b4cc:	9212      	str	r2, [sp, #72]	@ 0x48
 801b4ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b4d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b4d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	f7e4 ffe0 	bl	800049c <__aeabi_dcmpeq>
 801b4dc:	1e06      	subs	r6, r0, #0
 801b4de:	d00b      	beq.n	801b4f8 <_dtoa_r+0xd0>
 801b4e0:	2301      	movs	r3, #1
 801b4e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b4e4:	6013      	str	r3, [r2, #0]
 801b4e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d002      	beq.n	801b4f2 <_dtoa_r+0xca>
 801b4ec:	4ba5      	ldr	r3, [pc, #660]	@ (801b784 <_dtoa_r+0x35c>)
 801b4ee:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b4f0:	6013      	str	r3, [r2, #0]
 801b4f2:	4ba5      	ldr	r3, [pc, #660]	@ (801b788 <_dtoa_r+0x360>)
 801b4f4:	9308      	str	r3, [sp, #32]
 801b4f6:	e7e1      	b.n	801b4bc <_dtoa_r+0x94>
 801b4f8:	ab1a      	add	r3, sp, #104	@ 0x68
 801b4fa:	9301      	str	r3, [sp, #4]
 801b4fc:	ab1b      	add	r3, sp, #108	@ 0x6c
 801b4fe:	9300      	str	r3, [sp, #0]
 801b500:	9803      	ldr	r0, [sp, #12]
 801b502:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b506:	f001 fdf1 	bl	801d0ec <__d2b>
 801b50a:	007a      	lsls	r2, r7, #1
 801b50c:	9005      	str	r0, [sp, #20]
 801b50e:	0d52      	lsrs	r2, r2, #21
 801b510:	d100      	bne.n	801b514 <_dtoa_r+0xec>
 801b512:	e07b      	b.n	801b60c <_dtoa_r+0x1e4>
 801b514:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b516:	9618      	str	r6, [sp, #96]	@ 0x60
 801b518:	0319      	lsls	r1, r3, #12
 801b51a:	4b9c      	ldr	r3, [pc, #624]	@ (801b78c <_dtoa_r+0x364>)
 801b51c:	0b09      	lsrs	r1, r1, #12
 801b51e:	430b      	orrs	r3, r1
 801b520:	499b      	ldr	r1, [pc, #620]	@ (801b790 <_dtoa_r+0x368>)
 801b522:	1857      	adds	r7, r2, r1
 801b524:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b526:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b528:	0019      	movs	r1, r3
 801b52a:	2200      	movs	r2, #0
 801b52c:	4b99      	ldr	r3, [pc, #612]	@ (801b794 <_dtoa_r+0x36c>)
 801b52e:	f7e7 fb43 	bl	8002bb8 <__aeabi_dsub>
 801b532:	4a99      	ldr	r2, [pc, #612]	@ (801b798 <_dtoa_r+0x370>)
 801b534:	4b99      	ldr	r3, [pc, #612]	@ (801b79c <_dtoa_r+0x374>)
 801b536:	f7e7 f877 	bl	8002628 <__aeabi_dmul>
 801b53a:	4a99      	ldr	r2, [pc, #612]	@ (801b7a0 <_dtoa_r+0x378>)
 801b53c:	4b99      	ldr	r3, [pc, #612]	@ (801b7a4 <_dtoa_r+0x37c>)
 801b53e:	f7e6 f8cb 	bl	80016d8 <__aeabi_dadd>
 801b542:	0004      	movs	r4, r0
 801b544:	0038      	movs	r0, r7
 801b546:	000d      	movs	r5, r1
 801b548:	f7e7 ff30 	bl	80033ac <__aeabi_i2d>
 801b54c:	4a96      	ldr	r2, [pc, #600]	@ (801b7a8 <_dtoa_r+0x380>)
 801b54e:	4b97      	ldr	r3, [pc, #604]	@ (801b7ac <_dtoa_r+0x384>)
 801b550:	f7e7 f86a 	bl	8002628 <__aeabi_dmul>
 801b554:	0002      	movs	r2, r0
 801b556:	000b      	movs	r3, r1
 801b558:	0020      	movs	r0, r4
 801b55a:	0029      	movs	r1, r5
 801b55c:	f7e6 f8bc 	bl	80016d8 <__aeabi_dadd>
 801b560:	0004      	movs	r4, r0
 801b562:	000d      	movs	r5, r1
 801b564:	f7e7 fee6 	bl	8003334 <__aeabi_d2iz>
 801b568:	2200      	movs	r2, #0
 801b56a:	9004      	str	r0, [sp, #16]
 801b56c:	2300      	movs	r3, #0
 801b56e:	0020      	movs	r0, r4
 801b570:	0029      	movs	r1, r5
 801b572:	f7e4 ff99 	bl	80004a8 <__aeabi_dcmplt>
 801b576:	2800      	cmp	r0, #0
 801b578:	d00b      	beq.n	801b592 <_dtoa_r+0x16a>
 801b57a:	9804      	ldr	r0, [sp, #16]
 801b57c:	f7e7 ff16 	bl	80033ac <__aeabi_i2d>
 801b580:	002b      	movs	r3, r5
 801b582:	0022      	movs	r2, r4
 801b584:	f7e4 ff8a 	bl	800049c <__aeabi_dcmpeq>
 801b588:	4243      	negs	r3, r0
 801b58a:	4158      	adcs	r0, r3
 801b58c:	9b04      	ldr	r3, [sp, #16]
 801b58e:	1a1b      	subs	r3, r3, r0
 801b590:	9304      	str	r3, [sp, #16]
 801b592:	2301      	movs	r3, #1
 801b594:	9315      	str	r3, [sp, #84]	@ 0x54
 801b596:	9b04      	ldr	r3, [sp, #16]
 801b598:	2b16      	cmp	r3, #22
 801b59a:	d810      	bhi.n	801b5be <_dtoa_r+0x196>
 801b59c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b59e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b5a0:	9a04      	ldr	r2, [sp, #16]
 801b5a2:	4b83      	ldr	r3, [pc, #524]	@ (801b7b0 <_dtoa_r+0x388>)
 801b5a4:	00d2      	lsls	r2, r2, #3
 801b5a6:	189b      	adds	r3, r3, r2
 801b5a8:	681a      	ldr	r2, [r3, #0]
 801b5aa:	685b      	ldr	r3, [r3, #4]
 801b5ac:	f7e4 ff7c 	bl	80004a8 <__aeabi_dcmplt>
 801b5b0:	2800      	cmp	r0, #0
 801b5b2:	d047      	beq.n	801b644 <_dtoa_r+0x21c>
 801b5b4:	9b04      	ldr	r3, [sp, #16]
 801b5b6:	3b01      	subs	r3, #1
 801b5b8:	9304      	str	r3, [sp, #16]
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	9315      	str	r3, [sp, #84]	@ 0x54
 801b5be:	2200      	movs	r2, #0
 801b5c0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b5c2:	9206      	str	r2, [sp, #24]
 801b5c4:	1bdb      	subs	r3, r3, r7
 801b5c6:	1e5a      	subs	r2, r3, #1
 801b5c8:	d53e      	bpl.n	801b648 <_dtoa_r+0x220>
 801b5ca:	2201      	movs	r2, #1
 801b5cc:	1ad3      	subs	r3, r2, r3
 801b5ce:	9306      	str	r3, [sp, #24]
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	930d      	str	r3, [sp, #52]	@ 0x34
 801b5d4:	9b04      	ldr	r3, [sp, #16]
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	db38      	blt.n	801b64c <_dtoa_r+0x224>
 801b5da:	9a04      	ldr	r2, [sp, #16]
 801b5dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b5de:	4694      	mov	ip, r2
 801b5e0:	4463      	add	r3, ip
 801b5e2:	930d      	str	r3, [sp, #52]	@ 0x34
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	9214      	str	r2, [sp, #80]	@ 0x50
 801b5e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b5ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b5ec:	2401      	movs	r4, #1
 801b5ee:	2b09      	cmp	r3, #9
 801b5f0:	d867      	bhi.n	801b6c2 <_dtoa_r+0x29a>
 801b5f2:	2b05      	cmp	r3, #5
 801b5f4:	dd02      	ble.n	801b5fc <_dtoa_r+0x1d4>
 801b5f6:	2400      	movs	r4, #0
 801b5f8:	3b04      	subs	r3, #4
 801b5fa:	9322      	str	r3, [sp, #136]	@ 0x88
 801b5fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b5fe:	1e98      	subs	r0, r3, #2
 801b600:	2803      	cmp	r0, #3
 801b602:	d867      	bhi.n	801b6d4 <_dtoa_r+0x2ac>
 801b604:	f7e4 fdb0 	bl	8000168 <__gnu_thumb1_case_uqi>
 801b608:	5b383a2b 	.word	0x5b383a2b
 801b60c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b60e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b610:	18f6      	adds	r6, r6, r3
 801b612:	4b68      	ldr	r3, [pc, #416]	@ (801b7b4 <_dtoa_r+0x38c>)
 801b614:	18f2      	adds	r2, r6, r3
 801b616:	2a20      	cmp	r2, #32
 801b618:	dd0f      	ble.n	801b63a <_dtoa_r+0x212>
 801b61a:	2340      	movs	r3, #64	@ 0x40
 801b61c:	1a9b      	subs	r3, r3, r2
 801b61e:	409f      	lsls	r7, r3
 801b620:	4b65      	ldr	r3, [pc, #404]	@ (801b7b8 <_dtoa_r+0x390>)
 801b622:	0038      	movs	r0, r7
 801b624:	18f3      	adds	r3, r6, r3
 801b626:	40dc      	lsrs	r4, r3
 801b628:	4320      	orrs	r0, r4
 801b62a:	f7e7 feed 	bl	8003408 <__aeabi_ui2d>
 801b62e:	2201      	movs	r2, #1
 801b630:	4b62      	ldr	r3, [pc, #392]	@ (801b7bc <_dtoa_r+0x394>)
 801b632:	1e77      	subs	r7, r6, #1
 801b634:	18cb      	adds	r3, r1, r3
 801b636:	9218      	str	r2, [sp, #96]	@ 0x60
 801b638:	e776      	b.n	801b528 <_dtoa_r+0x100>
 801b63a:	2320      	movs	r3, #32
 801b63c:	0020      	movs	r0, r4
 801b63e:	1a9b      	subs	r3, r3, r2
 801b640:	4098      	lsls	r0, r3
 801b642:	e7f2      	b.n	801b62a <_dtoa_r+0x202>
 801b644:	9015      	str	r0, [sp, #84]	@ 0x54
 801b646:	e7ba      	b.n	801b5be <_dtoa_r+0x196>
 801b648:	920d      	str	r2, [sp, #52]	@ 0x34
 801b64a:	e7c3      	b.n	801b5d4 <_dtoa_r+0x1ac>
 801b64c:	9b06      	ldr	r3, [sp, #24]
 801b64e:	9a04      	ldr	r2, [sp, #16]
 801b650:	1a9b      	subs	r3, r3, r2
 801b652:	9306      	str	r3, [sp, #24]
 801b654:	4253      	negs	r3, r2
 801b656:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b658:	2300      	movs	r3, #0
 801b65a:	9314      	str	r3, [sp, #80]	@ 0x50
 801b65c:	e7c5      	b.n	801b5ea <_dtoa_r+0x1c2>
 801b65e:	2300      	movs	r3, #0
 801b660:	9310      	str	r3, [sp, #64]	@ 0x40
 801b662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b664:	930e      	str	r3, [sp, #56]	@ 0x38
 801b666:	9309      	str	r3, [sp, #36]	@ 0x24
 801b668:	2b00      	cmp	r3, #0
 801b66a:	dc13      	bgt.n	801b694 <_dtoa_r+0x26c>
 801b66c:	2301      	movs	r3, #1
 801b66e:	001a      	movs	r2, r3
 801b670:	930e      	str	r3, [sp, #56]	@ 0x38
 801b672:	9309      	str	r3, [sp, #36]	@ 0x24
 801b674:	9223      	str	r2, [sp, #140]	@ 0x8c
 801b676:	e00d      	b.n	801b694 <_dtoa_r+0x26c>
 801b678:	2301      	movs	r3, #1
 801b67a:	e7f1      	b.n	801b660 <_dtoa_r+0x238>
 801b67c:	2300      	movs	r3, #0
 801b67e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b680:	9310      	str	r3, [sp, #64]	@ 0x40
 801b682:	4694      	mov	ip, r2
 801b684:	9b04      	ldr	r3, [sp, #16]
 801b686:	4463      	add	r3, ip
 801b688:	930e      	str	r3, [sp, #56]	@ 0x38
 801b68a:	3301      	adds	r3, #1
 801b68c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b68e:	2b00      	cmp	r3, #0
 801b690:	dc00      	bgt.n	801b694 <_dtoa_r+0x26c>
 801b692:	2301      	movs	r3, #1
 801b694:	9a03      	ldr	r2, [sp, #12]
 801b696:	2100      	movs	r1, #0
 801b698:	69d0      	ldr	r0, [r2, #28]
 801b69a:	2204      	movs	r2, #4
 801b69c:	0015      	movs	r5, r2
 801b69e:	3514      	adds	r5, #20
 801b6a0:	429d      	cmp	r5, r3
 801b6a2:	d91b      	bls.n	801b6dc <_dtoa_r+0x2b4>
 801b6a4:	6041      	str	r1, [r0, #4]
 801b6a6:	9803      	ldr	r0, [sp, #12]
 801b6a8:	f001 f924 	bl	801c8f4 <_Balloc>
 801b6ac:	9008      	str	r0, [sp, #32]
 801b6ae:	2800      	cmp	r0, #0
 801b6b0:	d117      	bne.n	801b6e2 <_dtoa_r+0x2ba>
 801b6b2:	21b0      	movs	r1, #176	@ 0xb0
 801b6b4:	4b42      	ldr	r3, [pc, #264]	@ (801b7c0 <_dtoa_r+0x398>)
 801b6b6:	482e      	ldr	r0, [pc, #184]	@ (801b770 <_dtoa_r+0x348>)
 801b6b8:	9a08      	ldr	r2, [sp, #32]
 801b6ba:	31ff      	adds	r1, #255	@ 0xff
 801b6bc:	e6c9      	b.n	801b452 <_dtoa_r+0x2a>
 801b6be:	2301      	movs	r3, #1
 801b6c0:	e7dd      	b.n	801b67e <_dtoa_r+0x256>
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	9410      	str	r4, [sp, #64]	@ 0x40
 801b6c6:	9322      	str	r3, [sp, #136]	@ 0x88
 801b6c8:	3b01      	subs	r3, #1
 801b6ca:	930e      	str	r3, [sp, #56]	@ 0x38
 801b6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	3313      	adds	r3, #19
 801b6d2:	e7cf      	b.n	801b674 <_dtoa_r+0x24c>
 801b6d4:	2301      	movs	r3, #1
 801b6d6:	9310      	str	r3, [sp, #64]	@ 0x40
 801b6d8:	3b02      	subs	r3, #2
 801b6da:	e7f6      	b.n	801b6ca <_dtoa_r+0x2a2>
 801b6dc:	3101      	adds	r1, #1
 801b6de:	0052      	lsls	r2, r2, #1
 801b6e0:	e7dc      	b.n	801b69c <_dtoa_r+0x274>
 801b6e2:	9b03      	ldr	r3, [sp, #12]
 801b6e4:	9a08      	ldr	r2, [sp, #32]
 801b6e6:	69db      	ldr	r3, [r3, #28]
 801b6e8:	601a      	str	r2, [r3, #0]
 801b6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6ec:	2b0e      	cmp	r3, #14
 801b6ee:	d900      	bls.n	801b6f2 <_dtoa_r+0x2ca>
 801b6f0:	e0d9      	b.n	801b8a6 <_dtoa_r+0x47e>
 801b6f2:	2c00      	cmp	r4, #0
 801b6f4:	d100      	bne.n	801b6f8 <_dtoa_r+0x2d0>
 801b6f6:	e0d6      	b.n	801b8a6 <_dtoa_r+0x47e>
 801b6f8:	9b04      	ldr	r3, [sp, #16]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	dd64      	ble.n	801b7c8 <_dtoa_r+0x3a0>
 801b6fe:	210f      	movs	r1, #15
 801b700:	9a04      	ldr	r2, [sp, #16]
 801b702:	4b2b      	ldr	r3, [pc, #172]	@ (801b7b0 <_dtoa_r+0x388>)
 801b704:	400a      	ands	r2, r1
 801b706:	00d2      	lsls	r2, r2, #3
 801b708:	189b      	adds	r3, r3, r2
 801b70a:	681e      	ldr	r6, [r3, #0]
 801b70c:	685f      	ldr	r7, [r3, #4]
 801b70e:	9b04      	ldr	r3, [sp, #16]
 801b710:	2402      	movs	r4, #2
 801b712:	111d      	asrs	r5, r3, #4
 801b714:	05db      	lsls	r3, r3, #23
 801b716:	d50a      	bpl.n	801b72e <_dtoa_r+0x306>
 801b718:	4b2a      	ldr	r3, [pc, #168]	@ (801b7c4 <_dtoa_r+0x39c>)
 801b71a:	400d      	ands	r5, r1
 801b71c:	6a1a      	ldr	r2, [r3, #32]
 801b71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b720:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b722:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b724:	f7e6 fb3c 	bl	8001da0 <__aeabi_ddiv>
 801b728:	900a      	str	r0, [sp, #40]	@ 0x28
 801b72a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b72c:	3401      	adds	r4, #1
 801b72e:	4b25      	ldr	r3, [pc, #148]	@ (801b7c4 <_dtoa_r+0x39c>)
 801b730:	930c      	str	r3, [sp, #48]	@ 0x30
 801b732:	2d00      	cmp	r5, #0
 801b734:	d108      	bne.n	801b748 <_dtoa_r+0x320>
 801b736:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b738:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b73a:	0032      	movs	r2, r6
 801b73c:	003b      	movs	r3, r7
 801b73e:	f7e6 fb2f 	bl	8001da0 <__aeabi_ddiv>
 801b742:	900a      	str	r0, [sp, #40]	@ 0x28
 801b744:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b746:	e05a      	b.n	801b7fe <_dtoa_r+0x3d6>
 801b748:	2301      	movs	r3, #1
 801b74a:	421d      	tst	r5, r3
 801b74c:	d009      	beq.n	801b762 <_dtoa_r+0x33a>
 801b74e:	18e4      	adds	r4, r4, r3
 801b750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b752:	0030      	movs	r0, r6
 801b754:	681a      	ldr	r2, [r3, #0]
 801b756:	685b      	ldr	r3, [r3, #4]
 801b758:	0039      	movs	r1, r7
 801b75a:	f7e6 ff65 	bl	8002628 <__aeabi_dmul>
 801b75e:	0006      	movs	r6, r0
 801b760:	000f      	movs	r7, r1
 801b762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b764:	106d      	asrs	r5, r5, #1
 801b766:	3308      	adds	r3, #8
 801b768:	e7e2      	b.n	801b730 <_dtoa_r+0x308>
 801b76a:	46c0      	nop			@ (mov r8, r8)
 801b76c:	0801f899 	.word	0x0801f899
 801b770:	0801f8b0 	.word	0x0801f8b0
 801b774:	7ff00000 	.word	0x7ff00000
 801b778:	0000270f 	.word	0x0000270f
 801b77c:	0801f895 	.word	0x0801f895
 801b780:	0801f898 	.word	0x0801f898
 801b784:	0801f861 	.word	0x0801f861
 801b788:	0801f860 	.word	0x0801f860
 801b78c:	3ff00000 	.word	0x3ff00000
 801b790:	fffffc01 	.word	0xfffffc01
 801b794:	3ff80000 	.word	0x3ff80000
 801b798:	636f4361 	.word	0x636f4361
 801b79c:	3fd287a7 	.word	0x3fd287a7
 801b7a0:	8b60c8b3 	.word	0x8b60c8b3
 801b7a4:	3fc68a28 	.word	0x3fc68a28
 801b7a8:	509f79fb 	.word	0x509f79fb
 801b7ac:	3fd34413 	.word	0x3fd34413
 801b7b0:	0801fa08 	.word	0x0801fa08
 801b7b4:	00000432 	.word	0x00000432
 801b7b8:	00000412 	.word	0x00000412
 801b7bc:	fe100000 	.word	0xfe100000
 801b7c0:	0801f908 	.word	0x0801f908
 801b7c4:	0801f9e0 	.word	0x0801f9e0
 801b7c8:	9b04      	ldr	r3, [sp, #16]
 801b7ca:	2402      	movs	r4, #2
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d016      	beq.n	801b7fe <_dtoa_r+0x3d6>
 801b7d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b7d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b7d4:	220f      	movs	r2, #15
 801b7d6:	425d      	negs	r5, r3
 801b7d8:	402a      	ands	r2, r5
 801b7da:	4bd7      	ldr	r3, [pc, #860]	@ (801bb38 <_dtoa_r+0x710>)
 801b7dc:	00d2      	lsls	r2, r2, #3
 801b7de:	189b      	adds	r3, r3, r2
 801b7e0:	681a      	ldr	r2, [r3, #0]
 801b7e2:	685b      	ldr	r3, [r3, #4]
 801b7e4:	f7e6 ff20 	bl	8002628 <__aeabi_dmul>
 801b7e8:	2701      	movs	r7, #1
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	900a      	str	r0, [sp, #40]	@ 0x28
 801b7ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b7f0:	4ed2      	ldr	r6, [pc, #840]	@ (801bb3c <_dtoa_r+0x714>)
 801b7f2:	112d      	asrs	r5, r5, #4
 801b7f4:	2d00      	cmp	r5, #0
 801b7f6:	d000      	beq.n	801b7fa <_dtoa_r+0x3d2>
 801b7f8:	e0ba      	b.n	801b970 <_dtoa_r+0x548>
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d1a1      	bne.n	801b742 <_dtoa_r+0x31a>
 801b7fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801b800:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b802:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b804:	2b00      	cmp	r3, #0
 801b806:	d100      	bne.n	801b80a <_dtoa_r+0x3e2>
 801b808:	e0bd      	b.n	801b986 <_dtoa_r+0x55e>
 801b80a:	2200      	movs	r2, #0
 801b80c:	0030      	movs	r0, r6
 801b80e:	0039      	movs	r1, r7
 801b810:	4bcb      	ldr	r3, [pc, #812]	@ (801bb40 <_dtoa_r+0x718>)
 801b812:	f7e4 fe49 	bl	80004a8 <__aeabi_dcmplt>
 801b816:	2800      	cmp	r0, #0
 801b818:	d100      	bne.n	801b81c <_dtoa_r+0x3f4>
 801b81a:	e0b4      	b.n	801b986 <_dtoa_r+0x55e>
 801b81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d100      	bne.n	801b824 <_dtoa_r+0x3fc>
 801b822:	e0b0      	b.n	801b986 <_dtoa_r+0x55e>
 801b824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b826:	2b00      	cmp	r3, #0
 801b828:	dd39      	ble.n	801b89e <_dtoa_r+0x476>
 801b82a:	9b04      	ldr	r3, [sp, #16]
 801b82c:	2200      	movs	r2, #0
 801b82e:	3b01      	subs	r3, #1
 801b830:	930c      	str	r3, [sp, #48]	@ 0x30
 801b832:	0030      	movs	r0, r6
 801b834:	4bc3      	ldr	r3, [pc, #780]	@ (801bb44 <_dtoa_r+0x71c>)
 801b836:	0039      	movs	r1, r7
 801b838:	f7e6 fef6 	bl	8002628 <__aeabi_dmul>
 801b83c:	900a      	str	r0, [sp, #40]	@ 0x28
 801b83e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b842:	3401      	adds	r4, #1
 801b844:	0020      	movs	r0, r4
 801b846:	9311      	str	r3, [sp, #68]	@ 0x44
 801b848:	f7e7 fdb0 	bl	80033ac <__aeabi_i2d>
 801b84c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b850:	f7e6 feea 	bl	8002628 <__aeabi_dmul>
 801b854:	4bbc      	ldr	r3, [pc, #752]	@ (801bb48 <_dtoa_r+0x720>)
 801b856:	2200      	movs	r2, #0
 801b858:	f7e5 ff3e 	bl	80016d8 <__aeabi_dadd>
 801b85c:	4bbb      	ldr	r3, [pc, #748]	@ (801bb4c <_dtoa_r+0x724>)
 801b85e:	0006      	movs	r6, r0
 801b860:	18cf      	adds	r7, r1, r3
 801b862:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b864:	2b00      	cmp	r3, #0
 801b866:	d000      	beq.n	801b86a <_dtoa_r+0x442>
 801b868:	e091      	b.n	801b98e <_dtoa_r+0x566>
 801b86a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b86c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b86e:	2200      	movs	r2, #0
 801b870:	4bb7      	ldr	r3, [pc, #732]	@ (801bb50 <_dtoa_r+0x728>)
 801b872:	f7e7 f9a1 	bl	8002bb8 <__aeabi_dsub>
 801b876:	0032      	movs	r2, r6
 801b878:	003b      	movs	r3, r7
 801b87a:	0004      	movs	r4, r0
 801b87c:	000d      	movs	r5, r1
 801b87e:	f7e4 fe27 	bl	80004d0 <__aeabi_dcmpgt>
 801b882:	2800      	cmp	r0, #0
 801b884:	d000      	beq.n	801b888 <_dtoa_r+0x460>
 801b886:	e29d      	b.n	801bdc4 <_dtoa_r+0x99c>
 801b888:	2180      	movs	r1, #128	@ 0x80
 801b88a:	0609      	lsls	r1, r1, #24
 801b88c:	187b      	adds	r3, r7, r1
 801b88e:	0032      	movs	r2, r6
 801b890:	0020      	movs	r0, r4
 801b892:	0029      	movs	r1, r5
 801b894:	f7e4 fe08 	bl	80004a8 <__aeabi_dcmplt>
 801b898:	2800      	cmp	r0, #0
 801b89a:	d000      	beq.n	801b89e <_dtoa_r+0x476>
 801b89c:	e130      	b.n	801bb00 <_dtoa_r+0x6d8>
 801b89e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b8a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b8a2:	930a      	str	r3, [sp, #40]	@ 0x28
 801b8a4:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b8a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	da00      	bge.n	801b8ae <_dtoa_r+0x486>
 801b8ac:	e177      	b.n	801bb9e <_dtoa_r+0x776>
 801b8ae:	9a04      	ldr	r2, [sp, #16]
 801b8b0:	2a0e      	cmp	r2, #14
 801b8b2:	dd00      	ble.n	801b8b6 <_dtoa_r+0x48e>
 801b8b4:	e173      	b.n	801bb9e <_dtoa_r+0x776>
 801b8b6:	4ba0      	ldr	r3, [pc, #640]	@ (801bb38 <_dtoa_r+0x710>)
 801b8b8:	00d2      	lsls	r2, r2, #3
 801b8ba:	189b      	adds	r3, r3, r2
 801b8bc:	685c      	ldr	r4, [r3, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	9306      	str	r3, [sp, #24]
 801b8c2:	9407      	str	r4, [sp, #28]
 801b8c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	da03      	bge.n	801b8d2 <_dtoa_r+0x4aa>
 801b8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	dc00      	bgt.n	801b8d2 <_dtoa_r+0x4aa>
 801b8d0:	e106      	b.n	801bae0 <_dtoa_r+0x6b8>
 801b8d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801b8d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8d8:	9d08      	ldr	r5, [sp, #32]
 801b8da:	3b01      	subs	r3, #1
 801b8dc:	195b      	adds	r3, r3, r5
 801b8de:	930a      	str	r3, [sp, #40]	@ 0x28
 801b8e0:	9a06      	ldr	r2, [sp, #24]
 801b8e2:	9b07      	ldr	r3, [sp, #28]
 801b8e4:	0030      	movs	r0, r6
 801b8e6:	0039      	movs	r1, r7
 801b8e8:	f7e6 fa5a 	bl	8001da0 <__aeabi_ddiv>
 801b8ec:	f7e7 fd22 	bl	8003334 <__aeabi_d2iz>
 801b8f0:	9009      	str	r0, [sp, #36]	@ 0x24
 801b8f2:	f7e7 fd5b 	bl	80033ac <__aeabi_i2d>
 801b8f6:	9a06      	ldr	r2, [sp, #24]
 801b8f8:	9b07      	ldr	r3, [sp, #28]
 801b8fa:	f7e6 fe95 	bl	8002628 <__aeabi_dmul>
 801b8fe:	0002      	movs	r2, r0
 801b900:	000b      	movs	r3, r1
 801b902:	0030      	movs	r0, r6
 801b904:	0039      	movs	r1, r7
 801b906:	f7e7 f957 	bl	8002bb8 <__aeabi_dsub>
 801b90a:	002b      	movs	r3, r5
 801b90c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b90e:	3501      	adds	r5, #1
 801b910:	3230      	adds	r2, #48	@ 0x30
 801b912:	701a      	strb	r2, [r3, #0]
 801b914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b916:	002c      	movs	r4, r5
 801b918:	429a      	cmp	r2, r3
 801b91a:	d000      	beq.n	801b91e <_dtoa_r+0x4f6>
 801b91c:	e131      	b.n	801bb82 <_dtoa_r+0x75a>
 801b91e:	0002      	movs	r2, r0
 801b920:	000b      	movs	r3, r1
 801b922:	f7e5 fed9 	bl	80016d8 <__aeabi_dadd>
 801b926:	9a06      	ldr	r2, [sp, #24]
 801b928:	9b07      	ldr	r3, [sp, #28]
 801b92a:	0006      	movs	r6, r0
 801b92c:	000f      	movs	r7, r1
 801b92e:	f7e4 fdcf 	bl	80004d0 <__aeabi_dcmpgt>
 801b932:	2800      	cmp	r0, #0
 801b934:	d000      	beq.n	801b938 <_dtoa_r+0x510>
 801b936:	e10f      	b.n	801bb58 <_dtoa_r+0x730>
 801b938:	9a06      	ldr	r2, [sp, #24]
 801b93a:	9b07      	ldr	r3, [sp, #28]
 801b93c:	0030      	movs	r0, r6
 801b93e:	0039      	movs	r1, r7
 801b940:	f7e4 fdac 	bl	800049c <__aeabi_dcmpeq>
 801b944:	2800      	cmp	r0, #0
 801b946:	d003      	beq.n	801b950 <_dtoa_r+0x528>
 801b948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b94a:	07dd      	lsls	r5, r3, #31
 801b94c:	d500      	bpl.n	801b950 <_dtoa_r+0x528>
 801b94e:	e103      	b.n	801bb58 <_dtoa_r+0x730>
 801b950:	9905      	ldr	r1, [sp, #20]
 801b952:	9803      	ldr	r0, [sp, #12]
 801b954:	f001 f812 	bl	801c97c <_Bfree>
 801b958:	2300      	movs	r3, #0
 801b95a:	7023      	strb	r3, [r4, #0]
 801b95c:	9b04      	ldr	r3, [sp, #16]
 801b95e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b960:	3301      	adds	r3, #1
 801b962:	6013      	str	r3, [r2, #0]
 801b964:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b966:	2b00      	cmp	r3, #0
 801b968:	d100      	bne.n	801b96c <_dtoa_r+0x544>
 801b96a:	e5a7      	b.n	801b4bc <_dtoa_r+0x94>
 801b96c:	601c      	str	r4, [r3, #0]
 801b96e:	e5a5      	b.n	801b4bc <_dtoa_r+0x94>
 801b970:	423d      	tst	r5, r7
 801b972:	d005      	beq.n	801b980 <_dtoa_r+0x558>
 801b974:	6832      	ldr	r2, [r6, #0]
 801b976:	6873      	ldr	r3, [r6, #4]
 801b978:	f7e6 fe56 	bl	8002628 <__aeabi_dmul>
 801b97c:	003b      	movs	r3, r7
 801b97e:	3401      	adds	r4, #1
 801b980:	106d      	asrs	r5, r5, #1
 801b982:	3608      	adds	r6, #8
 801b984:	e736      	b.n	801b7f4 <_dtoa_r+0x3cc>
 801b986:	9b04      	ldr	r3, [sp, #16]
 801b988:	930c      	str	r3, [sp, #48]	@ 0x30
 801b98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b98c:	e75a      	b.n	801b844 <_dtoa_r+0x41c>
 801b98e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b990:	4b69      	ldr	r3, [pc, #420]	@ (801bb38 <_dtoa_r+0x710>)
 801b992:	3a01      	subs	r2, #1
 801b994:	00d2      	lsls	r2, r2, #3
 801b996:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b998:	189b      	adds	r3, r3, r2
 801b99a:	681a      	ldr	r2, [r3, #0]
 801b99c:	685b      	ldr	r3, [r3, #4]
 801b99e:	2900      	cmp	r1, #0
 801b9a0:	d04c      	beq.n	801ba3c <_dtoa_r+0x614>
 801b9a2:	2000      	movs	r0, #0
 801b9a4:	496b      	ldr	r1, [pc, #428]	@ (801bb54 <_dtoa_r+0x72c>)
 801b9a6:	f7e6 f9fb 	bl	8001da0 <__aeabi_ddiv>
 801b9aa:	0032      	movs	r2, r6
 801b9ac:	003b      	movs	r3, r7
 801b9ae:	f7e7 f903 	bl	8002bb8 <__aeabi_dsub>
 801b9b2:	9a08      	ldr	r2, [sp, #32]
 801b9b4:	0006      	movs	r6, r0
 801b9b6:	4694      	mov	ip, r2
 801b9b8:	000f      	movs	r7, r1
 801b9ba:	9b08      	ldr	r3, [sp, #32]
 801b9bc:	9316      	str	r3, [sp, #88]	@ 0x58
 801b9be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b9c0:	4463      	add	r3, ip
 801b9c2:	9311      	str	r3, [sp, #68]	@ 0x44
 801b9c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b9c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b9c8:	f7e7 fcb4 	bl	8003334 <__aeabi_d2iz>
 801b9cc:	0005      	movs	r5, r0
 801b9ce:	f7e7 fced 	bl	80033ac <__aeabi_i2d>
 801b9d2:	0002      	movs	r2, r0
 801b9d4:	000b      	movs	r3, r1
 801b9d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b9d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b9da:	f7e7 f8ed 	bl	8002bb8 <__aeabi_dsub>
 801b9de:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b9e0:	3530      	adds	r5, #48	@ 0x30
 801b9e2:	1c5c      	adds	r4, r3, #1
 801b9e4:	701d      	strb	r5, [r3, #0]
 801b9e6:	0032      	movs	r2, r6
 801b9e8:	003b      	movs	r3, r7
 801b9ea:	900a      	str	r0, [sp, #40]	@ 0x28
 801b9ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b9ee:	f7e4 fd5b 	bl	80004a8 <__aeabi_dcmplt>
 801b9f2:	2800      	cmp	r0, #0
 801b9f4:	d16a      	bne.n	801bacc <_dtoa_r+0x6a4>
 801b9f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b9f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b9fa:	2000      	movs	r0, #0
 801b9fc:	4950      	ldr	r1, [pc, #320]	@ (801bb40 <_dtoa_r+0x718>)
 801b9fe:	f7e7 f8db 	bl	8002bb8 <__aeabi_dsub>
 801ba02:	0032      	movs	r2, r6
 801ba04:	003b      	movs	r3, r7
 801ba06:	f7e4 fd4f 	bl	80004a8 <__aeabi_dcmplt>
 801ba0a:	2800      	cmp	r0, #0
 801ba0c:	d000      	beq.n	801ba10 <_dtoa_r+0x5e8>
 801ba0e:	e0a5      	b.n	801bb5c <_dtoa_r+0x734>
 801ba10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ba12:	42a3      	cmp	r3, r4
 801ba14:	d100      	bne.n	801ba18 <_dtoa_r+0x5f0>
 801ba16:	e742      	b.n	801b89e <_dtoa_r+0x476>
 801ba18:	2200      	movs	r2, #0
 801ba1a:	0030      	movs	r0, r6
 801ba1c:	0039      	movs	r1, r7
 801ba1e:	4b49      	ldr	r3, [pc, #292]	@ (801bb44 <_dtoa_r+0x71c>)
 801ba20:	f7e6 fe02 	bl	8002628 <__aeabi_dmul>
 801ba24:	2200      	movs	r2, #0
 801ba26:	0006      	movs	r6, r0
 801ba28:	000f      	movs	r7, r1
 801ba2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ba2e:	4b45      	ldr	r3, [pc, #276]	@ (801bb44 <_dtoa_r+0x71c>)
 801ba30:	f7e6 fdfa 	bl	8002628 <__aeabi_dmul>
 801ba34:	9416      	str	r4, [sp, #88]	@ 0x58
 801ba36:	900a      	str	r0, [sp, #40]	@ 0x28
 801ba38:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ba3a:	e7c3      	b.n	801b9c4 <_dtoa_r+0x59c>
 801ba3c:	0030      	movs	r0, r6
 801ba3e:	0039      	movs	r1, r7
 801ba40:	f7e6 fdf2 	bl	8002628 <__aeabi_dmul>
 801ba44:	9d08      	ldr	r5, [sp, #32]
 801ba46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ba48:	002b      	movs	r3, r5
 801ba4a:	4694      	mov	ip, r2
 801ba4c:	9016      	str	r0, [sp, #88]	@ 0x58
 801ba4e:	9117      	str	r1, [sp, #92]	@ 0x5c
 801ba50:	4463      	add	r3, ip
 801ba52:	9319      	str	r3, [sp, #100]	@ 0x64
 801ba54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ba58:	f7e7 fc6c 	bl	8003334 <__aeabi_d2iz>
 801ba5c:	0004      	movs	r4, r0
 801ba5e:	f7e7 fca5 	bl	80033ac <__aeabi_i2d>
 801ba62:	000b      	movs	r3, r1
 801ba64:	0002      	movs	r2, r0
 801ba66:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ba6a:	f7e7 f8a5 	bl	8002bb8 <__aeabi_dsub>
 801ba6e:	3430      	adds	r4, #48	@ 0x30
 801ba70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ba72:	702c      	strb	r4, [r5, #0]
 801ba74:	3501      	adds	r5, #1
 801ba76:	0006      	movs	r6, r0
 801ba78:	000f      	movs	r7, r1
 801ba7a:	42ab      	cmp	r3, r5
 801ba7c:	d129      	bne.n	801bad2 <_dtoa_r+0x6aa>
 801ba7e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801ba80:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ba82:	9b08      	ldr	r3, [sp, #32]
 801ba84:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ba86:	469c      	mov	ip, r3
 801ba88:	2200      	movs	r2, #0
 801ba8a:	4b32      	ldr	r3, [pc, #200]	@ (801bb54 <_dtoa_r+0x72c>)
 801ba8c:	4464      	add	r4, ip
 801ba8e:	f7e5 fe23 	bl	80016d8 <__aeabi_dadd>
 801ba92:	0002      	movs	r2, r0
 801ba94:	000b      	movs	r3, r1
 801ba96:	0030      	movs	r0, r6
 801ba98:	0039      	movs	r1, r7
 801ba9a:	f7e4 fd19 	bl	80004d0 <__aeabi_dcmpgt>
 801ba9e:	2800      	cmp	r0, #0
 801baa0:	d15c      	bne.n	801bb5c <_dtoa_r+0x734>
 801baa2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801baa4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801baa6:	2000      	movs	r0, #0
 801baa8:	492a      	ldr	r1, [pc, #168]	@ (801bb54 <_dtoa_r+0x72c>)
 801baaa:	f7e7 f885 	bl	8002bb8 <__aeabi_dsub>
 801baae:	0002      	movs	r2, r0
 801bab0:	000b      	movs	r3, r1
 801bab2:	0030      	movs	r0, r6
 801bab4:	0039      	movs	r1, r7
 801bab6:	f7e4 fcf7 	bl	80004a8 <__aeabi_dcmplt>
 801baba:	2800      	cmp	r0, #0
 801babc:	d100      	bne.n	801bac0 <_dtoa_r+0x698>
 801babe:	e6ee      	b.n	801b89e <_dtoa_r+0x476>
 801bac0:	0023      	movs	r3, r4
 801bac2:	3c01      	subs	r4, #1
 801bac4:	7822      	ldrb	r2, [r4, #0]
 801bac6:	2a30      	cmp	r2, #48	@ 0x30
 801bac8:	d0fa      	beq.n	801bac0 <_dtoa_r+0x698>
 801baca:	001c      	movs	r4, r3
 801bacc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bace:	9304      	str	r3, [sp, #16]
 801bad0:	e73e      	b.n	801b950 <_dtoa_r+0x528>
 801bad2:	2200      	movs	r2, #0
 801bad4:	4b1b      	ldr	r3, [pc, #108]	@ (801bb44 <_dtoa_r+0x71c>)
 801bad6:	f7e6 fda7 	bl	8002628 <__aeabi_dmul>
 801bada:	900a      	str	r0, [sp, #40]	@ 0x28
 801badc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bade:	e7b9      	b.n	801ba54 <_dtoa_r+0x62c>
 801bae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d10c      	bne.n	801bb00 <_dtoa_r+0x6d8>
 801bae6:	9806      	ldr	r0, [sp, #24]
 801bae8:	9907      	ldr	r1, [sp, #28]
 801baea:	2200      	movs	r2, #0
 801baec:	4b18      	ldr	r3, [pc, #96]	@ (801bb50 <_dtoa_r+0x728>)
 801baee:	f7e6 fd9b 	bl	8002628 <__aeabi_dmul>
 801baf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801baf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baf6:	f7e4 fcf5 	bl	80004e4 <__aeabi_dcmpge>
 801bafa:	2800      	cmp	r0, #0
 801bafc:	d100      	bne.n	801bb00 <_dtoa_r+0x6d8>
 801bafe:	e164      	b.n	801bdca <_dtoa_r+0x9a2>
 801bb00:	2600      	movs	r6, #0
 801bb02:	0037      	movs	r7, r6
 801bb04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bb06:	9c08      	ldr	r4, [sp, #32]
 801bb08:	43db      	mvns	r3, r3
 801bb0a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bb0c:	2300      	movs	r3, #0
 801bb0e:	9304      	str	r3, [sp, #16]
 801bb10:	0031      	movs	r1, r6
 801bb12:	9803      	ldr	r0, [sp, #12]
 801bb14:	f000 ff32 	bl	801c97c <_Bfree>
 801bb18:	2f00      	cmp	r7, #0
 801bb1a:	d0d7      	beq.n	801bacc <_dtoa_r+0x6a4>
 801bb1c:	9b04      	ldr	r3, [sp, #16]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d005      	beq.n	801bb2e <_dtoa_r+0x706>
 801bb22:	42bb      	cmp	r3, r7
 801bb24:	d003      	beq.n	801bb2e <_dtoa_r+0x706>
 801bb26:	0019      	movs	r1, r3
 801bb28:	9803      	ldr	r0, [sp, #12]
 801bb2a:	f000 ff27 	bl	801c97c <_Bfree>
 801bb2e:	0039      	movs	r1, r7
 801bb30:	9803      	ldr	r0, [sp, #12]
 801bb32:	f000 ff23 	bl	801c97c <_Bfree>
 801bb36:	e7c9      	b.n	801bacc <_dtoa_r+0x6a4>
 801bb38:	0801fa08 	.word	0x0801fa08
 801bb3c:	0801f9e0 	.word	0x0801f9e0
 801bb40:	3ff00000 	.word	0x3ff00000
 801bb44:	40240000 	.word	0x40240000
 801bb48:	401c0000 	.word	0x401c0000
 801bb4c:	fcc00000 	.word	0xfcc00000
 801bb50:	40140000 	.word	0x40140000
 801bb54:	3fe00000 	.word	0x3fe00000
 801bb58:	9b04      	ldr	r3, [sp, #16]
 801bb5a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bb5c:	0023      	movs	r3, r4
 801bb5e:	001c      	movs	r4, r3
 801bb60:	3b01      	subs	r3, #1
 801bb62:	781a      	ldrb	r2, [r3, #0]
 801bb64:	2a39      	cmp	r2, #57	@ 0x39
 801bb66:	d108      	bne.n	801bb7a <_dtoa_r+0x752>
 801bb68:	9a08      	ldr	r2, [sp, #32]
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	d1f7      	bne.n	801bb5e <_dtoa_r+0x736>
 801bb6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bb70:	9908      	ldr	r1, [sp, #32]
 801bb72:	3201      	adds	r2, #1
 801bb74:	920c      	str	r2, [sp, #48]	@ 0x30
 801bb76:	2230      	movs	r2, #48	@ 0x30
 801bb78:	700a      	strb	r2, [r1, #0]
 801bb7a:	781a      	ldrb	r2, [r3, #0]
 801bb7c:	3201      	adds	r2, #1
 801bb7e:	701a      	strb	r2, [r3, #0]
 801bb80:	e7a4      	b.n	801bacc <_dtoa_r+0x6a4>
 801bb82:	2200      	movs	r2, #0
 801bb84:	4bc6      	ldr	r3, [pc, #792]	@ (801bea0 <_dtoa_r+0xa78>)
 801bb86:	f7e6 fd4f 	bl	8002628 <__aeabi_dmul>
 801bb8a:	2200      	movs	r2, #0
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	0006      	movs	r6, r0
 801bb90:	000f      	movs	r7, r1
 801bb92:	f7e4 fc83 	bl	800049c <__aeabi_dcmpeq>
 801bb96:	2800      	cmp	r0, #0
 801bb98:	d100      	bne.n	801bb9c <_dtoa_r+0x774>
 801bb9a:	e6a1      	b.n	801b8e0 <_dtoa_r+0x4b8>
 801bb9c:	e6d8      	b.n	801b950 <_dtoa_r+0x528>
 801bb9e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801bba0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801bba2:	9c06      	ldr	r4, [sp, #24]
 801bba4:	2f00      	cmp	r7, #0
 801bba6:	d014      	beq.n	801bbd2 <_dtoa_r+0x7aa>
 801bba8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801bbaa:	2a01      	cmp	r2, #1
 801bbac:	dd00      	ble.n	801bbb0 <_dtoa_r+0x788>
 801bbae:	e0c8      	b.n	801bd42 <_dtoa_r+0x91a>
 801bbb0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bbb2:	2a00      	cmp	r2, #0
 801bbb4:	d100      	bne.n	801bbb8 <_dtoa_r+0x790>
 801bbb6:	e0be      	b.n	801bd36 <_dtoa_r+0x90e>
 801bbb8:	4aba      	ldr	r2, [pc, #744]	@ (801bea4 <_dtoa_r+0xa7c>)
 801bbba:	189b      	adds	r3, r3, r2
 801bbbc:	9a06      	ldr	r2, [sp, #24]
 801bbbe:	2101      	movs	r1, #1
 801bbc0:	18d2      	adds	r2, r2, r3
 801bbc2:	9206      	str	r2, [sp, #24]
 801bbc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bbc6:	9803      	ldr	r0, [sp, #12]
 801bbc8:	18d3      	adds	r3, r2, r3
 801bbca:	930d      	str	r3, [sp, #52]	@ 0x34
 801bbcc:	f000 ffda 	bl	801cb84 <__i2b>
 801bbd0:	0007      	movs	r7, r0
 801bbd2:	2c00      	cmp	r4, #0
 801bbd4:	d00e      	beq.n	801bbf4 <_dtoa_r+0x7cc>
 801bbd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	dd0b      	ble.n	801bbf4 <_dtoa_r+0x7cc>
 801bbdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bbde:	0023      	movs	r3, r4
 801bbe0:	4294      	cmp	r4, r2
 801bbe2:	dd00      	ble.n	801bbe6 <_dtoa_r+0x7be>
 801bbe4:	0013      	movs	r3, r2
 801bbe6:	9a06      	ldr	r2, [sp, #24]
 801bbe8:	1ae4      	subs	r4, r4, r3
 801bbea:	1ad2      	subs	r2, r2, r3
 801bbec:	9206      	str	r2, [sp, #24]
 801bbee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bbf0:	1ad3      	subs	r3, r2, r3
 801bbf2:	930d      	str	r3, [sp, #52]	@ 0x34
 801bbf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d01f      	beq.n	801bc3a <_dtoa_r+0x812>
 801bbfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d100      	bne.n	801bc02 <_dtoa_r+0x7da>
 801bc00:	e0b5      	b.n	801bd6e <_dtoa_r+0x946>
 801bc02:	2d00      	cmp	r5, #0
 801bc04:	d010      	beq.n	801bc28 <_dtoa_r+0x800>
 801bc06:	0039      	movs	r1, r7
 801bc08:	002a      	movs	r2, r5
 801bc0a:	9803      	ldr	r0, [sp, #12]
 801bc0c:	f001 f884 	bl	801cd18 <__pow5mult>
 801bc10:	9a05      	ldr	r2, [sp, #20]
 801bc12:	0001      	movs	r1, r0
 801bc14:	0007      	movs	r7, r0
 801bc16:	9803      	ldr	r0, [sp, #12]
 801bc18:	f000 ffcc 	bl	801cbb4 <__multiply>
 801bc1c:	0006      	movs	r6, r0
 801bc1e:	9905      	ldr	r1, [sp, #20]
 801bc20:	9803      	ldr	r0, [sp, #12]
 801bc22:	f000 feab 	bl	801c97c <_Bfree>
 801bc26:	9605      	str	r6, [sp, #20]
 801bc28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc2a:	1b5a      	subs	r2, r3, r5
 801bc2c:	42ab      	cmp	r3, r5
 801bc2e:	d004      	beq.n	801bc3a <_dtoa_r+0x812>
 801bc30:	9905      	ldr	r1, [sp, #20]
 801bc32:	9803      	ldr	r0, [sp, #12]
 801bc34:	f001 f870 	bl	801cd18 <__pow5mult>
 801bc38:	9005      	str	r0, [sp, #20]
 801bc3a:	2101      	movs	r1, #1
 801bc3c:	9803      	ldr	r0, [sp, #12]
 801bc3e:	f000 ffa1 	bl	801cb84 <__i2b>
 801bc42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc44:	0006      	movs	r6, r0
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d100      	bne.n	801bc4c <_dtoa_r+0x824>
 801bc4a:	e1bc      	b.n	801bfc6 <_dtoa_r+0xb9e>
 801bc4c:	001a      	movs	r2, r3
 801bc4e:	0001      	movs	r1, r0
 801bc50:	9803      	ldr	r0, [sp, #12]
 801bc52:	f001 f861 	bl	801cd18 <__pow5mult>
 801bc56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bc58:	0006      	movs	r6, r0
 801bc5a:	2500      	movs	r5, #0
 801bc5c:	2b01      	cmp	r3, #1
 801bc5e:	dc16      	bgt.n	801bc8e <_dtoa_r+0x866>
 801bc60:	2500      	movs	r5, #0
 801bc62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bc64:	42ab      	cmp	r3, r5
 801bc66:	d10e      	bne.n	801bc86 <_dtoa_r+0x85e>
 801bc68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bc6a:	031b      	lsls	r3, r3, #12
 801bc6c:	42ab      	cmp	r3, r5
 801bc6e:	d10a      	bne.n	801bc86 <_dtoa_r+0x85e>
 801bc70:	4b8d      	ldr	r3, [pc, #564]	@ (801bea8 <_dtoa_r+0xa80>)
 801bc72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bc74:	4213      	tst	r3, r2
 801bc76:	d006      	beq.n	801bc86 <_dtoa_r+0x85e>
 801bc78:	9b06      	ldr	r3, [sp, #24]
 801bc7a:	3501      	adds	r5, #1
 801bc7c:	3301      	adds	r3, #1
 801bc7e:	9306      	str	r3, [sp, #24]
 801bc80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc82:	3301      	adds	r3, #1
 801bc84:	930d      	str	r3, [sp, #52]	@ 0x34
 801bc86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc88:	2001      	movs	r0, #1
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d008      	beq.n	801bca0 <_dtoa_r+0x878>
 801bc8e:	6933      	ldr	r3, [r6, #16]
 801bc90:	3303      	adds	r3, #3
 801bc92:	009b      	lsls	r3, r3, #2
 801bc94:	18f3      	adds	r3, r6, r3
 801bc96:	6858      	ldr	r0, [r3, #4]
 801bc98:	f000 ff24 	bl	801cae4 <__hi0bits>
 801bc9c:	2320      	movs	r3, #32
 801bc9e:	1a18      	subs	r0, r3, r0
 801bca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bca2:	1818      	adds	r0, r3, r0
 801bca4:	0002      	movs	r2, r0
 801bca6:	231f      	movs	r3, #31
 801bca8:	401a      	ands	r2, r3
 801bcaa:	4218      	tst	r0, r3
 801bcac:	d065      	beq.n	801bd7a <_dtoa_r+0x952>
 801bcae:	3301      	adds	r3, #1
 801bcb0:	1a9b      	subs	r3, r3, r2
 801bcb2:	2b04      	cmp	r3, #4
 801bcb4:	dd5d      	ble.n	801bd72 <_dtoa_r+0x94a>
 801bcb6:	231c      	movs	r3, #28
 801bcb8:	1a9b      	subs	r3, r3, r2
 801bcba:	9a06      	ldr	r2, [sp, #24]
 801bcbc:	18e4      	adds	r4, r4, r3
 801bcbe:	18d2      	adds	r2, r2, r3
 801bcc0:	9206      	str	r2, [sp, #24]
 801bcc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bcc4:	18d3      	adds	r3, r2, r3
 801bcc6:	930d      	str	r3, [sp, #52]	@ 0x34
 801bcc8:	9b06      	ldr	r3, [sp, #24]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	dd05      	ble.n	801bcda <_dtoa_r+0x8b2>
 801bcce:	001a      	movs	r2, r3
 801bcd0:	9905      	ldr	r1, [sp, #20]
 801bcd2:	9803      	ldr	r0, [sp, #12]
 801bcd4:	f001 f87c 	bl	801cdd0 <__lshift>
 801bcd8:	9005      	str	r0, [sp, #20]
 801bcda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	dd05      	ble.n	801bcec <_dtoa_r+0x8c4>
 801bce0:	0031      	movs	r1, r6
 801bce2:	001a      	movs	r2, r3
 801bce4:	9803      	ldr	r0, [sp, #12]
 801bce6:	f001 f873 	bl	801cdd0 <__lshift>
 801bcea:	0006      	movs	r6, r0
 801bcec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d045      	beq.n	801bd7e <_dtoa_r+0x956>
 801bcf2:	0031      	movs	r1, r6
 801bcf4:	9805      	ldr	r0, [sp, #20]
 801bcf6:	f001 f8d7 	bl	801cea8 <__mcmp>
 801bcfa:	2800      	cmp	r0, #0
 801bcfc:	da3f      	bge.n	801bd7e <_dtoa_r+0x956>
 801bcfe:	9b04      	ldr	r3, [sp, #16]
 801bd00:	220a      	movs	r2, #10
 801bd02:	3b01      	subs	r3, #1
 801bd04:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd06:	9905      	ldr	r1, [sp, #20]
 801bd08:	2300      	movs	r3, #0
 801bd0a:	9803      	ldr	r0, [sp, #12]
 801bd0c:	f000 fe5a 	bl	801c9c4 <__multadd>
 801bd10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd12:	9005      	str	r0, [sp, #20]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d100      	bne.n	801bd1a <_dtoa_r+0x8f2>
 801bd18:	e15c      	b.n	801bfd4 <_dtoa_r+0xbac>
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	0039      	movs	r1, r7
 801bd1e:	220a      	movs	r2, #10
 801bd20:	9803      	ldr	r0, [sp, #12]
 801bd22:	f000 fe4f 	bl	801c9c4 <__multadd>
 801bd26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd28:	0007      	movs	r7, r0
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	dc55      	bgt.n	801bdda <_dtoa_r+0x9b2>
 801bd2e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bd30:	2b02      	cmp	r3, #2
 801bd32:	dc2d      	bgt.n	801bd90 <_dtoa_r+0x968>
 801bd34:	e051      	b.n	801bdda <_dtoa_r+0x9b2>
 801bd36:	2336      	movs	r3, #54	@ 0x36
 801bd38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bd3a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801bd3c:	9c06      	ldr	r4, [sp, #24]
 801bd3e:	1a9b      	subs	r3, r3, r2
 801bd40:	e73c      	b.n	801bbbc <_dtoa_r+0x794>
 801bd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd44:	1e5d      	subs	r5, r3, #1
 801bd46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd48:	42ab      	cmp	r3, r5
 801bd4a:	db08      	blt.n	801bd5e <_dtoa_r+0x936>
 801bd4c:	1b5d      	subs	r5, r3, r5
 801bd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd50:	9c06      	ldr	r4, [sp, #24]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	db00      	blt.n	801bd58 <_dtoa_r+0x930>
 801bd56:	e731      	b.n	801bbbc <_dtoa_r+0x794>
 801bd58:	1ae4      	subs	r4, r4, r3
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	e72e      	b.n	801bbbc <_dtoa_r+0x794>
 801bd5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bd62:	1aeb      	subs	r3, r5, r3
 801bd64:	18d3      	adds	r3, r2, r3
 801bd66:	950f      	str	r5, [sp, #60]	@ 0x3c
 801bd68:	9314      	str	r3, [sp, #80]	@ 0x50
 801bd6a:	2500      	movs	r5, #0
 801bd6c:	e7ef      	b.n	801bd4e <_dtoa_r+0x926>
 801bd6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bd70:	e75e      	b.n	801bc30 <_dtoa_r+0x808>
 801bd72:	2b04      	cmp	r3, #4
 801bd74:	d0a8      	beq.n	801bcc8 <_dtoa_r+0x8a0>
 801bd76:	331c      	adds	r3, #28
 801bd78:	e79f      	b.n	801bcba <_dtoa_r+0x892>
 801bd7a:	0013      	movs	r3, r2
 801bd7c:	e7fb      	b.n	801bd76 <_dtoa_r+0x94e>
 801bd7e:	9b04      	ldr	r3, [sp, #16]
 801bd80:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd84:	930e      	str	r3, [sp, #56]	@ 0x38
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	dc23      	bgt.n	801bdd2 <_dtoa_r+0x9aa>
 801bd8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bd8c:	2b02      	cmp	r3, #2
 801bd8e:	dd20      	ble.n	801bdd2 <_dtoa_r+0x9aa>
 801bd90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d000      	beq.n	801bd98 <_dtoa_r+0x970>
 801bd96:	e6b5      	b.n	801bb04 <_dtoa_r+0x6dc>
 801bd98:	0031      	movs	r1, r6
 801bd9a:	2205      	movs	r2, #5
 801bd9c:	9803      	ldr	r0, [sp, #12]
 801bd9e:	f000 fe11 	bl	801c9c4 <__multadd>
 801bda2:	0006      	movs	r6, r0
 801bda4:	0001      	movs	r1, r0
 801bda6:	9805      	ldr	r0, [sp, #20]
 801bda8:	f001 f87e 	bl	801cea8 <__mcmp>
 801bdac:	2800      	cmp	r0, #0
 801bdae:	dc00      	bgt.n	801bdb2 <_dtoa_r+0x98a>
 801bdb0:	e6a8      	b.n	801bb04 <_dtoa_r+0x6dc>
 801bdb2:	9b08      	ldr	r3, [sp, #32]
 801bdb4:	9a08      	ldr	r2, [sp, #32]
 801bdb6:	1c5c      	adds	r4, r3, #1
 801bdb8:	2331      	movs	r3, #49	@ 0x31
 801bdba:	7013      	strb	r3, [r2, #0]
 801bdbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdbe:	3301      	adds	r3, #1
 801bdc0:	930c      	str	r3, [sp, #48]	@ 0x30
 801bdc2:	e6a3      	b.n	801bb0c <_dtoa_r+0x6e4>
 801bdc4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801bdc6:	0037      	movs	r7, r6
 801bdc8:	e7f3      	b.n	801bdb2 <_dtoa_r+0x98a>
 801bdca:	9b04      	ldr	r3, [sp, #16]
 801bdcc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801bdce:	930c      	str	r3, [sp, #48]	@ 0x30
 801bdd0:	e7f9      	b.n	801bdc6 <_dtoa_r+0x99e>
 801bdd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d100      	bne.n	801bdda <_dtoa_r+0x9b2>
 801bdd8:	e100      	b.n	801bfdc <_dtoa_r+0xbb4>
 801bdda:	2c00      	cmp	r4, #0
 801bddc:	dd05      	ble.n	801bdea <_dtoa_r+0x9c2>
 801bdde:	0039      	movs	r1, r7
 801bde0:	0022      	movs	r2, r4
 801bde2:	9803      	ldr	r0, [sp, #12]
 801bde4:	f000 fff4 	bl	801cdd0 <__lshift>
 801bde8:	0007      	movs	r7, r0
 801bdea:	0038      	movs	r0, r7
 801bdec:	2d00      	cmp	r5, #0
 801bdee:	d018      	beq.n	801be22 <_dtoa_r+0x9fa>
 801bdf0:	6879      	ldr	r1, [r7, #4]
 801bdf2:	9803      	ldr	r0, [sp, #12]
 801bdf4:	f000 fd7e 	bl	801c8f4 <_Balloc>
 801bdf8:	1e04      	subs	r4, r0, #0
 801bdfa:	d105      	bne.n	801be08 <_dtoa_r+0x9e0>
 801bdfc:	0022      	movs	r2, r4
 801bdfe:	4b2b      	ldr	r3, [pc, #172]	@ (801beac <_dtoa_r+0xa84>)
 801be00:	482b      	ldr	r0, [pc, #172]	@ (801beb0 <_dtoa_r+0xa88>)
 801be02:	492c      	ldr	r1, [pc, #176]	@ (801beb4 <_dtoa_r+0xa8c>)
 801be04:	f7ff fb25 	bl	801b452 <_dtoa_r+0x2a>
 801be08:	0039      	movs	r1, r7
 801be0a:	693a      	ldr	r2, [r7, #16]
 801be0c:	310c      	adds	r1, #12
 801be0e:	3202      	adds	r2, #2
 801be10:	0092      	lsls	r2, r2, #2
 801be12:	300c      	adds	r0, #12
 801be14:	f7ff fa6a 	bl	801b2ec <memcpy>
 801be18:	2201      	movs	r2, #1
 801be1a:	0021      	movs	r1, r4
 801be1c:	9803      	ldr	r0, [sp, #12]
 801be1e:	f000 ffd7 	bl	801cdd0 <__lshift>
 801be22:	9b08      	ldr	r3, [sp, #32]
 801be24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be26:	9306      	str	r3, [sp, #24]
 801be28:	3b01      	subs	r3, #1
 801be2a:	189b      	adds	r3, r3, r2
 801be2c:	2201      	movs	r2, #1
 801be2e:	9704      	str	r7, [sp, #16]
 801be30:	0007      	movs	r7, r0
 801be32:	930f      	str	r3, [sp, #60]	@ 0x3c
 801be34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be36:	4013      	ands	r3, r2
 801be38:	930e      	str	r3, [sp, #56]	@ 0x38
 801be3a:	0031      	movs	r1, r6
 801be3c:	9805      	ldr	r0, [sp, #20]
 801be3e:	f7ff fa65 	bl	801b30c <quorem>
 801be42:	9904      	ldr	r1, [sp, #16]
 801be44:	0005      	movs	r5, r0
 801be46:	900a      	str	r0, [sp, #40]	@ 0x28
 801be48:	9805      	ldr	r0, [sp, #20]
 801be4a:	f001 f82d 	bl	801cea8 <__mcmp>
 801be4e:	003a      	movs	r2, r7
 801be50:	900d      	str	r0, [sp, #52]	@ 0x34
 801be52:	0031      	movs	r1, r6
 801be54:	9803      	ldr	r0, [sp, #12]
 801be56:	f001 f843 	bl	801cee0 <__mdiff>
 801be5a:	2201      	movs	r2, #1
 801be5c:	68c3      	ldr	r3, [r0, #12]
 801be5e:	0004      	movs	r4, r0
 801be60:	3530      	adds	r5, #48	@ 0x30
 801be62:	9209      	str	r2, [sp, #36]	@ 0x24
 801be64:	2b00      	cmp	r3, #0
 801be66:	d104      	bne.n	801be72 <_dtoa_r+0xa4a>
 801be68:	0001      	movs	r1, r0
 801be6a:	9805      	ldr	r0, [sp, #20]
 801be6c:	f001 f81c 	bl	801cea8 <__mcmp>
 801be70:	9009      	str	r0, [sp, #36]	@ 0x24
 801be72:	0021      	movs	r1, r4
 801be74:	9803      	ldr	r0, [sp, #12]
 801be76:	f000 fd81 	bl	801c97c <_Bfree>
 801be7a:	9b06      	ldr	r3, [sp, #24]
 801be7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801be7e:	1c5c      	adds	r4, r3, #1
 801be80:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801be82:	4313      	orrs	r3, r2
 801be84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be86:	4313      	orrs	r3, r2
 801be88:	d116      	bne.n	801beb8 <_dtoa_r+0xa90>
 801be8a:	2d39      	cmp	r5, #57	@ 0x39
 801be8c:	d02f      	beq.n	801beee <_dtoa_r+0xac6>
 801be8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be90:	2b00      	cmp	r3, #0
 801be92:	dd01      	ble.n	801be98 <_dtoa_r+0xa70>
 801be94:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801be96:	3531      	adds	r5, #49	@ 0x31
 801be98:	9b06      	ldr	r3, [sp, #24]
 801be9a:	701d      	strb	r5, [r3, #0]
 801be9c:	e638      	b.n	801bb10 <_dtoa_r+0x6e8>
 801be9e:	46c0      	nop			@ (mov r8, r8)
 801bea0:	40240000 	.word	0x40240000
 801bea4:	00000433 	.word	0x00000433
 801bea8:	7ff00000 	.word	0x7ff00000
 801beac:	0801f908 	.word	0x0801f908
 801beb0:	0801f8b0 	.word	0x0801f8b0
 801beb4:	000002ef 	.word	0x000002ef
 801beb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801beba:	2b00      	cmp	r3, #0
 801bebc:	db04      	blt.n	801bec8 <_dtoa_r+0xaa0>
 801bebe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801bec0:	4313      	orrs	r3, r2
 801bec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bec4:	4313      	orrs	r3, r2
 801bec6:	d11e      	bne.n	801bf06 <_dtoa_r+0xade>
 801bec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801beca:	2b00      	cmp	r3, #0
 801becc:	dde4      	ble.n	801be98 <_dtoa_r+0xa70>
 801bece:	9905      	ldr	r1, [sp, #20]
 801bed0:	2201      	movs	r2, #1
 801bed2:	9803      	ldr	r0, [sp, #12]
 801bed4:	f000 ff7c 	bl	801cdd0 <__lshift>
 801bed8:	0031      	movs	r1, r6
 801beda:	9005      	str	r0, [sp, #20]
 801bedc:	f000 ffe4 	bl	801cea8 <__mcmp>
 801bee0:	2800      	cmp	r0, #0
 801bee2:	dc02      	bgt.n	801beea <_dtoa_r+0xac2>
 801bee4:	d1d8      	bne.n	801be98 <_dtoa_r+0xa70>
 801bee6:	07eb      	lsls	r3, r5, #31
 801bee8:	d5d6      	bpl.n	801be98 <_dtoa_r+0xa70>
 801beea:	2d39      	cmp	r5, #57	@ 0x39
 801beec:	d1d2      	bne.n	801be94 <_dtoa_r+0xa6c>
 801beee:	2339      	movs	r3, #57	@ 0x39
 801bef0:	9a06      	ldr	r2, [sp, #24]
 801bef2:	7013      	strb	r3, [r2, #0]
 801bef4:	0023      	movs	r3, r4
 801bef6:	001c      	movs	r4, r3
 801bef8:	3b01      	subs	r3, #1
 801befa:	781a      	ldrb	r2, [r3, #0]
 801befc:	2a39      	cmp	r2, #57	@ 0x39
 801befe:	d04f      	beq.n	801bfa0 <_dtoa_r+0xb78>
 801bf00:	3201      	adds	r2, #1
 801bf02:	701a      	strb	r2, [r3, #0]
 801bf04:	e604      	b.n	801bb10 <_dtoa_r+0x6e8>
 801bf06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	dd03      	ble.n	801bf14 <_dtoa_r+0xaec>
 801bf0c:	2d39      	cmp	r5, #57	@ 0x39
 801bf0e:	d0ee      	beq.n	801beee <_dtoa_r+0xac6>
 801bf10:	3501      	adds	r5, #1
 801bf12:	e7c1      	b.n	801be98 <_dtoa_r+0xa70>
 801bf14:	9b06      	ldr	r3, [sp, #24]
 801bf16:	9a06      	ldr	r2, [sp, #24]
 801bf18:	701d      	strb	r5, [r3, #0]
 801bf1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bf1c:	4293      	cmp	r3, r2
 801bf1e:	d02a      	beq.n	801bf76 <_dtoa_r+0xb4e>
 801bf20:	2300      	movs	r3, #0
 801bf22:	220a      	movs	r2, #10
 801bf24:	9905      	ldr	r1, [sp, #20]
 801bf26:	9803      	ldr	r0, [sp, #12]
 801bf28:	f000 fd4c 	bl	801c9c4 <__multadd>
 801bf2c:	9b04      	ldr	r3, [sp, #16]
 801bf2e:	9005      	str	r0, [sp, #20]
 801bf30:	42bb      	cmp	r3, r7
 801bf32:	d109      	bne.n	801bf48 <_dtoa_r+0xb20>
 801bf34:	2300      	movs	r3, #0
 801bf36:	220a      	movs	r2, #10
 801bf38:	9904      	ldr	r1, [sp, #16]
 801bf3a:	9803      	ldr	r0, [sp, #12]
 801bf3c:	f000 fd42 	bl	801c9c4 <__multadd>
 801bf40:	9004      	str	r0, [sp, #16]
 801bf42:	0007      	movs	r7, r0
 801bf44:	9406      	str	r4, [sp, #24]
 801bf46:	e778      	b.n	801be3a <_dtoa_r+0xa12>
 801bf48:	9904      	ldr	r1, [sp, #16]
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	220a      	movs	r2, #10
 801bf4e:	9803      	ldr	r0, [sp, #12]
 801bf50:	f000 fd38 	bl	801c9c4 <__multadd>
 801bf54:	2300      	movs	r3, #0
 801bf56:	9004      	str	r0, [sp, #16]
 801bf58:	220a      	movs	r2, #10
 801bf5a:	0039      	movs	r1, r7
 801bf5c:	9803      	ldr	r0, [sp, #12]
 801bf5e:	f000 fd31 	bl	801c9c4 <__multadd>
 801bf62:	e7ee      	b.n	801bf42 <_dtoa_r+0xb1a>
 801bf64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf66:	2401      	movs	r4, #1
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	dd00      	ble.n	801bf6e <_dtoa_r+0xb46>
 801bf6c:	001c      	movs	r4, r3
 801bf6e:	9b08      	ldr	r3, [sp, #32]
 801bf70:	191c      	adds	r4, r3, r4
 801bf72:	2300      	movs	r3, #0
 801bf74:	9304      	str	r3, [sp, #16]
 801bf76:	9905      	ldr	r1, [sp, #20]
 801bf78:	2201      	movs	r2, #1
 801bf7a:	9803      	ldr	r0, [sp, #12]
 801bf7c:	f000 ff28 	bl	801cdd0 <__lshift>
 801bf80:	0031      	movs	r1, r6
 801bf82:	9005      	str	r0, [sp, #20]
 801bf84:	f000 ff90 	bl	801cea8 <__mcmp>
 801bf88:	2800      	cmp	r0, #0
 801bf8a:	dcb3      	bgt.n	801bef4 <_dtoa_r+0xacc>
 801bf8c:	d101      	bne.n	801bf92 <_dtoa_r+0xb6a>
 801bf8e:	07ed      	lsls	r5, r5, #31
 801bf90:	d4b0      	bmi.n	801bef4 <_dtoa_r+0xacc>
 801bf92:	0023      	movs	r3, r4
 801bf94:	001c      	movs	r4, r3
 801bf96:	3b01      	subs	r3, #1
 801bf98:	781a      	ldrb	r2, [r3, #0]
 801bf9a:	2a30      	cmp	r2, #48	@ 0x30
 801bf9c:	d0fa      	beq.n	801bf94 <_dtoa_r+0xb6c>
 801bf9e:	e5b7      	b.n	801bb10 <_dtoa_r+0x6e8>
 801bfa0:	9a08      	ldr	r2, [sp, #32]
 801bfa2:	429a      	cmp	r2, r3
 801bfa4:	d1a7      	bne.n	801bef6 <_dtoa_r+0xace>
 801bfa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bfa8:	3301      	adds	r3, #1
 801bfaa:	930c      	str	r3, [sp, #48]	@ 0x30
 801bfac:	2331      	movs	r3, #49	@ 0x31
 801bfae:	7013      	strb	r3, [r2, #0]
 801bfb0:	e5ae      	b.n	801bb10 <_dtoa_r+0x6e8>
 801bfb2:	4b15      	ldr	r3, [pc, #84]	@ (801c008 <_dtoa_r+0xbe0>)
 801bfb4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801bfb6:	9308      	str	r3, [sp, #32]
 801bfb8:	4b14      	ldr	r3, [pc, #80]	@ (801c00c <_dtoa_r+0xbe4>)
 801bfba:	2a00      	cmp	r2, #0
 801bfbc:	d001      	beq.n	801bfc2 <_dtoa_r+0xb9a>
 801bfbe:	f7ff fa7b 	bl	801b4b8 <_dtoa_r+0x90>
 801bfc2:	f7ff fa7b 	bl	801b4bc <_dtoa_r+0x94>
 801bfc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bfc8:	2b01      	cmp	r3, #1
 801bfca:	dc00      	bgt.n	801bfce <_dtoa_r+0xba6>
 801bfcc:	e648      	b.n	801bc60 <_dtoa_r+0x838>
 801bfce:	2001      	movs	r0, #1
 801bfd0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801bfd2:	e665      	b.n	801bca0 <_dtoa_r+0x878>
 801bfd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	dc00      	bgt.n	801bfdc <_dtoa_r+0xbb4>
 801bfda:	e6d6      	b.n	801bd8a <_dtoa_r+0x962>
 801bfdc:	2400      	movs	r4, #0
 801bfde:	0031      	movs	r1, r6
 801bfe0:	9805      	ldr	r0, [sp, #20]
 801bfe2:	f7ff f993 	bl	801b30c <quorem>
 801bfe6:	9b08      	ldr	r3, [sp, #32]
 801bfe8:	3030      	adds	r0, #48	@ 0x30
 801bfea:	5518      	strb	r0, [r3, r4]
 801bfec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfee:	3401      	adds	r4, #1
 801bff0:	0005      	movs	r5, r0
 801bff2:	429c      	cmp	r4, r3
 801bff4:	dab6      	bge.n	801bf64 <_dtoa_r+0xb3c>
 801bff6:	2300      	movs	r3, #0
 801bff8:	220a      	movs	r2, #10
 801bffa:	9905      	ldr	r1, [sp, #20]
 801bffc:	9803      	ldr	r0, [sp, #12]
 801bffe:	f000 fce1 	bl	801c9c4 <__multadd>
 801c002:	9005      	str	r0, [sp, #20]
 801c004:	e7eb      	b.n	801bfde <_dtoa_r+0xbb6>
 801c006:	46c0      	nop			@ (mov r8, r8)
 801c008:	0801f88c 	.word	0x0801f88c
 801c00c:	0801f894 	.word	0x0801f894

0801c010 <_free_r>:
 801c010:	b570      	push	{r4, r5, r6, lr}
 801c012:	0005      	movs	r5, r0
 801c014:	1e0c      	subs	r4, r1, #0
 801c016:	d010      	beq.n	801c03a <_free_r+0x2a>
 801c018:	3c04      	subs	r4, #4
 801c01a:	6823      	ldr	r3, [r4, #0]
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	da00      	bge.n	801c022 <_free_r+0x12>
 801c020:	18e4      	adds	r4, r4, r3
 801c022:	0028      	movs	r0, r5
 801c024:	f000 fc56 	bl	801c8d4 <__malloc_lock>
 801c028:	4a1d      	ldr	r2, [pc, #116]	@ (801c0a0 <_free_r+0x90>)
 801c02a:	6813      	ldr	r3, [r2, #0]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d105      	bne.n	801c03c <_free_r+0x2c>
 801c030:	6063      	str	r3, [r4, #4]
 801c032:	6014      	str	r4, [r2, #0]
 801c034:	0028      	movs	r0, r5
 801c036:	f000 fc55 	bl	801c8e4 <__malloc_unlock>
 801c03a:	bd70      	pop	{r4, r5, r6, pc}
 801c03c:	42a3      	cmp	r3, r4
 801c03e:	d908      	bls.n	801c052 <_free_r+0x42>
 801c040:	6820      	ldr	r0, [r4, #0]
 801c042:	1821      	adds	r1, r4, r0
 801c044:	428b      	cmp	r3, r1
 801c046:	d1f3      	bne.n	801c030 <_free_r+0x20>
 801c048:	6819      	ldr	r1, [r3, #0]
 801c04a:	685b      	ldr	r3, [r3, #4]
 801c04c:	1809      	adds	r1, r1, r0
 801c04e:	6021      	str	r1, [r4, #0]
 801c050:	e7ee      	b.n	801c030 <_free_r+0x20>
 801c052:	001a      	movs	r2, r3
 801c054:	685b      	ldr	r3, [r3, #4]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d001      	beq.n	801c05e <_free_r+0x4e>
 801c05a:	42a3      	cmp	r3, r4
 801c05c:	d9f9      	bls.n	801c052 <_free_r+0x42>
 801c05e:	6811      	ldr	r1, [r2, #0]
 801c060:	1850      	adds	r0, r2, r1
 801c062:	42a0      	cmp	r0, r4
 801c064:	d10b      	bne.n	801c07e <_free_r+0x6e>
 801c066:	6820      	ldr	r0, [r4, #0]
 801c068:	1809      	adds	r1, r1, r0
 801c06a:	1850      	adds	r0, r2, r1
 801c06c:	6011      	str	r1, [r2, #0]
 801c06e:	4283      	cmp	r3, r0
 801c070:	d1e0      	bne.n	801c034 <_free_r+0x24>
 801c072:	6818      	ldr	r0, [r3, #0]
 801c074:	685b      	ldr	r3, [r3, #4]
 801c076:	1841      	adds	r1, r0, r1
 801c078:	6011      	str	r1, [r2, #0]
 801c07a:	6053      	str	r3, [r2, #4]
 801c07c:	e7da      	b.n	801c034 <_free_r+0x24>
 801c07e:	42a0      	cmp	r0, r4
 801c080:	d902      	bls.n	801c088 <_free_r+0x78>
 801c082:	230c      	movs	r3, #12
 801c084:	602b      	str	r3, [r5, #0]
 801c086:	e7d5      	b.n	801c034 <_free_r+0x24>
 801c088:	6820      	ldr	r0, [r4, #0]
 801c08a:	1821      	adds	r1, r4, r0
 801c08c:	428b      	cmp	r3, r1
 801c08e:	d103      	bne.n	801c098 <_free_r+0x88>
 801c090:	6819      	ldr	r1, [r3, #0]
 801c092:	685b      	ldr	r3, [r3, #4]
 801c094:	1809      	adds	r1, r1, r0
 801c096:	6021      	str	r1, [r4, #0]
 801c098:	6063      	str	r3, [r4, #4]
 801c09a:	6054      	str	r4, [r2, #4]
 801c09c:	e7ca      	b.n	801c034 <_free_r+0x24>
 801c09e:	46c0      	nop			@ (mov r8, r8)
 801c0a0:	20003848 	.word	0x20003848

0801c0a4 <rshift>:
 801c0a4:	0002      	movs	r2, r0
 801c0a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0a8:	6904      	ldr	r4, [r0, #16]
 801c0aa:	b085      	sub	sp, #20
 801c0ac:	3214      	adds	r2, #20
 801c0ae:	114b      	asrs	r3, r1, #5
 801c0b0:	0016      	movs	r6, r2
 801c0b2:	9302      	str	r3, [sp, #8]
 801c0b4:	429c      	cmp	r4, r3
 801c0b6:	dd31      	ble.n	801c11c <rshift+0x78>
 801c0b8:	261f      	movs	r6, #31
 801c0ba:	000f      	movs	r7, r1
 801c0bc:	009b      	lsls	r3, r3, #2
 801c0be:	00a5      	lsls	r5, r4, #2
 801c0c0:	18d3      	adds	r3, r2, r3
 801c0c2:	4037      	ands	r7, r6
 801c0c4:	1955      	adds	r5, r2, r5
 801c0c6:	9300      	str	r3, [sp, #0]
 801c0c8:	9701      	str	r7, [sp, #4]
 801c0ca:	4231      	tst	r1, r6
 801c0cc:	d10d      	bne.n	801c0ea <rshift+0x46>
 801c0ce:	0016      	movs	r6, r2
 801c0d0:	0019      	movs	r1, r3
 801c0d2:	428d      	cmp	r5, r1
 801c0d4:	d836      	bhi.n	801c144 <rshift+0xa0>
 801c0d6:	9b00      	ldr	r3, [sp, #0]
 801c0d8:	2600      	movs	r6, #0
 801c0da:	3b03      	subs	r3, #3
 801c0dc:	429d      	cmp	r5, r3
 801c0de:	d302      	bcc.n	801c0e6 <rshift+0x42>
 801c0e0:	9b02      	ldr	r3, [sp, #8]
 801c0e2:	1ae4      	subs	r4, r4, r3
 801c0e4:	00a6      	lsls	r6, r4, #2
 801c0e6:	1996      	adds	r6, r2, r6
 801c0e8:	e018      	b.n	801c11c <rshift+0x78>
 801c0ea:	2120      	movs	r1, #32
 801c0ec:	9e01      	ldr	r6, [sp, #4]
 801c0ee:	9f01      	ldr	r7, [sp, #4]
 801c0f0:	1b89      	subs	r1, r1, r6
 801c0f2:	9e00      	ldr	r6, [sp, #0]
 801c0f4:	9103      	str	r1, [sp, #12]
 801c0f6:	ce02      	ldmia	r6!, {r1}
 801c0f8:	4694      	mov	ip, r2
 801c0fa:	40f9      	lsrs	r1, r7
 801c0fc:	42b5      	cmp	r5, r6
 801c0fe:	d816      	bhi.n	801c12e <rshift+0x8a>
 801c100:	9b00      	ldr	r3, [sp, #0]
 801c102:	2600      	movs	r6, #0
 801c104:	3301      	adds	r3, #1
 801c106:	429d      	cmp	r5, r3
 801c108:	d303      	bcc.n	801c112 <rshift+0x6e>
 801c10a:	9b02      	ldr	r3, [sp, #8]
 801c10c:	1ae4      	subs	r4, r4, r3
 801c10e:	00a6      	lsls	r6, r4, #2
 801c110:	3e04      	subs	r6, #4
 801c112:	1996      	adds	r6, r2, r6
 801c114:	6031      	str	r1, [r6, #0]
 801c116:	2900      	cmp	r1, #0
 801c118:	d000      	beq.n	801c11c <rshift+0x78>
 801c11a:	3604      	adds	r6, #4
 801c11c:	1ab1      	subs	r1, r6, r2
 801c11e:	1089      	asrs	r1, r1, #2
 801c120:	6101      	str	r1, [r0, #16]
 801c122:	4296      	cmp	r6, r2
 801c124:	d101      	bne.n	801c12a <rshift+0x86>
 801c126:	2300      	movs	r3, #0
 801c128:	6143      	str	r3, [r0, #20]
 801c12a:	b005      	add	sp, #20
 801c12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c12e:	6837      	ldr	r7, [r6, #0]
 801c130:	9b03      	ldr	r3, [sp, #12]
 801c132:	409f      	lsls	r7, r3
 801c134:	430f      	orrs	r7, r1
 801c136:	4661      	mov	r1, ip
 801c138:	c180      	stmia	r1!, {r7}
 801c13a:	468c      	mov	ip, r1
 801c13c:	9b01      	ldr	r3, [sp, #4]
 801c13e:	ce02      	ldmia	r6!, {r1}
 801c140:	40d9      	lsrs	r1, r3
 801c142:	e7db      	b.n	801c0fc <rshift+0x58>
 801c144:	c980      	ldmia	r1!, {r7}
 801c146:	c680      	stmia	r6!, {r7}
 801c148:	e7c3      	b.n	801c0d2 <rshift+0x2e>

0801c14a <__hexdig_fun>:
 801c14a:	0002      	movs	r2, r0
 801c14c:	3a30      	subs	r2, #48	@ 0x30
 801c14e:	0003      	movs	r3, r0
 801c150:	2a09      	cmp	r2, #9
 801c152:	d802      	bhi.n	801c15a <__hexdig_fun+0x10>
 801c154:	3b20      	subs	r3, #32
 801c156:	b2d8      	uxtb	r0, r3
 801c158:	4770      	bx	lr
 801c15a:	0002      	movs	r2, r0
 801c15c:	3a61      	subs	r2, #97	@ 0x61
 801c15e:	2a05      	cmp	r2, #5
 801c160:	d801      	bhi.n	801c166 <__hexdig_fun+0x1c>
 801c162:	3b47      	subs	r3, #71	@ 0x47
 801c164:	e7f7      	b.n	801c156 <__hexdig_fun+0xc>
 801c166:	001a      	movs	r2, r3
 801c168:	3a41      	subs	r2, #65	@ 0x41
 801c16a:	2000      	movs	r0, #0
 801c16c:	2a05      	cmp	r2, #5
 801c16e:	d8f3      	bhi.n	801c158 <__hexdig_fun+0xe>
 801c170:	3b27      	subs	r3, #39	@ 0x27
 801c172:	e7f0      	b.n	801c156 <__hexdig_fun+0xc>

0801c174 <__gethex>:
 801c174:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c176:	b089      	sub	sp, #36	@ 0x24
 801c178:	9307      	str	r3, [sp, #28]
 801c17a:	680b      	ldr	r3, [r1, #0]
 801c17c:	9201      	str	r2, [sp, #4]
 801c17e:	9003      	str	r0, [sp, #12]
 801c180:	9106      	str	r1, [sp, #24]
 801c182:	1c9a      	adds	r2, r3, #2
 801c184:	0011      	movs	r1, r2
 801c186:	3201      	adds	r2, #1
 801c188:	1e50      	subs	r0, r2, #1
 801c18a:	7800      	ldrb	r0, [r0, #0]
 801c18c:	2830      	cmp	r0, #48	@ 0x30
 801c18e:	d0f9      	beq.n	801c184 <__gethex+0x10>
 801c190:	1acb      	subs	r3, r1, r3
 801c192:	3b02      	subs	r3, #2
 801c194:	9305      	str	r3, [sp, #20]
 801c196:	9100      	str	r1, [sp, #0]
 801c198:	f7ff ffd7 	bl	801c14a <__hexdig_fun>
 801c19c:	2300      	movs	r3, #0
 801c19e:	001d      	movs	r5, r3
 801c1a0:	9302      	str	r3, [sp, #8]
 801c1a2:	4298      	cmp	r0, r3
 801c1a4:	d11e      	bne.n	801c1e4 <__gethex+0x70>
 801c1a6:	2201      	movs	r2, #1
 801c1a8:	49a6      	ldr	r1, [pc, #664]	@ (801c444 <__gethex+0x2d0>)
 801c1aa:	9800      	ldr	r0, [sp, #0]
 801c1ac:	f7fe ffd8 	bl	801b160 <strncmp>
 801c1b0:	0007      	movs	r7, r0
 801c1b2:	42a8      	cmp	r0, r5
 801c1b4:	d000      	beq.n	801c1b8 <__gethex+0x44>
 801c1b6:	e06a      	b.n	801c28e <__gethex+0x11a>
 801c1b8:	9b00      	ldr	r3, [sp, #0]
 801c1ba:	7858      	ldrb	r0, [r3, #1]
 801c1bc:	1c5c      	adds	r4, r3, #1
 801c1be:	f7ff ffc4 	bl	801c14a <__hexdig_fun>
 801c1c2:	2301      	movs	r3, #1
 801c1c4:	9302      	str	r3, [sp, #8]
 801c1c6:	42a8      	cmp	r0, r5
 801c1c8:	d02f      	beq.n	801c22a <__gethex+0xb6>
 801c1ca:	9400      	str	r4, [sp, #0]
 801c1cc:	9b00      	ldr	r3, [sp, #0]
 801c1ce:	7818      	ldrb	r0, [r3, #0]
 801c1d0:	2830      	cmp	r0, #48	@ 0x30
 801c1d2:	d009      	beq.n	801c1e8 <__gethex+0x74>
 801c1d4:	f7ff ffb9 	bl	801c14a <__hexdig_fun>
 801c1d8:	4242      	negs	r2, r0
 801c1da:	4142      	adcs	r2, r0
 801c1dc:	2301      	movs	r3, #1
 801c1de:	0025      	movs	r5, r4
 801c1e0:	9202      	str	r2, [sp, #8]
 801c1e2:	9305      	str	r3, [sp, #20]
 801c1e4:	9c00      	ldr	r4, [sp, #0]
 801c1e6:	e004      	b.n	801c1f2 <__gethex+0x7e>
 801c1e8:	9b00      	ldr	r3, [sp, #0]
 801c1ea:	3301      	adds	r3, #1
 801c1ec:	9300      	str	r3, [sp, #0]
 801c1ee:	e7ed      	b.n	801c1cc <__gethex+0x58>
 801c1f0:	3401      	adds	r4, #1
 801c1f2:	7820      	ldrb	r0, [r4, #0]
 801c1f4:	f7ff ffa9 	bl	801c14a <__hexdig_fun>
 801c1f8:	1e07      	subs	r7, r0, #0
 801c1fa:	d1f9      	bne.n	801c1f0 <__gethex+0x7c>
 801c1fc:	2201      	movs	r2, #1
 801c1fe:	0020      	movs	r0, r4
 801c200:	4990      	ldr	r1, [pc, #576]	@ (801c444 <__gethex+0x2d0>)
 801c202:	f7fe ffad 	bl	801b160 <strncmp>
 801c206:	2800      	cmp	r0, #0
 801c208:	d10d      	bne.n	801c226 <__gethex+0xb2>
 801c20a:	2d00      	cmp	r5, #0
 801c20c:	d106      	bne.n	801c21c <__gethex+0xa8>
 801c20e:	3401      	adds	r4, #1
 801c210:	0025      	movs	r5, r4
 801c212:	7820      	ldrb	r0, [r4, #0]
 801c214:	f7ff ff99 	bl	801c14a <__hexdig_fun>
 801c218:	2800      	cmp	r0, #0
 801c21a:	d102      	bne.n	801c222 <__gethex+0xae>
 801c21c:	1b2d      	subs	r5, r5, r4
 801c21e:	00af      	lsls	r7, r5, #2
 801c220:	e003      	b.n	801c22a <__gethex+0xb6>
 801c222:	3401      	adds	r4, #1
 801c224:	e7f5      	b.n	801c212 <__gethex+0x9e>
 801c226:	2d00      	cmp	r5, #0
 801c228:	d1f8      	bne.n	801c21c <__gethex+0xa8>
 801c22a:	2220      	movs	r2, #32
 801c22c:	7823      	ldrb	r3, [r4, #0]
 801c22e:	0026      	movs	r6, r4
 801c230:	4393      	bics	r3, r2
 801c232:	2b50      	cmp	r3, #80	@ 0x50
 801c234:	d11d      	bne.n	801c272 <__gethex+0xfe>
 801c236:	7863      	ldrb	r3, [r4, #1]
 801c238:	2b2b      	cmp	r3, #43	@ 0x2b
 801c23a:	d02d      	beq.n	801c298 <__gethex+0x124>
 801c23c:	2b2d      	cmp	r3, #45	@ 0x2d
 801c23e:	d02f      	beq.n	801c2a0 <__gethex+0x12c>
 801c240:	2300      	movs	r3, #0
 801c242:	1c66      	adds	r6, r4, #1
 801c244:	9304      	str	r3, [sp, #16]
 801c246:	7830      	ldrb	r0, [r6, #0]
 801c248:	f7ff ff7f 	bl	801c14a <__hexdig_fun>
 801c24c:	1e43      	subs	r3, r0, #1
 801c24e:	b2db      	uxtb	r3, r3
 801c250:	0005      	movs	r5, r0
 801c252:	2b18      	cmp	r3, #24
 801c254:	d82a      	bhi.n	801c2ac <__gethex+0x138>
 801c256:	7870      	ldrb	r0, [r6, #1]
 801c258:	f7ff ff77 	bl	801c14a <__hexdig_fun>
 801c25c:	1e43      	subs	r3, r0, #1
 801c25e:	b2db      	uxtb	r3, r3
 801c260:	3601      	adds	r6, #1
 801c262:	3d10      	subs	r5, #16
 801c264:	2b18      	cmp	r3, #24
 801c266:	d91d      	bls.n	801c2a4 <__gethex+0x130>
 801c268:	9b04      	ldr	r3, [sp, #16]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d000      	beq.n	801c270 <__gethex+0xfc>
 801c26e:	426d      	negs	r5, r5
 801c270:	197f      	adds	r7, r7, r5
 801c272:	9b06      	ldr	r3, [sp, #24]
 801c274:	601e      	str	r6, [r3, #0]
 801c276:	9b02      	ldr	r3, [sp, #8]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d019      	beq.n	801c2b0 <__gethex+0x13c>
 801c27c:	9b05      	ldr	r3, [sp, #20]
 801c27e:	2606      	movs	r6, #6
 801c280:	425a      	negs	r2, r3
 801c282:	4153      	adcs	r3, r2
 801c284:	425b      	negs	r3, r3
 801c286:	401e      	ands	r6, r3
 801c288:	0030      	movs	r0, r6
 801c28a:	b009      	add	sp, #36	@ 0x24
 801c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c28e:	2301      	movs	r3, #1
 801c290:	2700      	movs	r7, #0
 801c292:	9c00      	ldr	r4, [sp, #0]
 801c294:	9302      	str	r3, [sp, #8]
 801c296:	e7c8      	b.n	801c22a <__gethex+0xb6>
 801c298:	2300      	movs	r3, #0
 801c29a:	9304      	str	r3, [sp, #16]
 801c29c:	1ca6      	adds	r6, r4, #2
 801c29e:	e7d2      	b.n	801c246 <__gethex+0xd2>
 801c2a0:	2301      	movs	r3, #1
 801c2a2:	e7fa      	b.n	801c29a <__gethex+0x126>
 801c2a4:	230a      	movs	r3, #10
 801c2a6:	435d      	muls	r5, r3
 801c2a8:	182d      	adds	r5, r5, r0
 801c2aa:	e7d4      	b.n	801c256 <__gethex+0xe2>
 801c2ac:	0026      	movs	r6, r4
 801c2ae:	e7e0      	b.n	801c272 <__gethex+0xfe>
 801c2b0:	9b00      	ldr	r3, [sp, #0]
 801c2b2:	9902      	ldr	r1, [sp, #8]
 801c2b4:	1ae3      	subs	r3, r4, r3
 801c2b6:	3b01      	subs	r3, #1
 801c2b8:	2b07      	cmp	r3, #7
 801c2ba:	dc0a      	bgt.n	801c2d2 <__gethex+0x15e>
 801c2bc:	9803      	ldr	r0, [sp, #12]
 801c2be:	f000 fb19 	bl	801c8f4 <_Balloc>
 801c2c2:	1e05      	subs	r5, r0, #0
 801c2c4:	d108      	bne.n	801c2d8 <__gethex+0x164>
 801c2c6:	002a      	movs	r2, r5
 801c2c8:	21e4      	movs	r1, #228	@ 0xe4
 801c2ca:	4b5f      	ldr	r3, [pc, #380]	@ (801c448 <__gethex+0x2d4>)
 801c2cc:	485f      	ldr	r0, [pc, #380]	@ (801c44c <__gethex+0x2d8>)
 801c2ce:	f001 fc03 	bl	801dad8 <__assert_func>
 801c2d2:	3101      	adds	r1, #1
 801c2d4:	105b      	asrs	r3, r3, #1
 801c2d6:	e7ef      	b.n	801c2b8 <__gethex+0x144>
 801c2d8:	0003      	movs	r3, r0
 801c2da:	3314      	adds	r3, #20
 801c2dc:	9302      	str	r3, [sp, #8]
 801c2de:	9305      	str	r3, [sp, #20]
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	001e      	movs	r6, r3
 801c2e4:	9304      	str	r3, [sp, #16]
 801c2e6:	9b00      	ldr	r3, [sp, #0]
 801c2e8:	42a3      	cmp	r3, r4
 801c2ea:	d338      	bcc.n	801c35e <__gethex+0x1ea>
 801c2ec:	9c05      	ldr	r4, [sp, #20]
 801c2ee:	9b02      	ldr	r3, [sp, #8]
 801c2f0:	c440      	stmia	r4!, {r6}
 801c2f2:	1ae4      	subs	r4, r4, r3
 801c2f4:	10a4      	asrs	r4, r4, #2
 801c2f6:	0030      	movs	r0, r6
 801c2f8:	612c      	str	r4, [r5, #16]
 801c2fa:	f000 fbf3 	bl	801cae4 <__hi0bits>
 801c2fe:	9b01      	ldr	r3, [sp, #4]
 801c300:	0164      	lsls	r4, r4, #5
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	1a26      	subs	r6, r4, r0
 801c306:	9300      	str	r3, [sp, #0]
 801c308:	429e      	cmp	r6, r3
 801c30a:	dd52      	ble.n	801c3b2 <__gethex+0x23e>
 801c30c:	1af6      	subs	r6, r6, r3
 801c30e:	0031      	movs	r1, r6
 801c310:	0028      	movs	r0, r5
 801c312:	f000 ff96 	bl	801d242 <__any_on>
 801c316:	1e04      	subs	r4, r0, #0
 801c318:	d00f      	beq.n	801c33a <__gethex+0x1c6>
 801c31a:	2401      	movs	r4, #1
 801c31c:	231f      	movs	r3, #31
 801c31e:	0020      	movs	r0, r4
 801c320:	1e72      	subs	r2, r6, #1
 801c322:	4013      	ands	r3, r2
 801c324:	4098      	lsls	r0, r3
 801c326:	0003      	movs	r3, r0
 801c328:	1151      	asrs	r1, r2, #5
 801c32a:	9802      	ldr	r0, [sp, #8]
 801c32c:	0089      	lsls	r1, r1, #2
 801c32e:	5809      	ldr	r1, [r1, r0]
 801c330:	4219      	tst	r1, r3
 801c332:	d002      	beq.n	801c33a <__gethex+0x1c6>
 801c334:	42a2      	cmp	r2, r4
 801c336:	dc34      	bgt.n	801c3a2 <__gethex+0x22e>
 801c338:	2402      	movs	r4, #2
 801c33a:	0031      	movs	r1, r6
 801c33c:	0028      	movs	r0, r5
 801c33e:	f7ff feb1 	bl	801c0a4 <rshift>
 801c342:	19bf      	adds	r7, r7, r6
 801c344:	9b01      	ldr	r3, [sp, #4]
 801c346:	689b      	ldr	r3, [r3, #8]
 801c348:	42bb      	cmp	r3, r7
 801c34a:	da42      	bge.n	801c3d2 <__gethex+0x25e>
 801c34c:	0029      	movs	r1, r5
 801c34e:	9803      	ldr	r0, [sp, #12]
 801c350:	f000 fb14 	bl	801c97c <_Bfree>
 801c354:	2300      	movs	r3, #0
 801c356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c358:	26a3      	movs	r6, #163	@ 0xa3
 801c35a:	6013      	str	r3, [r2, #0]
 801c35c:	e794      	b.n	801c288 <__gethex+0x114>
 801c35e:	3c01      	subs	r4, #1
 801c360:	7823      	ldrb	r3, [r4, #0]
 801c362:	2b2e      	cmp	r3, #46	@ 0x2e
 801c364:	d012      	beq.n	801c38c <__gethex+0x218>
 801c366:	9b04      	ldr	r3, [sp, #16]
 801c368:	2b20      	cmp	r3, #32
 801c36a:	d104      	bne.n	801c376 <__gethex+0x202>
 801c36c:	9b05      	ldr	r3, [sp, #20]
 801c36e:	c340      	stmia	r3!, {r6}
 801c370:	2600      	movs	r6, #0
 801c372:	9305      	str	r3, [sp, #20]
 801c374:	9604      	str	r6, [sp, #16]
 801c376:	7820      	ldrb	r0, [r4, #0]
 801c378:	f7ff fee7 	bl	801c14a <__hexdig_fun>
 801c37c:	230f      	movs	r3, #15
 801c37e:	4018      	ands	r0, r3
 801c380:	9b04      	ldr	r3, [sp, #16]
 801c382:	4098      	lsls	r0, r3
 801c384:	3304      	adds	r3, #4
 801c386:	4306      	orrs	r6, r0
 801c388:	9304      	str	r3, [sp, #16]
 801c38a:	e7ac      	b.n	801c2e6 <__gethex+0x172>
 801c38c:	9b00      	ldr	r3, [sp, #0]
 801c38e:	42a3      	cmp	r3, r4
 801c390:	d8e9      	bhi.n	801c366 <__gethex+0x1f2>
 801c392:	2201      	movs	r2, #1
 801c394:	0020      	movs	r0, r4
 801c396:	492b      	ldr	r1, [pc, #172]	@ (801c444 <__gethex+0x2d0>)
 801c398:	f7fe fee2 	bl	801b160 <strncmp>
 801c39c:	2800      	cmp	r0, #0
 801c39e:	d1e2      	bne.n	801c366 <__gethex+0x1f2>
 801c3a0:	e7a1      	b.n	801c2e6 <__gethex+0x172>
 801c3a2:	0028      	movs	r0, r5
 801c3a4:	1eb1      	subs	r1, r6, #2
 801c3a6:	f000 ff4c 	bl	801d242 <__any_on>
 801c3aa:	2800      	cmp	r0, #0
 801c3ac:	d0c4      	beq.n	801c338 <__gethex+0x1c4>
 801c3ae:	2403      	movs	r4, #3
 801c3b0:	e7c3      	b.n	801c33a <__gethex+0x1c6>
 801c3b2:	9b00      	ldr	r3, [sp, #0]
 801c3b4:	2400      	movs	r4, #0
 801c3b6:	429e      	cmp	r6, r3
 801c3b8:	dac4      	bge.n	801c344 <__gethex+0x1d0>
 801c3ba:	1b9e      	subs	r6, r3, r6
 801c3bc:	0029      	movs	r1, r5
 801c3be:	0032      	movs	r2, r6
 801c3c0:	9803      	ldr	r0, [sp, #12]
 801c3c2:	f000 fd05 	bl	801cdd0 <__lshift>
 801c3c6:	0003      	movs	r3, r0
 801c3c8:	3314      	adds	r3, #20
 801c3ca:	0005      	movs	r5, r0
 801c3cc:	1bbf      	subs	r7, r7, r6
 801c3ce:	9302      	str	r3, [sp, #8]
 801c3d0:	e7b8      	b.n	801c344 <__gethex+0x1d0>
 801c3d2:	9b01      	ldr	r3, [sp, #4]
 801c3d4:	685e      	ldr	r6, [r3, #4]
 801c3d6:	42be      	cmp	r6, r7
 801c3d8:	dd6f      	ble.n	801c4ba <__gethex+0x346>
 801c3da:	9b00      	ldr	r3, [sp, #0]
 801c3dc:	1bf6      	subs	r6, r6, r7
 801c3de:	42b3      	cmp	r3, r6
 801c3e0:	dc36      	bgt.n	801c450 <__gethex+0x2dc>
 801c3e2:	9b01      	ldr	r3, [sp, #4]
 801c3e4:	68db      	ldr	r3, [r3, #12]
 801c3e6:	2b02      	cmp	r3, #2
 801c3e8:	d024      	beq.n	801c434 <__gethex+0x2c0>
 801c3ea:	2b03      	cmp	r3, #3
 801c3ec:	d026      	beq.n	801c43c <__gethex+0x2c8>
 801c3ee:	2b01      	cmp	r3, #1
 801c3f0:	d117      	bne.n	801c422 <__gethex+0x2ae>
 801c3f2:	9b00      	ldr	r3, [sp, #0]
 801c3f4:	42b3      	cmp	r3, r6
 801c3f6:	d114      	bne.n	801c422 <__gethex+0x2ae>
 801c3f8:	2b01      	cmp	r3, #1
 801c3fa:	d10b      	bne.n	801c414 <__gethex+0x2a0>
 801c3fc:	9b01      	ldr	r3, [sp, #4]
 801c3fe:	9a07      	ldr	r2, [sp, #28]
 801c400:	685b      	ldr	r3, [r3, #4]
 801c402:	2662      	movs	r6, #98	@ 0x62
 801c404:	6013      	str	r3, [r2, #0]
 801c406:	2301      	movs	r3, #1
 801c408:	9a02      	ldr	r2, [sp, #8]
 801c40a:	612b      	str	r3, [r5, #16]
 801c40c:	6013      	str	r3, [r2, #0]
 801c40e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c410:	601d      	str	r5, [r3, #0]
 801c412:	e739      	b.n	801c288 <__gethex+0x114>
 801c414:	9900      	ldr	r1, [sp, #0]
 801c416:	0028      	movs	r0, r5
 801c418:	3901      	subs	r1, #1
 801c41a:	f000 ff12 	bl	801d242 <__any_on>
 801c41e:	2800      	cmp	r0, #0
 801c420:	d1ec      	bne.n	801c3fc <__gethex+0x288>
 801c422:	0029      	movs	r1, r5
 801c424:	9803      	ldr	r0, [sp, #12]
 801c426:	f000 faa9 	bl	801c97c <_Bfree>
 801c42a:	2300      	movs	r3, #0
 801c42c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c42e:	2650      	movs	r6, #80	@ 0x50
 801c430:	6013      	str	r3, [r2, #0]
 801c432:	e729      	b.n	801c288 <__gethex+0x114>
 801c434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c436:	2b00      	cmp	r3, #0
 801c438:	d1f3      	bne.n	801c422 <__gethex+0x2ae>
 801c43a:	e7df      	b.n	801c3fc <__gethex+0x288>
 801c43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d1dc      	bne.n	801c3fc <__gethex+0x288>
 801c442:	e7ee      	b.n	801c422 <__gethex+0x2ae>
 801c444:	0801f7f8 	.word	0x0801f7f8
 801c448:	0801f908 	.word	0x0801f908
 801c44c:	0801f919 	.word	0x0801f919
 801c450:	1e77      	subs	r7, r6, #1
 801c452:	2c00      	cmp	r4, #0
 801c454:	d12f      	bne.n	801c4b6 <__gethex+0x342>
 801c456:	2f00      	cmp	r7, #0
 801c458:	d004      	beq.n	801c464 <__gethex+0x2f0>
 801c45a:	0039      	movs	r1, r7
 801c45c:	0028      	movs	r0, r5
 801c45e:	f000 fef0 	bl	801d242 <__any_on>
 801c462:	0004      	movs	r4, r0
 801c464:	231f      	movs	r3, #31
 801c466:	117a      	asrs	r2, r7, #5
 801c468:	401f      	ands	r7, r3
 801c46a:	3b1e      	subs	r3, #30
 801c46c:	40bb      	lsls	r3, r7
 801c46e:	9902      	ldr	r1, [sp, #8]
 801c470:	0092      	lsls	r2, r2, #2
 801c472:	5852      	ldr	r2, [r2, r1]
 801c474:	421a      	tst	r2, r3
 801c476:	d001      	beq.n	801c47c <__gethex+0x308>
 801c478:	2302      	movs	r3, #2
 801c47a:	431c      	orrs	r4, r3
 801c47c:	9b00      	ldr	r3, [sp, #0]
 801c47e:	0031      	movs	r1, r6
 801c480:	1b9b      	subs	r3, r3, r6
 801c482:	2602      	movs	r6, #2
 801c484:	0028      	movs	r0, r5
 801c486:	9300      	str	r3, [sp, #0]
 801c488:	f7ff fe0c 	bl	801c0a4 <rshift>
 801c48c:	9b01      	ldr	r3, [sp, #4]
 801c48e:	685f      	ldr	r7, [r3, #4]
 801c490:	2c00      	cmp	r4, #0
 801c492:	d03f      	beq.n	801c514 <__gethex+0x3a0>
 801c494:	9b01      	ldr	r3, [sp, #4]
 801c496:	68db      	ldr	r3, [r3, #12]
 801c498:	2b02      	cmp	r3, #2
 801c49a:	d010      	beq.n	801c4be <__gethex+0x34a>
 801c49c:	2b03      	cmp	r3, #3
 801c49e:	d012      	beq.n	801c4c6 <__gethex+0x352>
 801c4a0:	2b01      	cmp	r3, #1
 801c4a2:	d106      	bne.n	801c4b2 <__gethex+0x33e>
 801c4a4:	07a2      	lsls	r2, r4, #30
 801c4a6:	d504      	bpl.n	801c4b2 <__gethex+0x33e>
 801c4a8:	9a02      	ldr	r2, [sp, #8]
 801c4aa:	6812      	ldr	r2, [r2, #0]
 801c4ac:	4314      	orrs	r4, r2
 801c4ae:	421c      	tst	r4, r3
 801c4b0:	d10c      	bne.n	801c4cc <__gethex+0x358>
 801c4b2:	2310      	movs	r3, #16
 801c4b4:	e02d      	b.n	801c512 <__gethex+0x39e>
 801c4b6:	2401      	movs	r4, #1
 801c4b8:	e7d4      	b.n	801c464 <__gethex+0x2f0>
 801c4ba:	2601      	movs	r6, #1
 801c4bc:	e7e8      	b.n	801c490 <__gethex+0x31c>
 801c4be:	2301      	movs	r3, #1
 801c4c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c4c2:	1a9b      	subs	r3, r3, r2
 801c4c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c4c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d0f2      	beq.n	801c4b2 <__gethex+0x33e>
 801c4cc:	692b      	ldr	r3, [r5, #16]
 801c4ce:	2000      	movs	r0, #0
 801c4d0:	9302      	str	r3, [sp, #8]
 801c4d2:	009b      	lsls	r3, r3, #2
 801c4d4:	9304      	str	r3, [sp, #16]
 801c4d6:	002b      	movs	r3, r5
 801c4d8:	9a04      	ldr	r2, [sp, #16]
 801c4da:	3314      	adds	r3, #20
 801c4dc:	1899      	adds	r1, r3, r2
 801c4de:	681a      	ldr	r2, [r3, #0]
 801c4e0:	1c54      	adds	r4, r2, #1
 801c4e2:	d01c      	beq.n	801c51e <__gethex+0x3aa>
 801c4e4:	3201      	adds	r2, #1
 801c4e6:	601a      	str	r2, [r3, #0]
 801c4e8:	002b      	movs	r3, r5
 801c4ea:	3314      	adds	r3, #20
 801c4ec:	2e02      	cmp	r6, #2
 801c4ee:	d13f      	bne.n	801c570 <__gethex+0x3fc>
 801c4f0:	9a01      	ldr	r2, [sp, #4]
 801c4f2:	9900      	ldr	r1, [sp, #0]
 801c4f4:	6812      	ldr	r2, [r2, #0]
 801c4f6:	3a01      	subs	r2, #1
 801c4f8:	428a      	cmp	r2, r1
 801c4fa:	d109      	bne.n	801c510 <__gethex+0x39c>
 801c4fc:	000a      	movs	r2, r1
 801c4fe:	201f      	movs	r0, #31
 801c500:	4010      	ands	r0, r2
 801c502:	2201      	movs	r2, #1
 801c504:	4082      	lsls	r2, r0
 801c506:	1149      	asrs	r1, r1, #5
 801c508:	0089      	lsls	r1, r1, #2
 801c50a:	58cb      	ldr	r3, [r1, r3]
 801c50c:	4213      	tst	r3, r2
 801c50e:	d13d      	bne.n	801c58c <__gethex+0x418>
 801c510:	2320      	movs	r3, #32
 801c512:	431e      	orrs	r6, r3
 801c514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c516:	601d      	str	r5, [r3, #0]
 801c518:	9b07      	ldr	r3, [sp, #28]
 801c51a:	601f      	str	r7, [r3, #0]
 801c51c:	e6b4      	b.n	801c288 <__gethex+0x114>
 801c51e:	c301      	stmia	r3!, {r0}
 801c520:	4299      	cmp	r1, r3
 801c522:	d8dc      	bhi.n	801c4de <__gethex+0x36a>
 801c524:	68ab      	ldr	r3, [r5, #8]
 801c526:	9a02      	ldr	r2, [sp, #8]
 801c528:	429a      	cmp	r2, r3
 801c52a:	db18      	blt.n	801c55e <__gethex+0x3ea>
 801c52c:	6869      	ldr	r1, [r5, #4]
 801c52e:	9803      	ldr	r0, [sp, #12]
 801c530:	3101      	adds	r1, #1
 801c532:	f000 f9df 	bl	801c8f4 <_Balloc>
 801c536:	1e04      	subs	r4, r0, #0
 801c538:	d104      	bne.n	801c544 <__gethex+0x3d0>
 801c53a:	0022      	movs	r2, r4
 801c53c:	2184      	movs	r1, #132	@ 0x84
 801c53e:	4b1d      	ldr	r3, [pc, #116]	@ (801c5b4 <__gethex+0x440>)
 801c540:	481d      	ldr	r0, [pc, #116]	@ (801c5b8 <__gethex+0x444>)
 801c542:	e6c4      	b.n	801c2ce <__gethex+0x15a>
 801c544:	0029      	movs	r1, r5
 801c546:	692a      	ldr	r2, [r5, #16]
 801c548:	310c      	adds	r1, #12
 801c54a:	3202      	adds	r2, #2
 801c54c:	0092      	lsls	r2, r2, #2
 801c54e:	300c      	adds	r0, #12
 801c550:	f7fe fecc 	bl	801b2ec <memcpy>
 801c554:	0029      	movs	r1, r5
 801c556:	9803      	ldr	r0, [sp, #12]
 801c558:	f000 fa10 	bl	801c97c <_Bfree>
 801c55c:	0025      	movs	r5, r4
 801c55e:	692b      	ldr	r3, [r5, #16]
 801c560:	1c5a      	adds	r2, r3, #1
 801c562:	612a      	str	r2, [r5, #16]
 801c564:	2201      	movs	r2, #1
 801c566:	3304      	adds	r3, #4
 801c568:	009b      	lsls	r3, r3, #2
 801c56a:	18eb      	adds	r3, r5, r3
 801c56c:	605a      	str	r2, [r3, #4]
 801c56e:	e7bb      	b.n	801c4e8 <__gethex+0x374>
 801c570:	692a      	ldr	r2, [r5, #16]
 801c572:	9902      	ldr	r1, [sp, #8]
 801c574:	428a      	cmp	r2, r1
 801c576:	dd0b      	ble.n	801c590 <__gethex+0x41c>
 801c578:	2101      	movs	r1, #1
 801c57a:	0028      	movs	r0, r5
 801c57c:	f7ff fd92 	bl	801c0a4 <rshift>
 801c580:	9b01      	ldr	r3, [sp, #4]
 801c582:	3701      	adds	r7, #1
 801c584:	689b      	ldr	r3, [r3, #8]
 801c586:	42bb      	cmp	r3, r7
 801c588:	da00      	bge.n	801c58c <__gethex+0x418>
 801c58a:	e6df      	b.n	801c34c <__gethex+0x1d8>
 801c58c:	2601      	movs	r6, #1
 801c58e:	e7bf      	b.n	801c510 <__gethex+0x39c>
 801c590:	221f      	movs	r2, #31
 801c592:	9c00      	ldr	r4, [sp, #0]
 801c594:	9900      	ldr	r1, [sp, #0]
 801c596:	4014      	ands	r4, r2
 801c598:	4211      	tst	r1, r2
 801c59a:	d0f7      	beq.n	801c58c <__gethex+0x418>
 801c59c:	9a04      	ldr	r2, [sp, #16]
 801c59e:	189b      	adds	r3, r3, r2
 801c5a0:	3b04      	subs	r3, #4
 801c5a2:	6818      	ldr	r0, [r3, #0]
 801c5a4:	f000 fa9e 	bl	801cae4 <__hi0bits>
 801c5a8:	2320      	movs	r3, #32
 801c5aa:	1b1b      	subs	r3, r3, r4
 801c5ac:	4298      	cmp	r0, r3
 801c5ae:	dbe3      	blt.n	801c578 <__gethex+0x404>
 801c5b0:	e7ec      	b.n	801c58c <__gethex+0x418>
 801c5b2:	46c0      	nop			@ (mov r8, r8)
 801c5b4:	0801f908 	.word	0x0801f908
 801c5b8:	0801f919 	.word	0x0801f919

0801c5bc <L_shift>:
 801c5bc:	2308      	movs	r3, #8
 801c5be:	b570      	push	{r4, r5, r6, lr}
 801c5c0:	2520      	movs	r5, #32
 801c5c2:	1a9a      	subs	r2, r3, r2
 801c5c4:	0092      	lsls	r2, r2, #2
 801c5c6:	1aad      	subs	r5, r5, r2
 801c5c8:	6843      	ldr	r3, [r0, #4]
 801c5ca:	6804      	ldr	r4, [r0, #0]
 801c5cc:	001e      	movs	r6, r3
 801c5ce:	40ae      	lsls	r6, r5
 801c5d0:	40d3      	lsrs	r3, r2
 801c5d2:	4334      	orrs	r4, r6
 801c5d4:	6004      	str	r4, [r0, #0]
 801c5d6:	6043      	str	r3, [r0, #4]
 801c5d8:	3004      	adds	r0, #4
 801c5da:	4288      	cmp	r0, r1
 801c5dc:	d3f4      	bcc.n	801c5c8 <L_shift+0xc>
 801c5de:	bd70      	pop	{r4, r5, r6, pc}

0801c5e0 <__match>:
 801c5e0:	b530      	push	{r4, r5, lr}
 801c5e2:	6803      	ldr	r3, [r0, #0]
 801c5e4:	780c      	ldrb	r4, [r1, #0]
 801c5e6:	3301      	adds	r3, #1
 801c5e8:	2c00      	cmp	r4, #0
 801c5ea:	d102      	bne.n	801c5f2 <__match+0x12>
 801c5ec:	6003      	str	r3, [r0, #0]
 801c5ee:	2001      	movs	r0, #1
 801c5f0:	bd30      	pop	{r4, r5, pc}
 801c5f2:	781a      	ldrb	r2, [r3, #0]
 801c5f4:	0015      	movs	r5, r2
 801c5f6:	3d41      	subs	r5, #65	@ 0x41
 801c5f8:	2d19      	cmp	r5, #25
 801c5fa:	d800      	bhi.n	801c5fe <__match+0x1e>
 801c5fc:	3220      	adds	r2, #32
 801c5fe:	3101      	adds	r1, #1
 801c600:	42a2      	cmp	r2, r4
 801c602:	d0ef      	beq.n	801c5e4 <__match+0x4>
 801c604:	2000      	movs	r0, #0
 801c606:	e7f3      	b.n	801c5f0 <__match+0x10>

0801c608 <__hexnan>:
 801c608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c60a:	680b      	ldr	r3, [r1, #0]
 801c60c:	b08b      	sub	sp, #44	@ 0x2c
 801c60e:	9201      	str	r2, [sp, #4]
 801c610:	9901      	ldr	r1, [sp, #4]
 801c612:	115a      	asrs	r2, r3, #5
 801c614:	0092      	lsls	r2, r2, #2
 801c616:	188a      	adds	r2, r1, r2
 801c618:	9202      	str	r2, [sp, #8]
 801c61a:	0019      	movs	r1, r3
 801c61c:	221f      	movs	r2, #31
 801c61e:	4011      	ands	r1, r2
 801c620:	9008      	str	r0, [sp, #32]
 801c622:	9106      	str	r1, [sp, #24]
 801c624:	4213      	tst	r3, r2
 801c626:	d002      	beq.n	801c62e <__hexnan+0x26>
 801c628:	9b02      	ldr	r3, [sp, #8]
 801c62a:	3304      	adds	r3, #4
 801c62c:	9302      	str	r3, [sp, #8]
 801c62e:	9b02      	ldr	r3, [sp, #8]
 801c630:	2500      	movs	r5, #0
 801c632:	1f1f      	subs	r7, r3, #4
 801c634:	003e      	movs	r6, r7
 801c636:	003c      	movs	r4, r7
 801c638:	9b08      	ldr	r3, [sp, #32]
 801c63a:	603d      	str	r5, [r7, #0]
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	9507      	str	r5, [sp, #28]
 801c640:	9305      	str	r3, [sp, #20]
 801c642:	9503      	str	r5, [sp, #12]
 801c644:	9b05      	ldr	r3, [sp, #20]
 801c646:	3301      	adds	r3, #1
 801c648:	9309      	str	r3, [sp, #36]	@ 0x24
 801c64a:	9b05      	ldr	r3, [sp, #20]
 801c64c:	785b      	ldrb	r3, [r3, #1]
 801c64e:	9304      	str	r3, [sp, #16]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d028      	beq.n	801c6a6 <__hexnan+0x9e>
 801c654:	9804      	ldr	r0, [sp, #16]
 801c656:	f7ff fd78 	bl	801c14a <__hexdig_fun>
 801c65a:	2800      	cmp	r0, #0
 801c65c:	d155      	bne.n	801c70a <__hexnan+0x102>
 801c65e:	9b04      	ldr	r3, [sp, #16]
 801c660:	2b20      	cmp	r3, #32
 801c662:	d819      	bhi.n	801c698 <__hexnan+0x90>
 801c664:	9b03      	ldr	r3, [sp, #12]
 801c666:	9a07      	ldr	r2, [sp, #28]
 801c668:	4293      	cmp	r3, r2
 801c66a:	dd12      	ble.n	801c692 <__hexnan+0x8a>
 801c66c:	42b4      	cmp	r4, r6
 801c66e:	d206      	bcs.n	801c67e <__hexnan+0x76>
 801c670:	2d07      	cmp	r5, #7
 801c672:	dc04      	bgt.n	801c67e <__hexnan+0x76>
 801c674:	002a      	movs	r2, r5
 801c676:	0031      	movs	r1, r6
 801c678:	0020      	movs	r0, r4
 801c67a:	f7ff ff9f 	bl	801c5bc <L_shift>
 801c67e:	9b01      	ldr	r3, [sp, #4]
 801c680:	2508      	movs	r5, #8
 801c682:	429c      	cmp	r4, r3
 801c684:	d905      	bls.n	801c692 <__hexnan+0x8a>
 801c686:	1f26      	subs	r6, r4, #4
 801c688:	2500      	movs	r5, #0
 801c68a:	0034      	movs	r4, r6
 801c68c:	9b03      	ldr	r3, [sp, #12]
 801c68e:	6035      	str	r5, [r6, #0]
 801c690:	9307      	str	r3, [sp, #28]
 801c692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c694:	9305      	str	r3, [sp, #20]
 801c696:	e7d5      	b.n	801c644 <__hexnan+0x3c>
 801c698:	9b04      	ldr	r3, [sp, #16]
 801c69a:	2b29      	cmp	r3, #41	@ 0x29
 801c69c:	d15a      	bne.n	801c754 <__hexnan+0x14c>
 801c69e:	9b05      	ldr	r3, [sp, #20]
 801c6a0:	9a08      	ldr	r2, [sp, #32]
 801c6a2:	3302      	adds	r3, #2
 801c6a4:	6013      	str	r3, [r2, #0]
 801c6a6:	9b03      	ldr	r3, [sp, #12]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d053      	beq.n	801c754 <__hexnan+0x14c>
 801c6ac:	42b4      	cmp	r4, r6
 801c6ae:	d206      	bcs.n	801c6be <__hexnan+0xb6>
 801c6b0:	2d07      	cmp	r5, #7
 801c6b2:	dc04      	bgt.n	801c6be <__hexnan+0xb6>
 801c6b4:	002a      	movs	r2, r5
 801c6b6:	0031      	movs	r1, r6
 801c6b8:	0020      	movs	r0, r4
 801c6ba:	f7ff ff7f 	bl	801c5bc <L_shift>
 801c6be:	9b01      	ldr	r3, [sp, #4]
 801c6c0:	429c      	cmp	r4, r3
 801c6c2:	d936      	bls.n	801c732 <__hexnan+0x12a>
 801c6c4:	001a      	movs	r2, r3
 801c6c6:	0023      	movs	r3, r4
 801c6c8:	cb02      	ldmia	r3!, {r1}
 801c6ca:	c202      	stmia	r2!, {r1}
 801c6cc:	429f      	cmp	r7, r3
 801c6ce:	d2fb      	bcs.n	801c6c8 <__hexnan+0xc0>
 801c6d0:	9b02      	ldr	r3, [sp, #8]
 801c6d2:	1c61      	adds	r1, r4, #1
 801c6d4:	1eda      	subs	r2, r3, #3
 801c6d6:	2304      	movs	r3, #4
 801c6d8:	4291      	cmp	r1, r2
 801c6da:	d805      	bhi.n	801c6e8 <__hexnan+0xe0>
 801c6dc:	9b02      	ldr	r3, [sp, #8]
 801c6de:	3b04      	subs	r3, #4
 801c6e0:	1b1b      	subs	r3, r3, r4
 801c6e2:	089b      	lsrs	r3, r3, #2
 801c6e4:	3301      	adds	r3, #1
 801c6e6:	009b      	lsls	r3, r3, #2
 801c6e8:	9a01      	ldr	r2, [sp, #4]
 801c6ea:	18d3      	adds	r3, r2, r3
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	c304      	stmia	r3!, {r2}
 801c6f0:	429f      	cmp	r7, r3
 801c6f2:	d2fc      	bcs.n	801c6ee <__hexnan+0xe6>
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d104      	bne.n	801c704 <__hexnan+0xfc>
 801c6fa:	9b01      	ldr	r3, [sp, #4]
 801c6fc:	429f      	cmp	r7, r3
 801c6fe:	d127      	bne.n	801c750 <__hexnan+0x148>
 801c700:	2301      	movs	r3, #1
 801c702:	603b      	str	r3, [r7, #0]
 801c704:	2005      	movs	r0, #5
 801c706:	b00b      	add	sp, #44	@ 0x2c
 801c708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c70a:	9b03      	ldr	r3, [sp, #12]
 801c70c:	3501      	adds	r5, #1
 801c70e:	3301      	adds	r3, #1
 801c710:	9303      	str	r3, [sp, #12]
 801c712:	2d08      	cmp	r5, #8
 801c714:	dd06      	ble.n	801c724 <__hexnan+0x11c>
 801c716:	9b01      	ldr	r3, [sp, #4]
 801c718:	429c      	cmp	r4, r3
 801c71a:	d9ba      	bls.n	801c692 <__hexnan+0x8a>
 801c71c:	2300      	movs	r3, #0
 801c71e:	2501      	movs	r5, #1
 801c720:	3c04      	subs	r4, #4
 801c722:	6023      	str	r3, [r4, #0]
 801c724:	220f      	movs	r2, #15
 801c726:	6823      	ldr	r3, [r4, #0]
 801c728:	4010      	ands	r0, r2
 801c72a:	011b      	lsls	r3, r3, #4
 801c72c:	4303      	orrs	r3, r0
 801c72e:	6023      	str	r3, [r4, #0]
 801c730:	e7af      	b.n	801c692 <__hexnan+0x8a>
 801c732:	9b06      	ldr	r3, [sp, #24]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d0dd      	beq.n	801c6f4 <__hexnan+0xec>
 801c738:	2320      	movs	r3, #32
 801c73a:	9a06      	ldr	r2, [sp, #24]
 801c73c:	9902      	ldr	r1, [sp, #8]
 801c73e:	1a9b      	subs	r3, r3, r2
 801c740:	2201      	movs	r2, #1
 801c742:	4252      	negs	r2, r2
 801c744:	40da      	lsrs	r2, r3
 801c746:	3904      	subs	r1, #4
 801c748:	680b      	ldr	r3, [r1, #0]
 801c74a:	4013      	ands	r3, r2
 801c74c:	600b      	str	r3, [r1, #0]
 801c74e:	e7d1      	b.n	801c6f4 <__hexnan+0xec>
 801c750:	3f04      	subs	r7, #4
 801c752:	e7cf      	b.n	801c6f4 <__hexnan+0xec>
 801c754:	2004      	movs	r0, #4
 801c756:	e7d6      	b.n	801c706 <__hexnan+0xfe>

0801c758 <malloc>:
 801c758:	b510      	push	{r4, lr}
 801c75a:	4b03      	ldr	r3, [pc, #12]	@ (801c768 <malloc+0x10>)
 801c75c:	0001      	movs	r1, r0
 801c75e:	6818      	ldr	r0, [r3, #0]
 801c760:	f000 f826 	bl	801c7b0 <_malloc_r>
 801c764:	bd10      	pop	{r4, pc}
 801c766:	46c0      	nop			@ (mov r8, r8)
 801c768:	20000374 	.word	0x20000374

0801c76c <sbrk_aligned>:
 801c76c:	b570      	push	{r4, r5, r6, lr}
 801c76e:	4e0f      	ldr	r6, [pc, #60]	@ (801c7ac <sbrk_aligned+0x40>)
 801c770:	000d      	movs	r5, r1
 801c772:	6831      	ldr	r1, [r6, #0]
 801c774:	0004      	movs	r4, r0
 801c776:	2900      	cmp	r1, #0
 801c778:	d102      	bne.n	801c780 <sbrk_aligned+0x14>
 801c77a:	f001 f99b 	bl	801dab4 <_sbrk_r>
 801c77e:	6030      	str	r0, [r6, #0]
 801c780:	0029      	movs	r1, r5
 801c782:	0020      	movs	r0, r4
 801c784:	f001 f996 	bl	801dab4 <_sbrk_r>
 801c788:	1c43      	adds	r3, r0, #1
 801c78a:	d103      	bne.n	801c794 <sbrk_aligned+0x28>
 801c78c:	2501      	movs	r5, #1
 801c78e:	426d      	negs	r5, r5
 801c790:	0028      	movs	r0, r5
 801c792:	bd70      	pop	{r4, r5, r6, pc}
 801c794:	2303      	movs	r3, #3
 801c796:	1cc5      	adds	r5, r0, #3
 801c798:	439d      	bics	r5, r3
 801c79a:	42a8      	cmp	r0, r5
 801c79c:	d0f8      	beq.n	801c790 <sbrk_aligned+0x24>
 801c79e:	1a29      	subs	r1, r5, r0
 801c7a0:	0020      	movs	r0, r4
 801c7a2:	f001 f987 	bl	801dab4 <_sbrk_r>
 801c7a6:	3001      	adds	r0, #1
 801c7a8:	d1f2      	bne.n	801c790 <sbrk_aligned+0x24>
 801c7aa:	e7ef      	b.n	801c78c <sbrk_aligned+0x20>
 801c7ac:	20003844 	.word	0x20003844

0801c7b0 <_malloc_r>:
 801c7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c7b2:	2203      	movs	r2, #3
 801c7b4:	1ccb      	adds	r3, r1, #3
 801c7b6:	4393      	bics	r3, r2
 801c7b8:	3308      	adds	r3, #8
 801c7ba:	0005      	movs	r5, r0
 801c7bc:	001f      	movs	r7, r3
 801c7be:	2b0c      	cmp	r3, #12
 801c7c0:	d234      	bcs.n	801c82c <_malloc_r+0x7c>
 801c7c2:	270c      	movs	r7, #12
 801c7c4:	42b9      	cmp	r1, r7
 801c7c6:	d833      	bhi.n	801c830 <_malloc_r+0x80>
 801c7c8:	0028      	movs	r0, r5
 801c7ca:	f000 f883 	bl	801c8d4 <__malloc_lock>
 801c7ce:	4e37      	ldr	r6, [pc, #220]	@ (801c8ac <_malloc_r+0xfc>)
 801c7d0:	6833      	ldr	r3, [r6, #0]
 801c7d2:	001c      	movs	r4, r3
 801c7d4:	2c00      	cmp	r4, #0
 801c7d6:	d12f      	bne.n	801c838 <_malloc_r+0x88>
 801c7d8:	0039      	movs	r1, r7
 801c7da:	0028      	movs	r0, r5
 801c7dc:	f7ff ffc6 	bl	801c76c <sbrk_aligned>
 801c7e0:	0004      	movs	r4, r0
 801c7e2:	1c43      	adds	r3, r0, #1
 801c7e4:	d15f      	bne.n	801c8a6 <_malloc_r+0xf6>
 801c7e6:	6834      	ldr	r4, [r6, #0]
 801c7e8:	9400      	str	r4, [sp, #0]
 801c7ea:	9b00      	ldr	r3, [sp, #0]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d14a      	bne.n	801c886 <_malloc_r+0xd6>
 801c7f0:	2c00      	cmp	r4, #0
 801c7f2:	d052      	beq.n	801c89a <_malloc_r+0xea>
 801c7f4:	6823      	ldr	r3, [r4, #0]
 801c7f6:	0028      	movs	r0, r5
 801c7f8:	18e3      	adds	r3, r4, r3
 801c7fa:	9900      	ldr	r1, [sp, #0]
 801c7fc:	9301      	str	r3, [sp, #4]
 801c7fe:	f001 f959 	bl	801dab4 <_sbrk_r>
 801c802:	9b01      	ldr	r3, [sp, #4]
 801c804:	4283      	cmp	r3, r0
 801c806:	d148      	bne.n	801c89a <_malloc_r+0xea>
 801c808:	6823      	ldr	r3, [r4, #0]
 801c80a:	0028      	movs	r0, r5
 801c80c:	1aff      	subs	r7, r7, r3
 801c80e:	0039      	movs	r1, r7
 801c810:	f7ff ffac 	bl	801c76c <sbrk_aligned>
 801c814:	3001      	adds	r0, #1
 801c816:	d040      	beq.n	801c89a <_malloc_r+0xea>
 801c818:	6823      	ldr	r3, [r4, #0]
 801c81a:	19db      	adds	r3, r3, r7
 801c81c:	6023      	str	r3, [r4, #0]
 801c81e:	6833      	ldr	r3, [r6, #0]
 801c820:	685a      	ldr	r2, [r3, #4]
 801c822:	2a00      	cmp	r2, #0
 801c824:	d133      	bne.n	801c88e <_malloc_r+0xde>
 801c826:	9b00      	ldr	r3, [sp, #0]
 801c828:	6033      	str	r3, [r6, #0]
 801c82a:	e019      	b.n	801c860 <_malloc_r+0xb0>
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	dac9      	bge.n	801c7c4 <_malloc_r+0x14>
 801c830:	230c      	movs	r3, #12
 801c832:	602b      	str	r3, [r5, #0]
 801c834:	2000      	movs	r0, #0
 801c836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c838:	6821      	ldr	r1, [r4, #0]
 801c83a:	1bc9      	subs	r1, r1, r7
 801c83c:	d420      	bmi.n	801c880 <_malloc_r+0xd0>
 801c83e:	290b      	cmp	r1, #11
 801c840:	d90a      	bls.n	801c858 <_malloc_r+0xa8>
 801c842:	19e2      	adds	r2, r4, r7
 801c844:	6027      	str	r7, [r4, #0]
 801c846:	42a3      	cmp	r3, r4
 801c848:	d104      	bne.n	801c854 <_malloc_r+0xa4>
 801c84a:	6032      	str	r2, [r6, #0]
 801c84c:	6863      	ldr	r3, [r4, #4]
 801c84e:	6011      	str	r1, [r2, #0]
 801c850:	6053      	str	r3, [r2, #4]
 801c852:	e005      	b.n	801c860 <_malloc_r+0xb0>
 801c854:	605a      	str	r2, [r3, #4]
 801c856:	e7f9      	b.n	801c84c <_malloc_r+0x9c>
 801c858:	6862      	ldr	r2, [r4, #4]
 801c85a:	42a3      	cmp	r3, r4
 801c85c:	d10e      	bne.n	801c87c <_malloc_r+0xcc>
 801c85e:	6032      	str	r2, [r6, #0]
 801c860:	0028      	movs	r0, r5
 801c862:	f000 f83f 	bl	801c8e4 <__malloc_unlock>
 801c866:	0020      	movs	r0, r4
 801c868:	2207      	movs	r2, #7
 801c86a:	300b      	adds	r0, #11
 801c86c:	1d23      	adds	r3, r4, #4
 801c86e:	4390      	bics	r0, r2
 801c870:	1ac2      	subs	r2, r0, r3
 801c872:	4298      	cmp	r0, r3
 801c874:	d0df      	beq.n	801c836 <_malloc_r+0x86>
 801c876:	1a1b      	subs	r3, r3, r0
 801c878:	50a3      	str	r3, [r4, r2]
 801c87a:	e7dc      	b.n	801c836 <_malloc_r+0x86>
 801c87c:	605a      	str	r2, [r3, #4]
 801c87e:	e7ef      	b.n	801c860 <_malloc_r+0xb0>
 801c880:	0023      	movs	r3, r4
 801c882:	6864      	ldr	r4, [r4, #4]
 801c884:	e7a6      	b.n	801c7d4 <_malloc_r+0x24>
 801c886:	9c00      	ldr	r4, [sp, #0]
 801c888:	6863      	ldr	r3, [r4, #4]
 801c88a:	9300      	str	r3, [sp, #0]
 801c88c:	e7ad      	b.n	801c7ea <_malloc_r+0x3a>
 801c88e:	001a      	movs	r2, r3
 801c890:	685b      	ldr	r3, [r3, #4]
 801c892:	42a3      	cmp	r3, r4
 801c894:	d1fb      	bne.n	801c88e <_malloc_r+0xde>
 801c896:	2300      	movs	r3, #0
 801c898:	e7da      	b.n	801c850 <_malloc_r+0xa0>
 801c89a:	230c      	movs	r3, #12
 801c89c:	0028      	movs	r0, r5
 801c89e:	602b      	str	r3, [r5, #0]
 801c8a0:	f000 f820 	bl	801c8e4 <__malloc_unlock>
 801c8a4:	e7c6      	b.n	801c834 <_malloc_r+0x84>
 801c8a6:	6007      	str	r7, [r0, #0]
 801c8a8:	e7da      	b.n	801c860 <_malloc_r+0xb0>
 801c8aa:	46c0      	nop			@ (mov r8, r8)
 801c8ac:	20003848 	.word	0x20003848

0801c8b0 <__ascii_mbtowc>:
 801c8b0:	b082      	sub	sp, #8
 801c8b2:	2900      	cmp	r1, #0
 801c8b4:	d100      	bne.n	801c8b8 <__ascii_mbtowc+0x8>
 801c8b6:	a901      	add	r1, sp, #4
 801c8b8:	1e10      	subs	r0, r2, #0
 801c8ba:	d006      	beq.n	801c8ca <__ascii_mbtowc+0x1a>
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d006      	beq.n	801c8ce <__ascii_mbtowc+0x1e>
 801c8c0:	7813      	ldrb	r3, [r2, #0]
 801c8c2:	600b      	str	r3, [r1, #0]
 801c8c4:	7810      	ldrb	r0, [r2, #0]
 801c8c6:	1e43      	subs	r3, r0, #1
 801c8c8:	4198      	sbcs	r0, r3
 801c8ca:	b002      	add	sp, #8
 801c8cc:	4770      	bx	lr
 801c8ce:	2002      	movs	r0, #2
 801c8d0:	4240      	negs	r0, r0
 801c8d2:	e7fa      	b.n	801c8ca <__ascii_mbtowc+0x1a>

0801c8d4 <__malloc_lock>:
 801c8d4:	b510      	push	{r4, lr}
 801c8d6:	4802      	ldr	r0, [pc, #8]	@ (801c8e0 <__malloc_lock+0xc>)
 801c8d8:	f7fe fcfb 	bl	801b2d2 <__retarget_lock_acquire_recursive>
 801c8dc:	bd10      	pop	{r4, pc}
 801c8de:	46c0      	nop			@ (mov r8, r8)
 801c8e0:	20003840 	.word	0x20003840

0801c8e4 <__malloc_unlock>:
 801c8e4:	b510      	push	{r4, lr}
 801c8e6:	4802      	ldr	r0, [pc, #8]	@ (801c8f0 <__malloc_unlock+0xc>)
 801c8e8:	f7fe fcf4 	bl	801b2d4 <__retarget_lock_release_recursive>
 801c8ec:	bd10      	pop	{r4, pc}
 801c8ee:	46c0      	nop			@ (mov r8, r8)
 801c8f0:	20003840 	.word	0x20003840

0801c8f4 <_Balloc>:
 801c8f4:	b570      	push	{r4, r5, r6, lr}
 801c8f6:	69c5      	ldr	r5, [r0, #28]
 801c8f8:	0006      	movs	r6, r0
 801c8fa:	000c      	movs	r4, r1
 801c8fc:	2d00      	cmp	r5, #0
 801c8fe:	d10e      	bne.n	801c91e <_Balloc+0x2a>
 801c900:	2010      	movs	r0, #16
 801c902:	f7ff ff29 	bl	801c758 <malloc>
 801c906:	1e02      	subs	r2, r0, #0
 801c908:	61f0      	str	r0, [r6, #28]
 801c90a:	d104      	bne.n	801c916 <_Balloc+0x22>
 801c90c:	216b      	movs	r1, #107	@ 0x6b
 801c90e:	4b19      	ldr	r3, [pc, #100]	@ (801c974 <_Balloc+0x80>)
 801c910:	4819      	ldr	r0, [pc, #100]	@ (801c978 <_Balloc+0x84>)
 801c912:	f001 f8e1 	bl	801dad8 <__assert_func>
 801c916:	6045      	str	r5, [r0, #4]
 801c918:	6085      	str	r5, [r0, #8]
 801c91a:	6005      	str	r5, [r0, #0]
 801c91c:	60c5      	str	r5, [r0, #12]
 801c91e:	69f5      	ldr	r5, [r6, #28]
 801c920:	68eb      	ldr	r3, [r5, #12]
 801c922:	2b00      	cmp	r3, #0
 801c924:	d013      	beq.n	801c94e <_Balloc+0x5a>
 801c926:	69f3      	ldr	r3, [r6, #28]
 801c928:	00a2      	lsls	r2, r4, #2
 801c92a:	68db      	ldr	r3, [r3, #12]
 801c92c:	189b      	adds	r3, r3, r2
 801c92e:	6818      	ldr	r0, [r3, #0]
 801c930:	2800      	cmp	r0, #0
 801c932:	d118      	bne.n	801c966 <_Balloc+0x72>
 801c934:	2101      	movs	r1, #1
 801c936:	000d      	movs	r5, r1
 801c938:	40a5      	lsls	r5, r4
 801c93a:	1d6a      	adds	r2, r5, #5
 801c93c:	0030      	movs	r0, r6
 801c93e:	0092      	lsls	r2, r2, #2
 801c940:	f001 f8e8 	bl	801db14 <_calloc_r>
 801c944:	2800      	cmp	r0, #0
 801c946:	d00c      	beq.n	801c962 <_Balloc+0x6e>
 801c948:	6044      	str	r4, [r0, #4]
 801c94a:	6085      	str	r5, [r0, #8]
 801c94c:	e00d      	b.n	801c96a <_Balloc+0x76>
 801c94e:	2221      	movs	r2, #33	@ 0x21
 801c950:	2104      	movs	r1, #4
 801c952:	0030      	movs	r0, r6
 801c954:	f001 f8de 	bl	801db14 <_calloc_r>
 801c958:	69f3      	ldr	r3, [r6, #28]
 801c95a:	60e8      	str	r0, [r5, #12]
 801c95c:	68db      	ldr	r3, [r3, #12]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d1e1      	bne.n	801c926 <_Balloc+0x32>
 801c962:	2000      	movs	r0, #0
 801c964:	bd70      	pop	{r4, r5, r6, pc}
 801c966:	6802      	ldr	r2, [r0, #0]
 801c968:	601a      	str	r2, [r3, #0]
 801c96a:	2300      	movs	r3, #0
 801c96c:	6103      	str	r3, [r0, #16]
 801c96e:	60c3      	str	r3, [r0, #12]
 801c970:	e7f8      	b.n	801c964 <_Balloc+0x70>
 801c972:	46c0      	nop			@ (mov r8, r8)
 801c974:	0801f899 	.word	0x0801f899
 801c978:	0801f979 	.word	0x0801f979

0801c97c <_Bfree>:
 801c97c:	b570      	push	{r4, r5, r6, lr}
 801c97e:	69c6      	ldr	r6, [r0, #28]
 801c980:	0005      	movs	r5, r0
 801c982:	000c      	movs	r4, r1
 801c984:	2e00      	cmp	r6, #0
 801c986:	d10e      	bne.n	801c9a6 <_Bfree+0x2a>
 801c988:	2010      	movs	r0, #16
 801c98a:	f7ff fee5 	bl	801c758 <malloc>
 801c98e:	1e02      	subs	r2, r0, #0
 801c990:	61e8      	str	r0, [r5, #28]
 801c992:	d104      	bne.n	801c99e <_Bfree+0x22>
 801c994:	218f      	movs	r1, #143	@ 0x8f
 801c996:	4b09      	ldr	r3, [pc, #36]	@ (801c9bc <_Bfree+0x40>)
 801c998:	4809      	ldr	r0, [pc, #36]	@ (801c9c0 <_Bfree+0x44>)
 801c99a:	f001 f89d 	bl	801dad8 <__assert_func>
 801c99e:	6046      	str	r6, [r0, #4]
 801c9a0:	6086      	str	r6, [r0, #8]
 801c9a2:	6006      	str	r6, [r0, #0]
 801c9a4:	60c6      	str	r6, [r0, #12]
 801c9a6:	2c00      	cmp	r4, #0
 801c9a8:	d007      	beq.n	801c9ba <_Bfree+0x3e>
 801c9aa:	69eb      	ldr	r3, [r5, #28]
 801c9ac:	6862      	ldr	r2, [r4, #4]
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	0092      	lsls	r2, r2, #2
 801c9b2:	189b      	adds	r3, r3, r2
 801c9b4:	681a      	ldr	r2, [r3, #0]
 801c9b6:	6022      	str	r2, [r4, #0]
 801c9b8:	601c      	str	r4, [r3, #0]
 801c9ba:	bd70      	pop	{r4, r5, r6, pc}
 801c9bc:	0801f899 	.word	0x0801f899
 801c9c0:	0801f979 	.word	0x0801f979

0801c9c4 <__multadd>:
 801c9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9c6:	000f      	movs	r7, r1
 801c9c8:	9001      	str	r0, [sp, #4]
 801c9ca:	000c      	movs	r4, r1
 801c9cc:	001e      	movs	r6, r3
 801c9ce:	2000      	movs	r0, #0
 801c9d0:	690d      	ldr	r5, [r1, #16]
 801c9d2:	3714      	adds	r7, #20
 801c9d4:	683b      	ldr	r3, [r7, #0]
 801c9d6:	3001      	adds	r0, #1
 801c9d8:	b299      	uxth	r1, r3
 801c9da:	4351      	muls	r1, r2
 801c9dc:	0c1b      	lsrs	r3, r3, #16
 801c9de:	4353      	muls	r3, r2
 801c9e0:	1989      	adds	r1, r1, r6
 801c9e2:	0c0e      	lsrs	r6, r1, #16
 801c9e4:	199b      	adds	r3, r3, r6
 801c9e6:	0c1e      	lsrs	r6, r3, #16
 801c9e8:	b289      	uxth	r1, r1
 801c9ea:	041b      	lsls	r3, r3, #16
 801c9ec:	185b      	adds	r3, r3, r1
 801c9ee:	c708      	stmia	r7!, {r3}
 801c9f0:	4285      	cmp	r5, r0
 801c9f2:	dcef      	bgt.n	801c9d4 <__multadd+0x10>
 801c9f4:	2e00      	cmp	r6, #0
 801c9f6:	d022      	beq.n	801ca3e <__multadd+0x7a>
 801c9f8:	68a3      	ldr	r3, [r4, #8]
 801c9fa:	42ab      	cmp	r3, r5
 801c9fc:	dc19      	bgt.n	801ca32 <__multadd+0x6e>
 801c9fe:	6861      	ldr	r1, [r4, #4]
 801ca00:	9801      	ldr	r0, [sp, #4]
 801ca02:	3101      	adds	r1, #1
 801ca04:	f7ff ff76 	bl	801c8f4 <_Balloc>
 801ca08:	1e07      	subs	r7, r0, #0
 801ca0a:	d105      	bne.n	801ca18 <__multadd+0x54>
 801ca0c:	003a      	movs	r2, r7
 801ca0e:	21ba      	movs	r1, #186	@ 0xba
 801ca10:	4b0c      	ldr	r3, [pc, #48]	@ (801ca44 <__multadd+0x80>)
 801ca12:	480d      	ldr	r0, [pc, #52]	@ (801ca48 <__multadd+0x84>)
 801ca14:	f001 f860 	bl	801dad8 <__assert_func>
 801ca18:	0021      	movs	r1, r4
 801ca1a:	6922      	ldr	r2, [r4, #16]
 801ca1c:	310c      	adds	r1, #12
 801ca1e:	3202      	adds	r2, #2
 801ca20:	0092      	lsls	r2, r2, #2
 801ca22:	300c      	adds	r0, #12
 801ca24:	f7fe fc62 	bl	801b2ec <memcpy>
 801ca28:	0021      	movs	r1, r4
 801ca2a:	9801      	ldr	r0, [sp, #4]
 801ca2c:	f7ff ffa6 	bl	801c97c <_Bfree>
 801ca30:	003c      	movs	r4, r7
 801ca32:	1d2b      	adds	r3, r5, #4
 801ca34:	009b      	lsls	r3, r3, #2
 801ca36:	18e3      	adds	r3, r4, r3
 801ca38:	3501      	adds	r5, #1
 801ca3a:	605e      	str	r6, [r3, #4]
 801ca3c:	6125      	str	r5, [r4, #16]
 801ca3e:	0020      	movs	r0, r4
 801ca40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ca42:	46c0      	nop			@ (mov r8, r8)
 801ca44:	0801f908 	.word	0x0801f908
 801ca48:	0801f979 	.word	0x0801f979

0801ca4c <__s2b>:
 801ca4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca4e:	0007      	movs	r7, r0
 801ca50:	0018      	movs	r0, r3
 801ca52:	000c      	movs	r4, r1
 801ca54:	3008      	adds	r0, #8
 801ca56:	2109      	movs	r1, #9
 801ca58:	9301      	str	r3, [sp, #4]
 801ca5a:	0015      	movs	r5, r2
 801ca5c:	f7e3 fc22 	bl	80002a4 <__divsi3>
 801ca60:	2301      	movs	r3, #1
 801ca62:	2100      	movs	r1, #0
 801ca64:	4283      	cmp	r3, r0
 801ca66:	db0a      	blt.n	801ca7e <__s2b+0x32>
 801ca68:	0038      	movs	r0, r7
 801ca6a:	f7ff ff43 	bl	801c8f4 <_Balloc>
 801ca6e:	1e01      	subs	r1, r0, #0
 801ca70:	d108      	bne.n	801ca84 <__s2b+0x38>
 801ca72:	000a      	movs	r2, r1
 801ca74:	4b19      	ldr	r3, [pc, #100]	@ (801cadc <__s2b+0x90>)
 801ca76:	481a      	ldr	r0, [pc, #104]	@ (801cae0 <__s2b+0x94>)
 801ca78:	31d3      	adds	r1, #211	@ 0xd3
 801ca7a:	f001 f82d 	bl	801dad8 <__assert_func>
 801ca7e:	005b      	lsls	r3, r3, #1
 801ca80:	3101      	adds	r1, #1
 801ca82:	e7ef      	b.n	801ca64 <__s2b+0x18>
 801ca84:	9b08      	ldr	r3, [sp, #32]
 801ca86:	6143      	str	r3, [r0, #20]
 801ca88:	2301      	movs	r3, #1
 801ca8a:	6103      	str	r3, [r0, #16]
 801ca8c:	2d09      	cmp	r5, #9
 801ca8e:	dd18      	ble.n	801cac2 <__s2b+0x76>
 801ca90:	0023      	movs	r3, r4
 801ca92:	3309      	adds	r3, #9
 801ca94:	001e      	movs	r6, r3
 801ca96:	9300      	str	r3, [sp, #0]
 801ca98:	1964      	adds	r4, r4, r5
 801ca9a:	7833      	ldrb	r3, [r6, #0]
 801ca9c:	220a      	movs	r2, #10
 801ca9e:	0038      	movs	r0, r7
 801caa0:	3b30      	subs	r3, #48	@ 0x30
 801caa2:	f7ff ff8f 	bl	801c9c4 <__multadd>
 801caa6:	3601      	adds	r6, #1
 801caa8:	0001      	movs	r1, r0
 801caaa:	42a6      	cmp	r6, r4
 801caac:	d1f5      	bne.n	801ca9a <__s2b+0x4e>
 801caae:	002c      	movs	r4, r5
 801cab0:	9b00      	ldr	r3, [sp, #0]
 801cab2:	3c08      	subs	r4, #8
 801cab4:	191c      	adds	r4, r3, r4
 801cab6:	002e      	movs	r6, r5
 801cab8:	9b01      	ldr	r3, [sp, #4]
 801caba:	429e      	cmp	r6, r3
 801cabc:	db04      	blt.n	801cac8 <__s2b+0x7c>
 801cabe:	0008      	movs	r0, r1
 801cac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801cac2:	2509      	movs	r5, #9
 801cac4:	340a      	adds	r4, #10
 801cac6:	e7f6      	b.n	801cab6 <__s2b+0x6a>
 801cac8:	1b63      	subs	r3, r4, r5
 801caca:	5d9b      	ldrb	r3, [r3, r6]
 801cacc:	220a      	movs	r2, #10
 801cace:	0038      	movs	r0, r7
 801cad0:	3b30      	subs	r3, #48	@ 0x30
 801cad2:	f7ff ff77 	bl	801c9c4 <__multadd>
 801cad6:	3601      	adds	r6, #1
 801cad8:	0001      	movs	r1, r0
 801cada:	e7ed      	b.n	801cab8 <__s2b+0x6c>
 801cadc:	0801f908 	.word	0x0801f908
 801cae0:	0801f979 	.word	0x0801f979

0801cae4 <__hi0bits>:
 801cae4:	2280      	movs	r2, #128	@ 0x80
 801cae6:	0003      	movs	r3, r0
 801cae8:	0252      	lsls	r2, r2, #9
 801caea:	2000      	movs	r0, #0
 801caec:	4293      	cmp	r3, r2
 801caee:	d201      	bcs.n	801caf4 <__hi0bits+0x10>
 801caf0:	041b      	lsls	r3, r3, #16
 801caf2:	3010      	adds	r0, #16
 801caf4:	2280      	movs	r2, #128	@ 0x80
 801caf6:	0452      	lsls	r2, r2, #17
 801caf8:	4293      	cmp	r3, r2
 801cafa:	d201      	bcs.n	801cb00 <__hi0bits+0x1c>
 801cafc:	3008      	adds	r0, #8
 801cafe:	021b      	lsls	r3, r3, #8
 801cb00:	2280      	movs	r2, #128	@ 0x80
 801cb02:	0552      	lsls	r2, r2, #21
 801cb04:	4293      	cmp	r3, r2
 801cb06:	d201      	bcs.n	801cb0c <__hi0bits+0x28>
 801cb08:	3004      	adds	r0, #4
 801cb0a:	011b      	lsls	r3, r3, #4
 801cb0c:	2280      	movs	r2, #128	@ 0x80
 801cb0e:	05d2      	lsls	r2, r2, #23
 801cb10:	4293      	cmp	r3, r2
 801cb12:	d201      	bcs.n	801cb18 <__hi0bits+0x34>
 801cb14:	3002      	adds	r0, #2
 801cb16:	009b      	lsls	r3, r3, #2
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	db03      	blt.n	801cb24 <__hi0bits+0x40>
 801cb1c:	3001      	adds	r0, #1
 801cb1e:	4213      	tst	r3, r2
 801cb20:	d100      	bne.n	801cb24 <__hi0bits+0x40>
 801cb22:	2020      	movs	r0, #32
 801cb24:	4770      	bx	lr

0801cb26 <__lo0bits>:
 801cb26:	6803      	ldr	r3, [r0, #0]
 801cb28:	0001      	movs	r1, r0
 801cb2a:	2207      	movs	r2, #7
 801cb2c:	0018      	movs	r0, r3
 801cb2e:	4010      	ands	r0, r2
 801cb30:	4213      	tst	r3, r2
 801cb32:	d00d      	beq.n	801cb50 <__lo0bits+0x2a>
 801cb34:	3a06      	subs	r2, #6
 801cb36:	2000      	movs	r0, #0
 801cb38:	4213      	tst	r3, r2
 801cb3a:	d105      	bne.n	801cb48 <__lo0bits+0x22>
 801cb3c:	3002      	adds	r0, #2
 801cb3e:	4203      	tst	r3, r0
 801cb40:	d003      	beq.n	801cb4a <__lo0bits+0x24>
 801cb42:	40d3      	lsrs	r3, r2
 801cb44:	0010      	movs	r0, r2
 801cb46:	600b      	str	r3, [r1, #0]
 801cb48:	4770      	bx	lr
 801cb4a:	089b      	lsrs	r3, r3, #2
 801cb4c:	600b      	str	r3, [r1, #0]
 801cb4e:	e7fb      	b.n	801cb48 <__lo0bits+0x22>
 801cb50:	b29a      	uxth	r2, r3
 801cb52:	2a00      	cmp	r2, #0
 801cb54:	d101      	bne.n	801cb5a <__lo0bits+0x34>
 801cb56:	2010      	movs	r0, #16
 801cb58:	0c1b      	lsrs	r3, r3, #16
 801cb5a:	b2da      	uxtb	r2, r3
 801cb5c:	2a00      	cmp	r2, #0
 801cb5e:	d101      	bne.n	801cb64 <__lo0bits+0x3e>
 801cb60:	3008      	adds	r0, #8
 801cb62:	0a1b      	lsrs	r3, r3, #8
 801cb64:	071a      	lsls	r2, r3, #28
 801cb66:	d101      	bne.n	801cb6c <__lo0bits+0x46>
 801cb68:	3004      	adds	r0, #4
 801cb6a:	091b      	lsrs	r3, r3, #4
 801cb6c:	079a      	lsls	r2, r3, #30
 801cb6e:	d101      	bne.n	801cb74 <__lo0bits+0x4e>
 801cb70:	3002      	adds	r0, #2
 801cb72:	089b      	lsrs	r3, r3, #2
 801cb74:	07da      	lsls	r2, r3, #31
 801cb76:	d4e9      	bmi.n	801cb4c <__lo0bits+0x26>
 801cb78:	3001      	adds	r0, #1
 801cb7a:	085b      	lsrs	r3, r3, #1
 801cb7c:	d1e6      	bne.n	801cb4c <__lo0bits+0x26>
 801cb7e:	2020      	movs	r0, #32
 801cb80:	e7e2      	b.n	801cb48 <__lo0bits+0x22>
	...

0801cb84 <__i2b>:
 801cb84:	b510      	push	{r4, lr}
 801cb86:	000c      	movs	r4, r1
 801cb88:	2101      	movs	r1, #1
 801cb8a:	f7ff feb3 	bl	801c8f4 <_Balloc>
 801cb8e:	2800      	cmp	r0, #0
 801cb90:	d107      	bne.n	801cba2 <__i2b+0x1e>
 801cb92:	2146      	movs	r1, #70	@ 0x46
 801cb94:	4c05      	ldr	r4, [pc, #20]	@ (801cbac <__i2b+0x28>)
 801cb96:	0002      	movs	r2, r0
 801cb98:	4b05      	ldr	r3, [pc, #20]	@ (801cbb0 <__i2b+0x2c>)
 801cb9a:	0020      	movs	r0, r4
 801cb9c:	31ff      	adds	r1, #255	@ 0xff
 801cb9e:	f000 ff9b 	bl	801dad8 <__assert_func>
 801cba2:	2301      	movs	r3, #1
 801cba4:	6144      	str	r4, [r0, #20]
 801cba6:	6103      	str	r3, [r0, #16]
 801cba8:	bd10      	pop	{r4, pc}
 801cbaa:	46c0      	nop			@ (mov r8, r8)
 801cbac:	0801f979 	.word	0x0801f979
 801cbb0:	0801f908 	.word	0x0801f908

0801cbb4 <__multiply>:
 801cbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbb6:	0014      	movs	r4, r2
 801cbb8:	690a      	ldr	r2, [r1, #16]
 801cbba:	6923      	ldr	r3, [r4, #16]
 801cbbc:	000d      	movs	r5, r1
 801cbbe:	b08b      	sub	sp, #44	@ 0x2c
 801cbc0:	429a      	cmp	r2, r3
 801cbc2:	db02      	blt.n	801cbca <__multiply+0x16>
 801cbc4:	0023      	movs	r3, r4
 801cbc6:	000c      	movs	r4, r1
 801cbc8:	001d      	movs	r5, r3
 801cbca:	6927      	ldr	r7, [r4, #16]
 801cbcc:	692e      	ldr	r6, [r5, #16]
 801cbce:	6861      	ldr	r1, [r4, #4]
 801cbd0:	19bb      	adds	r3, r7, r6
 801cbd2:	9303      	str	r3, [sp, #12]
 801cbd4:	68a3      	ldr	r3, [r4, #8]
 801cbd6:	19ba      	adds	r2, r7, r6
 801cbd8:	4293      	cmp	r3, r2
 801cbda:	da00      	bge.n	801cbde <__multiply+0x2a>
 801cbdc:	3101      	adds	r1, #1
 801cbde:	f7ff fe89 	bl	801c8f4 <_Balloc>
 801cbe2:	9002      	str	r0, [sp, #8]
 801cbe4:	2800      	cmp	r0, #0
 801cbe6:	d106      	bne.n	801cbf6 <__multiply+0x42>
 801cbe8:	21b1      	movs	r1, #177	@ 0xb1
 801cbea:	4b49      	ldr	r3, [pc, #292]	@ (801cd10 <__multiply+0x15c>)
 801cbec:	4849      	ldr	r0, [pc, #292]	@ (801cd14 <__multiply+0x160>)
 801cbee:	9a02      	ldr	r2, [sp, #8]
 801cbf0:	0049      	lsls	r1, r1, #1
 801cbf2:	f000 ff71 	bl	801dad8 <__assert_func>
 801cbf6:	9b02      	ldr	r3, [sp, #8]
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	3314      	adds	r3, #20
 801cbfc:	469c      	mov	ip, r3
 801cbfe:	19bb      	adds	r3, r7, r6
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	4463      	add	r3, ip
 801cc04:	9304      	str	r3, [sp, #16]
 801cc06:	4663      	mov	r3, ip
 801cc08:	9904      	ldr	r1, [sp, #16]
 801cc0a:	428b      	cmp	r3, r1
 801cc0c:	d32a      	bcc.n	801cc64 <__multiply+0xb0>
 801cc0e:	0023      	movs	r3, r4
 801cc10:	00bf      	lsls	r7, r7, #2
 801cc12:	3314      	adds	r3, #20
 801cc14:	3514      	adds	r5, #20
 801cc16:	9308      	str	r3, [sp, #32]
 801cc18:	00b6      	lsls	r6, r6, #2
 801cc1a:	19db      	adds	r3, r3, r7
 801cc1c:	9305      	str	r3, [sp, #20]
 801cc1e:	19ab      	adds	r3, r5, r6
 801cc20:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc22:	2304      	movs	r3, #4
 801cc24:	9306      	str	r3, [sp, #24]
 801cc26:	0023      	movs	r3, r4
 801cc28:	9a05      	ldr	r2, [sp, #20]
 801cc2a:	3315      	adds	r3, #21
 801cc2c:	9501      	str	r5, [sp, #4]
 801cc2e:	429a      	cmp	r2, r3
 801cc30:	d305      	bcc.n	801cc3e <__multiply+0x8a>
 801cc32:	1b13      	subs	r3, r2, r4
 801cc34:	3b15      	subs	r3, #21
 801cc36:	089b      	lsrs	r3, r3, #2
 801cc38:	3301      	adds	r3, #1
 801cc3a:	009b      	lsls	r3, r3, #2
 801cc3c:	9306      	str	r3, [sp, #24]
 801cc3e:	9b01      	ldr	r3, [sp, #4]
 801cc40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc42:	4293      	cmp	r3, r2
 801cc44:	d310      	bcc.n	801cc68 <__multiply+0xb4>
 801cc46:	9b03      	ldr	r3, [sp, #12]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	dd05      	ble.n	801cc58 <__multiply+0xa4>
 801cc4c:	9b04      	ldr	r3, [sp, #16]
 801cc4e:	3b04      	subs	r3, #4
 801cc50:	9304      	str	r3, [sp, #16]
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d056      	beq.n	801cd06 <__multiply+0x152>
 801cc58:	9b02      	ldr	r3, [sp, #8]
 801cc5a:	9a03      	ldr	r2, [sp, #12]
 801cc5c:	0018      	movs	r0, r3
 801cc5e:	611a      	str	r2, [r3, #16]
 801cc60:	b00b      	add	sp, #44	@ 0x2c
 801cc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc64:	c304      	stmia	r3!, {r2}
 801cc66:	e7cf      	b.n	801cc08 <__multiply+0x54>
 801cc68:	9b01      	ldr	r3, [sp, #4]
 801cc6a:	6818      	ldr	r0, [r3, #0]
 801cc6c:	b280      	uxth	r0, r0
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	d01e      	beq.n	801ccb0 <__multiply+0xfc>
 801cc72:	4667      	mov	r7, ip
 801cc74:	2500      	movs	r5, #0
 801cc76:	9e08      	ldr	r6, [sp, #32]
 801cc78:	ce02      	ldmia	r6!, {r1}
 801cc7a:	683b      	ldr	r3, [r7, #0]
 801cc7c:	9307      	str	r3, [sp, #28]
 801cc7e:	b28b      	uxth	r3, r1
 801cc80:	4343      	muls	r3, r0
 801cc82:	001a      	movs	r2, r3
 801cc84:	466b      	mov	r3, sp
 801cc86:	0c09      	lsrs	r1, r1, #16
 801cc88:	8b9b      	ldrh	r3, [r3, #28]
 801cc8a:	4341      	muls	r1, r0
 801cc8c:	18d3      	adds	r3, r2, r3
 801cc8e:	9a07      	ldr	r2, [sp, #28]
 801cc90:	195b      	adds	r3, r3, r5
 801cc92:	0c12      	lsrs	r2, r2, #16
 801cc94:	1889      	adds	r1, r1, r2
 801cc96:	0c1a      	lsrs	r2, r3, #16
 801cc98:	188a      	adds	r2, r1, r2
 801cc9a:	b29b      	uxth	r3, r3
 801cc9c:	0c15      	lsrs	r5, r2, #16
 801cc9e:	0412      	lsls	r2, r2, #16
 801cca0:	431a      	orrs	r2, r3
 801cca2:	9b05      	ldr	r3, [sp, #20]
 801cca4:	c704      	stmia	r7!, {r2}
 801cca6:	42b3      	cmp	r3, r6
 801cca8:	d8e6      	bhi.n	801cc78 <__multiply+0xc4>
 801ccaa:	4663      	mov	r3, ip
 801ccac:	9a06      	ldr	r2, [sp, #24]
 801ccae:	509d      	str	r5, [r3, r2]
 801ccb0:	9b01      	ldr	r3, [sp, #4]
 801ccb2:	6818      	ldr	r0, [r3, #0]
 801ccb4:	0c00      	lsrs	r0, r0, #16
 801ccb6:	d020      	beq.n	801ccfa <__multiply+0x146>
 801ccb8:	4663      	mov	r3, ip
 801ccba:	0025      	movs	r5, r4
 801ccbc:	4661      	mov	r1, ip
 801ccbe:	2700      	movs	r7, #0
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	3514      	adds	r5, #20
 801ccc4:	682a      	ldr	r2, [r5, #0]
 801ccc6:	680e      	ldr	r6, [r1, #0]
 801ccc8:	b292      	uxth	r2, r2
 801ccca:	4342      	muls	r2, r0
 801cccc:	0c36      	lsrs	r6, r6, #16
 801ccce:	1992      	adds	r2, r2, r6
 801ccd0:	19d2      	adds	r2, r2, r7
 801ccd2:	0416      	lsls	r6, r2, #16
 801ccd4:	b29b      	uxth	r3, r3
 801ccd6:	431e      	orrs	r6, r3
 801ccd8:	600e      	str	r6, [r1, #0]
 801ccda:	cd40      	ldmia	r5!, {r6}
 801ccdc:	684b      	ldr	r3, [r1, #4]
 801ccde:	0c36      	lsrs	r6, r6, #16
 801cce0:	4346      	muls	r6, r0
 801cce2:	b29b      	uxth	r3, r3
 801cce4:	0c12      	lsrs	r2, r2, #16
 801cce6:	18f3      	adds	r3, r6, r3
 801cce8:	189b      	adds	r3, r3, r2
 801ccea:	9a05      	ldr	r2, [sp, #20]
 801ccec:	0c1f      	lsrs	r7, r3, #16
 801ccee:	3104      	adds	r1, #4
 801ccf0:	42aa      	cmp	r2, r5
 801ccf2:	d8e7      	bhi.n	801ccc4 <__multiply+0x110>
 801ccf4:	4662      	mov	r2, ip
 801ccf6:	9906      	ldr	r1, [sp, #24]
 801ccf8:	5053      	str	r3, [r2, r1]
 801ccfa:	9b01      	ldr	r3, [sp, #4]
 801ccfc:	3304      	adds	r3, #4
 801ccfe:	9301      	str	r3, [sp, #4]
 801cd00:	2304      	movs	r3, #4
 801cd02:	449c      	add	ip, r3
 801cd04:	e79b      	b.n	801cc3e <__multiply+0x8a>
 801cd06:	9b03      	ldr	r3, [sp, #12]
 801cd08:	3b01      	subs	r3, #1
 801cd0a:	9303      	str	r3, [sp, #12]
 801cd0c:	e79b      	b.n	801cc46 <__multiply+0x92>
 801cd0e:	46c0      	nop			@ (mov r8, r8)
 801cd10:	0801f908 	.word	0x0801f908
 801cd14:	0801f979 	.word	0x0801f979

0801cd18 <__pow5mult>:
 801cd18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cd1a:	2303      	movs	r3, #3
 801cd1c:	0015      	movs	r5, r2
 801cd1e:	0007      	movs	r7, r0
 801cd20:	000e      	movs	r6, r1
 801cd22:	401a      	ands	r2, r3
 801cd24:	421d      	tst	r5, r3
 801cd26:	d008      	beq.n	801cd3a <__pow5mult+0x22>
 801cd28:	4925      	ldr	r1, [pc, #148]	@ (801cdc0 <__pow5mult+0xa8>)
 801cd2a:	3a01      	subs	r2, #1
 801cd2c:	0092      	lsls	r2, r2, #2
 801cd2e:	5852      	ldr	r2, [r2, r1]
 801cd30:	2300      	movs	r3, #0
 801cd32:	0031      	movs	r1, r6
 801cd34:	f7ff fe46 	bl	801c9c4 <__multadd>
 801cd38:	0006      	movs	r6, r0
 801cd3a:	10ad      	asrs	r5, r5, #2
 801cd3c:	d03d      	beq.n	801cdba <__pow5mult+0xa2>
 801cd3e:	69fc      	ldr	r4, [r7, #28]
 801cd40:	2c00      	cmp	r4, #0
 801cd42:	d10f      	bne.n	801cd64 <__pow5mult+0x4c>
 801cd44:	2010      	movs	r0, #16
 801cd46:	f7ff fd07 	bl	801c758 <malloc>
 801cd4a:	1e02      	subs	r2, r0, #0
 801cd4c:	61f8      	str	r0, [r7, #28]
 801cd4e:	d105      	bne.n	801cd5c <__pow5mult+0x44>
 801cd50:	21b4      	movs	r1, #180	@ 0xb4
 801cd52:	4b1c      	ldr	r3, [pc, #112]	@ (801cdc4 <__pow5mult+0xac>)
 801cd54:	481c      	ldr	r0, [pc, #112]	@ (801cdc8 <__pow5mult+0xb0>)
 801cd56:	31ff      	adds	r1, #255	@ 0xff
 801cd58:	f000 febe 	bl	801dad8 <__assert_func>
 801cd5c:	6044      	str	r4, [r0, #4]
 801cd5e:	6084      	str	r4, [r0, #8]
 801cd60:	6004      	str	r4, [r0, #0]
 801cd62:	60c4      	str	r4, [r0, #12]
 801cd64:	69fb      	ldr	r3, [r7, #28]
 801cd66:	689c      	ldr	r4, [r3, #8]
 801cd68:	9301      	str	r3, [sp, #4]
 801cd6a:	2c00      	cmp	r4, #0
 801cd6c:	d108      	bne.n	801cd80 <__pow5mult+0x68>
 801cd6e:	0038      	movs	r0, r7
 801cd70:	4916      	ldr	r1, [pc, #88]	@ (801cdcc <__pow5mult+0xb4>)
 801cd72:	f7ff ff07 	bl	801cb84 <__i2b>
 801cd76:	9b01      	ldr	r3, [sp, #4]
 801cd78:	0004      	movs	r4, r0
 801cd7a:	6098      	str	r0, [r3, #8]
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	6003      	str	r3, [r0, #0]
 801cd80:	2301      	movs	r3, #1
 801cd82:	421d      	tst	r5, r3
 801cd84:	d00a      	beq.n	801cd9c <__pow5mult+0x84>
 801cd86:	0031      	movs	r1, r6
 801cd88:	0022      	movs	r2, r4
 801cd8a:	0038      	movs	r0, r7
 801cd8c:	f7ff ff12 	bl	801cbb4 <__multiply>
 801cd90:	0031      	movs	r1, r6
 801cd92:	9001      	str	r0, [sp, #4]
 801cd94:	0038      	movs	r0, r7
 801cd96:	f7ff fdf1 	bl	801c97c <_Bfree>
 801cd9a:	9e01      	ldr	r6, [sp, #4]
 801cd9c:	106d      	asrs	r5, r5, #1
 801cd9e:	d00c      	beq.n	801cdba <__pow5mult+0xa2>
 801cda0:	6820      	ldr	r0, [r4, #0]
 801cda2:	2800      	cmp	r0, #0
 801cda4:	d107      	bne.n	801cdb6 <__pow5mult+0x9e>
 801cda6:	0022      	movs	r2, r4
 801cda8:	0021      	movs	r1, r4
 801cdaa:	0038      	movs	r0, r7
 801cdac:	f7ff ff02 	bl	801cbb4 <__multiply>
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	6020      	str	r0, [r4, #0]
 801cdb4:	6003      	str	r3, [r0, #0]
 801cdb6:	0004      	movs	r4, r0
 801cdb8:	e7e2      	b.n	801cd80 <__pow5mult+0x68>
 801cdba:	0030      	movs	r0, r6
 801cdbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801cdbe:	46c0      	nop			@ (mov r8, r8)
 801cdc0:	0801f9d4 	.word	0x0801f9d4
 801cdc4:	0801f899 	.word	0x0801f899
 801cdc8:	0801f979 	.word	0x0801f979
 801cdcc:	00000271 	.word	0x00000271

0801cdd0 <__lshift>:
 801cdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdd2:	000c      	movs	r4, r1
 801cdd4:	0016      	movs	r6, r2
 801cdd6:	6923      	ldr	r3, [r4, #16]
 801cdd8:	1157      	asrs	r7, r2, #5
 801cdda:	b085      	sub	sp, #20
 801cddc:	18fb      	adds	r3, r7, r3
 801cdde:	9301      	str	r3, [sp, #4]
 801cde0:	3301      	adds	r3, #1
 801cde2:	9300      	str	r3, [sp, #0]
 801cde4:	6849      	ldr	r1, [r1, #4]
 801cde6:	68a3      	ldr	r3, [r4, #8]
 801cde8:	9002      	str	r0, [sp, #8]
 801cdea:	9a00      	ldr	r2, [sp, #0]
 801cdec:	4293      	cmp	r3, r2
 801cdee:	db10      	blt.n	801ce12 <__lshift+0x42>
 801cdf0:	9802      	ldr	r0, [sp, #8]
 801cdf2:	f7ff fd7f 	bl	801c8f4 <_Balloc>
 801cdf6:	2300      	movs	r3, #0
 801cdf8:	0001      	movs	r1, r0
 801cdfa:	0005      	movs	r5, r0
 801cdfc:	001a      	movs	r2, r3
 801cdfe:	3114      	adds	r1, #20
 801ce00:	4298      	cmp	r0, r3
 801ce02:	d10c      	bne.n	801ce1e <__lshift+0x4e>
 801ce04:	21ef      	movs	r1, #239	@ 0xef
 801ce06:	002a      	movs	r2, r5
 801ce08:	4b25      	ldr	r3, [pc, #148]	@ (801cea0 <__lshift+0xd0>)
 801ce0a:	4826      	ldr	r0, [pc, #152]	@ (801cea4 <__lshift+0xd4>)
 801ce0c:	0049      	lsls	r1, r1, #1
 801ce0e:	f000 fe63 	bl	801dad8 <__assert_func>
 801ce12:	3101      	adds	r1, #1
 801ce14:	005b      	lsls	r3, r3, #1
 801ce16:	e7e8      	b.n	801cdea <__lshift+0x1a>
 801ce18:	0098      	lsls	r0, r3, #2
 801ce1a:	500a      	str	r2, [r1, r0]
 801ce1c:	3301      	adds	r3, #1
 801ce1e:	42bb      	cmp	r3, r7
 801ce20:	dbfa      	blt.n	801ce18 <__lshift+0x48>
 801ce22:	43fb      	mvns	r3, r7
 801ce24:	17db      	asrs	r3, r3, #31
 801ce26:	401f      	ands	r7, r3
 801ce28:	00bf      	lsls	r7, r7, #2
 801ce2a:	0023      	movs	r3, r4
 801ce2c:	201f      	movs	r0, #31
 801ce2e:	19c9      	adds	r1, r1, r7
 801ce30:	0037      	movs	r7, r6
 801ce32:	6922      	ldr	r2, [r4, #16]
 801ce34:	3314      	adds	r3, #20
 801ce36:	0092      	lsls	r2, r2, #2
 801ce38:	189a      	adds	r2, r3, r2
 801ce3a:	4007      	ands	r7, r0
 801ce3c:	4206      	tst	r6, r0
 801ce3e:	d029      	beq.n	801ce94 <__lshift+0xc4>
 801ce40:	3001      	adds	r0, #1
 801ce42:	1bc0      	subs	r0, r0, r7
 801ce44:	9003      	str	r0, [sp, #12]
 801ce46:	468c      	mov	ip, r1
 801ce48:	2000      	movs	r0, #0
 801ce4a:	681e      	ldr	r6, [r3, #0]
 801ce4c:	40be      	lsls	r6, r7
 801ce4e:	4306      	orrs	r6, r0
 801ce50:	4660      	mov	r0, ip
 801ce52:	c040      	stmia	r0!, {r6}
 801ce54:	4684      	mov	ip, r0
 801ce56:	9e03      	ldr	r6, [sp, #12]
 801ce58:	cb01      	ldmia	r3!, {r0}
 801ce5a:	40f0      	lsrs	r0, r6
 801ce5c:	429a      	cmp	r2, r3
 801ce5e:	d8f4      	bhi.n	801ce4a <__lshift+0x7a>
 801ce60:	0026      	movs	r6, r4
 801ce62:	3615      	adds	r6, #21
 801ce64:	2304      	movs	r3, #4
 801ce66:	42b2      	cmp	r2, r6
 801ce68:	d304      	bcc.n	801ce74 <__lshift+0xa4>
 801ce6a:	1b13      	subs	r3, r2, r4
 801ce6c:	3b15      	subs	r3, #21
 801ce6e:	089b      	lsrs	r3, r3, #2
 801ce70:	3301      	adds	r3, #1
 801ce72:	009b      	lsls	r3, r3, #2
 801ce74:	50c8      	str	r0, [r1, r3]
 801ce76:	2800      	cmp	r0, #0
 801ce78:	d002      	beq.n	801ce80 <__lshift+0xb0>
 801ce7a:	9b01      	ldr	r3, [sp, #4]
 801ce7c:	3302      	adds	r3, #2
 801ce7e:	9300      	str	r3, [sp, #0]
 801ce80:	9b00      	ldr	r3, [sp, #0]
 801ce82:	9802      	ldr	r0, [sp, #8]
 801ce84:	3b01      	subs	r3, #1
 801ce86:	0021      	movs	r1, r4
 801ce88:	612b      	str	r3, [r5, #16]
 801ce8a:	f7ff fd77 	bl	801c97c <_Bfree>
 801ce8e:	0028      	movs	r0, r5
 801ce90:	b005      	add	sp, #20
 801ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce94:	cb01      	ldmia	r3!, {r0}
 801ce96:	c101      	stmia	r1!, {r0}
 801ce98:	429a      	cmp	r2, r3
 801ce9a:	d8fb      	bhi.n	801ce94 <__lshift+0xc4>
 801ce9c:	e7f0      	b.n	801ce80 <__lshift+0xb0>
 801ce9e:	46c0      	nop			@ (mov r8, r8)
 801cea0:	0801f908 	.word	0x0801f908
 801cea4:	0801f979 	.word	0x0801f979

0801cea8 <__mcmp>:
 801cea8:	b530      	push	{r4, r5, lr}
 801ceaa:	690b      	ldr	r3, [r1, #16]
 801ceac:	6904      	ldr	r4, [r0, #16]
 801ceae:	0002      	movs	r2, r0
 801ceb0:	1ae0      	subs	r0, r4, r3
 801ceb2:	429c      	cmp	r4, r3
 801ceb4:	d10f      	bne.n	801ced6 <__mcmp+0x2e>
 801ceb6:	3214      	adds	r2, #20
 801ceb8:	009b      	lsls	r3, r3, #2
 801ceba:	3114      	adds	r1, #20
 801cebc:	0014      	movs	r4, r2
 801cebe:	18c9      	adds	r1, r1, r3
 801cec0:	18d2      	adds	r2, r2, r3
 801cec2:	3a04      	subs	r2, #4
 801cec4:	3904      	subs	r1, #4
 801cec6:	6815      	ldr	r5, [r2, #0]
 801cec8:	680b      	ldr	r3, [r1, #0]
 801ceca:	429d      	cmp	r5, r3
 801cecc:	d004      	beq.n	801ced8 <__mcmp+0x30>
 801cece:	2001      	movs	r0, #1
 801ced0:	429d      	cmp	r5, r3
 801ced2:	d200      	bcs.n	801ced6 <__mcmp+0x2e>
 801ced4:	3802      	subs	r0, #2
 801ced6:	bd30      	pop	{r4, r5, pc}
 801ced8:	4294      	cmp	r4, r2
 801ceda:	d3f2      	bcc.n	801cec2 <__mcmp+0x1a>
 801cedc:	e7fb      	b.n	801ced6 <__mcmp+0x2e>
	...

0801cee0 <__mdiff>:
 801cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cee2:	000c      	movs	r4, r1
 801cee4:	b087      	sub	sp, #28
 801cee6:	9000      	str	r0, [sp, #0]
 801cee8:	0011      	movs	r1, r2
 801ceea:	0020      	movs	r0, r4
 801ceec:	0017      	movs	r7, r2
 801ceee:	f7ff ffdb 	bl	801cea8 <__mcmp>
 801cef2:	1e05      	subs	r5, r0, #0
 801cef4:	d110      	bne.n	801cf18 <__mdiff+0x38>
 801cef6:	0001      	movs	r1, r0
 801cef8:	9800      	ldr	r0, [sp, #0]
 801cefa:	f7ff fcfb 	bl	801c8f4 <_Balloc>
 801cefe:	1e02      	subs	r2, r0, #0
 801cf00:	d104      	bne.n	801cf0c <__mdiff+0x2c>
 801cf02:	4b40      	ldr	r3, [pc, #256]	@ (801d004 <__mdiff+0x124>)
 801cf04:	4840      	ldr	r0, [pc, #256]	@ (801d008 <__mdiff+0x128>)
 801cf06:	4941      	ldr	r1, [pc, #260]	@ (801d00c <__mdiff+0x12c>)
 801cf08:	f000 fde6 	bl	801dad8 <__assert_func>
 801cf0c:	2301      	movs	r3, #1
 801cf0e:	6145      	str	r5, [r0, #20]
 801cf10:	6103      	str	r3, [r0, #16]
 801cf12:	0010      	movs	r0, r2
 801cf14:	b007      	add	sp, #28
 801cf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf18:	2600      	movs	r6, #0
 801cf1a:	42b0      	cmp	r0, r6
 801cf1c:	da03      	bge.n	801cf26 <__mdiff+0x46>
 801cf1e:	0023      	movs	r3, r4
 801cf20:	003c      	movs	r4, r7
 801cf22:	001f      	movs	r7, r3
 801cf24:	3601      	adds	r6, #1
 801cf26:	6861      	ldr	r1, [r4, #4]
 801cf28:	9800      	ldr	r0, [sp, #0]
 801cf2a:	f7ff fce3 	bl	801c8f4 <_Balloc>
 801cf2e:	1e02      	subs	r2, r0, #0
 801cf30:	d103      	bne.n	801cf3a <__mdiff+0x5a>
 801cf32:	4b34      	ldr	r3, [pc, #208]	@ (801d004 <__mdiff+0x124>)
 801cf34:	4834      	ldr	r0, [pc, #208]	@ (801d008 <__mdiff+0x128>)
 801cf36:	4936      	ldr	r1, [pc, #216]	@ (801d010 <__mdiff+0x130>)
 801cf38:	e7e6      	b.n	801cf08 <__mdiff+0x28>
 801cf3a:	6923      	ldr	r3, [r4, #16]
 801cf3c:	3414      	adds	r4, #20
 801cf3e:	9300      	str	r3, [sp, #0]
 801cf40:	009b      	lsls	r3, r3, #2
 801cf42:	18e3      	adds	r3, r4, r3
 801cf44:	0021      	movs	r1, r4
 801cf46:	9401      	str	r4, [sp, #4]
 801cf48:	003c      	movs	r4, r7
 801cf4a:	9302      	str	r3, [sp, #8]
 801cf4c:	693b      	ldr	r3, [r7, #16]
 801cf4e:	3414      	adds	r4, #20
 801cf50:	009b      	lsls	r3, r3, #2
 801cf52:	18e3      	adds	r3, r4, r3
 801cf54:	9303      	str	r3, [sp, #12]
 801cf56:	0003      	movs	r3, r0
 801cf58:	60c6      	str	r6, [r0, #12]
 801cf5a:	468c      	mov	ip, r1
 801cf5c:	2000      	movs	r0, #0
 801cf5e:	3314      	adds	r3, #20
 801cf60:	9304      	str	r3, [sp, #16]
 801cf62:	9305      	str	r3, [sp, #20]
 801cf64:	4663      	mov	r3, ip
 801cf66:	cb20      	ldmia	r3!, {r5}
 801cf68:	b2a9      	uxth	r1, r5
 801cf6a:	000e      	movs	r6, r1
 801cf6c:	469c      	mov	ip, r3
 801cf6e:	cc08      	ldmia	r4!, {r3}
 801cf70:	0c2d      	lsrs	r5, r5, #16
 801cf72:	b299      	uxth	r1, r3
 801cf74:	1a71      	subs	r1, r6, r1
 801cf76:	1809      	adds	r1, r1, r0
 801cf78:	0c1b      	lsrs	r3, r3, #16
 801cf7a:	1408      	asrs	r0, r1, #16
 801cf7c:	1aeb      	subs	r3, r5, r3
 801cf7e:	181b      	adds	r3, r3, r0
 801cf80:	1418      	asrs	r0, r3, #16
 801cf82:	b289      	uxth	r1, r1
 801cf84:	041b      	lsls	r3, r3, #16
 801cf86:	4319      	orrs	r1, r3
 801cf88:	9b05      	ldr	r3, [sp, #20]
 801cf8a:	c302      	stmia	r3!, {r1}
 801cf8c:	9305      	str	r3, [sp, #20]
 801cf8e:	9b03      	ldr	r3, [sp, #12]
 801cf90:	42a3      	cmp	r3, r4
 801cf92:	d8e7      	bhi.n	801cf64 <__mdiff+0x84>
 801cf94:	0039      	movs	r1, r7
 801cf96:	9c03      	ldr	r4, [sp, #12]
 801cf98:	3115      	adds	r1, #21
 801cf9a:	2304      	movs	r3, #4
 801cf9c:	428c      	cmp	r4, r1
 801cf9e:	d304      	bcc.n	801cfaa <__mdiff+0xca>
 801cfa0:	1be3      	subs	r3, r4, r7
 801cfa2:	3b15      	subs	r3, #21
 801cfa4:	089b      	lsrs	r3, r3, #2
 801cfa6:	3301      	adds	r3, #1
 801cfa8:	009b      	lsls	r3, r3, #2
 801cfaa:	9901      	ldr	r1, [sp, #4]
 801cfac:	18cd      	adds	r5, r1, r3
 801cfae:	9904      	ldr	r1, [sp, #16]
 801cfb0:	002e      	movs	r6, r5
 801cfb2:	18cb      	adds	r3, r1, r3
 801cfb4:	001f      	movs	r7, r3
 801cfb6:	9902      	ldr	r1, [sp, #8]
 801cfb8:	428e      	cmp	r6, r1
 801cfba:	d311      	bcc.n	801cfe0 <__mdiff+0x100>
 801cfbc:	9c02      	ldr	r4, [sp, #8]
 801cfbe:	1ee9      	subs	r1, r5, #3
 801cfc0:	2000      	movs	r0, #0
 801cfc2:	428c      	cmp	r4, r1
 801cfc4:	d304      	bcc.n	801cfd0 <__mdiff+0xf0>
 801cfc6:	0021      	movs	r1, r4
 801cfc8:	3103      	adds	r1, #3
 801cfca:	1b49      	subs	r1, r1, r5
 801cfcc:	0889      	lsrs	r1, r1, #2
 801cfce:	0088      	lsls	r0, r1, #2
 801cfd0:	181b      	adds	r3, r3, r0
 801cfd2:	3b04      	subs	r3, #4
 801cfd4:	6819      	ldr	r1, [r3, #0]
 801cfd6:	2900      	cmp	r1, #0
 801cfd8:	d010      	beq.n	801cffc <__mdiff+0x11c>
 801cfda:	9b00      	ldr	r3, [sp, #0]
 801cfdc:	6113      	str	r3, [r2, #16]
 801cfde:	e798      	b.n	801cf12 <__mdiff+0x32>
 801cfe0:	4684      	mov	ip, r0
 801cfe2:	ce02      	ldmia	r6!, {r1}
 801cfe4:	b288      	uxth	r0, r1
 801cfe6:	4460      	add	r0, ip
 801cfe8:	1400      	asrs	r0, r0, #16
 801cfea:	0c0c      	lsrs	r4, r1, #16
 801cfec:	1904      	adds	r4, r0, r4
 801cfee:	4461      	add	r1, ip
 801cff0:	1420      	asrs	r0, r4, #16
 801cff2:	b289      	uxth	r1, r1
 801cff4:	0424      	lsls	r4, r4, #16
 801cff6:	4321      	orrs	r1, r4
 801cff8:	c702      	stmia	r7!, {r1}
 801cffa:	e7dc      	b.n	801cfb6 <__mdiff+0xd6>
 801cffc:	9900      	ldr	r1, [sp, #0]
 801cffe:	3901      	subs	r1, #1
 801d000:	9100      	str	r1, [sp, #0]
 801d002:	e7e6      	b.n	801cfd2 <__mdiff+0xf2>
 801d004:	0801f908 	.word	0x0801f908
 801d008:	0801f979 	.word	0x0801f979
 801d00c:	00000237 	.word	0x00000237
 801d010:	00000245 	.word	0x00000245

0801d014 <__ulp>:
 801d014:	b510      	push	{r4, lr}
 801d016:	2400      	movs	r4, #0
 801d018:	4b0c      	ldr	r3, [pc, #48]	@ (801d04c <__ulp+0x38>)
 801d01a:	4a0d      	ldr	r2, [pc, #52]	@ (801d050 <__ulp+0x3c>)
 801d01c:	400b      	ands	r3, r1
 801d01e:	189b      	adds	r3, r3, r2
 801d020:	42a3      	cmp	r3, r4
 801d022:	dc06      	bgt.n	801d032 <__ulp+0x1e>
 801d024:	425b      	negs	r3, r3
 801d026:	151a      	asrs	r2, r3, #20
 801d028:	2a13      	cmp	r2, #19
 801d02a:	dc05      	bgt.n	801d038 <__ulp+0x24>
 801d02c:	2380      	movs	r3, #128	@ 0x80
 801d02e:	031b      	lsls	r3, r3, #12
 801d030:	4113      	asrs	r3, r2
 801d032:	0019      	movs	r1, r3
 801d034:	0020      	movs	r0, r4
 801d036:	bd10      	pop	{r4, pc}
 801d038:	3a14      	subs	r2, #20
 801d03a:	2401      	movs	r4, #1
 801d03c:	2a1e      	cmp	r2, #30
 801d03e:	dc02      	bgt.n	801d046 <__ulp+0x32>
 801d040:	2480      	movs	r4, #128	@ 0x80
 801d042:	0624      	lsls	r4, r4, #24
 801d044:	40d4      	lsrs	r4, r2
 801d046:	2300      	movs	r3, #0
 801d048:	e7f3      	b.n	801d032 <__ulp+0x1e>
 801d04a:	46c0      	nop			@ (mov r8, r8)
 801d04c:	7ff00000 	.word	0x7ff00000
 801d050:	fcc00000 	.word	0xfcc00000

0801d054 <__b2d>:
 801d054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d056:	0006      	movs	r6, r0
 801d058:	6903      	ldr	r3, [r0, #16]
 801d05a:	3614      	adds	r6, #20
 801d05c:	009b      	lsls	r3, r3, #2
 801d05e:	18f3      	adds	r3, r6, r3
 801d060:	1f1d      	subs	r5, r3, #4
 801d062:	682c      	ldr	r4, [r5, #0]
 801d064:	000f      	movs	r7, r1
 801d066:	0020      	movs	r0, r4
 801d068:	9301      	str	r3, [sp, #4]
 801d06a:	f7ff fd3b 	bl	801cae4 <__hi0bits>
 801d06e:	2220      	movs	r2, #32
 801d070:	1a12      	subs	r2, r2, r0
 801d072:	603a      	str	r2, [r7, #0]
 801d074:	0003      	movs	r3, r0
 801d076:	4a1c      	ldr	r2, [pc, #112]	@ (801d0e8 <__b2d+0x94>)
 801d078:	280a      	cmp	r0, #10
 801d07a:	dc15      	bgt.n	801d0a8 <__b2d+0x54>
 801d07c:	210b      	movs	r1, #11
 801d07e:	0027      	movs	r7, r4
 801d080:	1a09      	subs	r1, r1, r0
 801d082:	40cf      	lsrs	r7, r1
 801d084:	433a      	orrs	r2, r7
 801d086:	468c      	mov	ip, r1
 801d088:	0011      	movs	r1, r2
 801d08a:	2200      	movs	r2, #0
 801d08c:	42ae      	cmp	r6, r5
 801d08e:	d202      	bcs.n	801d096 <__b2d+0x42>
 801d090:	9a01      	ldr	r2, [sp, #4]
 801d092:	3a08      	subs	r2, #8
 801d094:	6812      	ldr	r2, [r2, #0]
 801d096:	3315      	adds	r3, #21
 801d098:	409c      	lsls	r4, r3
 801d09a:	4663      	mov	r3, ip
 801d09c:	0027      	movs	r7, r4
 801d09e:	40da      	lsrs	r2, r3
 801d0a0:	4317      	orrs	r7, r2
 801d0a2:	0038      	movs	r0, r7
 801d0a4:	b003      	add	sp, #12
 801d0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0a8:	2700      	movs	r7, #0
 801d0aa:	42ae      	cmp	r6, r5
 801d0ac:	d202      	bcs.n	801d0b4 <__b2d+0x60>
 801d0ae:	9d01      	ldr	r5, [sp, #4]
 801d0b0:	3d08      	subs	r5, #8
 801d0b2:	682f      	ldr	r7, [r5, #0]
 801d0b4:	210b      	movs	r1, #11
 801d0b6:	4249      	negs	r1, r1
 801d0b8:	468c      	mov	ip, r1
 801d0ba:	449c      	add	ip, r3
 801d0bc:	2b0b      	cmp	r3, #11
 801d0be:	d010      	beq.n	801d0e2 <__b2d+0x8e>
 801d0c0:	4661      	mov	r1, ip
 801d0c2:	2320      	movs	r3, #32
 801d0c4:	408c      	lsls	r4, r1
 801d0c6:	1a5b      	subs	r3, r3, r1
 801d0c8:	0039      	movs	r1, r7
 801d0ca:	40d9      	lsrs	r1, r3
 801d0cc:	430c      	orrs	r4, r1
 801d0ce:	4322      	orrs	r2, r4
 801d0d0:	0011      	movs	r1, r2
 801d0d2:	2200      	movs	r2, #0
 801d0d4:	42b5      	cmp	r5, r6
 801d0d6:	d901      	bls.n	801d0dc <__b2d+0x88>
 801d0d8:	3d04      	subs	r5, #4
 801d0da:	682a      	ldr	r2, [r5, #0]
 801d0dc:	4664      	mov	r4, ip
 801d0de:	40a7      	lsls	r7, r4
 801d0e0:	e7dd      	b.n	801d09e <__b2d+0x4a>
 801d0e2:	4322      	orrs	r2, r4
 801d0e4:	0011      	movs	r1, r2
 801d0e6:	e7dc      	b.n	801d0a2 <__b2d+0x4e>
 801d0e8:	3ff00000 	.word	0x3ff00000

0801d0ec <__d2b>:
 801d0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d0ee:	2101      	movs	r1, #1
 801d0f0:	0016      	movs	r6, r2
 801d0f2:	001f      	movs	r7, r3
 801d0f4:	f7ff fbfe 	bl	801c8f4 <_Balloc>
 801d0f8:	1e04      	subs	r4, r0, #0
 801d0fa:	d105      	bne.n	801d108 <__d2b+0x1c>
 801d0fc:	0022      	movs	r2, r4
 801d0fe:	4b25      	ldr	r3, [pc, #148]	@ (801d194 <__d2b+0xa8>)
 801d100:	4825      	ldr	r0, [pc, #148]	@ (801d198 <__d2b+0xac>)
 801d102:	4926      	ldr	r1, [pc, #152]	@ (801d19c <__d2b+0xb0>)
 801d104:	f000 fce8 	bl	801dad8 <__assert_func>
 801d108:	033b      	lsls	r3, r7, #12
 801d10a:	007d      	lsls	r5, r7, #1
 801d10c:	0b1b      	lsrs	r3, r3, #12
 801d10e:	0d6d      	lsrs	r5, r5, #21
 801d110:	d002      	beq.n	801d118 <__d2b+0x2c>
 801d112:	2280      	movs	r2, #128	@ 0x80
 801d114:	0352      	lsls	r2, r2, #13
 801d116:	4313      	orrs	r3, r2
 801d118:	9301      	str	r3, [sp, #4]
 801d11a:	2e00      	cmp	r6, #0
 801d11c:	d025      	beq.n	801d16a <__d2b+0x7e>
 801d11e:	4668      	mov	r0, sp
 801d120:	9600      	str	r6, [sp, #0]
 801d122:	f7ff fd00 	bl	801cb26 <__lo0bits>
 801d126:	9b01      	ldr	r3, [sp, #4]
 801d128:	9900      	ldr	r1, [sp, #0]
 801d12a:	2800      	cmp	r0, #0
 801d12c:	d01b      	beq.n	801d166 <__d2b+0x7a>
 801d12e:	2220      	movs	r2, #32
 801d130:	001e      	movs	r6, r3
 801d132:	1a12      	subs	r2, r2, r0
 801d134:	4096      	lsls	r6, r2
 801d136:	0032      	movs	r2, r6
 801d138:	40c3      	lsrs	r3, r0
 801d13a:	430a      	orrs	r2, r1
 801d13c:	6162      	str	r2, [r4, #20]
 801d13e:	9301      	str	r3, [sp, #4]
 801d140:	9e01      	ldr	r6, [sp, #4]
 801d142:	61a6      	str	r6, [r4, #24]
 801d144:	1e73      	subs	r3, r6, #1
 801d146:	419e      	sbcs	r6, r3
 801d148:	3601      	adds	r6, #1
 801d14a:	6126      	str	r6, [r4, #16]
 801d14c:	2d00      	cmp	r5, #0
 801d14e:	d014      	beq.n	801d17a <__d2b+0x8e>
 801d150:	2635      	movs	r6, #53	@ 0x35
 801d152:	4b13      	ldr	r3, [pc, #76]	@ (801d1a0 <__d2b+0xb4>)
 801d154:	18ed      	adds	r5, r5, r3
 801d156:	9b08      	ldr	r3, [sp, #32]
 801d158:	182d      	adds	r5, r5, r0
 801d15a:	601d      	str	r5, [r3, #0]
 801d15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d15e:	1a36      	subs	r6, r6, r0
 801d160:	601e      	str	r6, [r3, #0]
 801d162:	0020      	movs	r0, r4
 801d164:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d166:	6161      	str	r1, [r4, #20]
 801d168:	e7ea      	b.n	801d140 <__d2b+0x54>
 801d16a:	a801      	add	r0, sp, #4
 801d16c:	f7ff fcdb 	bl	801cb26 <__lo0bits>
 801d170:	9b01      	ldr	r3, [sp, #4]
 801d172:	2601      	movs	r6, #1
 801d174:	6163      	str	r3, [r4, #20]
 801d176:	3020      	adds	r0, #32
 801d178:	e7e7      	b.n	801d14a <__d2b+0x5e>
 801d17a:	4b0a      	ldr	r3, [pc, #40]	@ (801d1a4 <__d2b+0xb8>)
 801d17c:	18c0      	adds	r0, r0, r3
 801d17e:	9b08      	ldr	r3, [sp, #32]
 801d180:	6018      	str	r0, [r3, #0]
 801d182:	4b09      	ldr	r3, [pc, #36]	@ (801d1a8 <__d2b+0xbc>)
 801d184:	18f3      	adds	r3, r6, r3
 801d186:	009b      	lsls	r3, r3, #2
 801d188:	18e3      	adds	r3, r4, r3
 801d18a:	6958      	ldr	r0, [r3, #20]
 801d18c:	f7ff fcaa 	bl	801cae4 <__hi0bits>
 801d190:	0176      	lsls	r6, r6, #5
 801d192:	e7e3      	b.n	801d15c <__d2b+0x70>
 801d194:	0801f908 	.word	0x0801f908
 801d198:	0801f979 	.word	0x0801f979
 801d19c:	0000030f 	.word	0x0000030f
 801d1a0:	fffffbcd 	.word	0xfffffbcd
 801d1a4:	fffffbce 	.word	0xfffffbce
 801d1a8:	3fffffff 	.word	0x3fffffff

0801d1ac <__ratio>:
 801d1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1ae:	b087      	sub	sp, #28
 801d1b0:	000f      	movs	r7, r1
 801d1b2:	a904      	add	r1, sp, #16
 801d1b4:	0006      	movs	r6, r0
 801d1b6:	f7ff ff4d 	bl	801d054 <__b2d>
 801d1ba:	9000      	str	r0, [sp, #0]
 801d1bc:	9101      	str	r1, [sp, #4]
 801d1be:	9b00      	ldr	r3, [sp, #0]
 801d1c0:	9c01      	ldr	r4, [sp, #4]
 801d1c2:	0038      	movs	r0, r7
 801d1c4:	a905      	add	r1, sp, #20
 801d1c6:	9302      	str	r3, [sp, #8]
 801d1c8:	9403      	str	r4, [sp, #12]
 801d1ca:	f7ff ff43 	bl	801d054 <__b2d>
 801d1ce:	000d      	movs	r5, r1
 801d1d0:	0002      	movs	r2, r0
 801d1d2:	000b      	movs	r3, r1
 801d1d4:	6930      	ldr	r0, [r6, #16]
 801d1d6:	6939      	ldr	r1, [r7, #16]
 801d1d8:	9e04      	ldr	r6, [sp, #16]
 801d1da:	1a40      	subs	r0, r0, r1
 801d1dc:	9905      	ldr	r1, [sp, #20]
 801d1de:	0140      	lsls	r0, r0, #5
 801d1e0:	1a71      	subs	r1, r6, r1
 801d1e2:	1841      	adds	r1, r0, r1
 801d1e4:	0508      	lsls	r0, r1, #20
 801d1e6:	2900      	cmp	r1, #0
 801d1e8:	dd08      	ble.n	801d1fc <__ratio+0x50>
 801d1ea:	9901      	ldr	r1, [sp, #4]
 801d1ec:	1841      	adds	r1, r0, r1
 801d1ee:	9103      	str	r1, [sp, #12]
 801d1f0:	9802      	ldr	r0, [sp, #8]
 801d1f2:	9903      	ldr	r1, [sp, #12]
 801d1f4:	f7e4 fdd4 	bl	8001da0 <__aeabi_ddiv>
 801d1f8:	b007      	add	sp, #28
 801d1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1fc:	1a2b      	subs	r3, r5, r0
 801d1fe:	e7f7      	b.n	801d1f0 <__ratio+0x44>

0801d200 <__copybits>:
 801d200:	b570      	push	{r4, r5, r6, lr}
 801d202:	0014      	movs	r4, r2
 801d204:	0005      	movs	r5, r0
 801d206:	3901      	subs	r1, #1
 801d208:	6913      	ldr	r3, [r2, #16]
 801d20a:	1149      	asrs	r1, r1, #5
 801d20c:	3101      	adds	r1, #1
 801d20e:	0089      	lsls	r1, r1, #2
 801d210:	3414      	adds	r4, #20
 801d212:	009b      	lsls	r3, r3, #2
 801d214:	1841      	adds	r1, r0, r1
 801d216:	18e3      	adds	r3, r4, r3
 801d218:	42a3      	cmp	r3, r4
 801d21a:	d80d      	bhi.n	801d238 <__copybits+0x38>
 801d21c:	0014      	movs	r4, r2
 801d21e:	3411      	adds	r4, #17
 801d220:	2500      	movs	r5, #0
 801d222:	429c      	cmp	r4, r3
 801d224:	d803      	bhi.n	801d22e <__copybits+0x2e>
 801d226:	1a9b      	subs	r3, r3, r2
 801d228:	3b11      	subs	r3, #17
 801d22a:	089b      	lsrs	r3, r3, #2
 801d22c:	009d      	lsls	r5, r3, #2
 801d22e:	2300      	movs	r3, #0
 801d230:	1940      	adds	r0, r0, r5
 801d232:	4281      	cmp	r1, r0
 801d234:	d803      	bhi.n	801d23e <__copybits+0x3e>
 801d236:	bd70      	pop	{r4, r5, r6, pc}
 801d238:	cc40      	ldmia	r4!, {r6}
 801d23a:	c540      	stmia	r5!, {r6}
 801d23c:	e7ec      	b.n	801d218 <__copybits+0x18>
 801d23e:	c008      	stmia	r0!, {r3}
 801d240:	e7f7      	b.n	801d232 <__copybits+0x32>

0801d242 <__any_on>:
 801d242:	0002      	movs	r2, r0
 801d244:	6900      	ldr	r0, [r0, #16]
 801d246:	b510      	push	{r4, lr}
 801d248:	3214      	adds	r2, #20
 801d24a:	114b      	asrs	r3, r1, #5
 801d24c:	4298      	cmp	r0, r3
 801d24e:	db13      	blt.n	801d278 <__any_on+0x36>
 801d250:	dd0c      	ble.n	801d26c <__any_on+0x2a>
 801d252:	241f      	movs	r4, #31
 801d254:	0008      	movs	r0, r1
 801d256:	4020      	ands	r0, r4
 801d258:	4221      	tst	r1, r4
 801d25a:	d007      	beq.n	801d26c <__any_on+0x2a>
 801d25c:	0099      	lsls	r1, r3, #2
 801d25e:	588c      	ldr	r4, [r1, r2]
 801d260:	0021      	movs	r1, r4
 801d262:	40c1      	lsrs	r1, r0
 801d264:	4081      	lsls	r1, r0
 801d266:	2001      	movs	r0, #1
 801d268:	428c      	cmp	r4, r1
 801d26a:	d104      	bne.n	801d276 <__any_on+0x34>
 801d26c:	009b      	lsls	r3, r3, #2
 801d26e:	18d3      	adds	r3, r2, r3
 801d270:	4293      	cmp	r3, r2
 801d272:	d803      	bhi.n	801d27c <__any_on+0x3a>
 801d274:	2000      	movs	r0, #0
 801d276:	bd10      	pop	{r4, pc}
 801d278:	0003      	movs	r3, r0
 801d27a:	e7f7      	b.n	801d26c <__any_on+0x2a>
 801d27c:	3b04      	subs	r3, #4
 801d27e:	6819      	ldr	r1, [r3, #0]
 801d280:	2900      	cmp	r1, #0
 801d282:	d0f5      	beq.n	801d270 <__any_on+0x2e>
 801d284:	2001      	movs	r0, #1
 801d286:	e7f6      	b.n	801d276 <__any_on+0x34>

0801d288 <__ascii_wctomb>:
 801d288:	0003      	movs	r3, r0
 801d28a:	1e08      	subs	r0, r1, #0
 801d28c:	d005      	beq.n	801d29a <__ascii_wctomb+0x12>
 801d28e:	2aff      	cmp	r2, #255	@ 0xff
 801d290:	d904      	bls.n	801d29c <__ascii_wctomb+0x14>
 801d292:	228a      	movs	r2, #138	@ 0x8a
 801d294:	2001      	movs	r0, #1
 801d296:	601a      	str	r2, [r3, #0]
 801d298:	4240      	negs	r0, r0
 801d29a:	4770      	bx	lr
 801d29c:	2001      	movs	r0, #1
 801d29e:	700a      	strb	r2, [r1, #0]
 801d2a0:	e7fb      	b.n	801d29a <__ascii_wctomb+0x12>
	...

0801d2a4 <__ssputs_r>:
 801d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2a6:	688e      	ldr	r6, [r1, #8]
 801d2a8:	b085      	sub	sp, #20
 801d2aa:	001f      	movs	r7, r3
 801d2ac:	000c      	movs	r4, r1
 801d2ae:	680b      	ldr	r3, [r1, #0]
 801d2b0:	9002      	str	r0, [sp, #8]
 801d2b2:	9203      	str	r2, [sp, #12]
 801d2b4:	42be      	cmp	r6, r7
 801d2b6:	d830      	bhi.n	801d31a <__ssputs_r+0x76>
 801d2b8:	210c      	movs	r1, #12
 801d2ba:	5e62      	ldrsh	r2, [r4, r1]
 801d2bc:	2190      	movs	r1, #144	@ 0x90
 801d2be:	00c9      	lsls	r1, r1, #3
 801d2c0:	420a      	tst	r2, r1
 801d2c2:	d028      	beq.n	801d316 <__ssputs_r+0x72>
 801d2c4:	2003      	movs	r0, #3
 801d2c6:	6921      	ldr	r1, [r4, #16]
 801d2c8:	1a5b      	subs	r3, r3, r1
 801d2ca:	9301      	str	r3, [sp, #4]
 801d2cc:	6963      	ldr	r3, [r4, #20]
 801d2ce:	4343      	muls	r3, r0
 801d2d0:	9801      	ldr	r0, [sp, #4]
 801d2d2:	0fdd      	lsrs	r5, r3, #31
 801d2d4:	18ed      	adds	r5, r5, r3
 801d2d6:	1c7b      	adds	r3, r7, #1
 801d2d8:	181b      	adds	r3, r3, r0
 801d2da:	106d      	asrs	r5, r5, #1
 801d2dc:	42ab      	cmp	r3, r5
 801d2de:	d900      	bls.n	801d2e2 <__ssputs_r+0x3e>
 801d2e0:	001d      	movs	r5, r3
 801d2e2:	0552      	lsls	r2, r2, #21
 801d2e4:	d528      	bpl.n	801d338 <__ssputs_r+0x94>
 801d2e6:	0029      	movs	r1, r5
 801d2e8:	9802      	ldr	r0, [sp, #8]
 801d2ea:	f7ff fa61 	bl	801c7b0 <_malloc_r>
 801d2ee:	1e06      	subs	r6, r0, #0
 801d2f0:	d02c      	beq.n	801d34c <__ssputs_r+0xa8>
 801d2f2:	9a01      	ldr	r2, [sp, #4]
 801d2f4:	6921      	ldr	r1, [r4, #16]
 801d2f6:	f7fd fff9 	bl	801b2ec <memcpy>
 801d2fa:	89a2      	ldrh	r2, [r4, #12]
 801d2fc:	4b18      	ldr	r3, [pc, #96]	@ (801d360 <__ssputs_r+0xbc>)
 801d2fe:	401a      	ands	r2, r3
 801d300:	2380      	movs	r3, #128	@ 0x80
 801d302:	4313      	orrs	r3, r2
 801d304:	81a3      	strh	r3, [r4, #12]
 801d306:	9b01      	ldr	r3, [sp, #4]
 801d308:	6126      	str	r6, [r4, #16]
 801d30a:	18f6      	adds	r6, r6, r3
 801d30c:	6026      	str	r6, [r4, #0]
 801d30e:	003e      	movs	r6, r7
 801d310:	6165      	str	r5, [r4, #20]
 801d312:	1aed      	subs	r5, r5, r3
 801d314:	60a5      	str	r5, [r4, #8]
 801d316:	42be      	cmp	r6, r7
 801d318:	d900      	bls.n	801d31c <__ssputs_r+0x78>
 801d31a:	003e      	movs	r6, r7
 801d31c:	0032      	movs	r2, r6
 801d31e:	9903      	ldr	r1, [sp, #12]
 801d320:	6820      	ldr	r0, [r4, #0]
 801d322:	f000 fbb3 	bl	801da8c <memmove>
 801d326:	2000      	movs	r0, #0
 801d328:	68a3      	ldr	r3, [r4, #8]
 801d32a:	1b9b      	subs	r3, r3, r6
 801d32c:	60a3      	str	r3, [r4, #8]
 801d32e:	6823      	ldr	r3, [r4, #0]
 801d330:	199b      	adds	r3, r3, r6
 801d332:	6023      	str	r3, [r4, #0]
 801d334:	b005      	add	sp, #20
 801d336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d338:	002a      	movs	r2, r5
 801d33a:	9802      	ldr	r0, [sp, #8]
 801d33c:	f000 fc17 	bl	801db6e <_realloc_r>
 801d340:	1e06      	subs	r6, r0, #0
 801d342:	d1e0      	bne.n	801d306 <__ssputs_r+0x62>
 801d344:	6921      	ldr	r1, [r4, #16]
 801d346:	9802      	ldr	r0, [sp, #8]
 801d348:	f7fe fe62 	bl	801c010 <_free_r>
 801d34c:	230c      	movs	r3, #12
 801d34e:	2001      	movs	r0, #1
 801d350:	9a02      	ldr	r2, [sp, #8]
 801d352:	4240      	negs	r0, r0
 801d354:	6013      	str	r3, [r2, #0]
 801d356:	89a2      	ldrh	r2, [r4, #12]
 801d358:	3334      	adds	r3, #52	@ 0x34
 801d35a:	4313      	orrs	r3, r2
 801d35c:	81a3      	strh	r3, [r4, #12]
 801d35e:	e7e9      	b.n	801d334 <__ssputs_r+0x90>
 801d360:	fffffb7f 	.word	0xfffffb7f

0801d364 <_svfiprintf_r>:
 801d364:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d366:	b0a1      	sub	sp, #132	@ 0x84
 801d368:	9003      	str	r0, [sp, #12]
 801d36a:	001d      	movs	r5, r3
 801d36c:	898b      	ldrh	r3, [r1, #12]
 801d36e:	000f      	movs	r7, r1
 801d370:	0016      	movs	r6, r2
 801d372:	061b      	lsls	r3, r3, #24
 801d374:	d511      	bpl.n	801d39a <_svfiprintf_r+0x36>
 801d376:	690b      	ldr	r3, [r1, #16]
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d10e      	bne.n	801d39a <_svfiprintf_r+0x36>
 801d37c:	2140      	movs	r1, #64	@ 0x40
 801d37e:	f7ff fa17 	bl	801c7b0 <_malloc_r>
 801d382:	6038      	str	r0, [r7, #0]
 801d384:	6138      	str	r0, [r7, #16]
 801d386:	2800      	cmp	r0, #0
 801d388:	d105      	bne.n	801d396 <_svfiprintf_r+0x32>
 801d38a:	230c      	movs	r3, #12
 801d38c:	9a03      	ldr	r2, [sp, #12]
 801d38e:	6013      	str	r3, [r2, #0]
 801d390:	2001      	movs	r0, #1
 801d392:	4240      	negs	r0, r0
 801d394:	e0cf      	b.n	801d536 <_svfiprintf_r+0x1d2>
 801d396:	2340      	movs	r3, #64	@ 0x40
 801d398:	617b      	str	r3, [r7, #20]
 801d39a:	2300      	movs	r3, #0
 801d39c:	ac08      	add	r4, sp, #32
 801d39e:	6163      	str	r3, [r4, #20]
 801d3a0:	3320      	adds	r3, #32
 801d3a2:	7663      	strb	r3, [r4, #25]
 801d3a4:	3310      	adds	r3, #16
 801d3a6:	76a3      	strb	r3, [r4, #26]
 801d3a8:	9507      	str	r5, [sp, #28]
 801d3aa:	0035      	movs	r5, r6
 801d3ac:	782b      	ldrb	r3, [r5, #0]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d001      	beq.n	801d3b6 <_svfiprintf_r+0x52>
 801d3b2:	2b25      	cmp	r3, #37	@ 0x25
 801d3b4:	d148      	bne.n	801d448 <_svfiprintf_r+0xe4>
 801d3b6:	1bab      	subs	r3, r5, r6
 801d3b8:	9305      	str	r3, [sp, #20]
 801d3ba:	42b5      	cmp	r5, r6
 801d3bc:	d00b      	beq.n	801d3d6 <_svfiprintf_r+0x72>
 801d3be:	0032      	movs	r2, r6
 801d3c0:	0039      	movs	r1, r7
 801d3c2:	9803      	ldr	r0, [sp, #12]
 801d3c4:	f7ff ff6e 	bl	801d2a4 <__ssputs_r>
 801d3c8:	3001      	adds	r0, #1
 801d3ca:	d100      	bne.n	801d3ce <_svfiprintf_r+0x6a>
 801d3cc:	e0ae      	b.n	801d52c <_svfiprintf_r+0x1c8>
 801d3ce:	6963      	ldr	r3, [r4, #20]
 801d3d0:	9a05      	ldr	r2, [sp, #20]
 801d3d2:	189b      	adds	r3, r3, r2
 801d3d4:	6163      	str	r3, [r4, #20]
 801d3d6:	782b      	ldrb	r3, [r5, #0]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d100      	bne.n	801d3de <_svfiprintf_r+0x7a>
 801d3dc:	e0a6      	b.n	801d52c <_svfiprintf_r+0x1c8>
 801d3de:	2201      	movs	r2, #1
 801d3e0:	2300      	movs	r3, #0
 801d3e2:	4252      	negs	r2, r2
 801d3e4:	6062      	str	r2, [r4, #4]
 801d3e6:	a904      	add	r1, sp, #16
 801d3e8:	3254      	adds	r2, #84	@ 0x54
 801d3ea:	1852      	adds	r2, r2, r1
 801d3ec:	1c6e      	adds	r6, r5, #1
 801d3ee:	6023      	str	r3, [r4, #0]
 801d3f0:	60e3      	str	r3, [r4, #12]
 801d3f2:	60a3      	str	r3, [r4, #8]
 801d3f4:	7013      	strb	r3, [r2, #0]
 801d3f6:	65a3      	str	r3, [r4, #88]	@ 0x58
 801d3f8:	4b54      	ldr	r3, [pc, #336]	@ (801d54c <_svfiprintf_r+0x1e8>)
 801d3fa:	2205      	movs	r2, #5
 801d3fc:	0018      	movs	r0, r3
 801d3fe:	7831      	ldrb	r1, [r6, #0]
 801d400:	9305      	str	r3, [sp, #20]
 801d402:	f7fd ff68 	bl	801b2d6 <memchr>
 801d406:	1c75      	adds	r5, r6, #1
 801d408:	2800      	cmp	r0, #0
 801d40a:	d11f      	bne.n	801d44c <_svfiprintf_r+0xe8>
 801d40c:	6822      	ldr	r2, [r4, #0]
 801d40e:	06d3      	lsls	r3, r2, #27
 801d410:	d504      	bpl.n	801d41c <_svfiprintf_r+0xb8>
 801d412:	2353      	movs	r3, #83	@ 0x53
 801d414:	a904      	add	r1, sp, #16
 801d416:	185b      	adds	r3, r3, r1
 801d418:	2120      	movs	r1, #32
 801d41a:	7019      	strb	r1, [r3, #0]
 801d41c:	0713      	lsls	r3, r2, #28
 801d41e:	d504      	bpl.n	801d42a <_svfiprintf_r+0xc6>
 801d420:	2353      	movs	r3, #83	@ 0x53
 801d422:	a904      	add	r1, sp, #16
 801d424:	185b      	adds	r3, r3, r1
 801d426:	212b      	movs	r1, #43	@ 0x2b
 801d428:	7019      	strb	r1, [r3, #0]
 801d42a:	7833      	ldrb	r3, [r6, #0]
 801d42c:	2b2a      	cmp	r3, #42	@ 0x2a
 801d42e:	d016      	beq.n	801d45e <_svfiprintf_r+0xfa>
 801d430:	0035      	movs	r5, r6
 801d432:	2100      	movs	r1, #0
 801d434:	200a      	movs	r0, #10
 801d436:	68e3      	ldr	r3, [r4, #12]
 801d438:	782a      	ldrb	r2, [r5, #0]
 801d43a:	1c6e      	adds	r6, r5, #1
 801d43c:	3a30      	subs	r2, #48	@ 0x30
 801d43e:	2a09      	cmp	r2, #9
 801d440:	d950      	bls.n	801d4e4 <_svfiprintf_r+0x180>
 801d442:	2900      	cmp	r1, #0
 801d444:	d111      	bne.n	801d46a <_svfiprintf_r+0x106>
 801d446:	e017      	b.n	801d478 <_svfiprintf_r+0x114>
 801d448:	3501      	adds	r5, #1
 801d44a:	e7af      	b.n	801d3ac <_svfiprintf_r+0x48>
 801d44c:	9b05      	ldr	r3, [sp, #20]
 801d44e:	6822      	ldr	r2, [r4, #0]
 801d450:	1ac0      	subs	r0, r0, r3
 801d452:	2301      	movs	r3, #1
 801d454:	4083      	lsls	r3, r0
 801d456:	4313      	orrs	r3, r2
 801d458:	002e      	movs	r6, r5
 801d45a:	6023      	str	r3, [r4, #0]
 801d45c:	e7cc      	b.n	801d3f8 <_svfiprintf_r+0x94>
 801d45e:	9b07      	ldr	r3, [sp, #28]
 801d460:	1d19      	adds	r1, r3, #4
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	9107      	str	r1, [sp, #28]
 801d466:	2b00      	cmp	r3, #0
 801d468:	db01      	blt.n	801d46e <_svfiprintf_r+0x10a>
 801d46a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d46c:	e004      	b.n	801d478 <_svfiprintf_r+0x114>
 801d46e:	425b      	negs	r3, r3
 801d470:	60e3      	str	r3, [r4, #12]
 801d472:	2302      	movs	r3, #2
 801d474:	4313      	orrs	r3, r2
 801d476:	6023      	str	r3, [r4, #0]
 801d478:	782b      	ldrb	r3, [r5, #0]
 801d47a:	2b2e      	cmp	r3, #46	@ 0x2e
 801d47c:	d10c      	bne.n	801d498 <_svfiprintf_r+0x134>
 801d47e:	786b      	ldrb	r3, [r5, #1]
 801d480:	2b2a      	cmp	r3, #42	@ 0x2a
 801d482:	d134      	bne.n	801d4ee <_svfiprintf_r+0x18a>
 801d484:	9b07      	ldr	r3, [sp, #28]
 801d486:	3502      	adds	r5, #2
 801d488:	1d1a      	adds	r2, r3, #4
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	9207      	str	r2, [sp, #28]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	da01      	bge.n	801d496 <_svfiprintf_r+0x132>
 801d492:	2301      	movs	r3, #1
 801d494:	425b      	negs	r3, r3
 801d496:	9309      	str	r3, [sp, #36]	@ 0x24
 801d498:	4e2d      	ldr	r6, [pc, #180]	@ (801d550 <_svfiprintf_r+0x1ec>)
 801d49a:	2203      	movs	r2, #3
 801d49c:	0030      	movs	r0, r6
 801d49e:	7829      	ldrb	r1, [r5, #0]
 801d4a0:	f7fd ff19 	bl	801b2d6 <memchr>
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	d006      	beq.n	801d4b6 <_svfiprintf_r+0x152>
 801d4a8:	2340      	movs	r3, #64	@ 0x40
 801d4aa:	1b80      	subs	r0, r0, r6
 801d4ac:	4083      	lsls	r3, r0
 801d4ae:	6822      	ldr	r2, [r4, #0]
 801d4b0:	3501      	adds	r5, #1
 801d4b2:	4313      	orrs	r3, r2
 801d4b4:	6023      	str	r3, [r4, #0]
 801d4b6:	7829      	ldrb	r1, [r5, #0]
 801d4b8:	2206      	movs	r2, #6
 801d4ba:	4826      	ldr	r0, [pc, #152]	@ (801d554 <_svfiprintf_r+0x1f0>)
 801d4bc:	1c6e      	adds	r6, r5, #1
 801d4be:	7621      	strb	r1, [r4, #24]
 801d4c0:	f7fd ff09 	bl	801b2d6 <memchr>
 801d4c4:	2800      	cmp	r0, #0
 801d4c6:	d038      	beq.n	801d53a <_svfiprintf_r+0x1d6>
 801d4c8:	4b23      	ldr	r3, [pc, #140]	@ (801d558 <_svfiprintf_r+0x1f4>)
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d122      	bne.n	801d514 <_svfiprintf_r+0x1b0>
 801d4ce:	2207      	movs	r2, #7
 801d4d0:	9b07      	ldr	r3, [sp, #28]
 801d4d2:	3307      	adds	r3, #7
 801d4d4:	4393      	bics	r3, r2
 801d4d6:	3308      	adds	r3, #8
 801d4d8:	9307      	str	r3, [sp, #28]
 801d4da:	6963      	ldr	r3, [r4, #20]
 801d4dc:	9a04      	ldr	r2, [sp, #16]
 801d4de:	189b      	adds	r3, r3, r2
 801d4e0:	6163      	str	r3, [r4, #20]
 801d4e2:	e762      	b.n	801d3aa <_svfiprintf_r+0x46>
 801d4e4:	4343      	muls	r3, r0
 801d4e6:	0035      	movs	r5, r6
 801d4e8:	2101      	movs	r1, #1
 801d4ea:	189b      	adds	r3, r3, r2
 801d4ec:	e7a4      	b.n	801d438 <_svfiprintf_r+0xd4>
 801d4ee:	2300      	movs	r3, #0
 801d4f0:	200a      	movs	r0, #10
 801d4f2:	0019      	movs	r1, r3
 801d4f4:	3501      	adds	r5, #1
 801d4f6:	6063      	str	r3, [r4, #4]
 801d4f8:	782a      	ldrb	r2, [r5, #0]
 801d4fa:	1c6e      	adds	r6, r5, #1
 801d4fc:	3a30      	subs	r2, #48	@ 0x30
 801d4fe:	2a09      	cmp	r2, #9
 801d500:	d903      	bls.n	801d50a <_svfiprintf_r+0x1a6>
 801d502:	2b00      	cmp	r3, #0
 801d504:	d0c8      	beq.n	801d498 <_svfiprintf_r+0x134>
 801d506:	9109      	str	r1, [sp, #36]	@ 0x24
 801d508:	e7c6      	b.n	801d498 <_svfiprintf_r+0x134>
 801d50a:	4341      	muls	r1, r0
 801d50c:	0035      	movs	r5, r6
 801d50e:	2301      	movs	r3, #1
 801d510:	1889      	adds	r1, r1, r2
 801d512:	e7f1      	b.n	801d4f8 <_svfiprintf_r+0x194>
 801d514:	aa07      	add	r2, sp, #28
 801d516:	9200      	str	r2, [sp, #0]
 801d518:	0021      	movs	r1, r4
 801d51a:	003a      	movs	r2, r7
 801d51c:	4b0f      	ldr	r3, [pc, #60]	@ (801d55c <_svfiprintf_r+0x1f8>)
 801d51e:	9803      	ldr	r0, [sp, #12]
 801d520:	f7fd f8d4 	bl	801a6cc <_printf_float>
 801d524:	9004      	str	r0, [sp, #16]
 801d526:	9b04      	ldr	r3, [sp, #16]
 801d528:	3301      	adds	r3, #1
 801d52a:	d1d6      	bne.n	801d4da <_svfiprintf_r+0x176>
 801d52c:	89bb      	ldrh	r3, [r7, #12]
 801d52e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d530:	065b      	lsls	r3, r3, #25
 801d532:	d500      	bpl.n	801d536 <_svfiprintf_r+0x1d2>
 801d534:	e72c      	b.n	801d390 <_svfiprintf_r+0x2c>
 801d536:	b021      	add	sp, #132	@ 0x84
 801d538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d53a:	aa07      	add	r2, sp, #28
 801d53c:	9200      	str	r2, [sp, #0]
 801d53e:	0021      	movs	r1, r4
 801d540:	003a      	movs	r2, r7
 801d542:	4b06      	ldr	r3, [pc, #24]	@ (801d55c <_svfiprintf_r+0x1f8>)
 801d544:	9803      	ldr	r0, [sp, #12]
 801d546:	f7fd fb6f 	bl	801ac28 <_printf_i>
 801d54a:	e7eb      	b.n	801d524 <_svfiprintf_r+0x1c0>
 801d54c:	0801fbd1 	.word	0x0801fbd1
 801d550:	0801fbd7 	.word	0x0801fbd7
 801d554:	0801fbdb 	.word	0x0801fbdb
 801d558:	0801a6cd 	.word	0x0801a6cd
 801d55c:	0801d2a5 	.word	0x0801d2a5

0801d560 <__sfputc_r>:
 801d560:	6893      	ldr	r3, [r2, #8]
 801d562:	b510      	push	{r4, lr}
 801d564:	3b01      	subs	r3, #1
 801d566:	6093      	str	r3, [r2, #8]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	da04      	bge.n	801d576 <__sfputc_r+0x16>
 801d56c:	6994      	ldr	r4, [r2, #24]
 801d56e:	42a3      	cmp	r3, r4
 801d570:	db07      	blt.n	801d582 <__sfputc_r+0x22>
 801d572:	290a      	cmp	r1, #10
 801d574:	d005      	beq.n	801d582 <__sfputc_r+0x22>
 801d576:	6813      	ldr	r3, [r2, #0]
 801d578:	1c58      	adds	r0, r3, #1
 801d57a:	6010      	str	r0, [r2, #0]
 801d57c:	7019      	strb	r1, [r3, #0]
 801d57e:	0008      	movs	r0, r1
 801d580:	bd10      	pop	{r4, pc}
 801d582:	f000 f9e2 	bl	801d94a <__swbuf_r>
 801d586:	0001      	movs	r1, r0
 801d588:	e7f9      	b.n	801d57e <__sfputc_r+0x1e>

0801d58a <__sfputs_r>:
 801d58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d58c:	0006      	movs	r6, r0
 801d58e:	000f      	movs	r7, r1
 801d590:	0014      	movs	r4, r2
 801d592:	18d5      	adds	r5, r2, r3
 801d594:	42ac      	cmp	r4, r5
 801d596:	d101      	bne.n	801d59c <__sfputs_r+0x12>
 801d598:	2000      	movs	r0, #0
 801d59a:	e007      	b.n	801d5ac <__sfputs_r+0x22>
 801d59c:	7821      	ldrb	r1, [r4, #0]
 801d59e:	003a      	movs	r2, r7
 801d5a0:	0030      	movs	r0, r6
 801d5a2:	f7ff ffdd 	bl	801d560 <__sfputc_r>
 801d5a6:	3401      	adds	r4, #1
 801d5a8:	1c43      	adds	r3, r0, #1
 801d5aa:	d1f3      	bne.n	801d594 <__sfputs_r+0xa>
 801d5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d5b0 <_vfiprintf_r>:
 801d5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5b2:	b0a1      	sub	sp, #132	@ 0x84
 801d5b4:	000f      	movs	r7, r1
 801d5b6:	0015      	movs	r5, r2
 801d5b8:	001e      	movs	r6, r3
 801d5ba:	9003      	str	r0, [sp, #12]
 801d5bc:	2800      	cmp	r0, #0
 801d5be:	d004      	beq.n	801d5ca <_vfiprintf_r+0x1a>
 801d5c0:	6a03      	ldr	r3, [r0, #32]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d101      	bne.n	801d5ca <_vfiprintf_r+0x1a>
 801d5c6:	f7fd fccd 	bl	801af64 <__sinit>
 801d5ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d5cc:	07db      	lsls	r3, r3, #31
 801d5ce:	d405      	bmi.n	801d5dc <_vfiprintf_r+0x2c>
 801d5d0:	89bb      	ldrh	r3, [r7, #12]
 801d5d2:	059b      	lsls	r3, r3, #22
 801d5d4:	d402      	bmi.n	801d5dc <_vfiprintf_r+0x2c>
 801d5d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d5d8:	f7fd fe7b 	bl	801b2d2 <__retarget_lock_acquire_recursive>
 801d5dc:	89bb      	ldrh	r3, [r7, #12]
 801d5de:	071b      	lsls	r3, r3, #28
 801d5e0:	d502      	bpl.n	801d5e8 <_vfiprintf_r+0x38>
 801d5e2:	693b      	ldr	r3, [r7, #16]
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d113      	bne.n	801d610 <_vfiprintf_r+0x60>
 801d5e8:	0039      	movs	r1, r7
 801d5ea:	9803      	ldr	r0, [sp, #12]
 801d5ec:	f000 f9f0 	bl	801d9d0 <__swsetup_r>
 801d5f0:	2800      	cmp	r0, #0
 801d5f2:	d00d      	beq.n	801d610 <_vfiprintf_r+0x60>
 801d5f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d5f6:	07db      	lsls	r3, r3, #31
 801d5f8:	d503      	bpl.n	801d602 <_vfiprintf_r+0x52>
 801d5fa:	2001      	movs	r0, #1
 801d5fc:	4240      	negs	r0, r0
 801d5fe:	b021      	add	sp, #132	@ 0x84
 801d600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d602:	89bb      	ldrh	r3, [r7, #12]
 801d604:	059b      	lsls	r3, r3, #22
 801d606:	d4f8      	bmi.n	801d5fa <_vfiprintf_r+0x4a>
 801d608:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d60a:	f7fd fe63 	bl	801b2d4 <__retarget_lock_release_recursive>
 801d60e:	e7f4      	b.n	801d5fa <_vfiprintf_r+0x4a>
 801d610:	2300      	movs	r3, #0
 801d612:	ac08      	add	r4, sp, #32
 801d614:	6163      	str	r3, [r4, #20]
 801d616:	3320      	adds	r3, #32
 801d618:	7663      	strb	r3, [r4, #25]
 801d61a:	3310      	adds	r3, #16
 801d61c:	76a3      	strb	r3, [r4, #26]
 801d61e:	9607      	str	r6, [sp, #28]
 801d620:	002e      	movs	r6, r5
 801d622:	7833      	ldrb	r3, [r6, #0]
 801d624:	2b00      	cmp	r3, #0
 801d626:	d001      	beq.n	801d62c <_vfiprintf_r+0x7c>
 801d628:	2b25      	cmp	r3, #37	@ 0x25
 801d62a:	d148      	bne.n	801d6be <_vfiprintf_r+0x10e>
 801d62c:	1b73      	subs	r3, r6, r5
 801d62e:	9305      	str	r3, [sp, #20]
 801d630:	42ae      	cmp	r6, r5
 801d632:	d00b      	beq.n	801d64c <_vfiprintf_r+0x9c>
 801d634:	002a      	movs	r2, r5
 801d636:	0039      	movs	r1, r7
 801d638:	9803      	ldr	r0, [sp, #12]
 801d63a:	f7ff ffa6 	bl	801d58a <__sfputs_r>
 801d63e:	3001      	adds	r0, #1
 801d640:	d100      	bne.n	801d644 <_vfiprintf_r+0x94>
 801d642:	e0ae      	b.n	801d7a2 <_vfiprintf_r+0x1f2>
 801d644:	6963      	ldr	r3, [r4, #20]
 801d646:	9a05      	ldr	r2, [sp, #20]
 801d648:	189b      	adds	r3, r3, r2
 801d64a:	6163      	str	r3, [r4, #20]
 801d64c:	7833      	ldrb	r3, [r6, #0]
 801d64e:	2b00      	cmp	r3, #0
 801d650:	d100      	bne.n	801d654 <_vfiprintf_r+0xa4>
 801d652:	e0a6      	b.n	801d7a2 <_vfiprintf_r+0x1f2>
 801d654:	2201      	movs	r2, #1
 801d656:	2300      	movs	r3, #0
 801d658:	4252      	negs	r2, r2
 801d65a:	6062      	str	r2, [r4, #4]
 801d65c:	a904      	add	r1, sp, #16
 801d65e:	3254      	adds	r2, #84	@ 0x54
 801d660:	1852      	adds	r2, r2, r1
 801d662:	1c75      	adds	r5, r6, #1
 801d664:	6023      	str	r3, [r4, #0]
 801d666:	60e3      	str	r3, [r4, #12]
 801d668:	60a3      	str	r3, [r4, #8]
 801d66a:	7013      	strb	r3, [r2, #0]
 801d66c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801d66e:	4b59      	ldr	r3, [pc, #356]	@ (801d7d4 <_vfiprintf_r+0x224>)
 801d670:	2205      	movs	r2, #5
 801d672:	0018      	movs	r0, r3
 801d674:	7829      	ldrb	r1, [r5, #0]
 801d676:	9305      	str	r3, [sp, #20]
 801d678:	f7fd fe2d 	bl	801b2d6 <memchr>
 801d67c:	1c6e      	adds	r6, r5, #1
 801d67e:	2800      	cmp	r0, #0
 801d680:	d11f      	bne.n	801d6c2 <_vfiprintf_r+0x112>
 801d682:	6822      	ldr	r2, [r4, #0]
 801d684:	06d3      	lsls	r3, r2, #27
 801d686:	d504      	bpl.n	801d692 <_vfiprintf_r+0xe2>
 801d688:	2353      	movs	r3, #83	@ 0x53
 801d68a:	a904      	add	r1, sp, #16
 801d68c:	185b      	adds	r3, r3, r1
 801d68e:	2120      	movs	r1, #32
 801d690:	7019      	strb	r1, [r3, #0]
 801d692:	0713      	lsls	r3, r2, #28
 801d694:	d504      	bpl.n	801d6a0 <_vfiprintf_r+0xf0>
 801d696:	2353      	movs	r3, #83	@ 0x53
 801d698:	a904      	add	r1, sp, #16
 801d69a:	185b      	adds	r3, r3, r1
 801d69c:	212b      	movs	r1, #43	@ 0x2b
 801d69e:	7019      	strb	r1, [r3, #0]
 801d6a0:	782b      	ldrb	r3, [r5, #0]
 801d6a2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d6a4:	d016      	beq.n	801d6d4 <_vfiprintf_r+0x124>
 801d6a6:	002e      	movs	r6, r5
 801d6a8:	2100      	movs	r1, #0
 801d6aa:	200a      	movs	r0, #10
 801d6ac:	68e3      	ldr	r3, [r4, #12]
 801d6ae:	7832      	ldrb	r2, [r6, #0]
 801d6b0:	1c75      	adds	r5, r6, #1
 801d6b2:	3a30      	subs	r2, #48	@ 0x30
 801d6b4:	2a09      	cmp	r2, #9
 801d6b6:	d950      	bls.n	801d75a <_vfiprintf_r+0x1aa>
 801d6b8:	2900      	cmp	r1, #0
 801d6ba:	d111      	bne.n	801d6e0 <_vfiprintf_r+0x130>
 801d6bc:	e017      	b.n	801d6ee <_vfiprintf_r+0x13e>
 801d6be:	3601      	adds	r6, #1
 801d6c0:	e7af      	b.n	801d622 <_vfiprintf_r+0x72>
 801d6c2:	9b05      	ldr	r3, [sp, #20]
 801d6c4:	6822      	ldr	r2, [r4, #0]
 801d6c6:	1ac0      	subs	r0, r0, r3
 801d6c8:	2301      	movs	r3, #1
 801d6ca:	4083      	lsls	r3, r0
 801d6cc:	4313      	orrs	r3, r2
 801d6ce:	0035      	movs	r5, r6
 801d6d0:	6023      	str	r3, [r4, #0]
 801d6d2:	e7cc      	b.n	801d66e <_vfiprintf_r+0xbe>
 801d6d4:	9b07      	ldr	r3, [sp, #28]
 801d6d6:	1d19      	adds	r1, r3, #4
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	9107      	str	r1, [sp, #28]
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	db01      	blt.n	801d6e4 <_vfiprintf_r+0x134>
 801d6e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d6e2:	e004      	b.n	801d6ee <_vfiprintf_r+0x13e>
 801d6e4:	425b      	negs	r3, r3
 801d6e6:	60e3      	str	r3, [r4, #12]
 801d6e8:	2302      	movs	r3, #2
 801d6ea:	4313      	orrs	r3, r2
 801d6ec:	6023      	str	r3, [r4, #0]
 801d6ee:	7833      	ldrb	r3, [r6, #0]
 801d6f0:	2b2e      	cmp	r3, #46	@ 0x2e
 801d6f2:	d10c      	bne.n	801d70e <_vfiprintf_r+0x15e>
 801d6f4:	7873      	ldrb	r3, [r6, #1]
 801d6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801d6f8:	d134      	bne.n	801d764 <_vfiprintf_r+0x1b4>
 801d6fa:	9b07      	ldr	r3, [sp, #28]
 801d6fc:	3602      	adds	r6, #2
 801d6fe:	1d1a      	adds	r2, r3, #4
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	9207      	str	r2, [sp, #28]
 801d704:	2b00      	cmp	r3, #0
 801d706:	da01      	bge.n	801d70c <_vfiprintf_r+0x15c>
 801d708:	2301      	movs	r3, #1
 801d70a:	425b      	negs	r3, r3
 801d70c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d70e:	4d32      	ldr	r5, [pc, #200]	@ (801d7d8 <_vfiprintf_r+0x228>)
 801d710:	2203      	movs	r2, #3
 801d712:	0028      	movs	r0, r5
 801d714:	7831      	ldrb	r1, [r6, #0]
 801d716:	f7fd fdde 	bl	801b2d6 <memchr>
 801d71a:	2800      	cmp	r0, #0
 801d71c:	d006      	beq.n	801d72c <_vfiprintf_r+0x17c>
 801d71e:	2340      	movs	r3, #64	@ 0x40
 801d720:	1b40      	subs	r0, r0, r5
 801d722:	4083      	lsls	r3, r0
 801d724:	6822      	ldr	r2, [r4, #0]
 801d726:	3601      	adds	r6, #1
 801d728:	4313      	orrs	r3, r2
 801d72a:	6023      	str	r3, [r4, #0]
 801d72c:	7831      	ldrb	r1, [r6, #0]
 801d72e:	2206      	movs	r2, #6
 801d730:	482a      	ldr	r0, [pc, #168]	@ (801d7dc <_vfiprintf_r+0x22c>)
 801d732:	1c75      	adds	r5, r6, #1
 801d734:	7621      	strb	r1, [r4, #24]
 801d736:	f7fd fdce 	bl	801b2d6 <memchr>
 801d73a:	2800      	cmp	r0, #0
 801d73c:	d040      	beq.n	801d7c0 <_vfiprintf_r+0x210>
 801d73e:	4b28      	ldr	r3, [pc, #160]	@ (801d7e0 <_vfiprintf_r+0x230>)
 801d740:	2b00      	cmp	r3, #0
 801d742:	d122      	bne.n	801d78a <_vfiprintf_r+0x1da>
 801d744:	2207      	movs	r2, #7
 801d746:	9b07      	ldr	r3, [sp, #28]
 801d748:	3307      	adds	r3, #7
 801d74a:	4393      	bics	r3, r2
 801d74c:	3308      	adds	r3, #8
 801d74e:	9307      	str	r3, [sp, #28]
 801d750:	6963      	ldr	r3, [r4, #20]
 801d752:	9a04      	ldr	r2, [sp, #16]
 801d754:	189b      	adds	r3, r3, r2
 801d756:	6163      	str	r3, [r4, #20]
 801d758:	e762      	b.n	801d620 <_vfiprintf_r+0x70>
 801d75a:	4343      	muls	r3, r0
 801d75c:	002e      	movs	r6, r5
 801d75e:	2101      	movs	r1, #1
 801d760:	189b      	adds	r3, r3, r2
 801d762:	e7a4      	b.n	801d6ae <_vfiprintf_r+0xfe>
 801d764:	2300      	movs	r3, #0
 801d766:	200a      	movs	r0, #10
 801d768:	0019      	movs	r1, r3
 801d76a:	3601      	adds	r6, #1
 801d76c:	6063      	str	r3, [r4, #4]
 801d76e:	7832      	ldrb	r2, [r6, #0]
 801d770:	1c75      	adds	r5, r6, #1
 801d772:	3a30      	subs	r2, #48	@ 0x30
 801d774:	2a09      	cmp	r2, #9
 801d776:	d903      	bls.n	801d780 <_vfiprintf_r+0x1d0>
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d0c8      	beq.n	801d70e <_vfiprintf_r+0x15e>
 801d77c:	9109      	str	r1, [sp, #36]	@ 0x24
 801d77e:	e7c6      	b.n	801d70e <_vfiprintf_r+0x15e>
 801d780:	4341      	muls	r1, r0
 801d782:	002e      	movs	r6, r5
 801d784:	2301      	movs	r3, #1
 801d786:	1889      	adds	r1, r1, r2
 801d788:	e7f1      	b.n	801d76e <_vfiprintf_r+0x1be>
 801d78a:	aa07      	add	r2, sp, #28
 801d78c:	9200      	str	r2, [sp, #0]
 801d78e:	0021      	movs	r1, r4
 801d790:	003a      	movs	r2, r7
 801d792:	4b14      	ldr	r3, [pc, #80]	@ (801d7e4 <_vfiprintf_r+0x234>)
 801d794:	9803      	ldr	r0, [sp, #12]
 801d796:	f7fc ff99 	bl	801a6cc <_printf_float>
 801d79a:	9004      	str	r0, [sp, #16]
 801d79c:	9b04      	ldr	r3, [sp, #16]
 801d79e:	3301      	adds	r3, #1
 801d7a0:	d1d6      	bne.n	801d750 <_vfiprintf_r+0x1a0>
 801d7a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d7a4:	07db      	lsls	r3, r3, #31
 801d7a6:	d405      	bmi.n	801d7b4 <_vfiprintf_r+0x204>
 801d7a8:	89bb      	ldrh	r3, [r7, #12]
 801d7aa:	059b      	lsls	r3, r3, #22
 801d7ac:	d402      	bmi.n	801d7b4 <_vfiprintf_r+0x204>
 801d7ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d7b0:	f7fd fd90 	bl	801b2d4 <__retarget_lock_release_recursive>
 801d7b4:	89bb      	ldrh	r3, [r7, #12]
 801d7b6:	065b      	lsls	r3, r3, #25
 801d7b8:	d500      	bpl.n	801d7bc <_vfiprintf_r+0x20c>
 801d7ba:	e71e      	b.n	801d5fa <_vfiprintf_r+0x4a>
 801d7bc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d7be:	e71e      	b.n	801d5fe <_vfiprintf_r+0x4e>
 801d7c0:	aa07      	add	r2, sp, #28
 801d7c2:	9200      	str	r2, [sp, #0]
 801d7c4:	0021      	movs	r1, r4
 801d7c6:	003a      	movs	r2, r7
 801d7c8:	4b06      	ldr	r3, [pc, #24]	@ (801d7e4 <_vfiprintf_r+0x234>)
 801d7ca:	9803      	ldr	r0, [sp, #12]
 801d7cc:	f7fd fa2c 	bl	801ac28 <_printf_i>
 801d7d0:	e7e3      	b.n	801d79a <_vfiprintf_r+0x1ea>
 801d7d2:	46c0      	nop			@ (mov r8, r8)
 801d7d4:	0801fbd1 	.word	0x0801fbd1
 801d7d8:	0801fbd7 	.word	0x0801fbd7
 801d7dc:	0801fbdb 	.word	0x0801fbdb
 801d7e0:	0801a6cd 	.word	0x0801a6cd
 801d7e4:	0801d58b 	.word	0x0801d58b

0801d7e8 <__sflush_r>:
 801d7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d7ea:	220c      	movs	r2, #12
 801d7ec:	5e8b      	ldrsh	r3, [r1, r2]
 801d7ee:	0005      	movs	r5, r0
 801d7f0:	000c      	movs	r4, r1
 801d7f2:	071a      	lsls	r2, r3, #28
 801d7f4:	d456      	bmi.n	801d8a4 <__sflush_r+0xbc>
 801d7f6:	684a      	ldr	r2, [r1, #4]
 801d7f8:	2a00      	cmp	r2, #0
 801d7fa:	dc02      	bgt.n	801d802 <__sflush_r+0x1a>
 801d7fc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801d7fe:	2a00      	cmp	r2, #0
 801d800:	dd4e      	ble.n	801d8a0 <__sflush_r+0xb8>
 801d802:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801d804:	2f00      	cmp	r7, #0
 801d806:	d04b      	beq.n	801d8a0 <__sflush_r+0xb8>
 801d808:	2200      	movs	r2, #0
 801d80a:	2080      	movs	r0, #128	@ 0x80
 801d80c:	682e      	ldr	r6, [r5, #0]
 801d80e:	602a      	str	r2, [r5, #0]
 801d810:	001a      	movs	r2, r3
 801d812:	0140      	lsls	r0, r0, #5
 801d814:	6a21      	ldr	r1, [r4, #32]
 801d816:	4002      	ands	r2, r0
 801d818:	4203      	tst	r3, r0
 801d81a:	d033      	beq.n	801d884 <__sflush_r+0x9c>
 801d81c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d81e:	89a3      	ldrh	r3, [r4, #12]
 801d820:	075b      	lsls	r3, r3, #29
 801d822:	d506      	bpl.n	801d832 <__sflush_r+0x4a>
 801d824:	6863      	ldr	r3, [r4, #4]
 801d826:	1ad2      	subs	r2, r2, r3
 801d828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d001      	beq.n	801d832 <__sflush_r+0x4a>
 801d82e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d830:	1ad2      	subs	r2, r2, r3
 801d832:	2300      	movs	r3, #0
 801d834:	0028      	movs	r0, r5
 801d836:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801d838:	6a21      	ldr	r1, [r4, #32]
 801d83a:	47b8      	blx	r7
 801d83c:	89a2      	ldrh	r2, [r4, #12]
 801d83e:	1c43      	adds	r3, r0, #1
 801d840:	d106      	bne.n	801d850 <__sflush_r+0x68>
 801d842:	6829      	ldr	r1, [r5, #0]
 801d844:	291d      	cmp	r1, #29
 801d846:	d846      	bhi.n	801d8d6 <__sflush_r+0xee>
 801d848:	4b29      	ldr	r3, [pc, #164]	@ (801d8f0 <__sflush_r+0x108>)
 801d84a:	410b      	asrs	r3, r1
 801d84c:	07db      	lsls	r3, r3, #31
 801d84e:	d442      	bmi.n	801d8d6 <__sflush_r+0xee>
 801d850:	2300      	movs	r3, #0
 801d852:	6063      	str	r3, [r4, #4]
 801d854:	6923      	ldr	r3, [r4, #16]
 801d856:	6023      	str	r3, [r4, #0]
 801d858:	04d2      	lsls	r2, r2, #19
 801d85a:	d505      	bpl.n	801d868 <__sflush_r+0x80>
 801d85c:	1c43      	adds	r3, r0, #1
 801d85e:	d102      	bne.n	801d866 <__sflush_r+0x7e>
 801d860:	682b      	ldr	r3, [r5, #0]
 801d862:	2b00      	cmp	r3, #0
 801d864:	d100      	bne.n	801d868 <__sflush_r+0x80>
 801d866:	6560      	str	r0, [r4, #84]	@ 0x54
 801d868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d86a:	602e      	str	r6, [r5, #0]
 801d86c:	2900      	cmp	r1, #0
 801d86e:	d017      	beq.n	801d8a0 <__sflush_r+0xb8>
 801d870:	0023      	movs	r3, r4
 801d872:	3344      	adds	r3, #68	@ 0x44
 801d874:	4299      	cmp	r1, r3
 801d876:	d002      	beq.n	801d87e <__sflush_r+0x96>
 801d878:	0028      	movs	r0, r5
 801d87a:	f7fe fbc9 	bl	801c010 <_free_r>
 801d87e:	2300      	movs	r3, #0
 801d880:	6363      	str	r3, [r4, #52]	@ 0x34
 801d882:	e00d      	b.n	801d8a0 <__sflush_r+0xb8>
 801d884:	2301      	movs	r3, #1
 801d886:	0028      	movs	r0, r5
 801d888:	47b8      	blx	r7
 801d88a:	0002      	movs	r2, r0
 801d88c:	1c43      	adds	r3, r0, #1
 801d88e:	d1c6      	bne.n	801d81e <__sflush_r+0x36>
 801d890:	682b      	ldr	r3, [r5, #0]
 801d892:	2b00      	cmp	r3, #0
 801d894:	d0c3      	beq.n	801d81e <__sflush_r+0x36>
 801d896:	2b1d      	cmp	r3, #29
 801d898:	d001      	beq.n	801d89e <__sflush_r+0xb6>
 801d89a:	2b16      	cmp	r3, #22
 801d89c:	d11a      	bne.n	801d8d4 <__sflush_r+0xec>
 801d89e:	602e      	str	r6, [r5, #0]
 801d8a0:	2000      	movs	r0, #0
 801d8a2:	e01e      	b.n	801d8e2 <__sflush_r+0xfa>
 801d8a4:	690e      	ldr	r6, [r1, #16]
 801d8a6:	2e00      	cmp	r6, #0
 801d8a8:	d0fa      	beq.n	801d8a0 <__sflush_r+0xb8>
 801d8aa:	680f      	ldr	r7, [r1, #0]
 801d8ac:	600e      	str	r6, [r1, #0]
 801d8ae:	1bba      	subs	r2, r7, r6
 801d8b0:	9201      	str	r2, [sp, #4]
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	079b      	lsls	r3, r3, #30
 801d8b6:	d100      	bne.n	801d8ba <__sflush_r+0xd2>
 801d8b8:	694a      	ldr	r2, [r1, #20]
 801d8ba:	60a2      	str	r2, [r4, #8]
 801d8bc:	9b01      	ldr	r3, [sp, #4]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	ddee      	ble.n	801d8a0 <__sflush_r+0xb8>
 801d8c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d8c4:	0032      	movs	r2, r6
 801d8c6:	001f      	movs	r7, r3
 801d8c8:	0028      	movs	r0, r5
 801d8ca:	9b01      	ldr	r3, [sp, #4]
 801d8cc:	6a21      	ldr	r1, [r4, #32]
 801d8ce:	47b8      	blx	r7
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	dc07      	bgt.n	801d8e4 <__sflush_r+0xfc>
 801d8d4:	89a2      	ldrh	r2, [r4, #12]
 801d8d6:	2340      	movs	r3, #64	@ 0x40
 801d8d8:	2001      	movs	r0, #1
 801d8da:	4313      	orrs	r3, r2
 801d8dc:	b21b      	sxth	r3, r3
 801d8de:	81a3      	strh	r3, [r4, #12]
 801d8e0:	4240      	negs	r0, r0
 801d8e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d8e4:	9b01      	ldr	r3, [sp, #4]
 801d8e6:	1836      	adds	r6, r6, r0
 801d8e8:	1a1b      	subs	r3, r3, r0
 801d8ea:	9301      	str	r3, [sp, #4]
 801d8ec:	e7e6      	b.n	801d8bc <__sflush_r+0xd4>
 801d8ee:	46c0      	nop			@ (mov r8, r8)
 801d8f0:	dfbffffe 	.word	0xdfbffffe

0801d8f4 <_fflush_r>:
 801d8f4:	690b      	ldr	r3, [r1, #16]
 801d8f6:	b570      	push	{r4, r5, r6, lr}
 801d8f8:	0005      	movs	r5, r0
 801d8fa:	000c      	movs	r4, r1
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d102      	bne.n	801d906 <_fflush_r+0x12>
 801d900:	2500      	movs	r5, #0
 801d902:	0028      	movs	r0, r5
 801d904:	bd70      	pop	{r4, r5, r6, pc}
 801d906:	2800      	cmp	r0, #0
 801d908:	d004      	beq.n	801d914 <_fflush_r+0x20>
 801d90a:	6a03      	ldr	r3, [r0, #32]
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d101      	bne.n	801d914 <_fflush_r+0x20>
 801d910:	f7fd fb28 	bl	801af64 <__sinit>
 801d914:	220c      	movs	r2, #12
 801d916:	5ea3      	ldrsh	r3, [r4, r2]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d0f1      	beq.n	801d900 <_fflush_r+0xc>
 801d91c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d91e:	07d2      	lsls	r2, r2, #31
 801d920:	d404      	bmi.n	801d92c <_fflush_r+0x38>
 801d922:	059b      	lsls	r3, r3, #22
 801d924:	d402      	bmi.n	801d92c <_fflush_r+0x38>
 801d926:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d928:	f7fd fcd3 	bl	801b2d2 <__retarget_lock_acquire_recursive>
 801d92c:	0028      	movs	r0, r5
 801d92e:	0021      	movs	r1, r4
 801d930:	f7ff ff5a 	bl	801d7e8 <__sflush_r>
 801d934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d936:	0005      	movs	r5, r0
 801d938:	07db      	lsls	r3, r3, #31
 801d93a:	d4e2      	bmi.n	801d902 <_fflush_r+0xe>
 801d93c:	89a3      	ldrh	r3, [r4, #12]
 801d93e:	059b      	lsls	r3, r3, #22
 801d940:	d4df      	bmi.n	801d902 <_fflush_r+0xe>
 801d942:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d944:	f7fd fcc6 	bl	801b2d4 <__retarget_lock_release_recursive>
 801d948:	e7db      	b.n	801d902 <_fflush_r+0xe>

0801d94a <__swbuf_r>:
 801d94a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d94c:	0006      	movs	r6, r0
 801d94e:	000d      	movs	r5, r1
 801d950:	0014      	movs	r4, r2
 801d952:	2800      	cmp	r0, #0
 801d954:	d004      	beq.n	801d960 <__swbuf_r+0x16>
 801d956:	6a03      	ldr	r3, [r0, #32]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d101      	bne.n	801d960 <__swbuf_r+0x16>
 801d95c:	f7fd fb02 	bl	801af64 <__sinit>
 801d960:	69a3      	ldr	r3, [r4, #24]
 801d962:	60a3      	str	r3, [r4, #8]
 801d964:	89a3      	ldrh	r3, [r4, #12]
 801d966:	071b      	lsls	r3, r3, #28
 801d968:	d502      	bpl.n	801d970 <__swbuf_r+0x26>
 801d96a:	6923      	ldr	r3, [r4, #16]
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d109      	bne.n	801d984 <__swbuf_r+0x3a>
 801d970:	0021      	movs	r1, r4
 801d972:	0030      	movs	r0, r6
 801d974:	f000 f82c 	bl	801d9d0 <__swsetup_r>
 801d978:	2800      	cmp	r0, #0
 801d97a:	d003      	beq.n	801d984 <__swbuf_r+0x3a>
 801d97c:	2501      	movs	r5, #1
 801d97e:	426d      	negs	r5, r5
 801d980:	0028      	movs	r0, r5
 801d982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d984:	6923      	ldr	r3, [r4, #16]
 801d986:	6820      	ldr	r0, [r4, #0]
 801d988:	b2ef      	uxtb	r7, r5
 801d98a:	1ac0      	subs	r0, r0, r3
 801d98c:	6963      	ldr	r3, [r4, #20]
 801d98e:	b2ed      	uxtb	r5, r5
 801d990:	4283      	cmp	r3, r0
 801d992:	dc05      	bgt.n	801d9a0 <__swbuf_r+0x56>
 801d994:	0021      	movs	r1, r4
 801d996:	0030      	movs	r0, r6
 801d998:	f7ff ffac 	bl	801d8f4 <_fflush_r>
 801d99c:	2800      	cmp	r0, #0
 801d99e:	d1ed      	bne.n	801d97c <__swbuf_r+0x32>
 801d9a0:	68a3      	ldr	r3, [r4, #8]
 801d9a2:	3001      	adds	r0, #1
 801d9a4:	3b01      	subs	r3, #1
 801d9a6:	60a3      	str	r3, [r4, #8]
 801d9a8:	6823      	ldr	r3, [r4, #0]
 801d9aa:	1c5a      	adds	r2, r3, #1
 801d9ac:	6022      	str	r2, [r4, #0]
 801d9ae:	701f      	strb	r7, [r3, #0]
 801d9b0:	6963      	ldr	r3, [r4, #20]
 801d9b2:	4283      	cmp	r3, r0
 801d9b4:	d004      	beq.n	801d9c0 <__swbuf_r+0x76>
 801d9b6:	89a3      	ldrh	r3, [r4, #12]
 801d9b8:	07db      	lsls	r3, r3, #31
 801d9ba:	d5e1      	bpl.n	801d980 <__swbuf_r+0x36>
 801d9bc:	2d0a      	cmp	r5, #10
 801d9be:	d1df      	bne.n	801d980 <__swbuf_r+0x36>
 801d9c0:	0021      	movs	r1, r4
 801d9c2:	0030      	movs	r0, r6
 801d9c4:	f7ff ff96 	bl	801d8f4 <_fflush_r>
 801d9c8:	2800      	cmp	r0, #0
 801d9ca:	d0d9      	beq.n	801d980 <__swbuf_r+0x36>
 801d9cc:	e7d6      	b.n	801d97c <__swbuf_r+0x32>
	...

0801d9d0 <__swsetup_r>:
 801d9d0:	4b2d      	ldr	r3, [pc, #180]	@ (801da88 <__swsetup_r+0xb8>)
 801d9d2:	b570      	push	{r4, r5, r6, lr}
 801d9d4:	0005      	movs	r5, r0
 801d9d6:	6818      	ldr	r0, [r3, #0]
 801d9d8:	000c      	movs	r4, r1
 801d9da:	2800      	cmp	r0, #0
 801d9dc:	d004      	beq.n	801d9e8 <__swsetup_r+0x18>
 801d9de:	6a03      	ldr	r3, [r0, #32]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d101      	bne.n	801d9e8 <__swsetup_r+0x18>
 801d9e4:	f7fd fabe 	bl	801af64 <__sinit>
 801d9e8:	230c      	movs	r3, #12
 801d9ea:	5ee2      	ldrsh	r2, [r4, r3]
 801d9ec:	0713      	lsls	r3, r2, #28
 801d9ee:	d423      	bmi.n	801da38 <__swsetup_r+0x68>
 801d9f0:	06d3      	lsls	r3, r2, #27
 801d9f2:	d407      	bmi.n	801da04 <__swsetup_r+0x34>
 801d9f4:	2309      	movs	r3, #9
 801d9f6:	602b      	str	r3, [r5, #0]
 801d9f8:	2340      	movs	r3, #64	@ 0x40
 801d9fa:	2001      	movs	r0, #1
 801d9fc:	4313      	orrs	r3, r2
 801d9fe:	81a3      	strh	r3, [r4, #12]
 801da00:	4240      	negs	r0, r0
 801da02:	e03a      	b.n	801da7a <__swsetup_r+0xaa>
 801da04:	0752      	lsls	r2, r2, #29
 801da06:	d513      	bpl.n	801da30 <__swsetup_r+0x60>
 801da08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da0a:	2900      	cmp	r1, #0
 801da0c:	d008      	beq.n	801da20 <__swsetup_r+0x50>
 801da0e:	0023      	movs	r3, r4
 801da10:	3344      	adds	r3, #68	@ 0x44
 801da12:	4299      	cmp	r1, r3
 801da14:	d002      	beq.n	801da1c <__swsetup_r+0x4c>
 801da16:	0028      	movs	r0, r5
 801da18:	f7fe fafa 	bl	801c010 <_free_r>
 801da1c:	2300      	movs	r3, #0
 801da1e:	6363      	str	r3, [r4, #52]	@ 0x34
 801da20:	2224      	movs	r2, #36	@ 0x24
 801da22:	89a3      	ldrh	r3, [r4, #12]
 801da24:	4393      	bics	r3, r2
 801da26:	81a3      	strh	r3, [r4, #12]
 801da28:	2300      	movs	r3, #0
 801da2a:	6063      	str	r3, [r4, #4]
 801da2c:	6923      	ldr	r3, [r4, #16]
 801da2e:	6023      	str	r3, [r4, #0]
 801da30:	2308      	movs	r3, #8
 801da32:	89a2      	ldrh	r2, [r4, #12]
 801da34:	4313      	orrs	r3, r2
 801da36:	81a3      	strh	r3, [r4, #12]
 801da38:	6923      	ldr	r3, [r4, #16]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d10b      	bne.n	801da56 <__swsetup_r+0x86>
 801da3e:	21a0      	movs	r1, #160	@ 0xa0
 801da40:	2280      	movs	r2, #128	@ 0x80
 801da42:	89a3      	ldrh	r3, [r4, #12]
 801da44:	0089      	lsls	r1, r1, #2
 801da46:	0092      	lsls	r2, r2, #2
 801da48:	400b      	ands	r3, r1
 801da4a:	4293      	cmp	r3, r2
 801da4c:	d003      	beq.n	801da56 <__swsetup_r+0x86>
 801da4e:	0021      	movs	r1, r4
 801da50:	0028      	movs	r0, r5
 801da52:	f000 f8f5 	bl	801dc40 <__smakebuf_r>
 801da56:	230c      	movs	r3, #12
 801da58:	5ee2      	ldrsh	r2, [r4, r3]
 801da5a:	2101      	movs	r1, #1
 801da5c:	0013      	movs	r3, r2
 801da5e:	400b      	ands	r3, r1
 801da60:	420a      	tst	r2, r1
 801da62:	d00b      	beq.n	801da7c <__swsetup_r+0xac>
 801da64:	2300      	movs	r3, #0
 801da66:	60a3      	str	r3, [r4, #8]
 801da68:	6963      	ldr	r3, [r4, #20]
 801da6a:	425b      	negs	r3, r3
 801da6c:	61a3      	str	r3, [r4, #24]
 801da6e:	2000      	movs	r0, #0
 801da70:	6923      	ldr	r3, [r4, #16]
 801da72:	4283      	cmp	r3, r0
 801da74:	d101      	bne.n	801da7a <__swsetup_r+0xaa>
 801da76:	0613      	lsls	r3, r2, #24
 801da78:	d4be      	bmi.n	801d9f8 <__swsetup_r+0x28>
 801da7a:	bd70      	pop	{r4, r5, r6, pc}
 801da7c:	0791      	lsls	r1, r2, #30
 801da7e:	d400      	bmi.n	801da82 <__swsetup_r+0xb2>
 801da80:	6963      	ldr	r3, [r4, #20]
 801da82:	60a3      	str	r3, [r4, #8]
 801da84:	e7f3      	b.n	801da6e <__swsetup_r+0x9e>
 801da86:	46c0      	nop			@ (mov r8, r8)
 801da88:	20000374 	.word	0x20000374

0801da8c <memmove>:
 801da8c:	b510      	push	{r4, lr}
 801da8e:	4288      	cmp	r0, r1
 801da90:	d806      	bhi.n	801daa0 <memmove+0x14>
 801da92:	2300      	movs	r3, #0
 801da94:	429a      	cmp	r2, r3
 801da96:	d008      	beq.n	801daaa <memmove+0x1e>
 801da98:	5ccc      	ldrb	r4, [r1, r3]
 801da9a:	54c4      	strb	r4, [r0, r3]
 801da9c:	3301      	adds	r3, #1
 801da9e:	e7f9      	b.n	801da94 <memmove+0x8>
 801daa0:	188b      	adds	r3, r1, r2
 801daa2:	4298      	cmp	r0, r3
 801daa4:	d2f5      	bcs.n	801da92 <memmove+0x6>
 801daa6:	3a01      	subs	r2, #1
 801daa8:	d200      	bcs.n	801daac <memmove+0x20>
 801daaa:	bd10      	pop	{r4, pc}
 801daac:	5c8b      	ldrb	r3, [r1, r2]
 801daae:	5483      	strb	r3, [r0, r2]
 801dab0:	e7f9      	b.n	801daa6 <memmove+0x1a>
	...

0801dab4 <_sbrk_r>:
 801dab4:	2300      	movs	r3, #0
 801dab6:	b570      	push	{r4, r5, r6, lr}
 801dab8:	4d06      	ldr	r5, [pc, #24]	@ (801dad4 <_sbrk_r+0x20>)
 801daba:	0004      	movs	r4, r0
 801dabc:	0008      	movs	r0, r1
 801dabe:	602b      	str	r3, [r5, #0]
 801dac0:	f7ec fd1e 	bl	800a500 <_sbrk>
 801dac4:	1c43      	adds	r3, r0, #1
 801dac6:	d103      	bne.n	801dad0 <_sbrk_r+0x1c>
 801dac8:	682b      	ldr	r3, [r5, #0]
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d000      	beq.n	801dad0 <_sbrk_r+0x1c>
 801dace:	6023      	str	r3, [r4, #0]
 801dad0:	bd70      	pop	{r4, r5, r6, pc}
 801dad2:	46c0      	nop			@ (mov r8, r8)
 801dad4:	2000383c 	.word	0x2000383c

0801dad8 <__assert_func>:
 801dad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801dada:	0014      	movs	r4, r2
 801dadc:	001a      	movs	r2, r3
 801dade:	4b09      	ldr	r3, [pc, #36]	@ (801db04 <__assert_func+0x2c>)
 801dae0:	0005      	movs	r5, r0
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	000e      	movs	r6, r1
 801dae6:	68d8      	ldr	r0, [r3, #12]
 801dae8:	4b07      	ldr	r3, [pc, #28]	@ (801db08 <__assert_func+0x30>)
 801daea:	2c00      	cmp	r4, #0
 801daec:	d101      	bne.n	801daf2 <__assert_func+0x1a>
 801daee:	4b07      	ldr	r3, [pc, #28]	@ (801db0c <__assert_func+0x34>)
 801daf0:	001c      	movs	r4, r3
 801daf2:	4907      	ldr	r1, [pc, #28]	@ (801db10 <__assert_func+0x38>)
 801daf4:	9301      	str	r3, [sp, #4]
 801daf6:	9402      	str	r4, [sp, #8]
 801daf8:	002b      	movs	r3, r5
 801dafa:	9600      	str	r6, [sp, #0]
 801dafc:	f000 f866 	bl	801dbcc <fiprintf>
 801db00:	f000 f904 	bl	801dd0c <abort>
 801db04:	20000374 	.word	0x20000374
 801db08:	0801fbe2 	.word	0x0801fbe2
 801db0c:	0801fc1d 	.word	0x0801fc1d
 801db10:	0801fbef 	.word	0x0801fbef

0801db14 <_calloc_r>:
 801db14:	b570      	push	{r4, r5, r6, lr}
 801db16:	0c0b      	lsrs	r3, r1, #16
 801db18:	0c15      	lsrs	r5, r2, #16
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d11e      	bne.n	801db5c <_calloc_r+0x48>
 801db1e:	2d00      	cmp	r5, #0
 801db20:	d10c      	bne.n	801db3c <_calloc_r+0x28>
 801db22:	b289      	uxth	r1, r1
 801db24:	b294      	uxth	r4, r2
 801db26:	434c      	muls	r4, r1
 801db28:	0021      	movs	r1, r4
 801db2a:	f7fe fe41 	bl	801c7b0 <_malloc_r>
 801db2e:	1e05      	subs	r5, r0, #0
 801db30:	d01a      	beq.n	801db68 <_calloc_r+0x54>
 801db32:	0022      	movs	r2, r4
 801db34:	2100      	movs	r1, #0
 801db36:	f7fd fafd 	bl	801b134 <memset>
 801db3a:	e016      	b.n	801db6a <_calloc_r+0x56>
 801db3c:	1c2b      	adds	r3, r5, #0
 801db3e:	1c0c      	adds	r4, r1, #0
 801db40:	b289      	uxth	r1, r1
 801db42:	b292      	uxth	r2, r2
 801db44:	434a      	muls	r2, r1
 801db46:	b29b      	uxth	r3, r3
 801db48:	b2a1      	uxth	r1, r4
 801db4a:	4359      	muls	r1, r3
 801db4c:	0c14      	lsrs	r4, r2, #16
 801db4e:	190c      	adds	r4, r1, r4
 801db50:	0c23      	lsrs	r3, r4, #16
 801db52:	d107      	bne.n	801db64 <_calloc_r+0x50>
 801db54:	0424      	lsls	r4, r4, #16
 801db56:	b292      	uxth	r2, r2
 801db58:	4314      	orrs	r4, r2
 801db5a:	e7e5      	b.n	801db28 <_calloc_r+0x14>
 801db5c:	2d00      	cmp	r5, #0
 801db5e:	d101      	bne.n	801db64 <_calloc_r+0x50>
 801db60:	1c14      	adds	r4, r2, #0
 801db62:	e7ed      	b.n	801db40 <_calloc_r+0x2c>
 801db64:	230c      	movs	r3, #12
 801db66:	6003      	str	r3, [r0, #0]
 801db68:	2500      	movs	r5, #0
 801db6a:	0028      	movs	r0, r5
 801db6c:	bd70      	pop	{r4, r5, r6, pc}

0801db6e <_realloc_r>:
 801db6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db70:	0006      	movs	r6, r0
 801db72:	000c      	movs	r4, r1
 801db74:	0015      	movs	r5, r2
 801db76:	2900      	cmp	r1, #0
 801db78:	d105      	bne.n	801db86 <_realloc_r+0x18>
 801db7a:	0011      	movs	r1, r2
 801db7c:	f7fe fe18 	bl	801c7b0 <_malloc_r>
 801db80:	0004      	movs	r4, r0
 801db82:	0020      	movs	r0, r4
 801db84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801db86:	2a00      	cmp	r2, #0
 801db88:	d103      	bne.n	801db92 <_realloc_r+0x24>
 801db8a:	f7fe fa41 	bl	801c010 <_free_r>
 801db8e:	2400      	movs	r4, #0
 801db90:	e7f7      	b.n	801db82 <_realloc_r+0x14>
 801db92:	f000 f8c2 	bl	801dd1a <_malloc_usable_size_r>
 801db96:	0007      	movs	r7, r0
 801db98:	4285      	cmp	r5, r0
 801db9a:	d802      	bhi.n	801dba2 <_realloc_r+0x34>
 801db9c:	0843      	lsrs	r3, r0, #1
 801db9e:	42ab      	cmp	r3, r5
 801dba0:	d3ef      	bcc.n	801db82 <_realloc_r+0x14>
 801dba2:	0029      	movs	r1, r5
 801dba4:	0030      	movs	r0, r6
 801dba6:	f7fe fe03 	bl	801c7b0 <_malloc_r>
 801dbaa:	9001      	str	r0, [sp, #4]
 801dbac:	2800      	cmp	r0, #0
 801dbae:	d0ee      	beq.n	801db8e <_realloc_r+0x20>
 801dbb0:	002a      	movs	r2, r5
 801dbb2:	42bd      	cmp	r5, r7
 801dbb4:	d900      	bls.n	801dbb8 <_realloc_r+0x4a>
 801dbb6:	003a      	movs	r2, r7
 801dbb8:	0021      	movs	r1, r4
 801dbba:	9801      	ldr	r0, [sp, #4]
 801dbbc:	f7fd fb96 	bl	801b2ec <memcpy>
 801dbc0:	0021      	movs	r1, r4
 801dbc2:	0030      	movs	r0, r6
 801dbc4:	f7fe fa24 	bl	801c010 <_free_r>
 801dbc8:	9c01      	ldr	r4, [sp, #4]
 801dbca:	e7da      	b.n	801db82 <_realloc_r+0x14>

0801dbcc <fiprintf>:
 801dbcc:	b40e      	push	{r1, r2, r3}
 801dbce:	b517      	push	{r0, r1, r2, r4, lr}
 801dbd0:	4c05      	ldr	r4, [pc, #20]	@ (801dbe8 <fiprintf+0x1c>)
 801dbd2:	ab05      	add	r3, sp, #20
 801dbd4:	cb04      	ldmia	r3!, {r2}
 801dbd6:	0001      	movs	r1, r0
 801dbd8:	6820      	ldr	r0, [r4, #0]
 801dbda:	9301      	str	r3, [sp, #4]
 801dbdc:	f7ff fce8 	bl	801d5b0 <_vfiprintf_r>
 801dbe0:	bc1e      	pop	{r1, r2, r3, r4}
 801dbe2:	bc08      	pop	{r3}
 801dbe4:	b003      	add	sp, #12
 801dbe6:	4718      	bx	r3
 801dbe8:	20000374 	.word	0x20000374

0801dbec <__swhatbuf_r>:
 801dbec:	b570      	push	{r4, r5, r6, lr}
 801dbee:	000e      	movs	r6, r1
 801dbf0:	001d      	movs	r5, r3
 801dbf2:	230e      	movs	r3, #14
 801dbf4:	5ec9      	ldrsh	r1, [r1, r3]
 801dbf6:	0014      	movs	r4, r2
 801dbf8:	b096      	sub	sp, #88	@ 0x58
 801dbfa:	2900      	cmp	r1, #0
 801dbfc:	da0c      	bge.n	801dc18 <__swhatbuf_r+0x2c>
 801dbfe:	89b2      	ldrh	r2, [r6, #12]
 801dc00:	2380      	movs	r3, #128	@ 0x80
 801dc02:	0011      	movs	r1, r2
 801dc04:	4019      	ands	r1, r3
 801dc06:	421a      	tst	r2, r3
 801dc08:	d114      	bne.n	801dc34 <__swhatbuf_r+0x48>
 801dc0a:	2380      	movs	r3, #128	@ 0x80
 801dc0c:	00db      	lsls	r3, r3, #3
 801dc0e:	2000      	movs	r0, #0
 801dc10:	6029      	str	r1, [r5, #0]
 801dc12:	6023      	str	r3, [r4, #0]
 801dc14:	b016      	add	sp, #88	@ 0x58
 801dc16:	bd70      	pop	{r4, r5, r6, pc}
 801dc18:	466a      	mov	r2, sp
 801dc1a:	f000 f853 	bl	801dcc4 <_fstat_r>
 801dc1e:	2800      	cmp	r0, #0
 801dc20:	dbed      	blt.n	801dbfe <__swhatbuf_r+0x12>
 801dc22:	23f0      	movs	r3, #240	@ 0xf0
 801dc24:	9901      	ldr	r1, [sp, #4]
 801dc26:	021b      	lsls	r3, r3, #8
 801dc28:	4019      	ands	r1, r3
 801dc2a:	4b04      	ldr	r3, [pc, #16]	@ (801dc3c <__swhatbuf_r+0x50>)
 801dc2c:	18c9      	adds	r1, r1, r3
 801dc2e:	424b      	negs	r3, r1
 801dc30:	4159      	adcs	r1, r3
 801dc32:	e7ea      	b.n	801dc0a <__swhatbuf_r+0x1e>
 801dc34:	2100      	movs	r1, #0
 801dc36:	2340      	movs	r3, #64	@ 0x40
 801dc38:	e7e9      	b.n	801dc0e <__swhatbuf_r+0x22>
 801dc3a:	46c0      	nop			@ (mov r8, r8)
 801dc3c:	ffffe000 	.word	0xffffe000

0801dc40 <__smakebuf_r>:
 801dc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc42:	2602      	movs	r6, #2
 801dc44:	898b      	ldrh	r3, [r1, #12]
 801dc46:	0005      	movs	r5, r0
 801dc48:	000c      	movs	r4, r1
 801dc4a:	b085      	sub	sp, #20
 801dc4c:	4233      	tst	r3, r6
 801dc4e:	d007      	beq.n	801dc60 <__smakebuf_r+0x20>
 801dc50:	0023      	movs	r3, r4
 801dc52:	3347      	adds	r3, #71	@ 0x47
 801dc54:	6023      	str	r3, [r4, #0]
 801dc56:	6123      	str	r3, [r4, #16]
 801dc58:	2301      	movs	r3, #1
 801dc5a:	6163      	str	r3, [r4, #20]
 801dc5c:	b005      	add	sp, #20
 801dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc60:	ab03      	add	r3, sp, #12
 801dc62:	aa02      	add	r2, sp, #8
 801dc64:	f7ff ffc2 	bl	801dbec <__swhatbuf_r>
 801dc68:	9f02      	ldr	r7, [sp, #8]
 801dc6a:	9001      	str	r0, [sp, #4]
 801dc6c:	0039      	movs	r1, r7
 801dc6e:	0028      	movs	r0, r5
 801dc70:	f7fe fd9e 	bl	801c7b0 <_malloc_r>
 801dc74:	2800      	cmp	r0, #0
 801dc76:	d108      	bne.n	801dc8a <__smakebuf_r+0x4a>
 801dc78:	220c      	movs	r2, #12
 801dc7a:	5ea3      	ldrsh	r3, [r4, r2]
 801dc7c:	059a      	lsls	r2, r3, #22
 801dc7e:	d4ed      	bmi.n	801dc5c <__smakebuf_r+0x1c>
 801dc80:	2203      	movs	r2, #3
 801dc82:	4393      	bics	r3, r2
 801dc84:	431e      	orrs	r6, r3
 801dc86:	81a6      	strh	r6, [r4, #12]
 801dc88:	e7e2      	b.n	801dc50 <__smakebuf_r+0x10>
 801dc8a:	2380      	movs	r3, #128	@ 0x80
 801dc8c:	89a2      	ldrh	r2, [r4, #12]
 801dc8e:	6020      	str	r0, [r4, #0]
 801dc90:	4313      	orrs	r3, r2
 801dc92:	81a3      	strh	r3, [r4, #12]
 801dc94:	9b03      	ldr	r3, [sp, #12]
 801dc96:	6120      	str	r0, [r4, #16]
 801dc98:	6167      	str	r7, [r4, #20]
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d00c      	beq.n	801dcb8 <__smakebuf_r+0x78>
 801dc9e:	0028      	movs	r0, r5
 801dca0:	230e      	movs	r3, #14
 801dca2:	5ee1      	ldrsh	r1, [r4, r3]
 801dca4:	f000 f820 	bl	801dce8 <_isatty_r>
 801dca8:	2800      	cmp	r0, #0
 801dcaa:	d005      	beq.n	801dcb8 <__smakebuf_r+0x78>
 801dcac:	2303      	movs	r3, #3
 801dcae:	89a2      	ldrh	r2, [r4, #12]
 801dcb0:	439a      	bics	r2, r3
 801dcb2:	3b02      	subs	r3, #2
 801dcb4:	4313      	orrs	r3, r2
 801dcb6:	81a3      	strh	r3, [r4, #12]
 801dcb8:	89a3      	ldrh	r3, [r4, #12]
 801dcba:	9a01      	ldr	r2, [sp, #4]
 801dcbc:	4313      	orrs	r3, r2
 801dcbe:	81a3      	strh	r3, [r4, #12]
 801dcc0:	e7cc      	b.n	801dc5c <__smakebuf_r+0x1c>
	...

0801dcc4 <_fstat_r>:
 801dcc4:	2300      	movs	r3, #0
 801dcc6:	b570      	push	{r4, r5, r6, lr}
 801dcc8:	4d06      	ldr	r5, [pc, #24]	@ (801dce4 <_fstat_r+0x20>)
 801dcca:	0004      	movs	r4, r0
 801dccc:	0008      	movs	r0, r1
 801dcce:	0011      	movs	r1, r2
 801dcd0:	602b      	str	r3, [r5, #0]
 801dcd2:	f7ec fbf3 	bl	800a4bc <_fstat>
 801dcd6:	1c43      	adds	r3, r0, #1
 801dcd8:	d103      	bne.n	801dce2 <_fstat_r+0x1e>
 801dcda:	682b      	ldr	r3, [r5, #0]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d000      	beq.n	801dce2 <_fstat_r+0x1e>
 801dce0:	6023      	str	r3, [r4, #0]
 801dce2:	bd70      	pop	{r4, r5, r6, pc}
 801dce4:	2000383c 	.word	0x2000383c

0801dce8 <_isatty_r>:
 801dce8:	2300      	movs	r3, #0
 801dcea:	b570      	push	{r4, r5, r6, lr}
 801dcec:	4d06      	ldr	r5, [pc, #24]	@ (801dd08 <_isatty_r+0x20>)
 801dcee:	0004      	movs	r4, r0
 801dcf0:	0008      	movs	r0, r1
 801dcf2:	602b      	str	r3, [r5, #0]
 801dcf4:	f7ec fbf0 	bl	800a4d8 <_isatty>
 801dcf8:	1c43      	adds	r3, r0, #1
 801dcfa:	d103      	bne.n	801dd04 <_isatty_r+0x1c>
 801dcfc:	682b      	ldr	r3, [r5, #0]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d000      	beq.n	801dd04 <_isatty_r+0x1c>
 801dd02:	6023      	str	r3, [r4, #0]
 801dd04:	bd70      	pop	{r4, r5, r6, pc}
 801dd06:	46c0      	nop			@ (mov r8, r8)
 801dd08:	2000383c 	.word	0x2000383c

0801dd0c <abort>:
 801dd0c:	2006      	movs	r0, #6
 801dd0e:	b510      	push	{r4, lr}
 801dd10:	f000 f834 	bl	801dd7c <raise>
 801dd14:	2001      	movs	r0, #1
 801dd16:	f7ec fb9d 	bl	800a454 <_exit>

0801dd1a <_malloc_usable_size_r>:
 801dd1a:	1f0b      	subs	r3, r1, #4
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	1f18      	subs	r0, r3, #4
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	da01      	bge.n	801dd28 <_malloc_usable_size_r+0xe>
 801dd24:	580b      	ldr	r3, [r1, r0]
 801dd26:	18c0      	adds	r0, r0, r3
 801dd28:	4770      	bx	lr

0801dd2a <_raise_r>:
 801dd2a:	b570      	push	{r4, r5, r6, lr}
 801dd2c:	0004      	movs	r4, r0
 801dd2e:	000d      	movs	r5, r1
 801dd30:	291f      	cmp	r1, #31
 801dd32:	d904      	bls.n	801dd3e <_raise_r+0x14>
 801dd34:	2316      	movs	r3, #22
 801dd36:	6003      	str	r3, [r0, #0]
 801dd38:	2001      	movs	r0, #1
 801dd3a:	4240      	negs	r0, r0
 801dd3c:	bd70      	pop	{r4, r5, r6, pc}
 801dd3e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d004      	beq.n	801dd4e <_raise_r+0x24>
 801dd44:	008a      	lsls	r2, r1, #2
 801dd46:	189b      	adds	r3, r3, r2
 801dd48:	681a      	ldr	r2, [r3, #0]
 801dd4a:	2a00      	cmp	r2, #0
 801dd4c:	d108      	bne.n	801dd60 <_raise_r+0x36>
 801dd4e:	0020      	movs	r0, r4
 801dd50:	f000 f830 	bl	801ddb4 <_getpid_r>
 801dd54:	002a      	movs	r2, r5
 801dd56:	0001      	movs	r1, r0
 801dd58:	0020      	movs	r0, r4
 801dd5a:	f000 f819 	bl	801dd90 <_kill_r>
 801dd5e:	e7ed      	b.n	801dd3c <_raise_r+0x12>
 801dd60:	2a01      	cmp	r2, #1
 801dd62:	d009      	beq.n	801dd78 <_raise_r+0x4e>
 801dd64:	1c51      	adds	r1, r2, #1
 801dd66:	d103      	bne.n	801dd70 <_raise_r+0x46>
 801dd68:	2316      	movs	r3, #22
 801dd6a:	6003      	str	r3, [r0, #0]
 801dd6c:	2001      	movs	r0, #1
 801dd6e:	e7e5      	b.n	801dd3c <_raise_r+0x12>
 801dd70:	2100      	movs	r1, #0
 801dd72:	0028      	movs	r0, r5
 801dd74:	6019      	str	r1, [r3, #0]
 801dd76:	4790      	blx	r2
 801dd78:	2000      	movs	r0, #0
 801dd7a:	e7df      	b.n	801dd3c <_raise_r+0x12>

0801dd7c <raise>:
 801dd7c:	b510      	push	{r4, lr}
 801dd7e:	4b03      	ldr	r3, [pc, #12]	@ (801dd8c <raise+0x10>)
 801dd80:	0001      	movs	r1, r0
 801dd82:	6818      	ldr	r0, [r3, #0]
 801dd84:	f7ff ffd1 	bl	801dd2a <_raise_r>
 801dd88:	bd10      	pop	{r4, pc}
 801dd8a:	46c0      	nop			@ (mov r8, r8)
 801dd8c:	20000374 	.word	0x20000374

0801dd90 <_kill_r>:
 801dd90:	2300      	movs	r3, #0
 801dd92:	b570      	push	{r4, r5, r6, lr}
 801dd94:	4d06      	ldr	r5, [pc, #24]	@ (801ddb0 <_kill_r+0x20>)
 801dd96:	0004      	movs	r4, r0
 801dd98:	0008      	movs	r0, r1
 801dd9a:	0011      	movs	r1, r2
 801dd9c:	602b      	str	r3, [r5, #0]
 801dd9e:	f7ec fb49 	bl	800a434 <_kill>
 801dda2:	1c43      	adds	r3, r0, #1
 801dda4:	d103      	bne.n	801ddae <_kill_r+0x1e>
 801dda6:	682b      	ldr	r3, [r5, #0]
 801dda8:	2b00      	cmp	r3, #0
 801ddaa:	d000      	beq.n	801ddae <_kill_r+0x1e>
 801ddac:	6023      	str	r3, [r4, #0]
 801ddae:	bd70      	pop	{r4, r5, r6, pc}
 801ddb0:	2000383c 	.word	0x2000383c

0801ddb4 <_getpid_r>:
 801ddb4:	b510      	push	{r4, lr}
 801ddb6:	f7ec fb37 	bl	800a428 <_getpid>
 801ddba:	bd10      	pop	{r4, pc}

0801ddbc <expf>:
 801ddbc:	b570      	push	{r4, r5, r6, lr}
 801ddbe:	1c04      	adds	r4, r0, #0
 801ddc0:	f000 f8e6 	bl	801df90 <__ieee754_expf>
 801ddc4:	1c05      	adds	r5, r0, #0
 801ddc6:	1c20      	adds	r0, r4, #0
 801ddc8:	f000 f83c 	bl	801de44 <finitef>
 801ddcc:	2800      	cmp	r0, #0
 801ddce:	d00b      	beq.n	801dde8 <expf+0x2c>
 801ddd0:	490c      	ldr	r1, [pc, #48]	@ (801de04 <expf+0x48>)
 801ddd2:	1c20      	adds	r0, r4, #0
 801ddd4:	f7e2 fbb6 	bl	8000544 <__aeabi_fcmpgt>
 801ddd8:	2800      	cmp	r0, #0
 801ddda:	d007      	beq.n	801ddec <expf+0x30>
 801dddc:	f7fd fa4e 	bl	801b27c <__errno>
 801dde0:	25ff      	movs	r5, #255	@ 0xff
 801dde2:	2322      	movs	r3, #34	@ 0x22
 801dde4:	05ed      	lsls	r5, r5, #23
 801dde6:	6003      	str	r3, [r0, #0]
 801dde8:	1c28      	adds	r0, r5, #0
 801ddea:	bd70      	pop	{r4, r5, r6, pc}
 801ddec:	4906      	ldr	r1, [pc, #24]	@ (801de08 <expf+0x4c>)
 801ddee:	1c20      	adds	r0, r4, #0
 801ddf0:	f7e2 fb94 	bl	800051c <__aeabi_fcmplt>
 801ddf4:	2800      	cmp	r0, #0
 801ddf6:	d0f7      	beq.n	801dde8 <expf+0x2c>
 801ddf8:	f7fd fa40 	bl	801b27c <__errno>
 801ddfc:	2322      	movs	r3, #34	@ 0x22
 801ddfe:	2500      	movs	r5, #0
 801de00:	6003      	str	r3, [r0, #0]
 801de02:	e7f1      	b.n	801dde8 <expf+0x2c>
 801de04:	42b17217 	.word	0x42b17217
 801de08:	c2cff1b5 	.word	0xc2cff1b5

0801de0c <sqrtf>:
 801de0c:	b570      	push	{r4, r5, r6, lr}
 801de0e:	1c05      	adds	r5, r0, #0
 801de10:	f000 f822 	bl	801de58 <__ieee754_sqrtf>
 801de14:	1c29      	adds	r1, r5, #0
 801de16:	1c04      	adds	r4, r0, #0
 801de18:	1c28      	adds	r0, r5, #0
 801de1a:	f7e3 fb99 	bl	8001550 <__aeabi_fcmpun>
 801de1e:	2800      	cmp	r0, #0
 801de20:	d10e      	bne.n	801de40 <sqrtf+0x34>
 801de22:	2100      	movs	r1, #0
 801de24:	1c28      	adds	r0, r5, #0
 801de26:	f7e2 fb79 	bl	800051c <__aeabi_fcmplt>
 801de2a:	2800      	cmp	r0, #0
 801de2c:	d008      	beq.n	801de40 <sqrtf+0x34>
 801de2e:	f7fd fa25 	bl	801b27c <__errno>
 801de32:	2321      	movs	r3, #33	@ 0x21
 801de34:	2100      	movs	r1, #0
 801de36:	6003      	str	r3, [r0, #0]
 801de38:	1c08      	adds	r0, r1, #0
 801de3a:	f7e2 fec1 	bl	8000bc0 <__aeabi_fdiv>
 801de3e:	1c04      	adds	r4, r0, #0
 801de40:	1c20      	adds	r0, r4, #0
 801de42:	bd70      	pop	{r4, r5, r6, pc}

0801de44 <finitef>:
 801de44:	22ff      	movs	r2, #255	@ 0xff
 801de46:	0043      	lsls	r3, r0, #1
 801de48:	085b      	lsrs	r3, r3, #1
 801de4a:	2001      	movs	r0, #1
 801de4c:	05d2      	lsls	r2, r2, #23
 801de4e:	4293      	cmp	r3, r2
 801de50:	db00      	blt.n	801de54 <finitef+0x10>
 801de52:	2000      	movs	r0, #0
 801de54:	4770      	bx	lr
	...

0801de58 <__ieee754_sqrtf>:
 801de58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801de5a:	0003      	movs	r3, r0
 801de5c:	0042      	lsls	r2, r0, #1
 801de5e:	1c04      	adds	r4, r0, #0
 801de60:	20ff      	movs	r0, #255	@ 0xff
 801de62:	0852      	lsrs	r2, r2, #1
 801de64:	05c0      	lsls	r0, r0, #23
 801de66:	4282      	cmp	r2, r0
 801de68:	d30a      	bcc.n	801de80 <__ieee754_sqrtf+0x28>
 801de6a:	1c21      	adds	r1, r4, #0
 801de6c:	1c20      	adds	r0, r4, #0
 801de6e:	f7e3 f88d 	bl	8000f8c <__aeabi_fmul>
 801de72:	1c01      	adds	r1, r0, #0
 801de74:	1c20      	adds	r0, r4, #0
 801de76:	f7e2 fd19 	bl	80008ac <__aeabi_fadd>
 801de7a:	1c04      	adds	r4, r0, #0
 801de7c:	1c20      	adds	r0, r4, #0
 801de7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801de80:	2a00      	cmp	r2, #0
 801de82:	d0fb      	beq.n	801de7c <__ieee754_sqrtf+0x24>
 801de84:	2c00      	cmp	r4, #0
 801de86:	da07      	bge.n	801de98 <__ieee754_sqrtf+0x40>
 801de88:	1c21      	adds	r1, r4, #0
 801de8a:	1c20      	adds	r0, r4, #0
 801de8c:	f7e3 f9bc 	bl	8001208 <__aeabi_fsub>
 801de90:	1c01      	adds	r1, r0, #0
 801de92:	f7e2 fe95 	bl	8000bc0 <__aeabi_fdiv>
 801de96:	e7f0      	b.n	801de7a <__ieee754_sqrtf+0x22>
 801de98:	0022      	movs	r2, r4
 801de9a:	15e1      	asrs	r1, r4, #23
 801de9c:	4002      	ands	r2, r0
 801de9e:	4204      	tst	r4, r0
 801dea0:	d046      	beq.n	801df30 <__ieee754_sqrtf+0xd8>
 801dea2:	2280      	movs	r2, #128	@ 0x80
 801dea4:	000f      	movs	r7, r1
 801dea6:	025b      	lsls	r3, r3, #9
 801dea8:	0a5b      	lsrs	r3, r3, #9
 801deaa:	0412      	lsls	r2, r2, #16
 801deac:	3f7f      	subs	r7, #127	@ 0x7f
 801deae:	4313      	orrs	r3, r2
 801deb0:	07c9      	lsls	r1, r1, #31
 801deb2:	d400      	bmi.n	801deb6 <__ieee754_sqrtf+0x5e>
 801deb4:	005b      	lsls	r3, r3, #1
 801deb6:	2400      	movs	r4, #0
 801deb8:	2180      	movs	r1, #128	@ 0x80
 801deba:	2019      	movs	r0, #25
 801debc:	0026      	movs	r6, r4
 801debe:	107f      	asrs	r7, r7, #1
 801dec0:	005b      	lsls	r3, r3, #1
 801dec2:	0449      	lsls	r1, r1, #17
 801dec4:	1875      	adds	r5, r6, r1
 801dec6:	001a      	movs	r2, r3
 801dec8:	429d      	cmp	r5, r3
 801deca:	dc02      	bgt.n	801ded2 <__ieee754_sqrtf+0x7a>
 801decc:	186e      	adds	r6, r5, r1
 801dece:	1b5a      	subs	r2, r3, r5
 801ded0:	1864      	adds	r4, r4, r1
 801ded2:	3801      	subs	r0, #1
 801ded4:	0053      	lsls	r3, r2, #1
 801ded6:	0849      	lsrs	r1, r1, #1
 801ded8:	2800      	cmp	r0, #0
 801deda:	d1f3      	bne.n	801dec4 <__ieee754_sqrtf+0x6c>
 801dedc:	2a00      	cmp	r2, #0
 801dede:	d019      	beq.n	801df14 <__ieee754_sqrtf+0xbc>
 801dee0:	4d17      	ldr	r5, [pc, #92]	@ (801df40 <__ieee754_sqrtf+0xe8>)
 801dee2:	4e18      	ldr	r6, [pc, #96]	@ (801df44 <__ieee754_sqrtf+0xec>)
 801dee4:	6828      	ldr	r0, [r5, #0]
 801dee6:	6831      	ldr	r1, [r6, #0]
 801dee8:	682b      	ldr	r3, [r5, #0]
 801deea:	9301      	str	r3, [sp, #4]
 801deec:	f7e3 f98c 	bl	8001208 <__aeabi_fsub>
 801def0:	1c01      	adds	r1, r0, #0
 801def2:	9801      	ldr	r0, [sp, #4]
 801def4:	f7e2 fb1c 	bl	8000530 <__aeabi_fcmple>
 801def8:	2800      	cmp	r0, #0
 801defa:	d00b      	beq.n	801df14 <__ieee754_sqrtf+0xbc>
 801defc:	6828      	ldr	r0, [r5, #0]
 801defe:	6831      	ldr	r1, [r6, #0]
 801df00:	f7e2 fcd4 	bl	80008ac <__aeabi_fadd>
 801df04:	682d      	ldr	r5, [r5, #0]
 801df06:	1c01      	adds	r1, r0, #0
 801df08:	1c28      	adds	r0, r5, #0
 801df0a:	f7e2 fb07 	bl	800051c <__aeabi_fcmplt>
 801df0e:	2800      	cmp	r0, #0
 801df10:	d011      	beq.n	801df36 <__ieee754_sqrtf+0xde>
 801df12:	3402      	adds	r4, #2
 801df14:	23fc      	movs	r3, #252	@ 0xfc
 801df16:	1064      	asrs	r4, r4, #1
 801df18:	059b      	lsls	r3, r3, #22
 801df1a:	18e3      	adds	r3, r4, r3
 801df1c:	05fc      	lsls	r4, r7, #23
 801df1e:	18e4      	adds	r4, r4, r3
 801df20:	e7ac      	b.n	801de7c <__ieee754_sqrtf+0x24>
 801df22:	005b      	lsls	r3, r3, #1
 801df24:	3201      	adds	r2, #1
 801df26:	4203      	tst	r3, r0
 801df28:	d0fb      	beq.n	801df22 <__ieee754_sqrtf+0xca>
 801df2a:	3a01      	subs	r2, #1
 801df2c:	1a89      	subs	r1, r1, r2
 801df2e:	e7b8      	b.n	801dea2 <__ieee754_sqrtf+0x4a>
 801df30:	2080      	movs	r0, #128	@ 0x80
 801df32:	0400      	lsls	r0, r0, #16
 801df34:	e7f7      	b.n	801df26 <__ieee754_sqrtf+0xce>
 801df36:	2301      	movs	r3, #1
 801df38:	3401      	adds	r4, #1
 801df3a:	439c      	bics	r4, r3
 801df3c:	e7ea      	b.n	801df14 <__ieee754_sqrtf+0xbc>
 801df3e:	46c0      	nop			@ (mov r8, r8)
 801df40:	200003c8 	.word	0x200003c8
 801df44:	200003c4 	.word	0x200003c4

0801df48 <roundf>:
 801df48:	0dc3      	lsrs	r3, r0, #23
 801df4a:	b2db      	uxtb	r3, r3
 801df4c:	3b7f      	subs	r3, #127	@ 0x7f
 801df4e:	0002      	movs	r2, r0
 801df50:	b510      	push	{r4, lr}
 801df52:	2b16      	cmp	r3, #22
 801df54:	dc13      	bgt.n	801df7e <roundf+0x36>
 801df56:	2b00      	cmp	r3, #0
 801df58:	da07      	bge.n	801df6a <roundf+0x22>
 801df5a:	0fc2      	lsrs	r2, r0, #31
 801df5c:	07d0      	lsls	r0, r2, #31
 801df5e:	3301      	adds	r3, #1
 801df60:	d102      	bne.n	801df68 <roundf+0x20>
 801df62:	23fe      	movs	r3, #254	@ 0xfe
 801df64:	059b      	lsls	r3, r3, #22
 801df66:	4318      	orrs	r0, r3
 801df68:	bd10      	pop	{r4, pc}
 801df6a:	4908      	ldr	r1, [pc, #32]	@ (801df8c <roundf+0x44>)
 801df6c:	4119      	asrs	r1, r3
 801df6e:	4208      	tst	r0, r1
 801df70:	d0fa      	beq.n	801df68 <roundf+0x20>
 801df72:	2080      	movs	r0, #128	@ 0x80
 801df74:	03c0      	lsls	r0, r0, #15
 801df76:	4118      	asrs	r0, r3
 801df78:	1880      	adds	r0, r0, r2
 801df7a:	4388      	bics	r0, r1
 801df7c:	e7f4      	b.n	801df68 <roundf+0x20>
 801df7e:	2b80      	cmp	r3, #128	@ 0x80
 801df80:	d1f2      	bne.n	801df68 <roundf+0x20>
 801df82:	1c01      	adds	r1, r0, #0
 801df84:	f7e2 fc92 	bl	80008ac <__aeabi_fadd>
 801df88:	e7ee      	b.n	801df68 <roundf+0x20>
 801df8a:	46c0      	nop			@ (mov r8, r8)
 801df8c:	007fffff 	.word	0x007fffff

0801df90 <__ieee754_expf>:
 801df90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801df92:	21ff      	movs	r1, #255	@ 0xff
 801df94:	0043      	lsls	r3, r0, #1
 801df96:	1c04      	adds	r4, r0, #0
 801df98:	085b      	lsrs	r3, r3, #1
 801df9a:	05c9      	lsls	r1, r1, #23
 801df9c:	428b      	cmp	r3, r1
 801df9e:	d904      	bls.n	801dfaa <__ieee754_expf+0x1a>
 801dfa0:	1c01      	adds	r1, r0, #0
 801dfa2:	1c20      	adds	r0, r4, #0
 801dfa4:	f7e2 fc82 	bl	80008ac <__aeabi_fadd>
 801dfa8:	e00d      	b.n	801dfc6 <__ieee754_expf+0x36>
 801dfaa:	0fc6      	lsrs	r6, r0, #31
 801dfac:	428b      	cmp	r3, r1
 801dfae:	d104      	bne.n	801dfba <__ieee754_expf+0x2a>
 801dfb0:	2e00      	cmp	r6, #0
 801dfb2:	d000      	beq.n	801dfb6 <__ieee754_expf+0x26>
 801dfb4:	e0ba      	b.n	801e12c <__ieee754_expf+0x19c>
 801dfb6:	1c20      	adds	r0, r4, #0
 801dfb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dfba:	495d      	ldr	r1, [pc, #372]	@ (801e130 <__ieee754_expf+0x1a0>)
 801dfbc:	4288      	cmp	r0, r1
 801dfbe:	dd04      	ble.n	801dfca <__ieee754_expf+0x3a>
 801dfc0:	2000      	movs	r0, #0
 801dfc2:	f000 f8f1 	bl	801e1a8 <__math_oflowf>
 801dfc6:	1c04      	adds	r4, r0, #0
 801dfc8:	e7f5      	b.n	801dfb6 <__ieee754_expf+0x26>
 801dfca:	2800      	cmp	r0, #0
 801dfcc:	da06      	bge.n	801dfdc <__ieee754_expf+0x4c>
 801dfce:	4a59      	ldr	r2, [pc, #356]	@ (801e134 <__ieee754_expf+0x1a4>)
 801dfd0:	4293      	cmp	r3, r2
 801dfd2:	d903      	bls.n	801dfdc <__ieee754_expf+0x4c>
 801dfd4:	2000      	movs	r0, #0
 801dfd6:	f000 f8e1 	bl	801e19c <__math_uflowf>
 801dfda:	e7f4      	b.n	801dfc6 <__ieee754_expf+0x36>
 801dfdc:	4a56      	ldr	r2, [pc, #344]	@ (801e138 <__ieee754_expf+0x1a8>)
 801dfde:	4293      	cmp	r3, r2
 801dfe0:	d96e      	bls.n	801e0c0 <__ieee754_expf+0x130>
 801dfe2:	4a56      	ldr	r2, [pc, #344]	@ (801e13c <__ieee754_expf+0x1ac>)
 801dfe4:	00b5      	lsls	r5, r6, #2
 801dfe6:	4293      	cmp	r3, r2
 801dfe8:	d84e      	bhi.n	801e088 <__ieee754_expf+0xf8>
 801dfea:	4b55      	ldr	r3, [pc, #340]	@ (801e140 <__ieee754_expf+0x1b0>)
 801dfec:	1c20      	adds	r0, r4, #0
 801dfee:	5959      	ldr	r1, [r3, r5]
 801dff0:	f7e3 f90a 	bl	8001208 <__aeabi_fsub>
 801dff4:	4b53      	ldr	r3, [pc, #332]	@ (801e144 <__ieee754_expf+0x1b4>)
 801dff6:	1c07      	adds	r7, r0, #0
 801dff8:	595b      	ldr	r3, [r3, r5]
 801dffa:	2501      	movs	r5, #1
 801dffc:	1bad      	subs	r5, r5, r6
 801dffe:	9300      	str	r3, [sp, #0]
 801e000:	1bad      	subs	r5, r5, r6
 801e002:	9900      	ldr	r1, [sp, #0]
 801e004:	1c38      	adds	r0, r7, #0
 801e006:	f7e3 f8ff 	bl	8001208 <__aeabi_fsub>
 801e00a:	1c04      	adds	r4, r0, #0
 801e00c:	1c21      	adds	r1, r4, #0
 801e00e:	1c20      	adds	r0, r4, #0
 801e010:	f7e2 ffbc 	bl	8000f8c <__aeabi_fmul>
 801e014:	494c      	ldr	r1, [pc, #304]	@ (801e148 <__ieee754_expf+0x1b8>)
 801e016:	1c06      	adds	r6, r0, #0
 801e018:	f7e2 ffb8 	bl	8000f8c <__aeabi_fmul>
 801e01c:	494b      	ldr	r1, [pc, #300]	@ (801e14c <__ieee754_expf+0x1bc>)
 801e01e:	f7e3 f8f3 	bl	8001208 <__aeabi_fsub>
 801e022:	1c31      	adds	r1, r6, #0
 801e024:	f7e2 ffb2 	bl	8000f8c <__aeabi_fmul>
 801e028:	4949      	ldr	r1, [pc, #292]	@ (801e150 <__ieee754_expf+0x1c0>)
 801e02a:	f7e2 fc3f 	bl	80008ac <__aeabi_fadd>
 801e02e:	1c31      	adds	r1, r6, #0
 801e030:	f7e2 ffac 	bl	8000f8c <__aeabi_fmul>
 801e034:	4947      	ldr	r1, [pc, #284]	@ (801e154 <__ieee754_expf+0x1c4>)
 801e036:	f7e3 f8e7 	bl	8001208 <__aeabi_fsub>
 801e03a:	1c31      	adds	r1, r6, #0
 801e03c:	f7e2 ffa6 	bl	8000f8c <__aeabi_fmul>
 801e040:	4945      	ldr	r1, [pc, #276]	@ (801e158 <__ieee754_expf+0x1c8>)
 801e042:	f7e2 fc33 	bl	80008ac <__aeabi_fadd>
 801e046:	1c31      	adds	r1, r6, #0
 801e048:	f7e2 ffa0 	bl	8000f8c <__aeabi_fmul>
 801e04c:	1c01      	adds	r1, r0, #0
 801e04e:	1c20      	adds	r0, r4, #0
 801e050:	f7e3 f8da 	bl	8001208 <__aeabi_fsub>
 801e054:	1c01      	adds	r1, r0, #0
 801e056:	1c06      	adds	r6, r0, #0
 801e058:	1c20      	adds	r0, r4, #0
 801e05a:	f7e2 ff97 	bl	8000f8c <__aeabi_fmul>
 801e05e:	9001      	str	r0, [sp, #4]
 801e060:	2d00      	cmp	r5, #0
 801e062:	d140      	bne.n	801e0e6 <__ieee754_expf+0x156>
 801e064:	2180      	movs	r1, #128	@ 0x80
 801e066:	1c30      	adds	r0, r6, #0
 801e068:	05c9      	lsls	r1, r1, #23
 801e06a:	f7e3 f8cd 	bl	8001208 <__aeabi_fsub>
 801e06e:	1c01      	adds	r1, r0, #0
 801e070:	9801      	ldr	r0, [sp, #4]
 801e072:	f7e2 fda5 	bl	8000bc0 <__aeabi_fdiv>
 801e076:	1c21      	adds	r1, r4, #0
 801e078:	f7e3 f8c6 	bl	8001208 <__aeabi_fsub>
 801e07c:	1c01      	adds	r1, r0, #0
 801e07e:	20fe      	movs	r0, #254	@ 0xfe
 801e080:	0580      	lsls	r0, r0, #22
 801e082:	f7e3 f8c1 	bl	8001208 <__aeabi_fsub>
 801e086:	e79e      	b.n	801dfc6 <__ieee754_expf+0x36>
 801e088:	4934      	ldr	r1, [pc, #208]	@ (801e15c <__ieee754_expf+0x1cc>)
 801e08a:	1c20      	adds	r0, r4, #0
 801e08c:	f7e2 ff7e 	bl	8000f8c <__aeabi_fmul>
 801e090:	4b33      	ldr	r3, [pc, #204]	@ (801e160 <__ieee754_expf+0x1d0>)
 801e092:	5959      	ldr	r1, [r3, r5]
 801e094:	f7e2 fc0a 	bl	80008ac <__aeabi_fadd>
 801e098:	f7e3 fa70 	bl	800157c <__aeabi_f2iz>
 801e09c:	0005      	movs	r5, r0
 801e09e:	f7e3 fa8d 	bl	80015bc <__aeabi_i2f>
 801e0a2:	4930      	ldr	r1, [pc, #192]	@ (801e164 <__ieee754_expf+0x1d4>)
 801e0a4:	1c06      	adds	r6, r0, #0
 801e0a6:	f7e2 ff71 	bl	8000f8c <__aeabi_fmul>
 801e0aa:	1c01      	adds	r1, r0, #0
 801e0ac:	1c20      	adds	r0, r4, #0
 801e0ae:	f7e3 f8ab 	bl	8001208 <__aeabi_fsub>
 801e0b2:	492d      	ldr	r1, [pc, #180]	@ (801e168 <__ieee754_expf+0x1d8>)
 801e0b4:	1c07      	adds	r7, r0, #0
 801e0b6:	1c30      	adds	r0, r6, #0
 801e0b8:	f7e2 ff68 	bl	8000f8c <__aeabi_fmul>
 801e0bc:	9000      	str	r0, [sp, #0]
 801e0be:	e7a0      	b.n	801e002 <__ieee754_expf+0x72>
 801e0c0:	22d0      	movs	r2, #208	@ 0xd0
 801e0c2:	0592      	lsls	r2, r2, #22
 801e0c4:	4293      	cmp	r3, r2
 801e0c6:	d20c      	bcs.n	801e0e2 <__ieee754_expf+0x152>
 801e0c8:	4928      	ldr	r1, [pc, #160]	@ (801e16c <__ieee754_expf+0x1dc>)
 801e0ca:	1c20      	adds	r0, r4, #0
 801e0cc:	f7e2 fbee 	bl	80008ac <__aeabi_fadd>
 801e0d0:	21fe      	movs	r1, #254	@ 0xfe
 801e0d2:	0589      	lsls	r1, r1, #22
 801e0d4:	f7e2 fa36 	bl	8000544 <__aeabi_fcmpgt>
 801e0d8:	1e05      	subs	r5, r0, #0
 801e0da:	d097      	beq.n	801e00c <__ieee754_expf+0x7c>
 801e0dc:	21fe      	movs	r1, #254	@ 0xfe
 801e0de:	0589      	lsls	r1, r1, #22
 801e0e0:	e75f      	b.n	801dfa2 <__ieee754_expf+0x12>
 801e0e2:	2500      	movs	r5, #0
 801e0e4:	e792      	b.n	801e00c <__ieee754_expf+0x7c>
 801e0e6:	2080      	movs	r0, #128	@ 0x80
 801e0e8:	1c31      	adds	r1, r6, #0
 801e0ea:	05c0      	lsls	r0, r0, #23
 801e0ec:	f7e3 f88c 	bl	8001208 <__aeabi_fsub>
 801e0f0:	1c01      	adds	r1, r0, #0
 801e0f2:	9801      	ldr	r0, [sp, #4]
 801e0f4:	f7e2 fd64 	bl	8000bc0 <__aeabi_fdiv>
 801e0f8:	1c01      	adds	r1, r0, #0
 801e0fa:	9800      	ldr	r0, [sp, #0]
 801e0fc:	f7e3 f884 	bl	8001208 <__aeabi_fsub>
 801e100:	1c39      	adds	r1, r7, #0
 801e102:	f7e3 f881 	bl	8001208 <__aeabi_fsub>
 801e106:	1c01      	adds	r1, r0, #0
 801e108:	20fe      	movs	r0, #254	@ 0xfe
 801e10a:	0580      	lsls	r0, r0, #22
 801e10c:	f7e3 f87c 	bl	8001208 <__aeabi_fsub>
 801e110:	002b      	movs	r3, r5
 801e112:	337d      	adds	r3, #125	@ 0x7d
 801e114:	db02      	blt.n	801e11c <__ieee754_expf+0x18c>
 801e116:	05ec      	lsls	r4, r5, #23
 801e118:	1824      	adds	r4, r4, r0
 801e11a:	e74c      	b.n	801dfb6 <__ieee754_expf+0x26>
 801e11c:	21d8      	movs	r1, #216	@ 0xd8
 801e11e:	3564      	adds	r5, #100	@ 0x64
 801e120:	05ed      	lsls	r5, r5, #23
 801e122:	1828      	adds	r0, r5, r0
 801e124:	0509      	lsls	r1, r1, #20
 801e126:	f7e2 ff31 	bl	8000f8c <__aeabi_fmul>
 801e12a:	e74c      	b.n	801dfc6 <__ieee754_expf+0x36>
 801e12c:	2400      	movs	r4, #0
 801e12e:	e742      	b.n	801dfb6 <__ieee754_expf+0x26>
 801e130:	42b17217 	.word	0x42b17217
 801e134:	42cff1b5 	.word	0x42cff1b5
 801e138:	3eb17218 	.word	0x3eb17218
 801e13c:	3f851591 	.word	0x3f851591
 801e140:	0801fc28 	.word	0x0801fc28
 801e144:	0801fc20 	.word	0x0801fc20
 801e148:	3331bb4c 	.word	0x3331bb4c
 801e14c:	35ddea0e 	.word	0x35ddea0e
 801e150:	388ab355 	.word	0x388ab355
 801e154:	3b360b61 	.word	0x3b360b61
 801e158:	3e2aaaab 	.word	0x3e2aaaab
 801e15c:	3fb8aa3b 	.word	0x3fb8aa3b
 801e160:	0801fc30 	.word	0x0801fc30
 801e164:	3f317180 	.word	0x3f317180
 801e168:	3717f7d1 	.word	0x3717f7d1
 801e16c:	7149f2ca 	.word	0x7149f2ca

0801e170 <with_errnof>:
 801e170:	b570      	push	{r4, r5, r6, lr}
 801e172:	000d      	movs	r5, r1
 801e174:	1c04      	adds	r4, r0, #0
 801e176:	f7fd f881 	bl	801b27c <__errno>
 801e17a:	6005      	str	r5, [r0, #0]
 801e17c:	1c20      	adds	r0, r4, #0
 801e17e:	bd70      	pop	{r4, r5, r6, pc}

0801e180 <xflowf>:
 801e180:	b510      	push	{r4, lr}
 801e182:	1c0b      	adds	r3, r1, #0
 801e184:	2800      	cmp	r0, #0
 801e186:	d002      	beq.n	801e18e <xflowf+0xe>
 801e188:	2380      	movs	r3, #128	@ 0x80
 801e18a:	061b      	lsls	r3, r3, #24
 801e18c:	18cb      	adds	r3, r1, r3
 801e18e:	1c18      	adds	r0, r3, #0
 801e190:	f7e2 fefc 	bl	8000f8c <__aeabi_fmul>
 801e194:	2122      	movs	r1, #34	@ 0x22
 801e196:	f7ff ffeb 	bl	801e170 <with_errnof>
 801e19a:	bd10      	pop	{r4, pc}

0801e19c <__math_uflowf>:
 801e19c:	2180      	movs	r1, #128	@ 0x80
 801e19e:	b510      	push	{r4, lr}
 801e1a0:	0549      	lsls	r1, r1, #21
 801e1a2:	f7ff ffed 	bl	801e180 <xflowf>
 801e1a6:	bd10      	pop	{r4, pc}

0801e1a8 <__math_oflowf>:
 801e1a8:	21e0      	movs	r1, #224	@ 0xe0
 801e1aa:	b510      	push	{r4, lr}
 801e1ac:	05c9      	lsls	r1, r1, #23
 801e1ae:	f7ff ffe7 	bl	801e180 <xflowf>
 801e1b2:	bd10      	pop	{r4, pc}

0801e1b4 <_init>:
 801e1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1b6:	46c0      	nop			@ (mov r8, r8)
 801e1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1ba:	bc08      	pop	{r3}
 801e1bc:	469e      	mov	lr, r3
 801e1be:	4770      	bx	lr

0801e1c0 <_fini>:
 801e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1c2:	46c0      	nop			@ (mov r8, r8)
 801e1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1c6:	bc08      	pop	{r3}
 801e1c8:	469e      	mov	lr, r3
 801e1ca:	4770      	bx	lr
