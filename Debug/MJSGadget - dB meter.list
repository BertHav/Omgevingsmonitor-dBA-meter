
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ecbc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cf0  0801ed80  0801ed80  0001fd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020a70  08020a70  00022424  2**0
                  CONTENTS
  4 .ARM          00000008  08020a70  08020a70  00021a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020a78  08020a78  00022424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020a78  08020a78  00021a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020a7c  08020a7c  00021a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08020a80  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003484  20000424  08020ea4  00022424  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200038a8  08020ea4  000228a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00022424  2**0
                  CONTENTS, READONLY
 12 .debug_info   000318aa  00000000  00000000  0002244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008f82  00000000  00000000  00053cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c8  00000000  00000000  0005cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d49  00000000  00000000  0005f440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002237d  00000000  00000000  00061189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f35c  00000000  00000000  00083506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f32d  00000000  00000000  000c2862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00161b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1a8  00000000  00000000  00161c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0016be55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016e3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801ed64 	.word	0x0801ed64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	0801ed64 	.word	0x0801ed64

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0801fd24 	.word	0x0801fd24
 8000e0c:	0801fd64 	.word	0x0801fd64
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0801fda0 	.word	0x0801fda0
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f009 fafc 	bl	800cc60 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f009 fb53 	bl	800cd30 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f009 fb06 	bl	800ccbc <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f009 fa82 	bl	800cc60 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f009 fab1 	bl	800ccd8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f009 fa95 	bl	800ccbc <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037a0:	f002 fac2 	bl	8005d28 <ReadBatteryVoltage>
 80037a4:	1c02      	adds	r2, r0, #0
 80037a6:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <setCharges+0x20>)
 80037a8:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037aa:	f002 fb1f 	bl	8005dec <ReadSolarVoltage>
 80037ae:	1c02      	adds	r2, r0, #0
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <setCharges+0x24>)
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	46c0      	nop			@ (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	20000570 	.word	0x20000570
 80037c0:	20000574 	.word	0x20000574

080037c4 <checkEEprom>:
bool checkEEprom(){
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <checkEEprom+0x5c>)
 80037cc:	4815      	ldr	r0, [pc, #84]	@ (8003824 <checkEEprom+0x60>)
 80037ce:	220c      	movs	r2, #12
 80037d0:	0019      	movs	r1, r3
 80037d2:	f7ff ff91 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037d6:	1dfb      	adds	r3, r7, #7
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e00e      	b.n	80037fc <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003820 <checkEEprom+0x5c>)
 80037e4:	5cd3      	ldrb	r3, [r2, r3]
 80037e6:	001a      	movs	r2, r3
 80037e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003828 <checkEEprom+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	18d2      	adds	r2, r2, r3
 80037ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <checkEEprom+0x64>)
 80037f0:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	3201      	adds	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b0b      	cmp	r3, #11
 8003802:	d9ec      	bls.n	80037de <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <checkEEprom+0x64>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	425a      	negs	r2, r3
 800380a:	4153      	adcs	r3, r2
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <checkEEprom+0x68>)
 8003810:	701a      	strb	r2, [r3, #0]
  return test;
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <checkEEprom+0x68>)
 8003814:	781b      	ldrb	r3, [r3, #0]
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b002      	add	sp, #8
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	2000099c 	.word	0x2000099c
 8003824:	0808000c 	.word	0x0808000c
 8003828:	200009a8 	.word	0x200009a8
 800382c:	200009ac 	.word	0x200009ac

08003830 <checkName>:
bool checkName(){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <checkName+0x5c>)
 8003838:	4815      	ldr	r0, [pc, #84]	@ (8003890 <checkName+0x60>)
 800383a:	221e      	movs	r2, #30
 800383c:	0019      	movs	r1, r3
 800383e:	f7ff ff5b 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e00e      	b.n	8003868 <checkName+0x38>
    configSum += nameConfig[i];
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	4a0f      	ldr	r2, [pc, #60]	@ (800388c <checkName+0x5c>)
 8003850:	5cd3      	ldrb	r3, [r2, r3]
 8003852:	001a      	movs	r2, r3
 8003854:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <checkName+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	18d2      	adds	r2, r2, r3
 800385a:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <checkName+0x64>)
 800385c:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	1dfb      	adds	r3, r7, #7
 8003864:	3201      	adds	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b0b      	cmp	r3, #11
 800386e:	d9ec      	bls.n	800384a <checkName+0x1a>
  }
  test = (configSum != 0);
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <checkName+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1e5a      	subs	r2, r3, #1
 8003876:	4193      	sbcs	r3, r2
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <checkName+0x68>)
 800387c:	701a      	strb	r2, [r3, #0]
  return test;
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <checkName+0x68>)
 8003880:	781b      	ldrb	r3, [r3, #0]
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	200009b0 	.word	0x200009b0
 8003890:	08080090 	.word	0x08080090
 8003894:	200009d0 	.word	0x200009d0
 8003898:	200009d4 	.word	0x200009d4

0800389c <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038a6:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <ESP_GetHT+0x20>)
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <ESP_GetHT+0x24>)
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	20000568 	.word	0x20000568
 80038c0:	2000056c 	.word	0x2000056c

080038c4 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	1dbb      	adds	r3, r7, #6
 80038d0:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <setMeasurement+0x2c>)
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <setMeasurement+0x30>)
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <setMeasurement+0x34>)
 80038e0:	1dba      	adds	r2, r7, #6
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	801a      	strh	r2, [r3, #0]
}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	20000568 	.word	0x20000568
 80038f4:	2000056c 	.word	0x2000056c
 80038f8:	20000578 	.word	0x20000578

080038fc <setMic>:
void setMic(float dB){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <setMic+0x18>)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	2000057c 	.word	0x2000057c

08003918 <SetConfigMode>:

void SetConfigMode(){
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 800391c:	4b02      	ldr	r3, [pc, #8]	@ (8003928 <SetConfigMode+0x10>)
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	2000054f 	.word	0x2000054f

0800392c <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003930:	f008 f9c0 	bl	800bcb4 <HAL_GetUIDw0>
 8003934:	0002      	movs	r2, r0
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <ESP_GetUID+0x28>)
 8003938:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800393a:	f008 f9c5 	bl	800bcc8 <HAL_GetUIDw1>
 800393e:	0002      	movs	r2, r0
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <ESP_GetUID+0x28>)
 8003942:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003944:	f008 f9ca 	bl	800bcdc <HAL_GetUIDw2>
 8003948:	0002      	movs	r2, r0
 800394a:	4b02      	ldr	r3, [pc, #8]	@ (8003954 <ESP_GetUID+0x28>)
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000554 	.word	0x20000554

08003958 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <ESP_Init+0x2c>)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <ESP_Init+0x30>)
 8003968:	2202      	movs	r2, #2
 800396a:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 800396c:	f7ff ffde 	bl	800392c <ESP_GetUID>
  beurs = checkEEprom();
 8003970:	f7ff ff28 	bl	80037c4 <checkEEprom>
 8003974:	0003      	movs	r3, r0
 8003976:	001a      	movs	r2, r3
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <ESP_Init+0x34>)
 800397a:	701a      	strb	r2, [r3, #0]
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000444 	.word	0x20000444
 8003988:	2000002c 	.word	0x2000002c
 800398c:	20000552 	.word	0x20000552

08003990 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	000a      	movs	r2, r1
 800399a:	1cbb      	adds	r3, r7, #2
 800399c:	801a      	strh	r2, [r3, #0]
  printf("ESP_Send: %s\r\n", command);
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <ESP_Send+0x54>)
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f018 f8e9 	bl	801bb7c <iprintf>
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80039aa:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <ESP_Send+0x58>)
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	250f      	movs	r5, #15
 80039b0:	197c      	adds	r4, r7, r5
 80039b2:	1cbb      	adds	r3, r7, #2
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0019      	movs	r1, r3
 80039ba:	f00f fdf3 	bl	80135a4 <HAL_UART_Transmit_DMA>
 80039be:	0003      	movs	r3, r0
 80039c0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039c2:	197b      	adds	r3, r7, r5
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <ESP_Send+0x4a>
    Debug("Error in HAL_UART_Transmit_DMA");
 80039ca:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <ESP_Send+0x5c>)
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Send+0x60>)
 80039ce:	0019      	movs	r1, r3
 80039d0:	2003      	movs	r0, #3
 80039d2:	f007 fd9f 	bl	800b514 <CreateLine>
    return false;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <ESP_Send+0x4c>
  }
  return true;
 80039da:	2301      	movs	r3, #1
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b004      	add	sp, #16
 80039e2:	bdb0      	pop	{r4, r5, r7, pc}
 80039e4:	0801ed80 	.word	0x0801ed80
 80039e8:	20000444 	.word	0x20000444
 80039ec:	0801ed90 	.word	0x0801ed90
 80039f0:	0801edb0 	.word	0x0801edb0

080039f4 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	000a      	movs	r2, r1
 80039fe:	1cbb      	adds	r3, r7, #2
 8003a00:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a02:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <ESP_Receive+0x5c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a08:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <ESP_Receive+0x60>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	250f      	movs	r5, #15
 8003a0e:	197c      	adds	r4, r7, r5
 8003a10:	1cbb      	adds	r3, r7, #2
 8003a12:	881a      	ldrh	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0019      	movs	r1, r3
 8003a18:	f00f fe54 	bl	80136c4 <HAL_UART_Receive_DMA>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a20:	197b      	adds	r3, r7, r5
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <ESP_Receive+0x50>
    Debug("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Receive+0x60>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2284      	movs	r2, #132	@ 0x84
 8003a2e:	589b      	ldr	r3, [r3, r2]
 8003a30:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <ESP_Receive+0x64>)
 8003a32:	490a      	ldr	r1, [pc, #40]	@ (8003a5c <ESP_Receive+0x68>)
 8003a34:	2003      	movs	r0, #3
 8003a36:	f007 fd6d 	bl	800b514 <CreateLine>
    RxComplete = true;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <ESP_Receive+0x5c>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
    return false;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <ESP_Receive+0x52>
  }
  return true;
 8003a44:	2301      	movs	r3, #1
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	20000448 	.word	0x20000448
 8003a54:	20000444 	.word	0x20000444
 8003a58:	0801edb4 	.word	0x0801edb4
 8003a5c:	0801edb0 	.word	0x0801edb0

08003a60 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_UART_ErrorCallback+0x2c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d107      	bne.n	8003a82 <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2284      	movs	r2, #132	@ 0x84
 8003a76:	589b      	ldr	r3, [r3, r2]
 8003a78:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <HAL_UART_ErrorCallback+0x30>)
 8003a7a:	4906      	ldr	r1, [pc, #24]	@ (8003a94 <HAL_UART_ErrorCallback+0x34>)
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	f007 fd49 	bl	800b514 <CreateLine>
  }
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	20000444 	.word	0x20000444
 8003a90:	0801ede4 	.word	0x0801ede4
 8003a94:	0801edb0 	.word	0x0801edb0

08003a98 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e010      	b.n	8003aca <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	001a      	movs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1898      	adds	r0, r3, r2
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	001a      	movs	r2, r3
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <uint8ArrayToString+0x44>)
 8003abe:	0019      	movs	r1, r3
 8003ac0:	f018 f86c 	bl	801bb9c <siprintf>
  for (int i = 0; i < 12; i++)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b0b      	cmp	r3, #11
 8003ace:	ddeb      	ble.n	8003aa8 <uint8ArrayToString+0x10>
  }
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	0801ee10 	.word	0x0801ee10

08003ae0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b089      	sub	sp, #36	@ 0x24
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	701a      	strb	r2, [r3, #0]
  uint16_t messageLength = 0;
 8003aec:	230c      	movs	r3, #12
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	801a      	strh	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003af4:	4bb6      	ldr	r3, [pc, #728]	@ (8003dd0 <CreateMessage+0x2f0>)
 8003af6:	48b7      	ldr	r0, [pc, #732]	@ (8003dd4 <CreateMessage+0x2f4>)
 8003af8:	220c      	movs	r2, #12
 8003afa:	0019      	movs	r1, r3
 8003afc:	f7ff fdfc 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b00:	4bb5      	ldr	r3, [pc, #724]	@ (8003dd8 <CreateMessage+0x2f8>)
 8003b02:	48b6      	ldr	r0, [pc, #728]	@ (8003ddc <CreateMessage+0x2fc>)
 8003b04:	220c      	movs	r2, #12
 8003b06:	0019      	movs	r1, r3
 8003b08:	f7ff fdf6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b0c:	4bb4      	ldr	r3, [pc, #720]	@ (8003de0 <CreateMessage+0x300>)
 8003b0e:	48b5      	ldr	r0, [pc, #724]	@ (8003de4 <CreateMessage+0x304>)
 8003b10:	220c      	movs	r2, #12
 8003b12:	0019      	movs	r1, r3
 8003b14:	f7ff fdf0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b18:	4bb3      	ldr	r3, [pc, #716]	@ (8003de8 <CreateMessage+0x308>)
 8003b1a:	48b4      	ldr	r0, [pc, #720]	@ (8003dec <CreateMessage+0x30c>)
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7ff fdea 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b24:	4bb2      	ldr	r3, [pc, #712]	@ (8003df0 <CreateMessage+0x310>)
 8003b26:	48b3      	ldr	r0, [pc, #716]	@ (8003df4 <CreateMessage+0x314>)
 8003b28:	220c      	movs	r2, #12
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7ff fde4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b30:	4bb1      	ldr	r3, [pc, #708]	@ (8003df8 <CreateMessage+0x318>)
 8003b32:	48b2      	ldr	r0, [pc, #712]	@ (8003dfc <CreateMessage+0x31c>)
 8003b34:	220c      	movs	r2, #12
 8003b36:	0019      	movs	r1, r3
 8003b38:	f7ff fdde 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b3c:	f7ff fe78 	bl	8003830 <checkName>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d006      	beq.n	8003b52 <CreateMessage+0x72>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b44:	4bae      	ldr	r3, [pc, #696]	@ (8003e00 <CreateMessage+0x320>)
 8003b46:	48af      	ldr	r0, [pc, #700]	@ (8003e04 <CreateMessage+0x324>)
 8003b48:	221e      	movs	r2, #30
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	f7ff fdd4 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003b50:	e005      	b.n	8003b5e <CreateMessage+0x7e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b52:	4bab      	ldr	r3, [pc, #684]	@ (8003e00 <CreateMessage+0x320>)
 8003b54:	4aac      	ldr	r2, [pc, #688]	@ (8003e08 <CreateMessage+0x328>)
 8003b56:	6811      	ldr	r1, [r2, #0]
 8003b58:	6019      	str	r1, [r3, #0]
 8003b5a:	7912      	ldrb	r2, [r2, #4]
 8003b5c:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b5e:	f7ff fe1d 	bl	800379c <setCharges>

  memset(message, '\0', 1024);
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	00da      	lsls	r2, r3, #3
 8003b66:	4ba9      	ldr	r3, [pc, #676]	@ (8003e0c <CreateMessage+0x32c>)
 8003b68:	2100      	movs	r1, #0
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f018 f8ba 	bl	801bce4 <memset>
  uint16_t index = 0;
 8003b70:	260e      	movs	r6, #14
 8003b72:	19bb      	adds	r3, r7, r6
 8003b74:	2200      	movs	r2, #0
 8003b76:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b78:	19bb      	adds	r3, r7, r6
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	4ba3      	ldr	r3, [pc, #652]	@ (8003e0c <CreateMessage+0x32c>)
 8003b7e:	18d3      	adds	r3, r2, r3
 8003b80:	4aa3      	ldr	r2, [pc, #652]	@ (8003e10 <CreateMessage+0x330>)
 8003b82:	0011      	movs	r1, r2
 8003b84:	0018      	movs	r0, r3
 8003b86:	f018 f809 	bl	801bb9c <siprintf>
  index = strlen(message);
 8003b8a:	4ba0      	ldr	r3, [pc, #640]	@ (8003e0c <CreateMessage+0x32c>)
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7fc faed 	bl	800016c <strlen>
 8003b92:	0002      	movs	r2, r0
 8003b94:	19bb      	adds	r3, r7, r6
 8003b96:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003b98:	4a8d      	ldr	r2, [pc, #564]	@ (8003dd0 <CreateMessage+0x2f0>)
 8003b9a:	4b9e      	ldr	r3, [pc, #632]	@ (8003e14 <CreateMessage+0x334>)
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff ff7a 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003ba4:	19bb      	adds	r3, r7, r6
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	4b98      	ldr	r3, [pc, #608]	@ (8003e0c <CreateMessage+0x32c>)
 8003baa:	18d4      	adds	r4, r2, r3
 8003bac:	4b9a      	ldr	r3, [pc, #616]	@ (8003e18 <CreateMessage+0x338>)
 8003bae:	689d      	ldr	r5, [r3, #8]
 8003bb0:	4b9a      	ldr	r3, [pc, #616]	@ (8003e1c <CreateMessage+0x33c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1c18      	adds	r0, r3, #0
 8003bb6:	f7ff fc55 	bl	8003464 <__aeabi_f2d>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	000b      	movs	r3, r1
 8003bbe:	4890      	ldr	r0, [pc, #576]	@ (8003e00 <CreateMessage+0x320>)
 8003bc0:	4997      	ldr	r1, [pc, #604]	@ (8003e20 <CreateMessage+0x340>)
 8003bc2:	9202      	str	r2, [sp, #8]
 8003bc4:	9303      	str	r3, [sp, #12]
 8003bc6:	4b93      	ldr	r3, [pc, #588]	@ (8003e14 <CreateMessage+0x334>)
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	0003      	movs	r3, r0
 8003bcc:	002a      	movs	r2, r5
 8003bce:	0020      	movs	r0, r4
 8003bd0:	f017 ffe4 	bl	801bb9c <siprintf>
  index = strlen(message);
 8003bd4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e0c <CreateMessage+0x32c>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7fc fac8 	bl	800016c <strlen>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	19bb      	adds	r3, r7, r6
 8003be0:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003be2:	4a7d      	ldr	r2, [pc, #500]	@ (8003dd8 <CreateMessage+0x2f8>)
 8003be4:	4b8b      	ldr	r3, [pc, #556]	@ (8003e14 <CreateMessage+0x334>)
 8003be6:	0011      	movs	r1, r2
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7ff ff55 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003bee:	19bb      	adds	r3, r7, r6
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	4b86      	ldr	r3, [pc, #536]	@ (8003e0c <CreateMessage+0x32c>)
 8003bf4:	18d4      	adds	r4, r2, r3
 8003bf6:	4b88      	ldr	r3, [pc, #544]	@ (8003e18 <CreateMessage+0x338>)
 8003bf8:	689d      	ldr	r5, [r3, #8]
 8003bfa:	4b8a      	ldr	r3, [pc, #552]	@ (8003e24 <CreateMessage+0x344>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	1c18      	adds	r0, r3, #0
 8003c00:	f7ff fc30 	bl	8003464 <__aeabi_f2d>
 8003c04:	0002      	movs	r2, r0
 8003c06:	000b      	movs	r3, r1
 8003c08:	487d      	ldr	r0, [pc, #500]	@ (8003e00 <CreateMessage+0x320>)
 8003c0a:	4987      	ldr	r1, [pc, #540]	@ (8003e28 <CreateMessage+0x348>)
 8003c0c:	9202      	str	r2, [sp, #8]
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	4b80      	ldr	r3, [pc, #512]	@ (8003e14 <CreateMessage+0x334>)
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	0003      	movs	r3, r0
 8003c16:	002a      	movs	r2, r5
 8003c18:	0020      	movs	r0, r4
 8003c1a:	f017 ffbf 	bl	801bb9c <siprintf>
  index = strlen(message);
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e0c <CreateMessage+0x32c>)
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7fc faa3 	bl	800016c <strlen>
 8003c26:	0002      	movs	r2, r0
 8003c28:	19bb      	adds	r3, r7, r6
 8003c2a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c2c:	4a6c      	ldr	r2, [pc, #432]	@ (8003de0 <CreateMessage+0x300>)
 8003c2e:	4b79      	ldr	r3, [pc, #484]	@ (8003e14 <CreateMessage+0x334>)
 8003c30:	0011      	movs	r1, r2
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7ff ff30 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c38:	19bb      	adds	r3, r7, r6
 8003c3a:	881a      	ldrh	r2, [r3, #0]
 8003c3c:	4b73      	ldr	r3, [pc, #460]	@ (8003e0c <CreateMessage+0x32c>)
 8003c3e:	18d4      	adds	r4, r2, r3
 8003c40:	4b75      	ldr	r3, [pc, #468]	@ (8003e18 <CreateMessage+0x338>)
 8003c42:	689d      	ldr	r5, [r3, #8]
 8003c44:	4b79      	ldr	r3, [pc, #484]	@ (8003e2c <CreateMessage+0x34c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1c18      	adds	r0, r3, #0
 8003c4a:	f7ff fc0b 	bl	8003464 <__aeabi_f2d>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	000b      	movs	r3, r1
 8003c52:	486b      	ldr	r0, [pc, #428]	@ (8003e00 <CreateMessage+0x320>)
 8003c54:	4976      	ldr	r1, [pc, #472]	@ (8003e30 <CreateMessage+0x350>)
 8003c56:	9202      	str	r2, [sp, #8]
 8003c58:	9303      	str	r3, [sp, #12]
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e14 <CreateMessage+0x334>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	0003      	movs	r3, r0
 8003c60:	002a      	movs	r2, r5
 8003c62:	0020      	movs	r0, r4
 8003c64:	f017 ff9a 	bl	801bb9c <siprintf>
  index = strlen(message);
 8003c68:	4b68      	ldr	r3, [pc, #416]	@ (8003e0c <CreateMessage+0x32c>)
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f7fc fa7e 	bl	800016c <strlen>
 8003c70:	0002      	movs	r2, r0
 8003c72:	19bb      	adds	r3, r7, r6
 8003c74:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c76:	4a5c      	ldr	r2, [pc, #368]	@ (8003de8 <CreateMessage+0x308>)
 8003c78:	4b66      	ldr	r3, [pc, #408]	@ (8003e14 <CreateMessage+0x334>)
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7ff ff0b 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c82:	19bb      	adds	r3, r7, r6
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	4b61      	ldr	r3, [pc, #388]	@ (8003e0c <CreateMessage+0x32c>)
 8003c88:	18d0      	adds	r0, r2, r3
 8003c8a:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <CreateMessage+0x338>)
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	4b69      	ldr	r3, [pc, #420]	@ (8003e34 <CreateMessage+0x354>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	4c5b      	ldr	r4, [pc, #364]	@ (8003e00 <CreateMessage+0x320>)
 8003c94:	4968      	ldr	r1, [pc, #416]	@ (8003e38 <CreateMessage+0x358>)
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	4b5e      	ldr	r3, [pc, #376]	@ (8003e14 <CreateMessage+0x334>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0023      	movs	r3, r4
 8003c9e:	f017 ff7d 	bl	801bb9c <siprintf>
  index = strlen(message);
 8003ca2:	4b5a      	ldr	r3, [pc, #360]	@ (8003e0c <CreateMessage+0x32c>)
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fc fa61 	bl	800016c <strlen>
 8003caa:	0002      	movs	r2, r0
 8003cac:	19bb      	adds	r3, r7, r6
 8003cae:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4053      	eors	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04a      	beq.n	8003d54 <CreateMessage+0x274>
    uint8ArrayToString(Buffer, batteryConfig);
 8003cbe:	4a4c      	ldr	r2, [pc, #304]	@ (8003df0 <CreateMessage+0x310>)
 8003cc0:	4b54      	ldr	r3, [pc, #336]	@ (8003e14 <CreateMessage+0x334>)
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7ff fee7 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003cca:	19bb      	adds	r3, r7, r6
 8003ccc:	881a      	ldrh	r2, [r3, #0]
 8003cce:	4b4f      	ldr	r3, [pc, #316]	@ (8003e0c <CreateMessage+0x32c>)
 8003cd0:	18d4      	adds	r4, r2, r3
 8003cd2:	4b51      	ldr	r3, [pc, #324]	@ (8003e18 <CreateMessage+0x338>)
 8003cd4:	689d      	ldr	r5, [r3, #8]
 8003cd6:	4b59      	ldr	r3, [pc, #356]	@ (8003e3c <CreateMessage+0x35c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	1c18      	adds	r0, r3, #0
 8003cdc:	f7ff fbc2 	bl	8003464 <__aeabi_f2d>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	000b      	movs	r3, r1
 8003ce4:	4846      	ldr	r0, [pc, #280]	@ (8003e00 <CreateMessage+0x320>)
 8003ce6:	4956      	ldr	r1, [pc, #344]	@ (8003e40 <CreateMessage+0x360>)
 8003ce8:	9202      	str	r2, [sp, #8]
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	4b49      	ldr	r3, [pc, #292]	@ (8003e14 <CreateMessage+0x334>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	002a      	movs	r2, r5
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	f017 ff51 	bl	801bb9c <siprintf>
    index = strlen(message);
 8003cfa:	4b44      	ldr	r3, [pc, #272]	@ (8003e0c <CreateMessage+0x32c>)
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fc fa35 	bl	800016c <strlen>
 8003d02:	0002      	movs	r2, r0
 8003d04:	19bb      	adds	r3, r7, r6
 8003d06:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d08:	4a3b      	ldr	r2, [pc, #236]	@ (8003df8 <CreateMessage+0x318>)
 8003d0a:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <CreateMessage+0x334>)
 8003d0c:	0011      	movs	r1, r2
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7ff fec2 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d14:	19bb      	adds	r3, r7, r6
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	4b3c      	ldr	r3, [pc, #240]	@ (8003e0c <CreateMessage+0x32c>)
 8003d1a:	18d4      	adds	r4, r2, r3
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <CreateMessage+0x338>)
 8003d1e:	689d      	ldr	r5, [r3, #8]
 8003d20:	4b48      	ldr	r3, [pc, #288]	@ (8003e44 <CreateMessage+0x364>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	1c18      	adds	r0, r3, #0
 8003d26:	f7ff fb9d 	bl	8003464 <__aeabi_f2d>
 8003d2a:	0002      	movs	r2, r0
 8003d2c:	000b      	movs	r3, r1
 8003d2e:	4834      	ldr	r0, [pc, #208]	@ (8003e00 <CreateMessage+0x320>)
 8003d30:	4945      	ldr	r1, [pc, #276]	@ (8003e48 <CreateMessage+0x368>)
 8003d32:	9202      	str	r2, [sp, #8]
 8003d34:	9303      	str	r3, [sp, #12]
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <CreateMessage+0x334>)
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	002a      	movs	r2, r5
 8003d3e:	0020      	movs	r0, r4
 8003d40:	f017 ff2c 	bl	801bb9c <siprintf>
    index = strlen(message);
 8003d44:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <CreateMessage+0x32c>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7fc fa10 	bl	800016c <strlen>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	19bb      	adds	r3, r7, r6
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	e025      	b.n	8003da0 <CreateMessage+0x2c0>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d54:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <CreateMessage+0x310>)
 8003d56:	4b2f      	ldr	r3, [pc, #188]	@ (8003e14 <CreateMessage+0x334>)
 8003d58:	0011      	movs	r1, r2
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7ff fe9c 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d60:	260e      	movs	r6, #14
 8003d62:	19bb      	adds	r3, r7, r6
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	4b29      	ldr	r3, [pc, #164]	@ (8003e0c <CreateMessage+0x32c>)
 8003d68:	18d4      	adds	r4, r2, r3
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e18 <CreateMessage+0x338>)
 8003d6c:	689d      	ldr	r5, [r3, #8]
 8003d6e:	4b33      	ldr	r3, [pc, #204]	@ (8003e3c <CreateMessage+0x35c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7ff fb76 	bl	8003464 <__aeabi_f2d>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	000b      	movs	r3, r1
 8003d7c:	4820      	ldr	r0, [pc, #128]	@ (8003e00 <CreateMessage+0x320>)
 8003d7e:	4933      	ldr	r1, [pc, #204]	@ (8003e4c <CreateMessage+0x36c>)
 8003d80:	9202      	str	r2, [sp, #8]
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	4b23      	ldr	r3, [pc, #140]	@ (8003e14 <CreateMessage+0x334>)
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	0003      	movs	r3, r0
 8003d8a:	002a      	movs	r2, r5
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f017 ff05 	bl	801bb9c <siprintf>
    index = strlen(message);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <CreateMessage+0x32c>)
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fc f9e9 	bl	800016c <strlen>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	19bb      	adds	r3, r7, r6
 8003d9e:	801a      	strh	r2, [r3, #0]
  }

  index = sprintf(&message[index], "]");
 8003da0:	240e      	movs	r4, #14
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	881a      	ldrh	r2, [r3, #0]
 8003da6:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <CreateMessage+0x32c>)
 8003da8:	18d3      	adds	r3, r2, r3
 8003daa:	4a29      	ldr	r2, [pc, #164]	@ (8003e50 <CreateMessage+0x370>)
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f017 fef4 	bl	801bb9c <siprintf>
 8003db4:	0002      	movs	r2, r0
 8003db6:	193b      	adds	r3, r7, r4
 8003db8:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <CreateMessage+0x32c>)
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7fc f9d5 	bl	800016c <strlen>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	b29b      	uxth	r3, r3
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b005      	add	sp, #20
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	200009d8 	.word	0x200009d8
 8003dd4:	0808000c 	.word	0x0808000c
 8003dd8:	200009e4 	.word	0x200009e4
 8003ddc:	08080018 	.word	0x08080018
 8003de0:	200009f0 	.word	0x200009f0
 8003de4:	08080048 	.word	0x08080048
 8003de8:	200009fc 	.word	0x200009fc
 8003dec:	08080030 	.word	0x08080030
 8003df0:	20000a08 	.word	0x20000a08
 8003df4:	0808006c 	.word	0x0808006c
 8003df8:	20000a14 	.word	0x20000a14
 8003dfc:	08080078 	.word	0x08080078
 8003e00:	20000a20 	.word	0x20000a20
 8003e04:	08080090 	.word	0x08080090
 8003e08:	0801fdfc 	.word	0x0801fdfc
 8003e0c:	20000580 	.word	0x20000580
 8003e10:	0801ee18 	.word	0x0801ee18
 8003e14:	20000a40 	.word	0x20000a40
 8003e18:	20000554 	.word	0x20000554
 8003e1c:	20000568 	.word	0x20000568
 8003e20:	0801ee1c 	.word	0x0801ee1c
 8003e24:	2000056c 	.word	0x2000056c
 8003e28:	0801ee70 	.word	0x0801ee70
 8003e2c:	2000057c 	.word	0x2000057c
 8003e30:	0801eec8 	.word	0x0801eec8
 8003e34:	20000578 	.word	0x20000578
 8003e38:	0801ef20 	.word	0x0801ef20
 8003e3c:	20000570 	.word	0x20000570
 8003e40:	0801ef74 	.word	0x0801ef74
 8003e44:	20000574 	.word	0x20000574
 8003e48:	0801efd4 	.word	0x0801efd4
 8003e4c:	0801f030 	.word	0x0801f030
 8003e50:	0801f088 	.word	0x0801f088

08003e54 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e58:	2064      	movs	r0, #100	@ 0x64
 8003e5a:	f007 ff07 	bl	800bc6c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e5e:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <StartProg+0x60>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	2101      	movs	r1, #1
 8003e64:	0018      	movs	r0, r3
 8003e66:	f009 f956 	bl	800d116 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e6a:	2064      	movs	r0, #100	@ 0x64
 8003e6c:	f007 fefe 	bl	800bc6c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e70:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <StartProg+0x60>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	2102      	movs	r1, #2
 8003e76:	0018      	movs	r0, r3
 8003e78:	f009 f94d 	bl	800d116 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e7c:	23fa      	movs	r3, #250	@ 0xfa
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	0018      	movs	r0, r3
 8003e82:	f007 fef3 	bl	800bc6c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <StartProg+0x60>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f009 f942 	bl	800d116 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e92:	23fa      	movs	r3, #250	@ 0xfa
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	0018      	movs	r0, r3
 8003e98:	f007 fee8 	bl	800bc6c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <StartProg+0x60>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f009 f937 	bl	800d116 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ea8:	2028      	movs	r0, #40	@ 0x28
 8003eaa:	f007 fedf 	bl	800bc6c <HAL_Delay>
}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	50001c00 	.word	0x50001c00

08003eb8 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b0d7      	sub	sp, #348	@ 0x15c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	0008      	movs	r0, r1
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	4bc9      	ldr	r3, [pc, #804]	@ (80041ec <ParseBuffer+0x334>)
 8003ec6:	24ac      	movs	r4, #172	@ 0xac
 8003ec8:	0064      	lsls	r4, r4, #1
 8003eca:	191b      	adds	r3, r3, r4
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	1c02      	adds	r2, r0, #0
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	4bc7      	ldr	r3, [pc, #796]	@ (80041f0 <ParseBuffer+0x338>)
 8003ed4:	191b      	adds	r3, r3, r4
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	1c0a      	adds	r2, r1, #0
 8003eda:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	005a      	lsls	r2, r3, #1
 8003ee0:	2344      	movs	r3, #68	@ 0x44
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f017 fefc 	bl	801bce4 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003eec:	2358      	movs	r3, #88	@ 0x58
 8003eee:	33ff      	adds	r3, #255	@ 0xff
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003ef6:	23aa      	movs	r3, #170	@ 0xaa
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2200      	movs	r2, #0
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	e013      	b.n	8003f2a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8003f02:	20aa      	movs	r0, #170	@ 0xaa
 8003f04:	0040      	lsls	r0, r0, #1
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	18d2      	adds	r2, r2, r3
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	7811      	ldrb	r1, [r2, #0]
 8003f14:	4ab7      	ldr	r2, [pc, #732]	@ (80041f4 <ParseBuffer+0x33c>)
 8003f16:	24ac      	movs	r4, #172	@ 0xac
 8003f18:	0064      	lsls	r4, r4, #1
 8003f1a:	1912      	adds	r2, r2, r4
 8003f1c:	19d2      	adds	r2, r2, r7
 8003f1e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	183b      	adds	r3, r7, r0
 8003f26:	3201      	adds	r2, #1
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	23aa      	movs	r3, #170	@ 0xaa
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	18fa      	adds	r2, r7, r3
 8003f30:	4bae      	ldr	r3, [pc, #696]	@ (80041ec <ParseBuffer+0x334>)
 8003f32:	24ac      	movs	r4, #172	@ 0xac
 8003f34:	0064      	lsls	r4, r4, #1
 8003f36:	191b      	adds	r3, r3, r4
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d3df      	bcc.n	8003f02 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8003f42:	4baa      	ldr	r3, [pc, #680]	@ (80041ec <ParseBuffer+0x334>)
 8003f44:	191b      	adds	r3, r3, r4
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	4aaa      	ldr	r2, [pc, #680]	@ (80041f4 <ParseBuffer+0x33c>)
 8003f4c:	1912      	adds	r2, r2, r4
 8003f4e:	19d2      	adds	r2, r2, r7
 8003f50:	2100      	movs	r1, #0
 8003f52:	54d1      	strb	r1, [r2, r3]
  printf("Receive ParseBuffer: %s", tempBuf );
 8003f54:	2644      	movs	r6, #68	@ 0x44
 8003f56:	19ba      	adds	r2, r7, r6
 8003f58:	4ba7      	ldr	r3, [pc, #668]	@ (80041f8 <ParseBuffer+0x340>)
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f017 fe0d 	bl	801bb7c <iprintf>
  char * ParsePoint = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	22a8      	movs	r2, #168	@ 0xa8
 8003f66:	0052      	lsls	r2, r2, #1
 8003f68:	18b9      	adds	r1, r7, r2
 8003f6a:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f6c:	4ba3      	ldr	r3, [pc, #652]	@ (80041fc <ParseBuffer+0x344>)
 8003f6e:	0025      	movs	r5, r4
 8003f70:	195b      	adds	r3, r3, r5
 8003f72:	19db      	adds	r3, r3, r7
 8003f74:	4aa2      	ldr	r2, [pc, #648]	@ (8004200 <ParseBuffer+0x348>)
 8003f76:	8811      	ldrh	r1, [r2, #0]
 8003f78:	8019      	strh	r1, [r3, #0]
 8003f7a:	7892      	ldrb	r2, [r2, #2]
 8003f7c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f7e:	4ba1      	ldr	r3, [pc, #644]	@ (8004204 <ParseBuffer+0x34c>)
 8003f80:	195b      	adds	r3, r3, r5
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	4aa0      	ldr	r2, [pc, #640]	@ (8004208 <ParseBuffer+0x350>)
 8003f86:	6811      	ldr	r1, [r2, #0]
 8003f88:	6019      	str	r1, [r3, #0]
 8003f8a:	8892      	ldrh	r2, [r2, #4]
 8003f8c:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003f8e:	4b9f      	ldr	r3, [pc, #636]	@ (800420c <ParseBuffer+0x354>)
 8003f90:	195b      	adds	r3, r3, r5
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	4a9e      	ldr	r2, [pc, #632]	@ (8004210 <ParseBuffer+0x358>)
 8003f96:	6811      	ldr	r1, [r2, #0]
 8003f98:	6019      	str	r1, [r3, #0]
 8003f9a:	8892      	ldrh	r2, [r2, #4]
 8003f9c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003f9e:	4b9d      	ldr	r3, [pc, #628]	@ (8004214 <ParseBuffer+0x35c>)
 8003fa0:	195b      	adds	r3, r3, r5
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	223e      	movs	r2, #62	@ 0x3e
 8003fa6:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003fa8:	4b9b      	ldr	r3, [pc, #620]	@ (8004218 <ParseBuffer+0x360>)
 8003faa:	195b      	adds	r3, r3, r5
 8003fac:	19db      	adds	r3, r3, r7
 8003fae:	4a9b      	ldr	r2, [pc, #620]	@ (800421c <ParseBuffer+0x364>)
 8003fb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fb2:	c313      	stmia	r3!, {r0, r1, r4}
 8003fb4:	8811      	ldrh	r1, [r2, #0]
 8003fb6:	8019      	strh	r1, [r3, #0]
 8003fb8:	7892      	ldrb	r2, [r2, #2]
 8003fba:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8003fbc:	4b98      	ldr	r3, [pc, #608]	@ (8004220 <ParseBuffer+0x368>)
 8003fbe:	195b      	adds	r3, r3, r5
 8003fc0:	19db      	adds	r3, r3, r7
 8003fc2:	4a98      	ldr	r2, [pc, #608]	@ (8004224 <ParseBuffer+0x36c>)
 8003fc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fc6:	c313      	stmia	r3!, {r0, r1, r4}
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003fcc:	4b88      	ldr	r3, [pc, #544]	@ (80041f0 <ParseBuffer+0x338>)
 8003fce:	195b      	adds	r3, r3, r5
 8003fd0:	19db      	adds	r3, r3, r7
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <ParseBuffer+0x138>
    ParsePoint = strstr(tempBuf, OK);
 8003fd8:	2340      	movs	r3, #64	@ 0x40
 8003fda:	18fa      	adds	r2, r7, r3
 8003fdc:	19bb      	adds	r3, r7, r6
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f017 feba 	bl	801bd5a <strstr>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	22a8      	movs	r2, #168	@ 0xa8
 8003fea:	0052      	lsls	r2, r2, #1
 8003fec:	18ba      	adds	r2, r7, r2
 8003fee:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003ff0:	4b7f      	ldr	r3, [pc, #508]	@ (80041f0 <ParseBuffer+0x338>)
 8003ff2:	22ac      	movs	r2, #172	@ 0xac
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	19db      	adds	r3, r3, r7
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10c      	bne.n	800401a <ParseBuffer+0x162>
    ParsePoint = strstr(tempBuf, ready);
 8004000:	2330      	movs	r3, #48	@ 0x30
 8004002:	18fa      	adds	r2, r7, r3
 8004004:	2344      	movs	r3, #68	@ 0x44
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f017 fea5 	bl	801bd5a <strstr>
 8004010:	0003      	movs	r3, r0
 8004012:	22a8      	movs	r2, #168	@ 0xa8
 8004014:	0052      	lsls	r2, r2, #1
 8004016:	18ba      	adds	r2, r7, r2
 8004018:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800401a:	4b75      	ldr	r3, [pc, #468]	@ (80041f0 <ParseBuffer+0x338>)
 800401c:	22ac      	movs	r2, #172	@ 0xac
 800401e:	0052      	lsls	r2, r2, #1
 8004020:	189b      	adds	r3, r3, r2
 8004022:	19db      	adds	r3, r3, r7
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d10c      	bne.n	8004044 <ParseBuffer+0x18c>
    ParsePoint = strstr(tempBuf, start);
 800402a:	232c      	movs	r3, #44	@ 0x2c
 800402c:	18fa      	adds	r2, r7, r3
 800402e:	2344      	movs	r3, #68	@ 0x44
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	0011      	movs	r1, r2
 8004034:	0018      	movs	r0, r3
 8004036:	f017 fe90 	bl	801bd5a <strstr>
 800403a:	0003      	movs	r3, r0
 800403c:	22a8      	movs	r2, #168	@ 0xa8
 800403e:	0052      	lsls	r2, r2, #1
 8004040:	18ba      	adds	r2, r7, r2
 8004042:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004044:	4b6a      	ldr	r3, [pc, #424]	@ (80041f0 <ParseBuffer+0x338>)
 8004046:	22ac      	movs	r2, #172	@ 0xac
 8004048:	0052      	lsls	r2, r2, #1
 800404a:	189b      	adds	r3, r3, r2
 800404c:	19db      	adds	r3, r3, r7
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10c      	bne.n	800406e <ParseBuffer+0x1b6>
    ParsePoint = strstr(tempBuf, TIME);
 8004054:	230c      	movs	r3, #12
 8004056:	18fa      	adds	r2, r7, r3
 8004058:	2344      	movs	r3, #68	@ 0x44
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	0011      	movs	r1, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f017 fe7b 	bl	801bd5a <strstr>
 8004064:	0003      	movs	r3, r0
 8004066:	22a8      	movs	r2, #168	@ 0xa8
 8004068:	0052      	lsls	r2, r2, #1
 800406a:	18ba      	adds	r2, r7, r2
 800406c:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800406e:	2338      	movs	r3, #56	@ 0x38
 8004070:	18fa      	adds	r2, r7, r3
 8004072:	2444      	movs	r4, #68	@ 0x44
 8004074:	193b      	adds	r3, r7, r4
 8004076:	0011      	movs	r1, r2
 8004078:	0018      	movs	r0, r3
 800407a:	f017 fe6e 	bl	801bd5a <strstr>
 800407e:	0003      	movs	r3, r0
 8004080:	22a6      	movs	r2, #166	@ 0xa6
 8004082:	0052      	lsls	r2, r2, #1
 8004084:	18ba      	adds	r2, r7, r2
 8004086:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004088:	231c      	movs	r3, #28
 800408a:	18fa      	adds	r2, r7, r3
 800408c:	193b      	adds	r3, r7, r4
 800408e:	0011      	movs	r1, r2
 8004090:	0018      	movs	r0, r3
 8004092:	f017 fe62 	bl	801bd5a <strstr>
 8004096:	0003      	movs	r3, r0
 8004098:	22a4      	movs	r2, #164	@ 0xa4
 800409a:	0052      	lsls	r2, r2, #1
 800409c:	18ba      	adds	r2, r7, r2
 800409e:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80040a0:	4a61      	ldr	r2, [pc, #388]	@ (8004228 <ParseBuffer+0x370>)
 80040a2:	193b      	adds	r3, r7, r4
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f017 fe57 	bl	801bd5a <strstr>
 80040ac:	0003      	movs	r3, r0
 80040ae:	22a2      	movs	r2, #162	@ 0xa2
 80040b0:	0052      	lsls	r2, r2, #1
 80040b2:	18ba      	adds	r2, r7, r2
 80040b4:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80040b6:	4b4d      	ldr	r3, [pc, #308]	@ (80041ec <ParseBuffer+0x334>)
 80040b8:	21ac      	movs	r1, #172	@ 0xac
 80040ba:	0049      	lsls	r1, r1, #1
 80040bc:	185b      	adds	r3, r3, r1
 80040be:	19db      	adds	r3, r3, r7
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d800      	bhi.n	80040c8 <ParseBuffer+0x210>
 80040c6:	e089      	b.n	80041dc <ParseBuffer+0x324>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80040c8:	22a8      	movs	r2, #168	@ 0xa8
 80040ca:	0052      	lsls	r2, r2, #1
 80040cc:	18bb      	adds	r3, r7, r2
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d027      	beq.n	8004124 <ParseBuffer+0x26c>
 80040d4:	18bb      	adds	r3, r7, r2
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b4f      	cmp	r3, #79	@ 0x4f
 80040dc:	d122      	bne.n	8004124 <ParseBuffer+0x26c>
// TODO: Bert call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80040de:	2358      	movs	r3, #88	@ 0x58
 80040e0:	33ff      	adds	r3, #255	@ 0xff
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <ParseBuffer+0x374>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b12      	cmp	r3, #18
 80040ee:	d119      	bne.n	8004124 <ParseBuffer+0x26c>
        if ((len == 43) && (tempBuf[33] == '2' )) {
 80040f0:	4b3e      	ldr	r3, [pc, #248]	@ (80041ec <ParseBuffer+0x334>)
 80040f2:	185b      	adds	r3, r3, r1
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	2b2b      	cmp	r3, #43	@ 0x2b
 80040fa:	d10b      	bne.n	8004114 <ParseBuffer+0x25c>
 80040fc:	4b3d      	ldr	r3, [pc, #244]	@ (80041f4 <ParseBuffer+0x33c>)
 80040fe:	185b      	adds	r3, r3, r1
 8004100:	19db      	adds	r3, r3, r7
 8004102:	2221      	movs	r2, #33	@ 0x21
 8004104:	5c9b      	ldrb	r3, [r3, r2]
 8004106:	2b32      	cmp	r3, #50	@ 0x32
 8004108:	d104      	bne.n	8004114 <ParseBuffer+0x25c>
          ParseTime(tempBuf);
 800410a:	193b      	adds	r3, r7, r4
 800410c:	0018      	movs	r0, r3
 800410e:	f001 ff99 	bl	8006044 <ParseTime>
 8004112:	e007      	b.n	8004124 <ParseBuffer+0x26c>
        }
        else {
          Debug("Error getting time\r\n");
 8004114:	4a46      	ldr	r2, [pc, #280]	@ (8004230 <ParseBuffer+0x378>)
 8004116:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <ParseBuffer+0x37c>)
 8004118:	0019      	movs	r1, r3
 800411a:	2003      	movs	r0, #3
 800411c:	f007 f9fa 	bl	800b514 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8004120:	2306      	movs	r3, #6
 8004122:	e05f      	b.n	80041e4 <ParseBuffer+0x32c>
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r'){
 8004124:	22a8      	movs	r2, #168	@ 0xa8
 8004126:	0052      	lsls	r2, r2, #1
 8004128:	18bb      	adds	r3, r7, r2
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <ParseBuffer+0x28c>
 8004130:	18bb      	adds	r3, r7, r2
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b72      	cmp	r3, #114	@ 0x72
 8004138:	d104      	bne.n	8004144 <ParseBuffer+0x28c>
      status = RECEIVE_STATUS_READY;
 800413a:	2358      	movs	r3, #88	@ 0x58
 800413c:	33ff      	adds	r3, #255	@ 0xff
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2202      	movs	r2, #2
 8004142:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>'){
 8004144:	22a8      	movs	r2, #168	@ 0xa8
 8004146:	0052      	lsls	r2, r2, #1
 8004148:	18bb      	adds	r3, r7, r2
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <ParseBuffer+0x2ac>
 8004150:	18bb      	adds	r3, r7, r2
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b3e      	cmp	r3, #62	@ 0x3e
 8004158:	d104      	bne.n	8004164 <ParseBuffer+0x2ac>
      status = RECEIVE_STATUS_START;
 800415a:	2358      	movs	r3, #88	@ 0x58
 800415c:	33ff      	adds	r3, #255	@ 0xff
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2205      	movs	r2, #5
 8004162:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+'){
 8004164:	22a8      	movs	r2, #168	@ 0xa8
 8004166:	0052      	lsls	r2, r2, #1
 8004168:	18bb      	adds	r3, r7, r2
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <ParseBuffer+0x2cc>
 8004170:	18bb      	adds	r3, r7, r2
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b2b      	cmp	r3, #43	@ 0x2b
 8004178:	d104      	bne.n	8004184 <ParseBuffer+0x2cc>
      status = RECEIVE_STATUS_TIME;
 800417a:	2358      	movs	r3, #88	@ 0x58
 800417c:	33ff      	adds	r3, #255	@ 0xff
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	220b      	movs	r2, #11
 8004182:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint2 != 0 && *ParsePoint2 == 'E'){
 8004184:	22a6      	movs	r2, #166	@ 0xa6
 8004186:	0052      	lsls	r2, r2, #1
 8004188:	18bb      	adds	r3, r7, r2
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <ParseBuffer+0x2ec>
 8004190:	18bb      	adds	r3, r7, r2
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b45      	cmp	r3, #69	@ 0x45
 8004198:	d104      	bne.n	80041a4 <ParseBuffer+0x2ec>
      status = RECEIVE_STATUS_ERROR;
 800419a:	2358      	movs	r3, #88	@ 0x58
 800419c:	33ff      	adds	r3, #255	@ 0xff
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80041a4:	22a4      	movs	r2, #164	@ 0xa4
 80041a6:	0052      	lsls	r2, r2, #1
 80041a8:	18bb      	adds	r3, r7, r2
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <ParseBuffer+0x308>
 80041b0:	18bb      	adds	r3, r7, r2
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b57      	cmp	r3, #87	@ 0x57
 80041b8:	d102      	bne.n	80041c0 <ParseBuffer+0x308>
      ConnectionMade = true;
 80041ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <ParseBuffer+0x380>)
 80041bc:	2201      	movs	r2, #1
 80041be:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80041c0:	22a2      	movs	r2, #162	@ 0xa2
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <ParseBuffer+0x324>
 80041cc:	18bb      	adds	r3, r7, r2
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b32      	cmp	r3, #50	@ 0x32
 80041d4:	d102      	bne.n	80041dc <ParseBuffer+0x324>
      beurs = true;
 80041d6:	4b19      	ldr	r3, [pc, #100]	@ (800423c <ParseBuffer+0x384>)
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80041dc:	2358      	movs	r3, #88	@ 0x58
 80041de:	33ff      	adds	r3, #255	@ 0xff
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	781b      	ldrb	r3, [r3, #0]

}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b057      	add	sp, #348	@ 0x15c
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	fffffeaa 	.word	0xfffffeaa
 80041f0:	fffffea9 	.word	0xfffffea9
 80041f4:	fffffeec 	.word	0xfffffeec
 80041f8:	0801f08c 	.word	0x0801f08c
 80041fc:	fffffee8 	.word	0xfffffee8
 8004200:	0801f0bc 	.word	0x0801f0bc
 8004204:	fffffee0 	.word	0xfffffee0
 8004208:	0801f0c0 	.word	0x0801f0c0
 800420c:	fffffed8 	.word	0xfffffed8
 8004210:	0801f0c8 	.word	0x0801f0c8
 8004214:	fffffed4 	.word	0xfffffed4
 8004218:	fffffec4 	.word	0xfffffec4
 800421c:	0801f0d0 	.word	0x0801f0d0
 8004220:	fffffeb4 	.word	0xfffffeb4
 8004224:	0801f0e0 	.word	0x0801f0e0
 8004228:	0801fde0 	.word	0x0801fde0
 800422c:	20000996 	.word	0x20000996
 8004230:	0801f0a4 	.word	0x0801f0a4
 8004234:	0801edb0 	.word	0x0801edb0
 8004238:	20000550 	.word	0x20000550
 800423c:	20000552 	.word	0x20000552

08004240 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <PollAwake+0x34>)
 8004248:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f7fb ff8d 	bl	800016c <strlen>
 8004252:	0003      	movs	r3, r0
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0011      	movs	r1, r2
 800425a:	0018      	movs	r0, r3
 800425c:	f7ff fb98 	bl	8003990 <ESP_Send>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d001      	beq.n	8004268 <PollAwake+0x28>
    return true;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <PollAwake+0x2a>
  }
  else{
    return false;
 8004268:	2300      	movs	r3, #0
  }
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b002      	add	sp, #8
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	0801f0f0 	.word	0x0801f0f0

08004278 <RFPower>:
bool RFPower(){
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <RFPower+0x34>)
 8004280:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f7fb ff71 	bl	800016c <strlen>
 800428a:	0003      	movs	r3, r0
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f7ff fb7c 	bl	8003990 <ESP_Send>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <RFPower+0x28>
    return true;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <RFPower+0x2a>
  }
  else{
    return false;
 80042a0:	2300      	movs	r3, #0
  }
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b002      	add	sp, #8
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	0801f0f8 	.word	0x0801f0f8

080042b0 <CheckRFPower>:
bool CheckRFPower(){
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <CheckRFPower+0x34>)
 80042b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0018      	movs	r0, r3
 80042be:	f7fb ff55 	bl	800016c <strlen>
 80042c2:	0003      	movs	r3, r0
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0011      	movs	r1, r2
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff fb60 	bl	8003990 <ESP_Send>
 80042d0:	1e03      	subs	r3, r0, #0
 80042d2:	d001      	beq.n	80042d8 <CheckRFPower+0x28>
    return true;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <CheckRFPower+0x2a>
  }
  else{
    return false;
 80042d8:	2300      	movs	r3, #0
  }
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	0801f108 	.word	0x0801f108

080042e8 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <ATRestore+0x34>)
 80042f0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7fb ff39 	bl	800016c <strlen>
 80042fa:	0003      	movs	r3, r0
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f7ff fb44 	bl	8003990 <ESP_Send>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d001      	beq.n	8004310 <ATRestore+0x28>
    return true;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <ATRestore+0x2a>
  }
  else{
    return false;
 8004310:	2300      	movs	r3, #0
  }
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	0801f118 	.word	0x0801f118

08004320 <CWINIT>:
bool CWINIT(){
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <CWINIT+0x34>)
 8004328:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fb ff1d 	bl	800016c <strlen>
 8004332:	0003      	movs	r3, r0
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff fb28 	bl	8003990 <ESP_Send>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <CWINIT+0x28>
    return true;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <CWINIT+0x2a>
  }
  else{
    return false;
 8004348:	2300      	movs	r3, #0
  }
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	0801f128 	.word	0x0801f128

08004358 <CWMODE1>:
bool CWMODE1(){
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800435e:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <CWMODE1+0x34>)
 8004360:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f7fb ff01 	bl	800016c <strlen>
 800436a:	0003      	movs	r3, r0
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff fb0c 	bl	8003990 <ESP_Send>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d001      	beq.n	8004380 <CWMODE1+0x28>
    return true;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004380:	2300      	movs	r3, #0
  }
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b002      	add	sp, #8
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	0801f138 	.word	0x0801f138

08004390 <CWMODE2>:
bool CWMODE2(){
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004396:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <CWMODE2+0x34>)
 8004398:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f7fb fee5 	bl	800016c <strlen>
 80043a2:	0003      	movs	r3, r0
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0011      	movs	r1, r2
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff faf0 	bl	8003990 <ESP_Send>
 80043b0:	1e03      	subs	r3, r0, #0
 80043b2:	d001      	beq.n	80043b8 <CWMODE2+0x28>
    return true;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <CWMODE2+0x2a>
  }
  else{
    return false;
 80043b8:	2300      	movs	r3, #0
  }
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b002      	add	sp, #8
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	0801f148 	.word	0x0801f148

080043c8 <CWAUTOCONN>:
bool CWAUTOCONN(){
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <CWAUTOCONN+0x34>)
 80043d0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7fb fec9 	bl	800016c <strlen>
 80043da:	0003      	movs	r3, r0
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0011      	movs	r1, r2
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7ff fad4 	bl	8003990 <ESP_Send>
 80043e8:	1e03      	subs	r3, r0, #0
 80043ea:	d001      	beq.n	80043f0 <CWAUTOCONN+0x28>
    return true;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80043f0:	2300      	movs	r3, #0
  }
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	0801f158 	.word	0x0801f158

08004400 <CWJAP>:
bool CWJAP(){
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	46c6      	mov	lr, r8
 8004404:	b500      	push	{lr}
 8004406:	b0a2      	sub	sp, #136	@ 0x88
 8004408:	af00      	add	r7, sp, #0
 800440a:	466b      	mov	r3, sp
 800440c:	4698      	mov	r8, r3
  beursTest = true;
 800440e:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <CWJAP+0xf4>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004414:	2618      	movs	r6, #24
 8004416:	19bb      	adds	r3, r7, r6
 8004418:	2264      	movs	r2, #100	@ 0x64
 800441a:	2100      	movs	r1, #0
 800441c:	0018      	movs	r0, r3
 800441e:	f017 fc61 	bl	801bce4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004422:	4b35      	ldr	r3, [pc, #212]	@ (80044f8 <CWJAP+0xf8>)
 8004424:	4a35      	ldr	r2, [pc, #212]	@ (80044fc <CWJAP+0xfc>)
 8004426:	4936      	ldr	r1, [pc, #216]	@ (8004500 <CWJAP+0x100>)
 8004428:	19b8      	adds	r0, r7, r6
 800442a:	f017 fbb7 	bl	801bb9c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800442e:	19bb      	adds	r3, r7, r6
 8004430:	0018      	movs	r0, r3
 8004432:	f7fb fe9b 	bl	800016c <strlen>
 8004436:	0002      	movs	r2, r0
 8004438:	216f      	movs	r1, #111	@ 0x6f
 800443a:	0030      	movs	r0, r6
 800443c:	180b      	adds	r3, r1, r0
 800443e:	19db      	adds	r3, r3, r7
 8004440:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004442:	180b      	adds	r3, r1, r0
 8004444:	19db      	adds	r3, r3, r7
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	1e5a      	subs	r2, r3, #1
 800444c:	2180      	movs	r1, #128	@ 0x80
 800444e:	1879      	adds	r1, r7, r1
 8004450:	600a      	str	r2, [r1, #0]
 8004452:	001a      	movs	r2, r3
 8004454:	60ba      	str	r2, [r7, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	60fa      	str	r2, [r7, #12]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	68f9      	ldr	r1, [r7, #12]
 800445e:	0002      	movs	r2, r0
 8004460:	0f52      	lsrs	r2, r2, #29
 8004462:	000e      	movs	r6, r1
 8004464:	00f6      	lsls	r6, r6, #3
 8004466:	617e      	str	r6, [r7, #20]
 8004468:	697e      	ldr	r6, [r7, #20]
 800446a:	4316      	orrs	r6, r2
 800446c:	617e      	str	r6, [r7, #20]
 800446e:	0002      	movs	r2, r0
 8004470:	00d2      	lsls	r2, r2, #3
 8004472:	613a      	str	r2, [r7, #16]
 8004474:	001a      	movs	r2, r3
 8004476:	603a      	str	r2, [r7, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	6838      	ldr	r0, [r7, #0]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	0002      	movs	r2, r0
 8004482:	0f52      	lsrs	r2, r2, #29
 8004484:	000e      	movs	r6, r1
 8004486:	00f5      	lsls	r5, r6, #3
 8004488:	4315      	orrs	r5, r2
 800448a:	0002      	movs	r2, r0
 800448c:	00d4      	lsls	r4, r2, #3
 800448e:	3307      	adds	r3, #7
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	466a      	mov	r2, sp
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	469d      	mov	sp, r3
 800449a:	466b      	mov	r3, sp
 800449c:	3300      	adds	r3, #0
 800449e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80044a0:	246f      	movs	r4, #111	@ 0x6f
 80044a2:	2518      	movs	r5, #24
 80044a4:	1963      	adds	r3, r4, r5
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	001a      	movs	r2, r3
 80044ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044b0:	2100      	movs	r1, #0
 80044b2:	0018      	movs	r0, r3
 80044b4:	f017 fc16 	bl	801bce4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80044b8:	1963      	adds	r3, r4, r5
 80044ba:	19db      	adds	r3, r3, r7
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	1979      	adds	r1, r7, r5
 80044c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044c2:	0018      	movs	r0, r3
 80044c4:	f017 fc35 	bl	801bd32 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80044c8:	1963      	adds	r3, r4, r5
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff fa5b 	bl	8003990 <ESP_Send>
 80044da:	1e03      	subs	r3, r0, #0
 80044dc:	d001      	beq.n	80044e2 <CWJAP+0xe2>
    return true;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <CWJAP+0xe4>
  }
  else{
    return false;
 80044e2:	2300      	movs	r3, #0
 80044e4:	46c5      	mov	sp, r8
  }
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b022      	add	sp, #136	@ 0x88
 80044ec:	bc80      	pop	{r7}
 80044ee:	46b8      	mov	r8, r7
 80044f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	20000551 	.word	0x20000551
 80044f8:	0801fdec 	.word	0x0801fdec
 80044fc:	0801fde0 	.word	0x0801fde0
 8004500:	0801f16c 	.word	0x0801f16c

08004504 <CWMODE3>:
bool CWMODE3(){
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800450a:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <CWMODE3+0x34>)
 800450c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f7fb fe2b 	bl	800016c <strlen>
 8004516:	0003      	movs	r3, r0
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0011      	movs	r1, r2
 800451e:	0018      	movs	r0, r3
 8004520:	f7ff fa36 	bl	8003990 <ESP_Send>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <CWMODE3+0x28>
    return true;
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <CWMODE3+0x2a>
  }
  else{
    return false;
 800452c:	2300      	movs	r3, #0
  }
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b002      	add	sp, #8
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	0801f184 	.word	0x0801f184

0800453c <CWSTATE>:
bool CWSTATE(){
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004542:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <CWSTATE+0x34>)
 8004544:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7fb fe0f 	bl	800016c <strlen>
 800454e:	0003      	movs	r3, r0
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0011      	movs	r1, r2
 8004556:	0018      	movs	r0, r3
 8004558:	f7ff fa1a 	bl	8003990 <ESP_Send>
 800455c:	1e03      	subs	r3, r0, #0
 800455e:	d001      	beq.n	8004564 <CWSTATE+0x28>
    return true;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004564:	2300      	movs	r3, #0
  }
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b002      	add	sp, #8
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	0801f194 	.word	0x0801f194

08004574 <CWSAP>:
bool CWSAP(){
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <CWSAP+0x34>)
 800457c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f7fb fdf3 	bl	800016c <strlen>
 8004586:	0003      	movs	r3, r0
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0011      	movs	r1, r2
 800458e:	0018      	movs	r0, r3
 8004590:	f7ff f9fe 	bl	8003990 <ESP_Send>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d001      	beq.n	800459c <CWSAP+0x28>
    return true;
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <CWSAP+0x2a>
  }
  else{
    return false;
 800459c:	2300      	movs	r3, #0
  }
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	0801f1a4 	.word	0x0801f1a4

080045ac <CIPMUX>:
bool CIPMUX(){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <CIPMUX+0x34>)
 80045b4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fb fdd7 	bl	800016c <strlen>
 80045be:	0003      	movs	r3, r0
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0011      	movs	r1, r2
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7ff f9e2 	bl	8003990 <ESP_Send>
 80045cc:	1e03      	subs	r3, r0, #0
 80045ce:	d001      	beq.n	80045d4 <CIPMUX+0x28>
    return true;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <CIPMUX+0x2a>
  }
  else{
    return false;
 80045d4:	2300      	movs	r3, #0
  }
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	0801f1c8 	.word	0x0801f1c8

080045e4 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80045ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <WEBSERVER+0x34>)
 80045ec:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fb fdbb 	bl	800016c <strlen>
 80045f6:	0003      	movs	r3, r0
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0011      	movs	r1, r2
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff f9c6 	bl	8003990 <ESP_Send>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <WEBSERVER+0x28>
    return true;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <WEBSERVER+0x2a>
  }
  else{
    return false;
 800460c:	2300      	movs	r3, #0
  }
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	0801f1d8 	.word	0x0801f1d8

0800461c <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b0c5      	sub	sp, #276	@ 0x114
 8004620:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	005a      	lsls	r2, r3, #1
 8004626:	1d3b      	adds	r3, r7, #4
 8004628:	2100      	movs	r1, #0
 800462a:	0018      	movs	r0, r3
 800462c:	f017 fb5a 	bl	801bce4 <memset>
  uint16_t length = CreateMessage(beurs);
 8004630:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <HTTPCPOST+0xa0>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	1dfc      	adds	r4, r7, #7
 8004636:	34ff      	adds	r4, #255	@ 0xff
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff fa51 	bl	8003ae0 <CreateMessage>
 800463e:	0003      	movs	r3, r0
 8004640:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004642:	4b1e      	ldr	r3, [pc, #120]	@ (80046bc <HTTPCPOST+0xa0>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 800464a:	1dfb      	adds	r3, r7, #7
 800464c:	33ff      	adds	r3, #255	@ 0xff
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <HTTPCPOST+0xa4>)
 8004652:	491c      	ldr	r1, [pc, #112]	@ (80046c4 <HTTPCPOST+0xa8>)
 8004654:	1d38      	adds	r0, r7, #4
 8004656:	f017 faa1 	bl	801bb9c <siprintf>
 800465a:	e016      	b.n	800468a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <HTTPCPOST+0xac>)
 800465e:	481b      	ldr	r0, [pc, #108]	@ (80046cc <HTTPCPOST+0xb0>)
 8004660:	220c      	movs	r2, #12
 8004662:	0019      	movs	r1, r3
 8004664:	f7ff f848 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004668:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <HTTPCPOST+0xac>)
 800466a:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <HTTPCPOST+0xb4>)
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f7ff fa12 	bl	8003a98 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	33ff      	adds	r3, #255	@ 0xff
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	4c15      	ldr	r4, [pc, #84]	@ (80046d0 <HTTPCPOST+0xb4>)
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <HTTPCPOST+0xb8>)
 800467e:	4916      	ldr	r1, [pc, #88]	@ (80046d8 <HTTPCPOST+0xbc>)
 8004680:	1d38      	adds	r0, r7, #4
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	0023      	movs	r3, r4
 8004686:	f017 fa89 	bl	801bb9c <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	0018      	movs	r0, r3
 800468e:	f7fb fd6d 	bl	800016c <strlen>
 8004692:	0002      	movs	r2, r0
 8004694:	1d7b      	adds	r3, r7, #5
 8004696:	33ff      	adds	r3, #255	@ 0xff
 8004698:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800469a:	1d7b      	adds	r3, r7, #5
 800469c:	33ff      	adds	r3, #255	@ 0xff
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	1d3b      	adds	r3, r7, #4
 80046a2:	0011      	movs	r1, r2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7ff f973 	bl	8003990 <ESP_Send>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d001      	beq.n	80046b2 <HTTPCPOST+0x96>
    return true;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HTTPCPOST+0x98>
  }
  else{
    return false;
 80046b2:	2300      	movs	r3, #0
  }
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b043      	add	sp, #268	@ 0x10c
 80046ba:	bd90      	pop	{r4, r7, pc}
 80046bc:	20000552 	.word	0x20000552
 80046c0:	0801fe04 	.word	0x0801fe04
 80046c4:	0801f1f0 	.word	0x0801f1f0
 80046c8:	20000a5c 	.word	0x20000a5c
 80046cc:	08080000 	.word	0x08080000
 80046d0:	20000a68 	.word	0x20000a68
 80046d4:	0801fe40 	.word	0x0801fe40
 80046d8:	0801f228 	.word	0x0801f228

080046dc <SENDDATA>:
bool SENDDATA(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <SENDDATA+0x34>)
 80046e4:	0018      	movs	r0, r3
 80046e6:	f7fb fd41 	bl	800016c <strlen>
 80046ea:	0002      	movs	r2, r0
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <SENDDATA+0x34>)
 80046f6:	0011      	movs	r1, r2
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff f949 	bl	8003990 <ESP_Send>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d001      	beq.n	8004706 <SENDDATA+0x2a>
    return true;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <SENDDATA+0x2c>
  }
  else{
    return false;
 8004706:	2300      	movs	r3, #0
  }
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000580 	.word	0x20000580

08004714 <SLEEP>:
bool SLEEP(){
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <SLEEP+0x34>)
 800471c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f7fb fd23 	bl	800016c <strlen>
 8004726:	0003      	movs	r3, r0
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff f92e 	bl	8003990 <ESP_Send>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <SLEEP+0x28>
    return true;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <SLEEP+0x2a>
  }
  else{
    return false;
 800473c:	2300      	movs	r3, #0
  }
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	0801f268 	.word	0x0801f268

0800474c <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <CIPSNTPCFG+0x3c>)
 8004754:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fd07 	bl	800016c <strlen>
 800475e:	0003      	movs	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff f912 	bl	8003990 <ESP_Send>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d006      	beq.n	800477e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004770:	23fa      	movs	r3, #250	@ 0xfa
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	0018      	movs	r0, r3
 8004776:	f007 fa79 	bl	800bc6c <HAL_Delay>
    return true;
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800477e:	2300      	movs	r3, #0
  }
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}
 8004788:	0801f278 	.word	0x0801f278

0800478c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <CIPSNTPTIME+0x34>)
 8004794:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f7fb fce7 	bl	800016c <strlen>
 800479e:	0003      	movs	r3, r0
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0011      	movs	r1, r2
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f8f2 	bl	8003990 <ESP_Send>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d001      	beq.n	80047b4 <CIPSNTPTIME+0x28>
    return true;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 80047b4:	2300      	movs	r3, #0
  }
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	0801f2c8 	.word	0x0801f2c8

080047c4 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <CIPSNTPINTV+0x34>)
 80047cc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fb fccb 	bl	800016c <strlen>
 80047d6:	0003      	movs	r3, r0
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff f8d6 	bl	8003990 <ESP_Send>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d001      	beq.n	80047ec <CIPSNTPINTV+0x28>
    return true;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 80047ec:	2300      	movs	r3, #0
  }
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	0801f2dc 	.word	0x0801f2dc

080047fc <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	0002      	movs	r2, r0
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004808:	4b71      	ldr	r3, [pc, #452]	@ (80049d0 <DMA_ProcessBuffer+0x1d4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b29a      	uxth	r2, r3
 8004810:	200e      	movs	r0, #14
 8004812:	183b      	adds	r3, r7, r0
 8004814:	2180      	movs	r1, #128	@ 0x80
 8004816:	0049      	lsls	r1, r1, #1
 8004818:	1a8a      	subs	r2, r1, r2
 800481a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 800481c:	230d      	movs	r3, #13
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2203      	movs	r2, #3
 8004822:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004824:	183b      	adds	r3, r7, r0
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	429a      	cmp	r2, r3
 800482e:	d903      	bls.n	8004838 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004830:	183b      	adds	r3, r7, r0
 8004832:	2280      	movs	r2, #128	@ 0x80
 8004834:	0052      	lsls	r2, r2, #1
 8004836:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004838:	4b66      	ldr	r3, [pc, #408]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	001a      	movs	r2, r3
 8004840:	230e      	movs	r3, #14
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	4293      	cmp	r3, r2
 8004848:	d130      	bne.n	80048ac <DMA_ProcessBuffer+0xb0>
      if(retry >4){
 800484a:	4b63      	ldr	r3, [pc, #396]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d91b      	bls.n	800488a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004852:	4b61      	ldr	r3, [pc, #388]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004858:	4b60      	ldr	r3, [pc, #384]	@ (80049dc <DMA_ProcessBuffer+0x1e0>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <DMA_ProcessBuffer+0x74>
 8004860:	4b5f      	ldr	r3, [pc, #380]	@ (80049e0 <DMA_ProcessBuffer+0x1e4>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004868:	230d      	movs	r3, #13
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	2207      	movs	r2, #7
 800486e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004870:	4b5a      	ldr	r3, [pc, #360]	@ (80049dc <DMA_ProcessBuffer+0x1e0>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d103      	bne.n	8004880 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004878:	4b5a      	ldr	r3, [pc, #360]	@ (80049e4 <DMA_ProcessBuffer+0x1e8>)
 800487a:	220b      	movs	r2, #11
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e015      	b.n	80048ac <DMA_ProcessBuffer+0xb0>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004880:	230d      	movs	r3, #13
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2206      	movs	r2, #6
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e010      	b.n	80048ac <DMA_ProcessBuffer+0xb0>
        }
      }
     else{
       retry ++;
 800488a:	4b53      	ldr	r3, [pc, #332]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4b51      	ldr	r3, [pc, #324]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 8004894:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME + 2500;
 8004896:	f007 f9df 	bl	800bc58 <HAL_GetTick>
 800489a:	0003      	movs	r3, r0
 800489c:	4a52      	ldr	r2, [pc, #328]	@ (80049e8 <DMA_ProcessBuffer+0x1ec>)
 800489e:	189a      	adds	r2, r3, r2
 80048a0:	4b52      	ldr	r3, [pc, #328]	@ (80049ec <DMA_ProcessBuffer+0x1f0>)
 80048a2:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80048a4:	230d      	movs	r3, #13
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	2204      	movs	r2, #4
 80048aa:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80048ac:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	001a      	movs	r2, r3
 80048b4:	210e      	movs	r1, #14
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d100      	bne.n	80048c0 <DMA_ProcessBuffer+0xc4>
 80048be:	e07f      	b.n	80049c0 <DMA_ProcessBuffer+0x1c4>
      retry = 0;
 80048c0:	4b45      	ldr	r3, [pc, #276]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 80048c6:	4b4a      	ldr	r3, [pc, #296]	@ (80049f0 <DMA_ProcessBuffer+0x1f4>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	4b41      	ldr	r3, [pc, #260]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d109      	bne.n	80048ea <DMA_ProcessBuffer+0xee>
        TempPos = pos;
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	4b44      	ldr	r3, [pc, #272]	@ (80049f0 <DMA_ProcessBuffer+0x1f4>)
 80048de:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 80048e0:	230d      	movs	r3, #13
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	220a      	movs	r2, #10
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	e06a      	b.n	80049c0 <DMA_ProcessBuffer+0x1c4>
      }
      else{
        if(TempPos != pos){
 80048ea:	4b41      	ldr	r3, [pc, #260]	@ (80049f0 <DMA_ProcessBuffer+0x1f4>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	001a      	movs	r2, r3
 80048f2:	210e      	movs	r1, #14
 80048f4:	187b      	adds	r3, r7, r1
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <DMA_ProcessBuffer+0x114>
          TempPos = pos;
 80048fc:	187b      	adds	r3, r7, r1
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	4b3b      	ldr	r3, [pc, #236]	@ (80049f0 <DMA_ProcessBuffer+0x1f4>)
 8004904:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004906:	230d      	movs	r3, #13
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	220a      	movs	r2, #10
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e057      	b.n	80049c0 <DMA_ProcessBuffer+0x1c4>
        }
        else{
          if (pos > OldPos) {
 8004910:	4b30      	ldr	r3, [pc, #192]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	001a      	movs	r2, r3
 8004918:	210e      	movs	r1, #14
 800491a:	187b      	adds	r3, r7, r1
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	4293      	cmp	r3, r2
 8004920:	d917      	bls.n	8004952 <DMA_ProcessBuffer+0x156>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004922:	4b2c      	ldr	r3, [pc, #176]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	001a      	movs	r2, r3
 800492a:	4b32      	ldr	r3, [pc, #200]	@ (80049f4 <DMA_ProcessBuffer+0x1f8>)
 800492c:	18d0      	adds	r0, r2, r3
 800492e:	4b29      	ldr	r3, [pc, #164]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	001a      	movs	r2, r3
 8004936:	187b      	adds	r3, r7, r1
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	b299      	uxth	r1, r3
 800493e:	230d      	movs	r3, #13
 8004940:	18fc      	adds	r4, r7, r3
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	001a      	movs	r2, r3
 8004948:	f7ff fab6 	bl	8003eb8 <ParseBuffer>
 800494c:	0003      	movs	r3, r0
 800494e:	7023      	strb	r3, [r4, #0]
 8004950:	e026      	b.n	80049a0 <DMA_ProcessBuffer+0x1a4>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004952:	4b20      	ldr	r3, [pc, #128]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	001a      	movs	r2, r3
 800495a:	4b26      	ldr	r3, [pc, #152]	@ (80049f4 <DMA_ProcessBuffer+0x1f8>)
 800495c:	18d0      	adds	r0, r2, r3
 800495e:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	001a      	movs	r2, r3
 8004966:	2380      	movs	r3, #128	@ 0x80
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	b299      	uxth	r1, r3
 800496e:	250d      	movs	r5, #13
 8004970:	197c      	adds	r4, r7, r5
 8004972:	1dfb      	adds	r3, r7, #7
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	001a      	movs	r2, r3
 8004978:	f7ff fa9e 	bl	8003eb8 <ParseBuffer>
 800497c:	0003      	movs	r3, r0
 800497e:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004980:	210e      	movs	r1, #14
 8004982:	187b      	adds	r3, r7, r1
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <DMA_ProcessBuffer+0x1a4>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 800498a:	197c      	adds	r4, r7, r5
 800498c:	1dfb      	adds	r3, r7, #7
 800498e:	781a      	ldrb	r2, [r3, #0]
 8004990:	187b      	adds	r3, r7, r1
 8004992:	8819      	ldrh	r1, [r3, #0]
 8004994:	4b17      	ldr	r3, [pc, #92]	@ (80049f4 <DMA_ProcessBuffer+0x1f8>)
 8004996:	0018      	movs	r0, r3
 8004998:	f7ff fa8e 	bl	8003eb8 <ParseBuffer>
 800499c:	0003      	movs	r3, r0
 800499e:	7023      	strb	r3, [r4, #0]
              }
          }
          printf("RxBuffer OldPos: %d, pos: %d\r\n", OldPos, pos);
 80049a0:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	0019      	movs	r1, r3
 80049a8:	240e      	movs	r4, #14
 80049aa:	193b      	adds	r3, r7, r4
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	4b12      	ldr	r3, [pc, #72]	@ (80049f8 <DMA_ProcessBuffer+0x1fc>)
 80049b0:	0018      	movs	r0, r3
 80049b2:	f017 f8e3 	bl	801bb7c <iprintf>
          OldPos = pos;
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	4b05      	ldr	r3, [pc, #20]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80049be:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 80049c0:	230d      	movs	r3, #13
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	781b      	ldrb	r3, [r3, #0]
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b004      	add	sp, #16
 80049cc:	bdb0      	pop	{r4, r5, r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	200023f8 	.word	0x200023f8
 80049d4:	20000a81 	.word	0x20000a81
 80049d8:	20000994 	.word	0x20000994
 80049dc:	20000996 	.word	0x20000996
 80049e0:	20000000 	.word	0x20000000
 80049e4:	2000002c 	.word	0x2000002c
 80049e8:	00000bb8 	.word	0x00000bb8
 80049ec:	2000098c 	.word	0x2000098c
 80049f0:	20000a82 	.word	0x20000a82
 80049f4:	2000044c 	.word	0x2000044c
 80049f8:	0801f2f4 	.word	0x0801f2f4

080049fc <clearDMABuffer>:

void clearDMABuffer(){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	005a      	lsls	r2, r3, #1
 8004a04:	4b03      	ldr	r3, [pc, #12]	@ (8004a14 <clearDMABuffer+0x18>)
 8004a06:	2100      	movs	r1, #0
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f017 f96b 	bl	801bce4 <memset>
}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	2000044c 	.word	0x2000044c

08004a18 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	0002      	movs	r2, r0
 8004a20:	1dfb      	adds	r3, r7, #7
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	1dbb      	adds	r3, r7, #6
 8004a26:	1c0a      	adds	r2, r1, #0
 8004a28:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004a2a:	210f      	movs	r1, #15
 8004a2c:	187b      	adds	r3, r7, r1
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004a32:	1dbb      	adds	r3, r7, #6
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004a3a:	187b      	adds	r3, r7, r1
 8004a3c:	1dfa      	adds	r2, r7, #7
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	4251      	negs	r1, r2
 8004a42:	414a      	adcs	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004a46:	1dbb      	adds	r3, r7, #6
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004a4e:	230f      	movs	r3, #15
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	1dfa      	adds	r2, r7, #7
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	3a02      	subs	r2, #2
 8004a58:	4251      	negs	r1, r2
 8004a5a:	414a      	adcs	r2, r1
 8004a5c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004a5e:	1dbb      	adds	r3, r7, #6
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d107      	bne.n	8004a76 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004a66:	230f      	movs	r3, #15
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	1dfa      	adds	r2, r7, #7
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	3a05      	subs	r2, #5
 8004a70:	4251      	negs	r1, r2
 8004a72:	414a      	adcs	r2, r1
 8004a74:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004a76:	1dbb      	adds	r3, r7, #6
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b05      	cmp	r3, #5
 8004a7c:	d107      	bne.n	8004a8e <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004a7e:	230f      	movs	r3, #15
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	1dfa      	adds	r2, r7, #7
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	3a0b      	subs	r2, #11
 8004a88:	4251      	negs	r1, r2
 8004a8a:	414a      	adcs	r2, r1
 8004a8c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004a8e:	230f      	movs	r3, #15
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	781b      	ldrb	r3, [r3, #0]
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <AT_Send>:

bool AT_Send(AT_Commands state){
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	1dfb      	adds	r3, r7, #7
 8004aa6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004aa8:	230f      	movs	r3, #15
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004ab0:	1dfb      	adds	r3, r7, #7
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b13      	cmp	r3, #19
 8004ab6:	d900      	bls.n	8004aba <AT_Send+0x1e>
 8004ab8:	e18a      	b.n	8004dd0 <AT_Send+0x334>
 8004aba:	009a      	lsls	r2, r3, #2
 8004abc:	4bc8      	ldr	r3, [pc, #800]	@ (8004de0 <AT_Send+0x344>)
 8004abe:	18d3      	adds	r3, r2, r3
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004ac4:	4bc7      	ldr	r3, [pc, #796]	@ (8004de4 <AT_Send+0x348>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f006 fccd 	bl	800b468 <TimestampIsReached>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d100      	bne.n	8004ad4 <AT_Send+0x38>
 8004ad2:	e17c      	b.n	8004dce <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004ad4:	230f      	movs	r3, #15
 8004ad6:	18fc      	adds	r4, r7, r3
 8004ad8:	f7ff fbb2 	bl	8004240 <PollAwake>
 8004adc:	0003      	movs	r3, r0
 8004ade:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ae0:	f007 f8ba 	bl	800bc58 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	3332      	adds	r3, #50	@ 0x32
 8004ae8:	001a      	movs	r2, r3
 8004aea:	4bbe      	ldr	r3, [pc, #760]	@ (8004de4 <AT_Send+0x348>)
 8004aec:	601a      	str	r2, [r3, #0]
  }
  break;
 8004aee:	e16e      	b.n	8004dce <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004af0:	4abd      	ldr	r2, [pc, #756]	@ (8004de8 <AT_Send+0x34c>)
 8004af2:	4bbe      	ldr	r3, [pc, #760]	@ (8004dec <AT_Send+0x350>)
 8004af4:	0019      	movs	r1, r3
 8004af6:	2003      	movs	r0, #3
 8004af8:	f006 fd0c 	bl	800b514 <CreateLine>
    ATCommandSend = RFPower();
 8004afc:	230f      	movs	r3, #15
 8004afe:	18fc      	adds	r4, r7, r3
 8004b00:	f7ff fbba 	bl	8004278 <RFPower>
 8004b04:	0003      	movs	r3, r0
 8004b06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b08:	f007 f8a6 	bl	800bc58 <HAL_GetTick>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	330a      	adds	r3, #10
 8004b10:	001a      	movs	r2, r3
 8004b12:	4bb4      	ldr	r3, [pc, #720]	@ (8004de4 <AT_Send+0x348>)
 8004b14:	601a      	str	r2, [r3, #0]
    break;
 8004b16:	e15b      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004b18:	4ab5      	ldr	r2, [pc, #724]	@ (8004df0 <AT_Send+0x354>)
 8004b1a:	4bb4      	ldr	r3, [pc, #720]	@ (8004dec <AT_Send+0x350>)
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	2003      	movs	r0, #3
 8004b20:	f006 fcf8 	bl	800b514 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004b24:	230f      	movs	r3, #15
 8004b26:	18fc      	adds	r4, r7, r3
 8004b28:	f7ff fbc2 	bl	80042b0 <CheckRFPower>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b30:	f007 f892 	bl	800bc58 <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	330a      	adds	r3, #10
 8004b38:	001a      	movs	r2, r3
 8004b3a:	4baa      	ldr	r3, [pc, #680]	@ (8004de4 <AT_Send+0x348>)
 8004b3c:	601a      	str	r2, [r3, #0]
    break;
 8004b3e:	e147      	b.n	8004dd0 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004b40:	4aac      	ldr	r2, [pc, #688]	@ (8004df4 <AT_Send+0x358>)
 8004b42:	4baa      	ldr	r3, [pc, #680]	@ (8004dec <AT_Send+0x350>)
 8004b44:	0019      	movs	r1, r3
 8004b46:	2003      	movs	r0, #3
 8004b48:	f006 fce4 	bl	800b514 <CreateLine>
    ATCommandSend = ATRestore();
 8004b4c:	230f      	movs	r3, #15
 8004b4e:	18fc      	adds	r4, r7, r3
 8004b50:	f7ff fbca 	bl	80042e8 <ATRestore>
 8004b54:	0003      	movs	r3, r0
 8004b56:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004b58:	f007 f87e 	bl	800bc58 <HAL_GetTick>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	3332      	adds	r3, #50	@ 0x32
 8004b60:	001a      	movs	r2, r3
 8004b62:	4ba0      	ldr	r3, [pc, #640]	@ (8004de4 <AT_Send+0x348>)
 8004b64:	601a      	str	r2, [r3, #0]
    break;
 8004b66:	e133      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004b68:	4aa3      	ldr	r2, [pc, #652]	@ (8004df8 <AT_Send+0x35c>)
 8004b6a:	4ba0      	ldr	r3, [pc, #640]	@ (8004dec <AT_Send+0x350>)
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	2003      	movs	r0, #3
 8004b70:	f006 fcd0 	bl	800b514 <CreateLine>
    ATCommandSend = CWINIT();
 8004b74:	230f      	movs	r3, #15
 8004b76:	18fc      	adds	r4, r7, r3
 8004b78:	f7ff fbd2 	bl	8004320 <CWINIT>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004b80:	f007 f86a 	bl	800bc58 <HAL_GetTick>
 8004b84:	0003      	movs	r3, r0
 8004b86:	33f5      	adds	r3, #245	@ 0xf5
 8004b88:	33ff      	adds	r3, #255	@ 0xff
 8004b8a:	001a      	movs	r2, r3
 8004b8c:	4b95      	ldr	r3, [pc, #596]	@ (8004de4 <AT_Send+0x348>)
 8004b8e:	601a      	str	r2, [r3, #0]
    break;
 8004b90:	e11e      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004b92:	4a9a      	ldr	r2, [pc, #616]	@ (8004dfc <AT_Send+0x360>)
 8004b94:	4b95      	ldr	r3, [pc, #596]	@ (8004dec <AT_Send+0x350>)
 8004b96:	0019      	movs	r1, r3
 8004b98:	2003      	movs	r0, #3
 8004b9a:	f006 fcbb 	bl	800b514 <CreateLine>
    ATCommandSend = CWSTATE();
 8004b9e:	230f      	movs	r3, #15
 8004ba0:	18fc      	adds	r4, r7, r3
 8004ba2:	f7ff fccb 	bl	800453c <CWSTATE>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004baa:	f007 f855 	bl	800bc58 <HAL_GetTick>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	33f5      	adds	r3, #245	@ 0xf5
 8004bb2:	33ff      	adds	r3, #255	@ 0xff
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8004de4 <AT_Send+0x348>)
 8004bb8:	601a      	str	r2, [r3, #0]
    break;
 8004bba:	e109      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004bbc:	4a90      	ldr	r2, [pc, #576]	@ (8004e00 <AT_Send+0x364>)
 8004bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8004dec <AT_Send+0x350>)
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	2003      	movs	r0, #3
 8004bc4:	f006 fca6 	bl	800b514 <CreateLine>
    ATCommandSend = CWMODE1();
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fc      	adds	r4, r7, r3
 8004bcc:	f7ff fbc4 	bl	8004358 <CWMODE1>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004bd4:	f007 f840 	bl	800bc58 <HAL_GetTick>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	330a      	adds	r3, #10
 8004bdc:	001a      	movs	r2, r3
 8004bde:	4b81      	ldr	r3, [pc, #516]	@ (8004de4 <AT_Send+0x348>)
 8004be0:	601a      	str	r2, [r3, #0]
    break;
 8004be2:	e0f5      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004be4:	4a86      	ldr	r2, [pc, #536]	@ (8004e00 <AT_Send+0x364>)
 8004be6:	4b81      	ldr	r3, [pc, #516]	@ (8004dec <AT_Send+0x350>)
 8004be8:	0019      	movs	r1, r3
 8004bea:	2003      	movs	r0, #3
 8004bec:	f006 fc92 	bl	800b514 <CreateLine>
    ATCommandSend = CWMODE2();
 8004bf0:	230f      	movs	r3, #15
 8004bf2:	18fc      	adds	r4, r7, r3
 8004bf4:	f7ff fbcc 	bl	8004390 <CWMODE2>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004bfc:	f007 f82c 	bl	800bc58 <HAL_GetTick>
 8004c00:	0003      	movs	r3, r0
 8004c02:	330a      	adds	r3, #10
 8004c04:	001a      	movs	r2, r3
 8004c06:	4b77      	ldr	r3, [pc, #476]	@ (8004de4 <AT_Send+0x348>)
 8004c08:	601a      	str	r2, [r3, #0]
    break;
 8004c0a:	e0e1      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004c0c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e04 <AT_Send+0x368>)
 8004c0e:	4b77      	ldr	r3, [pc, #476]	@ (8004dec <AT_Send+0x350>)
 8004c10:	0019      	movs	r1, r3
 8004c12:	2003      	movs	r0, #3
 8004c14:	f006 fc7e 	bl	800b514 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004c18:	230f      	movs	r3, #15
 8004c1a:	18fc      	adds	r4, r7, r3
 8004c1c:	f7ff fbd4 	bl	80043c8 <CWAUTOCONN>
 8004c20:	0003      	movs	r3, r0
 8004c22:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c24:	f007 f818 	bl	800bc58 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	330a      	adds	r3, #10
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004de4 <AT_Send+0x348>)
 8004c30:	601a      	str	r2, [r3, #0]
    break;
 8004c32:	e0cd      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004c34:	4a74      	ldr	r2, [pc, #464]	@ (8004e08 <AT_Send+0x36c>)
 8004c36:	4b6d      	ldr	r3, [pc, #436]	@ (8004dec <AT_Send+0x350>)
 8004c38:	0019      	movs	r1, r3
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	f006 fc6a 	bl	800b514 <CreateLine>
    ATCommandSend = CWJAP();
 8004c40:	230f      	movs	r3, #15
 8004c42:	18fc      	adds	r4, r7, r3
 8004c44:	f7ff fbdc 	bl	8004400 <CWJAP>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004c4c:	f007 f804 	bl	800bc58 <HAL_GetTick>
 8004c50:	0003      	movs	r3, r0
 8004c52:	3332      	adds	r3, #50	@ 0x32
 8004c54:	001a      	movs	r2, r3
 8004c56:	4b63      	ldr	r3, [pc, #396]	@ (8004de4 <AT_Send+0x348>)
 8004c58:	601a      	str	r2, [r3, #0]
    break;
 8004c5a:	e0b9      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8004e0c <AT_Send+0x370>)
 8004c5e:	4b63      	ldr	r3, [pc, #396]	@ (8004dec <AT_Send+0x350>)
 8004c60:	0019      	movs	r1, r3
 8004c62:	2003      	movs	r0, #3
 8004c64:	f006 fc56 	bl	800b514 <CreateLine>
    ATCommandSend = CWMODE3();
 8004c68:	230f      	movs	r3, #15
 8004c6a:	18fc      	adds	r4, r7, r3
 8004c6c:	f7ff fc4a 	bl	8004504 <CWMODE3>
 8004c70:	0003      	movs	r3, r0
 8004c72:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c74:	f006 fff0 	bl	800bc58 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	330a      	adds	r3, #10
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	4b59      	ldr	r3, [pc, #356]	@ (8004de4 <AT_Send+0x348>)
 8004c80:	601a      	str	r2, [r3, #0]
    break;
 8004c82:	e0a5      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004c84:	4a62      	ldr	r2, [pc, #392]	@ (8004e10 <AT_Send+0x374>)
 8004c86:	4b59      	ldr	r3, [pc, #356]	@ (8004dec <AT_Send+0x350>)
 8004c88:	0019      	movs	r1, r3
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	f006 fc42 	bl	800b514 <CreateLine>
    ATCommandSend = CWSAP();
 8004c90:	230f      	movs	r3, #15
 8004c92:	18fc      	adds	r4, r7, r3
 8004c94:	f7ff fc6e 	bl	8004574 <CWSAP>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c9c:	f006 ffdc 	bl	800bc58 <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	330a      	adds	r3, #10
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8004de4 <AT_Send+0x348>)
 8004ca8:	601a      	str	r2, [r3, #0]
    break;
 8004caa:	e091      	b.n	8004dd0 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004cac:	230f      	movs	r3, #15
 8004cae:	18fc      	adds	r4, r7, r3
 8004cb0:	f7ff fc7c 	bl	80045ac <CIPMUX>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cb8:	f006 ffce 	bl	800bc58 <HAL_GetTick>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	330a      	adds	r3, #10
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	4b48      	ldr	r3, [pc, #288]	@ (8004de4 <AT_Send+0x348>)
 8004cc4:	601a      	str	r2, [r3, #0]
    break;
 8004cc6:	e083      	b.n	8004dd0 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004cc8:	230f      	movs	r3, #15
 8004cca:	18fc      	adds	r4, r7, r3
 8004ccc:	f7ff fc8a 	bl	80045e4 <WEBSERVER>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cd4:	f006 ffc0 	bl	800bc58 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	330a      	adds	r3, #10
 8004cdc:	001a      	movs	r2, r3
 8004cde:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <AT_Send+0x348>)
 8004ce0:	601a      	str	r2, [r3, #0]
    break;
 8004ce2:	e075      	b.n	8004dd0 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004ce4:	230f      	movs	r3, #15
 8004ce6:	18fc      	adds	r4, r7, r3
 8004ce8:	f7ff fc98 	bl	800461c <HTTPCPOST>
 8004cec:	0003      	movs	r3, r0
 8004cee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004cf0:	f006 ffb2 	bl	800bc58 <HAL_GetTick>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	33f5      	adds	r3, #245	@ 0xf5
 8004cf8:	33ff      	adds	r3, #255	@ 0xff
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	4b39      	ldr	r3, [pc, #228]	@ (8004de4 <AT_Send+0x348>)
 8004cfe:	601a      	str	r2, [r3, #0]
    break;
 8004d00:	e066      	b.n	8004dd0 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004d02:	4a44      	ldr	r2, [pc, #272]	@ (8004e14 <AT_Send+0x378>)
 8004d04:	4b39      	ldr	r3, [pc, #228]	@ (8004dec <AT_Send+0x350>)
 8004d06:	0019      	movs	r1, r3
 8004d08:	2003      	movs	r0, #3
 8004d0a:	f006 fc03 	bl	800b514 <CreateLine>
    ATCommandSend = SENDDATA();
 8004d0e:	230f      	movs	r3, #15
 8004d10:	18fc      	adds	r4, r7, r3
 8004d12:	f7ff fce3 	bl	80046dc <SENDDATA>
 8004d16:	0003      	movs	r3, r0
 8004d18:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004d1a:	f006 ff9d 	bl	800bc58 <HAL_GetTick>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	33f5      	adds	r3, #245	@ 0xf5
 8004d22:	33ff      	adds	r3, #255	@ 0xff
 8004d24:	001a      	movs	r2, r3
 8004d26:	4b2f      	ldr	r3, [pc, #188]	@ (8004de4 <AT_Send+0x348>)
 8004d28:	601a      	str	r2, [r3, #0]
    break;
 8004d2a:	e051      	b.n	8004dd0 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e18 <AT_Send+0x37c>)
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004dec <AT_Send+0x350>)
 8004d30:	0019      	movs	r1, r3
 8004d32:	2003      	movs	r0, #3
 8004d34:	f006 fbee 	bl	800b514 <CreateLine>
    ATCommandSend = SLEEP();
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fc      	adds	r4, r7, r3
 8004d3c:	f7ff fcea 	bl	8004714 <SLEEP>
 8004d40:	0003      	movs	r3, r0
 8004d42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d44:	f006 ff88 	bl	800bc58 <HAL_GetTick>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	330a      	adds	r3, #10
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <AT_Send+0x348>)
 8004d50:	601a      	str	r2, [r3, #0]
    break;
 8004d52:	e03d      	b.n	8004dd0 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004d54:	4a31      	ldr	r2, [pc, #196]	@ (8004e1c <AT_Send+0x380>)
 8004d56:	4b25      	ldr	r3, [pc, #148]	@ (8004dec <AT_Send+0x350>)
 8004d58:	0019      	movs	r1, r3
 8004d5a:	2003      	movs	r0, #3
 8004d5c:	f006 fbda 	bl	800b514 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004d60:	230f      	movs	r3, #15
 8004d62:	18fc      	adds	r4, r7, r3
 8004d64:	f7ff fcf2 	bl	800474c <CIPSNTPCFG>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d6c:	f006 ff74 	bl	800bc58 <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	330a      	adds	r3, #10
 8004d74:	001a      	movs	r2, r3
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <AT_Send+0x348>)
 8004d78:	601a      	str	r2, [r3, #0]
    break;
 8004d7a:	e029      	b.n	8004dd0 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004d7c:	4a28      	ldr	r2, [pc, #160]	@ (8004e20 <AT_Send+0x384>)
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dec <AT_Send+0x350>)
 8004d80:	0019      	movs	r1, r3
 8004d82:	2003      	movs	r0, #3
 8004d84:	f006 fbc6 	bl	800b514 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004d88:	230f      	movs	r3, #15
 8004d8a:	18fc      	adds	r4, r7, r3
 8004d8c:	f7ff fcfe 	bl	800478c <CIPSNTPTIME>
 8004d90:	0003      	movs	r3, r0
 8004d92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d94:	f006 ff60 	bl	800bc58 <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	33f5      	adds	r3, #245	@ 0xf5
 8004d9c:	33ff      	adds	r3, #255	@ 0xff
 8004d9e:	001a      	movs	r2, r3
 8004da0:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <AT_Send+0x348>)
 8004da2:	601a      	str	r2, [r3, #0]
    break;
 8004da4:	e014      	b.n	8004dd0 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004da6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e24 <AT_Send+0x388>)
 8004da8:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <AT_Send+0x350>)
 8004daa:	0019      	movs	r1, r3
 8004dac:	2003      	movs	r0, #3
 8004dae:	f006 fbb1 	bl	800b514 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004db2:	230f      	movs	r3, #15
 8004db4:	18fc      	adds	r4, r7, r3
 8004db6:	f7ff fd05 	bl	80047c4 <CIPSNTPINTV>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dbe:	f006 ff4b 	bl	800bc58 <HAL_GetTick>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	330a      	adds	r3, #10
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <AT_Send+0x348>)
 8004dca:	601a      	str	r2, [r3, #0]
    break;
 8004dcc:	e000      	b.n	8004dd0 <AT_Send+0x334>
  break;
 8004dce:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	781b      	ldrb	r3, [r3, #0]
}
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b005      	add	sp, #20
 8004ddc:	bd90      	pop	{r4, r7, pc}
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	0801fe68 	.word	0x0801fe68
 8004de4:	2000098c 	.word	0x2000098c
 8004de8:	0801f314 	.word	0x0801f314
 8004dec:	0801edb0 	.word	0x0801edb0
 8004df0:	0801f328 	.word	0x0801f328
 8004df4:	0801f33c 	.word	0x0801f33c
 8004df8:	0801f34c 	.word	0x0801f34c
 8004dfc:	0801f360 	.word	0x0801f360
 8004e00:	0801f378 	.word	0x0801f378
 8004e04:	0801f390 	.word	0x0801f390
 8004e08:	0801f3a8 	.word	0x0801f3a8
 8004e0c:	0801f3bc 	.word	0x0801f3bc
 8004e10:	0801f3d8 	.word	0x0801f3d8
 8004e14:	0801f3f4 	.word	0x0801f3f4
 8004e18:	0801f404 	.word	0x0801f404
 8004e1c:	0801f428 	.word	0x0801f428
 8004e20:	0801f43c 	.word	0x0801f43c
 8004e24:	0801f454 	.word	0x0801f454

08004e28 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004e2e:	1dfb      	adds	r3, r7, #7
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004e34:	4b7a      	ldr	r3, [pc, #488]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b05      	cmp	r3, #5
 8004e3a:	d900      	bls.n	8004e3e <ESP_WakeTest+0x16>
 8004e3c:	e0d6      	b.n	8004fec <ESP_WakeTest+0x1c4>
 8004e3e:	009a      	lsls	r2, r3, #2
 8004e40:	4b78      	ldr	r3, [pc, #480]	@ (8005024 <ESP_WakeTest+0x1fc>)
 8004e42:	18d3      	adds	r3, r2, r3
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004e48:	4b77      	ldr	r3, [pc, #476]	@ (8005028 <ESP_WakeTest+0x200>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4053      	eors	r3, r2
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d036      	beq.n	8004ec4 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e56:	2380      	movs	r3, #128	@ 0x80
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	4874      	ldr	r0, [pc, #464]	@ (800502c <ESP_WakeTest+0x204>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	0019      	movs	r1, r3
 8004e60:	f008 f959 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004e64:	2032      	movs	r0, #50	@ 0x32
 8004e66:	f006 ff01 	bl	800bc6c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004e6a:	2380      	movs	r3, #128	@ 0x80
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	486f      	ldr	r0, [pc, #444]	@ (800502c <ESP_WakeTest+0x204>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	0019      	movs	r1, r3
 8004e74:	f008 f94f 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004e78:	200a      	movs	r0, #10
 8004e7a:	f006 fef7 	bl	800bc6c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8005030 <ESP_WakeTest+0x208>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	2101      	movs	r1, #1
 8004e84:	0018      	movs	r0, r3
 8004e86:	f008 f946 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004e8a:	200a      	movs	r0, #10
 8004e8c:	f006 feee 	bl	800bc6c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004e90:	4b67      	ldr	r3, [pc, #412]	@ (8005030 <ESP_WakeTest+0x208>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	2102      	movs	r1, #2
 8004e96:	0018      	movs	r0, r3
 8004e98:	f008 f93d 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004e9c:	200a      	movs	r0, #10
 8004e9e:	f006 fee5 	bl	800bc6c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004ea2:	4b63      	ldr	r3, [pc, #396]	@ (8005030 <ESP_WakeTest+0x208>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f008 f934 	bl	800d116 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004eae:	f006 fed3 	bl	800bc58 <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	22af      	movs	r2, #175	@ 0xaf
 8004eb6:	0092      	lsls	r2, r2, #2
 8004eb8:	189a      	adds	r2, r3, r2
 8004eba:	4b5e      	ldr	r3, [pc, #376]	@ (8005034 <ESP_WakeTest+0x20c>)
 8004ebc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8005028 <ESP_WakeTest+0x200>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004ec4:	2380      	movs	r3, #128	@ 0x80
 8004ec6:	005a      	lsls	r2, r3, #1
 8004ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8005038 <ESP_WakeTest+0x210>)
 8004eca:	0011      	movs	r1, r2
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7fe fd91 	bl	80039f4 <ESP_Receive>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d100      	bne.n	8004ed8 <ESP_WakeTest+0xb0>
 8004ed6:	e099      	b.n	800500c <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8004ed8:	4b51      	ldr	r3, [pc, #324]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ede:	e095      	b.n	800500c <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004ee0:	4b54      	ldr	r3, [pc, #336]	@ (8005034 <ESP_WakeTest+0x20c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f006 fabf 	bl	800b468 <TimestampIsReached>
 8004eea:	1e03      	subs	r3, r0, #0
 8004eec:	d100      	bne.n	8004ef0 <ESP_WakeTest+0xc8>
 8004eee:	e08f      	b.n	8005010 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8004ef0:	4b52      	ldr	r3, [pc, #328]	@ (800503c <ESP_WakeTest+0x214>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	1dfc      	adds	r4, r7, #7
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff fdd0 	bl	8004a9c <AT_Send>
 8004efc:	0003      	movs	r3, r0
 8004efe:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004f00:	1dfb      	adds	r3, r7, #7
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d100      	bne.n	8004f0a <ESP_WakeTest+0xe2>
 8004f08:	e082      	b.n	8005010 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8004f0a:	4b45      	ldr	r3, [pc, #276]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f10:	e07e      	b.n	8005010 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f12:	4b48      	ldr	r3, [pc, #288]	@ (8005034 <ESP_WakeTest+0x20c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f006 faa6 	bl	800b468 <TimestampIsReached>
 8004f1c:	1e03      	subs	r3, r0, #0
 8004f1e:	d100      	bne.n	8004f22 <ESP_WakeTest+0xfa>
 8004f20:	e078      	b.n	8005014 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f22:	4b47      	ldr	r3, [pc, #284]	@ (8005040 <ESP_WakeTest+0x218>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	0018      	movs	r0, r3
 8004f28:	f7ff fc68 	bl	80047fc <DMA_ProcessBuffer>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	001a      	movs	r2, r3
 8004f30:	4b44      	ldr	r3, [pc, #272]	@ (8005044 <ESP_WakeTest+0x21c>)
 8004f32:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004f34:	4b43      	ldr	r3, [pc, #268]	@ (8005044 <ESP_WakeTest+0x21c>)
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	4b41      	ldr	r3, [pc, #260]	@ (8005040 <ESP_WakeTest+0x218>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	1dbc      	adds	r4, r7, #6
 8004f3e:	0019      	movs	r1, r3
 8004f40:	0010      	movs	r0, r2
 8004f42:	f7ff fd69 	bl	8004a18 <ATCompare>
 8004f46:	0003      	movs	r3, r0
 8004f48:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8005044 <ESP_WakeTest+0x21c>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d102      	bne.n	8004f58 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8004f52:	4b33      	ldr	r3, [pc, #204]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004f58:	4b3a      	ldr	r3, [pc, #232]	@ (8005044 <ESP_WakeTest+0x21c>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b07      	cmp	r3, #7
 8004f5e:	d104      	bne.n	8004f6a <ESP_WakeTest+0x142>
          StartProg();
 8004f60:	f7fe ff78 	bl	8003e54 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004f64:	4b2e      	ldr	r3, [pc, #184]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004f66:	2205      	movs	r2, #5
 8004f68:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004f6a:	4b36      	ldr	r3, [pc, #216]	@ (8005044 <ESP_WakeTest+0x21c>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d109      	bne.n	8004f86 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004f72:	f006 fe71 	bl	800bc58 <HAL_GetTick>
 8004f76:	0003      	movs	r3, r0
 8004f78:	3332      	adds	r3, #50	@ 0x32
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005034 <ESP_WakeTest+0x20c>)
 8004f7e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004f80:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004f86:	1dbb      	adds	r3, r7, #6
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d042      	beq.n	8005014 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004f90:	2203      	movs	r2, #3
 8004f92:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f94:	e03e      	b.n	8005014 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8004f96:	4b2c      	ldr	r3, [pc, #176]	@ (8005048 <ESP_WakeTest+0x220>)
 8004f98:	22fa      	movs	r2, #250	@ 0xfa
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8004f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8005048 <ESP_WakeTest+0x220>)
 8004fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800504c <ESP_WakeTest+0x224>)
 8004fa2:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8004fa4:	4b28      	ldr	r3, [pc, #160]	@ (8005048 <ESP_WakeTest+0x220>)
 8004fa6:	22fa      	movs	r2, #250	@ 0xfa
 8004fa8:	0112      	lsls	r2, r2, #4
 8004faa:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004fac:	4b1c      	ldr	r3, [pc, #112]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004fae:	2204      	movs	r2, #4
 8004fb0:	701a      	strb	r2, [r3, #0]

      break;
 8004fb2:	e030      	b.n	8005016 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004fb4:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <ESP_WakeTest+0x228>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004fba:	4b1b      	ldr	r3, [pc, #108]	@ (8005028 <ESP_WakeTest+0x200>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <ESP_WakeTest+0x208>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f008 f8a5 	bl	800d116 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004fcc:	2380      	movs	r3, #128	@ 0x80
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	4816      	ldr	r0, [pc, #88]	@ (800502c <ESP_WakeTest+0x204>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	f008 f89e 	bl	800d116 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004fda:	4b15      	ldr	r3, [pc, #84]	@ (8005030 <ESP_WakeTest+0x208>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2102      	movs	r1, #2
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f008 f898 	bl	800d116 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004fe6:	f002 fda1 	bl	8007b2c <SetESPMeasurementDone>
      break;
 8004fea:	e014      	b.n	8005016 <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 8004fec:	4b0c      	ldr	r3, [pc, #48]	@ (8005020 <ESP_WakeTest+0x1f8>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
      break;
 8004ff2:	e010      	b.n	8005016 <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004ff4:	4b14      	ldr	r3, [pc, #80]	@ (8005048 <ESP_WakeTest+0x220>)
 8004ff6:	22fa      	movs	r2, #250	@ 0xfa
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004ffc:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <ESP_WakeTest+0x220>)
 8004ffe:	22fa      	movs	r2, #250	@ 0xfa
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005004:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <ESP_WakeTest+0x220>)
 8005006:	2200      	movs	r2, #0
 8005008:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 800500a:	e004      	b.n	8005016 <ESP_WakeTest+0x1ee>
      break;
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	e002      	b.n	8005016 <ESP_WakeTest+0x1ee>
      break;
 8005010:	46c0      	nop			@ (mov r8, r8)
 8005012:	e000      	b.n	8005016 <ESP_WakeTest+0x1ee>
      break;
 8005014:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b003      	add	sp, #12
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	20000998 	.word	0x20000998
 8005024:	0801feb8 	.word	0x0801feb8
 8005028:	2000054c 	.word	0x2000054c
 800502c:	50000800 	.word	0x50000800
 8005030:	50001c00 	.word	0x50001c00
 8005034:	2000098c 	.word	0x2000098c
 8005038:	2000044c 	.word	0x2000044c
 800503c:	20000996 	.word	0x20000996
 8005040:	20000995 	.word	0x20000995
 8005044:	2000002d 	.word	0x2000002d
 8005048:	40000400 	.word	0x40000400
 800504c:	00000bb8 	.word	0x00000bb8
 8005050:	20000000 	.word	0x20000000

08005054 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005054:	b590      	push	{r4, r7, lr}
 8005056:	b085      	sub	sp, #20
 8005058:	af02      	add	r7, sp, #8
  bool ATSend = false;
 800505a:	1dfb      	adds	r3, r7, #7
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 8005060:	4bd9      	ldr	r3, [pc, #868]	@ (80053c8 <ESP_Upkeep+0x374>)
 8005062:	781a      	ldrb	r2, [r3, #0]
 8005064:	4bd9      	ldr	r3, [pc, #868]	@ (80053cc <ESP_Upkeep+0x378>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d01b      	beq.n	80050a4 <ESP_Upkeep+0x50>
    oldEspState = EspState;
 800506c:	4bd6      	ldr	r3, [pc, #856]	@ (80053c8 <ESP_Upkeep+0x374>)
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	4bd6      	ldr	r3, [pc, #856]	@ (80053cc <ESP_Upkeep+0x378>)
 8005072:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005074:	4bd5      	ldr	r3, [pc, #852]	@ (80053cc <ESP_Upkeep+0x378>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d103      	bne.n	8005084 <ESP_Upkeep+0x30>
 800507c:	4bd4      	ldr	r3, [pc, #848]	@ (80053d0 <ESP_Upkeep+0x37c>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b0e      	cmp	r3, #14
 8005082:	d00f      	beq.n	80050a4 <ESP_Upkeep+0x50>
      printf("EspState: %d ATcmd: %d Mode: %d ATExp: %d\r\n", oldEspState, ATCommand, Mode, ATExpectation);
 8005084:	4bd1      	ldr	r3, [pc, #836]	@ (80053cc <ESP_Upkeep+0x378>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	0019      	movs	r1, r3
 800508a:	4bd1      	ldr	r3, [pc, #836]	@ (80053d0 <ESP_Upkeep+0x37c>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	001a      	movs	r2, r3
 8005090:	4bd0      	ldr	r3, [pc, #832]	@ (80053d4 <ESP_Upkeep+0x380>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	001c      	movs	r4, r3
 8005096:	4bd0      	ldr	r3, [pc, #832]	@ (80053d8 <ESP_Upkeep+0x384>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	48d0      	ldr	r0, [pc, #832]	@ (80053dc <ESP_Upkeep+0x388>)
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	0023      	movs	r3, r4
 80050a0:	f016 fd6c 	bl	801bb7c <iprintf>
    }
  }

  switch (EspState) {
 80050a4:	4bc8      	ldr	r3, [pc, #800]	@ (80053c8 <ESP_Upkeep+0x374>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b0f      	cmp	r3, #15
 80050aa:	d900      	bls.n	80050ae <ESP_Upkeep+0x5a>
 80050ac:	e355      	b.n	800575a <ESP_Upkeep+0x706>
 80050ae:	009a      	lsls	r2, r3, #2
 80050b0:	4bcb      	ldr	r3, [pc, #812]	@ (80053e0 <ESP_Upkeep+0x38c>)
 80050b2:	18d3      	adds	r3, r2, r3
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80050b8:	4bc3      	ldr	r3, [pc, #780]	@ (80053c8 <ESP_Upkeep+0x374>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
      break;
 80050be:	f000 fba6 	bl	800580e <ESP_Upkeep+0x7ba>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 80050c2:	4bc8      	ldr	r3, [pc, #800]	@ (80053e4 <ESP_Upkeep+0x390>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2201      	movs	r2, #1
 80050c8:	4053      	eors	r3, r2
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d036      	beq.n	800513e <ESP_Upkeep+0xea>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80050d0:	2380      	movs	r3, #128	@ 0x80
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	48c4      	ldr	r0, [pc, #784]	@ (80053e8 <ESP_Upkeep+0x394>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	0019      	movs	r1, r3
 80050da:	f008 f81c 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80050de:	2001      	movs	r0, #1
 80050e0:	f006 fdc4 	bl	800bc6c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	48bf      	ldr	r0, [pc, #764]	@ (80053e8 <ESP_Upkeep+0x394>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	0019      	movs	r1, r3
 80050ee:	f008 f812 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80050f2:	2001      	movs	r0, #1
 80050f4:	f006 fdba 	bl	800bc6c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80050f8:	4bbc      	ldr	r3, [pc, #752]	@ (80053ec <ESP_Upkeep+0x398>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	2101      	movs	r1, #1
 80050fe:	0018      	movs	r0, r3
 8005100:	f008 f809 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005104:	2001      	movs	r0, #1
 8005106:	f006 fdb1 	bl	800bc6c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800510a:	4bb8      	ldr	r3, [pc, #736]	@ (80053ec <ESP_Upkeep+0x398>)
 800510c:	2201      	movs	r2, #1
 800510e:	2102      	movs	r1, #2
 8005110:	0018      	movs	r0, r3
 8005112:	f008 f800 	bl	800d116 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005116:	2001      	movs	r0, #1
 8005118:	f006 fda8 	bl	800bc6c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800511c:	4bb3      	ldr	r3, [pc, #716]	@ (80053ec <ESP_Upkeep+0x398>)
 800511e:	2201      	movs	r2, #1
 8005120:	2101      	movs	r1, #1
 8005122:	0018      	movs	r0, r3
 8005124:	f007 fff7 	bl	800d116 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005128:	f006 fd96 	bl	800bc58 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	22af      	movs	r2, #175	@ 0xaf
 8005130:	0092      	lsls	r2, r2, #2
 8005132:	189a      	adds	r2, r3, r2
 8005134:	4bae      	ldr	r3, [pc, #696]	@ (80053f0 <ESP_Upkeep+0x39c>)
 8005136:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005138:	4baa      	ldr	r3, [pc, #680]	@ (80053e4 <ESP_Upkeep+0x390>)
 800513a:	2201      	movs	r2, #1
 800513c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	4bac      	ldr	r3, [pc, #688]	@ (80053f4 <ESP_Upkeep+0x3a0>)
 8005144:	0011      	movs	r1, r2
 8005146:	0018      	movs	r0, r3
 8005148:	f7fe fc54 	bl	80039f4 <ESP_Receive>
 800514c:	1e03      	subs	r3, r0, #0
 800514e:	d100      	bne.n	8005152 <ESP_Upkeep+0xfe>
 8005150:	e30f      	b.n	8005772 <ESP_Upkeep+0x71e>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005152:	4b9d      	ldr	r3, [pc, #628]	@ (80053c8 <ESP_Upkeep+0x374>)
 8005154:	220f      	movs	r2, #15
 8005156:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005158:	f006 fd7e 	bl	800bc58 <HAL_GetTick>
 800515c:	0003      	movs	r3, r0
 800515e:	22fa      	movs	r2, #250	@ 0xfa
 8005160:	00d2      	lsls	r2, r2, #3
 8005162:	189a      	adds	r2, r3, r2
 8005164:	4ba4      	ldr	r3, [pc, #656]	@ (80053f8 <ESP_Upkeep+0x3a4>)
 8005166:	601a      	str	r2, [r3, #0]
      }
      break;
 8005168:	e303      	b.n	8005772 <ESP_Upkeep+0x71e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800516a:	2001      	movs	r0, #1
 800516c:	f7ff fb46 	bl	80047fc <DMA_ProcessBuffer>
 8005170:	0003      	movs	r3, r0
 8005172:	001a      	movs	r2, r3
 8005174:	4ba1      	ldr	r3, [pc, #644]	@ (80053fc <ESP_Upkeep+0x3a8>)
 8005176:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005178:	4ba0      	ldr	r3, [pc, #640]	@ (80053fc <ESP_Upkeep+0x3a8>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	1dbc      	adds	r4, r7, #6
 800517e:	2101      	movs	r1, #1
 8005180:	0018      	movs	r0, r3
 8005182:	f7ff fc49 	bl	8004a18 <ATCompare>
 8005186:	0003      	movs	r3, r0
 8005188:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800518a:	1dbb      	adds	r3, r7, #6
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d107      	bne.n	80051a2 <ESP_Upkeep+0x14e>
 8005192:	4b99      	ldr	r3, [pc, #612]	@ (80053f8 <ESP_Upkeep+0x3a4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	0018      	movs	r0, r3
 8005198:	f006 f966 	bl	800b468 <TimestampIsReached>
 800519c:	1e03      	subs	r3, r0, #0
 800519e:	d100      	bne.n	80051a2 <ESP_Upkeep+0x14e>
 80051a0:	e2e9      	b.n	8005776 <ESP_Upkeep+0x722>
          EspState = ESP_STATE_MODE_SELECT;
 80051a2:	4b89      	ldr	r3, [pc, #548]	@ (80053c8 <ESP_Upkeep+0x374>)
 80051a4:	220b      	movs	r2, #11
 80051a6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80051a8:	e2e5      	b.n	8005776 <ESP_Upkeep+0x722>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 80051aa:	4b95      	ldr	r3, [pc, #596]	@ (8005400 <ESP_Upkeep+0x3ac>)
 80051ac:	2209      	movs	r2, #9
 80051ae:	2114      	movs	r1, #20
 80051b0:	0018      	movs	r0, r3
 80051b2:	f016 fd97 	bl	801bce4 <memset>
      if(!InitIsDone || WifiReset){
 80051b6:	4b93      	ldr	r3, [pc, #588]	@ (8005404 <ESP_Upkeep+0x3b0>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	4053      	eors	r3, r2
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <ESP_Upkeep+0x178>
 80051c4:	4b90      	ldr	r3, [pc, #576]	@ (8005408 <ESP_Upkeep+0x3b4>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <ESP_Upkeep+0x1ae>
        memcpy(ATCommandArray, AT_INIT, 7);
 80051cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005400 <ESP_Upkeep+0x3ac>)
 80051ce:	4a8f      	ldr	r2, [pc, #572]	@ (800540c <ESP_Upkeep+0x3b8>)
 80051d0:	6811      	ldr	r1, [r2, #0]
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	8891      	ldrh	r1, [r2, #4]
 80051d6:	8099      	strh	r1, [r3, #4]
 80051d8:	7992      	ldrb	r2, [r2, #6]
 80051da:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80051dc:	4b7a      	ldr	r3, [pc, #488]	@ (80053c8 <ESP_Upkeep+0x374>)
 80051de:	2204      	movs	r2, #4
 80051e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80051e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005410 <ESP_Upkeep+0x3bc>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80051e8:	4b7a      	ldr	r3, [pc, #488]	@ (80053d4 <ESP_Upkeep+0x380>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80051ee:	4b88      	ldr	r3, [pc, #544]	@ (8005410 <ESP_Upkeep+0x3bc>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	001a      	movs	r2, r3
 80051f4:	4b82      	ldr	r3, [pc, #520]	@ (8005400 <ESP_Upkeep+0x3ac>)
 80051f6:	5c9a      	ldrb	r2, [r3, r2]
 80051f8:	4b75      	ldr	r3, [pc, #468]	@ (80053d0 <ESP_Upkeep+0x37c>)
 80051fa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80051fc:	4b76      	ldr	r3, [pc, #472]	@ (80053d8 <ESP_Upkeep+0x384>)
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8005202:	4b80      	ldr	r3, [pc, #512]	@ (8005404 <ESP_Upkeep+0x3b0>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01f      	beq.n	800524a <ESP_Upkeep+0x1f6>
 800520a:	4b82      	ldr	r3, [pc, #520]	@ (8005414 <ESP_Upkeep+0x3c0>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2201      	movs	r2, #1
 8005210:	4053      	eors	r3, r2
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d018      	beq.n	800524a <ESP_Upkeep+0x1f6>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005218:	4b79      	ldr	r3, [pc, #484]	@ (8005400 <ESP_Upkeep+0x3ac>)
 800521a:	4a7f      	ldr	r2, [pc, #508]	@ (8005418 <ESP_Upkeep+0x3c4>)
 800521c:	6811      	ldr	r1, [r2, #0]
 800521e:	6019      	str	r1, [r3, #0]
 8005220:	8892      	ldrh	r2, [r2, #4]
 8005222:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005224:	4b68      	ldr	r3, [pc, #416]	@ (80053c8 <ESP_Upkeep+0x374>)
 8005226:	2204      	movs	r2, #4
 8005228:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800522a:	4b79      	ldr	r3, [pc, #484]	@ (8005410 <ESP_Upkeep+0x3bc>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005230:	4b68      	ldr	r3, [pc, #416]	@ (80053d4 <ESP_Upkeep+0x380>)
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005236:	4b76      	ldr	r3, [pc, #472]	@ (8005410 <ESP_Upkeep+0x3bc>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	001a      	movs	r2, r3
 800523c:	4b70      	ldr	r3, [pc, #448]	@ (8005400 <ESP_Upkeep+0x3ac>)
 800523e:	5c9a      	ldrb	r2, [r3, r2]
 8005240:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <ESP_Upkeep+0x37c>)
 8005242:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005244:	4b64      	ldr	r3, [pc, #400]	@ (80053d8 <ESP_Upkeep+0x384>)
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800524a:	4b6e      	ldr	r3, [pc, #440]	@ (8005404 <ESP_Upkeep+0x3b0>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d021      	beq.n	8005296 <ESP_Upkeep+0x242>
 8005252:	4b70      	ldr	r3, [pc, #448]	@ (8005414 <ESP_Upkeep+0x3c0>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01d      	beq.n	8005296 <ESP_Upkeep+0x242>
 800525a:	4b70      	ldr	r3, [pc, #448]	@ (800541c <ESP_Upkeep+0x3c8>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2201      	movs	r2, #1
 8005260:	4053      	eors	r3, r2
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d016      	beq.n	8005296 <ESP_Upkeep+0x242>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005268:	4b6d      	ldr	r3, [pc, #436]	@ (8005420 <ESP_Upkeep+0x3cc>)
 800526a:	881a      	ldrh	r2, [r3, #0]
 800526c:	4b64      	ldr	r3, [pc, #400]	@ (8005400 <ESP_Upkeep+0x3ac>)
 800526e:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005270:	4b55      	ldr	r3, [pc, #340]	@ (80053c8 <ESP_Upkeep+0x374>)
 8005272:	2204      	movs	r2, #4
 8005274:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005276:	4b66      	ldr	r3, [pc, #408]	@ (8005410 <ESP_Upkeep+0x3bc>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800527c:	4b55      	ldr	r3, [pc, #340]	@ (80053d4 <ESP_Upkeep+0x380>)
 800527e:	2204      	movs	r2, #4
 8005280:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005282:	4b63      	ldr	r3, [pc, #396]	@ (8005410 <ESP_Upkeep+0x3bc>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	001a      	movs	r2, r3
 8005288:	4b5d      	ldr	r3, [pc, #372]	@ (8005400 <ESP_Upkeep+0x3ac>)
 800528a:	5c9a      	ldrb	r2, [r3, r2]
 800528c:	4b50      	ldr	r3, [pc, #320]	@ (80053d0 <ESP_Upkeep+0x37c>)
 800528e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005290:	4b51      	ldr	r3, [pc, #324]	@ (80053d8 <ESP_Upkeep+0x384>)
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005296:	4b5b      	ldr	r3, [pc, #364]	@ (8005404 <ESP_Upkeep+0x3b0>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d035      	beq.n	800530a <ESP_Upkeep+0x2b6>
 800529e:	4b5d      	ldr	r3, [pc, #372]	@ (8005414 <ESP_Upkeep+0x3c0>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d031      	beq.n	800530a <ESP_Upkeep+0x2b6>
 80052a6:	4b5d      	ldr	r3, [pc, #372]	@ (800541c <ESP_Upkeep+0x3c8>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d02d      	beq.n	800530a <ESP_Upkeep+0x2b6>
 80052ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005424 <ESP_Upkeep+0x3d0>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4053      	eors	r3, r2
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d026      	beq.n	800530a <ESP_Upkeep+0x2b6>
        memcpy(ATCommandArray, AT_SEND, 3);
 80052bc:	4b50      	ldr	r3, [pc, #320]	@ (8005400 <ESP_Upkeep+0x3ac>)
 80052be:	4a5a      	ldr	r2, [pc, #360]	@ (8005428 <ESP_Upkeep+0x3d4>)
 80052c0:	8811      	ldrh	r1, [r2, #0]
 80052c2:	8019      	strh	r1, [r3, #0]
 80052c4:	7892      	ldrb	r2, [r2, #2]
 80052c6:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80052c8:	4b3f      	ldr	r3, [pc, #252]	@ (80053c8 <ESP_Upkeep+0x374>)
 80052ca:	2204      	movs	r2, #4
 80052cc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052ce:	4b50      	ldr	r3, [pc, #320]	@ (8005410 <ESP_Upkeep+0x3bc>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80052d4:	4b3f      	ldr	r3, [pc, #252]	@ (80053d4 <ESP_Upkeep+0x380>)
 80052d6:	2202      	movs	r2, #2
 80052d8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80052da:	f006 fcbd 	bl	800bc58 <HAL_GetTick>
 80052de:	0002      	movs	r2, r0
 80052e0:	4b52      	ldr	r3, [pc, #328]	@ (800542c <ESP_Upkeep+0x3d8>)
 80052e2:	601a      	str	r2, [r3, #0]
        printf("start van HAL_GetTick(): %lu\r\n", start);
 80052e4:	4b51      	ldr	r3, [pc, #324]	@ (800542c <ESP_Upkeep+0x3d8>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b51      	ldr	r3, [pc, #324]	@ (8005430 <ESP_Upkeep+0x3dc>)
 80052ea:	0011      	movs	r1, r2
 80052ec:	0018      	movs	r0, r3
 80052ee:	f016 fc45 	bl	801bb7c <iprintf>
        SetESPIndicator();
 80052f2:	f005 fa93 	bl	800a81c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80052f6:	4b46      	ldr	r3, [pc, #280]	@ (8005410 <ESP_Upkeep+0x3bc>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	001a      	movs	r2, r3
 80052fc:	4b40      	ldr	r3, [pc, #256]	@ (8005400 <ESP_Upkeep+0x3ac>)
 80052fe:	5c9a      	ldrb	r2, [r3, r2]
 8005300:	4b33      	ldr	r3, [pc, #204]	@ (80053d0 <ESP_Upkeep+0x37c>)
 8005302:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005304:	4b34      	ldr	r3, [pc, #208]	@ (80053d8 <ESP_Upkeep+0x384>)
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 800530a:	4b4a      	ldr	r3, [pc, #296]	@ (8005434 <ESP_Upkeep+0x3e0>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01a      	beq.n	8005348 <ESP_Upkeep+0x2f4>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005312:	4b3b      	ldr	r3, [pc, #236]	@ (8005400 <ESP_Upkeep+0x3ac>)
 8005314:	4a48      	ldr	r2, [pc, #288]	@ (8005438 <ESP_Upkeep+0x3e4>)
 8005316:	6811      	ldr	r1, [r2, #0]
 8005318:	6019      	str	r1, [r3, #0]
 800531a:	7912      	ldrb	r2, [r2, #4]
 800531c:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800531e:	4b2a      	ldr	r3, [pc, #168]	@ (80053c8 <ESP_Upkeep+0x374>)
 8005320:	2204      	movs	r2, #4
 8005322:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005324:	4b3a      	ldr	r3, [pc, #232]	@ (8005410 <ESP_Upkeep+0x3bc>)
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 800532a:	4b2a      	ldr	r3, [pc, #168]	@ (80053d4 <ESP_Upkeep+0x380>)
 800532c:	2203      	movs	r2, #3
 800532e:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005330:	f005 fa74 	bl	800a81c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005334:	4b36      	ldr	r3, [pc, #216]	@ (8005410 <ESP_Upkeep+0x3bc>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	001a      	movs	r2, r3
 800533a:	4b31      	ldr	r3, [pc, #196]	@ (8005400 <ESP_Upkeep+0x3ac>)
 800533c:	5c9a      	ldrb	r2, [r3, r2]
 800533e:	4b24      	ldr	r3, [pc, #144]	@ (80053d0 <ESP_Upkeep+0x37c>)
 8005340:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005342:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <ESP_Upkeep+0x384>)
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005348:	4b2e      	ldr	r3, [pc, #184]	@ (8005404 <ESP_Upkeep+0x3b0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d100      	bne.n	8005352 <ESP_Upkeep+0x2fe>
 8005350:	e213      	b.n	800577a <ESP_Upkeep+0x726>
 8005352:	4b30      	ldr	r3, [pc, #192]	@ (8005414 <ESP_Upkeep+0x3c0>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d100      	bne.n	800535c <ESP_Upkeep+0x308>
 800535a:	e20e      	b.n	800577a <ESP_Upkeep+0x726>
 800535c:	4b2f      	ldr	r3, [pc, #188]	@ (800541c <ESP_Upkeep+0x3c8>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d100      	bne.n	8005366 <ESP_Upkeep+0x312>
 8005364:	e209      	b.n	800577a <ESP_Upkeep+0x726>
 8005366:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <ESP_Upkeep+0x3d0>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d100      	bne.n	8005370 <ESP_Upkeep+0x31c>
 800536e:	e204      	b.n	800577a <ESP_Upkeep+0x726>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005370:	4b32      	ldr	r3, [pc, #200]	@ (800543c <ESP_Upkeep+0x3e8>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <ESP_Upkeep+0x3ac>)
 8005376:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005378:	4b13      	ldr	r3, [pc, #76]	@ (80053c8 <ESP_Upkeep+0x374>)
 800537a:	2204      	movs	r2, #4
 800537c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800537e:	4b24      	ldr	r3, [pc, #144]	@ (8005410 <ESP_Upkeep+0x3bc>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005384:	4b13      	ldr	r3, [pc, #76]	@ (80053d4 <ESP_Upkeep+0x380>)
 8005386:	2205      	movs	r2, #5
 8005388:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800538a:	f005 fa47 	bl	800a81c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800538e:	4b20      	ldr	r3, [pc, #128]	@ (8005410 <ESP_Upkeep+0x3bc>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	001a      	movs	r2, r3
 8005394:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <ESP_Upkeep+0x3ac>)
 8005396:	5c9a      	ldrb	r2, [r3, r2]
 8005398:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <ESP_Upkeep+0x37c>)
 800539a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800539c:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <ESP_Upkeep+0x384>)
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
      }
    break;
 80053a2:	e1ea      	b.n	800577a <ESP_Upkeep+0x726>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 80053a4:	4b0a      	ldr	r3, [pc, #40]	@ (80053d0 <ESP_Upkeep+0x37c>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	1dfc      	adds	r4, r7, #7
 80053aa:	0018      	movs	r0, r3
 80053ac:	f7ff fb76 	bl	8004a9c <AT_Send>
 80053b0:	0003      	movs	r3, r0
 80053b2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d100      	bne.n	80053be <ESP_Upkeep+0x36a>
 80053bc:	e1df      	b.n	800577e <ESP_Upkeep+0x72a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80053be:	4b02      	ldr	r3, [pc, #8]	@ (80053c8 <ESP_Upkeep+0x374>)
 80053c0:	2203      	movs	r2, #3
 80053c2:	701a      	strb	r2, [r3, #0]
        }
    break;
 80053c4:	e1db      	b.n	800577e <ESP_Upkeep+0x72a>
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	2000002c 	.word	0x2000002c
 80053cc:	20000001 	.word	0x20000001
 80053d0:	20000996 	.word	0x20000996
 80053d4:	20000997 	.word	0x20000997
 80053d8:	20000995 	.word	0x20000995
 80053dc:	0801f474 	.word	0x0801f474
 80053e0:	0801fed0 	.word	0x0801fed0
 80053e4:	2000054c 	.word	0x2000054c
 80053e8:	50000800 	.word	0x50000800
 80053ec:	50001c00 	.word	0x50001c00
 80053f0:	2000098c 	.word	0x2000098c
 80053f4:	2000044c 	.word	0x2000044c
 80053f8:	20000a84 	.word	0x20000a84
 80053fc:	2000002e 	.word	0x2000002e
 8005400:	20000980 	.word	0x20000980
 8005404:	2000054d 	.word	0x2000054d
 8005408:	2000054e 	.word	0x2000054e
 800540c:	20000004 	.word	0x20000004
 8005410:	2000098a 	.word	0x2000098a
 8005414:	20000550 	.word	0x20000550
 8005418:	20000014 	.word	0x20000014
 800541c:	20000551 	.word	0x20000551
 8005420:	20000010 	.word	0x20000010
 8005424:	20000553 	.word	0x20000553
 8005428:	2000000c 	.word	0x2000000c
 800542c:	20000560 	.word	0x20000560
 8005430:	0801f4a0 	.word	0x0801f4a0
 8005434:	2000054f 	.word	0x2000054f
 8005438:	2000001c 	.word	0x2000001c
 800543c:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005440:	4bd2      	ldr	r3, [pc, #840]	@ (800578c <ESP_Upkeep+0x738>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	0018      	movs	r0, r3
 8005446:	f006 f80f 	bl	800b468 <TimestampIsReached>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d100      	bne.n	8005450 <ESP_Upkeep+0x3fc>
 800544e:	e198      	b.n	8005782 <ESP_Upkeep+0x72e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005450:	4bcf      	ldr	r3, [pc, #828]	@ (8005790 <ESP_Upkeep+0x73c>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	0018      	movs	r0, r3
 8005456:	f7ff f9d1 	bl	80047fc <DMA_ProcessBuffer>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4bcd      	ldr	r3, [pc, #820]	@ (8005794 <ESP_Upkeep+0x740>)
 8005460:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005462:	4bcc      	ldr	r3, [pc, #816]	@ (8005794 <ESP_Upkeep+0x740>)
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	4bca      	ldr	r3, [pc, #808]	@ (8005790 <ESP_Upkeep+0x73c>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	1d7c      	adds	r4, r7, #5
 800546c:	0019      	movs	r1, r3
 800546e:	0010      	movs	r0, r2
 8005470:	f7ff fad2 	bl	8004a18 <ATCompare>
 8005474:	0003      	movs	r3, r0
 8005476:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005478:	4bc6      	ldr	r3, [pc, #792]	@ (8005794 <ESP_Upkeep+0x740>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10f      	bne.n	80054a0 <ESP_Upkeep+0x44c>
          if(ATCommand == AT_SENDDATA){
 8005480:	4bc5      	ldr	r3, [pc, #788]	@ (8005798 <ESP_Upkeep+0x744>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b0f      	cmp	r3, #15
 8005486:	d108      	bne.n	800549a <ESP_Upkeep+0x446>
            ATCommand = AT_HTTPCPOST;
 8005488:	4bc3      	ldr	r3, [pc, #780]	@ (8005798 <ESP_Upkeep+0x744>)
 800548a:	220e      	movs	r2, #14
 800548c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800548e:	4bc0      	ldr	r3, [pc, #768]	@ (8005790 <ESP_Upkeep+0x73c>)
 8005490:	2202      	movs	r2, #2
 8005492:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005494:	4bc1      	ldr	r3, [pc, #772]	@ (800579c <ESP_Upkeep+0x748>)
 8005496:	2201      	movs	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800549a:	4bc1      	ldr	r3, [pc, #772]	@ (80057a0 <ESP_Upkeep+0x74c>)
 800549c:	2204      	movs	r2, #4
 800549e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80054a0:	4bbc      	ldr	r3, [pc, #752]	@ (8005794 <ESP_Upkeep+0x740>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d106      	bne.n	80054b6 <ESP_Upkeep+0x462>
          ESPTimeStamp = HAL_GetTick() + 10;
 80054a8:	f006 fbd6 	bl	800bc58 <HAL_GetTick>
 80054ac:	0003      	movs	r3, r0
 80054ae:	330a      	adds	r3, #10
 80054b0:	001a      	movs	r2, r3
 80054b2:	4bb6      	ldr	r3, [pc, #728]	@ (800578c <ESP_Upkeep+0x738>)
 80054b4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80054b6:	4bb7      	ldr	r3, [pc, #732]	@ (8005794 <ESP_Upkeep+0x740>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b0a      	cmp	r3, #10
 80054bc:	d106      	bne.n	80054cc <ESP_Upkeep+0x478>
          ESPTimeStamp = HAL_GetTick() + 10;
 80054be:	f006 fbcb 	bl	800bc58 <HAL_GetTick>
 80054c2:	0003      	movs	r3, r0
 80054c4:	330a      	adds	r3, #10
 80054c6:	001a      	movs	r2, r3
 80054c8:	4bb0      	ldr	r3, [pc, #704]	@ (800578c <ESP_Upkeep+0x738>)
 80054ca:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80054cc:	4bb1      	ldr	r3, [pc, #708]	@ (8005794 <ESP_Upkeep+0x740>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	d116      	bne.n	8005502 <ESP_Upkeep+0x4ae>
          if(ATCommand != AT_SENDDATA){
 80054d4:	4bb0      	ldr	r3, [pc, #704]	@ (8005798 <ESP_Upkeep+0x744>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b0f      	cmp	r3, #15
 80054da:	d003      	beq.n	80054e4 <ESP_Upkeep+0x490>
            EspState = ESP_STATE_SEND;
 80054dc:	4bb0      	ldr	r3, [pc, #704]	@ (80057a0 <ESP_Upkeep+0x74c>)
 80054de:	2204      	movs	r2, #4
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e00e      	b.n	8005502 <ESP_Upkeep+0x4ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 80054e4:	4bac      	ldr	r3, [pc, #688]	@ (8005798 <ESP_Upkeep+0x744>)
 80054e6:	220e      	movs	r2, #14
 80054e8:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 80054ea:	4bac      	ldr	r3, [pc, #688]	@ (800579c <ESP_Upkeep+0x748>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	4baa      	ldr	r3, [pc, #680]	@ (800579c <ESP_Upkeep+0x748>)
 80054f4:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80054f6:	4ba6      	ldr	r3, [pc, #664]	@ (8005790 <ESP_Upkeep+0x73c>)
 80054f8:	2202      	movs	r2, #2
 80054fa:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80054fc:	4ba8      	ldr	r3, [pc, #672]	@ (80057a0 <ESP_Upkeep+0x74c>)
 80054fe:	2204      	movs	r2, #4
 8005500:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005502:	1d7b      	adds	r3, r7, #5
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d100      	bne.n	800550c <ESP_Upkeep+0x4b8>
 800550a:	e13a      	b.n	8005782 <ESP_Upkeep+0x72e>
          EspState = ESP_STATE_NEXT_AT;
 800550c:	4ba4      	ldr	r3, [pc, #656]	@ (80057a0 <ESP_Upkeep+0x74c>)
 800550e:	2205      	movs	r2, #5
 8005510:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005512:	e136      	b.n	8005782 <ESP_Upkeep+0x72e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005514:	4ba1      	ldr	r3, [pc, #644]	@ (800579c <ESP_Upkeep+0x748>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	3301      	adds	r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	4b9f      	ldr	r3, [pc, #636]	@ (800579c <ESP_Upkeep+0x748>)
 800551e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005520:	4b9e      	ldr	r3, [pc, #632]	@ (800579c <ESP_Upkeep+0x748>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	001a      	movs	r2, r3
 8005526:	4b9f      	ldr	r3, [pc, #636]	@ (80057a4 <ESP_Upkeep+0x750>)
 8005528:	5c9a      	ldrb	r2, [r3, r2]
 800552a:	4b9b      	ldr	r3, [pc, #620]	@ (8005798 <ESP_Upkeep+0x744>)
 800552c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 800552e:	4b9a      	ldr	r3, [pc, #616]	@ (8005798 <ESP_Upkeep+0x744>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d102      	bne.n	800553c <ESP_Upkeep+0x4e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005536:	4b96      	ldr	r3, [pc, #600]	@ (8005790 <ESP_Upkeep+0x73c>)
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 800553c:	4b96      	ldr	r3, [pc, #600]	@ (8005798 <ESP_Upkeep+0x744>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b0e      	cmp	r3, #14
 8005542:	d102      	bne.n	800554a <ESP_Upkeep+0x4f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005544:	4b92      	ldr	r3, [pc, #584]	@ (8005790 <ESP_Upkeep+0x73c>)
 8005546:	2202      	movs	r2, #2
 8005548:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 800554a:	4b93      	ldr	r3, [pc, #588]	@ (8005798 <ESP_Upkeep+0x744>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b0e      	cmp	r3, #14
 8005550:	d006      	beq.n	8005560 <ESP_Upkeep+0x50c>
 8005552:	4b91      	ldr	r3, [pc, #580]	@ (8005798 <ESP_Upkeep+0x744>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d002      	beq.n	8005560 <ESP_Upkeep+0x50c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800555a:	4b8d      	ldr	r3, [pc, #564]	@ (8005790 <ESP_Upkeep+0x73c>)
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005560:	4b8d      	ldr	r3, [pc, #564]	@ (8005798 <ESP_Upkeep+0x744>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b11      	cmp	r3, #17
 8005566:	d102      	bne.n	800556e <ESP_Upkeep+0x51a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005568:	4b89      	ldr	r3, [pc, #548]	@ (8005790 <ESP_Upkeep+0x73c>)
 800556a:	2205      	movs	r2, #5
 800556c:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 800556e:	4b8c      	ldr	r3, [pc, #560]	@ (80057a0 <ESP_Upkeep+0x74c>)
 8005570:	2204      	movs	r2, #4
 8005572:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005574:	4b88      	ldr	r3, [pc, #544]	@ (8005798 <ESP_Upkeep+0x744>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b14      	cmp	r3, #20
 800557a:	d000      	beq.n	800557e <ESP_Upkeep+0x52a>
 800557c:	e103      	b.n	8005786 <ESP_Upkeep+0x732>
        if(Mode == AT_MODE_SEND){
 800557e:	4b8a      	ldr	r3, [pc, #552]	@ (80057a8 <ESP_Upkeep+0x754>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d124      	bne.n	80055d0 <ESP_Upkeep+0x57c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005586:	f006 fb67 	bl	800bc58 <HAL_GetTick>
 800558a:	0003      	movs	r3, r0
 800558c:	4a87      	ldr	r2, [pc, #540]	@ (80057ac <ESP_Upkeep+0x758>)
 800558e:	189a      	adds	r2, r3, r2
 8005590:	4b7e      	ldr	r3, [pc, #504]	@ (800578c <ESP_Upkeep+0x738>)
 8005592:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005594:	f005 f95a 	bl	800a84c <ResetESPIndicator>
          clearDMABuffer();
 8005598:	f7ff fa30 	bl	80049fc <clearDMABuffer>
          stop = HAL_GetTick();
 800559c:	f006 fb5c 	bl	800bc58 <HAL_GetTick>
 80055a0:	0002      	movs	r2, r0
 80055a2:	4b83      	ldr	r3, [pc, #524]	@ (80057b0 <ESP_Upkeep+0x75c>)
 80055a4:	601a      	str	r2, [r3, #0]
          printf("stop van HAL_GetTick(): %lu\r\n", stop);
 80055a6:	4b82      	ldr	r3, [pc, #520]	@ (80057b0 <ESP_Upkeep+0x75c>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b82      	ldr	r3, [pc, #520]	@ (80057b4 <ESP_Upkeep+0x760>)
 80055ac:	0011      	movs	r1, r2
 80055ae:	0018      	movs	r0, r3
 80055b0:	f016 fae4 	bl	801bb7c <iprintf>
          Debug("Message send in %lu ms", (stop-start));
 80055b4:	4b7e      	ldr	r3, [pc, #504]	@ (80057b0 <ESP_Upkeep+0x75c>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b7f      	ldr	r3, [pc, #508]	@ (80057b8 <ESP_Upkeep+0x764>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	4a7f      	ldr	r2, [pc, #508]	@ (80057bc <ESP_Upkeep+0x768>)
 80055c0:	497f      	ldr	r1, [pc, #508]	@ (80057c0 <ESP_Upkeep+0x76c>)
 80055c2:	2003      	movs	r0, #3
 80055c4:	f005 ffa6 	bl	800b514 <CreateLine>
          EspState = ESP_STATE_DEINIT;
 80055c8:	4b75      	ldr	r3, [pc, #468]	@ (80057a0 <ESP_Upkeep+0x74c>)
 80055ca:	220d      	movs	r2, #13
 80055cc:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80055ce:	e0da      	b.n	8005786 <ESP_Upkeep+0x732>
        else if (Mode == AT_MODE_GETTIME) {
 80055d0:	4b75      	ldr	r3, [pc, #468]	@ (80057a8 <ESP_Upkeep+0x754>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d125      	bne.n	8005624 <ESP_Upkeep+0x5d0>
            setTime = false;
 80055d8:	4b7a      	ldr	r3, [pc, #488]	@ (80057c4 <ESP_Upkeep+0x770>)
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 80055de:	f006 fb3b 	bl	800bc58 <HAL_GetTick>
 80055e2:	0003      	movs	r3, r0
 80055e4:	4a78      	ldr	r2, [pc, #480]	@ (80057c8 <ESP_Upkeep+0x774>)
 80055e6:	189a      	adds	r2, r3, r2
 80055e8:	4b78      	ldr	r3, [pc, #480]	@ (80057cc <ESP_Upkeep+0x778>)
 80055ea:	601a      	str	r2, [r3, #0]
            Debug("NTP should be called at: %lu", ESPNTPTimeStamp);
 80055ec:	4b77      	ldr	r3, [pc, #476]	@ (80057cc <ESP_Upkeep+0x778>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a77      	ldr	r2, [pc, #476]	@ (80057d0 <ESP_Upkeep+0x77c>)
 80055f2:	4973      	ldr	r1, [pc, #460]	@ (80057c0 <ESP_Upkeep+0x76c>)
 80055f4:	2003      	movs	r0, #3
 80055f6:	f005 ff8d 	bl	800b514 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 80055fa:	4b76      	ldr	r3, [pc, #472]	@ (80057d4 <ESP_Upkeep+0x780>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b63      	ldr	r3, [pc, #396]	@ (800578c <ESP_Upkeep+0x738>)
 8005600:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005602:	f005 f923 	bl	800a84c <ResetESPIndicator>
            clearDMABuffer();
 8005606:	f7ff f9f9 	bl	80049fc <clearDMABuffer>
            Debug("time synchronized by NTP");
 800560a:	4a73      	ldr	r2, [pc, #460]	@ (80057d8 <ESP_Upkeep+0x784>)
 800560c:	4b6c      	ldr	r3, [pc, #432]	@ (80057c0 <ESP_Upkeep+0x76c>)
 800560e:	0019      	movs	r1, r3
 8005610:	2003      	movs	r0, #3
 8005612:	f005 ff7f 	bl	800b514 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005616:	4b62      	ldr	r3, [pc, #392]	@ (80057a0 <ESP_Upkeep+0x74c>)
 8005618:	220d      	movs	r2, #13
 800561a:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 800561c:	4b62      	ldr	r3, [pc, #392]	@ (80057a8 <ESP_Upkeep+0x754>)
 800561e:	2202      	movs	r2, #2
 8005620:	701a      	strb	r2, [r3, #0]
    break;
 8005622:	e0b0      	b.n	8005786 <ESP_Upkeep+0x732>
          EspState = ESP_STATE_RESET;
 8005624:	4b5e      	ldr	r3, [pc, #376]	@ (80057a0 <ESP_Upkeep+0x74c>)
 8005626:	2209      	movs	r2, #9
 8005628:	701a      	strb	r2, [r3, #0]
    break;
 800562a:	e0ac      	b.n	8005786 <ESP_Upkeep+0x732>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 800562c:	4b6b      	ldr	r3, [pc, #428]	@ (80057dc <ESP_Upkeep+0x788>)
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005632:	4b6b      	ldr	r3, [pc, #428]	@ (80057e0 <ESP_Upkeep+0x78c>)
 8005634:	2200      	movs	r2, #0
 8005636:	2101      	movs	r1, #1
 8005638:	0018      	movs	r0, r3
 800563a:	f007 fd6c 	bl	800d116 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800563e:	2001      	movs	r0, #1
 8005640:	f006 fb14 	bl	800bc6c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005644:	2380      	movs	r3, #128	@ 0x80
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	4866      	ldr	r0, [pc, #408]	@ (80057e4 <ESP_Upkeep+0x790>)
 800564a:	2200      	movs	r2, #0
 800564c:	0019      	movs	r1, r3
 800564e:	f007 fd62 	bl	800d116 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005652:	2001      	movs	r0, #1
 8005654:	f006 fb0a 	bl	800bc6c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005658:	4b61      	ldr	r3, [pc, #388]	@ (80057e0 <ESP_Upkeep+0x78c>)
 800565a:	2200      	movs	r2, #0
 800565c:	2102      	movs	r1, #2
 800565e:	0018      	movs	r0, r3
 8005660:	f007 fd59 	bl	800d116 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005664:	4b4e      	ldr	r3, [pc, #312]	@ (80057a0 <ESP_Upkeep+0x74c>)
 8005666:	2209      	movs	r2, #9
 8005668:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 800566a:	2001      	movs	r0, #1
 800566c:	f006 fafe 	bl	800bc6c <HAL_Delay>
      break;
 8005670:	e0cd      	b.n	800580e <ESP_Upkeep+0x7ba>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005672:	4b46      	ldr	r3, [pc, #280]	@ (800578c <ESP_Upkeep+0x738>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	0018      	movs	r0, r3
 8005678:	f005 fef6 	bl	800b468 <TimestampIsReached>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d103      	bne.n	8005688 <ESP_Upkeep+0x634>
 8005680:	4b59      	ldr	r3, [pc, #356]	@ (80057e8 <ESP_Upkeep+0x794>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02f      	beq.n	80056e8 <ESP_Upkeep+0x694>
        if(Mode == AT_MODE_INIT){
 8005688:	4b47      	ldr	r3, [pc, #284]	@ (80057a8 <ESP_Upkeep+0x754>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <ESP_Upkeep+0x648>
          InitIsDone = true;
 8005690:	4b56      	ldr	r3, [pc, #344]	@ (80057ec <ESP_Upkeep+0x798>)
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005696:	4b42      	ldr	r3, [pc, #264]	@ (80057a0 <ESP_Upkeep+0x74c>)
 8005698:	220b      	movs	r2, #11
 800569a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 800569c:	4b42      	ldr	r3, [pc, #264]	@ (80057a8 <ESP_Upkeep+0x754>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d108      	bne.n	80056b6 <ESP_Upkeep+0x662>
          ConnectionMade = true;
 80056a4:	4b52      	ldr	r3, [pc, #328]	@ (80057f0 <ESP_Upkeep+0x79c>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80056aa:	4b52      	ldr	r3, [pc, #328]	@ (80057f4 <ESP_Upkeep+0x7a0>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80056b0:	4b3b      	ldr	r3, [pc, #236]	@ (80057a0 <ESP_Upkeep+0x74c>)
 80056b2:	220b      	movs	r2, #11
 80056b4:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80056b6:	4b3c      	ldr	r3, [pc, #240]	@ (80057a8 <ESP_Upkeep+0x754>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d102      	bne.n	80056c4 <ESP_Upkeep+0x670>
          EspState = ESP_STATE_INIT;
 80056be:	4b38      	ldr	r3, [pc, #224]	@ (80057a0 <ESP_Upkeep+0x74c>)
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 80056c4:	4b38      	ldr	r3, [pc, #224]	@ (80057a8 <ESP_Upkeep+0x754>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d102      	bne.n	80056d2 <ESP_Upkeep+0x67e>
          EspState = ESP_STATE_CONFIG;
 80056cc:	4b34      	ldr	r3, [pc, #208]	@ (80057a0 <ESP_Upkeep+0x74c>)
 80056ce:	220e      	movs	r2, #14
 80056d0:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 80056d2:	4b35      	ldr	r3, [pc, #212]	@ (80057a8 <ESP_Upkeep+0x754>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d127      	bne.n	800572a <ESP_Upkeep+0x6d6>
          EspState = ESP_STATE_MODE_SELECT;
 80056da:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <ESP_Upkeep+0x74c>)
 80056dc:	220b      	movs	r2, #11
 80056de:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 80056e0:	4b45      	ldr	r3, [pc, #276]	@ (80057f8 <ESP_Upkeep+0x7a4>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 80056e6:	e020      	b.n	800572a <ESP_Upkeep+0x6d6>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 80056e8:	4b38      	ldr	r3, [pc, #224]	@ (80057cc <ESP_Upkeep+0x778>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f005 febb 	bl	800b468 <TimestampIsReached>
 80056f2:	1e03      	subs	r3, r0, #0
 80056f4:	d100      	bne.n	80056f8 <ESP_Upkeep+0x6a4>
 80056f6:	e089      	b.n	800580c <ESP_Upkeep+0x7b8>
        if(Mode == AT_MODE_SEND ) {
 80056f8:	4b2b      	ldr	r3, [pc, #172]	@ (80057a8 <ESP_Upkeep+0x754>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d000      	beq.n	8005702 <ESP_Upkeep+0x6ae>
 8005700:	e084      	b.n	800580c <ESP_Upkeep+0x7b8>
            Mode = AT_MODE_GETTIME;
 8005702:	4b29      	ldr	r3, [pc, #164]	@ (80057a8 <ESP_Upkeep+0x754>)
 8005704:	2205      	movs	r2, #5
 8005706:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005708:	4b25      	ldr	r3, [pc, #148]	@ (80057a0 <ESP_Upkeep+0x74c>)
 800570a:	2202      	movs	r2, #2
 800570c:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 800570e:	4b1f      	ldr	r3, [pc, #124]	@ (800578c <ESP_Upkeep+0x738>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b30      	ldr	r3, [pc, #192]	@ (80057d4 <ESP_Upkeep+0x780>)
 8005714:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005716:	4b2b      	ldr	r3, [pc, #172]	@ (80057c4 <ESP_Upkeep+0x770>)
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 800571c:	4a37      	ldr	r2, [pc, #220]	@ (80057fc <ESP_Upkeep+0x7a8>)
 800571e:	4b28      	ldr	r3, [pc, #160]	@ (80057c0 <ESP_Upkeep+0x76c>)
 8005720:	0019      	movs	r1, r3
 8005722:	2003      	movs	r0, #3
 8005724:	f005 fef6 	bl	800b514 <CreateLine>
        }
      }
      break;
 8005728:	e070      	b.n	800580c <ESP_Upkeep+0x7b8>
 800572a:	e06f      	b.n	800580c <ESP_Upkeep+0x7b8>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 800572c:	4a34      	ldr	r2, [pc, #208]	@ (8005800 <ESP_Upkeep+0x7ac>)
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <ESP_Upkeep+0x76c>)
 8005730:	0019      	movs	r1, r3
 8005732:	2003      	movs	r0, #3
 8005734:	f005 feee 	bl	800b514 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005738:	f013 f9bc 	bl	8018ab4 <GetUsbRxPointer>
 800573c:	0003      	movs	r3, r0
 800573e:	0018      	movs	r0, r3
 8005740:	f000 f8e0 	bl	8005904 <Process_PC_Config>
      break;
 8005744:	e063      	b.n	800580e <ESP_Upkeep+0x7ba>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005746:	4a2f      	ldr	r2, [pc, #188]	@ (8005804 <ESP_Upkeep+0x7b0>)
 8005748:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <ESP_Upkeep+0x76c>)
 800574a:	0019      	movs	r1, r3
 800574c:	2003      	movs	r0, #3
 800574e:	f005 fee1 	bl	800b514 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005752:	4b13      	ldr	r3, [pc, #76]	@ (80057a0 <ESP_Upkeep+0x74c>)
 8005754:	2202      	movs	r2, #2
 8005756:	701a      	strb	r2, [r3, #0]
      break;
 8005758:	e059      	b.n	800580e <ESP_Upkeep+0x7ba>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 800575a:	4a2b      	ldr	r2, [pc, #172]	@ (8005808 <ESP_Upkeep+0x7b4>)
 800575c:	4b18      	ldr	r3, [pc, #96]	@ (80057c0 <ESP_Upkeep+0x76c>)
 800575e:	0019      	movs	r1, r3
 8005760:	2003      	movs	r0, #3
 8005762:	f005 fed7 	bl	800b514 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005766:	4b0e      	ldr	r3, [pc, #56]	@ (80057a0 <ESP_Upkeep+0x74c>)
 8005768:	2207      	movs	r2, #7
 800576a:	701a      	strb	r2, [r3, #0]
      break;
 800576c:	e04f      	b.n	800580e <ESP_Upkeep+0x7ba>
      break;
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	e04d      	b.n	800580e <ESP_Upkeep+0x7ba>
      break;
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	e04b      	b.n	800580e <ESP_Upkeep+0x7ba>
        break;
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	e049      	b.n	800580e <ESP_Upkeep+0x7ba>
    break;
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	e047      	b.n	800580e <ESP_Upkeep+0x7ba>
    break;
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	e045      	b.n	800580e <ESP_Upkeep+0x7ba>
      break;
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	e043      	b.n	800580e <ESP_Upkeep+0x7ba>
    break;
 8005786:	46c0      	nop			@ (mov r8, r8)
 8005788:	e041      	b.n	800580e <ESP_Upkeep+0x7ba>
 800578a:	46c0      	nop			@ (mov r8, r8)
 800578c:	2000098c 	.word	0x2000098c
 8005790:	20000995 	.word	0x20000995
 8005794:	2000002e 	.word	0x2000002e
 8005798:	20000996 	.word	0x20000996
 800579c:	2000098a 	.word	0x2000098a
 80057a0:	2000002c 	.word	0x2000002c
 80057a4:	20000980 	.word	0x20000980
 80057a8:	20000997 	.word	0x20000997
 80057ac:	000493e0 	.word	0x000493e0
 80057b0:	20000564 	.word	0x20000564
 80057b4:	0801f4c0 	.word	0x0801f4c0
 80057b8:	20000560 	.word	0x20000560
 80057bc:	0801f4e0 	.word	0x0801f4e0
 80057c0:	0801edb0 	.word	0x0801edb0
 80057c4:	20000553 	.word	0x20000553
 80057c8:	00dbba00 	.word	0x00dbba00
 80057cc:	20000028 	.word	0x20000028
 80057d0:	0801f4f8 	.word	0x0801f4f8
 80057d4:	20000990 	.word	0x20000990
 80057d8:	0801f518 	.word	0x0801f518
 80057dc:	2000054c 	.word	0x2000054c
 80057e0:	50001c00 	.word	0x50001c00
 80057e4:	50000800 	.word	0x50000800
 80057e8:	2000054f 	.word	0x2000054f
 80057ec:	2000054d 	.word	0x2000054d
 80057f0:	20000550 	.word	0x20000550
 80057f4:	20000552 	.word	0x20000552
 80057f8:	20000551 	.word	0x20000551
 80057fc:	0801f534 	.word	0x0801f534
 8005800:	0801f544 	.word	0x0801f544
 8005804:	0801f55c 	.word	0x0801f55c
 8005808:	0801f570 	.word	0x0801f570
      break;
 800580c:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800580e:	4b03      	ldr	r3, [pc, #12]	@ (800581c <ESP_Upkeep+0x7c8>)
 8005810:	781b      	ldrb	r3, [r3, #0]
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b003      	add	sp, #12
 8005818:	bd90      	pop	{r4, r7, pc}
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	2000002c 	.word	0x2000002c

08005820 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <I2CSensors_Init+0x30>)
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800582e:	4a09      	ldr	r2, [pc, #36]	@ (8005854 <I2CSensors_Init+0x34>)
 8005830:	4b09      	ldr	r3, [pc, #36]	@ (8005858 <I2CSensors_Init+0x38>)
 8005832:	0011      	movs	r1, r2
 8005834:	0018      	movs	r0, r3
 8005836:	f001 f96f 	bl	8006b18 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800583a:	4a06      	ldr	r2, [pc, #24]	@ (8005854 <I2CSensors_Init+0x34>)
 800583c:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <I2CSensors_Init+0x38>)
 800583e:	0011      	movs	r1, r2
 8005840:	0018      	movs	r0, r3
 8005842:	f000 ffd9 	bl	80067f8 <Gas_Init>
}
 8005846:	46c0      	nop			@ (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b002      	add	sp, #8
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	20000a88 	.word	0x20000a88
 8005854:	080058b1 	.word	0x080058b1
 8005858:	0800585d 	.word	0x0800585d

0800585c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800585c:	b5b0      	push	{r4, r5, r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6039      	str	r1, [r7, #0]
 8005864:	0011      	movs	r1, r2
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	1c02      	adds	r2, r0, #0
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	1dbb      	adds	r3, r7, #6
 800586e:	1c0a      	adds	r2, r1, #0
 8005870:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005872:	4b0e      	ldr	r3, [pc, #56]	@ (80058ac <ReadI2C+0x50>)
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	1dfb      	adds	r3, r7, #7
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	18db      	adds	r3, r3, r3
 800587e:	b299      	uxth	r1, r3
 8005880:	1dbb      	adds	r3, r7, #6
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	250f      	movs	r5, #15
 8005888:	197c      	adds	r4, r7, r5
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	f007 fdfc 	bl	800d488 <HAL_I2C_Master_Receive_DMA>
 8005890:	0003      	movs	r3, r0
 8005892:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005894:	197b      	adds	r3, r7, r5
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <ReadI2C+0x44>
        return false;
 800589c:	2300      	movs	r3, #0
 800589e:	e000      	b.n	80058a2 <ReadI2C+0x46>
    }
    return true;
 80058a0:	2301      	movs	r3, #1
}
 80058a2:	0018      	movs	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b004      	add	sp, #16
 80058a8:	bdb0      	pop	{r4, r5, r7, pc}
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	20000a88 	.word	0x20000a88

080058b0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80058b0:	b5b0      	push	{r4, r5, r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6039      	str	r1, [r7, #0]
 80058b8:	0011      	movs	r1, r2
 80058ba:	1dfb      	adds	r3, r7, #7
 80058bc:	1c02      	adds	r2, r0, #0
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	1dbb      	adds	r3, r7, #6
 80058c2:	1c0a      	adds	r2, r1, #0
 80058c4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80058c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005900 <WriteI2C+0x50>)
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	1dfb      	adds	r3, r7, #7
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	18db      	adds	r3, r3, r3
 80058d2:	b299      	uxth	r1, r3
 80058d4:	1dbb      	adds	r3, r7, #6
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	250f      	movs	r5, #15
 80058dc:	197c      	adds	r4, r7, r5
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	f007 fccc 	bl	800d27c <HAL_I2C_Master_Transmit_DMA>
 80058e4:	0003      	movs	r3, r0
 80058e6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80058e8:	197b      	adds	r3, r7, r5
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <WriteI2C+0x44>
        return false;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e000      	b.n	80058f6 <WriteI2C+0x46>
    }
    return true;
 80058f4:	2301      	movs	r3, #1
}
 80058f6:	0018      	movs	r0, r3
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b004      	add	sp, #16
 80058fc:	bdb0      	pop	{r4, r5, r7, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	20000a88 	.word	0x20000a88

08005904 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b0c3      	sub	sp, #268	@ 0x10c
 8005908:	af3e      	add	r7, sp, #248	@ 0xf8
 800590a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800590c:	f013 f8f2 	bl	8018af4 <GetUsbRxDataSize>
 8005910:	0003      	movs	r3, r0
 8005912:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b05      	cmp	r3, #5
 8005918:	d971      	bls.n	80059fe <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2123      	movs	r1, #35	@ 0x23
 800591e:	0018      	movs	r0, r3
 8005920:	f016 f9e8 	bl	801bcf4 <strchr>
 8005924:	0003      	movs	r3, r0
 8005926:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d065      	beq.n	80059fa <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	785a      	ldrb	r2, [r3, #1]
 8005932:	4b34      	ldr	r3, [pc, #208]	@ (8005a04 <Process_PC_Config+0x100>)
 8005934:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	789a      	ldrb	r2, [r3, #2]
 800593a:	4b32      	ldr	r3, [pc, #200]	@ (8005a04 <Process_PC_Config+0x100>)
 800593c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800593e:	4b31      	ldr	r3, [pc, #196]	@ (8005a04 <Process_PC_Config+0x100>)
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	3305      	adds	r3, #5
 8005944:	001a      	movs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4293      	cmp	r3, r2
 800594a:	d351      	bcc.n	80059f0 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1cd9      	adds	r1, r3, #3
 8005950:	4b2c      	ldr	r3, [pc, #176]	@ (8005a04 <Process_PC_Config+0x100>)
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	001a      	movs	r2, r3
 8005956:	4b2c      	ldr	r3, [pc, #176]	@ (8005a08 <Process_PC_Config+0x104>)
 8005958:	0018      	movs	r0, r3
 800595a:	f016 fa9f 	bl	801be9c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800595e:	4b29      	ldr	r3, [pc, #164]	@ (8005a04 <Process_PC_Config+0x100>)
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	3303      	adds	r3, #3
 8005964:	001a      	movs	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	189b      	adds	r3, r3, r2
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	b21a      	sxth	r2, r3
 8005970:	4b24      	ldr	r3, [pc, #144]	@ (8005a04 <Process_PC_Config+0x100>)
 8005972:	785b      	ldrb	r3, [r3, #1]
 8005974:	3304      	adds	r3, #4
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	18cb      	adds	r3, r1, r3
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b21b      	sxth	r3, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	b21b      	sxth	r3, r3
 8005982:	b299      	uxth	r1, r3
 8005984:	4a1f      	ldr	r2, [pc, #124]	@ (8005a04 <Process_PC_Config+0x100>)
 8005986:	2381      	movs	r3, #129	@ 0x81
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 800598c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a04 <Process_PC_Config+0x100>)
 800598e:	2381      	movs	r3, #129	@ 0x81
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	5ad4      	ldrh	r4, [r2, r3]
 8005994:	4b1b      	ldr	r3, [pc, #108]	@ (8005a04 <Process_PC_Config+0x100>)
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	3303      	adds	r3, #3
 800599a:	b29a      	uxth	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0011      	movs	r1, r2
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 f975 	bl	8005c90 <CRC16_ARC>
 80059a6:	0003      	movs	r3, r0
 80059a8:	429c      	cmp	r4, r3
 80059aa:	d007      	beq.n	80059bc <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80059ac:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <Process_PC_Config+0x100>)
 80059ae:	785a      	ldrb	r2, [r3, #1]
 80059b0:	4b15      	ldr	r3, [pc, #84]	@ (8005a08 <Process_PC_Config+0x104>)
 80059b2:	0019      	movs	r1, r3
 80059b4:	2001      	movs	r0, #1
 80059b6:	f000 f919 	bl	8005bec <Create_Message>
 80059ba:	e016      	b.n	80059ea <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80059bc:	4c11      	ldr	r4, [pc, #68]	@ (8005a04 <Process_PC_Config+0x100>)
 80059be:	466b      	mov	r3, sp
 80059c0:	0018      	movs	r0, r3
 80059c2:	0023      	movs	r3, r4
 80059c4:	3310      	adds	r3, #16
 80059c6:	22f4      	movs	r2, #244	@ 0xf4
 80059c8:	0019      	movs	r1, r3
 80059ca:	f016 fa67 	bl	801be9c <memcpy>
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	6861      	ldr	r1, [r4, #4]
 80059d2:	68a2      	ldr	r2, [r4, #8]
 80059d4:	68e3      	ldr	r3, [r4, #12]
 80059d6:	f000 f819 	bl	8005a0c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80059da:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <Process_PC_Config+0x100>)
 80059dc:	7818      	ldrb	r0, [r3, #0]
 80059de:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <Process_PC_Config+0x100>)
 80059e0:	785a      	ldrb	r2, [r3, #1]
 80059e2:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <Process_PC_Config+0x104>)
 80059e4:	0019      	movs	r1, r3
 80059e6:	f000 f901 	bl	8005bec <Create_Message>
                }
                ResetUsbRxDataSize();
 80059ea:	f013 f86b 	bl	8018ac4 <ResetUsbRxDataSize>
                return;
 80059ee:	e006      	b.n	80059fe <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f013 f888 	bl	8018b08 <GetUsbRxNextChunk>
 80059f8:	e001      	b.n	80059fe <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80059fa:	f013 f863 	bl	8018ac4 <ResetUsbRxDataSize>
        }
    }
}
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b005      	add	sp, #20
 8005a02:	bd90      	pop	{r4, r7, pc}
 8005a04:	20000a8c 	.word	0x20000a8c
 8005a08:	20000a8e 	.word	0x20000a8e

08005a0c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	b5b0      	push	{r4, r5, r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	2518      	movs	r5, #24
 8005a16:	197c      	adds	r4, r7, r5
 8005a18:	6020      	str	r0, [r4, #0]
 8005a1a:	6061      	str	r1, [r4, #4]
 8005a1c:	60a2      	str	r2, [r4, #8]
 8005a1e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005a20:	197b      	adds	r3, r7, r5
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2bfe      	cmp	r3, #254	@ 0xfe
 8005a26:	d100      	bne.n	8005a2a <ProcessCmd+0x1e>
 8005a28:	e09c      	b.n	8005b64 <ProcessCmd+0x158>
 8005a2a:	dd00      	ble.n	8005a2e <ProcessCmd+0x22>
 8005a2c:	e0bc      	b.n	8005ba8 <ProcessCmd+0x19c>
 8005a2e:	2b0c      	cmp	r3, #12
 8005a30:	dc0a      	bgt.n	8005a48 <ProcessCmd+0x3c>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da00      	bge.n	8005a38 <ProcessCmd+0x2c>
 8005a36:	e0b7      	b.n	8005ba8 <ProcessCmd+0x19c>
 8005a38:	2b0c      	cmp	r3, #12
 8005a3a:	d900      	bls.n	8005a3e <ProcessCmd+0x32>
 8005a3c:	e0b4      	b.n	8005ba8 <ProcessCmd+0x19c>
 8005a3e:	009a      	lsls	r2, r3, #2
 8005a40:	4b5d      	ldr	r3, [pc, #372]	@ (8005bb8 <ProcessCmd+0x1ac>)
 8005a42:	18d3      	adds	r3, r2, r3
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	469f      	mov	pc, r3
 8005a48:	2bfd      	cmp	r3, #253	@ 0xfd
 8005a4a:	d100      	bne.n	8005a4e <ProcessCmd+0x42>
 8005a4c:	e084      	b.n	8005b58 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005a4e:	e0ab      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a50:	2118      	movs	r1, #24
 8005a52:	187b      	adds	r3, r7, r1
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	001a      	movs	r2, r3
 8005a58:	187b      	adds	r3, r7, r1
 8005a5a:	1c99      	adds	r1, r3, #2
 8005a5c:	4857      	ldr	r0, [pc, #348]	@ (8005bbc <ProcessCmd+0x1b0>)
 8005a5e:	230c      	movs	r3, #12
 8005a60:	f7fd fe2e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005a64:	e0a0      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a66:	2118      	movs	r1, #24
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	001a      	movs	r2, r3
 8005a6e:	187b      	adds	r3, r7, r1
 8005a70:	1c99      	adds	r1, r3, #2
 8005a72:	4853      	ldr	r0, [pc, #332]	@ (8005bc0 <ProcessCmd+0x1b4>)
 8005a74:	230c      	movs	r3, #12
 8005a76:	f7fd fe23 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005a7a:	e095      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a7c:	2118      	movs	r1, #24
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	001a      	movs	r2, r3
 8005a84:	187b      	adds	r3, r7, r1
 8005a86:	1c99      	adds	r1, r3, #2
 8005a88:	484e      	ldr	r0, [pc, #312]	@ (8005bc4 <ProcessCmd+0x1b8>)
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	f7fd fe18 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005a90:	e08a      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a92:	2118      	movs	r1, #24
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	001a      	movs	r2, r3
 8005a9a:	187b      	adds	r3, r7, r1
 8005a9c:	1c99      	adds	r1, r3, #2
 8005a9e:	484a      	ldr	r0, [pc, #296]	@ (8005bc8 <ProcessCmd+0x1bc>)
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	f7fd fe0d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005aa6:	e07f      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005aa8:	2118      	movs	r1, #24
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	001a      	movs	r2, r3
 8005ab0:	187b      	adds	r3, r7, r1
 8005ab2:	1c99      	adds	r1, r3, #2
 8005ab4:	4845      	ldr	r0, [pc, #276]	@ (8005bcc <ProcessCmd+0x1c0>)
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	f7fd fe02 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005abc:	e074      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005abe:	2118      	movs	r1, #24
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	001a      	movs	r2, r3
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	1c99      	adds	r1, r3, #2
 8005aca:	4841      	ldr	r0, [pc, #260]	@ (8005bd0 <ProcessCmd+0x1c4>)
 8005acc:	230c      	movs	r3, #12
 8005ace:	f7fd fdf7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ad2:	e069      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ad4:	2118      	movs	r1, #24
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	001a      	movs	r2, r3
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	1c99      	adds	r1, r3, #2
 8005ae0:	483c      	ldr	r0, [pc, #240]	@ (8005bd4 <ProcessCmd+0x1c8>)
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	f7fd fdec 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ae8:	e05e      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005aea:	2118      	movs	r1, #24
 8005aec:	187b      	adds	r3, r7, r1
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	001a      	movs	r2, r3
 8005af2:	187b      	adds	r3, r7, r1
 8005af4:	1c99      	adds	r1, r3, #2
 8005af6:	4838      	ldr	r0, [pc, #224]	@ (8005bd8 <ProcessCmd+0x1cc>)
 8005af8:	231e      	movs	r3, #30
 8005afa:	f7fd fde1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005afe:	e053      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b00:	2118      	movs	r1, #24
 8005b02:	187b      	adds	r3, r7, r1
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	001a      	movs	r2, r3
 8005b08:	187b      	adds	r3, r7, r1
 8005b0a:	1c99      	adds	r1, r3, #2
 8005b0c:	4833      	ldr	r0, [pc, #204]	@ (8005bdc <ProcessCmd+0x1d0>)
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f7fd fdd6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b14:	e048      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b16:	2118      	movs	r1, #24
 8005b18:	187b      	adds	r3, r7, r1
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	001a      	movs	r2, r3
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	1c99      	adds	r1, r3, #2
 8005b22:	482f      	ldr	r0, [pc, #188]	@ (8005be0 <ProcessCmd+0x1d4>)
 8005b24:	230c      	movs	r3, #12
 8005b26:	f7fd fdcb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b2a:	e03d      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b2c:	2118      	movs	r1, #24
 8005b2e:	187b      	adds	r3, r7, r1
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	001a      	movs	r2, r3
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	1c99      	adds	r1, r3, #2
 8005b38:	482a      	ldr	r0, [pc, #168]	@ (8005be4 <ProcessCmd+0x1d8>)
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	f7fd fdc0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b40:	e032      	b.n	8005ba8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b42:	2118      	movs	r1, #24
 8005b44:	187b      	adds	r3, r7, r1
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	001a      	movs	r2, r3
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	1c99      	adds	r1, r3, #2
 8005b4e:	4826      	ldr	r0, [pc, #152]	@ (8005be8 <ProcessCmd+0x1dc>)
 8005b50:	230c      	movs	r3, #12
 8005b52:	f7fd fdb5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b56:	e027      	b.n	8005ba8 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005b58:	4b18      	ldr	r3, [pc, #96]	@ (8005bbc <ProcessCmd+0x1b0>)
 8005b5a:	21ba      	movs	r1, #186	@ 0xba
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f7fd fdf4 	bl	800374a <ClearEEprom>
        break;
 8005b62:	e021      	b.n	8005ba8 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005b64:	2118      	movs	r1, #24
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	789b      	ldrb	r3, [r3, #2]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	b21a      	sxth	r2, r3
 8005b6e:	187b      	adds	r3, r7, r1
 8005b70:	78db      	ldrb	r3, [r3, #3]
 8005b72:	b21b      	sxth	r3, r3
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b21a      	sxth	r2, r3
 8005b78:	1dbb      	adds	r3, r7, #6
 8005b7a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005b7c:	1dbb      	adds	r3, r7, #6
 8005b7e:	881a      	ldrh	r2, [r3, #0]
 8005b80:	23c0      	movs	r3, #192	@ 0xc0
 8005b82:	015b      	lsls	r3, r3, #5
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d207      	bcs.n	8005b98 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005b88:	1dbb      	adds	r3, r7, #6
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8005bbc <ProcessCmd+0x1b0>)
 8005b8e:	0019      	movs	r1, r3
 8005b90:	0010      	movs	r0, r2
 8005b92:	f7fd fdda 	bl	800374a <ClearEEprom>
            break;
 8005b96:	e006      	b.n	8005ba6 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005b98:	23c0      	movs	r3, #192	@ 0xc0
 8005b9a:	015b      	lsls	r3, r3, #5
 8005b9c:	4a07      	ldr	r2, [pc, #28]	@ (8005bbc <ProcessCmd+0x1b0>)
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	0010      	movs	r0, r2
 8005ba2:	f7fd fdd2 	bl	800374a <ClearEEprom>
            break;
 8005ba6:	46c0      	nop			@ (mov r8, r8)
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bcb0      	pop	{r4, r5, r7}
 8005bb0:	bc08      	pop	{r3}
 8005bb2:	b004      	add	sp, #16
 8005bb4:	4718      	bx	r3
 8005bb6:	46c0      	nop			@ (mov r8, r8)
 8005bb8:	0801ff10 	.word	0x0801ff10
 8005bbc:	08080000 	.word	0x08080000
 8005bc0:	0808000c 	.word	0x0808000c
 8005bc4:	08080018 	.word	0x08080018
 8005bc8:	08080024 	.word	0x08080024
 8005bcc:	08080030 	.word	0x08080030
 8005bd0:	0808003c 	.word	0x0808003c
 8005bd4:	08080048 	.word	0x08080048
 8005bd8:	08080090 	.word	0x08080090
 8005bdc:	08080078 	.word	0x08080078
 8005be0:	0808006c 	.word	0x0808006c
 8005be4:	08080060 	.word	0x08080060
 8005be8:	08080054 	.word	0x08080054

08005bec <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6039      	str	r1, [r7, #0]
 8005bf4:	0011      	movs	r1, r2
 8005bf6:	1dfb      	adds	r3, r7, #7
 8005bf8:	1c02      	adds	r2, r0, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	1dbb      	adds	r3, r7, #6
 8005bfe:	1c0a      	adds	r2, r1, #0
 8005c00:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005c02:	2223      	movs	r2, #35	@ 0x23
 8005c04:	4b20      	ldr	r3, [pc, #128]	@ (8005c88 <Create_Message+0x9c>)
 8005c06:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005c08:	4b1f      	ldr	r3, [pc, #124]	@ (8005c88 <Create_Message+0x9c>)
 8005c0a:	1dfa      	adds	r2, r7, #7
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005c10:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <Create_Message+0x9c>)
 8005c12:	1dba      	adds	r2, r7, #6
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005c18:	1dbb      	adds	r3, r7, #6
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <Create_Message+0xa0>)
 8005c20:	0018      	movs	r0, r3
 8005c22:	f016 f93b 	bl	801be9c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005c26:	1dbb      	adds	r3, r7, #6
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	250e      	movs	r5, #14
 8005c2e:	197b      	adds	r3, r7, r5
 8005c30:	3203      	adds	r2, #3
 8005c32:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005c34:	260c      	movs	r6, #12
 8005c36:	19bc      	adds	r4, r7, r6
 8005c38:	197b      	adds	r3, r7, r5
 8005c3a:	881a      	ldrh	r2, [r3, #0]
 8005c3c:	4b12      	ldr	r3, [pc, #72]	@ (8005c88 <Create_Message+0x9c>)
 8005c3e:	0011      	movs	r1, r2
 8005c40:	0018      	movs	r0, r3
 8005c42:	f000 f825 	bl	8005c90 <CRC16_ARC>
 8005c46:	0003      	movs	r3, r0
 8005c48:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005c4a:	0030      	movs	r0, r6
 8005c4c:	183b      	adds	r3, r7, r0
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	0a1b      	lsrs	r3, r3, #8
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	197b      	adds	r3, r7, r5
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b2d1      	uxtb	r1, r2
 8005c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8005c88 <Create_Message+0x9c>)
 8005c5c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005c5e:	197b      	adds	r3, r7, r5
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	183a      	adds	r2, r7, r0
 8005c66:	8812      	ldrh	r2, [r2, #0]
 8005c68:	b2d1      	uxtb	r1, r2
 8005c6a:	4a07      	ldr	r2, [pc, #28]	@ (8005c88 <Create_Message+0x9c>)
 8005c6c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005c6e:	197b      	adds	r3, r7, r5
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	3302      	adds	r3, #2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	4b04      	ldr	r3, [pc, #16]	@ (8005c88 <Create_Message+0x9c>)
 8005c78:	0011      	movs	r1, r2
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f012 fee0 	bl	8018a40 <CDC_Transmit_FS>
}
 8005c80:	46c0      	nop			@ (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b005      	add	sp, #20
 8005c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c88:	20000b90 	.word	0x20000b90
 8005c8c:	20000b93 	.word	0x20000b93

08005c90 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	000a      	movs	r2, r1
 8005c9a:	1cbb      	adds	r3, r7, #2
 8005c9c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005c9e:	2316      	movs	r3, #22
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	e02e      	b.n	8005d0a <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	18d3      	adds	r3, r2, r3
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	0019      	movs	r1, r3
 8005cb6:	2216      	movs	r2, #22
 8005cb8:	18bb      	adds	r3, r7, r2
 8005cba:	18ba      	adds	r2, r7, r2
 8005cbc:	8812      	ldrh	r2, [r2, #0]
 8005cbe:	404a      	eors	r2, r1
 8005cc0:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e01a      	b.n	8005cfe <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005cc8:	2116      	movs	r1, #22
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005cd4:	187b      	adds	r3, r7, r1
 8005cd6:	187a      	adds	r2, r7, r1
 8005cd8:	8812      	ldrh	r2, [r2, #0]
 8005cda:	0852      	lsrs	r2, r2, #1
 8005cdc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005cde:	187b      	adds	r3, r7, r1
 8005ce0:	187a      	adds	r2, r7, r1
 8005ce2:	8812      	ldrh	r2, [r2, #0]
 8005ce4:	490f      	ldr	r1, [pc, #60]	@ (8005d24 <CRC16_ARC+0x94>)
 8005ce6:	404a      	eors	r2, r1
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	e005      	b.n	8005cf8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005cec:	2216      	movs	r2, #22
 8005cee:	18bb      	adds	r3, r7, r2
 8005cf0:	18ba      	adds	r2, r7, r2
 8005cf2:	8812      	ldrh	r2, [r2, #0]
 8005cf4:	0852      	lsrs	r2, r2, #1
 8005cf6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b07      	cmp	r3, #7
 8005d02:	dde1      	ble.n	8005cc8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	3301      	adds	r3, #1
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	1cbb      	adds	r3, r7, #2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	dbcb      	blt.n	8005cac <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005d14:	2316      	movs	r3, #22
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	881b      	ldrh	r3, [r3, #0]
}
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b006      	add	sp, #24
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	46c0      	nop			@ (mov r8, r8)
 8005d24:	ffffa001 	.word	0xffffa001

08005d28 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005d2c:	4b26      	ldr	r3, [pc, #152]	@ (8005dc8 <ReadBatteryVoltage+0xa0>)
 8005d2e:	4a27      	ldr	r2, [pc, #156]	@ (8005dcc <ReadBatteryVoltage+0xa4>)
 8005d30:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005d32:	4b25      	ldr	r3, [pc, #148]	@ (8005dc8 <ReadBatteryVoltage+0xa0>)
 8005d34:	2280      	movs	r2, #128	@ 0x80
 8005d36:	0152      	lsls	r2, r2, #5
 8005d38:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005d3a:	4a23      	ldr	r2, [pc, #140]	@ (8005dc8 <ReadBatteryVoltage+0xa0>)
 8005d3c:	4b24      	ldr	r3, [pc, #144]	@ (8005dd0 <ReadBatteryVoltage+0xa8>)
 8005d3e:	0011      	movs	r1, r2
 8005d40:	0018      	movs	r0, r3
 8005d42:	f006 fa45 	bl	800c1d0 <HAL_ADC_ConfigChannel>
 8005d46:	1e03      	subs	r3, r0, #0
 8005d48:	d001      	beq.n	8005d4e <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005d4a:	f001 fabf 	bl	80072cc <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005d4e:	4b20      	ldr	r3, [pc, #128]	@ (8005dd0 <ReadBatteryVoltage+0xa8>)
 8005d50:	0018      	movs	r0, r3
 8005d52:	f006 f941 	bl	800bfd8 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005d56:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <ReadBatteryVoltage+0xa8>)
 8005d58:	2101      	movs	r1, #1
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f006 f990 	bl	800c080 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005d60:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd0 <ReadBatteryVoltage+0xa8>)
 8005d62:	0018      	movs	r0, r3
 8005d64:	f006 fa28 	bl	800c1b8 <HAL_ADC_GetValue>
 8005d68:	0002      	movs	r2, r0
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd4 <ReadBatteryVoltage+0xac>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4353      	muls	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4919      	ldr	r1, [pc, #100]	@ (8005dd8 <ReadBatteryVoltage+0xb0>)
 8005d74:	0018      	movs	r0, r3
 8005d76:	f7fa fa15 	bl	80001a4 <__udivsi3>
 8005d7a:	0003      	movs	r3, r0
 8005d7c:	001a      	movs	r2, r3
 8005d7e:	4b17      	ldr	r3, [pc, #92]	@ (8005ddc <ReadBatteryVoltage+0xb4>)
 8005d80:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005d82:	4b16      	ldr	r3, [pc, #88]	@ (8005ddc <ReadBatteryVoltage+0xb4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7fb fc6e 	bl	8001668 <__aeabi_ui2f>
 8005d8c:	1c03      	adds	r3, r0, #0
 8005d8e:	4914      	ldr	r1, [pc, #80]	@ (8005de0 <ReadBatteryVoltage+0xb8>)
 8005d90:	1c18      	adds	r0, r3, #0
 8005d92:	f7fa ff1f 	bl	8000bd4 <__aeabi_fdiv>
 8005d96:	1c03      	adds	r3, r0, #0
 8005d98:	1c1a      	adds	r2, r3, #0
 8005d9a:	4b12      	ldr	r3, [pc, #72]	@ (8005de4 <ReadBatteryVoltage+0xbc>)
 8005d9c:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <ReadBatteryVoltage+0xa0>)
 8005da0:	4a0a      	ldr	r2, [pc, #40]	@ (8005dcc <ReadBatteryVoltage+0xa4>)
 8005da2:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005da4:	4b08      	ldr	r3, [pc, #32]	@ (8005dc8 <ReadBatteryVoltage+0xa0>)
 8005da6:	4a10      	ldr	r2, [pc, #64]	@ (8005de8 <ReadBatteryVoltage+0xc0>)
 8005da8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005daa:	4a07      	ldr	r2, [pc, #28]	@ (8005dc8 <ReadBatteryVoltage+0xa0>)
 8005dac:	4b08      	ldr	r3, [pc, #32]	@ (8005dd0 <ReadBatteryVoltage+0xa8>)
 8005dae:	0011      	movs	r1, r2
 8005db0:	0018      	movs	r0, r3
 8005db2:	f006 fa0d 	bl	800c1d0 <HAL_ADC_ConfigChannel>
 8005db6:	1e03      	subs	r3, r0, #0
 8005db8:	d001      	beq.n	8005dbe <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005dba:	f001 fa87 	bl	80072cc <Error_Handler>
   }
   return trueValue;
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <ReadBatteryVoltage+0xbc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 }
 8005dc2:	1c18      	adds	r0, r3, #0
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000c98 	.word	0x20000c98
 8005dcc:	38004000 	.word	0x38004000
 8005dd0:	20000cb8 	.word	0x20000cb8
 8005dd4:	20000030 	.word	0x20000030
 8005dd8:	00000fff 	.word	0x00000fff
 8005ddc:	20000ca0 	.word	0x20000ca0
 8005de0:	447a0000 	.word	0x447a0000
 8005de4:	20000ca4 	.word	0x20000ca4
 8005de8:	00001001 	.word	0x00001001

08005dec <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005df0:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <ReadSolarVoltage+0xa4>)
 8005df2:	4a28      	ldr	r2, [pc, #160]	@ (8005e94 <ReadSolarVoltage+0xa8>)
 8005df4:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005df6:	4b26      	ldr	r3, [pc, #152]	@ (8005e90 <ReadSolarVoltage+0xa4>)
 8005df8:	2280      	movs	r2, #128	@ 0x80
 8005dfa:	0152      	lsls	r2, r2, #5
 8005dfc:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005dfe:	4a24      	ldr	r2, [pc, #144]	@ (8005e90 <ReadSolarVoltage+0xa4>)
 8005e00:	4b25      	ldr	r3, [pc, #148]	@ (8005e98 <ReadSolarVoltage+0xac>)
 8005e02:	0011      	movs	r1, r2
 8005e04:	0018      	movs	r0, r3
 8005e06:	f006 f9e3 	bl	800c1d0 <HAL_ADC_ConfigChannel>
 8005e0a:	1e03      	subs	r3, r0, #0
 8005e0c:	d001      	beq.n	8005e12 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005e0e:	f001 fa5d 	bl	80072cc <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005e12:	4b21      	ldr	r3, [pc, #132]	@ (8005e98 <ReadSolarVoltage+0xac>)
 8005e14:	0018      	movs	r0, r3
 8005e16:	f006 f8df 	bl	800bfd8 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005e98 <ReadSolarVoltage+0xac>)
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f006 f92e 	bl	800c080 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005e24:	4b1c      	ldr	r3, [pc, #112]	@ (8005e98 <ReadSolarVoltage+0xac>)
 8005e26:	0018      	movs	r0, r3
 8005e28:	f006 f9c6 	bl	800c1b8 <HAL_ADC_GetValue>
 8005e2c:	0002      	movs	r2, r0
 8005e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e9c <ReadSolarVoltage+0xb0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	435a      	muls	r2, r3
 8005e34:	0013      	movs	r3, r2
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	189b      	adds	r3, r3, r2
 8005e3a:	4919      	ldr	r1, [pc, #100]	@ (8005ea0 <ReadSolarVoltage+0xb4>)
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f7fa f9b1 	bl	80001a4 <__udivsi3>
 8005e42:	0003      	movs	r3, r0
 8005e44:	001a      	movs	r2, r3
 8005e46:	4b17      	ldr	r3, [pc, #92]	@ (8005ea4 <ReadSolarVoltage+0xb8>)
 8005e48:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005e4a:	4b16      	ldr	r3, [pc, #88]	@ (8005ea4 <ReadSolarVoltage+0xb8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f7fb fc0a 	bl	8001668 <__aeabi_ui2f>
 8005e54:	1c03      	adds	r3, r0, #0
 8005e56:	4914      	ldr	r1, [pc, #80]	@ (8005ea8 <ReadSolarVoltage+0xbc>)
 8005e58:	1c18      	adds	r0, r3, #0
 8005e5a:	f7fa febb 	bl	8000bd4 <__aeabi_fdiv>
 8005e5e:	1c03      	adds	r3, r0, #0
 8005e60:	1c1a      	adds	r2, r3, #0
 8005e62:	4b12      	ldr	r3, [pc, #72]	@ (8005eac <ReadSolarVoltage+0xc0>)
 8005e64:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005e66:	4b0a      	ldr	r3, [pc, #40]	@ (8005e90 <ReadSolarVoltage+0xa4>)
 8005e68:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <ReadSolarVoltage+0xa8>)
 8005e6a:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005e6c:	4b08      	ldr	r3, [pc, #32]	@ (8005e90 <ReadSolarVoltage+0xa4>)
 8005e6e:	4a10      	ldr	r2, [pc, #64]	@ (8005eb0 <ReadSolarVoltage+0xc4>)
 8005e70:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e72:	4a07      	ldr	r2, [pc, #28]	@ (8005e90 <ReadSolarVoltage+0xa4>)
 8005e74:	4b08      	ldr	r3, [pc, #32]	@ (8005e98 <ReadSolarVoltage+0xac>)
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f006 f9a9 	bl	800c1d0 <HAL_ADC_ConfigChannel>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d001      	beq.n	8005e86 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005e82:	f001 fa23 	bl	80072cc <Error_Handler>
   }
   return trueValue;
 8005e86:	4b09      	ldr	r3, [pc, #36]	@ (8005eac <ReadSolarVoltage+0xc0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 }
 8005e8a:	1c18      	adds	r0, r3, #0
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000c98 	.word	0x20000c98
 8005e94:	3c008000 	.word	0x3c008000
 8005e98:	20000cb8 	.word	0x20000cb8
 8005e9c:	20000030 	.word	0x20000030
 8005ea0:	00000fff 	.word	0x00000fff
 8005ea4:	20000ca8 	.word	0x20000ca8
 8005ea8:	447a0000 	.word	0x447a0000
 8005eac:	20000cac 	.word	0x20000cac
 8005eb0:	00001001 	.word	0x00001001

08005eb4 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005eb8:	23a0      	movs	r3, #160	@ 0xa0
 8005eba:	05db      	lsls	r3, r3, #23
 8005ebc:	2180      	movs	r1, #128	@ 0x80
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f007 f90c 	bl	800d0dc <HAL_GPIO_ReadPin>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	4193      	sbcs	r3, r2
 8005eca:	b2db      	uxtb	r3, r3
}
 8005ecc:	0018      	movs	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005ed6:	2380      	movs	r3, #128	@ 0x80
 8005ed8:	021a      	lsls	r2, r3, #8
 8005eda:	23a0      	movs	r3, #160	@ 0xa0
 8005edc:	05db      	lsls	r3, r3, #23
 8005ede:	0011      	movs	r1, r2
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f007 f8fb 	bl	800d0dc <HAL_GPIO_ReadPin>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	1e5a      	subs	r2, r3, #1
 8005eea:	4193      	sbcs	r3, r2
 8005eec:	b2db      	uxtb	r3, r3
}
 8005eee:	0018      	movs	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <UserButton_Pressed+0x1c>)
 8005efa:	2104      	movs	r1, #4
 8005efc:	0018      	movs	r0, r3
 8005efe:	f007 f8ed 	bl	800d0dc <HAL_GPIO_ReadPin>
 8005f02:	0003      	movs	r3, r0
 8005f04:	425a      	negs	r2, r3
 8005f06:	4153      	adcs	r3, r2
 8005f08:	b2db      	uxtb	r3, r3
}
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	50000c00 	.word	0x50000c00

08005f14 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	0008      	movs	r0, r1
 8005f1e:	0011      	movs	r1, r2
 8005f20:	1cfb      	adds	r3, r7, #3
 8005f22:	1c02      	adds	r2, r0, #0
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	1cbb      	adds	r3, r7, #2
 8005f28:	1c0a      	adds	r2, r1, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8005f2c:	230e      	movs	r3, #14
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8005f34:	230f      	movs	r3, #15
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	1cfa      	adds	r2, r7, #3
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e015      	b.n	8005f6c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8005f40:	200f      	movs	r0, #15
 8005f42:	183b      	adds	r3, r7, r0
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	18d2      	adds	r2, r2, r3
 8005f4a:	240e      	movs	r4, #14
 8005f4c:	193b      	adds	r3, r7, r4
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	7811      	ldrb	r1, [r2, #0]
 8005f52:	2208      	movs	r2, #8
 8005f54:	18ba      	adds	r2, r7, r2
 8005f56:	54d1      	strb	r1, [r2, r3]
    pos++;
 8005f58:	193b      	adds	r3, r7, r4
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	193b      	adds	r3, r7, r4
 8005f5e:	3201      	adds	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8005f62:	183b      	adds	r3, r7, r0
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	183b      	adds	r3, r7, r0
 8005f68:	3201      	adds	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	200f      	movs	r0, #15
 8005f6e:	183a      	adds	r2, r7, r0
 8005f70:	1cbb      	adds	r3, r7, #2
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d9e2      	bls.n	8005f40 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8005f7a:	230e      	movs	r3, #14
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2208      	movs	r2, #8
 8005f82:	18ba      	adds	r2, r7, r2
 8005f84:	2100      	movs	r1, #0
 8005f86:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8005f88:	1cfb      	adds	r3, r7, #3
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b13      	cmp	r3, #19
 8005f8e:	d849      	bhi.n	8006024 <aBuff2int+0x110>
    if (start == 17) { //month
 8005f90:	1cfb      	adds	r3, r7, #3
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b11      	cmp	r3, #17
 8005f96:	d122      	bne.n	8005fde <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8005f98:	183b      	adds	r3, r7, r0
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e018      	b.n	8005fd2 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8005fa0:	240f      	movs	r4, #15
 8005fa2:	193b      	adds	r3, r7, r4
 8005fa4:	781a      	ldrb	r2, [r3, #0]
 8005fa6:	4b25      	ldr	r3, [pc, #148]	@ (800603c <aBuff2int+0x128>)
 8005fa8:	0092      	lsls	r2, r2, #2
 8005faa:	58d2      	ldr	r2, [r2, r3]
 8005fac:	2308      	movs	r3, #8
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f7fa f8d0 	bl	8000158 <strcmp>
 8005fb8:	1e03      	subs	r3, r0, #0
 8005fba:	d104      	bne.n	8005fc6 <aBuff2int+0xb2>
          return i+1;
 8005fbc:	193b      	adds	r3, r7, r4
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	e035      	b.n	8006032 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8005fc6:	210f      	movs	r1, #15
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	187b      	adds	r3, r7, r1
 8005fce:	3201      	adds	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	230f      	movs	r3, #15
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b0b      	cmp	r3, #11
 8005fda:	d9e1      	bls.n	8005fa0 <aBuff2int+0x8c>
 8005fdc:	e022      	b.n	8006024 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8005fde:	230f      	movs	r3, #15
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	e018      	b.n	800601a <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8005fe8:	240f      	movs	r4, #15
 8005fea:	193b      	adds	r3, r7, r4
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	4b14      	ldr	r3, [pc, #80]	@ (8006040 <aBuff2int+0x12c>)
 8005ff0:	0092      	lsls	r2, r2, #2
 8005ff2:	58d2      	ldr	r2, [r2, r3]
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	0011      	movs	r1, r2
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7fa f8ac 	bl	8000158 <strcmp>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d104      	bne.n	800600e <aBuff2int+0xfa>
          return i+1;
 8006004:	193b      	adds	r3, r7, r4
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e011      	b.n	8006032 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800600e:	210f      	movs	r1, #15
 8006010:	187b      	adds	r3, r7, r1
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	187b      	adds	r3, r7, r1
 8006016:	3201      	adds	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	230f      	movs	r3, #15
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d9e1      	bls.n	8005fe8 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006024:	2308      	movs	r3, #8
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	0018      	movs	r0, r3
 800602a:	f014 f9cc 	bl	801a3c6 <atoi>
 800602e:	0003      	movs	r3, r0
 8006030:	b2db      	uxtb	r3, r3
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b005      	add	sp, #20
 8006038:	bd90      	pop	{r4, r7, pc}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	20000050 	.word	0x20000050
 8006040:	20000034 	.word	0x20000034

08006044 <ParseTime>:

void ParseTime(char* buffer) {
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	b08b      	sub	sp, #44	@ 0x2c
 8006048:	af04      	add	r7, sp, #16
 800604a:	6078      	str	r0, [r7, #4]
  uint8_t year, month, day, weekday, hours, minutes, seconds;
  uint8_t dag, maand, jaar, weekdag, uren, minuten, seconden;
  hours = aBuff2int(buffer, 24, 25);
 800604c:	2517      	movs	r5, #23
 800604e:	197c      	adds	r4, r7, r5
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2219      	movs	r2, #25
 8006054:	2118      	movs	r1, #24
 8006056:	0018      	movs	r0, r3
 8006058:	f7ff ff5c 	bl	8005f14 <aBuff2int>
 800605c:	0003      	movs	r3, r0
 800605e:	7023      	strb	r3, [r4, #0]
  minutes = aBuff2int(buffer, 27, 28);
 8006060:	2616      	movs	r6, #22
 8006062:	19bc      	adds	r4, r7, r6
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	221c      	movs	r2, #28
 8006068:	211b      	movs	r1, #27
 800606a:	0018      	movs	r0, r3
 800606c:	f7ff ff52 	bl	8005f14 <aBuff2int>
 8006070:	0003      	movs	r3, r0
 8006072:	7023      	strb	r3, [r4, #0]
  seconds = aBuff2int(buffer, 30, 31);
 8006074:	2315      	movs	r3, #21
 8006076:	18fc      	adds	r4, r7, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	221f      	movs	r2, #31
 800607c:	211e      	movs	r1, #30
 800607e:	0018      	movs	r0, r3
 8006080:	f7ff ff48 	bl	8005f14 <aBuff2int>
 8006084:	0003      	movs	r3, r0
 8006086:	7023      	strb	r3, [r4, #0]
  RTC_SetTime(&hrtc, hours, minutes, seconds);
 8006088:	2315      	movs	r3, #21
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	781c      	ldrb	r4, [r3, #0]
 800608e:	19bb      	adds	r3, r7, r6
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	197b      	adds	r3, r7, r5
 8006094:	7819      	ldrb	r1, [r3, #0]
 8006096:	483a      	ldr	r0, [pc, #232]	@ (8006180 <ParseTime+0x13c>)
 8006098:	0023      	movs	r3, r4
 800609a:	f000 f875 	bl	8006188 <RTC_SetTime>
  year = aBuff2int(buffer, 35, 36);
 800609e:	2514      	movs	r5, #20
 80060a0:	197c      	adds	r4, r7, r5
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2224      	movs	r2, #36	@ 0x24
 80060a6:	2123      	movs	r1, #35	@ 0x23
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7ff ff33 	bl	8005f14 <aBuff2int>
 80060ae:	0003      	movs	r3, r0
 80060b0:	7023      	strb	r3, [r4, #0]
  month = aBuff2int(buffer, 17, 19);
 80060b2:	2613      	movs	r6, #19
 80060b4:	19bc      	adds	r4, r7, r6
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2213      	movs	r2, #19
 80060ba:	2111      	movs	r1, #17
 80060bc:	0018      	movs	r0, r3
 80060be:	f7ff ff29 	bl	8005f14 <aBuff2int>
 80060c2:	0003      	movs	r3, r0
 80060c4:	7023      	strb	r3, [r4, #0]
  day = aBuff2int(buffer, 21,22);
 80060c6:	2312      	movs	r3, #18
 80060c8:	18fc      	adds	r4, r7, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2216      	movs	r2, #22
 80060ce:	2115      	movs	r1, #21
 80060d0:	0018      	movs	r0, r3
 80060d2:	f7ff ff1f 	bl	8005f14 <aBuff2int>
 80060d6:	0003      	movs	r3, r0
 80060d8:	7023      	strb	r3, [r4, #0]
  weekday = aBuff2int(buffer, 13, 15);
 80060da:	2211      	movs	r2, #17
 80060dc:	18bc      	adds	r4, r7, r2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	220f      	movs	r2, #15
 80060e2:	210d      	movs	r1, #13
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7ff ff15 	bl	8005f14 <aBuff2int>
 80060ea:	0003      	movs	r3, r0
 80060ec:	7023      	strb	r3, [r4, #0]
  RTC_SetDate(&hrtc, weekday, day, month, year);
 80060ee:	19bb      	adds	r3, r7, r6
 80060f0:	781c      	ldrb	r4, [r3, #0]
 80060f2:	2312      	movs	r3, #18
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	2311      	movs	r3, #17
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	7819      	ldrb	r1, [r3, #0]
 80060fe:	4820      	ldr	r0, [pc, #128]	@ (8006180 <ParseTime+0x13c>)
 8006100:	197b      	adds	r3, r7, r5
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	0023      	movs	r3, r4
 8006108:	f000 f8ce 	bl	80062a8 <RTC_SetDate>
  RTC_GetDate(&hrtc, &weekdag, &dag, &maand, &jaar);
 800610c:	230f      	movs	r3, #15
 800610e:	18fc      	adds	r4, r7, r3
 8006110:	2210      	movs	r2, #16
 8006112:	18ba      	adds	r2, r7, r2
 8006114:	210d      	movs	r1, #13
 8006116:	1879      	adds	r1, r7, r1
 8006118:	4819      	ldr	r0, [pc, #100]	@ (8006180 <ParseTime+0x13c>)
 800611a:	250e      	movs	r5, #14
 800611c:	197b      	adds	r3, r7, r5
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	0023      	movs	r3, r4
 8006122:	f000 f8fd 	bl	8006320 <RTC_GetDate>
  RTC_GetTime(&hrtc, &uren, &minuten, &seconden);
 8006126:	260a      	movs	r6, #10
 8006128:	19bb      	adds	r3, r7, r6
 800612a:	210b      	movs	r1, #11
 800612c:	000d      	movs	r5, r1
 800612e:	187a      	adds	r2, r7, r1
 8006130:	240c      	movs	r4, #12
 8006132:	1939      	adds	r1, r7, r4
 8006134:	4812      	ldr	r0, [pc, #72]	@ (8006180 <ParseTime+0x13c>)
 8006136:	f000 f885 	bl	8006244 <RTC_GetTime>
  printf("time from RTC is: %02d:%02d:%02d, date: %02d-%02d-%02d\r\n", uren, minuten, seconden, dag, maand, jaar);
 800613a:	193b      	adds	r3, r7, r4
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	001c      	movs	r4, r3
 8006140:	0029      	movs	r1, r5
 8006142:	187b      	adds	r3, r7, r1
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	001d      	movs	r5, r3
 8006148:	19bb      	adds	r3, r7, r6
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	001e      	movs	r6, r3
 800614e:	2210      	movs	r2, #16
 8006150:	18bb      	adds	r3, r7, r2
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	001a      	movs	r2, r3
 8006156:	230f      	movs	r3, #15
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	0019      	movs	r1, r3
 800615e:	230e      	movs	r3, #14
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	4807      	ldr	r0, [pc, #28]	@ (8006184 <ParseTime+0x140>)
 8006166:	9302      	str	r3, [sp, #8]
 8006168:	9101      	str	r1, [sp, #4]
 800616a:	9200      	str	r2, [sp, #0]
 800616c:	0033      	movs	r3, r6
 800616e:	002a      	movs	r2, r5
 8006170:	0021      	movs	r1, r4
 8006172:	f015 fd03 	bl	801bb7c <iprintf>
}
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	46bd      	mov	sp, r7
 800617a:	b007      	add	sp, #28
 800617c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	20001180 	.word	0x20001180
 8006184:	0801f5d4 	.word	0x0801f5d4

08006188 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b089      	sub	sp, #36	@ 0x24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	000c      	movs	r4, r1
 8006192:	0010      	movs	r0, r2
 8006194:	0019      	movs	r1, r3
 8006196:	1cfb      	adds	r3, r7, #3
 8006198:	1c22      	adds	r2, r4, #0
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	1cbb      	adds	r3, r7, #2
 800619e:	1c02      	adds	r2, r0, #0
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	1c7b      	adds	r3, r7, #1
 80061a4:	1c0a      	adds	r2, r1, #0
 80061a6:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 80061a8:	240c      	movs	r4, #12
 80061aa:	193b      	adds	r3, r7, r4
 80061ac:	0018      	movs	r0, r3
 80061ae:	2314      	movs	r3, #20
 80061b0:	001a      	movs	r2, r3
 80061b2:	2100      	movs	r1, #0
 80061b4:	f015 fd96 	bl	801bce4 <memset>

    sTime.Hours = hours;
 80061b8:	0021      	movs	r1, r4
 80061ba:	187b      	adds	r3, r7, r1
 80061bc:	1cfa      	adds	r2, r7, #3
 80061be:	7812      	ldrb	r2, [r2, #0]
 80061c0:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80061c2:	187b      	adds	r3, r7, r1
 80061c4:	1cba      	adds	r2, r7, #2
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80061ca:	187b      	adds	r3, r7, r1
 80061cc:	1c7a      	adds	r2, r7, #1
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 80061d2:	187b      	adds	r3, r7, r1
 80061d4:	2200      	movs	r2, #0
 80061d6:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80061d8:	187b      	adds	r3, r7, r1
 80061da:	2200      	movs	r2, #0
 80061dc:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80061de:	187b      	adds	r3, r7, r1
 80061e0:	2200      	movs	r2, #0
 80061e2:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80061e4:	1879      	adds	r1, r7, r1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	0018      	movs	r0, r3
 80061ec:	f00c f922 	bl	8012434 <HAL_RTC_SetTime>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d005      	beq.n	8006200 <RTC_SetTime+0x78>
        // Foutafhandeling
      Debug("Error setting time to RTC");
 80061f4:	4a04      	ldr	r2, [pc, #16]	@ (8006208 <RTC_SetTime+0x80>)
 80061f6:	4b05      	ldr	r3, [pc, #20]	@ (800620c <RTC_SetTime+0x84>)
 80061f8:	0019      	movs	r1, r3
 80061fa:	2003      	movs	r0, #3
 80061fc:	f005 f98a 	bl	800b514 <CreateLine>

    }
}
 8006200:	46c0      	nop			@ (mov r8, r8)
 8006202:	46bd      	mov	sp, r7
 8006204:	b009      	add	sp, #36	@ 0x24
 8006206:	bd90      	pop	{r4, r7, pc}
 8006208:	0801f610 	.word	0x0801f610
 800620c:	0801f62c 	.word	0x0801f62c

08006210 <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 8006218:	4b08      	ldr	r3, [pc, #32]	@ (800623c <InitClock+0x2c>)
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 800621e:	4b07      	ldr	r3, [pc, #28]	@ (800623c <InitClock+0x2c>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	4b07      	ldr	r3, [pc, #28]	@ (8006240 <InitClock+0x30>)
 8006224:	7819      	ldrb	r1, [r3, #0]
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <InitClock+0x30>)
 8006228:	785a      	ldrb	r2, [r3, #1]
 800622a:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <InitClock+0x30>)
 800622c:	789b      	ldrb	r3, [r3, #2]
 800622e:	f7ff ffab 	bl	8006188 <RTC_SetTime>
}
 8006232:	46c0      	nop			@ (mov r8, r8)
 8006234:	46bd      	mov	sp, r7
 8006236:	b002      	add	sp, #8
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	20000cb4 	.word	0x20000cb4
 8006240:	20000cb0 	.word	0x20000cb0

08006244 <RTC_GetTime>:
// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8006244:	b590      	push	{r4, r7, lr}
 8006246:	b08b      	sub	sp, #44	@ 0x2c
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef gTime = {0};
 8006252:	2414      	movs	r4, #20
 8006254:	193b      	adds	r3, r7, r4
 8006256:	0018      	movs	r0, r3
 8006258:	2314      	movs	r3, #20
 800625a:	001a      	movs	r2, r3
 800625c:	2100      	movs	r1, #0
 800625e:	f015 fd41 	bl	801bce4 <memset>

    if (HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006262:	1939      	adds	r1, r7, r4
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	0018      	movs	r0, r3
 800626a:	f00c f98d 	bl	8012588 <HAL_RTC_GetTime>
 800626e:	1e03      	subs	r3, r0, #0
 8006270:	d005      	beq.n	800627e <RTC_GetTime+0x3a>
        // Foutafhandeling
      Debug("Error getting time from RTC");
 8006272:	4a0b      	ldr	r2, [pc, #44]	@ (80062a0 <RTC_GetTime+0x5c>)
 8006274:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <RTC_GetTime+0x60>)
 8006276:	0019      	movs	r1, r3
 8006278:	2003      	movs	r0, #3
 800627a:	f005 f94b 	bl	800b514 <CreateLine>
    }

    *hours = gTime.Hours;
 800627e:	2114      	movs	r1, #20
 8006280:	187b      	adds	r3, r7, r1
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	701a      	strb	r2, [r3, #0]
    *minutes = gTime.Minutes;
 8006288:	187b      	adds	r3, r7, r1
 800628a:	785a      	ldrb	r2, [r3, #1]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	701a      	strb	r2, [r3, #0]
    *seconds = gTime.Seconds;
 8006290:	187b      	adds	r3, r7, r1
 8006292:	789a      	ldrb	r2, [r3, #2]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	701a      	strb	r2, [r3, #0]
}
 8006298:	46c0      	nop			@ (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b00b      	add	sp, #44	@ 0x2c
 800629e:	bd90      	pop	{r4, r7, pc}
 80062a0:	0801f630 	.word	0x0801f630
 80062a4:	0801f62c 	.word	0x0801f62c

080062a8 <RTC_SetDate>:
// Functie om de datum in te stellen
void RTC_SetDate(RTC_HandleTypeDef *hrtc, uint8_t weekday, uint8_t day, uint8_t month, uint8_t year) {
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	000c      	movs	r4, r1
 80062b2:	0010      	movs	r0, r2
 80062b4:	0019      	movs	r1, r3
 80062b6:	1cfb      	adds	r3, r7, #3
 80062b8:	1c22      	adds	r2, r4, #0
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	1cbb      	adds	r3, r7, #2
 80062be:	1c02      	adds	r2, r0, #0
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	1c7b      	adds	r3, r7, #1
 80062c4:	1c0a      	adds	r2, r1, #0
 80062c6:	701a      	strb	r2, [r3, #0]
    RTC_DateTypeDef sDate = {0};
 80062c8:	210c      	movs	r1, #12
 80062ca:	187b      	adds	r3, r7, r1
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]

    sDate.WeekDay = weekday;
 80062d0:	187b      	adds	r3, r7, r1
 80062d2:	1cfa      	adds	r2, r7, #3
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	701a      	strb	r2, [r3, #0]
    sDate.Date = day;
 80062d8:	187b      	adds	r3, r7, r1
 80062da:	1cba      	adds	r2, r7, #2
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	709a      	strb	r2, [r3, #2]
    sDate.Month = month;
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	1c7a      	adds	r2, r7, #1
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	705a      	strb	r2, [r3, #1]
    sDate.Year = year;  // Jaartal zonder eeuw (bv. 2024 -> 24)
 80062e8:	187a      	adds	r2, r7, r1
 80062ea:	2320      	movs	r3, #32
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	70d3      	strb	r3, [r2, #3]

    if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80062f2:	1879      	adds	r1, r7, r1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	0018      	movs	r0, r3
 80062fa:	f00c f9a3 	bl	8012644 <HAL_RTC_SetDate>
 80062fe:	1e03      	subs	r3, r0, #0
 8006300:	d005      	beq.n	800630e <RTC_SetDate+0x66>
        // Foutafhandeling
      Debug("Error setting date to RTC");
 8006302:	4a05      	ldr	r2, [pc, #20]	@ (8006318 <RTC_SetDate+0x70>)
 8006304:	4b05      	ldr	r3, [pc, #20]	@ (800631c <RTC_SetDate+0x74>)
 8006306:	0019      	movs	r1, r3
 8006308:	2003      	movs	r0, #3
 800630a:	f005 f903 	bl	800b514 <CreateLine>
    }
}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b005      	add	sp, #20
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	46c0      	nop			@ (mov r8, r8)
 8006318:	0801f64c 	.word	0x0801f64c
 800631c:	0801f62c 	.word	0x0801f62c

08006320 <RTC_GetDate>:

// Functie om de datum uit te lezen
void RTC_GetDate(RTC_HandleTypeDef *hrtc, uint8_t *weekday, uint8_t *day, uint8_t *month, uint8_t *year) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
    RTC_DateTypeDef gDate = {0};
 800632e:	2114      	movs	r1, #20
 8006330:	187b      	adds	r3, r7, r1
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

    if (HAL_RTC_GetDate(hrtc, &gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006336:	1879      	adds	r1, r7, r1
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	0018      	movs	r0, r3
 800633e:	f00c fa15 	bl	801276c <HAL_RTC_GetDate>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d005      	beq.n	8006352 <RTC_GetDate+0x32>
        // Foutafhandeling
      Debug("Error getting date from RTC");
 8006346:	4a0d      	ldr	r2, [pc, #52]	@ (800637c <RTC_GetDate+0x5c>)
 8006348:	4b0d      	ldr	r3, [pc, #52]	@ (8006380 <RTC_GetDate+0x60>)
 800634a:	0019      	movs	r1, r3
 800634c:	2003      	movs	r0, #3
 800634e:	f005 f8e1 	bl	800b514 <CreateLine>

    }

    *weekday = gDate.WeekDay;
 8006352:	2114      	movs	r1, #20
 8006354:	187b      	adds	r3, r7, r1
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	701a      	strb	r2, [r3, #0]
    *day = gDate.Date;
 800635c:	187b      	adds	r3, r7, r1
 800635e:	789a      	ldrb	r2, [r3, #2]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	701a      	strb	r2, [r3, #0]
    *month = gDate.Month;
 8006364:	187b      	adds	r3, r7, r1
 8006366:	785a      	ldrb	r2, [r3, #1]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	701a      	strb	r2, [r3, #0]
    *year = gDate.Year;
 800636c:	187b      	adds	r3, r7, r1
 800636e:	78da      	ldrb	r2, [r3, #3]
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	701a      	strb	r2, [r3, #0]
}
 8006374:	46c0      	nop			@ (mov r8, r8)
 8006376:	46bd      	mov	sp, r7
 8006378:	b006      	add	sp, #24
 800637a:	bd80      	pop	{r7, pc}
 800637c:	0801f668 	.word	0x0801f668
 8006380:	0801f62c 	.word	0x0801f62c

08006384 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800638a:	003b      	movs	r3, r7
 800638c:	0018      	movs	r0, r3
 800638e:	2308      	movs	r3, #8
 8006390:	001a      	movs	r2, r3
 8006392:	2100      	movs	r1, #0
 8006394:	f015 fca6 	bl	801bce4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006398:	4b30      	ldr	r3, [pc, #192]	@ (800645c <MX_ADC_Init+0xd8>)
 800639a:	4a31      	ldr	r2, [pc, #196]	@ (8006460 <MX_ADC_Init+0xdc>)
 800639c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800639e:	4b2f      	ldr	r3, [pc, #188]	@ (800645c <MX_ADC_Init+0xd8>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80063a4:	4b2d      	ldr	r3, [pc, #180]	@ (800645c <MX_ADC_Init+0xd8>)
 80063a6:	22c0      	movs	r2, #192	@ 0xc0
 80063a8:	0612      	lsls	r2, r2, #24
 80063aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80063ac:	4b2b      	ldr	r3, [pc, #172]	@ (800645c <MX_ADC_Init+0xd8>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80063b2:	4b2a      	ldr	r3, [pc, #168]	@ (800645c <MX_ADC_Init+0xd8>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80063b8:	4b28      	ldr	r3, [pc, #160]	@ (800645c <MX_ADC_Init+0xd8>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063be:	4b27      	ldr	r3, [pc, #156]	@ (800645c <MX_ADC_Init+0xd8>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80063c4:	4b25      	ldr	r3, [pc, #148]	@ (800645c <MX_ADC_Init+0xd8>)
 80063c6:	2220      	movs	r2, #32
 80063c8:	2100      	movs	r1, #0
 80063ca:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80063cc:	4b23      	ldr	r3, [pc, #140]	@ (800645c <MX_ADC_Init+0xd8>)
 80063ce:	2221      	movs	r2, #33	@ 0x21
 80063d0:	2101      	movs	r1, #1
 80063d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063d4:	4b21      	ldr	r3, [pc, #132]	@ (800645c <MX_ADC_Init+0xd8>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063da:	4b20      	ldr	r3, [pc, #128]	@ (800645c <MX_ADC_Init+0xd8>)
 80063dc:	22c2      	movs	r2, #194	@ 0xc2
 80063de:	32ff      	adds	r2, #255	@ 0xff
 80063e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80063e2:	4b1e      	ldr	r3, [pc, #120]	@ (800645c <MX_ADC_Init+0xd8>)
 80063e4:	222c      	movs	r2, #44	@ 0x2c
 80063e6:	2100      	movs	r1, #0
 80063e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80063ea:	4b1c      	ldr	r3, [pc, #112]	@ (800645c <MX_ADC_Init+0xd8>)
 80063ec:	2204      	movs	r2, #4
 80063ee:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80063f0:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <MX_ADC_Init+0xd8>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80063f6:	4b19      	ldr	r3, [pc, #100]	@ (800645c <MX_ADC_Init+0xd8>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80063fc:	4b17      	ldr	r3, [pc, #92]	@ (800645c <MX_ADC_Init+0xd8>)
 80063fe:	2200      	movs	r2, #0
 8006400:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006402:	4b16      	ldr	r3, [pc, #88]	@ (800645c <MX_ADC_Init+0xd8>)
 8006404:	2200      	movs	r2, #0
 8006406:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006408:	4b14      	ldr	r3, [pc, #80]	@ (800645c <MX_ADC_Init+0xd8>)
 800640a:	0018      	movs	r0, r3
 800640c:	f005 fc70 	bl	800bcf0 <HAL_ADC_Init>
 8006410:	1e03      	subs	r3, r0, #0
 8006412:	d001      	beq.n	8006418 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006414:	f000 ff5a 	bl	80072cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006418:	003b      	movs	r3, r7
 800641a:	4a12      	ldr	r2, [pc, #72]	@ (8006464 <MX_ADC_Init+0xe0>)
 800641c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800641e:	003b      	movs	r3, r7
 8006420:	2280      	movs	r2, #128	@ 0x80
 8006422:	0152      	lsls	r2, r2, #5
 8006424:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006426:	003a      	movs	r2, r7
 8006428:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <MX_ADC_Init+0xd8>)
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f005 fecf 	bl	800c1d0 <HAL_ADC_ConfigChannel>
 8006432:	1e03      	subs	r3, r0, #0
 8006434:	d001      	beq.n	800643a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006436:	f000 ff49 	bl	80072cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800643a:	003b      	movs	r3, r7
 800643c:	4a0a      	ldr	r2, [pc, #40]	@ (8006468 <MX_ADC_Init+0xe4>)
 800643e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006440:	003a      	movs	r2, r7
 8006442:	4b06      	ldr	r3, [pc, #24]	@ (800645c <MX_ADC_Init+0xd8>)
 8006444:	0011      	movs	r1, r2
 8006446:	0018      	movs	r0, r3
 8006448:	f005 fec2 	bl	800c1d0 <HAL_ADC_ConfigChannel>
 800644c:	1e03      	subs	r3, r0, #0
 800644e:	d001      	beq.n	8006454 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8006450:	f000 ff3c 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006454:	46c0      	nop			@ (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	b002      	add	sp, #8
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000cb8 	.word	0x20000cb8
 8006460:	40012400 	.word	0x40012400
 8006464:	38004000 	.word	0x38004000
 8006468:	3c008000 	.word	0x3c008000

0800646c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b089      	sub	sp, #36	@ 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006474:	240c      	movs	r4, #12
 8006476:	193b      	adds	r3, r7, r4
 8006478:	0018      	movs	r0, r3
 800647a:	2314      	movs	r3, #20
 800647c:	001a      	movs	r2, r3
 800647e:	2100      	movs	r1, #0
 8006480:	f015 fc30 	bl	801bce4 <memset>
  if(adcHandle->Instance==ADC1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a14      	ldr	r2, [pc, #80]	@ (80064dc <HAL_ADC_MspInit+0x70>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d121      	bne.n	80064d2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <HAL_ADC_MspInit+0x74>)
 8006490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006492:	4b13      	ldr	r3, [pc, #76]	@ (80064e0 <HAL_ADC_MspInit+0x74>)
 8006494:	2180      	movs	r1, #128	@ 0x80
 8006496:	0089      	lsls	r1, r1, #2
 8006498:	430a      	orrs	r2, r1
 800649a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800649c:	4b10      	ldr	r3, [pc, #64]	@ (80064e0 <HAL_ADC_MspInit+0x74>)
 800649e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a0:	4b0f      	ldr	r3, [pc, #60]	@ (80064e0 <HAL_ADC_MspInit+0x74>)
 80064a2:	2104      	movs	r1, #4
 80064a4:	430a      	orrs	r2, r1
 80064a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064a8:	4b0d      	ldr	r3, [pc, #52]	@ (80064e0 <HAL_ADC_MspInit+0x74>)
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	2204      	movs	r2, #4
 80064ae:	4013      	ands	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80064b4:	193b      	adds	r3, r7, r4
 80064b6:	2230      	movs	r2, #48	@ 0x30
 80064b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064ba:	193b      	adds	r3, r7, r4
 80064bc:	2203      	movs	r2, #3
 80064be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c0:	193b      	adds	r3, r7, r4
 80064c2:	2200      	movs	r2, #0
 80064c4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064c6:	193b      	adds	r3, r7, r4
 80064c8:	4a06      	ldr	r2, [pc, #24]	@ (80064e4 <HAL_ADC_MspInit+0x78>)
 80064ca:	0019      	movs	r1, r3
 80064cc:	0010      	movs	r0, r2
 80064ce:	f006 fc87 	bl	800cde0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b009      	add	sp, #36	@ 0x24
 80064d8:	bd90      	pop	{r4, r7, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	40012400 	.word	0x40012400
 80064e0:	40021000 	.word	0x40021000
 80064e4:	50000800 	.word	0x50000800

080064e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ee:	4b10      	ldr	r3, [pc, #64]	@ (8006530 <MX_DMA_Init+0x48>)
 80064f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <MX_DMA_Init+0x48>)
 80064f4:	2101      	movs	r1, #1
 80064f6:	430a      	orrs	r2, r1
 80064f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80064fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006530 <MX_DMA_Init+0x48>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	2201      	movs	r2, #1
 8006500:	4013      	ands	r3, r2
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	200a      	movs	r0, #10
 800650c:	f006 f81a 	bl	800c544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006510:	200a      	movs	r0, #10
 8006512:	f006 f82c 	bl	800c56e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006516:	2200      	movs	r2, #0
 8006518:	2103      	movs	r1, #3
 800651a:	200b      	movs	r0, #11
 800651c:	f006 f812 	bl	800c544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006520:	200b      	movs	r0, #11
 8006522:	f006 f824 	bl	800c56e <HAL_NVIC_EnableIRQ>

}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	46bd      	mov	sp, r7
 800652a:	b002      	add	sp, #8
 800652c:	bd80      	pop	{r7, pc}
 800652e:	46c0      	nop			@ (mov r8, r8)
 8006530:	40021000 	.word	0x40021000

08006534 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b7f      	cmp	r3, #127	@ 0x7f
 8006544:	d901      	bls.n	800654a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006546:	237f      	movs	r3, #127	@ 0x7f
 8006548:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800654a:	2017      	movs	r0, #23
 800654c:	183b      	adds	r3, r7, r0
 800654e:	490d      	ldr	r1, [pc, #52]	@ (8006584 <accessLUT10log10+0x50>)
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	188a      	adds	r2, r1, r2
 8006554:	7812      	ldrb	r2, [r2, #0]
 8006556:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006558:	0001      	movs	r1, r0
 800655a:	187b      	adds	r3, r7, r1
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2206      	movs	r2, #6
 8006560:	4113      	asrs	r3, r2
 8006562:	001a      	movs	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006568:	187b      	adds	r3, r7, r1
 800656a:	781a      	ldrb	r2, [r3, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2106      	movs	r1, #6
 8006572:	408b      	lsls	r3, r1
 8006574:	1ad2      	subs	r2, r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	46bd      	mov	sp, r7
 800657e:	b006      	add	sp, #24
 8006580:	bd80      	pop	{r7, pc}
 8006582:	46c0      	nop			@ (mov r8, r8)
 8006584:	0801ff44 	.word	0x0801ff44

08006588 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006588:	b5b0      	push	{r4, r5, r7, lr}
 800658a:	b090      	sub	sp, #64	@ 0x40
 800658c:	af00      	add	r7, sp, #0
 800658e:	6138      	str	r0, [r7, #16]
 8006590:	6179      	str	r1, [r7, #20]
 8006592:	60fa      	str	r2, [r7, #12]
 8006594:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006596:	2308      	movs	r3, #8
 8006598:	001a      	movs	r2, r3
 800659a:	3a20      	subs	r2, #32
 800659c:	2a00      	cmp	r2, #0
 800659e:	db03      	blt.n	80065a8 <efficient10log10+0x20>
 80065a0:	2101      	movs	r1, #1
 80065a2:	4091      	lsls	r1, r2
 80065a4:	000d      	movs	r5, r1
 80065a6:	e008      	b.n	80065ba <efficient10log10+0x32>
 80065a8:	2220      	movs	r2, #32
 80065aa:	1ad2      	subs	r2, r2, r3
 80065ac:	2101      	movs	r1, #1
 80065ae:	40d1      	lsrs	r1, r2
 80065b0:	000a      	movs	r2, r1
 80065b2:	2100      	movs	r1, #0
 80065b4:	4099      	lsls	r1, r3
 80065b6:	000d      	movs	r5, r1
 80065b8:	4315      	orrs	r5, r2
 80065ba:	2201      	movs	r2, #1
 80065bc:	409a      	lsls	r2, r3
 80065be:	0014      	movs	r4, r2
 80065c0:	2201      	movs	r2, #1
 80065c2:	4252      	negs	r2, r2
 80065c4:	17d3      	asrs	r3, r2, #31
 80065c6:	1912      	adds	r2, r2, r4
 80065c8:	416b      	adcs	r3, r5
 80065ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80065ce:	2336      	movs	r3, #54	@ 0x36
 80065d0:	2208      	movs	r2, #8
 80065d2:	189b      	adds	r3, r3, r2
 80065d4:	19db      	adds	r3, r3, r7
 80065d6:	2200      	movs	r2, #0
 80065d8:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80065da:	e017      	b.n	800660c <efficient10log10+0x84>
    {
        P = P >> 1;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	07db      	lsls	r3, r3, #31
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	0852      	lsrs	r2, r2, #1
 80065e4:	603a      	str	r2, [r7, #0]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	603a      	str	r2, [r7, #0]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	607b      	str	r3, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	687c      	ldr	r4, [r7, #4]
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	617c      	str	r4, [r7, #20]
        bShift++;
 80065fa:	2136      	movs	r1, #54	@ 0x36
 80065fc:	2008      	movs	r0, #8
 80065fe:	180b      	adds	r3, r1, r0
 8006600:	19db      	adds	r3, r3, r7
 8006602:	881a      	ldrh	r2, [r3, #0]
 8006604:	180b      	adds	r3, r1, r0
 8006606:	19db      	adds	r3, r3, r7
 8006608:	3201      	adds	r2, #1
 800660a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	429a      	cmp	r2, r3
 8006612:	d8e3      	bhi.n	80065dc <efficient10log10+0x54>
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006618:	429a      	cmp	r2, r3
 800661a:	d103      	bne.n	8006624 <efficient10log10+0x9c>
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	429a      	cmp	r2, r3
 8006622:	d8db      	bhi.n	80065dc <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	2308      	movs	r3, #8
 8006628:	3b01      	subs	r3, #1
 800662a:	2101      	movs	r1, #1
 800662c:	4099      	lsls	r1, r3
 800662e:	000b      	movs	r3, r1
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800663c:	231c      	movs	r3, #28
 800663e:	2408      	movs	r4, #8
 8006640:	191b      	adds	r3, r3, r4
 8006642:	19da      	adds	r2, r3, r7
 8006644:	2320      	movs	r3, #32
 8006646:	191b      	adds	r3, r3, r4
 8006648:	19d9      	adds	r1, r3, r7
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	0018      	movs	r0, r3
 800664e:	f7ff ff71 	bl	8006534 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006652:	2215      	movs	r2, #21
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8006658:	2036      	movs	r0, #54	@ 0x36
 800665a:	1902      	adds	r2, r0, r4
 800665c:	19d2      	adds	r2, r2, r7
 800665e:	8812      	ldrh	r2, [r2, #0]
 8006660:	2103      	movs	r1, #3
 8006662:	434a      	muls	r2, r1
 8006664:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006666:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006668:	0021      	movs	r1, r4
 800666a:	1843      	adds	r3, r0, r1
 800666c:	19db      	adds	r3, r3, r7
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	4353      	muls	r3, r2
 8006674:	2203      	movs	r2, #3
 8006676:	4113      	asrs	r3, r2
 8006678:	001a      	movs	r2, r3
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800667e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8006680:	2314      	movs	r3, #20
 8006682:	185b      	adds	r3, r3, r1
 8006684:	19da      	adds	r2, r3, r7
 8006686:	2318      	movs	r3, #24
 8006688:	185b      	adds	r3, r3, r1
 800668a:	19db      	adds	r3, r3, r7
 800668c:	0011      	movs	r1, r2
 800668e:	0018      	movs	r0, r3
 8006690:	f000 f80a 	bl	80066a8 <correctIntFracNumber>
    integerPart[0] = intPart;
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	601a      	str	r2, [r3, #0]
}
 80066a0:	46c0      	nop			@ (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b010      	add	sp, #64	@ 0x40
 80066a6:	bdb0      	pop	{r4, r5, r7, pc}

080066a8 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80066b2:	e00a      	b.n	80066ca <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3b0a      	subs	r3, #10
 80066c4:	001a      	movs	r2, r3
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b09      	cmp	r3, #9
 80066d0:	dcf0      	bgt.n	80066b4 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80066d2:	e00a      	b.n	80066ea <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	1e5a      	subs	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330a      	adds	r3, #10
 80066e4:	001a      	movs	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3309      	adds	r3, #9
 80066f0:	dbf0      	blt.n	80066d4 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da0f      	bge.n	800671a <correctIntFracNumber+0x72>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	dd0b      	ble.n	800671a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3b0a      	subs	r3, #10
 8006712:	001a      	movs	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006718:	e012      	b.n	8006740 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	dd0e      	ble.n	8006740 <correctIntFracNumber+0x98>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	da0a      	bge.n	8006740 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	1e5a      	subs	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330a      	adds	r3, #10
 800673a:	001a      	movs	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	46c0      	nop			@ (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}

08006748 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8006756:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <Gadget_Init+0x40>)
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f001 f999 	bl	8007a90 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	0018      	movs	r0, r3
 8006766:	f000 fe0b 	bl	8007380 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0018      	movs	r0, r3
 800676e:	f7fd f8f3 	bl	8003958 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8006772:	4a06      	ldr	r2, [pc, #24]	@ (800678c <Gadget_Init+0x44>)
 8006774:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <Gadget_Init+0x48>)
 8006776:	0019      	movs	r1, r3
 8006778:	2003      	movs	r0, #3
 800677a:	f004 fecb 	bl	800b514 <CreateLine>
}
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	46bd      	mov	sp, r7
 8006782:	b004      	add	sp, #16
 8006784:	bd80      	pop	{r7, pc}
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	20000080 	.word	0x20000080
 800678c:	0801f684 	.word	0x0801f684
 8006790:	0801f698 	.word	0x0801f698

08006794 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  Meas_Test();
 8006798:	f000 ff2a 	bl	80075f0 <Meas_Test>
}
 800679c:	46c0      	nop			@ (mov r8, r8)
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <UpkeepGadget>:

bool UpkeepGadget() {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 80067aa:	f001 f8e1 	bl	8007970 <Meas_Upkeep>
 80067ae:	0003      	movs	r3, r0
 80067b0:	001a      	movs	r2, r3
 80067b2:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <UpkeepGadget+0x4c>)
 80067b4:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 80067b6:	f000 ffc1 	bl	800773c <Mic_Upkeep>
 80067ba:	0003      	movs	r3, r0
 80067bc:	001a      	movs	r2, r3
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <UpkeepGadget+0x50>)
 80067c0:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 80067c2:	4b0b      	ldr	r3, [pc, #44]	@ (80067f0 <UpkeepGadget+0x4c>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d103      	bne.n	80067d2 <UpkeepGadget+0x2e>
 80067ca:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <UpkeepGadget+0x50>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d001      	beq.n	80067d6 <UpkeepGadget+0x32>
 80067d2:	2201      	movs	r2, #1
 80067d4:	e000      	b.n	80067d8 <UpkeepGadget+0x34>
 80067d6:	2200      	movs	r2, #0
 80067d8:	1dfb      	adds	r3, r7, #7
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	2101      	movs	r1, #1
 80067e0:	400a      	ands	r2, r1
 80067e2:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 80067e4:	1dfb      	adds	r3, r7, #7
 80067e6:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 80067e8:	0018      	movs	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b002      	add	sp, #8
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000d14 	.word	0x20000d14
 80067f4:	20000d15 	.word	0x20000d15

080067f8 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0011      	movs	r1, r2
 8006808:	0018      	movs	r0, r3
 800680a:	f002 fa7f 	bl	8008d0c <SGP_Init>
}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	46bd      	mov	sp, r7
 8006812:	b002      	add	sp, #8
 8006814:	bd80      	pop	{r7, pc}

08006816 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006816:	b580      	push	{r7, lr}
 8006818:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800681a:	f002 fa91 	bl	8008d40 <SGP_StartMeasurement>
}
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0018      	movs	r0, r3
 8006830:	f002 faf6 	bl	8008e20 <SGP_GetMeasurementValues>
 8006834:	0003      	movs	r3, r0
}
 8006836:	0018      	movs	r0, r3
 8006838:	46bd      	mov	sp, r7
 800683a:	b002      	add	sp, #8
 800683c:	bd80      	pop	{r7, pc}

0800683e <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800683e:	b580      	push	{r7, lr}
 8006840:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8006842:	f002 fd03 	bl	800924c <SGP_DeviceConnected>
 8006846:	0003      	movs	r3, r0
}
 8006848:	0018      	movs	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b08b      	sub	sp, #44	@ 0x2c
 8006854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006856:	2414      	movs	r4, #20
 8006858:	193b      	adds	r3, r7, r4
 800685a:	0018      	movs	r0, r3
 800685c:	2314      	movs	r3, #20
 800685e:	001a      	movs	r2, r3
 8006860:	2100      	movs	r1, #0
 8006862:	f015 fa3f 	bl	801bce4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006866:	4b7c      	ldr	r3, [pc, #496]	@ (8006a58 <MX_GPIO_Init+0x208>)
 8006868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a58 <MX_GPIO_Init+0x208>)
 800686c:	2104      	movs	r1, #4
 800686e:	430a      	orrs	r2, r1
 8006870:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006872:	4b79      	ldr	r3, [pc, #484]	@ (8006a58 <MX_GPIO_Init+0x208>)
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	2204      	movs	r2, #4
 8006878:	4013      	ands	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800687e:	4b76      	ldr	r3, [pc, #472]	@ (8006a58 <MX_GPIO_Init+0x208>)
 8006880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006882:	4b75      	ldr	r3, [pc, #468]	@ (8006a58 <MX_GPIO_Init+0x208>)
 8006884:	2180      	movs	r1, #128	@ 0x80
 8006886:	430a      	orrs	r2, r1
 8006888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800688a:	4b73      	ldr	r3, [pc, #460]	@ (8006a58 <MX_GPIO_Init+0x208>)
 800688c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688e:	2280      	movs	r2, #128	@ 0x80
 8006890:	4013      	ands	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006896:	4b70      	ldr	r3, [pc, #448]	@ (8006a58 <MX_GPIO_Init+0x208>)
 8006898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a58 <MX_GPIO_Init+0x208>)
 800689c:	2101      	movs	r1, #1
 800689e:	430a      	orrs	r2, r1
 80068a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a58 <MX_GPIO_Init+0x208>)
 80068a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a6:	2201      	movs	r2, #1
 80068a8:	4013      	ands	r3, r2
 80068aa:	60bb      	str	r3, [r7, #8]
 80068ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006a58 <MX_GPIO_Init+0x208>)
 80068b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b2:	4b69      	ldr	r3, [pc, #420]	@ (8006a58 <MX_GPIO_Init+0x208>)
 80068b4:	2102      	movs	r1, #2
 80068b6:	430a      	orrs	r2, r1
 80068b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068ba:	4b67      	ldr	r3, [pc, #412]	@ (8006a58 <MX_GPIO_Init+0x208>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	2202      	movs	r2, #2
 80068c0:	4013      	ands	r3, r2
 80068c2:	607b      	str	r3, [r7, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80068c6:	4b64      	ldr	r3, [pc, #400]	@ (8006a58 <MX_GPIO_Init+0x208>)
 80068c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ca:	4b63      	ldr	r3, [pc, #396]	@ (8006a58 <MX_GPIO_Init+0x208>)
 80068cc:	2108      	movs	r1, #8
 80068ce:	430a      	orrs	r2, r1
 80068d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068d2:	4b61      	ldr	r3, [pc, #388]	@ (8006a58 <MX_GPIO_Init+0x208>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d6:	2208      	movs	r2, #8
 80068d8:	4013      	ands	r3, r2
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80068de:	4b5f      	ldr	r3, [pc, #380]	@ (8006a5c <MX_GPIO_Init+0x20c>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	2101      	movs	r1, #1
 80068e4:	0018      	movs	r0, r3
 80068e6:	f006 fc16 	bl	800d116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80068ea:	4b5c      	ldr	r3, [pc, #368]	@ (8006a5c <MX_GPIO_Init+0x20c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	2102      	movs	r1, #2
 80068f0:	0018      	movs	r0, r3
 80068f2:	f006 fc10 	bl	800d116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80068f6:	495a      	ldr	r1, [pc, #360]	@ (8006a60 <MX_GPIO_Init+0x210>)
 80068f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a64 <MX_GPIO_Init+0x214>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	0018      	movs	r0, r3
 80068fe:	f006 fc0a 	bl	800d116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006902:	2380      	movs	r3, #128	@ 0x80
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	4858      	ldr	r0, [pc, #352]	@ (8006a68 <MX_GPIO_Init+0x218>)
 8006908:	2201      	movs	r2, #1
 800690a:	0019      	movs	r1, r3
 800690c:	f006 fc03 	bl	800d116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006910:	2380      	movs	r3, #128	@ 0x80
 8006912:	015b      	lsls	r3, r3, #5
 8006914:	4854      	ldr	r0, [pc, #336]	@ (8006a68 <MX_GPIO_Init+0x218>)
 8006916:	2200      	movs	r2, #0
 8006918:	0019      	movs	r1, r3
 800691a:	f006 fbfc 	bl	800d116 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800691e:	193b      	adds	r3, r7, r4
 8006920:	4a52      	ldr	r2, [pc, #328]	@ (8006a6c <MX_GPIO_Init+0x21c>)
 8006922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006924:	193b      	adds	r3, r7, r4
 8006926:	2203      	movs	r2, #3
 8006928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692a:	193b      	adds	r3, r7, r4
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006930:	193b      	adds	r3, r7, r4
 8006932:	4a4d      	ldr	r2, [pc, #308]	@ (8006a68 <MX_GPIO_Init+0x218>)
 8006934:	0019      	movs	r1, r3
 8006936:	0010      	movs	r0, r2
 8006938:	f006 fa52 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800693c:	193b      	adds	r3, r7, r4
 800693e:	2203      	movs	r2, #3
 8006940:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006942:	193b      	adds	r3, r7, r4
 8006944:	2201      	movs	r2, #1
 8006946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006948:	193b      	adds	r3, r7, r4
 800694a:	2200      	movs	r2, #0
 800694c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800694e:	193b      	adds	r3, r7, r4
 8006950:	2200      	movs	r2, #0
 8006952:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006954:	193b      	adds	r3, r7, r4
 8006956:	4a41      	ldr	r2, [pc, #260]	@ (8006a5c <MX_GPIO_Init+0x20c>)
 8006958:	0019      	movs	r1, r3
 800695a:	0010      	movs	r0, r2
 800695c:	f006 fa40 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006960:	193b      	adds	r3, r7, r4
 8006962:	2270      	movs	r2, #112	@ 0x70
 8006964:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006966:	193b      	adds	r3, r7, r4
 8006968:	2203      	movs	r2, #3
 800696a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696c:	193b      	adds	r3, r7, r4
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006972:	193a      	adds	r2, r7, r4
 8006974:	23a0      	movs	r3, #160	@ 0xa0
 8006976:	05db      	lsls	r3, r3, #23
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f006 fa30 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8006980:	193b      	adds	r3, r7, r4
 8006982:	4a3b      	ldr	r2, [pc, #236]	@ (8006a70 <MX_GPIO_Init+0x220>)
 8006984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006986:	193b      	adds	r3, r7, r4
 8006988:	2200      	movs	r2, #0
 800698a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698c:	193b      	adds	r3, r7, r4
 800698e:	2200      	movs	r2, #0
 8006990:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006992:	193a      	adds	r2, r7, r4
 8006994:	23a0      	movs	r3, #160	@ 0xa0
 8006996:	05db      	lsls	r3, r3, #23
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f006 fa20 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80069a0:	193b      	adds	r3, r7, r4
 80069a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006a60 <MX_GPIO_Init+0x210>)
 80069a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069a6:	193b      	adds	r3, r7, r4
 80069a8:	2201      	movs	r2, #1
 80069aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ac:	193b      	adds	r3, r7, r4
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b2:	193b      	adds	r3, r7, r4
 80069b4:	2200      	movs	r2, #0
 80069b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b8:	193b      	adds	r3, r7, r4
 80069ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006a64 <MX_GPIO_Init+0x214>)
 80069bc:	0019      	movs	r1, r3
 80069be:	0010      	movs	r0, r2
 80069c0:	f006 fa0e 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80069c4:	193b      	adds	r3, r7, r4
 80069c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a74 <MX_GPIO_Init+0x224>)
 80069c8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069ca:	193b      	adds	r3, r7, r4
 80069cc:	2203      	movs	r2, #3
 80069ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	2200      	movs	r2, #0
 80069d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069d6:	193b      	adds	r3, r7, r4
 80069d8:	4a22      	ldr	r2, [pc, #136]	@ (8006a64 <MX_GPIO_Init+0x214>)
 80069da:	0019      	movs	r1, r3
 80069dc:	0010      	movs	r0, r2
 80069de:	f006 f9ff 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80069e2:	0021      	movs	r1, r4
 80069e4:	187b      	adds	r3, r7, r1
 80069e6:	2280      	movs	r2, #128	@ 0x80
 80069e8:	0092      	lsls	r2, r2, #2
 80069ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069ec:	000c      	movs	r4, r1
 80069ee:	193b      	adds	r3, r7, r4
 80069f0:	2200      	movs	r2, #0
 80069f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f4:	193b      	adds	r3, r7, r4
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80069fa:	193b      	adds	r3, r7, r4
 80069fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a68 <MX_GPIO_Init+0x218>)
 80069fe:	0019      	movs	r1, r3
 8006a00:	0010      	movs	r0, r2
 8006a02:	f006 f9ed 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006a06:	0021      	movs	r1, r4
 8006a08:	187b      	adds	r3, r7, r1
 8006a0a:	22c0      	movs	r2, #192	@ 0xc0
 8006a0c:	0152      	lsls	r2, r2, #5
 8006a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a10:	000c      	movs	r4, r1
 8006a12:	193b      	adds	r3, r7, r4
 8006a14:	2201      	movs	r2, #1
 8006a16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a18:	193b      	adds	r3, r7, r4
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a1e:	193b      	adds	r3, r7, r4
 8006a20:	2200      	movs	r2, #0
 8006a22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a24:	193b      	adds	r3, r7, r4
 8006a26:	4a10      	ldr	r2, [pc, #64]	@ (8006a68 <MX_GPIO_Init+0x218>)
 8006a28:	0019      	movs	r1, r3
 8006a2a:	0010      	movs	r0, r2
 8006a2c:	f006 f9d8 	bl	800cde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006a30:	0021      	movs	r1, r4
 8006a32:	187b      	adds	r3, r7, r1
 8006a34:	2204      	movs	r2, #4
 8006a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a38:	187b      	adds	r3, r7, r1
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a3e:	187b      	adds	r3, r7, r1
 8006a40:	2201      	movs	r2, #1
 8006a42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006a44:	187b      	adds	r3, r7, r1
 8006a46:	4a0c      	ldr	r2, [pc, #48]	@ (8006a78 <MX_GPIO_Init+0x228>)
 8006a48:	0019      	movs	r1, r3
 8006a4a:	0010      	movs	r0, r2
 8006a4c:	f006 f9c8 	bl	800cde0 <HAL_GPIO_Init>

}
 8006a50:	46c0      	nop			@ (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b00b      	add	sp, #44	@ 0x2c
 8006a56:	bd90      	pop	{r4, r7, pc}
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	50001c00 	.word	0x50001c00
 8006a60:	00000301 	.word	0x00000301
 8006a64:	50000400 	.word	0x50000400
 8006a68:	50000800 	.word	0x50000800
 8006a6c:	0000200c 	.word	0x0000200c
 8006a70:	00008180 	.word	0x00008180
 8006a74:	0000403e 	.word	0x0000403e
 8006a78:	50000c00 	.word	0x50000c00

08006a7c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2100      	movs	r1, #0
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f00c f92a 	bl	8012ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2108      	movs	r1, #8
 8006a94:	0018      	movs	r0, r3
 8006a96:	f00c f925 	bl	8012ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	210c      	movs	r1, #12
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f00c f920 	bl	8012ce4 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006aa4:	2380      	movs	r3, #128	@ 0x80
 8006aa6:	05db      	lsls	r3, r3, #23
 8006aa8:	22fa      	movs	r2, #250	@ 0xfa
 8006aaa:	0112      	lsls	r2, r2, #4
 8006aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006aae:	2380      	movs	r3, #128	@ 0x80
 8006ab0:	05db      	lsls	r3, r3, #23
 8006ab2:	22fa      	movs	r2, #250	@ 0xfa
 8006ab4:	0112      	lsls	r2, r2, #4
 8006ab6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006ab8:	2380      	movs	r3, #128	@ 0x80
 8006aba:	05db      	lsls	r3, r3, #23
 8006abc:	22fa      	movs	r2, #250	@ 0xfa
 8006abe:	0112      	lsls	r2, r2, #4
 8006ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006ac2:	2380      	movs	r3, #128	@ 0x80
 8006ac4:	05db      	lsls	r3, r3, #23
 8006ac6:	22fa      	movs	r2, #250	@ 0xfa
 8006ac8:	0112      	lsls	r2, r2, #4
 8006aca:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2100      	movs	r1, #0
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f00c f907 	bl	8012ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2104      	movs	r1, #4
 8006ada:	0018      	movs	r0, r3
 8006adc:	f00c f902 	bl	8012ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2108      	movs	r1, #8
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f00c f8fd 	bl	8012ce4 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006aea:	4b0a      	ldr	r3, [pc, #40]	@ (8006b14 <GPIO_InitPWMLEDs+0x98>)
 8006aec:	22fa      	movs	r2, #250	@ 0xfa
 8006aee:	0112      	lsls	r2, r2, #4
 8006af0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006af2:	4b08      	ldr	r3, [pc, #32]	@ (8006b14 <GPIO_InitPWMLEDs+0x98>)
 8006af4:	22fa      	movs	r2, #250	@ 0xfa
 8006af6:	0112      	lsls	r2, r2, #4
 8006af8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006afa:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <GPIO_InitPWMLEDs+0x98>)
 8006afc:	22fa      	movs	r2, #250	@ 0xfa
 8006afe:	0112      	lsls	r2, r2, #4
 8006b00:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006b02:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <GPIO_InitPWMLEDs+0x98>)
 8006b04:	22fa      	movs	r2, #250	@ 0xfa
 8006b06:	0112      	lsls	r2, r2, #4
 8006b08:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b002      	add	sp, #8
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			@ (mov r8, r8)
 8006b14:	40000400 	.word	0x40000400

08006b18 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	0011      	movs	r1, r2
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f004 fe4b 	bl	800b7c4 <HIDS_Init>
}
 8006b2e:	46c0      	nop			@ (mov r8, r8)
 8006b30:	46bd      	mov	sp, r7
 8006b32:	b002      	add	sp, #8
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006b36:	b580      	push	{r7, lr}
 8006b38:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006b3a:	f004 fe65 	bl	800b808 <HIDS_StartMeasurement>
}
 8006b3e:	46c0      	nop			@ (mov r8, r8)
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0011      	movs	r1, r2
 8006b54:	0018      	movs	r0, r3
 8006b56:	f004 ff3d 	bl	800b9d4 <HIDS_GetMeasurementValues>
 8006b5a:	0003      	movs	r3, r0
}
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	b002      	add	sp, #8
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006b68:	f004 fed8 	bl	800b91c <HIDS_DeviceConnected>
 8006b6c:	0003      	movs	r3, r0
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006b78:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bec <MX_I2C1_Init+0x78>)
 8006b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006b80:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf0 <MX_I2C1_Init+0x7c>)
 8006b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006b84:	4b18      	ldr	r3, [pc, #96]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006b8a:	4b17      	ldr	r3, [pc, #92]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006b90:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006b96:	4b14      	ldr	r3, [pc, #80]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006b9c:	4b12      	ldr	r3, [pc, #72]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006ba2:	4b11      	ldr	r3, [pc, #68]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006bae:	4b0e      	ldr	r3, [pc, #56]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f006 facd 	bl	800d150 <HAL_I2C_Init>
 8006bb6:	1e03      	subs	r3, r0, #0
 8006bb8:	d001      	beq.n	8006bbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006bba:	f000 fb87 	bl	80072cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f008 fa3c 	bl	800f040 <HAL_I2CEx_ConfigAnalogFilter>
 8006bc8:	1e03      	subs	r3, r0, #0
 8006bca:	d001      	beq.n	8006bd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006bcc:	f000 fb7e 	bl	80072cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006bd0:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <MX_I2C1_Init+0x74>)
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f008 fa7f 	bl	800f0d8 <HAL_I2CEx_ConfigDigitalFilter>
 8006bda:	1e03      	subs	r3, r0, #0
 8006bdc:	d001      	beq.n	8006be2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006bde:	f000 fb75 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006be2:	46c0      	nop			@ (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000d18 	.word	0x20000d18
 8006bec:	40005400 	.word	0x40005400
 8006bf0:	00503d58 	.word	0x00503d58

08006bf4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8006c6c <MX_I2C2_Init+0x78>)
 8006bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c00:	4a1b      	ldr	r2, [pc, #108]	@ (8006c70 <MX_I2C2_Init+0x7c>)
 8006c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006c04:	4b18      	ldr	r3, [pc, #96]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c0a:	4b17      	ldr	r3, [pc, #92]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c10:	4b15      	ldr	r3, [pc, #84]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006c16:	4b14      	ldr	r3, [pc, #80]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c22:	4b11      	ldr	r3, [pc, #68]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c28:	4b0f      	ldr	r3, [pc, #60]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c30:	0018      	movs	r0, r3
 8006c32:	f006 fa8d 	bl	800d150 <HAL_I2C_Init>
 8006c36:	1e03      	subs	r3, r0, #0
 8006c38:	d001      	beq.n	8006c3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006c3a:	f000 fb47 	bl	80072cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c40:	2100      	movs	r1, #0
 8006c42:	0018      	movs	r0, r3
 8006c44:	f008 f9fc 	bl	800f040 <HAL_I2CEx_ConfigAnalogFilter>
 8006c48:	1e03      	subs	r3, r0, #0
 8006c4a:	d001      	beq.n	8006c50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006c4c:	f000 fb3e 	bl	80072cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006c50:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <MX_I2C2_Init+0x74>)
 8006c52:	2100      	movs	r1, #0
 8006c54:	0018      	movs	r0, r3
 8006c56:	f008 fa3f 	bl	800f0d8 <HAL_I2CEx_ConfigDigitalFilter>
 8006c5a:	1e03      	subs	r3, r0, #0
 8006c5c:	d001      	beq.n	8006c62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006c5e:	f000 fb35 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000d6c 	.word	0x20000d6c
 8006c6c:	40005800 	.word	0x40005800
 8006c70:	00503d58 	.word	0x00503d58

08006c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b08b      	sub	sp, #44	@ 0x2c
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c7c:	2414      	movs	r4, #20
 8006c7e:	193b      	adds	r3, r7, r4
 8006c80:	0018      	movs	r0, r3
 8006c82:	2314      	movs	r3, #20
 8006c84:	001a      	movs	r2, r3
 8006c86:	2100      	movs	r1, #0
 8006c88:	f015 f82c 	bl	801bce4 <memset>
  if(i2cHandle->Instance==I2C1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a5d      	ldr	r2, [pc, #372]	@ (8006e08 <HAL_I2C_MspInit+0x194>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d000      	beq.n	8006c98 <HAL_I2C_MspInit+0x24>
 8006c96:	e083      	b.n	8006da0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c98:	4b5c      	ldr	r3, [pc, #368]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ca4:	4b59      	ldr	r3, [pc, #356]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	2202      	movs	r2, #2
 8006caa:	4013      	ands	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006cb0:	0021      	movs	r1, r4
 8006cb2:	187b      	adds	r3, r7, r1
 8006cb4:	22c0      	movs	r2, #192	@ 0xc0
 8006cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cb8:	187b      	adds	r3, r7, r1
 8006cba:	2212      	movs	r2, #18
 8006cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	187b      	adds	r3, r7, r1
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	2201      	movs	r2, #1
 8006cce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd0:	187b      	adds	r3, r7, r1
 8006cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8006e10 <HAL_I2C_MspInit+0x19c>)
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	0010      	movs	r0, r2
 8006cd8:	f006 f882 	bl	800cde0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006cde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006ce2:	2180      	movs	r1, #128	@ 0x80
 8006ce4:	0389      	lsls	r1, r1, #14
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006cea:	4b4a      	ldr	r3, [pc, #296]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006cec:	4a4a      	ldr	r2, [pc, #296]	@ (8006e18 <HAL_I2C_MspInit+0x1a4>)
 8006cee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006cf0:	4b48      	ldr	r3, [pc, #288]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006cf2:	2206      	movs	r2, #6
 8006cf4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cf6:	4b47      	ldr	r3, [pc, #284]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cfc:	4b45      	ldr	r3, [pc, #276]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d02:	4b44      	ldr	r3, [pc, #272]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d04:	2280      	movs	r2, #128	@ 0x80
 8006d06:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d08:	4b42      	ldr	r3, [pc, #264]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d0e:	4b41      	ldr	r3, [pc, #260]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006d14:	4b3f      	ldr	r3, [pc, #252]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006d20:	4b3c      	ldr	r3, [pc, #240]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d22:	0018      	movs	r0, r3
 8006d24:	f005 fc40 	bl	800c5a8 <HAL_DMA_Init>
 8006d28:	1e03      	subs	r3, r0, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006d2c:	f000 face 	bl	80072cc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a38      	ldr	r2, [pc, #224]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d36:	4b37      	ldr	r3, [pc, #220]	@ (8006e14 <HAL_I2C_MspInit+0x1a0>)
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006d3c:	4b37      	ldr	r3, [pc, #220]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d3e:	4a38      	ldr	r2, [pc, #224]	@ (8006e20 <HAL_I2C_MspInit+0x1ac>)
 8006d40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006d42:	4b36      	ldr	r3, [pc, #216]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d44:	2206      	movs	r2, #6
 8006d46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d48:	4b34      	ldr	r3, [pc, #208]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d4e:	4b33      	ldr	r3, [pc, #204]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d54:	4b31      	ldr	r3, [pc, #196]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d56:	2280      	movs	r2, #128	@ 0x80
 8006d58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d5a:	4b30      	ldr	r3, [pc, #192]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d60:	4b2e      	ldr	r3, [pc, #184]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006d66:	4b2d      	ldr	r3, [pc, #180]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006d72:	4b2a      	ldr	r3, [pc, #168]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d74:	0018      	movs	r0, r3
 8006d76:	f005 fc17 	bl	800c5a8 <HAL_DMA_Init>
 8006d7a:	1e03      	subs	r3, r0, #0
 8006d7c:	d001      	beq.n	8006d82 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006d7e:	f000 faa5 	bl	80072cc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a25      	ldr	r2, [pc, #148]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d86:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d88:	4b24      	ldr	r3, [pc, #144]	@ (8006e1c <HAL_I2C_MspInit+0x1a8>)
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	2017      	movs	r0, #23
 8006d94:	f005 fbd6 	bl	800c544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006d98:	2017      	movs	r0, #23
 8006d9a:	f005 fbe8 	bl	800c56e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006d9e:	e02e      	b.n	8006dfe <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e24 <HAL_I2C_MspInit+0x1b0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d129      	bne.n	8006dfe <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006daa:	4b18      	ldr	r3, [pc, #96]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dae:	4b17      	ldr	r3, [pc, #92]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006db0:	2102      	movs	r1, #2
 8006db2:	430a      	orrs	r2, r1
 8006db4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006db6:	4b15      	ldr	r3, [pc, #84]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	2202      	movs	r2, #2
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006dc2:	2114      	movs	r1, #20
 8006dc4:	187b      	adds	r3, r7, r1
 8006dc6:	22c0      	movs	r2, #192	@ 0xc0
 8006dc8:	0112      	lsls	r2, r2, #4
 8006dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dcc:	187b      	adds	r3, r7, r1
 8006dce:	2212      	movs	r2, #18
 8006dd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd2:	187b      	adds	r3, r7, r1
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	2203      	movs	r2, #3
 8006ddc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006dde:	187b      	adds	r3, r7, r1
 8006de0:	2206      	movs	r2, #6
 8006de2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006de4:	187b      	adds	r3, r7, r1
 8006de6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <HAL_I2C_MspInit+0x19c>)
 8006de8:	0019      	movs	r1, r3
 8006dea:	0010      	movs	r0, r2
 8006dec:	f005 fff8 	bl	800cde0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006df0:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006df4:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <HAL_I2C_MspInit+0x198>)
 8006df6:	2180      	movs	r1, #128	@ 0x80
 8006df8:	03c9      	lsls	r1, r1, #15
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b00b      	add	sp, #44	@ 0x2c
 8006e04:	bd90      	pop	{r4, r7, pc}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	40005400 	.word	0x40005400
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	50000400 	.word	0x50000400
 8006e14:	20000dc0 	.word	0x20000dc0
 8006e18:	40020030 	.word	0x40020030
 8006e1c:	20000e08 	.word	0x20000e08
 8006e20:	4002001c 	.word	0x4002001c
 8006e24:	40005800 	.word	0x40005800

08006e28 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006e2c:	4b10      	ldr	r3, [pc, #64]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e2e:	4a11      	ldr	r2, [pc, #68]	@ (8006e74 <MX_I2S2_Init+0x4c>)
 8006e30:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8006e32:	4b0f      	ldr	r3, [pc, #60]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e34:	22c0      	movs	r2, #192	@ 0xc0
 8006e36:	0092      	lsls	r2, r2, #2
 8006e38:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e42:	2203      	movs	r2, #3
 8006e44:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006e46:	4b0a      	ldr	r3, [pc, #40]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8006e4c:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e4e:	22fa      	movs	r2, #250	@ 0xfa
 8006e50:	0192      	lsls	r2, r2, #6
 8006e52:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006e5a:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <MX_I2S2_Init+0x48>)
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f008 f987 	bl	800f170 <HAL_I2S_Init>
 8006e62:	1e03      	subs	r3, r0, #0
 8006e64:	d001      	beq.n	8006e6a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8006e66:	f000 fa31 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000e50 	.word	0x20000e50
 8006e74:	40003800 	.word	0x40003800

08006e78 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b089      	sub	sp, #36	@ 0x24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e80:	240c      	movs	r4, #12
 8006e82:	193b      	adds	r3, r7, r4
 8006e84:	0018      	movs	r0, r3
 8006e86:	2314      	movs	r3, #20
 8006e88:	001a      	movs	r2, r3
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f014 ff2a 	bl	801bce4 <memset>
  if(i2sHandle->Instance==SPI2)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	@ (8006f4c <HAL_I2S_MspInit+0xd4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d154      	bne.n	8006f44 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f50 <HAL_I2S_MspInit+0xd8>)
 8006e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f50 <HAL_I2S_MspInit+0xd8>)
 8006ea0:	2180      	movs	r1, #128	@ 0x80
 8006ea2:	01c9      	lsls	r1, r1, #7
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ea8:	4b29      	ldr	r3, [pc, #164]	@ (8006f50 <HAL_I2S_MspInit+0xd8>)
 8006eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eac:	4b28      	ldr	r3, [pc, #160]	@ (8006f50 <HAL_I2S_MspInit+0xd8>)
 8006eae:	2102      	movs	r1, #2
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006eb4:	4b26      	ldr	r3, [pc, #152]	@ (8006f50 <HAL_I2S_MspInit+0xd8>)
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	2202      	movs	r2, #2
 8006eba:	4013      	ands	r3, r2
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006ec0:	193b      	adds	r3, r7, r4
 8006ec2:	22b0      	movs	r2, #176	@ 0xb0
 8006ec4:	0212      	lsls	r2, r2, #8
 8006ec6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec8:	0021      	movs	r1, r4
 8006eca:	187b      	adds	r3, r7, r1
 8006ecc:	2202      	movs	r2, #2
 8006ece:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed0:	187b      	adds	r3, r7, r1
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed6:	187b      	adds	r3, r7, r1
 8006ed8:	2200      	movs	r2, #0
 8006eda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006edc:	187b      	adds	r3, r7, r1
 8006ede:	2200      	movs	r2, #0
 8006ee0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ee2:	187b      	adds	r3, r7, r1
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f54 <HAL_I2S_MspInit+0xdc>)
 8006ee6:	0019      	movs	r1, r3
 8006ee8:	0010      	movs	r0, r2
 8006eea:	f005 ff79 	bl	800cde0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006eee:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f5c <HAL_I2S_MspInit+0xe4>)
 8006ef2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006ef4:	4b18      	ldr	r3, [pc, #96]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006efa:	4b17      	ldr	r3, [pc, #92]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f00:	4b15      	ldr	r3, [pc, #84]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f06:	4b14      	ldr	r3, [pc, #80]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f08:	2280      	movs	r2, #128	@ 0x80
 8006f0a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f0c:	4b12      	ldr	r3, [pc, #72]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f0e:	2280      	movs	r2, #128	@ 0x80
 8006f10:	0052      	lsls	r2, r2, #1
 8006f12:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f14:	4b10      	ldr	r3, [pc, #64]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f16:	2280      	movs	r2, #128	@ 0x80
 8006f18:	00d2      	lsls	r2, r2, #3
 8006f1a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f1e:	2220      	movs	r2, #32
 8006f20:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006f28:	4b0b      	ldr	r3, [pc, #44]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f005 fb3c 	bl	800c5a8 <HAL_DMA_Init>
 8006f30:	1e03      	subs	r3, r0, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006f34:	f000 f9ca 	bl	80072cc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a07      	ldr	r2, [pc, #28]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f3e:	4b06      	ldr	r3, [pc, #24]	@ (8006f58 <HAL_I2S_MspInit+0xe0>)
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006f44:	46c0      	nop			@ (mov r8, r8)
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b009      	add	sp, #36	@ 0x24
 8006f4a:	bd90      	pop	{r4, r7, pc}
 8006f4c:	40003800 	.word	0x40003800
 8006f50:	40021000 	.word	0x40021000
 8006f54:	50000400 	.word	0x50000400
 8006f58:	20000e8c 	.word	0x20000e8c
 8006f5c:	40020044 	.word	0x40020044

08006f60 <SetTestDone>:
  /* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  testDone = true;
 8006f64:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe0 <SetTestDone+0x80>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8006f6a:	23fa      	movs	r3, #250	@ 0xfa
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f004 fe7c 	bl	800bc6c <HAL_Delay>
  SetDBLED(false, false, true);
 8006f74:	2201      	movs	r2, #1
 8006f76:	2100      	movs	r1, #0
 8006f78:	2000      	movs	r0, #0
 8006f7a:	f003 fb75 	bl	800a668 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8006f7e:	4a19      	ldr	r2, [pc, #100]	@ (8006fe4 <SetTestDone+0x84>)
 8006f80:	23fa      	movs	r3, #250	@ 0xfa
 8006f82:	0119      	lsls	r1, r3, #4
 8006f84:	23fa      	movs	r3, #250	@ 0xfa
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f003 fb39 	bl	800a600 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8006f8e:	4a15      	ldr	r2, [pc, #84]	@ (8006fe4 <SetTestDone+0x84>)
 8006f90:	23fa      	movs	r3, #250	@ 0xfa
 8006f92:	0119      	lsls	r1, r3, #4
 8006f94:	23fa      	movs	r3, #250	@ 0xfa
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f003 fbaf 	bl	800a6fc <SetVocLED>
  HAL_Delay(1000);
 8006f9e:	23fa      	movs	r3, #250	@ 0xfa
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f004 fe62 	bl	800bc6c <HAL_Delay>
  SetDBLED(false, false, false);
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	2000      	movs	r0, #0
 8006fae:	f003 fb5b 	bl	800a668 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8006fb2:	23fa      	movs	r3, #250	@ 0xfa
 8006fb4:	011a      	lsls	r2, r3, #4
 8006fb6:	23fa      	movs	r3, #250	@ 0xfa
 8006fb8:	0119      	lsls	r1, r3, #4
 8006fba:	23fa      	movs	r3, #250	@ 0xfa
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f003 fb1e 	bl	800a600 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8006fc4:	23fa      	movs	r3, #250	@ 0xfa
 8006fc6:	011a      	lsls	r2, r3, #4
 8006fc8:	23fa      	movs	r3, #250	@ 0xfa
 8006fca:	0119      	lsls	r1, r3, #4
 8006fcc:	23fa      	movs	r3, #250	@ 0xfa
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f003 fb93 	bl	800a6fc <SetVocLED>
  InitDone();
 8006fd6:	f003 fabd 	bl	800a554 <InitDone>
}
 8006fda:	46c0      	nop			@ (mov r8, r8)
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000ed4 	.word	0x20000ed4
 8006fe4:	00000bb8 	.word	0x00000bb8

08006fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006fec:	f004 fdce 	bl	800bb8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ff0:	f000 f8ce 	bl	8007190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ff4:	f7ff fc2c 	bl	8006850 <MX_GPIO_Init>
  MX_DMA_Init();
 8006ff8:	f7ff fa76 	bl	80064e8 <MX_DMA_Init>
  MX_I2C1_Init();
 8006ffc:	f7ff fdba 	bl	8006b74 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007000:	f7ff ff12 	bl	8006e28 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007004:	f004 f89c 	bl	800b140 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007008:	f7ff fdf4 	bl	8006bf4 <MX_I2C2_Init>
  MX_TIM2_Init();
 800700c:	f003 fe90 	bl	800ad30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007010:	f003 ff02 	bl	800ae18 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007014:	f004 f8c8 	bl	800b1a8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007018:	f7ff f9b4 	bl	8006384 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800701c:	f011 fc70 	bl	8018900 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007020:	f000 ff02 	bl	8007e28 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007024:	f004 f856 	bl	800b0d4 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007028:	f003 ff74 	bl	800af14 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800702c:	4a45      	ldr	r2, [pc, #276]	@ (8007144 <main+0x15c>)
 800702e:	4b46      	ldr	r3, [pc, #280]	@ (8007148 <main+0x160>)
 8007030:	0011      	movs	r1, r2
 8007032:	0018      	movs	r0, r3
 8007034:	f7ff fd22 	bl	8006a7c <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007038:	f7fe ff5c 	bl	8005ef4 <UserButton_Pressed>
 800703c:	1e03      	subs	r3, r0, #0
 800703e:	d004      	beq.n	800704a <main+0x62>
    EnableESPProg();
 8007040:	f011 fd2e 	bl	8018aa0 <EnableESPProg>
    ESP_Programming = true;
 8007044:	4b41      	ldr	r3, [pc, #260]	@ (800714c <main+0x164>)
 8007046:	2201      	movs	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800704a:	2003      	movs	r0, #3
 800704c:	f004 fac4 	bl	800b5d8 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007050:	f004 fada 	bl	800b608 <BinaryReleaseInfo>
  InitClock(&hrtc);
 8007054:	4b3e      	ldr	r3, [pc, #248]	@ (8007150 <main+0x168>)
 8007056:	0018      	movs	r0, r3
 8007058:	f7ff f8da 	bl	8006210 <InitClock>
  //===========
  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 800705c:	4a3d      	ldr	r2, [pc, #244]	@ (8007154 <main+0x16c>)
 800705e:	493e      	ldr	r1, [pc, #248]	@ (8007158 <main+0x170>)
 8007060:	483e      	ldr	r0, [pc, #248]	@ (800715c <main+0x174>)
 8007062:	230b      	movs	r3, #11
 8007064:	f002 fbec 	bl	8009840 <soundInit>
 8007068:	0003      	movs	r3, r0
 800706a:	001a      	movs	r2, r3
 800706c:	2301      	movs	r3, #1
 800706e:	4053      	eors	r3, r2
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <main+0x9a>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 8007076:	4a3a      	ldr	r2, [pc, #232]	@ (8007160 <main+0x178>)
 8007078:	4b3a      	ldr	r3, [pc, #232]	@ (8007164 <main+0x17c>)
 800707a:	21d5      	movs	r1, #213	@ 0xd5
 800707c:	0018      	movs	r0, r3
 800707e:	f004 faf5 	bl	800b66c <errorHandler>
  }
  //============================
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8007082:	4b39      	ldr	r3, [pc, #228]	@ (8007168 <main+0x180>)
 8007084:	4a39      	ldr	r2, [pc, #228]	@ (800716c <main+0x184>)
 8007086:	4934      	ldr	r1, [pc, #208]	@ (8007158 <main+0x170>)
 8007088:	4839      	ldr	r0, [pc, #228]	@ (8007170 <main+0x188>)
 800708a:	f7ff fb5d 	bl	8006748 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 800708e:	4b39      	ldr	r3, [pc, #228]	@ (8007174 <main+0x18c>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d019      	beq.n	80070ca <main+0xe2>
 8007096:	4b2d      	ldr	r3, [pc, #180]	@ (800714c <main+0x164>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2201      	movs	r2, #1
 800709c:	4053      	eors	r3, r2
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d012      	beq.n	80070ca <main+0xe2>
 80070a4:	4b34      	ldr	r3, [pc, #208]	@ (8007178 <main+0x190>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	4053      	eors	r3, r2
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00b      	beq.n	80070ca <main+0xe2>
      MeasurementBusy = UpkeepGadget();
 80070b2:	f7ff fb77 	bl	80067a4 <UpkeepGadget>
 80070b6:	0003      	movs	r3, r0
 80070b8:	001a      	movs	r2, r3
 80070ba:	4b30      	ldr	r3, [pc, #192]	@ (800717c <main+0x194>)
 80070bc:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 80070be:	f7fd ffc9 	bl	8005054 <ESP_Upkeep>
 80070c2:	0003      	movs	r3, r0
 80070c4:	001a      	movs	r2, r3
 80070c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007180 <main+0x198>)
 80070c8:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80070ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007174 <main+0x18c>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	4053      	eors	r3, r2
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00f      	beq.n	80070f8 <main+0x110>
 80070d8:	4b1c      	ldr	r3, [pc, #112]	@ (800714c <main+0x164>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2201      	movs	r2, #1
 80070de:	4053      	eors	r3, r2
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <main+0x110>
 80070e6:	4b24      	ldr	r3, [pc, #144]	@ (8007178 <main+0x190>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2201      	movs	r2, #1
 80070ec:	4053      	eors	r3, r2
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <main+0x110>
      Gadget_Test();
 80070f4:	f7ff fb4e 	bl	8006794 <Gadget_Test>
    }
    Status_Upkeep();
 80070f8:	f003 fcd0 	bl	800aa9c <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 80070fc:	4b21      	ldr	r3, [pc, #132]	@ (8007184 <main+0x19c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	0018      	movs	r0, r3
 8007102:	f004 f9b1 	bl	800b468 <TimestampIsReached>
 8007106:	1e03      	subs	r3, r0, #0
 8007108:	d00c      	beq.n	8007124 <main+0x13c>
      charge = Battery_Upkeep();
 800710a:	f003 fcce 	bl	800aaaa <Battery_Upkeep>
 800710e:	0003      	movs	r3, r0
 8007110:	001a      	movs	r2, r3
 8007112:	4b1d      	ldr	r3, [pc, #116]	@ (8007188 <main+0x1a0>)
 8007114:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 8007116:	f004 fd9f 	bl	800bc58 <HAL_GetTick>
 800711a:	0003      	movs	r3, r0
 800711c:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <main+0x1a4>)
 800711e:	189a      	adds	r2, r3, r2
 8007120:	4b18      	ldr	r3, [pc, #96]	@ (8007184 <main+0x19c>)
 8007122:	601a      	str	r2, [r3, #0]
      //GoToSleep(2);
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8007124:	4b18      	ldr	r3, [pc, #96]	@ (8007188 <main+0x1a0>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <main+0x154>
 800712c:	4b14      	ldr	r3, [pc, #80]	@ (8007180 <main+0x198>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b09      	cmp	r3, #9
 8007132:	d103      	bne.n	800713c <main+0x154>
      batteryEmpty = true;
 8007134:	4b10      	ldr	r3, [pc, #64]	@ (8007178 <main+0x190>)
 8007136:	2201      	movs	r2, #1
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	e002      	b.n	8007142 <main+0x15a>
    }
    else{
      batteryEmpty = false;
 800713c:	4b0e      	ldr	r3, [pc, #56]	@ (8007178 <main+0x190>)
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007142:	e7a4      	b.n	800708e <main+0xa6>
 8007144:	20002150 	.word	0x20002150
 8007148:	20002110 	.word	0x20002110
 800714c:	20000ed5 	.word	0x20000ed5
 8007150:	20001180 	.word	0x20001180
 8007154:	20002190 	.word	0x20002190
 8007158:	20000e50 	.word	0x20000e50
 800715c:	20000e8c 	.word	0x20000e8c
 8007160:	0801f69c 	.word	0x0801f69c
 8007164:	0801ffc4 	.word	0x0801ffc4
 8007168:	20000cb8 	.word	0x20000cb8
 800716c:	20002340 	.word	0x20002340
 8007170:	20000d18 	.word	0x20000d18
 8007174:	20000ed4 	.word	0x20000ed4
 8007178:	20000ed6 	.word	0x20000ed6
 800717c:	20000ed7 	.word	0x20000ed7
 8007180:	20000edd 	.word	0x20000edd
 8007184:	20000ed8 	.word	0x20000ed8
 8007188:	20000edc 	.word	0x20000edc
 800718c:	0000ea60 	.word	0x0000ea60

08007190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007190:	b590      	push	{r4, r7, lr}
 8007192:	b09d      	sub	sp, #116	@ 0x74
 8007194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007196:	2438      	movs	r4, #56	@ 0x38
 8007198:	193b      	adds	r3, r7, r4
 800719a:	0018      	movs	r0, r3
 800719c:	2338      	movs	r3, #56	@ 0x38
 800719e:	001a      	movs	r2, r3
 80071a0:	2100      	movs	r1, #0
 80071a2:	f014 fd9f 	bl	801bce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071a6:	2324      	movs	r3, #36	@ 0x24
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	0018      	movs	r0, r3
 80071ac:	2314      	movs	r3, #20
 80071ae:	001a      	movs	r2, r3
 80071b0:	2100      	movs	r1, #0
 80071b2:	f014 fd97 	bl	801bce4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071b6:	003b      	movs	r3, r7
 80071b8:	0018      	movs	r0, r3
 80071ba:	2324      	movs	r3, #36	@ 0x24
 80071bc:	001a      	movs	r2, r3
 80071be:	2100      	movs	r1, #0
 80071c0:	f014 fd90 	bl	801bce4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071c4:	4b32      	ldr	r3, [pc, #200]	@ (8007290 <SystemClock_Config+0x100>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a32      	ldr	r2, [pc, #200]	@ (8007294 <SystemClock_Config+0x104>)
 80071ca:	401a      	ands	r2, r3
 80071cc:	4b30      	ldr	r3, [pc, #192]	@ (8007290 <SystemClock_Config+0x100>)
 80071ce:	2180      	movs	r1, #128	@ 0x80
 80071d0:	0109      	lsls	r1, r1, #4
 80071d2:	430a      	orrs	r2, r1
 80071d4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80071d6:	f00a f92f 	bl	8011438 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80071da:	4b2f      	ldr	r3, [pc, #188]	@ (8007298 <SystemClock_Config+0x108>)
 80071dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071de:	4b2e      	ldr	r3, [pc, #184]	@ (8007298 <SystemClock_Config+0x108>)
 80071e0:	492c      	ldr	r1, [pc, #176]	@ (8007294 <SystemClock_Config+0x104>)
 80071e2:	400a      	ands	r2, r1
 80071e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80071e6:	193b      	adds	r3, r7, r4
 80071e8:	2226      	movs	r2, #38	@ 0x26
 80071ea:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80071ec:	193b      	adds	r3, r7, r4
 80071ee:	2280      	movs	r2, #128	@ 0x80
 80071f0:	0052      	lsls	r2, r2, #1
 80071f2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071f4:	0021      	movs	r1, r4
 80071f6:	187b      	adds	r3, r7, r1
 80071f8:	2201      	movs	r2, #1
 80071fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	2210      	movs	r2, #16
 8007200:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007202:	187b      	adds	r3, r7, r1
 8007204:	2201      	movs	r2, #1
 8007206:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007208:	187b      	adds	r3, r7, r1
 800720a:	2200      	movs	r2, #0
 800720c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800720e:	187b      	adds	r3, r7, r1
 8007210:	0018      	movs	r0, r3
 8007212:	f00a f91f 	bl	8011454 <HAL_RCC_OscConfig>
 8007216:	1e03      	subs	r3, r0, #0
 8007218:	d001      	beq.n	800721e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800721a:	f000 f857 	bl	80072cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800721e:	2124      	movs	r1, #36	@ 0x24
 8007220:	187b      	adds	r3, r7, r1
 8007222:	220f      	movs	r2, #15
 8007224:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007226:	187b      	adds	r3, r7, r1
 8007228:	2201      	movs	r2, #1
 800722a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800722c:	187b      	adds	r3, r7, r1
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007232:	187b      	adds	r3, r7, r1
 8007234:	2200      	movs	r2, #0
 8007236:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007238:	187b      	adds	r3, r7, r1
 800723a:	2200      	movs	r2, #0
 800723c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800723e:	187b      	adds	r3, r7, r1
 8007240:	2100      	movs	r1, #0
 8007242:	0018      	movs	r0, r3
 8007244:	f00a fcda 	bl	8011bfc <HAL_RCC_ClockConfig>
 8007248:	1e03      	subs	r3, r0, #0
 800724a:	d001      	beq.n	8007250 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800724c:	f000 f83e 	bl	80072cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007250:	003b      	movs	r3, r7
 8007252:	226d      	movs	r2, #109	@ 0x6d
 8007254:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007256:	003b      	movs	r3, r7
 8007258:	2200      	movs	r2, #0
 800725a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800725c:	003b      	movs	r3, r7
 800725e:	2200      	movs	r2, #0
 8007260:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007262:	003b      	movs	r3, r7
 8007264:	2200      	movs	r2, #0
 8007266:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007268:	003b      	movs	r3, r7
 800726a:	2280      	movs	r2, #128	@ 0x80
 800726c:	0252      	lsls	r2, r2, #9
 800726e:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007270:	003b      	movs	r3, r7
 8007272:	2280      	movs	r2, #128	@ 0x80
 8007274:	04d2      	lsls	r2, r2, #19
 8007276:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007278:	003b      	movs	r3, r7
 800727a:	0018      	movs	r0, r3
 800727c:	f00a fee2 	bl	8012044 <HAL_RCCEx_PeriphCLKConfig>
 8007280:	1e03      	subs	r3, r0, #0
 8007282:	d001      	beq.n	8007288 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8007284:	f000 f822 	bl	80072cc <Error_Handler>
  }
}
 8007288:	46c0      	nop			@ (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b01d      	add	sp, #116	@ 0x74
 800728e:	bd90      	pop	{r4, r7, pc}
 8007290:	40007000 	.word	0x40007000
 8007294:	ffffe7ff 	.word	0xffffe7ff
 8007298:	40021000 	.word	0x40021000

0800729c <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 800729c:	b590      	push	{r4, r7, lr}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	000a      	movs	r2, r1
 80072a6:	1cbb      	adds	r3, r7, #2
 80072a8:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 80072aa:	4c06      	ldr	r4, [pc, #24]	@ (80072c4 <printString+0x28>)
 80072ac:	1cbb      	adds	r3, r7, #2
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4805      	ldr	r0, [pc, #20]	@ (80072c8 <printString+0x2c>)
 80072b4:	0023      	movs	r3, r4
 80072b6:	f00c f8d5 	bl	8013464 <HAL_UART_Transmit>
}
 80072ba:	46c0      	nop			@ (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b003      	add	sp, #12
 80072c0:	bd90      	pop	{r4, r7, pc}
 80072c2:	46c0      	nop			@ (mov r8, r8)
 80072c4:	0000ffff 	.word	0x0000ffff
 80072c8:	20002288 	.word	0x20002288

080072cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80072d0:	b672      	cpsid	i
}
 80072d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80072d4:	46c0      	nop			@ (mov r8, r8)
 80072d6:	e7fd      	b.n	80072d4 <Error_Handler+0x8>

080072d8 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80072dc:	f7ff fc2b 	bl	8006b36 <HT_StartMeasurement>
}
 80072e0:	46c0      	nop			@ (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80072ec:	4a04      	ldr	r2, [pc, #16]	@ (8007300 <HT_IsMeasurementDoneWrapper+0x18>)
 80072ee:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <HT_IsMeasurementDoneWrapper+0x1c>)
 80072f0:	0011      	movs	r1, r2
 80072f2:	0018      	movs	r0, r3
 80072f4:	f7ff fc26 	bl	8006b44 <HT_GetMeasurementValues>
 80072f8:	0003      	movs	r3, r0
}
 80072fa:	0018      	movs	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000ee4 	.word	0x20000ee4
 8007304:	20000ee0 	.word	0x20000ee0

08007308 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 800730c:	f7ff fa83 	bl	8006816 <Gas_StartMeasurement>
}
 8007310:	46c0      	nop			@ (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 800731c:	4b03      	ldr	r3, [pc, #12]	@ (800732c <VOC_IsMeasurementDoneWrapper+0x14>)
 800731e:	0018      	movs	r0, r3
 8007320:	f7ff fa80 	bl	8006824 <Gas_GetMeasurementValues>
 8007324:	0003      	movs	r3, r0
}
 8007326:	0018      	movs	r0, r3
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000ee8 	.word	0x20000ee8

08007330 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
}
 8007334:	46c0      	nop			@ (mov r8, r8)
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800733a:	b580      	push	{r7, lr}
 800733c:	af00      	add	r7, sp, #0
  return true;
 800733e:	2301      	movs	r3, #1
}
 8007340:	0018      	movs	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 8007346:	b580      	push	{r7, lr}
 8007348:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 800734a:	f000 fd1b 	bl	8007d84 <MIC_TestMeasurementDone>
 800734e:	0003      	movs	r3, r0
}
 8007350:	0018      	movs	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <testInit>:

void testInit(){
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 800735c:	4b07      	ldr	r3, [pc, #28]	@ (800737c <testInit+0x24>)
 800735e:	2200      	movs	r2, #0
 8007360:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007362:	4b06      	ldr	r3, [pc, #24]	@ (800737c <testInit+0x24>)
 8007364:	2200      	movs	r2, #0
 8007366:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 8007368:	4b04      	ldr	r3, [pc, #16]	@ (800737c <testInit+0x24>)
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 800736e:	4b03      	ldr	r3, [pc, #12]	@ (800737c <testInit+0x24>)
 8007370:	2200      	movs	r2, #0
 8007372:	705a      	strb	r2, [r3, #1]
}
 8007374:	46c0      	nop			@ (mov r8, r8)
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	20000f24 	.word	0x20000f24

08007380 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8007380:	b5b0      	push	{r4, r5, r7, lr}
 8007382:	b092      	sub	sp, #72	@ 0x48
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 800738c:	f7ff ffe4 	bl	8007358 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8007390:	4b6e      	ldr	r3, [pc, #440]	@ (800754c <Meas_Init+0x1cc>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <Meas_Init+0x20>
 8007398:	4b6c      	ldr	r3, [pc, #432]	@ (800754c <Meas_Init+0x1cc>)
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d068      	beq.n	8007472 <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	0018      	movs	r0, r3
 80073a4:	f7fe fa3c 	bl	8005820 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80073a8:	f7ff fbdc 	bl	8006b64 <HT_DeviceConnected>
 80073ac:	0003      	movs	r3, r0
 80073ae:	001a      	movs	r2, r3
 80073b0:	2301      	movs	r3, #1
 80073b2:	4053      	eors	r3, r2
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00c      	beq.n	80073d4 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 80073ba:	4a65      	ldr	r2, [pc, #404]	@ (8007550 <Meas_Init+0x1d0>)
 80073bc:	4b65      	ldr	r3, [pc, #404]	@ (8007554 <Meas_Init+0x1d4>)
 80073be:	0019      	movs	r1, r3
 80073c0:	2001      	movs	r0, #1
 80073c2:	f004 f8a7 	bl	800b514 <CreateLine>
       MeasTest.HT_Tested = false;
 80073c6:	4b64      	ldr	r3, [pc, #400]	@ (8007558 <Meas_Init+0x1d8>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 80073cc:	4b5f      	ldr	r3, [pc, #380]	@ (800754c <Meas_Init+0x1cc>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e008      	b.n	80073e6 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 80073d4:	4b60      	ldr	r3, [pc, #384]	@ (8007558 <Meas_Init+0x1d8>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 80073da:	4a60      	ldr	r2, [pc, #384]	@ (800755c <Meas_Init+0x1dc>)
 80073dc:	4b60      	ldr	r3, [pc, #384]	@ (8007560 <Meas_Init+0x1e0>)
 80073de:	0019      	movs	r1, r3
 80073e0:	2003      	movs	r0, #3
 80073e2:	f004 f897 	bl	800b514 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 80073e6:	f7ff fa2a 	bl	800683e <Gas_DeviceConnected>
 80073ea:	0003      	movs	r3, r0
 80073ec:	001a      	movs	r2, r3
 80073ee:	2301      	movs	r3, #1
 80073f0:	4053      	eors	r3, r2
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00c      	beq.n	8007412 <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 80073f8:	4b57      	ldr	r3, [pc, #348]	@ (8007558 <Meas_Init+0x1d8>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 80073fe:	4a59      	ldr	r2, [pc, #356]	@ (8007564 <Meas_Init+0x1e4>)
 8007400:	4b54      	ldr	r3, [pc, #336]	@ (8007554 <Meas_Init+0x1d4>)
 8007402:	0019      	movs	r1, r3
 8007404:	2001      	movs	r0, #1
 8007406:	f004 f885 	bl	800b514 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 800740a:	4b50      	ldr	r3, [pc, #320]	@ (800754c <Meas_Init+0x1cc>)
 800740c:	2200      	movs	r2, #0
 800740e:	705a      	strb	r2, [r3, #1]
 8007410:	e008      	b.n	8007424 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8007412:	4b51      	ldr	r3, [pc, #324]	@ (8007558 <Meas_Init+0x1d8>)
 8007414:	2201      	movs	r2, #1
 8007416:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8007418:	4a53      	ldr	r2, [pc, #332]	@ (8007568 <Meas_Init+0x1e8>)
 800741a:	4b51      	ldr	r3, [pc, #324]	@ (8007560 <Meas_Init+0x1e0>)
 800741c:	0019      	movs	r1, r3
 800741e:	2003      	movs	r0, #3
 8007420:	f004 f878 	bl	800b514 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8007424:	4b4c      	ldr	r3, [pc, #304]	@ (8007558 <Meas_Init+0x1d8>)
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <Meas_Init+0xc0>
 800742c:	4b4a      	ldr	r3, [pc, #296]	@ (8007558 <Meas_Init+0x1d8>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8007434:	2200      	movs	r2, #0
 8007436:	2101      	movs	r1, #1
 8007438:	2000      	movs	r0, #0
 800743a:	f003 f915 	bl	800a668 <SetDBLED>
 800743e:	e018      	b.n	8007472 <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8007440:	2200      	movs	r2, #0
 8007442:	2100      	movs	r1, #0
 8007444:	2001      	movs	r0, #1
 8007446:	f003 f90f 	bl	800a668 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800744a:	4b48      	ldr	r3, [pc, #288]	@ (800756c <Meas_Init+0x1ec>)
 800744c:	2200      	movs	r2, #0
 800744e:	2101      	movs	r1, #1
 8007450:	0018      	movs	r0, r3
 8007452:	f005 fe60 	bl	800d116 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8007456:	2380      	movs	r3, #128	@ 0x80
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	4844      	ldr	r0, [pc, #272]	@ (800756c <Meas_Init+0x1ec>)
 800745c:	2201      	movs	r2, #1
 800745e:	0019      	movs	r1, r3
 8007460:	f005 fe59 	bl	800d116 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007464:	2380      	movs	r3, #128	@ 0x80
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4840      	ldr	r0, [pc, #256]	@ (800756c <Meas_Init+0x1ec>)
 800746a:	2201      	movs	r2, #1
 800746c:	0019      	movs	r1, r3
 800746e:	f005 fe52 	bl	800d116 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8007472:	4b36      	ldr	r3, [pc, #216]	@ (800754c <Meas_Init+0x1cc>)
 8007474:	78db      	ldrb	r3, [r3, #3]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 800747a:	4a3d      	ldr	r2, [pc, #244]	@ (8007570 <Meas_Init+0x1f0>)
 800747c:	4b3d      	ldr	r3, [pc, #244]	@ (8007574 <Meas_Init+0x1f4>)
 800747e:	0019      	movs	r1, r3
 8007480:	2002      	movs	r0, #2
 8007482:	f004 f847 	bl	800b514 <CreateLine>
          enableMicrophone(true);
 8007486:	2001      	movs	r0, #1
 8007488:	f002 fa42 	bl	8009910 <enableMicrophone>

  }
  uint8_t offset = 0;
 800748c:	2547      	movs	r5, #71	@ 0x47
 800748e:	197b      	adds	r3, r7, r5
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8007494:	197b      	adds	r3, r7, r5
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	197a      	adds	r2, r7, r5
 800749a:	1c59      	adds	r1, r3, #1
 800749c:	7011      	strb	r1, [r2, #0]
 800749e:	4a2b      	ldr	r2, [pc, #172]	@ (800754c <Meas_Init+0x1cc>)
 80074a0:	7814      	ldrb	r4, [r2, #0]
 80074a2:	4a35      	ldr	r2, [pc, #212]	@ (8007578 <Meas_Init+0x1f8>)
 80074a4:	0119      	lsls	r1, r3, #4
 80074a6:	4835      	ldr	r0, [pc, #212]	@ (800757c <Meas_Init+0x1fc>)
 80074a8:	5088      	str	r0, [r1, r2]
 80074aa:	4933      	ldr	r1, [pc, #204]	@ (8007578 <Meas_Init+0x1f8>)
 80074ac:	011a      	lsls	r2, r3, #4
 80074ae:	188a      	adds	r2, r1, r2
 80074b0:	3204      	adds	r2, #4
 80074b2:	4933      	ldr	r1, [pc, #204]	@ (8007580 <Meas_Init+0x200>)
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	4930      	ldr	r1, [pc, #192]	@ (8007578 <Meas_Init+0x1f8>)
 80074b8:	011a      	lsls	r2, r3, #4
 80074ba:	188a      	adds	r2, r1, r2
 80074bc:	3208      	adds	r2, #8
 80074be:	4931      	ldr	r1, [pc, #196]	@ (8007584 <Meas_Init+0x204>)
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007578 <Meas_Init+0x1f8>)
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	18d3      	adds	r3, r2, r3
 80074c8:	330c      	adds	r3, #12
 80074ca:	1c22      	adds	r2, r4, #0
 80074cc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80074ce:	197b      	adds	r3, r7, r5
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	197a      	adds	r2, r7, r5
 80074d4:	1c59      	adds	r1, r3, #1
 80074d6:	7011      	strb	r1, [r2, #0]
 80074d8:	4a1c      	ldr	r2, [pc, #112]	@ (800754c <Meas_Init+0x1cc>)
 80074da:	7854      	ldrb	r4, [r2, #1]
 80074dc:	4a26      	ldr	r2, [pc, #152]	@ (8007578 <Meas_Init+0x1f8>)
 80074de:	0119      	lsls	r1, r3, #4
 80074e0:	4829      	ldr	r0, [pc, #164]	@ (8007588 <Meas_Init+0x208>)
 80074e2:	5088      	str	r0, [r1, r2]
 80074e4:	4924      	ldr	r1, [pc, #144]	@ (8007578 <Meas_Init+0x1f8>)
 80074e6:	011a      	lsls	r2, r3, #4
 80074e8:	188a      	adds	r2, r1, r2
 80074ea:	3204      	adds	r2, #4
 80074ec:	4927      	ldr	r1, [pc, #156]	@ (800758c <Meas_Init+0x20c>)
 80074ee:	6011      	str	r1, [r2, #0]
 80074f0:	4921      	ldr	r1, [pc, #132]	@ (8007578 <Meas_Init+0x1f8>)
 80074f2:	011a      	lsls	r2, r3, #4
 80074f4:	188a      	adds	r2, r1, r2
 80074f6:	3208      	adds	r2, #8
 80074f8:	4925      	ldr	r1, [pc, #148]	@ (8007590 <Meas_Init+0x210>)
 80074fa:	6011      	str	r1, [r2, #0]
 80074fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007578 <Meas_Init+0x1f8>)
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	18d3      	adds	r3, r2, r3
 8007502:	330c      	adds	r3, #12
 8007504:	1c22      	adds	r2, r4, #0
 8007506:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8007508:	197b      	adds	r3, r7, r5
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	197a      	adds	r2, r7, r5
 800750e:	1c59      	adds	r1, r3, #1
 8007510:	7011      	strb	r1, [r2, #0]
 8007512:	4a0e      	ldr	r2, [pc, #56]	@ (800754c <Meas_Init+0x1cc>)
 8007514:	7894      	ldrb	r4, [r2, #2]
 8007516:	4a18      	ldr	r2, [pc, #96]	@ (8007578 <Meas_Init+0x1f8>)
 8007518:	0119      	lsls	r1, r3, #4
 800751a:	481e      	ldr	r0, [pc, #120]	@ (8007594 <Meas_Init+0x214>)
 800751c:	5088      	str	r0, [r1, r2]
 800751e:	4916      	ldr	r1, [pc, #88]	@ (8007578 <Meas_Init+0x1f8>)
 8007520:	011a      	lsls	r2, r3, #4
 8007522:	188a      	adds	r2, r1, r2
 8007524:	3204      	adds	r2, #4
 8007526:	491c      	ldr	r1, [pc, #112]	@ (8007598 <Meas_Init+0x218>)
 8007528:	6011      	str	r1, [r2, #0]
 800752a:	4913      	ldr	r1, [pc, #76]	@ (8007578 <Meas_Init+0x1f8>)
 800752c:	011a      	lsls	r2, r3, #4
 800752e:	188a      	adds	r2, r1, r2
 8007530:	3208      	adds	r2, #8
 8007532:	491a      	ldr	r1, [pc, #104]	@ (800759c <Meas_Init+0x21c>)
 8007534:	6011      	str	r1, [r2, #0]
 8007536:	4a10      	ldr	r2, [pc, #64]	@ (8007578 <Meas_Init+0x1f8>)
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	18d3      	adds	r3, r2, r3
 800753c:	330c      	adds	r3, #12
 800753e:	1c22      	adds	r2, r4, #0
 8007540:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	46bd      	mov	sp, r7
 8007546:	b012      	add	sp, #72	@ 0x48
 8007548:	bdb0      	pop	{r4, r5, r7, pc}
 800754a:	46c0      	nop			@ (mov r8, r8)
 800754c:	20000f20 	.word	0x20000f20
 8007550:	0801f6b0 	.word	0x0801f6b0
 8007554:	0801f6e0 	.word	0x0801f6e0
 8007558:	20000f24 	.word	0x20000f24
 800755c:	0801f6e4 	.word	0x0801f6e4
 8007560:	0801f710 	.word	0x0801f710
 8007564:	0801f714 	.word	0x0801f714
 8007568:	0801f730 	.word	0x0801f730
 800756c:	50000400 	.word	0x50000400
 8007570:	0801f748 	.word	0x0801f748
 8007574:	0801f76c 	.word	0x0801f76c
 8007578:	20000ef0 	.word	0x20000ef0
 800757c:	080072d9 	.word	0x080072d9
 8007580:	080072e9 	.word	0x080072e9
 8007584:	20000eec 	.word	0x20000eec
 8007588:	08007309 	.word	0x08007309
 800758c:	08007319 	.word	0x08007319
 8007590:	20000eed 	.word	0x20000eed
 8007594:	08007331 	.word	0x08007331
 8007598:	0800733b 	.word	0x0800733b
 800759c:	20000eee 	.word	0x20000eee

080075a0 <StartMeasurements>:

void StartMeasurements(void) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80075a4:	4b10      	ldr	r3, [pc, #64]	@ (80075e8 <StartMeasurements+0x48>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e015      	b.n	80075d8 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80075ac:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <StartMeasurements+0x48>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4a0e      	ldr	r2, [pc, #56]	@ (80075ec <StartMeasurements+0x4c>)
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	18d3      	adds	r3, r2, r3
 80075b6:	330c      	adds	r3, #12
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d006      	beq.n	80075cc <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80075be:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <StartMeasurements+0x48>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	001a      	movs	r2, r3
 80075c4:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <StartMeasurements+0x4c>)
 80075c6:	0112      	lsls	r2, r2, #4
 80075c8:	58d3      	ldr	r3, [r2, r3]
 80075ca:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80075cc:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <StartMeasurements+0x48>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	4b04      	ldr	r3, [pc, #16]	@ (80075e8 <StartMeasurements+0x48>)
 80075d6:	701a      	strb	r2, [r3, #0]
 80075d8:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <StartMeasurements+0x48>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d9e5      	bls.n	80075ac <StartMeasurements+0xc>
    }
  }
}
 80075e0:	46c0      	nop			@ (mov r8, r8)
 80075e2:	46c0      	nop			@ (mov r8, r8)
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000f28 	.word	0x20000f28
 80075ec:	20000ef0 	.word	0x20000ef0

080075f0 <Meas_Test>:

void Meas_Test(){
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 80075f4:	4b23      	ldr	r3, [pc, #140]	@ (8007684 <Meas_Test+0x94>)
 80075f6:	78db      	ldrb	r3, [r3, #3]
 80075f8:	2201      	movs	r2, #1
 80075fa:	4053      	eors	r3, r2
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <Meas_Test+0x16>
    ESP_WakeTest();
 8007602:	f7fd fc11 	bl	8004e28 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8007606:	4b1f      	ldr	r3, [pc, #124]	@ (8007684 <Meas_Test+0x94>)
 8007608:	789b      	ldrb	r3, [r3, #2]
 800760a:	2201      	movs	r2, #1
 800760c:	4053      	eors	r3, r2
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01b      	beq.n	800764c <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007614:	f7ff fe97 	bl	8007346 <MIC_IsTestMeasurementDoneWrapper>
 8007618:	1e03      	subs	r3, r0, #0
 800761a:	d00b      	beq.n	8007634 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 800761c:	4b19      	ldr	r3, [pc, #100]	@ (8007684 <Meas_Test+0x94>)
 800761e:	2201      	movs	r2, #1
 8007620:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007622:	23fa      	movs	r3, #250	@ 0xfa
 8007624:	011a      	lsls	r2, r3, #4
 8007626:	4918      	ldr	r1, [pc, #96]	@ (8007688 <Meas_Test+0x98>)
 8007628:	23fa      	movs	r3, #250	@ 0xfa
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	0018      	movs	r0, r3
 800762e:	f002 ffe7 	bl	800a600 <SetStatusLED>
 8007632:	e00b      	b.n	800764c <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007634:	f002 f948 	bl	80098c8 <micSettlingComplete>
 8007638:	1e03      	subs	r3, r0, #0
 800763a:	d007      	beq.n	800764c <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 800763c:	23fa      	movs	r3, #250	@ 0xfa
 800763e:	011a      	lsls	r2, r3, #4
 8007640:	23fa      	movs	r3, #250	@ 0xfa
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	4810      	ldr	r0, [pc, #64]	@ (8007688 <Meas_Test+0x98>)
 8007646:	0019      	movs	r1, r3
 8007648:	f002 ffda 	bl	800a600 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 800764c:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <Meas_Test+0x94>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d013      	beq.n	800767c <Meas_Test+0x8c>
 8007654:	4b0b      	ldr	r3, [pc, #44]	@ (8007684 <Meas_Test+0x94>)
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00f      	beq.n	800767c <Meas_Test+0x8c>
 800765c:	4b09      	ldr	r3, [pc, #36]	@ (8007684 <Meas_Test+0x94>)
 800765e:	78db      	ldrb	r3, [r3, #3]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <Meas_Test+0x8c>
 8007664:	4b07      	ldr	r3, [pc, #28]	@ (8007684 <Meas_Test+0x94>)
 8007666:	789b      	ldrb	r3, [r3, #2]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <Meas_Test+0x8c>
    Info("Test completed");
 800766c:	4a07      	ldr	r2, [pc, #28]	@ (800768c <Meas_Test+0x9c>)
 800766e:	4b08      	ldr	r3, [pc, #32]	@ (8007690 <Meas_Test+0xa0>)
 8007670:	0019      	movs	r1, r3
 8007672:	2002      	movs	r0, #2
 8007674:	f003 ff4e 	bl	800b514 <CreateLine>
    SetTestDone();
 8007678:	f7ff fc72 	bl	8006f60 <SetTestDone>
  }
}
 800767c:	46c0      	nop			@ (mov r8, r8)
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	20000f24 	.word	0x20000f24
 8007688:	00000bb8 	.word	0x00000bb8
 800768c:	0801f770 	.word	0x0801f770
 8007690:	0801f76c 	.word	0x0801f76c

08007694 <ResetMeasurements>:
void ResetMeasurements(void) {
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8007698:	4b0b      	ldr	r3, [pc, #44]	@ (80076c8 <ResetMeasurements+0x34>)
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 800769e:	4b0a      	ldr	r3, [pc, #40]	@ (80076c8 <ResetMeasurements+0x34>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80076a4:	4b08      	ldr	r3, [pc, #32]	@ (80076c8 <ResetMeasurements+0x34>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80076aa:	4b07      	ldr	r3, [pc, #28]	@ (80076c8 <ResetMeasurements+0x34>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 80076b0:	4b05      	ldr	r3, [pc, #20]	@ (80076c8 <ResetMeasurements+0x34>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 80076b6:	4b04      	ldr	r3, [pc, #16]	@ (80076c8 <ResetMeasurements+0x34>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 80076bc:	4b02      	ldr	r3, [pc, #8]	@ (80076c8 <ResetMeasurements+0x34>)
 80076be:	2200      	movs	r2, #0
 80076c0:	73da      	strb	r2, [r3, #15]
}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000ee0 	.word	0x20000ee0

080076cc <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80076d0:	4b18      	ldr	r3, [pc, #96]	@ (8007734 <MeasurementsCompleted+0x68>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e024      	b.n	8007722 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80076d8:	4b16      	ldr	r3, [pc, #88]	@ (8007734 <MeasurementsCompleted+0x68>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	4a16      	ldr	r2, [pc, #88]	@ (8007738 <MeasurementsCompleted+0x6c>)
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	18d3      	adds	r3, r2, r3
 80076e2:	330c      	adds	r3, #12
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d015      	beq.n	8007716 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 80076ea:	4b12      	ldr	r3, [pc, #72]	@ (8007734 <MeasurementsCompleted+0x68>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	4a12      	ldr	r2, [pc, #72]	@ (8007738 <MeasurementsCompleted+0x6c>)
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	18d3      	adds	r3, r2, r3
 80076f4:	3304      	adds	r3, #4
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4798      	blx	r3
 80076fa:	1e03      	subs	r3, r0, #0
 80076fc:	d009      	beq.n	8007712 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <MeasurementsCompleted+0x68>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4a0d      	ldr	r2, [pc, #52]	@ (8007738 <MeasurementsCompleted+0x6c>)
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	18d3      	adds	r3, r2, r3
 8007708:	3308      	adds	r3, #8
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2201      	movs	r2, #1
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e001      	b.n	8007716 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007712:	2300      	movs	r3, #0
 8007714:	e00a      	b.n	800772c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007716:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <MeasurementsCompleted+0x68>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	3301      	adds	r3, #1
 800771c:	b2da      	uxtb	r2, r3
 800771e:	4b05      	ldr	r3, [pc, #20]	@ (8007734 <MeasurementsCompleted+0x68>)
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	4b04      	ldr	r3, [pc, #16]	@ (8007734 <MeasurementsCompleted+0x68>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d9d6      	bls.n	80076d8 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800772a:	2301      	movs	r3, #1
}
 800772c:	0018      	movs	r0, r3
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	46c0      	nop			@ (mov r8, r8)
 8007734:	20000f28 	.word	0x20000f28
 8007738:	20000ef0 	.word	0x20000ef0

0800773c <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b085      	sub	sp, #20
 8007740:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8007742:	4b7d      	ldr	r3, [pc, #500]	@ (8007938 <Mic_Upkeep+0x1fc>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b03      	cmp	r3, #3
 8007748:	d100      	bne.n	800774c <Mic_Upkeep+0x10>
 800774a:	e0c0      	b.n	80078ce <Mic_Upkeep+0x192>
 800774c:	dd00      	ble.n	8007750 <Mic_Upkeep+0x14>
 800774e:	e0dd      	b.n	800790c <Mic_Upkeep+0x1d0>
 8007750:	2b02      	cmp	r3, #2
 8007752:	d037      	beq.n	80077c4 <Mic_Upkeep+0x88>
 8007754:	dd00      	ble.n	8007758 <Mic_Upkeep+0x1c>
 8007756:	e0d9      	b.n	800790c <Mic_Upkeep+0x1d0>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <Mic_Upkeep+0x26>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d014      	beq.n	800778a <Mic_Upkeep+0x4e>
 8007760:	e0d4      	b.n	800790c <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007762:	2001      	movs	r0, #1
 8007764:	f002 f8d4 	bl	8009910 <enableMicrophone>
 8007768:	0003      	movs	r3, r0
 800776a:	001a      	movs	r2, r3
 800776c:	2301      	movs	r3, #1
 800776e:	4053      	eors	r3, r2
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8007776:	4a71      	ldr	r2, [pc, #452]	@ (800793c <Mic_Upkeep+0x200>)
 8007778:	4b71      	ldr	r3, [pc, #452]	@ (8007940 <Mic_Upkeep+0x204>)
 800777a:	21d4      	movs	r1, #212	@ 0xd4
 800777c:	0018      	movs	r0, r3
 800777e:	f003 ff75 	bl	800b66c <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8007782:	4b6d      	ldr	r3, [pc, #436]	@ (8007938 <Mic_Upkeep+0x1fc>)
 8007784:	2201      	movs	r2, #1
 8007786:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 8007788:	e0cf      	b.n	800792a <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 800778a:	f002 f89d 	bl	80098c8 <micSettlingComplete>
 800778e:	1e03      	subs	r3, r0, #0
 8007790:	d105      	bne.n	800779e <Mic_Upkeep+0x62>
 8007792:	4b6c      	ldr	r3, [pc, #432]	@ (8007944 <Mic_Upkeep+0x208>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d100      	bne.n	800779e <Mic_Upkeep+0x62>
 800779c:	e0c0      	b.n	8007920 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 800779e:	f002 f921 	bl	80099e4 <startSPLcalculation>
 80077a2:	0003      	movs	r3, r0
 80077a4:	001a      	movs	r2, r3
 80077a6:	2301      	movs	r3, #1
 80077a8:	4053      	eors	r3, r2
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 80077b0:	4a62      	ldr	r2, [pc, #392]	@ (800793c <Mic_Upkeep+0x200>)
 80077b2:	4b63      	ldr	r3, [pc, #396]	@ (8007940 <Mic_Upkeep+0x204>)
 80077b4:	21e0      	movs	r1, #224	@ 0xe0
 80077b6:	0018      	movs	r0, r3
 80077b8:	f003 ff58 	bl	800b66c <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80077bc:	4b5e      	ldr	r3, [pc, #376]	@ (8007938 <Mic_Upkeep+0x1fc>)
 80077be:	2202      	movs	r2, #2
 80077c0:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 80077c2:	e0ad      	b.n	8007920 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 80077c4:	4b60      	ldr	r3, [pc, #384]	@ (8007948 <Mic_Upkeep+0x20c>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	2101      	movs	r1, #1
 80077ca:	0018      	movs	r0, r3
 80077cc:	f001 ff5e 	bl	800968c <getSoundData>
 80077d0:	1e03      	subs	r3, r0, #0
 80077d2:	d100      	bne.n	80077d6 <Mic_Upkeep+0x9a>
 80077d4:	e0a6      	b.n	8007924 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 80077d6:	f002 f857 	bl	8009888 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80077da:	4b5b      	ldr	r3, [pc, #364]	@ (8007948 <Mic_Upkeep+0x20c>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 80077e0:	4b59      	ldr	r3, [pc, #356]	@ (8007948 <Mic_Upkeep+0x20c>)
 80077e2:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80077e4:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 80077e6:	4b58      	ldr	r3, [pc, #352]	@ (8007948 <Mic_Upkeep+0x20c>)
 80077e8:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80077ea:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 80077ec:	4b56      	ldr	r3, [pc, #344]	@ (8007948 <Mic_Upkeep+0x20c>)
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80077f0:	4856      	ldr	r0, [pc, #344]	@ (800794c <Mic_Upkeep+0x210>)
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	0023      	movs	r3, r4
 80077f6:	f000 faf5 	bl	8007de4 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80077fa:	4b53      	ldr	r3, [pc, #332]	@ (8007948 <Mic_Upkeep+0x20c>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	001a      	movs	r2, r3
 8007800:	4b51      	ldr	r3, [pc, #324]	@ (8007948 <Mic_Upkeep+0x20c>)
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	4952      	ldr	r1, [pc, #328]	@ (8007950 <Mic_Upkeep+0x214>)
 8007806:	0038      	movs	r0, r7
 8007808:	f014 f9c8 	bl	801bb9c <siprintf>

      dBValue = atof(dBbuffer);
 800780c:	003b      	movs	r3, r7
 800780e:	0018      	movs	r0, r3
 8007810:	f012 fdd4 	bl	801a3bc <atof>
 8007814:	0002      	movs	r2, r0
 8007816:	000b      	movs	r3, r1
 8007818:	0010      	movs	r0, r2
 800781a:	0019      	movs	r1, r3
 800781c:	f7fb fe6a 	bl	80034f4 <__aeabi_d2f>
 8007820:	1c02      	adds	r2, r0, #0
 8007822:	4b4c      	ldr	r3, [pc, #304]	@ (8007954 <Mic_Upkeep+0x218>)
 8007824:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8007826:	4b4b      	ldr	r3, [pc, #300]	@ (8007954 <Mic_Upkeep+0x218>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	494b      	ldr	r1, [pc, #300]	@ (8007958 <Mic_Upkeep+0x21c>)
 800782c:	1c18      	adds	r0, r3, #0
 800782e:	f7f9 fbb7 	bl	8000fa0 <__aeabi_fmul>
 8007832:	1c03      	adds	r3, r0, #0
 8007834:	1c18      	adds	r0, r3, #0
 8007836:	f7fb fe15 	bl	8003464 <__aeabi_f2d>
 800783a:	2200      	movs	r2, #0
 800783c:	4b47      	ldr	r3, [pc, #284]	@ (800795c <Mic_Upkeep+0x220>)
 800783e:	f7f9 ff55 	bl	80016ec <__aeabi_dadd>
 8007842:	0002      	movs	r2, r0
 8007844:	000b      	movs	r3, r1
 8007846:	0010      	movs	r0, r2
 8007848:	0019      	movs	r1, r3
 800784a:	f7fb fd7d 	bl	8003348 <__aeabi_d2iz>
 800784e:	0003      	movs	r3, r0
 8007850:	0018      	movs	r0, r3
 8007852:	f7fb fdb5 	bl	80033c0 <__aeabi_i2d>
 8007856:	2200      	movs	r2, #0
 8007858:	4b41      	ldr	r3, [pc, #260]	@ (8007960 <Mic_Upkeep+0x224>)
 800785a:	f7fa faab 	bl	8001db4 <__aeabi_ddiv>
 800785e:	0002      	movs	r2, r0
 8007860:	000b      	movs	r3, r1
 8007862:	0010      	movs	r0, r2
 8007864:	0019      	movs	r1, r3
 8007866:	f7fb fe45 	bl	80034f4 <__aeabi_d2f>
 800786a:	1c02      	adds	r2, r0, #0
 800786c:	4b39      	ldr	r3, [pc, #228]	@ (8007954 <Mic_Upkeep+0x218>)
 800786e:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8007870:	f000 f966 	bl	8007b40 <MIC_Print>
      if (!startSPLcalculation()) {
 8007874:	f002 f8b6 	bl	80099e4 <startSPLcalculation>
 8007878:	0003      	movs	r3, r0
 800787a:	001a      	movs	r2, r3
 800787c:	2301      	movs	r3, #1
 800787e:	4053      	eors	r3, r2
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d005      	beq.n	8007892 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 8007886:	4a2d      	ldr	r2, [pc, #180]	@ (800793c <Mic_Upkeep+0x200>)
 8007888:	4b2d      	ldr	r3, [pc, #180]	@ (8007940 <Mic_Upkeep+0x204>)
 800788a:	21f9      	movs	r1, #249	@ 0xf9
 800788c:	0018      	movs	r0, r3
 800788e:	f003 feed 	bl	800b66c <errorHandler>
      }
      if (!enableMicrophone(false))
 8007892:	2000      	movs	r0, #0
 8007894:	f002 f83c 	bl	8009910 <enableMicrophone>
 8007898:	0003      	movs	r3, r0
 800789a:	001a      	movs	r2, r3
 800789c:	2301      	movs	r3, #1
 800789e:	4053      	eors	r3, r2
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80078a6:	4a25      	ldr	r2, [pc, #148]	@ (800793c <Mic_Upkeep+0x200>)
 80078a8:	4b25      	ldr	r3, [pc, #148]	@ (8007940 <Mic_Upkeep+0x204>)
 80078aa:	21fd      	movs	r1, #253	@ 0xfd
 80078ac:	0018      	movs	r0, r3
 80078ae:	f003 fedd 	bl	800b66c <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 80078b2:	f004 f9d1 	bl	800bc58 <HAL_GetTick>
 80078b6:	0003      	movs	r3, r0
 80078b8:	22fa      	movs	r2, #250	@ 0xfa
 80078ba:	0092      	lsls	r2, r2, #2
 80078bc:	189a      	adds	r2, r3, r2
 80078be:	4b29      	ldr	r3, [pc, #164]	@ (8007964 <Mic_Upkeep+0x228>)
 80078c0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <Mic_Upkeep+0x1fc>)
 80078c4:	2203      	movs	r2, #3
 80078c6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80078c8:	f002 ff92 	bl	800a7f0 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 80078cc:	e02a      	b.n	8007924 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 80078ce:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <Mic_Upkeep+0x228>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	0018      	movs	r0, r3
 80078d4:	f003 fdc8 	bl	800b468 <TimestampIsReached>
 80078d8:	1e03      	subs	r3, r0, #0
 80078da:	d025      	beq.n	8007928 <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 80078dc:	2001      	movs	r0, #1
 80078de:	f002 f817 	bl	8009910 <enableMicrophone>
 80078e2:	0003      	movs	r3, r0
 80078e4:	001a      	movs	r2, r3
 80078e6:	2301      	movs	r3, #1
 80078e8:	4053      	eors	r3, r2
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d007      	beq.n	8007900 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80078f0:	4a12      	ldr	r2, [pc, #72]	@ (800793c <Mic_Upkeep+0x200>)
 80078f2:	230c      	movs	r3, #12
 80078f4:	33ff      	adds	r3, #255	@ 0xff
 80078f6:	0019      	movs	r1, r3
 80078f8:	4b11      	ldr	r3, [pc, #68]	@ (8007940 <Mic_Upkeep+0x204>)
 80078fa:	0018      	movs	r0, r3
 80078fc:	f003 feb6 	bl	800b66c <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007900:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <Mic_Upkeep+0x1fc>)
 8007902:	2201      	movs	r2, #1
 8007904:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007906:	f002 ff5b 	bl	800a7c0 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 800790a:	e00d      	b.n	8007928 <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 800790c:	4a16      	ldr	r2, [pc, #88]	@ (8007968 <Mic_Upkeep+0x22c>)
 800790e:	4b17      	ldr	r3, [pc, #92]	@ (800796c <Mic_Upkeep+0x230>)
 8007910:	0019      	movs	r1, r3
 8007912:	2003      	movs	r0, #3
 8007914:	f003 fdfe 	bl	800b514 <CreateLine>
    MicState = MIC_STATE_INIT;
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <Mic_Upkeep+0x1fc>)
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 800791e:	e004      	b.n	800792a <Mic_Upkeep+0x1ee>
    break;
 8007920:	46c0      	nop			@ (mov r8, r8)
 8007922:	e002      	b.n	800792a <Mic_Upkeep+0x1ee>
    break;
 8007924:	46c0      	nop			@ (mov r8, r8)
 8007926:	e000      	b.n	800792a <Mic_Upkeep+0x1ee>
    break;
 8007928:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800792a:	4b03      	ldr	r3, [pc, #12]	@ (8007938 <Mic_Upkeep+0x1fc>)
 800792c:	781b      	ldrb	r3, [r3, #0]
}
 800792e:	0018      	movs	r0, r3
 8007930:	46bd      	mov	sp, r7
 8007932:	b003      	add	sp, #12
 8007934:	bd90      	pop	{r4, r7, pc}
 8007936:	46c0      	nop			@ (mov r8, r8)
 8007938:	20000f46 	.word	0x20000f46
 800793c:	0801f780 	.word	0x0801f780
 8007940:	0801ffe8 	.word	0x0801ffe8
 8007944:	20001268 	.word	0x20001268
 8007948:	20000f34 	.word	0x20000f34
 800794c:	0801f79c 	.word	0x0801f79c
 8007950:	0801f7c8 	.word	0x0801f7c8
 8007954:	20000f78 	.word	0x20000f78
 8007958:	42c80000 	.word	0x42c80000
 800795c:	3fe00000 	.word	0x3fe00000
 8007960:	40590000 	.word	0x40590000
 8007964:	20000f30 	.word	0x20000f30
 8007968:	0801f7d0 	.word	0x0801f7d0
 800796c:	0801f710 	.word	0x0801f710

08007970 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007970:	b5b0      	push	{r4, r5, r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007976:	4b3c      	ldr	r3, [pc, #240]	@ (8007a68 <Meas_Upkeep+0xf8>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b06      	cmp	r3, #6
 800797c:	d868      	bhi.n	8007a50 <Meas_Upkeep+0xe0>
 800797e:	009a      	lsls	r2, r3, #2
 8007980:	4b3a      	ldr	r3, [pc, #232]	@ (8007a6c <Meas_Upkeep+0xfc>)
 8007982:	18d3      	adds	r3, r2, r3
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007988:	4a39      	ldr	r2, [pc, #228]	@ (8007a70 <Meas_Upkeep+0x100>)
 800798a:	4b3a      	ldr	r3, [pc, #232]	@ (8007a74 <Meas_Upkeep+0x104>)
 800798c:	0019      	movs	r1, r3
 800798e:	2003      	movs	r0, #3
 8007990:	f003 fdc0 	bl	800b514 <CreateLine>
    break;
 8007994:	e063      	b.n	8007a5e <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007996:	f7ff fe7d 	bl	8007694 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 800799a:	4b33      	ldr	r3, [pc, #204]	@ (8007a68 <Meas_Upkeep+0xf8>)
 800799c:	2201      	movs	r2, #1
 800799e:	701a      	strb	r2, [r3, #0]
    break;
 80079a0:	e05d      	b.n	8007a5e <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80079a2:	f7ff fdfd 	bl	80075a0 <StartMeasurements>
    SetMeasurementIndicator();
 80079a6:	f002 fedd 	bl	800a764 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80079aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007a68 <Meas_Upkeep+0xf8>)
 80079ac:	2202      	movs	r2, #2
 80079ae:	701a      	strb	r2, [r3, #0]
   break;
 80079b0:	e055      	b.n	8007a5e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80079b2:	f7ff fe8b 	bl	80076cc <MeasurementsCompleted>
 80079b6:	1e03      	subs	r3, r0, #0
 80079b8:	d04e      	beq.n	8007a58 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80079ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007a68 <Meas_Upkeep+0xf8>)
 80079bc:	2203      	movs	r2, #3
 80079be:	701a      	strb	r2, [r3, #0]
    }
    break;
 80079c0:	e04a      	b.n	8007a58 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 80079c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a78 <Meas_Upkeep+0x108>)
 80079c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007a74 <Meas_Upkeep+0x104>)
 80079c6:	0019      	movs	r1, r3
 80079c8:	2003      	movs	r0, #3
 80079ca:	f003 fda3 	bl	800b514 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 80079ce:	4b2b      	ldr	r3, [pc, #172]	@ (8007a7c <Meas_Upkeep+0x10c>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007a80 <Meas_Upkeep+0x110>)
 80079d4:	4927      	ldr	r1, [pc, #156]	@ (8007a74 <Meas_Upkeep+0x104>)
 80079d6:	2003      	movs	r0, #3
 80079d8:	f003 fd9c 	bl	800b514 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 80079dc:	4b27      	ldr	r3, [pc, #156]	@ (8007a7c <Meas_Upkeep+0x10c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	1c18      	adds	r0, r3, #0
 80079e2:	f7fb fd3f 	bl	8003464 <__aeabi_f2d>
 80079e6:	0004      	movs	r4, r0
 80079e8:	000d      	movs	r5, r1
 80079ea:	4b24      	ldr	r3, [pc, #144]	@ (8007a7c <Meas_Upkeep+0x10c>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	1c18      	adds	r0, r3, #0
 80079f0:	f7fb fd38 	bl	8003464 <__aeabi_f2d>
 80079f4:	0002      	movs	r2, r0
 80079f6:	000b      	movs	r3, r1
 80079f8:	4822      	ldr	r0, [pc, #136]	@ (8007a84 <Meas_Upkeep+0x114>)
 80079fa:	491e      	ldr	r1, [pc, #120]	@ (8007a74 <Meas_Upkeep+0x104>)
 80079fc:	9202      	str	r2, [sp, #8]
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	9400      	str	r4, [sp, #0]
 8007a02:	9501      	str	r5, [sp, #4]
 8007a04:	0002      	movs	r2, r0
 8007a06:	2003      	movs	r0, #3
 8007a08:	f003 fd84 	bl	800b514 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8007a7c <Meas_Upkeep+0x10c>)
 8007a0e:	6858      	ldr	r0, [r3, #4]
 8007a10:	4b1a      	ldr	r3, [pc, #104]	@ (8007a7c <Meas_Upkeep+0x10c>)
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <Meas_Upkeep+0x10c>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	f7fb ff52 	bl	80038c4 <setMeasurement>
    ResetMeasurementIndicator();
 8007a20:	f002 feb8 	bl	800a794 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007a24:	f004 f918 	bl	800bc58 <HAL_GetTick>
 8007a28:	0003      	movs	r3, r0
 8007a2a:	4a17      	ldr	r2, [pc, #92]	@ (8007a88 <Meas_Upkeep+0x118>)
 8007a2c:	189a      	adds	r2, r3, r2
 8007a2e:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <Meas_Upkeep+0x11c>)
 8007a30:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007a32:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <Meas_Upkeep+0xf8>)
 8007a34:	2206      	movs	r2, #6
 8007a36:	701a      	strb	r2, [r3, #0]
    break;
 8007a38:	e011      	b.n	8007a5e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007a3a:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <Meas_Upkeep+0x11c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f003 fd12 	bl	800b468 <TimestampIsReached>
 8007a44:	1e03      	subs	r3, r0, #0
 8007a46:	d009      	beq.n	8007a5c <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007a48:	4b07      	ldr	r3, [pc, #28]	@ (8007a68 <Meas_Upkeep+0xf8>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007a4e:	e005      	b.n	8007a5c <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007a50:	4b05      	ldr	r3, [pc, #20]	@ (8007a68 <Meas_Upkeep+0xf8>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	701a      	strb	r2, [r3, #0]
    break;
 8007a56:	e002      	b.n	8007a5e <Meas_Upkeep+0xee>
    break;
 8007a58:	46c0      	nop			@ (mov r8, r8)
 8007a5a:	e000      	b.n	8007a5e <Meas_Upkeep+0xee>
    break;
 8007a5c:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007a5e:	4b02      	ldr	r3, [pc, #8]	@ (8007a68 <Meas_Upkeep+0xf8>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
}
 8007a62:	0018      	movs	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bdb0      	pop	{r4, r5, r7, pc}
 8007a68:	20000f47 	.word	0x20000f47
 8007a6c:	0801ffcc 	.word	0x0801ffcc
 8007a70:	0801f7f0 	.word	0x0801f7f0
 8007a74:	0801f710 	.word	0x0801f710
 8007a78:	0801f810 	.word	0x0801f810
 8007a7c:	20000ee0 	.word	0x20000ee0
 8007a80:	0801f824 	.word	0x0801f824
 8007a84:	0801f83c 	.word	0x0801f83c
 8007a88:	00002710 	.word	0x00002710
 8007a8c:	20000f2c 	.word	0x20000f2c

08007a90 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007a90:	b590      	push	{r4, r7, lr}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	1d3b      	adds	r3, r7, #4
 8007a98:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007a9a:	240f      	movs	r4, #15
 8007a9c:	193b      	adds	r3, r7, r4
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007aa2:	4b20      	ldr	r3, [pc, #128]	@ (8007b24 <Meas_SetEnabledSensors+0x94>)
 8007aa4:	1d3a      	adds	r2, r7, #4
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007aaa:	193b      	adds	r3, r7, r4
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	193a      	adds	r2, r7, r4
 8007ab0:	1c59      	adds	r1, r3, #1
 8007ab2:	7011      	strb	r1, [r2, #0]
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	7819      	ldrb	r1, [r3, #0]
 8007aba:	4a1b      	ldr	r2, [pc, #108]	@ (8007b28 <Meas_SetEnabledSensors+0x98>)
 8007abc:	0103      	lsls	r3, r0, #4
 8007abe:	18d3      	adds	r3, r2, r3
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	1c0a      	adds	r2, r1, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007ac6:	193b      	adds	r3, r7, r4
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	193a      	adds	r2, r7, r4
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	7011      	strb	r1, [r2, #0]
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	1d3b      	adds	r3, r7, #4
 8007ad4:	7859      	ldrb	r1, [r3, #1]
 8007ad6:	4a14      	ldr	r2, [pc, #80]	@ (8007b28 <Meas_SetEnabledSensors+0x98>)
 8007ad8:	0103      	lsls	r3, r0, #4
 8007ada:	18d3      	adds	r3, r2, r3
 8007adc:	330c      	adds	r3, #12
 8007ade:	1c0a      	adds	r2, r1, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007ae2:	193b      	adds	r3, r7, r4
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	193a      	adds	r2, r7, r4
 8007ae8:	1c59      	adds	r1, r3, #1
 8007aea:	7011      	strb	r1, [r2, #0]
 8007aec:	0018      	movs	r0, r3
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	7899      	ldrb	r1, [r3, #2]
 8007af2:	4a0d      	ldr	r2, [pc, #52]	@ (8007b28 <Meas_SetEnabledSensors+0x98>)
 8007af4:	0103      	lsls	r3, r0, #4
 8007af6:	18d3      	adds	r3, r2, r3
 8007af8:	330c      	adds	r3, #12
 8007afa:	1c0a      	adds	r2, r1, #0
 8007afc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007afe:	193b      	adds	r3, r7, r4
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	193a      	adds	r2, r7, r4
 8007b04:	1c59      	adds	r1, r3, #1
 8007b06:	7011      	strb	r1, [r2, #0]
 8007b08:	0018      	movs	r0, r3
 8007b0a:	1d3b      	adds	r3, r7, #4
 8007b0c:	78d9      	ldrb	r1, [r3, #3]
 8007b0e:	4a06      	ldr	r2, [pc, #24]	@ (8007b28 <Meas_SetEnabledSensors+0x98>)
 8007b10:	0103      	lsls	r3, r0, #4
 8007b12:	18d3      	adds	r3, r2, r3
 8007b14:	330c      	adds	r3, #12
 8007b16:	1c0a      	adds	r2, r1, #0
 8007b18:	701a      	strb	r2, [r3, #0]
}
 8007b1a:	46c0      	nop			@ (mov r8, r8)
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b005      	add	sp, #20
 8007b20:	bd90      	pop	{r4, r7, pc}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	20000f20 	.word	0x20000f20
 8007b28:	20000ef0 	.word	0x20000ef0

08007b2c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007b30:	4b02      	ldr	r3, [pc, #8]	@ (8007b3c <SetESPMeasurementDone+0x10>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	70da      	strb	r2, [r3, #3]
}
 8007b36:	46c0      	nop			@ (mov r8, r8)
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000f24 	.word	0x20000f24

08007b40 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007b46:	4b81      	ldr	r3, [pc, #516]	@ (8007d4c <MIC_Print+0x20c>)
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4b81      	ldr	r3, [pc, #516]	@ (8007d50 <MIC_Print+0x210>)
 8007b4c:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007b4e:	4b81      	ldr	r3, [pc, #516]	@ (8007d54 <MIC_Print+0x214>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b09      	cmp	r3, #9
 8007b54:	d80e      	bhi.n	8007b74 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007b56:	4b7f      	ldr	r3, [pc, #508]	@ (8007d54 <MIC_Print+0x214>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8007d50 <MIC_Print+0x210>)
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	4b7d      	ldr	r3, [pc, #500]	@ (8007d58 <MIC_Print+0x218>)
 8007b62:	0092      	lsls	r2, r2, #2
 8007b64:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007b66:	4b7b      	ldr	r3, [pc, #492]	@ (8007d54 <MIC_Print+0x214>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	4b79      	ldr	r3, [pc, #484]	@ (8007d54 <MIC_Print+0x214>)
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e013      	b.n	8007b9c <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007b74:	4b77      	ldr	r3, [pc, #476]	@ (8007d54 <MIC_Print+0x214>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007b7a:	4b76      	ldr	r3, [pc, #472]	@ (8007d54 <MIC_Print+0x214>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	001a      	movs	r2, r3
 8007b80:	4b73      	ldr	r3, [pc, #460]	@ (8007d50 <MIC_Print+0x210>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	4b74      	ldr	r3, [pc, #464]	@ (8007d58 <MIC_Print+0x218>)
 8007b86:	0092      	lsls	r2, r2, #2
 8007b88:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007b8a:	4b72      	ldr	r3, [pc, #456]	@ (8007d54 <MIC_Print+0x214>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	4b70      	ldr	r3, [pc, #448]	@ (8007d54 <MIC_Print+0x214>)
 8007b94:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007b96:	4b71      	ldr	r3, [pc, #452]	@ (8007d5c <MIC_Print+0x21c>)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8007b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8007d5c <MIC_Print+0x21c>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	4053      	eors	r3, r2
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 8007baa:	4b69      	ldr	r3, [pc, #420]	@ (8007d50 <MIC_Print+0x210>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	1c18      	adds	r0, r3, #0
 8007bb0:	f7fb fea4 	bl	80038fc <setMic>
 8007bb4:	e02d      	b.n	8007c12 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8007bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8007d60 <MIC_Print+0x220>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007bbc:	1dfb      	adds	r3, r7, #7
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	e013      	b.n	8007bec <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8007bc4:	1dfb      	adds	r3, r7, #7
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	4b63      	ldr	r3, [pc, #396]	@ (8007d58 <MIC_Print+0x218>)
 8007bca:	0092      	lsls	r2, r2, #2
 8007bcc:	58d2      	ldr	r2, [r2, r3]
 8007bce:	4b64      	ldr	r3, [pc, #400]	@ (8007d60 <MIC_Print+0x220>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	1c19      	adds	r1, r3, #0
 8007bd4:	1c10      	adds	r0, r2, #0
 8007bd6:	f7f8 fe73 	bl	80008c0 <__aeabi_fadd>
 8007bda:	1c03      	adds	r3, r0, #0
 8007bdc:	1c1a      	adds	r2, r3, #0
 8007bde:	4b60      	ldr	r3, [pc, #384]	@ (8007d60 <MIC_Print+0x220>)
 8007be0:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007be2:	1dfb      	adds	r3, r7, #7
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	1dfb      	adds	r3, r7, #7
 8007be8:	3201      	adds	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	1dfb      	adds	r3, r7, #7
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b09      	cmp	r3, #9
 8007bf2:	d9e7      	bls.n	8007bc4 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8007bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8007d60 <MIC_Print+0x220>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	495a      	ldr	r1, [pc, #360]	@ (8007d64 <MIC_Print+0x224>)
 8007bfa:	1c18      	adds	r0, r3, #0
 8007bfc:	f7f8 ffea 	bl	8000bd4 <__aeabi_fdiv>
 8007c00:	1c03      	adds	r3, r0, #0
 8007c02:	1c1a      	adds	r2, r3, #0
 8007c04:	4b56      	ldr	r3, [pc, #344]	@ (8007d60 <MIC_Print+0x220>)
 8007c06:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007c08:	4b55      	ldr	r3, [pc, #340]	@ (8007d60 <MIC_Print+0x220>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	1c18      	adds	r0, r3, #0
 8007c0e:	f7fb fe75 	bl	80038fc <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 90){ //white
 8007c12:	4b4f      	ldr	r3, [pc, #316]	@ (8007d50 <MIC_Print+0x210>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4954      	ldr	r1, [pc, #336]	@ (8007d68 <MIC_Print+0x228>)
 8007c18:	1c18      	adds	r0, r3, #0
 8007c1a:	f7f8 fc9d 	bl	8000558 <__aeabi_fcmpgt>
 8007c1e:	1e03      	subs	r3, r0, #0
 8007c20:	d004      	beq.n	8007c2c <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8007c22:	2201      	movs	r2, #1
 8007c24:	2101      	movs	r1, #1
 8007c26:	2001      	movs	r0, #1
 8007c28:	f002 fd1e 	bl	800a668 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8007c2c:	4b48      	ldr	r3, [pc, #288]	@ (8007d50 <MIC_Print+0x210>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	494d      	ldr	r1, [pc, #308]	@ (8007d68 <MIC_Print+0x228>)
 8007c32:	1c18      	adds	r0, r3, #0
 8007c34:	f7f8 fc7c 	bl	8000530 <__aeabi_fcmplt>
 8007c38:	1e03      	subs	r3, r0, #0
 8007c3a:	d00c      	beq.n	8007c56 <MIC_Print+0x116>
 8007c3c:	4b44      	ldr	r3, [pc, #272]	@ (8007d50 <MIC_Print+0x210>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	494a      	ldr	r1, [pc, #296]	@ (8007d6c <MIC_Print+0x22c>)
 8007c42:	1c18      	adds	r0, r3, #0
 8007c44:	f7f8 fc92 	bl	800056c <__aeabi_fcmpge>
 8007c48:	1e03      	subs	r3, r0, #0
 8007c4a:	d004      	beq.n	8007c56 <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2100      	movs	r1, #0
 8007c50:	2001      	movs	r0, #1
 8007c52:	f002 fd09 	bl	800a668 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//purple
 8007c56:	4b3e      	ldr	r3, [pc, #248]	@ (8007d50 <MIC_Print+0x210>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4944      	ldr	r1, [pc, #272]	@ (8007d6c <MIC_Print+0x22c>)
 8007c5c:	1c18      	adds	r0, r3, #0
 8007c5e:	f7f8 fc67 	bl	8000530 <__aeabi_fcmplt>
 8007c62:	1e03      	subs	r3, r0, #0
 8007c64:	d00c      	beq.n	8007c80 <MIC_Print+0x140>
 8007c66:	4b3a      	ldr	r3, [pc, #232]	@ (8007d50 <MIC_Print+0x210>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4941      	ldr	r1, [pc, #260]	@ (8007d70 <MIC_Print+0x230>)
 8007c6c:	1c18      	adds	r0, r3, #0
 8007c6e:	f7f8 fc7d 	bl	800056c <__aeabi_fcmpge>
 8007c72:	1e03      	subs	r3, r0, #0
 8007c74:	d004      	beq.n	8007c80 <MIC_Print+0x140>
    SetDBLED(true, false, true);
 8007c76:	2201      	movs	r2, #1
 8007c78:	2100      	movs	r1, #0
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	f002 fcf4 	bl	800a668 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//yellow
 8007c80:	4b33      	ldr	r3, [pc, #204]	@ (8007d50 <MIC_Print+0x210>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	493a      	ldr	r1, [pc, #232]	@ (8007d70 <MIC_Print+0x230>)
 8007c86:	1c18      	adds	r0, r3, #0
 8007c88:	f7f8 fc52 	bl	8000530 <__aeabi_fcmplt>
 8007c8c:	1e03      	subs	r3, r0, #0
 8007c8e:	d00c      	beq.n	8007caa <MIC_Print+0x16a>
 8007c90:	4b2f      	ldr	r3, [pc, #188]	@ (8007d50 <MIC_Print+0x210>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4937      	ldr	r1, [pc, #220]	@ (8007d74 <MIC_Print+0x234>)
 8007c96:	1c18      	adds	r0, r3, #0
 8007c98:	f7f8 fc68 	bl	800056c <__aeabi_fcmpge>
 8007c9c:	1e03      	subs	r3, r0, #0
 8007c9e:	d004      	beq.n	8007caa <MIC_Print+0x16a>
    SetDBLED(true, true, false);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f002 fcdf 	bl	800a668 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//Green
 8007caa:	4b29      	ldr	r3, [pc, #164]	@ (8007d50 <MIC_Print+0x210>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4931      	ldr	r1, [pc, #196]	@ (8007d74 <MIC_Print+0x234>)
 8007cb0:	1c18      	adds	r0, r3, #0
 8007cb2:	f7f8 fc3d 	bl	8000530 <__aeabi_fcmplt>
 8007cb6:	1e03      	subs	r3, r0, #0
 8007cb8:	d00c      	beq.n	8007cd4 <MIC_Print+0x194>
 8007cba:	4b25      	ldr	r3, [pc, #148]	@ (8007d50 <MIC_Print+0x210>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	492e      	ldr	r1, [pc, #184]	@ (8007d78 <MIC_Print+0x238>)
 8007cc0:	1c18      	adds	r0, r3, #0
 8007cc2:	f7f8 fc53 	bl	800056c <__aeabi_fcmpge>
 8007cc6:	1e03      	subs	r3, r0, #0
 8007cc8:	d004      	beq.n	8007cd4 <MIC_Print+0x194>
    SetDBLED(false, true, false);
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2101      	movs	r1, #1
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f002 fcca 	bl	800a668 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//blue
 8007cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8007d50 <MIC_Print+0x210>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4927      	ldr	r1, [pc, #156]	@ (8007d78 <MIC_Print+0x238>)
 8007cda:	1c18      	adds	r0, r3, #0
 8007cdc:	f7f8 fc28 	bl	8000530 <__aeabi_fcmplt>
 8007ce0:	1e03      	subs	r3, r0, #0
 8007ce2:	d00c      	beq.n	8007cfe <MIC_Print+0x1be>
 8007ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8007d50 <MIC_Print+0x210>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4924      	ldr	r1, [pc, #144]	@ (8007d7c <MIC_Print+0x23c>)
 8007cea:	1c18      	adds	r0, r3, #0
 8007cec:	f7f8 fc3e 	bl	800056c <__aeabi_fcmpge>
 8007cf0:	1e03      	subs	r3, r0, #0
 8007cf2:	d004      	beq.n	8007cfe <MIC_Print+0x1be>
    SetDBLED(false, false, true);
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f002 fcb5 	bl	800a668 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//light blue
 8007cfe:	4b14      	ldr	r3, [pc, #80]	@ (8007d50 <MIC_Print+0x210>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	491e      	ldr	r1, [pc, #120]	@ (8007d7c <MIC_Print+0x23c>)
 8007d04:	1c18      	adds	r0, r3, #0
 8007d06:	f7f8 fc13 	bl	8000530 <__aeabi_fcmplt>
 8007d0a:	1e03      	subs	r3, r0, #0
 8007d0c:	d00c      	beq.n	8007d28 <MIC_Print+0x1e8>
 8007d0e:	4b10      	ldr	r3, [pc, #64]	@ (8007d50 <MIC_Print+0x210>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	491b      	ldr	r1, [pc, #108]	@ (8007d80 <MIC_Print+0x240>)
 8007d14:	1c18      	adds	r0, r3, #0
 8007d16:	f7f8 fc29 	bl	800056c <__aeabi_fcmpge>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d004      	beq.n	8007d28 <MIC_Print+0x1e8>
    SetDBLED(false, true, true);
 8007d1e:	2201      	movs	r2, #1
 8007d20:	2101      	movs	r1, #1
 8007d22:	2000      	movs	r0, #0
 8007d24:	f002 fca0 	bl	800a668 <SetDBLED>
  }
  if(dBc < 35){//off
 8007d28:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <MIC_Print+0x210>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4914      	ldr	r1, [pc, #80]	@ (8007d80 <MIC_Print+0x240>)
 8007d2e:	1c18      	adds	r0, r3, #0
 8007d30:	f7f8 fbfe 	bl	8000530 <__aeabi_fcmplt>
 8007d34:	1e03      	subs	r3, r0, #0
 8007d36:	d100      	bne.n	8007d3a <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }


  //FFT();
}
 8007d38:	e004      	b.n	8007d44 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f002 fc92 	bl	800a668 <SetDBLED>
}
 8007d44:	46c0      	nop			@ (mov r8, r8)
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b002      	add	sp, #8
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000f78 	.word	0x20000f78
 8007d50:	20000f48 	.word	0x20000f48
 8007d54:	20000f7c 	.word	0x20000f7c
 8007d58:	20000f4c 	.word	0x20000f4c
 8007d5c:	20000f7d 	.word	0x20000f7d
 8007d60:	20000f74 	.word	0x20000f74
 8007d64:	41200000 	.word	0x41200000
 8007d68:	42b40000 	.word	0x42b40000
 8007d6c:	42a00000 	.word	0x42a00000
 8007d70:	428c0000 	.word	0x428c0000
 8007d74:	42700000 	.word	0x42700000
 8007d78:	42480000 	.word	0x42480000
 8007d7c:	42200000 	.word	0x42200000
 8007d80:	420c0000 	.word	0x420c0000

08007d84 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8007d8a:	4b11      	ldr	r3, [pc, #68]	@ (8007dd0 <MIC_TestMeasurementDone+0x4c>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4a10      	ldr	r2, [pc, #64]	@ (8007dd4 <MIC_TestMeasurementDone+0x50>)
 8007d92:	4911      	ldr	r1, [pc, #68]	@ (8007dd8 <MIC_TestMeasurementDone+0x54>)
 8007d94:	2002      	movs	r0, #2
 8007d96:	f003 fbbd 	bl	800b514 <CreateLine>
  if(DataReady) {
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <MIC_TestMeasurementDone+0x4c>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d010      	beq.n	8007dc6 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8007da4:	1dfb      	adds	r3, r7, #7
 8007da6:	4a0d      	ldr	r2, [pc, #52]	@ (8007ddc <MIC_TestMeasurementDone+0x58>)
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <MIC_TestMeasurementDone+0x58>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	4a0b      	ldr	r2, [pc, #44]	@ (8007de0 <MIC_TestMeasurementDone+0x5c>)
 8007db4:	4908      	ldr	r1, [pc, #32]	@ (8007dd8 <MIC_TestMeasurementDone+0x54>)
 8007db6:	2002      	movs	r0, #2
 8007db8:	f003 fbac 	bl	800b514 <CreateLine>
    ResetMICIndicator();
 8007dbc:	f002 fd18 	bl	800a7f0 <ResetMICIndicator>
    return Check;
 8007dc0:	1dfb      	adds	r3, r7, #7
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	e000      	b.n	8007dc8 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	0018      	movs	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20001268 	.word	0x20001268
 8007dd4:	0801f870 	.word	0x0801f870
 8007dd8:	0801f89c 	.word	0x0801f89c
 8007ddc:	20001269 	.word	0x20001269
 8007de0:	0801f8a0 	.word	0x0801f8a0

08007de4 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8007de4:	b40f      	push	{r0, r1, r2, r3}
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8007dec:	2314      	movs	r3, #20
 8007dee:	18fb      	adds	r3, r7, r3
 8007df0:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	2180      	movs	r1, #128	@ 0x80
 8007df8:	0089      	lsls	r1, r1, #2
 8007dfa:	480a      	ldr	r0, [pc, #40]	@ (8007e24 <print+0x40>)
 8007dfc:	f013 ff66 	bl	801bccc <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8007e00:	4b08      	ldr	r3, [pc, #32]	@ (8007e24 <print+0x40>)
 8007e02:	0018      	movs	r0, r3
 8007e04:	f7f8 f9b2 	bl	800016c <strlen>
 8007e08:	0003      	movs	r3, r0
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <print+0x40>)
 8007e0e:	0011      	movs	r1, r2
 8007e10:	0018      	movs	r0, r3
 8007e12:	f7ff fa43 	bl	800729c <printString>
}
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	b002      	add	sp, #8
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	bc08      	pop	{r3}
 8007e20:	b004      	add	sp, #16
 8007e22:	4718      	bx	r3
 8007e24:	20000f80 	.word	0x20000f80

08007e28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007e2c:	4b16      	ldr	r3, [pc, #88]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e2e:	4a17      	ldr	r2, [pc, #92]	@ (8007e8c <MX_RTC_Init+0x64>)
 8007e30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007e32:	4b15      	ldr	r3, [pc, #84]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007e38:	4b13      	ldr	r3, [pc, #76]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e3a:	227f      	movs	r2, #127	@ 0x7f
 8007e3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007e3e:	4b12      	ldr	r3, [pc, #72]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e40:	22ff      	movs	r2, #255	@ 0xff
 8007e42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007e44:	4b10      	ldr	r3, [pc, #64]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007e50:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007e56:	4b0c      	ldr	r3, [pc, #48]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f00a fa4c 	bl	80122fc <HAL_RTC_Init>
 8007e64:	1e03      	subs	r3, r0, #0
 8007e66:	d001      	beq.n	8007e6c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007e68:	f7ff fa30 	bl	80072cc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <MX_RTC_Init+0x60>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2100      	movs	r1, #0
 8007e72:	0018      	movs	r0, r3
 8007e74:	f00a fda0 	bl	80129b8 <HAL_RTCEx_SetWakeUpTimer>
 8007e78:	1e03      	subs	r3, r0, #0
 8007e7a:	d001      	beq.n	8007e80 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8007e7c:	f7ff fa26 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007e80:	46c0      	nop			@ (mov r8, r8)
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	46c0      	nop			@ (mov r8, r8)
 8007e88:	20001180 	.word	0x20001180
 8007e8c:	40002800 	.word	0x40002800

08007e90 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a06      	ldr	r2, [pc, #24]	@ (8007eb8 <HAL_RTC_MspInit+0x28>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d106      	bne.n	8007eb0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007ea2:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <HAL_RTC_MspInit+0x2c>)
 8007ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ea6:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <HAL_RTC_MspInit+0x2c>)
 8007ea8:	2180      	movs	r1, #128	@ 0x80
 8007eaa:	02c9      	lsls	r1, r1, #11
 8007eac:	430a      	orrs	r2, r1
 8007eae:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007eb0:	46c0      	nop			@ (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40002800 	.word	0x40002800
 8007ebc:	40021000 	.word	0x40021000

08007ec0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d113      	bne.n	8007f06 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	22fe      	movs	r2, #254	@ 0xfe
 8007ee2:	0592      	lsls	r2, r2, #22
 8007ee4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f54 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8007eea:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4a1a      	ldr	r2, [pc, #104]	@ (8007f58 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007ef0:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4a19      	ldr	r2, [pc, #100]	@ (8007f5c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8007ef6:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a19      	ldr	r2, [pc, #100]	@ (8007f60 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8007efc:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a18      	ldr	r2, [pc, #96]	@ (8007f64 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8007f02:	61da      	str	r2, [r3, #28]
 8007f04:	e011      	b.n	8007f2a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a17      	ldr	r2, [pc, #92]	@ (8007f68 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8007f0a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4a17      	ldr	r2, [pc, #92]	@ (8007f6c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8007f10:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4a16      	ldr	r2, [pc, #88]	@ (8007f70 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8007f16:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4a16      	ldr	r2, [pc, #88]	@ (8007f74 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8007f1c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4a15      	ldr	r2, [pc, #84]	@ (8007f78 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8007f22:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4a15      	ldr	r2, [pc, #84]	@ (8007f7c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007f28:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4a14      	ldr	r2, [pc, #80]	@ (8007f80 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8007f2e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a14      	ldr	r2, [pc, #80]	@ (8007f84 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007f34:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a12      	ldr	r2, [pc, #72]	@ (8007f84 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007f3a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4a12      	ldr	r2, [pc, #72]	@ (8007f88 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8007f40:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	0018      	movs	r0, r3
 8007f46:	f000 f831 	bl	8007fac <GasIndexAlgorithm_reset>
}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b004      	add	sp, #16
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	46c0      	nop			@ (mov r8, r8)
 8007f54:	00002710 	.word	0x00002710
 8007f58:	44340000 	.word	0x44340000
 8007f5c:	46859800 	.word	0x46859800
 8007f60:	46a05000 	.word	0x46a05000
 8007f64:	41f00000 	.word	0x41f00000
 8007f68:	42c80000 	.word	0x42c80000
 8007f6c:	00004e20 	.word	0x00004e20
 8007f70:	43340000 	.word	0x43340000
 8007f74:	4528c000 	.word	0x4528c000
 8007f78:	45a32000 	.word	0x45a32000
 8007f7c:	43aa0000 	.word	0x43aa0000
 8007f80:	43660000 	.word	0x43660000
 8007f84:	41400000 	.word	0x41400000
 8007f88:	42480000 	.word	0x42480000

08007f8c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8007f96:	22fe      	movs	r2, #254	@ 0xfe
 8007f98:	0592      	lsls	r2, r2, #22
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f7ff ff8e 	bl	8007ec0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8007fa4:	46c0      	nop			@ (mov r8, r8)
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b002      	add	sp, #8
 8007faa:	bd80      	pop	{r7, pc}

08007fac <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f000 f805 	bl	8007fd8 <GasIndexAlgorithm__init_instances>
}
 8007fce:	46c0      	nop			@ (mov r8, r8)
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	b002      	add	sp, #8
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8007fd8:	b590      	push	{r4, r7, lr}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 f8e8 	bl	80081b8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	0018      	movs	r0, r3
 8007fec:	f000 f9a6 	bl	800833c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007ff0:	1c04      	adds	r4, r0, #0
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f000 f9ab 	bl	8008350 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007ffa:	1c02      	adds	r2, r0, #0
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	1c21      	adds	r1, r4, #0
 8008000:	0018      	movs	r0, r3
 8008002:	f000 fc3b 	bl	800887c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d107      	bne.n	800801e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800800e:	23fe      	movs	r3, #254	@ 0xfe
 8008010:	059b      	lsls	r3, r3, #22
 8008012:	4a0a      	ldr	r2, [pc, #40]	@ (800803c <GasIndexAlgorithm__init_instances+0x64>)
 8008014:	490a      	ldr	r1, [pc, #40]	@ (8008040 <GasIndexAlgorithm__init_instances+0x68>)
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fc86 	bl	8008928 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800801c:	e005      	b.n	800802a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800801e:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <GasIndexAlgorithm__init_instances+0x6c>)
 8008020:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <GasIndexAlgorithm__init_instances+0x70>)
 8008022:	490a      	ldr	r1, [pc, #40]	@ (800804c <GasIndexAlgorithm__init_instances+0x74>)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc7f 	bl	8008928 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	0018      	movs	r0, r3
 800802e:	f000 fd35 	bl	8008a9c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8008032:	46c0      	nop			@ (mov r8, r8)
 8008034:	46bd      	mov	sp, r7
 8008036:	b003      	add	sp, #12
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	bc257a78 	.word	0xbc257a78
 8008040:	44198000 	.word	0x44198000
 8008044:	42c80000 	.word	0x42c80000
 8008048:	bbd4fdf4 	.word	0xbbd4fdf4
 800804c:	43550000 	.word	0x43550000

08008050 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8008050:	b590      	push	{r4, r7, lr}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008060:	4952      	ldr	r1, [pc, #328]	@ (80081ac <GasIndexAlgorithm_process+0x15c>)
 8008062:	1c18      	adds	r0, r3, #0
 8008064:	f7f8 fa6e 	bl	8000544 <__aeabi_fcmple>
 8008068:	1e03      	subs	r3, r0, #0
 800806a:	d00c      	beq.n	8008086 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	1c19      	adds	r1, r3, #0
 8008076:	1c10      	adds	r0, r2, #0
 8008078:	f7f8 fc22 	bl	80008c0 <__aeabi_fadd>
 800807c:	1c03      	adds	r3, r0, #0
 800807e:	1c1a      	adds	r2, r3, #0
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	631a      	str	r2, [r3, #48]	@ 0x30
 8008084:	e080      	b.n	8008188 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	dd25      	ble.n	80080d8 <GasIndexAlgorithm_process+0x88>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4a48      	ldr	r2, [pc, #288]	@ (80081b0 <GasIndexAlgorithm_process+0x160>)
 8008090:	4293      	cmp	r3, r2
 8008092:	dc21      	bgt.n	80080d8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	429a      	cmp	r2, r3
 800809c:	dc04      	bgt.n	80080a8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	e00d      	b.n	80080c4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	4a41      	ldr	r2, [pc, #260]	@ (80081b4 <GasIndexAlgorithm_process+0x164>)
 80080ae:	4694      	mov	ip, r2
 80080b0:	4463      	add	r3, ip
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	dd05      	ble.n	80080c4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	4a3d      	ldr	r2, [pc, #244]	@ (80081b4 <GasIndexAlgorithm_process+0x164>)
 80080be:	4694      	mov	ip, r2
 80080c0:	4463      	add	r3, ip
 80080c2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7f9 fa7f 	bl	80015d0 <__aeabi_i2f>
 80080d2:	1c02      	adds	r2, r0, #0
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	0018      	movs	r0, r3
 80080e4:	f000 f945 	bl	8008372 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80080e8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80080ea:	d014      	beq.n	8008116 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	1c11      	adds	r1, r2, #0
 80080f4:	0018      	movs	r0, r3
 80080f6:	f000 fbd1 	bl	800889c <GasIndexAlgorithm__mox_model__process>
 80080fa:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	1c11      	adds	r1, r2, #0
 8008108:	0018      	movs	r0, r3
 800810a:	f000 fc25 	bl	8008958 <GasIndexAlgorithm__sigmoid_scaled__process>
 800810e:	1c02      	adds	r2, r0, #0
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	639a      	str	r2, [r3, #56]	@ 0x38
 8008114:	e003      	b.n	800811e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	1c11      	adds	r1, r2, #0
 8008126:	0018      	movs	r0, r3
 8008128:	f000 fcec 	bl	8008b04 <GasIndexAlgorithm__adaptive_lowpass__process>
 800812c:	1c02      	adds	r2, r0, #0
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	21fc      	movs	r1, #252	@ 0xfc
 8008138:	0589      	lsls	r1, r1, #22
 800813a:	1c18      	adds	r0, r3, #0
 800813c:	f7f8 f9f8 	bl	8000530 <__aeabi_fcmplt>
 8008140:	1e03      	subs	r3, r0, #0
 8008142:	d003      	beq.n	800814c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	22fc      	movs	r2, #252	@ 0xfc
 8008148:	0592      	lsls	r2, r2, #22
 800814a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008150:	2100      	movs	r1, #0
 8008152:	1c18      	adds	r0, r3, #0
 8008154:	f7f8 fa00 	bl	8000558 <__aeabi_fcmpgt>
 8008158:	1e03      	subs	r3, r0, #0
 800815a:	d015      	beq.n	8008188 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	1c11      	adds	r1, r2, #0
 8008164:	0018      	movs	r0, r3
 8008166:	f000 fa4f 	bl	8008608 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	0018      	movs	r0, r3
 800816e:	f000 f8e5 	bl	800833c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8008172:	1c04      	adds	r4, r0, #0
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0018      	movs	r0, r3
 8008178:	f000 f8ea 	bl	8008350 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800817c:	1c02      	adds	r2, r0, #0
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1c21      	adds	r1, r4, #0
 8008182:	0018      	movs	r0, r3
 8008184:	f000 fb7a 	bl	800887c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818c:	21fc      	movs	r1, #252	@ 0xfc
 800818e:	0589      	lsls	r1, r1, #22
 8008190:	1c18      	adds	r0, r3, #0
 8008192:	f7f8 fb95 	bl	80008c0 <__aeabi_fadd>
 8008196:	1c03      	adds	r3, r0, #0
 8008198:	1c18      	adds	r0, r3, #0
 800819a:	f7f9 f9f9 	bl	8001590 <__aeabi_f2iz>
 800819e:	0002      	movs	r2, r0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	601a      	str	r2, [r3, #0]
    return;
 80081a4:	46c0      	nop			@ (mov r8, r8)
}
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b005      	add	sp, #20
 80081aa:	bd90      	pop	{r4, r7, pc}
 80081ac:	42340000 	.word	0x42340000
 80081b0:	0000fde7 	.word	0x0000fde7
 80081b4:	00007fff 	.word	0x00007fff

080081b8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80081b8:	b5b0      	push	{r4, r5, r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	223c      	movs	r2, #60	@ 0x3c
 80081c4:	2100      	movs	r1, #0
 80081c6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4952      	ldr	r1, [pc, #328]	@ (800832c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80081e2:	1c18      	adds	r0, r3, #0
 80081e4:	f7f8 fcf6 	bl	8000bd4 <__aeabi_fdiv>
 80081e8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80081ea:	2188      	movs	r1, #136	@ 0x88
 80081ec:	05c9      	lsls	r1, r1, #23
 80081ee:	1c18      	adds	r0, r3, #0
 80081f0:	f7f8 fed6 	bl	8000fa0 <__aeabi_fmul>
 80081f4:	1c03      	adds	r3, r0, #0
 80081f6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	494a      	ldr	r1, [pc, #296]	@ (800832c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8008202:	1c18      	adds	r0, r3, #0
 8008204:	f7f8 fce6 	bl	8000bd4 <__aeabi_fdiv>
 8008208:	1c03      	adds	r3, r0, #0
 800820a:	1c19      	adds	r1, r3, #0
 800820c:	1c20      	adds	r0, r4, #0
 800820e:	f7f8 fb57 	bl	80008c0 <__aeabi_fadd>
 8008212:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8008214:	1c19      	adds	r1, r3, #0
 8008216:	1c28      	adds	r0, r5, #0
 8008218:	f7f8 fcdc 	bl	8000bd4 <__aeabi_fdiv>
 800821c:	1c03      	adds	r3, r0, #0
 800821e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4940      	ldr	r1, [pc, #256]	@ (800832c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800822a:	1c18      	adds	r0, r3, #0
 800822c:	f7f8 fcd2 	bl	8000bd4 <__aeabi_fdiv>
 8008230:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8008232:	2185      	movs	r1, #133	@ 0x85
 8008234:	05c9      	lsls	r1, r1, #23
 8008236:	1c18      	adds	r0, r3, #0
 8008238:	f7f8 feb2 	bl	8000fa0 <__aeabi_fmul>
 800823c:	1c03      	adds	r3, r0, #0
 800823e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	4938      	ldr	r1, [pc, #224]	@ (800832c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800824a:	1c18      	adds	r0, r3, #0
 800824c:	f7f8 fcc2 	bl	8000bd4 <__aeabi_fdiv>
 8008250:	1c03      	adds	r3, r0, #0
 8008252:	1c19      	adds	r1, r3, #0
 8008254:	1c20      	adds	r0, r4, #0
 8008256:	f7f8 fb33 	bl	80008c0 <__aeabi_fadd>
 800825a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800825c:	1c19      	adds	r1, r3, #0
 800825e:	1c28      	adds	r0, r5, #0
 8008260:	f7f8 fcb8 	bl	8000bd4 <__aeabi_fdiv>
 8008264:	1c03      	adds	r3, r0, #0
 8008266:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d118      	bne.n	80082a6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8008278:	2188      	movs	r1, #136	@ 0x88
 800827a:	05c9      	lsls	r1, r1, #23
 800827c:	1c18      	adds	r0, r3, #0
 800827e:	f7f8 fe8f 	bl	8000fa0 <__aeabi_fmul>
 8008282:	1c03      	adds	r3, r0, #0
 8008284:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800828a:	4929      	ldr	r1, [pc, #164]	@ (8008330 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800828c:	1c18      	adds	r0, r3, #0
 800828e:	f7f8 fb17 	bl	80008c0 <__aeabi_fadd>
 8008292:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8008294:	1c19      	adds	r1, r3, #0
 8008296:	1c20      	adds	r0, r4, #0
 8008298:	f7f8 fc9c 	bl	8000bd4 <__aeabi_fdiv>
 800829c:	1c03      	adds	r3, r0, #0
 800829e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80082a4:	e017      	b.n	80082d6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80082aa:	2188      	movs	r1, #136	@ 0x88
 80082ac:	05c9      	lsls	r1, r1, #23
 80082ae:	1c18      	adds	r0, r3, #0
 80082b0:	f7f8 fe76 	bl	8000fa0 <__aeabi_fmul>
 80082b4:	1c03      	adds	r3, r0, #0
 80082b6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80082bc:	491d      	ldr	r1, [pc, #116]	@ (8008334 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80082be:	1c18      	adds	r0, r3, #0
 80082c0:	f7f8 fafe 	bl	80008c0 <__aeabi_fadd>
 80082c4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80082c6:	1c19      	adds	r1, r3, #0
 80082c8:	1c20      	adds	r0, r4, #0
 80082ca:	f7f8 fc83 	bl	8000bd4 <__aeabi_fdiv>
 80082ce:	1c03      	adds	r3, r0, #0
 80082d0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80082da:	2185      	movs	r1, #133	@ 0x85
 80082dc:	05c9      	lsls	r1, r1, #23
 80082de:	1c18      	adds	r0, r3, #0
 80082e0:	f7f8 fe5e 	bl	8000fa0 <__aeabi_fmul>
 80082e4:	1c03      	adds	r3, r0, #0
 80082e6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	4912      	ldr	r1, [pc, #72]	@ (8008338 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80082ee:	1c18      	adds	r0, r3, #0
 80082f0:	f7f8 fae6 	bl	80008c0 <__aeabi_fadd>
 80082f4:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80082f6:	1c19      	adds	r1, r3, #0
 80082f8:	1c20      	adds	r0, r4, #0
 80082fa:	f7f8 fc6b 	bl	8000bd4 <__aeabi_fdiv>
 80082fe:	1c03      	adds	r3, r0, #0
 8008300:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8008324:	46c0      	nop			@ (mov r8, r8)
 8008326:	46bd      	mov	sp, r7
 8008328:	b002      	add	sp, #8
 800832a:	bdb0      	pop	{r4, r5, r7, pc}
 800832c:	45610000 	.word	0x45610000
 8008330:	44960000 	.word	0x44960000
 8008334:	41a00000 	.word	0x41a00000
 8008338:	451c4000 	.word	0x451c4000

0800833c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8008348:	1c18      	adds	r0, r3, #0
 800834a:	46bd      	mov	sp, r7
 800834c:	b002      	add	sp, #8
 800834e:	bd80      	pop	{r7, pc}

08008350 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8008360:	1c19      	adds	r1, r3, #0
 8008362:	1c10      	adds	r0, r2, #0
 8008364:	f7f8 faac 	bl	80008c0 <__aeabi_fadd>
 8008368:	1c03      	adds	r3, r0, #0
}
 800836a:	1c18      	adds	r0, r3, #0
 800836c:	46bd      	mov	sp, r7
 800836e:	b002      	add	sp, #8
 8008370:	bd80      	pop	{r7, pc}

08008372 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	223c      	movs	r2, #60	@ 0x3c
 800837e:	5c9b      	ldrb	r3, [r3, r2]
}
 8008380:	0018      	movs	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	b002      	add	sp, #8
 8008386:	bd80      	pop	{r7, pc}

08008388 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8008388:	b5b0      	push	{r4, r5, r7, lr}
 800838a:	b08c      	sub	sp, #48	@ 0x30
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8008394:	1c19      	adds	r1, r3, #0
 8008396:	4895      	ldr	r0, [pc, #596]	@ (80085ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8008398:	f7f8 ff40 	bl	800121c <__aeabi_fsub>
 800839c:	1c03      	adds	r3, r0, #0
 800839e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083a4:	1c19      	adds	r1, r3, #0
 80083a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083a8:	f7f8 f8d6 	bl	8000558 <__aeabi_fcmpgt>
 80083ac:	1e03      	subs	r3, r0, #0
 80083ae:	d00b      	beq.n	80083c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80083b8:	1c19      	adds	r1, r3, #0
 80083ba:	1c10      	adds	r0, r2, #0
 80083bc:	f7f8 fa80 	bl	80008c0 <__aeabi_fadd>
 80083c0:	1c03      	adds	r3, r0, #0
 80083c2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083cc:	1c19      	adds	r1, r3, #0
 80083ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083d0:	f7f8 f8c2 	bl	8000558 <__aeabi_fcmpgt>
 80083d4:	1e03      	subs	r3, r0, #0
 80083d6:	d00b      	beq.n	80083f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80083e0:	1c19      	adds	r1, r3, #0
 80083e2:	1c10      	adds	r0, r2, #0
 80083e4:	f7f8 fa6c 	bl	80008c0 <__aeabi_fadd>
 80083e8:	1c03      	adds	r3, r0, #0
 80083ea:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6959      	ldr	r1, [r3, #20]
 80083f4:	4a7e      	ldr	r2, [pc, #504]	@ (80085f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	0018      	movs	r0, r3
 80083fa:	f000 f9f1 	bl	80087e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	1c11      	adds	r1, r2, #0
 8008406:	0018      	movs	r0, r3
 8008408:	f000 f9fa 	bl	8008800 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800840c:	1c03      	adds	r3, r0, #0
 800840e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800841c:	1c19      	adds	r1, r3, #0
 800841e:	1c10      	adds	r0, r2, #0
 8008420:	f7f8 fefc 	bl	800121c <__aeabi_fsub>
 8008424:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8008426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008428:	1c18      	adds	r0, r3, #0
 800842a:	f7f8 fdb9 	bl	8000fa0 <__aeabi_fmul>
 800842e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8008430:	1c19      	adds	r1, r3, #0
 8008432:	1c20      	adds	r0, r4, #0
 8008434:	f7f8 fa44 	bl	80008c0 <__aeabi_fadd>
 8008438:	1c03      	adds	r3, r0, #0
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8008444:	1c19      	adds	r1, r3, #0
 8008446:	486b      	ldr	r0, [pc, #428]	@ (80085f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8008448:	f7f8 fee8 	bl	800121c <__aeabi_fsub>
 800844c:	1c03      	adds	r3, r0, #0
 800844e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	1c11      	adds	r1, r2, #0
 8008458:	0018      	movs	r0, r3
 800845a:	f000 f9d1 	bl	8008800 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800845e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008460:	1c19      	adds	r1, r3, #0
 8008462:	1c28      	adds	r0, r5, #0
 8008464:	f7f8 fd9c 	bl	8000fa0 <__aeabi_fmul>
 8008468:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800846a:	1c19      	adds	r1, r3, #0
 800846c:	1c20      	adds	r0, r4, #0
 800846e:	f7f8 fa27 	bl	80008c0 <__aeabi_fadd>
 8008472:	1c03      	adds	r3, r0, #0
 8008474:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008476:	4a60      	ldr	r2, [pc, #384]	@ (80085f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8008478:	6a39      	ldr	r1, [r7, #32]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	0018      	movs	r0, r3
 800847e:	f000 f9af 	bl	80087e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	1c11      	adds	r1, r2, #0
 800848a:	0018      	movs	r0, r3
 800848c:	f000 f9b8 	bl	8008800 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008490:	1c03      	adds	r3, r0, #0
 8008492:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8008494:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008496:	69f8      	ldr	r0, [r7, #28]
 8008498:	f7f8 fd82 	bl	8000fa0 <__aeabi_fmul>
 800849c:	1c03      	adds	r3, r0, #0
 800849e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6999      	ldr	r1, [r3, #24]
 80084a8:	4a51      	ldr	r2, [pc, #324]	@ (80085f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	0018      	movs	r0, r3
 80084ae:	f000 f997 	bl	80087e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	1c11      	adds	r1, r2, #0
 80084ba:	0018      	movs	r0, r3
 80084bc:	f000 f9a0 	bl	8008800 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80084c0:	1c03      	adds	r3, r0, #0
 80084c2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80084d0:	1c19      	adds	r1, r3, #0
 80084d2:	1c10      	adds	r0, r2, #0
 80084d4:	f7f8 fea2 	bl	800121c <__aeabi_fsub>
 80084d8:	1c03      	adds	r3, r0, #0
 80084da:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80084dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084de:	69b8      	ldr	r0, [r7, #24]
 80084e0:	f7f8 fe9c 	bl	800121c <__aeabi_fsub>
 80084e4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80084e6:	1c19      	adds	r1, r3, #0
 80084e8:	1c28      	adds	r0, r5, #0
 80084ea:	f7f8 fd59 	bl	8000fa0 <__aeabi_fmul>
 80084ee:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80084f0:	1c19      	adds	r1, r3, #0
 80084f2:	1c20      	adds	r0, r4, #0
 80084f4:	f7f8 f9e4 	bl	80008c0 <__aeabi_fadd>
 80084f8:	1c03      	adds	r3, r0, #0
 80084fa:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8008504:	1c19      	adds	r1, r3, #0
 8008506:	483b      	ldr	r0, [pc, #236]	@ (80085f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8008508:	f7f8 fe88 	bl	800121c <__aeabi_fsub>
 800850c:	1c03      	adds	r3, r0, #0
 800850e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	1c11      	adds	r1, r2, #0
 8008518:	0018      	movs	r0, r3
 800851a:	f000 f971 	bl	8008800 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800851e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008520:	1c19      	adds	r1, r3, #0
 8008522:	1c28      	adds	r0, r5, #0
 8008524:	f7f8 fd3c 	bl	8000fa0 <__aeabi_fmul>
 8008528:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800852a:	1c19      	adds	r1, r3, #0
 800852c:	1c20      	adds	r0, r4, #0
 800852e:	f7f8 f9c7 	bl	80008c0 <__aeabi_fadd>
 8008532:	1c03      	adds	r3, r0, #0
 8008534:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008536:	4a30      	ldr	r2, [pc, #192]	@ (80085f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8008538:	6939      	ldr	r1, [r7, #16]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	0018      	movs	r0, r3
 800853e:	f000 f94f 	bl	80087e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	1c11      	adds	r1, r2, #0
 800854a:	0018      	movs	r0, r3
 800854c:	f000 f958 	bl	8008800 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008550:	1c03      	adds	r3, r0, #0
 8008552:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8008554:	6979      	ldr	r1, [r7, #20]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7f8 fd22 	bl	8000fa0 <__aeabi_fmul>
 800855c:	1c03      	adds	r3, r0, #0
 800855e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	4923      	ldr	r1, [pc, #140]	@ (80085fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800856e:	1c18      	adds	r0, r3, #0
 8008570:	f7f8 fb30 	bl	8000bd4 <__aeabi_fdiv>
 8008574:	1c03      	adds	r3, r0, #0
 8008576:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8008578:	69f9      	ldr	r1, [r7, #28]
 800857a:	20fe      	movs	r0, #254	@ 0xfe
 800857c:	0580      	lsls	r0, r0, #22
 800857e:	f7f8 fe4d 	bl	800121c <__aeabi_fsub>
 8008582:	1c03      	adds	r3, r0, #0
 8008584:	491e      	ldr	r1, [pc, #120]	@ (8008600 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8008586:	1c18      	adds	r0, r3, #0
 8008588:	f7f8 fd0a 	bl	8000fa0 <__aeabi_fmul>
 800858c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800858e:	491d      	ldr	r1, [pc, #116]	@ (8008604 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8008590:	1c18      	adds	r0, r3, #0
 8008592:	f7f8 fe43 	bl	800121c <__aeabi_fsub>
 8008596:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8008598:	1c19      	adds	r1, r3, #0
 800859a:	1c28      	adds	r0, r5, #0
 800859c:	f7f8 fd00 	bl	8000fa0 <__aeabi_fmul>
 80085a0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80085a2:	1c19      	adds	r1, r3, #0
 80085a4:	1c20      	adds	r0, r4, #0
 80085a6:	f7f8 f98b 	bl	80008c0 <__aeabi_fadd>
 80085aa:	1c03      	adds	r3, r0, #0
 80085ac:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b6:	2100      	movs	r1, #0
 80085b8:	1c18      	adds	r0, r3, #0
 80085ba:	f7f7 ffb9 	bl	8000530 <__aeabi_fcmplt>
 80085be:	1e03      	subs	r3, r0, #0
 80085c0:	d002      	beq.n	80085c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80085d0:	1c19      	adds	r1, r3, #0
 80085d2:	1c10      	adds	r0, r2, #0
 80085d4:	f7f7 ffc0 	bl	8000558 <__aeabi_fcmpgt>
 80085d8:	1e03      	subs	r3, r0, #0
 80085da:	d100      	bne.n	80085de <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80085dc:	e002      	b.n	80085e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80085e4:	46c0      	nop			@ (mov r8, r8)
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b00c      	add	sp, #48	@ 0x30
 80085ea:	bdb0      	pop	{r4, r5, r7, pc}
 80085ec:	46fffe00 	.word	0x46fffe00
 80085f0:	3c23d70a 	.word	0x3c23d70a
 80085f4:	43ff0000 	.word	0x43ff0000
 80085f8:	3db851ec 	.word	0x3db851ec
 80085fc:	42700000 	.word	0x42700000
 8008600:	3fa66666 	.word	0x3fa66666
 8008604:	3e99999a 	.word	0x3e99999a

08008608 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8008608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	223c      	movs	r2, #60	@ 0x3c
 8008616:	5c9b      	ldrb	r3, [r3, r2]
 8008618:	2201      	movs	r2, #1
 800861a:	4053      	eors	r3, r2
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	223c      	movs	r2, #60	@ 0x3c
 8008626:	2101      	movs	r1, #1
 8008628:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8008636:	e0c8      	b.n	80087ca <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	4965      	ldr	r1, [pc, #404]	@ (80087d4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800863e:	1c18      	adds	r0, r3, #0
 8008640:	f7f7 ff94 	bl	800056c <__aeabi_fcmpge>
 8008644:	1e03      	subs	r3, r0, #0
 8008646:	d107      	bne.n	8008658 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800864c:	4962      	ldr	r1, [pc, #392]	@ (80087d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800864e:	1c18      	adds	r0, r3, #0
 8008650:	f7f7 ff78 	bl	8000544 <__aeabi_fcmple>
 8008654:	1e03      	subs	r3, r0, #0
 8008656:	d00e      	beq.n	8008676 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008660:	1c19      	adds	r1, r3, #0
 8008662:	1c10      	adds	r0, r2, #0
 8008664:	f7f8 f92c 	bl	80008c0 <__aeabi_fadd>
 8008668:	1c03      	adds	r3, r0, #0
 800866a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800867a:	1c19      	adds	r1, r3, #0
 800867c:	6838      	ldr	r0, [r7, #0]
 800867e:	f7f8 fdcd 	bl	800121c <__aeabi_fsub>
 8008682:	1c03      	adds	r3, r0, #0
 8008684:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	0018      	movs	r0, r3
 800868a:	f7ff fe7d 	bl	8008388 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008692:	1c19      	adds	r1, r3, #0
 8008694:	6838      	ldr	r0, [r7, #0]
 8008696:	f7f8 fdc1 	bl	800121c <__aeabi_fsub>
 800869a:	1c03      	adds	r3, r0, #0
 800869c:	2185      	movs	r1, #133	@ 0x85
 800869e:	05c9      	lsls	r1, r1, #23
 80086a0:	1c18      	adds	r0, r3, #0
 80086a2:	f7f8 fa97 	bl	8000bd4 <__aeabi_fdiv>
 80086a6:	1c03      	adds	r3, r0, #0
 80086a8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80086aa:	2100      	movs	r1, #0
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7f7 ff3f 	bl	8000530 <__aeabi_fcmplt>
 80086b2:	1e03      	subs	r3, r0, #0
 80086b4:	d008      	beq.n	80086c8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	1c18      	adds	r0, r3, #0
 80086be:	f7f8 fdad 	bl	800121c <__aeabi_fsub>
 80086c2:	1c03      	adds	r3, r0, #0
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	e007      	b.n	80086d8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086cc:	1c19      	adds	r1, r3, #0
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7f8 f8f6 	bl	80008c0 <__aeabi_fadd>
 80086d4:	1c03      	adds	r3, r0, #0
 80086d6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80086d8:	23fe      	movs	r3, #254	@ 0xfe
 80086da:	059b      	lsls	r3, r3, #22
 80086dc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80086de:	493f      	ldr	r1, [pc, #252]	@ (80087dc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80086e0:	6978      	ldr	r0, [r7, #20]
 80086e2:	f7f7 ff39 	bl	8000558 <__aeabi_fcmpgt>
 80086e6:	1e03      	subs	r3, r0, #0
 80086e8:	d010      	beq.n	800870c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80086ea:	493c      	ldr	r1, [pc, #240]	@ (80087dc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80086ec:	6978      	ldr	r0, [r7, #20]
 80086ee:	f7f8 fa71 	bl	8000bd4 <__aeabi_fdiv>
 80086f2:	1c03      	adds	r3, r0, #0
 80086f4:	1c1c      	adds	r4, r3, #0
 80086f6:	4939      	ldr	r1, [pc, #228]	@ (80087dc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80086f8:	6978      	ldr	r0, [r7, #20]
 80086fa:	f7f8 fa6b 	bl	8000bd4 <__aeabi_fdiv>
 80086fe:	1c03      	adds	r3, r0, #0
 8008700:	1c19      	adds	r1, r3, #0
 8008702:	1c20      	adds	r0, r4, #0
 8008704:	f7f8 fc4c 	bl	8000fa0 <__aeabi_fmul>
 8008708:	1c03      	adds	r3, r0, #0
 800870a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8008710:	1c19      	adds	r1, r3, #0
 8008712:	2085      	movs	r0, #133	@ 0x85
 8008714:	05c0      	lsls	r0, r0, #23
 8008716:	f7f8 fd81 	bl	800121c <__aeabi_fsub>
 800871a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800871c:	6939      	ldr	r1, [r7, #16]
 800871e:	1c18      	adds	r0, r3, #0
 8008720:	f7f8 fc3e 	bl	8000fa0 <__aeabi_fmul>
 8008724:	1c03      	adds	r3, r0, #0
 8008726:	1c18      	adds	r0, r3, #0
 8008728:	f016 f948 	bl	801e9bc <sqrtf>
 800872c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8008736:	2185      	movs	r1, #133	@ 0x85
 8008738:	05c9      	lsls	r1, r1, #23
 800873a:	6938      	ldr	r0, [r7, #16]
 800873c:	f7f8 fc30 	bl	8000fa0 <__aeabi_fmul>
 8008740:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8008742:	1c19      	adds	r1, r3, #0
 8008744:	1c28      	adds	r0, r5, #0
 8008746:	f7f8 fa45 	bl	8000bd4 <__aeabi_fdiv>
 800874a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800874c:	1c19      	adds	r1, r3, #0
 800874e:	1c20      	adds	r0, r4, #0
 8008750:	f7f8 fc26 	bl	8000fa0 <__aeabi_fmul>
 8008754:	1c03      	adds	r3, r0, #0
 8008756:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	1c18      	adds	r0, r3, #0
 8008760:	f7f8 fc1e 	bl	8000fa0 <__aeabi_fmul>
 8008764:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8008766:	6939      	ldr	r1, [r7, #16]
 8008768:	1c18      	adds	r0, r3, #0
 800876a:	f7f8 fa33 	bl	8000bd4 <__aeabi_fdiv>
 800876e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	1c18      	adds	r0, r3, #0
 8008774:	f7f8 fc14 	bl	8000fa0 <__aeabi_fmul>
 8008778:	1c03      	adds	r3, r0, #0
             sqrtf(
 800877a:	1c19      	adds	r1, r3, #0
 800877c:	1c20      	adds	r0, r4, #0
 800877e:	f7f8 f89f 	bl	80008c0 <__aeabi_fadd>
 8008782:	1c03      	adds	r3, r0, #0
 8008784:	1c18      	adds	r0, r3, #0
 8008786:	f016 f919 	bl	801e9bc <sqrtf>
 800878a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800878c:	1c19      	adds	r1, r3, #0
 800878e:	1c30      	adds	r0, r6, #0
 8008790:	f7f8 fc06 	bl	8000fa0 <__aeabi_fmul>
 8008794:	1c03      	adds	r3, r0, #0
 8008796:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087a4:	68f9      	ldr	r1, [r7, #12]
 80087a6:	1c18      	adds	r0, r3, #0
 80087a8:	f7f8 fbfa 	bl	8000fa0 <__aeabi_fmul>
 80087ac:	1c03      	adds	r3, r0, #0
 80087ae:	2182      	movs	r1, #130	@ 0x82
 80087b0:	05c9      	lsls	r1, r1, #23
 80087b2:	1c18      	adds	r0, r3, #0
 80087b4:	f7f8 fa0e 	bl	8000bd4 <__aeabi_fdiv>
 80087b8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80087ba:	1c19      	adds	r1, r3, #0
 80087bc:	1c20      	adds	r0, r4, #0
 80087be:	f7f8 f87f 	bl	80008c0 <__aeabi_fadd>
 80087c2:	1c03      	adds	r3, r0, #0
 80087c4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80087ca:	46c0      	nop			@ (mov r8, r8)
 80087cc:	46bd      	mov	sp, r7
 80087ce:	b007      	add	sp, #28
 80087d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d2:	46c0      	nop			@ (mov r8, r8)
 80087d4:	42c80000 	.word	0x42c80000
 80087d8:	c2c80000 	.word	0xc2c80000
 80087dc:	44b40000 	.word	0x44b40000

080087e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087f8:	46c0      	nop			@ (mov r8, r8)
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b004      	add	sp, #16
 80087fe:	bd80      	pop	{r7, pc}

08008800 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8008800:	b590      	push	{r4, r7, lr}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008812:	1c19      	adds	r1, r3, #0
 8008814:	6838      	ldr	r0, [r7, #0]
 8008816:	f7f8 fd01 	bl	800121c <__aeabi_fsub>
 800881a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800881c:	1c19      	adds	r1, r3, #0
 800881e:	1c20      	adds	r0, r4, #0
 8008820:	f7f8 fbbe 	bl	8000fa0 <__aeabi_fmul>
 8008824:	1c03      	adds	r3, r0, #0
 8008826:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8008828:	4912      	ldr	r1, [pc, #72]	@ (8008874 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7f7 fe80 	bl	8000530 <__aeabi_fcmplt>
 8008830:	1e03      	subs	r3, r0, #0
 8008832:	d002      	beq.n	800883a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8008834:	23fe      	movs	r3, #254	@ 0xfe
 8008836:	059b      	lsls	r3, r3, #22
 8008838:	e018      	b.n	800886c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800883a:	490f      	ldr	r1, [pc, #60]	@ (8008878 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7f7 fe8b 	bl	8000558 <__aeabi_fcmpgt>
 8008842:	1e03      	subs	r3, r0, #0
 8008844:	d001      	beq.n	800884a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8008846:	2300      	movs	r3, #0
 8008848:	e010      	b.n	800886c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	1c18      	adds	r0, r3, #0
 800884e:	f016 f88d 	bl	801e96c <expf>
 8008852:	1c03      	adds	r3, r0, #0
 8008854:	21fe      	movs	r1, #254	@ 0xfe
 8008856:	0589      	lsls	r1, r1, #22
 8008858:	1c18      	adds	r0, r3, #0
 800885a:	f7f8 f831 	bl	80008c0 <__aeabi_fadd>
 800885e:	1c03      	adds	r3, r0, #0
 8008860:	1c19      	adds	r1, r3, #0
 8008862:	20fe      	movs	r0, #254	@ 0xfe
 8008864:	0580      	lsls	r0, r0, #22
 8008866:	f7f8 f9b5 	bl	8000bd4 <__aeabi_fdiv>
 800886a:	1c03      	adds	r3, r0, #0
    }
}
 800886c:	1c18      	adds	r0, r3, #0
 800886e:	46bd      	mov	sp, r7
 8008870:	b005      	add	sp, #20
 8008872:	bd90      	pop	{r4, r7, pc}
 8008874:	c2480000 	.word	0xc2480000
 8008878:	42480000 	.word	0x42480000

0800887c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008894:	46c0      	nop			@ (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	b004      	add	sp, #16
 800889a:	bd80      	pop	{r7, pc}

0800889c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d114      	bne.n	80088d8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088b2:	1c19      	adds	r1, r3, #0
 80088b4:	6838      	ldr	r0, [r7, #0]
 80088b6:	f7f8 fcb1 	bl	800121c <__aeabi_fsub>
 80088ba:	1c03      	adds	r3, r0, #0
 80088bc:	4918      	ldr	r1, [pc, #96]	@ (8008920 <GasIndexAlgorithm__mox_model__process+0x84>)
 80088be:	1c18      	adds	r0, r3, #0
 80088c0:	f7f8 f988 	bl	8000bd4 <__aeabi_fdiv>
 80088c4:	1c03      	adds	r3, r0, #0
 80088c6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80088cc:	1c19      	adds	r1, r3, #0
 80088ce:	1c10      	adds	r0, r2, #0
 80088d0:	f7f8 fb66 	bl	8000fa0 <__aeabi_fmul>
 80088d4:	1c03      	adds	r3, r0, #0
 80088d6:	e01f      	b.n	8008918 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088dc:	1c19      	adds	r1, r3, #0
 80088de:	6838      	ldr	r0, [r7, #0]
 80088e0:	f7f8 fc9c 	bl	800121c <__aeabi_fsub>
 80088e4:	1c03      	adds	r3, r0, #0
 80088e6:	1c1a      	adds	r2, r3, #0
 80088e8:	2380      	movs	r3, #128	@ 0x80
 80088ea:	061b      	lsls	r3, r3, #24
 80088ec:	4053      	eors	r3, r2
 80088ee:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088f4:	490b      	ldr	r1, [pc, #44]	@ (8008924 <GasIndexAlgorithm__mox_model__process+0x88>)
 80088f6:	1c18      	adds	r0, r3, #0
 80088f8:	f7f7 ffe2 	bl	80008c0 <__aeabi_fadd>
 80088fc:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80088fe:	1c19      	adds	r1, r3, #0
 8008900:	1c20      	adds	r0, r4, #0
 8008902:	f7f8 f967 	bl	8000bd4 <__aeabi_fdiv>
 8008906:	1c03      	adds	r3, r0, #0
 8008908:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800890e:	1c19      	adds	r1, r3, #0
 8008910:	1c10      	adds	r0, r2, #0
 8008912:	f7f8 fb45 	bl	8000fa0 <__aeabi_fmul>
 8008916:	1c03      	adds	r3, r0, #0
    }
}
 8008918:	1c18      	adds	r0, r3, #0
 800891a:	46bd      	mov	sp, r7
 800891c:	b003      	add	sp, #12
 800891e:	bd90      	pop	{r4, r7, pc}
 8008920:	44fa0000 	.word	0x44fa0000
 8008924:	435c0000 	.word	0x435c0000

08008928 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2180      	movs	r1, #128	@ 0x80
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2184      	movs	r1, #132	@ 0x84
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2188      	movs	r1, #136	@ 0x88
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	505a      	str	r2, [r3, r1]
}
 800894e:	46c0      	nop			@ (mov r8, r8)
 8008950:	46bd      	mov	sp, r7
 8008952:	b004      	add	sp, #16
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2280      	movs	r2, #128	@ 0x80
 8008966:	589c      	ldr	r4, [r3, r2]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2284      	movs	r2, #132	@ 0x84
 800896c:	589b      	ldr	r3, [r3, r2]
 800896e:	1c19      	adds	r1, r3, #0
 8008970:	6838      	ldr	r0, [r7, #0]
 8008972:	f7f8 fc53 	bl	800121c <__aeabi_fsub>
 8008976:	1c03      	adds	r3, r0, #0
 8008978:	1c19      	adds	r1, r3, #0
 800897a:	1c20      	adds	r0, r4, #0
 800897c:	f7f8 fb10 	bl	8000fa0 <__aeabi_fmul>
 8008980:	1c03      	adds	r3, r0, #0
 8008982:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8008984:	4940      	ldr	r1, [pc, #256]	@ (8008a88 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8008986:	68b8      	ldr	r0, [r7, #8]
 8008988:	f7f7 fdd2 	bl	8000530 <__aeabi_fcmplt>
 800898c:	1e03      	subs	r3, r0, #0
 800898e:	d001      	beq.n	8008994 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8008990:	4b3e      	ldr	r3, [pc, #248]	@ (8008a8c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008992:	e075      	b.n	8008a80 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8008994:	493e      	ldr	r1, [pc, #248]	@ (8008a90 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8008996:	68b8      	ldr	r0, [r7, #8]
 8008998:	f7f7 fdde 	bl	8000558 <__aeabi_fcmpgt>
 800899c:	1e03      	subs	r3, r0, #0
 800899e:	d001      	beq.n	80089a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80089a0:	2300      	movs	r3, #0
 80089a2:	e06d      	b.n	8008a80 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80089a4:	2100      	movs	r1, #0
 80089a6:	6838      	ldr	r0, [r7, #0]
 80089a8:	f7f7 fde0 	bl	800056c <__aeabi_fcmpge>
 80089ac:	1e03      	subs	r3, r0, #0
 80089ae:	d047      	beq.n	8008a40 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2288      	movs	r2, #136	@ 0x88
 80089b4:	589b      	ldr	r3, [r3, r2]
 80089b6:	21fe      	movs	r1, #254	@ 0xfe
 80089b8:	0589      	lsls	r1, r1, #22
 80089ba:	1c18      	adds	r0, r3, #0
 80089bc:	f7f7 fdb2 	bl	8000524 <__aeabi_fcmpeq>
 80089c0:	1e03      	subs	r3, r0, #0
 80089c2:	d00e      	beq.n	80089e2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	1c19      	adds	r1, r3, #0
 80089ca:	20fe      	movs	r0, #254	@ 0xfe
 80089cc:	0580      	lsls	r0, r0, #22
 80089ce:	f7f8 fc25 	bl	800121c <__aeabi_fsub>
 80089d2:	1c03      	adds	r3, r0, #0
 80089d4:	492f      	ldr	r1, [pc, #188]	@ (8008a94 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80089d6:	1c18      	adds	r0, r3, #0
 80089d8:	f7f8 fae2 	bl	8000fa0 <__aeabi_fmul>
 80089dc:	1c03      	adds	r3, r0, #0
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e012      	b.n	8008a08 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	492c      	ldr	r1, [pc, #176]	@ (8008a98 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80089e8:	1c18      	adds	r0, r3, #0
 80089ea:	f7f8 fad9 	bl	8000fa0 <__aeabi_fmul>
 80089ee:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80089f0:	1c19      	adds	r1, r3, #0
 80089f2:	4826      	ldr	r0, [pc, #152]	@ (8008a8c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80089f4:	f7f8 fc12 	bl	800121c <__aeabi_fsub>
 80089f8:	1c03      	adds	r3, r0, #0
 80089fa:	2181      	movs	r1, #129	@ 0x81
 80089fc:	05c9      	lsls	r1, r1, #23
 80089fe:	1c18      	adds	r0, r3, #0
 8008a00:	f7f8 f8e8 	bl	8000bd4 <__aeabi_fdiv>
 8008a04:	1c03      	adds	r3, r0, #0
 8008a06:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008a08:	4920      	ldr	r1, [pc, #128]	@ (8008a8c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7f7 ff58 	bl	80008c0 <__aeabi_fadd>
 8008a10:	1c03      	adds	r3, r0, #0
 8008a12:	1c1c      	adds	r4, r3, #0
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	1c18      	adds	r0, r3, #0
 8008a18:	f015 ffa8 	bl	801e96c <expf>
 8008a1c:	1c03      	adds	r3, r0, #0
 8008a1e:	21fe      	movs	r1, #254	@ 0xfe
 8008a20:	0589      	lsls	r1, r1, #22
 8008a22:	1c18      	adds	r0, r3, #0
 8008a24:	f7f7 ff4c 	bl	80008c0 <__aeabi_fadd>
 8008a28:	1c03      	adds	r3, r0, #0
 8008a2a:	1c19      	adds	r1, r3, #0
 8008a2c:	1c20      	adds	r0, r4, #0
 8008a2e:	f7f8 f8d1 	bl	8000bd4 <__aeabi_fdiv>
 8008a32:	1c03      	adds	r3, r0, #0
 8008a34:	68f9      	ldr	r1, [r7, #12]
 8008a36:	1c18      	adds	r0, r3, #0
 8008a38:	f7f8 fbf0 	bl	800121c <__aeabi_fsub>
 8008a3c:	1c03      	adds	r3, r0, #0
 8008a3e:	e01f      	b.n	8008a80 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2188      	movs	r1, #136	@ 0x88
 8008a48:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008a4a:	1c19      	adds	r1, r3, #0
 8008a4c:	1c10      	adds	r0, r2, #0
 8008a4e:	f7f8 f8c1 	bl	8000bd4 <__aeabi_fdiv>
 8008a52:	1c03      	adds	r3, r0, #0
 8008a54:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	1c18      	adds	r0, r3, #0
 8008a5a:	f015 ff87 	bl	801e96c <expf>
 8008a5e:	1c03      	adds	r3, r0, #0
 8008a60:	21fe      	movs	r1, #254	@ 0xfe
 8008a62:	0589      	lsls	r1, r1, #22
 8008a64:	1c18      	adds	r0, r3, #0
 8008a66:	f7f7 ff2b 	bl	80008c0 <__aeabi_fadd>
 8008a6a:	1c03      	adds	r3, r0, #0
 8008a6c:	1c19      	adds	r1, r3, #0
 8008a6e:	4807      	ldr	r0, [pc, #28]	@ (8008a8c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008a70:	f7f8 f8b0 	bl	8000bd4 <__aeabi_fdiv>
 8008a74:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008a76:	1c19      	adds	r1, r3, #0
 8008a78:	1c20      	adds	r0, r4, #0
 8008a7a:	f7f8 fa91 	bl	8000fa0 <__aeabi_fmul>
 8008a7e:	1c03      	adds	r3, r0, #0
        }
    }
}
 8008a80:	1c18      	adds	r0, r3, #0
 8008a82:	46bd      	mov	sp, r7
 8008a84:	b005      	add	sp, #20
 8008a86:	bd90      	pop	{r4, r7, pc}
 8008a88:	c2480000 	.word	0xc2480000
 8008a8c:	43fa0000 	.word	0x43fa0000
 8008a90:	42480000 	.word	0x42480000
 8008a94:	3f8041ab 	.word	0x3f8041ab
 8008a98:	40a00000 	.word	0x40a00000

08008a9c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008a9c:	b590      	push	{r4, r7, lr}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	4913      	ldr	r1, [pc, #76]	@ (8008afc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8008aae:	1c18      	adds	r0, r3, #0
 8008ab0:	f7f7 ff06 	bl	80008c0 <__aeabi_fadd>
 8008ab4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008ab6:	1c19      	adds	r1, r3, #0
 8008ab8:	1c20      	adds	r0, r4, #0
 8008aba:	f7f8 f88b 	bl	8000bd4 <__aeabi_fdiv>
 8008abe:	1c03      	adds	r3, r0, #0
 8008ac0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	228c      	movs	r2, #140	@ 0x8c
 8008ac6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	490b      	ldr	r1, [pc, #44]	@ (8008b00 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8008ad2:	1c18      	adds	r0, r3, #0
 8008ad4:	f7f7 fef4 	bl	80008c0 <__aeabi_fadd>
 8008ad8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008ada:	1c19      	adds	r1, r3, #0
 8008adc:	1c20      	adds	r0, r4, #0
 8008ade:	f7f8 f879 	bl	8000bd4 <__aeabi_fdiv>
 8008ae2:	1c03      	adds	r3, r0, #0
 8008ae4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2290      	movs	r2, #144	@ 0x90
 8008aea:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2294      	movs	r2, #148	@ 0x94
 8008af0:	2100      	movs	r1, #0
 8008af2:	5499      	strb	r1, [r3, r2]
}
 8008af4:	46c0      	nop			@ (mov r8, r8)
 8008af6:	46bd      	mov	sp, r7
 8008af8:	b003      	add	sp, #12
 8008afa:	bd90      	pop	{r4, r7, pc}
 8008afc:	41a00000 	.word	0x41a00000
 8008b00:	43fa0000 	.word	0x43fa0000

08008b04 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2294      	movs	r2, #148	@ 0x94
 8008b12:	5c9b      	ldrb	r3, [r3, r2]
 8008b14:	2201      	movs	r2, #1
 8008b16:	4053      	eors	r3, r2
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2198      	movs	r1, #152	@ 0x98
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	219c      	movs	r1, #156	@ 0x9c
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	21a0      	movs	r1, #160	@ 0xa0
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2294      	movs	r2, #148	@ 0x94
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	228c      	movs	r2, #140	@ 0x8c
 8008b42:	589b      	ldr	r3, [r3, r2]
 8008b44:	1c19      	adds	r1, r3, #0
 8008b46:	20fe      	movs	r0, #254	@ 0xfe
 8008b48:	0580      	lsls	r0, r0, #22
 8008b4a:	f7f8 fb67 	bl	800121c <__aeabi_fsub>
 8008b4e:	1c03      	adds	r3, r0, #0
 8008b50:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2298      	movs	r2, #152	@ 0x98
 8008b56:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008b58:	1c19      	adds	r1, r3, #0
 8008b5a:	f7f8 fa21 	bl	8000fa0 <__aeabi_fmul>
 8008b5e:	1c03      	adds	r3, r0, #0
 8008b60:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	228c      	movs	r2, #140	@ 0x8c
 8008b66:	589b      	ldr	r3, [r3, r2]
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	1c18      	adds	r0, r3, #0
 8008b6c:	f7f8 fa18 	bl	8000fa0 <__aeabi_fmul>
 8008b70:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8008b72:	1c19      	adds	r1, r3, #0
 8008b74:	1c20      	adds	r0, r4, #0
 8008b76:	f7f7 fea3 	bl	80008c0 <__aeabi_fadd>
 8008b7a:	1c03      	adds	r3, r0, #0
 8008b7c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2298      	movs	r2, #152	@ 0x98
 8008b82:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2290      	movs	r2, #144	@ 0x90
 8008b88:	589b      	ldr	r3, [r3, r2]
 8008b8a:	1c19      	adds	r1, r3, #0
 8008b8c:	20fe      	movs	r0, #254	@ 0xfe
 8008b8e:	0580      	lsls	r0, r0, #22
 8008b90:	f7f8 fb44 	bl	800121c <__aeabi_fsub>
 8008b94:	1c03      	adds	r3, r0, #0
 8008b96:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	229c      	movs	r2, #156	@ 0x9c
 8008b9c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008b9e:	1c19      	adds	r1, r3, #0
 8008ba0:	f7f8 f9fe 	bl	8000fa0 <__aeabi_fmul>
 8008ba4:	1c03      	adds	r3, r0, #0
 8008ba6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2290      	movs	r2, #144	@ 0x90
 8008bac:	589b      	ldr	r3, [r3, r2]
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	1c18      	adds	r0, r3, #0
 8008bb2:	f7f8 f9f5 	bl	8000fa0 <__aeabi_fmul>
 8008bb6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008bb8:	1c19      	adds	r1, r3, #0
 8008bba:	1c20      	adds	r0, r4, #0
 8008bbc:	f7f7 fe80 	bl	80008c0 <__aeabi_fadd>
 8008bc0:	1c03      	adds	r3, r0, #0
 8008bc2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	229c      	movs	r2, #156	@ 0x9c
 8008bc8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2298      	movs	r2, #152	@ 0x98
 8008bce:	589a      	ldr	r2, [r3, r2]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	219c      	movs	r1, #156	@ 0x9c
 8008bd4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8008bd6:	1c19      	adds	r1, r3, #0
 8008bd8:	1c10      	adds	r0, r2, #0
 8008bda:	f7f8 fb1f 	bl	800121c <__aeabi_fsub>
 8008bde:	1c03      	adds	r3, r0, #0
 8008be0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8008be2:	2100      	movs	r1, #0
 8008be4:	6978      	ldr	r0, [r7, #20]
 8008be6:	f7f7 fca3 	bl	8000530 <__aeabi_fcmplt>
 8008bea:	1e03      	subs	r3, r0, #0
 8008bec:	d004      	beq.n	8008bf8 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2280      	movs	r2, #128	@ 0x80
 8008bf2:	0612      	lsls	r2, r2, #24
 8008bf4:	4053      	eors	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008bf8:	4923      	ldr	r1, [pc, #140]	@ (8008c88 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008bfa:	6978      	ldr	r0, [r7, #20]
 8008bfc:	f7f8 f9d0 	bl	8000fa0 <__aeabi_fmul>
 8008c00:	1c03      	adds	r3, r0, #0
 8008c02:	1c18      	adds	r0, r3, #0
 8008c04:	f015 feb2 	bl	801e96c <expf>
 8008c08:	1c03      	adds	r3, r0, #0
 8008c0a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008c0c:	491f      	ldr	r1, [pc, #124]	@ (8008c8c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008c0e:	6938      	ldr	r0, [r7, #16]
 8008c10:	f7f8 f9c6 	bl	8000fa0 <__aeabi_fmul>
 8008c14:	1c03      	adds	r3, r0, #0
 8008c16:	491e      	ldr	r1, [pc, #120]	@ (8008c90 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008c18:	1c18      	adds	r0, r3, #0
 8008c1a:	f7f7 fe51 	bl	80008c0 <__aeabi_fadd>
 8008c1e:	1c03      	adds	r3, r0, #0
 8008c20:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685c      	ldr	r4, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	1c18      	adds	r0, r3, #0
 8008c2e:	f7f7 fe47 	bl	80008c0 <__aeabi_fadd>
 8008c32:	1c03      	adds	r3, r0, #0
 8008c34:	1c19      	adds	r1, r3, #0
 8008c36:	1c20      	adds	r0, r4, #0
 8008c38:	f7f7 ffcc 	bl	8000bd4 <__aeabi_fdiv>
 8008c3c:	1c03      	adds	r3, r0, #0
 8008c3e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	20fe      	movs	r0, #254	@ 0xfe
 8008c44:	0580      	lsls	r0, r0, #22
 8008c46:	f7f8 fae9 	bl	800121c <__aeabi_fsub>
 8008c4a:	1c03      	adds	r3, r0, #0
 8008c4c:	1c18      	adds	r0, r3, #0
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	22a0      	movs	r2, #160	@ 0xa0
 8008c52:	589b      	ldr	r3, [r3, r2]
 8008c54:	1c19      	adds	r1, r3, #0
 8008c56:	f7f8 f9a3 	bl	8000fa0 <__aeabi_fmul>
 8008c5a:	1c03      	adds	r3, r0, #0
 8008c5c:	1c1c      	adds	r4, r3, #0
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	68b8      	ldr	r0, [r7, #8]
 8008c62:	f7f8 f99d 	bl	8000fa0 <__aeabi_fmul>
 8008c66:	1c03      	adds	r3, r0, #0
 8008c68:	1c19      	adds	r1, r3, #0
 8008c6a:	1c20      	adds	r0, r4, #0
 8008c6c:	f7f7 fe28 	bl	80008c0 <__aeabi_fadd>
 8008c70:	1c03      	adds	r3, r0, #0
 8008c72:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	22a0      	movs	r2, #160	@ 0xa0
 8008c78:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	22a0      	movs	r2, #160	@ 0xa0
 8008c7e:	589b      	ldr	r3, [r3, r2]
}
 8008c80:	1c18      	adds	r0, r3, #0
 8008c82:	46bd      	mov	sp, r7
 8008c84:	b007      	add	sp, #28
 8008c86:	bd90      	pop	{r4, r7, pc}
 8008c88:	be4ccccd 	.word	0xbe4ccccd
 8008c8c:	43f00000 	.word	0x43f00000
 8008c90:	41a00000 	.word	0x41a00000

08008c94 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008c94:	b590      	push	{r4, r7, lr}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6039      	str	r1, [r7, #0]
 8008c9c:	0011      	movs	r1, r2
 8008c9e:	1dfb      	adds	r3, r7, #7
 8008ca0:	1c02      	adds	r2, r0, #0
 8008ca2:	701a      	strb	r2, [r3, #0]
 8008ca4:	1dbb      	adds	r3, r7, #6
 8008ca6:	1c0a      	adds	r2, r1, #0
 8008ca8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008caa:	4b08      	ldr	r3, [pc, #32]	@ (8008ccc <ReadRegister+0x38>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d008      	beq.n	8008cc4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8008cb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <ReadRegister+0x38>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	1dba      	adds	r2, r7, #6
 8008cb8:	7814      	ldrb	r4, [r2, #0]
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	1dfa      	adds	r2, r7, #7
 8008cbe:	7810      	ldrb	r0, [r2, #0]
 8008cc0:	0022      	movs	r2, r4
 8008cc2:	4798      	blx	r3
  }
}
 8008cc4:	46c0      	nop			@ (mov r8, r8)
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b003      	add	sp, #12
 8008cca:	bd90      	pop	{r4, r7, pc}
 8008ccc:	200011a4 	.word	0x200011a4

08008cd0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6039      	str	r1, [r7, #0]
 8008cd8:	0011      	movs	r1, r2
 8008cda:	1dfb      	adds	r3, r7, #7
 8008cdc:	1c02      	adds	r2, r0, #0
 8008cde:	701a      	strb	r2, [r3, #0]
 8008ce0:	1dbb      	adds	r3, r7, #6
 8008ce2:	1c0a      	adds	r2, r1, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008ce6:	4b08      	ldr	r3, [pc, #32]	@ (8008d08 <WriteRegister+0x38>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008cee:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <WriteRegister+0x38>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	1dba      	adds	r2, r7, #6
 8008cf4:	7814      	ldrb	r4, [r2, #0]
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	1dfa      	adds	r2, r7, #7
 8008cfa:	7810      	ldrb	r0, [r2, #0]
 8008cfc:	0022      	movs	r2, r4
 8008cfe:	4798      	blx	r3
  }
}
 8008d00:	46c0      	nop			@ (mov r8, r8)
 8008d02:	46bd      	mov	sp, r7
 8008d04:	b003      	add	sp, #12
 8008d06:	bd90      	pop	{r4, r7, pc}
 8008d08:	200011a8 	.word	0x200011a8

08008d0c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008d16:	4b07      	ldr	r3, [pc, #28]	@ (8008d34 <SGP_Init+0x28>)
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008d1c:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <SGP_Init+0x2c>)
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8008d22:	4b06      	ldr	r3, [pc, #24]	@ (8008d3c <SGP_Init+0x30>)
 8008d24:	2100      	movs	r1, #0
 8008d26:	0018      	movs	r0, r3
 8008d28:	f7ff f930 	bl	8007f8c <GasIndexAlgorithm_init>
}
 8008d2c:	46c0      	nop			@ (mov r8, r8)
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b002      	add	sp, #8
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	200011a4 	.word	0x200011a4
 8008d38:	200011a8 	.word	0x200011a8
 8008d3c:	200011b8 	.word	0x200011b8

08008d40 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008d44:	4b13      	ldr	r3, [pc, #76]	@ (8008d94 <SGP_StartMeasurement+0x54>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00d      	beq.n	8008d68 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008d4c:	4b12      	ldr	r3, [pc, #72]	@ (8008d98 <SGP_StartMeasurement+0x58>)
 8008d4e:	2208      	movs	r2, #8
 8008d50:	0019      	movs	r1, r3
 8008d52:	2059      	movs	r0, #89	@ 0x59
 8008d54:	f7ff ffbc 	bl	8008cd0 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008d58:	f002 fc4e 	bl	800b5f8 <GetCurrentHalTicks>
 8008d5c:	0003      	movs	r3, r0
 8008d5e:	331e      	adds	r3, #30
 8008d60:	001a      	movs	r2, r3
 8008d62:	4b0e      	ldr	r3, [pc, #56]	@ (8008d9c <SGP_StartMeasurement+0x5c>)
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e00c      	b.n	8008d82 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008d68:	4b0d      	ldr	r3, [pc, #52]	@ (8008da0 <SGP_StartMeasurement+0x60>)
 8008d6a:	2208      	movs	r2, #8
 8008d6c:	0019      	movs	r1, r3
 8008d6e:	2059      	movs	r0, #89	@ 0x59
 8008d70:	f7ff ffae 	bl	8008cd0 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008d74:	f002 fc40 	bl	800b5f8 <GetCurrentHalTicks>
 8008d78:	0003      	movs	r3, r0
 8008d7a:	33aa      	adds	r3, #170	@ 0xaa
 8008d7c:	001a      	movs	r2, r3
 8008d7e:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <SGP_StartMeasurement+0x64>)
 8008d80:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8008d82:	4b09      	ldr	r3, [pc, #36]	@ (8008da8 <SGP_StartMeasurement+0x68>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008d88:	4b08      	ldr	r3, [pc, #32]	@ (8008dac <SGP_StartMeasurement+0x6c>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
}
 8008d8e:	46c0      	nop			@ (mov r8, r8)
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20001260 	.word	0x20001260
 8008d98:	20000094 	.word	0x20000094
 8008d9c:	200000a8 	.word	0x200000a8
 8008da0:	2000008c 	.word	0x2000008c
 8008da4:	200000a0 	.word	0x200000a0
 8008da8:	200011b6 	.word	0x200011b6
 8008dac:	200011b7 	.word	0x200011b7

08008db0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	4b04      	ldr	r3, [pc, #16]	@ (8008dc8 <SGP_HeatedUp+0x18>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	0018      	movs	r0, r3
 8008dba:	f002 fb55 	bl	800b468 <TimestampIsReached>
 8008dbe:	0003      	movs	r3, r0
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	46c0      	nop			@ (mov r8, r8)
 8008dc8:	200000a0 	.word	0x200000a0

08008dcc <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008dd0:	4b04      	ldr	r3, [pc, #16]	@ (8008de4 <SGP_MeasurementReady+0x18>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f002 fb47 	bl	800b468 <TimestampIsReached>
 8008dda:	0003      	movs	r3, r0
}
 8008ddc:	0018      	movs	r0, r3
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	46c0      	nop			@ (mov r8, r8)
 8008de4:	200000a8 	.word	0x200000a8

08008de8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008dec:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <SGP_MeasurementDone+0x18>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	0018      	movs	r0, r3
 8008df2:	f002 fb39 	bl	800b468 <TimestampIsReached>
 8008df6:	0003      	movs	r3, r0
}
 8008df8:	0018      	movs	r0, r3
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	200000a4 	.word	0x200000a4

08008e04 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008e08:	4b04      	ldr	r3, [pc, #16]	@ (8008e1c <SGP_TurnHeaterOff+0x18>)
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	0019      	movs	r1, r3
 8008e0e:	2059      	movs	r0, #89	@ 0x59
 8008e10:	f7ff ff5e 	bl	8008cd0 <WriteRegister>
}
 8008e14:	46c0      	nop			@ (mov r8, r8)
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	46c0      	nop			@ (mov r8, r8)
 8008e1c:	20000084 	.word	0x20000084

08008e20 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8008e20:	b5b0      	push	{r4, r5, r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008e28:	f7ff ffc2 	bl	8008db0 <SGP_HeatedUp>
 8008e2c:	1e03      	subs	r3, r0, #0
 8008e2e:	d038      	beq.n	8008ea2 <SGP_GetMeasurementValues+0x82>
 8008e30:	4bd5      	ldr	r3, [pc, #852]	@ (8009188 <SGP_GetMeasurementValues+0x368>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2201      	movs	r2, #1
 8008e36:	4053      	eors	r3, r2
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d031      	beq.n	8008ea2 <SGP_GetMeasurementValues+0x82>
 8008e3e:	4bd3      	ldr	r3, [pc, #844]	@ (800918c <SGP_GetMeasurementValues+0x36c>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2201      	movs	r2, #1
 8008e44:	4053      	eors	r3, r2
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d02a      	beq.n	8008ea2 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008e4c:	4ad0      	ldr	r2, [pc, #832]	@ (8009190 <SGP_GetMeasurementValues+0x370>)
 8008e4e:	4bd1      	ldr	r3, [pc, #836]	@ (8009194 <SGP_GetMeasurementValues+0x374>)
 8008e50:	0019      	movs	r1, r3
 8008e52:	2003      	movs	r0, #3
 8008e54:	f002 fb5e 	bl	800b514 <CreateLine>
    HeatUpIsDone = true;
 8008e58:	4bcb      	ldr	r3, [pc, #812]	@ (8009188 <SGP_GetMeasurementValues+0x368>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8008e5e:	4bce      	ldr	r3, [pc, #824]	@ (8009198 <SGP_GetMeasurementValues+0x378>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00d      	beq.n	8008e82 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008e66:	4bcd      	ldr	r3, [pc, #820]	@ (800919c <SGP_GetMeasurementValues+0x37c>)
 8008e68:	2208      	movs	r2, #8
 8008e6a:	0019      	movs	r1, r3
 8008e6c:	2059      	movs	r0, #89	@ 0x59
 8008e6e:	f7ff ff2f 	bl	8008cd0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008e72:	f002 fbc1 	bl	800b5f8 <GetCurrentHalTicks>
 8008e76:	0003      	movs	r3, r0
 8008e78:	331e      	adds	r3, #30
 8008e7a:	001a      	movs	r2, r3
 8008e7c:	4bc8      	ldr	r3, [pc, #800]	@ (80091a0 <SGP_GetMeasurementValues+0x380>)
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	e00c      	b.n	8008e9c <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008e82:	4bc8      	ldr	r3, [pc, #800]	@ (80091a4 <SGP_GetMeasurementValues+0x384>)
 8008e84:	2208      	movs	r2, #8
 8008e86:	0019      	movs	r1, r3
 8008e88:	2059      	movs	r0, #89	@ 0x59
 8008e8a:	f7ff ff21 	bl	8008cd0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008e8e:	f002 fbb3 	bl	800b5f8 <GetCurrentHalTicks>
 8008e92:	0003      	movs	r3, r0
 8008e94:	331e      	adds	r3, #30
 8008e96:	001a      	movs	r2, r3
 8008e98:	4bc1      	ldr	r3, [pc, #772]	@ (80091a0 <SGP_GetMeasurementValues+0x380>)
 8008e9a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008e9c:	4bbb      	ldr	r3, [pc, #748]	@ (800918c <SGP_GetMeasurementValues+0x36c>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8008ea2:	4bb9      	ldr	r3, [pc, #740]	@ (8009188 <SGP_GetMeasurementValues+0x368>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d100      	bne.n	8008eac <SGP_GetMeasurementValues+0x8c>
 8008eaa:	e1a9      	b.n	8009200 <SGP_GetMeasurementValues+0x3e0>
 8008eac:	f7ff ff8e 	bl	8008dcc <SGP_MeasurementReady>
 8008eb0:	1e03      	subs	r3, r0, #0
 8008eb2:	d100      	bne.n	8008eb6 <SGP_GetMeasurementValues+0x96>
 8008eb4:	e1a4      	b.n	8009200 <SGP_GetMeasurementValues+0x3e0>
 8008eb6:	4bbc      	ldr	r3, [pc, #752]	@ (80091a8 <SGP_GetMeasurementValues+0x388>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4053      	eors	r3, r2
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d100      	bne.n	8008ec6 <SGP_GetMeasurementValues+0xa6>
 8008ec4:	e19c      	b.n	8009200 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8008ec6:	4bb9      	ldr	r3, [pc, #740]	@ (80091ac <SGP_GetMeasurementValues+0x38c>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	4ab8      	ldr	r2, [pc, #736]	@ (80091b0 <SGP_GetMeasurementValues+0x390>)
 8008ece:	49b1      	ldr	r1, [pc, #708]	@ (8009194 <SGP_GetMeasurementValues+0x374>)
 8008ed0:	2003      	movs	r0, #3
 8008ed2:	f002 fb1f 	bl	800b514 <CreateLine>
    MeasurementIsReady = true;
 8008ed6:	4bb4      	ldr	r3, [pc, #720]	@ (80091a8 <SGP_GetMeasurementValues+0x388>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8008edc:	4bb5      	ldr	r3, [pc, #724]	@ (80091b4 <SGP_GetMeasurementValues+0x394>)
 8008ede:	2203      	movs	r2, #3
 8008ee0:	0019      	movs	r1, r3
 8008ee2:	2059      	movs	r0, #89	@ 0x59
 8008ee4:	f7ff fed6 	bl	8008c94 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8008ee8:	4bb2      	ldr	r3, [pc, #712]	@ (80091b4 <SGP_GetMeasurementValues+0x394>)
 8008eea:	2203      	movs	r2, #3
 8008eec:	2103      	movs	r1, #3
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 f9ec 	bl	80092cc <CheckCRC>
 8008ef4:	0003      	movs	r3, r0
 8008ef6:	001a      	movs	r2, r3
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4053      	eors	r3, r2
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d02a      	beq.n	8008f58 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8008f02:	4aad      	ldr	r2, [pc, #692]	@ (80091b8 <SGP_GetMeasurementValues+0x398>)
 8008f04:	4bad      	ldr	r3, [pc, #692]	@ (80091bc <SGP_GetMeasurementValues+0x39c>)
 8008f06:	0019      	movs	r1, r3
 8008f08:	2001      	movs	r0, #1
 8008f0a:	f002 fb03 	bl	800b514 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8008f0e:	4aac      	ldr	r2, [pc, #688]	@ (80091c0 <SGP_GetMeasurementValues+0x3a0>)
 8008f10:	4bac      	ldr	r3, [pc, #688]	@ (80091c4 <SGP_GetMeasurementValues+0x3a4>)
 8008f12:	0019      	movs	r1, r3
 8008f14:	2002      	movs	r0, #2
 8008f16:	f002 fafd 	bl	800b514 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008f1a:	230f      	movs	r3, #15
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	2200      	movs	r2, #0
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	e012      	b.n	8008f4a <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8008f24:	240f      	movs	r4, #15
 8008f26:	193b      	adds	r3, r7, r4
 8008f28:	7818      	ldrb	r0, [r3, #0]
 8008f2a:	193b      	adds	r3, r7, r4
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	4aa1      	ldr	r2, [pc, #644]	@ (80091b4 <SGP_GetMeasurementValues+0x394>)
 8008f30:	5cd3      	ldrb	r3, [r2, r3]
 8008f32:	4aa5      	ldr	r2, [pc, #660]	@ (80091c8 <SGP_GetMeasurementValues+0x3a8>)
 8008f34:	4997      	ldr	r1, [pc, #604]	@ (8009194 <SGP_GetMeasurementValues+0x374>)
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	0003      	movs	r3, r0
 8008f3a:	2003      	movs	r0, #3
 8008f3c:	f002 faea 	bl	800b514 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008f40:	193b      	adds	r3, r7, r4
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	193b      	adds	r3, r7, r4
 8008f46:	3201      	adds	r2, #1
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	230f      	movs	r3, #15
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d9e7      	bls.n	8008f24 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8008f54:	2300      	movs	r3, #0
 8008f56:	e16b      	b.n	8009230 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8008f58:	f002 fb4e 	bl	800b5f8 <GetCurrentHalTicks>
 8008f5c:	0003      	movs	r3, r0
 8008f5e:	22fa      	movs	r2, #250	@ 0xfa
 8008f60:	0092      	lsls	r2, r2, #2
 8008f62:	189a      	adds	r2, r3, r2
 8008f64:	4b99      	ldr	r3, [pc, #612]	@ (80091cc <SGP_GetMeasurementValues+0x3ac>)
 8008f66:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8008f68:	f7ff ff4c 	bl	8008e04 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8008f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80091ac <SGP_GetMeasurementValues+0x38c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	4b8d      	ldr	r3, [pc, #564]	@ (80091ac <SGP_GetMeasurementValues+0x38c>)
 8008f76:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8008f78:	4b8c      	ldr	r3, [pc, #560]	@ (80091ac <SGP_GetMeasurementValues+0x38c>)
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	4b94      	ldr	r3, [pc, #592]	@ (80091d0 <SGP_GetMeasurementValues+0x3b0>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d200      	bcs.n	8008f86 <SGP_GetMeasurementValues+0x166>
 8008f84:	e13c      	b.n	8009200 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8008f86:	4b8b      	ldr	r3, [pc, #556]	@ (80091b4 <SGP_GetMeasurementValues+0x394>)
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	b21a      	sxth	r2, r3
 8008f8e:	4b89      	ldr	r3, [pc, #548]	@ (80091b4 <SGP_GetMeasurementValues+0x394>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	b21b      	sxth	r3, r3
 8008f94:	4313      	orrs	r3, r2
 8008f96:	b21a      	sxth	r2, r3
 8008f98:	240c      	movs	r4, #12
 8008f9a:	193b      	adds	r3, r7, r4
 8008f9c:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8008f9e:	193b      	adds	r3, r7, r4
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	4a8c      	ldr	r2, [pc, #560]	@ (80091d4 <SGP_GetMeasurementValues+0x3b4>)
 8008fa4:	497b      	ldr	r1, [pc, #492]	@ (8009194 <SGP_GetMeasurementValues+0x374>)
 8008fa6:	2003      	movs	r0, #3
 8008fa8:	f002 fab4 	bl	800b514 <CreateLine>
      int32_t tempVocIndex = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8008fb0:	193b      	adds	r3, r7, r4
 8008fb2:	8819      	ldrh	r1, [r3, #0]
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	18fa      	adds	r2, r7, r3
 8008fb8:	4b87      	ldr	r3, [pc, #540]	@ (80091d8 <SGP_GetMeasurementValues+0x3b8>)
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7ff f848 	bl	8008050 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4a86      	ldr	r2, [pc, #536]	@ (80091dc <SGP_GetMeasurementValues+0x3bc>)
 8008fc4:	4973      	ldr	r1, [pc, #460]	@ (8009194 <SGP_GetMeasurementValues+0x374>)
 8008fc6:	2003      	movs	r0, #3
 8008fc8:	f002 faa4 	bl	800b514 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dd5a      	ble.n	8009090 <SGP_GetMeasurementValues+0x270>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b64      	cmp	r3, #100	@ 0x64
 8008fe0:	dc56      	bgt.n	8009090 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f7fa f9ea 	bl	80033c0 <__aeabi_i2d>
 8008fec:	2200      	movs	r2, #0
 8008fee:	4b7c      	ldr	r3, [pc, #496]	@ (80091e0 <SGP_GetMeasurementValues+0x3c0>)
 8008ff0:	f7f8 fee0 	bl	8001db4 <__aeabi_ddiv>
 8008ff4:	0002      	movs	r2, r0
 8008ff6:	000b      	movs	r3, r1
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	497a      	ldr	r1, [pc, #488]	@ (80091e4 <SGP_GetMeasurementValues+0x3c4>)
 8008ffc:	f7f9 fde6 	bl	8002bcc <__aeabi_dsub>
 8009000:	0002      	movs	r2, r0
 8009002:	000b      	movs	r3, r1
 8009004:	0014      	movs	r4, r2
 8009006:	001d      	movs	r5, r3
 8009008:	4b77      	ldr	r3, [pc, #476]	@ (80091e8 <SGP_GetMeasurementValues+0x3c8>)
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	0018      	movs	r0, r3
 800900e:	f7fa f9d7 	bl	80033c0 <__aeabi_i2d>
 8009012:	0002      	movs	r2, r0
 8009014:	000b      	movs	r3, r1
 8009016:	0020      	movs	r0, r4
 8009018:	0029      	movs	r1, r5
 800901a:	f7f9 fb0f 	bl	800263c <__aeabi_dmul>
 800901e:	0002      	movs	r2, r0
 8009020:	000b      	movs	r3, r1
 8009022:	0010      	movs	r0, r2
 8009024:	0019      	movs	r1, r3
 8009026:	f7f7 fb11 	bl	800064c <__aeabi_d2uiz>
 800902a:	0003      	movs	r3, r0
 800902c:	b29a      	uxth	r2, r3
 800902e:	4b6f      	ldr	r3, [pc, #444]	@ (80091ec <SGP_GetMeasurementValues+0x3cc>)
 8009030:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	0018      	movs	r0, r3
 8009038:	f7fa f9c2 	bl	80033c0 <__aeabi_i2d>
 800903c:	2200      	movs	r2, #0
 800903e:	4b68      	ldr	r3, [pc, #416]	@ (80091e0 <SGP_GetMeasurementValues+0x3c0>)
 8009040:	f7f8 feb8 	bl	8001db4 <__aeabi_ddiv>
 8009044:	0002      	movs	r2, r0
 8009046:	000b      	movs	r3, r1
 8009048:	0014      	movs	r4, r2
 800904a:	001d      	movs	r5, r3
 800904c:	4b66      	ldr	r3, [pc, #408]	@ (80091e8 <SGP_GetMeasurementValues+0x3c8>)
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	0018      	movs	r0, r3
 8009052:	f7fa f9b5 	bl	80033c0 <__aeabi_i2d>
 8009056:	0002      	movs	r2, r0
 8009058:	000b      	movs	r3, r1
 800905a:	0020      	movs	r0, r4
 800905c:	0029      	movs	r1, r5
 800905e:	f7f9 faed 	bl	800263c <__aeabi_dmul>
 8009062:	0002      	movs	r2, r0
 8009064:	000b      	movs	r3, r1
 8009066:	0010      	movs	r0, r2
 8009068:	0019      	movs	r1, r3
 800906a:	f7f7 faef 	bl	800064c <__aeabi_d2uiz>
 800906e:	0003      	movs	r3, r0
 8009070:	b29a      	uxth	r2, r3
 8009072:	4b5f      	ldr	r3, [pc, #380]	@ (80091f0 <SGP_GetMeasurementValues+0x3d0>)
 8009074:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8009076:	4b5c      	ldr	r3, [pc, #368]	@ (80091e8 <SGP_GetMeasurementValues+0x3c8>)
 8009078:	881a      	ldrh	r2, [r3, #0]
 800907a:	4b5e      	ldr	r3, [pc, #376]	@ (80091f4 <SGP_GetMeasurementValues+0x3d4>)
 800907c:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800907e:	4b5d      	ldr	r3, [pc, #372]	@ (80091f4 <SGP_GetMeasurementValues+0x3d4>)
 8009080:	8818      	ldrh	r0, [r3, #0]
 8009082:	4b5a      	ldr	r3, [pc, #360]	@ (80091ec <SGP_GetMeasurementValues+0x3cc>)
 8009084:	8819      	ldrh	r1, [r3, #0]
 8009086:	4b5a      	ldr	r3, [pc, #360]	@ (80091f0 <SGP_GetMeasurementValues+0x3d0>)
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	001a      	movs	r2, r3
 800908c:	f001 fb36 	bl	800a6fc <SetVocLED>
      }
      if(*vocIndex > 100){
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b64      	cmp	r3, #100	@ 0x64
 8009096:	dd66      	ble.n	8009166 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	0018      	movs	r0, r3
 800909e:	f7fa f98f 	bl	80033c0 <__aeabi_i2d>
 80090a2:	2200      	movs	r2, #0
 80090a4:	4b4e      	ldr	r3, [pc, #312]	@ (80091e0 <SGP_GetMeasurementValues+0x3c0>)
 80090a6:	f7f9 fd91 	bl	8002bcc <__aeabi_dsub>
 80090aa:	0002      	movs	r2, r0
 80090ac:	000b      	movs	r3, r1
 80090ae:	0010      	movs	r0, r2
 80090b0:	0019      	movs	r1, r3
 80090b2:	2200      	movs	r2, #0
 80090b4:	4b50      	ldr	r3, [pc, #320]	@ (80091f8 <SGP_GetMeasurementValues+0x3d8>)
 80090b6:	f7f8 fe7d 	bl	8001db4 <__aeabi_ddiv>
 80090ba:	0002      	movs	r2, r0
 80090bc:	000b      	movs	r3, r1
 80090be:	0014      	movs	r4, r2
 80090c0:	001d      	movs	r5, r3
 80090c2:	4b49      	ldr	r3, [pc, #292]	@ (80091e8 <SGP_GetMeasurementValues+0x3c8>)
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	0018      	movs	r0, r3
 80090c8:	f7fa f97a 	bl	80033c0 <__aeabi_i2d>
 80090cc:	0002      	movs	r2, r0
 80090ce:	000b      	movs	r3, r1
 80090d0:	0020      	movs	r0, r4
 80090d2:	0029      	movs	r1, r5
 80090d4:	f7f9 fab2 	bl	800263c <__aeabi_dmul>
 80090d8:	0002      	movs	r2, r0
 80090da:	000b      	movs	r3, r1
 80090dc:	0010      	movs	r0, r2
 80090de:	0019      	movs	r1, r3
 80090e0:	f7f7 fab4 	bl	800064c <__aeabi_d2uiz>
 80090e4:	0003      	movs	r3, r0
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	4b40      	ldr	r3, [pc, #256]	@ (80091ec <SGP_GetMeasurementValues+0x3cc>)
 80090ea:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	0018      	movs	r0, r3
 80090f2:	f7fa f965 	bl	80033c0 <__aeabi_i2d>
 80090f6:	2200      	movs	r2, #0
 80090f8:	4b39      	ldr	r3, [pc, #228]	@ (80091e0 <SGP_GetMeasurementValues+0x3c0>)
 80090fa:	f7f9 fd67 	bl	8002bcc <__aeabi_dsub>
 80090fe:	0002      	movs	r2, r0
 8009100:	000b      	movs	r3, r1
 8009102:	0010      	movs	r0, r2
 8009104:	0019      	movs	r1, r3
 8009106:	2200      	movs	r2, #0
 8009108:	4b3b      	ldr	r3, [pc, #236]	@ (80091f8 <SGP_GetMeasurementValues+0x3d8>)
 800910a:	f7f8 fe53 	bl	8001db4 <__aeabi_ddiv>
 800910e:	0002      	movs	r2, r0
 8009110:	000b      	movs	r3, r1
 8009112:	2000      	movs	r0, #0
 8009114:	4933      	ldr	r1, [pc, #204]	@ (80091e4 <SGP_GetMeasurementValues+0x3c4>)
 8009116:	f7f9 fd59 	bl	8002bcc <__aeabi_dsub>
 800911a:	0002      	movs	r2, r0
 800911c:	000b      	movs	r3, r1
 800911e:	0014      	movs	r4, r2
 8009120:	001d      	movs	r5, r3
 8009122:	4b31      	ldr	r3, [pc, #196]	@ (80091e8 <SGP_GetMeasurementValues+0x3c8>)
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	0018      	movs	r0, r3
 8009128:	f7fa f94a 	bl	80033c0 <__aeabi_i2d>
 800912c:	0002      	movs	r2, r0
 800912e:	000b      	movs	r3, r1
 8009130:	0020      	movs	r0, r4
 8009132:	0029      	movs	r1, r5
 8009134:	f7f9 fa82 	bl	800263c <__aeabi_dmul>
 8009138:	0002      	movs	r2, r0
 800913a:	000b      	movs	r3, r1
 800913c:	0010      	movs	r0, r2
 800913e:	0019      	movs	r1, r3
 8009140:	f7f7 fa84 	bl	800064c <__aeabi_d2uiz>
 8009144:	0003      	movs	r3, r0
 8009146:	b29a      	uxth	r2, r3
 8009148:	4b2a      	ldr	r3, [pc, #168]	@ (80091f4 <SGP_GetMeasurementValues+0x3d4>)
 800914a:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800914c:	4b26      	ldr	r3, [pc, #152]	@ (80091e8 <SGP_GetMeasurementValues+0x3c8>)
 800914e:	881a      	ldrh	r2, [r3, #0]
 8009150:	4b27      	ldr	r3, [pc, #156]	@ (80091f0 <SGP_GetMeasurementValues+0x3d0>)
 8009152:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 8009154:	4b27      	ldr	r3, [pc, #156]	@ (80091f4 <SGP_GetMeasurementValues+0x3d4>)
 8009156:	8818      	ldrh	r0, [r3, #0]
 8009158:	4b24      	ldr	r3, [pc, #144]	@ (80091ec <SGP_GetMeasurementValues+0x3cc>)
 800915a:	8819      	ldrh	r1, [r3, #0]
 800915c:	4b24      	ldr	r3, [pc, #144]	@ (80091f0 <SGP_GetMeasurementValues+0x3d0>)
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	001a      	movs	r2, r3
 8009162:	f001 facb 	bl	800a6fc <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 8009166:	4b11      	ldr	r3, [pc, #68]	@ (80091ac <SGP_GetMeasurementValues+0x38c>)
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 800916c:	4a23      	ldr	r2, [pc, #140]	@ (80091fc <SGP_GetMeasurementValues+0x3dc>)
 800916e:	4b09      	ldr	r3, [pc, #36]	@ (8009194 <SGP_GetMeasurementValues+0x374>)
 8009170:	0019      	movs	r1, r3
 8009172:	2003      	movs	r0, #3
 8009174:	f002 f9ce 	bl	800b514 <CreateLine>
      HT_MeasurementReceived = false;
 8009178:	4b07      	ldr	r3, [pc, #28]	@ (8009198 <SGP_GetMeasurementValues+0x378>)
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800917e:	4b03      	ldr	r3, [pc, #12]	@ (800918c <SGP_GetMeasurementValues+0x36c>)
 8009180:	2200      	movs	r2, #0
 8009182:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8009184:	2301      	movs	r3, #1
 8009186:	e053      	b.n	8009230 <SGP_GetMeasurementValues+0x410>
 8009188:	200011b6 	.word	0x200011b6
 800918c:	20001261 	.word	0x20001261
 8009190:	0801f8b8 	.word	0x0801f8b8
 8009194:	0801f8e4 	.word	0x0801f8e4
 8009198:	20001260 	.word	0x20001260
 800919c:	20000094 	.word	0x20000094
 80091a0:	200000a8 	.word	0x200000a8
 80091a4:	2000008c 	.word	0x2000008c
 80091a8:	200011b7 	.word	0x200011b7
 80091ac:	200011b5 	.word	0x200011b5
 80091b0:	0801f8e8 	.word	0x0801f8e8
 80091b4:	200011ac 	.word	0x200011ac
 80091b8:	0801f918 	.word	0x0801f918
 80091bc:	0801f93c 	.word	0x0801f93c
 80091c0:	0801f940 	.word	0x0801f940
 80091c4:	0801f960 	.word	0x0801f960
 80091c8:	0801f964 	.word	0x0801f964
 80091cc:	200000a4 	.word	0x200000a4
 80091d0:	2000009c 	.word	0x2000009c
 80091d4:	0801f984 	.word	0x0801f984
 80091d8:	200011b8 	.word	0x200011b8
 80091dc:	0801f998 	.word	0x0801f998
 80091e0:	40590000 	.word	0x40590000
 80091e4:	3ff00000 	.word	0x3ff00000
 80091e8:	200000ac 	.word	0x200000ac
 80091ec:	20001266 	.word	0x20001266
 80091f0:	20001264 	.word	0x20001264
 80091f4:	20001262 	.word	0x20001262
 80091f8:	40790000 	.word	0x40790000
 80091fc:	0801f9ac 	.word	0x0801f9ac
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8009200:	f7ff fdf2 	bl	8008de8 <SGP_MeasurementDone>
 8009204:	1e03      	subs	r3, r0, #0
 8009206:	d012      	beq.n	800922e <SGP_GetMeasurementValues+0x40e>
 8009208:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <SGP_GetMeasurementValues+0x418>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00e      	beq.n	800922e <SGP_GetMeasurementValues+0x40e>
 8009210:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <SGP_GetMeasurementValues+0x41c>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8009218:	4a09      	ldr	r2, [pc, #36]	@ (8009240 <SGP_GetMeasurementValues+0x420>)
 800921a:	4b0a      	ldr	r3, [pc, #40]	@ (8009244 <SGP_GetMeasurementValues+0x424>)
 800921c:	0019      	movs	r1, r3
 800921e:	2003      	movs	r0, #3
 8009220:	f002 f978 	bl	800b514 <CreateLine>
    SGP_StartMeasurement();
 8009224:	f7ff fd8c 	bl	8008d40 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8009228:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <SGP_GetMeasurementValues+0x428>)
 800922a:	2200      	movs	r2, #0
 800922c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800922e:	2300      	movs	r3, #0
}
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	b004      	add	sp, #16
 8009236:	bdb0      	pop	{r4, r5, r7, pc}
 8009238:	200011b6 	.word	0x200011b6
 800923c:	200011b7 	.word	0x200011b7
 8009240:	0801f9d0 	.word	0x0801f9d0
 8009244:	0801f8e4 	.word	0x0801f8e4
 8009248:	20001261 	.word	0x20001261

0800924c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8009252:	4b1a      	ldr	r3, [pc, #104]	@ (80092bc <SGP_DeviceConnected+0x70>)
 8009254:	2202      	movs	r2, #2
 8009256:	0019      	movs	r1, r3
 8009258:	2059      	movs	r0, #89	@ 0x59
 800925a:	f7ff fd39 	bl	8008cd0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800925e:	2001      	movs	r0, #1
 8009260:	f002 fd04 	bl	800bc6c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8009264:	4b16      	ldr	r3, [pc, #88]	@ (80092c0 <SGP_DeviceConnected+0x74>)
 8009266:	2209      	movs	r2, #9
 8009268:	0019      	movs	r1, r3
 800926a:	2059      	movs	r0, #89	@ 0x59
 800926c:	f7ff fd12 	bl	8008c94 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8009270:	1dfb      	adds	r3, r7, #7
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	e011      	b.n	800929c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8009278:	1dfb      	adds	r3, r7, #7
 800927a:	7818      	ldrb	r0, [r3, #0]
 800927c:	1dfb      	adds	r3, r7, #7
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	4a0f      	ldr	r2, [pc, #60]	@ (80092c0 <SGP_DeviceConnected+0x74>)
 8009282:	5cd3      	ldrb	r3, [r2, r3]
 8009284:	4a0f      	ldr	r2, [pc, #60]	@ (80092c4 <SGP_DeviceConnected+0x78>)
 8009286:	4910      	ldr	r1, [pc, #64]	@ (80092c8 <SGP_DeviceConnected+0x7c>)
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	0003      	movs	r3, r0
 800928c:	2002      	movs	r0, #2
 800928e:	f002 f941 	bl	800b514 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8009292:	1dfb      	adds	r3, r7, #7
 8009294:	781a      	ldrb	r2, [r3, #0]
 8009296:	1dfb      	adds	r3, r7, #7
 8009298:	3201      	adds	r2, #1
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	1dfb      	adds	r3, r7, #7
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d9e9      	bls.n	8009278 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80092a4:	4b06      	ldr	r3, [pc, #24]	@ (80092c0 <SGP_DeviceConnected+0x74>)
 80092a6:	2203      	movs	r2, #3
 80092a8:	2109      	movs	r1, #9
 80092aa:	0018      	movs	r0, r3
 80092ac:	f000 f80e 	bl	80092cc <CheckCRC>
 80092b0:	0003      	movs	r3, r0
}
 80092b2:	0018      	movs	r0, r3
 80092b4:	46bd      	mov	sp, r7
 80092b6:	b002      	add	sp, #8
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	46c0      	nop			@ (mov r8, r8)
 80092bc:	20000088 	.word	0x20000088
 80092c0:	200011ac 	.word	0x200011ac
 80092c4:	0801f9f0 	.word	0x0801f9f0
 80092c8:	0801f960 	.word	0x0801f960

080092cc <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80092cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ce:	b08f      	sub	sp, #60	@ 0x3c
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6278      	str	r0, [r7, #36]	@ 0x24
 80092d4:	0008      	movs	r0, r1
 80092d6:	0011      	movs	r1, r2
 80092d8:	2323      	movs	r3, #35	@ 0x23
 80092da:	18fb      	adds	r3, r7, r3
 80092dc:	1c02      	adds	r2, r0, #0
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	2322      	movs	r3, #34	@ 0x22
 80092e2:	18fb      	adds	r3, r7, r3
 80092e4:	1c0a      	adds	r2, r1, #0
 80092e6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80092e8:	2317      	movs	r3, #23
 80092ea:	2220      	movs	r2, #32
 80092ec:	189b      	adds	r3, r3, r2
 80092ee:	19db      	adds	r3, r3, r7
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
 80092f4:	e09f      	b.n	8009436 <CheckCRC+0x16a>
 80092f6:	466b      	mov	r3, sp
 80092f8:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80092fa:	2322      	movs	r3, #34	@ 0x22
 80092fc:	18fb      	adds	r3, r7, r3
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	001a      	movs	r2, r3
 8009302:	3a01      	subs	r2, #1
 8009304:	633a      	str	r2, [r7, #48]	@ 0x30
 8009306:	60bb      	str	r3, [r7, #8]
 8009308:	2200      	movs	r2, #0
 800930a:	60fa      	str	r2, [r7, #12]
 800930c:	68b8      	ldr	r0, [r7, #8]
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	0002      	movs	r2, r0
 8009312:	0f52      	lsrs	r2, r2, #29
 8009314:	000c      	movs	r4, r1
 8009316:	00e4      	lsls	r4, r4, #3
 8009318:	61fc      	str	r4, [r7, #28]
 800931a:	69fc      	ldr	r4, [r7, #28]
 800931c:	4314      	orrs	r4, r2
 800931e:	61fc      	str	r4, [r7, #28]
 8009320:	0002      	movs	r2, r0
 8009322:	00d2      	lsls	r2, r2, #3
 8009324:	61ba      	str	r2, [r7, #24]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	6838      	ldr	r0, [r7, #0]
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	0002      	movs	r2, r0
 8009332:	0f52      	lsrs	r2, r2, #29
 8009334:	000c      	movs	r4, r1
 8009336:	00e4      	lsls	r4, r4, #3
 8009338:	617c      	str	r4, [r7, #20]
 800933a:	697c      	ldr	r4, [r7, #20]
 800933c:	4314      	orrs	r4, r2
 800933e:	617c      	str	r4, [r7, #20]
 8009340:	0002      	movs	r2, r0
 8009342:	00d2      	lsls	r2, r2, #3
 8009344:	613a      	str	r2, [r7, #16]
 8009346:	3307      	adds	r3, #7
 8009348:	08db      	lsrs	r3, r3, #3
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	466a      	mov	r2, sp
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	469d      	mov	sp, r3
 8009352:	466b      	mov	r3, sp
 8009354:	3300      	adds	r3, #0
 8009356:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8009358:	2316      	movs	r3, #22
 800935a:	2220      	movs	r2, #32
 800935c:	189b      	adds	r3, r3, r2
 800935e:	19db      	adds	r3, r3, r7
 8009360:	2200      	movs	r2, #0
 8009362:	701a      	strb	r2, [r3, #0]
 8009364:	e01e      	b.n	80093a4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8009366:	2317      	movs	r3, #23
 8009368:	2220      	movs	r2, #32
 800936a:	189b      	adds	r3, r3, r2
 800936c:	19db      	adds	r3, r3, r7
 800936e:	781a      	ldrb	r2, [r3, #0]
 8009370:	2116      	movs	r1, #22
 8009372:	2320      	movs	r3, #32
 8009374:	18cb      	adds	r3, r1, r3
 8009376:	19db      	adds	r3, r3, r7
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	18d3      	adds	r3, r2, r3
 800937c:	001a      	movs	r2, r3
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	189a      	adds	r2, r3, r2
 8009382:	0008      	movs	r0, r1
 8009384:	2320      	movs	r3, #32
 8009386:	18cb      	adds	r3, r1, r3
 8009388:	19db      	adds	r3, r3, r7
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	7811      	ldrb	r1, [r2, #0]
 800938e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009390:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8009392:	2320      	movs	r3, #32
 8009394:	18c3      	adds	r3, r0, r3
 8009396:	19db      	adds	r3, r3, r7
 8009398:	781a      	ldrb	r2, [r3, #0]
 800939a:	2320      	movs	r3, #32
 800939c:	18c3      	adds	r3, r0, r3
 800939e:	19db      	adds	r3, r3, r7
 80093a0:	3201      	adds	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	2316      	movs	r3, #22
 80093a6:	2220      	movs	r2, #32
 80093a8:	189b      	adds	r3, r3, r2
 80093aa:	19da      	adds	r2, r3, r7
 80093ac:	2322      	movs	r3, #34	@ 0x22
 80093ae:	18fb      	adds	r3, r7, r3
 80093b0:	7812      	ldrb	r2, [r2, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d3d6      	bcc.n	8009366 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80093b8:	2417      	movs	r4, #23
 80093ba:	2320      	movs	r3, #32
 80093bc:	18e3      	adds	r3, r4, r3
 80093be:	19db      	adds	r3, r3, r7
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	2322      	movs	r3, #34	@ 0x22
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	18d3      	adds	r3, r2, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ce:	18d2      	adds	r2, r2, r3
 80093d0:	250b      	movs	r5, #11
 80093d2:	2320      	movs	r3, #32
 80093d4:	18eb      	adds	r3, r5, r3
 80093d6:	19db      	adds	r3, r3, r7
 80093d8:	7812      	ldrb	r2, [r2, #0]
 80093da:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80093dc:	2322      	movs	r3, #34	@ 0x22
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	0011      	movs	r1, r2
 80093ea:	0018      	movs	r0, r3
 80093ec:	f000 f838 	bl	8009460 <CalculateCRC>
 80093f0:	0003      	movs	r3, r0
 80093f2:	001a      	movs	r2, r3
 80093f4:	2320      	movs	r3, #32
 80093f6:	18eb      	adds	r3, r5, r3
 80093f8:	19db      	adds	r3, r3, r7
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00c      	beq.n	800941a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8009400:	2320      	movs	r3, #32
 8009402:	18e3      	adds	r3, r4, r3
 8009404:	19db      	adds	r3, r3, r7
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	3301      	adds	r3, #1
 800940a:	4a13      	ldr	r2, [pc, #76]	@ (8009458 <CheckCRC+0x18c>)
 800940c:	4913      	ldr	r1, [pc, #76]	@ (800945c <CheckCRC+0x190>)
 800940e:	2001      	movs	r0, #1
 8009410:	f002 f880 	bl	800b514 <CreateLine>
      return false;
 8009414:	2300      	movs	r3, #0
 8009416:	46b5      	mov	sp, r6
 8009418:	e019      	b.n	800944e <CheckCRC+0x182>
 800941a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800941c:	2217      	movs	r2, #23
 800941e:	2320      	movs	r3, #32
 8009420:	18d3      	adds	r3, r2, r3
 8009422:	19db      	adds	r3, r3, r7
 8009424:	2120      	movs	r1, #32
 8009426:	1852      	adds	r2, r2, r1
 8009428:	19d1      	adds	r1, r2, r7
 800942a:	2222      	movs	r2, #34	@ 0x22
 800942c:	18ba      	adds	r2, r7, r2
 800942e:	7809      	ldrb	r1, [r1, #0]
 8009430:	7812      	ldrb	r2, [r2, #0]
 8009432:	188a      	adds	r2, r1, r2
 8009434:	701a      	strb	r2, [r3, #0]
 8009436:	2317      	movs	r3, #23
 8009438:	2220      	movs	r2, #32
 800943a:	189b      	adds	r3, r3, r2
 800943c:	19da      	adds	r2, r3, r7
 800943e:	2323      	movs	r3, #35	@ 0x23
 8009440:	18fb      	adds	r3, r7, r3
 8009442:	7812      	ldrb	r2, [r2, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d200      	bcs.n	800944c <CheckCRC+0x180>
 800944a:	e754      	b.n	80092f6 <CheckCRC+0x2a>
    }
  }
  return true;
 800944c:	2301      	movs	r3, #1
}
 800944e:	0018      	movs	r0, r3
 8009450:	46bd      	mov	sp, r7
 8009452:	b00f      	add	sp, #60	@ 0x3c
 8009454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009456:	46c0      	nop			@ (mov r8, r8)
 8009458:	0801fa10 	.word	0x0801fa10
 800945c:	0801f93c 	.word	0x0801f93c

08009460 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	000a      	movs	r2, r1
 800946a:	1cfb      	adds	r3, r7, #3
 800946c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800946e:	230f      	movs	r3, #15
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	22ff      	movs	r2, #255	@ 0xff
 8009474:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009476:	230e      	movs	r3, #14
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	e037      	b.n	80094f0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009480:	230e      	movs	r3, #14
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	18d3      	adds	r3, r2, r3
 800948a:	7819      	ldrb	r1, [r3, #0]
 800948c:	220f      	movs	r2, #15
 800948e:	18bb      	adds	r3, r7, r2
 8009490:	18ba      	adds	r2, r7, r2
 8009492:	7812      	ldrb	r2, [r2, #0]
 8009494:	404a      	eors	r2, r1
 8009496:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009498:	230d      	movs	r3, #13
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	2200      	movs	r2, #0
 800949e:	701a      	strb	r2, [r3, #0]
 80094a0:	e01b      	b.n	80094da <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80094a2:	210f      	movs	r1, #15
 80094a4:	187b      	adds	r3, r7, r1
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da09      	bge.n	80094c2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80094ae:	187b      	adds	r3, r7, r1
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	b25b      	sxtb	r3, r3
 80094b6:	2231      	movs	r2, #49	@ 0x31
 80094b8:	4053      	eors	r3, r2
 80094ba:	b25a      	sxtb	r2, r3
 80094bc:	187b      	adds	r3, r7, r1
 80094be:	701a      	strb	r2, [r3, #0]
 80094c0:	e005      	b.n	80094ce <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80094c2:	230f      	movs	r3, #15
 80094c4:	18fa      	adds	r2, r7, r3
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	18db      	adds	r3, r3, r3
 80094cc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80094ce:	210d      	movs	r1, #13
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	187b      	adds	r3, r7, r1
 80094d6:	3201      	adds	r2, #1
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	230d      	movs	r3, #13
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2b07      	cmp	r3, #7
 80094e2:	d9de      	bls.n	80094a2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80094e4:	210e      	movs	r1, #14
 80094e6:	187b      	adds	r3, r7, r1
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	187b      	adds	r3, r7, r1
 80094ec:	3201      	adds	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	230e      	movs	r3, #14
 80094f2:	18fa      	adds	r2, r7, r3
 80094f4:	1cfb      	adds	r3, r7, #3
 80094f6:	7812      	ldrb	r2, [r2, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3c0      	bcc.n	8009480 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80094fe:	230f      	movs	r3, #15
 8009500:	18fb      	adds	r3, r7, r3
 8009502:	781b      	ldrb	r3, [r3, #0]
}
 8009504:	0018      	movs	r0, r3
 8009506:	46bd      	mov	sp, r7
 8009508:	b004      	add	sp, #16
 800950a:	bd80      	pop	{r7, pc}

0800950c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4936      	ldr	r1, [pc, #216]	@ (80095f4 <SGP_GetHT+0xe8>)
 800951c:	1c18      	adds	r0, r3, #0
 800951e:	f7f7 f9cf 	bl	80008c0 <__aeabi_fadd>
 8009522:	1c03      	adds	r3, r0, #0
 8009524:	4934      	ldr	r1, [pc, #208]	@ (80095f8 <SGP_GetHT+0xec>)
 8009526:	1c18      	adds	r0, r3, #0
 8009528:	f7f7 fb54 	bl	8000bd4 <__aeabi_fdiv>
 800952c:	1c03      	adds	r3, r0, #0
 800952e:	4933      	ldr	r1, [pc, #204]	@ (80095fc <SGP_GetHT+0xf0>)
 8009530:	1c18      	adds	r0, r3, #0
 8009532:	f7f7 fd35 	bl	8000fa0 <__aeabi_fmul>
 8009536:	1c03      	adds	r3, r0, #0
 8009538:	1c18      	adds	r0, r3, #0
 800953a:	f7f7 f86f 	bl	800061c <__aeabi_f2uiz>
 800953e:	0003      	movs	r3, r0
 8009540:	b29a      	uxth	r2, r3
 8009542:	4b2f      	ldr	r3, [pc, #188]	@ (8009600 <SGP_GetHT+0xf4>)
 8009544:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	492e      	ldr	r1, [pc, #184]	@ (8009604 <SGP_GetHT+0xf8>)
 800954c:	1c18      	adds	r0, r3, #0
 800954e:	f7f7 fb41 	bl	8000bd4 <__aeabi_fdiv>
 8009552:	1c03      	adds	r3, r0, #0
 8009554:	4929      	ldr	r1, [pc, #164]	@ (80095fc <SGP_GetHT+0xf0>)
 8009556:	1c18      	adds	r0, r3, #0
 8009558:	f7f7 fd22 	bl	8000fa0 <__aeabi_fmul>
 800955c:	1c03      	adds	r3, r0, #0
 800955e:	1c18      	adds	r0, r3, #0
 8009560:	f7f7 f85c 	bl	800061c <__aeabi_f2uiz>
 8009564:	0003      	movs	r3, r0
 8009566:	b29a      	uxth	r2, r3
 8009568:	4b27      	ldr	r3, [pc, #156]	@ (8009608 <SGP_GetHT+0xfc>)
 800956a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800956c:	4b26      	ldr	r3, [pc, #152]	@ (8009608 <SGP_GetHT+0xfc>)
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	b29b      	uxth	r3, r3
 8009574:	b2da      	uxtb	r2, r3
 8009576:	4b25      	ldr	r3, [pc, #148]	@ (800960c <SGP_GetHT+0x100>)
 8009578:	709a      	strb	r2, [r3, #2]
 800957a:	4b24      	ldr	r3, [pc, #144]	@ (800960c <SGP_GetHT+0x100>)
 800957c:	789a      	ldrb	r2, [r3, #2]
 800957e:	210c      	movs	r1, #12
 8009580:	187b      	adds	r3, r7, r1
 8009582:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8009584:	4b20      	ldr	r3, [pc, #128]	@ (8009608 <SGP_GetHT+0xfc>)
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b2da      	uxtb	r2, r3
 800958a:	4b20      	ldr	r3, [pc, #128]	@ (800960c <SGP_GetHT+0x100>)
 800958c:	70da      	strb	r2, [r3, #3]
 800958e:	4b1f      	ldr	r3, [pc, #124]	@ (800960c <SGP_GetHT+0x100>)
 8009590:	78da      	ldrb	r2, [r3, #3]
 8009592:	187b      	adds	r3, r7, r1
 8009594:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8009596:	187b      	adds	r3, r7, r1
 8009598:	2102      	movs	r1, #2
 800959a:	0018      	movs	r0, r3
 800959c:	f7ff ff60 	bl	8009460 <CalculateCRC>
 80095a0:	0003      	movs	r3, r0
 80095a2:	001a      	movs	r2, r3
 80095a4:	4b19      	ldr	r3, [pc, #100]	@ (800960c <SGP_GetHT+0x100>)
 80095a6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80095a8:	4b15      	ldr	r3, [pc, #84]	@ (8009600 <SGP_GetHT+0xf4>)
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	0a1b      	lsrs	r3, r3, #8
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	4b16      	ldr	r3, [pc, #88]	@ (800960c <SGP_GetHT+0x100>)
 80095b4:	715a      	strb	r2, [r3, #5]
 80095b6:	4b15      	ldr	r3, [pc, #84]	@ (800960c <SGP_GetHT+0x100>)
 80095b8:	795a      	ldrb	r2, [r3, #5]
 80095ba:	2108      	movs	r1, #8
 80095bc:	187b      	adds	r3, r7, r1
 80095be:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80095c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009600 <SGP_GetHT+0xf4>)
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	4b11      	ldr	r3, [pc, #68]	@ (800960c <SGP_GetHT+0x100>)
 80095c8:	719a      	strb	r2, [r3, #6]
 80095ca:	4b10      	ldr	r3, [pc, #64]	@ (800960c <SGP_GetHT+0x100>)
 80095cc:	799a      	ldrb	r2, [r3, #6]
 80095ce:	187b      	adds	r3, r7, r1
 80095d0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80095d2:	187b      	adds	r3, r7, r1
 80095d4:	2102      	movs	r1, #2
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff ff42 	bl	8009460 <CalculateCRC>
 80095dc:	0003      	movs	r3, r0
 80095de:	001a      	movs	r2, r3
 80095e0:	4b0a      	ldr	r3, [pc, #40]	@ (800960c <SGP_GetHT+0x100>)
 80095e2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80095e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009610 <SGP_GetHT+0x104>)
 80095e6:	2201      	movs	r2, #1
 80095e8:	701a      	strb	r2, [r3, #0]
}
 80095ea:	46c0      	nop			@ (mov r8, r8)
 80095ec:	46bd      	mov	sp, r7
 80095ee:	b004      	add	sp, #16
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	46c0      	nop			@ (mov r8, r8)
 80095f4:	42340000 	.word	0x42340000
 80095f8:	432f0000 	.word	0x432f0000
 80095fc:	477fff00 	.word	0x477fff00
 8009600:	2000125e 	.word	0x2000125e
 8009604:	42c80000 	.word	0x42c80000
 8009608:	2000125c 	.word	0x2000125c
 800960c:	20000094 	.word	0x20000094
 8009610:	20001260 	.word	0x20001260

08009614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	0002      	movs	r2, r0
 800961c:	1dfb      	adds	r3, r7, #7
 800961e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009620:	1dfb      	adds	r3, r7, #7
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b7f      	cmp	r3, #127	@ 0x7f
 8009626:	d809      	bhi.n	800963c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009628:	1dfb      	adds	r3, r7, #7
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	001a      	movs	r2, r3
 800962e:	231f      	movs	r3, #31
 8009630:	401a      	ands	r2, r3
 8009632:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <__NVIC_EnableIRQ+0x30>)
 8009634:	2101      	movs	r1, #1
 8009636:	4091      	lsls	r1, r2
 8009638:	000a      	movs	r2, r1
 800963a:	601a      	str	r2, [r3, #0]
  }
}
 800963c:	46c0      	nop			@ (mov r8, r8)
 800963e:	46bd      	mov	sp, r7
 8009640:	b002      	add	sp, #8
 8009642:	bd80      	pop	{r7, pc}
 8009644:	e000e100 	.word	0xe000e100

08009648 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	0002      	movs	r2, r0
 8009650:	1dfb      	adds	r3, r7, #7
 8009652:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009654:	1dfb      	adds	r3, r7, #7
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b7f      	cmp	r3, #127	@ 0x7f
 800965a:	d810      	bhi.n	800967e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800965c:	1dfb      	adds	r3, r7, #7
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	001a      	movs	r2, r3
 8009662:	231f      	movs	r3, #31
 8009664:	4013      	ands	r3, r2
 8009666:	4908      	ldr	r1, [pc, #32]	@ (8009688 <__NVIC_DisableIRQ+0x40>)
 8009668:	2201      	movs	r2, #1
 800966a:	409a      	lsls	r2, r3
 800966c:	0013      	movs	r3, r2
 800966e:	2280      	movs	r2, #128	@ 0x80
 8009670:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009672:	f3bf 8f4f 	dsb	sy
}
 8009676:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8009678:	f3bf 8f6f 	isb	sy
}
 800967c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800967e:	46c0      	nop			@ (mov r8, r8)
 8009680:	46bd      	mov	sp, r7
 8009682:	b002      	add	sp, #8
 8009684:	bd80      	pop	{r7, pc}
 8009686:	46c0      	nop			@ (mov r8, r8)
 8009688:	e000e100 	.word	0xe000e100

0800968c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800968c:	b5b0      	push	{r4, r5, r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af02      	add	r7, sp, #8
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	0008      	movs	r0, r1
 8009696:	0011      	movs	r1, r2
 8009698:	1cfb      	adds	r3, r7, #3
 800969a:	1c02      	adds	r2, r0, #0
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	1cbb      	adds	r3, r7, #2
 80096a0:	1c0a      	adds	r2, r1, #0
 80096a2:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 80096a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009814 <getSoundData+0x188>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2201      	movs	r2, #1
 80096ac:	4053      	eors	r3, r2
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d107      	bne.n	80096c4 <getSoundData+0x38>
 80096b4:	4b58      	ldr	r3, [pc, #352]	@ (8009818 <getSoundData+0x18c>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2201      	movs	r2, #1
 80096bc:	4053      	eors	r3, r2
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <getSoundData+0x3c>
    {
        return false;
 80096c4:	2300      	movs	r3, #0
 80096c6:	e0a0      	b.n	800980a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 80096c8:	4b54      	ldr	r3, [pc, #336]	@ (800981c <getSoundData+0x190>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d005      	beq.n	80096de <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80096d2:	4b53      	ldr	r3, [pc, #332]	@ (8009820 <getSoundData+0x194>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b25b      	sxtb	r3, r3
 80096d8:	0018      	movs	r0, r3
 80096da:	f7ff ffb5 	bl	8009648 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80096de:	f3bf 8f4f 	dsb	sy
}
 80096e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80096e4:	f3bf 8f6f 	isb	sy
}
 80096e8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 80096ea:	1cfb      	adds	r3, r7, #3
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d04c      	beq.n	800978c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 80096f2:	4b4c      	ldr	r3, [pc, #304]	@ (8009824 <getSoundData+0x198>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d11b      	bne.n	8009732 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	e00e      	b.n	800972a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	18d3      	adds	r3, r2, r3
 8009712:	3302      	adds	r3, #2
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	18d3      	adds	r3, r2, r3
 800971e:	3308      	adds	r3, #8
 8009720:	2200      	movs	r2, #0
 8009722:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	3301      	adds	r3, #1
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b05      	cmp	r3, #5
 800972e:	d9ed      	bls.n	800970c <getSoundData+0x80>
 8009730:	e02c      	b.n	800978c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	1c59      	adds	r1, r3, #1
 8009738:	4b3b      	ldr	r3, [pc, #236]	@ (8009828 <getSoundData+0x19c>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	4b3b      	ldr	r3, [pc, #236]	@ (800982c <getSoundData+0x1a0>)
 800973e:	681c      	ldr	r4, [r3, #0]
 8009740:	4b38      	ldr	r3, [pc, #224]	@ (8009824 <getSoundData+0x198>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	0023      	movs	r3, r4
 8009748:	f000 fde8 	bl	800a31c <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800974c:	2300      	movs	r3, #0
 800974e:	613b      	str	r3, [r7, #16]
 8009750:	e019      	b.n	8009786 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	18d3      	adds	r3, r2, r3
 8009758:	1c98      	adds	r0, r3, #2
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3308      	adds	r3, #8
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8009762:	4b33      	ldr	r3, [pc, #204]	@ (8009830 <getSoundData+0x1a4>)
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	0092      	lsls	r2, r2, #2
 8009768:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800976a:	4b32      	ldr	r3, [pc, #200]	@ (8009834 <getSoundData+0x1a8>)
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	0092      	lsls	r2, r2, #2
 8009770:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009772:	4b2c      	ldr	r3, [pc, #176]	@ (8009824 <getSoundData+0x198>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	0013      	movs	r3, r2
 800977a:	0022      	movs	r2, r4
 800977c:	f000 fdce 	bl	800a31c <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	3301      	adds	r3, #1
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	2b05      	cmp	r3, #5
 800978a:	d9e2      	bls.n	8009752 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800978c:	1cbb      	adds	r3, r7, #2
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d028      	beq.n	80097e6 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8009794:	240e      	movs	r4, #14
 8009796:	193b      	adds	r3, r7, r4
 8009798:	2200      	movs	r2, #0
 800979a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800979c:	250d      	movs	r5, #13
 800979e:	197b      	adds	r3, r7, r5
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 80097a4:	4b24      	ldr	r3, [pc, #144]	@ (8009838 <getSoundData+0x1ac>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	4924      	ldr	r1, [pc, #144]	@ (800983c <getSoundData+0x1b0>)
 80097aa:	197b      	adds	r3, r7, r5
 80097ac:	193a      	adds	r2, r7, r4
 80097ae:	f000 fe59 	bl	800a464 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 80097b2:	193b      	adds	r3, r7, r4
 80097b4:	881a      	ldrh	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	21ff      	movs	r1, #255	@ 0xff
 80097ba:	4011      	ands	r1, r2
 80097bc:	000c      	movs	r4, r1
 80097be:	7b99      	ldrb	r1, [r3, #14]
 80097c0:	2000      	movs	r0, #0
 80097c2:	4001      	ands	r1, r0
 80097c4:	1c08      	adds	r0, r1, #0
 80097c6:	1c21      	adds	r1, r4, #0
 80097c8:	4301      	orrs	r1, r0
 80097ca:	7399      	strb	r1, [r3, #14]
 80097cc:	0a12      	lsrs	r2, r2, #8
 80097ce:	b290      	uxth	r0, r2
 80097d0:	7bda      	ldrb	r2, [r3, #15]
 80097d2:	2100      	movs	r1, #0
 80097d4:	400a      	ands	r2, r1
 80097d6:	1c11      	adds	r1, r2, #0
 80097d8:	1c02      	adds	r2, r0, #0
 80097da:	430a      	orrs	r2, r1
 80097dc:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 80097de:	197b      	adds	r3, r7, r5
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 80097e6:	f000 f86f 	bl	80098c8 <micSettlingComplete>
 80097ea:	0003      	movs	r3, r0
 80097ec:	001a      	movs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 80097f2:	4b0a      	ldr	r3, [pc, #40]	@ (800981c <getSoundData+0x190>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80097fc:	4b08      	ldr	r3, [pc, #32]	@ (8009820 <getSoundData+0x194>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	b25b      	sxtb	r3, r3
 8009802:	0018      	movs	r0, r3
 8009804:	f7ff ff06 	bl	8009614 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8009808:	2301      	movs	r3, #1
}
 800980a:	0018      	movs	r0, r3
 800980c:	46bd      	mov	sp, r7
 800980e:	b006      	add	sp, #24
 8009810:	bdb0      	pop	{r4, r5, r7, pc}
 8009812:	46c0      	nop			@ (mov r8, r8)
 8009814:	20001269 	.word	0x20001269
 8009818:	2000126c 	.word	0x2000126c
 800981c:	2000126b 	.word	0x2000126b
 8009820:	20001cbc 	.word	0x20001cbc
 8009824:	20001cf8 	.word	0x20001cf8
 8009828:	20001cc0 	.word	0x20001cc0
 800982c:	20001cc4 	.word	0x20001cc4
 8009830:	20001cc8 	.word	0x20001cc8
 8009834:	20001ce0 	.word	0x20001ce0
 8009838:	20001274 	.word	0x20001274
 800983c:	3b5c7333 	.word	0x3b5c7333

08009840 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	001a      	movs	r2, r3
 800984e:	1cfb      	adds	r3, r7, #3
 8009850:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8009852:	4b09      	ldr	r3, [pc, #36]	@ (8009878 <soundInit+0x38>)
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8009858:	4b08      	ldr	r3, [pc, #32]	@ (800987c <soundInit+0x3c>)
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800985e:	4b08      	ldr	r3, [pc, #32]	@ (8009880 <soundInit+0x40>)
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8009864:	4b07      	ldr	r3, [pc, #28]	@ (8009884 <soundInit+0x44>)
 8009866:	2200      	movs	r2, #0
 8009868:	569a      	ldrsb	r2, [r3, r2]
 800986a:	4b06      	ldr	r3, [pc, #24]	@ (8009884 <soundInit+0x44>)
 800986c:	701a      	strb	r2, [r3, #0]

    return true;
 800986e:	2301      	movs	r3, #1
}
 8009870:	0018      	movs	r0, r3
 8009872:	46bd      	mov	sp, r7
 8009874:	b004      	add	sp, #16
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20001cb4 	.word	0x20001cb4
 800987c:	20001cb0 	.word	0x20001cb0
 8009880:	20001cb8 	.word	0x20001cb8
 8009884:	20001cbc 	.word	0x20001cbc

08009888 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800988c:	4b02      	ldr	r3, [pc, #8]	@ (8009898 <clearMaximumAmplitude+0x10>)
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
}
 8009892:	46c0      	nop			@ (mov r8, r8)
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20001274 	.word	0x20001274

0800989c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 80098a0:	4b08      	ldr	r3, [pc, #32]	@ (80098c4 <startMicSettlingPeriod+0x28>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2200      	movs	r2, #0
 80098a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 80098aa:	4b06      	ldr	r3, [pc, #24]	@ (80098c4 <startMicSettlingPeriod+0x28>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	0018      	movs	r0, r3
 80098b0:	f009 f970 	bl	8012b94 <HAL_TIM_Base_Start>
 80098b4:	1e03      	subs	r3, r0, #0
 80098b6:	d001      	beq.n	80098bc <startMicSettlingPeriod+0x20>
    {
        return false;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e000      	b.n	80098be <startMicSettlingPeriod+0x22>
    }
    return true;
 80098bc:	2301      	movs	r3, #1
}
 80098be:	0018      	movs	r0, r3
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20001cb0 	.word	0x20001cb0

080098c8 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 80098ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009908 <micSettlingComplete+0x40>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	2201      	movs	r2, #1
 80098d8:	401a      	ands	r2, r3
 80098da:	1dfb      	adds	r3, r7, #7
 80098dc:	3a01      	subs	r2, #1
 80098de:	4251      	negs	r1, r2
 80098e0:	414a      	adcs	r2, r1
 80098e2:	701a      	strb	r2, [r3, #0]
    if (complete)
 80098e4:	1dfb      	adds	r3, r7, #7
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d007      	beq.n	80098fc <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 80098ec:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <micSettlingComplete+0x40>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	0018      	movs	r0, r3
 80098f2:	f009 f999 	bl	8012c28 <HAL_TIM_Base_Stop>
      DataReady = true;
 80098f6:	4b05      	ldr	r3, [pc, #20]	@ (800990c <micSettlingComplete+0x44>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 80098fc:	1dfb      	adds	r3, r7, #7
 80098fe:	781b      	ldrb	r3, [r3, #0]
}
 8009900:	0018      	movs	r0, r3
 8009902:	46bd      	mov	sp, r7
 8009904:	b002      	add	sp, #8
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20001cb0 	.word	0x20001cb0
 800990c:	20001268 	.word	0x20001268

08009910 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	0002      	movs	r2, r0
 8009918:	1dfb      	adds	r3, r7, #7
 800991a:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800991c:	4b29      	ldr	r3, [pc, #164]	@ (80099c4 <enableMicrophone+0xb4>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	1dfa      	adds	r2, r7, #7
 8009924:	7812      	ldrb	r2, [r2, #0]
 8009926:	429a      	cmp	r2, r3
 8009928:	d101      	bne.n	800992e <enableMicrophone+0x1e>
    {
        return true;
 800992a:	2301      	movs	r3, #1
 800992c:	e045      	b.n	80099ba <enableMicrophone+0xaa>
    }
    if (bEnable)
 800992e:	1dfb      	adds	r3, r7, #7
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d025      	beq.n	8009982 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8009936:	f7ff ffb1 	bl	800989c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800993a:	4b23      	ldr	r3, [pc, #140]	@ (80099c8 <enableMicrophone+0xb8>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2280      	movs	r2, #128	@ 0x80
 8009940:	0092      	lsls	r2, r2, #2
 8009942:	4922      	ldr	r1, [pc, #136]	@ (80099cc <enableMicrophone+0xbc>)
 8009944:	0018      	movs	r0, r3
 8009946:	f005 fd05 	bl	800f354 <HAL_I2S_Receive_DMA>
 800994a:	1e03      	subs	r3, r0, #0
 800994c:	d001      	beq.n	8009952 <enableMicrophone+0x42>
        {
            return false;
 800994e:	2300      	movs	r3, #0
 8009950:	e033      	b.n	80099ba <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8009952:	f7ff ff99 	bl	8009888 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8009956:	4b1e      	ldr	r3, [pc, #120]	@ (80099d0 <enableMicrophone+0xc0>)
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800995c:	4b1d      	ldr	r3, [pc, #116]	@ (80099d4 <enableMicrophone+0xc4>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	b25b      	sxtb	r3, r3
 8009962:	0018      	movs	r0, r3
 8009964:	f7ff fe56 	bl	8009614 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8009968:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <enableMicrophone+0xc8>)
 800996a:	2201      	movs	r2, #1
 800996c:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800996e:	4b15      	ldr	r3, [pc, #84]	@ (80099c4 <enableMicrophone+0xb4>)
 8009970:	2201      	movs	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009974:	4b19      	ldr	r3, [pc, #100]	@ (80099dc <enableMicrophone+0xcc>)
 8009976:	2200      	movs	r2, #0
 8009978:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800997a:	4b19      	ldr	r3, [pc, #100]	@ (80099e0 <enableMicrophone+0xd0>)
 800997c:	2200      	movs	r2, #0
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	e01a      	b.n	80099b8 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009982:	4b14      	ldr	r3, [pc, #80]	@ (80099d4 <enableMicrophone+0xc4>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b25b      	sxtb	r3, r3
 8009988:	0018      	movs	r0, r3
 800998a:	f7ff fe5d 	bl	8009648 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800998e:	4b12      	ldr	r3, [pc, #72]	@ (80099d8 <enableMicrophone+0xc8>)
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009994:	4b11      	ldr	r3, [pc, #68]	@ (80099dc <enableMicrophone+0xcc>)
 8009996:	2200      	movs	r2, #0
 8009998:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800999a:	4b11      	ldr	r3, [pc, #68]	@ (80099e0 <enableMicrophone+0xd0>)
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 80099a0:	4b09      	ldr	r3, [pc, #36]	@ (80099c8 <enableMicrophone+0xb8>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	0018      	movs	r0, r3
 80099a6:	f005 fd97 	bl	800f4d8 <HAL_I2S_DMAStop>
 80099aa:	1e03      	subs	r3, r0, #0
 80099ac:	d001      	beq.n	80099b2 <enableMicrophone+0xa2>
        {
            return false;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e003      	b.n	80099ba <enableMicrophone+0xaa>
        }
        micEnabled = false;
 80099b2:	4b04      	ldr	r3, [pc, #16]	@ (80099c4 <enableMicrophone+0xb4>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	701a      	strb	r2, [r3, #0]
    }
    return true;
 80099b8:	2301      	movs	r3, #1
}
 80099ba:	0018      	movs	r0, r3
 80099bc:	46bd      	mov	sp, r7
 80099be:	b002      	add	sp, #8
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	46c0      	nop			@ (mov r8, r8)
 80099c4:	20001269 	.word	0x20001269
 80099c8:	20001cb4 	.word	0x20001cb4
 80099cc:	200012b0 	.word	0x200012b0
 80099d0:	20001270 	.word	0x20001270
 80099d4:	20001cbc 	.word	0x20001cbc
 80099d8:	2000126b 	.word	0x2000126b
 80099dc:	2000126a 	.word	0x2000126a
 80099e0:	2000126c 	.word	0x2000126c

080099e4 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
    if (!micEnabled)
 80099e8:	4b0c      	ldr	r3, [pc, #48]	@ (8009a1c <startSPLcalculation+0x38>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2201      	movs	r2, #1
 80099f0:	4053      	eors	r3, r2
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <startSPLcalculation+0x18>
    {
        return false;
 80099f8:	2300      	movs	r3, #0
 80099fa:	e00c      	b.n	8009a16 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 80099fc:	4b08      	ldr	r3, [pc, #32]	@ (8009a20 <startSPLcalculation+0x3c>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <startSPLcalculation+0x26>
    {
        return true;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e005      	b.n	8009a16 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8009a0a:	f000 fb63 	bl	800a0d4 <resetSPLstate>
    SPLcalcEnabled = true;
 8009a0e:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <startSPLcalculation+0x3c>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	701a      	strb	r2, [r3, #0]
    return true;
 8009a14:	2301      	movs	r3, #1
}
 8009a16:	0018      	movs	r0, r3
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20001269 	.word	0x20001269
 8009a20:	2000126a 	.word	0x2000126a

08009a24 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d102      	bne.n	8009a3c <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8009a36:	2000      	movs	r0, #0
 8009a38:	f000 f81a 	bl	8009a70 <processHalfDMAbuffer>
  }
}
 8009a3c:	46c0      	nop			@ (mov r8, r8)
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20001cb4 	.word	0x20001cb4

08009a48 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009a50:	4b06      	ldr	r3, [pc, #24]	@ (8009a6c <HAL_I2S_RxCpltCallback+0x24>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d104      	bne.n	8009a64 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8009a5a:	2380      	movs	r3, #128	@ 0x80
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f000 f806 	bl	8009a70 <processHalfDMAbuffer>
  }
}
 8009a64:	46c0      	nop			@ (mov r8, r8)
 8009a66:	46bd      	mov	sp, r7
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	20001cb4 	.word	0x20001cb4

08009a70 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	005a      	lsls	r2, r3, #1
 8009a7c:	4b15      	ldr	r3, [pc, #84]	@ (8009ad4 <processHalfDMAbuffer+0x64>)
 8009a7e:	18d3      	adds	r3, r2, r3
 8009a80:	4a15      	ldr	r2, [pc, #84]	@ (8009ad8 <processHalfDMAbuffer+0x68>)
 8009a82:	2180      	movs	r1, #128	@ 0x80
 8009a84:	0089      	lsls	r1, r1, #2
 8009a86:	0018      	movs	r0, r3
 8009a88:	f000 fd35 	bl	800a4f6 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8009a8c:	4b13      	ldr	r3, [pc, #76]	@ (8009adc <processHalfDMAbuffer+0x6c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	425a      	negs	r2, r3
 8009a92:	4153      	adcs	r3, r2
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	4b11      	ldr	r3, [pc, #68]	@ (8009adc <processHalfDMAbuffer+0x6c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2109      	movs	r1, #9
 8009a9c:	4299      	cmp	r1, r3
 8009a9e:	419b      	sbcs	r3, r3
 8009aa0:	425b      	negs	r3, r3
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	480c      	ldr	r0, [pc, #48]	@ (8009ad8 <processHalfDMAbuffer+0x68>)
 8009aa6:	2180      	movs	r1, #128	@ 0x80
 8009aa8:	f000 fb46 	bl	800a138 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8009aac:	4b0b      	ldr	r3, [pc, #44]	@ (8009adc <processHalfDMAbuffer+0x6c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b09      	cmp	r3, #9
 8009ab2:	d804      	bhi.n	8009abe <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8009ab4:	4b09      	ldr	r3, [pc, #36]	@ (8009adc <processHalfDMAbuffer+0x6c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	4b08      	ldr	r3, [pc, #32]	@ (8009adc <processHalfDMAbuffer+0x6c>)
 8009abc:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8009abe:	4b08      	ldr	r3, [pc, #32]	@ (8009ae0 <processHalfDMAbuffer+0x70>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8009ac8:	f000 f826 	bl	8009b18 <calculateSPLQ31>
    }
}
 8009acc:	46c0      	nop			@ (mov r8, r8)
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b002      	add	sp, #8
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200012b0 	.word	0x200012b0
 8009ad8:	20001ab0 	.word	0x20001ab0
 8009adc:	20001270 	.word	0x20001270
 8009ae0:	2000126a 	.word	0x2000126a

08009ae4 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009aec:	4b07      	ldr	r3, [pc, #28]	@ (8009b0c <HAL_I2S_ErrorCallback+0x28>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d106      	bne.n	8009b04 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8009af6:	4a06      	ldr	r2, [pc, #24]	@ (8009b10 <HAL_I2S_ErrorCallback+0x2c>)
 8009af8:	239f      	movs	r3, #159	@ 0x9f
 8009afa:	0059      	lsls	r1, r3, #1
 8009afc:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <HAL_I2S_ErrorCallback+0x30>)
 8009afe:	0018      	movs	r0, r3
 8009b00:	f001 fdb4 	bl	800b66c <errorHandler>
  }
}
 8009b04:	46c0      	nop			@ (mov r8, r8)
 8009b06:	46bd      	mov	sp, r7
 8009b08:	b002      	add	sp, #8
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20001cb4 	.word	0x20001cb4
 8009b10:	0801fab8 	.word	0x0801fab8
 8009b14:	080200c4 	.word	0x080200c4

08009b18 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8009b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1a:	b0b3      	sub	sp, #204	@ 0xcc
 8009b1c:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8009b1e:	4ae2      	ldr	r2, [pc, #904]	@ (8009ea8 <calculateSPLQ31+0x390>)
 8009b20:	2338      	movs	r3, #56	@ 0x38
 8009b22:	2030      	movs	r0, #48	@ 0x30
 8009b24:	181b      	adds	r3, r3, r0
 8009b26:	19d9      	adds	r1, r3, r7
 8009b28:	2334      	movs	r3, #52	@ 0x34
 8009b2a:	181b      	adds	r3, r3, r0
 8009b2c:	19d8      	adds	r0, r3, r7
 8009b2e:	2380      	movs	r3, #128	@ 0x80
 8009b30:	f000 fc36 	bl	800a3a0 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8009b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da00      	bge.n	8009b3c <calculateSPLQ31+0x24>
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	105b      	asrs	r3, r3, #1
 8009b3e:	001a      	movs	r2, r3
 8009b40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da00      	bge.n	8009b48 <calculateSPLQ31+0x30>
 8009b46:	3301      	adds	r3, #1
 8009b48:	105b      	asrs	r3, r3, #1
 8009b4a:	18d3      	adds	r3, r2, r3
 8009b4c:	2188      	movs	r1, #136	@ 0x88
 8009b4e:	187a      	adds	r2, r7, r1
 8009b50:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8009b52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009b54:	187b      	adds	r3, r7, r1
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	2284      	movs	r2, #132	@ 0x84
 8009b5e:	18b9      	adds	r1, r7, r2
 8009b60:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8009b62:	18bb      	adds	r3, r7, r2
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4ad1      	ldr	r2, [pc, #836]	@ (8009eac <calculateSPLQ31+0x394>)
 8009b68:	0019      	movs	r1, r3
 8009b6a:	0010      	movs	r0, r2
 8009b6c:	f000 fc58 	bl	800a420 <getPo2factor>
 8009b70:	0003      	movs	r3, r0
 8009b72:	2280      	movs	r2, #128	@ 0x80
 8009b74:	18ba      	adds	r2, r7, r2
 8009b76:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	2284      	movs	r2, #132	@ 0x84
 8009b7c:	2130      	movs	r1, #48	@ 0x30
 8009b7e:	1852      	adds	r2, r2, r1
 8009b80:	19d2      	adds	r2, r2, r7
 8009b82:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009b84:	2300      	movs	r3, #0
 8009b86:	2280      	movs	r2, #128	@ 0x80
 8009b88:	1852      	adds	r2, r2, r1
 8009b8a:	19d2      	adds	r2, r2, r7
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	e032      	b.n	8009bf6 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8009b90:	4ac5      	ldr	r2, [pc, #788]	@ (8009ea8 <calculateSPLQ31+0x390>)
 8009b92:	2680      	movs	r6, #128	@ 0x80
 8009b94:	2330      	movs	r3, #48	@ 0x30
 8009b96:	18f1      	adds	r1, r6, r3
 8009b98:	19cb      	adds	r3, r1, r7
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	589a      	ldr	r2, [r3, r2]
 8009ba0:	2188      	movs	r1, #136	@ 0x88
 8009ba2:	1879      	adds	r1, r7, r1
 8009ba4:	680b      	ldr	r3, [r1, #0]
 8009ba6:	1ad2      	subs	r2, r2, r3
 8009ba8:	2180      	movs	r1, #128	@ 0x80
 8009baa:	1879      	adds	r1, r7, r1
 8009bac:	680b      	ldr	r3, [r1, #0]
 8009bae:	409a      	lsls	r2, r3
 8009bb0:	0011      	movs	r1, r2
 8009bb2:	4abf      	ldr	r2, [pc, #764]	@ (8009eb0 <calculateSPLQ31+0x398>)
 8009bb4:	2084      	movs	r0, #132	@ 0x84
 8009bb6:	2330      	movs	r3, #48	@ 0x30
 8009bb8:	18c3      	adds	r3, r0, r3
 8009bba:	19db      	adds	r3, r3, r7
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8009bc2:	2230      	movs	r2, #48	@ 0x30
 8009bc4:	1883      	adds	r3, r0, r2
 8009bc6:	19db      	adds	r3, r3, r7
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	49b8      	ldr	r1, [pc, #736]	@ (8009eb0 <calculateSPLQ31+0x398>)
 8009bce:	009a      	lsls	r2, r3, #2
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	5053      	str	r3, [r2, r1]
        count += 2;
 8009bd4:	2230      	movs	r2, #48	@ 0x30
 8009bd6:	1883      	adds	r3, r0, r2
 8009bd8:	19db      	adds	r3, r3, r7
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3302      	adds	r3, #2
 8009bde:	0011      	movs	r1, r2
 8009be0:	1882      	adds	r2, r0, r2
 8009be2:	19d2      	adds	r2, r2, r7
 8009be4:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009be6:	000a      	movs	r2, r1
 8009be8:	18b3      	adds	r3, r6, r2
 8009bea:	19db      	adds	r3, r3, r7
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	18b2      	adds	r2, r6, r2
 8009bf2:	19d2      	adds	r2, r2, r7
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	2380      	movs	r3, #128	@ 0x80
 8009bf8:	2630      	movs	r6, #48	@ 0x30
 8009bfa:	199b      	adds	r3, r3, r6
 8009bfc:	19db      	adds	r3, r3, r7
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c02:	d9c5      	bls.n	8009b90 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8009c04:	4bab      	ldr	r3, [pc, #684]	@ (8009eb4 <calculateSPLQ31+0x39c>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	49a9      	ldr	r1, [pc, #676]	@ (8009eb0 <calculateSPLQ31+0x398>)
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f00f fd9b 	bl	8019748 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8009c12:	4aa9      	ldr	r2, [pc, #676]	@ (8009eb8 <calculateSPLQ31+0x3a0>)
 8009c14:	2338      	movs	r3, #56	@ 0x38
 8009c16:	199b      	adds	r3, r3, r6
 8009c18:	19d9      	adds	r1, r3, r7
 8009c1a:	2334      	movs	r3, #52	@ 0x34
 8009c1c:	199b      	adds	r3, r3, r6
 8009c1e:	19d8      	adds	r0, r3, r7
 8009c20:	237e      	movs	r3, #126	@ 0x7e
 8009c22:	f000 fbbd 	bl	800a3a0 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8009c26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009c28:	2380      	movs	r3, #128	@ 0x80
 8009c2a:	061b      	lsls	r3, r3, #24
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d101      	bne.n	8009c34 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8009c30:	4b9e      	ldr	r3, [pc, #632]	@ (8009eac <calculateSPLQ31+0x394>)
 8009c32:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8009c34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c36:	2380      	movs	r3, #128	@ 0x80
 8009c38:	061b      	lsls	r3, r3, #24
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d101      	bne.n	8009c42 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8009c3e:	4b9b      	ldr	r3, [pc, #620]	@ (8009eac <calculateSPLQ31+0x394>)
 8009c40:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8009c42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c44:	17da      	asrs	r2, r3, #31
 8009c46:	189b      	adds	r3, r3, r2
 8009c48:	4053      	eors	r3, r2
 8009c4a:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8009c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c4e:	17da      	asrs	r2, r3, #31
 8009c50:	189b      	adds	r3, r3, r2
 8009c52:	4053      	eors	r3, r2
 8009c54:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8009c56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009c58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	dd01      	ble.n	8009c62 <calculateSPLQ31+0x14a>
    {
        max = min;
 8009c5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c60:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8009c62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c64:	3304      	adds	r3, #4
 8009c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8009c68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c6a:	4a90      	ldr	r2, [pc, #576]	@ (8009eac <calculateSPLQ31+0x394>)
 8009c6c:	0019      	movs	r1, r3
 8009c6e:	0010      	movs	r0, r2
 8009c70:	f000 fbd6 	bl	800a420 <getPo2factor>
 8009c74:	0003      	movs	r3, r0
 8009c76:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8009c78:	2302      	movs	r3, #2
 8009c7a:	22ac      	movs	r2, #172	@ 0xac
 8009c7c:	18ba      	adds	r2, r7, r2
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	e012      	b.n	8009ca8 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8009c82:	4a8b      	ldr	r2, [pc, #556]	@ (8009eb0 <calculateSPLQ31+0x398>)
 8009c84:	20ac      	movs	r0, #172	@ 0xac
 8009c86:	183b      	adds	r3, r7, r0
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	589a      	ldr	r2, [r3, r2]
 8009c8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c90:	409a      	lsls	r2, r3
 8009c92:	0011      	movs	r1, r2
 8009c94:	4a86      	ldr	r2, [pc, #536]	@ (8009eb0 <calculateSPLQ31+0x398>)
 8009c96:	183b      	adds	r3, r7, r0
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8009c9e:	183b      	adds	r3, r7, r0
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	183a      	adds	r2, r7, r0
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	23ac      	movs	r3, #172	@ 0xac
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cb0:	d9e7      	bls.n	8009c82 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8009cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8009ea8 <calculateSPLQ31+0x390>)
 8009cb4:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8009cb6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8009eb0 <calculateSPLQ31+0x398>)
 8009cba:	2240      	movs	r2, #64	@ 0x40
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	f010 faed 	bl	801a29c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8009cc2:	2330      	movs	r3, #48	@ 0x30
 8009cc4:	18fb      	adds	r3, r7, r3
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	2330      	movs	r3, #48	@ 0x30
 8009cca:	001a      	movs	r2, r3
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f012 f809 	bl	801bce4 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	21a0      	movs	r1, #160	@ 0xa0
 8009cd8:	1879      	adds	r1, r7, r1
 8009cda:	600a      	str	r2, [r1, #0]
 8009cdc:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009cde:	2301      	movs	r3, #1
 8009ce0:	229c      	movs	r2, #156	@ 0x9c
 8009ce2:	18ba      	adds	r2, r7, r2
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	e05b      	b.n	8009da0 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8009ce8:	269c      	movs	r6, #156	@ 0x9c
 8009cea:	19bb      	adds	r3, r7, r6
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	009a      	lsls	r2, r3, #2
 8009cf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cf2:	189b      	adds	r3, r3, r2
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	613b      	str	r3, [r7, #16]
 8009cf8:	17db      	asrs	r3, r3, #31
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8009ebc <calculateSPLQ31+0x3a4>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	19bb      	adds	r3, r7, r6
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	18d3      	adds	r3, r2, r3
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	60bb      	str	r3, [r7, #8]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6938      	ldr	r0, [r7, #16]
 8009d16:	6979      	ldr	r1, [r7, #20]
 8009d18:	f7f6 fc52 	bl	80005c0 <__aeabi_lmul>
 8009d1c:	0002      	movs	r2, r0
 8009d1e:	000b      	movs	r3, r1
 8009d20:	0010      	movs	r0, r2
 8009d22:	0019      	movs	r1, r3
 8009d24:	23a0      	movs	r3, #160	@ 0xa0
 8009d26:	18fa      	adds	r2, r7, r3
 8009d28:	6853      	ldr	r3, [r2, #4]
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	1812      	adds	r2, r2, r0
 8009d2e:	414b      	adcs	r3, r1
 8009d30:	21a0      	movs	r1, #160	@ 0xa0
 8009d32:	1879      	adds	r1, r7, r1
 8009d34:	600a      	str	r2, [r1, #0]
 8009d36:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8009d38:	4b61      	ldr	r3, [pc, #388]	@ (8009ec0 <calculateSPLQ31+0x3a8>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	19bb      	adds	r3, r7, r6
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	18d3      	adds	r3, r2, r3
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b06      	cmp	r3, #6
 8009d46:	d025      	beq.n	8009d94 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8009d48:	4b5d      	ldr	r3, [pc, #372]	@ (8009ec0 <calculateSPLQ31+0x3a8>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	19bb      	adds	r3, r7, r6
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	18d3      	adds	r3, r2, r3
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2230      	movs	r2, #48	@ 0x30
 8009d56:	18ba      	adds	r2, r7, r2
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	18d3      	adds	r3, r2, r3
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	6859      	ldr	r1, [r3, #4]
 8009d60:	19bb      	adds	r3, r7, r6
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	009a      	lsls	r2, r3, #2
 8009d66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d68:	189b      	adds	r3, r3, r2
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	603b      	str	r3, [r7, #0]
 8009d6e:	17db      	asrs	r3, r3, #31
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	4b53      	ldr	r3, [pc, #332]	@ (8009ec0 <calculateSPLQ31+0x3a8>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	19be      	adds	r6, r7, r6
 8009d78:	6833      	ldr	r3, [r6, #0]
 8009d7a:	18d3      	adds	r3, r2, r3
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	001e      	movs	r6, r3
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	1880      	adds	r0, r0, r2
 8009d86:	4159      	adcs	r1, r3
 8009d88:	2330      	movs	r3, #48	@ 0x30
 8009d8a:	18fa      	adds	r2, r7, r3
 8009d8c:	00f3      	lsls	r3, r6, #3
 8009d8e:	18d3      	adds	r3, r2, r3
 8009d90:	6018      	str	r0, [r3, #0]
 8009d92:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009d94:	229c      	movs	r2, #156	@ 0x9c
 8009d96:	18bb      	adds	r3, r7, r2
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	18ba      	adds	r2, r7, r2
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	239c      	movs	r3, #156	@ 0x9c
 8009da2:	18fb      	adds	r3, r7, r3
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b3f      	cmp	r3, #63	@ 0x3f
 8009da8:	d99e      	bls.n	8009ce8 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8009daa:	2380      	movs	r3, #128	@ 0x80
 8009dac:	18fb      	adds	r3, r7, r3
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	001a      	movs	r2, r3
 8009db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	18d3      	adds	r3, r2, r3
 8009dba:	3b22      	subs	r3, #34	@ 0x22
 8009dbc:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8009dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dc0:	17da      	asrs	r2, r3, #31
 8009dc2:	189b      	adds	r3, r3, r2
 8009dc4:	4053      	eors	r3, r2
 8009dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8009dc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	da62      	bge.n	8009e94 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8009dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd0:	3b20      	subs	r3, #32
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	db05      	blt.n	8009de2 <calculateSPLQ31+0x2ca>
 8009dd6:	22a0      	movs	r2, #160	@ 0xa0
 8009dd8:	18ba      	adds	r2, r7, r2
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	409a      	lsls	r2, r3
 8009dde:	627a      	str	r2, [r7, #36]	@ 0x24
 8009de0:	e010      	b.n	8009e04 <calculateSPLQ31+0x2ec>
 8009de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de4:	2220      	movs	r2, #32
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	22a0      	movs	r2, #160	@ 0xa0
 8009dea:	18ba      	adds	r2, r7, r2
 8009dec:	6812      	ldr	r2, [r2, #0]
 8009dee:	40da      	lsrs	r2, r3
 8009df0:	0013      	movs	r3, r2
 8009df2:	22a4      	movs	r2, #164	@ 0xa4
 8009df4:	18ba      	adds	r2, r7, r2
 8009df6:	6811      	ldr	r1, [r2, #0]
 8009df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009dfa:	4091      	lsls	r1, r2
 8009dfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e00:	431a      	orrs	r2, r3
 8009e02:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e04:	21a0      	movs	r1, #160	@ 0xa0
 8009e06:	187b      	adds	r3, r7, r1
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e0c:	409a      	lsls	r2, r3
 8009e0e:	623a      	str	r2, [r7, #32]
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8009e14:	187a      	adds	r2, r7, r1
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2298      	movs	r2, #152	@ 0x98
 8009e1e:	18ba      	adds	r2, r7, r2
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	e031      	b.n	8009e88 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8009e24:	2330      	movs	r3, #48	@ 0x30
 8009e26:	18fa      	adds	r2, r7, r3
 8009e28:	2398      	movs	r3, #152	@ 0x98
 8009e2a:	18fb      	adds	r3, r7, r3
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	18d3      	adds	r3, r2, r3
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009e38:	3920      	subs	r1, #32
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	db03      	blt.n	8009e46 <calculateSPLQ31+0x32e>
 8009e3e:	0010      	movs	r0, r2
 8009e40:	4088      	lsls	r0, r1
 8009e42:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009e44:	e00c      	b.n	8009e60 <calculateSPLQ31+0x348>
 8009e46:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009e48:	2020      	movs	r0, #32
 8009e4a:	1a41      	subs	r1, r0, r1
 8009e4c:	0010      	movs	r0, r2
 8009e4e:	40c8      	lsrs	r0, r1
 8009e50:	0001      	movs	r1, r0
 8009e52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e54:	001c      	movs	r4, r3
 8009e56:	4084      	lsls	r4, r0
 8009e58:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8009e5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e5c:	4308      	orrs	r0, r1
 8009e5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009e60:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009e62:	0013      	movs	r3, r2
 8009e64:	408b      	lsls	r3, r1
 8009e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e68:	2330      	movs	r3, #48	@ 0x30
 8009e6a:	18fa      	adds	r2, r7, r3
 8009e6c:	2098      	movs	r0, #152	@ 0x98
 8009e6e:	183b      	adds	r3, r7, r0
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	18d3      	adds	r3, r2, r3
 8009e76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e7a:	6019      	str	r1, [r3, #0]
 8009e7c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009e7e:	183b      	adds	r3, r7, r0
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	183a      	adds	r2, r7, r0
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	2398      	movs	r3, #152	@ 0x98
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b05      	cmp	r3, #5
 8009e90:	d9c8      	bls.n	8009e24 <calculateSPLQ31+0x30c>
 8009e92:	e06b      	b.n	8009f6c <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8009e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e96:	3b20      	subs	r3, #32
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	db13      	blt.n	8009ec4 <calculateSPLQ31+0x3ac>
 8009e9c:	22a4      	movs	r2, #164	@ 0xa4
 8009e9e:	18ba      	adds	r2, r7, r2
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	40da      	lsrs	r2, r3
 8009ea4:	61ba      	str	r2, [r7, #24]
 8009ea6:	e01e      	b.n	8009ee6 <calculateSPLQ31+0x3ce>
 8009ea8:	20001ab0 	.word	0x20001ab0
 8009eac:	7fffffff 	.word	0x7fffffff
 8009eb0:	20001cfc 	.word	0x20001cfc
 8009eb4:	200000b0 	.word	0x200000b0
 8009eb8:	20001d04 	.word	0x20001d04
 8009ebc:	200000b4 	.word	0x200000b4
 8009ec0:	200000c0 	.word	0x200000c0
 8009ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	22a4      	movs	r2, #164	@ 0xa4
 8009ecc:	18ba      	adds	r2, r7, r2
 8009ece:	6812      	ldr	r2, [r2, #0]
 8009ed0:	409a      	lsls	r2, r3
 8009ed2:	0013      	movs	r3, r2
 8009ed4:	22a0      	movs	r2, #160	@ 0xa0
 8009ed6:	18ba      	adds	r2, r7, r2
 8009ed8:	6811      	ldr	r1, [r2, #0]
 8009eda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009edc:	40d1      	lsrs	r1, r2
 8009ede:	61b9      	str	r1, [r7, #24]
 8009ee0:	69ba      	ldr	r2, [r7, #24]
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	61ba      	str	r2, [r7, #24]
 8009ee6:	23a4      	movs	r3, #164	@ 0xa4
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eee:	40da      	lsrs	r2, r3
 8009ef0:	61fa      	str	r2, [r7, #28]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	21a0      	movs	r1, #160	@ 0xa0
 8009ef8:	1879      	adds	r1, r7, r1
 8009efa:	600a      	str	r2, [r1, #0]
 8009efc:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009efe:	2300      	movs	r3, #0
 8009f00:	2294      	movs	r2, #148	@ 0x94
 8009f02:	18ba      	adds	r2, r7, r2
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	e02c      	b.n	8009f62 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8009f08:	2330      	movs	r3, #48	@ 0x30
 8009f0a:	18fa      	adds	r2, r7, r3
 8009f0c:	2394      	movs	r3, #148	@ 0x94
 8009f0e:	18fb      	adds	r3, r7, r3
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	18d3      	adds	r3, r2, r3
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009f1c:	3920      	subs	r1, #32
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	db03      	blt.n	8009f2a <calculateSPLQ31+0x412>
 8009f22:	0018      	movs	r0, r3
 8009f24:	40c8      	lsrs	r0, r1
 8009f26:	0004      	movs	r4, r0
 8009f28:	e00a      	b.n	8009f40 <calculateSPLQ31+0x428>
 8009f2a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009f2c:	2020      	movs	r0, #32
 8009f2e:	1a41      	subs	r1, r0, r1
 8009f30:	0018      	movs	r0, r3
 8009f32:	4088      	lsls	r0, r1
 8009f34:	0001      	movs	r1, r0
 8009f36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f38:	0016      	movs	r6, r2
 8009f3a:	40c6      	lsrs	r6, r0
 8009f3c:	0034      	movs	r4, r6
 8009f3e:	430c      	orrs	r4, r1
 8009f40:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009f42:	40cb      	lsrs	r3, r1
 8009f44:	001d      	movs	r5, r3
 8009f46:	2330      	movs	r3, #48	@ 0x30
 8009f48:	18fa      	adds	r2, r7, r3
 8009f4a:	2194      	movs	r1, #148	@ 0x94
 8009f4c:	187b      	adds	r3, r7, r1
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	18d3      	adds	r3, r2, r3
 8009f54:	601c      	str	r4, [r3, #0]
 8009f56:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009f58:	187b      	adds	r3, r7, r1
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	187a      	adds	r2, r7, r1
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	2394      	movs	r3, #148	@ 0x94
 8009f64:	18fb      	adds	r3, r7, r3
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b05      	cmp	r3, #5
 8009f6a:	d9cd      	bls.n	8009f08 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8009f6c:	230f      	movs	r3, #15
 8009f6e:	425d      	negs	r5, r3
 8009f70:	2305      	movs	r3, #5
 8009f72:	425e      	negs	r6, r3
 8009f74:	4b4a      	ldr	r3, [pc, #296]	@ (800a0a0 <calculateSPLQ31+0x588>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	4b4a      	ldr	r3, [pc, #296]	@ (800a0a4 <calculateSPLQ31+0x58c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	21a0      	movs	r1, #160	@ 0xa0
 8009f82:	1879      	adds	r1, r7, r1
 8009f84:	6808      	ldr	r0, [r1, #0]
 8009f86:	6849      	ldr	r1, [r1, #4]
 8009f88:	4c47      	ldr	r4, [pc, #284]	@ (800a0a8 <calculateSPLQ31+0x590>)
 8009f8a:	9403      	str	r4, [sp, #12]
 8009f8c:	4c47      	ldr	r4, [pc, #284]	@ (800a0ac <calculateSPLQ31+0x594>)
 8009f8e:	9402      	str	r4, [sp, #8]
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	9200      	str	r2, [sp, #0]
 8009f94:	0033      	movs	r3, r6
 8009f96:	002a      	movs	r2, r5
 8009f98:	f000 fa86 	bl	800a4a8 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2290      	movs	r2, #144	@ 0x90
 8009fa0:	18ba      	adds	r2, r7, r2
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	e026      	b.n	8009ff4 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8009fa6:	2330      	movs	r3, #48	@ 0x30
 8009fa8:	18fa      	adds	r2, r7, r3
 8009faa:	2490      	movs	r4, #144	@ 0x90
 8009fac:	193b      	adds	r3, r7, r4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	18d3      	adds	r3, r2, r3
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	6859      	ldr	r1, [r3, #4]
 8009fb8:	230f      	movs	r3, #15
 8009fba:	425d      	negs	r5, r3
 8009fbc:	2305      	movs	r3, #5
 8009fbe:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8009fc0:	193b      	adds	r3, r7, r4
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	009a      	lsls	r2, r3, #2
 8009fc6:	4b3a      	ldr	r3, [pc, #232]	@ (800a0b0 <calculateSPLQ31+0x598>)
 8009fc8:	18d3      	adds	r3, r2, r3
 8009fca:	193a      	adds	r2, r7, r4
 8009fcc:	6812      	ldr	r2, [r2, #0]
 8009fce:	0094      	lsls	r4, r2, #2
 8009fd0:	4a38      	ldr	r2, [pc, #224]	@ (800a0b4 <calculateSPLQ31+0x59c>)
 8009fd2:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8009fd4:	9203      	str	r2, [sp, #12]
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	0033      	movs	r3, r6
 8009fe2:	002a      	movs	r2, r5
 8009fe4:	f000 fa60 	bl	800a4a8 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8009fe8:	2490      	movs	r4, #144	@ 0x90
 8009fea:	193b      	adds	r3, r7, r4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	193a      	adds	r2, r7, r4
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	2390      	movs	r3, #144	@ 0x90
 8009ff6:	18fb      	adds	r3, r7, r3
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	d9d3      	bls.n	8009fa6 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8009ffe:	4b2b      	ldr	r3, [pc, #172]	@ (800a0ac <calculateSPLQ31+0x594>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b2d      	ldr	r3, [pc, #180]	@ (800a0b8 <calculateSPLQ31+0x5a0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	18d2      	adds	r2, r2, r3
 800a008:	4b2b      	ldr	r3, [pc, #172]	@ (800a0b8 <calculateSPLQ31+0x5a0>)
 800a00a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800a00c:	4b26      	ldr	r3, [pc, #152]	@ (800a0a8 <calculateSPLQ31+0x590>)
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	4b2a      	ldr	r3, [pc, #168]	@ (800a0bc <calculateSPLQ31+0x5a4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	18d2      	adds	r2, r2, r3
 800a016:	4b29      	ldr	r3, [pc, #164]	@ (800a0bc <calculateSPLQ31+0x5a4>)
 800a018:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a01a:	2300      	movs	r3, #0
 800a01c:	228c      	movs	r2, #140	@ 0x8c
 800a01e:	18ba      	adds	r2, r7, r2
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	e025      	b.n	800a070 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800a024:	4b22      	ldr	r3, [pc, #136]	@ (800a0b0 <calculateSPLQ31+0x598>)
 800a026:	208c      	movs	r0, #140	@ 0x8c
 800a028:	183a      	adds	r2, r7, r0
 800a02a:	6812      	ldr	r2, [r2, #0]
 800a02c:	0092      	lsls	r2, r2, #2
 800a02e:	58d2      	ldr	r2, [r2, r3]
 800a030:	4b23      	ldr	r3, [pc, #140]	@ (800a0c0 <calculateSPLQ31+0x5a8>)
 800a032:	1839      	adds	r1, r7, r0
 800a034:	6809      	ldr	r1, [r1, #0]
 800a036:	0089      	lsls	r1, r1, #2
 800a038:	58cb      	ldr	r3, [r1, r3]
 800a03a:	18d1      	adds	r1, r2, r3
 800a03c:	4b20      	ldr	r3, [pc, #128]	@ (800a0c0 <calculateSPLQ31+0x5a8>)
 800a03e:	183a      	adds	r2, r7, r0
 800a040:	6812      	ldr	r2, [r2, #0]
 800a042:	0092      	lsls	r2, r2, #2
 800a044:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800a046:	4b1b      	ldr	r3, [pc, #108]	@ (800a0b4 <calculateSPLQ31+0x59c>)
 800a048:	183a      	adds	r2, r7, r0
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	0092      	lsls	r2, r2, #2
 800a04e:	58d2      	ldr	r2, [r2, r3]
 800a050:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c4 <calculateSPLQ31+0x5ac>)
 800a052:	1839      	adds	r1, r7, r0
 800a054:	6809      	ldr	r1, [r1, #0]
 800a056:	0089      	lsls	r1, r1, #2
 800a058:	58cb      	ldr	r3, [r1, r3]
 800a05a:	18d1      	adds	r1, r2, r3
 800a05c:	4b19      	ldr	r3, [pc, #100]	@ (800a0c4 <calculateSPLQ31+0x5ac>)
 800a05e:	183a      	adds	r2, r7, r0
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	0092      	lsls	r2, r2, #2
 800a064:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a066:	183b      	adds	r3, r7, r0
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	183a      	adds	r2, r7, r0
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	238c      	movs	r3, #140	@ 0x8c
 800a072:	18fb      	adds	r3, r7, r3
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b05      	cmp	r3, #5
 800a078:	d9d4      	bls.n	800a024 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800a07a:	4b13      	ldr	r3, [pc, #76]	@ (800a0c8 <calculateSPLQ31+0x5b0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	4b11      	ldr	r3, [pc, #68]	@ (800a0c8 <calculateSPLQ31+0x5b0>)
 800a082:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800a084:	4b10      	ldr	r3, [pc, #64]	@ (800a0c8 <calculateSPLQ31+0x5b0>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b0f      	cmp	r3, #15
 800a08a:	d905      	bls.n	800a098 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800a08c:	4b0f      	ldr	r3, [pc, #60]	@ (800a0cc <calculateSPLQ31+0x5b4>)
 800a08e:	2201      	movs	r2, #1
 800a090:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800a092:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d0 <calculateSPLQ31+0x5b8>)
 800a094:	2200      	movs	r2, #0
 800a096:	701a      	strb	r2, [r3, #0]
    }
}
 800a098:	46c0      	nop			@ (mov r8, r8)
 800a09a:	46bd      	mov	sp, r7
 800a09c:	b02f      	add	sp, #188	@ 0xbc
 800a09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a0:	200000b8 	.word	0x200000b8
 800a0a4:	200000bc 	.word	0x200000bc
 800a0a8:	2000127c 	.word	0x2000127c
 800a0ac:	20001278 	.word	0x20001278
 800a0b0:	20001280 	.word	0x20001280
 800a0b4:	20001298 	.word	0x20001298
 800a0b8:	20001cc0 	.word	0x20001cc0
 800a0bc:	20001cc4 	.word	0x20001cc4
 800a0c0:	20001cc8 	.word	0x20001cc8
 800a0c4:	20001ce0 	.word	0x20001ce0
 800a0c8:	20001cf8 	.word	0x20001cf8
 800a0cc:	2000126c 	.word	0x2000126c
 800a0d0:	2000126a 	.word	0x2000126a

0800a0d4 <resetSPLstate>:

static void resetSPLstate(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800a0da:	4b11      	ldr	r3, [pc, #68]	@ (800a120 <resetSPLstate+0x4c>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800a0e0:	4b10      	ldr	r3, [pc, #64]	@ (800a124 <resetSPLstate+0x50>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800a0e6:	4b10      	ldr	r3, [pc, #64]	@ (800a128 <resetSPLstate+0x54>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	607b      	str	r3, [r7, #4]
 800a0f0:	e00c      	b.n	800a10c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a12c <resetSPLstate+0x58>)
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	0092      	lsls	r2, r2, #2
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800a0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <resetSPLstate+0x5c>)
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	0092      	lsls	r2, r2, #2
 800a102:	2100      	movs	r1, #0
 800a104:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3301      	adds	r3, #1
 800a10a:	607b      	str	r3, [r7, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b05      	cmp	r3, #5
 800a110:	d9ef      	bls.n	800a0f2 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800a112:	4b08      	ldr	r3, [pc, #32]	@ (800a134 <resetSPLstate+0x60>)
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]
}
 800a118:	46c0      	nop			@ (mov r8, r8)
 800a11a:	46bd      	mov	sp, r7
 800a11c:	b002      	add	sp, #8
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20001cc0 	.word	0x20001cc0
 800a124:	20001cc4 	.word	0x20001cc4
 800a128:	20001cf8 	.word	0x20001cf8
 800a12c:	20001cc8 	.word	0x20001cc8
 800a130:	20001ce0 	.word	0x20001ce0
 800a134:	2000126c 	.word	0x2000126c

0800a138 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800a138:	b5b0      	push	{r4, r5, r7, lr}
 800a13a:	b090      	sub	sp, #64	@ 0x40
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	0019      	movs	r1, r3
 800a144:	1dfb      	adds	r3, r7, #7
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	1dbb      	adds	r3, r7, #6
 800a14a:	1c0a      	adds	r2, r1, #0
 800a14c:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800a14e:	1dfb      	adds	r3, r7, #7
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800a156:	4b3b      	ldr	r3, [pc, #236]	@ (800a244 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800a15c:	4b3a      	ldr	r3, [pc, #232]	@ (800a248 <getFilteredMaxAmplitudeQ31+0x110>)
 800a15e:	2200      	movs	r2, #0
 800a160:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800a16a:	2305      	movs	r3, #5
 800a16c:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800a16e:	2300      	movs	r3, #0
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
 800a172:	e040      	b.n	800a1f6 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800a174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	18d3      	adds	r3, r2, r3
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	409a      	lsls	r2, r3
 800a182:	0013      	movs	r3, r2
 800a184:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800a186:	4b30      	ldr	r3, [pc, #192]	@ (800a248 <getFilteredMaxAmplitudeQ31+0x110>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	425a      	negs	r2, r3
 800a18c:	4b2e      	ldr	r3, [pc, #184]	@ (800a248 <getFilteredMaxAmplitudeQ31+0x110>)
 800a18e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800a190:	2418      	movs	r4, #24
 800a192:	193a      	adds	r2, r7, r4
 800a194:	492c      	ldr	r1, [pc, #176]	@ (800a248 <getFilteredMaxAmplitudeQ31+0x110>)
 800a196:	231c      	movs	r3, #28
 800a198:	18f8      	adds	r0, r7, r3
 800a19a:	2301      	movs	r3, #1
 800a19c:	f010 f8d6 	bl	801a34c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800a1a0:	2514      	movs	r5, #20
 800a1a2:	197a      	adds	r2, r7, r5
 800a1a4:	1939      	adds	r1, r7, r4
 800a1a6:	4829      	ldr	r0, [pc, #164]	@ (800a24c <getFilteredMaxAmplitudeQ31+0x114>)
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	f010 f89d 	bl	801a2e8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800a1ae:	2410      	movs	r4, #16
 800a1b0:	193a      	adds	r2, r7, r4
 800a1b2:	4924      	ldr	r1, [pc, #144]	@ (800a244 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a1b4:	4826      	ldr	r0, [pc, #152]	@ (800a250 <getFilteredMaxAmplitudeQ31+0x118>)
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	f010 f896 	bl	801a2e8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800a1bc:	4a21      	ldr	r2, [pc, #132]	@ (800a244 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a1be:	1939      	adds	r1, r7, r4
 800a1c0:	1978      	adds	r0, r7, r5
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f010 f8c2 	bl	801a34c <arm_add_q31>

        lastData = fx;
 800a1c8:	69fa      	ldr	r2, [r7, #28]
 800a1ca:	4b1f      	ldr	r3, [pc, #124]	@ (800a248 <getFilteredMaxAmplitudeQ31+0x110>)
 800a1cc:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800a1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800a244 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	da03      	bge.n	800a1e0 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800a1d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a244 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1de:	e007      	b.n	800a1f0 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800a1e0:	4b18      	ldr	r3, [pc, #96]	@ (800a244 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	dd02      	ble.n	800a1f0 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800a1ea:	4b16      	ldr	r3, [pc, #88]	@ (800a244 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d3ba      	bcc.n	800a174 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	17da      	asrs	r2, r3, #31
 800a202:	189b      	adds	r3, r3, r2
 800a204:	4053      	eors	r3, r2
 800a206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800a208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a20a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800a20c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	4293      	cmp	r3, r2
 800a212:	d200      	bcs.n	800a216 <getFilteredMaxAmplitudeQ31+0xde>
 800a214:	0013      	movs	r3, r2
 800a216:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800a218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	40da      	lsrs	r2, r3
 800a21e:	0013      	movs	r3, r2
 800a220:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800a222:	1dbb      	adds	r3, r7, #6
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <getFilteredMaxAmplitudeQ31+0x102>
 800a22a:	4b0a      	ldr	r3, [pc, #40]	@ (800a254 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6a3a      	ldr	r2, [r7, #32]
 800a230:	429a      	cmp	r2, r3
 800a232:	d902      	bls.n	800a23a <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800a234:	4b07      	ldr	r3, [pc, #28]	@ (800a254 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a236:	6a3a      	ldr	r2, [r7, #32]
 800a238:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800a23a:	6a3b      	ldr	r3, [r7, #32]
}
 800a23c:	0018      	movs	r0, r3
 800a23e:	46bd      	mov	sp, r7
 800a240:	b010      	add	sp, #64	@ 0x40
 800a242:	bdb0      	pop	{r4, r5, r7, pc}
 800a244:	200020fc 	.word	0x200020fc
 800a248:	20002100 	.word	0x20002100
 800a24c:	080200bc 	.word	0x080200bc
 800a250:	080200c0 	.word	0x080200c0
 800a254:	20001274 	.word	0x20001274

0800a258 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800a264:	4913      	ldr	r1, [pc, #76]	@ (800a2b4 <floatToIntAndFrac2dp+0x5c>)
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7f6 fe9a 	bl	8000fa0 <__aeabi_fmul>
 800a26c:	1c03      	adds	r3, r0, #0
 800a26e:	1c18      	adds	r0, r3, #0
 800a270:	f014 fc42 	bl	801eaf8 <roundf>
 800a274:	1c03      	adds	r3, r0, #0
 800a276:	1c18      	adds	r0, r3, #0
 800a278:	f7f6 f9d0 	bl	800061c <__aeabi_f2uiz>
 800a27c:	0003      	movs	r3, r0
 800a27e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2164      	movs	r1, #100	@ 0x64
 800a284:	0018      	movs	r0, r3
 800a286:	f7f5 ff8d 	bl	80001a4 <__udivsi3>
 800a28a:	0003      	movs	r3, r0
 800a28c:	001a      	movs	r2, r3
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	b2da      	uxtb	r2, r3
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2164      	movs	r1, #100	@ 0x64
 800a29e:	434b      	muls	r3, r1
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	701a      	strb	r2, [r3, #0]
}
 800a2aa:	46c0      	nop			@ (mov r8, r8)
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	b006      	add	sp, #24
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	46c0      	nop			@ (mov r8, r8)
 800a2b4:	42c80000 	.word	0x42c80000

0800a2b8 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800a2c4:	4914      	ldr	r1, [pc, #80]	@ (800a318 <floatToIntAndFrac1dp+0x60>)
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7f6 fe6a 	bl	8000fa0 <__aeabi_fmul>
 800a2cc:	1c03      	adds	r3, r0, #0
 800a2ce:	1c18      	adds	r0, r3, #0
 800a2d0:	f014 fc12 	bl	801eaf8 <roundf>
 800a2d4:	1c03      	adds	r3, r0, #0
 800a2d6:	1c18      	adds	r0, r3, #0
 800a2d8:	f7f6 f9a0 	bl	800061c <__aeabi_f2uiz>
 800a2dc:	0003      	movs	r3, r0
 800a2de:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	210a      	movs	r1, #10
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f7f5 ff5d 	bl	80001a4 <__udivsi3>
 800a2ea:	0003      	movs	r3, r0
 800a2ec:	001a      	movs	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	1c19      	adds	r1, r3, #0
 800a2fe:	0089      	lsls	r1, r1, #2
 800a300:	18cb      	adds	r3, r1, r3
 800a302:	18db      	adds	r3, r3, r3
 800a304:	b2db      	uxtb	r3, r3
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	701a      	strb	r2, [r3, #0]
}
 800a30e:	46c0      	nop			@ (mov r8, r8)
 800a310:	46bd      	mov	sp, r7
 800a312:	b006      	add	sp, #24
 800a314:	bd80      	pop	{r7, pc}
 800a316:	46c0      	nop			@ (mov r8, r8)
 800a318:	41200000 	.word	0x41200000

0800a31c <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7f7 f950 	bl	80015d0 <__aeabi_i2f>
 800a330:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a332:	6838      	ldr	r0, [r7, #0]
 800a334:	f7f7 f94c 	bl	80015d0 <__aeabi_i2f>
 800a338:	1c03      	adds	r3, r0, #0
 800a33a:	4918      	ldr	r1, [pc, #96]	@ (800a39c <sumToIntAverage+0x80>)
 800a33c:	1c18      	adds	r0, r3, #0
 800a33e:	f7f6 fc49 	bl	8000bd4 <__aeabi_fdiv>
 800a342:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a344:	1c19      	adds	r1, r3, #0
 800a346:	1c20      	adds	r0, r4, #0
 800a348:	f7f6 faba 	bl	80008c0 <__aeabi_fadd>
 800a34c:	1c03      	adds	r3, r0, #0
 800a34e:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a352:	f7f7 f989 	bl	8001668 <__aeabi_ui2f>
 800a356:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a358:	1c19      	adds	r1, r3, #0
 800a35a:	1c20      	adds	r0, r4, #0
 800a35c:	f7f6 fc3a 	bl	8000bd4 <__aeabi_fdiv>
 800a360:	1c03      	adds	r3, r0, #0
 800a362:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	2310      	movs	r3, #16
 800a36c:	18f9      	adds	r1, r7, r3
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	1c18      	adds	r0, r3, #0
 800a372:	f7ff ffa1 	bl	800a2b8 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2bff      	cmp	r3, #255	@ 0xff
 800a37a:	d906      	bls.n	800a38a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	22ff      	movs	r2, #255	@ 0xff
 800a380:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2209      	movs	r2, #9
 800a386:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800a388:	e003      	b.n	800a392 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	701a      	strb	r2, [r3, #0]
}
 800a392:	46c0      	nop			@ (mov r8, r8)
 800a394:	46bd      	mov	sp, r7
 800a396:	b007      	add	sp, #28
 800a398:	bd90      	pop	{r4, r7, pc}
 800a39a:	46c0      	nop			@ (mov r8, r8)
 800a39c:	41200000 	.word	0x41200000

0800a3a0 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2280      	movs	r2, #128	@ 0x80
 800a3b2:	0612      	lsls	r2, r2, #24
 800a3b4:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4a18      	ldr	r2, [pc, #96]	@ (800a41c <findMinMax+0x7c>)
 800a3ba:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	617b      	str	r3, [r7, #20]
 800a3c0:	e022      	b.n	800a408 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	18d3      	adds	r3, r2, r3
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	da06      	bge.n	800a3e2 <findMinMax+0x42>
        {
            min[0] = array[i];
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	18d3      	adds	r3, r2, r3
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	18d3      	adds	r3, r2, r3
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	dd06      	ble.n	800a402 <findMinMax+0x62>
        {
            max[0] = array[i];
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	18d3      	adds	r3, r2, r3
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	3301      	adds	r3, #1
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d3d8      	bcc.n	800a3c2 <findMinMax+0x22>
        }
    }
}
 800a410:	46c0      	nop			@ (mov r8, r8)
 800a412:	46c0      	nop			@ (mov r8, r8)
 800a414:	46bd      	mov	sp, r7
 800a416:	b006      	add	sp, #24
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	46c0      	nop			@ (mov r8, r8)
 800a41c:	7fffffff 	.word	0x7fffffff

0800a420 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d302      	bcc.n	800a43c <getPo2factor+0x1c>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d107      	bne.n	800a44c <getPo2factor+0x2c>
    {
        return 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	e00d      	b.n	800a45c <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	085b      	lsrs	r3, r3, #1
 800a444:	607b      	str	r3, [r7, #4]
        bitShift++;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3301      	adds	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d2f5      	bcs.n	800a440 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3b01      	subs	r3, #1
 800a458:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800a45a:	68fb      	ldr	r3, [r7, #12]
}
 800a45c:	0018      	movs	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	b004      	add	sp, #16
 800a462:	bd80      	pop	{r7, pc}

0800a464 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7f7 f8f8 	bl	8001668 <__aeabi_ui2f>
 800a478:	1c03      	adds	r3, r0, #0
 800a47a:	1c19      	adds	r1, r3, #0
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f7f6 fd8f 	bl	8000fa0 <__aeabi_fmul>
 800a482:	1c03      	adds	r3, r0, #0
 800a484:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	2310      	movs	r3, #16
 800a48e:	18f9      	adds	r1, r7, r3
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	1c18      	adds	r0, r3, #0
 800a494:	f7ff fee0 	bl	800a258 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	801a      	strh	r2, [r3, #0]
}
 800a4a0:	46c0      	nop			@ (mov r8, r8)
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	b006      	add	sp, #24
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60b8      	str	r0, [r7, #8]
 800a4b0:	60f9      	str	r1, [r7, #12]
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	6a3a      	ldr	r2, [r7, #32]
 800a4ba:	68b8      	ldr	r0, [r7, #8]
 800a4bc:	68f9      	ldr	r1, [r7, #12]
 800a4be:	f7fc f863 	bl	8006588 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	18d2      	adds	r2, r2, r3
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	18d2      	adds	r2, r2, r3
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	18d2      	adds	r2, r2, r3
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	18d2      	adds	r2, r2, r3
 800a4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e0:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800a4e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4e4:	6a3b      	ldr	r3, [r7, #32]
 800a4e6:	0011      	movs	r1, r2
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f7fc f8dd 	bl	80066a8 <correctIntFracNumber>
}
 800a4ee:	46c0      	nop			@ (mov r8, r8)
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b004      	add	sp, #16
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b086      	sub	sp, #24
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a506:	2300      	movs	r3, #0
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	e019      	b.n	800a540 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	18d3      	adds	r3, r2, r3
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	3201      	adds	r2, #1
 800a51c:	0052      	lsls	r2, r2, #1
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	188a      	adds	r2, r1, r2
 800a522:	8812      	ldrh	r2, [r2, #0]
 800a524:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a526:	0019      	movs	r1, r3
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a530:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a532:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	3301      	adds	r3, #1
 800a538:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	3304      	adds	r3, #4
 800a53e:	613b      	str	r3, [r7, #16]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	429a      	cmp	r2, r3
 800a546:	d3e1      	bcc.n	800a50c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800a548:	46c0      	nop			@ (mov r8, r8)
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b006      	add	sp, #24
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800a554:	b580      	push	{r7, lr}
 800a556:	af00      	add	r7, sp, #0
  init = false;
 800a558:	4b02      	ldr	r3, [pc, #8]	@ (800a564 <InitDone+0x10>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	701a      	strb	r2, [r3, #0]
}
 800a55e:	46c0      	nop			@ (mov r8, r8)
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	200000c4 	.word	0x200000c4

0800a568 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800a56e:	f7fb fbdb 	bl	8005d28 <ReadBatteryVoltage>
 800a572:	1c03      	adds	r3, r0, #0
 800a574:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800a576:	491f      	ldr	r1, [pc, #124]	@ (800a5f4 <batteryChargeCheck+0x8c>)
 800a578:	6838      	ldr	r0, [r7, #0]
 800a57a:	f7f5 ffd9 	bl	8000530 <__aeabi_fcmplt>
 800a57e:	1e03      	subs	r3, r0, #0
 800a580:	d002      	beq.n	800a588 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800a582:	1dfb      	adds	r3, r7, #7
 800a584:	2200      	movs	r2, #0
 800a586:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800a588:	6838      	ldr	r0, [r7, #0]
 800a58a:	f7f8 ff6b 	bl	8003464 <__aeabi_f2d>
 800a58e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5f8 <batteryChargeCheck+0x90>)
 800a590:	4b1a      	ldr	r3, [pc, #104]	@ (800a5fc <batteryChargeCheck+0x94>)
 800a592:	f7f5 ff93 	bl	80004bc <__aeabi_dcmplt>
 800a596:	1e03      	subs	r3, r0, #0
 800a598:	d008      	beq.n	800a5ac <batteryChargeCheck+0x44>
 800a59a:	4916      	ldr	r1, [pc, #88]	@ (800a5f4 <batteryChargeCheck+0x8c>)
 800a59c:	6838      	ldr	r0, [r7, #0]
 800a59e:	f7f5 ffe5 	bl	800056c <__aeabi_fcmpge>
 800a5a2:	1e03      	subs	r3, r0, #0
 800a5a4:	d002      	beq.n	800a5ac <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800a5a6:	1dfb      	adds	r3, r7, #7
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800a5ac:	2181      	movs	r1, #129	@ 0x81
 800a5ae:	05c9      	lsls	r1, r1, #23
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f7f5 ffbd 	bl	8000530 <__aeabi_fcmplt>
 800a5b6:	1e03      	subs	r3, r0, #0
 800a5b8:	d00b      	beq.n	800a5d2 <batteryChargeCheck+0x6a>
 800a5ba:	6838      	ldr	r0, [r7, #0]
 800a5bc:	f7f8 ff52 	bl	8003464 <__aeabi_f2d>
 800a5c0:	4a0d      	ldr	r2, [pc, #52]	@ (800a5f8 <batteryChargeCheck+0x90>)
 800a5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a5fc <batteryChargeCheck+0x94>)
 800a5c4:	f7f5 ff98 	bl	80004f8 <__aeabi_dcmpge>
 800a5c8:	1e03      	subs	r3, r0, #0
 800a5ca:	d002      	beq.n	800a5d2 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800a5cc:	1dfb      	adds	r3, r7, #7
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800a5d2:	2181      	movs	r1, #129	@ 0x81
 800a5d4:	05c9      	lsls	r1, r1, #23
 800a5d6:	6838      	ldr	r0, [r7, #0]
 800a5d8:	f7f5 ffc8 	bl	800056c <__aeabi_fcmpge>
 800a5dc:	1e03      	subs	r3, r0, #0
 800a5de:	d002      	beq.n	800a5e6 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800a5e0:	1dfb      	adds	r3, r7, #7
 800a5e2:	2204      	movs	r2, #4
 800a5e4:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800a5e6:	1dfb      	adds	r3, r7, #7
 800a5e8:	781b      	ldrb	r3, [r3, #0]
}
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b002      	add	sp, #8
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	46c0      	nop			@ (mov r8, r8)
 800a5f4:	40600000 	.word	0x40600000
 800a5f8:	9999999a 	.word	0x9999999a
 800a5fc:	400d9999 	.word	0x400d9999

0800a600 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800a600:	b590      	push	{r4, r7, lr}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	0004      	movs	r4, r0
 800a608:	0008      	movs	r0, r1
 800a60a:	0011      	movs	r1, r2
 800a60c:	1dbb      	adds	r3, r7, #6
 800a60e:	1c22      	adds	r2, r4, #0
 800a610:	801a      	strh	r2, [r3, #0]
 800a612:	1d3b      	adds	r3, r7, #4
 800a614:	1c02      	adds	r2, r0, #0
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	1cbb      	adds	r3, r7, #2
 800a61a:	1c0a      	adds	r2, r1, #0
 800a61c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a61e:	4b0f      	ldr	r3, [pc, #60]	@ (800a65c <SetStatusLED+0x5c>)
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d107      	bne.n	800a636 <SetStatusLED+0x36>
 800a626:	4b0e      	ldr	r3, [pc, #56]	@ (800a660 <SetStatusLED+0x60>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <SetStatusLED+0x36>
 800a62e:	4b0d      	ldr	r3, [pc, #52]	@ (800a664 <SetStatusLED+0x64>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00e      	beq.n	800a654 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800a636:	2380      	movs	r3, #128	@ 0x80
 800a638:	05db      	lsls	r3, r3, #23
 800a63a:	1dba      	adds	r2, r7, #6
 800a63c:	8812      	ldrh	r2, [r2, #0]
 800a63e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800a640:	2380      	movs	r3, #128	@ 0x80
 800a642:	05db      	lsls	r3, r3, #23
 800a644:	1d3a      	adds	r2, r7, #4
 800a646:	8812      	ldrh	r2, [r2, #0]
 800a648:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800a64a:	2380      	movs	r3, #128	@ 0x80
 800a64c:	05db      	lsls	r3, r3, #23
 800a64e:	1cba      	adds	r2, r7, #2
 800a650:	8812      	ldrh	r2, [r2, #0]
 800a652:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a654:	46c0      	nop			@ (mov r8, r8)
 800a656:	46bd      	mov	sp, r7
 800a658:	b003      	add	sp, #12
 800a65a:	bd90      	pop	{r4, r7, pc}
 800a65c:	20002105 	.word	0x20002105
 800a660:	200000c4 	.word	0x200000c4
 800a664:	20002106 	.word	0x20002106

0800a668 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	0004      	movs	r4, r0
 800a670:	0008      	movs	r0, r1
 800a672:	0011      	movs	r1, r2
 800a674:	1dfb      	adds	r3, r7, #7
 800a676:	1c22      	adds	r2, r4, #0
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	1dbb      	adds	r3, r7, #6
 800a67c:	1c02      	adds	r2, r0, #0
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	1d7b      	adds	r3, r7, #5
 800a682:	1c0a      	adds	r2, r1, #0
 800a684:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800a686:	4b19      	ldr	r3, [pc, #100]	@ (800a6ec <SetDBLED+0x84>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d107      	bne.n	800a69e <SetDBLED+0x36>
 800a68e:	4b18      	ldr	r3, [pc, #96]	@ (800a6f0 <SetDBLED+0x88>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d103      	bne.n	800a69e <SetDBLED+0x36>
 800a696:	4b17      	ldr	r3, [pc, #92]	@ (800a6f4 <SetDBLED+0x8c>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d022      	beq.n	800a6e4 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800a69e:	1dfb      	adds	r3, r7, #7
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	4053      	eors	r3, r2
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	001a      	movs	r2, r3
 800a6aa:	4b13      	ldr	r3, [pc, #76]	@ (800a6f8 <SetDBLED+0x90>)
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	f002 fd31 	bl	800d116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800a6b4:	1dbb      	adds	r3, r7, #6
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	4053      	eors	r3, r2
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	001a      	movs	r2, r3
 800a6c0:	2380      	movs	r3, #128	@ 0x80
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	480c      	ldr	r0, [pc, #48]	@ (800a6f8 <SetDBLED+0x90>)
 800a6c6:	0019      	movs	r1, r3
 800a6c8:	f002 fd25 	bl	800d116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800a6cc:	1d7b      	adds	r3, r7, #5
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	4053      	eors	r3, r2
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	001a      	movs	r2, r3
 800a6d8:	2380      	movs	r3, #128	@ 0x80
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4806      	ldr	r0, [pc, #24]	@ (800a6f8 <SetDBLED+0x90>)
 800a6de:	0019      	movs	r1, r3
 800a6e0:	f002 fd19 	bl	800d116 <HAL_GPIO_WritePin>
  }
}
 800a6e4:	46c0      	nop			@ (mov r8, r8)
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	b003      	add	sp, #12
 800a6ea:	bd90      	pop	{r4, r7, pc}
 800a6ec:	20002105 	.word	0x20002105
 800a6f0:	200000c4 	.word	0x200000c4
 800a6f4:	20002106 	.word	0x20002106
 800a6f8:	50000400 	.word	0x50000400

0800a6fc <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800a6fc:	b590      	push	{r4, r7, lr}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	0004      	movs	r4, r0
 800a704:	0008      	movs	r0, r1
 800a706:	0011      	movs	r1, r2
 800a708:	1dbb      	adds	r3, r7, #6
 800a70a:	1c22      	adds	r2, r4, #0
 800a70c:	801a      	strh	r2, [r3, #0]
 800a70e:	1d3b      	adds	r3, r7, #4
 800a710:	1c02      	adds	r2, r0, #0
 800a712:	801a      	strh	r2, [r3, #0]
 800a714:	1cbb      	adds	r3, r7, #2
 800a716:	1c0a      	adds	r2, r1, #0
 800a718:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a71a:	4b0e      	ldr	r3, [pc, #56]	@ (800a754 <SetVocLED+0x58>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d107      	bne.n	800a732 <SetVocLED+0x36>
 800a722:	4b0d      	ldr	r3, [pc, #52]	@ (800a758 <SetVocLED+0x5c>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d103      	bne.n	800a732 <SetVocLED+0x36>
 800a72a:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <SetVocLED+0x60>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00b      	beq.n	800a74a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800a732:	4b0b      	ldr	r3, [pc, #44]	@ (800a760 <SetVocLED+0x64>)
 800a734:	1dba      	adds	r2, r7, #6
 800a736:	8812      	ldrh	r2, [r2, #0]
 800a738:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800a73a:	4b09      	ldr	r3, [pc, #36]	@ (800a760 <SetVocLED+0x64>)
 800a73c:	1d3a      	adds	r2, r7, #4
 800a73e:	8812      	ldrh	r2, [r2, #0]
 800a740:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800a742:	4b07      	ldr	r3, [pc, #28]	@ (800a760 <SetVocLED+0x64>)
 800a744:	1cba      	adds	r2, r7, #2
 800a746:	8812      	ldrh	r2, [r2, #0]
 800a748:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a74a:	46c0      	nop			@ (mov r8, r8)
 800a74c:	46bd      	mov	sp, r7
 800a74e:	b003      	add	sp, #12
 800a750:	bd90      	pop	{r4, r7, pc}
 800a752:	46c0      	nop			@ (mov r8, r8)
 800a754:	20002105 	.word	0x20002105
 800a758:	200000c4 	.word	0x200000c4
 800a75c:	20002106 	.word	0x20002106
 800a760:	40000400 	.word	0x40000400

0800a764 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a768:	4b07      	ldr	r3, [pc, #28]	@ (800a788 <SetMeasurementIndicator+0x24>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <SetMeasurementIndicator+0x14>
 800a770:	4b06      	ldr	r3, [pc, #24]	@ (800a78c <SetMeasurementIndicator+0x28>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800a778:	2380      	movs	r3, #128	@ 0x80
 800a77a:	05db      	lsls	r3, r3, #23
 800a77c:	4a04      	ldr	r2, [pc, #16]	@ (800a790 <SetMeasurementIndicator+0x2c>)
 800a77e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a780:	46c0      	nop			@ (mov r8, r8)
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	46c0      	nop			@ (mov r8, r8)
 800a788:	20002105 	.word	0x20002105
 800a78c:	20002106 	.word	0x20002106
 800a790:	00000bb8 	.word	0x00000bb8

0800a794 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a798:	4b07      	ldr	r3, [pc, #28]	@ (800a7b8 <ResetMeasurementIndicator+0x24>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d103      	bne.n	800a7a8 <ResetMeasurementIndicator+0x14>
 800a7a0:	4b06      	ldr	r3, [pc, #24]	@ (800a7bc <ResetMeasurementIndicator+0x28>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d004      	beq.n	800a7b2 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800a7a8:	2380      	movs	r3, #128	@ 0x80
 800a7aa:	05db      	lsls	r3, r3, #23
 800a7ac:	22fa      	movs	r2, #250	@ 0xfa
 800a7ae:	0112      	lsls	r2, r2, #4
 800a7b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a7b2:	46c0      	nop			@ (mov r8, r8)
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20002105 	.word	0x20002105
 800a7bc:	20002106 	.word	0x20002106

0800a7c0 <SetMICIndicator>:
void SetMICIndicator(){
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a7c4:	4b07      	ldr	r3, [pc, #28]	@ (800a7e4 <SetMICIndicator+0x24>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <SetMICIndicator+0x14>
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <SetMICIndicator+0x28>)
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800a7d4:	2380      	movs	r3, #128	@ 0x80
 800a7d6:	05db      	lsls	r3, r3, #23
 800a7d8:	4a04      	ldr	r2, [pc, #16]	@ (800a7ec <SetMICIndicator+0x2c>)
 800a7da:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a7dc:	46c0      	nop			@ (mov r8, r8)
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	46c0      	nop			@ (mov r8, r8)
 800a7e4:	20002105 	.word	0x20002105
 800a7e8:	20002106 	.word	0x20002106
 800a7ec:	00000bb8 	.word	0x00000bb8

0800a7f0 <ResetMICIndicator>:
void ResetMICIndicator(){
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a7f4:	4b07      	ldr	r3, [pc, #28]	@ (800a814 <ResetMICIndicator+0x24>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d103      	bne.n	800a804 <ResetMICIndicator+0x14>
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <ResetMICIndicator+0x28>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800a804:	2380      	movs	r3, #128	@ 0x80
 800a806:	05db      	lsls	r3, r3, #23
 800a808:	22fa      	movs	r2, #250	@ 0xfa
 800a80a:	0112      	lsls	r2, r2, #4
 800a80c:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a80e:	46c0      	nop			@ (mov r8, r8)
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20002105 	.word	0x20002105
 800a818:	20002106 	.word	0x20002106

0800a81c <SetESPIndicator>:
void SetESPIndicator(){
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a820:	4b07      	ldr	r3, [pc, #28]	@ (800a840 <SetESPIndicator+0x24>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d103      	bne.n	800a830 <SetESPIndicator+0x14>
 800a828:	4b06      	ldr	r3, [pc, #24]	@ (800a844 <SetESPIndicator+0x28>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800a830:	2380      	movs	r3, #128	@ 0x80
 800a832:	05db      	lsls	r3, r3, #23
 800a834:	4a04      	ldr	r2, [pc, #16]	@ (800a848 <SetESPIndicator+0x2c>)
 800a836:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a838:	46c0      	nop			@ (mov r8, r8)
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	46c0      	nop			@ (mov r8, r8)
 800a840:	20002105 	.word	0x20002105
 800a844:	20002106 	.word	0x20002106
 800a848:	00000bb8 	.word	0x00000bb8

0800a84c <ResetESPIndicator>:
void ResetESPIndicator(){
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a850:	4b07      	ldr	r3, [pc, #28]	@ (800a870 <ResetESPIndicator+0x24>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d103      	bne.n	800a860 <ResetESPIndicator+0x14>
 800a858:	4b06      	ldr	r3, [pc, #24]	@ (800a874 <ResetESPIndicator+0x28>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800a860:	2380      	movs	r3, #128	@ 0x80
 800a862:	05db      	lsls	r3, r3, #23
 800a864:	22fa      	movs	r2, #250	@ 0xfa
 800a866:	0112      	lsls	r2, r2, #4
 800a868:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a86a:	46c0      	nop			@ (mov r8, r8)
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20002105 	.word	0x20002105
 800a874:	20002106 	.word	0x20002106

0800a878 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800a87c:	23fa      	movs	r3, #250	@ 0xfa
 800a87e:	011a      	lsls	r2, r3, #4
 800a880:	23fa      	movs	r3, #250	@ 0xfa
 800a882:	0119      	lsls	r1, r3, #4
 800a884:	23fa      	movs	r3, #250	@ 0xfa
 800a886:	011b      	lsls	r3, r3, #4
 800a888:	0018      	movs	r0, r3
 800a88a:	f7ff feb9 	bl	800a600 <SetStatusLED>
  SetDBLED(false,false,false);
 800a88e:	2200      	movs	r2, #0
 800a890:	2100      	movs	r1, #0
 800a892:	2000      	movs	r0, #0
 800a894:	f7ff fee8 	bl	800a668 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800a898:	23fa      	movs	r3, #250	@ 0xfa
 800a89a:	011a      	lsls	r2, r3, #4
 800a89c:	23fa      	movs	r3, #250	@ 0xfa
 800a89e:	0119      	lsls	r1, r3, #4
 800a8a0:	23fa      	movs	r3, #250	@ 0xfa
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f7ff ff29 	bl	800a6fc <SetVocLED>
return;
 800a8aa:	46c0      	nop			@ (mov r8, r8)
}
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <powerCheck>:

Battery_Status powerCheck(){
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800a8b6:	f7fb fafd 	bl	8005eb4 <Check_USB_PowerOn>
 800a8ba:	0003      	movs	r3, r0
 800a8bc:	001a      	movs	r2, r3
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4053      	eors	r3, r2
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <powerCheck+0x24>
    status = batteryChargeCheck();
 800a8c8:	1dfc      	adds	r4, r7, #7
 800a8ca:	f7ff fe4d 	bl	800a568 <batteryChargeCheck>
 800a8ce:	0003      	movs	r3, r0
 800a8d0:	7023      	strb	r3, [r4, #0]
 800a8d2:	e002      	b.n	800a8da <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800a8d4:	1dfb      	adds	r3, r7, #7
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a8da:	1dfb      	adds	r3, r7, #7
 800a8dc:	781b      	ldrb	r3, [r3, #0]
}
 800a8de:	0018      	movs	r0, r3
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	b003      	add	sp, #12
 800a8e4:	bd90      	pop	{r4, r7, pc}
	...

0800a8e8 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	0002      	movs	r2, r0
 800a8f0:	1dfb      	adds	r3, r7, #7
 800a8f2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800a8f4:	1dfb      	adds	r3, r7, #7
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d105      	bne.n	800a908 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800a8fc:	4a18      	ldr	r2, [pc, #96]	@ (800a960 <powerDisplay+0x78>)
 800a8fe:	4b19      	ldr	r3, [pc, #100]	@ (800a964 <powerDisplay+0x7c>)
 800a900:	0019      	movs	r1, r3
 800a902:	2003      	movs	r0, #3
 800a904:	f000 fe06 	bl	800b514 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800a908:	1dfb      	adds	r3, r7, #7
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d105      	bne.n	800a91c <powerDisplay+0x34>
    Debug("Battery fully charged");
 800a910:	4a15      	ldr	r2, [pc, #84]	@ (800a968 <powerDisplay+0x80>)
 800a912:	4b14      	ldr	r3, [pc, #80]	@ (800a964 <powerDisplay+0x7c>)
 800a914:	0019      	movs	r1, r3
 800a916:	2003      	movs	r0, #3
 800a918:	f000 fdfc 	bl	800b514 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800a91c:	1dfb      	adds	r3, r7, #7
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d105      	bne.n	800a930 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800a924:	4a11      	ldr	r2, [pc, #68]	@ (800a96c <powerDisplay+0x84>)
 800a926:	4b0f      	ldr	r3, [pc, #60]	@ (800a964 <powerDisplay+0x7c>)
 800a928:	0019      	movs	r1, r3
 800a92a:	2003      	movs	r0, #3
 800a92c:	f000 fdf2 	bl	800b514 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800a930:	1dfb      	adds	r3, r7, #7
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d105      	bne.n	800a944 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800a938:	4a0d      	ldr	r2, [pc, #52]	@ (800a970 <powerDisplay+0x88>)
 800a93a:	4b0a      	ldr	r3, [pc, #40]	@ (800a964 <powerDisplay+0x7c>)
 800a93c:	0019      	movs	r1, r3
 800a93e:	2003      	movs	r0, #3
 800a940:	f000 fde8 	bl	800b514 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800a944:	1dfb      	adds	r3, r7, #7
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d105      	bne.n	800a958 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800a94c:	4a09      	ldr	r2, [pc, #36]	@ (800a974 <powerDisplay+0x8c>)
 800a94e:	4b05      	ldr	r3, [pc, #20]	@ (800a964 <powerDisplay+0x7c>)
 800a950:	0019      	movs	r1, r3
 800a952:	2003      	movs	r0, #3
 800a954:	f000 fdde 	bl	800b514 <CreateLine>
  }
}
 800a958:	46c0      	nop			@ (mov r8, r8)
 800a95a:	46bd      	mov	sp, r7
 800a95c:	b002      	add	sp, #8
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	0801fad8 	.word	0x0801fad8
 800a964:	0801fae8 	.word	0x0801fae8
 800a968:	0801faec 	.word	0x0801faec
 800a96c:	0801fb04 	.word	0x0801fb04
 800a970:	0801fb24 	.word	0x0801fb24
 800a974:	0801fb3c 	.word	0x0801fb3c

0800a978 <configCheck>:

void configCheck(){
 800a978:	b580      	push	{r7, lr}
 800a97a:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800a97c:	f7fb faa9 	bl	8005ed2 <BootButton_Pressed>
 800a980:	1e03      	subs	r3, r0, #0
 800a982:	d007      	beq.n	800a994 <configCheck+0x1c>
 800a984:	f7fb fab6 	bl	8005ef4 <UserButton_Pressed>
 800a988:	1e03      	subs	r3, r0, #0
 800a98a:	d003      	beq.n	800a994 <configCheck+0x1c>
    configSet = true;
 800a98c:	4b3d      	ldr	r3, [pc, #244]	@ (800aa84 <configCheck+0x10c>)
 800a98e:	2201      	movs	r2, #1
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	e00a      	b.n	800a9aa <configCheck+0x32>
  }
  else{
    configSet = false;
 800a994:	4b3b      	ldr	r3, [pc, #236]	@ (800aa84 <configCheck+0x10c>)
 800a996:	2200      	movs	r2, #0
 800a998:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800a99a:	f001 f95d 	bl	800bc58 <HAL_GetTick>
 800a99e:	0003      	movs	r3, r0
 800a9a0:	22fa      	movs	r2, #250	@ 0xfa
 800a9a2:	00d2      	lsls	r2, r2, #3
 800a9a4:	189a      	adds	r2, r3, r2
 800a9a6:	4b38      	ldr	r3, [pc, #224]	@ (800aa88 <configCheck+0x110>)
 800a9a8:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800a9aa:	4b36      	ldr	r3, [pc, #216]	@ (800aa84 <configCheck+0x10c>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00d      	beq.n	800a9ce <configCheck+0x56>
 800a9b2:	4b35      	ldr	r3, [pc, #212]	@ (800aa88 <configCheck+0x110>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	f000 fd56 	bl	800b468 <TimestampIsReached>
 800a9bc:	1e03      	subs	r3, r0, #0
 800a9be:	d006      	beq.n	800a9ce <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800a9c0:	f7f8 ffaa 	bl	8003918 <SetConfigMode>
    SetDBLED(true, true, true);
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	f7ff fe4d 	bl	800a668 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800a9ce:	f7fb fa80 	bl	8005ed2 <BootButton_Pressed>
 800a9d2:	0003      	movs	r3, r0
 800a9d4:	001a      	movs	r2, r3
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4053      	eors	r3, r2
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01d      	beq.n	800aa1c <configCheck+0xa4>
 800a9e0:	f7fb fa88 	bl	8005ef4 <UserButton_Pressed>
 800a9e4:	1e03      	subs	r3, r0, #0
 800a9e6:	d019      	beq.n	800aa1c <configCheck+0xa4>
 800a9e8:	4b28      	ldr	r3, [pc, #160]	@ (800aa8c <configCheck+0x114>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	4053      	eors	r3, r2
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d012      	beq.n	800aa1c <configCheck+0xa4>
    SetLEDsOff();
 800a9f6:	f7ff ff3f 	bl	800a878 <SetLEDsOff>
    userToggle = !userToggle;
 800a9fa:	4b25      	ldr	r3, [pc, #148]	@ (800aa90 <configCheck+0x118>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	1e5a      	subs	r2, r3, #1
 800aa00:	4193      	sbcs	r3, r2
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2201      	movs	r2, #1
 800aa06:	4053      	eors	r3, r2
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	1c1a      	adds	r2, r3, #0
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	4013      	ands	r3, r2
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	4b1f      	ldr	r3, [pc, #124]	@ (800aa90 <configCheck+0x118>)
 800aa14:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800aa16:	4b1d      	ldr	r3, [pc, #116]	@ (800aa8c <configCheck+0x114>)
 800aa18:	2201      	movs	r2, #1
 800aa1a:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800aa1c:	f7fb fa59 	bl	8005ed2 <BootButton_Pressed>
 800aa20:	0003      	movs	r3, r0
 800aa22:	001a      	movs	r2, r3
 800aa24:	2301      	movs	r3, #1
 800aa26:	4053      	eors	r3, r2
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00b      	beq.n	800aa46 <configCheck+0xce>
 800aa2e:	f7fb fa61 	bl	8005ef4 <UserButton_Pressed>
 800aa32:	0003      	movs	r3, r0
 800aa34:	001a      	movs	r2, r3
 800aa36:	2301      	movs	r3, #1
 800aa38:	4053      	eors	r3, r2
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <configCheck+0xce>
    buttonHeld = false;
 800aa40:	4b12      	ldr	r3, [pc, #72]	@ (800aa8c <configCheck+0x114>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800aa46:	f7fb fa35 	bl	8005eb4 <Check_USB_PowerOn>
 800aa4a:	1e03      	subs	r3, r0, #0
 800aa4c:	d003      	beq.n	800aa56 <configCheck+0xde>
    usbPluggedIn = true;
 800aa4e:	4b11      	ldr	r3, [pc, #68]	@ (800aa94 <configCheck+0x11c>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800aa54:	e012      	b.n	800aa7c <configCheck+0x104>
    if(!userToggle && !init){
 800aa56:	4b0e      	ldr	r3, [pc, #56]	@ (800aa90 <configCheck+0x118>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	4053      	eors	r3, r2
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d008      	beq.n	800aa76 <configCheck+0xfe>
 800aa64:	4b0c      	ldr	r3, [pc, #48]	@ (800aa98 <configCheck+0x120>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	4053      	eors	r3, r2
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <configCheck+0xfe>
      SetLEDsOff();
 800aa72:	f7ff ff01 	bl	800a878 <SetLEDsOff>
    usbPluggedIn = false;
 800aa76:	4b07      	ldr	r3, [pc, #28]	@ (800aa94 <configCheck+0x11c>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
}
 800aa7c:	46c0      	nop			@ (mov r8, r8)
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	46c0      	nop			@ (mov r8, r8)
 800aa84:	20002104 	.word	0x20002104
 800aa88:	20002108 	.word	0x20002108
 800aa8c:	20002107 	.word	0x20002107
 800aa90:	20002106 	.word	0x20002106
 800aa94:	20002105 	.word	0x20002105
 800aa98:	200000c4 	.word	0x200000c4

0800aa9c <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  configCheck();
 800aaa0:	f7ff ff6a 	bl	800a978 <configCheck>
}
 800aaa4:	46c0      	nop			@ (mov r8, r8)
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800aaaa:	b590      	push	{r4, r7, lr}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800aab0:	1dfc      	adds	r4, r7, #7
 800aab2:	f7ff fefd 	bl	800a8b0 <powerCheck>
 800aab6:	0003      	movs	r3, r0
 800aab8:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800aaba:	1dfb      	adds	r3, r7, #7
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	0018      	movs	r0, r3
 800aac0:	f7ff ff12 	bl	800a8e8 <powerDisplay>
  return status;
 800aac4:	1dfb      	adds	r3, r7, #7
 800aac6:	781b      	ldrb	r3, [r3, #0]

}
 800aac8:	0018      	movs	r0, r3
 800aaca:	46bd      	mov	sp, r7
 800aacc:	b003      	add	sp, #12
 800aace:	bd90      	pop	{r4, r7, pc}

0800aad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aad4:	4b07      	ldr	r3, [pc, #28]	@ (800aaf4 <HAL_MspInit+0x24>)
 800aad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aad8:	4b06      	ldr	r3, [pc, #24]	@ (800aaf4 <HAL_MspInit+0x24>)
 800aada:	2101      	movs	r1, #1
 800aadc:	430a      	orrs	r2, r1
 800aade:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800aae0:	4b04      	ldr	r3, [pc, #16]	@ (800aaf4 <HAL_MspInit+0x24>)
 800aae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aae4:	4b03      	ldr	r3, [pc, #12]	@ (800aaf4 <HAL_MspInit+0x24>)
 800aae6:	2180      	movs	r1, #128	@ 0x80
 800aae8:	0549      	lsls	r1, r1, #21
 800aaea:	430a      	orrs	r2, r1
 800aaec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aaee:	46c0      	nop			@ (mov r8, r8)
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	40021000 	.word	0x40021000

0800aaf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800aafc:	46c0      	nop			@ (mov r8, r8)
 800aafe:	e7fd      	b.n	800aafc <NMI_Handler+0x4>

0800ab00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ab04:	46c0      	nop			@ (mov r8, r8)
 800ab06:	e7fd      	b.n	800ab04 <HardFault_Handler+0x4>

0800ab08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ab0c:	46c0      	nop			@ (mov r8, r8)
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ab16:	46c0      	nop			@ (mov r8, r8)
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ab20:	f001 f888 	bl	800bc34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ab24:	46c0      	nop			@ (mov r8, r8)
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ab30:	4b05      	ldr	r3, [pc, #20]	@ (800ab48 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800ab32:	0018      	movs	r0, r3
 800ab34:	f001 fe9d 	bl	800c872 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800ab38:	4b04      	ldr	r3, [pc, #16]	@ (800ab4c <DMA1_Channel2_3_IRQHandler+0x20>)
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	f001 fe99 	bl	800c872 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ab40:	46c0      	nop			@ (mov r8, r8)
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	46c0      	nop			@ (mov r8, r8)
 800ab48:	20000e08 	.word	0x20000e08
 800ab4c:	20000dc0 	.word	0x20000dc0

0800ab50 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800ab54:	4b07      	ldr	r3, [pc, #28]	@ (800ab74 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800ab56:	0018      	movs	r0, r3
 800ab58:	f001 fe8b 	bl	800c872 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800ab5c:	4b06      	ldr	r3, [pc, #24]	@ (800ab78 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800ab5e:	0018      	movs	r0, r3
 800ab60:	f001 fe87 	bl	800c872 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800ab64:	4b05      	ldr	r3, [pc, #20]	@ (800ab7c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800ab66:	0018      	movs	r0, r3
 800ab68:	f001 fe83 	bl	800c872 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800ab6c:	46c0      	nop			@ (mov r8, r8)
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	46c0      	nop			@ (mov r8, r8)
 800ab74:	20000e8c 	.word	0x20000e8c
 800ab78:	200023f8 	.word	0x200023f8
 800ab7c:	20002440 	.word	0x20002440

0800ab80 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ab84:	4b03      	ldr	r3, [pc, #12]	@ (800ab94 <USART4_5_IRQHandler+0x14>)
 800ab86:	0018      	movs	r0, r3
 800ab88:	f008 fdfa 	bl	8013780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800ab8c:	46c0      	nop			@ (mov r8, r8)
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	46c0      	nop			@ (mov r8, r8)
 800ab94:	20002340 	.word	0x20002340

0800ab98 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800ab9c:	4b09      	ldr	r3, [pc, #36]	@ (800abc4 <I2C1_IRQHandler+0x2c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699a      	ldr	r2, [r3, #24]
 800aba2:	23e0      	movs	r3, #224	@ 0xe0
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	4013      	ands	r3, r2
 800aba8:	d004      	beq.n	800abb4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800abaa:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <I2C1_IRQHandler+0x2c>)
 800abac:	0018      	movs	r0, r3
 800abae:	f002 fd8b 	bl	800d6c8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800abb2:	e003      	b.n	800abbc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800abb4:	4b03      	ldr	r3, [pc, #12]	@ (800abc4 <I2C1_IRQHandler+0x2c>)
 800abb6:	0018      	movs	r0, r3
 800abb8:	f002 fd6c 	bl	800d694 <HAL_I2C_EV_IRQHandler>
}
 800abbc:	46c0      	nop			@ (mov r8, r8)
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	46c0      	nop			@ (mov r8, r8)
 800abc4:	20000d18 	.word	0x20000d18

0800abc8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800abcc:	4b03      	ldr	r3, [pc, #12]	@ (800abdc <USB_IRQHandler+0x14>)
 800abce:	0018      	movs	r0, r3
 800abd0:	f004 ff06 	bl	800f9e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800abd4:	46c0      	nop			@ (mov r8, r8)
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	46c0      	nop			@ (mov r8, r8)
 800abdc:	20003248 	.word	0x20003248

0800abe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
  return 1;
 800abe4:	2301      	movs	r3, #1
}
 800abe6:	0018      	movs	r0, r3
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <_kill>:

int _kill(int pid, int sig)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800abf6:	f011 f919 	bl	801be2c <__errno>
 800abfa:	0003      	movs	r3, r0
 800abfc:	2216      	movs	r2, #22
 800abfe:	601a      	str	r2, [r3, #0]
  return -1;
 800ac00:	2301      	movs	r3, #1
 800ac02:	425b      	negs	r3, r3
}
 800ac04:	0018      	movs	r0, r3
 800ac06:	46bd      	mov	sp, r7
 800ac08:	b002      	add	sp, #8
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <_exit>:

void _exit (int status)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ac14:	2301      	movs	r3, #1
 800ac16:	425a      	negs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	0011      	movs	r1, r2
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f7ff ffe5 	bl	800abec <_kill>
  while (1) {}    /* Make sure we hang here */
 800ac22:	46c0      	nop			@ (mov r8, r8)
 800ac24:	e7fd      	b.n	800ac22 <_exit+0x16>

0800ac26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b086      	sub	sp, #24
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	e00a      	b.n	800ac4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ac38:	e000      	b.n	800ac3c <_read+0x16>
 800ac3a:	bf00      	nop
 800ac3c:	0001      	movs	r1, r0
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	60ba      	str	r2, [r7, #8]
 800ac44:	b2ca      	uxtb	r2, r1
 800ac46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	617b      	str	r3, [r7, #20]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	dbf0      	blt.n	800ac38 <_read+0x12>
  }

  return len;
 800ac56:	687b      	ldr	r3, [r7, #4]
}
 800ac58:	0018      	movs	r0, r3
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	b006      	add	sp, #24
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <_close>:
  }
  return len;
}

int _close(int file)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	425b      	negs	r3, r3
}
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b002      	add	sp, #8
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2280      	movs	r2, #128	@ 0x80
 800ac82:	0192      	lsls	r2, r2, #6
 800ac84:	605a      	str	r2, [r3, #4]
  return 0;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	0018      	movs	r0, r3
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	b002      	add	sp, #8
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <_isatty>:

int _isatty(int file)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ac98:	2301      	movs	r3, #1
}
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	b002      	add	sp, #8
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	0018      	movs	r0, r3
 800acb2:	46bd      	mov	sp, r7
 800acb4:	b004      	add	sp, #16
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800acc0:	4a14      	ldr	r2, [pc, #80]	@ (800ad14 <_sbrk+0x5c>)
 800acc2:	4b15      	ldr	r3, [pc, #84]	@ (800ad18 <_sbrk+0x60>)
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800accc:	4b13      	ldr	r3, [pc, #76]	@ (800ad1c <_sbrk+0x64>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800acd4:	4b11      	ldr	r3, [pc, #68]	@ (800ad1c <_sbrk+0x64>)
 800acd6:	4a12      	ldr	r2, [pc, #72]	@ (800ad20 <_sbrk+0x68>)
 800acd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800acda:	4b10      	ldr	r3, [pc, #64]	@ (800ad1c <_sbrk+0x64>)
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	18d3      	adds	r3, r2, r3
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d207      	bcs.n	800acf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ace8:	f011 f8a0 	bl	801be2c <__errno>
 800acec:	0003      	movs	r3, r0
 800acee:	220c      	movs	r2, #12
 800acf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800acf2:	2301      	movs	r3, #1
 800acf4:	425b      	negs	r3, r3
 800acf6:	e009      	b.n	800ad0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800acf8:	4b08      	ldr	r3, [pc, #32]	@ (800ad1c <_sbrk+0x64>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800acfe:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <_sbrk+0x64>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	18d2      	adds	r2, r2, r3
 800ad06:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <_sbrk+0x64>)
 800ad08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b006      	add	sp, #24
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	20005000 	.word	0x20005000
 800ad18:	00000400 	.word	0x00000400
 800ad1c:	2000210c 	.word	0x2000210c
 800ad20:	200038a8 	.word	0x200038a8

0800ad24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ad28:	46c0      	nop			@ (mov r8, r8)
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad36:	2310      	movs	r3, #16
 800ad38:	18fb      	adds	r3, r7, r3
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	2308      	movs	r3, #8
 800ad3e:	001a      	movs	r2, r3
 800ad40:	2100      	movs	r1, #0
 800ad42:	f010 ffcf 	bl	801bce4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ad46:	003b      	movs	r3, r7
 800ad48:	0018      	movs	r0, r3
 800ad4a:	2310      	movs	r3, #16
 800ad4c:	001a      	movs	r2, r3
 800ad4e:	2100      	movs	r1, #0
 800ad50:	f010 ffc8 	bl	801bce4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ad54:	4b2e      	ldr	r3, [pc, #184]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad56:	2280      	movs	r2, #128	@ 0x80
 800ad58:	05d2      	lsls	r2, r2, #23
 800ad5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ad5c:	4b2c      	ldr	r3, [pc, #176]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad62:	4b2b      	ldr	r3, [pc, #172]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800ad68:	4b29      	ldr	r3, [pc, #164]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ae14 <MX_TIM2_Init+0xe4>)
 800ad6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad6e:	4b28      	ldr	r3, [pc, #160]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad74:	4b26      	ldr	r3, [pc, #152]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ad7a:	4b25      	ldr	r3, [pc, #148]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad7c:	0018      	movs	r0, r3
 800ad7e:	f007 ff71 	bl	8012c64 <HAL_TIM_PWM_Init>
 800ad82:	1e03      	subs	r3, r0, #0
 800ad84:	d001      	beq.n	800ad8a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800ad86:	f7fc faa1 	bl	80072cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad8a:	2110      	movs	r1, #16
 800ad8c:	187b      	adds	r3, r7, r1
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad92:	187b      	adds	r3, r7, r1
 800ad94:	2200      	movs	r2, #0
 800ad96:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ad98:	187a      	adds	r2, r7, r1
 800ad9a:	4b1d      	ldr	r3, [pc, #116]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ad9c:	0011      	movs	r1, r2
 800ad9e:	0018      	movs	r0, r3
 800ada0:	f008 fa7e 	bl	80132a0 <HAL_TIMEx_MasterConfigSynchronization>
 800ada4:	1e03      	subs	r3, r0, #0
 800ada6:	d001      	beq.n	800adac <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800ada8:	f7fc fa90 	bl	80072cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800adac:	003b      	movs	r3, r7
 800adae:	2260      	movs	r2, #96	@ 0x60
 800adb0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800adb2:	003b      	movs	r3, r7
 800adb4:	2200      	movs	r2, #0
 800adb6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800adb8:	003b      	movs	r3, r7
 800adba:	2200      	movs	r2, #0
 800adbc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800adbe:	003b      	movs	r3, r7
 800adc0:	2200      	movs	r2, #0
 800adc2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800adc4:	0039      	movs	r1, r7
 800adc6:	4b12      	ldr	r3, [pc, #72]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800adc8:	2200      	movs	r2, #0
 800adca:	0018      	movs	r0, r3
 800adcc:	f008 f81c 	bl	8012e08 <HAL_TIM_PWM_ConfigChannel>
 800add0:	1e03      	subs	r3, r0, #0
 800add2:	d001      	beq.n	800add8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800add4:	f7fc fa7a 	bl	80072cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800add8:	0039      	movs	r1, r7
 800adda:	4b0d      	ldr	r3, [pc, #52]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800addc:	2208      	movs	r2, #8
 800adde:	0018      	movs	r0, r3
 800ade0:	f008 f812 	bl	8012e08 <HAL_TIM_PWM_ConfigChannel>
 800ade4:	1e03      	subs	r3, r0, #0
 800ade6:	d001      	beq.n	800adec <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800ade8:	f7fc fa70 	bl	80072cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800adec:	0039      	movs	r1, r7
 800adee:	4b08      	ldr	r3, [pc, #32]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800adf0:	220c      	movs	r2, #12
 800adf2:	0018      	movs	r0, r3
 800adf4:	f008 f808 	bl	8012e08 <HAL_TIM_PWM_ConfigChannel>
 800adf8:	1e03      	subs	r3, r0, #0
 800adfa:	d001      	beq.n	800ae00 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800adfc:	f7fc fa66 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800ae00:	4b03      	ldr	r3, [pc, #12]	@ (800ae10 <MX_TIM2_Init+0xe0>)
 800ae02:	0018      	movs	r0, r3
 800ae04:	f000 f8fe 	bl	800b004 <HAL_TIM_MspPostInit>

}
 800ae08:	46c0      	nop			@ (mov r8, r8)
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b006      	add	sp, #24
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	20002110 	.word	0x20002110
 800ae14:	0000ffff 	.word	0x0000ffff

0800ae18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ae1e:	2310      	movs	r3, #16
 800ae20:	18fb      	adds	r3, r7, r3
 800ae22:	0018      	movs	r0, r3
 800ae24:	2308      	movs	r3, #8
 800ae26:	001a      	movs	r2, r3
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f010 ff5b 	bl	801bce4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ae2e:	003b      	movs	r3, r7
 800ae30:	0018      	movs	r0, r3
 800ae32:	2310      	movs	r3, #16
 800ae34:	001a      	movs	r2, r3
 800ae36:	2100      	movs	r1, #0
 800ae38:	f010 ff54 	bl	801bce4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ae3c:	4b32      	ldr	r3, [pc, #200]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae3e:	4a33      	ldr	r2, [pc, #204]	@ (800af0c <MX_TIM3_Init+0xf4>)
 800ae40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ae42:	4b31      	ldr	r3, [pc, #196]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae48:	4b2f      	ldr	r3, [pc, #188]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800ae4e:	4b2e      	ldr	r3, [pc, #184]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae50:	4a2f      	ldr	r2, [pc, #188]	@ (800af10 <MX_TIM3_Init+0xf8>)
 800ae52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae54:	4b2c      	ldr	r3, [pc, #176]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae5a:	4b2b      	ldr	r3, [pc, #172]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ae60:	4b29      	ldr	r3, [pc, #164]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae62:	0018      	movs	r0, r3
 800ae64:	f007 fefe 	bl	8012c64 <HAL_TIM_PWM_Init>
 800ae68:	1e03      	subs	r3, r0, #0
 800ae6a:	d001      	beq.n	800ae70 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800ae6c:	f7fc fa2e 	bl	80072cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae70:	2110      	movs	r1, #16
 800ae72:	187b      	adds	r3, r7, r1
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae78:	187b      	adds	r3, r7, r1
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ae7e:	187a      	adds	r2, r7, r1
 800ae80:	4b21      	ldr	r3, [pc, #132]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800ae82:	0011      	movs	r1, r2
 800ae84:	0018      	movs	r0, r3
 800ae86:	f008 fa0b 	bl	80132a0 <HAL_TIMEx_MasterConfigSynchronization>
 800ae8a:	1e03      	subs	r3, r0, #0
 800ae8c:	d001      	beq.n	800ae92 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800ae8e:	f7fc fa1d 	bl	80072cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ae92:	003b      	movs	r3, r7
 800ae94:	2260      	movs	r2, #96	@ 0x60
 800ae96:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800ae98:	003b      	movs	r3, r7
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ae9e:	003b      	movs	r3, r7
 800aea0:	2200      	movs	r2, #0
 800aea2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aea4:	003b      	movs	r3, r7
 800aea6:	2200      	movs	r2, #0
 800aea8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aeaa:	0039      	movs	r1, r7
 800aeac:	4b16      	ldr	r3, [pc, #88]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	f007 ffa9 	bl	8012e08 <HAL_TIM_PWM_ConfigChannel>
 800aeb6:	1e03      	subs	r3, r0, #0
 800aeb8:	d001      	beq.n	800aebe <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800aeba:	f7fc fa07 	bl	80072cc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800aebe:	4b12      	ldr	r3, [pc, #72]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800aec0:	2104      	movs	r1, #4
 800aec2:	0018      	movs	r0, r3
 800aec4:	f008 fa4a 	bl	801335c <HAL_TIMEx_RemapConfig>
 800aec8:	1e03      	subs	r3, r0, #0
 800aeca:	d001      	beq.n	800aed0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800aecc:	f7fc f9fe 	bl	80072cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800aed0:	0039      	movs	r1, r7
 800aed2:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800aed4:	2204      	movs	r2, #4
 800aed6:	0018      	movs	r0, r3
 800aed8:	f007 ff96 	bl	8012e08 <HAL_TIM_PWM_ConfigChannel>
 800aedc:	1e03      	subs	r3, r0, #0
 800aede:	d001      	beq.n	800aee4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800aee0:	f7fc f9f4 	bl	80072cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800aee4:	0039      	movs	r1, r7
 800aee6:	4b08      	ldr	r3, [pc, #32]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800aee8:	2208      	movs	r2, #8
 800aeea:	0018      	movs	r0, r3
 800aeec:	f007 ff8c 	bl	8012e08 <HAL_TIM_PWM_ConfigChannel>
 800aef0:	1e03      	subs	r3, r0, #0
 800aef2:	d001      	beq.n	800aef8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800aef4:	f7fc f9ea 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800aef8:	4b03      	ldr	r3, [pc, #12]	@ (800af08 <MX_TIM3_Init+0xf0>)
 800aefa:	0018      	movs	r0, r3
 800aefc:	f000 f882 	bl	800b004 <HAL_TIM_MspPostInit>

}
 800af00:	46c0      	nop			@ (mov r8, r8)
 800af02:	46bd      	mov	sp, r7
 800af04:	b006      	add	sp, #24
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20002150 	.word	0x20002150
 800af0c:	40000400 	.word	0x40000400
 800af10:	0000ffff 	.word	0x0000ffff

0800af14 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af1a:	003b      	movs	r3, r7
 800af1c:	0018      	movs	r0, r3
 800af1e:	2308      	movs	r3, #8
 800af20:	001a      	movs	r2, r3
 800af22:	2100      	movs	r1, #0
 800af24:	f010 fede 	bl	801bce4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800af28:	4b15      	ldr	r3, [pc, #84]	@ (800af80 <MX_TIM6_Init+0x6c>)
 800af2a:	4a16      	ldr	r2, [pc, #88]	@ (800af84 <MX_TIM6_Init+0x70>)
 800af2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800af2e:	4b14      	ldr	r3, [pc, #80]	@ (800af80 <MX_TIM6_Init+0x6c>)
 800af30:	220a      	movs	r2, #10
 800af32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af34:	4b12      	ldr	r3, [pc, #72]	@ (800af80 <MX_TIM6_Init+0x6c>)
 800af36:	2200      	movs	r2, #0
 800af38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800af3a:	4b11      	ldr	r3, [pc, #68]	@ (800af80 <MX_TIM6_Init+0x6c>)
 800af3c:	4a12      	ldr	r2, [pc, #72]	@ (800af88 <MX_TIM6_Init+0x74>)
 800af3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af40:	4b0f      	ldr	r3, [pc, #60]	@ (800af80 <MX_TIM6_Init+0x6c>)
 800af42:	2200      	movs	r2, #0
 800af44:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800af46:	4b0e      	ldr	r3, [pc, #56]	@ (800af80 <MX_TIM6_Init+0x6c>)
 800af48:	0018      	movs	r0, r3
 800af4a:	f007 fde3 	bl	8012b14 <HAL_TIM_Base_Init>
 800af4e:	1e03      	subs	r3, r0, #0
 800af50:	d001      	beq.n	800af56 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800af52:	f7fc f9bb 	bl	80072cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af56:	003b      	movs	r3, r7
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af5c:	003b      	movs	r3, r7
 800af5e:	2200      	movs	r2, #0
 800af60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800af62:	003a      	movs	r2, r7
 800af64:	4b06      	ldr	r3, [pc, #24]	@ (800af80 <MX_TIM6_Init+0x6c>)
 800af66:	0011      	movs	r1, r2
 800af68:	0018      	movs	r0, r3
 800af6a:	f008 f999 	bl	80132a0 <HAL_TIMEx_MasterConfigSynchronization>
 800af6e:	1e03      	subs	r3, r0, #0
 800af70:	d001      	beq.n	800af76 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800af72:	f7fc f9ab 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800af76:	46c0      	nop			@ (mov r8, r8)
 800af78:	46bd      	mov	sp, r7
 800af7a:	b002      	add	sp, #8
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	46c0      	nop			@ (mov r8, r8)
 800af80:	20002190 	.word	0x20002190
 800af84:	40001000 	.word	0x40001000
 800af88:	0000ffff 	.word	0x0000ffff

0800af8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	2380      	movs	r3, #128	@ 0x80
 800af9a:	05db      	lsls	r3, r3, #23
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d106      	bne.n	800afae <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800afa0:	4b0a      	ldr	r3, [pc, #40]	@ (800afcc <HAL_TIM_PWM_MspInit+0x40>)
 800afa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afa4:	4b09      	ldr	r3, [pc, #36]	@ (800afcc <HAL_TIM_PWM_MspInit+0x40>)
 800afa6:	2101      	movs	r1, #1
 800afa8:	430a      	orrs	r2, r1
 800afaa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800afac:	e00a      	b.n	800afc4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a07      	ldr	r2, [pc, #28]	@ (800afd0 <HAL_TIM_PWM_MspInit+0x44>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d105      	bne.n	800afc4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800afb8:	4b04      	ldr	r3, [pc, #16]	@ (800afcc <HAL_TIM_PWM_MspInit+0x40>)
 800afba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afbc:	4b03      	ldr	r3, [pc, #12]	@ (800afcc <HAL_TIM_PWM_MspInit+0x40>)
 800afbe:	2102      	movs	r1, #2
 800afc0:	430a      	orrs	r2, r1
 800afc2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800afc4:	46c0      	nop			@ (mov r8, r8)
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b002      	add	sp, #8
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	40021000 	.word	0x40021000
 800afd0:	40000400 	.word	0x40000400

0800afd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a06      	ldr	r2, [pc, #24]	@ (800affc <HAL_TIM_Base_MspInit+0x28>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d105      	bne.n	800aff2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800afe6:	4b06      	ldr	r3, [pc, #24]	@ (800b000 <HAL_TIM_Base_MspInit+0x2c>)
 800afe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afea:	4b05      	ldr	r3, [pc, #20]	@ (800b000 <HAL_TIM_Base_MspInit+0x2c>)
 800afec:	2110      	movs	r1, #16
 800afee:	430a      	orrs	r2, r1
 800aff0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800aff2:	46c0      	nop			@ (mov r8, r8)
 800aff4:	46bd      	mov	sp, r7
 800aff6:	b002      	add	sp, #8
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	46c0      	nop			@ (mov r8, r8)
 800affc:	40001000 	.word	0x40001000
 800b000:	40021000 	.word	0x40021000

0800b004 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b004:	b590      	push	{r4, r7, lr}
 800b006:	b08b      	sub	sp, #44	@ 0x2c
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b00c:	2414      	movs	r4, #20
 800b00e:	193b      	adds	r3, r7, r4
 800b010:	0018      	movs	r0, r3
 800b012:	2314      	movs	r3, #20
 800b014:	001a      	movs	r2, r3
 800b016:	2100      	movs	r1, #0
 800b018:	f010 fe64 	bl	801bce4 <memset>
  if(timHandle->Instance==TIM2)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	2380      	movs	r3, #128	@ 0x80
 800b022:	05db      	lsls	r3, r3, #23
 800b024:	429a      	cmp	r2, r3
 800b026:	d123      	bne.n	800b070 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b028:	4b27      	ldr	r3, [pc, #156]	@ (800b0c8 <HAL_TIM_MspPostInit+0xc4>)
 800b02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b02c:	4b26      	ldr	r3, [pc, #152]	@ (800b0c8 <HAL_TIM_MspPostInit+0xc4>)
 800b02e:	2101      	movs	r1, #1
 800b030:	430a      	orrs	r2, r1
 800b032:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b034:	4b24      	ldr	r3, [pc, #144]	@ (800b0c8 <HAL_TIM_MspPostInit+0xc4>)
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	2201      	movs	r2, #1
 800b03a:	4013      	ands	r3, r2
 800b03c:	613b      	str	r3, [r7, #16]
 800b03e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800b040:	0021      	movs	r1, r4
 800b042:	187b      	adds	r3, r7, r1
 800b044:	220d      	movs	r2, #13
 800b046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b048:	187b      	adds	r3, r7, r1
 800b04a:	2202      	movs	r2, #2
 800b04c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b04e:	187b      	adds	r3, r7, r1
 800b050:	2200      	movs	r2, #0
 800b052:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b054:	187b      	adds	r3, r7, r1
 800b056:	2200      	movs	r2, #0
 800b058:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800b05a:	187b      	adds	r3, r7, r1
 800b05c:	2202      	movs	r2, #2
 800b05e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b060:	187a      	adds	r2, r7, r1
 800b062:	23a0      	movs	r3, #160	@ 0xa0
 800b064:	05db      	lsls	r3, r3, #23
 800b066:	0011      	movs	r1, r2
 800b068:	0018      	movs	r0, r3
 800b06a:	f001 feb9 	bl	800cde0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b06e:	e027      	b.n	800b0c0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a15      	ldr	r2, [pc, #84]	@ (800b0cc <HAL_TIM_MspPostInit+0xc8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d122      	bne.n	800b0c0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b07a:	4b13      	ldr	r3, [pc, #76]	@ (800b0c8 <HAL_TIM_MspPostInit+0xc4>)
 800b07c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b07e:	4b12      	ldr	r3, [pc, #72]	@ (800b0c8 <HAL_TIM_MspPostInit+0xc4>)
 800b080:	2104      	movs	r1, #4
 800b082:	430a      	orrs	r2, r1
 800b084:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b086:	4b10      	ldr	r3, [pc, #64]	@ (800b0c8 <HAL_TIM_MspPostInit+0xc4>)
 800b088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b08a:	2204      	movs	r2, #4
 800b08c:	4013      	ands	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800b092:	2114      	movs	r1, #20
 800b094:	187b      	adds	r3, r7, r1
 800b096:	22e0      	movs	r2, #224	@ 0xe0
 800b098:	0052      	lsls	r2, r2, #1
 800b09a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b09c:	187b      	adds	r3, r7, r1
 800b09e:	2202      	movs	r2, #2
 800b0a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a2:	187b      	adds	r3, r7, r1
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0a8:	187b      	adds	r3, r7, r1
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b0ae:	187b      	adds	r3, r7, r1
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0b4:	187b      	adds	r3, r7, r1
 800b0b6:	4a06      	ldr	r2, [pc, #24]	@ (800b0d0 <HAL_TIM_MspPostInit+0xcc>)
 800b0b8:	0019      	movs	r1, r3
 800b0ba:	0010      	movs	r0, r2
 800b0bc:	f001 fe90 	bl	800cde0 <HAL_GPIO_Init>
}
 800b0c0:	46c0      	nop			@ (mov r8, r8)
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	b00b      	add	sp, #44	@ 0x2c
 800b0c6:	bd90      	pop	{r4, r7, pc}
 800b0c8:	40021000 	.word	0x40021000
 800b0cc:	40000400 	.word	0x40000400
 800b0d0:	50000800 	.word	0x50000800

0800b0d4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800b0d8:	4b17      	ldr	r3, [pc, #92]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b0da:	4a18      	ldr	r2, [pc, #96]	@ (800b13c <MX_LPUART1_UART_Init+0x68>)
 800b0dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800b0de:	4b16      	ldr	r3, [pc, #88]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b0e0:	22e1      	movs	r2, #225	@ 0xe1
 800b0e2:	0252      	lsls	r2, r2, #9
 800b0e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b0e6:	4b14      	ldr	r3, [pc, #80]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800b0ec:	4b12      	ldr	r3, [pc, #72]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800b0f2:	4b11      	ldr	r3, [pc, #68]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800b0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b0fa:	220c      	movs	r2, #12
 800b0fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b100:	2200      	movs	r2, #0
 800b102:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b104:	4b0c      	ldr	r3, [pc, #48]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b106:	2200      	movs	r2, #0
 800b108:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800b10a:	4b0b      	ldr	r3, [pc, #44]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b10c:	2218      	movs	r2, #24
 800b10e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b110:	4b09      	ldr	r3, [pc, #36]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b112:	2280      	movs	r2, #128	@ 0x80
 800b114:	0212      	lsls	r2, r2, #8
 800b116:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800b118:	4b07      	ldr	r3, [pc, #28]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b11a:	2280      	movs	r2, #128	@ 0x80
 800b11c:	0152      	lsls	r2, r2, #5
 800b11e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800b120:	4b05      	ldr	r3, [pc, #20]	@ (800b138 <MX_LPUART1_UART_Init+0x64>)
 800b122:	0018      	movs	r0, r3
 800b124:	f008 f938 	bl	8013398 <HAL_UART_Init>
 800b128:	1e03      	subs	r3, r0, #0
 800b12a:	d001      	beq.n	800b130 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800b12c:	f7fc f8ce 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800b130:	46c0      	nop			@ (mov r8, r8)
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	46c0      	nop			@ (mov r8, r8)
 800b138:	200021d0 	.word	0x200021d0
 800b13c:	40004800 	.word	0x40004800

0800b140 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b144:	4b16      	ldr	r3, [pc, #88]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b146:	4a17      	ldr	r2, [pc, #92]	@ (800b1a4 <MX_USART1_UART_Init+0x64>)
 800b148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b14a:	4b15      	ldr	r3, [pc, #84]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b14c:	22e1      	movs	r2, #225	@ 0xe1
 800b14e:	0252      	lsls	r2, r2, #9
 800b150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b152:	4b13      	ldr	r3, [pc, #76]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b154:	2200      	movs	r2, #0
 800b156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b158:	4b11      	ldr	r3, [pc, #68]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b15e:	4b10      	ldr	r3, [pc, #64]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b160:	2200      	movs	r2, #0
 800b162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b164:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b166:	220c      	movs	r2, #12
 800b168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b16a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b170:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b172:	2200      	movs	r2, #0
 800b174:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b176:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b178:	2200      	movs	r2, #0
 800b17a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800b17c:	4b08      	ldr	r3, [pc, #32]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b17e:	2208      	movs	r2, #8
 800b180:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b182:	4b07      	ldr	r3, [pc, #28]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b184:	2280      	movs	r2, #128	@ 0x80
 800b186:	0212      	lsls	r2, r2, #8
 800b188:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b18a:	4b05      	ldr	r3, [pc, #20]	@ (800b1a0 <MX_USART1_UART_Init+0x60>)
 800b18c:	0018      	movs	r0, r3
 800b18e:	f008 f903 	bl	8013398 <HAL_UART_Init>
 800b192:	1e03      	subs	r3, r0, #0
 800b194:	d001      	beq.n	800b19a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800b196:	f7fc f899 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b19a:	46c0      	nop			@ (mov r8, r8)
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20002288 	.word	0x20002288
 800b1a4:	40013800 	.word	0x40013800

0800b1a8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800b1ac:	4b14      	ldr	r3, [pc, #80]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1ae:	4a15      	ldr	r2, [pc, #84]	@ (800b204 <MX_USART4_UART_Init+0x5c>)
 800b1b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b1b2:	4b13      	ldr	r3, [pc, #76]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1b4:	22e1      	movs	r2, #225	@ 0xe1
 800b1b6:	0252      	lsls	r2, r2, #9
 800b1b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b1ba:	4b11      	ldr	r3, [pc, #68]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b1c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b1c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1ce:	220c      	movs	r2, #12
 800b1d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1d8:	4b09      	ldr	r3, [pc, #36]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b1de:	4b08      	ldr	r3, [pc, #32]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b1e4:	4b06      	ldr	r3, [pc, #24]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b1ea:	4b05      	ldr	r3, [pc, #20]	@ (800b200 <MX_USART4_UART_Init+0x58>)
 800b1ec:	0018      	movs	r0, r3
 800b1ee:	f008 f8d3 	bl	8013398 <HAL_UART_Init>
 800b1f2:	1e03      	subs	r3, r0, #0
 800b1f4:	d001      	beq.n	800b1fa <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800b1f6:	f7fc f869 	bl	80072cc <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800b1fa:	46c0      	nop			@ (mov r8, r8)
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	20002340 	.word	0x20002340
 800b204:	40004c00 	.word	0x40004c00

0800b208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b08d      	sub	sp, #52	@ 0x34
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b210:	241c      	movs	r4, #28
 800b212:	193b      	adds	r3, r7, r4
 800b214:	0018      	movs	r0, r3
 800b216:	2314      	movs	r3, #20
 800b218:	001a      	movs	r2, r3
 800b21a:	2100      	movs	r1, #0
 800b21c:	f010 fd62 	bl	801bce4 <memset>
  if(uartHandle->Instance==LPUART1)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a87      	ldr	r2, [pc, #540]	@ (800b444 <HAL_UART_MspInit+0x23c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d129      	bne.n	800b27e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800b22a:	4b87      	ldr	r3, [pc, #540]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b22c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b22e:	4b86      	ldr	r3, [pc, #536]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b230:	2180      	movs	r1, #128	@ 0x80
 800b232:	02c9      	lsls	r1, r1, #11
 800b234:	430a      	orrs	r2, r1
 800b236:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b238:	4b83      	ldr	r3, [pc, #524]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b23a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b23c:	4b82      	ldr	r3, [pc, #520]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b23e:	2104      	movs	r1, #4
 800b240:	430a      	orrs	r2, r1
 800b242:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b244:	4b80      	ldr	r3, [pc, #512]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b248:	2204      	movs	r2, #4
 800b24a:	4013      	ands	r3, r2
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b250:	0021      	movs	r1, r4
 800b252:	187b      	adds	r3, r7, r1
 800b254:	2203      	movs	r2, #3
 800b256:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b258:	187b      	adds	r3, r7, r1
 800b25a:	2202      	movs	r2, #2
 800b25c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25e:	187b      	adds	r3, r7, r1
 800b260:	2200      	movs	r2, #0
 800b262:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b264:	187b      	adds	r3, r7, r1
 800b266:	2203      	movs	r2, #3
 800b268:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800b26a:	187b      	adds	r3, r7, r1
 800b26c:	2206      	movs	r2, #6
 800b26e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b270:	187b      	adds	r3, r7, r1
 800b272:	4a76      	ldr	r2, [pc, #472]	@ (800b44c <HAL_UART_MspInit+0x244>)
 800b274:	0019      	movs	r1, r3
 800b276:	0010      	movs	r0, r2
 800b278:	f001 fdb2 	bl	800cde0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800b27c:	e0dd      	b.n	800b43a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a73      	ldr	r2, [pc, #460]	@ (800b450 <HAL_UART_MspInit+0x248>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d12b      	bne.n	800b2e0 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b288:	4b6f      	ldr	r3, [pc, #444]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b28c:	4b6e      	ldr	r3, [pc, #440]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b28e:	2180      	movs	r1, #128	@ 0x80
 800b290:	01c9      	lsls	r1, r1, #7
 800b292:	430a      	orrs	r2, r1
 800b294:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b296:	4b6c      	ldr	r3, [pc, #432]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29a:	4b6b      	ldr	r3, [pc, #428]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b29c:	2101      	movs	r1, #1
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b2a2:	4b69      	ldr	r3, [pc, #420]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b2ae:	211c      	movs	r1, #28
 800b2b0:	187b      	adds	r3, r7, r1
 800b2b2:	22c0      	movs	r2, #192	@ 0xc0
 800b2b4:	00d2      	lsls	r2, r2, #3
 800b2b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2b8:	187b      	adds	r3, r7, r1
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2be:	187b      	adds	r3, r7, r1
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2c4:	187b      	adds	r3, r7, r1
 800b2c6:	2203      	movs	r2, #3
 800b2c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800b2ca:	187b      	adds	r3, r7, r1
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2d0:	187a      	adds	r2, r7, r1
 800b2d2:	23a0      	movs	r3, #160	@ 0xa0
 800b2d4:	05db      	lsls	r3, r3, #23
 800b2d6:	0011      	movs	r1, r2
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f001 fd81 	bl	800cde0 <HAL_GPIO_Init>
}
 800b2de:	e0ac      	b.n	800b43a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a5b      	ldr	r2, [pc, #364]	@ (800b454 <HAL_UART_MspInit+0x24c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d000      	beq.n	800b2ec <HAL_UART_MspInit+0xe4>
 800b2ea:	e0a6      	b.n	800b43a <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 800b2ec:	4b56      	ldr	r3, [pc, #344]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b2ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2f0:	4b55      	ldr	r3, [pc, #340]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b2f2:	2180      	movs	r1, #128	@ 0x80
 800b2f4:	0309      	lsls	r1, r1, #12
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2fa:	4b53      	ldr	r3, [pc, #332]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fe:	4b52      	ldr	r3, [pc, #328]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b300:	2101      	movs	r1, #1
 800b302:	430a      	orrs	r2, r1
 800b304:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b306:	4b50      	ldr	r3, [pc, #320]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30a:	2201      	movs	r2, #1
 800b30c:	4013      	ands	r3, r2
 800b30e:	613b      	str	r3, [r7, #16]
 800b310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b312:	4b4d      	ldr	r3, [pc, #308]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b316:	4b4c      	ldr	r3, [pc, #304]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b318:	2104      	movs	r1, #4
 800b31a:	430a      	orrs	r2, r1
 800b31c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b31e:	4b4a      	ldr	r3, [pc, #296]	@ (800b448 <HAL_UART_MspInit+0x240>)
 800b320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b322:	2204      	movs	r2, #4
 800b324:	4013      	ands	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b32a:	241c      	movs	r4, #28
 800b32c:	193b      	adds	r3, r7, r4
 800b32e:	2202      	movs	r2, #2
 800b330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b332:	193b      	adds	r3, r7, r4
 800b334:	2202      	movs	r2, #2
 800b336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b338:	193b      	adds	r3, r7, r4
 800b33a:	2200      	movs	r2, #0
 800b33c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b33e:	193b      	adds	r3, r7, r4
 800b340:	2203      	movs	r2, #3
 800b342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b344:	193b      	adds	r3, r7, r4
 800b346:	2206      	movs	r2, #6
 800b348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b34a:	193a      	adds	r2, r7, r4
 800b34c:	23a0      	movs	r3, #160	@ 0xa0
 800b34e:	05db      	lsls	r3, r3, #23
 800b350:	0011      	movs	r1, r2
 800b352:	0018      	movs	r0, r3
 800b354:	f001 fd44 	bl	800cde0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b358:	0021      	movs	r1, r4
 800b35a:	187b      	adds	r3, r7, r1
 800b35c:	2280      	movs	r2, #128	@ 0x80
 800b35e:	00d2      	lsls	r2, r2, #3
 800b360:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b362:	187b      	adds	r3, r7, r1
 800b364:	2202      	movs	r2, #2
 800b366:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b368:	187b      	adds	r3, r7, r1
 800b36a:	2200      	movs	r2, #0
 800b36c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b36e:	187b      	adds	r3, r7, r1
 800b370:	2203      	movs	r2, #3
 800b372:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b374:	187b      	adds	r3, r7, r1
 800b376:	2206      	movs	r2, #6
 800b378:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b37a:	187b      	adds	r3, r7, r1
 800b37c:	4a33      	ldr	r2, [pc, #204]	@ (800b44c <HAL_UART_MspInit+0x244>)
 800b37e:	0019      	movs	r1, r3
 800b380:	0010      	movs	r0, r2
 800b382:	f001 fd2d 	bl	800cde0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800b386:	4b34      	ldr	r3, [pc, #208]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b388:	4a34      	ldr	r2, [pc, #208]	@ (800b45c <HAL_UART_MspInit+0x254>)
 800b38a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800b38c:	4b32      	ldr	r3, [pc, #200]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b38e:	220c      	movs	r2, #12
 800b390:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b392:	4b31      	ldr	r3, [pc, #196]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b394:	2200      	movs	r2, #0
 800b396:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b398:	4b2f      	ldr	r3, [pc, #188]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b39e:	4b2e      	ldr	r3, [pc, #184]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3a0:	2280      	movs	r2, #128	@ 0x80
 800b3a2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b3a4:	4b2c      	ldr	r3, [pc, #176]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b3aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800b3b0:	4b29      	ldr	r3, [pc, #164]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3b2:	2220      	movs	r2, #32
 800b3b4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b3b6:	4b28      	ldr	r3, [pc, #160]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800b3bc:	4b26      	ldr	r3, [pc, #152]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3be:	0018      	movs	r0, r3
 800b3c0:	f001 f8f2 	bl	800c5a8 <HAL_DMA_Init>
 800b3c4:	1e03      	subs	r3, r0, #0
 800b3c6:	d001      	beq.n	800b3cc <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 800b3c8:	f7fb ff80 	bl	80072cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a22      	ldr	r2, [pc, #136]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3d0:	675a      	str	r2, [r3, #116]	@ 0x74
 800b3d2:	4b21      	ldr	r3, [pc, #132]	@ (800b458 <HAL_UART_MspInit+0x250>)
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800b3d8:	4b21      	ldr	r3, [pc, #132]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b3da:	4a22      	ldr	r2, [pc, #136]	@ (800b464 <HAL_UART_MspInit+0x25c>)
 800b3dc:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800b3de:	4b20      	ldr	r3, [pc, #128]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b3e0:	220c      	movs	r2, #12
 800b3e2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b3e4:	4b1e      	ldr	r3, [pc, #120]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b3e6:	2210      	movs	r2, #16
 800b3e8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b3ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b3f0:	4b1b      	ldr	r3, [pc, #108]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b3f2:	2280      	movs	r2, #128	@ 0x80
 800b3f4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b3fc:	4b18      	ldr	r3, [pc, #96]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800b402:	4b17      	ldr	r3, [pc, #92]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b404:	2200      	movs	r2, #0
 800b406:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b408:	4b15      	ldr	r3, [pc, #84]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800b40e:	4b14      	ldr	r3, [pc, #80]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b410:	0018      	movs	r0, r3
 800b412:	f001 f8c9 	bl	800c5a8 <HAL_DMA_Init>
 800b416:	1e03      	subs	r3, r0, #0
 800b418:	d001      	beq.n	800b41e <HAL_UART_MspInit+0x216>
      Error_Handler();
 800b41a:	f7fb ff57 	bl	80072cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a0f      	ldr	r2, [pc, #60]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b422:	671a      	str	r2, [r3, #112]	@ 0x70
 800b424:	4b0e      	ldr	r3, [pc, #56]	@ (800b460 <HAL_UART_MspInit+0x258>)
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	200e      	movs	r0, #14
 800b430:	f001 f888 	bl	800c544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800b434:	200e      	movs	r0, #14
 800b436:	f001 f89a 	bl	800c56e <HAL_NVIC_EnableIRQ>
}
 800b43a:	46c0      	nop			@ (mov r8, r8)
 800b43c:	46bd      	mov	sp, r7
 800b43e:	b00d      	add	sp, #52	@ 0x34
 800b440:	bd90      	pop	{r4, r7, pc}
 800b442:	46c0      	nop			@ (mov r8, r8)
 800b444:	40004800 	.word	0x40004800
 800b448:	40021000 	.word	0x40021000
 800b44c:	50000800 	.word	0x50000800
 800b450:	40013800 	.word	0x40013800
 800b454:	40004c00 	.word	0x40004c00
 800b458:	200023f8 	.word	0x200023f8
 800b45c:	4002006c 	.word	0x4002006c
 800b460:	20002440 	.word	0x20002440
 800b464:	40020080 	.word	0x40020080

0800b468 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 80

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800b470:	f000 fbf2 	bl	800bc58 <HAL_GetTick>
 800b474:	0003      	movs	r3, r0
 800b476:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800b478:	4b1c      	ldr	r3, [pc, #112]	@ (800b4ec <TimestampIsReached+0x84>)
 800b47a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	429a      	cmp	r2, r3
 800b482:	d307      	bcc.n	800b494 <TimestampIsReached+0x2c>
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d901      	bls.n	800b494 <TimestampIsReached+0x2c>
 800b490:	2201      	movs	r2, #1
 800b492:	e000      	b.n	800b496 <TimestampIsReached+0x2e>
 800b494:	2200      	movs	r2, #0
 800b496:	230f      	movs	r3, #15
 800b498:	18fb      	adds	r3, r7, r3
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	781a      	ldrb	r2, [r3, #0]
 800b49e:	2101      	movs	r1, #1
 800b4a0:	400a      	ands	r2, r1
 800b4a2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d207      	bcs.n	800b4bc <TimestampIsReached+0x54>
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d201      	bcs.n	800b4bc <TimestampIsReached+0x54>
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	e000      	b.n	800b4be <TimestampIsReached+0x56>
 800b4bc:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800b4be:	200e      	movs	r0, #14
 800b4c0:	183b      	adds	r3, r7, r0
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	781a      	ldrb	r2, [r3, #0]
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	400a      	ands	r2, r1
 800b4ca:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800b4cc:	230f      	movs	r3, #15
 800b4ce:	18fb      	adds	r3, r7, r3
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d103      	bne.n	800b4de <TimestampIsReached+0x76>
 800b4d6:	183b      	adds	r3, r7, r0
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e000      	b.n	800b4e4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	b006      	add	sp, #24
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	7fffffff 	.word	0x7fffffff

0800b4f0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800b4f8:	f000 fbae 	bl	800bc58 <HAL_GetTick>
 800b4fc:	0002      	movs	r2, r0
 800b4fe:	4904      	ldr	r1, [pc, #16]	@ (800b510 <AddTimestamp+0x20>)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	0018      	movs	r0, r3
 800b504:	f010 fb4a 	bl	801bb9c <siprintf>
}
 800b508:	46c0      	nop			@ (mov r8, r8)
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b002      	add	sp, #8
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	0801fb60 	.word	0x0801fb60

0800b514 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800b514:	b40c      	push	{r2, r3}
 800b516:	b590      	push	{r4, r7, lr}
 800b518:	b099      	sub	sp, #100	@ 0x64
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	0002      	movs	r2, r0
 800b51e:	6039      	str	r1, [r7, #0]
 800b520:	1dfb      	adds	r3, r7, #7
 800b522:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800b524:	4b1f      	ldr	r3, [pc, #124]	@ (800b5a4 <CreateLine+0x90>)
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	1dfa      	adds	r2, r7, #7
 800b52a:	7812      	ldrb	r2, [r2, #0]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d832      	bhi.n	800b596 <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	491d      	ldr	r1, [pc, #116]	@ (800b5a8 <CreateLine+0x94>)
 800b534:	240c      	movs	r4, #12
 800b536:	193b      	adds	r3, r7, r4
 800b538:	0018      	movs	r0, r3
 800b53a:	f010 fb2f 	bl	801bb9c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800b53e:	4b19      	ldr	r3, [pc, #100]	@ (800b5a4 <CreateLine+0x90>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d909      	bls.n	800b55a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800b546:	193b      	adds	r3, r7, r4
 800b548:	0018      	movs	r0, r3
 800b54a:	f7f4 fe0f 	bl	800016c <strlen>
 800b54e:	0002      	movs	r2, r0
 800b550:	193b      	adds	r3, r7, r4
 800b552:	189b      	adds	r3, r3, r2
 800b554:	0018      	movs	r0, r3
 800b556:	f7ff ffcb 	bl	800b4f0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800b55a:	240c      	movs	r4, #12
 800b55c:	193b      	adds	r3, r7, r4
 800b55e:	0018      	movs	r0, r3
 800b560:	f7f4 fe04 	bl	800016c <strlen>
 800b564:	0003      	movs	r3, r0
 800b566:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800b568:	236c      	movs	r3, #108	@ 0x6c
 800b56a:	2208      	movs	r2, #8
 800b56c:	189b      	adds	r3, r3, r2
 800b56e:	19db      	adds	r3, r3, r7
 800b570:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800b572:	193a      	adds	r2, r7, r4
 800b574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b576:	18d0      	adds	r0, r2, r3
 800b578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b57a:	2250      	movs	r2, #80	@ 0x50
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	0019      	movs	r1, r3
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b584:	f010 fba2 	bl	801bccc <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800b588:	193a      	adds	r2, r7, r4
 800b58a:	4b08      	ldr	r3, [pc, #32]	@ (800b5ac <CreateLine+0x98>)
 800b58c:	0011      	movs	r1, r2
 800b58e:	0018      	movs	r0, r3
 800b590:	f010 faf4 	bl	801bb7c <iprintf>
 800b594:	e000      	b.n	800b598 <CreateLine+0x84>
    return;
 800b596:	46c0      	nop			@ (mov r8, r8)
}
 800b598:	46bd      	mov	sp, r7
 800b59a:	b019      	add	sp, #100	@ 0x64
 800b59c:	bc90      	pop	{r4, r7}
 800b59e:	bc08      	pop	{r3}
 800b5a0:	b002      	add	sp, #8
 800b5a2:	4718      	bx	r3
 800b5a4:	200000cc 	.word	0x200000cc
 800b5a8:	0801fb6c 	.word	0x0801fb6c
 800b5ac:	0801fb70 	.word	0x0801fb70

0800b5b0 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	68b9      	ldr	r1, [r7, #8]
 800b5c2:	4804      	ldr	r0, [pc, #16]	@ (800b5d4 <_write+0x24>)
 800b5c4:	2364      	movs	r3, #100	@ 0x64
 800b5c6:	f007 ff4d 	bl	8013464 <HAL_UART_Transmit>
  return count;
 800b5ca:	687b      	ldr	r3, [r7, #4]
}
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	b004      	add	sp, #16
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	20002288 	.word	0x20002288

0800b5d8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	0002      	movs	r2, r0
 800b5e0:	1dfb      	adds	r3, r7, #7
 800b5e2:	701a      	strb	r2, [r3, #0]
 800b5e4:	4b03      	ldr	r3, [pc, #12]	@ (800b5f4 <SetVerboseLevel+0x1c>)
 800b5e6:	1dfa      	adds	r2, r7, #7
 800b5e8:	7812      	ldrb	r2, [r2, #0]
 800b5ea:	701a      	strb	r2, [r3, #0]
 800b5ec:	46c0      	nop			@ (mov r8, r8)
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	b002      	add	sp, #8
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	200000cc 	.word	0x200000cc

0800b5f8 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b5fc:	f000 fb2c 	bl	800bc58 <HAL_GetTick>
 800b600:	0003      	movs	r3, r0
}
 800b602:	0018      	movs	r0, r3
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800b60e:	4a0f      	ldr	r2, [pc, #60]	@ (800b64c <BinaryReleaseInfo+0x44>)
 800b610:	4b0f      	ldr	r3, [pc, #60]	@ (800b650 <BinaryReleaseInfo+0x48>)
 800b612:	0019      	movs	r1, r3
 800b614:	2002      	movs	r0, #2
 800b616:	f7ff ff7d 	bl	800b514 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800b61a:	480e      	ldr	r0, [pc, #56]	@ (800b654 <BinaryReleaseInfo+0x4c>)
 800b61c:	4a0e      	ldr	r2, [pc, #56]	@ (800b658 <BinaryReleaseInfo+0x50>)
 800b61e:	490c      	ldr	r1, [pc, #48]	@ (800b650 <BinaryReleaseInfo+0x48>)
 800b620:	4b0e      	ldr	r3, [pc, #56]	@ (800b65c <BinaryReleaseInfo+0x54>)
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	0003      	movs	r3, r0
 800b626:	2002      	movs	r0, #2
 800b628:	f7ff ff74 	bl	800b514 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w47a");
 800b62c:	4a0c      	ldr	r2, [pc, #48]	@ (800b660 <BinaryReleaseInfo+0x58>)
 800b62e:	4b08      	ldr	r3, [pc, #32]	@ (800b650 <BinaryReleaseInfo+0x48>)
 800b630:	0019      	movs	r1, r3
 800b632:	2002      	movs	r0, #2
 800b634:	f7ff ff6e 	bl	800b514 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800b638:	4b0a      	ldr	r3, [pc, #40]	@ (800b664 <BinaryReleaseInfo+0x5c>)
 800b63a:	4a0b      	ldr	r2, [pc, #44]	@ (800b668 <BinaryReleaseInfo+0x60>)
 800b63c:	4904      	ldr	r1, [pc, #16]	@ (800b650 <BinaryReleaseInfo+0x48>)
 800b63e:	2002      	movs	r0, #2
 800b640:	f7ff ff68 	bl	800b514 <CreateLine>
}
 800b644:	46c0      	nop			@ (mov r8, r8)
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	46c0      	nop			@ (mov r8, r8)
 800b64c:	0801fb78 	.word	0x0801fb78
 800b650:	0801fba4 	.word	0x0801fba4
 800b654:	0801fba8 	.word	0x0801fba8
 800b658:	0801fbb4 	.word	0x0801fbb4
 800b65c:	0801fbc8 	.word	0x0801fbc8
 800b660:	0801fbd4 	.word	0x0801fbd4
 800b664:	0801fbe0 	.word	0x0801fbe0
 800b668:	0801fbe8 	.word	0x0801fbe8

0800b66c <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	68f9      	ldr	r1, [r7, #12]
 800b67e:	4803      	ldr	r0, [pc, #12]	@ (800b68c <errorHandler+0x20>)
 800b680:	f010 fa7c 	bl	801bb7c <iprintf>
//    while (true)
//    {
//    }
}
 800b684:	46c0      	nop			@ (mov r8, r8)
 800b686:	46bd      	mov	sp, r7
 800b688:	b004      	add	sp, #16
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	0801fc00 	.word	0x0801fc00

0800b690 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b690:	b590      	push	{r4, r7, lr}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6039      	str	r1, [r7, #0]
 800b698:	0011      	movs	r1, r2
 800b69a:	1dfb      	adds	r3, r7, #7
 800b69c:	1c02      	adds	r2, r0, #0
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	1dbb      	adds	r3, r7, #6
 800b6a2:	1c0a      	adds	r2, r1, #0
 800b6a4:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800b6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d0 <ReadRegister+0x40>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800b6ae:	4b08      	ldr	r3, [pc, #32]	@ (800b6d0 <ReadRegister+0x40>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	1dba      	adds	r2, r7, #6
 800b6b4:	7814      	ldrb	r4, [r2, #0]
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	1dfa      	adds	r2, r7, #7
 800b6ba:	7810      	ldrb	r0, [r2, #0]
 800b6bc:	0022      	movs	r2, r4
 800b6be:	4798      	blx	r3
 800b6c0:	0003      	movs	r3, r0
 800b6c2:	e000      	b.n	800b6c6 <ReadRegister+0x36>
	}
	return false;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	0018      	movs	r0, r3
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	b003      	add	sp, #12
 800b6cc:	bd90      	pop	{r4, r7, pc}
 800b6ce:	46c0      	nop			@ (mov r8, r8)
 800b6d0:	20002488 	.word	0x20002488

0800b6d4 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b6d4:	b590      	push	{r4, r7, lr}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6039      	str	r1, [r7, #0]
 800b6dc:	0011      	movs	r1, r2
 800b6de:	1dfb      	adds	r3, r7, #7
 800b6e0:	1c02      	adds	r2, r0, #0
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	1dbb      	adds	r3, r7, #6
 800b6e6:	1c0a      	adds	r2, r1, #0
 800b6e8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b714 <WriteRegister+0x40>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800b6f2:	4b08      	ldr	r3, [pc, #32]	@ (800b714 <WriteRegister+0x40>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	1dba      	adds	r2, r7, #6
 800b6f8:	7814      	ldrb	r4, [r2, #0]
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	1dfa      	adds	r2, r7, #7
 800b6fe:	7810      	ldrb	r0, [r2, #0]
 800b700:	0022      	movs	r2, r4
 800b702:	4798      	blx	r3
 800b704:	0003      	movs	r3, r0
 800b706:	e000      	b.n	800b70a <WriteRegister+0x36>
  }
  return false;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	0018      	movs	r0, r3
 800b70c:	46bd      	mov	sp, r7
 800b70e:	b003      	add	sp, #12
 800b710:	bd90      	pop	{r4, r7, pc}
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	2000248c 	.word	0x2000248c

0800b718 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	000a      	movs	r2, r1
 800b722:	1cfb      	adds	r3, r7, #3
 800b724:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800b726:	230f      	movs	r3, #15
 800b728:	18fb      	adds	r3, r7, r3
 800b72a:	22ff      	movs	r2, #255	@ 0xff
 800b72c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b72e:	230e      	movs	r3, #14
 800b730:	18fb      	adds	r3, r7, r3
 800b732:	2200      	movs	r2, #0
 800b734:	701a      	strb	r2, [r3, #0]
 800b736:	e037      	b.n	800b7a8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b738:	230e      	movs	r3, #14
 800b73a:	18fb      	adds	r3, r7, r3
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	18d3      	adds	r3, r2, r3
 800b742:	7819      	ldrb	r1, [r3, #0]
 800b744:	220f      	movs	r2, #15
 800b746:	18bb      	adds	r3, r7, r2
 800b748:	18ba      	adds	r2, r7, r2
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	404a      	eors	r2, r1
 800b74e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b750:	230d      	movs	r3, #13
 800b752:	18fb      	adds	r3, r7, r3
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e01b      	b.n	800b792 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800b75a:	210f      	movs	r1, #15
 800b75c:	187b      	adds	r3, r7, r1
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	b25b      	sxtb	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	da09      	bge.n	800b77a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800b766:	187b      	adds	r3, r7, r1
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	b25b      	sxtb	r3, r3
 800b76e:	2231      	movs	r2, #49	@ 0x31
 800b770:	4053      	eors	r3, r2
 800b772:	b25a      	sxtb	r2, r3
 800b774:	187b      	adds	r3, r7, r1
 800b776:	701a      	strb	r2, [r3, #0]
 800b778:	e005      	b.n	800b786 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800b77a:	230f      	movs	r3, #15
 800b77c:	18fa      	adds	r2, r7, r3
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	18db      	adds	r3, r3, r3
 800b784:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b786:	210d      	movs	r1, #13
 800b788:	187b      	adds	r3, r7, r1
 800b78a:	781a      	ldrb	r2, [r3, #0]
 800b78c:	187b      	adds	r3, r7, r1
 800b78e:	3201      	adds	r2, #1
 800b790:	701a      	strb	r2, [r3, #0]
 800b792:	230d      	movs	r3, #13
 800b794:	18fb      	adds	r3, r7, r3
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b07      	cmp	r3, #7
 800b79a:	d9de      	bls.n	800b75a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b79c:	210e      	movs	r1, #14
 800b79e:	187b      	adds	r3, r7, r1
 800b7a0:	781a      	ldrb	r2, [r3, #0]
 800b7a2:	187b      	adds	r3, r7, r1
 800b7a4:	3201      	adds	r2, #1
 800b7a6:	701a      	strb	r2, [r3, #0]
 800b7a8:	230e      	movs	r3, #14
 800b7aa:	18fa      	adds	r2, r7, r3
 800b7ac:	1cfb      	adds	r3, r7, #3
 800b7ae:	7812      	ldrb	r2, [r2, #0]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d3c0      	bcc.n	800b738 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800b7b6:	230f      	movs	r3, #15
 800b7b8:	18fb      	adds	r3, r7, r3
 800b7ba:	781b      	ldrb	r3, [r3, #0]
}
 800b7bc:	0018      	movs	r0, r3
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	b004      	add	sp, #16
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800b7ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f8 <HIDS_Init+0x34>)
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800b7d4:	4b09      	ldr	r3, [pc, #36]	@ (800b7fc <HIDS_Init+0x38>)
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800b7da:	4b09      	ldr	r3, [pc, #36]	@ (800b800 <HIDS_Init+0x3c>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	0018      	movs	r0, r3
 800b7e0:	f000 f8da 	bl	800b998 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800b7e4:	4b07      	ldr	r3, [pc, #28]	@ (800b804 <HIDS_Init+0x40>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f000 f82b 	bl	800b844 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800b7ee:	46c0      	nop			@ (mov r8, r8)
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	b002      	add	sp, #8
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	46c0      	nop			@ (mov r8, r8)
 800b7f8:	20002488 	.word	0x20002488
 800b7fc:	2000248c 	.word	0x2000248c
 800b800:	200000ce 	.word	0x200000ce
 800b804:	200000cd 	.word	0x200000cd

0800b808 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800b80c:	f7ff fef4 	bl	800b5f8 <GetCurrentHalTicks>
 800b810:	0002      	movs	r2, r0
 800b812:	4b08      	ldr	r3, [pc, #32]	@ (800b834 <HIDS_StartMeasurement+0x2c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	18d2      	adds	r2, r2, r3
 800b818:	4b07      	ldr	r3, [pc, #28]	@ (800b838 <HIDS_StartMeasurement+0x30>)
 800b81a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800b81c:	4b07      	ldr	r3, [pc, #28]	@ (800b83c <HIDS_StartMeasurement+0x34>)
 800b81e:	2201      	movs	r2, #1
 800b820:	0019      	movs	r1, r3
 800b822:	2044      	movs	r0, #68	@ 0x44
 800b824:	f7ff ff56 	bl	800b6d4 <WriteRegister>
  MeasurementDone = false;
 800b828:	4b05      	ldr	r3, [pc, #20]	@ (800b840 <HIDS_StartMeasurement+0x38>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
}
 800b82e:	46c0      	nop			@ (mov r8, r8)
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	200000d4 	.word	0x200000d4
 800b838:	200000d0 	.word	0x200000d0
 800b83c:	200000ce 	.word	0x200000ce
 800b840:	2000249e 	.word	0x2000249e

0800b844 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	0002      	movs	r2, r0
 800b84c:	1dfb      	adds	r3, r7, #7
 800b84e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800b850:	4b03      	ldr	r3, [pc, #12]	@ (800b860 <HIDS_SetHeaterMode+0x1c>)
 800b852:	1dfa      	adds	r2, r7, #7
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	701a      	strb	r2, [r3, #0]
}
 800b858:	46c0      	nop			@ (mov r8, r8)
 800b85a:	46bd      	mov	sp, r7
 800b85c:	b002      	add	sp, #8
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200000cd 	.word	0x200000cd

0800b864 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	781a      	ldrb	r2, [r3, #0]
 800b870:	210c      	movs	r1, #12
 800b872:	187b      	adds	r3, r7, r1
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	785a      	ldrb	r2, [r3, #1]
 800b87a:	187b      	adds	r3, r7, r1
 800b87c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800b87e:	240f      	movs	r4, #15
 800b880:	193b      	adds	r3, r7, r4
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	7892      	ldrb	r2, [r2, #2]
 800b886:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800b888:	187b      	adds	r3, r7, r1
 800b88a:	2102      	movs	r1, #2
 800b88c:	0018      	movs	r0, r3
 800b88e:	f7ff ff43 	bl	800b718 <CalculateCRC>
 800b892:	0003      	movs	r3, r0
 800b894:	001a      	movs	r2, r3
 800b896:	193b      	adds	r3, r7, r4
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d007      	beq.n	800b8ae <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800b89e:	4a1a      	ldr	r2, [pc, #104]	@ (800b908 <CheckCRC+0xa4>)
 800b8a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b90c <CheckCRC+0xa8>)
 800b8a2:	0019      	movs	r1, r3
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	f7ff fe35 	bl	800b514 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	e027      	b.n	800b8fe <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	78da      	ldrb	r2, [r3, #3]
 800b8b2:	2108      	movs	r1, #8
 800b8b4:	187b      	adds	r3, r7, r1
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	791a      	ldrb	r2, [r3, #4]
 800b8bc:	187b      	adds	r3, r7, r1
 800b8be:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800b8c0:	240e      	movs	r4, #14
 800b8c2:	193b      	adds	r3, r7, r4
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	7952      	ldrb	r2, [r2, #5]
 800b8c8:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800b8ca:	187b      	adds	r3, r7, r1
 800b8cc:	2102      	movs	r1, #2
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f7ff ff22 	bl	800b718 <CalculateCRC>
 800b8d4:	0003      	movs	r3, r0
 800b8d6:	001a      	movs	r2, r3
 800b8d8:	193b      	adds	r3, r7, r4
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d00d      	beq.n	800b8fc <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800b8e0:	4a0b      	ldr	r2, [pc, #44]	@ (800b910 <CheckCRC+0xac>)
 800b8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b90c <CheckCRC+0xa8>)
 800b8e4:	0019      	movs	r1, r3
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	f7ff fe14 	bl	800b514 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800b8ec:	4a09      	ldr	r2, [pc, #36]	@ (800b914 <CheckCRC+0xb0>)
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b918 <CheckCRC+0xb4>)
 800b8f0:	2170      	movs	r1, #112	@ 0x70
 800b8f2:	0018      	movs	r0, r3
 800b8f4:	f7ff feba 	bl	800b66c <errorHandler>
		return false;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e000      	b.n	800b8fe <CheckCRC+0x9a>
	}
	return true;
 800b8fc:	2301      	movs	r3, #1
}
 800b8fe:	0018      	movs	r0, r3
 800b900:	46bd      	mov	sp, r7
 800b902:	b005      	add	sp, #20
 800b904:	bd90      	pop	{r4, r7, pc}
 800b906:	46c0      	nop			@ (mov r8, r8)
 800b908:	0801fc4c 	.word	0x0801fc4c
 800b90c:	0801fc74 	.word	0x0801fc74
 800b910:	0801fc78 	.word	0x0801fc78
 800b914:	0801fca4 	.word	0x0801fca4
 800b918:	08020100 	.word	0x08020100

0800b91c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800b922:	1dbb      	adds	r3, r7, #6
 800b924:	2289      	movs	r2, #137	@ 0x89
 800b926:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800b928:	1dbb      	adds	r3, r7, #6
 800b92a:	2201      	movs	r2, #1
 800b92c:	0019      	movs	r1, r3
 800b92e:	2044      	movs	r0, #68	@ 0x44
 800b930:	f7ff fed0 	bl	800b6d4 <WriteRegister>
	HAL_Delay(30);
 800b934:	201e      	movs	r0, #30
 800b936:	f000 f999 	bl	800bc6c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800b93a:	4b14      	ldr	r3, [pc, #80]	@ (800b98c <HIDS_DeviceConnected+0x70>)
 800b93c:	2206      	movs	r2, #6
 800b93e:	0019      	movs	r1, r3
 800b940:	2044      	movs	r0, #68	@ 0x44
 800b942:	f7ff fea5 	bl	800b690 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800b946:	1dfb      	adds	r3, r7, #7
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
 800b94c:	e011      	b.n	800b972 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800b94e:	1dfb      	adds	r3, r7, #7
 800b950:	7818      	ldrb	r0, [r3, #0]
 800b952:	1dfb      	adds	r3, r7, #7
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	4a0d      	ldr	r2, [pc, #52]	@ (800b98c <HIDS_DeviceConnected+0x70>)
 800b958:	5cd3      	ldrb	r3, [r2, r3]
 800b95a:	4a0d      	ldr	r2, [pc, #52]	@ (800b990 <HIDS_DeviceConnected+0x74>)
 800b95c:	490d      	ldr	r1, [pc, #52]	@ (800b994 <HIDS_DeviceConnected+0x78>)
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	0003      	movs	r3, r0
 800b962:	2002      	movs	r0, #2
 800b964:	f7ff fdd6 	bl	800b514 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800b968:	1dfb      	adds	r3, r7, #7
 800b96a:	781a      	ldrb	r2, [r3, #0]
 800b96c:	1dfb      	adds	r3, r7, #7
 800b96e:	3201      	adds	r2, #1
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	1dfb      	adds	r3, r7, #7
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	2b05      	cmp	r3, #5
 800b978:	d9e9      	bls.n	800b94e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800b97a:	4b04      	ldr	r3, [pc, #16]	@ (800b98c <HIDS_DeviceConnected+0x70>)
 800b97c:	0018      	movs	r0, r3
 800b97e:	f7ff ff71 	bl	800b864 <CheckCRC>
 800b982:	0003      	movs	r3, r0
}
 800b984:	0018      	movs	r0, r3
 800b986:	46bd      	mov	sp, r7
 800b988:	b002      	add	sp, #8
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20002490 	.word	0x20002490
 800b990:	0801fcbc 	.word	0x0801fcbc
 800b994:	0801fc48 	.word	0x0801fc48

0800b998 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	0002      	movs	r2, r0
 800b9a0:	1dfb      	adds	r3, r7, #7
 800b9a2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800b9a4:	4b03      	ldr	r3, [pc, #12]	@ (800b9b4 <HIDS_SetMeasurementMode+0x1c>)
 800b9a6:	1dfa      	adds	r2, r7, #7
 800b9a8:	7812      	ldrb	r2, [r2, #0]
 800b9aa:	701a      	strb	r2, [r3, #0]
}
 800b9ac:	46c0      	nop			@ (mov r8, r8)
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b002      	add	sp, #8
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	200000ce 	.word	0x200000ce

0800b9b8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800b9bc:	4b04      	ldr	r3, [pc, #16]	@ (800b9d0 <HIDS_MeasurementReady+0x18>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	f7ff fd51 	bl	800b468 <TimestampIsReached>
 800b9c6:	0003      	movs	r3, r0
}
 800b9c8:	0018      	movs	r0, r3
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	46c0      	nop			@ (mov r8, r8)
 800b9d0:	200000d0 	.word	0x200000d0

0800b9d4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800b9d4:	b590      	push	{r4, r7, lr}
 800b9d6:	b089      	sub	sp, #36	@ 0x24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800b9de:	4b4e      	ldr	r3, [pc, #312]	@ (800bb18 <HIDS_GetMeasurementValues+0x144>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <HIDS_GetMeasurementValues+0x16>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e091      	b.n	800bb0e <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 800b9ea:	f7ff ffe5 	bl	800b9b8 <HIDS_MeasurementReady>
 800b9ee:	0003      	movs	r3, r0
 800b9f0:	001a      	movs	r2, r3
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	4053      	eors	r3, r2
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <HIDS_GetMeasurementValues+0x2c>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	e086      	b.n	800bb0e <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800ba00:	4b46      	ldr	r3, [pc, #280]	@ (800bb1c <HIDS_GetMeasurementValues+0x148>)
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	4b46      	ldr	r3, [pc, #280]	@ (800bb20 <HIDS_GetMeasurementValues+0x14c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	0019      	movs	r1, r3
 800ba0a:	0010      	movs	r0, r2
 800ba0c:	f7f4 fbca 	bl	80001a4 <__udivsi3>
 800ba10:	0003      	movs	r3, r0
 800ba12:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800ba14:	2317      	movs	r3, #23
 800ba16:	18fc      	adds	r4, r7, r3
 800ba18:	4b42      	ldr	r3, [pc, #264]	@ (800bb24 <HIDS_GetMeasurementValues+0x150>)
 800ba1a:	2206      	movs	r2, #6
 800ba1c:	0019      	movs	r1, r3
 800ba1e:	2044      	movs	r0, #68	@ 0x44
 800ba20:	f7ff fe36 	bl	800b690 <ReadRegister>
 800ba24:	0003      	movs	r3, r0
 800ba26:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800ba28:	4b3e      	ldr	r3, [pc, #248]	@ (800bb24 <HIDS_GetMeasurementValues+0x150>)
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	f7ff ff1a 	bl	800b864 <CheckCRC>
 800ba30:	0003      	movs	r3, r0
 800ba32:	001a      	movs	r2, r3
 800ba34:	2301      	movs	r3, #1
 800ba36:	4053      	eors	r3, r2
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d011      	beq.n	800ba62 <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800ba3e:	231f      	movs	r3, #31
 800ba40:	18fb      	adds	r3, r7, r3
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	e005      	b.n	800ba54 <HIDS_GetMeasurementValues+0x80>
 800ba48:	211f      	movs	r1, #31
 800ba4a:	187b      	adds	r3, r7, r1
 800ba4c:	781a      	ldrb	r2, [r3, #0]
 800ba4e:	187b      	adds	r3, r7, r1
 800ba50:	3201      	adds	r2, #1
 800ba52:	701a      	strb	r2, [r3, #0]
 800ba54:	231f      	movs	r3, #31
 800ba56:	18fb      	adds	r3, r7, r3
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d9f4      	bls.n	800ba48 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e055      	b.n	800bb0e <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800ba62:	4b30      	ldr	r3, [pc, #192]	@ (800bb24 <HIDS_GetMeasurementValues+0x150>)
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	021b      	lsls	r3, r3, #8
 800ba68:	4a2e      	ldr	r2, [pc, #184]	@ (800bb24 <HIDS_GetMeasurementValues+0x150>)
 800ba6a:	7852      	ldrb	r2, [r2, #1]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	22af      	movs	r2, #175	@ 0xaf
 800ba70:	4353      	muls	r3, r2
 800ba72:	0018      	movs	r0, r3
 800ba74:	f7f7 fca4 	bl	80033c0 <__aeabi_i2d>
 800ba78:	2200      	movs	r2, #0
 800ba7a:	4b2b      	ldr	r3, [pc, #172]	@ (800bb28 <HIDS_GetMeasurementValues+0x154>)
 800ba7c:	f7f6 f99a 	bl	8001db4 <__aeabi_ddiv>
 800ba80:	0002      	movs	r2, r0
 800ba82:	000b      	movs	r3, r1
 800ba84:	0010      	movs	r0, r2
 800ba86:	0019      	movs	r1, r3
 800ba88:	f7f7 fd34 	bl	80034f4 <__aeabi_d2f>
 800ba8c:	1c03      	adds	r3, r0, #0
 800ba8e:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800ba90:	4926      	ldr	r1, [pc, #152]	@ (800bb2c <HIDS_GetMeasurementValues+0x158>)
 800ba92:	6938      	ldr	r0, [r7, #16]
 800ba94:	f7f5 fbc2 	bl	800121c <__aeabi_fsub>
 800ba98:	1c03      	adds	r3, r0, #0
 800ba9a:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ba9c:	4b21      	ldr	r3, [pc, #132]	@ (800bb24 <HIDS_GetMeasurementValues+0x150>)
 800ba9e:	78db      	ldrb	r3, [r3, #3]
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	4a20      	ldr	r2, [pc, #128]	@ (800bb24 <HIDS_GetMeasurementValues+0x150>)
 800baa4:	7912      	ldrb	r2, [r2, #4]
 800baa6:	431a      	orrs	r2, r3
 800baa8:	0013      	movs	r3, r2
 800baaa:	015b      	lsls	r3, r3, #5
 800baac:	1a9b      	subs	r3, r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	189b      	adds	r3, r3, r2
 800bab2:	0018      	movs	r0, r3
 800bab4:	f7f7 fc84 	bl	80033c0 <__aeabi_i2d>
 800bab8:	2200      	movs	r2, #0
 800baba:	4b1b      	ldr	r3, [pc, #108]	@ (800bb28 <HIDS_GetMeasurementValues+0x154>)
 800babc:	f7f6 f97a 	bl	8001db4 <__aeabi_ddiv>
 800bac0:	0002      	movs	r2, r0
 800bac2:	000b      	movs	r3, r1
 800bac4:	0010      	movs	r0, r2
 800bac6:	0019      	movs	r1, r3
 800bac8:	f7f7 fd14 	bl	80034f4 <__aeabi_d2f>
 800bacc:	1c03      	adds	r3, r0, #0
 800bace:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800bad0:	4917      	ldr	r1, [pc, #92]	@ (800bb30 <HIDS_GetMeasurementValues+0x15c>)
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7f5 fba2 	bl	800121c <__aeabi_fsub>
 800bad8:	1c03      	adds	r3, r0, #0
 800bada:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	0011      	movs	r1, r2
 800baee:	0018      	movs	r0, r3
 800baf0:	f7fd fd0c 	bl	800950c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	1c11      	adds	r1, r2, #0
 800bafa:	1c18      	adds	r0, r3, #0
 800bafc:	f7f7 fece 	bl	800389c <ESP_GetHT>

   measurements = 0;
 800bb00:	4b0c      	ldr	r3, [pc, #48]	@ (800bb34 <HIDS_GetMeasurementValues+0x160>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800bb06:	4b04      	ldr	r3, [pc, #16]	@ (800bb18 <HIDS_GetMeasurementValues+0x144>)
 800bb08:	2201      	movs	r2, #1
 800bb0a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800bb0c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800bb0e:	0018      	movs	r0, r3
 800bb10:	46bd      	mov	sp, r7
 800bb12:	b009      	add	sp, #36	@ 0x24
 800bb14:	bd90      	pop	{r4, r7, pc}
 800bb16:	46c0      	nop			@ (mov r8, r8)
 800bb18:	2000249e 	.word	0x2000249e
 800bb1c:	200000d8 	.word	0x200000d8
 800bb20:	200000d4 	.word	0x200000d4
 800bb24:	20002498 	.word	0x20002498
 800bb28:	40efffe0 	.word	0x40efffe0
 800bb2c:	42340000 	.word	0x42340000
 800bb30:	40c00000 	.word	0x40c00000
 800bb34:	200024a0 	.word	0x200024a0

0800bb38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800bb38:	480d      	ldr	r0, [pc, #52]	@ (800bb70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800bb3a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800bb3c:	f7ff f8f2 	bl	800ad24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bb40:	480c      	ldr	r0, [pc, #48]	@ (800bb74 <LoopForever+0x6>)
  ldr r1, =_edata
 800bb42:	490d      	ldr	r1, [pc, #52]	@ (800bb78 <LoopForever+0xa>)
  ldr r2, =_sidata
 800bb44:	4a0d      	ldr	r2, [pc, #52]	@ (800bb7c <LoopForever+0xe>)
  movs r3, #0
 800bb46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bb48:	e002      	b.n	800bb50 <LoopCopyDataInit>

0800bb4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bb4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bb4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bb4e:	3304      	adds	r3, #4

0800bb50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bb50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bb52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bb54:	d3f9      	bcc.n	800bb4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bb56:	4a0a      	ldr	r2, [pc, #40]	@ (800bb80 <LoopForever+0x12>)
  ldr r4, =_ebss
 800bb58:	4c0a      	ldr	r4, [pc, #40]	@ (800bb84 <LoopForever+0x16>)
  movs r3, #0
 800bb5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bb5c:	e001      	b.n	800bb62 <LoopFillZerobss>

0800bb5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bb5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bb60:	3204      	adds	r2, #4

0800bb62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bb62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bb64:	d3fb      	bcc.n	800bb5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bb66:	f010 f967 	bl	801be38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb6a:	f7fb fa3d 	bl	8006fe8 <main>

0800bb6e <LoopForever>:

LoopForever:
    b LoopForever
 800bb6e:	e7fe      	b.n	800bb6e <LoopForever>
   ldr   r0, =_estack
 800bb70:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800bb74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bb78:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800bb7c:	08020a80 	.word	0x08020a80
  ldr r2, =_sbss
 800bb80:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800bb84:	200038a8 	.word	0x200038a8

0800bb88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb88:	e7fe      	b.n	800bb88 <ADC1_COMP_IRQHandler>
	...

0800bb8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bb92:	1dfb      	adds	r3, r7, #7
 800bb94:	2200      	movs	r2, #0
 800bb96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800bb98:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc8 <HAL_Init+0x3c>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc8 <HAL_Init+0x3c>)
 800bb9e:	2140      	movs	r1, #64	@ 0x40
 800bba0:	430a      	orrs	r2, r1
 800bba2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bba4:	2003      	movs	r0, #3
 800bba6:	f000 f811 	bl	800bbcc <HAL_InitTick>
 800bbaa:	1e03      	subs	r3, r0, #0
 800bbac:	d003      	beq.n	800bbb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800bbae:	1dfb      	adds	r3, r7, #7
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	701a      	strb	r2, [r3, #0]
 800bbb4:	e001      	b.n	800bbba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bbb6:	f7fe ff8b 	bl	800aad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bbba:	1dfb      	adds	r3, r7, #7
 800bbbc:	781b      	ldrb	r3, [r3, #0]
}
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	b002      	add	sp, #8
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	46c0      	nop			@ (mov r8, r8)
 800bbc8:	40022000 	.word	0x40022000

0800bbcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bbcc:	b590      	push	{r4, r7, lr}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bbd4:	4b14      	ldr	r3, [pc, #80]	@ (800bc28 <HAL_InitTick+0x5c>)
 800bbd6:	681c      	ldr	r4, [r3, #0]
 800bbd8:	4b14      	ldr	r3, [pc, #80]	@ (800bc2c <HAL_InitTick+0x60>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	0019      	movs	r1, r3
 800bbde:	23fa      	movs	r3, #250	@ 0xfa
 800bbe0:	0098      	lsls	r0, r3, #2
 800bbe2:	f7f4 fadf 	bl	80001a4 <__udivsi3>
 800bbe6:	0003      	movs	r3, r0
 800bbe8:	0019      	movs	r1, r3
 800bbea:	0020      	movs	r0, r4
 800bbec:	f7f4 fada 	bl	80001a4 <__udivsi3>
 800bbf0:	0003      	movs	r3, r0
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	f000 fccb 	bl	800c58e <HAL_SYSTICK_Config>
 800bbf8:	1e03      	subs	r3, r0, #0
 800bbfa:	d001      	beq.n	800bc00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e00f      	b.n	800bc20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d80b      	bhi.n	800bc1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	425b      	negs	r3, r3
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	0018      	movs	r0, r3
 800bc10:	f000 fc98 	bl	800c544 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bc14:	4b06      	ldr	r3, [pc, #24]	@ (800bc30 <HAL_InitTick+0x64>)
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e000      	b.n	800bc20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
}
 800bc20:	0018      	movs	r0, r3
 800bc22:	46bd      	mov	sp, r7
 800bc24:	b003      	add	sp, #12
 800bc26:	bd90      	pop	{r4, r7, pc}
 800bc28:	200000c8 	.word	0x200000c8
 800bc2c:	200000e0 	.word	0x200000e0
 800bc30:	200000dc 	.word	0x200000dc

0800bc34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <HAL_IncTick+0x1c>)
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	001a      	movs	r2, r3
 800bc3e:	4b05      	ldr	r3, [pc, #20]	@ (800bc54 <HAL_IncTick+0x20>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	18d2      	adds	r2, r2, r3
 800bc44:	4b03      	ldr	r3, [pc, #12]	@ (800bc54 <HAL_IncTick+0x20>)
 800bc46:	601a      	str	r2, [r3, #0]
}
 800bc48:	46c0      	nop			@ (mov r8, r8)
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	46c0      	nop			@ (mov r8, r8)
 800bc50:	200000e0 	.word	0x200000e0
 800bc54:	200024a4 	.word	0x200024a4

0800bc58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
  return uwTick;
 800bc5c:	4b02      	ldr	r3, [pc, #8]	@ (800bc68 <HAL_GetTick+0x10>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
}
 800bc60:	0018      	movs	r0, r3
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	46c0      	nop			@ (mov r8, r8)
 800bc68:	200024a4 	.word	0x200024a4

0800bc6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc74:	f7ff fff0 	bl	800bc58 <HAL_GetTick>
 800bc78:	0003      	movs	r3, r0
 800bc7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3301      	adds	r3, #1
 800bc84:	d005      	beq.n	800bc92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc86:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb0 <HAL_Delay+0x44>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	001a      	movs	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	189b      	adds	r3, r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bc92:	46c0      	nop			@ (mov r8, r8)
 800bc94:	f7ff ffe0 	bl	800bc58 <HAL_GetTick>
 800bc98:	0002      	movs	r2, r0
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d8f7      	bhi.n	800bc94 <HAL_Delay+0x28>
  {
  }
}
 800bca4:	46c0      	nop			@ (mov r8, r8)
 800bca6:	46c0      	nop			@ (mov r8, r8)
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	b004      	add	sp, #16
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	46c0      	nop			@ (mov r8, r8)
 800bcb0:	200000e0 	.word	0x200000e0

0800bcb4 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800bcb8:	4b02      	ldr	r3, [pc, #8]	@ (800bcc4 <HAL_GetUIDw0+0x10>)
 800bcba:	681b      	ldr	r3, [r3, #0]
}
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	46c0      	nop			@ (mov r8, r8)
 800bcc4:	1ff80050 	.word	0x1ff80050

0800bcc8 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800bccc:	4b02      	ldr	r3, [pc, #8]	@ (800bcd8 <HAL_GetUIDw1+0x10>)
 800bcce:	681b      	ldr	r3, [r3, #0]
}
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	46c0      	nop			@ (mov r8, r8)
 800bcd8:	1ff80054 	.word	0x1ff80054

0800bcdc <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800bce0:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <HAL_GetUIDw2+0x10>)
 800bce2:	681b      	ldr	r3, [r3, #0]
}
 800bce4:	0018      	movs	r0, r3
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	46c0      	nop			@ (mov r8, r8)
 800bcec:	1ff80064 	.word	0x1ff80064

0800bcf0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e159      	b.n	800bfb6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10a      	bne.n	800bd20 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2250      	movs	r2, #80	@ 0x50
 800bd14:	2100      	movs	r1, #0
 800bd16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f7fa fba6 	bl	800646c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd24:	2210      	movs	r2, #16
 800bd26:	4013      	ands	r3, r2
 800bd28:	2b10      	cmp	r3, #16
 800bd2a:	d005      	beq.n	800bd38 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	2204      	movs	r2, #4
 800bd34:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800bd36:	d00b      	beq.n	800bd50 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd3c:	2210      	movs	r2, #16
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2250      	movs	r2, #80	@ 0x50
 800bd48:	2100      	movs	r1, #0
 800bd4a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e132      	b.n	800bfb6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd54:	4a9a      	ldr	r2, [pc, #616]	@ (800bfc0 <HAL_ADC_Init+0x2d0>)
 800bd56:	4013      	ands	r3, r2
 800bd58:	2202      	movs	r2, #2
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	2203      	movs	r2, #3
 800bd68:	4013      	ands	r3, r2
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d108      	bne.n	800bd80 <HAL_ADC_Init+0x90>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2201      	movs	r2, #1
 800bd76:	4013      	ands	r3, r2
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d101      	bne.n	800bd80 <HAL_ADC_Init+0x90>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e000      	b.n	800bd82 <HAL_ADC_Init+0x92>
 800bd80:	2300      	movs	r3, #0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d149      	bne.n	800be1a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	685a      	ldr	r2, [r3, #4]
 800bd8a:	23c0      	movs	r3, #192	@ 0xc0
 800bd8c:	061b      	lsls	r3, r3, #24
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d00b      	beq.n	800bdaa <HAL_ADC_Init+0xba>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	2380      	movs	r3, #128	@ 0x80
 800bd98:	05db      	lsls	r3, r3, #23
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d005      	beq.n	800bdaa <HAL_ADC_Init+0xba>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	2380      	movs	r3, #128	@ 0x80
 800bda4:	061b      	lsls	r3, r3, #24
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d111      	bne.n	800bdce <HAL_ADC_Init+0xde>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	691a      	ldr	r2, [r3, #16]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	0092      	lsls	r2, r2, #2
 800bdb6:	0892      	lsrs	r2, r2, #2
 800bdb8:	611a      	str	r2, [r3, #16]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6919      	ldr	r1, [r3, #16]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	611a      	str	r2, [r3, #16]
 800bdcc:	e014      	b.n	800bdf8 <HAL_ADC_Init+0x108>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	691a      	ldr	r2, [r3, #16]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	0092      	lsls	r2, r2, #2
 800bdda:	0892      	lsrs	r2, r2, #2
 800bddc:	611a      	str	r2, [r3, #16]
 800bdde:	4b79      	ldr	r3, [pc, #484]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	4b78      	ldr	r3, [pc, #480]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800bde4:	4978      	ldr	r1, [pc, #480]	@ (800bfc8 <HAL_ADC_Init+0x2d8>)
 800bde6:	400a      	ands	r2, r1
 800bde8:	601a      	str	r2, [r3, #0]
 800bdea:	4b76      	ldr	r3, [pc, #472]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800bdec:	6819      	ldr	r1, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	4b74      	ldr	r3, [pc, #464]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2118      	movs	r1, #24
 800be04:	438a      	bics	r2, r1
 800be06:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68d9      	ldr	r1, [r3, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689a      	ldr	r2, [r3, #8]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800be1a:	4b6a      	ldr	r3, [pc, #424]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	4b69      	ldr	r3, [pc, #420]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800be20:	496a      	ldr	r1, [pc, #424]	@ (800bfcc <HAL_ADC_Init+0x2dc>)
 800be22:	400a      	ands	r2, r1
 800be24:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800be26:	4b67      	ldr	r3, [pc, #412]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800be28:	6819      	ldr	r1, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be2e:	065a      	lsls	r2, r3, #25
 800be30:	4b64      	ldr	r3, [pc, #400]	@ (800bfc4 <HAL_ADC_Init+0x2d4>)
 800be32:	430a      	orrs	r2, r1
 800be34:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689a      	ldr	r2, [r3, #8]
 800be3c:	2380      	movs	r3, #128	@ 0x80
 800be3e:	055b      	lsls	r3, r3, #21
 800be40:	4013      	ands	r3, r2
 800be42:	d108      	bne.n	800be56 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2180      	movs	r1, #128	@ 0x80
 800be50:	0549      	lsls	r1, r1, #21
 800be52:	430a      	orrs	r2, r1
 800be54:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68da      	ldr	r2, [r3, #12]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	495b      	ldr	r1, [pc, #364]	@ (800bfd0 <HAL_ADC_Init+0x2e0>)
 800be62:	400a      	ands	r2, r1
 800be64:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68d9      	ldr	r1, [r3, #12]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	2b02      	cmp	r3, #2
 800be76:	d101      	bne.n	800be7c <HAL_ADC_Init+0x18c>
 800be78:	2304      	movs	r3, #4
 800be7a:	e000      	b.n	800be7e <HAL_ADC_Init+0x18e>
 800be7c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800be7e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2020      	movs	r0, #32
 800be84:	5c1b      	ldrb	r3, [r3, r0]
 800be86:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800be88:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	202c      	movs	r0, #44	@ 0x2c
 800be8e:	5c1b      	ldrb	r3, [r3, r0]
 800be90:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800be92:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800be98:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	699b      	ldr	r3, [r3, #24]
 800be9e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800bea0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	69db      	ldr	r3, [r3, #28]
 800bea6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800bea8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	430a      	orrs	r2, r1
 800beb0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800beb6:	23c2      	movs	r3, #194	@ 0xc2
 800beb8:	33ff      	adds	r3, #255	@ 0xff
 800beba:	429a      	cmp	r2, r3
 800bebc:	d00b      	beq.n	800bed6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68d9      	ldr	r1, [r3, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800becc:	431a      	orrs	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2221      	movs	r2, #33	@ 0x21
 800beda:	5c9b      	ldrb	r3, [r3, r2]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d11a      	bne.n	800bf16 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	5c9b      	ldrb	r3, [r3, r2]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68da      	ldr	r2, [r3, #12]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2180      	movs	r1, #128	@ 0x80
 800bef6:	0249      	lsls	r1, r1, #9
 800bef8:	430a      	orrs	r2, r1
 800befa:	60da      	str	r2, [r3, #12]
 800befc:	e00b      	b.n	800bf16 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf02:	2220      	movs	r2, #32
 800bf04:	431a      	orrs	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf0e:	2201      	movs	r2, #1
 800bf10:	431a      	orrs	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d11f      	bne.n	800bf5e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	691a      	ldr	r2, [r3, #16]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	492a      	ldr	r1, [pc, #168]	@ (800bfd4 <HAL_ADC_Init+0x2e4>)
 800bf2a:	400a      	ands	r2, r1
 800bf2c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	6919      	ldr	r1, [r3, #16]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800bf3c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800bf42:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	430a      	orrs	r2, r1
 800bf4a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	691a      	ldr	r2, [r3, #16]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2101      	movs	r1, #1
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	611a      	str	r2, [r3, #16]
 800bf5c:	e00e      	b.n	800bf7c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	2201      	movs	r2, #1
 800bf66:	4013      	ands	r3, r2
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d107      	bne.n	800bf7c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	691a      	ldr	r2, [r3, #16]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2101      	movs	r1, #1
 800bf78:	438a      	bics	r2, r1
 800bf7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	695a      	ldr	r2, [r3, #20]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2107      	movs	r1, #7
 800bf88:	438a      	bics	r2, r1
 800bf8a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6959      	ldr	r1, [r3, #20]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfa8:	2203      	movs	r2, #3
 800bfaa:	4393      	bics	r3, r2
 800bfac:	2201      	movs	r2, #1
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	0018      	movs	r0, r3
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	b002      	add	sp, #8
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	46c0      	nop			@ (mov r8, r8)
 800bfc0:	fffffefd 	.word	0xfffffefd
 800bfc4:	40012708 	.word	0x40012708
 800bfc8:	ffc3ffff 	.word	0xffc3ffff
 800bfcc:	fdffffff 	.word	0xfdffffff
 800bfd0:	fffe0219 	.word	0xfffe0219
 800bfd4:	fffffc03 	.word	0xfffffc03

0800bfd8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800bfd8:	b590      	push	{r4, r7, lr}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bfe0:	230f      	movs	r3, #15
 800bfe2:	18fb      	adds	r3, r7, r3
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	2204      	movs	r2, #4
 800bff0:	4013      	ands	r3, r2
 800bff2:	d138      	bne.n	800c066 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2250      	movs	r2, #80	@ 0x50
 800bff8:	5c9b      	ldrb	r3, [r3, r2]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d101      	bne.n	800c002 <HAL_ADC_Start+0x2a>
 800bffe:	2302      	movs	r3, #2
 800c000:	e038      	b.n	800c074 <HAL_ADC_Start+0x9c>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2250      	movs	r2, #80	@ 0x50
 800c006:	2101      	movs	r1, #1
 800c008:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	69db      	ldr	r3, [r3, #28]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d007      	beq.n	800c022 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800c012:	230f      	movs	r3, #15
 800c014:	18fc      	adds	r4, r7, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	0018      	movs	r0, r3
 800c01a:	f000 f95f 	bl	800c2dc <ADC_Enable>
 800c01e:	0003      	movs	r3, r0
 800c020:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c022:	230f      	movs	r3, #15
 800c024:	18fb      	adds	r3, r7, r3
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d120      	bne.n	800c06e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c030:	4a12      	ldr	r2, [pc, #72]	@ (800c07c <HAL_ADC_Start+0xa4>)
 800c032:	4013      	ands	r3, r2
 800c034:	2280      	movs	r2, #128	@ 0x80
 800c036:	0052      	lsls	r2, r2, #1
 800c038:	431a      	orrs	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2250      	movs	r2, #80	@ 0x50
 800c048:	2100      	movs	r1, #0
 800c04a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	221c      	movs	r2, #28
 800c052:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689a      	ldr	r2, [r3, #8]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2104      	movs	r1, #4
 800c060:	430a      	orrs	r2, r1
 800c062:	609a      	str	r2, [r3, #8]
 800c064:	e003      	b.n	800c06e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c066:	230f      	movs	r3, #15
 800c068:	18fb      	adds	r3, r7, r3
 800c06a:	2202      	movs	r2, #2
 800c06c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800c06e:	230f      	movs	r3, #15
 800c070:	18fb      	adds	r3, r7, r3
 800c072:	781b      	ldrb	r3, [r3, #0]
}
 800c074:	0018      	movs	r0, r3
 800c076:	46bd      	mov	sp, r7
 800c078:	b005      	add	sp, #20
 800c07a:	bd90      	pop	{r4, r7, pc}
 800c07c:	fffff0fe 	.word	0xfffff0fe

0800c080 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	2b08      	cmp	r3, #8
 800c098:	d102      	bne.n	800c0a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800c09a:	2308      	movs	r3, #8
 800c09c:	60fb      	str	r3, [r7, #12]
 800c09e:	e014      	b.n	800c0ca <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d10b      	bne.n	800c0c6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2250      	movs	r2, #80	@ 0x50
 800c0be:	2100      	movs	r1, #0
 800c0c0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e072      	b.n	800c1ac <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800c0c6:	230c      	movs	r3, #12
 800c0c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c0ca:	f7ff fdc5 	bl	800bc58 <HAL_GetTick>
 800c0ce:	0003      	movs	r3, r0
 800c0d0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c0d2:	e01f      	b.n	800c114 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	d01c      	beq.n	800c114 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <HAL_ADC_PollForConversion+0x70>
 800c0e0:	f7ff fdba 	bl	800bc58 <HAL_GetTick>
 800c0e4:	0002      	movs	r2, r0
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d211      	bcs.n	800c114 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	d10b      	bne.n	800c114 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c100:	2204      	movs	r2, #4
 800c102:	431a      	orrs	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2250      	movs	r2, #80	@ 0x50
 800c10c:	2100      	movs	r1, #0
 800c10e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e04b      	b.n	800c1ac <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	4013      	ands	r3, r2
 800c11e:	d0d9      	beq.n	800c0d4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c124:	2280      	movs	r2, #128	@ 0x80
 800c126:	0092      	lsls	r2, r2, #2
 800c128:	431a      	orrs	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68da      	ldr	r2, [r3, #12]
 800c134:	23c0      	movs	r3, #192	@ 0xc0
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	4013      	ands	r3, r2
 800c13a:	d12e      	bne.n	800c19a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2220      	movs	r2, #32
 800c140:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c142:	2b00      	cmp	r3, #0
 800c144:	d129      	bne.n	800c19a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2208      	movs	r2, #8
 800c14e:	4013      	ands	r3, r2
 800c150:	2b08      	cmp	r3, #8
 800c152:	d122      	bne.n	800c19a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2204      	movs	r2, #4
 800c15c:	4013      	ands	r3, r2
 800c15e:	d110      	bne.n	800c182 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	210c      	movs	r1, #12
 800c16c:	438a      	bics	r2, r1
 800c16e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c174:	4a0f      	ldr	r2, [pc, #60]	@ (800c1b4 <HAL_ADC_PollForConversion+0x134>)
 800c176:	4013      	ands	r3, r2
 800c178:	2201      	movs	r2, #1
 800c17a:	431a      	orrs	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c180:	e00b      	b.n	800c19a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c186:	2220      	movs	r2, #32
 800c188:	431a      	orrs	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c192:	2201      	movs	r2, #1
 800c194:	431a      	orrs	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d103      	bne.n	800c1aa <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	220c      	movs	r2, #12
 800c1a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	b004      	add	sp, #16
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	fffffefe 	.word	0xfffffefe

0800c1b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	b002      	add	sp, #8
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2250      	movs	r2, #80	@ 0x50
 800c1de:	5c9b      	ldrb	r3, [r3, r2]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d101      	bne.n	800c1e8 <HAL_ADC_ConfigChannel+0x18>
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	e06c      	b.n	800c2c2 <HAL_ADC_ConfigChannel+0xf2>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2250      	movs	r2, #80	@ 0x50
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	d00b      	beq.n	800c214 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c200:	2220      	movs	r2, #32
 800c202:	431a      	orrs	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2250      	movs	r2, #80	@ 0x50
 800c20c:	2100      	movs	r1, #0
 800c20e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e056      	b.n	800c2c2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	4a2c      	ldr	r2, [pc, #176]	@ (800c2cc <HAL_ADC_ConfigChannel+0xfc>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d028      	beq.n	800c270 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	035b      	lsls	r3, r3, #13
 800c22a:	0b5a      	lsrs	r2, r3, #13
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	2380      	movs	r3, #128	@ 0x80
 800c23a:	02db      	lsls	r3, r3, #11
 800c23c:	4013      	ands	r3, r2
 800c23e:	d009      	beq.n	800c254 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800c240:	4b23      	ldr	r3, [pc, #140]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	4b22      	ldr	r3, [pc, #136]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c246:	2180      	movs	r1, #128	@ 0x80
 800c248:	0409      	lsls	r1, r1, #16
 800c24a:	430a      	orrs	r2, r1
 800c24c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800c24e:	200a      	movs	r0, #10
 800c250:	f000 f8ac 	bl	800c3ac <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	2380      	movs	r3, #128	@ 0x80
 800c25a:	029b      	lsls	r3, r3, #10
 800c25c:	4013      	ands	r3, r2
 800c25e:	d02b      	beq.n	800c2b8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800c260:	4b1b      	ldr	r3, [pc, #108]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	4b1a      	ldr	r3, [pc, #104]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c266:	2180      	movs	r1, #128	@ 0x80
 800c268:	03c9      	lsls	r1, r1, #15
 800c26a:	430a      	orrs	r2, r1
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e023      	b.n	800c2b8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	035b      	lsls	r3, r3, #13
 800c27c:	0b5b      	lsrs	r3, r3, #13
 800c27e:	43d9      	mvns	r1, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	400a      	ands	r2, r1
 800c286:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	2380      	movs	r3, #128	@ 0x80
 800c28e:	02db      	lsls	r3, r3, #11
 800c290:	4013      	ands	r3, r2
 800c292:	d005      	beq.n	800c2a0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800c294:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c29a:	490e      	ldr	r1, [pc, #56]	@ (800c2d4 <HAL_ADC_ConfigChannel+0x104>)
 800c29c:	400a      	ands	r2, r1
 800c29e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	2380      	movs	r3, #128	@ 0x80
 800c2a6:	029b      	lsls	r3, r3, #10
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	d005      	beq.n	800c2b8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800c2ac:	4b08      	ldr	r3, [pc, #32]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	4b07      	ldr	r3, [pc, #28]	@ (800c2d0 <HAL_ADC_ConfigChannel+0x100>)
 800c2b2:	4909      	ldr	r1, [pc, #36]	@ (800c2d8 <HAL_ADC_ConfigChannel+0x108>)
 800c2b4:	400a      	ands	r2, r1
 800c2b6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2250      	movs	r2, #80	@ 0x50
 800c2bc:	2100      	movs	r1, #0
 800c2be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	b002      	add	sp, #8
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	46c0      	nop			@ (mov r8, r8)
 800c2cc:	00001001 	.word	0x00001001
 800c2d0:	40012708 	.word	0x40012708
 800c2d4:	ff7fffff 	.word	0xff7fffff
 800c2d8:	ffbfffff 	.word	0xffbfffff

0800c2dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d108      	bne.n	800c308 <ADC_Enable+0x2c>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	4013      	ands	r3, r2
 800c300:	2b01      	cmp	r3, #1
 800c302:	d101      	bne.n	800c308 <ADC_Enable+0x2c>
 800c304:	2301      	movs	r3, #1
 800c306:	e000      	b.n	800c30a <ADC_Enable+0x2e>
 800c308:	2300      	movs	r3, #0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d146      	bne.n	800c39c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	4a24      	ldr	r2, [pc, #144]	@ (800c3a8 <ADC_Enable+0xcc>)
 800c316:	4013      	ands	r3, r2
 800c318:	d00d      	beq.n	800c336 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c31e:	2210      	movs	r2, #16
 800c320:	431a      	orrs	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c32a:	2201      	movs	r2, #1
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e033      	b.n	800c39e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	689a      	ldr	r2, [r3, #8]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2101      	movs	r1, #1
 800c342:	430a      	orrs	r2, r1
 800c344:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c346:	2001      	movs	r0, #1
 800c348:	f000 f830 	bl	800c3ac <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800c34c:	f7ff fc84 	bl	800bc58 <HAL_GetTick>
 800c350:	0003      	movs	r3, r0
 800c352:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c354:	e01b      	b.n	800c38e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c356:	f7ff fc7f 	bl	800bc58 <HAL_GetTick>
 800c35a:	0002      	movs	r2, r0
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	2b0a      	cmp	r3, #10
 800c362:	d914      	bls.n	800c38e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2201      	movs	r2, #1
 800c36c:	4013      	ands	r3, r2
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d00d      	beq.n	800c38e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c376:	2210      	movs	r2, #16
 800c378:	431a      	orrs	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c382:	2201      	movs	r2, #1
 800c384:	431a      	orrs	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e007      	b.n	800c39e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2201      	movs	r2, #1
 800c396:	4013      	ands	r3, r2
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d1dc      	bne.n	800c356 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	0018      	movs	r0, r3
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	b004      	add	sp, #16
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	46c0      	nop			@ (mov r8, r8)
 800c3a8:	80000017 	.word	0x80000017

0800c3ac <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c3b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e4 <ADC_DelayMicroSecond+0x38>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	490b      	ldr	r1, [pc, #44]	@ (800c3e8 <ADC_DelayMicroSecond+0x3c>)
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	f7f3 fef2 	bl	80001a4 <__udivsi3>
 800c3c0:	0003      	movs	r3, r0
 800c3c2:	001a      	movs	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4353      	muls	r3, r2
 800c3c8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800c3ca:	e002      	b.n	800c3d2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1f9      	bne.n	800c3cc <ADC_DelayMicroSecond+0x20>
  }
}
 800c3d8:	46c0      	nop			@ (mov r8, r8)
 800c3da:	46c0      	nop			@ (mov r8, r8)
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	b004      	add	sp, #16
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	46c0      	nop			@ (mov r8, r8)
 800c3e4:	200000c8 	.word	0x200000c8
 800c3e8:	000f4240 	.word	0x000f4240

0800c3ec <__NVIC_EnableIRQ>:
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	0002      	movs	r2, r0
 800c3f4:	1dfb      	adds	r3, r7, #7
 800c3f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c3f8:	1dfb      	adds	r3, r7, #7
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3fe:	d809      	bhi.n	800c414 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c400:	1dfb      	adds	r3, r7, #7
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	001a      	movs	r2, r3
 800c406:	231f      	movs	r3, #31
 800c408:	401a      	ands	r2, r3
 800c40a:	4b04      	ldr	r3, [pc, #16]	@ (800c41c <__NVIC_EnableIRQ+0x30>)
 800c40c:	2101      	movs	r1, #1
 800c40e:	4091      	lsls	r1, r2
 800c410:	000a      	movs	r2, r1
 800c412:	601a      	str	r2, [r3, #0]
}
 800c414:	46c0      	nop			@ (mov r8, r8)
 800c416:	46bd      	mov	sp, r7
 800c418:	b002      	add	sp, #8
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	e000e100 	.word	0xe000e100

0800c420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c420:	b590      	push	{r4, r7, lr}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	0002      	movs	r2, r0
 800c428:	6039      	str	r1, [r7, #0]
 800c42a:	1dfb      	adds	r3, r7, #7
 800c42c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c42e:	1dfb      	adds	r3, r7, #7
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b7f      	cmp	r3, #127	@ 0x7f
 800c434:	d828      	bhi.n	800c488 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c436:	4a2f      	ldr	r2, [pc, #188]	@ (800c4f4 <__NVIC_SetPriority+0xd4>)
 800c438:	1dfb      	adds	r3, r7, #7
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	b25b      	sxtb	r3, r3
 800c43e:	089b      	lsrs	r3, r3, #2
 800c440:	33c0      	adds	r3, #192	@ 0xc0
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	589b      	ldr	r3, [r3, r2]
 800c446:	1dfa      	adds	r2, r7, #7
 800c448:	7812      	ldrb	r2, [r2, #0]
 800c44a:	0011      	movs	r1, r2
 800c44c:	2203      	movs	r2, #3
 800c44e:	400a      	ands	r2, r1
 800c450:	00d2      	lsls	r2, r2, #3
 800c452:	21ff      	movs	r1, #255	@ 0xff
 800c454:	4091      	lsls	r1, r2
 800c456:	000a      	movs	r2, r1
 800c458:	43d2      	mvns	r2, r2
 800c45a:	401a      	ands	r2, r3
 800c45c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	019b      	lsls	r3, r3, #6
 800c462:	22ff      	movs	r2, #255	@ 0xff
 800c464:	401a      	ands	r2, r3
 800c466:	1dfb      	adds	r3, r7, #7
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	0018      	movs	r0, r3
 800c46c:	2303      	movs	r3, #3
 800c46e:	4003      	ands	r3, r0
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c474:	481f      	ldr	r0, [pc, #124]	@ (800c4f4 <__NVIC_SetPriority+0xd4>)
 800c476:	1dfb      	adds	r3, r7, #7
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	b25b      	sxtb	r3, r3
 800c47c:	089b      	lsrs	r3, r3, #2
 800c47e:	430a      	orrs	r2, r1
 800c480:	33c0      	adds	r3, #192	@ 0xc0
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800c486:	e031      	b.n	800c4ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c488:	4a1b      	ldr	r2, [pc, #108]	@ (800c4f8 <__NVIC_SetPriority+0xd8>)
 800c48a:	1dfb      	adds	r3, r7, #7
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	0019      	movs	r1, r3
 800c490:	230f      	movs	r3, #15
 800c492:	400b      	ands	r3, r1
 800c494:	3b08      	subs	r3, #8
 800c496:	089b      	lsrs	r3, r3, #2
 800c498:	3306      	adds	r3, #6
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	18d3      	adds	r3, r2, r3
 800c49e:	3304      	adds	r3, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	1dfa      	adds	r2, r7, #7
 800c4a4:	7812      	ldrb	r2, [r2, #0]
 800c4a6:	0011      	movs	r1, r2
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	400a      	ands	r2, r1
 800c4ac:	00d2      	lsls	r2, r2, #3
 800c4ae:	21ff      	movs	r1, #255	@ 0xff
 800c4b0:	4091      	lsls	r1, r2
 800c4b2:	000a      	movs	r2, r1
 800c4b4:	43d2      	mvns	r2, r2
 800c4b6:	401a      	ands	r2, r3
 800c4b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	019b      	lsls	r3, r3, #6
 800c4be:	22ff      	movs	r2, #255	@ 0xff
 800c4c0:	401a      	ands	r2, r3
 800c4c2:	1dfb      	adds	r3, r7, #7
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	4003      	ands	r3, r0
 800c4cc:	00db      	lsls	r3, r3, #3
 800c4ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c4d0:	4809      	ldr	r0, [pc, #36]	@ (800c4f8 <__NVIC_SetPriority+0xd8>)
 800c4d2:	1dfb      	adds	r3, r7, #7
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	001c      	movs	r4, r3
 800c4d8:	230f      	movs	r3, #15
 800c4da:	4023      	ands	r3, r4
 800c4dc:	3b08      	subs	r3, #8
 800c4de:	089b      	lsrs	r3, r3, #2
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	3306      	adds	r3, #6
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	18c3      	adds	r3, r0, r3
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	601a      	str	r2, [r3, #0]
}
 800c4ec:	46c0      	nop			@ (mov r8, r8)
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	b003      	add	sp, #12
 800c4f2:	bd90      	pop	{r4, r7, pc}
 800c4f4:	e000e100 	.word	0xe000e100
 800c4f8:	e000ed00 	.word	0xe000ed00

0800c4fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	1e5a      	subs	r2, r3, #1
 800c508:	2380      	movs	r3, #128	@ 0x80
 800c50a:	045b      	lsls	r3, r3, #17
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d301      	bcc.n	800c514 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c510:	2301      	movs	r3, #1
 800c512:	e010      	b.n	800c536 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c514:	4b0a      	ldr	r3, [pc, #40]	@ (800c540 <SysTick_Config+0x44>)
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	3a01      	subs	r2, #1
 800c51a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c51c:	2301      	movs	r3, #1
 800c51e:	425b      	negs	r3, r3
 800c520:	2103      	movs	r1, #3
 800c522:	0018      	movs	r0, r3
 800c524:	f7ff ff7c 	bl	800c420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c528:	4b05      	ldr	r3, [pc, #20]	@ (800c540 <SysTick_Config+0x44>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c52e:	4b04      	ldr	r3, [pc, #16]	@ (800c540 <SysTick_Config+0x44>)
 800c530:	2207      	movs	r2, #7
 800c532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c534:	2300      	movs	r3, #0
}
 800c536:	0018      	movs	r0, r3
 800c538:	46bd      	mov	sp, r7
 800c53a:	b002      	add	sp, #8
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	46c0      	nop			@ (mov r8, r8)
 800c540:	e000e010 	.word	0xe000e010

0800c544 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60b9      	str	r1, [r7, #8]
 800c54c:	607a      	str	r2, [r7, #4]
 800c54e:	210f      	movs	r1, #15
 800c550:	187b      	adds	r3, r7, r1
 800c552:	1c02      	adds	r2, r0, #0
 800c554:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	187b      	adds	r3, r7, r1
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b25b      	sxtb	r3, r3
 800c55e:	0011      	movs	r1, r2
 800c560:	0018      	movs	r0, r3
 800c562:	f7ff ff5d 	bl	800c420 <__NVIC_SetPriority>
}
 800c566:	46c0      	nop			@ (mov r8, r8)
 800c568:	46bd      	mov	sp, r7
 800c56a:	b004      	add	sp, #16
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b082      	sub	sp, #8
 800c572:	af00      	add	r7, sp, #0
 800c574:	0002      	movs	r2, r0
 800c576:	1dfb      	adds	r3, r7, #7
 800c578:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c57a:	1dfb      	adds	r3, r7, #7
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	b25b      	sxtb	r3, r3
 800c580:	0018      	movs	r0, r3
 800c582:	f7ff ff33 	bl	800c3ec <__NVIC_EnableIRQ>
}
 800c586:	46c0      	nop			@ (mov r8, r8)
 800c588:	46bd      	mov	sp, r7
 800c58a:	b002      	add	sp, #8
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	0018      	movs	r0, r3
 800c59a:	f7ff ffaf 	bl	800c4fc <SysTick_Config>
 800c59e:	0003      	movs	r3, r0
}
 800c5a0:	0018      	movs	r0, r3
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	b002      	add	sp, #8
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e061      	b.n	800c67e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a32      	ldr	r2, [pc, #200]	@ (800c688 <HAL_DMA_Init+0xe0>)
 800c5c0:	4694      	mov	ip, r2
 800c5c2:	4463      	add	r3, ip
 800c5c4:	2114      	movs	r1, #20
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	f7f3 fdec 	bl	80001a4 <__udivsi3>
 800c5cc:	0003      	movs	r3, r0
 800c5ce:	009a      	lsls	r2, r3, #2
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a2d      	ldr	r2, [pc, #180]	@ (800c68c <HAL_DMA_Init+0xe4>)
 800c5d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2225      	movs	r2, #37	@ 0x25
 800c5de:	2102      	movs	r1, #2
 800c5e0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	4a28      	ldr	r2, [pc, #160]	@ (800c690 <HAL_DMA_Init+0xe8>)
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c5fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	699b      	ldr	r3, [r3, #24]
 800c60c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	2380      	movs	r3, #128	@ 0x80
 800c62e:	01db      	lsls	r3, r3, #7
 800c630:	429a      	cmp	r2, r3
 800c632:	d018      	beq.n	800c666 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c634:	4b17      	ldr	r3, [pc, #92]	@ (800c694 <HAL_DMA_Init+0xec>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c63c:	211c      	movs	r1, #28
 800c63e:	400b      	ands	r3, r1
 800c640:	210f      	movs	r1, #15
 800c642:	4099      	lsls	r1, r3
 800c644:	000b      	movs	r3, r1
 800c646:	43d9      	mvns	r1, r3
 800c648:	4b12      	ldr	r3, [pc, #72]	@ (800c694 <HAL_DMA_Init+0xec>)
 800c64a:	400a      	ands	r2, r1
 800c64c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c64e:	4b11      	ldr	r3, [pc, #68]	@ (800c694 <HAL_DMA_Init+0xec>)
 800c650:	6819      	ldr	r1, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c65a:	201c      	movs	r0, #28
 800c65c:	4003      	ands	r3, r0
 800c65e:	409a      	lsls	r2, r3
 800c660:	4b0c      	ldr	r3, [pc, #48]	@ (800c694 <HAL_DMA_Init+0xec>)
 800c662:	430a      	orrs	r2, r1
 800c664:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2225      	movs	r2, #37	@ 0x25
 800c670:	2101      	movs	r1, #1
 800c672:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2224      	movs	r2, #36	@ 0x24
 800c678:	2100      	movs	r1, #0
 800c67a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	0018      	movs	r0, r3
 800c680:	46bd      	mov	sp, r7
 800c682:	b004      	add	sp, #16
 800c684:	bd80      	pop	{r7, pc}
 800c686:	46c0      	nop			@ (mov r8, r8)
 800c688:	bffdfff8 	.word	0xbffdfff8
 800c68c:	40020000 	.word	0x40020000
 800c690:	ffff800f 	.word	0xffff800f
 800c694:	400200a8 	.word	0x400200a8

0800c698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6a6:	2317      	movs	r3, #23
 800c6a8:	18fb      	adds	r3, r7, r3
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2224      	movs	r2, #36	@ 0x24
 800c6b2:	5c9b      	ldrb	r3, [r3, r2]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d101      	bne.n	800c6bc <HAL_DMA_Start_IT+0x24>
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	e04f      	b.n	800c75c <HAL_DMA_Start_IT+0xc4>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2224      	movs	r2, #36	@ 0x24
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2225      	movs	r2, #37	@ 0x25
 800c6c8:	5c9b      	ldrb	r3, [r3, r2]
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d13a      	bne.n	800c746 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2225      	movs	r2, #37	@ 0x25
 800c6d4:	2102      	movs	r1, #2
 800c6d6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	438a      	bics	r2, r1
 800c6ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	68b9      	ldr	r1, [r7, #8]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 f976 	bl	800c9e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	210e      	movs	r1, #14
 800c70e:	430a      	orrs	r2, r1
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	e00f      	b.n	800c734 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2104      	movs	r1, #4
 800c720:	438a      	bics	r2, r1
 800c722:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	210a      	movs	r1, #10
 800c730:	430a      	orrs	r2, r1
 800c732:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2101      	movs	r1, #1
 800c740:	430a      	orrs	r2, r1
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	e007      	b.n	800c756 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2224      	movs	r2, #36	@ 0x24
 800c74a:	2100      	movs	r1, #0
 800c74c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800c74e:	2317      	movs	r3, #23
 800c750:	18fb      	adds	r3, r7, r3
 800c752:	2202      	movs	r2, #2
 800c754:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c756:	2317      	movs	r3, #23
 800c758:	18fb      	adds	r3, r7, r3
 800c75a:	781b      	ldrb	r3, [r3, #0]
}
 800c75c:	0018      	movs	r0, r3
 800c75e:	46bd      	mov	sp, r7
 800c760:	b006      	add	sp, #24
 800c762:	bd80      	pop	{r7, pc}

0800c764 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c76c:	230f      	movs	r3, #15
 800c76e:	18fb      	adds	r3, r7, r3
 800c770:	2200      	movs	r2, #0
 800c772:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2225      	movs	r2, #37	@ 0x25
 800c778:	5c9b      	ldrb	r3, [r3, r2]
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d008      	beq.n	800c792 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2204      	movs	r2, #4
 800c784:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2224      	movs	r2, #36	@ 0x24
 800c78a:	2100      	movs	r1, #0
 800c78c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	e024      	b.n	800c7dc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	210e      	movs	r1, #14
 800c79e:	438a      	bics	r2, r1
 800c7a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	438a      	bics	r2, r1
 800c7b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7b6:	221c      	movs	r2, #28
 800c7b8:	401a      	ands	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7be:	2101      	movs	r1, #1
 800c7c0:	4091      	lsls	r1, r2
 800c7c2:	000a      	movs	r2, r1
 800c7c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2225      	movs	r2, #37	@ 0x25
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2224      	movs	r2, #36	@ 0x24
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	5499      	strb	r1, [r3, r2]

    return status;
 800c7d6:	230f      	movs	r3, #15
 800c7d8:	18fb      	adds	r3, r7, r3
 800c7da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c7dc:	0018      	movs	r0, r3
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	b004      	add	sp, #16
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ec:	210f      	movs	r1, #15
 800c7ee:	187b      	adds	r3, r7, r1
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2225      	movs	r2, #37	@ 0x25
 800c7f8:	5c9b      	ldrb	r3, [r3, r2]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d006      	beq.n	800c80e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2204      	movs	r2, #4
 800c804:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c806:	187b      	adds	r3, r7, r1
 800c808:	2201      	movs	r2, #1
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	e02a      	b.n	800c864 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	210e      	movs	r1, #14
 800c81a:	438a      	bics	r2, r1
 800c81c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2101      	movs	r1, #1
 800c82a:	438a      	bics	r2, r1
 800c82c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c832:	221c      	movs	r2, #28
 800c834:	401a      	ands	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c83a:	2101      	movs	r1, #1
 800c83c:	4091      	lsls	r1, r2
 800c83e:	000a      	movs	r2, r1
 800c840:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2225      	movs	r2, #37	@ 0x25
 800c846:	2101      	movs	r1, #1
 800c848:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2224      	movs	r2, #36	@ 0x24
 800c84e:	2100      	movs	r1, #0
 800c850:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c856:	2b00      	cmp	r3, #0
 800c858:	d004      	beq.n	800c864 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	0010      	movs	r0, r2
 800c862:	4798      	blx	r3
    }
  }
  return status;
 800c864:	230f      	movs	r3, #15
 800c866:	18fb      	adds	r3, r7, r3
 800c868:	781b      	ldrb	r3, [r3, #0]
}
 800c86a:	0018      	movs	r0, r3
 800c86c:	46bd      	mov	sp, r7
 800c86e:	b004      	add	sp, #16
 800c870:	bd80      	pop	{r7, pc}

0800c872 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c88e:	221c      	movs	r2, #28
 800c890:	4013      	ands	r3, r2
 800c892:	2204      	movs	r2, #4
 800c894:	409a      	lsls	r2, r3
 800c896:	0013      	movs	r3, r2
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	4013      	ands	r3, r2
 800c89c:	d026      	beq.n	800c8ec <HAL_DMA_IRQHandler+0x7a>
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	2204      	movs	r2, #4
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	d022      	beq.n	800c8ec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2220      	movs	r2, #32
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	d107      	bne.n	800c8c2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2104      	movs	r1, #4
 800c8be:	438a      	bics	r2, r1
 800c8c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8c6:	221c      	movs	r2, #28
 800c8c8:	401a      	ands	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ce:	2104      	movs	r1, #4
 800c8d0:	4091      	lsls	r1, r2
 800c8d2:	000a      	movs	r2, r1
 800c8d4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d100      	bne.n	800c8e0 <HAL_DMA_IRQHandler+0x6e>
 800c8de:	e071      	b.n	800c9c4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	0010      	movs	r0, r2
 800c8e8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800c8ea:	e06b      	b.n	800c9c4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8f0:	221c      	movs	r2, #28
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	409a      	lsls	r2, r3
 800c8f8:	0013      	movs	r3, r2
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	d02d      	beq.n	800c95c <HAL_DMA_IRQHandler+0xea>
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2202      	movs	r2, #2
 800c904:	4013      	ands	r3, r2
 800c906:	d029      	beq.n	800c95c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2220      	movs	r2, #32
 800c910:	4013      	ands	r3, r2
 800c912:	d10b      	bne.n	800c92c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	210a      	movs	r1, #10
 800c920:	438a      	bics	r2, r1
 800c922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2225      	movs	r2, #37	@ 0x25
 800c928:	2101      	movs	r1, #1
 800c92a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c930:	221c      	movs	r2, #28
 800c932:	401a      	ands	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c938:	2102      	movs	r1, #2
 800c93a:	4091      	lsls	r1, r2
 800c93c:	000a      	movs	r2, r1
 800c93e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2224      	movs	r2, #36	@ 0x24
 800c944:	2100      	movs	r1, #0
 800c946:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d039      	beq.n	800c9c4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	0010      	movs	r0, r2
 800c958:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800c95a:	e033      	b.n	800c9c4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c960:	221c      	movs	r2, #28
 800c962:	4013      	ands	r3, r2
 800c964:	2208      	movs	r2, #8
 800c966:	409a      	lsls	r2, r3
 800c968:	0013      	movs	r3, r2
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	4013      	ands	r3, r2
 800c96e:	d02a      	beq.n	800c9c6 <HAL_DMA_IRQHandler+0x154>
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2208      	movs	r2, #8
 800c974:	4013      	ands	r3, r2
 800c976:	d026      	beq.n	800c9c6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	210e      	movs	r1, #14
 800c984:	438a      	bics	r2, r1
 800c986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c98c:	221c      	movs	r2, #28
 800c98e:	401a      	ands	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c994:	2101      	movs	r1, #1
 800c996:	4091      	lsls	r1, r2
 800c998:	000a      	movs	r2, r1
 800c99a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2225      	movs	r2, #37	@ 0x25
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2224      	movs	r2, #36	@ 0x24
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d005      	beq.n	800c9c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	0010      	movs	r0, r2
 800c9c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c9c4:	46c0      	nop			@ (mov r8, r8)
 800c9c6:	46c0      	nop			@ (mov r8, r8)
}
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	b004      	add	sp, #16
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2225      	movs	r2, #37	@ 0x25
 800c9da:	5c9b      	ldrb	r3, [r3, r2]
 800c9dc:	b2db      	uxtb	r3, r3
}
 800c9de:	0018      	movs	r0, r3
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	b002      	add	sp, #8
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b084      	sub	sp, #16
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	60f8      	str	r0, [r7, #12]
 800c9ee:	60b9      	str	r1, [r7, #8]
 800c9f0:	607a      	str	r2, [r7, #4]
 800c9f2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f8:	221c      	movs	r2, #28
 800c9fa:	401a      	ands	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca00:	2101      	movs	r1, #1
 800ca02:	4091      	lsls	r1, r2
 800ca04:	000a      	movs	r2, r1
 800ca06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2b10      	cmp	r3, #16
 800ca16:	d108      	bne.n	800ca2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ca28:	e007      	b.n	800ca3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	60da      	str	r2, [r3, #12]
}
 800ca3a:	46c0      	nop			@ (mov r8, r8)
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	b004      	add	sp, #16
 800ca40:	bd80      	pop	{r7, pc}
	...

0800ca44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ca4c:	f7ff f904 	bl	800bc58 <HAL_GetTick>
 800ca50:	0003      	movs	r3, r0
 800ca52:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ca54:	e00f      	b.n	800ca76 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	d00c      	beq.n	800ca76 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d007      	beq.n	800ca72 <FLASH_WaitForLastOperation+0x2e>
 800ca62:	f7ff f8f9 	bl	800bc58 <HAL_GetTick>
 800ca66:	0002      	movs	r2, r0
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d201      	bcs.n	800ca76 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e052      	b.n	800cb1c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ca76:	4b2b      	ldr	r3, [pc, #172]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d0e9      	beq.n	800ca56 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ca82:	4b28      	ldr	r3, [pc, #160]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800ca84:	699b      	ldr	r3, [r3, #24]
 800ca86:	2202      	movs	r2, #2
 800ca88:	4013      	ands	r3, r2
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d102      	bne.n	800ca94 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ca8e:	4b25      	ldr	r3, [pc, #148]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800ca90:	2202      	movs	r2, #2
 800ca92:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ca94:	4b23      	ldr	r3, [pc, #140]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800ca96:	699a      	ldr	r2, [r3, #24]
 800ca98:	2380      	movs	r3, #128	@ 0x80
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	401a      	ands	r2, r3
 800ca9e:	2380      	movs	r3, #128	@ 0x80
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d035      	beq.n	800cb12 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800caa6:	4b1f      	ldr	r3, [pc, #124]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800caa8:	699a      	ldr	r2, [r3, #24]
 800caaa:	2380      	movs	r3, #128	@ 0x80
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800cab0:	2380      	movs	r3, #128	@ 0x80
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d02c      	beq.n	800cb12 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800cab8:	4b1a      	ldr	r3, [pc, #104]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800caba:	699a      	ldr	r2, [r3, #24]
 800cabc:	2380      	movs	r3, #128	@ 0x80
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800cac2:	2380      	movs	r3, #128	@ 0x80
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d023      	beq.n	800cb12 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800caca:	4b16      	ldr	r3, [pc, #88]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800cacc:	699a      	ldr	r2, [r3, #24]
 800cace:	2380      	movs	r3, #128	@ 0x80
 800cad0:	011b      	lsls	r3, r3, #4
 800cad2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800cad4:	2380      	movs	r3, #128	@ 0x80
 800cad6:	011b      	lsls	r3, r3, #4
 800cad8:	429a      	cmp	r2, r3
 800cada:	d01a      	beq.n	800cb12 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800cadc:	4b11      	ldr	r3, [pc, #68]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800cade:	699a      	ldr	r2, [r3, #24]
 800cae0:	2380      	movs	r3, #128	@ 0x80
 800cae2:	019b      	lsls	r3, r3, #6
 800cae4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800cae6:	2380      	movs	r3, #128	@ 0x80
 800cae8:	019b      	lsls	r3, r3, #6
 800caea:	429a      	cmp	r2, r3
 800caec:	d011      	beq.n	800cb12 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800caee:	4b0d      	ldr	r3, [pc, #52]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800caf0:	699a      	ldr	r2, [r3, #24]
 800caf2:	2380      	movs	r3, #128	@ 0x80
 800caf4:	029b      	lsls	r3, r3, #10
 800caf6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800caf8:	2380      	movs	r3, #128	@ 0x80
 800cafa:	029b      	lsls	r3, r3, #10
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d008      	beq.n	800cb12 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800cb00:	4b08      	ldr	r3, [pc, #32]	@ (800cb24 <FLASH_WaitForLastOperation+0xe0>)
 800cb02:	699a      	ldr	r2, [r3, #24]
 800cb04:	2380      	movs	r3, #128	@ 0x80
 800cb06:	025b      	lsls	r3, r3, #9
 800cb08:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800cb0a:	2380      	movs	r3, #128	@ 0x80
 800cb0c:	025b      	lsls	r3, r3, #9
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d103      	bne.n	800cb1a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800cb12:	f000 f809 	bl	800cb28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e000      	b.n	800cb1c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	0018      	movs	r0, r3
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	b004      	add	sp, #16
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	40022000 	.word	0x40022000

0800cb28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cb32:	4b49      	ldr	r3, [pc, #292]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cb34:	699a      	ldr	r2, [r3, #24]
 800cb36:	2380      	movs	r3, #128	@ 0x80
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	401a      	ands	r2, r3
 800cb3c:	2380      	movs	r3, #128	@ 0x80
 800cb3e:	005b      	lsls	r3, r3, #1
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d10a      	bne.n	800cb5a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cb44:	4b45      	ldr	r3, [pc, #276]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cb46:	695b      	ldr	r3, [r3, #20]
 800cb48:	2202      	movs	r2, #2
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	4b43      	ldr	r3, [pc, #268]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cb4e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2280      	movs	r2, #128	@ 0x80
 800cb54:	0052      	lsls	r2, r2, #1
 800cb56:	4313      	orrs	r3, r2
 800cb58:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800cb5a:	4b3f      	ldr	r3, [pc, #252]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cb5c:	699a      	ldr	r2, [r3, #24]
 800cb5e:	2380      	movs	r3, #128	@ 0x80
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	401a      	ands	r2, r3
 800cb64:	2380      	movs	r3, #128	@ 0x80
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d10a      	bne.n	800cb82 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cb6c:	4b3b      	ldr	r3, [pc, #236]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	2201      	movs	r2, #1
 800cb72:	431a      	orrs	r2, r3
 800cb74:	4b39      	ldr	r3, [pc, #228]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cb76:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2280      	movs	r2, #128	@ 0x80
 800cb7c:	0092      	lsls	r2, r2, #2
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800cb82:	4b35      	ldr	r3, [pc, #212]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cb84:	699a      	ldr	r2, [r3, #24]
 800cb86:	2380      	movs	r3, #128	@ 0x80
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	401a      	ands	r2, r3
 800cb8c:	2380      	movs	r3, #128	@ 0x80
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d10a      	bne.n	800cbaa <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800cb94:	4b31      	ldr	r3, [pc, #196]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cb96:	695b      	ldr	r3, [r3, #20]
 800cb98:	2208      	movs	r2, #8
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	4b2f      	ldr	r3, [pc, #188]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cb9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2280      	movs	r2, #128	@ 0x80
 800cba4:	00d2      	lsls	r2, r2, #3
 800cba6:	4313      	orrs	r3, r2
 800cba8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cbaa:	4b2b      	ldr	r3, [pc, #172]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cbac:	699a      	ldr	r2, [r3, #24]
 800cbae:	2380      	movs	r3, #128	@ 0x80
 800cbb0:	011b      	lsls	r3, r3, #4
 800cbb2:	401a      	ands	r2, r3
 800cbb4:	2380      	movs	r3, #128	@ 0x80
 800cbb6:	011b      	lsls	r3, r3, #4
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d10a      	bne.n	800cbd2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cbbc:	4b27      	ldr	r3, [pc, #156]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	2204      	movs	r2, #4
 800cbc2:	431a      	orrs	r2, r3
 800cbc4:	4b25      	ldr	r3, [pc, #148]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cbc6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2280      	movs	r2, #128	@ 0x80
 800cbcc:	0112      	lsls	r2, r2, #4
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800cbd2:	4b21      	ldr	r3, [pc, #132]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cbd4:	699a      	ldr	r2, [r3, #24]
 800cbd6:	2380      	movs	r3, #128	@ 0x80
 800cbd8:	019b      	lsls	r3, r3, #6
 800cbda:	401a      	ands	r2, r3
 800cbdc:	2380      	movs	r3, #128	@ 0x80
 800cbde:	019b      	lsls	r3, r3, #6
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d10a      	bne.n	800cbfa <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800cbe4:	4b1d      	ldr	r3, [pc, #116]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cbe6:	695b      	ldr	r3, [r3, #20]
 800cbe8:	2210      	movs	r2, #16
 800cbea:	431a      	orrs	r2, r3
 800cbec:	4b1b      	ldr	r3, [pc, #108]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cbee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2280      	movs	r2, #128	@ 0x80
 800cbf4:	0192      	lsls	r2, r2, #6
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800cbfa:	4b17      	ldr	r3, [pc, #92]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	2380      	movs	r3, #128	@ 0x80
 800cc00:	029b      	lsls	r3, r3, #10
 800cc02:	401a      	ands	r2, r3
 800cc04:	2380      	movs	r3, #128	@ 0x80
 800cc06:	029b      	lsls	r3, r3, #10
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d109      	bne.n	800cc20 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800cc0c:	4b13      	ldr	r3, [pc, #76]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cc0e:	695b      	ldr	r3, [r3, #20]
 800cc10:	2220      	movs	r2, #32
 800cc12:	431a      	orrs	r2, r3
 800cc14:	4b11      	ldr	r3, [pc, #68]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cc16:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800cc20:	4b0d      	ldr	r3, [pc, #52]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cc22:	699a      	ldr	r2, [r3, #24]
 800cc24:	2380      	movs	r3, #128	@ 0x80
 800cc26:	025b      	lsls	r3, r3, #9
 800cc28:	401a      	ands	r2, r3
 800cc2a:	2380      	movs	r3, #128	@ 0x80
 800cc2c:	025b      	lsls	r3, r3, #9
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d10a      	bne.n	800cc48 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800cc32:	4b0a      	ldr	r3, [pc, #40]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	2240      	movs	r2, #64	@ 0x40
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	4b08      	ldr	r3, [pc, #32]	@ (800cc5c <FLASH_SetErrorCode+0x134>)
 800cc3c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2280      	movs	r2, #128	@ 0x80
 800cc42:	0252      	lsls	r2, r2, #9
 800cc44:	4313      	orrs	r3, r2
 800cc46:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cc48:	4b03      	ldr	r3, [pc, #12]	@ (800cc58 <FLASH_SetErrorCode+0x130>)
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	619a      	str	r2, [r3, #24]
}  
 800cc4e:	46c0      	nop			@ (mov r8, r8)
 800cc50:	46bd      	mov	sp, r7
 800cc52:	b002      	add	sp, #8
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	46c0      	nop			@ (mov r8, r8)
 800cc58:	40022000 	.word	0x40022000
 800cc5c:	200024a8 	.word	0x200024a8

0800cc60 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800cc66:	4b12      	ldr	r3, [pc, #72]	@ (800ccb0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	d019      	beq.n	800cca4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc70:	f3ef 8310 	mrs	r3, PRIMASK
 800cc74:	607b      	str	r3, [r7, #4]
  return(result);
 800cc76:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800cc78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc7a:	b672      	cpsid	i
}
 800cc7c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800cc7e:	4b0c      	ldr	r3, [pc, #48]	@ (800ccb0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cc80:	4a0c      	ldr	r2, [pc, #48]	@ (800ccb4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800cc82:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800cc84:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cc86:	4a0c      	ldr	r2, [pc, #48]	@ (800ccb8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800cc88:	60da      	str	r2, [r3, #12]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	f383 8810 	msr	PRIMASK, r3
}
 800cc94:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800cc96:	4b06      	ldr	r3, [pc, #24]	@ (800ccb0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	d001      	beq.n	800cca4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e000      	b.n	800cca6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	0018      	movs	r0, r3
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	b004      	add	sp, #16
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	46c0      	nop			@ (mov r8, r8)
 800ccb0:	40022000 	.word	0x40022000
 800ccb4:	89abcdef 	.word	0x89abcdef
 800ccb8:	02030405 	.word	0x02030405

0800ccbc <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ccc0:	4b04      	ldr	r3, [pc, #16]	@ (800ccd4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	4b03      	ldr	r3, [pc, #12]	@ (800ccd4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	430a      	orrs	r2, r1
 800ccca:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	0018      	movs	r0, r3
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	40022000 	.word	0x40022000

0800ccd8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ccd8:	b5b0      	push	{r4, r5, r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cce0:	250f      	movs	r5, #15
 800cce2:	197b      	adds	r3, r7, r5
 800cce4:	2200      	movs	r2, #0
 800cce6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cce8:	197c      	adds	r4, r7, r5
 800ccea:	4b0f      	ldr	r3, [pc, #60]	@ (800cd28 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ccec:	0018      	movs	r0, r3
 800ccee:	f7ff fea9 	bl	800ca44 <FLASH_WaitForLastOperation>
 800ccf2:	0003      	movs	r3, r0
 800ccf4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ccf6:	0029      	movs	r1, r5
 800ccf8:	187b      	adds	r3, r7, r1
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10c      	bne.n	800cd1a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cd00:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cd0c:	187c      	adds	r4, r7, r1
 800cd0e:	4b06      	ldr	r3, [pc, #24]	@ (800cd28 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800cd10:	0018      	movs	r0, r3
 800cd12:	f7ff fe97 	bl	800ca44 <FLASH_WaitForLastOperation>
 800cd16:	0003      	movs	r3, r0
 800cd18:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800cd1a:	230f      	movs	r3, #15
 800cd1c:	18fb      	adds	r3, r7, r3
 800cd1e:	781b      	ldrb	r3, [r3, #0]
}  
 800cd20:	0018      	movs	r0, r3
 800cd22:	46bd      	mov	sp, r7
 800cd24:	b004      	add	sp, #16
 800cd26:	bdb0      	pop	{r4, r5, r7, pc}
 800cd28:	0000c350 	.word	0x0000c350
 800cd2c:	200024a8 	.word	0x200024a8

0800cd30 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800cd30:	b5b0      	push	{r4, r5, r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cd3c:	2317      	movs	r3, #23
 800cd3e:	18fb      	adds	r3, r7, r3
 800cd40:	2201      	movs	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cd44:	4b24      	ldr	r3, [pc, #144]	@ (800cdd8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cd46:	7c1b      	ldrb	r3, [r3, #16]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d101      	bne.n	800cd50 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	e03e      	b.n	800cdce <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800cd50:	4b21      	ldr	r3, [pc, #132]	@ (800cdd8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cd52:	2201      	movs	r2, #1
 800cd54:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cd56:	2517      	movs	r5, #23
 800cd58:	197c      	adds	r4, r7, r5
 800cd5a:	4b20      	ldr	r3, [pc, #128]	@ (800cddc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	f7ff fe71 	bl	800ca44 <FLASH_WaitForLastOperation>
 800cd62:	0003      	movs	r3, r0
 800cd64:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800cd66:	197b      	adds	r3, r7, r5
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d129      	bne.n	800cdc2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cd6e:	4b1a      	ldr	r3, [pc, #104]	@ (800cdd8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d103      	bne.n	800cd82 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	e013      	b.n	800cdaa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d104      	bne.n	800cd92 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	b292      	uxth	r2, r2
 800cd8e:	801a      	strh	r2, [r3, #0]
 800cd90:	e00b      	b.n	800cdaa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d104      	bne.n	800cda2 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	b2d2      	uxtb	r2, r2
 800cd9e:	701a      	strb	r2, [r3, #0]
 800cda0:	e003      	b.n	800cdaa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800cda2:	2317      	movs	r3, #23
 800cda4:	18fb      	adds	r3, r7, r3
 800cda6:	2201      	movs	r2, #1
 800cda8:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800cdaa:	2217      	movs	r2, #23
 800cdac:	18bb      	adds	r3, r7, r2
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d106      	bne.n	800cdc2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cdb4:	18bc      	adds	r4, r7, r2
 800cdb6:	4b09      	ldr	r3, [pc, #36]	@ (800cddc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800cdb8:	0018      	movs	r0, r3
 800cdba:	f7ff fe43 	bl	800ca44 <FLASH_WaitForLastOperation>
 800cdbe:	0003      	movs	r3, r0
 800cdc0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cdc2:	4b05      	ldr	r3, [pc, #20]	@ (800cdd8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	741a      	strb	r2, [r3, #16]

  return status;
 800cdc8:	2317      	movs	r3, #23
 800cdca:	18fb      	adds	r3, r7, r3
 800cdcc:	781b      	ldrb	r3, [r3, #0]
}
 800cdce:	0018      	movs	r0, r3
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	b006      	add	sp, #24
 800cdd4:	bdb0      	pop	{r4, r5, r7, pc}
 800cdd6:	46c0      	nop			@ (mov r8, r8)
 800cdd8:	200024a8 	.word	0x200024a8
 800cddc:	0000c350 	.word	0x0000c350

0800cde0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800cdf6:	e155      	b.n	800d0a4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	4091      	lsls	r1, r2
 800ce02:	000a      	movs	r2, r1
 800ce04:	4013      	ands	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d100      	bne.n	800ce10 <HAL_GPIO_Init+0x30>
 800ce0e:	e146      	b.n	800d09e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	2203      	movs	r2, #3
 800ce16:	4013      	ands	r3, r2
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d005      	beq.n	800ce28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	2203      	movs	r2, #3
 800ce22:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d130      	bne.n	800ce8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	2203      	movs	r2, #3
 800ce34:	409a      	lsls	r2, r3
 800ce36:	0013      	movs	r3, r2
 800ce38:	43da      	mvns	r2, r3
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	68da      	ldr	r2, [r3, #12]
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	409a      	lsls	r2, r3
 800ce4a:	0013      	movs	r3, r2
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ce5e:	2201      	movs	r2, #1
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	409a      	lsls	r2, r3
 800ce64:	0013      	movs	r3, r2
 800ce66:	43da      	mvns	r2, r3
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	4013      	ands	r3, r2
 800ce6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	091b      	lsrs	r3, r3, #4
 800ce74:	2201      	movs	r2, #1
 800ce76:	401a      	ands	r2, r3
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	409a      	lsls	r2, r3
 800ce7c:	0013      	movs	r3, r2
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	4313      	orrs	r3, r2
 800ce82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2203      	movs	r2, #3
 800ce90:	4013      	ands	r3, r2
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d017      	beq.n	800cec6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	2203      	movs	r2, #3
 800cea2:	409a      	lsls	r2, r3
 800cea4:	0013      	movs	r3, r2
 800cea6:	43da      	mvns	r2, r3
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	689a      	ldr	r2, [r3, #8]
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	409a      	lsls	r2, r3
 800ceb8:	0013      	movs	r3, r2
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	2203      	movs	r2, #3
 800cecc:	4013      	ands	r3, r2
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d123      	bne.n	800cf1a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	08da      	lsrs	r2, r3, #3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3208      	adds	r2, #8
 800ceda:	0092      	lsls	r2, r2, #2
 800cedc:	58d3      	ldr	r3, [r2, r3]
 800cede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	2207      	movs	r2, #7
 800cee4:	4013      	ands	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	220f      	movs	r2, #15
 800ceea:	409a      	lsls	r2, r3
 800ceec:	0013      	movs	r3, r2
 800ceee:	43da      	mvns	r2, r3
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	4013      	ands	r3, r2
 800cef4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2107      	movs	r1, #7
 800cefe:	400b      	ands	r3, r1
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	409a      	lsls	r2, r3
 800cf04:	0013      	movs	r3, r2
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	08da      	lsrs	r2, r3, #3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3208      	adds	r2, #8
 800cf14:	0092      	lsls	r2, r2, #2
 800cf16:	6939      	ldr	r1, [r7, #16]
 800cf18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	005b      	lsls	r3, r3, #1
 800cf24:	2203      	movs	r2, #3
 800cf26:	409a      	lsls	r2, r3
 800cf28:	0013      	movs	r3, r2
 800cf2a:	43da      	mvns	r2, r3
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	4013      	ands	r3, r2
 800cf30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	2203      	movs	r2, #3
 800cf38:	401a      	ands	r2, r3
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	409a      	lsls	r2, r3
 800cf40:	0013      	movs	r3, r2
 800cf42:	693a      	ldr	r2, [r7, #16]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	693a      	ldr	r2, [r7, #16]
 800cf4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	23c0      	movs	r3, #192	@ 0xc0
 800cf54:	029b      	lsls	r3, r3, #10
 800cf56:	4013      	ands	r3, r2
 800cf58:	d100      	bne.n	800cf5c <HAL_GPIO_Init+0x17c>
 800cf5a:	e0a0      	b.n	800d09e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf5c:	4b57      	ldr	r3, [pc, #348]	@ (800d0bc <HAL_GPIO_Init+0x2dc>)
 800cf5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf60:	4b56      	ldr	r3, [pc, #344]	@ (800d0bc <HAL_GPIO_Init+0x2dc>)
 800cf62:	2101      	movs	r1, #1
 800cf64:	430a      	orrs	r2, r1
 800cf66:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800cf68:	4a55      	ldr	r2, [pc, #340]	@ (800d0c0 <HAL_GPIO_Init+0x2e0>)
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	089b      	lsrs	r3, r3, #2
 800cf6e:	3302      	adds	r3, #2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	589b      	ldr	r3, [r3, r2]
 800cf74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2203      	movs	r2, #3
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	220f      	movs	r2, #15
 800cf80:	409a      	lsls	r2, r3
 800cf82:	0013      	movs	r3, r2
 800cf84:	43da      	mvns	r2, r3
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	23a0      	movs	r3, #160	@ 0xa0
 800cf90:	05db      	lsls	r3, r3, #23
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d01f      	beq.n	800cfd6 <HAL_GPIO_Init+0x1f6>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a4a      	ldr	r2, [pc, #296]	@ (800d0c4 <HAL_GPIO_Init+0x2e4>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d019      	beq.n	800cfd2 <HAL_GPIO_Init+0x1f2>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4a49      	ldr	r2, [pc, #292]	@ (800d0c8 <HAL_GPIO_Init+0x2e8>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d013      	beq.n	800cfce <HAL_GPIO_Init+0x1ee>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4a48      	ldr	r2, [pc, #288]	@ (800d0cc <HAL_GPIO_Init+0x2ec>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d00d      	beq.n	800cfca <HAL_GPIO_Init+0x1ea>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a47      	ldr	r2, [pc, #284]	@ (800d0d0 <HAL_GPIO_Init+0x2f0>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d007      	beq.n	800cfc6 <HAL_GPIO_Init+0x1e6>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4a46      	ldr	r2, [pc, #280]	@ (800d0d4 <HAL_GPIO_Init+0x2f4>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d101      	bne.n	800cfc2 <HAL_GPIO_Init+0x1e2>
 800cfbe:	2305      	movs	r3, #5
 800cfc0:	e00a      	b.n	800cfd8 <HAL_GPIO_Init+0x1f8>
 800cfc2:	2306      	movs	r3, #6
 800cfc4:	e008      	b.n	800cfd8 <HAL_GPIO_Init+0x1f8>
 800cfc6:	2304      	movs	r3, #4
 800cfc8:	e006      	b.n	800cfd8 <HAL_GPIO_Init+0x1f8>
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e004      	b.n	800cfd8 <HAL_GPIO_Init+0x1f8>
 800cfce:	2302      	movs	r3, #2
 800cfd0:	e002      	b.n	800cfd8 <HAL_GPIO_Init+0x1f8>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e000      	b.n	800cfd8 <HAL_GPIO_Init+0x1f8>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	2103      	movs	r1, #3
 800cfdc:	400a      	ands	r2, r1
 800cfde:	0092      	lsls	r2, r2, #2
 800cfe0:	4093      	lsls	r3, r2
 800cfe2:	693a      	ldr	r2, [r7, #16]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cfe8:	4935      	ldr	r1, [pc, #212]	@ (800d0c0 <HAL_GPIO_Init+0x2e0>)
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	089b      	lsrs	r3, r3, #2
 800cfee:	3302      	adds	r3, #2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	693a      	ldr	r2, [r7, #16]
 800cff4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cff6:	4b38      	ldr	r3, [pc, #224]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	43da      	mvns	r2, r3
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	4013      	ands	r3, r2
 800d004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	2380      	movs	r3, #128	@ 0x80
 800d00c:	035b      	lsls	r3, r3, #13
 800d00e:	4013      	ands	r3, r2
 800d010:	d003      	beq.n	800d01a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	4313      	orrs	r3, r2
 800d018:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800d01a:	4b2f      	ldr	r3, [pc, #188]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800d020:	4b2d      	ldr	r3, [pc, #180]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	43da      	mvns	r2, r3
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	4013      	ands	r3, r2
 800d02e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	2380      	movs	r3, #128	@ 0x80
 800d036:	039b      	lsls	r3, r3, #14
 800d038:	4013      	ands	r3, r2
 800d03a:	d003      	beq.n	800d044 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800d03c:	693a      	ldr	r2, [r7, #16]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	4313      	orrs	r3, r2
 800d042:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800d044:	4b24      	ldr	r3, [pc, #144]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800d04a:	4b23      	ldr	r3, [pc, #140]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	43da      	mvns	r2, r3
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	4013      	ands	r3, r2
 800d058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	685a      	ldr	r2, [r3, #4]
 800d05e:	2380      	movs	r3, #128	@ 0x80
 800d060:	029b      	lsls	r3, r3, #10
 800d062:	4013      	ands	r3, r2
 800d064:	d003      	beq.n	800d06e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800d06e:	4b1a      	ldr	r3, [pc, #104]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800d070:	693a      	ldr	r2, [r7, #16]
 800d072:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d074:	4b18      	ldr	r3, [pc, #96]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	43da      	mvns	r2, r3
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	4013      	ands	r3, r2
 800d082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	2380      	movs	r3, #128	@ 0x80
 800d08a:	025b      	lsls	r3, r3, #9
 800d08c:	4013      	ands	r3, r2
 800d08e:	d003      	beq.n	800d098 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	4313      	orrs	r3, r2
 800d096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d098:	4b0f      	ldr	r3, [pc, #60]	@ (800d0d8 <HAL_GPIO_Init+0x2f8>)
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	40da      	lsrs	r2, r3
 800d0ac:	1e13      	subs	r3, r2, #0
 800d0ae:	d000      	beq.n	800d0b2 <HAL_GPIO_Init+0x2d2>
 800d0b0:	e6a2      	b.n	800cdf8 <HAL_GPIO_Init+0x18>
  }
}
 800d0b2:	46c0      	nop			@ (mov r8, r8)
 800d0b4:	46c0      	nop			@ (mov r8, r8)
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	b006      	add	sp, #24
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	40021000 	.word	0x40021000
 800d0c0:	40010000 	.word	0x40010000
 800d0c4:	50000400 	.word	0x50000400
 800d0c8:	50000800 	.word	0x50000800
 800d0cc:	50000c00 	.word	0x50000c00
 800d0d0:	50001000 	.word	0x50001000
 800d0d4:	50001c00 	.word	0x50001c00
 800d0d8:	40010400 	.word	0x40010400

0800d0dc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	000a      	movs	r2, r1
 800d0e6:	1cbb      	adds	r3, r7, #2
 800d0e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	1cba      	adds	r2, r7, #2
 800d0f0:	8812      	ldrh	r2, [r2, #0]
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	d004      	beq.n	800d100 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800d0f6:	230f      	movs	r3, #15
 800d0f8:	18fb      	adds	r3, r7, r3
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	e003      	b.n	800d108 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d100:	230f      	movs	r3, #15
 800d102:	18fb      	adds	r3, r7, r3
 800d104:	2200      	movs	r2, #0
 800d106:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800d108:	230f      	movs	r3, #15
 800d10a:	18fb      	adds	r3, r7, r3
 800d10c:	781b      	ldrb	r3, [r3, #0]
}
 800d10e:	0018      	movs	r0, r3
 800d110:	46bd      	mov	sp, r7
 800d112:	b004      	add	sp, #16
 800d114:	bd80      	pop	{r7, pc}

0800d116 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b082      	sub	sp, #8
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	0008      	movs	r0, r1
 800d120:	0011      	movs	r1, r2
 800d122:	1cbb      	adds	r3, r7, #2
 800d124:	1c02      	adds	r2, r0, #0
 800d126:	801a      	strh	r2, [r3, #0]
 800d128:	1c7b      	adds	r3, r7, #1
 800d12a:	1c0a      	adds	r2, r1, #0
 800d12c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d12e:	1c7b      	adds	r3, r7, #1
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d004      	beq.n	800d140 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d136:	1cbb      	adds	r3, r7, #2
 800d138:	881a      	ldrh	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800d13e:	e003      	b.n	800d148 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800d140:	1cbb      	adds	r3, r7, #2
 800d142:	881a      	ldrh	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d148:	46c0      	nop			@ (mov r8, r8)
 800d14a:	46bd      	mov	sp, r7
 800d14c:	b002      	add	sp, #8
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e082      	b.n	800d268 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2241      	movs	r2, #65	@ 0x41
 800d166:	5c9b      	ldrb	r3, [r3, r2]
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d107      	bne.n	800d17e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2240      	movs	r2, #64	@ 0x40
 800d172:	2100      	movs	r1, #0
 800d174:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	0018      	movs	r0, r3
 800d17a:	f7f9 fd7b 	bl	8006c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2241      	movs	r2, #65	@ 0x41
 800d182:	2124      	movs	r1, #36	@ 0x24
 800d184:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2101      	movs	r1, #1
 800d192:	438a      	bics	r2, r1
 800d194:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4934      	ldr	r1, [pc, #208]	@ (800d270 <HAL_I2C_Init+0x120>)
 800d1a0:	400a      	ands	r2, r1
 800d1a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689a      	ldr	r2, [r3, #8]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4931      	ldr	r1, [pc, #196]	@ (800d274 <HAL_I2C_Init+0x124>)
 800d1b0:	400a      	ands	r2, r1
 800d1b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d108      	bne.n	800d1ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	689a      	ldr	r2, [r3, #8]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2180      	movs	r1, #128	@ 0x80
 800d1c6:	0209      	lsls	r1, r1, #8
 800d1c8:	430a      	orrs	r2, r1
 800d1ca:	609a      	str	r2, [r3, #8]
 800d1cc:	e007      	b.n	800d1de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	689a      	ldr	r2, [r3, #8]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2184      	movs	r1, #132	@ 0x84
 800d1d8:	0209      	lsls	r1, r1, #8
 800d1da:	430a      	orrs	r2, r1
 800d1dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	d104      	bne.n	800d1f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2280      	movs	r2, #128	@ 0x80
 800d1ec:	0112      	lsls	r2, r2, #4
 800d1ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	491f      	ldr	r1, [pc, #124]	@ (800d278 <HAL_I2C_Init+0x128>)
 800d1fc:	430a      	orrs	r2, r1
 800d1fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68da      	ldr	r2, [r3, #12]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	491a      	ldr	r1, [pc, #104]	@ (800d274 <HAL_I2C_Init+0x124>)
 800d20c:	400a      	ands	r2, r1
 800d20e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	691a      	ldr	r2, [r3, #16]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	695b      	ldr	r3, [r3, #20]
 800d218:	431a      	orrs	r2, r3
 800d21a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	699b      	ldr	r3, [r3, #24]
 800d220:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	430a      	orrs	r2, r1
 800d228:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	69d9      	ldr	r1, [r3, #28]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a1a      	ldr	r2, [r3, #32]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	430a      	orrs	r2, r1
 800d238:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2101      	movs	r1, #1
 800d246:	430a      	orrs	r2, r1
 800d248:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2241      	movs	r2, #65	@ 0x41
 800d254:	2120      	movs	r1, #32
 800d256:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2242      	movs	r2, #66	@ 0x42
 800d262:	2100      	movs	r1, #0
 800d264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	0018      	movs	r0, r3
 800d26a:	46bd      	mov	sp, r7
 800d26c:	b002      	add	sp, #8
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	f0ffffff 	.word	0xf0ffffff
 800d274:	ffff7fff 	.word	0xffff7fff
 800d278:	02008000 	.word	0x02008000

0800d27c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800d27c:	b5b0      	push	{r4, r5, r7, lr}
 800d27e:	b088      	sub	sp, #32
 800d280:	af02      	add	r7, sp, #8
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	0008      	movs	r0, r1
 800d286:	607a      	str	r2, [r7, #4]
 800d288:	0019      	movs	r1, r3
 800d28a:	230a      	movs	r3, #10
 800d28c:	18fb      	adds	r3, r7, r3
 800d28e:	1c02      	adds	r2, r0, #0
 800d290:	801a      	strh	r2, [r3, #0]
 800d292:	2308      	movs	r3, #8
 800d294:	18fb      	adds	r3, r7, r3
 800d296:	1c0a      	adds	r2, r1, #0
 800d298:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2241      	movs	r2, #65	@ 0x41
 800d29e:	5c9b      	ldrb	r3, [r3, r2]
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b20      	cmp	r3, #32
 800d2a4:	d000      	beq.n	800d2a8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800d2a6:	e0dd      	b.n	800d464 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	699a      	ldr	r2, [r3, #24]
 800d2ae:	2380      	movs	r3, #128	@ 0x80
 800d2b0:	021b      	lsls	r3, r3, #8
 800d2b2:	401a      	ands	r2, r3
 800d2b4:	2380      	movs	r3, #128	@ 0x80
 800d2b6:	021b      	lsls	r3, r3, #8
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d101      	bne.n	800d2c0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800d2bc:	2302      	movs	r3, #2
 800d2be:	e0d2      	b.n	800d466 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2240      	movs	r2, #64	@ 0x40
 800d2c4:	5c9b      	ldrb	r3, [r3, r2]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d101      	bne.n	800d2ce <HAL_I2C_Master_Transmit_DMA+0x52>
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	e0cb      	b.n	800d466 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2240      	movs	r2, #64	@ 0x40
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2241      	movs	r2, #65	@ 0x41
 800d2da:	2121      	movs	r1, #33	@ 0x21
 800d2dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2242      	movs	r2, #66	@ 0x42
 800d2e2:	2110      	movs	r1, #16
 800d2e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2208      	movs	r2, #8
 800d2f6:	18ba      	adds	r2, r7, r2
 800d2f8:	8812      	ldrh	r2, [r2, #0]
 800d2fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	4a5c      	ldr	r2, [pc, #368]	@ (800d470 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800d300:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	4a5b      	ldr	r2, [pc, #364]	@ (800d474 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800d306:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	2bff      	cmp	r3, #255	@ 0xff
 800d310:	d906      	bls.n	800d320 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	22ff      	movs	r2, #255	@ 0xff
 800d316:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d318:	2380      	movs	r3, #128	@ 0x80
 800d31a:	045b      	lsls	r3, r3, #17
 800d31c:	617b      	str	r3, [r7, #20]
 800d31e:	e007      	b.n	800d330 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d324:	b29a      	uxth	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d32a:	2380      	movs	r3, #128	@ 0x80
 800d32c:	049b      	lsls	r3, r3, #18
 800d32e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d334:	2b00      	cmp	r3, #0
 800d336:	d100      	bne.n	800d33a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800d338:	e078      	b.n	800d42c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d023      	beq.n	800d38a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d346:	4a4c      	ldr	r2, [pc, #304]	@ (800d478 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800d348:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34e:	4a4b      	ldr	r2, [pc, #300]	@ (800d47c <HAL_I2C_Master_Transmit_DMA+0x200>)
 800d350:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d356:	2200      	movs	r2, #0
 800d358:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d35e:	2200      	movs	r2, #0
 800d360:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	3328      	adds	r3, #40	@ 0x28
 800d36e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d374:	2513      	movs	r5, #19
 800d376:	197c      	adds	r4, r7, r5
 800d378:	f7ff f98e 	bl	800c698 <HAL_DMA_Start_IT>
 800d37c:	0003      	movs	r3, r0
 800d37e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d380:	197b      	adds	r3, r7, r5
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d13d      	bne.n	800d404 <HAL_I2C_Master_Transmit_DMA+0x188>
 800d388:	e013      	b.n	800d3b2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2241      	movs	r2, #65	@ 0x41
 800d38e:	2120      	movs	r1, #32
 800d390:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2242      	movs	r2, #66	@ 0x42
 800d396:	2100      	movs	r1, #0
 800d398:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d39e:	2280      	movs	r2, #128	@ 0x80
 800d3a0:	431a      	orrs	r2, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2240      	movs	r2, #64	@ 0x40
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e059      	b.n	800d466 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	697c      	ldr	r4, [r7, #20]
 800d3ba:	230a      	movs	r3, #10
 800d3bc:	18fb      	adds	r3, r7, r3
 800d3be:	8819      	ldrh	r1, [r3, #0]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d480 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	0023      	movs	r3, r4
 800d3c8:	f001 fd0e 	bl	800ede8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2240      	movs	r2, #64	@ 0x40
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2110      	movs	r1, #16
 800d3ea:	0018      	movs	r0, r3
 800d3ec:	f001 fd36 	bl	800ee5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2180      	movs	r1, #128	@ 0x80
 800d3fc:	01c9      	lsls	r1, r1, #7
 800d3fe:	430a      	orrs	r2, r1
 800d400:	601a      	str	r2, [r3, #0]
 800d402:	e02d      	b.n	800d460 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2241      	movs	r2, #65	@ 0x41
 800d408:	2120      	movs	r1, #32
 800d40a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2242      	movs	r2, #66	@ 0x42
 800d410:	2100      	movs	r1, #0
 800d412:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d418:	2210      	movs	r2, #16
 800d41a:	431a      	orrs	r2, r3
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2240      	movs	r2, #64	@ 0x40
 800d424:	2100      	movs	r1, #0
 800d426:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	e01c      	b.n	800d466 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4a15      	ldr	r2, [pc, #84]	@ (800d484 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800d430:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d436:	b2da      	uxtb	r2, r3
 800d438:	2380      	movs	r3, #128	@ 0x80
 800d43a:	049c      	lsls	r4, r3, #18
 800d43c:	230a      	movs	r3, #10
 800d43e:	18fb      	adds	r3, r7, r3
 800d440:	8819      	ldrh	r1, [r3, #0]
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	4b0e      	ldr	r3, [pc, #56]	@ (800d480 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	0023      	movs	r3, r4
 800d44a:	f001 fccd 	bl	800ede8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2240      	movs	r2, #64	@ 0x40
 800d452:	2100      	movs	r1, #0
 800d454:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2101      	movs	r1, #1
 800d45a:	0018      	movs	r0, r3
 800d45c:	f001 fcfe 	bl	800ee5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	e000      	b.n	800d466 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d464:	2302      	movs	r3, #2
  }
}
 800d466:	0018      	movs	r0, r3
 800d468:	46bd      	mov	sp, r7
 800d46a:	b006      	add	sp, #24
 800d46c:	bdb0      	pop	{r4, r5, r7, pc}
 800d46e:	46c0      	nop			@ (mov r8, r8)
 800d470:	ffff0000 	.word	0xffff0000
 800d474:	0800dc81 	.word	0x0800dc81
 800d478:	0800ec39 	.word	0x0800ec39
 800d47c:	0800ed79 	.word	0x0800ed79
 800d480:	80002000 	.word	0x80002000
 800d484:	0800d82d 	.word	0x0800d82d

0800d488 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800d488:	b5b0      	push	{r4, r5, r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af02      	add	r7, sp, #8
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	0008      	movs	r0, r1
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	0019      	movs	r1, r3
 800d496:	230a      	movs	r3, #10
 800d498:	18fb      	adds	r3, r7, r3
 800d49a:	1c02      	adds	r2, r0, #0
 800d49c:	801a      	strh	r2, [r3, #0]
 800d49e:	2308      	movs	r3, #8
 800d4a0:	18fb      	adds	r3, r7, r3
 800d4a2:	1c0a      	adds	r2, r1, #0
 800d4a4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2241      	movs	r2, #65	@ 0x41
 800d4aa:	5c9b      	ldrb	r3, [r3, r2]
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	2b20      	cmp	r3, #32
 800d4b0:	d000      	beq.n	800d4b4 <HAL_I2C_Master_Receive_DMA+0x2c>
 800d4b2:	e0dd      	b.n	800d670 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	699a      	ldr	r2, [r3, #24]
 800d4ba:	2380      	movs	r3, #128	@ 0x80
 800d4bc:	021b      	lsls	r3, r3, #8
 800d4be:	401a      	ands	r2, r3
 800d4c0:	2380      	movs	r3, #128	@ 0x80
 800d4c2:	021b      	lsls	r3, r3, #8
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d101      	bne.n	800d4cc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	e0d2      	b.n	800d672 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2240      	movs	r2, #64	@ 0x40
 800d4d0:	5c9b      	ldrb	r3, [r3, r2]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d101      	bne.n	800d4da <HAL_I2C_Master_Receive_DMA+0x52>
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	e0cb      	b.n	800d672 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2240      	movs	r2, #64	@ 0x40
 800d4de:	2101      	movs	r1, #1
 800d4e0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2241      	movs	r2, #65	@ 0x41
 800d4e6:	2122      	movs	r1, #34	@ 0x22
 800d4e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2242      	movs	r2, #66	@ 0x42
 800d4ee:	2110      	movs	r1, #16
 800d4f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2208      	movs	r2, #8
 800d502:	18ba      	adds	r2, r7, r2
 800d504:	8812      	ldrh	r2, [r2, #0]
 800d506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	4a5c      	ldr	r2, [pc, #368]	@ (800d67c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800d50c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4a5b      	ldr	r2, [pc, #364]	@ (800d680 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800d512:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d518:	b29b      	uxth	r3, r3
 800d51a:	2bff      	cmp	r3, #255	@ 0xff
 800d51c:	d906      	bls.n	800d52c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	22ff      	movs	r2, #255	@ 0xff
 800d522:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d524:	2380      	movs	r3, #128	@ 0x80
 800d526:	045b      	lsls	r3, r3, #17
 800d528:	617b      	str	r3, [r7, #20]
 800d52a:	e007      	b.n	800d53c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d530:	b29a      	uxth	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d536:	2380      	movs	r3, #128	@ 0x80
 800d538:	049b      	lsls	r3, r3, #18
 800d53a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d540:	2b00      	cmp	r3, #0
 800d542:	d100      	bne.n	800d546 <HAL_I2C_Master_Receive_DMA+0xbe>
 800d544:	e078      	b.n	800d638 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d023      	beq.n	800d596 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d552:	4a4c      	ldr	r2, [pc, #304]	@ (800d684 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800d554:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d55a:	4a4b      	ldr	r2, [pc, #300]	@ (800d688 <HAL_I2C_Master_Receive_DMA+0x200>)
 800d55c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d562:	2200      	movs	r2, #0
 800d564:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d56a:	2200      	movs	r2, #0
 800d56c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3324      	adds	r3, #36	@ 0x24
 800d578:	0019      	movs	r1, r3
 800d57a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d580:	2513      	movs	r5, #19
 800d582:	197c      	adds	r4, r7, r5
 800d584:	f7ff f888 	bl	800c698 <HAL_DMA_Start_IT>
 800d588:	0003      	movs	r3, r0
 800d58a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d58c:	197b      	adds	r3, r7, r5
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d13d      	bne.n	800d610 <HAL_I2C_Master_Receive_DMA+0x188>
 800d594:	e013      	b.n	800d5be <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2241      	movs	r2, #65	@ 0x41
 800d59a:	2120      	movs	r1, #32
 800d59c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2242      	movs	r2, #66	@ 0x42
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5aa:	2280      	movs	r2, #128	@ 0x80
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2240      	movs	r2, #64	@ 0x40
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e059      	b.n	800d672 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	697c      	ldr	r4, [r7, #20]
 800d5c6:	230a      	movs	r3, #10
 800d5c8:	18fb      	adds	r3, r7, r3
 800d5ca:	8819      	ldrh	r1, [r3, #0]
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	4b2f      	ldr	r3, [pc, #188]	@ (800d68c <HAL_I2C_Master_Receive_DMA+0x204>)
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	0023      	movs	r3, r4
 800d5d4:	f001 fc08 	bl	800ede8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2240      	movs	r2, #64	@ 0x40
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2110      	movs	r1, #16
 800d5f6:	0018      	movs	r0, r3
 800d5f8:	f001 fc30 	bl	800ee5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2180      	movs	r1, #128	@ 0x80
 800d608:	0209      	lsls	r1, r1, #8
 800d60a:	430a      	orrs	r2, r1
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	e02d      	b.n	800d66c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2241      	movs	r2, #65	@ 0x41
 800d614:	2120      	movs	r1, #32
 800d616:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2242      	movs	r2, #66	@ 0x42
 800d61c:	2100      	movs	r1, #0
 800d61e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d624:	2210      	movs	r2, #16
 800d626:	431a      	orrs	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2240      	movs	r2, #64	@ 0x40
 800d630:	2100      	movs	r1, #0
 800d632:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e01c      	b.n	800d672 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	4a15      	ldr	r2, [pc, #84]	@ (800d690 <HAL_I2C_Master_Receive_DMA+0x208>)
 800d63c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d642:	b2da      	uxtb	r2, r3
 800d644:	2380      	movs	r3, #128	@ 0x80
 800d646:	049c      	lsls	r4, r3, #18
 800d648:	230a      	movs	r3, #10
 800d64a:	18fb      	adds	r3, r7, r3
 800d64c:	8819      	ldrh	r1, [r3, #0]
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	4b0e      	ldr	r3, [pc, #56]	@ (800d68c <HAL_I2C_Master_Receive_DMA+0x204>)
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	0023      	movs	r3, r4
 800d656:	f001 fbc7 	bl	800ede8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2240      	movs	r2, #64	@ 0x40
 800d65e:	2100      	movs	r1, #0
 800d660:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2101      	movs	r1, #1
 800d666:	0018      	movs	r0, r3
 800d668:	f001 fbf8 	bl	800ee5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	e000      	b.n	800d672 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d670:	2302      	movs	r3, #2
  }
}
 800d672:	0018      	movs	r0, r3
 800d674:	46bd      	mov	sp, r7
 800d676:	b006      	add	sp, #24
 800d678:	bdb0      	pop	{r4, r5, r7, pc}
 800d67a:	46c0      	nop			@ (mov r8, r8)
 800d67c:	ffff0000 	.word	0xffff0000
 800d680:	0800dc81 	.word	0x0800dc81
 800d684:	0800ecd9 	.word	0x0800ecd9
 800d688:	0800ed79 	.word	0x0800ed79
 800d68c:	80002400 	.word	0x80002400
 800d690:	0800d82d 	.word	0x0800d82d

0800d694 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d005      	beq.n	800d6c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6b8:	68ba      	ldr	r2, [r7, #8]
 800d6ba:	68f9      	ldr	r1, [r7, #12]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	4798      	blx	r3
  }
}
 800d6c0:	46c0      	nop			@ (mov r8, r8)
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	b004      	add	sp, #16
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	2380      	movs	r3, #128	@ 0x80
 800d6e4:	005b      	lsls	r3, r3, #1
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	d00e      	beq.n	800d708 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	2280      	movs	r2, #128	@ 0x80
 800d6ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d6f0:	d00a      	beq.n	800d708 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	431a      	orrs	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2280      	movs	r2, #128	@ 0x80
 800d704:	0052      	lsls	r2, r2, #1
 800d706:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d708:	697a      	ldr	r2, [r7, #20]
 800d70a:	2380      	movs	r3, #128	@ 0x80
 800d70c:	00db      	lsls	r3, r3, #3
 800d70e:	4013      	ands	r3, r2
 800d710:	d00e      	beq.n	800d730 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2280      	movs	r2, #128	@ 0x80
 800d716:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d718:	d00a      	beq.n	800d730 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d71e:	2208      	movs	r2, #8
 800d720:	431a      	orrs	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2280      	movs	r2, #128	@ 0x80
 800d72c:	00d2      	lsls	r2, r2, #3
 800d72e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	2380      	movs	r3, #128	@ 0x80
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4013      	ands	r3, r2
 800d738:	d00e      	beq.n	800d758 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	2280      	movs	r2, #128	@ 0x80
 800d73e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d740:	d00a      	beq.n	800d758 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d746:	2202      	movs	r2, #2
 800d748:	431a      	orrs	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2280      	movs	r2, #128	@ 0x80
 800d754:	0092      	lsls	r2, r2, #2
 800d756:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d75c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	220b      	movs	r2, #11
 800d762:	4013      	ands	r3, r2
 800d764:	d005      	beq.n	800d772 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	0011      	movs	r1, r2
 800d76c:	0018      	movs	r0, r3
 800d76e:	f001 f915 	bl	800e99c <I2C_ITError>
  }
}
 800d772:	46c0      	nop			@ (mov r8, r8)
 800d774:	46bd      	mov	sp, r7
 800d776:	b006      	add	sp, #24
 800d778:	bd80      	pop	{r7, pc}

0800d77a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d782:	46c0      	nop			@ (mov r8, r8)
 800d784:	46bd      	mov	sp, r7
 800d786:	b002      	add	sp, #8
 800d788:	bd80      	pop	{r7, pc}

0800d78a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b082      	sub	sp, #8
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d792:	46c0      	nop			@ (mov r8, r8)
 800d794:	46bd      	mov	sp, r7
 800d796:	b002      	add	sp, #8
 800d798:	bd80      	pop	{r7, pc}

0800d79a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d7a2:	46c0      	nop			@ (mov r8, r8)
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	b002      	add	sp, #8
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b082      	sub	sp, #8
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d7b2:	46c0      	nop			@ (mov r8, r8)
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	b002      	add	sp, #8
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	0008      	movs	r0, r1
 800d7c4:	0011      	movs	r1, r2
 800d7c6:	1cfb      	adds	r3, r7, #3
 800d7c8:	1c02      	adds	r2, r0, #0
 800d7ca:	701a      	strb	r2, [r3, #0]
 800d7cc:	003b      	movs	r3, r7
 800d7ce:	1c0a      	adds	r2, r1, #0
 800d7d0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d7d2:	46c0      	nop			@ (mov r8, r8)
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	b002      	add	sp, #8
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b082      	sub	sp, #8
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d7e2:	46c0      	nop			@ (mov r8, r8)
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	b002      	add	sp, #8
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d7f2:	46c0      	nop			@ (mov r8, r8)
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	b002      	add	sp, #8
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b082      	sub	sp, #8
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d802:	46c0      	nop			@ (mov r8, r8)
 800d804:	46bd      	mov	sp, r7
 800d806:	b002      	add	sp, #8
 800d808:	bd80      	pop	{r7, pc}

0800d80a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b082      	sub	sp, #8
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d812:	46c0      	nop			@ (mov r8, r8)
 800d814:	46bd      	mov	sp, r7
 800d816:	b002      	add	sp, #8
 800d818:	bd80      	pop	{r7, pc}

0800d81a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b082      	sub	sp, #8
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d822:	46c0      	nop			@ (mov r8, r8)
 800d824:	46bd      	mov	sp, r7
 800d826:	b002      	add	sp, #8
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d82c:	b590      	push	{r4, r7, lr}
 800d82e:	b089      	sub	sp, #36	@ 0x24
 800d830:	af02      	add	r7, sp, #8
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2240      	movs	r2, #64	@ 0x40
 800d840:	5c9b      	ldrb	r3, [r3, r2]
 800d842:	2b01      	cmp	r3, #1
 800d844:	d101      	bne.n	800d84a <I2C_Master_ISR_IT+0x1e>
 800d846:	2302      	movs	r3, #2
 800d848:	e113      	b.n	800da72 <I2C_Master_ISR_IT+0x246>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2240      	movs	r2, #64	@ 0x40
 800d84e:	2101      	movs	r1, #1
 800d850:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2210      	movs	r2, #16
 800d856:	4013      	ands	r3, r2
 800d858:	d012      	beq.n	800d880 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2210      	movs	r2, #16
 800d85e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d860:	d00e      	beq.n	800d880 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2210      	movs	r2, #16
 800d868:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d86e:	2204      	movs	r2, #4
 800d870:	431a      	orrs	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	0018      	movs	r0, r3
 800d87a:	f001 f9ba 	bl	800ebf2 <I2C_Flush_TXDR>
 800d87e:	e0e5      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	2204      	movs	r2, #4
 800d884:	4013      	ands	r3, r2
 800d886:	d021      	beq.n	800d8cc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2204      	movs	r2, #4
 800d88c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d88e:	d01d      	beq.n	800d8cc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	2204      	movs	r2, #4
 800d894:	4393      	bics	r3, r2
 800d896:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8a2:	b2d2      	uxtb	r2, r2
 800d8a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8aa:	1c5a      	adds	r2, r3, #1
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	3b01      	subs	r3, #1
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d8ca:	e0bf      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	d01c      	beq.n	800d90e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d8da:	d018      	beq.n	800d90e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8e0:	781a      	ldrb	r2, [r3, #0]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ec:	1c5a      	adds	r2, r3, #1
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d902:	b29b      	uxth	r3, r3
 800d904:	3b01      	subs	r3, #1
 800d906:	b29a      	uxth	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d90c:	e09e      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2280      	movs	r2, #128	@ 0x80
 800d912:	4013      	ands	r3, r2
 800d914:	d100      	bne.n	800d918 <I2C_Master_ISR_IT+0xec>
 800d916:	e069      	b.n	800d9ec <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2240      	movs	r2, #64	@ 0x40
 800d91c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d91e:	d065      	beq.n	800d9ec <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d924:	b29b      	uxth	r3, r3
 800d926:	2b00      	cmp	r3, #0
 800d928:	d04a      	beq.n	800d9c0 <I2C_Master_ISR_IT+0x194>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d146      	bne.n	800d9c0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	b29a      	uxth	r2, r3
 800d93a:	2112      	movs	r1, #18
 800d93c:	187b      	adds	r3, r7, r1
 800d93e:	0592      	lsls	r2, r2, #22
 800d940:	0d92      	lsrs	r2, r2, #22
 800d942:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d948:	b29b      	uxth	r3, r3
 800d94a:	2bff      	cmp	r3, #255	@ 0xff
 800d94c:	d910      	bls.n	800d970 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	22ff      	movs	r2, #255	@ 0xff
 800d952:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	2380      	movs	r3, #128	@ 0x80
 800d95c:	045c      	lsls	r4, r3, #17
 800d95e:	187b      	adds	r3, r7, r1
 800d960:	8819      	ldrh	r1, [r3, #0]
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	2300      	movs	r3, #0
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	0023      	movs	r3, r4
 800d96a:	f001 fa3d 	bl	800ede8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d96e:	e03c      	b.n	800d9ea <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d974:	b29a      	uxth	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97e:	4a3f      	ldr	r2, [pc, #252]	@ (800da7c <I2C_Master_ISR_IT+0x250>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d00e      	beq.n	800d9a2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d988:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d98e:	2312      	movs	r3, #18
 800d990:	18fb      	adds	r3, r7, r3
 800d992:	8819      	ldrh	r1, [r3, #0]
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	2300      	movs	r3, #0
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	0023      	movs	r3, r4
 800d99c:	f001 fa24 	bl	800ede8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d9a0:	e023      	b.n	800d9ea <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	2380      	movs	r3, #128	@ 0x80
 800d9aa:	049c      	lsls	r4, r3, #18
 800d9ac:	2312      	movs	r3, #18
 800d9ae:	18fb      	adds	r3, r7, r3
 800d9b0:	8819      	ldrh	r1, [r3, #0]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	0023      	movs	r3, r4
 800d9ba:	f001 fa15 	bl	800ede8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d9be:	e014      	b.n	800d9ea <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	2380      	movs	r3, #128	@ 0x80
 800d9c8:	049b      	lsls	r3, r3, #18
 800d9ca:	401a      	ands	r2, r3
 800d9cc:	2380      	movs	r3, #128	@ 0x80
 800d9ce:	049b      	lsls	r3, r3, #18
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d004      	beq.n	800d9de <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	0018      	movs	r0, r3
 800d9d8:	f000 fcf4 	bl	800e3c4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9dc:	e036      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2140      	movs	r1, #64	@ 0x40
 800d9e2:	0018      	movs	r0, r3
 800d9e4:	f000 ffda 	bl	800e99c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9e8:	e030      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
 800d9ea:	e02f      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	2240      	movs	r2, #64	@ 0x40
 800d9f0:	4013      	ands	r3, r2
 800d9f2:	d02b      	beq.n	800da4c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2240      	movs	r2, #64	@ 0x40
 800d9f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d9fa:	d027      	beq.n	800da4c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da00:	b29b      	uxth	r3, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	d11d      	bne.n	800da42 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	2380      	movs	r3, #128	@ 0x80
 800da0e:	049b      	lsls	r3, r3, #18
 800da10:	401a      	ands	r2, r3
 800da12:	2380      	movs	r3, #128	@ 0x80
 800da14:	049b      	lsls	r3, r3, #18
 800da16:	429a      	cmp	r2, r3
 800da18:	d018      	beq.n	800da4c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da1e:	4a17      	ldr	r2, [pc, #92]	@ (800da7c <I2C_Master_ISR_IT+0x250>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d109      	bne.n	800da38 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	685a      	ldr	r2, [r3, #4]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2180      	movs	r1, #128	@ 0x80
 800da30:	01c9      	lsls	r1, r1, #7
 800da32:	430a      	orrs	r2, r1
 800da34:	605a      	str	r2, [r3, #4]
 800da36:	e009      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	0018      	movs	r0, r3
 800da3c:	f000 fcc2 	bl	800e3c4 <I2C_ITMasterSeqCplt>
 800da40:	e004      	b.n	800da4c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2140      	movs	r1, #64	@ 0x40
 800da46:	0018      	movs	r0, r3
 800da48:	f000 ffa8 	bl	800e99c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2220      	movs	r2, #32
 800da50:	4013      	ands	r3, r2
 800da52:	d009      	beq.n	800da68 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2220      	movs	r2, #32
 800da58:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800da5a:	d005      	beq.n	800da68 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	0011      	movs	r1, r2
 800da62:	0018      	movs	r0, r3
 800da64:	f000 fd54 	bl	800e510 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2240      	movs	r2, #64	@ 0x40
 800da6c:	2100      	movs	r1, #0
 800da6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	0018      	movs	r0, r3
 800da74:	46bd      	mov	sp, r7
 800da76:	b007      	add	sp, #28
 800da78:	bd90      	pop	{r4, r7, pc}
 800da7a:	46c0      	nop			@ (mov r8, r8)
 800da7c:	ffff0000 	.word	0xffff0000

0800da80 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da90:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2240      	movs	r2, #64	@ 0x40
 800da9a:	5c9b      	ldrb	r3, [r3, r2]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d101      	bne.n	800daa4 <I2C_Slave_ISR_IT+0x24>
 800daa0:	2302      	movs	r3, #2
 800daa2:	e0e6      	b.n	800dc72 <I2C_Slave_ISR_IT+0x1f2>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2240      	movs	r2, #64	@ 0x40
 800daa8:	2101      	movs	r1, #1
 800daaa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	2220      	movs	r2, #32
 800dab0:	4013      	ands	r3, r2
 800dab2:	d009      	beq.n	800dac8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2220      	movs	r2, #32
 800dab8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800daba:	d005      	beq.n	800dac8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800dabc:	693a      	ldr	r2, [r7, #16]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	0011      	movs	r1, r2
 800dac2:	0018      	movs	r0, r3
 800dac4:	f000 fdf2 	bl	800e6ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2210      	movs	r2, #16
 800dacc:	4013      	ands	r3, r2
 800dace:	d052      	beq.n	800db76 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2210      	movs	r2, #16
 800dad4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dad6:	d04e      	beq.n	800db76 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dadc:	b29b      	uxth	r3, r3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d12d      	bne.n	800db3e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2241      	movs	r2, #65	@ 0x41
 800dae6:	5c9b      	ldrb	r3, [r3, r2]
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b28      	cmp	r3, #40	@ 0x28
 800daec:	d10b      	bne.n	800db06 <I2C_Slave_ISR_IT+0x86>
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	2380      	movs	r3, #128	@ 0x80
 800daf2:	049b      	lsls	r3, r3, #18
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d106      	bne.n	800db06 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	0011      	movs	r1, r2
 800dafe:	0018      	movs	r0, r3
 800db00:	f000 fef4 	bl	800e8ec <I2C_ITListenCplt>
 800db04:	e036      	b.n	800db74 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2241      	movs	r2, #65	@ 0x41
 800db0a:	5c9b      	ldrb	r3, [r3, r2]
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b29      	cmp	r3, #41	@ 0x29
 800db10:	d110      	bne.n	800db34 <I2C_Slave_ISR_IT+0xb4>
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	4a59      	ldr	r2, [pc, #356]	@ (800dc7c <I2C_Slave_ISR_IT+0x1fc>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d00c      	beq.n	800db34 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2210      	movs	r2, #16
 800db20:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	0018      	movs	r0, r3
 800db26:	f001 f864 	bl	800ebf2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	0018      	movs	r0, r3
 800db2e:	f000 fc8b 	bl	800e448 <I2C_ITSlaveSeqCplt>
 800db32:	e01f      	b.n	800db74 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2210      	movs	r2, #16
 800db3a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800db3c:	e091      	b.n	800dc62 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2210      	movs	r2, #16
 800db44:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db4a:	2204      	movs	r2, #4
 800db4c:	431a      	orrs	r2, r3
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d005      	beq.n	800db64 <I2C_Slave_ISR_IT+0xe4>
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	2380      	movs	r3, #128	@ 0x80
 800db5c:	045b      	lsls	r3, r3, #17
 800db5e:	429a      	cmp	r2, r3
 800db60:	d000      	beq.n	800db64 <I2C_Slave_ISR_IT+0xe4>
 800db62:	e07e      	b.n	800dc62 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	0011      	movs	r1, r2
 800db6c:	0018      	movs	r0, r3
 800db6e:	f000 ff15 	bl	800e99c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800db72:	e076      	b.n	800dc62 <I2C_Slave_ISR_IT+0x1e2>
 800db74:	e075      	b.n	800dc62 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	2204      	movs	r2, #4
 800db7a:	4013      	ands	r3, r2
 800db7c:	d02f      	beq.n	800dbde <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2204      	movs	r2, #4
 800db82:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800db84:	d02b      	beq.n	800dbde <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d018      	beq.n	800dbc2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db9a:	b2d2      	uxtb	r2, r2
 800db9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba2:	1c5a      	adds	r2, r3, #1
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbac:	3b01      	subs	r3, #1
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d14c      	bne.n	800dc66 <I2C_Slave_ISR_IT+0x1e6>
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	4a2b      	ldr	r2, [pc, #172]	@ (800dc7c <I2C_Slave_ISR_IT+0x1fc>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d048      	beq.n	800dc66 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	0018      	movs	r0, r3
 800dbd8:	f000 fc36 	bl	800e448 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800dbdc:	e043      	b.n	800dc66 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2208      	movs	r2, #8
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	d00a      	beq.n	800dbfc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2208      	movs	r2, #8
 800dbea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dbec:	d006      	beq.n	800dbfc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	0011      	movs	r1, r2
 800dbf4:	0018      	movs	r0, r3
 800dbf6:	f000 fb41 	bl	800e27c <I2C_ITAddrCplt>
 800dbfa:	e035      	b.n	800dc68 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	2202      	movs	r2, #2
 800dc00:	4013      	ands	r3, r2
 800dc02:	d031      	beq.n	800dc68 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2202      	movs	r2, #2
 800dc08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dc0a:	d02d      	beq.n	800dc68 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d018      	beq.n	800dc48 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc1a:	781a      	ldrb	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc26:	1c5a      	adds	r2, r3, #1
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	3b01      	subs	r3, #1
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dc46:	e00f      	b.n	800dc68 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	2380      	movs	r3, #128	@ 0x80
 800dc4c:	045b      	lsls	r3, r3, #17
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d002      	beq.n	800dc58 <I2C_Slave_ISR_IT+0x1d8>
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d107      	bne.n	800dc68 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f000 fbf4 	bl	800e448 <I2C_ITSlaveSeqCplt>
 800dc60:	e002      	b.n	800dc68 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800dc62:	46c0      	nop			@ (mov r8, r8)
 800dc64:	e000      	b.n	800dc68 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800dc66:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2240      	movs	r2, #64	@ 0x40
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	0018      	movs	r0, r3
 800dc74:	46bd      	mov	sp, r7
 800dc76:	b006      	add	sp, #24
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	46c0      	nop			@ (mov r8, r8)
 800dc7c:	ffff0000 	.word	0xffff0000

0800dc80 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800dc80:	b590      	push	{r4, r7, lr}
 800dc82:	b089      	sub	sp, #36	@ 0x24
 800dc84:	af02      	add	r7, sp, #8
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2240      	movs	r2, #64	@ 0x40
 800dc90:	5c9b      	ldrb	r3, [r3, r2]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d101      	bne.n	800dc9a <I2C_Master_ISR_DMA+0x1a>
 800dc96:	2302      	movs	r3, #2
 800dc98:	e0e7      	b.n	800de6a <I2C_Master_ISR_DMA+0x1ea>
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2240      	movs	r2, #64	@ 0x40
 800dc9e:	2101      	movs	r1, #1
 800dca0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	2210      	movs	r2, #16
 800dca6:	4013      	ands	r3, r2
 800dca8:	d017      	beq.n	800dcda <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2210      	movs	r2, #16
 800dcae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800dcb0:	d013      	beq.n	800dcda <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2210      	movs	r2, #16
 800dcb8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcbe:	2204      	movs	r2, #4
 800dcc0:	431a      	orrs	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2120      	movs	r1, #32
 800dcca:	0018      	movs	r0, r3
 800dccc:	f001 f8c6 	bl	800ee5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	0018      	movs	r0, r3
 800dcd4:	f000 ff8d 	bl	800ebf2 <I2C_Flush_TXDR>
 800dcd8:	e0c2      	b.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	2280      	movs	r2, #128	@ 0x80
 800dcde:	4013      	ands	r3, r2
 800dce0:	d100      	bne.n	800dce4 <I2C_Master_ISR_DMA+0x64>
 800dce2:	e07c      	b.n	800ddde <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2240      	movs	r2, #64	@ 0x40
 800dce8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800dcea:	d100      	bne.n	800dcee <I2C_Master_ISR_DMA+0x6e>
 800dcec:	e077      	b.n	800ddde <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2140      	movs	r1, #64	@ 0x40
 800dcfa:	438a      	bics	r2, r1
 800dcfc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d055      	beq.n	800ddb4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	2312      	movs	r3, #18
 800dd12:	18fb      	adds	r3, r7, r3
 800dd14:	0592      	lsls	r2, r2, #22
 800dd16:	0d92      	lsrs	r2, r2, #22
 800dd18:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	2bff      	cmp	r3, #255	@ 0xff
 800dd22:	d906      	bls.n	800dd32 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	22ff      	movs	r2, #255	@ 0xff
 800dd28:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800dd2a:	2380      	movs	r3, #128	@ 0x80
 800dd2c:	045b      	lsls	r3, r3, #17
 800dd2e:	617b      	str	r3, [r7, #20]
 800dd30:	e010      	b.n	800dd54 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd40:	4a4c      	ldr	r2, [pc, #304]	@ (800de74 <I2C_Master_ISR_DMA+0x1f4>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d003      	beq.n	800dd4e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd4a:	617b      	str	r3, [r7, #20]
 800dd4c:	e002      	b.n	800dd54 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800dd4e:	2380      	movs	r3, #128	@ 0x80
 800dd50:	049b      	lsls	r3, r3, #18
 800dd52:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	697c      	ldr	r4, [r7, #20]
 800dd5c:	2312      	movs	r3, #18
 800dd5e:	18fb      	adds	r3, r7, r3
 800dd60:	8819      	ldrh	r1, [r3, #0]
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	2300      	movs	r3, #0
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	0023      	movs	r3, r4
 800dd6a:	f001 f83d 	bl	800ede8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2241      	movs	r2, #65	@ 0x41
 800dd84:	5c9b      	ldrb	r3, [r3, r2]
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	2b22      	cmp	r3, #34	@ 0x22
 800dd8a:	d109      	bne.n	800dda0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2180      	movs	r1, #128	@ 0x80
 800dd98:	0209      	lsls	r1, r1, #8
 800dd9a:	430a      	orrs	r2, r1
 800dd9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800dd9e:	e05f      	b.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2180      	movs	r1, #128	@ 0x80
 800ddac:	01c9      	lsls	r1, r1, #7
 800ddae:	430a      	orrs	r2, r1
 800ddb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ddb2:	e055      	b.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	685a      	ldr	r2, [r3, #4]
 800ddba:	2380      	movs	r3, #128	@ 0x80
 800ddbc:	049b      	lsls	r3, r3, #18
 800ddbe:	401a      	ands	r2, r3
 800ddc0:	2380      	movs	r3, #128	@ 0x80
 800ddc2:	049b      	lsls	r3, r3, #18
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d004      	beq.n	800ddd2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	0018      	movs	r0, r3
 800ddcc:	f000 fafa 	bl	800e3c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800ddd0:	e046      	b.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2140      	movs	r1, #64	@ 0x40
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	f000 fde0 	bl	800e99c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800dddc:	e040      	b.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	2240      	movs	r2, #64	@ 0x40
 800dde2:	4013      	ands	r3, r2
 800dde4:	d02c      	beq.n	800de40 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2240      	movs	r2, #64	@ 0x40
 800ddea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ddec:	d028      	beq.n	800de40 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d11d      	bne.n	800de34 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	685a      	ldr	r2, [r3, #4]
 800ddfe:	2380      	movs	r3, #128	@ 0x80
 800de00:	049b      	lsls	r3, r3, #18
 800de02:	401a      	ands	r2, r3
 800de04:	2380      	movs	r3, #128	@ 0x80
 800de06:	049b      	lsls	r3, r3, #18
 800de08:	429a      	cmp	r2, r3
 800de0a:	d028      	beq.n	800de5e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de10:	4a18      	ldr	r2, [pc, #96]	@ (800de74 <I2C_Master_ISR_DMA+0x1f4>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d109      	bne.n	800de2a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2180      	movs	r1, #128	@ 0x80
 800de22:	01c9      	lsls	r1, r1, #7
 800de24:	430a      	orrs	r2, r1
 800de26:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800de28:	e019      	b.n	800de5e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	0018      	movs	r0, r3
 800de2e:	f000 fac9 	bl	800e3c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800de32:	e014      	b.n	800de5e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2140      	movs	r1, #64	@ 0x40
 800de38:	0018      	movs	r0, r3
 800de3a:	f000 fdaf 	bl	800e99c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800de3e:	e00e      	b.n	800de5e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2220      	movs	r2, #32
 800de44:	4013      	ands	r3, r2
 800de46:	d00b      	beq.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2220      	movs	r2, #32
 800de4c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800de4e:	d007      	beq.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	0011      	movs	r1, r2
 800de56:	0018      	movs	r0, r3
 800de58:	f000 fb5a 	bl	800e510 <I2C_ITMasterCplt>
 800de5c:	e000      	b.n	800de60 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800de5e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2240      	movs	r2, #64	@ 0x40
 800de64:	2100      	movs	r1, #0
 800de66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	0018      	movs	r0, r3
 800de6c:	46bd      	mov	sp, r7
 800de6e:	b007      	add	sp, #28
 800de70:	bd90      	pop	{r4, r7, pc}
 800de72:	46c0      	nop			@ (mov r8, r8)
 800de74:	ffff0000 	.word	0xffff0000

0800de78 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800de78:	b590      	push	{r4, r7, lr}
 800de7a:	b089      	sub	sp, #36	@ 0x24
 800de7c:	af02      	add	r7, sp, #8
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800de84:	4b88      	ldr	r3, [pc, #544]	@ (800e0a8 <I2C_Mem_ISR_DMA+0x230>)
 800de86:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2240      	movs	r2, #64	@ 0x40
 800de8c:	5c9b      	ldrb	r3, [r3, r2]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d101      	bne.n	800de96 <I2C_Mem_ISR_DMA+0x1e>
 800de92:	2302      	movs	r3, #2
 800de94:	e104      	b.n	800e0a0 <I2C_Mem_ISR_DMA+0x228>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2240      	movs	r2, #64	@ 0x40
 800de9a:	2101      	movs	r1, #1
 800de9c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2210      	movs	r2, #16
 800dea2:	4013      	ands	r3, r2
 800dea4:	d017      	beq.n	800ded6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2210      	movs	r2, #16
 800deaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800deac:	d013      	beq.n	800ded6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2210      	movs	r2, #16
 800deb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deba:	2204      	movs	r2, #4
 800debc:	431a      	orrs	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2120      	movs	r1, #32
 800dec6:	0018      	movs	r0, r3
 800dec8:	f000 ffc8 	bl	800ee5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	0018      	movs	r0, r3
 800ded0:	f000 fe8f 	bl	800ebf2 <I2C_Flush_TXDR>
 800ded4:	e0df      	b.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2202      	movs	r2, #2
 800deda:	4013      	ands	r3, r2
 800dedc:	d00d      	beq.n	800defa <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2202      	movs	r2, #2
 800dee2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dee4:	d009      	beq.n	800defa <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800deee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2201      	movs	r2, #1
 800def4:	4252      	negs	r2, r2
 800def6:	651a      	str	r2, [r3, #80]	@ 0x50
 800def8:	e0cd      	b.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2280      	movs	r2, #128	@ 0x80
 800defe:	4013      	ands	r3, r2
 800df00:	d05e      	beq.n	800dfc0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2240      	movs	r2, #64	@ 0x40
 800df06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800df08:	d05a      	beq.n	800dfc0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2110      	movs	r1, #16
 800df0e:	0018      	movs	r0, r3
 800df10:	f000 ffa4 	bl	800ee5c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df18:	b29b      	uxth	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d04a      	beq.n	800dfb4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df22:	b29b      	uxth	r3, r3
 800df24:	2bff      	cmp	r3, #255	@ 0xff
 800df26:	d910      	bls.n	800df4a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	22ff      	movs	r2, #255	@ 0xff
 800df2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df32:	b299      	uxth	r1, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	2380      	movs	r3, #128	@ 0x80
 800df3c:	045b      	lsls	r3, r3, #17
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	2400      	movs	r4, #0
 800df42:	9400      	str	r4, [sp, #0]
 800df44:	f000 ff50 	bl	800ede8 <I2C_TransferConfig>
 800df48:	e011      	b.n	800df6e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df4e:	b29a      	uxth	r2, r3
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df58:	b299      	uxth	r1, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	2380      	movs	r3, #128	@ 0x80
 800df62:	049b      	lsls	r3, r3, #18
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	2400      	movs	r4, #0
 800df68:	9400      	str	r4, [sp, #0]
 800df6a:	f000 ff3d 	bl	800ede8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df72:	b29a      	uxth	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2241      	movs	r2, #65	@ 0x41
 800df84:	5c9b      	ldrb	r3, [r3, r2]
 800df86:	b2db      	uxtb	r3, r3
 800df88:	2b22      	cmp	r3, #34	@ 0x22
 800df8a:	d109      	bne.n	800dfa0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2180      	movs	r1, #128	@ 0x80
 800df98:	0209      	lsls	r1, r1, #8
 800df9a:	430a      	orrs	r2, r1
 800df9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800df9e:	e07a      	b.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2180      	movs	r1, #128	@ 0x80
 800dfac:	01c9      	lsls	r1, r1, #7
 800dfae:	430a      	orrs	r2, r1
 800dfb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800dfb2:	e070      	b.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2140      	movs	r1, #64	@ 0x40
 800dfb8:	0018      	movs	r0, r3
 800dfba:	f000 fcef 	bl	800e99c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800dfbe:	e06a      	b.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2240      	movs	r2, #64	@ 0x40
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	d058      	beq.n	800e07a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2240      	movs	r2, #64	@ 0x40
 800dfcc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800dfce:	d054      	beq.n	800e07a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2241      	movs	r2, #65	@ 0x41
 800dfd4:	5c9b      	ldrb	r3, [r3, r2]
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	2b22      	cmp	r3, #34	@ 0x22
 800dfda:	d101      	bne.n	800dfe0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800dfdc:	4b33      	ldr	r3, [pc, #204]	@ (800e0ac <I2C_Mem_ISR_DMA+0x234>)
 800dfde:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2bff      	cmp	r3, #255	@ 0xff
 800dfe8:	d911      	bls.n	800e00e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	22ff      	movs	r2, #255	@ 0xff
 800dfee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dff4:	b299      	uxth	r1, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	2380      	movs	r3, #128	@ 0x80
 800dffe:	045c      	lsls	r4, r3, #17
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	0023      	movs	r3, r4
 800e008:	f000 feee 	bl	800ede8 <I2C_TransferConfig>
 800e00c:	e012      	b.n	800e034 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e012:	b29a      	uxth	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e01c:	b299      	uxth	r1, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e022:	b2da      	uxtb	r2, r3
 800e024:	2380      	movs	r3, #128	@ 0x80
 800e026:	049c      	lsls	r4, r3, #18
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	0023      	movs	r3, r4
 800e030:	f000 feda 	bl	800ede8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e038:	b29a      	uxth	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	b29a      	uxth	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2241      	movs	r2, #65	@ 0x41
 800e04a:	5c9b      	ldrb	r3, [r3, r2]
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2b22      	cmp	r3, #34	@ 0x22
 800e050:	d109      	bne.n	800e066 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2180      	movs	r1, #128	@ 0x80
 800e05e:	0209      	lsls	r1, r1, #8
 800e060:	430a      	orrs	r2, r1
 800e062:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e064:	e017      	b.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2180      	movs	r1, #128	@ 0x80
 800e072:	01c9      	lsls	r1, r1, #7
 800e074:	430a      	orrs	r2, r1
 800e076:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e078:	e00d      	b.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	2220      	movs	r2, #32
 800e07e:	4013      	ands	r3, r2
 800e080:	d009      	beq.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2220      	movs	r2, #32
 800e086:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e088:	d005      	beq.n	800e096 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	0011      	movs	r1, r2
 800e090:	0018      	movs	r0, r3
 800e092:	f000 fa3d 	bl	800e510 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2240      	movs	r2, #64	@ 0x40
 800e09a:	2100      	movs	r1, #0
 800e09c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	0018      	movs	r0, r3
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	b007      	add	sp, #28
 800e0a6:	bd90      	pop	{r4, r7, pc}
 800e0a8:	80002000 	.word	0x80002000
 800e0ac:	80002400 	.word	0x80002400

0800e0b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2240      	movs	r2, #64	@ 0x40
 800e0ca:	5c9b      	ldrb	r3, [r3, r2]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d101      	bne.n	800e0d4 <I2C_Slave_ISR_DMA+0x24>
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	e0cd      	b.n	800e270 <I2C_Slave_ISR_DMA+0x1c0>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2240      	movs	r2, #64	@ 0x40
 800e0d8:	2101      	movs	r1, #1
 800e0da:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	2220      	movs	r2, #32
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	d009      	beq.n	800e0f8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2220      	movs	r2, #32
 800e0e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e0ea:	d005      	beq.n	800e0f8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	0011      	movs	r1, r2
 800e0f2:	0018      	movs	r0, r3
 800e0f4:	f000 fada 	bl	800e6ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2210      	movs	r2, #16
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	d100      	bne.n	800e102 <I2C_Slave_ISR_DMA+0x52>
 800e100:	e0a3      	b.n	800e24a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2210      	movs	r2, #16
 800e106:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e108:	d100      	bne.n	800e10c <I2C_Slave_ISR_DMA+0x5c>
 800e10a:	e09e      	b.n	800e24a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	2380      	movs	r3, #128	@ 0x80
 800e110:	01db      	lsls	r3, r3, #7
 800e112:	4013      	ands	r3, r2
 800e114:	d105      	bne.n	800e122 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	2380      	movs	r3, #128	@ 0x80
 800e11a:	021b      	lsls	r3, r3, #8
 800e11c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e11e:	d100      	bne.n	800e122 <I2C_Slave_ISR_DMA+0x72>
 800e120:	e08c      	b.n	800e23c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00c      	beq.n	800e144 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	2380      	movs	r3, #128	@ 0x80
 800e12e:	021b      	lsls	r3, r3, #8
 800e130:	4013      	ands	r3, r2
 800e132:	d007      	beq.n	800e144 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800e140:	2301      	movs	r3, #1
 800e142:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00c      	beq.n	800e166 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	2380      	movs	r3, #128	@ 0x80
 800e150:	01db      	lsls	r3, r3, #7
 800e152:	4013      	ands	r3, r2
 800e154:	d007      	beq.n	800e166 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800e162:	2301      	movs	r3, #1
 800e164:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d12d      	bne.n	800e1c8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2241      	movs	r2, #65	@ 0x41
 800e170:	5c9b      	ldrb	r3, [r3, r2]
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b28      	cmp	r3, #40	@ 0x28
 800e176:	d10b      	bne.n	800e190 <I2C_Slave_ISR_DMA+0xe0>
 800e178:	69ba      	ldr	r2, [r7, #24]
 800e17a:	2380      	movs	r3, #128	@ 0x80
 800e17c:	049b      	lsls	r3, r3, #18
 800e17e:	429a      	cmp	r2, r3
 800e180:	d106      	bne.n	800e190 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	0011      	movs	r1, r2
 800e188:	0018      	movs	r0, r3
 800e18a:	f000 fbaf 	bl	800e8ec <I2C_ITListenCplt>
 800e18e:	e054      	b.n	800e23a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2241      	movs	r2, #65	@ 0x41
 800e194:	5c9b      	ldrb	r3, [r3, r2]
 800e196:	b2db      	uxtb	r3, r3
 800e198:	2b29      	cmp	r3, #41	@ 0x29
 800e19a:	d110      	bne.n	800e1be <I2C_Slave_ISR_DMA+0x10e>
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	4a36      	ldr	r2, [pc, #216]	@ (800e278 <I2C_Slave_ISR_DMA+0x1c8>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d00c      	beq.n	800e1be <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2210      	movs	r2, #16
 800e1aa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f000 fd1f 	bl	800ebf2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	0018      	movs	r0, r3
 800e1b8:	f000 f946 	bl	800e448 <I2C_ITSlaveSeqCplt>
 800e1bc:	e03d      	b.n	800e23a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2210      	movs	r2, #16
 800e1c4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800e1c6:	e03e      	b.n	800e246 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2210      	movs	r2, #16
 800e1ce:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1d4:	2204      	movs	r2, #4
 800e1d6:	431a      	orrs	r2, r3
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800e1dc:	2317      	movs	r3, #23
 800e1de:	18fb      	adds	r3, r7, r3
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	2141      	movs	r1, #65	@ 0x41
 800e1e4:	5c52      	ldrb	r2, [r2, r1]
 800e1e6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d004      	beq.n	800e1f8 <I2C_Slave_ISR_DMA+0x148>
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	2380      	movs	r3, #128	@ 0x80
 800e1f2:	045b      	lsls	r3, r3, #17
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d126      	bne.n	800e246 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e1f8:	2217      	movs	r2, #23
 800e1fa:	18bb      	adds	r3, r7, r2
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	2b21      	cmp	r3, #33	@ 0x21
 800e200:	d003      	beq.n	800e20a <I2C_Slave_ISR_DMA+0x15a>
 800e202:	18bb      	adds	r3, r7, r2
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2b29      	cmp	r3, #41	@ 0x29
 800e208:	d103      	bne.n	800e212 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2221      	movs	r2, #33	@ 0x21
 800e20e:	631a      	str	r2, [r3, #48]	@ 0x30
 800e210:	e00b      	b.n	800e22a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e212:	2217      	movs	r2, #23
 800e214:	18bb      	adds	r3, r7, r2
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	2b22      	cmp	r3, #34	@ 0x22
 800e21a:	d003      	beq.n	800e224 <I2C_Slave_ISR_DMA+0x174>
 800e21c:	18bb      	adds	r3, r7, r2
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b2a      	cmp	r3, #42	@ 0x2a
 800e222:	d102      	bne.n	800e22a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2222      	movs	r2, #34	@ 0x22
 800e228:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	0011      	movs	r1, r2
 800e232:	0018      	movs	r0, r3
 800e234:	f000 fbb2 	bl	800e99c <I2C_ITError>
      if (treatdmanack == 1U)
 800e238:	e005      	b.n	800e246 <I2C_Slave_ISR_DMA+0x196>
 800e23a:	e004      	b.n	800e246 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2210      	movs	r2, #16
 800e242:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e244:	e00f      	b.n	800e266 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800e246:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e248:	e00d      	b.n	800e266 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2208      	movs	r2, #8
 800e24e:	4013      	ands	r3, r2
 800e250:	d009      	beq.n	800e266 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2208      	movs	r2, #8
 800e256:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e258:	d005      	beq.n	800e266 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	0011      	movs	r1, r2
 800e260:	0018      	movs	r0, r3
 800e262:	f000 f80b 	bl	800e27c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2240      	movs	r2, #64	@ 0x40
 800e26a:	2100      	movs	r1, #0
 800e26c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	0018      	movs	r0, r3
 800e272:	46bd      	mov	sp, r7
 800e274:	b008      	add	sp, #32
 800e276:	bd80      	pop	{r7, pc}
 800e278:	ffff0000 	.word	0xffff0000

0800e27c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e27c:	b5b0      	push	{r4, r5, r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2241      	movs	r2, #65	@ 0x41
 800e28a:	5c9b      	ldrb	r3, [r3, r2]
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	001a      	movs	r2, r3
 800e290:	2328      	movs	r3, #40	@ 0x28
 800e292:	4013      	ands	r3, r2
 800e294:	2b28      	cmp	r3, #40	@ 0x28
 800e296:	d000      	beq.n	800e29a <I2C_ITAddrCplt+0x1e>
 800e298:	e088      	b.n	800e3ac <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	0c1b      	lsrs	r3, r3, #16
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	250f      	movs	r5, #15
 800e2a6:	197b      	adds	r3, r7, r5
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	400a      	ands	r2, r1
 800e2ac:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	0c1b      	lsrs	r3, r3, #16
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	200c      	movs	r0, #12
 800e2ba:	183b      	adds	r3, r7, r0
 800e2bc:	21fe      	movs	r1, #254	@ 0xfe
 800e2be:	400a      	ands	r2, r1
 800e2c0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	240a      	movs	r4, #10
 800e2cc:	193b      	adds	r3, r7, r4
 800e2ce:	0592      	lsls	r2, r2, #22
 800e2d0:	0d92      	lsrs	r2, r2, #22
 800e2d2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	2308      	movs	r3, #8
 800e2de:	18fb      	adds	r3, r7, r3
 800e2e0:	21fe      	movs	r1, #254	@ 0xfe
 800e2e2:	400a      	ands	r2, r1
 800e2e4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d148      	bne.n	800e380 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800e2ee:	0021      	movs	r1, r4
 800e2f0:	187b      	adds	r3, r7, r1
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	09db      	lsrs	r3, r3, #7
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	183b      	adds	r3, r7, r0
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	4053      	eors	r3, r2
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	001a      	movs	r2, r3
 800e302:	2306      	movs	r3, #6
 800e304:	4013      	ands	r3, r2
 800e306:	d120      	bne.n	800e34a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800e308:	183b      	adds	r3, r7, r0
 800e30a:	187a      	adds	r2, r7, r1
 800e30c:	8812      	ldrh	r2, [r2, #0]
 800e30e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e31e:	2b02      	cmp	r3, #2
 800e320:	d14c      	bne.n	800e3bc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2208      	movs	r2, #8
 800e32e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2240      	movs	r2, #64	@ 0x40
 800e334:	2100      	movs	r1, #0
 800e336:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e338:	183b      	adds	r3, r7, r0
 800e33a:	881a      	ldrh	r2, [r3, #0]
 800e33c:	197b      	adds	r3, r7, r5
 800e33e:	7819      	ldrb	r1, [r3, #0]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	0018      	movs	r0, r3
 800e344:	f7ff fa39 	bl	800d7ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e348:	e038      	b.n	800e3bc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800e34a:	240c      	movs	r4, #12
 800e34c:	193b      	adds	r3, r7, r4
 800e34e:	2208      	movs	r2, #8
 800e350:	18ba      	adds	r2, r7, r2
 800e352:	8812      	ldrh	r2, [r2, #0]
 800e354:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e356:	2380      	movs	r3, #128	@ 0x80
 800e358:	021a      	lsls	r2, r3, #8
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	0011      	movs	r1, r2
 800e35e:	0018      	movs	r0, r3
 800e360:	f000 fe0a 	bl	800ef78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2240      	movs	r2, #64	@ 0x40
 800e368:	2100      	movs	r1, #0
 800e36a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e36c:	193b      	adds	r3, r7, r4
 800e36e:	881a      	ldrh	r2, [r3, #0]
 800e370:	230f      	movs	r3, #15
 800e372:	18fb      	adds	r3, r7, r3
 800e374:	7819      	ldrb	r1, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	0018      	movs	r0, r3
 800e37a:	f7ff fa1e 	bl	800d7ba <HAL_I2C_AddrCallback>
}
 800e37e:	e01d      	b.n	800e3bc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e380:	2380      	movs	r3, #128	@ 0x80
 800e382:	021a      	lsls	r2, r3, #8
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	0011      	movs	r1, r2
 800e388:	0018      	movs	r0, r3
 800e38a:	f000 fdf5 	bl	800ef78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2240      	movs	r2, #64	@ 0x40
 800e392:	2100      	movs	r1, #0
 800e394:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e396:	230c      	movs	r3, #12
 800e398:	18fb      	adds	r3, r7, r3
 800e39a:	881a      	ldrh	r2, [r3, #0]
 800e39c:	230f      	movs	r3, #15
 800e39e:	18fb      	adds	r3, r7, r3
 800e3a0:	7819      	ldrb	r1, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	0018      	movs	r0, r3
 800e3a6:	f7ff fa08 	bl	800d7ba <HAL_I2C_AddrCallback>
}
 800e3aa:	e007      	b.n	800e3bc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2208      	movs	r2, #8
 800e3b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2240      	movs	r2, #64	@ 0x40
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	5499      	strb	r1, [r3, r2]
}
 800e3bc:	46c0      	nop			@ (mov r8, r8)
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	b004      	add	sp, #16
 800e3c2:	bdb0      	pop	{r4, r5, r7, pc}

0800e3c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2242      	movs	r2, #66	@ 0x42
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2241      	movs	r2, #65	@ 0x41
 800e3d8:	5c9b      	ldrb	r3, [r3, r2]
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b21      	cmp	r3, #33	@ 0x21
 800e3de:	d117      	bne.n	800e410 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2241      	movs	r2, #65	@ 0x41
 800e3e4:	2120      	movs	r1, #32
 800e3e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2211      	movs	r2, #17
 800e3ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2101      	movs	r1, #1
 800e3f8:	0018      	movs	r0, r3
 800e3fa:	f000 fdbd 	bl	800ef78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2240      	movs	r2, #64	@ 0x40
 800e402:	2100      	movs	r1, #0
 800e404:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	0018      	movs	r0, r3
 800e40a:	f7ff f9b6 	bl	800d77a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e40e:	e016      	b.n	800e43e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2241      	movs	r2, #65	@ 0x41
 800e414:	2120      	movs	r1, #32
 800e416:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2212      	movs	r2, #18
 800e41c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2102      	movs	r1, #2
 800e428:	0018      	movs	r0, r3
 800e42a:	f000 fda5 	bl	800ef78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2240      	movs	r2, #64	@ 0x40
 800e432:	2100      	movs	r1, #0
 800e434:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	0018      	movs	r0, r3
 800e43a:	f7ff f9a6 	bl	800d78a <HAL_I2C_MasterRxCpltCallback>
}
 800e43e:	46c0      	nop			@ (mov r8, r8)
 800e440:	46bd      	mov	sp, r7
 800e442:	b002      	add	sp, #8
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2242      	movs	r2, #66	@ 0x42
 800e45c:	2100      	movs	r1, #0
 800e45e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	2380      	movs	r3, #128	@ 0x80
 800e464:	01db      	lsls	r3, r3, #7
 800e466:	4013      	ands	r3, r2
 800e468:	d008      	beq.n	800e47c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4924      	ldr	r1, [pc, #144]	@ (800e508 <I2C_ITSlaveSeqCplt+0xc0>)
 800e476:	400a      	ands	r2, r1
 800e478:	601a      	str	r2, [r3, #0]
 800e47a:	e00c      	b.n	800e496 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	2380      	movs	r3, #128	@ 0x80
 800e480:	021b      	lsls	r3, r3, #8
 800e482:	4013      	ands	r3, r2
 800e484:	d007      	beq.n	800e496 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	491e      	ldr	r1, [pc, #120]	@ (800e50c <I2C_ITSlaveSeqCplt+0xc4>)
 800e492:	400a      	ands	r2, r1
 800e494:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2241      	movs	r2, #65	@ 0x41
 800e49a:	5c9b      	ldrb	r3, [r3, r2]
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b29      	cmp	r3, #41	@ 0x29
 800e4a0:	d114      	bne.n	800e4cc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2241      	movs	r2, #65	@ 0x41
 800e4a6:	2128      	movs	r1, #40	@ 0x28
 800e4a8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2221      	movs	r2, #33	@ 0x21
 800e4ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	0018      	movs	r0, r3
 800e4b6:	f000 fd5f 	bl	800ef78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2240      	movs	r2, #64	@ 0x40
 800e4be:	2100      	movs	r1, #0
 800e4c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f7ff f968 	bl	800d79a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e4ca:	e019      	b.n	800e500 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2241      	movs	r2, #65	@ 0x41
 800e4d0:	5c9b      	ldrb	r3, [r3, r2]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4d6:	d113      	bne.n	800e500 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2241      	movs	r2, #65	@ 0x41
 800e4dc:	2128      	movs	r1, #40	@ 0x28
 800e4de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2222      	movs	r2, #34	@ 0x22
 800e4e4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2102      	movs	r1, #2
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	f000 fd44 	bl	800ef78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2240      	movs	r2, #64	@ 0x40
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	0018      	movs	r0, r3
 800e4fc:	f7ff f955 	bl	800d7aa <HAL_I2C_SlaveRxCpltCallback>
}
 800e500:	46c0      	nop			@ (mov r8, r8)
 800e502:	46bd      	mov	sp, r7
 800e504:	b004      	add	sp, #16
 800e506:	bd80      	pop	{r7, pc}
 800e508:	ffffbfff 	.word	0xffffbfff
 800e50c:	ffff7fff 	.word	0xffff7fff

0800e510 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2220      	movs	r2, #32
 800e524:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2241      	movs	r2, #65	@ 0x41
 800e52a:	5c9b      	ldrb	r3, [r3, r2]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b21      	cmp	r3, #33	@ 0x21
 800e530:	d108      	bne.n	800e544 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2101      	movs	r1, #1
 800e536:	0018      	movs	r0, r3
 800e538:	f000 fd1e 	bl	800ef78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2211      	movs	r2, #17
 800e540:	631a      	str	r2, [r3, #48]	@ 0x30
 800e542:	e00d      	b.n	800e560 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2241      	movs	r2, #65	@ 0x41
 800e548:	5c9b      	ldrb	r3, [r3, r2]
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b22      	cmp	r3, #34	@ 0x22
 800e54e:	d107      	bne.n	800e560 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2102      	movs	r1, #2
 800e554:	0018      	movs	r0, r3
 800e556:	f000 fd0f 	bl	800ef78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2212      	movs	r2, #18
 800e55e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	494e      	ldr	r1, [pc, #312]	@ (800e6a4 <I2C_ITMasterCplt+0x194>)
 800e56c:	400a      	ands	r2, r1
 800e56e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a4b      	ldr	r2, [pc, #300]	@ (800e6a8 <I2C_ITMasterCplt+0x198>)
 800e57a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2210      	movs	r2, #16
 800e580:	4013      	ands	r3, r2
 800e582:	d009      	beq.n	800e598 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2210      	movs	r2, #16
 800e58a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e590:	2204      	movs	r2, #4
 800e592:	431a      	orrs	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2241      	movs	r2, #65	@ 0x41
 800e59c:	5c9b      	ldrb	r3, [r3, r2]
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b60      	cmp	r3, #96	@ 0x60
 800e5a2:	d109      	bne.n	800e5b8 <I2C_ITMasterCplt+0xa8>
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	2204      	movs	r2, #4
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	d005      	beq.n	800e5b8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	0018      	movs	r0, r3
 800e5bc:	f000 fb19 	bl	800ebf2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5c4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2241      	movs	r2, #65	@ 0x41
 800e5ca:	5c9b      	ldrb	r3, [r3, r2]
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	2b60      	cmp	r3, #96	@ 0x60
 800e5d0:	d002      	beq.n	800e5d8 <I2C_ITMasterCplt+0xc8>
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d007      	beq.n	800e5e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	0011      	movs	r1, r2
 800e5e0:	0018      	movs	r0, r3
 800e5e2:	f000 f9db 	bl	800e99c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e5e6:	e058      	b.n	800e69a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2241      	movs	r2, #65	@ 0x41
 800e5ec:	5c9b      	ldrb	r3, [r3, r2]
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	2b21      	cmp	r3, #33	@ 0x21
 800e5f2:	d126      	bne.n	800e642 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2241      	movs	r2, #65	@ 0x41
 800e5f8:	2120      	movs	r1, #32
 800e5fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2242      	movs	r2, #66	@ 0x42
 800e606:	5c9b      	ldrb	r3, [r3, r2]
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b40      	cmp	r3, #64	@ 0x40
 800e60c:	d10c      	bne.n	800e628 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2242      	movs	r2, #66	@ 0x42
 800e612:	2100      	movs	r1, #0
 800e614:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2240      	movs	r2, #64	@ 0x40
 800e61a:	2100      	movs	r1, #0
 800e61c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	0018      	movs	r0, r3
 800e622:	f7ff f8e2 	bl	800d7ea <HAL_I2C_MemTxCpltCallback>
}
 800e626:	e038      	b.n	800e69a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2242      	movs	r2, #66	@ 0x42
 800e62c:	2100      	movs	r1, #0
 800e62e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2240      	movs	r2, #64	@ 0x40
 800e634:	2100      	movs	r1, #0
 800e636:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	0018      	movs	r0, r3
 800e63c:	f7ff f89d 	bl	800d77a <HAL_I2C_MasterTxCpltCallback>
}
 800e640:	e02b      	b.n	800e69a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2241      	movs	r2, #65	@ 0x41
 800e646:	5c9b      	ldrb	r3, [r3, r2]
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b22      	cmp	r3, #34	@ 0x22
 800e64c:	d125      	bne.n	800e69a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2241      	movs	r2, #65	@ 0x41
 800e652:	2120      	movs	r1, #32
 800e654:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2242      	movs	r2, #66	@ 0x42
 800e660:	5c9b      	ldrb	r3, [r3, r2]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b40      	cmp	r3, #64	@ 0x40
 800e666:	d10c      	bne.n	800e682 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2242      	movs	r2, #66	@ 0x42
 800e66c:	2100      	movs	r1, #0
 800e66e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2240      	movs	r2, #64	@ 0x40
 800e674:	2100      	movs	r1, #0
 800e676:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	0018      	movs	r0, r3
 800e67c:	f7ff f8bd 	bl	800d7fa <HAL_I2C_MemRxCpltCallback>
}
 800e680:	e00b      	b.n	800e69a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2242      	movs	r2, #66	@ 0x42
 800e686:	2100      	movs	r1, #0
 800e688:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2240      	movs	r2, #64	@ 0x40
 800e68e:	2100      	movs	r1, #0
 800e690:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	0018      	movs	r0, r3
 800e696:	f7ff f878 	bl	800d78a <HAL_I2C_MasterRxCpltCallback>
}
 800e69a:	46c0      	nop			@ (mov r8, r8)
 800e69c:	46bd      	mov	sp, r7
 800e69e:	b006      	add	sp, #24
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	46c0      	nop			@ (mov r8, r8)
 800e6a4:	fe00e800 	.word	0xfe00e800
 800e6a8:	ffff0000 	.word	0xffff0000

0800e6ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b086      	sub	sp, #24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e6c2:	200f      	movs	r0, #15
 800e6c4:	183b      	adds	r3, r7, r0
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	2141      	movs	r1, #65	@ 0x41
 800e6ca:	5c52      	ldrb	r2, [r2, r1]
 800e6cc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2220      	movs	r2, #32
 800e6d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e6d6:	183b      	adds	r3, r7, r0
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b21      	cmp	r3, #33	@ 0x21
 800e6dc:	d003      	beq.n	800e6e6 <I2C_ITSlaveCplt+0x3a>
 800e6de:	183b      	adds	r3, r7, r0
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	2b29      	cmp	r3, #41	@ 0x29
 800e6e4:	d109      	bne.n	800e6fa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e6e6:	4a7b      	ldr	r2, [pc, #492]	@ (800e8d4 <I2C_ITSlaveCplt+0x228>)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	0011      	movs	r1, r2
 800e6ec:	0018      	movs	r0, r3
 800e6ee:	f000 fc43 	bl	800ef78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2221      	movs	r2, #33	@ 0x21
 800e6f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6f8:	e011      	b.n	800e71e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e6fa:	220f      	movs	r2, #15
 800e6fc:	18bb      	adds	r3, r7, r2
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	2b22      	cmp	r3, #34	@ 0x22
 800e702:	d003      	beq.n	800e70c <I2C_ITSlaveCplt+0x60>
 800e704:	18bb      	adds	r3, r7, r2
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2b2a      	cmp	r3, #42	@ 0x2a
 800e70a:	d108      	bne.n	800e71e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e70c:	4a72      	ldr	r2, [pc, #456]	@ (800e8d8 <I2C_ITSlaveCplt+0x22c>)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	0011      	movs	r1, r2
 800e712:	0018      	movs	r0, r3
 800e714:	f000 fc30 	bl	800ef78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2222      	movs	r2, #34	@ 0x22
 800e71c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2180      	movs	r1, #128	@ 0x80
 800e72a:	0209      	lsls	r1, r1, #8
 800e72c:	430a      	orrs	r2, r1
 800e72e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	685a      	ldr	r2, [r3, #4]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4968      	ldr	r1, [pc, #416]	@ (800e8dc <I2C_ITSlaveCplt+0x230>)
 800e73c:	400a      	ands	r2, r1
 800e73e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	0018      	movs	r0, r3
 800e744:	f000 fa55 	bl	800ebf2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	2380      	movs	r3, #128	@ 0x80
 800e74c:	01db      	lsls	r3, r3, #7
 800e74e:	4013      	ands	r3, r2
 800e750:	d013      	beq.n	800e77a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4960      	ldr	r1, [pc, #384]	@ (800e8e0 <I2C_ITSlaveCplt+0x234>)
 800e75e:	400a      	ands	r2, r1
 800e760:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e766:	2b00      	cmp	r3, #0
 800e768:	d01f      	beq.n	800e7aa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	b29a      	uxth	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e778:	e017      	b.n	800e7aa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e77a:	693a      	ldr	r2, [r7, #16]
 800e77c:	2380      	movs	r3, #128	@ 0x80
 800e77e:	021b      	lsls	r3, r3, #8
 800e780:	4013      	ands	r3, r2
 800e782:	d012      	beq.n	800e7aa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4955      	ldr	r1, [pc, #340]	@ (800e8e4 <I2C_ITSlaveCplt+0x238>)
 800e790:	400a      	ands	r2, r1
 800e792:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d006      	beq.n	800e7aa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	2204      	movs	r2, #4
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	d020      	beq.n	800e7f4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2204      	movs	r2, #4
 800e7b6:	4393      	bics	r3, r2
 800e7b8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7c4:	b2d2      	uxtb	r2, r2
 800e7c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00c      	beq.n	800e7f4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d005      	beq.n	800e80a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e802:	2204      	movs	r2, #4
 800e804:	431a      	orrs	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2242      	movs	r2, #66	@ 0x42
 800e80e:	2100      	movs	r1, #0
 800e810:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d013      	beq.n	800e848 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	0011      	movs	r1, r2
 800e828:	0018      	movs	r0, r3
 800e82a:	f000 f8b7 	bl	800e99c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2241      	movs	r2, #65	@ 0x41
 800e832:	5c9b      	ldrb	r3, [r3, r2]
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b28      	cmp	r3, #40	@ 0x28
 800e838:	d147      	bne.n	800e8ca <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e83a:	697a      	ldr	r2, [r7, #20]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	0011      	movs	r1, r2
 800e840:	0018      	movs	r0, r3
 800e842:	f000 f853 	bl	800e8ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e846:	e040      	b.n	800e8ca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e84c:	4a26      	ldr	r2, [pc, #152]	@ (800e8e8 <I2C_ITSlaveCplt+0x23c>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d016      	beq.n	800e880 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	0018      	movs	r0, r3
 800e856:	f7ff fdf7 	bl	800e448 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a22      	ldr	r2, [pc, #136]	@ (800e8e8 <I2C_ITSlaveCplt+0x23c>)
 800e85e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2241      	movs	r2, #65	@ 0x41
 800e864:	2120      	movs	r1, #32
 800e866:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2240      	movs	r2, #64	@ 0x40
 800e872:	2100      	movs	r1, #0
 800e874:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	0018      	movs	r0, r3
 800e87a:	f7fe ffae 	bl	800d7da <HAL_I2C_ListenCpltCallback>
}
 800e87e:	e024      	b.n	800e8ca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2241      	movs	r2, #65	@ 0x41
 800e884:	5c9b      	ldrb	r3, [r3, r2]
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b22      	cmp	r3, #34	@ 0x22
 800e88a:	d10f      	bne.n	800e8ac <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2241      	movs	r2, #65	@ 0x41
 800e890:	2120      	movs	r1, #32
 800e892:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2240      	movs	r2, #64	@ 0x40
 800e89e:	2100      	movs	r1, #0
 800e8a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	0018      	movs	r0, r3
 800e8a6:	f7fe ff80 	bl	800d7aa <HAL_I2C_SlaveRxCpltCallback>
}
 800e8aa:	e00e      	b.n	800e8ca <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2241      	movs	r2, #65	@ 0x41
 800e8b0:	2120      	movs	r1, #32
 800e8b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2240      	movs	r2, #64	@ 0x40
 800e8be:	2100      	movs	r1, #0
 800e8c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	0018      	movs	r0, r3
 800e8c6:	f7fe ff68 	bl	800d79a <HAL_I2C_SlaveTxCpltCallback>
}
 800e8ca:	46c0      	nop			@ (mov r8, r8)
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	b006      	add	sp, #24
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	46c0      	nop			@ (mov r8, r8)
 800e8d4:	00008001 	.word	0x00008001
 800e8d8:	00008002 	.word	0x00008002
 800e8dc:	fe00e800 	.word	0xfe00e800
 800e8e0:	ffffbfff 	.word	0xffffbfff
 800e8e4:	ffff7fff 	.word	0xffff7fff
 800e8e8:	ffff0000 	.word	0xffff0000

0800e8ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4a26      	ldr	r2, [pc, #152]	@ (800e994 <I2C_ITListenCplt+0xa8>)
 800e8fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2241      	movs	r2, #65	@ 0x41
 800e906:	2120      	movs	r1, #32
 800e908:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2242      	movs	r2, #66	@ 0x42
 800e90e:	2100      	movs	r1, #0
 800e910:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2204      	movs	r2, #4
 800e91c:	4013      	ands	r3, r2
 800e91e:	d022      	beq.n	800e966 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e92a:	b2d2      	uxtb	r2, r2
 800e92c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e932:	1c5a      	adds	r2, r3, #1
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d012      	beq.n	800e966 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e944:	3b01      	subs	r3, #1
 800e946:	b29a      	uxth	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e950:	b29b      	uxth	r3, r3
 800e952:	3b01      	subs	r3, #1
 800e954:	b29a      	uxth	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e95e:	2204      	movs	r2, #4
 800e960:	431a      	orrs	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e966:	4a0c      	ldr	r2, [pc, #48]	@ (800e998 <I2C_ITListenCplt+0xac>)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	0011      	movs	r1, r2
 800e96c:	0018      	movs	r0, r3
 800e96e:	f000 fb03 	bl	800ef78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2210      	movs	r2, #16
 800e978:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2240      	movs	r2, #64	@ 0x40
 800e97e:	2100      	movs	r1, #0
 800e980:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	0018      	movs	r0, r3
 800e986:	f7fe ff28 	bl	800d7da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	46bd      	mov	sp, r7
 800e98e:	b002      	add	sp, #8
 800e990:	bd80      	pop	{r7, pc}
 800e992:	46c0      	nop			@ (mov r8, r8)
 800e994:	ffff0000 	.word	0xffff0000
 800e998:	00008003 	.word	0x00008003

0800e99c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e9a6:	200f      	movs	r0, #15
 800e9a8:	183b      	adds	r3, r7, r0
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	2141      	movs	r1, #65	@ 0x41
 800e9ae:	5c52      	ldrb	r2, [r2, r1]
 800e9b0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2242      	movs	r2, #66	@ 0x42
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4a72      	ldr	r2, [pc, #456]	@ (800eb88 <I2C_ITError+0x1ec>)
 800e9be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	431a      	orrs	r2, r3
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e9d2:	183b      	adds	r3, r7, r0
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	2b28      	cmp	r3, #40	@ 0x28
 800e9d8:	d007      	beq.n	800e9ea <I2C_ITError+0x4e>
 800e9da:	183b      	adds	r3, r7, r0
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2b29      	cmp	r3, #41	@ 0x29
 800e9e0:	d003      	beq.n	800e9ea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e9e2:	183b      	adds	r3, r7, r0
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9e8:	d10c      	bne.n	800ea04 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2103      	movs	r1, #3
 800e9ee:	0018      	movs	r0, r3
 800e9f0:	f000 fac2 	bl	800ef78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2241      	movs	r2, #65	@ 0x41
 800e9f8:	2128      	movs	r1, #40	@ 0x28
 800e9fa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a63      	ldr	r2, [pc, #396]	@ (800eb8c <I2C_ITError+0x1f0>)
 800ea00:	635a      	str	r2, [r3, #52]	@ 0x34
 800ea02:	e032      	b.n	800ea6a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ea04:	4a62      	ldr	r2, [pc, #392]	@ (800eb90 <I2C_ITError+0x1f4>)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	0011      	movs	r1, r2
 800ea0a:	0018      	movs	r0, r3
 800ea0c:	f000 fab4 	bl	800ef78 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	0018      	movs	r0, r3
 800ea14:	f000 f8ed 	bl	800ebf2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2241      	movs	r2, #65	@ 0x41
 800ea1c:	5c9b      	ldrb	r3, [r3, r2]
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b60      	cmp	r3, #96	@ 0x60
 800ea22:	d01f      	beq.n	800ea64 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2241      	movs	r2, #65	@ 0x41
 800ea28:	2120      	movs	r1, #32
 800ea2a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	699b      	ldr	r3, [r3, #24]
 800ea32:	2220      	movs	r2, #32
 800ea34:	4013      	ands	r3, r2
 800ea36:	2b20      	cmp	r3, #32
 800ea38:	d114      	bne.n	800ea64 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	2210      	movs	r2, #16
 800ea42:	4013      	ands	r3, r2
 800ea44:	2b10      	cmp	r3, #16
 800ea46:	d109      	bne.n	800ea5c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2210      	movs	r2, #16
 800ea4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea54:	2204      	movs	r2, #4
 800ea56:	431a      	orrs	r2, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2220      	movs	r2, #32
 800ea62:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea6e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d03b      	beq.n	800eaf0 <I2C_ITError+0x154>
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2b11      	cmp	r3, #17
 800ea7c:	d002      	beq.n	800ea84 <I2C_ITError+0xe8>
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b21      	cmp	r3, #33	@ 0x21
 800ea82:	d135      	bne.n	800eaf0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	2380      	movs	r3, #128	@ 0x80
 800ea8c:	01db      	lsls	r3, r3, #7
 800ea8e:	401a      	ands	r2, r3
 800ea90:	2380      	movs	r3, #128	@ 0x80
 800ea92:	01db      	lsls	r3, r3, #7
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d107      	bne.n	800eaa8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	493c      	ldr	r1, [pc, #240]	@ (800eb94 <I2C_ITError+0x1f8>)
 800eaa4:	400a      	ands	r2, r1
 800eaa6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaac:	0018      	movs	r0, r3
 800eaae:	f7fd ff8e 	bl	800c9ce <HAL_DMA_GetState>
 800eab2:	0003      	movs	r3, r0
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d016      	beq.n	800eae6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eabc:	4a36      	ldr	r2, [pc, #216]	@ (800eb98 <I2C_ITError+0x1fc>)
 800eabe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2240      	movs	r2, #64	@ 0x40
 800eac4:	2100      	movs	r1, #0
 800eac6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eacc:	0018      	movs	r0, r3
 800eace:	f7fd fe89 	bl	800c7e4 <HAL_DMA_Abort_IT>
 800ead2:	1e03      	subs	r3, r0, #0
 800ead4:	d051      	beq.n	800eb7a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eae0:	0018      	movs	r0, r3
 800eae2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eae4:	e049      	b.n	800eb7a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	0018      	movs	r0, r3
 800eaea:	f000 f859 	bl	800eba0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eaee:	e044      	b.n	800eb7a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d03b      	beq.n	800eb70 <I2C_ITError+0x1d4>
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b12      	cmp	r3, #18
 800eafc:	d002      	beq.n	800eb04 <I2C_ITError+0x168>
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	2b22      	cmp	r3, #34	@ 0x22
 800eb02:	d135      	bne.n	800eb70 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	2380      	movs	r3, #128	@ 0x80
 800eb0c:	021b      	lsls	r3, r3, #8
 800eb0e:	401a      	ands	r2, r3
 800eb10:	2380      	movs	r3, #128	@ 0x80
 800eb12:	021b      	lsls	r3, r3, #8
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d107      	bne.n	800eb28 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	491e      	ldr	r1, [pc, #120]	@ (800eb9c <I2C_ITError+0x200>)
 800eb24:	400a      	ands	r2, r1
 800eb26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb2c:	0018      	movs	r0, r3
 800eb2e:	f7fd ff4e 	bl	800c9ce <HAL_DMA_GetState>
 800eb32:	0003      	movs	r3, r0
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d016      	beq.n	800eb66 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb3c:	4a16      	ldr	r2, [pc, #88]	@ (800eb98 <I2C_ITError+0x1fc>)
 800eb3e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2240      	movs	r2, #64	@ 0x40
 800eb44:	2100      	movs	r1, #0
 800eb46:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb4c:	0018      	movs	r0, r3
 800eb4e:	f7fd fe49 	bl	800c7e4 <HAL_DMA_Abort_IT>
 800eb52:	1e03      	subs	r3, r0, #0
 800eb54:	d013      	beq.n	800eb7e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb60:	0018      	movs	r0, r3
 800eb62:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eb64:	e00b      	b.n	800eb7e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	0018      	movs	r0, r3
 800eb6a:	f000 f819 	bl	800eba0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eb6e:	e006      	b.n	800eb7e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	0018      	movs	r0, r3
 800eb74:	f000 f814 	bl	800eba0 <I2C_TreatErrorCallback>
  }
}
 800eb78:	e002      	b.n	800eb80 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eb7a:	46c0      	nop			@ (mov r8, r8)
 800eb7c:	e000      	b.n	800eb80 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eb7e:	46c0      	nop			@ (mov r8, r8)
}
 800eb80:	46c0      	nop			@ (mov r8, r8)
 800eb82:	46bd      	mov	sp, r7
 800eb84:	b004      	add	sp, #16
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	ffff0000 	.word	0xffff0000
 800eb8c:	0800da81 	.word	0x0800da81
 800eb90:	00008003 	.word	0x00008003
 800eb94:	ffffbfff 	.word	0xffffbfff
 800eb98:	0800edab 	.word	0x0800edab
 800eb9c:	ffff7fff 	.word	0xffff7fff

0800eba0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2241      	movs	r2, #65	@ 0x41
 800ebac:	5c9b      	ldrb	r3, [r3, r2]
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b60      	cmp	r3, #96	@ 0x60
 800ebb2:	d10f      	bne.n	800ebd4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2241      	movs	r2, #65	@ 0x41
 800ebb8:	2120      	movs	r1, #32
 800ebba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2240      	movs	r2, #64	@ 0x40
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	0018      	movs	r0, r3
 800ebce:	f7fe fe24 	bl	800d81a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ebd2:	e00a      	b.n	800ebea <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2240      	movs	r2, #64	@ 0x40
 800ebde:	2100      	movs	r1, #0
 800ebe0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	f7fe fe10 	bl	800d80a <HAL_I2C_ErrorCallback>
}
 800ebea:	46c0      	nop			@ (mov r8, r8)
 800ebec:	46bd      	mov	sp, r7
 800ebee:	b002      	add	sp, #8
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	2202      	movs	r2, #2
 800ec02:	4013      	ands	r3, r2
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d103      	bne.n	800ec10 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	699b      	ldr	r3, [r3, #24]
 800ec16:	2201      	movs	r2, #1
 800ec18:	4013      	ands	r3, r2
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d007      	beq.n	800ec2e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	699a      	ldr	r2, [r3, #24]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2101      	movs	r1, #1
 800ec2a:	430a      	orrs	r2, r1
 800ec2c:	619a      	str	r2, [r3, #24]
  }
}
 800ec2e:	46c0      	nop			@ (mov r8, r8)
 800ec30:	46bd      	mov	sp, r7
 800ec32:	b002      	add	sp, #8
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec44:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4920      	ldr	r1, [pc, #128]	@ (800ecd4 <I2C_DMAMasterTransmitCplt+0x9c>)
 800ec52:	400a      	ands	r2, r1
 800ec54:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d105      	bne.n	800ec6c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2120      	movs	r1, #32
 800ec64:	0018      	movs	r0, r3
 800ec66:	f000 f8f9 	bl	800ee5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ec6a:	e02e      	b.n	800ecca <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ec74:	189a      	adds	r2, r3, r2
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	2bff      	cmp	r3, #255	@ 0xff
 800ec82:	d903      	bls.n	800ec8c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	22ff      	movs	r2, #255	@ 0xff
 800ec88:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ec8a:	e004      	b.n	800ec96 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec9e:	0019      	movs	r1, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	3328      	adds	r3, #40	@ 0x28
 800eca6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ecac:	f7fd fcf4 	bl	800c698 <HAL_DMA_Start_IT>
 800ecb0:	1e03      	subs	r3, r0, #0
 800ecb2:	d005      	beq.n	800ecc0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2110      	movs	r1, #16
 800ecb8:	0018      	movs	r0, r3
 800ecba:	f7ff fe6f 	bl	800e99c <I2C_ITError>
}
 800ecbe:	e004      	b.n	800ecca <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2140      	movs	r1, #64	@ 0x40
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	f000 f8c9 	bl	800ee5c <I2C_Enable_IRQ>
}
 800ecca:	46c0      	nop			@ (mov r8, r8)
 800eccc:	46bd      	mov	sp, r7
 800ecce:	b004      	add	sp, #16
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	46c0      	nop			@ (mov r8, r8)
 800ecd4:	ffffbfff 	.word	0xffffbfff

0800ecd8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ece4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4920      	ldr	r1, [pc, #128]	@ (800ed74 <I2C_DMAMasterReceiveCplt+0x9c>)
 800ecf2:	400a      	ands	r2, r1
 800ecf4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d105      	bne.n	800ed0c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2120      	movs	r1, #32
 800ed04:	0018      	movs	r0, r3
 800ed06:	f000 f8a9 	bl	800ee5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ed0a:	e02e      	b.n	800ed6a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ed14:	189a      	adds	r2, r3, r2
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	2bff      	cmp	r3, #255	@ 0xff
 800ed22:	d903      	bls.n	800ed2c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	22ff      	movs	r2, #255	@ 0xff
 800ed28:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ed2a:	e004      	b.n	800ed36 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	3324      	adds	r3, #36	@ 0x24
 800ed40:	0019      	movs	r1, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed46:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ed4c:	f7fd fca4 	bl	800c698 <HAL_DMA_Start_IT>
 800ed50:	1e03      	subs	r3, r0, #0
 800ed52:	d005      	beq.n	800ed60 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2110      	movs	r1, #16
 800ed58:	0018      	movs	r0, r3
 800ed5a:	f7ff fe1f 	bl	800e99c <I2C_ITError>
}
 800ed5e:	e004      	b.n	800ed6a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2140      	movs	r1, #64	@ 0x40
 800ed64:	0018      	movs	r0, r3
 800ed66:	f000 f879 	bl	800ee5c <I2C_Enable_IRQ>
}
 800ed6a:	46c0      	nop			@ (mov r8, r8)
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	b004      	add	sp, #16
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	46c0      	nop			@ (mov r8, r8)
 800ed74:	ffff7fff 	.word	0xffff7fff

0800ed78 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed84:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	685a      	ldr	r2, [r3, #4]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2180      	movs	r1, #128	@ 0x80
 800ed92:	0209      	lsls	r1, r1, #8
 800ed94:	430a      	orrs	r2, r1
 800ed96:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2110      	movs	r1, #16
 800ed9c:	0018      	movs	r0, r3
 800ed9e:	f7ff fdfd 	bl	800e99c <I2C_ITError>
}
 800eda2:	46c0      	nop			@ (mov r8, r8)
 800eda4:	46bd      	mov	sp, r7
 800eda6:	b004      	add	sp, #16
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edb6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d003      	beq.n	800edc8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edc4:	2200      	movs	r2, #0
 800edc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d003      	beq.n	800edd8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edd4:	2200      	movs	r2, #0
 800edd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	0018      	movs	r0, r3
 800eddc:	f7ff fee0 	bl	800eba0 <I2C_TreatErrorCallback>
}
 800ede0:	46c0      	nop			@ (mov r8, r8)
 800ede2:	46bd      	mov	sp, r7
 800ede4:	b004      	add	sp, #16
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ede8:	b590      	push	{r4, r7, lr}
 800edea:	b087      	sub	sp, #28
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	0008      	movs	r0, r1
 800edf2:	0011      	movs	r1, r2
 800edf4:	607b      	str	r3, [r7, #4]
 800edf6:	240a      	movs	r4, #10
 800edf8:	193b      	adds	r3, r7, r4
 800edfa:	1c02      	adds	r2, r0, #0
 800edfc:	801a      	strh	r2, [r3, #0]
 800edfe:	2009      	movs	r0, #9
 800ee00:	183b      	adds	r3, r7, r0
 800ee02:	1c0a      	adds	r2, r1, #0
 800ee04:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee06:	193b      	adds	r3, r7, r4
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	059b      	lsls	r3, r3, #22
 800ee0c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee0e:	183b      	adds	r3, r7, r0
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	0419      	lsls	r1, r3, #16
 800ee14:	23ff      	movs	r3, #255	@ 0xff
 800ee16:	041b      	lsls	r3, r3, #16
 800ee18:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee1a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee22:	4313      	orrs	r3, r2
 800ee24:	005b      	lsls	r3, r3, #1
 800ee26:	085b      	lsrs	r3, r3, #1
 800ee28:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee32:	0d51      	lsrs	r1, r2, #21
 800ee34:	2280      	movs	r2, #128	@ 0x80
 800ee36:	00d2      	lsls	r2, r2, #3
 800ee38:	400a      	ands	r2, r1
 800ee3a:	4907      	ldr	r1, [pc, #28]	@ (800ee58 <I2C_TransferConfig+0x70>)
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	43d2      	mvns	r2, r2
 800ee40:	401a      	ands	r2, r3
 800ee42:	0011      	movs	r1, r2
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	697a      	ldr	r2, [r7, #20]
 800ee4a:	430a      	orrs	r2, r1
 800ee4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ee4e:	46c0      	nop			@ (mov r8, r8)
 800ee50:	46bd      	mov	sp, r7
 800ee52:	b007      	add	sp, #28
 800ee54:	bd90      	pop	{r4, r7, pc}
 800ee56:	46c0      	nop			@ (mov r8, r8)
 800ee58:	03ff63ff 	.word	0x03ff63ff

0800ee5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	000a      	movs	r2, r1
 800ee66:	1cbb      	adds	r3, r7, #2
 800ee68:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee72:	4b3e      	ldr	r3, [pc, #248]	@ (800ef6c <I2C_Enable_IRQ+0x110>)
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d035      	beq.n	800eee4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ee7c:	4b3c      	ldr	r3, [pc, #240]	@ (800ef70 <I2C_Enable_IRQ+0x114>)
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d030      	beq.n	800eee4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ee86:	4b3b      	ldr	r3, [pc, #236]	@ (800ef74 <I2C_Enable_IRQ+0x118>)
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d02b      	beq.n	800eee4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ee8c:	1cbb      	adds	r3, r7, #2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	5e9b      	ldrsh	r3, [r3, r2]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	da03      	bge.n	800ee9e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	22b8      	movs	r2, #184	@ 0xb8
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ee9e:	1cbb      	adds	r3, r7, #2
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	2201      	movs	r2, #1
 800eea4:	4013      	ands	r3, r2
 800eea6:	d003      	beq.n	800eeb0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	22f2      	movs	r2, #242	@ 0xf2
 800eeac:	4313      	orrs	r3, r2
 800eeae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800eeb0:	1cbb      	adds	r3, r7, #2
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	2202      	movs	r2, #2
 800eeb6:	4013      	ands	r3, r2
 800eeb8:	d003      	beq.n	800eec2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	22f4      	movs	r2, #244	@ 0xf4
 800eebe:	4313      	orrs	r3, r2
 800eec0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800eec2:	1cbb      	adds	r3, r7, #2
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	2b10      	cmp	r3, #16
 800eec8:	d103      	bne.n	800eed2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2290      	movs	r2, #144	@ 0x90
 800eece:	4313      	orrs	r3, r2
 800eed0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800eed2:	1cbb      	adds	r3, r7, #2
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	2b20      	cmp	r3, #32
 800eed8:	d13c      	bne.n	800ef54 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2220      	movs	r2, #32
 800eede:	4313      	orrs	r3, r2
 800eee0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800eee2:	e037      	b.n	800ef54 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800eee4:	1cbb      	adds	r3, r7, #2
 800eee6:	2200      	movs	r2, #0
 800eee8:	5e9b      	ldrsh	r3, [r3, r2]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	da03      	bge.n	800eef6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	22b8      	movs	r2, #184	@ 0xb8
 800eef2:	4313      	orrs	r3, r2
 800eef4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800eef6:	1cbb      	adds	r3, r7, #2
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	2201      	movs	r2, #1
 800eefc:	4013      	ands	r3, r2
 800eefe:	d003      	beq.n	800ef08 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	22f2      	movs	r2, #242	@ 0xf2
 800ef04:	4313      	orrs	r3, r2
 800ef06:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ef08:	1cbb      	adds	r3, r7, #2
 800ef0a:	881b      	ldrh	r3, [r3, #0]
 800ef0c:	2202      	movs	r2, #2
 800ef0e:	4013      	ands	r3, r2
 800ef10:	d003      	beq.n	800ef1a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	22f4      	movs	r2, #244	@ 0xf4
 800ef16:	4313      	orrs	r3, r2
 800ef18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ef1a:	1cbb      	adds	r3, r7, #2
 800ef1c:	881b      	ldrh	r3, [r3, #0]
 800ef1e:	2b10      	cmp	r3, #16
 800ef20:	d103      	bne.n	800ef2a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2290      	movs	r2, #144	@ 0x90
 800ef26:	4313      	orrs	r3, r2
 800ef28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ef2a:	1cbb      	adds	r3, r7, #2
 800ef2c:	881b      	ldrh	r3, [r3, #0]
 800ef2e:	2b20      	cmp	r3, #32
 800ef30:	d103      	bne.n	800ef3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2260      	movs	r2, #96	@ 0x60
 800ef36:	4313      	orrs	r3, r2
 800ef38:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef74 <I2C_Enable_IRQ+0x118>)
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d007      	beq.n	800ef54 <I2C_Enable_IRQ+0xf8>
 800ef44:	1cbb      	adds	r3, r7, #2
 800ef46:	881b      	ldrh	r3, [r3, #0]
 800ef48:	2b40      	cmp	r3, #64	@ 0x40
 800ef4a:	d103      	bne.n	800ef54 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2240      	movs	r2, #64	@ 0x40
 800ef50:	4313      	orrs	r3, r2
 800ef52:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	6819      	ldr	r1, [r3, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	430a      	orrs	r2, r1
 800ef62:	601a      	str	r2, [r3, #0]
}
 800ef64:	46c0      	nop			@ (mov r8, r8)
 800ef66:	46bd      	mov	sp, r7
 800ef68:	b004      	add	sp, #16
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	0800dc81 	.word	0x0800dc81
 800ef70:	0800e0b1 	.word	0x0800e0b1
 800ef74:	0800de79 	.word	0x0800de79

0800ef78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	000a      	movs	r2, r1
 800ef82:	1cbb      	adds	r3, r7, #2
 800ef84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ef8a:	1cbb      	adds	r3, r7, #2
 800ef8c:	881b      	ldrh	r3, [r3, #0]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	4013      	ands	r3, r2
 800ef92:	d010      	beq.n	800efb6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2242      	movs	r2, #66	@ 0x42
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2241      	movs	r2, #65	@ 0x41
 800efa0:	5c9b      	ldrb	r3, [r3, r2]
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	001a      	movs	r2, r3
 800efa6:	2328      	movs	r3, #40	@ 0x28
 800efa8:	4013      	ands	r3, r2
 800efaa:	2b28      	cmp	r3, #40	@ 0x28
 800efac:	d003      	beq.n	800efb6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	22b0      	movs	r2, #176	@ 0xb0
 800efb2:	4313      	orrs	r3, r2
 800efb4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800efb6:	1cbb      	adds	r3, r7, #2
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	2202      	movs	r2, #2
 800efbc:	4013      	ands	r3, r2
 800efbe:	d010      	beq.n	800efe2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2244      	movs	r2, #68	@ 0x44
 800efc4:	4313      	orrs	r3, r2
 800efc6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2241      	movs	r2, #65	@ 0x41
 800efcc:	5c9b      	ldrb	r3, [r3, r2]
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	001a      	movs	r2, r3
 800efd2:	2328      	movs	r3, #40	@ 0x28
 800efd4:	4013      	ands	r3, r2
 800efd6:	2b28      	cmp	r3, #40	@ 0x28
 800efd8:	d003      	beq.n	800efe2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	22b0      	movs	r2, #176	@ 0xb0
 800efde:	4313      	orrs	r3, r2
 800efe0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800efe2:	1cbb      	adds	r3, r7, #2
 800efe4:	2200      	movs	r2, #0
 800efe6:	5e9b      	ldrsh	r3, [r3, r2]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	da03      	bge.n	800eff4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	22b8      	movs	r2, #184	@ 0xb8
 800eff0:	4313      	orrs	r3, r2
 800eff2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800eff4:	1cbb      	adds	r3, r7, #2
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	2b10      	cmp	r3, #16
 800effa:	d103      	bne.n	800f004 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2290      	movs	r2, #144	@ 0x90
 800f000:	4313      	orrs	r3, r2
 800f002:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f004:	1cbb      	adds	r3, r7, #2
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	2b20      	cmp	r3, #32
 800f00a:	d103      	bne.n	800f014 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2220      	movs	r2, #32
 800f010:	4313      	orrs	r3, r2
 800f012:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800f014:	1cbb      	adds	r3, r7, #2
 800f016:	881b      	ldrh	r3, [r3, #0]
 800f018:	2b40      	cmp	r3, #64	@ 0x40
 800f01a:	d103      	bne.n	800f024 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2240      	movs	r2, #64	@ 0x40
 800f020:	4313      	orrs	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	43d9      	mvns	r1, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	400a      	ands	r2, r1
 800f034:	601a      	str	r2, [r3, #0]
}
 800f036:	46c0      	nop			@ (mov r8, r8)
 800f038:	46bd      	mov	sp, r7
 800f03a:	b004      	add	sp, #16
 800f03c:	bd80      	pop	{r7, pc}
	...

0800f040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2241      	movs	r2, #65	@ 0x41
 800f04e:	5c9b      	ldrb	r3, [r3, r2]
 800f050:	b2db      	uxtb	r3, r3
 800f052:	2b20      	cmp	r3, #32
 800f054:	d138      	bne.n	800f0c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2240      	movs	r2, #64	@ 0x40
 800f05a:	5c9b      	ldrb	r3, [r3, r2]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d101      	bne.n	800f064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f060:	2302      	movs	r3, #2
 800f062:	e032      	b.n	800f0ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2240      	movs	r2, #64	@ 0x40
 800f068:	2101      	movs	r1, #1
 800f06a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2241      	movs	r2, #65	@ 0x41
 800f070:	2124      	movs	r1, #36	@ 0x24
 800f072:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2101      	movs	r1, #1
 800f080:	438a      	bics	r2, r1
 800f082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4911      	ldr	r1, [pc, #68]	@ (800f0d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800f090:	400a      	ands	r2, r1
 800f092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6819      	ldr	r1, [r3, #0]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	430a      	orrs	r2, r1
 800f0a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2101      	movs	r1, #1
 800f0b0:	430a      	orrs	r2, r1
 800f0b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2241      	movs	r2, #65	@ 0x41
 800f0b8:	2120      	movs	r1, #32
 800f0ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2240      	movs	r2, #64	@ 0x40
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	e000      	b.n	800f0ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f0c8:	2302      	movs	r3, #2
  }
}
 800f0ca:	0018      	movs	r0, r3
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	b002      	add	sp, #8
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	46c0      	nop			@ (mov r8, r8)
 800f0d4:	ffffefff 	.word	0xffffefff

0800f0d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2241      	movs	r2, #65	@ 0x41
 800f0e6:	5c9b      	ldrb	r3, [r3, r2]
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	2b20      	cmp	r3, #32
 800f0ec:	d139      	bne.n	800f162 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2240      	movs	r2, #64	@ 0x40
 800f0f2:	5c9b      	ldrb	r3, [r3, r2]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d101      	bne.n	800f0fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	e033      	b.n	800f164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2240      	movs	r2, #64	@ 0x40
 800f100:	2101      	movs	r1, #1
 800f102:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2241      	movs	r2, #65	@ 0x41
 800f108:	2124      	movs	r1, #36	@ 0x24
 800f10a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2101      	movs	r1, #1
 800f118:	438a      	bics	r2, r1
 800f11a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	4a11      	ldr	r2, [pc, #68]	@ (800f16c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800f128:	4013      	ands	r3, r2
 800f12a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	021b      	lsls	r3, r3, #8
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	4313      	orrs	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2101      	movs	r1, #1
 800f14a:	430a      	orrs	r2, r1
 800f14c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2241      	movs	r2, #65	@ 0x41
 800f152:	2120      	movs	r1, #32
 800f154:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2240      	movs	r2, #64	@ 0x40
 800f15a:	2100      	movs	r1, #0
 800f15c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	e000      	b.n	800f164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f162:	2302      	movs	r3, #2
  }
}
 800f164:	0018      	movs	r0, r3
 800f166:	46bd      	mov	sp, r7
 800f168:	b004      	add	sp, #16
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	fffff0ff 	.word	0xfffff0ff

0800f170 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800f17e:	2301      	movs	r3, #1
 800f180:	e0e1      	b.n	800f346 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2235      	movs	r2, #53	@ 0x35
 800f186:	5c9b      	ldrb	r3, [r3, r2]
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d107      	bne.n	800f19e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2234      	movs	r2, #52	@ 0x34
 800f192:	2100      	movs	r1, #0
 800f194:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	0018      	movs	r0, r3
 800f19a:	f7f7 fe6d 	bl	8006e78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2235      	movs	r2, #53	@ 0x35
 800f1a2:	2102      	movs	r1, #2
 800f1a4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	69da      	ldr	r2, [r3, #28]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4967      	ldr	r1, [pc, #412]	@ (800f350 <HAL_I2S_Init+0x1e0>)
 800f1b2:	400a      	ands	r2, r1
 800f1b4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	695b      	ldr	r3, [r3, #20]
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d073      	beq.n	800f2ae <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d102      	bne.n	800f1d4 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800f1ce:	2310      	movs	r3, #16
 800f1d0:	617b      	str	r3, [r7, #20]
 800f1d2:	e001      	b.n	800f1d8 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800f1d4:	2320      	movs	r3, #32
 800f1d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	2b20      	cmp	r3, #32
 800f1de:	d802      	bhi.n	800f1e6 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	005b      	lsls	r3, r3, #1
 800f1e4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800f1e6:	f002 fe51 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 800f1ea:	0003      	movs	r3, r0
 800f1ec:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	691a      	ldr	r2, [r3, #16]
 800f1f2:	2380      	movs	r3, #128	@ 0x80
 800f1f4:	009b      	lsls	r3, r3, #2
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d131      	bne.n	800f25e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d016      	beq.n	800f230 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	0019      	movs	r1, r3
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f7f0 ffcb 	bl	80001a4 <__udivsi3>
 800f20e:	0003      	movs	r3, r0
 800f210:	001a      	movs	r2, r3
 800f212:	0013      	movs	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	189b      	adds	r3, r3, r2
 800f218:	005b      	lsls	r3, r3, #1
 800f21a:	001a      	movs	r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	695b      	ldr	r3, [r3, #20]
 800f220:	0019      	movs	r1, r3
 800f222:	0010      	movs	r0, r2
 800f224:	f7f0 ffbe 	bl	80001a4 <__udivsi3>
 800f228:	0003      	movs	r3, r0
 800f22a:	3305      	adds	r3, #5
 800f22c:	613b      	str	r3, [r7, #16]
 800f22e:	e02a      	b.n	800f286 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	00db      	lsls	r3, r3, #3
 800f234:	0019      	movs	r1, r3
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f7f0 ffb4 	bl	80001a4 <__udivsi3>
 800f23c:	0003      	movs	r3, r0
 800f23e:	001a      	movs	r2, r3
 800f240:	0013      	movs	r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	189b      	adds	r3, r3, r2
 800f246:	005b      	lsls	r3, r3, #1
 800f248:	001a      	movs	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	695b      	ldr	r3, [r3, #20]
 800f24e:	0019      	movs	r1, r3
 800f250:	0010      	movs	r0, r2
 800f252:	f7f0 ffa7 	bl	80001a4 <__udivsi3>
 800f256:	0003      	movs	r3, r0
 800f258:	3305      	adds	r3, #5
 800f25a:	613b      	str	r3, [r7, #16]
 800f25c:	e013      	b.n	800f286 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f25e:	6979      	ldr	r1, [r7, #20]
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f7f0 ff9f 	bl	80001a4 <__udivsi3>
 800f266:	0003      	movs	r3, r0
 800f268:	001a      	movs	r2, r3
 800f26a:	0013      	movs	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	189b      	adds	r3, r3, r2
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	001a      	movs	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	0019      	movs	r1, r3
 800f27a:	0010      	movs	r0, r2
 800f27c:	f7f0 ff92 	bl	80001a4 <__udivsi3>
 800f280:	0003      	movs	r3, r0
 800f282:	3305      	adds	r3, #5
 800f284:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	210a      	movs	r1, #10
 800f28a:	0018      	movs	r0, r3
 800f28c:	f7f0 ff8a 	bl	80001a4 <__udivsi3>
 800f290:	0003      	movs	r3, r0
 800f292:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	2201      	movs	r2, #1
 800f298:	4013      	ands	r3, r2
 800f29a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800f29c:	693a      	ldr	r2, [r7, #16]
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	085b      	lsrs	r3, r3, #1
 800f2a4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	021b      	lsls	r3, r3, #8
 800f2aa:	61bb      	str	r3, [r7, #24]
 800f2ac:	e003      	b.n	800f2b6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d902      	bls.n	800f2c2 <HAL_I2S_Init+0x152>
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	2bff      	cmp	r3, #255	@ 0xff
 800f2c0:	d907      	bls.n	800f2d2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2c6:	2210      	movs	r2, #16
 800f2c8:	431a      	orrs	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e039      	b.n	800f346 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	691a      	ldr	r2, [r3, #16]
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	431a      	orrs	r2, r3
 800f2da:	0011      	movs	r1, r2
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	69fa      	ldr	r2, [r7, #28]
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	69db      	ldr	r3, [r3, #28]
 800f2ec:	4a18      	ldr	r2, [pc, #96]	@ (800f350 <HAL_I2S_Init+0x1e0>)
 800f2ee:	401a      	ands	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6859      	ldr	r1, [r3, #4]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	4319      	orrs	r1, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	4319      	orrs	r1, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	699b      	ldr	r3, [r3, #24]
 800f304:	430b      	orrs	r3, r1
 800f306:	431a      	orrs	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2180      	movs	r1, #128	@ 0x80
 800f30e:	0109      	lsls	r1, r1, #4
 800f310:	430a      	orrs	r2, r1
 800f312:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	2b30      	cmp	r3, #48	@ 0x30
 800f31a:	d003      	beq.n	800f324 <HAL_I2S_Init+0x1b4>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	2bb0      	cmp	r3, #176	@ 0xb0
 800f322:	d108      	bne.n	800f336 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	69da      	ldr	r2, [r3, #28]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2180      	movs	r1, #128	@ 0x80
 800f330:	0149      	lsls	r1, r1, #5
 800f332:	430a      	orrs	r2, r1
 800f334:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2235      	movs	r2, #53	@ 0x35
 800f340:	2101      	movs	r1, #1
 800f342:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	0018      	movs	r0, r3
 800f348:	46bd      	mov	sp, r7
 800f34a:	b008      	add	sp, #32
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	46c0      	nop			@ (mov r8, r8)
 800f350:	fffff040 	.word	0xfffff040

0800f354 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	1dbb      	adds	r3, r7, #6
 800f360:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d003      	beq.n	800f370 <HAL_I2S_Receive_DMA+0x1c>
 800f368:	1dbb      	adds	r3, r7, #6
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d101      	bne.n	800f374 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800f370:	2301      	movs	r3, #1
 800f372:	e0a6      	b.n	800f4c2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2234      	movs	r2, #52	@ 0x34
 800f378:	5c9b      	ldrb	r3, [r3, r2]
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d101      	bne.n	800f384 <HAL_I2S_Receive_DMA+0x30>
 800f380:	2302      	movs	r3, #2
 800f382:	e09e      	b.n	800f4c2 <HAL_I2S_Receive_DMA+0x16e>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2234      	movs	r2, #52	@ 0x34
 800f388:	2101      	movs	r1, #1
 800f38a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2235      	movs	r2, #53	@ 0x35
 800f390:	5c9b      	ldrb	r3, [r3, r2]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	2b01      	cmp	r3, #1
 800f396:	d005      	beq.n	800f3a4 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2234      	movs	r2, #52	@ 0x34
 800f39c:	2100      	movs	r1, #0
 800f39e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800f3a0:	2302      	movs	r3, #2
 800f3a2:	e08e      	b.n	800f4c2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2235      	movs	r2, #53	@ 0x35
 800f3a8:	2104      	movs	r1, #4
 800f3aa:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	69db      	ldr	r3, [r3, #28]
 800f3be:	2207      	movs	r2, #7
 800f3c0:	4013      	ands	r3, r2
 800f3c2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2b03      	cmp	r3, #3
 800f3c8:	d002      	beq.n	800f3d0 <HAL_I2S_Receive_DMA+0x7c>
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	2b05      	cmp	r3, #5
 800f3ce:	d10c      	bne.n	800f3ea <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800f3d0:	1dbb      	adds	r3, r7, #6
 800f3d2:	881b      	ldrh	r3, [r3, #0]
 800f3d4:	18db      	adds	r3, r3, r3
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800f3dc:	1dbb      	adds	r3, r7, #6
 800f3de:	881b      	ldrh	r3, [r3, #0]
 800f3e0:	18db      	adds	r3, r3, r3
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f3e8:	e007      	b.n	800f3fa <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	1dba      	adds	r2, r7, #6
 800f3ee:	8812      	ldrh	r2, [r2, #0]
 800f3f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	1dba      	adds	r2, r7, #6
 800f3f6:	8812      	ldrh	r2, [r2, #0]
 800f3f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3fe:	4a33      	ldr	r2, [pc, #204]	@ (800f4cc <HAL_I2S_Receive_DMA+0x178>)
 800f400:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f406:	4a32      	ldr	r2, [pc, #200]	@ (800f4d0 <HAL_I2S_Receive_DMA+0x17c>)
 800f408:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f40e:	4a31      	ldr	r2, [pc, #196]	@ (800f4d4 <HAL_I2S_Receive_DMA+0x180>)
 800f410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	69da      	ldr	r2, [r3, #28]
 800f418:	23c0      	movs	r3, #192	@ 0xc0
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	401a      	ands	r2, r3
 800f41e:	23c0      	movs	r3, #192	@ 0xc0
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	429a      	cmp	r2, r3
 800f424:	d10a      	bne.n	800f43c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f426:	2300      	movs	r3, #0
 800f428:	613b      	str	r3, [r7, #16]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	613b      	str	r3, [r7, #16]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	613b      	str	r3, [r7, #16]
 800f43a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	330c      	adds	r3, #12
 800f446:	0019      	movs	r1, r3
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f44c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f452:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f454:	f7fd f920 	bl	800c698 <HAL_DMA_Start_IT>
 800f458:	1e03      	subs	r3, r0, #0
 800f45a:	d00f      	beq.n	800f47c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f460:	2208      	movs	r2, #8
 800f462:	431a      	orrs	r2, r3
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2235      	movs	r2, #53	@ 0x35
 800f46c:	2101      	movs	r1, #1
 800f46e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2234      	movs	r2, #52	@ 0x34
 800f474:	2100      	movs	r1, #0
 800f476:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f478:	2301      	movs	r3, #1
 800f47a:	e022      	b.n	800f4c2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	69da      	ldr	r2, [r3, #28]
 800f482:	2380      	movs	r3, #128	@ 0x80
 800f484:	00db      	lsls	r3, r3, #3
 800f486:	4013      	ands	r3, r2
 800f488:	d108      	bne.n	800f49c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	69da      	ldr	r2, [r3, #28]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2180      	movs	r1, #128	@ 0x80
 800f496:	00c9      	lsls	r1, r1, #3
 800f498:	430a      	orrs	r2, r1
 800f49a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	4013      	ands	r3, r2
 800f4a6:	d107      	bne.n	800f4b8 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	2101      	movs	r1, #1
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2234      	movs	r2, #52	@ 0x34
 800f4bc:	2100      	movs	r1, #0
 800f4be:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	0018      	movs	r0, r3
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	b006      	add	sp, #24
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	46c0      	nop			@ (mov r8, r8)
 800f4cc:	0800f6b5 	.word	0x0800f6b5
 800f4d0:	0800f671 	.word	0x0800f671
 800f4d4:	0800f6d3 	.word	0x0800f6d3

0800f4d8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b086      	sub	sp, #24
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f4e0:	2317      	movs	r3, #23
 800f4e2:	18fb      	adds	r3, r7, r3
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	2380      	movs	r3, #128	@ 0x80
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d003      	beq.n	800f4fc <HAL_I2S_DMAStop+0x24>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d158      	bne.n	800f5ae <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f500:	2b00      	cmp	r3, #0
 800f502:	d010      	beq.n	800f526 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f508:	0018      	movs	r0, r3
 800f50a:	f7fd f92b 	bl	800c764 <HAL_DMA_Abort>
 800f50e:	1e03      	subs	r3, r0, #0
 800f510:	d009      	beq.n	800f526 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f516:	2208      	movs	r2, #8
 800f518:	431a      	orrs	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f51e:	2317      	movs	r3, #23
 800f520:	18fb      	adds	r3, r7, r3
 800f522:	2201      	movs	r2, #1
 800f524:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	2364      	movs	r3, #100	@ 0x64
 800f52a:	2201      	movs	r2, #1
 800f52c:	2102      	movs	r1, #2
 800f52e:	f000 f8f7 	bl	800f720 <I2S_WaitFlagStateUntilTimeout>
 800f532:	1e03      	subs	r3, r0, #0
 800f534:	d00d      	beq.n	800f552 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f53a:	2201      	movs	r2, #1
 800f53c:	431a      	orrs	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2235      	movs	r2, #53	@ 0x35
 800f546:	2101      	movs	r1, #1
 800f548:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f54a:	2317      	movs	r3, #23
 800f54c:	18fb      	adds	r3, r7, r3
 800f54e:	2201      	movs	r2, #1
 800f550:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	2364      	movs	r3, #100	@ 0x64
 800f556:	2200      	movs	r2, #0
 800f558:	2180      	movs	r1, #128	@ 0x80
 800f55a:	f000 f8e1 	bl	800f720 <I2S_WaitFlagStateUntilTimeout>
 800f55e:	1e03      	subs	r3, r0, #0
 800f560:	d00d      	beq.n	800f57e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f566:	2201      	movs	r2, #1
 800f568:	431a      	orrs	r2, r3
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2235      	movs	r2, #53	@ 0x35
 800f572:	2101      	movs	r1, #1
 800f574:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f576:	2317      	movs	r3, #23
 800f578:	18fb      	adds	r3, r7, r3
 800f57a:	2201      	movs	r2, #1
 800f57c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	69da      	ldr	r2, [r3, #28]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4938      	ldr	r1, [pc, #224]	@ (800f66c <HAL_I2S_DMAStop+0x194>)
 800f58a:	400a      	ands	r2, r1
 800f58c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800f58e:	2300      	movs	r3, #0
 800f590:	613b      	str	r3, [r7, #16]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	613b      	str	r3, [r7, #16]
 800f59a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2102      	movs	r1, #2
 800f5a8:	438a      	bics	r2, r1
 800f5aa:	605a      	str	r2, [r3, #4]
 800f5ac:	e053      	b.n	800f656 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	23c0      	movs	r3, #192	@ 0xc0
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d005      	beq.n	800f5c6 <HAL_I2S_DMAStop+0xee>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	2380      	movs	r3, #128	@ 0x80
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d147      	bne.n	800f656 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d010      	beq.n	800f5f0 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5d2:	0018      	movs	r0, r3
 800f5d4:	f7fd f8c6 	bl	800c764 <HAL_DMA_Abort>
 800f5d8:	1e03      	subs	r3, r0, #0
 800f5da:	d009      	beq.n	800f5f0 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e0:	2208      	movs	r2, #8
 800f5e2:	431a      	orrs	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f5e8:	2317      	movs	r3, #23
 800f5ea:	18fb      	adds	r3, r7, r3
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	69da      	ldr	r2, [r3, #28]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	491c      	ldr	r1, [pc, #112]	@ (800f66c <HAL_I2S_DMAStop+0x194>)
 800f5fc:	400a      	ands	r2, r1
 800f5fe:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f600:	2300      	movs	r3, #0
 800f602:	60fb      	str	r3, [r7, #12]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	60fb      	str	r3, [r7, #12]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	60fb      	str	r3, [r7, #12]
 800f614:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	685a      	ldr	r2, [r3, #4]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2101      	movs	r1, #1
 800f622:	438a      	bics	r2, r1
 800f624:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	685a      	ldr	r2, [r3, #4]
 800f62a:	2380      	movs	r3, #128	@ 0x80
 800f62c:	005b      	lsls	r3, r3, #1
 800f62e:	429a      	cmp	r2, r3
 800f630:	d10e      	bne.n	800f650 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f636:	2240      	movs	r2, #64	@ 0x40
 800f638:	431a      	orrs	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2235      	movs	r2, #53	@ 0x35
 800f642:	2101      	movs	r1, #1
 800f644:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800f646:	2317      	movs	r3, #23
 800f648:	18fb      	adds	r3, r7, r3
 800f64a:	2201      	movs	r2, #1
 800f64c:	701a      	strb	r2, [r3, #0]
 800f64e:	e002      	b.n	800f656 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2235      	movs	r2, #53	@ 0x35
 800f65a:	2101      	movs	r1, #1
 800f65c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800f65e:	2317      	movs	r3, #23
 800f660:	18fb      	adds	r3, r7, r3
 800f662:	781b      	ldrb	r3, [r3, #0]
}
 800f664:	0018      	movs	r0, r3
 800f666:	46bd      	mov	sp, r7
 800f668:	b006      	add	sp, #24
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	fffffbff 	.word	0xfffffbff

0800f670 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f67c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	69db      	ldr	r3, [r3, #28]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10e      	bne.n	800f6a4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	685a      	ldr	r2, [r3, #4]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2101      	movs	r1, #1
 800f692:	438a      	bics	r2, r1
 800f694:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2200      	movs	r2, #0
 800f69a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2235      	movs	r2, #53	@ 0x35
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	0018      	movs	r0, r3
 800f6a8:	f7fa f9ce 	bl	8009a48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f6ac:	46c0      	nop			@ (mov r8, r8)
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	b004      	add	sp, #16
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	0018      	movs	r0, r3
 800f6c6:	f7fa f9ad 	bl	8009a24 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f6ca:	46c0      	nop			@ (mov r8, r8)
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	b004      	add	sp, #16
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b084      	sub	sp, #16
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6de:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	685a      	ldr	r2, [r3, #4]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2103      	movs	r1, #3
 800f6ec:	438a      	bics	r2, r1
 800f6ee:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2235      	movs	r2, #53	@ 0x35
 800f700:	2101      	movs	r1, #1
 800f702:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f708:	2208      	movs	r2, #8
 800f70a:	431a      	orrs	r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	0018      	movs	r0, r3
 800f714:	f7fa f9e6 	bl	8009ae4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f718:	46c0      	nop			@ (mov r8, r8)
 800f71a:	46bd      	mov	sp, r7
 800f71c:	b004      	add	sp, #16
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	603b      	str	r3, [r7, #0]
 800f72c:	1dfb      	adds	r3, r7, #7
 800f72e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800f730:	f7fc fa92 	bl	800bc58 <HAL_GetTick>
 800f734:	0003      	movs	r3, r0
 800f736:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800f738:	e017      	b.n	800f76a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	3301      	adds	r3, #1
 800f73e:	d014      	beq.n	800f76a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800f740:	f7fc fa8a 	bl	800bc58 <HAL_GetTick>
 800f744:	0002      	movs	r2, r0
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	1ad3      	subs	r3, r2, r3
 800f74a:	683a      	ldr	r2, [r7, #0]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d902      	bls.n	800f756 <I2S_WaitFlagStateUntilTimeout+0x36>
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d109      	bne.n	800f76a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2235      	movs	r2, #53	@ 0x35
 800f75a:	2101      	movs	r1, #1
 800f75c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2234      	movs	r2, #52	@ 0x34
 800f762:	2100      	movs	r1, #0
 800f764:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f766:	2303      	movs	r3, #3
 800f768:	e00f      	b.n	800f78a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	68ba      	ldr	r2, [r7, #8]
 800f772:	4013      	ands	r3, r2
 800f774:	68ba      	ldr	r2, [r7, #8]
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	425a      	negs	r2, r3
 800f77a:	4153      	adcs	r3, r2
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	001a      	movs	r2, r3
 800f780:	1dfb      	adds	r3, r7, #7
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	429a      	cmp	r2, r3
 800f786:	d1d8      	bne.n	800f73a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800f788:	2300      	movs	r3, #0
}
 800f78a:	0018      	movs	r0, r3
 800f78c:	46bd      	mov	sp, r7
 800f78e:	b006      	add	sp, #24
 800f790:	bd80      	pop	{r7, pc}
	...

0800f794 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f796:	b08b      	sub	sp, #44	@ 0x2c
 800f798:	af06      	add	r7, sp, #24
 800f79a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d101      	bne.n	800f7a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e0f0      	b.n	800f988 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4a79      	ldr	r2, [pc, #484]	@ (800f990 <HAL_PCD_Init+0x1fc>)
 800f7aa:	5c9b      	ldrb	r3, [r3, r2]
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d108      	bne.n	800f7c4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	23aa      	movs	r3, #170	@ 0xaa
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	0018      	movs	r0, r3
 800f7c0:	f009 fae8 	bl	8018d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a72      	ldr	r2, [pc, #456]	@ (800f990 <HAL_PCD_Init+0x1fc>)
 800f7c8:	2103      	movs	r1, #3
 800f7ca:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	0018      	movs	r0, r3
 800f7d2:	f005 fa9b 	bl	8014d0c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f7d6:	230f      	movs	r3, #15
 800f7d8:	18fb      	adds	r3, r7, r3
 800f7da:	2200      	movs	r2, #0
 800f7dc:	701a      	strb	r2, [r3, #0]
 800f7de:	e049      	b.n	800f874 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f7e0:	200f      	movs	r0, #15
 800f7e2:	183b      	adds	r3, r7, r0
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	6879      	ldr	r1, [r7, #4]
 800f7e8:	1c5a      	adds	r2, r3, #1
 800f7ea:	0013      	movs	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	189b      	adds	r3, r3, r2
 800f7f0:	00db      	lsls	r3, r3, #3
 800f7f2:	18cb      	adds	r3, r1, r3
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f7fa:	183b      	adds	r3, r7, r0
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	6879      	ldr	r1, [r7, #4]
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	0013      	movs	r3, r2
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	189b      	adds	r3, r3, r2
 800f808:	00db      	lsls	r3, r3, #3
 800f80a:	183a      	adds	r2, r7, r0
 800f80c:	7812      	ldrb	r2, [r2, #0]
 800f80e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f810:	183b      	adds	r3, r7, r0
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	6879      	ldr	r1, [r7, #4]
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	0013      	movs	r3, r2
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	189b      	adds	r3, r3, r2
 800f81e:	00db      	lsls	r3, r3, #3
 800f820:	18cb      	adds	r3, r1, r3
 800f822:	3303      	adds	r3, #3
 800f824:	2200      	movs	r2, #0
 800f826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f828:	183b      	adds	r3, r7, r0
 800f82a:	781a      	ldrb	r2, [r3, #0]
 800f82c:	6879      	ldr	r1, [r7, #4]
 800f82e:	0013      	movs	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	189b      	adds	r3, r3, r2
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	18cb      	adds	r3, r1, r3
 800f838:	3338      	adds	r3, #56	@ 0x38
 800f83a:	2200      	movs	r2, #0
 800f83c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f83e:	183b      	adds	r3, r7, r0
 800f840:	781a      	ldrb	r2, [r3, #0]
 800f842:	6879      	ldr	r1, [r7, #4]
 800f844:	0013      	movs	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	189b      	adds	r3, r3, r2
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	18cb      	adds	r3, r1, r3
 800f84e:	333c      	adds	r3, #60	@ 0x3c
 800f850:	2200      	movs	r2, #0
 800f852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f854:	183b      	adds	r3, r7, r0
 800f856:	781a      	ldrb	r2, [r3, #0]
 800f858:	6879      	ldr	r1, [r7, #4]
 800f85a:	0013      	movs	r3, r2
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	189b      	adds	r3, r3, r2
 800f860:	00db      	lsls	r3, r3, #3
 800f862:	18cb      	adds	r3, r1, r3
 800f864:	3340      	adds	r3, #64	@ 0x40
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f86a:	183b      	adds	r3, r7, r0
 800f86c:	781a      	ldrb	r2, [r3, #0]
 800f86e:	183b      	adds	r3, r7, r0
 800f870:	3201      	adds	r2, #1
 800f872:	701a      	strb	r2, [r3, #0]
 800f874:	210f      	movs	r1, #15
 800f876:	187b      	adds	r3, r7, r1
 800f878:	781a      	ldrb	r2, [r3, #0]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d3ae      	bcc.n	800f7e0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f882:	187b      	adds	r3, r7, r1
 800f884:	2200      	movs	r2, #0
 800f886:	701a      	strb	r2, [r3, #0]
 800f888:	e056      	b.n	800f938 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f88a:	240f      	movs	r4, #15
 800f88c:	193b      	adds	r3, r7, r4
 800f88e:	781a      	ldrb	r2, [r3, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	236a      	movs	r3, #106	@ 0x6a
 800f894:	33ff      	adds	r3, #255	@ 0xff
 800f896:	0019      	movs	r1, r3
 800f898:	0013      	movs	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	189b      	adds	r3, r3, r2
 800f89e:	00db      	lsls	r3, r3, #3
 800f8a0:	18c3      	adds	r3, r0, r3
 800f8a2:	185b      	adds	r3, r3, r1
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f8a8:	193b      	adds	r3, r7, r4
 800f8aa:	781a      	ldrb	r2, [r3, #0]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	23b4      	movs	r3, #180	@ 0xb4
 800f8b0:	0059      	lsls	r1, r3, #1
 800f8b2:	0013      	movs	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	189b      	adds	r3, r3, r2
 800f8b8:	00db      	lsls	r3, r3, #3
 800f8ba:	18c3      	adds	r3, r0, r3
 800f8bc:	185b      	adds	r3, r3, r1
 800f8be:	193a      	adds	r2, r7, r4
 800f8c0:	7812      	ldrb	r2, [r2, #0]
 800f8c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f8c4:	193b      	adds	r3, r7, r4
 800f8c6:	781a      	ldrb	r2, [r3, #0]
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	236c      	movs	r3, #108	@ 0x6c
 800f8cc:	33ff      	adds	r3, #255	@ 0xff
 800f8ce:	0019      	movs	r1, r3
 800f8d0:	0013      	movs	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	189b      	adds	r3, r3, r2
 800f8d6:	00db      	lsls	r3, r3, #3
 800f8d8:	18c3      	adds	r3, r0, r3
 800f8da:	185b      	adds	r3, r3, r1
 800f8dc:	2200      	movs	r2, #0
 800f8de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f8e0:	193b      	adds	r3, r7, r4
 800f8e2:	781a      	ldrb	r2, [r3, #0]
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	23bc      	movs	r3, #188	@ 0xbc
 800f8e8:	0059      	lsls	r1, r3, #1
 800f8ea:	0013      	movs	r3, r2
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	189b      	adds	r3, r3, r2
 800f8f0:	00db      	lsls	r3, r3, #3
 800f8f2:	18c3      	adds	r3, r0, r3
 800f8f4:	185b      	adds	r3, r3, r1
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f8fa:	193b      	adds	r3, r7, r4
 800f8fc:	781a      	ldrb	r2, [r3, #0]
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	23be      	movs	r3, #190	@ 0xbe
 800f902:	0059      	lsls	r1, r3, #1
 800f904:	0013      	movs	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	189b      	adds	r3, r3, r2
 800f90a:	00db      	lsls	r3, r3, #3
 800f90c:	18c3      	adds	r3, r0, r3
 800f90e:	185b      	adds	r3, r3, r1
 800f910:	2200      	movs	r2, #0
 800f912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f914:	193b      	adds	r3, r7, r4
 800f916:	781a      	ldrb	r2, [r3, #0]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	23c0      	movs	r3, #192	@ 0xc0
 800f91c:	0059      	lsls	r1, r3, #1
 800f91e:	0013      	movs	r3, r2
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	189b      	adds	r3, r3, r2
 800f924:	00db      	lsls	r3, r3, #3
 800f926:	18c3      	adds	r3, r0, r3
 800f928:	185b      	adds	r3, r3, r1
 800f92a:	2200      	movs	r2, #0
 800f92c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f92e:	193b      	adds	r3, r7, r4
 800f930:	781a      	ldrb	r2, [r3, #0]
 800f932:	193b      	adds	r3, r7, r4
 800f934:	3201      	adds	r2, #1
 800f936:	701a      	strb	r2, [r3, #0]
 800f938:	230f      	movs	r3, #15
 800f93a:	18fb      	adds	r3, r7, r3
 800f93c:	781a      	ldrb	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	429a      	cmp	r2, r3
 800f944:	d3a1      	bcc.n	800f88a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6818      	ldr	r0, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	466a      	mov	r2, sp
 800f94e:	0011      	movs	r1, r2
 800f950:	001a      	movs	r2, r3
 800f952:	3210      	adds	r2, #16
 800f954:	ca70      	ldmia	r2!, {r4, r5, r6}
 800f956:	c170      	stmia	r1!, {r4, r5, r6}
 800f958:	ca30      	ldmia	r2!, {r4, r5}
 800f95a:	c130      	stmia	r1!, {r4, r5}
 800f95c:	6859      	ldr	r1, [r3, #4]
 800f95e:	689a      	ldr	r2, [r3, #8]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	f005 f9ed 	bl	8014d40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2224      	movs	r2, #36	@ 0x24
 800f96a:	2100      	movs	r1, #0
 800f96c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a07      	ldr	r2, [pc, #28]	@ (800f990 <HAL_PCD_Init+0x1fc>)
 800f972:	2101      	movs	r1, #1
 800f974:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	69db      	ldr	r3, [r3, #28]
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d103      	bne.n	800f986 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	0018      	movs	r0, r3
 800f982:	f001 fd23 	bl	80113cc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800f986:	2300      	movs	r3, #0
}
 800f988:	0018      	movs	r0, r3
 800f98a:	46bd      	mov	sp, r7
 800f98c:	b005      	add	sp, #20
 800f98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f990:	000002a9 	.word	0x000002a9

0800f994 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	23aa      	movs	r3, #170	@ 0xaa
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	5cd3      	ldrb	r3, [r2, r3]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d101      	bne.n	800f9ac <HAL_PCD_Start+0x18>
 800f9a8:	2302      	movs	r3, #2
 800f9aa:	e014      	b.n	800f9d6 <HAL_PCD_Start+0x42>
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	23aa      	movs	r3, #170	@ 0xaa
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	2101      	movs	r1, #1
 800f9b4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	0018      	movs	r0, r3
 800f9bc:	f005 f990 	bl	8014ce0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	0018      	movs	r0, r3
 800f9c6:	f007 f993 	bl	8016cf0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	23aa      	movs	r3, #170	@ 0xaa
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	0018      	movs	r0, r3
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	b002      	add	sp, #8
 800f9dc:	bd80      	pop	{r7, pc}
	...

0800f9e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	0018      	movs	r0, r3
 800f9ee:	f007 f995 	bl	8016d1c <USB_ReadInterrupts>
 800f9f2:	0003      	movs	r3, r0
 800f9f4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	2380      	movs	r3, #128	@ 0x80
 800f9fa:	021b      	lsls	r3, r3, #8
 800f9fc:	4013      	ands	r3, r2
 800f9fe:	d004      	beq.n	800fa0a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	0018      	movs	r0, r3
 800fa04:	f000 fb62 	bl	80100cc <PCD_EP_ISR_Handler>

    return;
 800fa08:	e11d      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	2380      	movs	r3, #128	@ 0x80
 800fa0e:	00db      	lsls	r3, r3, #3
 800fa10:	4013      	ands	r3, r2
 800fa12:	d015      	beq.n	800fa40 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2244      	movs	r2, #68	@ 0x44
 800fa1a:	5a9b      	ldrh	r3, [r3, r2]
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	498a      	ldr	r1, [pc, #552]	@ (800fc4c <HAL_PCD_IRQHandler+0x26c>)
 800fa24:	400a      	ands	r2, r1
 800fa26:	b291      	uxth	r1, r2
 800fa28:	2244      	movs	r2, #68	@ 0x44
 800fa2a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	0018      	movs	r0, r3
 800fa30:	f009 fa33 	bl	8018e9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2100      	movs	r1, #0
 800fa38:	0018      	movs	r0, r3
 800fa3a:	f000 f915 	bl	800fc68 <HAL_PCD_SetAddress>

    return;
 800fa3e:	e102      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	2380      	movs	r3, #128	@ 0x80
 800fa44:	01db      	lsls	r3, r3, #7
 800fa46:	4013      	ands	r3, r2
 800fa48:	d00c      	beq.n	800fa64 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2244      	movs	r2, #68	@ 0x44
 800fa50:	5a9b      	ldrh	r3, [r3, r2]
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	497d      	ldr	r1, [pc, #500]	@ (800fc50 <HAL_PCD_IRQHandler+0x270>)
 800fa5a:	400a      	ands	r2, r1
 800fa5c:	b291      	uxth	r1, r2
 800fa5e:	2244      	movs	r2, #68	@ 0x44
 800fa60:	5299      	strh	r1, [r3, r2]

    return;
 800fa62:	e0f0      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	2380      	movs	r3, #128	@ 0x80
 800fa68:	019b      	lsls	r3, r3, #6
 800fa6a:	4013      	ands	r3, r2
 800fa6c:	d00c      	beq.n	800fa88 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2244      	movs	r2, #68	@ 0x44
 800fa74:	5a9b      	ldrh	r3, [r3, r2]
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4975      	ldr	r1, [pc, #468]	@ (800fc54 <HAL_PCD_IRQHandler+0x274>)
 800fa7e:	400a      	ands	r2, r1
 800fa80:	b291      	uxth	r1, r2
 800fa82:	2244      	movs	r2, #68	@ 0x44
 800fa84:	5299      	strh	r1, [r3, r2]

    return;
 800fa86:	e0de      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	2380      	movs	r3, #128	@ 0x80
 800fa8c:	015b      	lsls	r3, r3, #5
 800fa8e:	4013      	ands	r3, r2
 800fa90:	d038      	beq.n	800fb04 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2240      	movs	r2, #64	@ 0x40
 800fa98:	5a9b      	ldrh	r3, [r3, r2]
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2104      	movs	r1, #4
 800faa2:	438a      	bics	r2, r1
 800faa4:	b291      	uxth	r1, r2
 800faa6:	2240      	movs	r2, #64	@ 0x40
 800faa8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2240      	movs	r2, #64	@ 0x40
 800fab0:	5a9b      	ldrh	r3, [r3, r2]
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2108      	movs	r1, #8
 800faba:	438a      	bics	r2, r1
 800fabc:	b291      	uxth	r1, r2
 800fabe:	2240      	movs	r2, #64	@ 0x40
 800fac0:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	23b8      	movs	r3, #184	@ 0xb8
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	5cd3      	ldrb	r3, [r2, r3]
 800faca:	2b01      	cmp	r3, #1
 800facc:	d109      	bne.n	800fae2 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	23b8      	movs	r3, #184	@ 0xb8
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	2100      	movs	r1, #0
 800fad6:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2100      	movs	r1, #0
 800fadc:	0018      	movs	r0, r3
 800fade:	f001 fc9f 	bl	8011420 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	0018      	movs	r0, r3
 800fae6:	f009 fa19 	bl	8018f1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2244      	movs	r2, #68	@ 0x44
 800faf0:	5a9b      	ldrh	r3, [r3, r2]
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4957      	ldr	r1, [pc, #348]	@ (800fc58 <HAL_PCD_IRQHandler+0x278>)
 800fafa:	400a      	ands	r2, r1
 800fafc:	b291      	uxth	r1, r2
 800fafe:	2244      	movs	r2, #68	@ 0x44
 800fb00:	5299      	strh	r1, [r3, r2]

    return;
 800fb02:	e0a0      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	2380      	movs	r3, #128	@ 0x80
 800fb08:	011b      	lsls	r3, r3, #4
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	d028      	beq.n	800fb60 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2240      	movs	r2, #64	@ 0x40
 800fb14:	5a9b      	ldrh	r3, [r3, r2]
 800fb16:	b29a      	uxth	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2108      	movs	r1, #8
 800fb1e:	430a      	orrs	r2, r1
 800fb20:	b291      	uxth	r1, r2
 800fb22:	2240      	movs	r2, #64	@ 0x40
 800fb24:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2244      	movs	r2, #68	@ 0x44
 800fb2c:	5a9b      	ldrh	r3, [r3, r2]
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4949      	ldr	r1, [pc, #292]	@ (800fc5c <HAL_PCD_IRQHandler+0x27c>)
 800fb36:	400a      	ands	r2, r1
 800fb38:	b291      	uxth	r1, r2
 800fb3a:	2244      	movs	r2, #68	@ 0x44
 800fb3c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2240      	movs	r2, #64	@ 0x40
 800fb44:	5a9b      	ldrh	r3, [r3, r2]
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2104      	movs	r1, #4
 800fb4e:	430a      	orrs	r2, r1
 800fb50:	b291      	uxth	r1, r2
 800fb52:	2240      	movs	r2, #64	@ 0x40
 800fb54:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	0018      	movs	r0, r3
 800fb5a:	f009 f9c3 	bl	8018ee4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fb5e:	e072      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2280      	movs	r2, #128	@ 0x80
 800fb64:	4013      	ands	r3, r2
 800fb66:	d046      	beq.n	800fbf6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2244      	movs	r2, #68	@ 0x44
 800fb6e:	5a9b      	ldrh	r3, [r3, r2]
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2180      	movs	r1, #128	@ 0x80
 800fb78:	438a      	bics	r2, r1
 800fb7a:	b291      	uxth	r1, r2
 800fb7c:	2244      	movs	r2, #68	@ 0x44
 800fb7e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	23b8      	movs	r3, #184	@ 0xb8
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	5cd3      	ldrb	r3, [r2, r3]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d12f      	bne.n	800fbec <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2240      	movs	r2, #64	@ 0x40
 800fb92:	5a9b      	ldrh	r3, [r3, r2]
 800fb94:	b29a      	uxth	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2104      	movs	r1, #4
 800fb9c:	430a      	orrs	r2, r1
 800fb9e:	b291      	uxth	r1, r2
 800fba0:	2240      	movs	r2, #64	@ 0x40
 800fba2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2240      	movs	r2, #64	@ 0x40
 800fbaa:	5a9b      	ldrh	r3, [r3, r2]
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2108      	movs	r1, #8
 800fbb4:	430a      	orrs	r2, r1
 800fbb6:	b291      	uxth	r1, r2
 800fbb8:	2240      	movs	r2, #64	@ 0x40
 800fbba:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	23b8      	movs	r3, #184	@ 0xb8
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	2101      	movs	r1, #1
 800fbc4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2254      	movs	r2, #84	@ 0x54
 800fbcc:	5a9b      	ldrh	r3, [r3, r2]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	089b      	lsrs	r3, r3, #2
 800fbd2:	223c      	movs	r2, #60	@ 0x3c
 800fbd4:	4013      	ands	r3, r2
 800fbd6:	0019      	movs	r1, r3
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	23b9      	movs	r3, #185	@ 0xb9
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2101      	movs	r1, #1
 800fbe4:	0018      	movs	r0, r3
 800fbe6:	f001 fc1b 	bl	8011420 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800fbea:	e02c      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	0018      	movs	r0, r3
 800fbf0:	f009 f978 	bl	8018ee4 <HAL_PCD_SuspendCallback>
    return;
 800fbf4:	e027      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	2380      	movs	r3, #128	@ 0x80
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4013      	ands	r3, r2
 800fbfe:	d010      	beq.n	800fc22 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2244      	movs	r2, #68	@ 0x44
 800fc06:	5a9b      	ldrh	r3, [r3, r2]
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4914      	ldr	r1, [pc, #80]	@ (800fc60 <HAL_PCD_IRQHandler+0x280>)
 800fc10:	400a      	ands	r2, r1
 800fc12:	b291      	uxth	r1, r2
 800fc14:	2244      	movs	r2, #68	@ 0x44
 800fc16:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	0018      	movs	r0, r3
 800fc1c:	f009 f92e 	bl	8018e7c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fc20:	e011      	b.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	2380      	movs	r3, #128	@ 0x80
 800fc26:	005b      	lsls	r3, r3, #1
 800fc28:	4013      	ands	r3, r2
 800fc2a:	d00c      	beq.n	800fc46 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2244      	movs	r2, #68	@ 0x44
 800fc32:	5a9b      	ldrh	r3, [r3, r2]
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	490a      	ldr	r1, [pc, #40]	@ (800fc64 <HAL_PCD_IRQHandler+0x284>)
 800fc3c:	400a      	ands	r2, r1
 800fc3e:	b291      	uxth	r1, r2
 800fc40:	2244      	movs	r2, #68	@ 0x44
 800fc42:	5299      	strh	r1, [r3, r2]

    return;
 800fc44:	46c0      	nop			@ (mov r8, r8)
  }
}
 800fc46:	46bd      	mov	sp, r7
 800fc48:	b004      	add	sp, #16
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	fffffbff 	.word	0xfffffbff
 800fc50:	ffffbfff 	.word	0xffffbfff
 800fc54:	ffffdfff 	.word	0xffffdfff
 800fc58:	ffffefff 	.word	0xffffefff
 800fc5c:	fffff7ff 	.word	0xfffff7ff
 800fc60:	fffffdff 	.word	0xfffffdff
 800fc64:	fffffeff 	.word	0xfffffeff

0800fc68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	000a      	movs	r2, r1
 800fc72:	1cfb      	adds	r3, r7, #3
 800fc74:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	23aa      	movs	r3, #170	@ 0xaa
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	5cd3      	ldrb	r3, [r2, r3]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d101      	bne.n	800fc86 <HAL_PCD_SetAddress+0x1e>
 800fc82:	2302      	movs	r3, #2
 800fc84:	e017      	b.n	800fcb6 <HAL_PCD_SetAddress+0x4e>
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	23aa      	movs	r3, #170	@ 0xaa
 800fc8a:	009b      	lsls	r3, r3, #2
 800fc8c:	2101      	movs	r1, #1
 800fc8e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	1cfa      	adds	r2, r7, #3
 800fc94:	2124      	movs	r1, #36	@ 0x24
 800fc96:	7812      	ldrb	r2, [r2, #0]
 800fc98:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	1cfb      	adds	r3, r7, #3
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	0019      	movs	r1, r3
 800fca4:	0010      	movs	r0, r2
 800fca6:	f007 f80f 	bl	8016cc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	23aa      	movs	r3, #170	@ 0xaa
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	0018      	movs	r0, r3
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	b002      	add	sp, #8
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800fcbe:	b590      	push	{r4, r7, lr}
 800fcc0:	b085      	sub	sp, #20
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	000c      	movs	r4, r1
 800fcc8:	0010      	movs	r0, r2
 800fcca:	0019      	movs	r1, r3
 800fccc:	1cfb      	adds	r3, r7, #3
 800fcce:	1c22      	adds	r2, r4, #0
 800fcd0:	701a      	strb	r2, [r3, #0]
 800fcd2:	003b      	movs	r3, r7
 800fcd4:	1c02      	adds	r2, r0, #0
 800fcd6:	801a      	strh	r2, [r3, #0]
 800fcd8:	1cbb      	adds	r3, r7, #2
 800fcda:	1c0a      	adds	r2, r1, #0
 800fcdc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800fcde:	230b      	movs	r3, #11
 800fce0:	18fb      	adds	r3, r7, r3
 800fce2:	2200      	movs	r2, #0
 800fce4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fce6:	1cfb      	adds	r3, r7, #3
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	b25b      	sxtb	r3, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	da0f      	bge.n	800fd10 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fcf0:	1cfb      	adds	r3, r7, #3
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2207      	movs	r2, #7
 800fcf6:	4013      	ands	r3, r2
 800fcf8:	1c5a      	adds	r2, r3, #1
 800fcfa:	0013      	movs	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	189b      	adds	r3, r3, r2
 800fd00:	00db      	lsls	r3, r3, #3
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	18d3      	adds	r3, r2, r3
 800fd06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	705a      	strb	r2, [r3, #1]
 800fd0e:	e00f      	b.n	800fd30 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fd10:	1cfb      	adds	r3, r7, #3
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2207      	movs	r2, #7
 800fd16:	401a      	ands	r2, r3
 800fd18:	0013      	movs	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	189b      	adds	r3, r3, r2
 800fd1e:	00db      	lsls	r3, r3, #3
 800fd20:	3369      	adds	r3, #105	@ 0x69
 800fd22:	33ff      	adds	r3, #255	@ 0xff
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	18d3      	adds	r3, r2, r3
 800fd28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800fd30:	1cfb      	adds	r3, r7, #3
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	2207      	movs	r2, #7
 800fd36:	4013      	ands	r3, r2
 800fd38:	b2da      	uxtb	r2, r3
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800fd3e:	003b      	movs	r3, r7
 800fd40:	881a      	ldrh	r2, [r3, #0]
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	1cba      	adds	r2, r7, #2
 800fd4a:	7812      	ldrb	r2, [r2, #0]
 800fd4c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800fd4e:	1cbb      	adds	r3, r7, #2
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	2b02      	cmp	r3, #2
 800fd54:	d102      	bne.n	800fd5c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	23aa      	movs	r3, #170	@ 0xaa
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	5cd3      	ldrb	r3, [r2, r3]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d101      	bne.n	800fd6c <HAL_PCD_EP_Open+0xae>
 800fd68:	2302      	movs	r3, #2
 800fd6a:	e013      	b.n	800fd94 <HAL_PCD_EP_Open+0xd6>
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	23aa      	movs	r3, #170	@ 0xaa
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	2101      	movs	r1, #1
 800fd74:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	0011      	movs	r1, r2
 800fd7e:	0018      	movs	r0, r3
 800fd80:	f005 f806 	bl	8014d90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	23aa      	movs	r3, #170	@ 0xaa
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800fd8e:	230b      	movs	r3, #11
 800fd90:	18fb      	adds	r3, r7, r3
 800fd92:	781b      	ldrb	r3, [r3, #0]
}
 800fd94:	0018      	movs	r0, r3
 800fd96:	46bd      	mov	sp, r7
 800fd98:	b005      	add	sp, #20
 800fd9a:	bd90      	pop	{r4, r7, pc}

0800fd9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	000a      	movs	r2, r1
 800fda6:	1cfb      	adds	r3, r7, #3
 800fda8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fdaa:	1cfb      	adds	r3, r7, #3
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	b25b      	sxtb	r3, r3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	da0f      	bge.n	800fdd4 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fdb4:	1cfb      	adds	r3, r7, #3
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	2207      	movs	r2, #7
 800fdba:	4013      	ands	r3, r2
 800fdbc:	1c5a      	adds	r2, r3, #1
 800fdbe:	0013      	movs	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	189b      	adds	r3, r3, r2
 800fdc4:	00db      	lsls	r3, r3, #3
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	18d3      	adds	r3, r2, r3
 800fdca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2201      	movs	r2, #1
 800fdd0:	705a      	strb	r2, [r3, #1]
 800fdd2:	e00f      	b.n	800fdf4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdd4:	1cfb      	adds	r3, r7, #3
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	2207      	movs	r2, #7
 800fdda:	401a      	ands	r2, r3
 800fddc:	0013      	movs	r3, r2
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	189b      	adds	r3, r3, r2
 800fde2:	00db      	lsls	r3, r3, #3
 800fde4:	3369      	adds	r3, #105	@ 0x69
 800fde6:	33ff      	adds	r3, #255	@ 0xff
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	18d3      	adds	r3, r2, r3
 800fdec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800fdf4:	1cfb      	adds	r3, r7, #3
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	2207      	movs	r2, #7
 800fdfa:	4013      	ands	r3, r2
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	23aa      	movs	r3, #170	@ 0xaa
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	5cd3      	ldrb	r3, [r2, r3]
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d101      	bne.n	800fe12 <HAL_PCD_EP_Close+0x76>
 800fe0e:	2302      	movs	r3, #2
 800fe10:	e011      	b.n	800fe36 <HAL_PCD_EP_Close+0x9a>
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	23aa      	movs	r3, #170	@ 0xaa
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	2101      	movs	r1, #1
 800fe1a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	0011      	movs	r1, r2
 800fe24:	0018      	movs	r0, r3
 800fe26:	f005 fb55 	bl	80154d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	23aa      	movs	r3, #170	@ 0xaa
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	2100      	movs	r1, #0
 800fe32:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	0018      	movs	r0, r3
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	b004      	add	sp, #16
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b086      	sub	sp, #24
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	60f8      	str	r0, [r7, #12]
 800fe46:	607a      	str	r2, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
 800fe4a:	200b      	movs	r0, #11
 800fe4c:	183b      	adds	r3, r7, r0
 800fe4e:	1c0a      	adds	r2, r1, #0
 800fe50:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fe52:	0001      	movs	r1, r0
 800fe54:	187b      	adds	r3, r7, r1
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	2207      	movs	r2, #7
 800fe5a:	401a      	ands	r2, r3
 800fe5c:	0013      	movs	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	189b      	adds	r3, r3, r2
 800fe62:	00db      	lsls	r3, r3, #3
 800fe64:	3369      	adds	r3, #105	@ 0x69
 800fe66:	33ff      	adds	r3, #255	@ 0xff
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	18d3      	adds	r3, r2, r3
 800fe6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	2200      	movs	r2, #0
 800fe84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fe86:	187b      	adds	r3, r7, r1
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	2207      	movs	r2, #7
 800fe8c:	4013      	ands	r3, r2
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	697a      	ldr	r2, [r7, #20]
 800fe9a:	0011      	movs	r1, r2
 800fe9c:	0018      	movs	r0, r3
 800fe9e:	f005 fcd9 	bl	8015854 <USB_EPStartXfer>

  return HAL_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	0018      	movs	r0, r3
 800fea6:	46bd      	mov	sp, r7
 800fea8:	b006      	add	sp, #24
 800feaa:	bd80      	pop	{r7, pc}

0800feac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	000a      	movs	r2, r1
 800feb6:	1cfb      	adds	r3, r7, #3
 800feb8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800feba:	1cfb      	adds	r3, r7, #3
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	2207      	movs	r2, #7
 800fec0:	401a      	ands	r2, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	23c2      	movs	r3, #194	@ 0xc2
 800fec6:	0059      	lsls	r1, r3, #1
 800fec8:	0013      	movs	r3, r2
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	189b      	adds	r3, r3, r2
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	18c3      	adds	r3, r0, r3
 800fed2:	185b      	adds	r3, r3, r1
 800fed4:	681b      	ldr	r3, [r3, #0]
}
 800fed6:	0018      	movs	r0, r3
 800fed8:	46bd      	mov	sp, r7
 800feda:	b002      	add	sp, #8
 800fedc:	bd80      	pop	{r7, pc}

0800fede <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fede:	b580      	push	{r7, lr}
 800fee0:	b086      	sub	sp, #24
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	60f8      	str	r0, [r7, #12]
 800fee6:	607a      	str	r2, [r7, #4]
 800fee8:	603b      	str	r3, [r7, #0]
 800feea:	200b      	movs	r0, #11
 800feec:	183b      	adds	r3, r7, r0
 800feee:	1c0a      	adds	r2, r1, #0
 800fef0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fef2:	183b      	adds	r3, r7, r0
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	2207      	movs	r2, #7
 800fef8:	4013      	ands	r3, r2
 800fefa:	1c5a      	adds	r2, r3, #1
 800fefc:	0013      	movs	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	189b      	adds	r3, r3, r2
 800ff02:	00db      	lsls	r3, r3, #3
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	18d3      	adds	r3, r2, r3
 800ff08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	2224      	movs	r2, #36	@ 0x24
 800ff1a:	2101      	movs	r1, #1
 800ff1c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	2200      	movs	r2, #0
 800ff28:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ff30:	183b      	adds	r3, r7, r0
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	2207      	movs	r2, #7
 800ff36:	4013      	ands	r3, r2
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	697a      	ldr	r2, [r7, #20]
 800ff44:	0011      	movs	r1, r2
 800ff46:	0018      	movs	r0, r3
 800ff48:	f005 fc84 	bl	8015854 <USB_EPStartXfer>

  return HAL_OK;
 800ff4c:	2300      	movs	r3, #0
}
 800ff4e:	0018      	movs	r0, r3
 800ff50:	46bd      	mov	sp, r7
 800ff52:	b006      	add	sp, #24
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b084      	sub	sp, #16
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
 800ff5e:	000a      	movs	r2, r1
 800ff60:	1cfb      	adds	r3, r7, #3
 800ff62:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ff64:	1cfb      	adds	r3, r7, #3
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	2207      	movs	r2, #7
 800ff6a:	401a      	ands	r2, r3
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d901      	bls.n	800ff78 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800ff74:	2301      	movs	r3, #1
 800ff76:	e046      	b.n	8010006 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ff78:	1cfb      	adds	r3, r7, #3
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	b25b      	sxtb	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	da0f      	bge.n	800ffa2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ff82:	1cfb      	adds	r3, r7, #3
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	2207      	movs	r2, #7
 800ff88:	4013      	ands	r3, r2
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	0013      	movs	r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	189b      	adds	r3, r3, r2
 800ff92:	00db      	lsls	r3, r3, #3
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	18d3      	adds	r3, r2, r3
 800ff98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	705a      	strb	r2, [r3, #1]
 800ffa0:	e00d      	b.n	800ffbe <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ffa2:	1cfb      	adds	r3, r7, #3
 800ffa4:	781a      	ldrb	r2, [r3, #0]
 800ffa6:	0013      	movs	r3, r2
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	189b      	adds	r3, r3, r2
 800ffac:	00db      	lsls	r3, r3, #3
 800ffae:	3369      	adds	r3, #105	@ 0x69
 800ffb0:	33ff      	adds	r3, #255	@ 0xff
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	18d3      	adds	r3, r2, r3
 800ffb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ffc4:	1cfb      	adds	r3, r7, #3
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2207      	movs	r2, #7
 800ffca:	4013      	ands	r3, r2
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	23aa      	movs	r3, #170	@ 0xaa
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	5cd3      	ldrb	r3, [r2, r3]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d101      	bne.n	800ffe2 <HAL_PCD_EP_SetStall+0x8c>
 800ffde:	2302      	movs	r3, #2
 800ffe0:	e011      	b.n	8010006 <HAL_PCD_EP_SetStall+0xb0>
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	23aa      	movs	r3, #170	@ 0xaa
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	2101      	movs	r1, #1
 800ffea:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	0011      	movs	r1, r2
 800fff4:	0018      	movs	r0, r3
 800fff6:	f006 fd65 	bl	8016ac4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	23aa      	movs	r3, #170	@ 0xaa
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	2100      	movs	r1, #0
 8010002:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8010004:	2300      	movs	r3, #0
}
 8010006:	0018      	movs	r0, r3
 8010008:	46bd      	mov	sp, r7
 801000a:	b004      	add	sp, #16
 801000c:	bd80      	pop	{r7, pc}

0801000e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b084      	sub	sp, #16
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	000a      	movs	r2, r1
 8010018:	1cfb      	adds	r3, r7, #3
 801001a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801001c:	1cfb      	adds	r3, r7, #3
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	220f      	movs	r2, #15
 8010022:	401a      	ands	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	429a      	cmp	r2, r3
 801002a:	d901      	bls.n	8010030 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 801002c:	2301      	movs	r3, #1
 801002e:	e048      	b.n	80100c2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010030:	1cfb      	adds	r3, r7, #3
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	b25b      	sxtb	r3, r3
 8010036:	2b00      	cmp	r3, #0
 8010038:	da0f      	bge.n	801005a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801003a:	1cfb      	adds	r3, r7, #3
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	2207      	movs	r2, #7
 8010040:	4013      	ands	r3, r2
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	0013      	movs	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	189b      	adds	r3, r3, r2
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	18d3      	adds	r3, r2, r3
 8010050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2201      	movs	r2, #1
 8010056:	705a      	strb	r2, [r3, #1]
 8010058:	e00f      	b.n	801007a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801005a:	1cfb      	adds	r3, r7, #3
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	2207      	movs	r2, #7
 8010060:	401a      	ands	r2, r3
 8010062:	0013      	movs	r3, r2
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	189b      	adds	r3, r3, r2
 8010068:	00db      	lsls	r3, r3, #3
 801006a:	3369      	adds	r3, #105	@ 0x69
 801006c:	33ff      	adds	r3, #255	@ 0xff
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	18d3      	adds	r3, r2, r3
 8010072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2200      	movs	r2, #0
 8010078:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2200      	movs	r2, #0
 801007e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010080:	1cfb      	adds	r3, r7, #3
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	2207      	movs	r2, #7
 8010086:	4013      	ands	r3, r2
 8010088:	b2da      	uxtb	r2, r3
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	23aa      	movs	r3, #170	@ 0xaa
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	5cd3      	ldrb	r3, [r2, r3]
 8010096:	2b01      	cmp	r3, #1
 8010098:	d101      	bne.n	801009e <HAL_PCD_EP_ClrStall+0x90>
 801009a:	2302      	movs	r3, #2
 801009c:	e011      	b.n	80100c2 <HAL_PCD_EP_ClrStall+0xb4>
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	23aa      	movs	r3, #170	@ 0xaa
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	2101      	movs	r1, #1
 80100a6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	0011      	movs	r1, r2
 80100b0:	0018      	movs	r0, r3
 80100b2:	f006 fd57 	bl	8016b64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	23aa      	movs	r3, #170	@ 0xaa
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	2100      	movs	r1, #0
 80100be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80100c0:	2300      	movs	r3, #0
}
 80100c2:	0018      	movs	r0, r3
 80100c4:	46bd      	mov	sp, r7
 80100c6:	b004      	add	sp, #16
 80100c8:	bd80      	pop	{r7, pc}
	...

080100cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80100cc:	b5b0      	push	{r4, r5, r7, lr}
 80100ce:	b096      	sub	sp, #88	@ 0x58
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80100d4:	f000 fbec 	bl	80108b0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	204e      	movs	r0, #78	@ 0x4e
 80100de:	183b      	adds	r3, r7, r0
 80100e0:	2144      	movs	r1, #68	@ 0x44
 80100e2:	5a52      	ldrh	r2, [r2, r1]
 80100e4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80100e6:	183b      	adds	r3, r7, r0
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	b2da      	uxtb	r2, r3
 80100ec:	244d      	movs	r4, #77	@ 0x4d
 80100ee:	193b      	adds	r3, r7, r4
 80100f0:	210f      	movs	r1, #15
 80100f2:	400a      	ands	r2, r1
 80100f4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80100f6:	193b      	adds	r3, r7, r4
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d000      	beq.n	8010100 <PCD_EP_ISR_Handler+0x34>
 80100fe:	e18f      	b.n	8010420 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8010100:	183b      	adds	r3, r7, r0
 8010102:	881b      	ldrh	r3, [r3, #0]
 8010104:	2210      	movs	r2, #16
 8010106:	4013      	ands	r3, r2
 8010108:	d155      	bne.n	80101b6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	b29a      	uxth	r2, r3
 8010112:	200e      	movs	r0, #14
 8010114:	183b      	adds	r3, r7, r0
 8010116:	49bb      	ldr	r1, [pc, #748]	@ (8010404 <PCD_EP_ISR_Handler+0x338>)
 8010118:	400a      	ands	r2, r1
 801011a:	801a      	strh	r2, [r3, #0]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	183a      	adds	r2, r7, r0
 8010122:	8812      	ldrh	r2, [r2, #0]
 8010124:	49b8      	ldr	r1, [pc, #736]	@ (8010408 <PCD_EP_ISR_Handler+0x33c>)
 8010126:	430a      	orrs	r2, r1
 8010128:	b292      	uxth	r2, r2
 801012a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	3328      	adds	r3, #40	@ 0x28
 8010130:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2250      	movs	r2, #80	@ 0x50
 8010138:	5a9b      	ldrh	r3, [r3, r2]
 801013a:	b29b      	uxth	r3, r3
 801013c:	001a      	movs	r2, r3
 801013e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	00db      	lsls	r3, r3, #3
 8010144:	18d2      	adds	r2, r2, r3
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	18d3      	adds	r3, r2, r3
 801014c:	4aaf      	ldr	r2, [pc, #700]	@ (801040c <PCD_EP_ISR_Handler+0x340>)
 801014e:	4694      	mov	ip, r2
 8010150:	4463      	add	r3, ip
 8010152:	881b      	ldrh	r3, [r3, #0]
 8010154:	059b      	lsls	r3, r3, #22
 8010156:	0d9a      	lsrs	r2, r3, #22
 8010158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801015a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 801015c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801015e:	695a      	ldr	r2, [r3, #20]
 8010160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010162:	69db      	ldr	r3, [r3, #28]
 8010164:	18d2      	adds	r2, r2, r3
 8010166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010168:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2100      	movs	r1, #0
 801016e:	0018      	movs	r0, r3
 8010170:	f008 fe66 	bl	8018e40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2224      	movs	r2, #36	@ 0x24
 8010178:	5c9b      	ldrb	r3, [r3, r2]
 801017a:	b2db      	uxtb	r3, r3
 801017c:	2b00      	cmp	r3, #0
 801017e:	d101      	bne.n	8010184 <PCD_EP_ISR_Handler+0xb8>
 8010180:	f000 fb96 	bl	80108b0 <PCD_EP_ISR_Handler+0x7e4>
 8010184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <PCD_EP_ISR_Handler+0xc4>
 801018c:	f000 fb90 	bl	80108b0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2224      	movs	r2, #36	@ 0x24
 8010194:	5c9b      	ldrb	r3, [r3, r2]
 8010196:	b2db      	uxtb	r3, r3
 8010198:	2280      	movs	r2, #128	@ 0x80
 801019a:	4252      	negs	r2, r2
 801019c:	4313      	orrs	r3, r2
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	0011      	movs	r1, r2
 80101a6:	224c      	movs	r2, #76	@ 0x4c
 80101a8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2224      	movs	r2, #36	@ 0x24
 80101ae:	2100      	movs	r1, #0
 80101b0:	5499      	strb	r1, [r3, r2]
 80101b2:	f000 fb7d 	bl	80108b0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3369      	adds	r3, #105	@ 0x69
 80101ba:	33ff      	adds	r3, #255	@ 0xff
 80101bc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	214a      	movs	r1, #74	@ 0x4a
 80101c4:	187b      	adds	r3, r7, r1
 80101c6:	8812      	ldrh	r2, [r2, #0]
 80101c8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80101ca:	187b      	adds	r3, r7, r1
 80101cc:	881a      	ldrh	r2, [r3, #0]
 80101ce:	2380      	movs	r3, #128	@ 0x80
 80101d0:	011b      	lsls	r3, r3, #4
 80101d2:	4013      	ands	r3, r2
 80101d4:	d037      	beq.n	8010246 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2250      	movs	r2, #80	@ 0x50
 80101dc:	5a9b      	ldrh	r3, [r3, r2]
 80101de:	b29b      	uxth	r3, r3
 80101e0:	001a      	movs	r2, r3
 80101e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	00db      	lsls	r3, r3, #3
 80101e8:	18d2      	adds	r2, r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	18d3      	adds	r3, r2, r3
 80101f0:	4a87      	ldr	r2, [pc, #540]	@ (8010410 <PCD_EP_ISR_Handler+0x344>)
 80101f2:	4694      	mov	ip, r2
 80101f4:	4463      	add	r3, ip
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	059b      	lsls	r3, r3, #22
 80101fa:	0d9a      	lsrs	r2, r3, #22
 80101fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101fe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6818      	ldr	r0, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	22ac      	movs	r2, #172	@ 0xac
 8010208:	0092      	lsls	r2, r2, #2
 801020a:	1899      	adds	r1, r3, r2
 801020c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801020e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8010210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010212:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010214:	b29b      	uxth	r3, r3
 8010216:	f006 fdd8 	bl	8016dca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	b29a      	uxth	r2, r3
 8010222:	2010      	movs	r0, #16
 8010224:	183b      	adds	r3, r7, r0
 8010226:	497b      	ldr	r1, [pc, #492]	@ (8010414 <PCD_EP_ISR_Handler+0x348>)
 8010228:	400a      	ands	r2, r1
 801022a:	801a      	strh	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	183a      	adds	r2, r7, r0
 8010232:	8812      	ldrh	r2, [r2, #0]
 8010234:	2180      	movs	r1, #128	@ 0x80
 8010236:	430a      	orrs	r2, r1
 8010238:	b292      	uxth	r2, r2
 801023a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	0018      	movs	r0, r3
 8010240:	f008 fdc8 	bl	8018dd4 <HAL_PCD_SetupStageCallback>
 8010244:	e334      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8010246:	234a      	movs	r3, #74	@ 0x4a
 8010248:	18fb      	adds	r3, r7, r3
 801024a:	2200      	movs	r2, #0
 801024c:	5e9b      	ldrsh	r3, [r3, r2]
 801024e:	2b00      	cmp	r3, #0
 8010250:	db00      	blt.n	8010254 <PCD_EP_ISR_Handler+0x188>
 8010252:	e32d      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	b29a      	uxth	r2, r3
 801025c:	201e      	movs	r0, #30
 801025e:	183b      	adds	r3, r7, r0
 8010260:	496c      	ldr	r1, [pc, #432]	@ (8010414 <PCD_EP_ISR_Handler+0x348>)
 8010262:	400a      	ands	r2, r1
 8010264:	801a      	strh	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	183a      	adds	r2, r7, r0
 801026c:	8812      	ldrh	r2, [r2, #0]
 801026e:	2180      	movs	r1, #128	@ 0x80
 8010270:	430a      	orrs	r2, r1
 8010272:	b292      	uxth	r2, r2
 8010274:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2250      	movs	r2, #80	@ 0x50
 801027c:	5a9b      	ldrh	r3, [r3, r2]
 801027e:	b29b      	uxth	r3, r3
 8010280:	001a      	movs	r2, r3
 8010282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	00db      	lsls	r3, r3, #3
 8010288:	18d2      	adds	r2, r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	18d3      	adds	r3, r2, r3
 8010290:	4a5f      	ldr	r2, [pc, #380]	@ (8010410 <PCD_EP_ISR_Handler+0x344>)
 8010292:	4694      	mov	ip, r2
 8010294:	4463      	add	r3, ip
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	059b      	lsls	r3, r3, #22
 801029a:	0d9a      	lsrs	r2, r3, #22
 801029c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801029e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80102a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102a2:	69db      	ldr	r3, [r3, #28]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d01a      	beq.n	80102de <PCD_EP_ISR_Handler+0x212>
 80102a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d016      	beq.n	80102de <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6818      	ldr	r0, [r3, #0]
 80102b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102b6:	6959      	ldr	r1, [r3, #20]
 80102b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80102bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	f006 fd82 	bl	8016dca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80102c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102c8:	695a      	ldr	r2, [r3, #20]
 80102ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102cc:	69db      	ldr	r3, [r3, #28]
 80102ce:	18d2      	adds	r2, r2, r3
 80102d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2100      	movs	r1, #0
 80102d8:	0018      	movs	r0, r3
 80102da:	f008 fd90 	bl	8018dfe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	214a      	movs	r1, #74	@ 0x4a
 80102e4:	187b      	adds	r3, r7, r1
 80102e6:	8812      	ldrh	r2, [r2, #0]
 80102e8:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80102ea:	187b      	adds	r3, r7, r1
 80102ec:	881a      	ldrh	r2, [r3, #0]
 80102ee:	2380      	movs	r3, #128	@ 0x80
 80102f0:	011b      	lsls	r3, r3, #4
 80102f2:	4013      	ands	r3, r2
 80102f4:	d000      	beq.n	80102f8 <PCD_EP_ISR_Handler+0x22c>
 80102f6:	e2db      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
 80102f8:	187b      	adds	r3, r7, r1
 80102fa:	881a      	ldrh	r2, [r3, #0]
 80102fc:	23c0      	movs	r3, #192	@ 0xc0
 80102fe:	019b      	lsls	r3, r3, #6
 8010300:	401a      	ands	r2, r3
 8010302:	23c0      	movs	r3, #192	@ 0xc0
 8010304:	019b      	lsls	r3, r3, #6
 8010306:	429a      	cmp	r2, r3
 8010308:	d100      	bne.n	801030c <PCD_EP_ISR_Handler+0x240>
 801030a:	e2d1      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	61bb      	str	r3, [r7, #24]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2250      	movs	r2, #80	@ 0x50
 8010318:	5a9b      	ldrh	r3, [r3, r2]
 801031a:	b29b      	uxth	r3, r3
 801031c:	001a      	movs	r2, r3
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	189b      	adds	r3, r3, r2
 8010322:	61bb      	str	r3, [r7, #24]
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	4a3a      	ldr	r2, [pc, #232]	@ (8010410 <PCD_EP_ISR_Handler+0x344>)
 8010328:	4694      	mov	ip, r2
 801032a:	4463      	add	r3, ip
 801032c:	617b      	str	r3, [r7, #20]
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	b29b      	uxth	r3, r3
 8010334:	059b      	lsls	r3, r3, #22
 8010336:	0d9b      	lsrs	r3, r3, #22
 8010338:	b29a      	uxth	r2, r3
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	801a      	strh	r2, [r3, #0]
 801033e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	2b3e      	cmp	r3, #62	@ 0x3e
 8010344:	d91a      	bls.n	801037c <PCD_EP_ISR_Handler+0x2b0>
 8010346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	095b      	lsrs	r3, r3, #5
 801034c:	647b      	str	r3, [r7, #68]	@ 0x44
 801034e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010350:	691b      	ldr	r3, [r3, #16]
 8010352:	221f      	movs	r2, #31
 8010354:	4013      	ands	r3, r2
 8010356:	d102      	bne.n	801035e <PCD_EP_ISR_Handler+0x292>
 8010358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801035a:	3b01      	subs	r3, #1
 801035c:	647b      	str	r3, [r7, #68]	@ 0x44
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	b29a      	uxth	r2, r3
 8010364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010366:	b29b      	uxth	r3, r3
 8010368:	029b      	lsls	r3, r3, #10
 801036a:	b29b      	uxth	r3, r3
 801036c:	4313      	orrs	r3, r2
 801036e:	b29b      	uxth	r3, r3
 8010370:	4a25      	ldr	r2, [pc, #148]	@ (8010408 <PCD_EP_ISR_Handler+0x33c>)
 8010372:	4313      	orrs	r3, r2
 8010374:	b29a      	uxth	r2, r3
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	801a      	strh	r2, [r3, #0]
 801037a:	e023      	b.n	80103c4 <PCD_EP_ISR_Handler+0x2f8>
 801037c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d108      	bne.n	8010396 <PCD_EP_ISR_Handler+0x2ca>
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	881b      	ldrh	r3, [r3, #0]
 8010388:	b29b      	uxth	r3, r3
 801038a:	4a1f      	ldr	r2, [pc, #124]	@ (8010408 <PCD_EP_ISR_Handler+0x33c>)
 801038c:	4313      	orrs	r3, r2
 801038e:	b29a      	uxth	r2, r3
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	801a      	strh	r2, [r3, #0]
 8010394:	e016      	b.n	80103c4 <PCD_EP_ISR_Handler+0x2f8>
 8010396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	085b      	lsrs	r3, r3, #1
 801039c:	647b      	str	r3, [r7, #68]	@ 0x44
 801039e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	2201      	movs	r2, #1
 80103a4:	4013      	ands	r3, r2
 80103a6:	d002      	beq.n	80103ae <PCD_EP_ISR_Handler+0x2e2>
 80103a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80103aa:	3301      	adds	r3, #1
 80103ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	881b      	ldrh	r3, [r3, #0]
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	029b      	lsls	r3, r3, #10
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	4313      	orrs	r3, r2
 80103be:	b29a      	uxth	r2, r3
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	881b      	ldrh	r3, [r3, #0]
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	2012      	movs	r0, #18
 80103ce:	183b      	adds	r3, r7, r0
 80103d0:	4911      	ldr	r1, [pc, #68]	@ (8010418 <PCD_EP_ISR_Handler+0x34c>)
 80103d2:	400a      	ands	r2, r1
 80103d4:	801a      	strh	r2, [r3, #0]
 80103d6:	183b      	adds	r3, r7, r0
 80103d8:	183a      	adds	r2, r7, r0
 80103da:	8812      	ldrh	r2, [r2, #0]
 80103dc:	2180      	movs	r1, #128	@ 0x80
 80103de:	0149      	lsls	r1, r1, #5
 80103e0:	404a      	eors	r2, r1
 80103e2:	801a      	strh	r2, [r3, #0]
 80103e4:	183b      	adds	r3, r7, r0
 80103e6:	183a      	adds	r2, r7, r0
 80103e8:	8812      	ldrh	r2, [r2, #0]
 80103ea:	2180      	movs	r1, #128	@ 0x80
 80103ec:	0189      	lsls	r1, r1, #6
 80103ee:	404a      	eors	r2, r1
 80103f0:	801a      	strh	r2, [r3, #0]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	183a      	adds	r2, r7, r0
 80103f8:	8812      	ldrh	r2, [r2, #0]
 80103fa:	4908      	ldr	r1, [pc, #32]	@ (801041c <PCD_EP_ISR_Handler+0x350>)
 80103fc:	430a      	orrs	r2, r1
 80103fe:	b292      	uxth	r2, r2
 8010400:	801a      	strh	r2, [r3, #0]
 8010402:	e255      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
 8010404:	ffff8f0f 	.word	0xffff8f0f
 8010408:	ffff8000 	.word	0xffff8000
 801040c:	00000402 	.word	0x00000402
 8010410:	00000406 	.word	0x00000406
 8010414:	00000f8f 	.word	0x00000f8f
 8010418:	ffffbf8f 	.word	0xffffbf8f
 801041c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	001a      	movs	r2, r3
 8010426:	204d      	movs	r0, #77	@ 0x4d
 8010428:	183b      	adds	r3, r7, r0
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	18d2      	adds	r2, r2, r3
 8010430:	214a      	movs	r1, #74	@ 0x4a
 8010432:	187b      	adds	r3, r7, r1
 8010434:	8812      	ldrh	r2, [r2, #0]
 8010436:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8010438:	187b      	adds	r3, r7, r1
 801043a:	2200      	movs	r2, #0
 801043c:	5e9b      	ldrsh	r3, [r3, r2]
 801043e:	2b00      	cmp	r3, #0
 8010440:	db00      	blt.n	8010444 <PCD_EP_ISR_Handler+0x378>
 8010442:	e0fa      	b.n	801063a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	001a      	movs	r2, r3
 801044a:	183b      	adds	r3, r7, r0
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	18d3      	adds	r3, r2, r3
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	b29a      	uxth	r2, r3
 8010456:	2448      	movs	r4, #72	@ 0x48
 8010458:	193b      	adds	r3, r7, r4
 801045a:	49d1      	ldr	r1, [pc, #836]	@ (80107a0 <PCD_EP_ISR_Handler+0x6d4>)
 801045c:	400a      	ands	r2, r1
 801045e:	801a      	strh	r2, [r3, #0]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	001a      	movs	r2, r3
 8010466:	183b      	adds	r3, r7, r0
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	18d3      	adds	r3, r2, r3
 801046e:	193a      	adds	r2, r7, r4
 8010470:	8812      	ldrh	r2, [r2, #0]
 8010472:	2180      	movs	r1, #128	@ 0x80
 8010474:	430a      	orrs	r2, r1
 8010476:	b292      	uxth	r2, r2
 8010478:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801047a:	183b      	adds	r3, r7, r0
 801047c:	781a      	ldrb	r2, [r3, #0]
 801047e:	0013      	movs	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	189b      	adds	r3, r3, r2
 8010484:	00db      	lsls	r3, r3, #3
 8010486:	3369      	adds	r3, #105	@ 0x69
 8010488:	33ff      	adds	r3, #255	@ 0xff
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	18d3      	adds	r3, r2, r3
 801048e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8010490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010492:	7b1b      	ldrb	r3, [r3, #12]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d125      	bne.n	80104e4 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2250      	movs	r2, #80	@ 0x50
 801049e:	5a9b      	ldrh	r3, [r3, r2]
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	001a      	movs	r2, r3
 80104a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	18d2      	adds	r2, r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	18d3      	adds	r3, r2, r3
 80104b2:	4abc      	ldr	r2, [pc, #752]	@ (80107a4 <PCD_EP_ISR_Handler+0x6d8>)
 80104b4:	4694      	mov	ip, r2
 80104b6:	4463      	add	r3, ip
 80104b8:	881a      	ldrh	r2, [r3, #0]
 80104ba:	2450      	movs	r4, #80	@ 0x50
 80104bc:	193b      	adds	r3, r7, r4
 80104be:	0592      	lsls	r2, r2, #22
 80104c0:	0d92      	lsrs	r2, r2, #22
 80104c2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80104c4:	193b      	adds	r3, r7, r4
 80104c6:	881b      	ldrh	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d100      	bne.n	80104ce <PCD_EP_ISR_Handler+0x402>
 80104cc:	e08d      	b.n	80105ea <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6818      	ldr	r0, [r3, #0]
 80104d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104d4:	6959      	ldr	r1, [r3, #20]
 80104d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104d8:	88da      	ldrh	r2, [r3, #6]
 80104da:	193b      	adds	r3, r7, r4
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	f006 fc74 	bl	8016dca <USB_ReadPMA>
 80104e2:	e082      	b.n	80105ea <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80104e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104e6:	78db      	ldrb	r3, [r3, #3]
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	d10c      	bne.n	8010506 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80104ec:	2350      	movs	r3, #80	@ 0x50
 80104ee:	18fc      	adds	r4, r7, r3
 80104f0:	234a      	movs	r3, #74	@ 0x4a
 80104f2:	18fb      	adds	r3, r7, r3
 80104f4:	881a      	ldrh	r2, [r3, #0]
 80104f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	0018      	movs	r0, r3
 80104fc:	f000 f9ec 	bl	80108d8 <HAL_PCD_EP_DB_Receive>
 8010500:	0003      	movs	r3, r0
 8010502:	8023      	strh	r3, [r4, #0]
 8010504:	e071      	b.n	80105ea <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	001a      	movs	r2, r3
 801050c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	18d3      	adds	r3, r2, r3
 8010514:	881b      	ldrh	r3, [r3, #0]
 8010516:	b29a      	uxth	r2, r3
 8010518:	2052      	movs	r0, #82	@ 0x52
 801051a:	183b      	adds	r3, r7, r0
 801051c:	49a2      	ldr	r1, [pc, #648]	@ (80107a8 <PCD_EP_ISR_Handler+0x6dc>)
 801051e:	400a      	ands	r2, r1
 8010520:	801a      	strh	r2, [r3, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	001a      	movs	r2, r3
 8010528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	18d3      	adds	r3, r2, r3
 8010530:	183a      	adds	r2, r7, r0
 8010532:	8812      	ldrh	r2, [r2, #0]
 8010534:	499d      	ldr	r1, [pc, #628]	@ (80107ac <PCD_EP_ISR_Handler+0x6e0>)
 8010536:	430a      	orrs	r2, r1
 8010538:	b292      	uxth	r2, r2
 801053a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	001a      	movs	r2, r3
 8010542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	18d3      	adds	r3, r2, r3
 801054a:	881b      	ldrh	r3, [r3, #0]
 801054c:	b29b      	uxth	r3, r3
 801054e:	001a      	movs	r2, r3
 8010550:	2380      	movs	r3, #128	@ 0x80
 8010552:	01db      	lsls	r3, r3, #7
 8010554:	4013      	ands	r3, r2
 8010556:	d024      	beq.n	80105a2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2250      	movs	r2, #80	@ 0x50
 801055e:	5a9b      	ldrh	r3, [r3, r2]
 8010560:	b29b      	uxth	r3, r3
 8010562:	001a      	movs	r2, r3
 8010564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	00db      	lsls	r3, r3, #3
 801056a:	18d2      	adds	r2, r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	18d3      	adds	r3, r2, r3
 8010572:	4a8f      	ldr	r2, [pc, #572]	@ (80107b0 <PCD_EP_ISR_Handler+0x6e4>)
 8010574:	4694      	mov	ip, r2
 8010576:	4463      	add	r3, ip
 8010578:	881a      	ldrh	r2, [r3, #0]
 801057a:	2450      	movs	r4, #80	@ 0x50
 801057c:	193b      	adds	r3, r7, r4
 801057e:	0592      	lsls	r2, r2, #22
 8010580:	0d92      	lsrs	r2, r2, #22
 8010582:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8010584:	193b      	adds	r3, r7, r4
 8010586:	881b      	ldrh	r3, [r3, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d02e      	beq.n	80105ea <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6818      	ldr	r0, [r3, #0]
 8010590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010592:	6959      	ldr	r1, [r3, #20]
 8010594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010596:	891a      	ldrh	r2, [r3, #8]
 8010598:	193b      	adds	r3, r7, r4
 801059a:	881b      	ldrh	r3, [r3, #0]
 801059c:	f006 fc15 	bl	8016dca <USB_ReadPMA>
 80105a0:	e023      	b.n	80105ea <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	2250      	movs	r2, #80	@ 0x50
 80105a8:	5a9b      	ldrh	r3, [r3, r2]
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	001a      	movs	r2, r3
 80105ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	00db      	lsls	r3, r3, #3
 80105b4:	18d2      	adds	r2, r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	18d3      	adds	r3, r2, r3
 80105bc:	4a79      	ldr	r2, [pc, #484]	@ (80107a4 <PCD_EP_ISR_Handler+0x6d8>)
 80105be:	4694      	mov	ip, r2
 80105c0:	4463      	add	r3, ip
 80105c2:	881a      	ldrh	r2, [r3, #0]
 80105c4:	2450      	movs	r4, #80	@ 0x50
 80105c6:	193b      	adds	r3, r7, r4
 80105c8:	0592      	lsls	r2, r2, #22
 80105ca:	0d92      	lsrs	r2, r2, #22
 80105cc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80105ce:	193b      	adds	r3, r7, r4
 80105d0:	881b      	ldrh	r3, [r3, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d009      	beq.n	80105ea <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6818      	ldr	r0, [r3, #0]
 80105da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105dc:	6959      	ldr	r1, [r3, #20]
 80105de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105e0:	895a      	ldrh	r2, [r3, #10]
 80105e2:	193b      	adds	r3, r7, r4
 80105e4:	881b      	ldrh	r3, [r3, #0]
 80105e6:	f006 fbf0 	bl	8016dca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80105ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105ec:	69da      	ldr	r2, [r3, #28]
 80105ee:	2150      	movs	r1, #80	@ 0x50
 80105f0:	187b      	adds	r3, r7, r1
 80105f2:	881b      	ldrh	r3, [r3, #0]
 80105f4:	18d2      	adds	r2, r2, r3
 80105f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80105fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105fc:	695a      	ldr	r2, [r3, #20]
 80105fe:	187b      	adds	r3, r7, r1
 8010600:	881b      	ldrh	r3, [r3, #0]
 8010602:	18d2      	adds	r2, r2, r3
 8010604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010606:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8010608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d005      	beq.n	801061c <PCD_EP_ISR_Handler+0x550>
 8010610:	187b      	adds	r3, r7, r1
 8010612:	881a      	ldrh	r2, [r3, #0]
 8010614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010616:	691b      	ldr	r3, [r3, #16]
 8010618:	429a      	cmp	r2, r3
 801061a:	d207      	bcs.n	801062c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801061c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801061e:	781a      	ldrb	r2, [r3, #0]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	0011      	movs	r1, r2
 8010624:	0018      	movs	r0, r3
 8010626:	f008 fbea 	bl	8018dfe <HAL_PCD_DataOutStageCallback>
 801062a:	e006      	b.n	801063a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010632:	0011      	movs	r1, r2
 8010634:	0018      	movs	r0, r3
 8010636:	f005 f90d 	bl	8015854 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801063a:	244a      	movs	r4, #74	@ 0x4a
 801063c:	193b      	adds	r3, r7, r4
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	2280      	movs	r2, #128	@ 0x80
 8010642:	4013      	ands	r3, r2
 8010644:	d100      	bne.n	8010648 <PCD_EP_ISR_Handler+0x57c>
 8010646:	e133      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8010648:	204d      	movs	r0, #77	@ 0x4d
 801064a:	183b      	adds	r3, r7, r0
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	0013      	movs	r3, r2
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	189b      	adds	r3, r3, r2
 8010656:	00db      	lsls	r3, r3, #3
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	18d3      	adds	r3, r2, r3
 801065c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	001a      	movs	r2, r3
 8010664:	183b      	adds	r3, r7, r0
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	18d3      	adds	r3, r2, r3
 801066c:	881b      	ldrh	r3, [r3, #0]
 801066e:	b29a      	uxth	r2, r3
 8010670:	2542      	movs	r5, #66	@ 0x42
 8010672:	197b      	adds	r3, r7, r5
 8010674:	494f      	ldr	r1, [pc, #316]	@ (80107b4 <PCD_EP_ISR_Handler+0x6e8>)
 8010676:	400a      	ands	r2, r1
 8010678:	801a      	strh	r2, [r3, #0]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	001a      	movs	r2, r3
 8010680:	183b      	adds	r3, r7, r0
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	18d3      	adds	r3, r2, r3
 8010688:	197a      	adds	r2, r7, r5
 801068a:	8812      	ldrh	r2, [r2, #0]
 801068c:	494a      	ldr	r1, [pc, #296]	@ (80107b8 <PCD_EP_ISR_Handler+0x6ec>)
 801068e:	430a      	orrs	r2, r1
 8010690:	b292      	uxth	r2, r2
 8010692:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8010694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010696:	78db      	ldrb	r3, [r3, #3]
 8010698:	2b01      	cmp	r3, #1
 801069a:	d000      	beq.n	801069e <PCD_EP_ISR_Handler+0x5d2>
 801069c:	e0af      	b.n	80107fe <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801069e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106a0:	2200      	movs	r2, #0
 80106a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80106a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106a6:	7b1b      	ldrb	r3, [r3, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d100      	bne.n	80106ae <PCD_EP_ISR_Handler+0x5e2>
 80106ac:	e09f      	b.n	80107ee <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80106ae:	193b      	adds	r3, r7, r4
 80106b0:	881b      	ldrh	r3, [r3, #0]
 80106b2:	2240      	movs	r2, #64	@ 0x40
 80106b4:	4013      	ands	r3, r2
 80106b6:	d046      	beq.n	8010746 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80106b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106ba:	785b      	ldrb	r3, [r3, #1]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d125      	bne.n	801070c <PCD_EP_ISR_Handler+0x640>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	2250      	movs	r2, #80	@ 0x50
 80106cc:	5a9b      	ldrh	r3, [r3, r2]
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	001a      	movs	r2, r3
 80106d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d4:	189b      	adds	r3, r3, r2
 80106d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80106d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	00da      	lsls	r2, r3, #3
 80106de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e0:	18d3      	adds	r3, r2, r3
 80106e2:	4a33      	ldr	r2, [pc, #204]	@ (80107b0 <PCD_EP_ISR_Handler+0x6e4>)
 80106e4:	4694      	mov	ip, r2
 80106e6:	4463      	add	r3, ip
 80106e8:	623b      	str	r3, [r7, #32]
 80106ea:	6a3b      	ldr	r3, [r7, #32]
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	059b      	lsls	r3, r3, #22
 80106f2:	0d9b      	lsrs	r3, r3, #22
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	801a      	strh	r2, [r3, #0]
 80106fa:	6a3b      	ldr	r3, [r7, #32]
 80106fc:	881b      	ldrh	r3, [r3, #0]
 80106fe:	b29b      	uxth	r3, r3
 8010700:	4a2d      	ldr	r2, [pc, #180]	@ (80107b8 <PCD_EP_ISR_Handler+0x6ec>)
 8010702:	4313      	orrs	r3, r2
 8010704:	b29a      	uxth	r2, r3
 8010706:	6a3b      	ldr	r3, [r7, #32]
 8010708:	801a      	strh	r2, [r3, #0]
 801070a:	e070      	b.n	80107ee <PCD_EP_ISR_Handler+0x722>
 801070c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801070e:	785b      	ldrb	r3, [r3, #1]
 8010710:	2b01      	cmp	r3, #1
 8010712:	d16c      	bne.n	80107ee <PCD_EP_ISR_Handler+0x722>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2250      	movs	r2, #80	@ 0x50
 8010720:	5a9b      	ldrh	r3, [r3, r2]
 8010722:	b29b      	uxth	r3, r3
 8010724:	001a      	movs	r2, r3
 8010726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010728:	189b      	adds	r3, r3, r2
 801072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801072c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	00da      	lsls	r2, r3, #3
 8010732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010734:	18d3      	adds	r3, r2, r3
 8010736:	4a1e      	ldr	r2, [pc, #120]	@ (80107b0 <PCD_EP_ISR_Handler+0x6e4>)
 8010738:	4694      	mov	ip, r2
 801073a:	4463      	add	r3, ip
 801073c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801073e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010740:	2200      	movs	r2, #0
 8010742:	801a      	strh	r2, [r3, #0]
 8010744:	e053      	b.n	80107ee <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801074c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801074e:	785b      	ldrb	r3, [r3, #1]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d133      	bne.n	80107bc <PCD_EP_ISR_Handler+0x6f0>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	637b      	str	r3, [r7, #52]	@ 0x34
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2250      	movs	r2, #80	@ 0x50
 8010760:	5a9b      	ldrh	r3, [r3, r2]
 8010762:	b29b      	uxth	r3, r3
 8010764:	001a      	movs	r2, r3
 8010766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010768:	189b      	adds	r3, r3, r2
 801076a:	637b      	str	r3, [r7, #52]	@ 0x34
 801076c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	00da      	lsls	r2, r3, #3
 8010772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010774:	18d3      	adds	r3, r2, r3
 8010776:	4a0b      	ldr	r2, [pc, #44]	@ (80107a4 <PCD_EP_ISR_Handler+0x6d8>)
 8010778:	4694      	mov	ip, r2
 801077a:	4463      	add	r3, ip
 801077c:	633b      	str	r3, [r7, #48]	@ 0x30
 801077e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	b29b      	uxth	r3, r3
 8010784:	059b      	lsls	r3, r3, #22
 8010786:	0d9b      	lsrs	r3, r3, #22
 8010788:	b29a      	uxth	r2, r3
 801078a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801078c:	801a      	strh	r2, [r3, #0]
 801078e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010790:	881b      	ldrh	r3, [r3, #0]
 8010792:	b29b      	uxth	r3, r3
 8010794:	4a08      	ldr	r2, [pc, #32]	@ (80107b8 <PCD_EP_ISR_Handler+0x6ec>)
 8010796:	4313      	orrs	r3, r2
 8010798:	b29a      	uxth	r2, r3
 801079a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801079c:	801a      	strh	r2, [r3, #0]
 801079e:	e026      	b.n	80107ee <PCD_EP_ISR_Handler+0x722>
 80107a0:	00000f8f 	.word	0x00000f8f
 80107a4:	00000406 	.word	0x00000406
 80107a8:	ffff8f8f 	.word	0xffff8f8f
 80107ac:	ffff80c0 	.word	0xffff80c0
 80107b0:	00000402 	.word	0x00000402
 80107b4:	ffff8f0f 	.word	0xffff8f0f
 80107b8:	ffff8000 	.word	0xffff8000
 80107bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107be:	785b      	ldrb	r3, [r3, #1]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d114      	bne.n	80107ee <PCD_EP_ISR_Handler+0x722>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2250      	movs	r2, #80	@ 0x50
 80107ca:	5a9b      	ldrh	r3, [r3, r2]
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	001a      	movs	r2, r3
 80107d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107d2:	189b      	adds	r3, r3, r2
 80107d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80107d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	00da      	lsls	r2, r3, #3
 80107dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107de:	18d3      	adds	r3, r2, r3
 80107e0:	4a3b      	ldr	r2, [pc, #236]	@ (80108d0 <PCD_EP_ISR_Handler+0x804>)
 80107e2:	4694      	mov	ip, r2
 80107e4:	4463      	add	r3, ip
 80107e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80107e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ea:	2200      	movs	r2, #0
 80107ec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80107ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107f0:	781a      	ldrb	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	0011      	movs	r1, r2
 80107f6:	0018      	movs	r0, r3
 80107f8:	f008 fb22 	bl	8018e40 <HAL_PCD_DataInStageCallback>
 80107fc:	e058      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80107fe:	234a      	movs	r3, #74	@ 0x4a
 8010800:	18fb      	adds	r3, r7, r3
 8010802:	881a      	ldrh	r2, [r3, #0]
 8010804:	2380      	movs	r3, #128	@ 0x80
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	4013      	ands	r3, r2
 801080a:	d149      	bne.n	80108a0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2250      	movs	r2, #80	@ 0x50
 8010812:	5a9b      	ldrh	r3, [r3, r2]
 8010814:	b29b      	uxth	r3, r3
 8010816:	001a      	movs	r2, r3
 8010818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	18d2      	adds	r2, r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	18d3      	adds	r3, r2, r3
 8010826:	4a2b      	ldr	r2, [pc, #172]	@ (80108d4 <PCD_EP_ISR_Handler+0x808>)
 8010828:	4694      	mov	ip, r2
 801082a:	4463      	add	r3, ip
 801082c:	881a      	ldrh	r2, [r3, #0]
 801082e:	2140      	movs	r1, #64	@ 0x40
 8010830:	187b      	adds	r3, r7, r1
 8010832:	0592      	lsls	r2, r2, #22
 8010834:	0d92      	lsrs	r2, r2, #22
 8010836:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8010838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801083a:	699a      	ldr	r2, [r3, #24]
 801083c:	187b      	adds	r3, r7, r1
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	429a      	cmp	r2, r3
 8010842:	d907      	bls.n	8010854 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8010844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010846:	699a      	ldr	r2, [r3, #24]
 8010848:	187b      	adds	r3, r7, r1
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	1ad2      	subs	r2, r2, r3
 801084e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010850:	619a      	str	r2, [r3, #24]
 8010852:	e002      	b.n	801085a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8010854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010856:	2200      	movs	r2, #0
 8010858:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801085a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801085c:	699b      	ldr	r3, [r3, #24]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d107      	bne.n	8010872 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010864:	781a      	ldrb	r2, [r3, #0]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	0011      	movs	r1, r2
 801086a:	0018      	movs	r0, r3
 801086c:	f008 fae8 	bl	8018e40 <HAL_PCD_DataInStageCallback>
 8010870:	e01e      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8010872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010874:	695a      	ldr	r2, [r3, #20]
 8010876:	2140      	movs	r1, #64	@ 0x40
 8010878:	187b      	adds	r3, r7, r1
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	18d2      	adds	r2, r2, r3
 801087e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010880:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8010882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010884:	69da      	ldr	r2, [r3, #28]
 8010886:	187b      	adds	r3, r7, r1
 8010888:	881b      	ldrh	r3, [r3, #0]
 801088a:	18d2      	adds	r2, r2, r3
 801088c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801088e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010896:	0011      	movs	r1, r2
 8010898:	0018      	movs	r0, r3
 801089a:	f004 ffdb 	bl	8015854 <USB_EPStartXfer>
 801089e:	e007      	b.n	80108b0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80108a0:	234a      	movs	r3, #74	@ 0x4a
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	881a      	ldrh	r2, [r3, #0]
 80108a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	0018      	movs	r0, r3
 80108ac:	f000 f930 	bl	8010b10 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2244      	movs	r2, #68	@ 0x44
 80108b6:	5a9b      	ldrh	r3, [r3, r2]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	b21b      	sxth	r3, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	da01      	bge.n	80108c4 <PCD_EP_ISR_Handler+0x7f8>
 80108c0:	f7ff fc0a 	bl	80100d8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	0018      	movs	r0, r3
 80108c8:	46bd      	mov	sp, r7
 80108ca:	b016      	add	sp, #88	@ 0x58
 80108cc:	bdb0      	pop	{r4, r5, r7, pc}
 80108ce:	46c0      	nop			@ (mov r8, r8)
 80108d0:	00000406 	.word	0x00000406
 80108d4:	00000402 	.word	0x00000402

080108d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80108d8:	b590      	push	{r4, r7, lr}
 80108da:	b089      	sub	sp, #36	@ 0x24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	1dbb      	adds	r3, r7, #6
 80108e4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80108e6:	1dbb      	adds	r3, r7, #6
 80108e8:	881a      	ldrh	r2, [r3, #0]
 80108ea:	2380      	movs	r3, #128	@ 0x80
 80108ec:	01db      	lsls	r3, r3, #7
 80108ee:	4013      	ands	r3, r2
 80108f0:	d100      	bne.n	80108f4 <HAL_PCD_EP_DB_Receive+0x1c>
 80108f2:	e07d      	b.n	80109f0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2250      	movs	r2, #80	@ 0x50
 80108fa:	5a9b      	ldrh	r3, [r3, r2]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	001a      	movs	r2, r3
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	00db      	lsls	r3, r3, #3
 8010906:	18d2      	adds	r2, r2, r3
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	18d3      	adds	r3, r2, r3
 801090e:	4a7a      	ldr	r2, [pc, #488]	@ (8010af8 <HAL_PCD_EP_DB_Receive+0x220>)
 8010910:	4694      	mov	ip, r2
 8010912:	4463      	add	r3, ip
 8010914:	881a      	ldrh	r2, [r3, #0]
 8010916:	211a      	movs	r1, #26
 8010918:	187b      	adds	r3, r7, r1
 801091a:	0592      	lsls	r2, r2, #22
 801091c:	0d92      	lsrs	r2, r2, #22
 801091e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	699a      	ldr	r2, [r3, #24]
 8010924:	187b      	adds	r3, r7, r1
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	429a      	cmp	r2, r3
 801092a:	d307      	bcc.n	801093c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	699a      	ldr	r2, [r3, #24]
 8010930:	187b      	adds	r3, r7, r1
 8010932:	881b      	ldrh	r3, [r3, #0]
 8010934:	1ad2      	subs	r2, r2, r3
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	619a      	str	r2, [r3, #24]
 801093a:	e002      	b.n	8010942 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	2200      	movs	r2, #0
 8010940:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d121      	bne.n	801098e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	001a      	movs	r2, r3
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	18d3      	adds	r3, r2, r3
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	b29a      	uxth	r2, r3
 801095c:	2018      	movs	r0, #24
 801095e:	183b      	adds	r3, r7, r0
 8010960:	4966      	ldr	r1, [pc, #408]	@ (8010afc <HAL_PCD_EP_DB_Receive+0x224>)
 8010962:	400a      	ands	r2, r1
 8010964:	801a      	strh	r2, [r3, #0]
 8010966:	183b      	adds	r3, r7, r0
 8010968:	183a      	adds	r2, r7, r0
 801096a:	8812      	ldrh	r2, [r2, #0]
 801096c:	2180      	movs	r1, #128	@ 0x80
 801096e:	0189      	lsls	r1, r1, #6
 8010970:	404a      	eors	r2, r1
 8010972:	801a      	strh	r2, [r3, #0]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	001a      	movs	r2, r3
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	18d3      	adds	r3, r2, r3
 8010982:	183a      	adds	r2, r7, r0
 8010984:	8812      	ldrh	r2, [r2, #0]
 8010986:	495e      	ldr	r1, [pc, #376]	@ (8010b00 <HAL_PCD_EP_DB_Receive+0x228>)
 8010988:	430a      	orrs	r2, r1
 801098a:	b292      	uxth	r2, r2
 801098c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801098e:	1dbb      	adds	r3, r7, #6
 8010990:	881b      	ldrh	r3, [r3, #0]
 8010992:	2240      	movs	r2, #64	@ 0x40
 8010994:	4013      	ands	r3, r2
 8010996:	d01a      	beq.n	80109ce <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	001a      	movs	r2, r3
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	18d3      	adds	r3, r2, r3
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	2016      	movs	r0, #22
 80109ac:	183b      	adds	r3, r7, r0
 80109ae:	4955      	ldr	r1, [pc, #340]	@ (8010b04 <HAL_PCD_EP_DB_Receive+0x22c>)
 80109b0:	400a      	ands	r2, r1
 80109b2:	801a      	strh	r2, [r3, #0]
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	001a      	movs	r2, r3
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	18d3      	adds	r3, r2, r3
 80109c2:	183a      	adds	r2, r7, r0
 80109c4:	8812      	ldrh	r2, [r2, #0]
 80109c6:	4950      	ldr	r1, [pc, #320]	@ (8010b08 <HAL_PCD_EP_DB_Receive+0x230>)
 80109c8:	430a      	orrs	r2, r1
 80109ca:	b292      	uxth	r2, r2
 80109cc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80109ce:	241a      	movs	r4, #26
 80109d0:	193b      	adds	r3, r7, r4
 80109d2:	881b      	ldrh	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d100      	bne.n	80109da <HAL_PCD_EP_DB_Receive+0x102>
 80109d8:	e086      	b.n	8010ae8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6818      	ldr	r0, [r3, #0]
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	6959      	ldr	r1, [r3, #20]
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	891a      	ldrh	r2, [r3, #8]
 80109e6:	193b      	adds	r3, r7, r4
 80109e8:	881b      	ldrh	r3, [r3, #0]
 80109ea:	f006 f9ee 	bl	8016dca <USB_ReadPMA>
 80109ee:	e07b      	b.n	8010ae8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2250      	movs	r2, #80	@ 0x50
 80109f6:	5a9b      	ldrh	r3, [r3, r2]
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	001a      	movs	r2, r3
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	00db      	lsls	r3, r3, #3
 8010a02:	18d2      	adds	r2, r2, r3
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	18d3      	adds	r3, r2, r3
 8010a0a:	4a40      	ldr	r2, [pc, #256]	@ (8010b0c <HAL_PCD_EP_DB_Receive+0x234>)
 8010a0c:	4694      	mov	ip, r2
 8010a0e:	4463      	add	r3, ip
 8010a10:	881a      	ldrh	r2, [r3, #0]
 8010a12:	211a      	movs	r1, #26
 8010a14:	187b      	adds	r3, r7, r1
 8010a16:	0592      	lsls	r2, r2, #22
 8010a18:	0d92      	lsrs	r2, r2, #22
 8010a1a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	699a      	ldr	r2, [r3, #24]
 8010a20:	187b      	adds	r3, r7, r1
 8010a22:	881b      	ldrh	r3, [r3, #0]
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d307      	bcc.n	8010a38 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	699a      	ldr	r2, [r3, #24]
 8010a2c:	187b      	adds	r3, r7, r1
 8010a2e:	881b      	ldrh	r3, [r3, #0]
 8010a30:	1ad2      	subs	r2, r2, r3
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	619a      	str	r2, [r3, #24]
 8010a36:	e002      	b.n	8010a3e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	699b      	ldr	r3, [r3, #24]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d121      	bne.n	8010a8a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	001a      	movs	r2, r3
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	18d3      	adds	r3, r2, r3
 8010a54:	881b      	ldrh	r3, [r3, #0]
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	201e      	movs	r0, #30
 8010a5a:	183b      	adds	r3, r7, r0
 8010a5c:	4927      	ldr	r1, [pc, #156]	@ (8010afc <HAL_PCD_EP_DB_Receive+0x224>)
 8010a5e:	400a      	ands	r2, r1
 8010a60:	801a      	strh	r2, [r3, #0]
 8010a62:	183b      	adds	r3, r7, r0
 8010a64:	183a      	adds	r2, r7, r0
 8010a66:	8812      	ldrh	r2, [r2, #0]
 8010a68:	2180      	movs	r1, #128	@ 0x80
 8010a6a:	0189      	lsls	r1, r1, #6
 8010a6c:	404a      	eors	r2, r1
 8010a6e:	801a      	strh	r2, [r3, #0]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	001a      	movs	r2, r3
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	18d3      	adds	r3, r2, r3
 8010a7e:	183a      	adds	r2, r7, r0
 8010a80:	8812      	ldrh	r2, [r2, #0]
 8010a82:	491f      	ldr	r1, [pc, #124]	@ (8010b00 <HAL_PCD_EP_DB_Receive+0x228>)
 8010a84:	430a      	orrs	r2, r1
 8010a86:	b292      	uxth	r2, r2
 8010a88:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8010a8a:	1dbb      	adds	r3, r7, #6
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	2240      	movs	r2, #64	@ 0x40
 8010a90:	4013      	ands	r3, r2
 8010a92:	d11a      	bne.n	8010aca <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	001a      	movs	r2, r3
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	18d3      	adds	r3, r2, r3
 8010aa2:	881b      	ldrh	r3, [r3, #0]
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	201c      	movs	r0, #28
 8010aa8:	183b      	adds	r3, r7, r0
 8010aaa:	4916      	ldr	r1, [pc, #88]	@ (8010b04 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010aac:	400a      	ands	r2, r1
 8010aae:	801a      	strh	r2, [r3, #0]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	001a      	movs	r2, r3
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	18d3      	adds	r3, r2, r3
 8010abe:	183a      	adds	r2, r7, r0
 8010ac0:	8812      	ldrh	r2, [r2, #0]
 8010ac2:	4911      	ldr	r1, [pc, #68]	@ (8010b08 <HAL_PCD_EP_DB_Receive+0x230>)
 8010ac4:	430a      	orrs	r2, r1
 8010ac6:	b292      	uxth	r2, r2
 8010ac8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010aca:	241a      	movs	r4, #26
 8010acc:	193b      	adds	r3, r7, r4
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d009      	beq.n	8010ae8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	6818      	ldr	r0, [r3, #0]
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	6959      	ldr	r1, [r3, #20]
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	895a      	ldrh	r2, [r3, #10]
 8010ae0:	193b      	adds	r3, r7, r4
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	f006 f971 	bl	8016dca <USB_ReadPMA>
    }
  }

  return count;
 8010ae8:	231a      	movs	r3, #26
 8010aea:	18fb      	adds	r3, r7, r3
 8010aec:	881b      	ldrh	r3, [r3, #0]
}
 8010aee:	0018      	movs	r0, r3
 8010af0:	46bd      	mov	sp, r7
 8010af2:	b009      	add	sp, #36	@ 0x24
 8010af4:	bd90      	pop	{r4, r7, pc}
 8010af6:	46c0      	nop			@ (mov r8, r8)
 8010af8:	00000402 	.word	0x00000402
 8010afc:	ffffbf8f 	.word	0xffffbf8f
 8010b00:	ffff8080 	.word	0xffff8080
 8010b04:	ffff8f8f 	.word	0xffff8f8f
 8010b08:	ffff80c0 	.word	0xffff80c0
 8010b0c:	00000406 	.word	0x00000406

08010b10 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b0a4      	sub	sp, #144	@ 0x90
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	1dbb      	adds	r3, r7, #6
 8010b1c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010b1e:	1dbb      	adds	r3, r7, #6
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	2240      	movs	r2, #64	@ 0x40
 8010b24:	4013      	ands	r3, r2
 8010b26:	d100      	bne.n	8010b2a <HAL_PCD_EP_DB_Transmit+0x1a>
 8010b28:	e1e4      	b.n	8010ef4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	2250      	movs	r2, #80	@ 0x50
 8010b30:	5a9b      	ldrh	r3, [r3, r2]
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	001a      	movs	r2, r3
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	00db      	lsls	r3, r3, #3
 8010b3c:	18d2      	adds	r2, r2, r3
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	18d3      	adds	r3, r2, r3
 8010b44:	4ad0      	ldr	r2, [pc, #832]	@ (8010e88 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010b46:	4694      	mov	ip, r2
 8010b48:	4463      	add	r3, ip
 8010b4a:	881a      	ldrh	r2, [r3, #0]
 8010b4c:	2186      	movs	r1, #134	@ 0x86
 8010b4e:	187b      	adds	r3, r7, r1
 8010b50:	0592      	lsls	r2, r2, #22
 8010b52:	0d92      	lsrs	r2, r2, #22
 8010b54:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	699a      	ldr	r2, [r3, #24]
 8010b5a:	187b      	adds	r3, r7, r1
 8010b5c:	881b      	ldrh	r3, [r3, #0]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d907      	bls.n	8010b72 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	699a      	ldr	r2, [r3, #24]
 8010b66:	187b      	adds	r3, r7, r1
 8010b68:	881b      	ldrh	r3, [r3, #0]
 8010b6a:	1ad2      	subs	r2, r2, r3
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	619a      	str	r2, [r3, #24]
 8010b70:	e002      	b.n	8010b78 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	2200      	movs	r2, #0
 8010b76:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	699b      	ldr	r3, [r3, #24]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d000      	beq.n	8010b82 <HAL_PCD_EP_DB_Transmit+0x72>
 8010b80:	e0b5      	b.n	8010cee <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	785b      	ldrb	r3, [r3, #1]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d125      	bne.n	8010bd6 <HAL_PCD_EP_DB_Transmit+0xc6>
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	2250      	movs	r2, #80	@ 0x50
 8010b96:	5a9b      	ldrh	r3, [r3, r2]
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	001a      	movs	r2, r3
 8010b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9e:	189b      	adds	r3, r3, r2
 8010ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	00da      	lsls	r2, r3, #3
 8010ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010baa:	18d3      	adds	r3, r2, r3
 8010bac:	4ab6      	ldr	r2, [pc, #728]	@ (8010e88 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010bae:	4694      	mov	ip, r2
 8010bb0:	4463      	add	r3, ip
 8010bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb6:	881b      	ldrh	r3, [r3, #0]
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	059b      	lsls	r3, r3, #22
 8010bbc:	0d9b      	lsrs	r3, r3, #22
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc2:	801a      	strh	r2, [r3, #0]
 8010bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc6:	881b      	ldrh	r3, [r3, #0]
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	4ab0      	ldr	r2, [pc, #704]	@ (8010e8c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd2:	801a      	strh	r2, [r3, #0]
 8010bd4:	e01b      	b.n	8010c0e <HAL_PCD_EP_DB_Transmit+0xfe>
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	785b      	ldrb	r3, [r3, #1]
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d117      	bne.n	8010c0e <HAL_PCD_EP_DB_Transmit+0xfe>
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2250      	movs	r2, #80	@ 0x50
 8010bea:	5a9b      	ldrh	r3, [r3, r2]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	001a      	movs	r2, r3
 8010bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bf2:	189b      	adds	r3, r3, r2
 8010bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	00da      	lsls	r2, r3, #3
 8010bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bfe:	18d3      	adds	r3, r2, r3
 8010c00:	4aa1      	ldr	r2, [pc, #644]	@ (8010e88 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010c02:	4694      	mov	ip, r2
 8010c04:	4463      	add	r3, ip
 8010c06:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	785b      	ldrb	r3, [r3, #1]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d125      	bne.n	8010c68 <HAL_PCD_EP_DB_Transmit+0x158>
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	61fb      	str	r3, [r7, #28]
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2250      	movs	r2, #80	@ 0x50
 8010c28:	5a9b      	ldrh	r3, [r3, r2]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	001a      	movs	r2, r3
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	189b      	adds	r3, r3, r2
 8010c32:	61fb      	str	r3, [r7, #28]
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	00da      	lsls	r2, r3, #3
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	18d3      	adds	r3, r2, r3
 8010c3e:	4a94      	ldr	r2, [pc, #592]	@ (8010e90 <HAL_PCD_EP_DB_Transmit+0x380>)
 8010c40:	4694      	mov	ip, r2
 8010c42:	4463      	add	r3, ip
 8010c44:	61bb      	str	r3, [r7, #24]
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	881b      	ldrh	r3, [r3, #0]
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	059b      	lsls	r3, r3, #22
 8010c4e:	0d9b      	lsrs	r3, r3, #22
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	801a      	strh	r2, [r3, #0]
 8010c56:	69bb      	ldr	r3, [r7, #24]
 8010c58:	881b      	ldrh	r3, [r3, #0]
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	4a8b      	ldr	r2, [pc, #556]	@ (8010e8c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010c5e:	4313      	orrs	r3, r2
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	801a      	strh	r2, [r3, #0]
 8010c66:	e018      	b.n	8010c9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	785b      	ldrb	r3, [r3, #1]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d114      	bne.n	8010c9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	2250      	movs	r2, #80	@ 0x50
 8010c76:	5a9b      	ldrh	r3, [r3, r2]
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	001a      	movs	r2, r3
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7e:	189b      	adds	r3, r3, r2
 8010c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	00da      	lsls	r2, r3, #3
 8010c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8a:	18d3      	adds	r3, r2, r3
 8010c8c:	4a80      	ldr	r2, [pc, #512]	@ (8010e90 <HAL_PCD_EP_DB_Transmit+0x380>)
 8010c8e:	4694      	mov	ip, r2
 8010c90:	4463      	add	r3, ip
 8010c92:	623b      	str	r3, [r7, #32]
 8010c94:	6a3b      	ldr	r3, [r7, #32]
 8010c96:	2200      	movs	r2, #0
 8010c98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	781a      	ldrb	r2, [r3, #0]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	0011      	movs	r1, r2
 8010ca2:	0018      	movs	r0, r3
 8010ca4:	f008 f8cc 	bl	8018e40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010ca8:	1dbb      	adds	r3, r7, #6
 8010caa:	881a      	ldrh	r2, [r3, #0]
 8010cac:	2380      	movs	r3, #128	@ 0x80
 8010cae:	01db      	lsls	r3, r3, #7
 8010cb0:	4013      	ands	r3, r2
 8010cb2:	d100      	bne.n	8010cb6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8010cb4:	e309      	b.n	80112ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	001a      	movs	r2, r3
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	18d3      	adds	r3, r2, r3
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	2016      	movs	r0, #22
 8010cca:	183b      	adds	r3, r7, r0
 8010ccc:	4971      	ldr	r1, [pc, #452]	@ (8010e94 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010cce:	400a      	ands	r2, r1
 8010cd0:	801a      	strh	r2, [r3, #0]
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	001a      	movs	r2, r3
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	18d3      	adds	r3, r2, r3
 8010ce0:	183a      	adds	r2, r7, r0
 8010ce2:	8812      	ldrh	r2, [r2, #0]
 8010ce4:	496c      	ldr	r1, [pc, #432]	@ (8010e98 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010ce6:	430a      	orrs	r2, r1
 8010ce8:	b292      	uxth	r2, r2
 8010cea:	801a      	strh	r2, [r3, #0]
 8010cec:	e2ed      	b.n	80112ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010cee:	1dbb      	adds	r3, r7, #6
 8010cf0:	881a      	ldrh	r2, [r3, #0]
 8010cf2:	2380      	movs	r3, #128	@ 0x80
 8010cf4:	01db      	lsls	r3, r3, #7
 8010cf6:	4013      	ands	r3, r2
 8010cf8:	d01a      	beq.n	8010d30 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	001a      	movs	r2, r3
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	18d3      	adds	r3, r2, r3
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	208a      	movs	r0, #138	@ 0x8a
 8010d0e:	183b      	adds	r3, r7, r0
 8010d10:	4960      	ldr	r1, [pc, #384]	@ (8010e94 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010d12:	400a      	ands	r2, r1
 8010d14:	801a      	strh	r2, [r3, #0]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	001a      	movs	r2, r3
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	18d3      	adds	r3, r2, r3
 8010d24:	183a      	adds	r2, r7, r0
 8010d26:	8812      	ldrh	r2, [r2, #0]
 8010d28:	495b      	ldr	r1, [pc, #364]	@ (8010e98 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010d2a:	430a      	orrs	r2, r1
 8010d2c:	b292      	uxth	r2, r2
 8010d2e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2224      	movs	r2, #36	@ 0x24
 8010d34:	5c9b      	ldrb	r3, [r3, r2]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d000      	beq.n	8010d3c <HAL_PCD_EP_DB_Transmit+0x22c>
 8010d3a:	e2c6      	b.n	80112ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	695a      	ldr	r2, [r3, #20]
 8010d40:	2186      	movs	r1, #134	@ 0x86
 8010d42:	187b      	adds	r3, r7, r1
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	18d2      	adds	r2, r2, r3
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	69da      	ldr	r2, [r3, #28]
 8010d50:	187b      	adds	r3, r7, r1
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	18d2      	adds	r2, r2, r3
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	6a1a      	ldr	r2, [r3, #32]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d30c      	bcc.n	8010d80 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	691b      	ldr	r3, [r3, #16]
 8010d6a:	218c      	movs	r1, #140	@ 0x8c
 8010d6c:	187a      	adds	r2, r7, r1
 8010d6e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	6a1a      	ldr	r2, [r3, #32]
 8010d74:	187b      	adds	r3, r7, r1
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	1ad2      	subs	r2, r2, r3
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	621a      	str	r2, [r3, #32]
 8010d7e:	e01a      	b.n	8010db6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	6a1b      	ldr	r3, [r3, #32]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d10a      	bne.n	8010d9e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8010d88:	2386      	movs	r3, #134	@ 0x86
 8010d8a:	18fb      	adds	r3, r7, r3
 8010d8c:	881b      	ldrh	r3, [r3, #0]
 8010d8e:	228c      	movs	r2, #140	@ 0x8c
 8010d90:	18ba      	adds	r2, r7, r2
 8010d92:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	2224      	movs	r2, #36	@ 0x24
 8010d98:	2100      	movs	r1, #0
 8010d9a:	5499      	strb	r1, [r3, r2]
 8010d9c:	e00b      	b.n	8010db6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	2224      	movs	r2, #36	@ 0x24
 8010da2:	2100      	movs	r1, #0
 8010da4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	6a1b      	ldr	r3, [r3, #32]
 8010daa:	228c      	movs	r2, #140	@ 0x8c
 8010dac:	18ba      	adds	r2, r7, r2
 8010dae:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	2200      	movs	r2, #0
 8010db4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	785b      	ldrb	r3, [r3, #1]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d000      	beq.n	8010dc0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8010dbe:	e06d      	b.n	8010e9c <HAL_PCD_EP_DB_Transmit+0x38c>
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2250      	movs	r2, #80	@ 0x50
 8010dcc:	5a9b      	ldrh	r3, [r3, r2]
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	001a      	movs	r2, r3
 8010dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dd4:	189b      	adds	r3, r3, r2
 8010dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	00da      	lsls	r2, r3, #3
 8010dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010de0:	18d3      	adds	r3, r2, r3
 8010de2:	4a29      	ldr	r2, [pc, #164]	@ (8010e88 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010de4:	4694      	mov	ip, r2
 8010de6:	4463      	add	r3, ip
 8010de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dec:	881b      	ldrh	r3, [r3, #0]
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	059b      	lsls	r3, r3, #22
 8010df2:	0d9b      	lsrs	r3, r3, #22
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df8:	801a      	strh	r2, [r3, #0]
 8010dfa:	228c      	movs	r2, #140	@ 0x8c
 8010dfc:	18bb      	adds	r3, r7, r2
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b3e      	cmp	r3, #62	@ 0x3e
 8010e02:	d91a      	bls.n	8010e3a <HAL_PCD_EP_DB_Transmit+0x32a>
 8010e04:	18bb      	adds	r3, r7, r2
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	095b      	lsrs	r3, r3, #5
 8010e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e0c:	18bb      	adds	r3, r7, r2
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	221f      	movs	r2, #31
 8010e12:	4013      	ands	r3, r2
 8010e14:	d102      	bne.n	8010e1c <HAL_PCD_EP_DB_Transmit+0x30c>
 8010e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1e:	881b      	ldrh	r3, [r3, #0]
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	029b      	lsls	r3, r3, #10
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	4a17      	ldr	r2, [pc, #92]	@ (8010e8c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010e30:	4313      	orrs	r3, r2
 8010e32:	b29a      	uxth	r2, r3
 8010e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e36:	801a      	strh	r2, [r3, #0]
 8010e38:	e04f      	b.n	8010eda <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010e3a:	238c      	movs	r3, #140	@ 0x8c
 8010e3c:	18fb      	adds	r3, r7, r3
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d108      	bne.n	8010e56 <HAL_PCD_EP_DB_Transmit+0x346>
 8010e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e46:	881b      	ldrh	r3, [r3, #0]
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	4a10      	ldr	r2, [pc, #64]	@ (8010e8c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e52:	801a      	strh	r2, [r3, #0]
 8010e54:	e041      	b.n	8010eda <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010e56:	228c      	movs	r2, #140	@ 0x8c
 8010e58:	18bb      	adds	r3, r7, r2
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	085b      	lsrs	r3, r3, #1
 8010e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e60:	18bb      	adds	r3, r7, r2
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2201      	movs	r2, #1
 8010e66:	4013      	ands	r3, r2
 8010e68:	d002      	beq.n	8010e70 <HAL_PCD_EP_DB_Transmit+0x360>
 8010e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	029b      	lsls	r3, r3, #10
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e84:	801a      	strh	r2, [r3, #0]
 8010e86:	e028      	b.n	8010eda <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010e88:	00000402 	.word	0x00000402
 8010e8c:	ffff8000 	.word	0xffff8000
 8010e90:	00000406 	.word	0x00000406
 8010e94:	ffff8f8f 	.word	0xffff8f8f
 8010e98:	ffffc080 	.word	0xffffc080
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	785b      	ldrb	r3, [r3, #1]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d11a      	bne.n	8010eda <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2250      	movs	r2, #80	@ 0x50
 8010eb0:	5a9b      	ldrh	r3, [r3, r2]
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	001a      	movs	r2, r3
 8010eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010eb8:	189b      	adds	r3, r3, r2
 8010eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	00da      	lsls	r2, r3, #3
 8010ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ec4:	18d3      	adds	r3, r2, r3
 8010ec6:	4adb      	ldr	r2, [pc, #876]	@ (8011234 <HAL_PCD_EP_DB_Transmit+0x724>)
 8010ec8:	4694      	mov	ip, r2
 8010eca:	4463      	add	r3, ip
 8010ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ece:	238c      	movs	r3, #140	@ 0x8c
 8010ed0:	18fb      	adds	r3, r7, r3
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ed8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	6818      	ldr	r0, [r3, #0]
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	6959      	ldr	r1, [r3, #20]
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	891a      	ldrh	r2, [r3, #8]
 8010ee6:	238c      	movs	r3, #140	@ 0x8c
 8010ee8:	18fb      	adds	r3, r7, r3
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	f005 ff23 	bl	8016d38 <USB_WritePMA>
 8010ef2:	e1ea      	b.n	80112ca <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	2250      	movs	r2, #80	@ 0x50
 8010efa:	5a9b      	ldrh	r3, [r3, r2]
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	001a      	movs	r2, r3
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	00db      	lsls	r3, r3, #3
 8010f06:	18d2      	adds	r2, r2, r3
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	18d3      	adds	r3, r2, r3
 8010f0e:	4aca      	ldr	r2, [pc, #808]	@ (8011238 <HAL_PCD_EP_DB_Transmit+0x728>)
 8010f10:	4694      	mov	ip, r2
 8010f12:	4463      	add	r3, ip
 8010f14:	881a      	ldrh	r2, [r3, #0]
 8010f16:	2186      	movs	r1, #134	@ 0x86
 8010f18:	187b      	adds	r3, r7, r1
 8010f1a:	0592      	lsls	r2, r2, #22
 8010f1c:	0d92      	lsrs	r2, r2, #22
 8010f1e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	699a      	ldr	r2, [r3, #24]
 8010f24:	187b      	adds	r3, r7, r1
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d307      	bcc.n	8010f3c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	699a      	ldr	r2, [r3, #24]
 8010f30:	187b      	adds	r3, r7, r1
 8010f32:	881b      	ldrh	r3, [r3, #0]
 8010f34:	1ad2      	subs	r2, r2, r3
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	619a      	str	r2, [r3, #24]
 8010f3a:	e002      	b.n	8010f42 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	699b      	ldr	r3, [r3, #24]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d000      	beq.n	8010f4c <HAL_PCD_EP_DB_Transmit+0x43c>
 8010f4a:	e0bb      	b.n	80110c4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	785b      	ldrb	r3, [r3, #1]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d125      	bne.n	8010fa0 <HAL_PCD_EP_DB_Transmit+0x490>
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2250      	movs	r2, #80	@ 0x50
 8010f60:	5a9b      	ldrh	r3, [r3, r2]
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	001a      	movs	r2, r3
 8010f66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010f68:	189b      	adds	r3, r3, r2
 8010f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	00da      	lsls	r2, r3, #3
 8010f72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010f74:	18d3      	adds	r3, r2, r3
 8010f76:	4aaf      	ldr	r2, [pc, #700]	@ (8011234 <HAL_PCD_EP_DB_Transmit+0x724>)
 8010f78:	4694      	mov	ip, r2
 8010f7a:	4463      	add	r3, ip
 8010f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f80:	881b      	ldrh	r3, [r3, #0]
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	059b      	lsls	r3, r3, #22
 8010f86:	0d9b      	lsrs	r3, r3, #22
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f8c:	801a      	strh	r2, [r3, #0]
 8010f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f90:	881b      	ldrh	r3, [r3, #0]
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	4aa9      	ldr	r2, [pc, #676]	@ (801123c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8010f96:	4313      	orrs	r3, r2
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f9c:	801a      	strh	r2, [r3, #0]
 8010f9e:	e01b      	b.n	8010fd8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	785b      	ldrb	r3, [r3, #1]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d117      	bne.n	8010fd8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	667b      	str	r3, [r7, #100]	@ 0x64
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2250      	movs	r2, #80	@ 0x50
 8010fb4:	5a9b      	ldrh	r3, [r3, r2]
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	001a      	movs	r2, r3
 8010fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fbc:	189b      	adds	r3, r3, r2
 8010fbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	00da      	lsls	r2, r3, #3
 8010fc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fc8:	18d3      	adds	r3, r2, r3
 8010fca:	4a9a      	ldr	r2, [pc, #616]	@ (8011234 <HAL_PCD_EP_DB_Transmit+0x724>)
 8010fcc:	4694      	mov	ip, r2
 8010fce:	4463      	add	r3, ip
 8010fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8010fd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	785b      	ldrb	r3, [r3, #1]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d12b      	bne.n	801103e <HAL_PCD_EP_DB_Transmit+0x52e>
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2250      	movs	r2, #80	@ 0x50
 8010ff2:	5a9b      	ldrh	r3, [r3, r2]
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	001a      	movs	r2, r3
 8010ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ffa:	189b      	adds	r3, r3, r2
 8010ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	00da      	lsls	r2, r3, #3
 8011004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011006:	18d3      	adds	r3, r2, r3
 8011008:	4a8b      	ldr	r2, [pc, #556]	@ (8011238 <HAL_PCD_EP_DB_Transmit+0x728>)
 801100a:	4694      	mov	ip, r2
 801100c:	4463      	add	r3, ip
 801100e:	2180      	movs	r1, #128	@ 0x80
 8011010:	187a      	adds	r2, r7, r1
 8011012:	6013      	str	r3, [r2, #0]
 8011014:	187b      	adds	r3, r7, r1
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	b29b      	uxth	r3, r3
 801101c:	059b      	lsls	r3, r3, #22
 801101e:	0d9b      	lsrs	r3, r3, #22
 8011020:	b29a      	uxth	r2, r3
 8011022:	187b      	adds	r3, r7, r1
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	801a      	strh	r2, [r3, #0]
 8011028:	187b      	adds	r3, r7, r1
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	881b      	ldrh	r3, [r3, #0]
 801102e:	b29b      	uxth	r3, r3
 8011030:	4a82      	ldr	r2, [pc, #520]	@ (801123c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011032:	4313      	orrs	r3, r2
 8011034:	b29a      	uxth	r2, r3
 8011036:	187b      	adds	r3, r7, r1
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	801a      	strh	r2, [r3, #0]
 801103c:	e018      	b.n	8011070 <HAL_PCD_EP_DB_Transmit+0x560>
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	785b      	ldrb	r3, [r3, #1]
 8011042:	2b01      	cmp	r3, #1
 8011044:	d114      	bne.n	8011070 <HAL_PCD_EP_DB_Transmit+0x560>
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2250      	movs	r2, #80	@ 0x50
 801104c:	5a9b      	ldrh	r3, [r3, r2]
 801104e:	b29b      	uxth	r3, r3
 8011050:	001a      	movs	r2, r3
 8011052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011054:	189b      	adds	r3, r3, r2
 8011056:	677b      	str	r3, [r7, #116]	@ 0x74
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	00da      	lsls	r2, r3, #3
 801105e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011060:	18d3      	adds	r3, r2, r3
 8011062:	4a75      	ldr	r2, [pc, #468]	@ (8011238 <HAL_PCD_EP_DB_Transmit+0x728>)
 8011064:	4694      	mov	ip, r2
 8011066:	4463      	add	r3, ip
 8011068:	673b      	str	r3, [r7, #112]	@ 0x70
 801106a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801106c:	2200      	movs	r2, #0
 801106e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	781a      	ldrb	r2, [r3, #0]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	0011      	movs	r1, r2
 8011078:	0018      	movs	r0, r3
 801107a:	f007 fee1 	bl	8018e40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801107e:	1dbb      	adds	r3, r7, #6
 8011080:	881a      	ldrh	r2, [r3, #0]
 8011082:	2380      	movs	r3, #128	@ 0x80
 8011084:	01db      	lsls	r3, r3, #7
 8011086:	4013      	ands	r3, r2
 8011088:	d000      	beq.n	801108c <HAL_PCD_EP_DB_Transmit+0x57c>
 801108a:	e11e      	b.n	80112ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	001a      	movs	r2, r3
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	18d3      	adds	r3, r2, r3
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	b29a      	uxth	r2, r3
 801109e:	2088      	movs	r0, #136	@ 0x88
 80110a0:	183b      	adds	r3, r7, r0
 80110a2:	4967      	ldr	r1, [pc, #412]	@ (8011240 <HAL_PCD_EP_DB_Transmit+0x730>)
 80110a4:	400a      	ands	r2, r1
 80110a6:	801a      	strh	r2, [r3, #0]
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	001a      	movs	r2, r3
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	009b      	lsls	r3, r3, #2
 80110b4:	18d3      	adds	r3, r2, r3
 80110b6:	183a      	adds	r2, r7, r0
 80110b8:	8812      	ldrh	r2, [r2, #0]
 80110ba:	4962      	ldr	r1, [pc, #392]	@ (8011244 <HAL_PCD_EP_DB_Transmit+0x734>)
 80110bc:	430a      	orrs	r2, r1
 80110be:	b292      	uxth	r2, r2
 80110c0:	801a      	strh	r2, [r3, #0]
 80110c2:	e102      	b.n	80112ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80110c4:	1dbb      	adds	r3, r7, #6
 80110c6:	881a      	ldrh	r2, [r3, #0]
 80110c8:	2380      	movs	r3, #128	@ 0x80
 80110ca:	01db      	lsls	r3, r3, #7
 80110cc:	4013      	ands	r3, r2
 80110ce:	d11a      	bne.n	8011106 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	001a      	movs	r2, r3
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	009b      	lsls	r3, r3, #2
 80110dc:	18d3      	adds	r3, r2, r3
 80110de:	881b      	ldrh	r3, [r3, #0]
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	204e      	movs	r0, #78	@ 0x4e
 80110e4:	183b      	adds	r3, r7, r0
 80110e6:	4956      	ldr	r1, [pc, #344]	@ (8011240 <HAL_PCD_EP_DB_Transmit+0x730>)
 80110e8:	400a      	ands	r2, r1
 80110ea:	801a      	strh	r2, [r3, #0]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	001a      	movs	r2, r3
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	18d3      	adds	r3, r2, r3
 80110fa:	183a      	adds	r2, r7, r0
 80110fc:	8812      	ldrh	r2, [r2, #0]
 80110fe:	4951      	ldr	r1, [pc, #324]	@ (8011244 <HAL_PCD_EP_DB_Transmit+0x734>)
 8011100:	430a      	orrs	r2, r1
 8011102:	b292      	uxth	r2, r2
 8011104:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	2224      	movs	r2, #36	@ 0x24
 801110a:	5c9b      	ldrb	r3, [r3, r2]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d000      	beq.n	8011112 <HAL_PCD_EP_DB_Transmit+0x602>
 8011110:	e0db      	b.n	80112ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	695a      	ldr	r2, [r3, #20]
 8011116:	2186      	movs	r1, #134	@ 0x86
 8011118:	187b      	adds	r3, r7, r1
 801111a:	881b      	ldrh	r3, [r3, #0]
 801111c:	18d2      	adds	r2, r2, r3
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	69da      	ldr	r2, [r3, #28]
 8011126:	187b      	adds	r3, r7, r1
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	18d2      	adds	r2, r2, r3
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	6a1a      	ldr	r2, [r3, #32]
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	429a      	cmp	r2, r3
 801113a:	d30c      	bcc.n	8011156 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	691b      	ldr	r3, [r3, #16]
 8011140:	218c      	movs	r1, #140	@ 0x8c
 8011142:	187a      	adds	r2, r7, r1
 8011144:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	6a1a      	ldr	r2, [r3, #32]
 801114a:	187b      	adds	r3, r7, r1
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	1ad2      	subs	r2, r2, r3
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	621a      	str	r2, [r3, #32]
 8011154:	e01a      	b.n	801118c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	6a1b      	ldr	r3, [r3, #32]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d10a      	bne.n	8011174 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801115e:	2386      	movs	r3, #134	@ 0x86
 8011160:	18fb      	adds	r3, r7, r3
 8011162:	881b      	ldrh	r3, [r3, #0]
 8011164:	228c      	movs	r2, #140	@ 0x8c
 8011166:	18ba      	adds	r2, r7, r2
 8011168:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	2224      	movs	r2, #36	@ 0x24
 801116e:	2100      	movs	r1, #0
 8011170:	5499      	strb	r1, [r3, r2]
 8011172:	e00b      	b.n	801118c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	6a1b      	ldr	r3, [r3, #32]
 8011178:	228c      	movs	r2, #140	@ 0x8c
 801117a:	18ba      	adds	r2, r7, r2
 801117c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	2200      	movs	r2, #0
 8011182:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	2224      	movs	r2, #36	@ 0x24
 8011188:	2100      	movs	r1, #0
 801118a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	657b      	str	r3, [r7, #84]	@ 0x54
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	785b      	ldrb	r3, [r3, #1]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d000      	beq.n	801119c <HAL_PCD_EP_DB_Transmit+0x68c>
 801119a:	e06e      	b.n	801127a <HAL_PCD_EP_DB_Transmit+0x76a>
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	2250      	movs	r2, #80	@ 0x50
 80111a8:	5a9b      	ldrh	r3, [r3, r2]
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	001a      	movs	r2, r3
 80111ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111b0:	189b      	adds	r3, r3, r2
 80111b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	00da      	lsls	r2, r3, #3
 80111ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111bc:	18d3      	adds	r3, r2, r3
 80111be:	4a1e      	ldr	r2, [pc, #120]	@ (8011238 <HAL_PCD_EP_DB_Transmit+0x728>)
 80111c0:	4694      	mov	ip, r2
 80111c2:	4463      	add	r3, ip
 80111c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80111c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	059b      	lsls	r3, r3, #22
 80111ce:	0d9b      	lsrs	r3, r3, #22
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111d4:	801a      	strh	r2, [r3, #0]
 80111d6:	228c      	movs	r2, #140	@ 0x8c
 80111d8:	18bb      	adds	r3, r7, r2
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80111de:	d91a      	bls.n	8011216 <HAL_PCD_EP_DB_Transmit+0x706>
 80111e0:	18bb      	adds	r3, r7, r2
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	095b      	lsrs	r3, r3, #5
 80111e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80111e8:	18bb      	adds	r3, r7, r2
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	221f      	movs	r2, #31
 80111ee:	4013      	ands	r3, r2
 80111f0:	d102      	bne.n	80111f8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80111f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111f4:	3b01      	subs	r3, #1
 80111f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80111f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111fa:	881b      	ldrh	r3, [r3, #0]
 80111fc:	b29a      	uxth	r2, r3
 80111fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011200:	b29b      	uxth	r3, r3
 8011202:	029b      	lsls	r3, r3, #10
 8011204:	b29b      	uxth	r3, r3
 8011206:	4313      	orrs	r3, r2
 8011208:	b29b      	uxth	r3, r3
 801120a:	4a0c      	ldr	r2, [pc, #48]	@ (801123c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801120c:	4313      	orrs	r3, r2
 801120e:	b29a      	uxth	r2, r3
 8011210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011212:	801a      	strh	r2, [r3, #0]
 8011214:	e04d      	b.n	80112b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011216:	238c      	movs	r3, #140	@ 0x8c
 8011218:	18fb      	adds	r3, r7, r3
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d113      	bne.n	8011248 <HAL_PCD_EP_DB_Transmit+0x738>
 8011220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	b29b      	uxth	r3, r3
 8011226:	4a05      	ldr	r2, [pc, #20]	@ (801123c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011228:	4313      	orrs	r3, r2
 801122a:	b29a      	uxth	r2, r3
 801122c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801122e:	801a      	strh	r2, [r3, #0]
 8011230:	e03f      	b.n	80112b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011232:	46c0      	nop			@ (mov r8, r8)
 8011234:	00000402 	.word	0x00000402
 8011238:	00000406 	.word	0x00000406
 801123c:	ffff8000 	.word	0xffff8000
 8011240:	ffff8f8f 	.word	0xffff8f8f
 8011244:	ffffc080 	.word	0xffffc080
 8011248:	228c      	movs	r2, #140	@ 0x8c
 801124a:	18bb      	adds	r3, r7, r2
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	085b      	lsrs	r3, r3, #1
 8011250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011252:	18bb      	adds	r3, r7, r2
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	2201      	movs	r2, #1
 8011258:	4013      	ands	r3, r2
 801125a:	d002      	beq.n	8011262 <HAL_PCD_EP_DB_Transmit+0x752>
 801125c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801125e:	3301      	adds	r3, #1
 8011260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011264:	881b      	ldrh	r3, [r3, #0]
 8011266:	b29a      	uxth	r2, r3
 8011268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801126a:	b29b      	uxth	r3, r3
 801126c:	029b      	lsls	r3, r3, #10
 801126e:	b29b      	uxth	r3, r3
 8011270:	4313      	orrs	r3, r2
 8011272:	b29a      	uxth	r2, r3
 8011274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011276:	801a      	strh	r2, [r3, #0]
 8011278:	e01b      	b.n	80112b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	785b      	ldrb	r3, [r3, #1]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d117      	bne.n	80112b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2250      	movs	r2, #80	@ 0x50
 8011288:	5a9b      	ldrh	r3, [r3, r2]
 801128a:	b29b      	uxth	r3, r3
 801128c:	001a      	movs	r2, r3
 801128e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011290:	189b      	adds	r3, r3, r2
 8011292:	657b      	str	r3, [r7, #84]	@ 0x54
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	00da      	lsls	r2, r3, #3
 801129a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801129c:	18d3      	adds	r3, r2, r3
 801129e:	4a21      	ldr	r2, [pc, #132]	@ (8011324 <HAL_PCD_EP_DB_Transmit+0x814>)
 80112a0:	4694      	mov	ip, r2
 80112a2:	4463      	add	r3, ip
 80112a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80112a6:	238c      	movs	r3, #140	@ 0x8c
 80112a8:	18fb      	adds	r3, r7, r3
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6818      	ldr	r0, [r3, #0]
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	6959      	ldr	r1, [r3, #20]
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	895a      	ldrh	r2, [r3, #10]
 80112be:	238c      	movs	r3, #140	@ 0x8c
 80112c0:	18fb      	adds	r3, r7, r3
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	f005 fd37 	bl	8016d38 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	001a      	movs	r2, r3
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	18d3      	adds	r3, r2, r3
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	b29a      	uxth	r2, r3
 80112dc:	2014      	movs	r0, #20
 80112de:	183b      	adds	r3, r7, r0
 80112e0:	4911      	ldr	r1, [pc, #68]	@ (8011328 <HAL_PCD_EP_DB_Transmit+0x818>)
 80112e2:	400a      	ands	r2, r1
 80112e4:	801a      	strh	r2, [r3, #0]
 80112e6:	183b      	adds	r3, r7, r0
 80112e8:	183a      	adds	r2, r7, r0
 80112ea:	8812      	ldrh	r2, [r2, #0]
 80112ec:	2110      	movs	r1, #16
 80112ee:	404a      	eors	r2, r1
 80112f0:	801a      	strh	r2, [r3, #0]
 80112f2:	183b      	adds	r3, r7, r0
 80112f4:	183a      	adds	r2, r7, r0
 80112f6:	8812      	ldrh	r2, [r2, #0]
 80112f8:	2120      	movs	r1, #32
 80112fa:	404a      	eors	r2, r1
 80112fc:	801a      	strh	r2, [r3, #0]
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	001a      	movs	r2, r3
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	18d3      	adds	r3, r2, r3
 801130c:	183a      	adds	r2, r7, r0
 801130e:	8812      	ldrh	r2, [r2, #0]
 8011310:	4906      	ldr	r1, [pc, #24]	@ (801132c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8011312:	430a      	orrs	r2, r1
 8011314:	b292      	uxth	r2, r2
 8011316:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8011318:	2300      	movs	r3, #0
}
 801131a:	0018      	movs	r0, r3
 801131c:	46bd      	mov	sp, r7
 801131e:	b024      	add	sp, #144	@ 0x90
 8011320:	bd80      	pop	{r7, pc}
 8011322:	46c0      	nop			@ (mov r8, r8)
 8011324:	00000406 	.word	0x00000406
 8011328:	ffff8fbf 	.word	0xffff8fbf
 801132c:	ffff8080 	.word	0xffff8080

08011330 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8011330:	b590      	push	{r4, r7, lr}
 8011332:	b087      	sub	sp, #28
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	0008      	movs	r0, r1
 801133a:	0011      	movs	r1, r2
 801133c:	607b      	str	r3, [r7, #4]
 801133e:	240a      	movs	r4, #10
 8011340:	193b      	adds	r3, r7, r4
 8011342:	1c02      	adds	r2, r0, #0
 8011344:	801a      	strh	r2, [r3, #0]
 8011346:	2308      	movs	r3, #8
 8011348:	18fb      	adds	r3, r7, r3
 801134a:	1c0a      	adds	r2, r1, #0
 801134c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801134e:	0021      	movs	r1, r4
 8011350:	187b      	adds	r3, r7, r1
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	2280      	movs	r2, #128	@ 0x80
 8011356:	4013      	ands	r3, r2
 8011358:	b29b      	uxth	r3, r3
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00c      	beq.n	8011378 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801135e:	187b      	adds	r3, r7, r1
 8011360:	881b      	ldrh	r3, [r3, #0]
 8011362:	2207      	movs	r2, #7
 8011364:	4013      	ands	r3, r2
 8011366:	1c5a      	adds	r2, r3, #1
 8011368:	0013      	movs	r3, r2
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	189b      	adds	r3, r3, r2
 801136e:	00db      	lsls	r3, r3, #3
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	18d3      	adds	r3, r2, r3
 8011374:	617b      	str	r3, [r7, #20]
 8011376:	e00b      	b.n	8011390 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011378:	230a      	movs	r3, #10
 801137a:	18fb      	adds	r3, r7, r3
 801137c:	881a      	ldrh	r2, [r3, #0]
 801137e:	0013      	movs	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	189b      	adds	r3, r3, r2
 8011384:	00db      	lsls	r3, r3, #3
 8011386:	3369      	adds	r3, #105	@ 0x69
 8011388:	33ff      	adds	r3, #255	@ 0xff
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	18d3      	adds	r3, r2, r3
 801138e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8011390:	2308      	movs	r3, #8
 8011392:	18fb      	adds	r3, r7, r3
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d107      	bne.n	80113aa <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2200      	movs	r2, #0
 801139e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	80da      	strh	r2, [r3, #6]
 80113a8:	e00b      	b.n	80113c2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	2201      	movs	r2, #1
 80113ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	0c1b      	lsrs	r3, r3, #16
 80113bc:	b29a      	uxth	r2, r3
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80113c2:	2300      	movs	r3, #0
}
 80113c4:	0018      	movs	r0, r3
 80113c6:	46bd      	mov	sp, r7
 80113c8:	b007      	add	sp, #28
 80113ca:	bd90      	pop	{r4, r7, pc}

080113cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	23ba      	movs	r3, #186	@ 0xba
 80113de:	009b      	lsls	r3, r3, #2
 80113e0:	2101      	movs	r1, #1
 80113e2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	23b8      	movs	r3, #184	@ 0xb8
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	2100      	movs	r1, #0
 80113ec:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2254      	movs	r2, #84	@ 0x54
 80113f2:	5a9b      	ldrh	r3, [r3, r2]
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	2201      	movs	r2, #1
 80113f8:	4313      	orrs	r3, r2
 80113fa:	b299      	uxth	r1, r3
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2254      	movs	r2, #84	@ 0x54
 8011400:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2254      	movs	r2, #84	@ 0x54
 8011406:	5a9b      	ldrh	r3, [r3, r2]
 8011408:	b29b      	uxth	r3, r3
 801140a:	2202      	movs	r2, #2
 801140c:	4313      	orrs	r3, r2
 801140e:	b299      	uxth	r1, r3
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2254      	movs	r2, #84	@ 0x54
 8011414:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	0018      	movs	r0, r3
 801141a:	46bd      	mov	sp, r7
 801141c:	b004      	add	sp, #16
 801141e:	bd80      	pop	{r7, pc}

08011420 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	000a      	movs	r2, r1
 801142a:	1cfb      	adds	r3, r7, #3
 801142c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801142e:	46c0      	nop			@ (mov r8, r8)
 8011430:	46bd      	mov	sp, r7
 8011432:	b002      	add	sp, #8
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801143c:	4b04      	ldr	r3, [pc, #16]	@ (8011450 <HAL_PWR_EnableBkUpAccess+0x18>)
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	4b03      	ldr	r3, [pc, #12]	@ (8011450 <HAL_PWR_EnableBkUpAccess+0x18>)
 8011442:	2180      	movs	r1, #128	@ 0x80
 8011444:	0049      	lsls	r1, r1, #1
 8011446:	430a      	orrs	r2, r1
 8011448:	601a      	str	r2, [r3, #0]
}
 801144a:	46c0      	nop			@ (mov r8, r8)
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	40007000 	.word	0x40007000

08011454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011454:	b5b0      	push	{r4, r5, r7, lr}
 8011456:	b08a      	sub	sp, #40	@ 0x28
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d102      	bne.n	8011468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011462:	2301      	movs	r3, #1
 8011464:	f000 fbbf 	bl	8011be6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011468:	4bc9      	ldr	r3, [pc, #804]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	220c      	movs	r2, #12
 801146e:	4013      	ands	r3, r2
 8011470:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011472:	4bc7      	ldr	r3, [pc, #796]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011474:	68da      	ldr	r2, [r3, #12]
 8011476:	2380      	movs	r3, #128	@ 0x80
 8011478:	025b      	lsls	r3, r3, #9
 801147a:	4013      	ands	r3, r2
 801147c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2201      	movs	r2, #1
 8011484:	4013      	ands	r3, r2
 8011486:	d100      	bne.n	801148a <HAL_RCC_OscConfig+0x36>
 8011488:	e07e      	b.n	8011588 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	2b08      	cmp	r3, #8
 801148e:	d007      	beq.n	80114a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	2b0c      	cmp	r3, #12
 8011494:	d112      	bne.n	80114bc <HAL_RCC_OscConfig+0x68>
 8011496:	69ba      	ldr	r2, [r7, #24]
 8011498:	2380      	movs	r3, #128	@ 0x80
 801149a:	025b      	lsls	r3, r3, #9
 801149c:	429a      	cmp	r2, r3
 801149e:	d10d      	bne.n	80114bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80114a0:	4bbb      	ldr	r3, [pc, #748]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	2380      	movs	r3, #128	@ 0x80
 80114a6:	029b      	lsls	r3, r3, #10
 80114a8:	4013      	ands	r3, r2
 80114aa:	d100      	bne.n	80114ae <HAL_RCC_OscConfig+0x5a>
 80114ac:	e06b      	b.n	8011586 <HAL_RCC_OscConfig+0x132>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d167      	bne.n	8011586 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80114b6:	2301      	movs	r3, #1
 80114b8:	f000 fb95 	bl	8011be6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	685a      	ldr	r2, [r3, #4]
 80114c0:	2380      	movs	r3, #128	@ 0x80
 80114c2:	025b      	lsls	r3, r3, #9
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d107      	bne.n	80114d8 <HAL_RCC_OscConfig+0x84>
 80114c8:	4bb1      	ldr	r3, [pc, #708]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	4bb0      	ldr	r3, [pc, #704]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80114ce:	2180      	movs	r1, #128	@ 0x80
 80114d0:	0249      	lsls	r1, r1, #9
 80114d2:	430a      	orrs	r2, r1
 80114d4:	601a      	str	r2, [r3, #0]
 80114d6:	e027      	b.n	8011528 <HAL_RCC_OscConfig+0xd4>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	23a0      	movs	r3, #160	@ 0xa0
 80114de:	02db      	lsls	r3, r3, #11
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d10e      	bne.n	8011502 <HAL_RCC_OscConfig+0xae>
 80114e4:	4baa      	ldr	r3, [pc, #680]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	4ba9      	ldr	r3, [pc, #676]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80114ea:	2180      	movs	r1, #128	@ 0x80
 80114ec:	02c9      	lsls	r1, r1, #11
 80114ee:	430a      	orrs	r2, r1
 80114f0:	601a      	str	r2, [r3, #0]
 80114f2:	4ba7      	ldr	r3, [pc, #668]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	4ba6      	ldr	r3, [pc, #664]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80114f8:	2180      	movs	r1, #128	@ 0x80
 80114fa:	0249      	lsls	r1, r1, #9
 80114fc:	430a      	orrs	r2, r1
 80114fe:	601a      	str	r2, [r3, #0]
 8011500:	e012      	b.n	8011528 <HAL_RCC_OscConfig+0xd4>
 8011502:	4ba3      	ldr	r3, [pc, #652]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	4ba2      	ldr	r3, [pc, #648]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011508:	49a2      	ldr	r1, [pc, #648]	@ (8011794 <HAL_RCC_OscConfig+0x340>)
 801150a:	400a      	ands	r2, r1
 801150c:	601a      	str	r2, [r3, #0]
 801150e:	4ba0      	ldr	r3, [pc, #640]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	2380      	movs	r3, #128	@ 0x80
 8011514:	025b      	lsls	r3, r3, #9
 8011516:	4013      	ands	r3, r2
 8011518:	60fb      	str	r3, [r7, #12]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	4b9c      	ldr	r3, [pc, #624]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	4b9b      	ldr	r3, [pc, #620]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011522:	499d      	ldr	r1, [pc, #628]	@ (8011798 <HAL_RCC_OscConfig+0x344>)
 8011524:	400a      	ands	r2, r1
 8011526:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d015      	beq.n	801155c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011530:	f7fa fb92 	bl	800bc58 <HAL_GetTick>
 8011534:	0003      	movs	r3, r0
 8011536:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011538:	e009      	b.n	801154e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801153a:	f7fa fb8d 	bl	800bc58 <HAL_GetTick>
 801153e:	0002      	movs	r2, r0
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	2b64      	cmp	r3, #100	@ 0x64
 8011546:	d902      	bls.n	801154e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011548:	2303      	movs	r3, #3
 801154a:	f000 fb4c 	bl	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801154e:	4b90      	ldr	r3, [pc, #576]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	2380      	movs	r3, #128	@ 0x80
 8011554:	029b      	lsls	r3, r3, #10
 8011556:	4013      	ands	r3, r2
 8011558:	d0ef      	beq.n	801153a <HAL_RCC_OscConfig+0xe6>
 801155a:	e015      	b.n	8011588 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801155c:	f7fa fb7c 	bl	800bc58 <HAL_GetTick>
 8011560:	0003      	movs	r3, r0
 8011562:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011564:	e008      	b.n	8011578 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011566:	f7fa fb77 	bl	800bc58 <HAL_GetTick>
 801156a:	0002      	movs	r2, r0
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	1ad3      	subs	r3, r2, r3
 8011570:	2b64      	cmp	r3, #100	@ 0x64
 8011572:	d901      	bls.n	8011578 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8011574:	2303      	movs	r3, #3
 8011576:	e336      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011578:	4b85      	ldr	r3, [pc, #532]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	2380      	movs	r3, #128	@ 0x80
 801157e:	029b      	lsls	r3, r3, #10
 8011580:	4013      	ands	r3, r2
 8011582:	d1f0      	bne.n	8011566 <HAL_RCC_OscConfig+0x112>
 8011584:	e000      	b.n	8011588 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011586:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	2202      	movs	r2, #2
 801158e:	4013      	ands	r3, r2
 8011590:	d100      	bne.n	8011594 <HAL_RCC_OscConfig+0x140>
 8011592:	e099      	b.n	80116c8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159c:	2220      	movs	r2, #32
 801159e:	4013      	ands	r3, r2
 80115a0:	d009      	beq.n	80115b6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80115a2:	4b7b      	ldr	r3, [pc, #492]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80115a4:	681a      	ldr	r2, [r3, #0]
 80115a6:	4b7a      	ldr	r3, [pc, #488]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80115a8:	2120      	movs	r1, #32
 80115aa:	430a      	orrs	r2, r1
 80115ac:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80115ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b0:	2220      	movs	r2, #32
 80115b2:	4393      	bics	r3, r2
 80115b4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	2b04      	cmp	r3, #4
 80115ba:	d005      	beq.n	80115c8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	2b0c      	cmp	r3, #12
 80115c0:	d13e      	bne.n	8011640 <HAL_RCC_OscConfig+0x1ec>
 80115c2:	69bb      	ldr	r3, [r7, #24]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d13b      	bne.n	8011640 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80115c8:	4b71      	ldr	r3, [pc, #452]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2204      	movs	r2, #4
 80115ce:	4013      	ands	r3, r2
 80115d0:	d004      	beq.n	80115dc <HAL_RCC_OscConfig+0x188>
 80115d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80115d8:	2301      	movs	r3, #1
 80115da:	e304      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80115dc:	4b6c      	ldr	r3, [pc, #432]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	4a6e      	ldr	r2, [pc, #440]	@ (801179c <HAL_RCC_OscConfig+0x348>)
 80115e2:	4013      	ands	r3, r2
 80115e4:	0019      	movs	r1, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	021a      	lsls	r2, r3, #8
 80115ec:	4b68      	ldr	r3, [pc, #416]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80115ee:	430a      	orrs	r2, r1
 80115f0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80115f2:	4b67      	ldr	r3, [pc, #412]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2209      	movs	r2, #9
 80115f8:	4393      	bics	r3, r2
 80115fa:	0019      	movs	r1, r3
 80115fc:	4b64      	ldr	r3, [pc, #400]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80115fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011600:	430a      	orrs	r2, r1
 8011602:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011604:	f000 fc42 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 8011608:	0001      	movs	r1, r0
 801160a:	4b61      	ldr	r3, [pc, #388]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	091b      	lsrs	r3, r3, #4
 8011610:	220f      	movs	r2, #15
 8011612:	4013      	ands	r3, r2
 8011614:	4a62      	ldr	r2, [pc, #392]	@ (80117a0 <HAL_RCC_OscConfig+0x34c>)
 8011616:	5cd3      	ldrb	r3, [r2, r3]
 8011618:	000a      	movs	r2, r1
 801161a:	40da      	lsrs	r2, r3
 801161c:	4b61      	ldr	r3, [pc, #388]	@ (80117a4 <HAL_RCC_OscConfig+0x350>)
 801161e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8011620:	4b61      	ldr	r3, [pc, #388]	@ (80117a8 <HAL_RCC_OscConfig+0x354>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	2513      	movs	r5, #19
 8011626:	197c      	adds	r4, r7, r5
 8011628:	0018      	movs	r0, r3
 801162a:	f7fa facf 	bl	800bbcc <HAL_InitTick>
 801162e:	0003      	movs	r3, r0
 8011630:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8011632:	197b      	adds	r3, r7, r5
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d046      	beq.n	80116c8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801163a:	197b      	adds	r3, r7, r5
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	e2d2      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8011640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011642:	2b00      	cmp	r3, #0
 8011644:	d027      	beq.n	8011696 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8011646:	4b52      	ldr	r3, [pc, #328]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2209      	movs	r2, #9
 801164c:	4393      	bics	r3, r2
 801164e:	0019      	movs	r1, r3
 8011650:	4b4f      	ldr	r3, [pc, #316]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011654:	430a      	orrs	r2, r1
 8011656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011658:	f7fa fafe 	bl	800bc58 <HAL_GetTick>
 801165c:	0003      	movs	r3, r0
 801165e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011660:	e008      	b.n	8011674 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011662:	f7fa faf9 	bl	800bc58 <HAL_GetTick>
 8011666:	0002      	movs	r2, r0
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	1ad3      	subs	r3, r2, r3
 801166c:	2b02      	cmp	r3, #2
 801166e:	d901      	bls.n	8011674 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8011670:	2303      	movs	r3, #3
 8011672:	e2b8      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011674:	4b46      	ldr	r3, [pc, #280]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2204      	movs	r2, #4
 801167a:	4013      	ands	r3, r2
 801167c:	d0f1      	beq.n	8011662 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801167e:	4b44      	ldr	r3, [pc, #272]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	4a46      	ldr	r2, [pc, #280]	@ (801179c <HAL_RCC_OscConfig+0x348>)
 8011684:	4013      	ands	r3, r2
 8011686:	0019      	movs	r1, r3
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	021a      	lsls	r2, r3, #8
 801168e:	4b40      	ldr	r3, [pc, #256]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011690:	430a      	orrs	r2, r1
 8011692:	605a      	str	r2, [r3, #4]
 8011694:	e018      	b.n	80116c8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011696:	4b3e      	ldr	r3, [pc, #248]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	4b3d      	ldr	r3, [pc, #244]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 801169c:	2101      	movs	r1, #1
 801169e:	438a      	bics	r2, r1
 80116a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80116a2:	f7fa fad9 	bl	800bc58 <HAL_GetTick>
 80116a6:	0003      	movs	r3, r0
 80116a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80116aa:	e008      	b.n	80116be <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80116ac:	f7fa fad4 	bl	800bc58 <HAL_GetTick>
 80116b0:	0002      	movs	r2, r0
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	1ad3      	subs	r3, r2, r3
 80116b6:	2b02      	cmp	r3, #2
 80116b8:	d901      	bls.n	80116be <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80116ba:	2303      	movs	r3, #3
 80116bc:	e293      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80116be:	4b34      	ldr	r3, [pc, #208]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2204      	movs	r2, #4
 80116c4:	4013      	ands	r3, r2
 80116c6:	d1f1      	bne.n	80116ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2210      	movs	r2, #16
 80116ce:	4013      	ands	r3, r2
 80116d0:	d100      	bne.n	80116d4 <HAL_RCC_OscConfig+0x280>
 80116d2:	e0a2      	b.n	801181a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d140      	bne.n	801175c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80116da:	4b2d      	ldr	r3, [pc, #180]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	2380      	movs	r3, #128	@ 0x80
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	4013      	ands	r3, r2
 80116e4:	d005      	beq.n	80116f2 <HAL_RCC_OscConfig+0x29e>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	69db      	ldr	r3, [r3, #28]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d101      	bne.n	80116f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80116ee:	2301      	movs	r3, #1
 80116f0:	e279      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80116f2:	4b27      	ldr	r3, [pc, #156]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	4a2d      	ldr	r2, [pc, #180]	@ (80117ac <HAL_RCC_OscConfig+0x358>)
 80116f8:	4013      	ands	r3, r2
 80116fa:	0019      	movs	r1, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011700:	4b23      	ldr	r3, [pc, #140]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011702:	430a      	orrs	r2, r1
 8011704:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011706:	4b22      	ldr	r3, [pc, #136]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	021b      	lsls	r3, r3, #8
 801170c:	0a19      	lsrs	r1, r3, #8
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	061a      	lsls	r2, r3, #24
 8011714:	4b1e      	ldr	r3, [pc, #120]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011716:	430a      	orrs	r2, r1
 8011718:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801171e:	0b5b      	lsrs	r3, r3, #13
 8011720:	3301      	adds	r3, #1
 8011722:	2280      	movs	r2, #128	@ 0x80
 8011724:	0212      	lsls	r2, r2, #8
 8011726:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8011728:	4b19      	ldr	r3, [pc, #100]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	091b      	lsrs	r3, r3, #4
 801172e:	210f      	movs	r1, #15
 8011730:	400b      	ands	r3, r1
 8011732:	491b      	ldr	r1, [pc, #108]	@ (80117a0 <HAL_RCC_OscConfig+0x34c>)
 8011734:	5ccb      	ldrb	r3, [r1, r3]
 8011736:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011738:	4b1a      	ldr	r3, [pc, #104]	@ (80117a4 <HAL_RCC_OscConfig+0x350>)
 801173a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801173c:	4b1a      	ldr	r3, [pc, #104]	@ (80117a8 <HAL_RCC_OscConfig+0x354>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2513      	movs	r5, #19
 8011742:	197c      	adds	r4, r7, r5
 8011744:	0018      	movs	r0, r3
 8011746:	f7fa fa41 	bl	800bbcc <HAL_InitTick>
 801174a:	0003      	movs	r3, r0
 801174c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801174e:	197b      	adds	r3, r7, r5
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d061      	beq.n	801181a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8011756:	197b      	adds	r3, r7, r5
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	e244      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	69db      	ldr	r3, [r3, #28]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d040      	beq.n	80117e6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011764:	4b0a      	ldr	r3, [pc, #40]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	4b09      	ldr	r3, [pc, #36]	@ (8011790 <HAL_RCC_OscConfig+0x33c>)
 801176a:	2180      	movs	r1, #128	@ 0x80
 801176c:	0049      	lsls	r1, r1, #1
 801176e:	430a      	orrs	r2, r1
 8011770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011772:	f7fa fa71 	bl	800bc58 <HAL_GetTick>
 8011776:	0003      	movs	r3, r0
 8011778:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801177a:	e019      	b.n	80117b0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801177c:	f7fa fa6c 	bl	800bc58 <HAL_GetTick>
 8011780:	0002      	movs	r2, r0
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	2b02      	cmp	r3, #2
 8011788:	d912      	bls.n	80117b0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801178a:	2303      	movs	r3, #3
 801178c:	e22b      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
 801178e:	46c0      	nop			@ (mov r8, r8)
 8011790:	40021000 	.word	0x40021000
 8011794:	fffeffff 	.word	0xfffeffff
 8011798:	fffbffff 	.word	0xfffbffff
 801179c:	ffffe0ff 	.word	0xffffe0ff
 80117a0:	080200dc 	.word	0x080200dc
 80117a4:	200000c8 	.word	0x200000c8
 80117a8:	200000dc 	.word	0x200000dc
 80117ac:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80117b0:	4bca      	ldr	r3, [pc, #808]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	2380      	movs	r3, #128	@ 0x80
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4013      	ands	r3, r2
 80117ba:	d0df      	beq.n	801177c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80117bc:	4bc7      	ldr	r3, [pc, #796]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	4ac7      	ldr	r2, [pc, #796]	@ (8011ae0 <HAL_RCC_OscConfig+0x68c>)
 80117c2:	4013      	ands	r3, r2
 80117c4:	0019      	movs	r1, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80117ca:	4bc4      	ldr	r3, [pc, #784]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80117cc:	430a      	orrs	r2, r1
 80117ce:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80117d0:	4bc2      	ldr	r3, [pc, #776]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	021b      	lsls	r3, r3, #8
 80117d6:	0a19      	lsrs	r1, r3, #8
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6a1b      	ldr	r3, [r3, #32]
 80117dc:	061a      	lsls	r2, r3, #24
 80117de:	4bbf      	ldr	r3, [pc, #764]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80117e0:	430a      	orrs	r2, r1
 80117e2:	605a      	str	r2, [r3, #4]
 80117e4:	e019      	b.n	801181a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80117e6:	4bbd      	ldr	r3, [pc, #756]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	4bbc      	ldr	r3, [pc, #752]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80117ec:	49bd      	ldr	r1, [pc, #756]	@ (8011ae4 <HAL_RCC_OscConfig+0x690>)
 80117ee:	400a      	ands	r2, r1
 80117f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117f2:	f7fa fa31 	bl	800bc58 <HAL_GetTick>
 80117f6:	0003      	movs	r3, r0
 80117f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80117fa:	e008      	b.n	801180e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80117fc:	f7fa fa2c 	bl	800bc58 <HAL_GetTick>
 8011800:	0002      	movs	r2, r0
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	1ad3      	subs	r3, r2, r3
 8011806:	2b02      	cmp	r3, #2
 8011808:	d901      	bls.n	801180e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801180a:	2303      	movs	r3, #3
 801180c:	e1eb      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801180e:	4bb3      	ldr	r3, [pc, #716]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	2380      	movs	r3, #128	@ 0x80
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	4013      	ands	r3, r2
 8011818:	d1f0      	bne.n	80117fc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2208      	movs	r2, #8
 8011820:	4013      	ands	r3, r2
 8011822:	d036      	beq.n	8011892 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	695b      	ldr	r3, [r3, #20]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d019      	beq.n	8011860 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801182c:	4bab      	ldr	r3, [pc, #684]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 801182e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011830:	4baa      	ldr	r3, [pc, #680]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011832:	2101      	movs	r1, #1
 8011834:	430a      	orrs	r2, r1
 8011836:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011838:	f7fa fa0e 	bl	800bc58 <HAL_GetTick>
 801183c:	0003      	movs	r3, r0
 801183e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011840:	e008      	b.n	8011854 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011842:	f7fa fa09 	bl	800bc58 <HAL_GetTick>
 8011846:	0002      	movs	r2, r0
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	1ad3      	subs	r3, r2, r3
 801184c:	2b02      	cmp	r3, #2
 801184e:	d901      	bls.n	8011854 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8011850:	2303      	movs	r3, #3
 8011852:	e1c8      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011854:	4ba1      	ldr	r3, [pc, #644]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011858:	2202      	movs	r2, #2
 801185a:	4013      	ands	r3, r2
 801185c:	d0f1      	beq.n	8011842 <HAL_RCC_OscConfig+0x3ee>
 801185e:	e018      	b.n	8011892 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011860:	4b9e      	ldr	r3, [pc, #632]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011862:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011864:	4b9d      	ldr	r3, [pc, #628]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011866:	2101      	movs	r1, #1
 8011868:	438a      	bics	r2, r1
 801186a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801186c:	f7fa f9f4 	bl	800bc58 <HAL_GetTick>
 8011870:	0003      	movs	r3, r0
 8011872:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011874:	e008      	b.n	8011888 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011876:	f7fa f9ef 	bl	800bc58 <HAL_GetTick>
 801187a:	0002      	movs	r2, r0
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	1ad3      	subs	r3, r2, r3
 8011880:	2b02      	cmp	r3, #2
 8011882:	d901      	bls.n	8011888 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8011884:	2303      	movs	r3, #3
 8011886:	e1ae      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011888:	4b94      	ldr	r3, [pc, #592]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 801188a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801188c:	2202      	movs	r2, #2
 801188e:	4013      	ands	r3, r2
 8011890:	d1f1      	bne.n	8011876 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	2204      	movs	r2, #4
 8011898:	4013      	ands	r3, r2
 801189a:	d100      	bne.n	801189e <HAL_RCC_OscConfig+0x44a>
 801189c:	e0ae      	b.n	80119fc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801189e:	2023      	movs	r0, #35	@ 0x23
 80118a0:	183b      	adds	r3, r7, r0
 80118a2:	2200      	movs	r2, #0
 80118a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80118a6:	4b8d      	ldr	r3, [pc, #564]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80118a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118aa:	2380      	movs	r3, #128	@ 0x80
 80118ac:	055b      	lsls	r3, r3, #21
 80118ae:	4013      	ands	r3, r2
 80118b0:	d109      	bne.n	80118c6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80118b2:	4b8a      	ldr	r3, [pc, #552]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80118b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118b6:	4b89      	ldr	r3, [pc, #548]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80118b8:	2180      	movs	r1, #128	@ 0x80
 80118ba:	0549      	lsls	r1, r1, #21
 80118bc:	430a      	orrs	r2, r1
 80118be:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80118c0:	183b      	adds	r3, r7, r0
 80118c2:	2201      	movs	r2, #1
 80118c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118c6:	4b88      	ldr	r3, [pc, #544]	@ (8011ae8 <HAL_RCC_OscConfig+0x694>)
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	2380      	movs	r3, #128	@ 0x80
 80118cc:	005b      	lsls	r3, r3, #1
 80118ce:	4013      	ands	r3, r2
 80118d0:	d11a      	bne.n	8011908 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80118d2:	4b85      	ldr	r3, [pc, #532]	@ (8011ae8 <HAL_RCC_OscConfig+0x694>)
 80118d4:	681a      	ldr	r2, [r3, #0]
 80118d6:	4b84      	ldr	r3, [pc, #528]	@ (8011ae8 <HAL_RCC_OscConfig+0x694>)
 80118d8:	2180      	movs	r1, #128	@ 0x80
 80118da:	0049      	lsls	r1, r1, #1
 80118dc:	430a      	orrs	r2, r1
 80118de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80118e0:	f7fa f9ba 	bl	800bc58 <HAL_GetTick>
 80118e4:	0003      	movs	r3, r0
 80118e6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118e8:	e008      	b.n	80118fc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80118ea:	f7fa f9b5 	bl	800bc58 <HAL_GetTick>
 80118ee:	0002      	movs	r2, r0
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	2b64      	cmp	r3, #100	@ 0x64
 80118f6:	d901      	bls.n	80118fc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80118f8:	2303      	movs	r3, #3
 80118fa:	e174      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118fc:	4b7a      	ldr	r3, [pc, #488]	@ (8011ae8 <HAL_RCC_OscConfig+0x694>)
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	2380      	movs	r3, #128	@ 0x80
 8011902:	005b      	lsls	r3, r3, #1
 8011904:	4013      	ands	r3, r2
 8011906:	d0f0      	beq.n	80118ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	689a      	ldr	r2, [r3, #8]
 801190c:	2380      	movs	r3, #128	@ 0x80
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	429a      	cmp	r2, r3
 8011912:	d107      	bne.n	8011924 <HAL_RCC_OscConfig+0x4d0>
 8011914:	4b71      	ldr	r3, [pc, #452]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011918:	4b70      	ldr	r3, [pc, #448]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 801191a:	2180      	movs	r1, #128	@ 0x80
 801191c:	0049      	lsls	r1, r1, #1
 801191e:	430a      	orrs	r2, r1
 8011920:	651a      	str	r2, [r3, #80]	@ 0x50
 8011922:	e031      	b.n	8011988 <HAL_RCC_OscConfig+0x534>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d10c      	bne.n	8011946 <HAL_RCC_OscConfig+0x4f2>
 801192c:	4b6b      	ldr	r3, [pc, #428]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 801192e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011930:	4b6a      	ldr	r3, [pc, #424]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011932:	496c      	ldr	r1, [pc, #432]	@ (8011ae4 <HAL_RCC_OscConfig+0x690>)
 8011934:	400a      	ands	r2, r1
 8011936:	651a      	str	r2, [r3, #80]	@ 0x50
 8011938:	4b68      	ldr	r3, [pc, #416]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 801193a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801193c:	4b67      	ldr	r3, [pc, #412]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 801193e:	496b      	ldr	r1, [pc, #428]	@ (8011aec <HAL_RCC_OscConfig+0x698>)
 8011940:	400a      	ands	r2, r1
 8011942:	651a      	str	r2, [r3, #80]	@ 0x50
 8011944:	e020      	b.n	8011988 <HAL_RCC_OscConfig+0x534>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	689a      	ldr	r2, [r3, #8]
 801194a:	23a0      	movs	r3, #160	@ 0xa0
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	429a      	cmp	r2, r3
 8011950:	d10e      	bne.n	8011970 <HAL_RCC_OscConfig+0x51c>
 8011952:	4b62      	ldr	r3, [pc, #392]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011954:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011956:	4b61      	ldr	r3, [pc, #388]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011958:	2180      	movs	r1, #128	@ 0x80
 801195a:	00c9      	lsls	r1, r1, #3
 801195c:	430a      	orrs	r2, r1
 801195e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011960:	4b5e      	ldr	r3, [pc, #376]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011962:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011964:	4b5d      	ldr	r3, [pc, #372]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011966:	2180      	movs	r1, #128	@ 0x80
 8011968:	0049      	lsls	r1, r1, #1
 801196a:	430a      	orrs	r2, r1
 801196c:	651a      	str	r2, [r3, #80]	@ 0x50
 801196e:	e00b      	b.n	8011988 <HAL_RCC_OscConfig+0x534>
 8011970:	4b5a      	ldr	r3, [pc, #360]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011974:	4b59      	ldr	r3, [pc, #356]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011976:	495b      	ldr	r1, [pc, #364]	@ (8011ae4 <HAL_RCC_OscConfig+0x690>)
 8011978:	400a      	ands	r2, r1
 801197a:	651a      	str	r2, [r3, #80]	@ 0x50
 801197c:	4b57      	ldr	r3, [pc, #348]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 801197e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011980:	4b56      	ldr	r3, [pc, #344]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011982:	495a      	ldr	r1, [pc, #360]	@ (8011aec <HAL_RCC_OscConfig+0x698>)
 8011984:	400a      	ands	r2, r1
 8011986:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	689b      	ldr	r3, [r3, #8]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d015      	beq.n	80119bc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011990:	f7fa f962 	bl	800bc58 <HAL_GetTick>
 8011994:	0003      	movs	r3, r0
 8011996:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011998:	e009      	b.n	80119ae <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801199a:	f7fa f95d 	bl	800bc58 <HAL_GetTick>
 801199e:	0002      	movs	r2, r0
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	4a52      	ldr	r2, [pc, #328]	@ (8011af0 <HAL_RCC_OscConfig+0x69c>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d901      	bls.n	80119ae <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80119aa:	2303      	movs	r3, #3
 80119ac:	e11b      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80119ae:	4b4b      	ldr	r3, [pc, #300]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80119b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80119b2:	2380      	movs	r3, #128	@ 0x80
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	4013      	ands	r3, r2
 80119b8:	d0ef      	beq.n	801199a <HAL_RCC_OscConfig+0x546>
 80119ba:	e014      	b.n	80119e6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80119bc:	f7fa f94c 	bl	800bc58 <HAL_GetTick>
 80119c0:	0003      	movs	r3, r0
 80119c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80119c4:	e009      	b.n	80119da <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80119c6:	f7fa f947 	bl	800bc58 <HAL_GetTick>
 80119ca:	0002      	movs	r2, r0
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	4a47      	ldr	r2, [pc, #284]	@ (8011af0 <HAL_RCC_OscConfig+0x69c>)
 80119d2:	4293      	cmp	r3, r2
 80119d4:	d901      	bls.n	80119da <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80119d6:	2303      	movs	r3, #3
 80119d8:	e105      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80119da:	4b40      	ldr	r3, [pc, #256]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80119dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80119de:	2380      	movs	r3, #128	@ 0x80
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	4013      	ands	r3, r2
 80119e4:	d1ef      	bne.n	80119c6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80119e6:	2323      	movs	r3, #35	@ 0x23
 80119e8:	18fb      	adds	r3, r7, r3
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d105      	bne.n	80119fc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80119f0:	4b3a      	ldr	r3, [pc, #232]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80119f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119f4:	4b39      	ldr	r3, [pc, #228]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 80119f6:	493f      	ldr	r1, [pc, #252]	@ (8011af4 <HAL_RCC_OscConfig+0x6a0>)
 80119f8:	400a      	ands	r2, r1
 80119fa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2220      	movs	r2, #32
 8011a02:	4013      	ands	r3, r2
 8011a04:	d049      	beq.n	8011a9a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	699b      	ldr	r3, [r3, #24]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d026      	beq.n	8011a5c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011a0e:	4b33      	ldr	r3, [pc, #204]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a10:	689a      	ldr	r2, [r3, #8]
 8011a12:	4b32      	ldr	r3, [pc, #200]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a14:	2101      	movs	r1, #1
 8011a16:	430a      	orrs	r2, r1
 8011a18:	609a      	str	r2, [r3, #8]
 8011a1a:	4b30      	ldr	r3, [pc, #192]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a20:	2101      	movs	r1, #1
 8011a22:	430a      	orrs	r2, r1
 8011a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8011a26:	4b34      	ldr	r3, [pc, #208]	@ (8011af8 <HAL_RCC_OscConfig+0x6a4>)
 8011a28:	6a1a      	ldr	r2, [r3, #32]
 8011a2a:	4b33      	ldr	r3, [pc, #204]	@ (8011af8 <HAL_RCC_OscConfig+0x6a4>)
 8011a2c:	2180      	movs	r1, #128	@ 0x80
 8011a2e:	0189      	lsls	r1, r1, #6
 8011a30:	430a      	orrs	r2, r1
 8011a32:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a34:	f7fa f910 	bl	800bc58 <HAL_GetTick>
 8011a38:	0003      	movs	r3, r0
 8011a3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011a3c:	e008      	b.n	8011a50 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011a3e:	f7fa f90b 	bl	800bc58 <HAL_GetTick>
 8011a42:	0002      	movs	r2, r0
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	2b02      	cmp	r3, #2
 8011a4a:	d901      	bls.n	8011a50 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8011a4c:	2303      	movs	r3, #3
 8011a4e:	e0ca      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011a50:	4b22      	ldr	r3, [pc, #136]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a52:	689b      	ldr	r3, [r3, #8]
 8011a54:	2202      	movs	r2, #2
 8011a56:	4013      	ands	r3, r2
 8011a58:	d0f1      	beq.n	8011a3e <HAL_RCC_OscConfig+0x5ea>
 8011a5a:	e01e      	b.n	8011a9a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8011a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a5e:	689a      	ldr	r2, [r3, #8]
 8011a60:	4b1e      	ldr	r3, [pc, #120]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a62:	2101      	movs	r1, #1
 8011a64:	438a      	bics	r2, r1
 8011a66:	609a      	str	r2, [r3, #8]
 8011a68:	4b23      	ldr	r3, [pc, #140]	@ (8011af8 <HAL_RCC_OscConfig+0x6a4>)
 8011a6a:	6a1a      	ldr	r2, [r3, #32]
 8011a6c:	4b22      	ldr	r3, [pc, #136]	@ (8011af8 <HAL_RCC_OscConfig+0x6a4>)
 8011a6e:	4923      	ldr	r1, [pc, #140]	@ (8011afc <HAL_RCC_OscConfig+0x6a8>)
 8011a70:	400a      	ands	r2, r1
 8011a72:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a74:	f7fa f8f0 	bl	800bc58 <HAL_GetTick>
 8011a78:	0003      	movs	r3, r0
 8011a7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011a7c:	e008      	b.n	8011a90 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011a7e:	f7fa f8eb 	bl	800bc58 <HAL_GetTick>
 8011a82:	0002      	movs	r2, r0
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	1ad3      	subs	r3, r2, r3
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d901      	bls.n	8011a90 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8011a8c:	2303      	movs	r3, #3
 8011a8e:	e0aa      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011a90:	4b12      	ldr	r3, [pc, #72]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	2202      	movs	r2, #2
 8011a96:	4013      	ands	r3, r2
 8011a98:	d1f1      	bne.n	8011a7e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d100      	bne.n	8011aa4 <HAL_RCC_OscConfig+0x650>
 8011aa2:	e09f      	b.n	8011be4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	2b0c      	cmp	r3, #12
 8011aa8:	d100      	bne.n	8011aac <HAL_RCC_OscConfig+0x658>
 8011aaa:	e078      	b.n	8011b9e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ab0:	2b02      	cmp	r3, #2
 8011ab2:	d159      	bne.n	8011b68 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011ab4:	4b09      	ldr	r3, [pc, #36]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	4b08      	ldr	r3, [pc, #32]	@ (8011adc <HAL_RCC_OscConfig+0x688>)
 8011aba:	4911      	ldr	r1, [pc, #68]	@ (8011b00 <HAL_RCC_OscConfig+0x6ac>)
 8011abc:	400a      	ands	r2, r1
 8011abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ac0:	f7fa f8ca 	bl	800bc58 <HAL_GetTick>
 8011ac4:	0003      	movs	r3, r0
 8011ac6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011ac8:	e01c      	b.n	8011b04 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011aca:	f7fa f8c5 	bl	800bc58 <HAL_GetTick>
 8011ace:	0002      	movs	r2, r0
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	1ad3      	subs	r3, r2, r3
 8011ad4:	2b02      	cmp	r3, #2
 8011ad6:	d915      	bls.n	8011b04 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	e084      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
 8011adc:	40021000 	.word	0x40021000
 8011ae0:	ffff1fff 	.word	0xffff1fff
 8011ae4:	fffffeff 	.word	0xfffffeff
 8011ae8:	40007000 	.word	0x40007000
 8011aec:	fffffbff 	.word	0xfffffbff
 8011af0:	00001388 	.word	0x00001388
 8011af4:	efffffff 	.word	0xefffffff
 8011af8:	40010000 	.word	0x40010000
 8011afc:	ffffdfff 	.word	0xffffdfff
 8011b00:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011b04:	4b3a      	ldr	r3, [pc, #232]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	2380      	movs	r3, #128	@ 0x80
 8011b0a:	049b      	lsls	r3, r3, #18
 8011b0c:	4013      	ands	r3, r2
 8011b0e:	d1dc      	bne.n	8011aca <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011b10:	4b37      	ldr	r3, [pc, #220]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	4a37      	ldr	r2, [pc, #220]	@ (8011bf4 <HAL_RCC_OscConfig+0x7a0>)
 8011b16:	4013      	ands	r3, r2
 8011b18:	0019      	movs	r1, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b22:	431a      	orrs	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b28:	431a      	orrs	r2, r3
 8011b2a:	4b31      	ldr	r3, [pc, #196]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b2c:	430a      	orrs	r2, r1
 8011b2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011b30:	4b2f      	ldr	r3, [pc, #188]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	4b2e      	ldr	r3, [pc, #184]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b36:	2180      	movs	r1, #128	@ 0x80
 8011b38:	0449      	lsls	r1, r1, #17
 8011b3a:	430a      	orrs	r2, r1
 8011b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b3e:	f7fa f88b 	bl	800bc58 <HAL_GetTick>
 8011b42:	0003      	movs	r3, r0
 8011b44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011b46:	e008      	b.n	8011b5a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b48:	f7fa f886 	bl	800bc58 <HAL_GetTick>
 8011b4c:	0002      	movs	r2, r0
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	2b02      	cmp	r3, #2
 8011b54:	d901      	bls.n	8011b5a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8011b56:	2303      	movs	r3, #3
 8011b58:	e045      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011b5a:	4b25      	ldr	r3, [pc, #148]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	2380      	movs	r3, #128	@ 0x80
 8011b60:	049b      	lsls	r3, r3, #18
 8011b62:	4013      	ands	r3, r2
 8011b64:	d0f0      	beq.n	8011b48 <HAL_RCC_OscConfig+0x6f4>
 8011b66:	e03d      	b.n	8011be4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011b68:	4b21      	ldr	r3, [pc, #132]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	4b20      	ldr	r3, [pc, #128]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b6e:	4922      	ldr	r1, [pc, #136]	@ (8011bf8 <HAL_RCC_OscConfig+0x7a4>)
 8011b70:	400a      	ands	r2, r1
 8011b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b74:	f7fa f870 	bl	800bc58 <HAL_GetTick>
 8011b78:	0003      	movs	r3, r0
 8011b7a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011b7c:	e008      	b.n	8011b90 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b7e:	f7fa f86b 	bl	800bc58 <HAL_GetTick>
 8011b82:	0002      	movs	r2, r0
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	1ad3      	subs	r3, r2, r3
 8011b88:	2b02      	cmp	r3, #2
 8011b8a:	d901      	bls.n	8011b90 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8011b8c:	2303      	movs	r3, #3
 8011b8e:	e02a      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011b90:	4b17      	ldr	r3, [pc, #92]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	2380      	movs	r3, #128	@ 0x80
 8011b96:	049b      	lsls	r3, r3, #18
 8011b98:	4013      	ands	r3, r2
 8011b9a:	d1f0      	bne.n	8011b7e <HAL_RCC_OscConfig+0x72a>
 8011b9c:	e022      	b.n	8011be4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d101      	bne.n	8011baa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e01d      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011baa:	4b11      	ldr	r3, [pc, #68]	@ (8011bf0 <HAL_RCC_OscConfig+0x79c>)
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011bb0:	69ba      	ldr	r2, [r7, #24]
 8011bb2:	2380      	movs	r3, #128	@ 0x80
 8011bb4:	025b      	lsls	r3, r3, #9
 8011bb6:	401a      	ands	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d10f      	bne.n	8011be0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011bc0:	69ba      	ldr	r2, [r7, #24]
 8011bc2:	23f0      	movs	r3, #240	@ 0xf0
 8011bc4:	039b      	lsls	r3, r3, #14
 8011bc6:	401a      	ands	r2, r3
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d107      	bne.n	8011be0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8011bd0:	69ba      	ldr	r2, [r7, #24]
 8011bd2:	23c0      	movs	r3, #192	@ 0xc0
 8011bd4:	041b      	lsls	r3, r3, #16
 8011bd6:	401a      	ands	r2, r3
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d001      	beq.n	8011be4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8011be0:	2301      	movs	r3, #1
 8011be2:	e000      	b.n	8011be6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	0018      	movs	r0, r3
 8011be8:	46bd      	mov	sp, r7
 8011bea:	b00a      	add	sp, #40	@ 0x28
 8011bec:	bdb0      	pop	{r4, r5, r7, pc}
 8011bee:	46c0      	nop			@ (mov r8, r8)
 8011bf0:	40021000 	.word	0x40021000
 8011bf4:	ff02ffff 	.word	0xff02ffff
 8011bf8:	feffffff 	.word	0xfeffffff

08011bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011bfc:	b5b0      	push	{r4, r5, r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e128      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011c10:	4b96      	ldr	r3, [pc, #600]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2201      	movs	r2, #1
 8011c16:	4013      	ands	r3, r2
 8011c18:	683a      	ldr	r2, [r7, #0]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d91e      	bls.n	8011c5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011c1e:	4b93      	ldr	r3, [pc, #588]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	2201      	movs	r2, #1
 8011c24:	4393      	bics	r3, r2
 8011c26:	0019      	movs	r1, r3
 8011c28:	4b90      	ldr	r3, [pc, #576]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011c2a:	683a      	ldr	r2, [r7, #0]
 8011c2c:	430a      	orrs	r2, r1
 8011c2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011c30:	f7fa f812 	bl	800bc58 <HAL_GetTick>
 8011c34:	0003      	movs	r3, r0
 8011c36:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011c38:	e009      	b.n	8011c4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c3a:	f7fa f80d 	bl	800bc58 <HAL_GetTick>
 8011c3e:	0002      	movs	r2, r0
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	4a8a      	ldr	r2, [pc, #552]	@ (8011e70 <HAL_RCC_ClockConfig+0x274>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d901      	bls.n	8011c4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8011c4a:	2303      	movs	r3, #3
 8011c4c:	e109      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011c4e:	4b87      	ldr	r3, [pc, #540]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2201      	movs	r2, #1
 8011c54:	4013      	ands	r3, r2
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d1ee      	bne.n	8011c3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	2202      	movs	r2, #2
 8011c62:	4013      	ands	r3, r2
 8011c64:	d009      	beq.n	8011c7a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c66:	4b83      	ldr	r3, [pc, #524]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	22f0      	movs	r2, #240	@ 0xf0
 8011c6c:	4393      	bics	r3, r2
 8011c6e:	0019      	movs	r1, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	689a      	ldr	r2, [r3, #8]
 8011c74:	4b7f      	ldr	r3, [pc, #508]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011c76:	430a      	orrs	r2, r1
 8011c78:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	2201      	movs	r2, #1
 8011c80:	4013      	ands	r3, r2
 8011c82:	d100      	bne.n	8011c86 <HAL_RCC_ClockConfig+0x8a>
 8011c84:	e089      	b.n	8011d9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d107      	bne.n	8011c9e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011c8e:	4b79      	ldr	r3, [pc, #484]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	2380      	movs	r3, #128	@ 0x80
 8011c94:	029b      	lsls	r3, r3, #10
 8011c96:	4013      	ands	r3, r2
 8011c98:	d120      	bne.n	8011cdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e0e1      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	2b03      	cmp	r3, #3
 8011ca4:	d107      	bne.n	8011cb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011ca6:	4b73      	ldr	r3, [pc, #460]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	2380      	movs	r3, #128	@ 0x80
 8011cac:	049b      	lsls	r3, r3, #18
 8011cae:	4013      	ands	r3, r2
 8011cb0:	d114      	bne.n	8011cdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e0d5      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d106      	bne.n	8011ccc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2204      	movs	r2, #4
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	d109      	bne.n	8011cdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e0ca      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011ccc:	4b69      	ldr	r3, [pc, #420]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	2380      	movs	r3, #128	@ 0x80
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	4013      	ands	r3, r2
 8011cd6:	d101      	bne.n	8011cdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	e0c2      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011cdc:	4b65      	ldr	r3, [pc, #404]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	2203      	movs	r2, #3
 8011ce2:	4393      	bics	r3, r2
 8011ce4:	0019      	movs	r1, r3
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	685a      	ldr	r2, [r3, #4]
 8011cea:	4b62      	ldr	r3, [pc, #392]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011cec:	430a      	orrs	r2, r1
 8011cee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011cf0:	f7f9 ffb2 	bl	800bc58 <HAL_GetTick>
 8011cf4:	0003      	movs	r3, r0
 8011cf6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	2b02      	cmp	r3, #2
 8011cfe:	d111      	bne.n	8011d24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d00:	e009      	b.n	8011d16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d02:	f7f9 ffa9 	bl	800bc58 <HAL_GetTick>
 8011d06:	0002      	movs	r2, r0
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	4a58      	ldr	r2, [pc, #352]	@ (8011e70 <HAL_RCC_ClockConfig+0x274>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d901      	bls.n	8011d16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8011d12:	2303      	movs	r3, #3
 8011d14:	e0a5      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d16:	4b57      	ldr	r3, [pc, #348]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	220c      	movs	r2, #12
 8011d1c:	4013      	ands	r3, r2
 8011d1e:	2b08      	cmp	r3, #8
 8011d20:	d1ef      	bne.n	8011d02 <HAL_RCC_ClockConfig+0x106>
 8011d22:	e03a      	b.n	8011d9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	2b03      	cmp	r3, #3
 8011d2a:	d111      	bne.n	8011d50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d2c:	e009      	b.n	8011d42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d2e:	f7f9 ff93 	bl	800bc58 <HAL_GetTick>
 8011d32:	0002      	movs	r2, r0
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	1ad3      	subs	r3, r2, r3
 8011d38:	4a4d      	ldr	r2, [pc, #308]	@ (8011e70 <HAL_RCC_ClockConfig+0x274>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d901      	bls.n	8011d42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8011d3e:	2303      	movs	r3, #3
 8011d40:	e08f      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d42:	4b4c      	ldr	r3, [pc, #304]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011d44:	68db      	ldr	r3, [r3, #12]
 8011d46:	220c      	movs	r2, #12
 8011d48:	4013      	ands	r3, r2
 8011d4a:	2b0c      	cmp	r3, #12
 8011d4c:	d1ef      	bne.n	8011d2e <HAL_RCC_ClockConfig+0x132>
 8011d4e:	e024      	b.n	8011d9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d11b      	bne.n	8011d90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011d58:	e009      	b.n	8011d6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d5a:	f7f9 ff7d 	bl	800bc58 <HAL_GetTick>
 8011d5e:	0002      	movs	r2, r0
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	4a42      	ldr	r2, [pc, #264]	@ (8011e70 <HAL_RCC_ClockConfig+0x274>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d901      	bls.n	8011d6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	e079      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011d6e:	4b41      	ldr	r3, [pc, #260]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011d70:	68db      	ldr	r3, [r3, #12]
 8011d72:	220c      	movs	r2, #12
 8011d74:	4013      	ands	r3, r2
 8011d76:	2b04      	cmp	r3, #4
 8011d78:	d1ef      	bne.n	8011d5a <HAL_RCC_ClockConfig+0x15e>
 8011d7a:	e00e      	b.n	8011d9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d7c:	f7f9 ff6c 	bl	800bc58 <HAL_GetTick>
 8011d80:	0002      	movs	r2, r0
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	4a3a      	ldr	r2, [pc, #232]	@ (8011e70 <HAL_RCC_ClockConfig+0x274>)
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d901      	bls.n	8011d90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8011d8c:	2303      	movs	r3, #3
 8011d8e:	e068      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8011d90:	4b38      	ldr	r3, [pc, #224]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	220c      	movs	r2, #12
 8011d96:	4013      	ands	r3, r2
 8011d98:	d1f0      	bne.n	8011d7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011d9a:	4b34      	ldr	r3, [pc, #208]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2201      	movs	r2, #1
 8011da0:	4013      	ands	r3, r2
 8011da2:	683a      	ldr	r2, [r7, #0]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d21e      	bcs.n	8011de6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011da8:	4b30      	ldr	r3, [pc, #192]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2201      	movs	r2, #1
 8011dae:	4393      	bics	r3, r2
 8011db0:	0019      	movs	r1, r3
 8011db2:	4b2e      	ldr	r3, [pc, #184]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011db4:	683a      	ldr	r2, [r7, #0]
 8011db6:	430a      	orrs	r2, r1
 8011db8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011dba:	f7f9 ff4d 	bl	800bc58 <HAL_GetTick>
 8011dbe:	0003      	movs	r3, r0
 8011dc0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011dc2:	e009      	b.n	8011dd8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dc4:	f7f9 ff48 	bl	800bc58 <HAL_GetTick>
 8011dc8:	0002      	movs	r2, r0
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	4a28      	ldr	r2, [pc, #160]	@ (8011e70 <HAL_RCC_ClockConfig+0x274>)
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d901      	bls.n	8011dd8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8011dd4:	2303      	movs	r3, #3
 8011dd6:	e044      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011dd8:	4b24      	ldr	r3, [pc, #144]	@ (8011e6c <HAL_RCC_ClockConfig+0x270>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	4013      	ands	r3, r2
 8011de0:	683a      	ldr	r2, [r7, #0]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d1ee      	bne.n	8011dc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2204      	movs	r2, #4
 8011dec:	4013      	ands	r3, r2
 8011dee:	d009      	beq.n	8011e04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011df0:	4b20      	ldr	r3, [pc, #128]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	4a20      	ldr	r2, [pc, #128]	@ (8011e78 <HAL_RCC_ClockConfig+0x27c>)
 8011df6:	4013      	ands	r3, r2
 8011df8:	0019      	movs	r1, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	68da      	ldr	r2, [r3, #12]
 8011dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011e00:	430a      	orrs	r2, r1
 8011e02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	2208      	movs	r2, #8
 8011e0a:	4013      	ands	r3, r2
 8011e0c:	d00a      	beq.n	8011e24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8011e0e:	4b19      	ldr	r3, [pc, #100]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	4a1a      	ldr	r2, [pc, #104]	@ (8011e7c <HAL_RCC_ClockConfig+0x280>)
 8011e14:	4013      	ands	r3, r2
 8011e16:	0019      	movs	r1, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	691b      	ldr	r3, [r3, #16]
 8011e1c:	00da      	lsls	r2, r3, #3
 8011e1e:	4b15      	ldr	r3, [pc, #84]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011e20:	430a      	orrs	r2, r1
 8011e22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011e24:	f000 f832 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 8011e28:	0001      	movs	r1, r0
 8011e2a:	4b12      	ldr	r3, [pc, #72]	@ (8011e74 <HAL_RCC_ClockConfig+0x278>)
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	091b      	lsrs	r3, r3, #4
 8011e30:	220f      	movs	r2, #15
 8011e32:	4013      	ands	r3, r2
 8011e34:	4a12      	ldr	r2, [pc, #72]	@ (8011e80 <HAL_RCC_ClockConfig+0x284>)
 8011e36:	5cd3      	ldrb	r3, [r2, r3]
 8011e38:	000a      	movs	r2, r1
 8011e3a:	40da      	lsrs	r2, r3
 8011e3c:	4b11      	ldr	r3, [pc, #68]	@ (8011e84 <HAL_RCC_ClockConfig+0x288>)
 8011e3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011e40:	4b11      	ldr	r3, [pc, #68]	@ (8011e88 <HAL_RCC_ClockConfig+0x28c>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	250b      	movs	r5, #11
 8011e46:	197c      	adds	r4, r7, r5
 8011e48:	0018      	movs	r0, r3
 8011e4a:	f7f9 febf 	bl	800bbcc <HAL_InitTick>
 8011e4e:	0003      	movs	r3, r0
 8011e50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8011e52:	197b      	adds	r3, r7, r5
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d002      	beq.n	8011e60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8011e5a:	197b      	adds	r3, r7, r5
 8011e5c:	781b      	ldrb	r3, [r3, #0]
 8011e5e:	e000      	b.n	8011e62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8011e60:	2300      	movs	r3, #0
}
 8011e62:	0018      	movs	r0, r3
 8011e64:	46bd      	mov	sp, r7
 8011e66:	b004      	add	sp, #16
 8011e68:	bdb0      	pop	{r4, r5, r7, pc}
 8011e6a:	46c0      	nop			@ (mov r8, r8)
 8011e6c:	40022000 	.word	0x40022000
 8011e70:	00001388 	.word	0x00001388
 8011e74:	40021000 	.word	0x40021000
 8011e78:	fffff8ff 	.word	0xfffff8ff
 8011e7c:	ffffc7ff 	.word	0xffffc7ff
 8011e80:	080200dc 	.word	0x080200dc
 8011e84:	200000c8 	.word	0x200000c8
 8011e88:	200000dc 	.word	0x200000dc

08011e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011e8c:	b5b0      	push	{r4, r5, r7, lr}
 8011e8e:	b08e      	sub	sp, #56	@ 0x38
 8011e90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8011e92:	4b4c      	ldr	r3, [pc, #304]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e9a:	230c      	movs	r3, #12
 8011e9c:	4013      	ands	r3, r2
 8011e9e:	2b0c      	cmp	r3, #12
 8011ea0:	d014      	beq.n	8011ecc <HAL_RCC_GetSysClockFreq+0x40>
 8011ea2:	d900      	bls.n	8011ea6 <HAL_RCC_GetSysClockFreq+0x1a>
 8011ea4:	e07b      	b.n	8011f9e <HAL_RCC_GetSysClockFreq+0x112>
 8011ea6:	2b04      	cmp	r3, #4
 8011ea8:	d002      	beq.n	8011eb0 <HAL_RCC_GetSysClockFreq+0x24>
 8011eaa:	2b08      	cmp	r3, #8
 8011eac:	d00b      	beq.n	8011ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8011eae:	e076      	b.n	8011f9e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8011eb0:	4b44      	ldr	r3, [pc, #272]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	2210      	movs	r2, #16
 8011eb6:	4013      	ands	r3, r2
 8011eb8:	d002      	beq.n	8011ec0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8011eba:	4b43      	ldr	r3, [pc, #268]	@ (8011fc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8011ebc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8011ebe:	e07c      	b.n	8011fba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8011ec0:	4b42      	ldr	r3, [pc, #264]	@ (8011fcc <HAL_RCC_GetSysClockFreq+0x140>)
 8011ec2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011ec4:	e079      	b.n	8011fba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011ec6:	4b42      	ldr	r3, [pc, #264]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8011ec8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011eca:	e076      	b.n	8011fba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8011ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ece:	0c9a      	lsrs	r2, r3, #18
 8011ed0:	230f      	movs	r3, #15
 8011ed2:	401a      	ands	r2, r3
 8011ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8011fd4 <HAL_RCC_GetSysClockFreq+0x148>)
 8011ed6:	5c9b      	ldrb	r3, [r3, r2]
 8011ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8011eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011edc:	0d9a      	lsrs	r2, r3, #22
 8011ede:	2303      	movs	r3, #3
 8011ee0:	4013      	ands	r3, r2
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011ee6:	4b37      	ldr	r3, [pc, #220]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8011ee8:	68da      	ldr	r2, [r3, #12]
 8011eea:	2380      	movs	r3, #128	@ 0x80
 8011eec:	025b      	lsls	r3, r3, #9
 8011eee:	4013      	ands	r3, r2
 8011ef0:	d01a      	beq.n	8011f28 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8011ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ef4:	61bb      	str	r3, [r7, #24]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	61fb      	str	r3, [r7, #28]
 8011efa:	4a35      	ldr	r2, [pc, #212]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8011efc:	2300      	movs	r3, #0
 8011efe:	69b8      	ldr	r0, [r7, #24]
 8011f00:	69f9      	ldr	r1, [r7, #28]
 8011f02:	f7ee fb5d 	bl	80005c0 <__aeabi_lmul>
 8011f06:	0002      	movs	r2, r0
 8011f08:	000b      	movs	r3, r1
 8011f0a:	0010      	movs	r0, r2
 8011f0c:	0019      	movs	r1, r3
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f10:	613b      	str	r3, [r7, #16]
 8011f12:	2300      	movs	r3, #0
 8011f14:	617b      	str	r3, [r7, #20]
 8011f16:	693a      	ldr	r2, [r7, #16]
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	f7ee fb31 	bl	8000580 <__aeabi_uldivmod>
 8011f1e:	0002      	movs	r2, r0
 8011f20:	000b      	movs	r3, r1
 8011f22:	0013      	movs	r3, r2
 8011f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f26:	e037      	b.n	8011f98 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8011f28:	4b26      	ldr	r3, [pc, #152]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2210      	movs	r2, #16
 8011f2e:	4013      	ands	r3, r2
 8011f30:	d01a      	beq.n	8011f68 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8011f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f34:	60bb      	str	r3, [r7, #8]
 8011f36:	2300      	movs	r3, #0
 8011f38:	60fb      	str	r3, [r7, #12]
 8011f3a:	4a23      	ldr	r2, [pc, #140]	@ (8011fc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	68b8      	ldr	r0, [r7, #8]
 8011f40:	68f9      	ldr	r1, [r7, #12]
 8011f42:	f7ee fb3d 	bl	80005c0 <__aeabi_lmul>
 8011f46:	0002      	movs	r2, r0
 8011f48:	000b      	movs	r3, r1
 8011f4a:	0010      	movs	r0, r2
 8011f4c:	0019      	movs	r1, r3
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f50:	603b      	str	r3, [r7, #0]
 8011f52:	2300      	movs	r3, #0
 8011f54:	607b      	str	r3, [r7, #4]
 8011f56:	683a      	ldr	r2, [r7, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f7ee fb11 	bl	8000580 <__aeabi_uldivmod>
 8011f5e:	0002      	movs	r2, r0
 8011f60:	000b      	movs	r3, r1
 8011f62:	0013      	movs	r3, r2
 8011f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f66:	e017      	b.n	8011f98 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8011f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f6a:	0018      	movs	r0, r3
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	0019      	movs	r1, r3
 8011f70:	4a16      	ldr	r2, [pc, #88]	@ (8011fcc <HAL_RCC_GetSysClockFreq+0x140>)
 8011f72:	2300      	movs	r3, #0
 8011f74:	f7ee fb24 	bl	80005c0 <__aeabi_lmul>
 8011f78:	0002      	movs	r2, r0
 8011f7a:	000b      	movs	r3, r1
 8011f7c:	0010      	movs	r0, r2
 8011f7e:	0019      	movs	r1, r3
 8011f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f82:	001c      	movs	r4, r3
 8011f84:	2300      	movs	r3, #0
 8011f86:	001d      	movs	r5, r3
 8011f88:	0022      	movs	r2, r4
 8011f8a:	002b      	movs	r3, r5
 8011f8c:	f7ee faf8 	bl	8000580 <__aeabi_uldivmod>
 8011f90:	0002      	movs	r2, r0
 8011f92:	000b      	movs	r3, r1
 8011f94:	0013      	movs	r3, r2
 8011f96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8011f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f9a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011f9c:	e00d      	b.n	8011fba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8011f9e:	4b09      	ldr	r3, [pc, #36]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	0b5b      	lsrs	r3, r3, #13
 8011fa4:	2207      	movs	r2, #7
 8011fa6:	4013      	ands	r3, r2
 8011fa8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8011faa:	6a3b      	ldr	r3, [r7, #32]
 8011fac:	3301      	adds	r3, #1
 8011fae:	2280      	movs	r2, #128	@ 0x80
 8011fb0:	0212      	lsls	r2, r2, #8
 8011fb2:	409a      	lsls	r2, r3
 8011fb4:	0013      	movs	r3, r2
 8011fb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011fb8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8011fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8011fbc:	0018      	movs	r0, r3
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	b00e      	add	sp, #56	@ 0x38
 8011fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8011fc4:	40021000 	.word	0x40021000
 8011fc8:	003d0900 	.word	0x003d0900
 8011fcc:	00f42400 	.word	0x00f42400
 8011fd0:	007a1200 	.word	0x007a1200
 8011fd4:	080200f4 	.word	0x080200f4

08011fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011fdc:	4b02      	ldr	r3, [pc, #8]	@ (8011fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8011fde:	681b      	ldr	r3, [r3, #0]
}
 8011fe0:	0018      	movs	r0, r3
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	46c0      	nop			@ (mov r8, r8)
 8011fe8:	200000c8 	.word	0x200000c8

08011fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011ff0:	f7ff fff2 	bl	8011fd8 <HAL_RCC_GetHCLKFreq>
 8011ff4:	0001      	movs	r1, r0
 8011ff6:	4b06      	ldr	r3, [pc, #24]	@ (8012010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	0a1b      	lsrs	r3, r3, #8
 8011ffc:	2207      	movs	r2, #7
 8011ffe:	4013      	ands	r3, r2
 8012000:	4a04      	ldr	r2, [pc, #16]	@ (8012014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012002:	5cd3      	ldrb	r3, [r2, r3]
 8012004:	40d9      	lsrs	r1, r3
 8012006:	000b      	movs	r3, r1
}
 8012008:	0018      	movs	r0, r3
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	46c0      	nop			@ (mov r8, r8)
 8012010:	40021000 	.word	0x40021000
 8012014:	080200ec 	.word	0x080200ec

08012018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801201c:	f7ff ffdc 	bl	8011fd8 <HAL_RCC_GetHCLKFreq>
 8012020:	0001      	movs	r1, r0
 8012022:	4b06      	ldr	r3, [pc, #24]	@ (801203c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	0adb      	lsrs	r3, r3, #11
 8012028:	2207      	movs	r2, #7
 801202a:	4013      	ands	r3, r2
 801202c:	4a04      	ldr	r2, [pc, #16]	@ (8012040 <HAL_RCC_GetPCLK2Freq+0x28>)
 801202e:	5cd3      	ldrb	r3, [r2, r3]
 8012030:	40d9      	lsrs	r1, r3
 8012032:	000b      	movs	r3, r1
}
 8012034:	0018      	movs	r0, r3
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	46c0      	nop			@ (mov r8, r8)
 801203c:	40021000 	.word	0x40021000
 8012040:	080200ec 	.word	0x080200ec

08012044 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b086      	sub	sp, #24
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801204c:	2017      	movs	r0, #23
 801204e:	183b      	adds	r3, r7, r0
 8012050:	2200      	movs	r2, #0
 8012052:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2220      	movs	r2, #32
 801205a:	4013      	ands	r3, r2
 801205c:	d100      	bne.n	8012060 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801205e:	e0c7      	b.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012060:	4b9b      	ldr	r3, [pc, #620]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012064:	2380      	movs	r3, #128	@ 0x80
 8012066:	055b      	lsls	r3, r3, #21
 8012068:	4013      	ands	r3, r2
 801206a:	d109      	bne.n	8012080 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801206c:	4b98      	ldr	r3, [pc, #608]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801206e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012070:	4b97      	ldr	r3, [pc, #604]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012072:	2180      	movs	r1, #128	@ 0x80
 8012074:	0549      	lsls	r1, r1, #21
 8012076:	430a      	orrs	r2, r1
 8012078:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801207a:	183b      	adds	r3, r7, r0
 801207c:	2201      	movs	r2, #1
 801207e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012080:	4b94      	ldr	r3, [pc, #592]	@ (80122d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	2380      	movs	r3, #128	@ 0x80
 8012086:	005b      	lsls	r3, r3, #1
 8012088:	4013      	ands	r3, r2
 801208a:	d11a      	bne.n	80120c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801208c:	4b91      	ldr	r3, [pc, #580]	@ (80122d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	4b90      	ldr	r3, [pc, #576]	@ (80122d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012092:	2180      	movs	r1, #128	@ 0x80
 8012094:	0049      	lsls	r1, r1, #1
 8012096:	430a      	orrs	r2, r1
 8012098:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801209a:	f7f9 fddd 	bl	800bc58 <HAL_GetTick>
 801209e:	0003      	movs	r3, r0
 80120a0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80120a2:	e008      	b.n	80120b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80120a4:	f7f9 fdd8 	bl	800bc58 <HAL_GetTick>
 80120a8:	0002      	movs	r2, r0
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	1ad3      	subs	r3, r2, r3
 80120ae:	2b64      	cmp	r3, #100	@ 0x64
 80120b0:	d901      	bls.n	80120b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80120b2:	2303      	movs	r3, #3
 80120b4:	e107      	b.n	80122c6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80120b6:	4b87      	ldr	r3, [pc, #540]	@ (80122d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	2380      	movs	r3, #128	@ 0x80
 80120bc:	005b      	lsls	r3, r3, #1
 80120be:	4013      	ands	r3, r2
 80120c0:	d0f0      	beq.n	80120a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80120c2:	4b83      	ldr	r3, [pc, #524]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80120c4:	681a      	ldr	r2, [r3, #0]
 80120c6:	23c0      	movs	r3, #192	@ 0xc0
 80120c8:	039b      	lsls	r3, r3, #14
 80120ca:	4013      	ands	r3, r2
 80120cc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	685a      	ldr	r2, [r3, #4]
 80120d2:	23c0      	movs	r3, #192	@ 0xc0
 80120d4:	039b      	lsls	r3, r3, #14
 80120d6:	4013      	ands	r3, r2
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d013      	beq.n	8012106 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	685a      	ldr	r2, [r3, #4]
 80120e2:	23c0      	movs	r3, #192	@ 0xc0
 80120e4:	029b      	lsls	r3, r3, #10
 80120e6:	401a      	ands	r2, r3
 80120e8:	23c0      	movs	r3, #192	@ 0xc0
 80120ea:	029b      	lsls	r3, r3, #10
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d10a      	bne.n	8012106 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80120f0:	4b77      	ldr	r3, [pc, #476]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	2380      	movs	r3, #128	@ 0x80
 80120f6:	029b      	lsls	r3, r3, #10
 80120f8:	401a      	ands	r2, r3
 80120fa:	2380      	movs	r3, #128	@ 0x80
 80120fc:	029b      	lsls	r3, r3, #10
 80120fe:	429a      	cmp	r2, r3
 8012100:	d101      	bne.n	8012106 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8012102:	2301      	movs	r3, #1
 8012104:	e0df      	b.n	80122c6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8012106:	4b72      	ldr	r3, [pc, #456]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801210a:	23c0      	movs	r3, #192	@ 0xc0
 801210c:	029b      	lsls	r3, r3, #10
 801210e:	4013      	ands	r3, r2
 8012110:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d03b      	beq.n	8012190 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	685a      	ldr	r2, [r3, #4]
 801211c:	23c0      	movs	r3, #192	@ 0xc0
 801211e:	029b      	lsls	r3, r3, #10
 8012120:	4013      	ands	r3, r2
 8012122:	68fa      	ldr	r2, [r7, #12]
 8012124:	429a      	cmp	r2, r3
 8012126:	d033      	beq.n	8012190 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2220      	movs	r2, #32
 801212e:	4013      	ands	r3, r2
 8012130:	d02e      	beq.n	8012190 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8012132:	4b67      	ldr	r3, [pc, #412]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012136:	4a68      	ldr	r2, [pc, #416]	@ (80122d8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8012138:	4013      	ands	r3, r2
 801213a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801213c:	4b64      	ldr	r3, [pc, #400]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801213e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012140:	4b63      	ldr	r3, [pc, #396]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012142:	2180      	movs	r1, #128	@ 0x80
 8012144:	0309      	lsls	r1, r1, #12
 8012146:	430a      	orrs	r2, r1
 8012148:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801214a:	4b61      	ldr	r3, [pc, #388]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801214c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801214e:	4b60      	ldr	r3, [pc, #384]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012150:	4962      	ldr	r1, [pc, #392]	@ (80122dc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8012152:	400a      	ands	r2, r1
 8012154:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8012156:	4b5e      	ldr	r3, [pc, #376]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801215c:	68fa      	ldr	r2, [r7, #12]
 801215e:	2380      	movs	r3, #128	@ 0x80
 8012160:	005b      	lsls	r3, r3, #1
 8012162:	4013      	ands	r3, r2
 8012164:	d014      	beq.n	8012190 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012166:	f7f9 fd77 	bl	800bc58 <HAL_GetTick>
 801216a:	0003      	movs	r3, r0
 801216c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801216e:	e009      	b.n	8012184 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012170:	f7f9 fd72 	bl	800bc58 <HAL_GetTick>
 8012174:	0002      	movs	r2, r0
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	4a59      	ldr	r2, [pc, #356]	@ (80122e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d901      	bls.n	8012184 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8012180:	2303      	movs	r3, #3
 8012182:	e0a0      	b.n	80122c6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012184:	4b52      	ldr	r3, [pc, #328]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012188:	2380      	movs	r3, #128	@ 0x80
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	4013      	ands	r3, r2
 801218e:	d0ef      	beq.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2220      	movs	r2, #32
 8012196:	4013      	ands	r3, r2
 8012198:	d01f      	beq.n	80121da <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	685a      	ldr	r2, [r3, #4]
 801219e:	23c0      	movs	r3, #192	@ 0xc0
 80121a0:	029b      	lsls	r3, r3, #10
 80121a2:	401a      	ands	r2, r3
 80121a4:	23c0      	movs	r3, #192	@ 0xc0
 80121a6:	029b      	lsls	r3, r3, #10
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d10c      	bne.n	80121c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80121ac:	4b48      	ldr	r3, [pc, #288]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4a4c      	ldr	r2, [pc, #304]	@ (80122e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80121b2:	4013      	ands	r3, r2
 80121b4:	0019      	movs	r1, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	685a      	ldr	r2, [r3, #4]
 80121ba:	23c0      	movs	r3, #192	@ 0xc0
 80121bc:	039b      	lsls	r3, r3, #14
 80121be:	401a      	ands	r2, r3
 80121c0:	4b43      	ldr	r3, [pc, #268]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121c2:	430a      	orrs	r2, r1
 80121c4:	601a      	str	r2, [r3, #0]
 80121c6:	4b42      	ldr	r3, [pc, #264]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	685a      	ldr	r2, [r3, #4]
 80121ce:	23c0      	movs	r3, #192	@ 0xc0
 80121d0:	029b      	lsls	r3, r3, #10
 80121d2:	401a      	ands	r2, r3
 80121d4:	4b3e      	ldr	r3, [pc, #248]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121d6:	430a      	orrs	r2, r1
 80121d8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80121da:	2317      	movs	r3, #23
 80121dc:	18fb      	adds	r3, r7, r3
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d105      	bne.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80121e4:	4b3a      	ldr	r3, [pc, #232]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121e8:	4b39      	ldr	r3, [pc, #228]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121ea:	493f      	ldr	r1, [pc, #252]	@ (80122e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80121ec:	400a      	ands	r2, r1
 80121ee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2201      	movs	r2, #1
 80121f6:	4013      	ands	r3, r2
 80121f8:	d009      	beq.n	801220e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80121fa:	4b35      	ldr	r3, [pc, #212]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121fe:	2203      	movs	r2, #3
 8012200:	4393      	bics	r3, r2
 8012202:	0019      	movs	r1, r3
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	689a      	ldr	r2, [r3, #8]
 8012208:	4b31      	ldr	r3, [pc, #196]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801220a:	430a      	orrs	r2, r1
 801220c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2202      	movs	r2, #2
 8012214:	4013      	ands	r3, r2
 8012216:	d009      	beq.n	801222c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012218:	4b2d      	ldr	r3, [pc, #180]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801221a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801221c:	220c      	movs	r2, #12
 801221e:	4393      	bics	r3, r2
 8012220:	0019      	movs	r1, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	68da      	ldr	r2, [r3, #12]
 8012226:	4b2a      	ldr	r3, [pc, #168]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012228:	430a      	orrs	r2, r1
 801222a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2204      	movs	r2, #4
 8012232:	4013      	ands	r3, r2
 8012234:	d009      	beq.n	801224a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012236:	4b26      	ldr	r3, [pc, #152]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801223a:	4a2c      	ldr	r2, [pc, #176]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801223c:	4013      	ands	r3, r2
 801223e:	0019      	movs	r1, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	691a      	ldr	r2, [r3, #16]
 8012244:	4b22      	ldr	r3, [pc, #136]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012246:	430a      	orrs	r2, r1
 8012248:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2208      	movs	r2, #8
 8012250:	4013      	ands	r3, r2
 8012252:	d009      	beq.n	8012268 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012254:	4b1e      	ldr	r3, [pc, #120]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012258:	4a25      	ldr	r2, [pc, #148]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801225a:	4013      	ands	r3, r2
 801225c:	0019      	movs	r1, r3
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	695a      	ldr	r2, [r3, #20]
 8012262:	4b1b      	ldr	r3, [pc, #108]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012264:	430a      	orrs	r2, r1
 8012266:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	2380      	movs	r3, #128	@ 0x80
 801226e:	005b      	lsls	r3, r3, #1
 8012270:	4013      	ands	r3, r2
 8012272:	d009      	beq.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012274:	4b16      	ldr	r3, [pc, #88]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012278:	4a17      	ldr	r2, [pc, #92]	@ (80122d8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801227a:	4013      	ands	r3, r2
 801227c:	0019      	movs	r1, r3
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	699a      	ldr	r2, [r3, #24]
 8012282:	4b13      	ldr	r3, [pc, #76]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012284:	430a      	orrs	r2, r1
 8012286:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2240      	movs	r2, #64	@ 0x40
 801228e:	4013      	ands	r3, r2
 8012290:	d009      	beq.n	80122a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012292:	4b0f      	ldr	r3, [pc, #60]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012296:	4a17      	ldr	r2, [pc, #92]	@ (80122f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8012298:	4013      	ands	r3, r2
 801229a:	0019      	movs	r1, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6a1a      	ldr	r2, [r3, #32]
 80122a0:	4b0b      	ldr	r3, [pc, #44]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122a2:	430a      	orrs	r2, r1
 80122a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2280      	movs	r2, #128	@ 0x80
 80122ac:	4013      	ands	r3, r2
 80122ae:	d009      	beq.n	80122c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80122b0:	4b07      	ldr	r3, [pc, #28]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122b4:	4a10      	ldr	r2, [pc, #64]	@ (80122f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80122b6:	4013      	ands	r3, r2
 80122b8:	0019      	movs	r1, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	69da      	ldr	r2, [r3, #28]
 80122be:	4b04      	ldr	r3, [pc, #16]	@ (80122d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122c0:	430a      	orrs	r2, r1
 80122c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80122c4:	2300      	movs	r3, #0
}
 80122c6:	0018      	movs	r0, r3
 80122c8:	46bd      	mov	sp, r7
 80122ca:	b006      	add	sp, #24
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	46c0      	nop			@ (mov r8, r8)
 80122d0:	40021000 	.word	0x40021000
 80122d4:	40007000 	.word	0x40007000
 80122d8:	fffcffff 	.word	0xfffcffff
 80122dc:	fff7ffff 	.word	0xfff7ffff
 80122e0:	00001388 	.word	0x00001388
 80122e4:	ffcfffff 	.word	0xffcfffff
 80122e8:	efffffff 	.word	0xefffffff
 80122ec:	fffff3ff 	.word	0xfffff3ff
 80122f0:	ffffcfff 	.word	0xffffcfff
 80122f4:	fbffffff 	.word	0xfbffffff
 80122f8:	fff3ffff 	.word	0xfff3ffff

080122fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80122fc:	b5b0      	push	{r4, r5, r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012304:	230f      	movs	r3, #15
 8012306:	18fb      	adds	r3, r7, r3
 8012308:	2201      	movs	r2, #1
 801230a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8012312:	2301      	movs	r3, #1
 8012314:	e088      	b.n	8012428 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2221      	movs	r2, #33	@ 0x21
 801231a:	5c9b      	ldrb	r3, [r3, r2]
 801231c:	b2db      	uxtb	r3, r3
 801231e:	2b00      	cmp	r3, #0
 8012320:	d107      	bne.n	8012332 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2220      	movs	r2, #32
 8012326:	2100      	movs	r1, #0
 8012328:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	0018      	movs	r0, r3
 801232e:	f7f5 fdaf 	bl	8007e90 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2221      	movs	r2, #33	@ 0x21
 8012336:	2102      	movs	r1, #2
 8012338:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	2210      	movs	r2, #16
 8012342:	4013      	ands	r3, r2
 8012344:	2b10      	cmp	r3, #16
 8012346:	d05f      	beq.n	8012408 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	22ca      	movs	r2, #202	@ 0xca
 801234e:	625a      	str	r2, [r3, #36]	@ 0x24
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2253      	movs	r2, #83	@ 0x53
 8012356:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8012358:	250f      	movs	r5, #15
 801235a:	197c      	adds	r4, r7, r5
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	0018      	movs	r0, r3
 8012360:	f000 fa7c 	bl	801285c <RTC_EnterInitMode>
 8012364:	0003      	movs	r3, r0
 8012366:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8012368:	0028      	movs	r0, r5
 801236a:	183b      	adds	r3, r7, r0
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d12c      	bne.n	80123cc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	689a      	ldr	r2, [r3, #8]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	492c      	ldr	r1, [pc, #176]	@ (8012430 <HAL_RTC_Init+0x134>)
 801237e:	400a      	ands	r2, r1
 8012380:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	6899      	ldr	r1, [r3, #8]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	685a      	ldr	r2, [r3, #4]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	691b      	ldr	r3, [r3, #16]
 8012390:	431a      	orrs	r2, r3
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	699b      	ldr	r3, [r3, #24]
 8012396:	431a      	orrs	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	430a      	orrs	r2, r1
 801239e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	68d2      	ldr	r2, [r2, #12]
 80123a8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	6919      	ldr	r1, [r3, #16]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	689b      	ldr	r3, [r3, #8]
 80123b4:	041a      	lsls	r2, r3, #16
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	430a      	orrs	r2, r1
 80123bc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80123be:	183c      	adds	r4, r7, r0
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	0018      	movs	r0, r3
 80123c4:	f000 fa8e 	bl	80128e4 <RTC_ExitInitMode>
 80123c8:	0003      	movs	r3, r0
 80123ca:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80123cc:	230f      	movs	r3, #15
 80123ce:	18fb      	adds	r3, r7, r3
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d113      	bne.n	80123fe <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	2103      	movs	r1, #3
 80123e2:	438a      	bics	r2, r1
 80123e4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	69da      	ldr	r2, [r3, #28]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	695b      	ldr	r3, [r3, #20]
 80123f4:	431a      	orrs	r2, r3
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	430a      	orrs	r2, r1
 80123fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	22ff      	movs	r2, #255	@ 0xff
 8012404:	625a      	str	r2, [r3, #36]	@ 0x24
 8012406:	e003      	b.n	8012410 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8012408:	230f      	movs	r3, #15
 801240a:	18fb      	adds	r3, r7, r3
 801240c:	2200      	movs	r2, #0
 801240e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8012410:	230f      	movs	r3, #15
 8012412:	18fb      	adds	r3, r7, r3
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d103      	bne.n	8012422 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2221      	movs	r2, #33	@ 0x21
 801241e:	2101      	movs	r1, #1
 8012420:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012422:	230f      	movs	r3, #15
 8012424:	18fb      	adds	r3, r7, r3
 8012426:	781b      	ldrb	r3, [r3, #0]
}
 8012428:	0018      	movs	r0, r3
 801242a:	46bd      	mov	sp, r7
 801242c:	b004      	add	sp, #16
 801242e:	bdb0      	pop	{r4, r5, r7, pc}
 8012430:	ff8fffbf 	.word	0xff8fffbf

08012434 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012434:	b5b0      	push	{r4, r5, r7, lr}
 8012436:	b086      	sub	sp, #24
 8012438:	af00      	add	r7, sp, #0
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	60b9      	str	r1, [r7, #8]
 801243e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8012440:	2300      	movs	r3, #0
 8012442:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2220      	movs	r2, #32
 8012448:	5c9b      	ldrb	r3, [r3, r2]
 801244a:	2b01      	cmp	r3, #1
 801244c:	d101      	bne.n	8012452 <HAL_RTC_SetTime+0x1e>
 801244e:	2302      	movs	r3, #2
 8012450:	e092      	b.n	8012578 <HAL_RTC_SetTime+0x144>
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2220      	movs	r2, #32
 8012456:	2101      	movs	r1, #1
 8012458:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2221      	movs	r2, #33	@ 0x21
 801245e:	2102      	movs	r1, #2
 8012460:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d125      	bne.n	80124b4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	689b      	ldr	r3, [r3, #8]
 801246e:	2240      	movs	r2, #64	@ 0x40
 8012470:	4013      	ands	r3, r2
 8012472:	d102      	bne.n	801247a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	2200      	movs	r2, #0
 8012478:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	0018      	movs	r0, r3
 8012480:	f000 fa5a 	bl	8012938 <RTC_ByteToBcd2>
 8012484:	0003      	movs	r3, r0
 8012486:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	785b      	ldrb	r3, [r3, #1]
 801248c:	0018      	movs	r0, r3
 801248e:	f000 fa53 	bl	8012938 <RTC_ByteToBcd2>
 8012492:	0003      	movs	r3, r0
 8012494:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012496:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	789b      	ldrb	r3, [r3, #2]
 801249c:	0018      	movs	r0, r3
 801249e:	f000 fa4b 	bl	8012938 <RTC_ByteToBcd2>
 80124a2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80124a4:	0022      	movs	r2, r4
 80124a6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	78db      	ldrb	r3, [r3, #3]
 80124ac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80124ae:	4313      	orrs	r3, r2
 80124b0:	617b      	str	r3, [r7, #20]
 80124b2:	e017      	b.n	80124e4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	2240      	movs	r2, #64	@ 0x40
 80124bc:	4013      	ands	r3, r2
 80124be:	d102      	bne.n	80124c6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	2200      	movs	r2, #0
 80124c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	785b      	ldrb	r3, [r3, #1]
 80124d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80124d2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80124d4:	68ba      	ldr	r2, [r7, #8]
 80124d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80124d8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	78db      	ldrb	r3, [r3, #3]
 80124de:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80124e0:	4313      	orrs	r3, r2
 80124e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	22ca      	movs	r2, #202	@ 0xca
 80124ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2253      	movs	r2, #83	@ 0x53
 80124f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80124f4:	2513      	movs	r5, #19
 80124f6:	197c      	adds	r4, r7, r5
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	0018      	movs	r0, r3
 80124fc:	f000 f9ae 	bl	801285c <RTC_EnterInitMode>
 8012500:	0003      	movs	r3, r0
 8012502:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012504:	0028      	movs	r0, r5
 8012506:	183b      	adds	r3, r7, r0
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d120      	bne.n	8012550 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	697a      	ldr	r2, [r7, #20]
 8012514:	491a      	ldr	r1, [pc, #104]	@ (8012580 <HAL_RTC_SetTime+0x14c>)
 8012516:	400a      	ands	r2, r1
 8012518:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	689a      	ldr	r2, [r3, #8]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	4917      	ldr	r1, [pc, #92]	@ (8012584 <HAL_RTC_SetTime+0x150>)
 8012526:	400a      	ands	r2, r1
 8012528:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	6899      	ldr	r1, [r3, #8]
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	68da      	ldr	r2, [r3, #12]
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	691b      	ldr	r3, [r3, #16]
 8012538:	431a      	orrs	r2, r3
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	430a      	orrs	r2, r1
 8012540:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012542:	183c      	adds	r4, r7, r0
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	0018      	movs	r0, r3
 8012548:	f000 f9cc 	bl	80128e4 <RTC_ExitInitMode>
 801254c:	0003      	movs	r3, r0
 801254e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8012550:	2313      	movs	r3, #19
 8012552:	18fb      	adds	r3, r7, r3
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d103      	bne.n	8012562 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2221      	movs	r2, #33	@ 0x21
 801255e:	2101      	movs	r1, #1
 8012560:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	22ff      	movs	r2, #255	@ 0xff
 8012568:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2220      	movs	r2, #32
 801256e:	2100      	movs	r1, #0
 8012570:	5499      	strb	r1, [r3, r2]

  return status;
 8012572:	2313      	movs	r3, #19
 8012574:	18fb      	adds	r3, r7, r3
 8012576:	781b      	ldrb	r3, [r3, #0]
}
 8012578:	0018      	movs	r0, r3
 801257a:	46bd      	mov	sp, r7
 801257c:	b006      	add	sp, #24
 801257e:	bdb0      	pop	{r4, r5, r7, pc}
 8012580:	007f7f7f 	.word	0x007f7f7f
 8012584:	fffbffff 	.word	0xfffbffff

08012588 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b086      	sub	sp, #24
 801258c:	af00      	add	r7, sp, #0
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8012594:	2300      	movs	r3, #0
 8012596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	691b      	ldr	r3, [r3, #16]
 80125a8:	045b      	lsls	r3, r3, #17
 80125aa:	0c5a      	lsrs	r2, r3, #17
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a22      	ldr	r2, [pc, #136]	@ (8012640 <HAL_RTC_GetTime+0xb8>)
 80125b8:	4013      	ands	r3, r2
 80125ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	0c1b      	lsrs	r3, r3, #16
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	223f      	movs	r2, #63	@ 0x3f
 80125c4:	4013      	ands	r3, r2
 80125c6:	b2da      	uxtb	r2, r3
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	0a1b      	lsrs	r3, r3, #8
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	227f      	movs	r2, #127	@ 0x7f
 80125d4:	4013      	ands	r3, r2
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	227f      	movs	r2, #127	@ 0x7f
 80125e2:	4013      	ands	r3, r2
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	0d9b      	lsrs	r3, r3, #22
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2201      	movs	r2, #1
 80125f2:	4013      	ands	r3, r2
 80125f4:	b2da      	uxtb	r2, r3
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d11a      	bne.n	8012636 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	0018      	movs	r0, r3
 8012606:	f000 f9b8 	bl	801297a <RTC_Bcd2ToByte>
 801260a:	0003      	movs	r3, r0
 801260c:	001a      	movs	r2, r3
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	785b      	ldrb	r3, [r3, #1]
 8012616:	0018      	movs	r0, r3
 8012618:	f000 f9af 	bl	801297a <RTC_Bcd2ToByte>
 801261c:	0003      	movs	r3, r0
 801261e:	001a      	movs	r2, r3
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	789b      	ldrb	r3, [r3, #2]
 8012628:	0018      	movs	r0, r3
 801262a:	f000 f9a6 	bl	801297a <RTC_Bcd2ToByte>
 801262e:	0003      	movs	r3, r0
 8012630:	001a      	movs	r2, r3
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	0018      	movs	r0, r3
 801263a:	46bd      	mov	sp, r7
 801263c:	b006      	add	sp, #24
 801263e:	bd80      	pop	{r7, pc}
 8012640:	007f7f7f 	.word	0x007f7f7f

08012644 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012644:	b5b0      	push	{r4, r5, r7, lr}
 8012646:	b086      	sub	sp, #24
 8012648:	af00      	add	r7, sp, #0
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8012650:	2300      	movs	r3, #0
 8012652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2220      	movs	r2, #32
 8012658:	5c9b      	ldrb	r3, [r3, r2]
 801265a:	2b01      	cmp	r3, #1
 801265c:	d101      	bne.n	8012662 <HAL_RTC_SetDate+0x1e>
 801265e:	2302      	movs	r3, #2
 8012660:	e07e      	b.n	8012760 <HAL_RTC_SetDate+0x11c>
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2220      	movs	r2, #32
 8012666:	2101      	movs	r1, #1
 8012668:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2221      	movs	r2, #33	@ 0x21
 801266e:	2102      	movs	r1, #2
 8012670:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d10e      	bne.n	8012696 <HAL_RTC_SetDate+0x52>
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	785b      	ldrb	r3, [r3, #1]
 801267c:	001a      	movs	r2, r3
 801267e:	2310      	movs	r3, #16
 8012680:	4013      	ands	r3, r2
 8012682:	d008      	beq.n	8012696 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	785b      	ldrb	r3, [r3, #1]
 8012688:	2210      	movs	r2, #16
 801268a:	4393      	bics	r3, r2
 801268c:	b2db      	uxtb	r3, r3
 801268e:	330a      	adds	r3, #10
 8012690:	b2da      	uxtb	r2, r3
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d11c      	bne.n	80126d6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	78db      	ldrb	r3, [r3, #3]
 80126a0:	0018      	movs	r0, r3
 80126a2:	f000 f949 	bl	8012938 <RTC_ByteToBcd2>
 80126a6:	0003      	movs	r3, r0
 80126a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	785b      	ldrb	r3, [r3, #1]
 80126ae:	0018      	movs	r0, r3
 80126b0:	f000 f942 	bl	8012938 <RTC_ByteToBcd2>
 80126b4:	0003      	movs	r3, r0
 80126b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80126b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	789b      	ldrb	r3, [r3, #2]
 80126be:	0018      	movs	r0, r3
 80126c0:	f000 f93a 	bl	8012938 <RTC_ByteToBcd2>
 80126c4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80126c6:	0022      	movs	r2, r4
 80126c8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80126d0:	4313      	orrs	r3, r2
 80126d2:	617b      	str	r3, [r7, #20]
 80126d4:	e00e      	b.n	80126f4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	78db      	ldrb	r3, [r3, #3]
 80126da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	785b      	ldrb	r3, [r3, #1]
 80126e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80126e2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80126e4:	68ba      	ldr	r2, [r7, #8]
 80126e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80126e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80126f0:	4313      	orrs	r3, r2
 80126f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	22ca      	movs	r2, #202	@ 0xca
 80126fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2253      	movs	r2, #83	@ 0x53
 8012702:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012704:	2513      	movs	r5, #19
 8012706:	197c      	adds	r4, r7, r5
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	0018      	movs	r0, r3
 801270c:	f000 f8a6 	bl	801285c <RTC_EnterInitMode>
 8012710:	0003      	movs	r3, r0
 8012712:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012714:	0028      	movs	r0, r5
 8012716:	183b      	adds	r3, r7, r0
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10c      	bne.n	8012738 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	697a      	ldr	r2, [r7, #20]
 8012724:	4910      	ldr	r1, [pc, #64]	@ (8012768 <HAL_RTC_SetDate+0x124>)
 8012726:	400a      	ands	r2, r1
 8012728:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801272a:	183c      	adds	r4, r7, r0
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	0018      	movs	r0, r3
 8012730:	f000 f8d8 	bl	80128e4 <RTC_ExitInitMode>
 8012734:	0003      	movs	r3, r0
 8012736:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8012738:	2313      	movs	r3, #19
 801273a:	18fb      	adds	r3, r7, r3
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d103      	bne.n	801274a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2221      	movs	r2, #33	@ 0x21
 8012746:	2101      	movs	r1, #1
 8012748:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	22ff      	movs	r2, #255	@ 0xff
 8012750:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2220      	movs	r2, #32
 8012756:	2100      	movs	r1, #0
 8012758:	5499      	strb	r1, [r3, r2]

  return status;
 801275a:	2313      	movs	r3, #19
 801275c:	18fb      	adds	r3, r7, r3
 801275e:	781b      	ldrb	r3, [r3, #0]
}
 8012760:	0018      	movs	r0, r3
 8012762:	46bd      	mov	sp, r7
 8012764:	b006      	add	sp, #24
 8012766:	bdb0      	pop	{r4, r5, r7, pc}
 8012768:	00ffff3f 	.word	0x00ffff3f

0801276c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b086      	sub	sp, #24
 8012770:	af00      	add	r7, sp, #0
 8012772:	60f8      	str	r0, [r7, #12]
 8012774:	60b9      	str	r1, [r7, #8]
 8012776:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8012778:	2300      	movs	r3, #0
 801277a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	4a21      	ldr	r2, [pc, #132]	@ (8012808 <HAL_RTC_GetDate+0x9c>)
 8012784:	4013      	ands	r3, r2
 8012786:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	0c1b      	lsrs	r3, r3, #16
 801278c:	b2da      	uxtb	r2, r3
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	0a1b      	lsrs	r3, r3, #8
 8012796:	b2db      	uxtb	r3, r3
 8012798:	221f      	movs	r2, #31
 801279a:	4013      	ands	r3, r2
 801279c:	b2da      	uxtb	r2, r3
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	b2db      	uxtb	r3, r3
 80127a6:	223f      	movs	r2, #63	@ 0x3f
 80127a8:	4013      	ands	r3, r2
 80127aa:	b2da      	uxtb	r2, r3
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	0b5b      	lsrs	r3, r3, #13
 80127b4:	b2db      	uxtb	r3, r3
 80127b6:	2207      	movs	r2, #7
 80127b8:	4013      	ands	r3, r2
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d11a      	bne.n	80127fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	78db      	ldrb	r3, [r3, #3]
 80127ca:	0018      	movs	r0, r3
 80127cc:	f000 f8d5 	bl	801297a <RTC_Bcd2ToByte>
 80127d0:	0003      	movs	r3, r0
 80127d2:	001a      	movs	r2, r3
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	785b      	ldrb	r3, [r3, #1]
 80127dc:	0018      	movs	r0, r3
 80127de:	f000 f8cc 	bl	801297a <RTC_Bcd2ToByte>
 80127e2:	0003      	movs	r3, r0
 80127e4:	001a      	movs	r2, r3
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	789b      	ldrb	r3, [r3, #2]
 80127ee:	0018      	movs	r0, r3
 80127f0:	f000 f8c3 	bl	801297a <RTC_Bcd2ToByte>
 80127f4:	0003      	movs	r3, r0
 80127f6:	001a      	movs	r2, r3
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80127fc:	2300      	movs	r3, #0
}
 80127fe:	0018      	movs	r0, r3
 8012800:	46bd      	mov	sp, r7
 8012802:	b006      	add	sp, #24
 8012804:	bd80      	pop	{r7, pc}
 8012806:	46c0      	nop			@ (mov r8, r8)
 8012808:	00ffff3f 	.word	0x00ffff3f

0801280c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012814:	2300      	movs	r3, #0
 8012816:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	4a0e      	ldr	r2, [pc, #56]	@ (8012858 <HAL_RTC_WaitForSynchro+0x4c>)
 801281e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012820:	f7f9 fa1a 	bl	800bc58 <HAL_GetTick>
 8012824:	0003      	movs	r3, r0
 8012826:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012828:	e00a      	b.n	8012840 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801282a:	f7f9 fa15 	bl	800bc58 <HAL_GetTick>
 801282e:	0002      	movs	r2, r0
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	1ad2      	subs	r2, r2, r3
 8012834:	23fa      	movs	r3, #250	@ 0xfa
 8012836:	009b      	lsls	r3, r3, #2
 8012838:	429a      	cmp	r2, r3
 801283a:	d901      	bls.n	8012840 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801283c:	2303      	movs	r3, #3
 801283e:	e006      	b.n	801284e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	68db      	ldr	r3, [r3, #12]
 8012846:	2220      	movs	r2, #32
 8012848:	4013      	ands	r3, r2
 801284a:	d0ee      	beq.n	801282a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801284c:	2300      	movs	r3, #0
}
 801284e:	0018      	movs	r0, r3
 8012850:	46bd      	mov	sp, r7
 8012852:	b004      	add	sp, #16
 8012854:	bd80      	pop	{r7, pc}
 8012856:	46c0      	nop			@ (mov r8, r8)
 8012858:	0001ff5f 	.word	0x0001ff5f

0801285c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012864:	2300      	movs	r3, #0
 8012866:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8012868:	230f      	movs	r3, #15
 801286a:	18fb      	adds	r3, r7, r3
 801286c:	2200      	movs	r2, #0
 801286e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	68db      	ldr	r3, [r3, #12]
 8012876:	2240      	movs	r2, #64	@ 0x40
 8012878:	4013      	ands	r3, r2
 801287a:	d12c      	bne.n	80128d6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	68da      	ldr	r2, [r3, #12]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2180      	movs	r1, #128	@ 0x80
 8012888:	430a      	orrs	r2, r1
 801288a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801288c:	f7f9 f9e4 	bl	800bc58 <HAL_GetTick>
 8012890:	0003      	movs	r3, r0
 8012892:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012894:	e014      	b.n	80128c0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012896:	f7f9 f9df 	bl	800bc58 <HAL_GetTick>
 801289a:	0002      	movs	r2, r0
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	1ad2      	subs	r2, r2, r3
 80128a0:	200f      	movs	r0, #15
 80128a2:	183b      	adds	r3, r7, r0
 80128a4:	1839      	adds	r1, r7, r0
 80128a6:	7809      	ldrb	r1, [r1, #0]
 80128a8:	7019      	strb	r1, [r3, #0]
 80128aa:	23fa      	movs	r3, #250	@ 0xfa
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d906      	bls.n	80128c0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2221      	movs	r2, #33	@ 0x21
 80128b6:	2104      	movs	r1, #4
 80128b8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80128ba:	183b      	adds	r3, r7, r0
 80128bc:	2201      	movs	r2, #1
 80128be:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	68db      	ldr	r3, [r3, #12]
 80128c6:	2240      	movs	r2, #64	@ 0x40
 80128c8:	4013      	ands	r3, r2
 80128ca:	d104      	bne.n	80128d6 <RTC_EnterInitMode+0x7a>
 80128cc:	230f      	movs	r3, #15
 80128ce:	18fb      	adds	r3, r7, r3
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	2b01      	cmp	r3, #1
 80128d4:	d1df      	bne.n	8012896 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80128d6:	230f      	movs	r3, #15
 80128d8:	18fb      	adds	r3, r7, r3
 80128da:	781b      	ldrb	r3, [r3, #0]
}
 80128dc:	0018      	movs	r0, r3
 80128de:	46bd      	mov	sp, r7
 80128e0:	b004      	add	sp, #16
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80128e4:	b590      	push	{r4, r7, lr}
 80128e6:	b085      	sub	sp, #20
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80128ec:	240f      	movs	r4, #15
 80128ee:	193b      	adds	r3, r7, r4
 80128f0:	2200      	movs	r2, #0
 80128f2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	68da      	ldr	r2, [r3, #12]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2180      	movs	r1, #128	@ 0x80
 8012900:	438a      	bics	r2, r1
 8012902:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	689b      	ldr	r3, [r3, #8]
 801290a:	2220      	movs	r2, #32
 801290c:	4013      	ands	r3, r2
 801290e:	d10c      	bne.n	801292a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	0018      	movs	r0, r3
 8012914:	f7ff ff7a 	bl	801280c <HAL_RTC_WaitForSynchro>
 8012918:	1e03      	subs	r3, r0, #0
 801291a:	d006      	beq.n	801292a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2221      	movs	r2, #33	@ 0x21
 8012920:	2104      	movs	r1, #4
 8012922:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8012924:	193b      	adds	r3, r7, r4
 8012926:	2201      	movs	r2, #1
 8012928:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801292a:	230f      	movs	r3, #15
 801292c:	18fb      	adds	r3, r7, r3
 801292e:	781b      	ldrb	r3, [r3, #0]
}
 8012930:	0018      	movs	r0, r3
 8012932:	46bd      	mov	sp, r7
 8012934:	b005      	add	sp, #20
 8012936:	bd90      	pop	{r4, r7, pc}

08012938 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	0002      	movs	r2, r0
 8012940:	1dfb      	adds	r3, r7, #7
 8012942:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8012944:	2300      	movs	r3, #0
 8012946:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8012948:	e007      	b.n	801295a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	3301      	adds	r3, #1
 801294e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8012950:	1dfb      	adds	r3, r7, #7
 8012952:	1dfa      	adds	r2, r7, #7
 8012954:	7812      	ldrb	r2, [r2, #0]
 8012956:	3a0a      	subs	r2, #10
 8012958:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801295a:	1dfb      	adds	r3, r7, #7
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	2b09      	cmp	r3, #9
 8012960:	d8f3      	bhi.n	801294a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	b2db      	uxtb	r3, r3
 8012966:	011b      	lsls	r3, r3, #4
 8012968:	b2da      	uxtb	r2, r3
 801296a:	1dfb      	adds	r3, r7, #7
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	4313      	orrs	r3, r2
 8012970:	b2db      	uxtb	r3, r3
}
 8012972:	0018      	movs	r0, r3
 8012974:	46bd      	mov	sp, r7
 8012976:	b004      	add	sp, #16
 8012978:	bd80      	pop	{r7, pc}

0801297a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801297a:	b580      	push	{r7, lr}
 801297c:	b084      	sub	sp, #16
 801297e:	af00      	add	r7, sp, #0
 8012980:	0002      	movs	r2, r0
 8012982:	1dfb      	adds	r3, r7, #7
 8012984:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8012986:	2300      	movs	r3, #0
 8012988:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801298a:	1dfb      	adds	r3, r7, #7
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	091b      	lsrs	r3, r3, #4
 8012990:	b2db      	uxtb	r3, r3
 8012992:	001a      	movs	r2, r3
 8012994:	0013      	movs	r3, r2
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	189b      	adds	r3, r3, r2
 801299a:	005b      	lsls	r3, r3, #1
 801299c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	b2da      	uxtb	r2, r3
 80129a2:	1dfb      	adds	r3, r7, #7
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	210f      	movs	r1, #15
 80129a8:	400b      	ands	r3, r1
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	18d3      	adds	r3, r2, r3
 80129ae:	b2db      	uxtb	r3, r3
}
 80129b0:	0018      	movs	r0, r3
 80129b2:	46bd      	mov	sp, r7
 80129b4:	b004      	add	sp, #16
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b086      	sub	sp, #24
 80129bc:	af00      	add	r7, sp, #0
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80129c4:	2300      	movs	r3, #0
 80129c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2220      	movs	r2, #32
 80129cc:	5c9b      	ldrb	r3, [r3, r2]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d101      	bne.n	80129d6 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 80129d2:	2302      	movs	r3, #2
 80129d4:	e096      	b.n	8012b04 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	2220      	movs	r2, #32
 80129da:	2101      	movs	r1, #1
 80129dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2221      	movs	r2, #33	@ 0x21
 80129e2:	2102      	movs	r1, #2
 80129e4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	22ca      	movs	r2, #202	@ 0xca
 80129ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2253      	movs	r2, #83	@ 0x53
 80129f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	689a      	ldr	r2, [r3, #8]
 80129fc:	2380      	movs	r3, #128	@ 0x80
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	4013      	ands	r3, r2
 8012a02:	d021      	beq.n	8012a48 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8012a04:	f7f9 f928 	bl	800bc58 <HAL_GetTick>
 8012a08:	0003      	movs	r3, r0
 8012a0a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012a0c:	e016      	b.n	8012a3c <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012a0e:	f7f9 f923 	bl	800bc58 <HAL_GetTick>
 8012a12:	0002      	movs	r2, r0
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	1ad2      	subs	r2, r2, r3
 8012a18:	23fa      	movs	r3, #250	@ 0xfa
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d90d      	bls.n	8012a3c <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	22ff      	movs	r2, #255	@ 0xff
 8012a26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2221      	movs	r2, #33	@ 0x21
 8012a2c:	2103      	movs	r1, #3
 8012a2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2220      	movs	r2, #32
 8012a34:	2100      	movs	r1, #0
 8012a36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012a38:	2303      	movs	r3, #3
 8012a3a:	e063      	b.n	8012b04 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	2204      	movs	r2, #4
 8012a44:	4013      	ands	r3, r2
 8012a46:	d1e2      	bne.n	8012a0e <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	689a      	ldr	r2, [r3, #8]
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	492e      	ldr	r1, [pc, #184]	@ (8012b0c <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8012a54:	400a      	ands	r2, r1
 8012a56:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	22ff      	movs	r2, #255	@ 0xff
 8012a60:	401a      	ands	r2, r3
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	492a      	ldr	r1, [pc, #168]	@ (8012b10 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8012a68:	430a      	orrs	r2, r1
 8012a6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012a6c:	f7f9 f8f4 	bl	800bc58 <HAL_GetTick>
 8012a70:	0003      	movs	r3, r0
 8012a72:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012a74:	e016      	b.n	8012aa4 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012a76:	f7f9 f8ef 	bl	800bc58 <HAL_GetTick>
 8012a7a:	0002      	movs	r2, r0
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	1ad2      	subs	r2, r2, r3
 8012a80:	23fa      	movs	r3, #250	@ 0xfa
 8012a82:	009b      	lsls	r3, r3, #2
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d90d      	bls.n	8012aa4 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	22ff      	movs	r2, #255	@ 0xff
 8012a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2221      	movs	r2, #33	@ 0x21
 8012a94:	2103      	movs	r1, #3
 8012a96:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	2220      	movs	r2, #32
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8012aa0:	2303      	movs	r3, #3
 8012aa2:	e02f      	b.n	8012b04 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	68db      	ldr	r3, [r3, #12]
 8012aaa:	2204      	movs	r2, #4
 8012aac:	4013      	ands	r3, r2
 8012aae:	d0e2      	beq.n	8012a76 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	689a      	ldr	r2, [r3, #8]
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2107      	movs	r1, #7
 8012abc:	438a      	bics	r2, r1
 8012abe:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	6899      	ldr	r1, [r3, #8]
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	430a      	orrs	r2, r1
 8012ace:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	68ba      	ldr	r2, [r7, #8]
 8012ad6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	689a      	ldr	r2, [r3, #8]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2180      	movs	r1, #128	@ 0x80
 8012ae4:	00c9      	lsls	r1, r1, #3
 8012ae6:	430a      	orrs	r2, r1
 8012ae8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	22ff      	movs	r2, #255	@ 0xff
 8012af0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2221      	movs	r2, #33	@ 0x21
 8012af6:	2101      	movs	r1, #1
 8012af8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2220      	movs	r2, #32
 8012afe:	2100      	movs	r1, #0
 8012b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012b02:	2300      	movs	r3, #0
}
 8012b04:	0018      	movs	r0, r3
 8012b06:	46bd      	mov	sp, r7
 8012b08:	b006      	add	sp, #24
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	fffffbff 	.word	0xfffffbff
 8012b10:	fffffb7f 	.word	0xfffffb7f

08012b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d101      	bne.n	8012b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012b22:	2301      	movs	r3, #1
 8012b24:	e032      	b.n	8012b8c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2239      	movs	r2, #57	@ 0x39
 8012b2a:	5c9b      	ldrb	r3, [r3, r2]
 8012b2c:	b2db      	uxtb	r3, r3
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d107      	bne.n	8012b42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2238      	movs	r2, #56	@ 0x38
 8012b36:	2100      	movs	r1, #0
 8012b38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	0018      	movs	r0, r3
 8012b3e:	f7f8 fa49 	bl	800afd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2239      	movs	r2, #57	@ 0x39
 8012b46:	2102      	movs	r1, #2
 8012b48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	3304      	adds	r3, #4
 8012b52:	0019      	movs	r1, r3
 8012b54:	0010      	movs	r0, r2
 8012b56:	f000 fa1d 	bl	8012f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	223e      	movs	r2, #62	@ 0x3e
 8012b5e:	2101      	movs	r1, #1
 8012b60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	223a      	movs	r2, #58	@ 0x3a
 8012b66:	2101      	movs	r1, #1
 8012b68:	5499      	strb	r1, [r3, r2]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	223b      	movs	r2, #59	@ 0x3b
 8012b6e:	2101      	movs	r1, #1
 8012b70:	5499      	strb	r1, [r3, r2]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	223c      	movs	r2, #60	@ 0x3c
 8012b76:	2101      	movs	r1, #1
 8012b78:	5499      	strb	r1, [r3, r2]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	223d      	movs	r2, #61	@ 0x3d
 8012b7e:	2101      	movs	r1, #1
 8012b80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2239      	movs	r2, #57	@ 0x39
 8012b86:	2101      	movs	r1, #1
 8012b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012b8a:	2300      	movs	r3, #0
}
 8012b8c:	0018      	movs	r0, r3
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	b002      	add	sp, #8
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2239      	movs	r2, #57	@ 0x39
 8012ba0:	5c9b      	ldrb	r3, [r3, r2]
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d001      	beq.n	8012bac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	e033      	b.n	8012c14 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2239      	movs	r2, #57	@ 0x39
 8012bb0:	2102      	movs	r1, #2
 8012bb2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	2380      	movs	r3, #128	@ 0x80
 8012bba:	05db      	lsls	r3, r3, #23
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d00e      	beq.n	8012bde <HAL_TIM_Base_Start+0x4a>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	4a15      	ldr	r2, [pc, #84]	@ (8012c1c <HAL_TIM_Base_Start+0x88>)
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	d009      	beq.n	8012bde <HAL_TIM_Base_Start+0x4a>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	4a14      	ldr	r2, [pc, #80]	@ (8012c20 <HAL_TIM_Base_Start+0x8c>)
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	d004      	beq.n	8012bde <HAL_TIM_Base_Start+0x4a>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	4a12      	ldr	r2, [pc, #72]	@ (8012c24 <HAL_TIM_Base_Start+0x90>)
 8012bda:	4293      	cmp	r3, r2
 8012bdc:	d111      	bne.n	8012c02 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	689b      	ldr	r3, [r3, #8]
 8012be4:	2207      	movs	r2, #7
 8012be6:	4013      	ands	r3, r2
 8012be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	2b06      	cmp	r3, #6
 8012bee:	d010      	beq.n	8012c12 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2101      	movs	r1, #1
 8012bfc:	430a      	orrs	r2, r1
 8012bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c00:	e007      	b.n	8012c12 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2101      	movs	r1, #1
 8012c0e:	430a      	orrs	r2, r1
 8012c10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	0018      	movs	r0, r3
 8012c16:	46bd      	mov	sp, r7
 8012c18:	b004      	add	sp, #16
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	40000400 	.word	0x40000400
 8012c20:	40010800 	.word	0x40010800
 8012c24:	40011400 	.word	0x40011400

08012c28 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	6a1b      	ldr	r3, [r3, #32]
 8012c36:	4a0a      	ldr	r2, [pc, #40]	@ (8012c60 <HAL_TIM_Base_Stop+0x38>)
 8012c38:	4013      	ands	r3, r2
 8012c3a:	d107      	bne.n	8012c4c <HAL_TIM_Base_Stop+0x24>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2101      	movs	r1, #1
 8012c48:	438a      	bics	r2, r1
 8012c4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2239      	movs	r2, #57	@ 0x39
 8012c50:	2101      	movs	r1, #1
 8012c52:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	0018      	movs	r0, r3
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	b002      	add	sp, #8
 8012c5c:	bd80      	pop	{r7, pc}
 8012c5e:	46c0      	nop			@ (mov r8, r8)
 8012c60:	00001111 	.word	0x00001111

08012c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d101      	bne.n	8012c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012c72:	2301      	movs	r3, #1
 8012c74:	e032      	b.n	8012cdc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2239      	movs	r2, #57	@ 0x39
 8012c7a:	5c9b      	ldrb	r3, [r3, r2]
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d107      	bne.n	8012c92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2238      	movs	r2, #56	@ 0x38
 8012c86:	2100      	movs	r1, #0
 8012c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	0018      	movs	r0, r3
 8012c8e:	f7f8 f97d 	bl	800af8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2239      	movs	r2, #57	@ 0x39
 8012c96:	2102      	movs	r1, #2
 8012c98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	3304      	adds	r3, #4
 8012ca2:	0019      	movs	r1, r3
 8012ca4:	0010      	movs	r0, r2
 8012ca6:	f000 f975 	bl	8012f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	223e      	movs	r2, #62	@ 0x3e
 8012cae:	2101      	movs	r1, #1
 8012cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	223a      	movs	r2, #58	@ 0x3a
 8012cb6:	2101      	movs	r1, #1
 8012cb8:	5499      	strb	r1, [r3, r2]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	223b      	movs	r2, #59	@ 0x3b
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	5499      	strb	r1, [r3, r2]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	223c      	movs	r2, #60	@ 0x3c
 8012cc6:	2101      	movs	r1, #1
 8012cc8:	5499      	strb	r1, [r3, r2]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	223d      	movs	r2, #61	@ 0x3d
 8012cce:	2101      	movs	r1, #1
 8012cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2239      	movs	r2, #57	@ 0x39
 8012cd6:	2101      	movs	r1, #1
 8012cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012cda:	2300      	movs	r3, #0
}
 8012cdc:	0018      	movs	r0, r3
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	b002      	add	sp, #8
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d108      	bne.n	8012d06 <HAL_TIM_PWM_Start+0x22>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	223a      	movs	r2, #58	@ 0x3a
 8012cf8:	5c9b      	ldrb	r3, [r3, r2]
 8012cfa:	b2db      	uxtb	r3, r3
 8012cfc:	3b01      	subs	r3, #1
 8012cfe:	1e5a      	subs	r2, r3, #1
 8012d00:	4193      	sbcs	r3, r2
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	e01f      	b.n	8012d46 <HAL_TIM_PWM_Start+0x62>
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	2b04      	cmp	r3, #4
 8012d0a:	d108      	bne.n	8012d1e <HAL_TIM_PWM_Start+0x3a>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	223b      	movs	r2, #59	@ 0x3b
 8012d10:	5c9b      	ldrb	r3, [r3, r2]
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	3b01      	subs	r3, #1
 8012d16:	1e5a      	subs	r2, r3, #1
 8012d18:	4193      	sbcs	r3, r2
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	e013      	b.n	8012d46 <HAL_TIM_PWM_Start+0x62>
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	2b08      	cmp	r3, #8
 8012d22:	d108      	bne.n	8012d36 <HAL_TIM_PWM_Start+0x52>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	223c      	movs	r2, #60	@ 0x3c
 8012d28:	5c9b      	ldrb	r3, [r3, r2]
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	1e5a      	subs	r2, r3, #1
 8012d30:	4193      	sbcs	r3, r2
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	e007      	b.n	8012d46 <HAL_TIM_PWM_Start+0x62>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	223d      	movs	r2, #61	@ 0x3d
 8012d3a:	5c9b      	ldrb	r3, [r3, r2]
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	3b01      	subs	r3, #1
 8012d40:	1e5a      	subs	r2, r3, #1
 8012d42:	4193      	sbcs	r3, r2
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d001      	beq.n	8012d4e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	e052      	b.n	8012df4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d104      	bne.n	8012d5e <HAL_TIM_PWM_Start+0x7a>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	223a      	movs	r2, #58	@ 0x3a
 8012d58:	2102      	movs	r1, #2
 8012d5a:	5499      	strb	r1, [r3, r2]
 8012d5c:	e013      	b.n	8012d86 <HAL_TIM_PWM_Start+0xa2>
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	2b04      	cmp	r3, #4
 8012d62:	d104      	bne.n	8012d6e <HAL_TIM_PWM_Start+0x8a>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	223b      	movs	r2, #59	@ 0x3b
 8012d68:	2102      	movs	r1, #2
 8012d6a:	5499      	strb	r1, [r3, r2]
 8012d6c:	e00b      	b.n	8012d86 <HAL_TIM_PWM_Start+0xa2>
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	2b08      	cmp	r3, #8
 8012d72:	d104      	bne.n	8012d7e <HAL_TIM_PWM_Start+0x9a>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	223c      	movs	r2, #60	@ 0x3c
 8012d78:	2102      	movs	r1, #2
 8012d7a:	5499      	strb	r1, [r3, r2]
 8012d7c:	e003      	b.n	8012d86 <HAL_TIM_PWM_Start+0xa2>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	223d      	movs	r2, #61	@ 0x3d
 8012d82:	2102      	movs	r1, #2
 8012d84:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	6839      	ldr	r1, [r7, #0]
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	0018      	movs	r0, r3
 8012d90:	f000 fa62 	bl	8013258 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681a      	ldr	r2, [r3, #0]
 8012d98:	2380      	movs	r3, #128	@ 0x80
 8012d9a:	05db      	lsls	r3, r3, #23
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d00e      	beq.n	8012dbe <HAL_TIM_PWM_Start+0xda>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	4a15      	ldr	r2, [pc, #84]	@ (8012dfc <HAL_TIM_PWM_Start+0x118>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d009      	beq.n	8012dbe <HAL_TIM_PWM_Start+0xda>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	4a14      	ldr	r2, [pc, #80]	@ (8012e00 <HAL_TIM_PWM_Start+0x11c>)
 8012db0:	4293      	cmp	r3, r2
 8012db2:	d004      	beq.n	8012dbe <HAL_TIM_PWM_Start+0xda>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	4a12      	ldr	r2, [pc, #72]	@ (8012e04 <HAL_TIM_PWM_Start+0x120>)
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d111      	bne.n	8012de2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	2207      	movs	r2, #7
 8012dc6:	4013      	ands	r3, r2
 8012dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2b06      	cmp	r3, #6
 8012dce:	d010      	beq.n	8012df2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2101      	movs	r1, #1
 8012ddc:	430a      	orrs	r2, r1
 8012dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012de0:	e007      	b.n	8012df2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2101      	movs	r1, #1
 8012dee:	430a      	orrs	r2, r1
 8012df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012df2:	2300      	movs	r3, #0
}
 8012df4:	0018      	movs	r0, r3
 8012df6:	46bd      	mov	sp, r7
 8012df8:	b004      	add	sp, #16
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	40000400 	.word	0x40000400
 8012e00:	40010800 	.word	0x40010800
 8012e04:	40011400 	.word	0x40011400

08012e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b086      	sub	sp, #24
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	60f8      	str	r0, [r7, #12]
 8012e10:	60b9      	str	r1, [r7, #8]
 8012e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012e14:	2317      	movs	r3, #23
 8012e16:	18fb      	adds	r3, r7, r3
 8012e18:	2200      	movs	r2, #0
 8012e1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2238      	movs	r2, #56	@ 0x38
 8012e20:	5c9b      	ldrb	r3, [r3, r2]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d101      	bne.n	8012e2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8012e26:	2302      	movs	r3, #2
 8012e28:	e0ad      	b.n	8012f86 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2238      	movs	r2, #56	@ 0x38
 8012e2e:	2101      	movs	r1, #1
 8012e30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b0c      	cmp	r3, #12
 8012e36:	d100      	bne.n	8012e3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8012e38:	e076      	b.n	8012f28 <HAL_TIM_PWM_ConfigChannel+0x120>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b0c      	cmp	r3, #12
 8012e3e:	d900      	bls.n	8012e42 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8012e40:	e095      	b.n	8012f6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2b08      	cmp	r3, #8
 8012e46:	d04e      	beq.n	8012ee6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2b08      	cmp	r3, #8
 8012e4c:	d900      	bls.n	8012e50 <HAL_TIM_PWM_ConfigChannel+0x48>
 8012e4e:	e08e      	b.n	8012f6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d003      	beq.n	8012e5e <HAL_TIM_PWM_ConfigChannel+0x56>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2b04      	cmp	r3, #4
 8012e5a:	d021      	beq.n	8012ea0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8012e5c:	e087      	b.n	8012f6e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	0011      	movs	r1, r2
 8012e66:	0018      	movs	r0, r3
 8012e68:	f000 f8f2 	bl	8013050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	699a      	ldr	r2, [r3, #24]
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2108      	movs	r1, #8
 8012e78:	430a      	orrs	r2, r1
 8012e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	699a      	ldr	r2, [r3, #24]
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2104      	movs	r1, #4
 8012e88:	438a      	bics	r2, r1
 8012e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	6999      	ldr	r1, [r3, #24]
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	68da      	ldr	r2, [r3, #12]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	430a      	orrs	r2, r1
 8012e9c:	619a      	str	r2, [r3, #24]
      break;
 8012e9e:	e06b      	b.n	8012f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	68ba      	ldr	r2, [r7, #8]
 8012ea6:	0011      	movs	r1, r2
 8012ea8:	0018      	movs	r0, r3
 8012eaa:	f000 f90d 	bl	80130c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	699a      	ldr	r2, [r3, #24]
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2180      	movs	r1, #128	@ 0x80
 8012eba:	0109      	lsls	r1, r1, #4
 8012ebc:	430a      	orrs	r2, r1
 8012ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	699a      	ldr	r2, [r3, #24]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4931      	ldr	r1, [pc, #196]	@ (8012f90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8012ecc:	400a      	ands	r2, r1
 8012ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	6999      	ldr	r1, [r3, #24]
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	68db      	ldr	r3, [r3, #12]
 8012eda:	021a      	lsls	r2, r3, #8
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	430a      	orrs	r2, r1
 8012ee2:	619a      	str	r2, [r3, #24]
      break;
 8012ee4:	e048      	b.n	8012f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	68ba      	ldr	r2, [r7, #8]
 8012eec:	0011      	movs	r1, r2
 8012eee:	0018      	movs	r0, r3
 8012ef0:	f000 f92c 	bl	801314c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	69da      	ldr	r2, [r3, #28]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2108      	movs	r1, #8
 8012f00:	430a      	orrs	r2, r1
 8012f02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	69da      	ldr	r2, [r3, #28]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2104      	movs	r1, #4
 8012f10:	438a      	bics	r2, r1
 8012f12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	69d9      	ldr	r1, [r3, #28]
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	68da      	ldr	r2, [r3, #12]
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	430a      	orrs	r2, r1
 8012f24:	61da      	str	r2, [r3, #28]
      break;
 8012f26:	e027      	b.n	8012f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	68ba      	ldr	r2, [r7, #8]
 8012f2e:	0011      	movs	r1, r2
 8012f30:	0018      	movs	r0, r3
 8012f32:	f000 f94b 	bl	80131cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	69da      	ldr	r2, [r3, #28]
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2180      	movs	r1, #128	@ 0x80
 8012f42:	0109      	lsls	r1, r1, #4
 8012f44:	430a      	orrs	r2, r1
 8012f46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	69da      	ldr	r2, [r3, #28]
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	490f      	ldr	r1, [pc, #60]	@ (8012f90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8012f54:	400a      	ands	r2, r1
 8012f56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	69d9      	ldr	r1, [r3, #28]
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	021a      	lsls	r2, r3, #8
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	430a      	orrs	r2, r1
 8012f6a:	61da      	str	r2, [r3, #28]
      break;
 8012f6c:	e004      	b.n	8012f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8012f6e:	2317      	movs	r3, #23
 8012f70:	18fb      	adds	r3, r7, r3
 8012f72:	2201      	movs	r2, #1
 8012f74:	701a      	strb	r2, [r3, #0]
      break;
 8012f76:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2238      	movs	r2, #56	@ 0x38
 8012f7c:	2100      	movs	r1, #0
 8012f7e:	5499      	strb	r1, [r3, r2]

  return status;
 8012f80:	2317      	movs	r3, #23
 8012f82:	18fb      	adds	r3, r7, r3
 8012f84:	781b      	ldrb	r3, [r3, #0]
}
 8012f86:	0018      	movs	r0, r3
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	b006      	add	sp, #24
 8012f8c:	bd80      	pop	{r7, pc}
 8012f8e:	46c0      	nop			@ (mov r8, r8)
 8012f90:	fffffbff 	.word	0xfffffbff

08012f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	2380      	movs	r3, #128	@ 0x80
 8012fa8:	05db      	lsls	r3, r3, #23
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d00b      	beq.n	8012fc6 <TIM_Base_SetConfig+0x32>
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	4a23      	ldr	r2, [pc, #140]	@ (8013040 <TIM_Base_SetConfig+0xac>)
 8012fb2:	4293      	cmp	r3, r2
 8012fb4:	d007      	beq.n	8012fc6 <TIM_Base_SetConfig+0x32>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4a22      	ldr	r2, [pc, #136]	@ (8013044 <TIM_Base_SetConfig+0xb0>)
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d003      	beq.n	8012fc6 <TIM_Base_SetConfig+0x32>
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	4a21      	ldr	r2, [pc, #132]	@ (8013048 <TIM_Base_SetConfig+0xb4>)
 8012fc2:	4293      	cmp	r3, r2
 8012fc4:	d108      	bne.n	8012fd8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2270      	movs	r2, #112	@ 0x70
 8012fca:	4393      	bics	r3, r2
 8012fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	2380      	movs	r3, #128	@ 0x80
 8012fdc:	05db      	lsls	r3, r3, #23
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d00b      	beq.n	8012ffa <TIM_Base_SetConfig+0x66>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4a16      	ldr	r2, [pc, #88]	@ (8013040 <TIM_Base_SetConfig+0xac>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d007      	beq.n	8012ffa <TIM_Base_SetConfig+0x66>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4a15      	ldr	r2, [pc, #84]	@ (8013044 <TIM_Base_SetConfig+0xb0>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d003      	beq.n	8012ffa <TIM_Base_SetConfig+0x66>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4a14      	ldr	r2, [pc, #80]	@ (8013048 <TIM_Base_SetConfig+0xb4>)
 8012ff6:	4293      	cmp	r3, r2
 8012ff8:	d108      	bne.n	801300c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	4a13      	ldr	r2, [pc, #76]	@ (801304c <TIM_Base_SetConfig+0xb8>)
 8012ffe:	4013      	ands	r3, r2
 8013000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	68fa      	ldr	r2, [r7, #12]
 8013008:	4313      	orrs	r3, r2
 801300a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2280      	movs	r2, #128	@ 0x80
 8013010:	4393      	bics	r3, r2
 8013012:	001a      	movs	r2, r3
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	691b      	ldr	r3, [r3, #16]
 8013018:	4313      	orrs	r3, r2
 801301a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	68fa      	ldr	r2, [r7, #12]
 8013020:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	689a      	ldr	r2, [r3, #8]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2201      	movs	r2, #1
 8013036:	615a      	str	r2, [r3, #20]
}
 8013038:	46c0      	nop			@ (mov r8, r8)
 801303a:	46bd      	mov	sp, r7
 801303c:	b004      	add	sp, #16
 801303e:	bd80      	pop	{r7, pc}
 8013040:	40000400 	.word	0x40000400
 8013044:	40010800 	.word	0x40010800
 8013048:	40011400 	.word	0x40011400
 801304c:	fffffcff 	.word	0xfffffcff

08013050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6a1b      	ldr	r3, [r3, #32]
 801305e:	2201      	movs	r2, #1
 8013060:	4393      	bics	r3, r2
 8013062:	001a      	movs	r2, r3
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6a1b      	ldr	r3, [r3, #32]
 801306c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	699b      	ldr	r3, [r3, #24]
 8013078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2270      	movs	r2, #112	@ 0x70
 801307e:	4393      	bics	r3, r2
 8013080:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	2203      	movs	r2, #3
 8013086:	4393      	bics	r3, r2
 8013088:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	68fa      	ldr	r2, [r7, #12]
 8013090:	4313      	orrs	r3, r2
 8013092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2202      	movs	r2, #2
 8013098:	4393      	bics	r3, r2
 801309a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	689b      	ldr	r3, [r3, #8]
 80130a0:	697a      	ldr	r2, [r7, #20]
 80130a2:	4313      	orrs	r3, r2
 80130a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	693a      	ldr	r2, [r7, #16]
 80130aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	685a      	ldr	r2, [r3, #4]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	697a      	ldr	r2, [r7, #20]
 80130be:	621a      	str	r2, [r3, #32]
}
 80130c0:	46c0      	nop			@ (mov r8, r8)
 80130c2:	46bd      	mov	sp, r7
 80130c4:	b006      	add	sp, #24
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b086      	sub	sp, #24
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6a1b      	ldr	r3, [r3, #32]
 80130d6:	2210      	movs	r2, #16
 80130d8:	4393      	bics	r3, r2
 80130da:	001a      	movs	r2, r3
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6a1b      	ldr	r3, [r3, #32]
 80130e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	699b      	ldr	r3, [r3, #24]
 80130f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	4a13      	ldr	r2, [pc, #76]	@ (8013144 <TIM_OC2_SetConfig+0x7c>)
 80130f6:	4013      	ands	r3, r2
 80130f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	4a12      	ldr	r2, [pc, #72]	@ (8013148 <TIM_OC2_SetConfig+0x80>)
 80130fe:	4013      	ands	r3, r2
 8013100:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	021b      	lsls	r3, r3, #8
 8013108:	68fa      	ldr	r2, [r7, #12]
 801310a:	4313      	orrs	r3, r2
 801310c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	2220      	movs	r2, #32
 8013112:	4393      	bics	r3, r2
 8013114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	011b      	lsls	r3, r3, #4
 801311c:	697a      	ldr	r2, [r7, #20]
 801311e:	4313      	orrs	r3, r2
 8013120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	693a      	ldr	r2, [r7, #16]
 8013126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	68fa      	ldr	r2, [r7, #12]
 801312c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	685a      	ldr	r2, [r3, #4]
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	697a      	ldr	r2, [r7, #20]
 801313a:	621a      	str	r2, [r3, #32]
}
 801313c:	46c0      	nop			@ (mov r8, r8)
 801313e:	46bd      	mov	sp, r7
 8013140:	b006      	add	sp, #24
 8013142:	bd80      	pop	{r7, pc}
 8013144:	ffff8fff 	.word	0xffff8fff
 8013148:	fffffcff 	.word	0xfffffcff

0801314c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b086      	sub	sp, #24
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	6a1b      	ldr	r3, [r3, #32]
 801315a:	4a1a      	ldr	r2, [pc, #104]	@ (80131c4 <TIM_OC3_SetConfig+0x78>)
 801315c:	401a      	ands	r2, r3
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6a1b      	ldr	r3, [r3, #32]
 8013166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	69db      	ldr	r3, [r3, #28]
 8013172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	2270      	movs	r2, #112	@ 0x70
 8013178:	4393      	bics	r3, r2
 801317a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2203      	movs	r2, #3
 8013180:	4393      	bics	r3, r2
 8013182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	4313      	orrs	r3, r2
 801318c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	4a0d      	ldr	r2, [pc, #52]	@ (80131c8 <TIM_OC3_SetConfig+0x7c>)
 8013192:	4013      	ands	r3, r2
 8013194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	689b      	ldr	r3, [r3, #8]
 801319a:	021b      	lsls	r3, r3, #8
 801319c:	697a      	ldr	r2, [r7, #20]
 801319e:	4313      	orrs	r3, r2
 80131a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	693a      	ldr	r2, [r7, #16]
 80131a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	68fa      	ldr	r2, [r7, #12]
 80131ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	685a      	ldr	r2, [r3, #4]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	697a      	ldr	r2, [r7, #20]
 80131ba:	621a      	str	r2, [r3, #32]
}
 80131bc:	46c0      	nop			@ (mov r8, r8)
 80131be:	46bd      	mov	sp, r7
 80131c0:	b006      	add	sp, #24
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	fffffeff 	.word	0xfffffeff
 80131c8:	fffffdff 	.word	0xfffffdff

080131cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b086      	sub	sp, #24
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6a1b      	ldr	r3, [r3, #32]
 80131da:	4a1b      	ldr	r2, [pc, #108]	@ (8013248 <TIM_OC4_SetConfig+0x7c>)
 80131dc:	401a      	ands	r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6a1b      	ldr	r3, [r3, #32]
 80131e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	69db      	ldr	r3, [r3, #28]
 80131f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	4a15      	ldr	r2, [pc, #84]	@ (801324c <TIM_OC4_SetConfig+0x80>)
 80131f8:	4013      	ands	r3, r2
 80131fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	4a14      	ldr	r2, [pc, #80]	@ (8013250 <TIM_OC4_SetConfig+0x84>)
 8013200:	4013      	ands	r3, r2
 8013202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	021b      	lsls	r3, r3, #8
 801320a:	68fa      	ldr	r2, [r7, #12]
 801320c:	4313      	orrs	r3, r2
 801320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	4a10      	ldr	r2, [pc, #64]	@ (8013254 <TIM_OC4_SetConfig+0x88>)
 8013214:	4013      	ands	r3, r2
 8013216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	689b      	ldr	r3, [r3, #8]
 801321c:	031b      	lsls	r3, r3, #12
 801321e:	697a      	ldr	r2, [r7, #20]
 8013220:	4313      	orrs	r3, r2
 8013222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	693a      	ldr	r2, [r7, #16]
 8013228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	68fa      	ldr	r2, [r7, #12]
 801322e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	685a      	ldr	r2, [r3, #4]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	697a      	ldr	r2, [r7, #20]
 801323c:	621a      	str	r2, [r3, #32]
}
 801323e:	46c0      	nop			@ (mov r8, r8)
 8013240:	46bd      	mov	sp, r7
 8013242:	b006      	add	sp, #24
 8013244:	bd80      	pop	{r7, pc}
 8013246:	46c0      	nop			@ (mov r8, r8)
 8013248:	ffffefff 	.word	0xffffefff
 801324c:	ffff8fff 	.word	0xffff8fff
 8013250:	fffffcff 	.word	0xfffffcff
 8013254:	ffffdfff 	.word	0xffffdfff

08013258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	60f8      	str	r0, [r7, #12]
 8013260:	60b9      	str	r1, [r7, #8]
 8013262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	221f      	movs	r2, #31
 8013268:	4013      	ands	r3, r2
 801326a:	2201      	movs	r2, #1
 801326c:	409a      	lsls	r2, r3
 801326e:	0013      	movs	r3, r2
 8013270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6a1b      	ldr	r3, [r3, #32]
 8013276:	697a      	ldr	r2, [r7, #20]
 8013278:	43d2      	mvns	r2, r2
 801327a:	401a      	ands	r2, r3
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	6a1a      	ldr	r2, [r3, #32]
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	211f      	movs	r1, #31
 8013288:	400b      	ands	r3, r1
 801328a:	6879      	ldr	r1, [r7, #4]
 801328c:	4099      	lsls	r1, r3
 801328e:	000b      	movs	r3, r1
 8013290:	431a      	orrs	r2, r3
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	621a      	str	r2, [r3, #32]
}
 8013296:	46c0      	nop			@ (mov r8, r8)
 8013298:	46bd      	mov	sp, r7
 801329a:	b006      	add	sp, #24
 801329c:	bd80      	pop	{r7, pc}
	...

080132a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2238      	movs	r2, #56	@ 0x38
 80132ae:	5c9b      	ldrb	r3, [r3, r2]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d101      	bne.n	80132b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80132b4:	2302      	movs	r3, #2
 80132b6:	e047      	b.n	8013348 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2238      	movs	r2, #56	@ 0x38
 80132bc:	2101      	movs	r1, #1
 80132be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2239      	movs	r2, #57	@ 0x39
 80132c4:	2102      	movs	r1, #2
 80132c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	685b      	ldr	r3, [r3, #4]
 80132ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	689b      	ldr	r3, [r3, #8]
 80132d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2270      	movs	r2, #112	@ 0x70
 80132dc:	4393      	bics	r3, r2
 80132de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	68fa      	ldr	r2, [r7, #12]
 80132e6:	4313      	orrs	r3, r2
 80132e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	68fa      	ldr	r2, [r7, #12]
 80132f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	2380      	movs	r3, #128	@ 0x80
 80132f8:	05db      	lsls	r3, r3, #23
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d00e      	beq.n	801331c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	4a13      	ldr	r2, [pc, #76]	@ (8013350 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8013304:	4293      	cmp	r3, r2
 8013306:	d009      	beq.n	801331c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	4a11      	ldr	r2, [pc, #68]	@ (8013354 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d004      	beq.n	801331c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	4a10      	ldr	r2, [pc, #64]	@ (8013358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8013318:	4293      	cmp	r3, r2
 801331a:	d10c      	bne.n	8013336 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	2280      	movs	r2, #128	@ 0x80
 8013320:	4393      	bics	r3, r2
 8013322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	68ba      	ldr	r2, [r7, #8]
 801332a:	4313      	orrs	r3, r2
 801332c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2239      	movs	r2, #57	@ 0x39
 801333a:	2101      	movs	r1, #1
 801333c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2238      	movs	r2, #56	@ 0x38
 8013342:	2100      	movs	r1, #0
 8013344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013346:	2300      	movs	r3, #0
}
 8013348:	0018      	movs	r0, r3
 801334a:	46bd      	mov	sp, r7
 801334c:	b004      	add	sp, #16
 801334e:	bd80      	pop	{r7, pc}
 8013350:	40000400 	.word	0x40000400
 8013354:	40010800 	.word	0x40010800
 8013358:	40011400 	.word	0x40011400

0801335c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b082      	sub	sp, #8
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2238      	movs	r2, #56	@ 0x38
 801336a:	5c9b      	ldrb	r3, [r3, r2]
 801336c:	2b01      	cmp	r3, #1
 801336e:	d101      	bne.n	8013374 <HAL_TIMEx_RemapConfig+0x18>
 8013370:	2302      	movs	r3, #2
 8013372:	e00c      	b.n	801338e <HAL_TIMEx_RemapConfig+0x32>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2238      	movs	r2, #56	@ 0x38
 8013378:	2101      	movs	r1, #1
 801337a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	683a      	ldr	r2, [r7, #0]
 8013382:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2238      	movs	r2, #56	@ 0x38
 8013388:	2100      	movs	r1, #0
 801338a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	0018      	movs	r0, r3
 8013390:	46bd      	mov	sp, r7
 8013392:	b002      	add	sp, #8
 8013394:	bd80      	pop	{r7, pc}
	...

08013398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d101      	bne.n	80133aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80133a6:	2301      	movs	r3, #1
 80133a8:	e053      	b.n	8013452 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d116      	bne.n	80133e0 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2278      	movs	r2, #120	@ 0x78
 80133b6:	2100      	movs	r1, #0
 80133b8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	0018      	movs	r0, r3
 80133be:	f000 fd0f 	bl	8013de0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	22b0      	movs	r2, #176	@ 0xb0
 80133c6:	589b      	ldr	r3, [r3, r2]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d103      	bne.n	80133d4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	21b0      	movs	r1, #176	@ 0xb0
 80133d0:	4a22      	ldr	r2, [pc, #136]	@ (801345c <HAL_UART_Init+0xc4>)
 80133d2:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	22b0      	movs	r2, #176	@ 0xb0
 80133d8:	589b      	ldr	r3, [r3, r2]
 80133da:	687a      	ldr	r2, [r7, #4]
 80133dc:	0010      	movs	r0, r2
 80133de:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2224      	movs	r2, #36	@ 0x24
 80133e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2101      	movs	r1, #1
 80133f2:	438a      	bics	r2, r1
 80133f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	0018      	movs	r0, r3
 80133fa:	f000 fd35 	bl	8013e68 <UART_SetConfig>
 80133fe:	0003      	movs	r3, r0
 8013400:	2b01      	cmp	r3, #1
 8013402:	d101      	bne.n	8013408 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8013404:	2301      	movs	r3, #1
 8013406:	e024      	b.n	8013452 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801340c:	2b00      	cmp	r3, #0
 801340e:	d003      	beq.n	8013418 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	0018      	movs	r0, r3
 8013414:	f000 ffc6 	bl	80143a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	490f      	ldr	r1, [pc, #60]	@ (8013460 <HAL_UART_Init+0xc8>)
 8013424:	400a      	ands	r2, r1
 8013426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	689a      	ldr	r2, [r3, #8]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	212a      	movs	r1, #42	@ 0x2a
 8013434:	438a      	bics	r2, r1
 8013436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2101      	movs	r1, #1
 8013444:	430a      	orrs	r2, r1
 8013446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	0018      	movs	r0, r3
 801344c:	f001 f85e 	bl	801450c <UART_CheckIdleState>
 8013450:	0003      	movs	r3, r0
}
 8013452:	0018      	movs	r0, r3
 8013454:	46bd      	mov	sp, r7
 8013456:	b002      	add	sp, #8
 8013458:	bd80      	pop	{r7, pc}
 801345a:	46c0      	nop			@ (mov r8, r8)
 801345c:	0800b209 	.word	0x0800b209
 8013460:	ffffb7ff 	.word	0xffffb7ff

08013464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b08a      	sub	sp, #40	@ 0x28
 8013468:	af02      	add	r7, sp, #8
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	60b9      	str	r1, [r7, #8]
 801346e:	603b      	str	r3, [r7, #0]
 8013470:	1dbb      	adds	r3, r7, #6
 8013472:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013478:	2b20      	cmp	r3, #32
 801347a:	d000      	beq.n	801347e <HAL_UART_Transmit+0x1a>
 801347c:	e08c      	b.n	8013598 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d003      	beq.n	801348c <HAL_UART_Transmit+0x28>
 8013484:	1dbb      	adds	r3, r7, #6
 8013486:	881b      	ldrh	r3, [r3, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d101      	bne.n	8013490 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801348c:	2301      	movs	r3, #1
 801348e:	e084      	b.n	801359a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	689a      	ldr	r2, [r3, #8]
 8013494:	2380      	movs	r3, #128	@ 0x80
 8013496:	015b      	lsls	r3, r3, #5
 8013498:	429a      	cmp	r2, r3
 801349a:	d109      	bne.n	80134b0 <HAL_UART_Transmit+0x4c>
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d105      	bne.n	80134b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	2201      	movs	r2, #1
 80134a8:	4013      	ands	r3, r2
 80134aa:	d001      	beq.n	80134b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80134ac:	2301      	movs	r3, #1
 80134ae:	e074      	b.n	801359a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2284      	movs	r2, #132	@ 0x84
 80134b4:	2100      	movs	r1, #0
 80134b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2221      	movs	r2, #33	@ 0x21
 80134bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80134be:	f7f8 fbcb 	bl	800bc58 <HAL_GetTick>
 80134c2:	0003      	movs	r3, r0
 80134c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	1dba      	adds	r2, r7, #6
 80134ca:	2150      	movs	r1, #80	@ 0x50
 80134cc:	8812      	ldrh	r2, [r2, #0]
 80134ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	1dba      	adds	r2, r7, #6
 80134d4:	2152      	movs	r1, #82	@ 0x52
 80134d6:	8812      	ldrh	r2, [r2, #0]
 80134d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	689a      	ldr	r2, [r3, #8]
 80134de:	2380      	movs	r3, #128	@ 0x80
 80134e0:	015b      	lsls	r3, r3, #5
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d108      	bne.n	80134f8 <HAL_UART_Transmit+0x94>
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	691b      	ldr	r3, [r3, #16]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d104      	bne.n	80134f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80134ee:	2300      	movs	r3, #0
 80134f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	61bb      	str	r3, [r7, #24]
 80134f6:	e003      	b.n	8013500 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80134fc:	2300      	movs	r3, #0
 80134fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013500:	e02f      	b.n	8013562 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	68f8      	ldr	r0, [r7, #12]
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	9300      	str	r3, [sp, #0]
 801350a:	0013      	movs	r3, r2
 801350c:	2200      	movs	r2, #0
 801350e:	2180      	movs	r1, #128	@ 0x80
 8013510:	f001 f8a4 	bl	801465c <UART_WaitOnFlagUntilTimeout>
 8013514:	1e03      	subs	r3, r0, #0
 8013516:	d004      	beq.n	8013522 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2220      	movs	r2, #32
 801351c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801351e:	2303      	movs	r3, #3
 8013520:	e03b      	b.n	801359a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d10b      	bne.n	8013540 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	001a      	movs	r2, r3
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	05d2      	lsls	r2, r2, #23
 8013534:	0dd2      	lsrs	r2, r2, #23
 8013536:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	3302      	adds	r3, #2
 801353c:	61bb      	str	r3, [r7, #24]
 801353e:	e007      	b.n	8013550 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	781a      	ldrb	r2, [r3, #0]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	3301      	adds	r3, #1
 801354e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2252      	movs	r2, #82	@ 0x52
 8013554:	5a9b      	ldrh	r3, [r3, r2]
 8013556:	b29b      	uxth	r3, r3
 8013558:	3b01      	subs	r3, #1
 801355a:	b299      	uxth	r1, r3
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2252      	movs	r2, #82	@ 0x52
 8013560:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2252      	movs	r2, #82	@ 0x52
 8013566:	5a9b      	ldrh	r3, [r3, r2]
 8013568:	b29b      	uxth	r3, r3
 801356a:	2b00      	cmp	r3, #0
 801356c:	d1c9      	bne.n	8013502 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801356e:	697a      	ldr	r2, [r7, #20]
 8013570:	68f8      	ldr	r0, [r7, #12]
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	0013      	movs	r3, r2
 8013578:	2200      	movs	r2, #0
 801357a:	2140      	movs	r1, #64	@ 0x40
 801357c:	f001 f86e 	bl	801465c <UART_WaitOnFlagUntilTimeout>
 8013580:	1e03      	subs	r3, r0, #0
 8013582:	d004      	beq.n	801358e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	2220      	movs	r2, #32
 8013588:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801358a:	2303      	movs	r3, #3
 801358c:	e005      	b.n	801359a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2220      	movs	r2, #32
 8013592:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8013594:	2300      	movs	r3, #0
 8013596:	e000      	b.n	801359a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8013598:	2302      	movs	r3, #2
  }
}
 801359a:	0018      	movs	r0, r3
 801359c:	46bd      	mov	sp, r7
 801359e:	b008      	add	sp, #32
 80135a0:	bd80      	pop	{r7, pc}
	...

080135a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b088      	sub	sp, #32
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	1dbb      	adds	r3, r7, #6
 80135b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135b6:	2b20      	cmp	r3, #32
 80135b8:	d000      	beq.n	80135bc <HAL_UART_Transmit_DMA+0x18>
 80135ba:	e077      	b.n	80136ac <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d003      	beq.n	80135ca <HAL_UART_Transmit_DMA+0x26>
 80135c2:	1dbb      	adds	r3, r7, #6
 80135c4:	881b      	ldrh	r3, [r3, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d101      	bne.n	80135ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80135ca:	2301      	movs	r3, #1
 80135cc:	e06f      	b.n	80136ae <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	689a      	ldr	r2, [r3, #8]
 80135d2:	2380      	movs	r3, #128	@ 0x80
 80135d4:	015b      	lsls	r3, r3, #5
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d109      	bne.n	80135ee <HAL_UART_Transmit_DMA+0x4a>
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	691b      	ldr	r3, [r3, #16]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d105      	bne.n	80135ee <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	2201      	movs	r2, #1
 80135e6:	4013      	ands	r3, r2
 80135e8:	d001      	beq.n	80135ee <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80135ea:	2301      	movs	r3, #1
 80135ec:	e05f      	b.n	80136ae <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	68ba      	ldr	r2, [r7, #8]
 80135f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	1dba      	adds	r2, r7, #6
 80135f8:	2150      	movs	r1, #80	@ 0x50
 80135fa:	8812      	ldrh	r2, [r2, #0]
 80135fc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	1dba      	adds	r2, r7, #6
 8013602:	2152      	movs	r1, #82	@ 0x52
 8013604:	8812      	ldrh	r2, [r2, #0]
 8013606:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2284      	movs	r2, #132	@ 0x84
 801360c:	2100      	movs	r1, #0
 801360e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2221      	movs	r2, #33	@ 0x21
 8013614:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801361a:	2b00      	cmp	r3, #0
 801361c:	d027      	beq.n	801366e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013622:	4a25      	ldr	r2, [pc, #148]	@ (80136b8 <HAL_UART_Transmit_DMA+0x114>)
 8013624:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801362a:	4a24      	ldr	r2, [pc, #144]	@ (80136bc <HAL_UART_Transmit_DMA+0x118>)
 801362c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013632:	4a23      	ldr	r2, [pc, #140]	@ (80136c0 <HAL_UART_Transmit_DMA+0x11c>)
 8013634:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801363a:	2200      	movs	r2, #0
 801363c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013646:	0019      	movs	r1, r3
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	3328      	adds	r3, #40	@ 0x28
 801364e:	001a      	movs	r2, r3
 8013650:	1dbb      	adds	r3, r7, #6
 8013652:	881b      	ldrh	r3, [r3, #0]
 8013654:	f7f9 f820 	bl	800c698 <HAL_DMA_Start_IT>
 8013658:	1e03      	subs	r3, r0, #0
 801365a:	d008      	beq.n	801366e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2284      	movs	r2, #132	@ 0x84
 8013660:	2110      	movs	r1, #16
 8013662:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2220      	movs	r2, #32
 8013668:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801366a:	2301      	movs	r3, #1
 801366c:	e01f      	b.n	80136ae <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	2240      	movs	r2, #64	@ 0x40
 8013674:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013676:	f3ef 8310 	mrs	r3, PRIMASK
 801367a:	613b      	str	r3, [r7, #16]
  return(result);
 801367c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801367e:	61fb      	str	r3, [r7, #28]
 8013680:	2301      	movs	r3, #1
 8013682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	f383 8810 	msr	PRIMASK, r3
}
 801368a:	46c0      	nop			@ (mov r8, r8)
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	689a      	ldr	r2, [r3, #8]
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	2180      	movs	r1, #128	@ 0x80
 8013698:	430a      	orrs	r2, r1
 801369a:	609a      	str	r2, [r3, #8]
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136a0:	69bb      	ldr	r3, [r7, #24]
 80136a2:	f383 8810 	msr	PRIMASK, r3
}
 80136a6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80136a8:	2300      	movs	r3, #0
 80136aa:	e000      	b.n	80136ae <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80136ac:	2302      	movs	r3, #2
  }
}
 80136ae:	0018      	movs	r0, r3
 80136b0:	46bd      	mov	sp, r7
 80136b2:	b008      	add	sp, #32
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	46c0      	nop			@ (mov r8, r8)
 80136b8:	08014981 	.word	0x08014981
 80136bc:	08014a1d 	.word	0x08014a1d
 80136c0:	08014bbd 	.word	0x08014bbd

080136c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b088      	sub	sp, #32
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	1dbb      	adds	r3, r7, #6
 80136d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2280      	movs	r2, #128	@ 0x80
 80136d6:	589b      	ldr	r3, [r3, r2]
 80136d8:	2b20      	cmp	r3, #32
 80136da:	d14a      	bne.n	8013772 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d003      	beq.n	80136ea <HAL_UART_Receive_DMA+0x26>
 80136e2:	1dbb      	adds	r3, r7, #6
 80136e4:	881b      	ldrh	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d101      	bne.n	80136ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80136ea:	2301      	movs	r3, #1
 80136ec:	e042      	b.n	8013774 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	689a      	ldr	r2, [r3, #8]
 80136f2:	2380      	movs	r3, #128	@ 0x80
 80136f4:	015b      	lsls	r3, r3, #5
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d109      	bne.n	801370e <HAL_UART_Receive_DMA+0x4a>
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	691b      	ldr	r3, [r3, #16]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d105      	bne.n	801370e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	2201      	movs	r2, #1
 8013706:	4013      	ands	r3, r2
 8013708:	d001      	beq.n	801370e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801370a:	2301      	movs	r3, #1
 801370c:	e032      	b.n	8013774 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2200      	movs	r2, #0
 8013712:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	4a18      	ldr	r2, [pc, #96]	@ (801377c <HAL_UART_Receive_DMA+0xb8>)
 801371a:	4293      	cmp	r3, r2
 801371c:	d020      	beq.n	8013760 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	685a      	ldr	r2, [r3, #4]
 8013724:	2380      	movs	r3, #128	@ 0x80
 8013726:	041b      	lsls	r3, r3, #16
 8013728:	4013      	ands	r3, r2
 801372a:	d019      	beq.n	8013760 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801372c:	f3ef 8310 	mrs	r3, PRIMASK
 8013730:	613b      	str	r3, [r7, #16]
  return(result);
 8013732:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013734:	61fb      	str	r3, [r7, #28]
 8013736:	2301      	movs	r3, #1
 8013738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	f383 8810 	msr	PRIMASK, r3
}
 8013740:	46c0      	nop			@ (mov r8, r8)
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	681a      	ldr	r2, [r3, #0]
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	2180      	movs	r1, #128	@ 0x80
 801374e:	04c9      	lsls	r1, r1, #19
 8013750:	430a      	orrs	r2, r1
 8013752:	601a      	str	r2, [r3, #0]
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	f383 8810 	msr	PRIMASK, r3
}
 801375e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013760:	1dbb      	adds	r3, r7, #6
 8013762:	881a      	ldrh	r2, [r3, #0]
 8013764:	68b9      	ldr	r1, [r7, #8]
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	0018      	movs	r0, r3
 801376a:	f000 ffe1 	bl	8014730 <UART_Start_Receive_DMA>
 801376e:	0003      	movs	r3, r0
 8013770:	e000      	b.n	8013774 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8013772:	2302      	movs	r3, #2
  }
}
 8013774:	0018      	movs	r0, r3
 8013776:	46bd      	mov	sp, r7
 8013778:	b008      	add	sp, #32
 801377a:	bd80      	pop	{r7, pc}
 801377c:	40004800 	.word	0x40004800

08013780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013780:	b590      	push	{r4, r7, lr}
 8013782:	b0ab      	sub	sp, #172	@ 0xac
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	69db      	ldr	r3, [r3, #28]
 801378e:	22a4      	movs	r2, #164	@ 0xa4
 8013790:	18b9      	adds	r1, r7, r2
 8013792:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	20a0      	movs	r0, #160	@ 0xa0
 801379c:	1839      	adds	r1, r7, r0
 801379e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	689b      	ldr	r3, [r3, #8]
 80137a6:	219c      	movs	r1, #156	@ 0x9c
 80137a8:	1879      	adds	r1, r7, r1
 80137aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80137ac:	0011      	movs	r1, r2
 80137ae:	18bb      	adds	r3, r7, r2
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	4a9c      	ldr	r2, [pc, #624]	@ (8013a24 <HAL_UART_IRQHandler+0x2a4>)
 80137b4:	4013      	ands	r3, r2
 80137b6:	2298      	movs	r2, #152	@ 0x98
 80137b8:	18bc      	adds	r4, r7, r2
 80137ba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80137bc:	18bb      	adds	r3, r7, r2
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d114      	bne.n	80137ee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80137c4:	187b      	adds	r3, r7, r1
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2220      	movs	r2, #32
 80137ca:	4013      	ands	r3, r2
 80137cc:	d00f      	beq.n	80137ee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80137ce:	183b      	adds	r3, r7, r0
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2220      	movs	r2, #32
 80137d4:	4013      	ands	r3, r2
 80137d6:	d00a      	beq.n	80137ee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d100      	bne.n	80137e2 <HAL_UART_IRQHandler+0x62>
 80137e0:	e2aa      	b.n	8013d38 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	0010      	movs	r0, r2
 80137ea:	4798      	blx	r3
      }
      return;
 80137ec:	e2a4      	b.n	8013d38 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80137ee:	2398      	movs	r3, #152	@ 0x98
 80137f0:	18fb      	adds	r3, r7, r3
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d100      	bne.n	80137fa <HAL_UART_IRQHandler+0x7a>
 80137f8:	e11a      	b.n	8013a30 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80137fa:	239c      	movs	r3, #156	@ 0x9c
 80137fc:	18fb      	adds	r3, r7, r3
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	2201      	movs	r2, #1
 8013802:	4013      	ands	r3, r2
 8013804:	d106      	bne.n	8013814 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013806:	23a0      	movs	r3, #160	@ 0xa0
 8013808:	18fb      	adds	r3, r7, r3
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	4a86      	ldr	r2, [pc, #536]	@ (8013a28 <HAL_UART_IRQHandler+0x2a8>)
 801380e:	4013      	ands	r3, r2
 8013810:	d100      	bne.n	8013814 <HAL_UART_IRQHandler+0x94>
 8013812:	e10d      	b.n	8013a30 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013814:	23a4      	movs	r3, #164	@ 0xa4
 8013816:	18fb      	adds	r3, r7, r3
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	2201      	movs	r2, #1
 801381c:	4013      	ands	r3, r2
 801381e:	d012      	beq.n	8013846 <HAL_UART_IRQHandler+0xc6>
 8013820:	23a0      	movs	r3, #160	@ 0xa0
 8013822:	18fb      	adds	r3, r7, r3
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	2380      	movs	r3, #128	@ 0x80
 8013828:	005b      	lsls	r3, r3, #1
 801382a:	4013      	ands	r3, r2
 801382c:	d00b      	beq.n	8013846 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2201      	movs	r2, #1
 8013834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2284      	movs	r2, #132	@ 0x84
 801383a:	589b      	ldr	r3, [r3, r2]
 801383c:	2201      	movs	r2, #1
 801383e:	431a      	orrs	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2184      	movs	r1, #132	@ 0x84
 8013844:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013846:	23a4      	movs	r3, #164	@ 0xa4
 8013848:	18fb      	adds	r3, r7, r3
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2202      	movs	r2, #2
 801384e:	4013      	ands	r3, r2
 8013850:	d011      	beq.n	8013876 <HAL_UART_IRQHandler+0xf6>
 8013852:	239c      	movs	r3, #156	@ 0x9c
 8013854:	18fb      	adds	r3, r7, r3
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	2201      	movs	r2, #1
 801385a:	4013      	ands	r3, r2
 801385c:	d00b      	beq.n	8013876 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	2202      	movs	r2, #2
 8013864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	2284      	movs	r2, #132	@ 0x84
 801386a:	589b      	ldr	r3, [r3, r2]
 801386c:	2204      	movs	r2, #4
 801386e:	431a      	orrs	r2, r3
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2184      	movs	r1, #132	@ 0x84
 8013874:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013876:	23a4      	movs	r3, #164	@ 0xa4
 8013878:	18fb      	adds	r3, r7, r3
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2204      	movs	r2, #4
 801387e:	4013      	ands	r3, r2
 8013880:	d011      	beq.n	80138a6 <HAL_UART_IRQHandler+0x126>
 8013882:	239c      	movs	r3, #156	@ 0x9c
 8013884:	18fb      	adds	r3, r7, r3
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	2201      	movs	r2, #1
 801388a:	4013      	ands	r3, r2
 801388c:	d00b      	beq.n	80138a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2204      	movs	r2, #4
 8013894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2284      	movs	r2, #132	@ 0x84
 801389a:	589b      	ldr	r3, [r3, r2]
 801389c:	2202      	movs	r2, #2
 801389e:	431a      	orrs	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2184      	movs	r1, #132	@ 0x84
 80138a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80138a6:	23a4      	movs	r3, #164	@ 0xa4
 80138a8:	18fb      	adds	r3, r7, r3
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2208      	movs	r2, #8
 80138ae:	4013      	ands	r3, r2
 80138b0:	d017      	beq.n	80138e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80138b2:	23a0      	movs	r3, #160	@ 0xa0
 80138b4:	18fb      	adds	r3, r7, r3
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	2220      	movs	r2, #32
 80138ba:	4013      	ands	r3, r2
 80138bc:	d105      	bne.n	80138ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80138be:	239c      	movs	r3, #156	@ 0x9c
 80138c0:	18fb      	adds	r3, r7, r3
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2201      	movs	r2, #1
 80138c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80138c8:	d00b      	beq.n	80138e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	2208      	movs	r2, #8
 80138d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2284      	movs	r2, #132	@ 0x84
 80138d6:	589b      	ldr	r3, [r3, r2]
 80138d8:	2208      	movs	r2, #8
 80138da:	431a      	orrs	r2, r3
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2184      	movs	r1, #132	@ 0x84
 80138e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80138e2:	23a4      	movs	r3, #164	@ 0xa4
 80138e4:	18fb      	adds	r3, r7, r3
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	2380      	movs	r3, #128	@ 0x80
 80138ea:	011b      	lsls	r3, r3, #4
 80138ec:	4013      	ands	r3, r2
 80138ee:	d013      	beq.n	8013918 <HAL_UART_IRQHandler+0x198>
 80138f0:	23a0      	movs	r3, #160	@ 0xa0
 80138f2:	18fb      	adds	r3, r7, r3
 80138f4:	681a      	ldr	r2, [r3, #0]
 80138f6:	2380      	movs	r3, #128	@ 0x80
 80138f8:	04db      	lsls	r3, r3, #19
 80138fa:	4013      	ands	r3, r2
 80138fc:	d00c      	beq.n	8013918 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	2280      	movs	r2, #128	@ 0x80
 8013904:	0112      	lsls	r2, r2, #4
 8013906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2284      	movs	r2, #132	@ 0x84
 801390c:	589b      	ldr	r3, [r3, r2]
 801390e:	2220      	movs	r2, #32
 8013910:	431a      	orrs	r2, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2184      	movs	r1, #132	@ 0x84
 8013916:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2284      	movs	r2, #132	@ 0x84
 801391c:	589b      	ldr	r3, [r3, r2]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d100      	bne.n	8013924 <HAL_UART_IRQHandler+0x1a4>
 8013922:	e20b      	b.n	8013d3c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8013924:	23a4      	movs	r3, #164	@ 0xa4
 8013926:	18fb      	adds	r3, r7, r3
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	2220      	movs	r2, #32
 801392c:	4013      	ands	r3, r2
 801392e:	d00e      	beq.n	801394e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013930:	23a0      	movs	r3, #160	@ 0xa0
 8013932:	18fb      	adds	r3, r7, r3
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2220      	movs	r2, #32
 8013938:	4013      	ands	r3, r2
 801393a:	d008      	beq.n	801394e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013940:	2b00      	cmp	r3, #0
 8013942:	d004      	beq.n	801394e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013948:	687a      	ldr	r2, [r7, #4]
 801394a:	0010      	movs	r0, r2
 801394c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2284      	movs	r2, #132	@ 0x84
 8013952:	589b      	ldr	r3, [r3, r2]
 8013954:	2194      	movs	r1, #148	@ 0x94
 8013956:	187a      	adds	r2, r7, r1
 8013958:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	2240      	movs	r2, #64	@ 0x40
 8013962:	4013      	ands	r3, r2
 8013964:	2b40      	cmp	r3, #64	@ 0x40
 8013966:	d004      	beq.n	8013972 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013968:	187b      	adds	r3, r7, r1
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2228      	movs	r2, #40	@ 0x28
 801396e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013970:	d04b      	beq.n	8013a0a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	0018      	movs	r0, r3
 8013976:	f000 ff9f 	bl	80148b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	689b      	ldr	r3, [r3, #8]
 8013980:	2240      	movs	r2, #64	@ 0x40
 8013982:	4013      	ands	r3, r2
 8013984:	2b40      	cmp	r3, #64	@ 0x40
 8013986:	d139      	bne.n	80139fc <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013988:	f3ef 8310 	mrs	r3, PRIMASK
 801398c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801398e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013990:	2090      	movs	r0, #144	@ 0x90
 8013992:	183a      	adds	r2, r7, r0
 8013994:	6013      	str	r3, [r2, #0]
 8013996:	2301      	movs	r3, #1
 8013998:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801399a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801399c:	f383 8810 	msr	PRIMASK, r3
}
 80139a0:	46c0      	nop			@ (mov r8, r8)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	689a      	ldr	r2, [r3, #8]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2140      	movs	r1, #64	@ 0x40
 80139ae:	438a      	bics	r2, r1
 80139b0:	609a      	str	r2, [r3, #8]
 80139b2:	183b      	adds	r3, r7, r0
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80139ba:	f383 8810 	msr	PRIMASK, r3
}
 80139be:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d012      	beq.n	80139ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139cc:	4a17      	ldr	r2, [pc, #92]	@ (8013a2c <HAL_UART_IRQHandler+0x2ac>)
 80139ce:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139d4:	0018      	movs	r0, r3
 80139d6:	f7f8 ff05 	bl	800c7e4 <HAL_DMA_Abort_IT>
 80139da:	1e03      	subs	r3, r0, #0
 80139dc:	d020      	beq.n	8013a20 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139e8:	0018      	movs	r0, r3
 80139ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80139ec:	e018      	b.n	8013a20 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2298      	movs	r2, #152	@ 0x98
 80139f2:	589b      	ldr	r3, [r3, r2]
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	0010      	movs	r0, r2
 80139f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80139fa:	e011      	b.n	8013a20 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2298      	movs	r2, #152	@ 0x98
 8013a00:	589b      	ldr	r3, [r3, r2]
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	0010      	movs	r0, r2
 8013a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a08:	e00a      	b.n	8013a20 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2298      	movs	r2, #152	@ 0x98
 8013a0e:	589b      	ldr	r3, [r3, r2]
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	0010      	movs	r0, r2
 8013a14:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2284      	movs	r2, #132	@ 0x84
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8013a1e:	e18d      	b.n	8013d3c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a20:	46c0      	nop			@ (mov r8, r8)
    return;
 8013a22:	e18b      	b.n	8013d3c <HAL_UART_IRQHandler+0x5bc>
 8013a24:	0000080f 	.word	0x0000080f
 8013a28:	04000120 	.word	0x04000120
 8013a2c:	08014c45 	.word	0x08014c45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d000      	beq.n	8013a3a <HAL_UART_IRQHandler+0x2ba>
 8013a38:	e13d      	b.n	8013cb6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013a3a:	23a4      	movs	r3, #164	@ 0xa4
 8013a3c:	18fb      	adds	r3, r7, r3
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2210      	movs	r2, #16
 8013a42:	4013      	ands	r3, r2
 8013a44:	d100      	bne.n	8013a48 <HAL_UART_IRQHandler+0x2c8>
 8013a46:	e136      	b.n	8013cb6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013a48:	23a0      	movs	r3, #160	@ 0xa0
 8013a4a:	18fb      	adds	r3, r7, r3
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2210      	movs	r2, #16
 8013a50:	4013      	ands	r3, r2
 8013a52:	d100      	bne.n	8013a56 <HAL_UART_IRQHandler+0x2d6>
 8013a54:	e12f      	b.n	8013cb6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	2210      	movs	r2, #16
 8013a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	689b      	ldr	r3, [r3, #8]
 8013a64:	2240      	movs	r2, #64	@ 0x40
 8013a66:	4013      	ands	r3, r2
 8013a68:	2b40      	cmp	r3, #64	@ 0x40
 8013a6a:	d000      	beq.n	8013a6e <HAL_UART_IRQHandler+0x2ee>
 8013a6c:	e0a2      	b.n	8013bb4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	685a      	ldr	r2, [r3, #4]
 8013a76:	217e      	movs	r1, #126	@ 0x7e
 8013a78:	187b      	adds	r3, r7, r1
 8013a7a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8013a7c:	187b      	adds	r3, r7, r1
 8013a7e:	881b      	ldrh	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d100      	bne.n	8013a86 <HAL_UART_IRQHandler+0x306>
 8013a84:	e15c      	b.n	8013d40 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2258      	movs	r2, #88	@ 0x58
 8013a8a:	5a9b      	ldrh	r3, [r3, r2]
 8013a8c:	187a      	adds	r2, r7, r1
 8013a8e:	8812      	ldrh	r2, [r2, #0]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d300      	bcc.n	8013a96 <HAL_UART_IRQHandler+0x316>
 8013a94:	e154      	b.n	8013d40 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	187a      	adds	r2, r7, r1
 8013a9a:	215a      	movs	r1, #90	@ 0x5a
 8013a9c:	8812      	ldrh	r2, [r2, #0]
 8013a9e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2220      	movs	r2, #32
 8013aaa:	4013      	ands	r3, r2
 8013aac:	d16f      	bne.n	8013b8e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013aae:	f3ef 8310 	mrs	r3, PRIMASK
 8013ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8013ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013ab8:	2301      	movs	r3, #1
 8013aba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013abe:	f383 8810 	msr	PRIMASK, r3
}
 8013ac2:	46c0      	nop			@ (mov r8, r8)
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	49a0      	ldr	r1, [pc, #640]	@ (8013d50 <HAL_UART_IRQHandler+0x5d0>)
 8013ad0:	400a      	ands	r2, r1
 8013ad2:	601a      	str	r2, [r3, #0]
 8013ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ada:	f383 8810 	msr	PRIMASK, r3
}
 8013ade:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8013ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8013ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ae8:	677b      	str	r3, [r7, #116]	@ 0x74
 8013aea:	2301      	movs	r3, #1
 8013aec:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013af0:	f383 8810 	msr	PRIMASK, r3
}
 8013af4:	46c0      	nop			@ (mov r8, r8)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	689a      	ldr	r2, [r3, #8]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2101      	movs	r1, #1
 8013b02:	438a      	bics	r2, r1
 8013b04:	609a      	str	r2, [r3, #8]
 8013b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013b08:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b0c:	f383 8810 	msr	PRIMASK, r3
}
 8013b10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b12:	f3ef 8310 	mrs	r3, PRIMASK
 8013b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8013b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013b1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b22:	f383 8810 	msr	PRIMASK, r3
}
 8013b26:	46c0      	nop			@ (mov r8, r8)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	689a      	ldr	r2, [r3, #8]
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2140      	movs	r1, #64	@ 0x40
 8013b34:	438a      	bics	r2, r1
 8013b36:	609a      	str	r2, [r3, #8]
 8013b38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b3a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b3e:	f383 8810 	msr	PRIMASK, r3
}
 8013b42:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2280      	movs	r2, #128	@ 0x80
 8013b48:	2120      	movs	r1, #32
 8013b4a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b52:	f3ef 8310 	mrs	r3, PRIMASK
 8013b56:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8013b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b62:	f383 8810 	msr	PRIMASK, r3
}
 8013b66:	46c0      	nop			@ (mov r8, r8)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	2110      	movs	r1, #16
 8013b74:	438a      	bics	r2, r1
 8013b76:	601a      	str	r2, [r3, #0]
 8013b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b7e:	f383 8810 	msr	PRIMASK, r3
}
 8013b82:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013b88:	0018      	movs	r0, r3
 8013b8a:	f7f8 fdeb 	bl	800c764 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2202      	movs	r2, #2
 8013b92:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	22ac      	movs	r2, #172	@ 0xac
 8013b98:	589b      	ldr	r3, [r3, r2]
 8013b9a:	687a      	ldr	r2, [r7, #4]
 8013b9c:	2158      	movs	r1, #88	@ 0x58
 8013b9e:	5a51      	ldrh	r1, [r2, r1]
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	205a      	movs	r0, #90	@ 0x5a
 8013ba4:	5a12      	ldrh	r2, [r2, r0]
 8013ba6:	b292      	uxth	r2, r2
 8013ba8:	1a8a      	subs	r2, r1, r2
 8013baa:	b291      	uxth	r1, r2
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	0010      	movs	r0, r2
 8013bb0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013bb2:	e0c5      	b.n	8013d40 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2258      	movs	r2, #88	@ 0x58
 8013bb8:	5a99      	ldrh	r1, [r3, r2]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	225a      	movs	r2, #90	@ 0x5a
 8013bbe:	5a9b      	ldrh	r3, [r3, r2]
 8013bc0:	b29a      	uxth	r2, r3
 8013bc2:	208e      	movs	r0, #142	@ 0x8e
 8013bc4:	183b      	adds	r3, r7, r0
 8013bc6:	1a8a      	subs	r2, r1, r2
 8013bc8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	225a      	movs	r2, #90	@ 0x5a
 8013bce:	5a9b      	ldrh	r3, [r3, r2]
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d100      	bne.n	8013bd8 <HAL_UART_IRQHandler+0x458>
 8013bd6:	e0b5      	b.n	8013d44 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8013bd8:	183b      	adds	r3, r7, r0
 8013bda:	881b      	ldrh	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d100      	bne.n	8013be2 <HAL_UART_IRQHandler+0x462>
 8013be0:	e0b0      	b.n	8013d44 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013be2:	f3ef 8310 	mrs	r3, PRIMASK
 8013be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8013be8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013bea:	2488      	movs	r4, #136	@ 0x88
 8013bec:	193a      	adds	r2, r7, r4
 8013bee:	6013      	str	r3, [r2, #0]
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	f383 8810 	msr	PRIMASK, r3
}
 8013bfa:	46c0      	nop			@ (mov r8, r8)
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	681a      	ldr	r2, [r3, #0]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	4953      	ldr	r1, [pc, #332]	@ (8013d54 <HAL_UART_IRQHandler+0x5d4>)
 8013c08:	400a      	ands	r2, r1
 8013c0a:	601a      	str	r2, [r3, #0]
 8013c0c:	193b      	adds	r3, r7, r4
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	f383 8810 	msr	PRIMASK, r3
}
 8013c18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8013c1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8013c20:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c22:	2484      	movs	r4, #132	@ 0x84
 8013c24:	193a      	adds	r2, r7, r4
 8013c26:	6013      	str	r3, [r2, #0]
 8013c28:	2301      	movs	r3, #1
 8013c2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	f383 8810 	msr	PRIMASK, r3
}
 8013c32:	46c0      	nop			@ (mov r8, r8)
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	689a      	ldr	r2, [r3, #8]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2101      	movs	r1, #1
 8013c40:	438a      	bics	r2, r1
 8013c42:	609a      	str	r2, [r3, #8]
 8013c44:	193b      	adds	r3, r7, r4
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	f383 8810 	msr	PRIMASK, r3
}
 8013c50:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2280      	movs	r2, #128	@ 0x80
 8013c56:	2120      	movs	r1, #32
 8013c58:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2200      	movs	r2, #0
 8013c64:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c66:	f3ef 8310 	mrs	r3, PRIMASK
 8013c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c6e:	2480      	movs	r4, #128	@ 0x80
 8013c70:	193a      	adds	r2, r7, r4
 8013c72:	6013      	str	r3, [r2, #0]
 8013c74:	2301      	movs	r3, #1
 8013c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c7a:	f383 8810 	msr	PRIMASK, r3
}
 8013c7e:	46c0      	nop			@ (mov r8, r8)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2110      	movs	r1, #16
 8013c8c:	438a      	bics	r2, r1
 8013c8e:	601a      	str	r2, [r3, #0]
 8013c90:	193b      	adds	r3, r7, r4
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c98:	f383 8810 	msr	PRIMASK, r3
}
 8013c9c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2202      	movs	r2, #2
 8013ca2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	22ac      	movs	r2, #172	@ 0xac
 8013ca8:	589b      	ldr	r3, [r3, r2]
 8013caa:	183a      	adds	r2, r7, r0
 8013cac:	8811      	ldrh	r1, [r2, #0]
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	0010      	movs	r0, r2
 8013cb2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013cb4:	e046      	b.n	8013d44 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013cb6:	23a4      	movs	r3, #164	@ 0xa4
 8013cb8:	18fb      	adds	r3, r7, r3
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	2380      	movs	r3, #128	@ 0x80
 8013cbe:	035b      	lsls	r3, r3, #13
 8013cc0:	4013      	ands	r3, r2
 8013cc2:	d012      	beq.n	8013cea <HAL_UART_IRQHandler+0x56a>
 8013cc4:	239c      	movs	r3, #156	@ 0x9c
 8013cc6:	18fb      	adds	r3, r7, r3
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	2380      	movs	r3, #128	@ 0x80
 8013ccc:	03db      	lsls	r3, r3, #15
 8013cce:	4013      	ands	r3, r2
 8013cd0:	d00b      	beq.n	8013cea <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2280      	movs	r2, #128	@ 0x80
 8013cd8:	0352      	lsls	r2, r2, #13
 8013cda:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	22a8      	movs	r2, #168	@ 0xa8
 8013ce0:	589b      	ldr	r3, [r3, r2]
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	0010      	movs	r0, r2
 8013ce6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013ce8:	e02f      	b.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8013cea:	23a4      	movs	r3, #164	@ 0xa4
 8013cec:	18fb      	adds	r3, r7, r3
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	2280      	movs	r2, #128	@ 0x80
 8013cf2:	4013      	ands	r3, r2
 8013cf4:	d00f      	beq.n	8013d16 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8013cf6:	23a0      	movs	r3, #160	@ 0xa0
 8013cf8:	18fb      	adds	r3, r7, r3
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2280      	movs	r2, #128	@ 0x80
 8013cfe:	4013      	ands	r3, r2
 8013d00:	d009      	beq.n	8013d16 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d01e      	beq.n	8013d48 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	0010      	movs	r0, r2
 8013d12:	4798      	blx	r3
    }
    return;
 8013d14:	e018      	b.n	8013d48 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013d16:	23a4      	movs	r3, #164	@ 0xa4
 8013d18:	18fb      	adds	r3, r7, r3
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	2240      	movs	r2, #64	@ 0x40
 8013d1e:	4013      	ands	r3, r2
 8013d20:	d013      	beq.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
 8013d22:	23a0      	movs	r3, #160	@ 0xa0
 8013d24:	18fb      	adds	r3, r7, r3
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2240      	movs	r2, #64	@ 0x40
 8013d2a:	4013      	ands	r3, r2
 8013d2c:	d00d      	beq.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	0018      	movs	r0, r3
 8013d32:	f000 ffa0 	bl	8014c76 <UART_EndTransmit_IT>
    return;
 8013d36:	e008      	b.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
      return;
 8013d38:	46c0      	nop			@ (mov r8, r8)
 8013d3a:	e006      	b.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
    return;
 8013d3c:	46c0      	nop			@ (mov r8, r8)
 8013d3e:	e004      	b.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
      return;
 8013d40:	46c0      	nop			@ (mov r8, r8)
 8013d42:	e002      	b.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
      return;
 8013d44:	46c0      	nop			@ (mov r8, r8)
 8013d46:	e000      	b.n	8013d4a <HAL_UART_IRQHandler+0x5ca>
    return;
 8013d48:	46c0      	nop			@ (mov r8, r8)
  }

}
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	b02b      	add	sp, #172	@ 0xac
 8013d4e:	bd90      	pop	{r4, r7, pc}
 8013d50:	fffffeff 	.word	0xfffffeff
 8013d54:	fffffedf 	.word	0xfffffedf

08013d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013d60:	46c0      	nop			@ (mov r8, r8)
 8013d62:	46bd      	mov	sp, r7
 8013d64:	b002      	add	sp, #8
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8013d70:	46c0      	nop			@ (mov r8, r8)
 8013d72:	46bd      	mov	sp, r7
 8013d74:	b002      	add	sp, #8
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8013d80:	46c0      	nop			@ (mov r8, r8)
 8013d82:	46bd      	mov	sp, r7
 8013d84:	b002      	add	sp, #8
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013d90:	46c0      	nop			@ (mov r8, r8)
 8013d92:	46bd      	mov	sp, r7
 8013d94:	b002      	add	sp, #8
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b082      	sub	sp, #8
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8013da0:	46c0      	nop			@ (mov r8, r8)
 8013da2:	46bd      	mov	sp, r7
 8013da4:	b002      	add	sp, #8
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8013db0:	46c0      	nop			@ (mov r8, r8)
 8013db2:	46bd      	mov	sp, r7
 8013db4:	b002      	add	sp, #8
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8013dc0:	46c0      	nop			@ (mov r8, r8)
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	b002      	add	sp, #8
 8013dc6:	bd80      	pop	{r7, pc}

08013dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	000a      	movs	r2, r1
 8013dd2:	1cbb      	adds	r3, r7, #2
 8013dd4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013dd6:	46c0      	nop			@ (mov r8, r8)
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	b002      	add	sp, #8
 8013ddc:	bd80      	pop	{r7, pc}
	...

08013de0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2188      	movs	r1, #136	@ 0x88
 8013dec:	4a14      	ldr	r2, [pc, #80]	@ (8013e40 <UART_InitCallbacksToDefault+0x60>)
 8013dee:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	218c      	movs	r1, #140	@ 0x8c
 8013df4:	4a13      	ldr	r2, [pc, #76]	@ (8013e44 <UART_InitCallbacksToDefault+0x64>)
 8013df6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2190      	movs	r1, #144	@ 0x90
 8013dfc:	4a12      	ldr	r2, [pc, #72]	@ (8013e48 <UART_InitCallbacksToDefault+0x68>)
 8013dfe:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2194      	movs	r1, #148	@ 0x94
 8013e04:	4a11      	ldr	r2, [pc, #68]	@ (8013e4c <UART_InitCallbacksToDefault+0x6c>)
 8013e06:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2198      	movs	r1, #152	@ 0x98
 8013e0c:	4a10      	ldr	r2, [pc, #64]	@ (8013e50 <UART_InitCallbacksToDefault+0x70>)
 8013e0e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	219c      	movs	r1, #156	@ 0x9c
 8013e14:	4a0f      	ldr	r2, [pc, #60]	@ (8013e54 <UART_InitCallbacksToDefault+0x74>)
 8013e16:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	21a0      	movs	r1, #160	@ 0xa0
 8013e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8013e58 <UART_InitCallbacksToDefault+0x78>)
 8013e1e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	21a4      	movs	r1, #164	@ 0xa4
 8013e24:	4a0d      	ldr	r2, [pc, #52]	@ (8013e5c <UART_InitCallbacksToDefault+0x7c>)
 8013e26:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	21a8      	movs	r1, #168	@ 0xa8
 8013e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8013e60 <UART_InitCallbacksToDefault+0x80>)
 8013e2e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	21ac      	movs	r1, #172	@ 0xac
 8013e34:	4a0b      	ldr	r2, [pc, #44]	@ (8013e64 <UART_InitCallbacksToDefault+0x84>)
 8013e36:	505a      	str	r2, [r3, r1]

}
 8013e38:	46c0      	nop			@ (mov r8, r8)
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	b002      	add	sp, #8
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	08013d69 	.word	0x08013d69
 8013e44:	08013d59 	.word	0x08013d59
 8013e48:	08013d89 	.word	0x08013d89
 8013e4c:	08013d79 	.word	0x08013d79
 8013e50:	08003a61 	.word	0x08003a61
 8013e54:	08013d99 	.word	0x08013d99
 8013e58:	08013da9 	.word	0x08013da9
 8013e5c:	08013db9 	.word	0x08013db9
 8013e60:	08014cd1 	.word	0x08014cd1
 8013e64:	08013dc9 	.word	0x08013dc9

08013e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013e68:	b5b0      	push	{r4, r5, r7, lr}
 8013e6a:	b08e      	sub	sp, #56	@ 0x38
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e70:	231a      	movs	r3, #26
 8013e72:	2218      	movs	r2, #24
 8013e74:	189b      	adds	r3, r3, r2
 8013e76:	19db      	adds	r3, r3, r7
 8013e78:	2200      	movs	r2, #0
 8013e7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	689a      	ldr	r2, [r3, #8]
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	691b      	ldr	r3, [r3, #16]
 8013e84:	431a      	orrs	r2, r3
 8013e86:	69fb      	ldr	r3, [r7, #28]
 8013e88:	695b      	ldr	r3, [r3, #20]
 8013e8a:	431a      	orrs	r2, r3
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	69db      	ldr	r3, [r3, #28]
 8013e90:	4313      	orrs	r3, r2
 8013e92:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	4ac3      	ldr	r2, [pc, #780]	@ (80141a8 <UART_SetConfig+0x340>)
 8013e9c:	4013      	ands	r3, r2
 8013e9e:	0019      	movs	r1, r3
 8013ea0:	69fb      	ldr	r3, [r7, #28]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ea6:	430a      	orrs	r2, r1
 8013ea8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013eaa:	69fb      	ldr	r3, [r7, #28]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	4abe      	ldr	r2, [pc, #760]	@ (80141ac <UART_SetConfig+0x344>)
 8013eb2:	4013      	ands	r3, r2
 8013eb4:	0019      	movs	r1, r3
 8013eb6:	69fb      	ldr	r3, [r7, #28]
 8013eb8:	68da      	ldr	r2, [r3, #12]
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	430a      	orrs	r2, r1
 8013ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	699b      	ldr	r3, [r3, #24]
 8013ec6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	4ab8      	ldr	r2, [pc, #736]	@ (80141b0 <UART_SetConfig+0x348>)
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	d004      	beq.n	8013edc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	6a1b      	ldr	r3, [r3, #32]
 8013ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ed8:	4313      	orrs	r3, r2
 8013eda:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	689b      	ldr	r3, [r3, #8]
 8013ee2:	4ab4      	ldr	r2, [pc, #720]	@ (80141b4 <UART_SetConfig+0x34c>)
 8013ee4:	4013      	ands	r3, r2
 8013ee6:	0019      	movs	r1, r3
 8013ee8:	69fb      	ldr	r3, [r7, #28]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013eee:	430a      	orrs	r2, r1
 8013ef0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	4ab0      	ldr	r2, [pc, #704]	@ (80141b8 <UART_SetConfig+0x350>)
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d131      	bne.n	8013f60 <UART_SetConfig+0xf8>
 8013efc:	4baf      	ldr	r3, [pc, #700]	@ (80141bc <UART_SetConfig+0x354>)
 8013efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f00:	2203      	movs	r2, #3
 8013f02:	4013      	ands	r3, r2
 8013f04:	2b03      	cmp	r3, #3
 8013f06:	d01d      	beq.n	8013f44 <UART_SetConfig+0xdc>
 8013f08:	d823      	bhi.n	8013f52 <UART_SetConfig+0xea>
 8013f0a:	2b02      	cmp	r3, #2
 8013f0c:	d00c      	beq.n	8013f28 <UART_SetConfig+0xc0>
 8013f0e:	d820      	bhi.n	8013f52 <UART_SetConfig+0xea>
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d002      	beq.n	8013f1a <UART_SetConfig+0xb2>
 8013f14:	2b01      	cmp	r3, #1
 8013f16:	d00e      	beq.n	8013f36 <UART_SetConfig+0xce>
 8013f18:	e01b      	b.n	8013f52 <UART_SetConfig+0xea>
 8013f1a:	231b      	movs	r3, #27
 8013f1c:	2218      	movs	r2, #24
 8013f1e:	189b      	adds	r3, r3, r2
 8013f20:	19db      	adds	r3, r3, r7
 8013f22:	2201      	movs	r2, #1
 8013f24:	701a      	strb	r2, [r3, #0]
 8013f26:	e0b4      	b.n	8014092 <UART_SetConfig+0x22a>
 8013f28:	231b      	movs	r3, #27
 8013f2a:	2218      	movs	r2, #24
 8013f2c:	189b      	adds	r3, r3, r2
 8013f2e:	19db      	adds	r3, r3, r7
 8013f30:	2202      	movs	r2, #2
 8013f32:	701a      	strb	r2, [r3, #0]
 8013f34:	e0ad      	b.n	8014092 <UART_SetConfig+0x22a>
 8013f36:	231b      	movs	r3, #27
 8013f38:	2218      	movs	r2, #24
 8013f3a:	189b      	adds	r3, r3, r2
 8013f3c:	19db      	adds	r3, r3, r7
 8013f3e:	2204      	movs	r2, #4
 8013f40:	701a      	strb	r2, [r3, #0]
 8013f42:	e0a6      	b.n	8014092 <UART_SetConfig+0x22a>
 8013f44:	231b      	movs	r3, #27
 8013f46:	2218      	movs	r2, #24
 8013f48:	189b      	adds	r3, r3, r2
 8013f4a:	19db      	adds	r3, r3, r7
 8013f4c:	2208      	movs	r2, #8
 8013f4e:	701a      	strb	r2, [r3, #0]
 8013f50:	e09f      	b.n	8014092 <UART_SetConfig+0x22a>
 8013f52:	231b      	movs	r3, #27
 8013f54:	2218      	movs	r2, #24
 8013f56:	189b      	adds	r3, r3, r2
 8013f58:	19db      	adds	r3, r3, r7
 8013f5a:	2210      	movs	r2, #16
 8013f5c:	701a      	strb	r2, [r3, #0]
 8013f5e:	e098      	b.n	8014092 <UART_SetConfig+0x22a>
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	4a96      	ldr	r2, [pc, #600]	@ (80141c0 <UART_SetConfig+0x358>)
 8013f66:	4293      	cmp	r3, r2
 8013f68:	d131      	bne.n	8013fce <UART_SetConfig+0x166>
 8013f6a:	4b94      	ldr	r3, [pc, #592]	@ (80141bc <UART_SetConfig+0x354>)
 8013f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f6e:	220c      	movs	r2, #12
 8013f70:	4013      	ands	r3, r2
 8013f72:	2b0c      	cmp	r3, #12
 8013f74:	d01d      	beq.n	8013fb2 <UART_SetConfig+0x14a>
 8013f76:	d823      	bhi.n	8013fc0 <UART_SetConfig+0x158>
 8013f78:	2b08      	cmp	r3, #8
 8013f7a:	d00c      	beq.n	8013f96 <UART_SetConfig+0x12e>
 8013f7c:	d820      	bhi.n	8013fc0 <UART_SetConfig+0x158>
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d002      	beq.n	8013f88 <UART_SetConfig+0x120>
 8013f82:	2b04      	cmp	r3, #4
 8013f84:	d00e      	beq.n	8013fa4 <UART_SetConfig+0x13c>
 8013f86:	e01b      	b.n	8013fc0 <UART_SetConfig+0x158>
 8013f88:	231b      	movs	r3, #27
 8013f8a:	2218      	movs	r2, #24
 8013f8c:	189b      	adds	r3, r3, r2
 8013f8e:	19db      	adds	r3, r3, r7
 8013f90:	2200      	movs	r2, #0
 8013f92:	701a      	strb	r2, [r3, #0]
 8013f94:	e07d      	b.n	8014092 <UART_SetConfig+0x22a>
 8013f96:	231b      	movs	r3, #27
 8013f98:	2218      	movs	r2, #24
 8013f9a:	189b      	adds	r3, r3, r2
 8013f9c:	19db      	adds	r3, r3, r7
 8013f9e:	2202      	movs	r2, #2
 8013fa0:	701a      	strb	r2, [r3, #0]
 8013fa2:	e076      	b.n	8014092 <UART_SetConfig+0x22a>
 8013fa4:	231b      	movs	r3, #27
 8013fa6:	2218      	movs	r2, #24
 8013fa8:	189b      	adds	r3, r3, r2
 8013faa:	19db      	adds	r3, r3, r7
 8013fac:	2204      	movs	r2, #4
 8013fae:	701a      	strb	r2, [r3, #0]
 8013fb0:	e06f      	b.n	8014092 <UART_SetConfig+0x22a>
 8013fb2:	231b      	movs	r3, #27
 8013fb4:	2218      	movs	r2, #24
 8013fb6:	189b      	adds	r3, r3, r2
 8013fb8:	19db      	adds	r3, r3, r7
 8013fba:	2208      	movs	r2, #8
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	e068      	b.n	8014092 <UART_SetConfig+0x22a>
 8013fc0:	231b      	movs	r3, #27
 8013fc2:	2218      	movs	r2, #24
 8013fc4:	189b      	adds	r3, r3, r2
 8013fc6:	19db      	adds	r3, r3, r7
 8013fc8:	2210      	movs	r2, #16
 8013fca:	701a      	strb	r2, [r3, #0]
 8013fcc:	e061      	b.n	8014092 <UART_SetConfig+0x22a>
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4a7c      	ldr	r2, [pc, #496]	@ (80141c4 <UART_SetConfig+0x35c>)
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d106      	bne.n	8013fe6 <UART_SetConfig+0x17e>
 8013fd8:	231b      	movs	r3, #27
 8013fda:	2218      	movs	r2, #24
 8013fdc:	189b      	adds	r3, r3, r2
 8013fde:	19db      	adds	r3, r3, r7
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	701a      	strb	r2, [r3, #0]
 8013fe4:	e055      	b.n	8014092 <UART_SetConfig+0x22a>
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	4a77      	ldr	r2, [pc, #476]	@ (80141c8 <UART_SetConfig+0x360>)
 8013fec:	4293      	cmp	r3, r2
 8013fee:	d106      	bne.n	8013ffe <UART_SetConfig+0x196>
 8013ff0:	231b      	movs	r3, #27
 8013ff2:	2218      	movs	r2, #24
 8013ff4:	189b      	adds	r3, r3, r2
 8013ff6:	19db      	adds	r3, r3, r7
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	701a      	strb	r2, [r3, #0]
 8013ffc:	e049      	b.n	8014092 <UART_SetConfig+0x22a>
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	4a6b      	ldr	r2, [pc, #428]	@ (80141b0 <UART_SetConfig+0x348>)
 8014004:	4293      	cmp	r3, r2
 8014006:	d13e      	bne.n	8014086 <UART_SetConfig+0x21e>
 8014008:	4b6c      	ldr	r3, [pc, #432]	@ (80141bc <UART_SetConfig+0x354>)
 801400a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801400c:	23c0      	movs	r3, #192	@ 0xc0
 801400e:	011b      	lsls	r3, r3, #4
 8014010:	4013      	ands	r3, r2
 8014012:	22c0      	movs	r2, #192	@ 0xc0
 8014014:	0112      	lsls	r2, r2, #4
 8014016:	4293      	cmp	r3, r2
 8014018:	d027      	beq.n	801406a <UART_SetConfig+0x202>
 801401a:	22c0      	movs	r2, #192	@ 0xc0
 801401c:	0112      	lsls	r2, r2, #4
 801401e:	4293      	cmp	r3, r2
 8014020:	d82a      	bhi.n	8014078 <UART_SetConfig+0x210>
 8014022:	2280      	movs	r2, #128	@ 0x80
 8014024:	0112      	lsls	r2, r2, #4
 8014026:	4293      	cmp	r3, r2
 8014028:	d011      	beq.n	801404e <UART_SetConfig+0x1e6>
 801402a:	2280      	movs	r2, #128	@ 0x80
 801402c:	0112      	lsls	r2, r2, #4
 801402e:	4293      	cmp	r3, r2
 8014030:	d822      	bhi.n	8014078 <UART_SetConfig+0x210>
 8014032:	2b00      	cmp	r3, #0
 8014034:	d004      	beq.n	8014040 <UART_SetConfig+0x1d8>
 8014036:	2280      	movs	r2, #128	@ 0x80
 8014038:	00d2      	lsls	r2, r2, #3
 801403a:	4293      	cmp	r3, r2
 801403c:	d00e      	beq.n	801405c <UART_SetConfig+0x1f4>
 801403e:	e01b      	b.n	8014078 <UART_SetConfig+0x210>
 8014040:	231b      	movs	r3, #27
 8014042:	2218      	movs	r2, #24
 8014044:	189b      	adds	r3, r3, r2
 8014046:	19db      	adds	r3, r3, r7
 8014048:	2200      	movs	r2, #0
 801404a:	701a      	strb	r2, [r3, #0]
 801404c:	e021      	b.n	8014092 <UART_SetConfig+0x22a>
 801404e:	231b      	movs	r3, #27
 8014050:	2218      	movs	r2, #24
 8014052:	189b      	adds	r3, r3, r2
 8014054:	19db      	adds	r3, r3, r7
 8014056:	2202      	movs	r2, #2
 8014058:	701a      	strb	r2, [r3, #0]
 801405a:	e01a      	b.n	8014092 <UART_SetConfig+0x22a>
 801405c:	231b      	movs	r3, #27
 801405e:	2218      	movs	r2, #24
 8014060:	189b      	adds	r3, r3, r2
 8014062:	19db      	adds	r3, r3, r7
 8014064:	2204      	movs	r2, #4
 8014066:	701a      	strb	r2, [r3, #0]
 8014068:	e013      	b.n	8014092 <UART_SetConfig+0x22a>
 801406a:	231b      	movs	r3, #27
 801406c:	2218      	movs	r2, #24
 801406e:	189b      	adds	r3, r3, r2
 8014070:	19db      	adds	r3, r3, r7
 8014072:	2208      	movs	r2, #8
 8014074:	701a      	strb	r2, [r3, #0]
 8014076:	e00c      	b.n	8014092 <UART_SetConfig+0x22a>
 8014078:	231b      	movs	r3, #27
 801407a:	2218      	movs	r2, #24
 801407c:	189b      	adds	r3, r3, r2
 801407e:	19db      	adds	r3, r3, r7
 8014080:	2210      	movs	r2, #16
 8014082:	701a      	strb	r2, [r3, #0]
 8014084:	e005      	b.n	8014092 <UART_SetConfig+0x22a>
 8014086:	231b      	movs	r3, #27
 8014088:	2218      	movs	r2, #24
 801408a:	189b      	adds	r3, r3, r2
 801408c:	19db      	adds	r3, r3, r7
 801408e:	2210      	movs	r2, #16
 8014090:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014092:	69fb      	ldr	r3, [r7, #28]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	4a46      	ldr	r2, [pc, #280]	@ (80141b0 <UART_SetConfig+0x348>)
 8014098:	4293      	cmp	r3, r2
 801409a:	d000      	beq.n	801409e <UART_SetConfig+0x236>
 801409c:	e09a      	b.n	80141d4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801409e:	231b      	movs	r3, #27
 80140a0:	2218      	movs	r2, #24
 80140a2:	189b      	adds	r3, r3, r2
 80140a4:	19db      	adds	r3, r3, r7
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	2b08      	cmp	r3, #8
 80140aa:	d01d      	beq.n	80140e8 <UART_SetConfig+0x280>
 80140ac:	dc20      	bgt.n	80140f0 <UART_SetConfig+0x288>
 80140ae:	2b04      	cmp	r3, #4
 80140b0:	d015      	beq.n	80140de <UART_SetConfig+0x276>
 80140b2:	dc1d      	bgt.n	80140f0 <UART_SetConfig+0x288>
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d002      	beq.n	80140be <UART_SetConfig+0x256>
 80140b8:	2b02      	cmp	r3, #2
 80140ba:	d005      	beq.n	80140c8 <UART_SetConfig+0x260>
 80140bc:	e018      	b.n	80140f0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80140be:	f7fd ff95 	bl	8011fec <HAL_RCC_GetPCLK1Freq>
 80140c2:	0003      	movs	r3, r0
 80140c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80140c6:	e01c      	b.n	8014102 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80140c8:	4b3c      	ldr	r3, [pc, #240]	@ (80141bc <UART_SetConfig+0x354>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	2210      	movs	r2, #16
 80140ce:	4013      	ands	r3, r2
 80140d0:	d002      	beq.n	80140d8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80140d2:	4b3e      	ldr	r3, [pc, #248]	@ (80141cc <UART_SetConfig+0x364>)
 80140d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80140d6:	e014      	b.n	8014102 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80140d8:	4b3d      	ldr	r3, [pc, #244]	@ (80141d0 <UART_SetConfig+0x368>)
 80140da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80140dc:	e011      	b.n	8014102 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80140de:	f7fd fed5 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 80140e2:	0003      	movs	r3, r0
 80140e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80140e6:	e00c      	b.n	8014102 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80140e8:	2380      	movs	r3, #128	@ 0x80
 80140ea:	021b      	lsls	r3, r3, #8
 80140ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80140ee:	e008      	b.n	8014102 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80140f0:	2300      	movs	r3, #0
 80140f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80140f4:	231a      	movs	r3, #26
 80140f6:	2218      	movs	r2, #24
 80140f8:	189b      	adds	r3, r3, r2
 80140fa:	19db      	adds	r3, r3, r7
 80140fc:	2201      	movs	r2, #1
 80140fe:	701a      	strb	r2, [r3, #0]
        break;
 8014100:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014104:	2b00      	cmp	r3, #0
 8014106:	d100      	bne.n	801410a <UART_SetConfig+0x2a2>
 8014108:	e133      	b.n	8014372 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	685a      	ldr	r2, [r3, #4]
 801410e:	0013      	movs	r3, r2
 8014110:	005b      	lsls	r3, r3, #1
 8014112:	189b      	adds	r3, r3, r2
 8014114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014116:	429a      	cmp	r2, r3
 8014118:	d305      	bcc.n	8014126 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	685b      	ldr	r3, [r3, #4]
 801411e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014122:	429a      	cmp	r2, r3
 8014124:	d906      	bls.n	8014134 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8014126:	231a      	movs	r3, #26
 8014128:	2218      	movs	r2, #24
 801412a:	189b      	adds	r3, r3, r2
 801412c:	19db      	adds	r3, r3, r7
 801412e:	2201      	movs	r2, #1
 8014130:	701a      	strb	r2, [r3, #0]
 8014132:	e11e      	b.n	8014372 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014136:	613b      	str	r3, [r7, #16]
 8014138:	2300      	movs	r3, #0
 801413a:	617b      	str	r3, [r7, #20]
 801413c:	6939      	ldr	r1, [r7, #16]
 801413e:	697a      	ldr	r2, [r7, #20]
 8014140:	000b      	movs	r3, r1
 8014142:	0e1b      	lsrs	r3, r3, #24
 8014144:	0010      	movs	r0, r2
 8014146:	0205      	lsls	r5, r0, #8
 8014148:	431d      	orrs	r5, r3
 801414a:	000b      	movs	r3, r1
 801414c:	021c      	lsls	r4, r3, #8
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	685b      	ldr	r3, [r3, #4]
 8014152:	085b      	lsrs	r3, r3, #1
 8014154:	60bb      	str	r3, [r7, #8]
 8014156:	2300      	movs	r3, #0
 8014158:	60fb      	str	r3, [r7, #12]
 801415a:	68b8      	ldr	r0, [r7, #8]
 801415c:	68f9      	ldr	r1, [r7, #12]
 801415e:	1900      	adds	r0, r0, r4
 8014160:	4169      	adcs	r1, r5
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	603b      	str	r3, [r7, #0]
 8014168:	2300      	movs	r3, #0
 801416a:	607b      	str	r3, [r7, #4]
 801416c:	683a      	ldr	r2, [r7, #0]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f7ec fa06 	bl	8000580 <__aeabi_uldivmod>
 8014174:	0002      	movs	r2, r0
 8014176:	000b      	movs	r3, r1
 8014178:	0013      	movs	r3, r2
 801417a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801417c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801417e:	23c0      	movs	r3, #192	@ 0xc0
 8014180:	009b      	lsls	r3, r3, #2
 8014182:	429a      	cmp	r2, r3
 8014184:	d309      	bcc.n	801419a <UART_SetConfig+0x332>
 8014186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014188:	2380      	movs	r3, #128	@ 0x80
 801418a:	035b      	lsls	r3, r3, #13
 801418c:	429a      	cmp	r2, r3
 801418e:	d204      	bcs.n	801419a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014196:	60da      	str	r2, [r3, #12]
 8014198:	e0eb      	b.n	8014372 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801419a:	231a      	movs	r3, #26
 801419c:	2218      	movs	r2, #24
 801419e:	189b      	adds	r3, r3, r2
 80141a0:	19db      	adds	r3, r3, r7
 80141a2:	2201      	movs	r2, #1
 80141a4:	701a      	strb	r2, [r3, #0]
 80141a6:	e0e4      	b.n	8014372 <UART_SetConfig+0x50a>
 80141a8:	efff69f3 	.word	0xefff69f3
 80141ac:	ffffcfff 	.word	0xffffcfff
 80141b0:	40004800 	.word	0x40004800
 80141b4:	fffff4ff 	.word	0xfffff4ff
 80141b8:	40013800 	.word	0x40013800
 80141bc:	40021000 	.word	0x40021000
 80141c0:	40004400 	.word	0x40004400
 80141c4:	40004c00 	.word	0x40004c00
 80141c8:	40005000 	.word	0x40005000
 80141cc:	003d0900 	.word	0x003d0900
 80141d0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	69da      	ldr	r2, [r3, #28]
 80141d8:	2380      	movs	r3, #128	@ 0x80
 80141da:	021b      	lsls	r3, r3, #8
 80141dc:	429a      	cmp	r2, r3
 80141de:	d000      	beq.n	80141e2 <UART_SetConfig+0x37a>
 80141e0:	e070      	b.n	80142c4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80141e2:	231b      	movs	r3, #27
 80141e4:	2218      	movs	r2, #24
 80141e6:	189b      	adds	r3, r3, r2
 80141e8:	19db      	adds	r3, r3, r7
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	2b08      	cmp	r3, #8
 80141ee:	d822      	bhi.n	8014236 <UART_SetConfig+0x3ce>
 80141f0:	009a      	lsls	r2, r3, #2
 80141f2:	4b67      	ldr	r3, [pc, #412]	@ (8014390 <UART_SetConfig+0x528>)
 80141f4:	18d3      	adds	r3, r2, r3
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80141fa:	f7fd fef7 	bl	8011fec <HAL_RCC_GetPCLK1Freq>
 80141fe:	0003      	movs	r3, r0
 8014200:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014202:	e021      	b.n	8014248 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014204:	f7fd ff08 	bl	8012018 <HAL_RCC_GetPCLK2Freq>
 8014208:	0003      	movs	r3, r0
 801420a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801420c:	e01c      	b.n	8014248 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801420e:	4b61      	ldr	r3, [pc, #388]	@ (8014394 <UART_SetConfig+0x52c>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2210      	movs	r2, #16
 8014214:	4013      	ands	r3, r2
 8014216:	d002      	beq.n	801421e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8014218:	4b5f      	ldr	r3, [pc, #380]	@ (8014398 <UART_SetConfig+0x530>)
 801421a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801421c:	e014      	b.n	8014248 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801421e:	4b5f      	ldr	r3, [pc, #380]	@ (801439c <UART_SetConfig+0x534>)
 8014220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014222:	e011      	b.n	8014248 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014224:	f7fd fe32 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 8014228:	0003      	movs	r3, r0
 801422a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801422c:	e00c      	b.n	8014248 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801422e:	2380      	movs	r3, #128	@ 0x80
 8014230:	021b      	lsls	r3, r3, #8
 8014232:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014234:	e008      	b.n	8014248 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8014236:	2300      	movs	r3, #0
 8014238:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801423a:	231a      	movs	r3, #26
 801423c:	2218      	movs	r2, #24
 801423e:	189b      	adds	r3, r3, r2
 8014240:	19db      	adds	r3, r3, r7
 8014242:	2201      	movs	r2, #1
 8014244:	701a      	strb	r2, [r3, #0]
        break;
 8014246:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801424a:	2b00      	cmp	r3, #0
 801424c:	d100      	bne.n	8014250 <UART_SetConfig+0x3e8>
 801424e:	e090      	b.n	8014372 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014252:	005a      	lsls	r2, r3, #1
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	085b      	lsrs	r3, r3, #1
 801425a:	18d2      	adds	r2, r2, r3
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	0019      	movs	r1, r3
 8014262:	0010      	movs	r0, r2
 8014264:	f7eb ff9e 	bl	80001a4 <__udivsi3>
 8014268:	0003      	movs	r3, r0
 801426a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801426e:	2b0f      	cmp	r3, #15
 8014270:	d921      	bls.n	80142b6 <UART_SetConfig+0x44e>
 8014272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014274:	2380      	movs	r3, #128	@ 0x80
 8014276:	025b      	lsls	r3, r3, #9
 8014278:	429a      	cmp	r2, r3
 801427a:	d21c      	bcs.n	80142b6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801427e:	b29a      	uxth	r2, r3
 8014280:	200e      	movs	r0, #14
 8014282:	2418      	movs	r4, #24
 8014284:	1903      	adds	r3, r0, r4
 8014286:	19db      	adds	r3, r3, r7
 8014288:	210f      	movs	r1, #15
 801428a:	438a      	bics	r2, r1
 801428c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014290:	085b      	lsrs	r3, r3, #1
 8014292:	b29b      	uxth	r3, r3
 8014294:	2207      	movs	r2, #7
 8014296:	4013      	ands	r3, r2
 8014298:	b299      	uxth	r1, r3
 801429a:	1903      	adds	r3, r0, r4
 801429c:	19db      	adds	r3, r3, r7
 801429e:	1902      	adds	r2, r0, r4
 80142a0:	19d2      	adds	r2, r2, r7
 80142a2:	8812      	ldrh	r2, [r2, #0]
 80142a4:	430a      	orrs	r2, r1
 80142a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80142a8:	69fb      	ldr	r3, [r7, #28]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	1902      	adds	r2, r0, r4
 80142ae:	19d2      	adds	r2, r2, r7
 80142b0:	8812      	ldrh	r2, [r2, #0]
 80142b2:	60da      	str	r2, [r3, #12]
 80142b4:	e05d      	b.n	8014372 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80142b6:	231a      	movs	r3, #26
 80142b8:	2218      	movs	r2, #24
 80142ba:	189b      	adds	r3, r3, r2
 80142bc:	19db      	adds	r3, r3, r7
 80142be:	2201      	movs	r2, #1
 80142c0:	701a      	strb	r2, [r3, #0]
 80142c2:	e056      	b.n	8014372 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80142c4:	231b      	movs	r3, #27
 80142c6:	2218      	movs	r2, #24
 80142c8:	189b      	adds	r3, r3, r2
 80142ca:	19db      	adds	r3, r3, r7
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	2b08      	cmp	r3, #8
 80142d0:	d822      	bhi.n	8014318 <UART_SetConfig+0x4b0>
 80142d2:	009a      	lsls	r2, r3, #2
 80142d4:	4b32      	ldr	r3, [pc, #200]	@ (80143a0 <UART_SetConfig+0x538>)
 80142d6:	18d3      	adds	r3, r2, r3
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80142dc:	f7fd fe86 	bl	8011fec <HAL_RCC_GetPCLK1Freq>
 80142e0:	0003      	movs	r3, r0
 80142e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80142e4:	e021      	b.n	801432a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80142e6:	f7fd fe97 	bl	8012018 <HAL_RCC_GetPCLK2Freq>
 80142ea:	0003      	movs	r3, r0
 80142ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80142ee:	e01c      	b.n	801432a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80142f0:	4b28      	ldr	r3, [pc, #160]	@ (8014394 <UART_SetConfig+0x52c>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2210      	movs	r2, #16
 80142f6:	4013      	ands	r3, r2
 80142f8:	d002      	beq.n	8014300 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80142fa:	4b27      	ldr	r3, [pc, #156]	@ (8014398 <UART_SetConfig+0x530>)
 80142fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80142fe:	e014      	b.n	801432a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8014300:	4b26      	ldr	r3, [pc, #152]	@ (801439c <UART_SetConfig+0x534>)
 8014302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014304:	e011      	b.n	801432a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014306:	f7fd fdc1 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 801430a:	0003      	movs	r3, r0
 801430c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801430e:	e00c      	b.n	801432a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014310:	2380      	movs	r3, #128	@ 0x80
 8014312:	021b      	lsls	r3, r3, #8
 8014314:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014316:	e008      	b.n	801432a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8014318:	2300      	movs	r3, #0
 801431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801431c:	231a      	movs	r3, #26
 801431e:	2218      	movs	r2, #24
 8014320:	189b      	adds	r3, r3, r2
 8014322:	19db      	adds	r3, r3, r7
 8014324:	2201      	movs	r2, #1
 8014326:	701a      	strb	r2, [r3, #0]
        break;
 8014328:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801432c:	2b00      	cmp	r3, #0
 801432e:	d020      	beq.n	8014372 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	085a      	lsrs	r2, r3, #1
 8014336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014338:	18d2      	adds	r2, r2, r3
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	0019      	movs	r1, r3
 8014340:	0010      	movs	r0, r2
 8014342:	f7eb ff2f 	bl	80001a4 <__udivsi3>
 8014346:	0003      	movs	r3, r0
 8014348:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801434c:	2b0f      	cmp	r3, #15
 801434e:	d90a      	bls.n	8014366 <UART_SetConfig+0x4fe>
 8014350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014352:	2380      	movs	r3, #128	@ 0x80
 8014354:	025b      	lsls	r3, r3, #9
 8014356:	429a      	cmp	r2, r3
 8014358:	d205      	bcs.n	8014366 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801435a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801435c:	b29a      	uxth	r2, r3
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	60da      	str	r2, [r3, #12]
 8014364:	e005      	b.n	8014372 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8014366:	231a      	movs	r3, #26
 8014368:	2218      	movs	r2, #24
 801436a:	189b      	adds	r3, r3, r2
 801436c:	19db      	adds	r3, r3, r7
 801436e:	2201      	movs	r2, #1
 8014370:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	2200      	movs	r2, #0
 8014376:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	2200      	movs	r2, #0
 801437c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801437e:	231a      	movs	r3, #26
 8014380:	2218      	movs	r2, #24
 8014382:	189b      	adds	r3, r3, r2
 8014384:	19db      	adds	r3, r3, r7
 8014386:	781b      	ldrb	r3, [r3, #0]
}
 8014388:	0018      	movs	r0, r3
 801438a:	46bd      	mov	sp, r7
 801438c:	b00e      	add	sp, #56	@ 0x38
 801438e:	bdb0      	pop	{r4, r5, r7, pc}
 8014390:	0802010c 	.word	0x0802010c
 8014394:	40021000 	.word	0x40021000
 8014398:	003d0900 	.word	0x003d0900
 801439c:	00f42400 	.word	0x00f42400
 80143a0:	08020130 	.word	0x08020130

080143a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143b0:	2201      	movs	r2, #1
 80143b2:	4013      	ands	r3, r2
 80143b4:	d00b      	beq.n	80143ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	685b      	ldr	r3, [r3, #4]
 80143bc:	4a4a      	ldr	r2, [pc, #296]	@ (80144e8 <UART_AdvFeatureConfig+0x144>)
 80143be:	4013      	ands	r3, r2
 80143c0:	0019      	movs	r1, r3
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	430a      	orrs	r2, r1
 80143cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143d2:	2202      	movs	r2, #2
 80143d4:	4013      	ands	r3, r2
 80143d6:	d00b      	beq.n	80143f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	4a43      	ldr	r2, [pc, #268]	@ (80144ec <UART_AdvFeatureConfig+0x148>)
 80143e0:	4013      	ands	r3, r2
 80143e2:	0019      	movs	r1, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	430a      	orrs	r2, r1
 80143ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143f4:	2204      	movs	r2, #4
 80143f6:	4013      	ands	r3, r2
 80143f8:	d00b      	beq.n	8014412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	4a3b      	ldr	r2, [pc, #236]	@ (80144f0 <UART_AdvFeatureConfig+0x14c>)
 8014402:	4013      	ands	r3, r2
 8014404:	0019      	movs	r1, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	430a      	orrs	r2, r1
 8014410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014416:	2208      	movs	r2, #8
 8014418:	4013      	ands	r3, r2
 801441a:	d00b      	beq.n	8014434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	4a34      	ldr	r2, [pc, #208]	@ (80144f4 <UART_AdvFeatureConfig+0x150>)
 8014424:	4013      	ands	r3, r2
 8014426:	0019      	movs	r1, r3
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	430a      	orrs	r2, r1
 8014432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014438:	2210      	movs	r2, #16
 801443a:	4013      	ands	r3, r2
 801443c:	d00b      	beq.n	8014456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	689b      	ldr	r3, [r3, #8]
 8014444:	4a2c      	ldr	r2, [pc, #176]	@ (80144f8 <UART_AdvFeatureConfig+0x154>)
 8014446:	4013      	ands	r3, r2
 8014448:	0019      	movs	r1, r3
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	430a      	orrs	r2, r1
 8014454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801445a:	2220      	movs	r2, #32
 801445c:	4013      	ands	r3, r2
 801445e:	d00b      	beq.n	8014478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	689b      	ldr	r3, [r3, #8]
 8014466:	4a25      	ldr	r2, [pc, #148]	@ (80144fc <UART_AdvFeatureConfig+0x158>)
 8014468:	4013      	ands	r3, r2
 801446a:	0019      	movs	r1, r3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	430a      	orrs	r2, r1
 8014476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801447c:	2240      	movs	r2, #64	@ 0x40
 801447e:	4013      	ands	r3, r2
 8014480:	d01d      	beq.n	80144be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	4a1d      	ldr	r2, [pc, #116]	@ (8014500 <UART_AdvFeatureConfig+0x15c>)
 801448a:	4013      	ands	r3, r2
 801448c:	0019      	movs	r1, r3
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	430a      	orrs	r2, r1
 8014498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801449e:	2380      	movs	r3, #128	@ 0x80
 80144a0:	035b      	lsls	r3, r3, #13
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d10b      	bne.n	80144be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	4a15      	ldr	r2, [pc, #84]	@ (8014504 <UART_AdvFeatureConfig+0x160>)
 80144ae:	4013      	ands	r3, r2
 80144b0:	0019      	movs	r1, r3
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	430a      	orrs	r2, r1
 80144bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144c2:	2280      	movs	r2, #128	@ 0x80
 80144c4:	4013      	ands	r3, r2
 80144c6:	d00b      	beq.n	80144e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	4a0e      	ldr	r2, [pc, #56]	@ (8014508 <UART_AdvFeatureConfig+0x164>)
 80144d0:	4013      	ands	r3, r2
 80144d2:	0019      	movs	r1, r3
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	430a      	orrs	r2, r1
 80144de:	605a      	str	r2, [r3, #4]
  }
}
 80144e0:	46c0      	nop			@ (mov r8, r8)
 80144e2:	46bd      	mov	sp, r7
 80144e4:	b002      	add	sp, #8
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	fffdffff 	.word	0xfffdffff
 80144ec:	fffeffff 	.word	0xfffeffff
 80144f0:	fffbffff 	.word	0xfffbffff
 80144f4:	ffff7fff 	.word	0xffff7fff
 80144f8:	ffffefff 	.word	0xffffefff
 80144fc:	ffffdfff 	.word	0xffffdfff
 8014500:	ffefffff 	.word	0xffefffff
 8014504:	ff9fffff 	.word	0xff9fffff
 8014508:	fff7ffff 	.word	0xfff7ffff

0801450c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b092      	sub	sp, #72	@ 0x48
 8014510:	af02      	add	r7, sp, #8
 8014512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2284      	movs	r2, #132	@ 0x84
 8014518:	2100      	movs	r1, #0
 801451a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801451c:	f7f7 fb9c 	bl	800bc58 <HAL_GetTick>
 8014520:	0003      	movs	r3, r0
 8014522:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2208      	movs	r2, #8
 801452c:	4013      	ands	r3, r2
 801452e:	2b08      	cmp	r3, #8
 8014530:	d12c      	bne.n	801458c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014534:	2280      	movs	r2, #128	@ 0x80
 8014536:	0391      	lsls	r1, r2, #14
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	4a46      	ldr	r2, [pc, #280]	@ (8014654 <UART_CheckIdleState+0x148>)
 801453c:	9200      	str	r2, [sp, #0]
 801453e:	2200      	movs	r2, #0
 8014540:	f000 f88c 	bl	801465c <UART_WaitOnFlagUntilTimeout>
 8014544:	1e03      	subs	r3, r0, #0
 8014546:	d021      	beq.n	801458c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014548:	f3ef 8310 	mrs	r3, PRIMASK
 801454c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8014550:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014552:	2301      	movs	r3, #1
 8014554:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014558:	f383 8810 	msr	PRIMASK, r3
}
 801455c:	46c0      	nop			@ (mov r8, r8)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	2180      	movs	r1, #128	@ 0x80
 801456a:	438a      	bics	r2, r1
 801456c:	601a      	str	r2, [r3, #0]
 801456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014574:	f383 8810 	msr	PRIMASK, r3
}
 8014578:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2220      	movs	r2, #32
 801457e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2278      	movs	r2, #120	@ 0x78
 8014584:	2100      	movs	r1, #0
 8014586:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014588:	2303      	movs	r3, #3
 801458a:	e05f      	b.n	801464c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2204      	movs	r2, #4
 8014594:	4013      	ands	r3, r2
 8014596:	2b04      	cmp	r3, #4
 8014598:	d146      	bne.n	8014628 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801459a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801459c:	2280      	movs	r2, #128	@ 0x80
 801459e:	03d1      	lsls	r1, r2, #15
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	4a2c      	ldr	r2, [pc, #176]	@ (8014654 <UART_CheckIdleState+0x148>)
 80145a4:	9200      	str	r2, [sp, #0]
 80145a6:	2200      	movs	r2, #0
 80145a8:	f000 f858 	bl	801465c <UART_WaitOnFlagUntilTimeout>
 80145ac:	1e03      	subs	r3, r0, #0
 80145ae:	d03b      	beq.n	8014628 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80145b0:	f3ef 8310 	mrs	r3, PRIMASK
 80145b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80145b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80145b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80145ba:	2301      	movs	r3, #1
 80145bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	f383 8810 	msr	PRIMASK, r3
}
 80145c4:	46c0      	nop			@ (mov r8, r8)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	4921      	ldr	r1, [pc, #132]	@ (8014658 <UART_CheckIdleState+0x14c>)
 80145d2:	400a      	ands	r2, r1
 80145d4:	601a      	str	r2, [r3, #0]
 80145d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	f383 8810 	msr	PRIMASK, r3
}
 80145e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80145e2:	f3ef 8310 	mrs	r3, PRIMASK
 80145e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80145e8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80145ec:	2301      	movs	r3, #1
 80145ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	f383 8810 	msr	PRIMASK, r3
}
 80145f6:	46c0      	nop			@ (mov r8, r8)
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	689a      	ldr	r2, [r3, #8]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	2101      	movs	r1, #1
 8014604:	438a      	bics	r2, r1
 8014606:	609a      	str	r2, [r3, #8]
 8014608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801460a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801460c:	6a3b      	ldr	r3, [r7, #32]
 801460e:	f383 8810 	msr	PRIMASK, r3
}
 8014612:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2280      	movs	r2, #128	@ 0x80
 8014618:	2120      	movs	r1, #32
 801461a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2278      	movs	r2, #120	@ 0x78
 8014620:	2100      	movs	r1, #0
 8014622:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014624:	2303      	movs	r3, #3
 8014626:	e011      	b.n	801464c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2220      	movs	r2, #32
 801462c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2280      	movs	r2, #128	@ 0x80
 8014632:	2120      	movs	r1, #32
 8014634:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2200      	movs	r2, #0
 801463a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2278      	movs	r2, #120	@ 0x78
 8014646:	2100      	movs	r1, #0
 8014648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801464a:	2300      	movs	r3, #0
}
 801464c:	0018      	movs	r0, r3
 801464e:	46bd      	mov	sp, r7
 8014650:	b010      	add	sp, #64	@ 0x40
 8014652:	bd80      	pop	{r7, pc}
 8014654:	01ffffff 	.word	0x01ffffff
 8014658:	fffffedf 	.word	0xfffffedf

0801465c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	603b      	str	r3, [r7, #0]
 8014668:	1dfb      	adds	r3, r7, #7
 801466a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801466c:	e04b      	b.n	8014706 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801466e:	69bb      	ldr	r3, [r7, #24]
 8014670:	3301      	adds	r3, #1
 8014672:	d048      	beq.n	8014706 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014674:	f7f7 faf0 	bl	800bc58 <HAL_GetTick>
 8014678:	0002      	movs	r2, r0
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	1ad3      	subs	r3, r2, r3
 801467e:	69ba      	ldr	r2, [r7, #24]
 8014680:	429a      	cmp	r2, r3
 8014682:	d302      	bcc.n	801468a <UART_WaitOnFlagUntilTimeout+0x2e>
 8014684:	69bb      	ldr	r3, [r7, #24]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d101      	bne.n	801468e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801468a:	2303      	movs	r3, #3
 801468c:	e04b      	b.n	8014726 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2204      	movs	r2, #4
 8014696:	4013      	ands	r3, r2
 8014698:	d035      	beq.n	8014706 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	69db      	ldr	r3, [r3, #28]
 80146a0:	2208      	movs	r2, #8
 80146a2:	4013      	ands	r3, r2
 80146a4:	2b08      	cmp	r3, #8
 80146a6:	d111      	bne.n	80146cc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	2208      	movs	r2, #8
 80146ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	0018      	movs	r0, r3
 80146b4:	f000 f900 	bl	80148b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	2284      	movs	r2, #132	@ 0x84
 80146bc:	2108      	movs	r1, #8
 80146be:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2278      	movs	r2, #120	@ 0x78
 80146c4:	2100      	movs	r1, #0
 80146c6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80146c8:	2301      	movs	r3, #1
 80146ca:	e02c      	b.n	8014726 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	69da      	ldr	r2, [r3, #28]
 80146d2:	2380      	movs	r3, #128	@ 0x80
 80146d4:	011b      	lsls	r3, r3, #4
 80146d6:	401a      	ands	r2, r3
 80146d8:	2380      	movs	r3, #128	@ 0x80
 80146da:	011b      	lsls	r3, r3, #4
 80146dc:	429a      	cmp	r2, r3
 80146de:	d112      	bne.n	8014706 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2280      	movs	r2, #128	@ 0x80
 80146e6:	0112      	lsls	r2, r2, #4
 80146e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	0018      	movs	r0, r3
 80146ee:	f000 f8e3 	bl	80148b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2284      	movs	r2, #132	@ 0x84
 80146f6:	2120      	movs	r1, #32
 80146f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2278      	movs	r2, #120	@ 0x78
 80146fe:	2100      	movs	r1, #0
 8014700:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014702:	2303      	movs	r3, #3
 8014704:	e00f      	b.n	8014726 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	69db      	ldr	r3, [r3, #28]
 801470c:	68ba      	ldr	r2, [r7, #8]
 801470e:	4013      	ands	r3, r2
 8014710:	68ba      	ldr	r2, [r7, #8]
 8014712:	1ad3      	subs	r3, r2, r3
 8014714:	425a      	negs	r2, r3
 8014716:	4153      	adcs	r3, r2
 8014718:	b2db      	uxtb	r3, r3
 801471a:	001a      	movs	r2, r3
 801471c:	1dfb      	adds	r3, r7, #7
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	429a      	cmp	r2, r3
 8014722:	d0a4      	beq.n	801466e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014724:	2300      	movs	r3, #0
}
 8014726:	0018      	movs	r0, r3
 8014728:	46bd      	mov	sp, r7
 801472a:	b004      	add	sp, #16
 801472c:	bd80      	pop	{r7, pc}
	...

08014730 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b090      	sub	sp, #64	@ 0x40
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	1dbb      	adds	r3, r7, #6
 801473c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	68ba      	ldr	r2, [r7, #8]
 8014742:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	1dba      	adds	r2, r7, #6
 8014748:	2158      	movs	r1, #88	@ 0x58
 801474a:	8812      	ldrh	r2, [r2, #0]
 801474c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2284      	movs	r2, #132	@ 0x84
 8014752:	2100      	movs	r1, #0
 8014754:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2280      	movs	r2, #128	@ 0x80
 801475a:	2122      	movs	r1, #34	@ 0x22
 801475c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014762:	2b00      	cmp	r3, #0
 8014764:	d028      	beq.n	80147b8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801476a:	4a3e      	ldr	r2, [pc, #248]	@ (8014864 <UART_Start_Receive_DMA+0x134>)
 801476c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014772:	4a3d      	ldr	r2, [pc, #244]	@ (8014868 <UART_Start_Receive_DMA+0x138>)
 8014774:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801477a:	4a3c      	ldr	r2, [pc, #240]	@ (801486c <UART_Start_Receive_DMA+0x13c>)
 801477c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014782:	2200      	movs	r2, #0
 8014784:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	3324      	adds	r3, #36	@ 0x24
 8014790:	0019      	movs	r1, r3
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014796:	001a      	movs	r2, r3
 8014798:	1dbb      	adds	r3, r7, #6
 801479a:	881b      	ldrh	r3, [r3, #0]
 801479c:	f7f7 ff7c 	bl	800c698 <HAL_DMA_Start_IT>
 80147a0:	1e03      	subs	r3, r0, #0
 80147a2:	d009      	beq.n	80147b8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	2284      	movs	r2, #132	@ 0x84
 80147a8:	2110      	movs	r1, #16
 80147aa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2280      	movs	r2, #128	@ 0x80
 80147b0:	2120      	movs	r1, #32
 80147b2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80147b4:	2301      	movs	r3, #1
 80147b6:	e050      	b.n	801485a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	691b      	ldr	r3, [r3, #16]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d019      	beq.n	80147f4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147c0:	f3ef 8310 	mrs	r3, PRIMASK
 80147c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80147c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80147c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80147ca:	2301      	movs	r3, #1
 80147cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147d0:	f383 8810 	msr	PRIMASK, r3
}
 80147d4:	46c0      	nop			@ (mov r8, r8)
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	681a      	ldr	r2, [r3, #0]
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2180      	movs	r1, #128	@ 0x80
 80147e2:	0049      	lsls	r1, r1, #1
 80147e4:	430a      	orrs	r2, r1
 80147e6:	601a      	str	r2, [r3, #0]
 80147e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ee:	f383 8810 	msr	PRIMASK, r3
}
 80147f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147f4:	f3ef 8310 	mrs	r3, PRIMASK
 80147f8:	613b      	str	r3, [r7, #16]
  return(result);
 80147fa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80147fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80147fe:	2301      	movs	r3, #1
 8014800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	f383 8810 	msr	PRIMASK, r3
}
 8014808:	46c0      	nop			@ (mov r8, r8)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	689a      	ldr	r2, [r3, #8]
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	2101      	movs	r1, #1
 8014816:	430a      	orrs	r2, r1
 8014818:	609a      	str	r2, [r3, #8]
 801481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801481c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801481e:	69bb      	ldr	r3, [r7, #24]
 8014820:	f383 8810 	msr	PRIMASK, r3
}
 8014824:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014826:	f3ef 8310 	mrs	r3, PRIMASK
 801482a:	61fb      	str	r3, [r7, #28]
  return(result);
 801482c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801482e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014830:	2301      	movs	r3, #1
 8014832:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014834:	6a3b      	ldr	r3, [r7, #32]
 8014836:	f383 8810 	msr	PRIMASK, r3
}
 801483a:	46c0      	nop			@ (mov r8, r8)
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	689a      	ldr	r2, [r3, #8]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2140      	movs	r1, #64	@ 0x40
 8014848:	430a      	orrs	r2, r1
 801484a:	609a      	str	r2, [r3, #8]
 801484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801484e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014852:	f383 8810 	msr	PRIMASK, r3
}
 8014856:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8014858:	2300      	movs	r3, #0
}
 801485a:	0018      	movs	r0, r3
 801485c:	46bd      	mov	sp, r7
 801485e:	b010      	add	sp, #64	@ 0x40
 8014860:	bd80      	pop	{r7, pc}
 8014862:	46c0      	nop			@ (mov r8, r8)
 8014864:	08014a41 	.word	0x08014a41
 8014868:	08014b75 	.word	0x08014b75
 801486c:	08014bbd 	.word	0x08014bbd

08014870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b086      	sub	sp, #24
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014878:	f3ef 8310 	mrs	r3, PRIMASK
 801487c:	60bb      	str	r3, [r7, #8]
  return(result);
 801487e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014880:	617b      	str	r3, [r7, #20]
 8014882:	2301      	movs	r3, #1
 8014884:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f383 8810 	msr	PRIMASK, r3
}
 801488c:	46c0      	nop			@ (mov r8, r8)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	21c0      	movs	r1, #192	@ 0xc0
 801489a:	438a      	bics	r2, r1
 801489c:	601a      	str	r2, [r3, #0]
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	f383 8810 	msr	PRIMASK, r3
}
 80148a8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2220      	movs	r2, #32
 80148ae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80148b0:	46c0      	nop			@ (mov r8, r8)
 80148b2:	46bd      	mov	sp, r7
 80148b4:	b006      	add	sp, #24
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b08e      	sub	sp, #56	@ 0x38
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80148c0:	f3ef 8310 	mrs	r3, PRIMASK
 80148c4:	617b      	str	r3, [r7, #20]
  return(result);
 80148c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80148c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80148ca:	2301      	movs	r3, #1
 80148cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	f383 8810 	msr	PRIMASK, r3
}
 80148d4:	46c0      	nop			@ (mov r8, r8)
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	681a      	ldr	r2, [r3, #0]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	4926      	ldr	r1, [pc, #152]	@ (801497c <UART_EndRxTransfer+0xc4>)
 80148e2:	400a      	ands	r2, r1
 80148e4:	601a      	str	r2, [r3, #0]
 80148e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148ea:	69fb      	ldr	r3, [r7, #28]
 80148ec:	f383 8810 	msr	PRIMASK, r3
}
 80148f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80148f2:	f3ef 8310 	mrs	r3, PRIMASK
 80148f6:	623b      	str	r3, [r7, #32]
  return(result);
 80148f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80148fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80148fc:	2301      	movs	r3, #1
 80148fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014902:	f383 8810 	msr	PRIMASK, r3
}
 8014906:	46c0      	nop			@ (mov r8, r8)
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	689a      	ldr	r2, [r3, #8]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2101      	movs	r1, #1
 8014914:	438a      	bics	r2, r1
 8014916:	609a      	str	r2, [r3, #8]
 8014918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801491a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801491e:	f383 8810 	msr	PRIMASK, r3
}
 8014922:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014928:	2b01      	cmp	r3, #1
 801492a:	d118      	bne.n	801495e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801492c:	f3ef 8310 	mrs	r3, PRIMASK
 8014930:	60bb      	str	r3, [r7, #8]
  return(result);
 8014932:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014936:	2301      	movs	r3, #1
 8014938:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	f383 8810 	msr	PRIMASK, r3
}
 8014940:	46c0      	nop			@ (mov r8, r8)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	681a      	ldr	r2, [r3, #0]
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2110      	movs	r1, #16
 801494e:	438a      	bics	r2, r1
 8014950:	601a      	str	r2, [r3, #0]
 8014952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	f383 8810 	msr	PRIMASK, r3
}
 801495c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2280      	movs	r2, #128	@ 0x80
 8014962:	2120      	movs	r1, #32
 8014964:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2200      	movs	r2, #0
 801496a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2200      	movs	r2, #0
 8014970:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8014972:	46c0      	nop			@ (mov r8, r8)
 8014974:	46bd      	mov	sp, r7
 8014976:	b00e      	add	sp, #56	@ 0x38
 8014978:	bd80      	pop	{r7, pc}
 801497a:	46c0      	nop			@ (mov r8, r8)
 801497c:	fffffedf 	.word	0xfffffedf

08014980 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b08c      	sub	sp, #48	@ 0x30
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801498c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	2220      	movs	r2, #32
 8014996:	4013      	ands	r3, r2
 8014998:	d135      	bne.n	8014a06 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801499a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801499c:	2252      	movs	r2, #82	@ 0x52
 801499e:	2100      	movs	r1, #0
 80149a0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149a2:	f3ef 8310 	mrs	r3, PRIMASK
 80149a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80149a8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80149aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80149ac:	2301      	movs	r3, #1
 80149ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	f383 8810 	msr	PRIMASK, r3
}
 80149b6:	46c0      	nop			@ (mov r8, r8)
 80149b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	689a      	ldr	r2, [r3, #8]
 80149be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2180      	movs	r1, #128	@ 0x80
 80149c4:	438a      	bics	r2, r1
 80149c6:	609a      	str	r2, [r3, #8]
 80149c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	f383 8810 	msr	PRIMASK, r3
}
 80149d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149d4:	f3ef 8310 	mrs	r3, PRIMASK
 80149d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80149da:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80149dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80149de:	2301      	movs	r3, #1
 80149e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	f383 8810 	msr	PRIMASK, r3
}
 80149e8:	46c0      	nop			@ (mov r8, r8)
 80149ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2140      	movs	r1, #64	@ 0x40
 80149f6:	430a      	orrs	r2, r1
 80149f8:	601a      	str	r2, [r3, #0]
 80149fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149fe:	6a3b      	ldr	r3, [r7, #32]
 8014a00:	f383 8810 	msr	PRIMASK, r3
}
 8014a04:	e006      	b.n	8014a14 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8014a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a08:	228c      	movs	r2, #140	@ 0x8c
 8014a0a:	589b      	ldr	r3, [r3, r2]
 8014a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a0e:	0010      	movs	r0, r2
 8014a10:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014a12:	46c0      	nop			@ (mov r8, r8)
 8014a14:	46c0      	nop			@ (mov r8, r8)
 8014a16:	46bd      	mov	sp, r7
 8014a18:	b00c      	add	sp, #48	@ 0x30
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b084      	sub	sp, #16
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2288      	movs	r2, #136	@ 0x88
 8014a2e:	589b      	ldr	r3, [r3, r2]
 8014a30:	68fa      	ldr	r2, [r7, #12]
 8014a32:	0010      	movs	r0, r2
 8014a34:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014a36:	46c0      	nop			@ (mov r8, r8)
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	b004      	add	sp, #16
 8014a3c:	bd80      	pop	{r7, pc}
	...

08014a40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b094      	sub	sp, #80	@ 0x50
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2220      	movs	r2, #32
 8014a56:	4013      	ands	r3, r2
 8014a58:	d16f      	bne.n	8014b3a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8014a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a5c:	225a      	movs	r2, #90	@ 0x5a
 8014a5e:	2100      	movs	r1, #0
 8014a60:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a62:	f3ef 8310 	mrs	r3, PRIMASK
 8014a66:	61bb      	str	r3, [r7, #24]
  return(result);
 8014a68:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a70:	69fb      	ldr	r3, [r7, #28]
 8014a72:	f383 8810 	msr	PRIMASK, r3
}
 8014a76:	46c0      	nop			@ (mov r8, r8)
 8014a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	493b      	ldr	r1, [pc, #236]	@ (8014b70 <UART_DMAReceiveCplt+0x130>)
 8014a84:	400a      	ands	r2, r1
 8014a86:	601a      	str	r2, [r3, #0]
 8014a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a8c:	6a3b      	ldr	r3, [r7, #32]
 8014a8e:	f383 8810 	msr	PRIMASK, r3
}
 8014a92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a94:	f3ef 8310 	mrs	r3, PRIMASK
 8014a98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8014a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aa4:	f383 8810 	msr	PRIMASK, r3
}
 8014aa8:	46c0      	nop			@ (mov r8, r8)
 8014aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	689a      	ldr	r2, [r3, #8]
 8014ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2101      	movs	r1, #1
 8014ab6:	438a      	bics	r2, r1
 8014ab8:	609a      	str	r2, [r3, #8]
 8014aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ac0:	f383 8810 	msr	PRIMASK, r3
}
 8014ac4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8014aca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8014acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ad6:	f383 8810 	msr	PRIMASK, r3
}
 8014ada:	46c0      	nop			@ (mov r8, r8)
 8014adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	689a      	ldr	r2, [r3, #8]
 8014ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2140      	movs	r1, #64	@ 0x40
 8014ae8:	438a      	bics	r2, r1
 8014aea:	609a      	str	r2, [r3, #8]
 8014aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014aee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014af2:	f383 8810 	msr	PRIMASK, r3
}
 8014af6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014afa:	2280      	movs	r2, #128	@ 0x80
 8014afc:	2120      	movs	r1, #32
 8014afe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d118      	bne.n	8014b3a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b08:	f3ef 8310 	mrs	r3, PRIMASK
 8014b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014b0e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b12:	2301      	movs	r3, #1
 8014b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	f383 8810 	msr	PRIMASK, r3
}
 8014b1c:	46c0      	nop			@ (mov r8, r8)
 8014b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	2110      	movs	r1, #16
 8014b2a:	438a      	bics	r2, r1
 8014b2c:	601a      	str	r2, [r3, #0]
 8014b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	f383 8810 	msr	PRIMASK, r3
}
 8014b38:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	d109      	bne.n	8014b5c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8014b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b4a:	22ac      	movs	r2, #172	@ 0xac
 8014b4c:	589b      	ldr	r3, [r3, r2]
 8014b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014b50:	2158      	movs	r1, #88	@ 0x58
 8014b52:	5a51      	ldrh	r1, [r2, r1]
 8014b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014b56:	0010      	movs	r0, r2
 8014b58:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014b5a:	e005      	b.n	8014b68 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8014b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b5e:	2294      	movs	r2, #148	@ 0x94
 8014b60:	589b      	ldr	r3, [r3, r2]
 8014b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014b64:	0010      	movs	r0, r2
 8014b66:	4798      	blx	r3
}
 8014b68:	46c0      	nop			@ (mov r8, r8)
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	b014      	add	sp, #80	@ 0x50
 8014b6e:	bd80      	pop	{r7, pc}
 8014b70:	fffffeff 	.word	0xfffffeff

08014b74 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b80:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2201      	movs	r2, #1
 8014b86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d10b      	bne.n	8014ba8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	22ac      	movs	r2, #172	@ 0xac
 8014b94:	589b      	ldr	r3, [r3, r2]
 8014b96:	68fa      	ldr	r2, [r7, #12]
 8014b98:	2158      	movs	r1, #88	@ 0x58
 8014b9a:	5a52      	ldrh	r2, [r2, r1]
 8014b9c:	0852      	lsrs	r2, r2, #1
 8014b9e:	b291      	uxth	r1, r2
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	0010      	movs	r0, r2
 8014ba4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014ba6:	e005      	b.n	8014bb4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	2290      	movs	r2, #144	@ 0x90
 8014bac:	589b      	ldr	r3, [r3, r2]
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	0010      	movs	r0, r2
 8014bb2:	4798      	blx	r3
}
 8014bb4:	46c0      	nop			@ (mov r8, r8)
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	b004      	add	sp, #16
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014bce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	2280      	movs	r2, #128	@ 0x80
 8014bd4:	589b      	ldr	r3, [r3, r2]
 8014bd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	689b      	ldr	r3, [r3, #8]
 8014bde:	2280      	movs	r2, #128	@ 0x80
 8014be0:	4013      	ands	r3, r2
 8014be2:	2b80      	cmp	r3, #128	@ 0x80
 8014be4:	d10a      	bne.n	8014bfc <UART_DMAError+0x40>
 8014be6:	693b      	ldr	r3, [r7, #16]
 8014be8:	2b21      	cmp	r3, #33	@ 0x21
 8014bea:	d107      	bne.n	8014bfc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	2252      	movs	r2, #82	@ 0x52
 8014bf0:	2100      	movs	r1, #0
 8014bf2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	0018      	movs	r0, r3
 8014bf8:	f7ff fe3a 	bl	8014870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	689b      	ldr	r3, [r3, #8]
 8014c02:	2240      	movs	r2, #64	@ 0x40
 8014c04:	4013      	ands	r3, r2
 8014c06:	2b40      	cmp	r3, #64	@ 0x40
 8014c08:	d10a      	bne.n	8014c20 <UART_DMAError+0x64>
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2b22      	cmp	r3, #34	@ 0x22
 8014c0e:	d107      	bne.n	8014c20 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	225a      	movs	r2, #90	@ 0x5a
 8014c14:	2100      	movs	r1, #0
 8014c16:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	0018      	movs	r0, r3
 8014c1c:	f7ff fe4c 	bl	80148b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	2284      	movs	r2, #132	@ 0x84
 8014c24:	589b      	ldr	r3, [r3, r2]
 8014c26:	2210      	movs	r2, #16
 8014c28:	431a      	orrs	r2, r3
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	2184      	movs	r1, #132	@ 0x84
 8014c2e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	2298      	movs	r2, #152	@ 0x98
 8014c34:	589b      	ldr	r3, [r3, r2]
 8014c36:	697a      	ldr	r2, [r7, #20]
 8014c38:	0010      	movs	r0, r2
 8014c3a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014c3c:	46c0      	nop			@ (mov r8, r8)
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	b006      	add	sp, #24
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	225a      	movs	r2, #90	@ 0x5a
 8014c56:	2100      	movs	r1, #0
 8014c58:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	2252      	movs	r2, #82	@ 0x52
 8014c5e:	2100      	movs	r1, #0
 8014c60:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2298      	movs	r2, #152	@ 0x98
 8014c66:	589b      	ldr	r3, [r3, r2]
 8014c68:	68fa      	ldr	r2, [r7, #12]
 8014c6a:	0010      	movs	r0, r2
 8014c6c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014c6e:	46c0      	nop			@ (mov r8, r8)
 8014c70:	46bd      	mov	sp, r7
 8014c72:	b004      	add	sp, #16
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b086      	sub	sp, #24
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8014c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c84:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014c86:	617b      	str	r3, [r7, #20]
 8014c88:	2301      	movs	r3, #1
 8014c8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	f383 8810 	msr	PRIMASK, r3
}
 8014c92:	46c0      	nop			@ (mov r8, r8)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2140      	movs	r1, #64	@ 0x40
 8014ca0:	438a      	bics	r2, r1
 8014ca2:	601a      	str	r2, [r3, #0]
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	f383 8810 	msr	PRIMASK, r3
}
 8014cae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2220      	movs	r2, #32
 8014cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	228c      	movs	r2, #140	@ 0x8c
 8014cc0:	589b      	ldr	r3, [r3, r2]
 8014cc2:	687a      	ldr	r2, [r7, #4]
 8014cc4:	0010      	movs	r0, r2
 8014cc6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014cc8:	46c0      	nop			@ (mov r8, r8)
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	b006      	add	sp, #24
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014cd8:	46c0      	nop			@ (mov r8, r8)
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	b002      	add	sp, #8
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b084      	sub	sp, #16
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2244      	movs	r2, #68	@ 0x44
 8014cec:	2100      	movs	r1, #0
 8014cee:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8014cf0:	4b05      	ldr	r3, [pc, #20]	@ (8014d08 <USB_EnableGlobalInt+0x28>)
 8014cf2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	b299      	uxth	r1, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2240      	movs	r2, #64	@ 0x40
 8014cfc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014cfe:	2300      	movs	r3, #0
}
 8014d00:	0018      	movs	r0, r3
 8014d02:	46bd      	mov	sp, r7
 8014d04:	b004      	add	sp, #16
 8014d06:	bd80      	pop	{r7, pc}
 8014d08:	0000bf80 	.word	0x0000bf80

08014d0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8014d14:	4b09      	ldr	r3, [pc, #36]	@ (8014d3c <USB_DisableGlobalInt+0x30>)
 8014d16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2240      	movs	r2, #64	@ 0x40
 8014d1c:	5a9b      	ldrh	r3, [r3, r2]
 8014d1e:	b29b      	uxth	r3, r3
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	b292      	uxth	r2, r2
 8014d24:	43d2      	mvns	r2, r2
 8014d26:	b292      	uxth	r2, r2
 8014d28:	4013      	ands	r3, r2
 8014d2a:	b299      	uxth	r1, r3
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2240      	movs	r2, #64	@ 0x40
 8014d30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014d32:	2300      	movs	r3, #0
}
 8014d34:	0018      	movs	r0, r3
 8014d36:	46bd      	mov	sp, r7
 8014d38:	b004      	add	sp, #16
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	0000bf80 	.word	0x0000bf80

08014d40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8014d40:	b084      	sub	sp, #16
 8014d42:	b590      	push	{r4, r7, lr}
 8014d44:	b083      	sub	sp, #12
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
 8014d4a:	2004      	movs	r0, #4
 8014d4c:	2410      	movs	r4, #16
 8014d4e:	1900      	adds	r0, r0, r4
 8014d50:	2408      	movs	r4, #8
 8014d52:	46a4      	mov	ip, r4
 8014d54:	44bc      	add	ip, r7
 8014d56:	4460      	add	r0, ip
 8014d58:	6001      	str	r1, [r0, #0]
 8014d5a:	6042      	str	r2, [r0, #4]
 8014d5c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2240      	movs	r2, #64	@ 0x40
 8014d62:	2101      	movs	r1, #1
 8014d64:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2240      	movs	r2, #64	@ 0x40
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2244      	movs	r2, #68	@ 0x44
 8014d72:	2100      	movs	r1, #0
 8014d74:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2250      	movs	r2, #80	@ 0x50
 8014d7a:	2100      	movs	r1, #0
 8014d7c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014d7e:	2300      	movs	r3, #0
}
 8014d80:	0018      	movs	r0, r3
 8014d82:	46bd      	mov	sp, r7
 8014d84:	b003      	add	sp, #12
 8014d86:	bc90      	pop	{r4, r7}
 8014d88:	bc08      	pop	{r3}
 8014d8a:	b004      	add	sp, #16
 8014d8c:	4718      	bx	r3
	...

08014d90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b09c      	sub	sp, #112	@ 0x70
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8014d9a:	236f      	movs	r3, #111	@ 0x6f
 8014d9c:	18fb      	adds	r3, r7, r3
 8014d9e:	2200      	movs	r2, #0
 8014da0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8014da2:	687a      	ldr	r2, [r7, #4]
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	009b      	lsls	r3, r3, #2
 8014daa:	18d3      	adds	r3, r2, r3
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	b29a      	uxth	r2, r3
 8014db0:	236c      	movs	r3, #108	@ 0x6c
 8014db2:	18fb      	adds	r3, r7, r3
 8014db4:	49a3      	ldr	r1, [pc, #652]	@ (8015044 <USB_ActivateEndpoint+0x2b4>)
 8014db6:	400a      	ands	r2, r1
 8014db8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	78db      	ldrb	r3, [r3, #3]
 8014dbe:	2b03      	cmp	r3, #3
 8014dc0:	d017      	beq.n	8014df2 <USB_ActivateEndpoint+0x62>
 8014dc2:	dc28      	bgt.n	8014e16 <USB_ActivateEndpoint+0x86>
 8014dc4:	2b02      	cmp	r3, #2
 8014dc6:	d00e      	beq.n	8014de6 <USB_ActivateEndpoint+0x56>
 8014dc8:	dc25      	bgt.n	8014e16 <USB_ActivateEndpoint+0x86>
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d002      	beq.n	8014dd4 <USB_ActivateEndpoint+0x44>
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d018      	beq.n	8014e04 <USB_ActivateEndpoint+0x74>
 8014dd2:	e020      	b.n	8014e16 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8014dd4:	226c      	movs	r2, #108	@ 0x6c
 8014dd6:	18bb      	adds	r3, r7, r2
 8014dd8:	18ba      	adds	r2, r7, r2
 8014dda:	8812      	ldrh	r2, [r2, #0]
 8014ddc:	2180      	movs	r1, #128	@ 0x80
 8014dde:	0089      	lsls	r1, r1, #2
 8014de0:	430a      	orrs	r2, r1
 8014de2:	801a      	strh	r2, [r3, #0]
      break;
 8014de4:	e01c      	b.n	8014e20 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8014de6:	226c      	movs	r2, #108	@ 0x6c
 8014de8:	18bb      	adds	r3, r7, r2
 8014dea:	18ba      	adds	r2, r7, r2
 8014dec:	8812      	ldrh	r2, [r2, #0]
 8014dee:	801a      	strh	r2, [r3, #0]
      break;
 8014df0:	e016      	b.n	8014e20 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8014df2:	226c      	movs	r2, #108	@ 0x6c
 8014df4:	18bb      	adds	r3, r7, r2
 8014df6:	18ba      	adds	r2, r7, r2
 8014df8:	8812      	ldrh	r2, [r2, #0]
 8014dfa:	21c0      	movs	r1, #192	@ 0xc0
 8014dfc:	00c9      	lsls	r1, r1, #3
 8014dfe:	430a      	orrs	r2, r1
 8014e00:	801a      	strh	r2, [r3, #0]
      break;
 8014e02:	e00d      	b.n	8014e20 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8014e04:	226c      	movs	r2, #108	@ 0x6c
 8014e06:	18bb      	adds	r3, r7, r2
 8014e08:	18ba      	adds	r2, r7, r2
 8014e0a:	8812      	ldrh	r2, [r2, #0]
 8014e0c:	2180      	movs	r1, #128	@ 0x80
 8014e0e:	00c9      	lsls	r1, r1, #3
 8014e10:	430a      	orrs	r2, r1
 8014e12:	801a      	strh	r2, [r3, #0]
      break;
 8014e14:	e004      	b.n	8014e20 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8014e16:	236f      	movs	r3, #111	@ 0x6f
 8014e18:	18fb      	adds	r3, r7, r3
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	701a      	strb	r2, [r3, #0]
      break;
 8014e1e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8014e20:	687a      	ldr	r2, [r7, #4]
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	18d3      	adds	r3, r2, r3
 8014e2a:	226c      	movs	r2, #108	@ 0x6c
 8014e2c:	18ba      	adds	r2, r7, r2
 8014e2e:	8812      	ldrh	r2, [r2, #0]
 8014e30:	4985      	ldr	r1, [pc, #532]	@ (8015048 <USB_ActivateEndpoint+0x2b8>)
 8014e32:	430a      	orrs	r2, r1
 8014e34:	b292      	uxth	r2, r2
 8014e36:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	18d3      	adds	r3, r2, r3
 8014e42:	881b      	ldrh	r3, [r3, #0]
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	b21b      	sxth	r3, r3
 8014e48:	4a80      	ldr	r2, [pc, #512]	@ (801504c <USB_ActivateEndpoint+0x2bc>)
 8014e4a:	4013      	ands	r3, r2
 8014e4c:	b21a      	sxth	r2, r3
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	b21b      	sxth	r3, r3
 8014e54:	4313      	orrs	r3, r2
 8014e56:	b21a      	sxth	r2, r3
 8014e58:	2166      	movs	r1, #102	@ 0x66
 8014e5a:	187b      	adds	r3, r7, r1
 8014e5c:	801a      	strh	r2, [r3, #0]
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	009b      	lsls	r3, r3, #2
 8014e66:	18d3      	adds	r3, r2, r3
 8014e68:	187a      	adds	r2, r7, r1
 8014e6a:	8812      	ldrh	r2, [r2, #0]
 8014e6c:	4976      	ldr	r1, [pc, #472]	@ (8015048 <USB_ActivateEndpoint+0x2b8>)
 8014e6e:	430a      	orrs	r2, r1
 8014e70:	b292      	uxth	r2, r2
 8014e72:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	7b1b      	ldrb	r3, [r3, #12]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d000      	beq.n	8014e7e <USB_ActivateEndpoint+0xee>
 8014e7c:	e178      	b.n	8015170 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	785b      	ldrb	r3, [r3, #1]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d100      	bne.n	8014e88 <USB_ActivateEndpoint+0xf8>
 8014e86:	e07a      	b.n	8014f7e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	61bb      	str	r3, [r7, #24]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2250      	movs	r2, #80	@ 0x50
 8014e90:	5a9b      	ldrh	r3, [r3, r2]
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	001a      	movs	r2, r3
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	189b      	adds	r3, r3, r2
 8014e9a:	61bb      	str	r3, [r7, #24]
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	00da      	lsls	r2, r3, #3
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	18d3      	adds	r3, r2, r3
 8014ea6:	2280      	movs	r2, #128	@ 0x80
 8014ea8:	00d2      	lsls	r2, r2, #3
 8014eaa:	4694      	mov	ip, r2
 8014eac:	4463      	add	r3, ip
 8014eae:	617b      	str	r3, [r7, #20]
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	88db      	ldrh	r3, [r3, #6]
 8014eb4:	085b      	lsrs	r3, r3, #1
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	18db      	adds	r3, r3, r3
 8014eba:	b29a      	uxth	r2, r3
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	18d2      	adds	r2, r2, r3
 8014eca:	2112      	movs	r1, #18
 8014ecc:	187b      	adds	r3, r7, r1
 8014ece:	8812      	ldrh	r2, [r2, #0]
 8014ed0:	801a      	strh	r2, [r3, #0]
 8014ed2:	187b      	adds	r3, r7, r1
 8014ed4:	881b      	ldrh	r3, [r3, #0]
 8014ed6:	2240      	movs	r2, #64	@ 0x40
 8014ed8:	4013      	ands	r3, r2
 8014eda:	d016      	beq.n	8014f0a <USB_ActivateEndpoint+0x17a>
 8014edc:	687a      	ldr	r2, [r7, #4]
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	18d3      	adds	r3, r2, r3
 8014ee6:	881b      	ldrh	r3, [r3, #0]
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	2010      	movs	r0, #16
 8014eec:	183b      	adds	r3, r7, r0
 8014eee:	4957      	ldr	r1, [pc, #348]	@ (801504c <USB_ActivateEndpoint+0x2bc>)
 8014ef0:	400a      	ands	r2, r1
 8014ef2:	801a      	strh	r2, [r3, #0]
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	781b      	ldrb	r3, [r3, #0]
 8014efa:	009b      	lsls	r3, r3, #2
 8014efc:	18d3      	adds	r3, r2, r3
 8014efe:	183a      	adds	r2, r7, r0
 8014f00:	8812      	ldrh	r2, [r2, #0]
 8014f02:	4953      	ldr	r1, [pc, #332]	@ (8015050 <USB_ActivateEndpoint+0x2c0>)
 8014f04:	430a      	orrs	r2, r1
 8014f06:	b292      	uxth	r2, r2
 8014f08:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	78db      	ldrb	r3, [r3, #3]
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d01d      	beq.n	8014f4e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	781b      	ldrb	r3, [r3, #0]
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	18d3      	adds	r3, r2, r3
 8014f1c:	881b      	ldrh	r3, [r3, #0]
 8014f1e:	b29a      	uxth	r2, r3
 8014f20:	200c      	movs	r0, #12
 8014f22:	183b      	adds	r3, r7, r0
 8014f24:	494b      	ldr	r1, [pc, #300]	@ (8015054 <USB_ActivateEndpoint+0x2c4>)
 8014f26:	400a      	ands	r2, r1
 8014f28:	801a      	strh	r2, [r3, #0]
 8014f2a:	183b      	adds	r3, r7, r0
 8014f2c:	183a      	adds	r2, r7, r0
 8014f2e:	8812      	ldrh	r2, [r2, #0]
 8014f30:	2120      	movs	r1, #32
 8014f32:	404a      	eors	r2, r1
 8014f34:	801a      	strh	r2, [r3, #0]
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	009b      	lsls	r3, r3, #2
 8014f3e:	18d3      	adds	r3, r2, r3
 8014f40:	183a      	adds	r2, r7, r0
 8014f42:	8812      	ldrh	r2, [r2, #0]
 8014f44:	4940      	ldr	r1, [pc, #256]	@ (8015048 <USB_ActivateEndpoint+0x2b8>)
 8014f46:	430a      	orrs	r2, r1
 8014f48:	b292      	uxth	r2, r2
 8014f4a:	801a      	strh	r2, [r3, #0]
 8014f4c:	e2b4      	b.n	80154b8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014f4e:	687a      	ldr	r2, [r7, #4]
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	781b      	ldrb	r3, [r3, #0]
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	18d3      	adds	r3, r2, r3
 8014f58:	881b      	ldrh	r3, [r3, #0]
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	200e      	movs	r0, #14
 8014f5e:	183b      	adds	r3, r7, r0
 8014f60:	493c      	ldr	r1, [pc, #240]	@ (8015054 <USB_ActivateEndpoint+0x2c4>)
 8014f62:	400a      	ands	r2, r1
 8014f64:	801a      	strh	r2, [r3, #0]
 8014f66:	687a      	ldr	r2, [r7, #4]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	009b      	lsls	r3, r3, #2
 8014f6e:	18d3      	adds	r3, r2, r3
 8014f70:	183a      	adds	r2, r7, r0
 8014f72:	8812      	ldrh	r2, [r2, #0]
 8014f74:	4934      	ldr	r1, [pc, #208]	@ (8015048 <USB_ActivateEndpoint+0x2b8>)
 8014f76:	430a      	orrs	r2, r1
 8014f78:	b292      	uxth	r2, r2
 8014f7a:	801a      	strh	r2, [r3, #0]
 8014f7c:	e29c      	b.n	80154b8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2250      	movs	r2, #80	@ 0x50
 8014f86:	5a9b      	ldrh	r3, [r3, r2]
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	001a      	movs	r2, r3
 8014f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f8e:	189b      	adds	r3, r3, r2
 8014f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	781b      	ldrb	r3, [r3, #0]
 8014f96:	00da      	lsls	r2, r3, #3
 8014f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f9a:	18d3      	adds	r3, r2, r3
 8014f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8015058 <USB_ActivateEndpoint+0x2c8>)
 8014f9e:	4694      	mov	ip, r2
 8014fa0:	4463      	add	r3, ip
 8014fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	88db      	ldrh	r3, [r3, #6]
 8014fa8:	085b      	lsrs	r3, r3, #1
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	18db      	adds	r3, r3, r3
 8014fae:	b29a      	uxth	r2, r3
 8014fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2250      	movs	r2, #80	@ 0x50
 8014fbc:	5a9b      	ldrh	r3, [r3, r2]
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	001a      	movs	r2, r3
 8014fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fc4:	189b      	adds	r3, r3, r2
 8014fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	00da      	lsls	r2, r3, #3
 8014fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fd0:	18d3      	adds	r3, r2, r3
 8014fd2:	4a22      	ldr	r2, [pc, #136]	@ (801505c <USB_ActivateEndpoint+0x2cc>)
 8014fd4:	4694      	mov	ip, r2
 8014fd6:	4463      	add	r3, ip
 8014fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fdc:	881b      	ldrh	r3, [r3, #0]
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	059b      	lsls	r3, r3, #22
 8014fe2:	0d9b      	lsrs	r3, r3, #22
 8014fe4:	b29a      	uxth	r2, r3
 8014fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe8:	801a      	strh	r2, [r3, #0]
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	691b      	ldr	r3, [r3, #16]
 8014fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8014ff0:	d91a      	bls.n	8015028 <USB_ActivateEndpoint+0x298>
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	691b      	ldr	r3, [r3, #16]
 8014ff6:	095b      	lsrs	r3, r3, #5
 8014ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	691b      	ldr	r3, [r3, #16]
 8014ffe:	221f      	movs	r2, #31
 8015000:	4013      	ands	r3, r2
 8015002:	d102      	bne.n	801500a <USB_ActivateEndpoint+0x27a>
 8015004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015006:	3b01      	subs	r3, #1
 8015008:	66bb      	str	r3, [r7, #104]	@ 0x68
 801500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500c:	881b      	ldrh	r3, [r3, #0]
 801500e:	b29a      	uxth	r2, r3
 8015010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015012:	b29b      	uxth	r3, r3
 8015014:	029b      	lsls	r3, r3, #10
 8015016:	b29b      	uxth	r3, r3
 8015018:	4313      	orrs	r3, r2
 801501a:	b29b      	uxth	r3, r3
 801501c:	4a10      	ldr	r2, [pc, #64]	@ (8015060 <USB_ActivateEndpoint+0x2d0>)
 801501e:	4313      	orrs	r3, r2
 8015020:	b29a      	uxth	r2, r3
 8015022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015024:	801a      	strh	r2, [r3, #0]
 8015026:	e034      	b.n	8015092 <USB_ActivateEndpoint+0x302>
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	691b      	ldr	r3, [r3, #16]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d119      	bne.n	8015064 <USB_ActivateEndpoint+0x2d4>
 8015030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015032:	881b      	ldrh	r3, [r3, #0]
 8015034:	b29b      	uxth	r3, r3
 8015036:	4a0a      	ldr	r2, [pc, #40]	@ (8015060 <USB_ActivateEndpoint+0x2d0>)
 8015038:	4313      	orrs	r3, r2
 801503a:	b29a      	uxth	r2, r3
 801503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801503e:	801a      	strh	r2, [r3, #0]
 8015040:	e027      	b.n	8015092 <USB_ActivateEndpoint+0x302>
 8015042:	46c0      	nop			@ (mov r8, r8)
 8015044:	ffff898f 	.word	0xffff898f
 8015048:	ffff8080 	.word	0xffff8080
 801504c:	ffff8f8f 	.word	0xffff8f8f
 8015050:	ffff80c0 	.word	0xffff80c0
 8015054:	ffff8fbf 	.word	0xffff8fbf
 8015058:	00000404 	.word	0x00000404
 801505c:	00000406 	.word	0x00000406
 8015060:	ffff8000 	.word	0xffff8000
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	691b      	ldr	r3, [r3, #16]
 8015068:	085b      	lsrs	r3, r3, #1
 801506a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	691b      	ldr	r3, [r3, #16]
 8015070:	2201      	movs	r2, #1
 8015072:	4013      	ands	r3, r2
 8015074:	d002      	beq.n	801507c <USB_ActivateEndpoint+0x2ec>
 8015076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015078:	3301      	adds	r3, #1
 801507a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	b29a      	uxth	r2, r3
 8015082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015084:	b29b      	uxth	r3, r3
 8015086:	029b      	lsls	r3, r3, #10
 8015088:	b29b      	uxth	r3, r3
 801508a:	4313      	orrs	r3, r2
 801508c:	b29a      	uxth	r2, r3
 801508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015090:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015092:	687a      	ldr	r2, [r7, #4]
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	009b      	lsls	r3, r3, #2
 801509a:	18d2      	adds	r2, r2, r3
 801509c:	2122      	movs	r1, #34	@ 0x22
 801509e:	187b      	adds	r3, r7, r1
 80150a0:	8812      	ldrh	r2, [r2, #0]
 80150a2:	801a      	strh	r2, [r3, #0]
 80150a4:	187b      	adds	r3, r7, r1
 80150a6:	881a      	ldrh	r2, [r3, #0]
 80150a8:	2380      	movs	r3, #128	@ 0x80
 80150aa:	01db      	lsls	r3, r3, #7
 80150ac:	4013      	ands	r3, r2
 80150ae:	d016      	beq.n	80150de <USB_ActivateEndpoint+0x34e>
 80150b0:	687a      	ldr	r2, [r7, #4]
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	18d3      	adds	r3, r2, r3
 80150ba:	881b      	ldrh	r3, [r3, #0]
 80150bc:	b29a      	uxth	r2, r3
 80150be:	2020      	movs	r0, #32
 80150c0:	183b      	adds	r3, r7, r0
 80150c2:	49dd      	ldr	r1, [pc, #884]	@ (8015438 <USB_ActivateEndpoint+0x6a8>)
 80150c4:	400a      	ands	r2, r1
 80150c6:	801a      	strh	r2, [r3, #0]
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	009b      	lsls	r3, r3, #2
 80150d0:	18d3      	adds	r3, r2, r3
 80150d2:	183a      	adds	r2, r7, r0
 80150d4:	8812      	ldrh	r2, [r2, #0]
 80150d6:	49d9      	ldr	r1, [pc, #868]	@ (801543c <USB_ActivateEndpoint+0x6ac>)
 80150d8:	430a      	orrs	r2, r1
 80150da:	b292      	uxth	r2, r2
 80150dc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d125      	bne.n	8015132 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80150e6:	687a      	ldr	r2, [r7, #4]
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	18d3      	adds	r3, r2, r3
 80150f0:	881b      	ldrh	r3, [r3, #0]
 80150f2:	b29a      	uxth	r2, r3
 80150f4:	201c      	movs	r0, #28
 80150f6:	183b      	adds	r3, r7, r0
 80150f8:	49d1      	ldr	r1, [pc, #836]	@ (8015440 <USB_ActivateEndpoint+0x6b0>)
 80150fa:	400a      	ands	r2, r1
 80150fc:	801a      	strh	r2, [r3, #0]
 80150fe:	183b      	adds	r3, r7, r0
 8015100:	183a      	adds	r2, r7, r0
 8015102:	8812      	ldrh	r2, [r2, #0]
 8015104:	2180      	movs	r1, #128	@ 0x80
 8015106:	0149      	lsls	r1, r1, #5
 8015108:	404a      	eors	r2, r1
 801510a:	801a      	strh	r2, [r3, #0]
 801510c:	183b      	adds	r3, r7, r0
 801510e:	183a      	adds	r2, r7, r0
 8015110:	8812      	ldrh	r2, [r2, #0]
 8015112:	2180      	movs	r1, #128	@ 0x80
 8015114:	0189      	lsls	r1, r1, #6
 8015116:	404a      	eors	r2, r1
 8015118:	801a      	strh	r2, [r3, #0]
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	781b      	ldrb	r3, [r3, #0]
 8015120:	009b      	lsls	r3, r3, #2
 8015122:	18d3      	adds	r3, r2, r3
 8015124:	183a      	adds	r2, r7, r0
 8015126:	8812      	ldrh	r2, [r2, #0]
 8015128:	49c6      	ldr	r1, [pc, #792]	@ (8015444 <USB_ActivateEndpoint+0x6b4>)
 801512a:	430a      	orrs	r2, r1
 801512c:	b292      	uxth	r2, r2
 801512e:	801a      	strh	r2, [r3, #0]
 8015130:	e1c2      	b.n	80154b8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	18d3      	adds	r3, r2, r3
 801513c:	881b      	ldrh	r3, [r3, #0]
 801513e:	b29a      	uxth	r2, r3
 8015140:	201e      	movs	r0, #30
 8015142:	183b      	adds	r3, r7, r0
 8015144:	49be      	ldr	r1, [pc, #760]	@ (8015440 <USB_ActivateEndpoint+0x6b0>)
 8015146:	400a      	ands	r2, r1
 8015148:	801a      	strh	r2, [r3, #0]
 801514a:	183b      	adds	r3, r7, r0
 801514c:	183a      	adds	r2, r7, r0
 801514e:	8812      	ldrh	r2, [r2, #0]
 8015150:	2180      	movs	r1, #128	@ 0x80
 8015152:	0189      	lsls	r1, r1, #6
 8015154:	404a      	eors	r2, r1
 8015156:	801a      	strh	r2, [r3, #0]
 8015158:	687a      	ldr	r2, [r7, #4]
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	18d3      	adds	r3, r2, r3
 8015162:	183a      	adds	r2, r7, r0
 8015164:	8812      	ldrh	r2, [r2, #0]
 8015166:	49b7      	ldr	r1, [pc, #732]	@ (8015444 <USB_ActivateEndpoint+0x6b4>)
 8015168:	430a      	orrs	r2, r1
 801516a:	b292      	uxth	r2, r2
 801516c:	801a      	strh	r2, [r3, #0]
 801516e:	e1a3      	b.n	80154b8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	78db      	ldrb	r3, [r3, #3]
 8015174:	2b02      	cmp	r3, #2
 8015176:	d117      	bne.n	80151a8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8015178:	687a      	ldr	r2, [r7, #4]
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	18d3      	adds	r3, r2, r3
 8015182:	881b      	ldrh	r3, [r3, #0]
 8015184:	b29a      	uxth	r2, r3
 8015186:	2062      	movs	r0, #98	@ 0x62
 8015188:	183b      	adds	r3, r7, r0
 801518a:	49ab      	ldr	r1, [pc, #684]	@ (8015438 <USB_ActivateEndpoint+0x6a8>)
 801518c:	400a      	ands	r2, r1
 801518e:	801a      	strh	r2, [r3, #0]
 8015190:	687a      	ldr	r2, [r7, #4]
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	18d3      	adds	r3, r2, r3
 801519a:	183a      	adds	r2, r7, r0
 801519c:	8812      	ldrh	r2, [r2, #0]
 801519e:	49aa      	ldr	r1, [pc, #680]	@ (8015448 <USB_ActivateEndpoint+0x6b8>)
 80151a0:	430a      	orrs	r2, r1
 80151a2:	b292      	uxth	r2, r2
 80151a4:	801a      	strh	r2, [r3, #0]
 80151a6:	e016      	b.n	80151d6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	18d3      	adds	r3, r2, r3
 80151b2:	881b      	ldrh	r3, [r3, #0]
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	2064      	movs	r0, #100	@ 0x64
 80151b8:	183b      	adds	r3, r7, r0
 80151ba:	49a4      	ldr	r1, [pc, #656]	@ (801544c <USB_ActivateEndpoint+0x6bc>)
 80151bc:	400a      	ands	r2, r1
 80151be:	801a      	strh	r2, [r3, #0]
 80151c0:	687a      	ldr	r2, [r7, #4]
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	009b      	lsls	r3, r3, #2
 80151c8:	18d3      	adds	r3, r2, r3
 80151ca:	183a      	adds	r2, r7, r0
 80151cc:	8812      	ldrh	r2, [r2, #0]
 80151ce:	499d      	ldr	r1, [pc, #628]	@ (8015444 <USB_ActivateEndpoint+0x6b4>)
 80151d0:	430a      	orrs	r2, r1
 80151d2:	b292      	uxth	r2, r2
 80151d4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2250      	movs	r2, #80	@ 0x50
 80151de:	5a9b      	ldrh	r3, [r3, r2]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	001a      	movs	r2, r3
 80151e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151e6:	189b      	adds	r3, r3, r2
 80151e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	781b      	ldrb	r3, [r3, #0]
 80151ee:	00da      	lsls	r2, r3, #3
 80151f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151f2:	18d3      	adds	r3, r2, r3
 80151f4:	2280      	movs	r2, #128	@ 0x80
 80151f6:	00d2      	lsls	r2, r2, #3
 80151f8:	4694      	mov	ip, r2
 80151fa:	4463      	add	r3, ip
 80151fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	891b      	ldrh	r3, [r3, #8]
 8015202:	085b      	lsrs	r3, r3, #1
 8015204:	b29b      	uxth	r3, r3
 8015206:	18db      	adds	r3, r3, r3
 8015208:	b29a      	uxth	r2, r3
 801520a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801520c:	801a      	strh	r2, [r3, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	657b      	str	r3, [r7, #84]	@ 0x54
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2250      	movs	r2, #80	@ 0x50
 8015216:	5a9b      	ldrh	r3, [r3, r2]
 8015218:	b29b      	uxth	r3, r3
 801521a:	001a      	movs	r2, r3
 801521c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801521e:	189b      	adds	r3, r3, r2
 8015220:	657b      	str	r3, [r7, #84]	@ 0x54
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	00da      	lsls	r2, r3, #3
 8015228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801522a:	18d3      	adds	r3, r2, r3
 801522c:	4a88      	ldr	r2, [pc, #544]	@ (8015450 <USB_ActivateEndpoint+0x6c0>)
 801522e:	4694      	mov	ip, r2
 8015230:	4463      	add	r3, ip
 8015232:	653b      	str	r3, [r7, #80]	@ 0x50
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	895b      	ldrh	r3, [r3, #10]
 8015238:	085b      	lsrs	r3, r3, #1
 801523a:	b29b      	uxth	r3, r3
 801523c:	18db      	adds	r3, r3, r3
 801523e:	b29a      	uxth	r2, r3
 8015240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015242:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	785b      	ldrb	r3, [r3, #1]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d000      	beq.n	801524e <USB_ActivateEndpoint+0x4be>
 801524c:	e087      	b.n	801535e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	18d2      	adds	r2, r2, r3
 8015258:	2140      	movs	r1, #64	@ 0x40
 801525a:	187b      	adds	r3, r7, r1
 801525c:	8812      	ldrh	r2, [r2, #0]
 801525e:	801a      	strh	r2, [r3, #0]
 8015260:	187b      	adds	r3, r7, r1
 8015262:	881a      	ldrh	r2, [r3, #0]
 8015264:	2380      	movs	r3, #128	@ 0x80
 8015266:	01db      	lsls	r3, r3, #7
 8015268:	4013      	ands	r3, r2
 801526a:	d016      	beq.n	801529a <USB_ActivateEndpoint+0x50a>
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	18d3      	adds	r3, r2, r3
 8015276:	881b      	ldrh	r3, [r3, #0]
 8015278:	b29a      	uxth	r2, r3
 801527a:	203e      	movs	r0, #62	@ 0x3e
 801527c:	183b      	adds	r3, r7, r0
 801527e:	496e      	ldr	r1, [pc, #440]	@ (8015438 <USB_ActivateEndpoint+0x6a8>)
 8015280:	400a      	ands	r2, r1
 8015282:	801a      	strh	r2, [r3, #0]
 8015284:	687a      	ldr	r2, [r7, #4]
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	781b      	ldrb	r3, [r3, #0]
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	18d3      	adds	r3, r2, r3
 801528e:	183a      	adds	r2, r7, r0
 8015290:	8812      	ldrh	r2, [r2, #0]
 8015292:	496a      	ldr	r1, [pc, #424]	@ (801543c <USB_ActivateEndpoint+0x6ac>)
 8015294:	430a      	orrs	r2, r1
 8015296:	b292      	uxth	r2, r2
 8015298:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	009b      	lsls	r3, r3, #2
 80152a2:	18d2      	adds	r2, r2, r3
 80152a4:	213c      	movs	r1, #60	@ 0x3c
 80152a6:	187b      	adds	r3, r7, r1
 80152a8:	8812      	ldrh	r2, [r2, #0]
 80152aa:	801a      	strh	r2, [r3, #0]
 80152ac:	187b      	adds	r3, r7, r1
 80152ae:	881b      	ldrh	r3, [r3, #0]
 80152b0:	2240      	movs	r2, #64	@ 0x40
 80152b2:	4013      	ands	r3, r2
 80152b4:	d016      	beq.n	80152e4 <USB_ActivateEndpoint+0x554>
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	18d3      	adds	r3, r2, r3
 80152c0:	881b      	ldrh	r3, [r3, #0]
 80152c2:	b29a      	uxth	r2, r3
 80152c4:	203a      	movs	r0, #58	@ 0x3a
 80152c6:	183b      	adds	r3, r7, r0
 80152c8:	495b      	ldr	r1, [pc, #364]	@ (8015438 <USB_ActivateEndpoint+0x6a8>)
 80152ca:	400a      	ands	r2, r1
 80152cc:	801a      	strh	r2, [r3, #0]
 80152ce:	687a      	ldr	r2, [r7, #4]
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	009b      	lsls	r3, r3, #2
 80152d6:	18d3      	adds	r3, r2, r3
 80152d8:	183a      	adds	r2, r7, r0
 80152da:	8812      	ldrh	r2, [r2, #0]
 80152dc:	495d      	ldr	r1, [pc, #372]	@ (8015454 <USB_ActivateEndpoint+0x6c4>)
 80152de:	430a      	orrs	r2, r1
 80152e0:	b292      	uxth	r2, r2
 80152e2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	009b      	lsls	r3, r3, #2
 80152ec:	18d3      	adds	r3, r2, r3
 80152ee:	881b      	ldrh	r3, [r3, #0]
 80152f0:	b29a      	uxth	r2, r3
 80152f2:	2038      	movs	r0, #56	@ 0x38
 80152f4:	183b      	adds	r3, r7, r0
 80152f6:	4952      	ldr	r1, [pc, #328]	@ (8015440 <USB_ActivateEndpoint+0x6b0>)
 80152f8:	400a      	ands	r2, r1
 80152fa:	801a      	strh	r2, [r3, #0]
 80152fc:	183b      	adds	r3, r7, r0
 80152fe:	183a      	adds	r2, r7, r0
 8015300:	8812      	ldrh	r2, [r2, #0]
 8015302:	2180      	movs	r1, #128	@ 0x80
 8015304:	0149      	lsls	r1, r1, #5
 8015306:	404a      	eors	r2, r1
 8015308:	801a      	strh	r2, [r3, #0]
 801530a:	183b      	adds	r3, r7, r0
 801530c:	183a      	adds	r2, r7, r0
 801530e:	8812      	ldrh	r2, [r2, #0]
 8015310:	2180      	movs	r1, #128	@ 0x80
 8015312:	0189      	lsls	r1, r1, #6
 8015314:	404a      	eors	r2, r1
 8015316:	801a      	strh	r2, [r3, #0]
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	009b      	lsls	r3, r3, #2
 8015320:	18d3      	adds	r3, r2, r3
 8015322:	183a      	adds	r2, r7, r0
 8015324:	8812      	ldrh	r2, [r2, #0]
 8015326:	4947      	ldr	r1, [pc, #284]	@ (8015444 <USB_ActivateEndpoint+0x6b4>)
 8015328:	430a      	orrs	r2, r1
 801532a:	b292      	uxth	r2, r2
 801532c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	18d3      	adds	r3, r2, r3
 8015338:	881b      	ldrh	r3, [r3, #0]
 801533a:	b29a      	uxth	r2, r3
 801533c:	2036      	movs	r0, #54	@ 0x36
 801533e:	183b      	adds	r3, r7, r0
 8015340:	4945      	ldr	r1, [pc, #276]	@ (8015458 <USB_ActivateEndpoint+0x6c8>)
 8015342:	400a      	ands	r2, r1
 8015344:	801a      	strh	r2, [r3, #0]
 8015346:	687a      	ldr	r2, [r7, #4]
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	18d3      	adds	r3, r2, r3
 8015350:	183a      	adds	r2, r7, r0
 8015352:	8812      	ldrh	r2, [r2, #0]
 8015354:	493b      	ldr	r1, [pc, #236]	@ (8015444 <USB_ActivateEndpoint+0x6b4>)
 8015356:	430a      	orrs	r2, r1
 8015358:	b292      	uxth	r2, r2
 801535a:	801a      	strh	r2, [r3, #0]
 801535c:	e0ac      	b.n	80154b8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	009b      	lsls	r3, r3, #2
 8015366:	18d2      	adds	r2, r2, r3
 8015368:	214e      	movs	r1, #78	@ 0x4e
 801536a:	187b      	adds	r3, r7, r1
 801536c:	8812      	ldrh	r2, [r2, #0]
 801536e:	801a      	strh	r2, [r3, #0]
 8015370:	187b      	adds	r3, r7, r1
 8015372:	881a      	ldrh	r2, [r3, #0]
 8015374:	2380      	movs	r3, #128	@ 0x80
 8015376:	01db      	lsls	r3, r3, #7
 8015378:	4013      	ands	r3, r2
 801537a:	d016      	beq.n	80153aa <USB_ActivateEndpoint+0x61a>
 801537c:	687a      	ldr	r2, [r7, #4]
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	18d3      	adds	r3, r2, r3
 8015386:	881b      	ldrh	r3, [r3, #0]
 8015388:	b29a      	uxth	r2, r3
 801538a:	204c      	movs	r0, #76	@ 0x4c
 801538c:	183b      	adds	r3, r7, r0
 801538e:	492a      	ldr	r1, [pc, #168]	@ (8015438 <USB_ActivateEndpoint+0x6a8>)
 8015390:	400a      	ands	r2, r1
 8015392:	801a      	strh	r2, [r3, #0]
 8015394:	687a      	ldr	r2, [r7, #4]
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	781b      	ldrb	r3, [r3, #0]
 801539a:	009b      	lsls	r3, r3, #2
 801539c:	18d3      	adds	r3, r2, r3
 801539e:	183a      	adds	r2, r7, r0
 80153a0:	8812      	ldrh	r2, [r2, #0]
 80153a2:	4926      	ldr	r1, [pc, #152]	@ (801543c <USB_ActivateEndpoint+0x6ac>)
 80153a4:	430a      	orrs	r2, r1
 80153a6:	b292      	uxth	r2, r2
 80153a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80153aa:	687a      	ldr	r2, [r7, #4]
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	781b      	ldrb	r3, [r3, #0]
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	18d2      	adds	r2, r2, r3
 80153b4:	214a      	movs	r1, #74	@ 0x4a
 80153b6:	187b      	adds	r3, r7, r1
 80153b8:	8812      	ldrh	r2, [r2, #0]
 80153ba:	801a      	strh	r2, [r3, #0]
 80153bc:	187b      	adds	r3, r7, r1
 80153be:	881b      	ldrh	r3, [r3, #0]
 80153c0:	2240      	movs	r2, #64	@ 0x40
 80153c2:	4013      	ands	r3, r2
 80153c4:	d016      	beq.n	80153f4 <USB_ActivateEndpoint+0x664>
 80153c6:	687a      	ldr	r2, [r7, #4]
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	781b      	ldrb	r3, [r3, #0]
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	18d3      	adds	r3, r2, r3
 80153d0:	881b      	ldrh	r3, [r3, #0]
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	2048      	movs	r0, #72	@ 0x48
 80153d6:	183b      	adds	r3, r7, r0
 80153d8:	4917      	ldr	r1, [pc, #92]	@ (8015438 <USB_ActivateEndpoint+0x6a8>)
 80153da:	400a      	ands	r2, r1
 80153dc:	801a      	strh	r2, [r3, #0]
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	009b      	lsls	r3, r3, #2
 80153e6:	18d3      	adds	r3, r2, r3
 80153e8:	183a      	adds	r2, r7, r0
 80153ea:	8812      	ldrh	r2, [r2, #0]
 80153ec:	4919      	ldr	r1, [pc, #100]	@ (8015454 <USB_ActivateEndpoint+0x6c4>)
 80153ee:	430a      	orrs	r2, r1
 80153f0:	b292      	uxth	r2, r2
 80153f2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	78db      	ldrb	r3, [r3, #3]
 80153f8:	2b01      	cmp	r3, #1
 80153fa:	d02f      	beq.n	801545c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80153fc:	687a      	ldr	r2, [r7, #4]
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	009b      	lsls	r3, r3, #2
 8015404:	18d3      	adds	r3, r2, r3
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	b29a      	uxth	r2, r3
 801540a:	2044      	movs	r0, #68	@ 0x44
 801540c:	183b      	adds	r3, r7, r0
 801540e:	4912      	ldr	r1, [pc, #72]	@ (8015458 <USB_ActivateEndpoint+0x6c8>)
 8015410:	400a      	ands	r2, r1
 8015412:	801a      	strh	r2, [r3, #0]
 8015414:	183b      	adds	r3, r7, r0
 8015416:	183a      	adds	r2, r7, r0
 8015418:	8812      	ldrh	r2, [r2, #0]
 801541a:	2120      	movs	r1, #32
 801541c:	404a      	eors	r2, r1
 801541e:	801a      	strh	r2, [r3, #0]
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	781b      	ldrb	r3, [r3, #0]
 8015426:	009b      	lsls	r3, r3, #2
 8015428:	18d3      	adds	r3, r2, r3
 801542a:	183a      	adds	r2, r7, r0
 801542c:	8812      	ldrh	r2, [r2, #0]
 801542e:	4905      	ldr	r1, [pc, #20]	@ (8015444 <USB_ActivateEndpoint+0x6b4>)
 8015430:	430a      	orrs	r2, r1
 8015432:	b292      	uxth	r2, r2
 8015434:	801a      	strh	r2, [r3, #0]
 8015436:	e028      	b.n	801548a <USB_ActivateEndpoint+0x6fa>
 8015438:	ffff8f8f 	.word	0xffff8f8f
 801543c:	ffffc080 	.word	0xffffc080
 8015440:	ffffbf8f 	.word	0xffffbf8f
 8015444:	ffff8080 	.word	0xffff8080
 8015448:	ffff8180 	.word	0xffff8180
 801544c:	ffff8e8f 	.word	0xffff8e8f
 8015450:	00000404 	.word	0x00000404
 8015454:	ffff80c0 	.word	0xffff80c0
 8015458:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801545c:	687a      	ldr	r2, [r7, #4]
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	781b      	ldrb	r3, [r3, #0]
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	18d3      	adds	r3, r2, r3
 8015466:	881b      	ldrh	r3, [r3, #0]
 8015468:	b29a      	uxth	r2, r3
 801546a:	2046      	movs	r0, #70	@ 0x46
 801546c:	183b      	adds	r3, r7, r0
 801546e:	4916      	ldr	r1, [pc, #88]	@ (80154c8 <USB_ActivateEndpoint+0x738>)
 8015470:	400a      	ands	r2, r1
 8015472:	801a      	strh	r2, [r3, #0]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	009b      	lsls	r3, r3, #2
 801547c:	18d3      	adds	r3, r2, r3
 801547e:	183a      	adds	r2, r7, r0
 8015480:	8812      	ldrh	r2, [r2, #0]
 8015482:	4912      	ldr	r1, [pc, #72]	@ (80154cc <USB_ActivateEndpoint+0x73c>)
 8015484:	430a      	orrs	r2, r1
 8015486:	b292      	uxth	r2, r2
 8015488:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	18d3      	adds	r3, r2, r3
 8015494:	881b      	ldrh	r3, [r3, #0]
 8015496:	b29a      	uxth	r2, r3
 8015498:	2042      	movs	r0, #66	@ 0x42
 801549a:	183b      	adds	r3, r7, r0
 801549c:	490c      	ldr	r1, [pc, #48]	@ (80154d0 <USB_ActivateEndpoint+0x740>)
 801549e:	400a      	ands	r2, r1
 80154a0:	801a      	strh	r2, [r3, #0]
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	781b      	ldrb	r3, [r3, #0]
 80154a8:	009b      	lsls	r3, r3, #2
 80154aa:	18d3      	adds	r3, r2, r3
 80154ac:	183a      	adds	r2, r7, r0
 80154ae:	8812      	ldrh	r2, [r2, #0]
 80154b0:	4906      	ldr	r1, [pc, #24]	@ (80154cc <USB_ActivateEndpoint+0x73c>)
 80154b2:	430a      	orrs	r2, r1
 80154b4:	b292      	uxth	r2, r2
 80154b6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80154b8:	236f      	movs	r3, #111	@ 0x6f
 80154ba:	18fb      	adds	r3, r7, r3
 80154bc:	781b      	ldrb	r3, [r3, #0]
}
 80154be:	0018      	movs	r0, r3
 80154c0:	46bd      	mov	sp, r7
 80154c2:	b01c      	add	sp, #112	@ 0x70
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	46c0      	nop			@ (mov r8, r8)
 80154c8:	ffff8fbf 	.word	0xffff8fbf
 80154cc:	ffff8080 	.word	0xffff8080
 80154d0:	ffffbf8f 	.word	0xffffbf8f

080154d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b08c      	sub	sp, #48	@ 0x30
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	7b1b      	ldrb	r3, [r3, #12]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d000      	beq.n	80154e8 <USB_DeactivateEndpoint+0x14>
 80154e6:	e07e      	b.n	80155e6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	785b      	ldrb	r3, [r3, #1]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d03c      	beq.n	801556a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80154f0:	687a      	ldr	r2, [r7, #4]
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	18d2      	adds	r2, r2, r3
 80154fa:	210c      	movs	r1, #12
 80154fc:	187b      	adds	r3, r7, r1
 80154fe:	8812      	ldrh	r2, [r2, #0]
 8015500:	801a      	strh	r2, [r3, #0]
 8015502:	187b      	adds	r3, r7, r1
 8015504:	881b      	ldrh	r3, [r3, #0]
 8015506:	2240      	movs	r2, #64	@ 0x40
 8015508:	4013      	ands	r3, r2
 801550a:	d016      	beq.n	801553a <USB_DeactivateEndpoint+0x66>
 801550c:	687a      	ldr	r2, [r7, #4]
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	009b      	lsls	r3, r3, #2
 8015514:	18d3      	adds	r3, r2, r3
 8015516:	881b      	ldrh	r3, [r3, #0]
 8015518:	b29a      	uxth	r2, r3
 801551a:	200a      	movs	r0, #10
 801551c:	183b      	adds	r3, r7, r0
 801551e:	49c7      	ldr	r1, [pc, #796]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 8015520:	400a      	ands	r2, r1
 8015522:	801a      	strh	r2, [r3, #0]
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	009b      	lsls	r3, r3, #2
 801552c:	18d3      	adds	r3, r2, r3
 801552e:	183a      	adds	r2, r7, r0
 8015530:	8812      	ldrh	r2, [r2, #0]
 8015532:	49c3      	ldr	r1, [pc, #780]	@ (8015840 <USB_DeactivateEndpoint+0x36c>)
 8015534:	430a      	orrs	r2, r1
 8015536:	b292      	uxth	r2, r2
 8015538:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	18d3      	adds	r3, r2, r3
 8015544:	881b      	ldrh	r3, [r3, #0]
 8015546:	b29a      	uxth	r2, r3
 8015548:	2008      	movs	r0, #8
 801554a:	183b      	adds	r3, r7, r0
 801554c:	49bd      	ldr	r1, [pc, #756]	@ (8015844 <USB_DeactivateEndpoint+0x370>)
 801554e:	400a      	ands	r2, r1
 8015550:	801a      	strh	r2, [r3, #0]
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	18d3      	adds	r3, r2, r3
 801555c:	183a      	adds	r2, r7, r0
 801555e:	8812      	ldrh	r2, [r2, #0]
 8015560:	49b9      	ldr	r1, [pc, #740]	@ (8015848 <USB_DeactivateEndpoint+0x374>)
 8015562:	430a      	orrs	r2, r1
 8015564:	b292      	uxth	r2, r2
 8015566:	801a      	strh	r2, [r3, #0]
 8015568:	e163      	b.n	8015832 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801556a:	687a      	ldr	r2, [r7, #4]
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	009b      	lsls	r3, r3, #2
 8015572:	18d2      	adds	r2, r2, r3
 8015574:	2112      	movs	r1, #18
 8015576:	187b      	adds	r3, r7, r1
 8015578:	8812      	ldrh	r2, [r2, #0]
 801557a:	801a      	strh	r2, [r3, #0]
 801557c:	187b      	adds	r3, r7, r1
 801557e:	881a      	ldrh	r2, [r3, #0]
 8015580:	2380      	movs	r3, #128	@ 0x80
 8015582:	01db      	lsls	r3, r3, #7
 8015584:	4013      	ands	r3, r2
 8015586:	d016      	beq.n	80155b6 <USB_DeactivateEndpoint+0xe2>
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	009b      	lsls	r3, r3, #2
 8015590:	18d3      	adds	r3, r2, r3
 8015592:	881b      	ldrh	r3, [r3, #0]
 8015594:	b29a      	uxth	r2, r3
 8015596:	2010      	movs	r0, #16
 8015598:	183b      	adds	r3, r7, r0
 801559a:	49a8      	ldr	r1, [pc, #672]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 801559c:	400a      	ands	r2, r1
 801559e:	801a      	strh	r2, [r3, #0]
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	781b      	ldrb	r3, [r3, #0]
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	18d3      	adds	r3, r2, r3
 80155aa:	183a      	adds	r2, r7, r0
 80155ac:	8812      	ldrh	r2, [r2, #0]
 80155ae:	49a7      	ldr	r1, [pc, #668]	@ (801584c <USB_DeactivateEndpoint+0x378>)
 80155b0:	430a      	orrs	r2, r1
 80155b2:	b292      	uxth	r2, r2
 80155b4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80155b6:	687a      	ldr	r2, [r7, #4]
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	18d3      	adds	r3, r2, r3
 80155c0:	881b      	ldrh	r3, [r3, #0]
 80155c2:	b29a      	uxth	r2, r3
 80155c4:	200e      	movs	r0, #14
 80155c6:	183b      	adds	r3, r7, r0
 80155c8:	49a1      	ldr	r1, [pc, #644]	@ (8015850 <USB_DeactivateEndpoint+0x37c>)
 80155ca:	400a      	ands	r2, r1
 80155cc:	801a      	strh	r2, [r3, #0]
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	18d3      	adds	r3, r2, r3
 80155d8:	183a      	adds	r2, r7, r0
 80155da:	8812      	ldrh	r2, [r2, #0]
 80155dc:	499a      	ldr	r1, [pc, #616]	@ (8015848 <USB_DeactivateEndpoint+0x374>)
 80155de:	430a      	orrs	r2, r1
 80155e0:	b292      	uxth	r2, r2
 80155e2:	801a      	strh	r2, [r3, #0]
 80155e4:	e125      	b.n	8015832 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	785b      	ldrb	r3, [r3, #1]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d000      	beq.n	80155f0 <USB_DeactivateEndpoint+0x11c>
 80155ee:	e090      	b.n	8015712 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80155f0:	687a      	ldr	r2, [r7, #4]
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	009b      	lsls	r3, r3, #2
 80155f8:	18d2      	adds	r2, r2, r3
 80155fa:	2120      	movs	r1, #32
 80155fc:	187b      	adds	r3, r7, r1
 80155fe:	8812      	ldrh	r2, [r2, #0]
 8015600:	801a      	strh	r2, [r3, #0]
 8015602:	187b      	adds	r3, r7, r1
 8015604:	881a      	ldrh	r2, [r3, #0]
 8015606:	2380      	movs	r3, #128	@ 0x80
 8015608:	01db      	lsls	r3, r3, #7
 801560a:	4013      	ands	r3, r2
 801560c:	d016      	beq.n	801563c <USB_DeactivateEndpoint+0x168>
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	009b      	lsls	r3, r3, #2
 8015616:	18d3      	adds	r3, r2, r3
 8015618:	881b      	ldrh	r3, [r3, #0]
 801561a:	b29a      	uxth	r2, r3
 801561c:	201e      	movs	r0, #30
 801561e:	183b      	adds	r3, r7, r0
 8015620:	4986      	ldr	r1, [pc, #536]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 8015622:	400a      	ands	r2, r1
 8015624:	801a      	strh	r2, [r3, #0]
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	18d3      	adds	r3, r2, r3
 8015630:	183a      	adds	r2, r7, r0
 8015632:	8812      	ldrh	r2, [r2, #0]
 8015634:	4985      	ldr	r1, [pc, #532]	@ (801584c <USB_DeactivateEndpoint+0x378>)
 8015636:	430a      	orrs	r2, r1
 8015638:	b292      	uxth	r2, r2
 801563a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	18d2      	adds	r2, r2, r3
 8015646:	211c      	movs	r1, #28
 8015648:	187b      	adds	r3, r7, r1
 801564a:	8812      	ldrh	r2, [r2, #0]
 801564c:	801a      	strh	r2, [r3, #0]
 801564e:	187b      	adds	r3, r7, r1
 8015650:	881b      	ldrh	r3, [r3, #0]
 8015652:	2240      	movs	r2, #64	@ 0x40
 8015654:	4013      	ands	r3, r2
 8015656:	d016      	beq.n	8015686 <USB_DeactivateEndpoint+0x1b2>
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	18d3      	adds	r3, r2, r3
 8015662:	881b      	ldrh	r3, [r3, #0]
 8015664:	b29a      	uxth	r2, r3
 8015666:	201a      	movs	r0, #26
 8015668:	183b      	adds	r3, r7, r0
 801566a:	4974      	ldr	r1, [pc, #464]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 801566c:	400a      	ands	r2, r1
 801566e:	801a      	strh	r2, [r3, #0]
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	781b      	ldrb	r3, [r3, #0]
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	18d3      	adds	r3, r2, r3
 801567a:	183a      	adds	r2, r7, r0
 801567c:	8812      	ldrh	r2, [r2, #0]
 801567e:	4970      	ldr	r1, [pc, #448]	@ (8015840 <USB_DeactivateEndpoint+0x36c>)
 8015680:	430a      	orrs	r2, r1
 8015682:	b292      	uxth	r2, r2
 8015684:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8015686:	687a      	ldr	r2, [r7, #4]
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	18d3      	adds	r3, r2, r3
 8015690:	881b      	ldrh	r3, [r3, #0]
 8015692:	b29a      	uxth	r2, r3
 8015694:	2018      	movs	r0, #24
 8015696:	183b      	adds	r3, r7, r0
 8015698:	4968      	ldr	r1, [pc, #416]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 801569a:	400a      	ands	r2, r1
 801569c:	801a      	strh	r2, [r3, #0]
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	781b      	ldrb	r3, [r3, #0]
 80156a4:	009b      	lsls	r3, r3, #2
 80156a6:	18d3      	adds	r3, r2, r3
 80156a8:	183a      	adds	r2, r7, r0
 80156aa:	8812      	ldrh	r2, [r2, #0]
 80156ac:	4964      	ldr	r1, [pc, #400]	@ (8015840 <USB_DeactivateEndpoint+0x36c>)
 80156ae:	430a      	orrs	r2, r1
 80156b0:	b292      	uxth	r2, r2
 80156b2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	781b      	ldrb	r3, [r3, #0]
 80156ba:	009b      	lsls	r3, r3, #2
 80156bc:	18d3      	adds	r3, r2, r3
 80156be:	881b      	ldrh	r3, [r3, #0]
 80156c0:	b29a      	uxth	r2, r3
 80156c2:	2016      	movs	r0, #22
 80156c4:	183b      	adds	r3, r7, r0
 80156c6:	4962      	ldr	r1, [pc, #392]	@ (8015850 <USB_DeactivateEndpoint+0x37c>)
 80156c8:	400a      	ands	r2, r1
 80156ca:	801a      	strh	r2, [r3, #0]
 80156cc:	687a      	ldr	r2, [r7, #4]
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	009b      	lsls	r3, r3, #2
 80156d4:	18d3      	adds	r3, r2, r3
 80156d6:	183a      	adds	r2, r7, r0
 80156d8:	8812      	ldrh	r2, [r2, #0]
 80156da:	495b      	ldr	r1, [pc, #364]	@ (8015848 <USB_DeactivateEndpoint+0x374>)
 80156dc:	430a      	orrs	r2, r1
 80156de:	b292      	uxth	r2, r2
 80156e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	009b      	lsls	r3, r3, #2
 80156ea:	18d3      	adds	r3, r2, r3
 80156ec:	881b      	ldrh	r3, [r3, #0]
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	2014      	movs	r0, #20
 80156f2:	183b      	adds	r3, r7, r0
 80156f4:	4953      	ldr	r1, [pc, #332]	@ (8015844 <USB_DeactivateEndpoint+0x370>)
 80156f6:	400a      	ands	r2, r1
 80156f8:	801a      	strh	r2, [r3, #0]
 80156fa:	687a      	ldr	r2, [r7, #4]
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	18d3      	adds	r3, r2, r3
 8015704:	183a      	adds	r2, r7, r0
 8015706:	8812      	ldrh	r2, [r2, #0]
 8015708:	494f      	ldr	r1, [pc, #316]	@ (8015848 <USB_DeactivateEndpoint+0x374>)
 801570a:	430a      	orrs	r2, r1
 801570c:	b292      	uxth	r2, r2
 801570e:	801a      	strh	r2, [r3, #0]
 8015710:	e08f      	b.n	8015832 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	18d2      	adds	r2, r2, r3
 801571c:	212e      	movs	r1, #46	@ 0x2e
 801571e:	187b      	adds	r3, r7, r1
 8015720:	8812      	ldrh	r2, [r2, #0]
 8015722:	801a      	strh	r2, [r3, #0]
 8015724:	187b      	adds	r3, r7, r1
 8015726:	881a      	ldrh	r2, [r3, #0]
 8015728:	2380      	movs	r3, #128	@ 0x80
 801572a:	01db      	lsls	r3, r3, #7
 801572c:	4013      	ands	r3, r2
 801572e:	d016      	beq.n	801575e <USB_DeactivateEndpoint+0x28a>
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	18d3      	adds	r3, r2, r3
 801573a:	881b      	ldrh	r3, [r3, #0]
 801573c:	b29a      	uxth	r2, r3
 801573e:	202c      	movs	r0, #44	@ 0x2c
 8015740:	183b      	adds	r3, r7, r0
 8015742:	493e      	ldr	r1, [pc, #248]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 8015744:	400a      	ands	r2, r1
 8015746:	801a      	strh	r2, [r3, #0]
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	18d3      	adds	r3, r2, r3
 8015752:	183a      	adds	r2, r7, r0
 8015754:	8812      	ldrh	r2, [r2, #0]
 8015756:	493d      	ldr	r1, [pc, #244]	@ (801584c <USB_DeactivateEndpoint+0x378>)
 8015758:	430a      	orrs	r2, r1
 801575a:	b292      	uxth	r2, r2
 801575c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	18d2      	adds	r2, r2, r3
 8015768:	212a      	movs	r1, #42	@ 0x2a
 801576a:	187b      	adds	r3, r7, r1
 801576c:	8812      	ldrh	r2, [r2, #0]
 801576e:	801a      	strh	r2, [r3, #0]
 8015770:	187b      	adds	r3, r7, r1
 8015772:	881b      	ldrh	r3, [r3, #0]
 8015774:	2240      	movs	r2, #64	@ 0x40
 8015776:	4013      	ands	r3, r2
 8015778:	d016      	beq.n	80157a8 <USB_DeactivateEndpoint+0x2d4>
 801577a:	687a      	ldr	r2, [r7, #4]
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	781b      	ldrb	r3, [r3, #0]
 8015780:	009b      	lsls	r3, r3, #2
 8015782:	18d3      	adds	r3, r2, r3
 8015784:	881b      	ldrh	r3, [r3, #0]
 8015786:	b29a      	uxth	r2, r3
 8015788:	2028      	movs	r0, #40	@ 0x28
 801578a:	183b      	adds	r3, r7, r0
 801578c:	492b      	ldr	r1, [pc, #172]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 801578e:	400a      	ands	r2, r1
 8015790:	801a      	strh	r2, [r3, #0]
 8015792:	687a      	ldr	r2, [r7, #4]
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	009b      	lsls	r3, r3, #2
 801579a:	18d3      	adds	r3, r2, r3
 801579c:	183a      	adds	r2, r7, r0
 801579e:	8812      	ldrh	r2, [r2, #0]
 80157a0:	4927      	ldr	r1, [pc, #156]	@ (8015840 <USB_DeactivateEndpoint+0x36c>)
 80157a2:	430a      	orrs	r2, r1
 80157a4:	b292      	uxth	r2, r2
 80157a6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80157a8:	687a      	ldr	r2, [r7, #4]
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	009b      	lsls	r3, r3, #2
 80157b0:	18d3      	adds	r3, r2, r3
 80157b2:	881b      	ldrh	r3, [r3, #0]
 80157b4:	b29a      	uxth	r2, r3
 80157b6:	2026      	movs	r0, #38	@ 0x26
 80157b8:	183b      	adds	r3, r7, r0
 80157ba:	4920      	ldr	r1, [pc, #128]	@ (801583c <USB_DeactivateEndpoint+0x368>)
 80157bc:	400a      	ands	r2, r1
 80157be:	801a      	strh	r2, [r3, #0]
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	009b      	lsls	r3, r3, #2
 80157c8:	18d3      	adds	r3, r2, r3
 80157ca:	183a      	adds	r2, r7, r0
 80157cc:	8812      	ldrh	r2, [r2, #0]
 80157ce:	491f      	ldr	r1, [pc, #124]	@ (801584c <USB_DeactivateEndpoint+0x378>)
 80157d0:	430a      	orrs	r2, r1
 80157d2:	b292      	uxth	r2, r2
 80157d4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	18d3      	adds	r3, r2, r3
 80157e0:	881b      	ldrh	r3, [r3, #0]
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	2024      	movs	r0, #36	@ 0x24
 80157e6:	183b      	adds	r3, r7, r0
 80157e8:	4916      	ldr	r1, [pc, #88]	@ (8015844 <USB_DeactivateEndpoint+0x370>)
 80157ea:	400a      	ands	r2, r1
 80157ec:	801a      	strh	r2, [r3, #0]
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	18d3      	adds	r3, r2, r3
 80157f8:	183a      	adds	r2, r7, r0
 80157fa:	8812      	ldrh	r2, [r2, #0]
 80157fc:	4912      	ldr	r1, [pc, #72]	@ (8015848 <USB_DeactivateEndpoint+0x374>)
 80157fe:	430a      	orrs	r2, r1
 8015800:	b292      	uxth	r2, r2
 8015802:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	18d3      	adds	r3, r2, r3
 801580e:	881b      	ldrh	r3, [r3, #0]
 8015810:	b29a      	uxth	r2, r3
 8015812:	2022      	movs	r0, #34	@ 0x22
 8015814:	183b      	adds	r3, r7, r0
 8015816:	490e      	ldr	r1, [pc, #56]	@ (8015850 <USB_DeactivateEndpoint+0x37c>)
 8015818:	400a      	ands	r2, r1
 801581a:	801a      	strh	r2, [r3, #0]
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	009b      	lsls	r3, r3, #2
 8015824:	18d3      	adds	r3, r2, r3
 8015826:	183a      	adds	r2, r7, r0
 8015828:	8812      	ldrh	r2, [r2, #0]
 801582a:	4907      	ldr	r1, [pc, #28]	@ (8015848 <USB_DeactivateEndpoint+0x374>)
 801582c:	430a      	orrs	r2, r1
 801582e:	b292      	uxth	r2, r2
 8015830:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8015832:	2300      	movs	r3, #0
}
 8015834:	0018      	movs	r0, r3
 8015836:	46bd      	mov	sp, r7
 8015838:	b00c      	add	sp, #48	@ 0x30
 801583a:	bd80      	pop	{r7, pc}
 801583c:	ffff8f8f 	.word	0xffff8f8f
 8015840:	ffff80c0 	.word	0xffff80c0
 8015844:	ffff8fbf 	.word	0xffff8fbf
 8015848:	ffff8080 	.word	0xffff8080
 801584c:	ffffc080 	.word	0xffffc080
 8015850:	ffffbf8f 	.word	0xffffbf8f

08015854 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015854:	b590      	push	{r4, r7, lr}
 8015856:	b0c3      	sub	sp, #268	@ 0x10c
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	785b      	ldrb	r3, [r3, #1]
 8015862:	2b01      	cmp	r3, #1
 8015864:	d001      	beq.n	801586a <USB_EPStartXfer+0x16>
 8015866:	f000 fd2d 	bl	80162c4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	699a      	ldr	r2, [r3, #24]
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	691b      	ldr	r3, [r3, #16]
 8015872:	429a      	cmp	r2, r3
 8015874:	d905      	bls.n	8015882 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	691b      	ldr	r3, [r3, #16]
 801587a:	1d7a      	adds	r2, r7, #5
 801587c:	32ff      	adds	r2, #255	@ 0xff
 801587e:	6013      	str	r3, [r2, #0]
 8015880:	e004      	b.n	801588c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	699b      	ldr	r3, [r3, #24]
 8015886:	1d7a      	adds	r2, r7, #5
 8015888:	32ff      	adds	r2, #255	@ 0xff
 801588a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	7b1b      	ldrb	r3, [r3, #12]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d125      	bne.n	80158e0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	6959      	ldr	r1, [r3, #20]
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	88da      	ldrh	r2, [r3, #6]
 801589c:	1d7b      	adds	r3, r7, #5
 801589e:	33ff      	adds	r3, #255	@ 0xff
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f001 fa47 	bl	8016d38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	613b      	str	r3, [r7, #16]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2250      	movs	r2, #80	@ 0x50
 80158b2:	5a9b      	ldrh	r3, [r3, r2]
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	001a      	movs	r2, r3
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	189b      	adds	r3, r3, r2
 80158bc:	613b      	str	r3, [r7, #16]
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	00da      	lsls	r2, r3, #3
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	18d3      	adds	r3, r2, r3
 80158c8:	4ad7      	ldr	r2, [pc, #860]	@ (8015c28 <USB_EPStartXfer+0x3d4>)
 80158ca:	4694      	mov	ip, r2
 80158cc:	4463      	add	r3, ip
 80158ce:	60fb      	str	r3, [r7, #12]
 80158d0:	1d7b      	adds	r3, r7, #5
 80158d2:	33ff      	adds	r3, #255	@ 0xff
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	b29a      	uxth	r2, r3
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	801a      	strh	r2, [r3, #0]
 80158dc:	f000 fccd 	bl	801627a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	78db      	ldrb	r3, [r3, #3]
 80158e4:	2b02      	cmp	r3, #2
 80158e6:	d000      	beq.n	80158ea <USB_EPStartXfer+0x96>
 80158e8:	e362      	b.n	8015fb0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	6a1a      	ldr	r2, [r3, #32]
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	691b      	ldr	r3, [r3, #16]
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d800      	bhi.n	80158f8 <USB_EPStartXfer+0xa4>
 80158f6:	e309      	b.n	8015f0c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80158f8:	687a      	ldr	r2, [r7, #4]
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	009b      	lsls	r3, r3, #2
 8015900:	18d3      	adds	r3, r2, r3
 8015902:	881b      	ldrh	r3, [r3, #0]
 8015904:	b29a      	uxth	r2, r3
 8015906:	2056      	movs	r0, #86	@ 0x56
 8015908:	183b      	adds	r3, r7, r0
 801590a:	49c8      	ldr	r1, [pc, #800]	@ (8015c2c <USB_EPStartXfer+0x3d8>)
 801590c:	400a      	ands	r2, r1
 801590e:	801a      	strh	r2, [r3, #0]
 8015910:	687a      	ldr	r2, [r7, #4]
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	781b      	ldrb	r3, [r3, #0]
 8015916:	009b      	lsls	r3, r3, #2
 8015918:	18d3      	adds	r3, r2, r3
 801591a:	183a      	adds	r2, r7, r0
 801591c:	8812      	ldrh	r2, [r2, #0]
 801591e:	49c4      	ldr	r1, [pc, #784]	@ (8015c30 <USB_EPStartXfer+0x3dc>)
 8015920:	430a      	orrs	r2, r1
 8015922:	b292      	uxth	r2, r2
 8015924:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	6a1a      	ldr	r2, [r3, #32]
 801592a:	1d7b      	adds	r3, r7, #5
 801592c:	33ff      	adds	r3, #255	@ 0xff
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	1ad2      	subs	r2, r2, r3
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	009b      	lsls	r3, r3, #2
 801593e:	18d3      	adds	r3, r2, r3
 8015940:	881b      	ldrh	r3, [r3, #0]
 8015942:	b29b      	uxth	r3, r3
 8015944:	001a      	movs	r2, r3
 8015946:	2340      	movs	r3, #64	@ 0x40
 8015948:	4013      	ands	r3, r2
 801594a:	d100      	bne.n	801594e <USB_EPStartXfer+0xfa>
 801594c:	e176      	b.n	8015c3c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	633b      	str	r3, [r7, #48]	@ 0x30
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	785b      	ldrb	r3, [r3, #1]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d000      	beq.n	801595c <USB_EPStartXfer+0x108>
 801595a:	e074      	b.n	8015a46 <USB_EPStartXfer+0x1f2>
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2250      	movs	r2, #80	@ 0x50
 8015964:	5a9b      	ldrh	r3, [r3, r2]
 8015966:	b29b      	uxth	r3, r3
 8015968:	001a      	movs	r2, r3
 801596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801596c:	189b      	adds	r3, r3, r2
 801596e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	00da      	lsls	r2, r3, #3
 8015976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015978:	18d3      	adds	r3, r2, r3
 801597a:	4aae      	ldr	r2, [pc, #696]	@ (8015c34 <USB_EPStartXfer+0x3e0>)
 801597c:	4694      	mov	ip, r2
 801597e:	4463      	add	r3, ip
 8015980:	627b      	str	r3, [r7, #36]	@ 0x24
 8015982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	b29b      	uxth	r3, r3
 8015988:	059b      	lsls	r3, r3, #22
 801598a:	0d9b      	lsrs	r3, r3, #22
 801598c:	b29a      	uxth	r2, r3
 801598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015990:	801a      	strh	r2, [r3, #0]
 8015992:	1d7b      	adds	r3, r7, #5
 8015994:	33ff      	adds	r3, #255	@ 0xff
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2b3e      	cmp	r3, #62	@ 0x3e
 801599a:	d924      	bls.n	80159e6 <USB_EPStartXfer+0x192>
 801599c:	1d7b      	adds	r3, r7, #5
 801599e:	33ff      	adds	r3, #255	@ 0xff
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	095b      	lsrs	r3, r3, #5
 80159a4:	1c7a      	adds	r2, r7, #1
 80159a6:	32ff      	adds	r2, #255	@ 0xff
 80159a8:	6013      	str	r3, [r2, #0]
 80159aa:	1d7b      	adds	r3, r7, #5
 80159ac:	33ff      	adds	r3, #255	@ 0xff
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	221f      	movs	r2, #31
 80159b2:	4013      	ands	r3, r2
 80159b4:	d106      	bne.n	80159c4 <USB_EPStartXfer+0x170>
 80159b6:	1c7b      	adds	r3, r7, #1
 80159b8:	33ff      	adds	r3, #255	@ 0xff
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	3b01      	subs	r3, #1
 80159be:	1c7a      	adds	r2, r7, #1
 80159c0:	32ff      	adds	r2, #255	@ 0xff
 80159c2:	6013      	str	r3, [r2, #0]
 80159c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c6:	881b      	ldrh	r3, [r3, #0]
 80159c8:	b29a      	uxth	r2, r3
 80159ca:	1c7b      	adds	r3, r7, #1
 80159cc:	33ff      	adds	r3, #255	@ 0xff
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	029b      	lsls	r3, r3, #10
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	4313      	orrs	r3, r2
 80159d8:	b29b      	uxth	r3, r3
 80159da:	4a97      	ldr	r2, [pc, #604]	@ (8015c38 <USB_EPStartXfer+0x3e4>)
 80159dc:	4313      	orrs	r3, r2
 80159de:	b29a      	uxth	r2, r3
 80159e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e2:	801a      	strh	r2, [r3, #0]
 80159e4:	e04a      	b.n	8015a7c <USB_EPStartXfer+0x228>
 80159e6:	1d7b      	adds	r3, r7, #5
 80159e8:	33ff      	adds	r3, #255	@ 0xff
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d108      	bne.n	8015a02 <USB_EPStartXfer+0x1ae>
 80159f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f2:	881b      	ldrh	r3, [r3, #0]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	4a90      	ldr	r2, [pc, #576]	@ (8015c38 <USB_EPStartXfer+0x3e4>)
 80159f8:	4313      	orrs	r3, r2
 80159fa:	b29a      	uxth	r2, r3
 80159fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fe:	801a      	strh	r2, [r3, #0]
 8015a00:	e03c      	b.n	8015a7c <USB_EPStartXfer+0x228>
 8015a02:	1d7b      	adds	r3, r7, #5
 8015a04:	33ff      	adds	r3, #255	@ 0xff
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	085b      	lsrs	r3, r3, #1
 8015a0a:	1c7a      	adds	r2, r7, #1
 8015a0c:	32ff      	adds	r2, #255	@ 0xff
 8015a0e:	6013      	str	r3, [r2, #0]
 8015a10:	1d7b      	adds	r3, r7, #5
 8015a12:	33ff      	adds	r3, #255	@ 0xff
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2201      	movs	r2, #1
 8015a18:	4013      	ands	r3, r2
 8015a1a:	d006      	beq.n	8015a2a <USB_EPStartXfer+0x1d6>
 8015a1c:	1c7b      	adds	r3, r7, #1
 8015a1e:	33ff      	adds	r3, #255	@ 0xff
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	3301      	adds	r3, #1
 8015a24:	1c7a      	adds	r2, r7, #1
 8015a26:	32ff      	adds	r2, #255	@ 0xff
 8015a28:	6013      	str	r3, [r2, #0]
 8015a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	1c7b      	adds	r3, r7, #1
 8015a32:	33ff      	adds	r3, #255	@ 0xff
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	029b      	lsls	r3, r3, #10
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	4313      	orrs	r3, r2
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a42:	801a      	strh	r2, [r3, #0]
 8015a44:	e01a      	b.n	8015a7c <USB_EPStartXfer+0x228>
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	785b      	ldrb	r3, [r3, #1]
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d116      	bne.n	8015a7c <USB_EPStartXfer+0x228>
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2250      	movs	r2, #80	@ 0x50
 8015a52:	5a9b      	ldrh	r3, [r3, r2]
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	001a      	movs	r2, r3
 8015a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a5a:	189b      	adds	r3, r3, r2
 8015a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	781b      	ldrb	r3, [r3, #0]
 8015a62:	00da      	lsls	r2, r3, #3
 8015a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a66:	18d3      	adds	r3, r2, r3
 8015a68:	4a72      	ldr	r2, [pc, #456]	@ (8015c34 <USB_EPStartXfer+0x3e0>)
 8015a6a:	4694      	mov	ip, r2
 8015a6c:	4463      	add	r3, ip
 8015a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a70:	1d7b      	adds	r3, r7, #5
 8015a72:	33ff      	adds	r3, #255	@ 0xff
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	b29a      	uxth	r2, r3
 8015a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8015a7c:	2076      	movs	r0, #118	@ 0x76
 8015a7e:	183b      	adds	r3, r7, r0
 8015a80:	683a      	ldr	r2, [r7, #0]
 8015a82:	8952      	ldrh	r2, [r2, #10]
 8015a84:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	6959      	ldr	r1, [r3, #20]
 8015a8a:	1d7b      	adds	r3, r7, #5
 8015a8c:	33ff      	adds	r3, #255	@ 0xff
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	b29c      	uxth	r4, r3
 8015a92:	183b      	adds	r3, r7, r0
 8015a94:	881a      	ldrh	r2, [r3, #0]
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	0023      	movs	r3, r4
 8015a9a:	f001 f94d 	bl	8016d38 <USB_WritePMA>
            ep->xfer_buff += len;
 8015a9e:	683b      	ldr	r3, [r7, #0]
 8015aa0:	695a      	ldr	r2, [r3, #20]
 8015aa2:	1d7b      	adds	r3, r7, #5
 8015aa4:	33ff      	adds	r3, #255	@ 0xff
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	18d2      	adds	r2, r2, r3
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	6a1a      	ldr	r2, [r3, #32]
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	691b      	ldr	r3, [r3, #16]
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d908      	bls.n	8015acc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	6a1a      	ldr	r2, [r3, #32]
 8015abe:	1d7b      	adds	r3, r7, #5
 8015ac0:	33ff      	adds	r3, #255	@ 0xff
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	1ad2      	subs	r2, r2, r3
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	621a      	str	r2, [r3, #32]
 8015aca:	e007      	b.n	8015adc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	6a1b      	ldr	r3, [r3, #32]
 8015ad0:	1d7a      	adds	r2, r7, #5
 8015ad2:	32ff      	adds	r2, #255	@ 0xff
 8015ad4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	785b      	ldrb	r3, [r3, #1]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d000      	beq.n	8015ae6 <USB_EPStartXfer+0x292>
 8015ae4:	e070      	b.n	8015bc8 <USB_EPStartXfer+0x374>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	61bb      	str	r3, [r7, #24]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2250      	movs	r2, #80	@ 0x50
 8015aee:	5a9b      	ldrh	r3, [r3, r2]
 8015af0:	b29b      	uxth	r3, r3
 8015af2:	001a      	movs	r2, r3
 8015af4:	69bb      	ldr	r3, [r7, #24]
 8015af6:	189b      	adds	r3, r3, r2
 8015af8:	61bb      	str	r3, [r7, #24]
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	00da      	lsls	r2, r3, #3
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	18d3      	adds	r3, r2, r3
 8015b04:	4a48      	ldr	r2, [pc, #288]	@ (8015c28 <USB_EPStartXfer+0x3d4>)
 8015b06:	4694      	mov	ip, r2
 8015b08:	4463      	add	r3, ip
 8015b0a:	617b      	str	r3, [r7, #20]
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	881b      	ldrh	r3, [r3, #0]
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	059b      	lsls	r3, r3, #22
 8015b14:	0d9b      	lsrs	r3, r3, #22
 8015b16:	b29a      	uxth	r2, r3
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	801a      	strh	r2, [r3, #0]
 8015b1c:	1d7b      	adds	r3, r7, #5
 8015b1e:	33ff      	adds	r3, #255	@ 0xff
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	2b3e      	cmp	r3, #62	@ 0x3e
 8015b24:	d922      	bls.n	8015b6c <USB_EPStartXfer+0x318>
 8015b26:	1d7b      	adds	r3, r7, #5
 8015b28:	33ff      	adds	r3, #255	@ 0xff
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	095b      	lsrs	r3, r3, #5
 8015b2e:	21fc      	movs	r1, #252	@ 0xfc
 8015b30:	187a      	adds	r2, r7, r1
 8015b32:	6013      	str	r3, [r2, #0]
 8015b34:	1d7b      	adds	r3, r7, #5
 8015b36:	33ff      	adds	r3, #255	@ 0xff
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	221f      	movs	r2, #31
 8015b3c:	4013      	ands	r3, r2
 8015b3e:	d104      	bne.n	8015b4a <USB_EPStartXfer+0x2f6>
 8015b40:	187b      	adds	r3, r7, r1
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	3b01      	subs	r3, #1
 8015b46:	187a      	adds	r2, r7, r1
 8015b48:	6013      	str	r3, [r2, #0]
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	b29a      	uxth	r2, r3
 8015b50:	23fc      	movs	r3, #252	@ 0xfc
 8015b52:	18fb      	adds	r3, r7, r3
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	b29b      	uxth	r3, r3
 8015b58:	029b      	lsls	r3, r3, #10
 8015b5a:	b29b      	uxth	r3, r3
 8015b5c:	4313      	orrs	r3, r2
 8015b5e:	b29b      	uxth	r3, r3
 8015b60:	4a35      	ldr	r2, [pc, #212]	@ (8015c38 <USB_EPStartXfer+0x3e4>)
 8015b62:	4313      	orrs	r3, r2
 8015b64:	b29a      	uxth	r2, r3
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	801a      	strh	r2, [r3, #0]
 8015b6a:	e04a      	b.n	8015c02 <USB_EPStartXfer+0x3ae>
 8015b6c:	1d7b      	adds	r3, r7, #5
 8015b6e:	33ff      	adds	r3, #255	@ 0xff
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d108      	bne.n	8015b88 <USB_EPStartXfer+0x334>
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	881b      	ldrh	r3, [r3, #0]
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8015c38 <USB_EPStartXfer+0x3e4>)
 8015b7e:	4313      	orrs	r3, r2
 8015b80:	b29a      	uxth	r2, r3
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	801a      	strh	r2, [r3, #0]
 8015b86:	e03c      	b.n	8015c02 <USB_EPStartXfer+0x3ae>
 8015b88:	1d7b      	adds	r3, r7, #5
 8015b8a:	33ff      	adds	r3, #255	@ 0xff
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	085b      	lsrs	r3, r3, #1
 8015b90:	21fc      	movs	r1, #252	@ 0xfc
 8015b92:	187a      	adds	r2, r7, r1
 8015b94:	6013      	str	r3, [r2, #0]
 8015b96:	1d7b      	adds	r3, r7, #5
 8015b98:	33ff      	adds	r3, #255	@ 0xff
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	4013      	ands	r3, r2
 8015ba0:	d004      	beq.n	8015bac <USB_EPStartXfer+0x358>
 8015ba2:	187b      	adds	r3, r7, r1
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	187a      	adds	r2, r7, r1
 8015baa:	6013      	str	r3, [r2, #0]
 8015bac:	697b      	ldr	r3, [r7, #20]
 8015bae:	881b      	ldrh	r3, [r3, #0]
 8015bb0:	b29a      	uxth	r2, r3
 8015bb2:	23fc      	movs	r3, #252	@ 0xfc
 8015bb4:	18fb      	adds	r3, r7, r3
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	029b      	lsls	r3, r3, #10
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	4313      	orrs	r3, r2
 8015bc0:	b29a      	uxth	r2, r3
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	801a      	strh	r2, [r3, #0]
 8015bc6:	e01c      	b.n	8015c02 <USB_EPStartXfer+0x3ae>
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	785b      	ldrb	r3, [r3, #1]
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d118      	bne.n	8015c02 <USB_EPStartXfer+0x3ae>
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	623b      	str	r3, [r7, #32]
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2250      	movs	r2, #80	@ 0x50
 8015bd8:	5a9b      	ldrh	r3, [r3, r2]
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	001a      	movs	r2, r3
 8015bde:	6a3b      	ldr	r3, [r7, #32]
 8015be0:	189b      	adds	r3, r3, r2
 8015be2:	623b      	str	r3, [r7, #32]
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	00da      	lsls	r2, r3, #3
 8015bea:	6a3b      	ldr	r3, [r7, #32]
 8015bec:	18d3      	adds	r3, r2, r3
 8015bee:	4a0e      	ldr	r2, [pc, #56]	@ (8015c28 <USB_EPStartXfer+0x3d4>)
 8015bf0:	4694      	mov	ip, r2
 8015bf2:	4463      	add	r3, ip
 8015bf4:	61fb      	str	r3, [r7, #28]
 8015bf6:	1d7b      	adds	r3, r7, #5
 8015bf8:	33ff      	adds	r3, #255	@ 0xff
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	b29a      	uxth	r2, r3
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8015c02:	2076      	movs	r0, #118	@ 0x76
 8015c04:	183b      	adds	r3, r7, r0
 8015c06:	683a      	ldr	r2, [r7, #0]
 8015c08:	8912      	ldrh	r2, [r2, #8]
 8015c0a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	6959      	ldr	r1, [r3, #20]
 8015c10:	1d7b      	adds	r3, r7, #5
 8015c12:	33ff      	adds	r3, #255	@ 0xff
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	b29c      	uxth	r4, r3
 8015c18:	183b      	adds	r3, r7, r0
 8015c1a:	881a      	ldrh	r2, [r3, #0]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	0023      	movs	r3, r4
 8015c20:	f001 f88a 	bl	8016d38 <USB_WritePMA>
 8015c24:	e329      	b.n	801627a <USB_EPStartXfer+0xa26>
 8015c26:	46c0      	nop			@ (mov r8, r8)
 8015c28:	00000402 	.word	0x00000402
 8015c2c:	ffff8f8f 	.word	0xffff8f8f
 8015c30:	ffff8180 	.word	0xffff8180
 8015c34:	00000406 	.word	0x00000406
 8015c38:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	785b      	ldrb	r3, [r3, #1]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d000      	beq.n	8015c46 <USB_EPStartXfer+0x3f2>
 8015c44:	e070      	b.n	8015d28 <USB_EPStartXfer+0x4d4>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2250      	movs	r2, #80	@ 0x50
 8015c4e:	5a9b      	ldrh	r3, [r3, r2]
 8015c50:	b29b      	uxth	r3, r3
 8015c52:	001a      	movs	r2, r3
 8015c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015c56:	189b      	adds	r3, r3, r2
 8015c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	00da      	lsls	r2, r3, #3
 8015c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015c62:	18d3      	adds	r3, r2, r3
 8015c64:	4acd      	ldr	r2, [pc, #820]	@ (8015f9c <USB_EPStartXfer+0x748>)
 8015c66:	4694      	mov	ip, r2
 8015c68:	4463      	add	r3, ip
 8015c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8015c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c6e:	881b      	ldrh	r3, [r3, #0]
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	059b      	lsls	r3, r3, #22
 8015c74:	0d9b      	lsrs	r3, r3, #22
 8015c76:	b29a      	uxth	r2, r3
 8015c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c7a:	801a      	strh	r2, [r3, #0]
 8015c7c:	1d7b      	adds	r3, r7, #5
 8015c7e:	33ff      	adds	r3, #255	@ 0xff
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b3e      	cmp	r3, #62	@ 0x3e
 8015c84:	d922      	bls.n	8015ccc <USB_EPStartXfer+0x478>
 8015c86:	1d7b      	adds	r3, r7, #5
 8015c88:	33ff      	adds	r3, #255	@ 0xff
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	095b      	lsrs	r3, r3, #5
 8015c8e:	21f8      	movs	r1, #248	@ 0xf8
 8015c90:	187a      	adds	r2, r7, r1
 8015c92:	6013      	str	r3, [r2, #0]
 8015c94:	1d7b      	adds	r3, r7, #5
 8015c96:	33ff      	adds	r3, #255	@ 0xff
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	221f      	movs	r2, #31
 8015c9c:	4013      	ands	r3, r2
 8015c9e:	d104      	bne.n	8015caa <USB_EPStartXfer+0x456>
 8015ca0:	187b      	adds	r3, r7, r1
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	187a      	adds	r2, r7, r1
 8015ca8:	6013      	str	r3, [r2, #0]
 8015caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cac:	881b      	ldrh	r3, [r3, #0]
 8015cae:	b29a      	uxth	r2, r3
 8015cb0:	23f8      	movs	r3, #248	@ 0xf8
 8015cb2:	18fb      	adds	r3, r7, r3
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	b29b      	uxth	r3, r3
 8015cb8:	029b      	lsls	r3, r3, #10
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	4313      	orrs	r3, r2
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	4ab7      	ldr	r2, [pc, #732]	@ (8015fa0 <USB_EPStartXfer+0x74c>)
 8015cc2:	4313      	orrs	r3, r2
 8015cc4:	b29a      	uxth	r2, r3
 8015cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cc8:	801a      	strh	r2, [r3, #0]
 8015cca:	e04a      	b.n	8015d62 <USB_EPStartXfer+0x50e>
 8015ccc:	1d7b      	adds	r3, r7, #5
 8015cce:	33ff      	adds	r3, #255	@ 0xff
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d108      	bne.n	8015ce8 <USB_EPStartXfer+0x494>
 8015cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	4ab0      	ldr	r2, [pc, #704]	@ (8015fa0 <USB_EPStartXfer+0x74c>)
 8015cde:	4313      	orrs	r3, r2
 8015ce0:	b29a      	uxth	r2, r3
 8015ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ce4:	801a      	strh	r2, [r3, #0]
 8015ce6:	e03c      	b.n	8015d62 <USB_EPStartXfer+0x50e>
 8015ce8:	1d7b      	adds	r3, r7, #5
 8015cea:	33ff      	adds	r3, #255	@ 0xff
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	085b      	lsrs	r3, r3, #1
 8015cf0:	21f8      	movs	r1, #248	@ 0xf8
 8015cf2:	187a      	adds	r2, r7, r1
 8015cf4:	6013      	str	r3, [r2, #0]
 8015cf6:	1d7b      	adds	r3, r7, #5
 8015cf8:	33ff      	adds	r3, #255	@ 0xff
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2201      	movs	r2, #1
 8015cfe:	4013      	ands	r3, r2
 8015d00:	d004      	beq.n	8015d0c <USB_EPStartXfer+0x4b8>
 8015d02:	187b      	adds	r3, r7, r1
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	3301      	adds	r3, #1
 8015d08:	187a      	adds	r2, r7, r1
 8015d0a:	6013      	str	r3, [r2, #0]
 8015d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d0e:	881b      	ldrh	r3, [r3, #0]
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	23f8      	movs	r3, #248	@ 0xf8
 8015d14:	18fb      	adds	r3, r7, r3
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	029b      	lsls	r3, r3, #10
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	4313      	orrs	r3, r2
 8015d20:	b29a      	uxth	r2, r3
 8015d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d24:	801a      	strh	r2, [r3, #0]
 8015d26:	e01c      	b.n	8015d62 <USB_EPStartXfer+0x50e>
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	785b      	ldrb	r3, [r3, #1]
 8015d2c:	2b01      	cmp	r3, #1
 8015d2e:	d118      	bne.n	8015d62 <USB_EPStartXfer+0x50e>
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2250      	movs	r2, #80	@ 0x50
 8015d38:	5a9b      	ldrh	r3, [r3, r2]
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	001a      	movs	r2, r3
 8015d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015d40:	189b      	adds	r3, r3, r2
 8015d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	00da      	lsls	r2, r3, #3
 8015d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015d4c:	18d3      	adds	r3, r2, r3
 8015d4e:	4a93      	ldr	r2, [pc, #588]	@ (8015f9c <USB_EPStartXfer+0x748>)
 8015d50:	4694      	mov	ip, r2
 8015d52:	4463      	add	r3, ip
 8015d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015d56:	1d7b      	adds	r3, r7, #5
 8015d58:	33ff      	adds	r3, #255	@ 0xff
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	b29a      	uxth	r2, r3
 8015d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015d60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8015d62:	2076      	movs	r0, #118	@ 0x76
 8015d64:	183b      	adds	r3, r7, r0
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	8912      	ldrh	r2, [r2, #8]
 8015d6a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	6959      	ldr	r1, [r3, #20]
 8015d70:	1d7b      	adds	r3, r7, #5
 8015d72:	33ff      	adds	r3, #255	@ 0xff
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	b29c      	uxth	r4, r3
 8015d78:	183b      	adds	r3, r7, r0
 8015d7a:	881a      	ldrh	r2, [r3, #0]
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	0023      	movs	r3, r4
 8015d80:	f000 ffda 	bl	8016d38 <USB_WritePMA>
            ep->xfer_buff += len;
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	695a      	ldr	r2, [r3, #20]
 8015d88:	1d7b      	adds	r3, r7, #5
 8015d8a:	33ff      	adds	r3, #255	@ 0xff
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	18d2      	adds	r2, r2, r3
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	6a1a      	ldr	r2, [r3, #32]
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	691b      	ldr	r3, [r3, #16]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d908      	bls.n	8015db2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	6a1a      	ldr	r2, [r3, #32]
 8015da4:	1d7b      	adds	r3, r7, #5
 8015da6:	33ff      	adds	r3, #255	@ 0xff
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	1ad2      	subs	r2, r2, r3
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	621a      	str	r2, [r3, #32]
 8015db0:	e007      	b.n	8015dc2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	6a1b      	ldr	r3, [r3, #32]
 8015db6:	1d7a      	adds	r2, r7, #5
 8015db8:	32ff      	adds	r2, #255	@ 0xff
 8015dba:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	785b      	ldrb	r3, [r3, #1]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d000      	beq.n	8015dd0 <USB_EPStartXfer+0x57c>
 8015dce:	e070      	b.n	8015eb2 <USB_EPStartXfer+0x65e>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2250      	movs	r2, #80	@ 0x50
 8015dd8:	5a9b      	ldrh	r3, [r3, r2]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	001a      	movs	r2, r3
 8015dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015de0:	189b      	adds	r3, r3, r2
 8015de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	00da      	lsls	r2, r3, #3
 8015dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dec:	18d3      	adds	r3, r2, r3
 8015dee:	4a6d      	ldr	r2, [pc, #436]	@ (8015fa4 <USB_EPStartXfer+0x750>)
 8015df0:	4694      	mov	ip, r2
 8015df2:	4463      	add	r3, ip
 8015df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8015df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015df8:	881b      	ldrh	r3, [r3, #0]
 8015dfa:	b29b      	uxth	r3, r3
 8015dfc:	059b      	lsls	r3, r3, #22
 8015dfe:	0d9b      	lsrs	r3, r3, #22
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e04:	801a      	strh	r2, [r3, #0]
 8015e06:	1d7b      	adds	r3, r7, #5
 8015e08:	33ff      	adds	r3, #255	@ 0xff
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8015e0e:	d922      	bls.n	8015e56 <USB_EPStartXfer+0x602>
 8015e10:	1d7b      	adds	r3, r7, #5
 8015e12:	33ff      	adds	r3, #255	@ 0xff
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	095b      	lsrs	r3, r3, #5
 8015e18:	21f4      	movs	r1, #244	@ 0xf4
 8015e1a:	187a      	adds	r2, r7, r1
 8015e1c:	6013      	str	r3, [r2, #0]
 8015e1e:	1d7b      	adds	r3, r7, #5
 8015e20:	33ff      	adds	r3, #255	@ 0xff
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	221f      	movs	r2, #31
 8015e26:	4013      	ands	r3, r2
 8015e28:	d104      	bne.n	8015e34 <USB_EPStartXfer+0x5e0>
 8015e2a:	187b      	adds	r3, r7, r1
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	3b01      	subs	r3, #1
 8015e30:	187a      	adds	r2, r7, r1
 8015e32:	6013      	str	r3, [r2, #0]
 8015e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e36:	881b      	ldrh	r3, [r3, #0]
 8015e38:	b29a      	uxth	r2, r3
 8015e3a:	23f4      	movs	r3, #244	@ 0xf4
 8015e3c:	18fb      	adds	r3, r7, r3
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	b29b      	uxth	r3, r3
 8015e42:	029b      	lsls	r3, r3, #10
 8015e44:	b29b      	uxth	r3, r3
 8015e46:	4313      	orrs	r3, r2
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	4a55      	ldr	r2, [pc, #340]	@ (8015fa0 <USB_EPStartXfer+0x74c>)
 8015e4c:	4313      	orrs	r3, r2
 8015e4e:	b29a      	uxth	r2, r3
 8015e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e52:	801a      	strh	r2, [r3, #0]
 8015e54:	e048      	b.n	8015ee8 <USB_EPStartXfer+0x694>
 8015e56:	1d7b      	adds	r3, r7, #5
 8015e58:	33ff      	adds	r3, #255	@ 0xff
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d108      	bne.n	8015e72 <USB_EPStartXfer+0x61e>
 8015e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e62:	881b      	ldrh	r3, [r3, #0]
 8015e64:	b29b      	uxth	r3, r3
 8015e66:	4a4e      	ldr	r2, [pc, #312]	@ (8015fa0 <USB_EPStartXfer+0x74c>)
 8015e68:	4313      	orrs	r3, r2
 8015e6a:	b29a      	uxth	r2, r3
 8015e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e6e:	801a      	strh	r2, [r3, #0]
 8015e70:	e03a      	b.n	8015ee8 <USB_EPStartXfer+0x694>
 8015e72:	1d7b      	adds	r3, r7, #5
 8015e74:	33ff      	adds	r3, #255	@ 0xff
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	085b      	lsrs	r3, r3, #1
 8015e7a:	21f4      	movs	r1, #244	@ 0xf4
 8015e7c:	187a      	adds	r2, r7, r1
 8015e7e:	6013      	str	r3, [r2, #0]
 8015e80:	1d7b      	adds	r3, r7, #5
 8015e82:	33ff      	adds	r3, #255	@ 0xff
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	2201      	movs	r2, #1
 8015e88:	4013      	ands	r3, r2
 8015e8a:	d004      	beq.n	8015e96 <USB_EPStartXfer+0x642>
 8015e8c:	187b      	adds	r3, r7, r1
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	3301      	adds	r3, #1
 8015e92:	187a      	adds	r2, r7, r1
 8015e94:	6013      	str	r3, [r2, #0]
 8015e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e98:	881b      	ldrh	r3, [r3, #0]
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	23f4      	movs	r3, #244	@ 0xf4
 8015e9e:	18fb      	adds	r3, r7, r3
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	029b      	lsls	r3, r3, #10
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	4313      	orrs	r3, r2
 8015eaa:	b29a      	uxth	r2, r3
 8015eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015eae:	801a      	strh	r2, [r3, #0]
 8015eb0:	e01a      	b.n	8015ee8 <USB_EPStartXfer+0x694>
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	785b      	ldrb	r3, [r3, #1]
 8015eb6:	2b01      	cmp	r3, #1
 8015eb8:	d116      	bne.n	8015ee8 <USB_EPStartXfer+0x694>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2250      	movs	r2, #80	@ 0x50
 8015ebe:	5a9b      	ldrh	r3, [r3, r2]
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	001a      	movs	r2, r3
 8015ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ec6:	189b      	adds	r3, r3, r2
 8015ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	00da      	lsls	r2, r3, #3
 8015ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ed2:	18d3      	adds	r3, r2, r3
 8015ed4:	4a33      	ldr	r2, [pc, #204]	@ (8015fa4 <USB_EPStartXfer+0x750>)
 8015ed6:	4694      	mov	ip, r2
 8015ed8:	4463      	add	r3, ip
 8015eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015edc:	1d7b      	adds	r3, r7, #5
 8015ede:	33ff      	adds	r3, #255	@ 0xff
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	b29a      	uxth	r2, r3
 8015ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8015ee8:	2076      	movs	r0, #118	@ 0x76
 8015eea:	183b      	adds	r3, r7, r0
 8015eec:	683a      	ldr	r2, [r7, #0]
 8015eee:	8952      	ldrh	r2, [r2, #10]
 8015ef0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	6959      	ldr	r1, [r3, #20]
 8015ef6:	1d7b      	adds	r3, r7, #5
 8015ef8:	33ff      	adds	r3, #255	@ 0xff
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	b29c      	uxth	r4, r3
 8015efe:	183b      	adds	r3, r7, r0
 8015f00:	881a      	ldrh	r2, [r3, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	0023      	movs	r3, r4
 8015f06:	f000 ff17 	bl	8016d38 <USB_WritePMA>
 8015f0a:	e1b6      	b.n	801627a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	6a1b      	ldr	r3, [r3, #32]
 8015f10:	1d7a      	adds	r2, r7, #5
 8015f12:	32ff      	adds	r2, #255	@ 0xff
 8015f14:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8015f16:	687a      	ldr	r2, [r7, #4]
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	781b      	ldrb	r3, [r3, #0]
 8015f1c:	009b      	lsls	r3, r3, #2
 8015f1e:	18d3      	adds	r3, r2, r3
 8015f20:	881b      	ldrh	r3, [r3, #0]
 8015f22:	b29a      	uxth	r2, r3
 8015f24:	2062      	movs	r0, #98	@ 0x62
 8015f26:	183b      	adds	r3, r7, r0
 8015f28:	491f      	ldr	r1, [pc, #124]	@ (8015fa8 <USB_EPStartXfer+0x754>)
 8015f2a:	400a      	ands	r2, r1
 8015f2c:	801a      	strh	r2, [r3, #0]
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	009b      	lsls	r3, r3, #2
 8015f36:	18d3      	adds	r3, r2, r3
 8015f38:	183a      	adds	r2, r7, r0
 8015f3a:	8812      	ldrh	r2, [r2, #0]
 8015f3c:	491b      	ldr	r1, [pc, #108]	@ (8015fac <USB_EPStartXfer+0x758>)
 8015f3e:	430a      	orrs	r2, r1
 8015f40:	b292      	uxth	r2, r2
 8015f42:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2250      	movs	r2, #80	@ 0x50
 8015f4c:	5a9b      	ldrh	r3, [r3, r2]
 8015f4e:	b29b      	uxth	r3, r3
 8015f50:	001a      	movs	r2, r3
 8015f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015f54:	189b      	adds	r3, r3, r2
 8015f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	00da      	lsls	r2, r3, #3
 8015f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015f60:	18d3      	adds	r3, r2, r3
 8015f62:	4a0e      	ldr	r2, [pc, #56]	@ (8015f9c <USB_EPStartXfer+0x748>)
 8015f64:	4694      	mov	ip, r2
 8015f66:	4463      	add	r3, ip
 8015f68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015f6a:	1d7b      	adds	r3, r7, #5
 8015f6c:	33ff      	adds	r3, #255	@ 0xff
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015f74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8015f76:	2076      	movs	r0, #118	@ 0x76
 8015f78:	183b      	adds	r3, r7, r0
 8015f7a:	683a      	ldr	r2, [r7, #0]
 8015f7c:	8912      	ldrh	r2, [r2, #8]
 8015f7e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	6959      	ldr	r1, [r3, #20]
 8015f84:	1d7b      	adds	r3, r7, #5
 8015f86:	33ff      	adds	r3, #255	@ 0xff
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	b29c      	uxth	r4, r3
 8015f8c:	183b      	adds	r3, r7, r0
 8015f8e:	881a      	ldrh	r2, [r3, #0]
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	0023      	movs	r3, r4
 8015f94:	f000 fed0 	bl	8016d38 <USB_WritePMA>
 8015f98:	e16f      	b.n	801627a <USB_EPStartXfer+0xa26>
 8015f9a:	46c0      	nop			@ (mov r8, r8)
 8015f9c:	00000402 	.word	0x00000402
 8015fa0:	ffff8000 	.word	0xffff8000
 8015fa4:	00000406 	.word	0x00000406
 8015fa8:	ffff8e8f 	.word	0xffff8e8f
 8015fac:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	6a1a      	ldr	r2, [r3, #32]
 8015fb4:	1d7b      	adds	r3, r7, #5
 8015fb6:	33ff      	adds	r3, #255	@ 0xff
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	1ad2      	subs	r2, r2, r3
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	683b      	ldr	r3, [r7, #0]
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	18d3      	adds	r3, r2, r3
 8015fca:	881b      	ldrh	r3, [r3, #0]
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	001a      	movs	r2, r3
 8015fd0:	2340      	movs	r3, #64	@ 0x40
 8015fd2:	4013      	ands	r3, r2
 8015fd4:	d100      	bne.n	8015fd8 <USB_EPStartXfer+0x784>
 8015fd6:	e0a4      	b.n	8016122 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	673b      	str	r3, [r7, #112]	@ 0x70
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	785b      	ldrb	r3, [r3, #1]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d000      	beq.n	8015fe6 <USB_EPStartXfer+0x792>
 8015fe4:	e070      	b.n	80160c8 <USB_EPStartXfer+0x874>
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2250      	movs	r2, #80	@ 0x50
 8015fee:	5a9b      	ldrh	r3, [r3, r2]
 8015ff0:	b29b      	uxth	r3, r3
 8015ff2:	001a      	movs	r2, r3
 8015ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015ff6:	189b      	adds	r3, r3, r2
 8015ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	00da      	lsls	r2, r3, #3
 8016000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016002:	18d3      	adds	r3, r2, r3
 8016004:	4abc      	ldr	r2, [pc, #752]	@ (80162f8 <USB_EPStartXfer+0xaa4>)
 8016006:	4694      	mov	ip, r2
 8016008:	4463      	add	r3, ip
 801600a:	667b      	str	r3, [r7, #100]	@ 0x64
 801600c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801600e:	881b      	ldrh	r3, [r3, #0]
 8016010:	b29b      	uxth	r3, r3
 8016012:	059b      	lsls	r3, r3, #22
 8016014:	0d9b      	lsrs	r3, r3, #22
 8016016:	b29a      	uxth	r2, r3
 8016018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801601a:	801a      	strh	r2, [r3, #0]
 801601c:	1d7b      	adds	r3, r7, #5
 801601e:	33ff      	adds	r3, #255	@ 0xff
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	2b3e      	cmp	r3, #62	@ 0x3e
 8016024:	d922      	bls.n	801606c <USB_EPStartXfer+0x818>
 8016026:	1d7b      	adds	r3, r7, #5
 8016028:	33ff      	adds	r3, #255	@ 0xff
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	095b      	lsrs	r3, r3, #5
 801602e:	21f0      	movs	r1, #240	@ 0xf0
 8016030:	187a      	adds	r2, r7, r1
 8016032:	6013      	str	r3, [r2, #0]
 8016034:	1d7b      	adds	r3, r7, #5
 8016036:	33ff      	adds	r3, #255	@ 0xff
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	221f      	movs	r2, #31
 801603c:	4013      	ands	r3, r2
 801603e:	d104      	bne.n	801604a <USB_EPStartXfer+0x7f6>
 8016040:	187b      	adds	r3, r7, r1
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	3b01      	subs	r3, #1
 8016046:	187a      	adds	r2, r7, r1
 8016048:	6013      	str	r3, [r2, #0]
 801604a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801604c:	881b      	ldrh	r3, [r3, #0]
 801604e:	b29a      	uxth	r2, r3
 8016050:	23f0      	movs	r3, #240	@ 0xf0
 8016052:	18fb      	adds	r3, r7, r3
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	b29b      	uxth	r3, r3
 8016058:	029b      	lsls	r3, r3, #10
 801605a:	b29b      	uxth	r3, r3
 801605c:	4313      	orrs	r3, r2
 801605e:	b29b      	uxth	r3, r3
 8016060:	4aa6      	ldr	r2, [pc, #664]	@ (80162fc <USB_EPStartXfer+0xaa8>)
 8016062:	4313      	orrs	r3, r2
 8016064:	b29a      	uxth	r2, r3
 8016066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016068:	801a      	strh	r2, [r3, #0]
 801606a:	e048      	b.n	80160fe <USB_EPStartXfer+0x8aa>
 801606c:	1d7b      	adds	r3, r7, #5
 801606e:	33ff      	adds	r3, #255	@ 0xff
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d108      	bne.n	8016088 <USB_EPStartXfer+0x834>
 8016076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016078:	881b      	ldrh	r3, [r3, #0]
 801607a:	b29b      	uxth	r3, r3
 801607c:	4a9f      	ldr	r2, [pc, #636]	@ (80162fc <USB_EPStartXfer+0xaa8>)
 801607e:	4313      	orrs	r3, r2
 8016080:	b29a      	uxth	r2, r3
 8016082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016084:	801a      	strh	r2, [r3, #0]
 8016086:	e03a      	b.n	80160fe <USB_EPStartXfer+0x8aa>
 8016088:	1d7b      	adds	r3, r7, #5
 801608a:	33ff      	adds	r3, #255	@ 0xff
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	085b      	lsrs	r3, r3, #1
 8016090:	21f0      	movs	r1, #240	@ 0xf0
 8016092:	187a      	adds	r2, r7, r1
 8016094:	6013      	str	r3, [r2, #0]
 8016096:	1d7b      	adds	r3, r7, #5
 8016098:	33ff      	adds	r3, #255	@ 0xff
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	2201      	movs	r2, #1
 801609e:	4013      	ands	r3, r2
 80160a0:	d004      	beq.n	80160ac <USB_EPStartXfer+0x858>
 80160a2:	187b      	adds	r3, r7, r1
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	3301      	adds	r3, #1
 80160a8:	187a      	adds	r2, r7, r1
 80160aa:	6013      	str	r3, [r2, #0]
 80160ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80160ae:	881b      	ldrh	r3, [r3, #0]
 80160b0:	b29a      	uxth	r2, r3
 80160b2:	23f0      	movs	r3, #240	@ 0xf0
 80160b4:	18fb      	adds	r3, r7, r3
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	029b      	lsls	r3, r3, #10
 80160bc:	b29b      	uxth	r3, r3
 80160be:	4313      	orrs	r3, r2
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80160c4:	801a      	strh	r2, [r3, #0]
 80160c6:	e01a      	b.n	80160fe <USB_EPStartXfer+0x8aa>
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	785b      	ldrb	r3, [r3, #1]
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	d116      	bne.n	80160fe <USB_EPStartXfer+0x8aa>
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2250      	movs	r2, #80	@ 0x50
 80160d4:	5a9b      	ldrh	r3, [r3, r2]
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	001a      	movs	r2, r3
 80160da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80160dc:	189b      	adds	r3, r3, r2
 80160de:	673b      	str	r3, [r7, #112]	@ 0x70
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	00da      	lsls	r2, r3, #3
 80160e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80160e8:	18d3      	adds	r3, r2, r3
 80160ea:	4a83      	ldr	r2, [pc, #524]	@ (80162f8 <USB_EPStartXfer+0xaa4>)
 80160ec:	4694      	mov	ip, r2
 80160ee:	4463      	add	r3, ip
 80160f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80160f2:	1d7b      	adds	r3, r7, #5
 80160f4:	33ff      	adds	r3, #255	@ 0xff
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	b29a      	uxth	r2, r3
 80160fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80160fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80160fe:	2076      	movs	r0, #118	@ 0x76
 8016100:	183b      	adds	r3, r7, r0
 8016102:	683a      	ldr	r2, [r7, #0]
 8016104:	8952      	ldrh	r2, [r2, #10]
 8016106:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	6959      	ldr	r1, [r3, #20]
 801610c:	1d7b      	adds	r3, r7, #5
 801610e:	33ff      	adds	r3, #255	@ 0xff
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	b29c      	uxth	r4, r3
 8016114:	183b      	adds	r3, r7, r0
 8016116:	881a      	ldrh	r2, [r3, #0]
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	0023      	movs	r3, r4
 801611c:	f000 fe0c 	bl	8016d38 <USB_WritePMA>
 8016120:	e0ab      	b.n	801627a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016122:	683b      	ldr	r3, [r7, #0]
 8016124:	785b      	ldrb	r3, [r3, #1]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d000      	beq.n	801612c <USB_EPStartXfer+0x8d8>
 801612a:	e070      	b.n	801620e <USB_EPStartXfer+0x9ba>
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2250      	movs	r2, #80	@ 0x50
 8016134:	5a9b      	ldrh	r3, [r3, r2]
 8016136:	b29b      	uxth	r3, r3
 8016138:	001a      	movs	r2, r3
 801613a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801613c:	189b      	adds	r3, r3, r2
 801613e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	00da      	lsls	r2, r3, #3
 8016146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016148:	18d3      	adds	r3, r2, r3
 801614a:	4a6d      	ldr	r2, [pc, #436]	@ (8016300 <USB_EPStartXfer+0xaac>)
 801614c:	4694      	mov	ip, r2
 801614e:	4463      	add	r3, ip
 8016150:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016154:	881b      	ldrh	r3, [r3, #0]
 8016156:	b29b      	uxth	r3, r3
 8016158:	059b      	lsls	r3, r3, #22
 801615a:	0d9b      	lsrs	r3, r3, #22
 801615c:	b29a      	uxth	r2, r3
 801615e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016160:	801a      	strh	r2, [r3, #0]
 8016162:	1d7b      	adds	r3, r7, #5
 8016164:	33ff      	adds	r3, #255	@ 0xff
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	2b3e      	cmp	r3, #62	@ 0x3e
 801616a:	d922      	bls.n	80161b2 <USB_EPStartXfer+0x95e>
 801616c:	1d7b      	adds	r3, r7, #5
 801616e:	33ff      	adds	r3, #255	@ 0xff
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	095b      	lsrs	r3, r3, #5
 8016174:	21ec      	movs	r1, #236	@ 0xec
 8016176:	187a      	adds	r2, r7, r1
 8016178:	6013      	str	r3, [r2, #0]
 801617a:	1d7b      	adds	r3, r7, #5
 801617c:	33ff      	adds	r3, #255	@ 0xff
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	221f      	movs	r2, #31
 8016182:	4013      	ands	r3, r2
 8016184:	d104      	bne.n	8016190 <USB_EPStartXfer+0x93c>
 8016186:	187b      	adds	r3, r7, r1
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	3b01      	subs	r3, #1
 801618c:	187a      	adds	r2, r7, r1
 801618e:	6013      	str	r3, [r2, #0]
 8016190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016192:	881b      	ldrh	r3, [r3, #0]
 8016194:	b29a      	uxth	r2, r3
 8016196:	23ec      	movs	r3, #236	@ 0xec
 8016198:	18fb      	adds	r3, r7, r3
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	b29b      	uxth	r3, r3
 801619e:	029b      	lsls	r3, r3, #10
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	4313      	orrs	r3, r2
 80161a4:	b29b      	uxth	r3, r3
 80161a6:	4a55      	ldr	r2, [pc, #340]	@ (80162fc <USB_EPStartXfer+0xaa8>)
 80161a8:	4313      	orrs	r3, r2
 80161aa:	b29a      	uxth	r2, r3
 80161ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80161ae:	801a      	strh	r2, [r3, #0]
 80161b0:	e052      	b.n	8016258 <USB_EPStartXfer+0xa04>
 80161b2:	1d7b      	adds	r3, r7, #5
 80161b4:	33ff      	adds	r3, #255	@ 0xff
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d108      	bne.n	80161ce <USB_EPStartXfer+0x97a>
 80161bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80161be:	881b      	ldrh	r3, [r3, #0]
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	4a4e      	ldr	r2, [pc, #312]	@ (80162fc <USB_EPStartXfer+0xaa8>)
 80161c4:	4313      	orrs	r3, r2
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80161ca:	801a      	strh	r2, [r3, #0]
 80161cc:	e044      	b.n	8016258 <USB_EPStartXfer+0xa04>
 80161ce:	1d7b      	adds	r3, r7, #5
 80161d0:	33ff      	adds	r3, #255	@ 0xff
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	085b      	lsrs	r3, r3, #1
 80161d6:	21ec      	movs	r1, #236	@ 0xec
 80161d8:	187a      	adds	r2, r7, r1
 80161da:	6013      	str	r3, [r2, #0]
 80161dc:	1d7b      	adds	r3, r7, #5
 80161de:	33ff      	adds	r3, #255	@ 0xff
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2201      	movs	r2, #1
 80161e4:	4013      	ands	r3, r2
 80161e6:	d004      	beq.n	80161f2 <USB_EPStartXfer+0x99e>
 80161e8:	187b      	adds	r3, r7, r1
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	3301      	adds	r3, #1
 80161ee:	187a      	adds	r2, r7, r1
 80161f0:	6013      	str	r3, [r2, #0]
 80161f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80161f4:	881b      	ldrh	r3, [r3, #0]
 80161f6:	b29a      	uxth	r2, r3
 80161f8:	23ec      	movs	r3, #236	@ 0xec
 80161fa:	18fb      	adds	r3, r7, r3
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	b29b      	uxth	r3, r3
 8016200:	029b      	lsls	r3, r3, #10
 8016202:	b29b      	uxth	r3, r3
 8016204:	4313      	orrs	r3, r2
 8016206:	b29a      	uxth	r2, r3
 8016208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801620a:	801a      	strh	r2, [r3, #0]
 801620c:	e024      	b.n	8016258 <USB_EPStartXfer+0xa04>
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	785b      	ldrb	r3, [r3, #1]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d120      	bne.n	8016258 <USB_EPStartXfer+0xa04>
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2184      	movs	r1, #132	@ 0x84
 801621a:	187a      	adds	r2, r7, r1
 801621c:	6013      	str	r3, [r2, #0]
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2250      	movs	r2, #80	@ 0x50
 8016222:	5a9b      	ldrh	r3, [r3, r2]
 8016224:	b29b      	uxth	r3, r3
 8016226:	001a      	movs	r2, r3
 8016228:	187b      	adds	r3, r7, r1
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	189b      	adds	r3, r3, r2
 801622e:	187a      	adds	r2, r7, r1
 8016230:	6013      	str	r3, [r2, #0]
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	00da      	lsls	r2, r3, #3
 8016238:	187b      	adds	r3, r7, r1
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	18d3      	adds	r3, r2, r3
 801623e:	4a30      	ldr	r2, [pc, #192]	@ (8016300 <USB_EPStartXfer+0xaac>)
 8016240:	4694      	mov	ip, r2
 8016242:	4463      	add	r3, ip
 8016244:	2180      	movs	r1, #128	@ 0x80
 8016246:	187a      	adds	r2, r7, r1
 8016248:	6013      	str	r3, [r2, #0]
 801624a:	1d7b      	adds	r3, r7, #5
 801624c:	33ff      	adds	r3, #255	@ 0xff
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	b29a      	uxth	r2, r3
 8016252:	187b      	adds	r3, r7, r1
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8016258:	2076      	movs	r0, #118	@ 0x76
 801625a:	183b      	adds	r3, r7, r0
 801625c:	683a      	ldr	r2, [r7, #0]
 801625e:	8912      	ldrh	r2, [r2, #8]
 8016260:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	6959      	ldr	r1, [r3, #20]
 8016266:	1d7b      	adds	r3, r7, #5
 8016268:	33ff      	adds	r3, #255	@ 0xff
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	b29c      	uxth	r4, r3
 801626e:	183b      	adds	r3, r7, r0
 8016270:	881a      	ldrh	r2, [r3, #0]
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	0023      	movs	r3, r4
 8016276:	f000 fd5f 	bl	8016d38 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801627a:	687a      	ldr	r2, [r7, #4]
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	009b      	lsls	r3, r3, #2
 8016282:	18d3      	adds	r3, r2, r3
 8016284:	881b      	ldrh	r3, [r3, #0]
 8016286:	b29a      	uxth	r2, r3
 8016288:	200a      	movs	r0, #10
 801628a:	183b      	adds	r3, r7, r0
 801628c:	491d      	ldr	r1, [pc, #116]	@ (8016304 <USB_EPStartXfer+0xab0>)
 801628e:	400a      	ands	r2, r1
 8016290:	801a      	strh	r2, [r3, #0]
 8016292:	183b      	adds	r3, r7, r0
 8016294:	183a      	adds	r2, r7, r0
 8016296:	8812      	ldrh	r2, [r2, #0]
 8016298:	2110      	movs	r1, #16
 801629a:	404a      	eors	r2, r1
 801629c:	801a      	strh	r2, [r3, #0]
 801629e:	183b      	adds	r3, r7, r0
 80162a0:	183a      	adds	r2, r7, r0
 80162a2:	8812      	ldrh	r2, [r2, #0]
 80162a4:	2120      	movs	r1, #32
 80162a6:	404a      	eors	r2, r1
 80162a8:	801a      	strh	r2, [r3, #0]
 80162aa:	687a      	ldr	r2, [r7, #4]
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	009b      	lsls	r3, r3, #2
 80162b2:	18d3      	adds	r3, r2, r3
 80162b4:	183a      	adds	r2, r7, r0
 80162b6:	8812      	ldrh	r2, [r2, #0]
 80162b8:	4913      	ldr	r1, [pc, #76]	@ (8016308 <USB_EPStartXfer+0xab4>)
 80162ba:	430a      	orrs	r2, r1
 80162bc:	b292      	uxth	r2, r2
 80162be:	801a      	strh	r2, [r3, #0]
 80162c0:	f000 fbf4 	bl	8016aac <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	7b1b      	ldrb	r3, [r3, #12]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d000      	beq.n	80162ce <USB_EPStartXfer+0xa7a>
 80162cc:	e0a9      	b.n	8016422 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	699a      	ldr	r2, [r3, #24]
 80162d2:	683b      	ldr	r3, [r7, #0]
 80162d4:	691b      	ldr	r3, [r3, #16]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d918      	bls.n	801630c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	691b      	ldr	r3, [r3, #16]
 80162de:	1d7a      	adds	r2, r7, #5
 80162e0:	32ff      	adds	r2, #255	@ 0xff
 80162e2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	699a      	ldr	r2, [r3, #24]
 80162e8:	1d7b      	adds	r3, r7, #5
 80162ea:	33ff      	adds	r3, #255	@ 0xff
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	1ad2      	subs	r2, r2, r3
 80162f0:	683b      	ldr	r3, [r7, #0]
 80162f2:	619a      	str	r2, [r3, #24]
 80162f4:	e012      	b.n	801631c <USB_EPStartXfer+0xac8>
 80162f6:	46c0      	nop			@ (mov r8, r8)
 80162f8:	00000406 	.word	0x00000406
 80162fc:	ffff8000 	.word	0xffff8000
 8016300:	00000402 	.word	0x00000402
 8016304:	ffff8fbf 	.word	0xffff8fbf
 8016308:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801630c:	683b      	ldr	r3, [r7, #0]
 801630e:	699b      	ldr	r3, [r3, #24]
 8016310:	1d7a      	adds	r2, r7, #5
 8016312:	32ff      	adds	r2, #255	@ 0xff
 8016314:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	2200      	movs	r2, #0
 801631a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2190      	movs	r1, #144	@ 0x90
 8016320:	187a      	adds	r2, r7, r1
 8016322:	6013      	str	r3, [r2, #0]
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2250      	movs	r2, #80	@ 0x50
 8016328:	5a9b      	ldrh	r3, [r3, r2]
 801632a:	b29b      	uxth	r3, r3
 801632c:	001a      	movs	r2, r3
 801632e:	187b      	adds	r3, r7, r1
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	189b      	adds	r3, r3, r2
 8016334:	187a      	adds	r2, r7, r1
 8016336:	6013      	str	r3, [r2, #0]
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	781b      	ldrb	r3, [r3, #0]
 801633c:	00da      	lsls	r2, r3, #3
 801633e:	187b      	adds	r3, r7, r1
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	18d3      	adds	r3, r2, r3
 8016344:	4acf      	ldr	r2, [pc, #828]	@ (8016684 <USB_EPStartXfer+0xe30>)
 8016346:	4694      	mov	ip, r2
 8016348:	4463      	add	r3, ip
 801634a:	218c      	movs	r1, #140	@ 0x8c
 801634c:	187a      	adds	r2, r7, r1
 801634e:	6013      	str	r3, [r2, #0]
 8016350:	187b      	adds	r3, r7, r1
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	881b      	ldrh	r3, [r3, #0]
 8016356:	b29b      	uxth	r3, r3
 8016358:	059b      	lsls	r3, r3, #22
 801635a:	0d9b      	lsrs	r3, r3, #22
 801635c:	b29a      	uxth	r2, r3
 801635e:	187b      	adds	r3, r7, r1
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	801a      	strh	r2, [r3, #0]
 8016364:	1d7b      	adds	r3, r7, #5
 8016366:	33ff      	adds	r3, #255	@ 0xff
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	2b3e      	cmp	r3, #62	@ 0x3e
 801636c:	d925      	bls.n	80163ba <USB_EPStartXfer+0xb66>
 801636e:	1d7b      	adds	r3, r7, #5
 8016370:	33ff      	adds	r3, #255	@ 0xff
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	095b      	lsrs	r3, r3, #5
 8016376:	21e8      	movs	r1, #232	@ 0xe8
 8016378:	187a      	adds	r2, r7, r1
 801637a:	6013      	str	r3, [r2, #0]
 801637c:	1d7b      	adds	r3, r7, #5
 801637e:	33ff      	adds	r3, #255	@ 0xff
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	221f      	movs	r2, #31
 8016384:	4013      	ands	r3, r2
 8016386:	d104      	bne.n	8016392 <USB_EPStartXfer+0xb3e>
 8016388:	187b      	adds	r3, r7, r1
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	3b01      	subs	r3, #1
 801638e:	187a      	adds	r2, r7, r1
 8016390:	6013      	str	r3, [r2, #0]
 8016392:	218c      	movs	r1, #140	@ 0x8c
 8016394:	187b      	adds	r3, r7, r1
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	881b      	ldrh	r3, [r3, #0]
 801639a:	b29a      	uxth	r2, r3
 801639c:	23e8      	movs	r3, #232	@ 0xe8
 801639e:	18fb      	adds	r3, r7, r3
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	029b      	lsls	r3, r3, #10
 80163a6:	b29b      	uxth	r3, r3
 80163a8:	4313      	orrs	r3, r2
 80163aa:	b29b      	uxth	r3, r3
 80163ac:	4ab6      	ldr	r2, [pc, #728]	@ (8016688 <USB_EPStartXfer+0xe34>)
 80163ae:	4313      	orrs	r3, r2
 80163b0:	b29a      	uxth	r2, r3
 80163b2:	187b      	adds	r3, r7, r1
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	801a      	strh	r2, [r3, #0]
 80163b8:	e353      	b.n	8016a62 <USB_EPStartXfer+0x120e>
 80163ba:	1d7b      	adds	r3, r7, #5
 80163bc:	33ff      	adds	r3, #255	@ 0xff
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d10b      	bne.n	80163dc <USB_EPStartXfer+0xb88>
 80163c4:	218c      	movs	r1, #140	@ 0x8c
 80163c6:	187b      	adds	r3, r7, r1
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	881b      	ldrh	r3, [r3, #0]
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	4aae      	ldr	r2, [pc, #696]	@ (8016688 <USB_EPStartXfer+0xe34>)
 80163d0:	4313      	orrs	r3, r2
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	187b      	adds	r3, r7, r1
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	801a      	strh	r2, [r3, #0]
 80163da:	e342      	b.n	8016a62 <USB_EPStartXfer+0x120e>
 80163dc:	1d7b      	adds	r3, r7, #5
 80163de:	33ff      	adds	r3, #255	@ 0xff
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	085b      	lsrs	r3, r3, #1
 80163e4:	21e8      	movs	r1, #232	@ 0xe8
 80163e6:	187a      	adds	r2, r7, r1
 80163e8:	6013      	str	r3, [r2, #0]
 80163ea:	1d7b      	adds	r3, r7, #5
 80163ec:	33ff      	adds	r3, #255	@ 0xff
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2201      	movs	r2, #1
 80163f2:	4013      	ands	r3, r2
 80163f4:	d004      	beq.n	8016400 <USB_EPStartXfer+0xbac>
 80163f6:	187b      	adds	r3, r7, r1
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	3301      	adds	r3, #1
 80163fc:	187a      	adds	r2, r7, r1
 80163fe:	6013      	str	r3, [r2, #0]
 8016400:	218c      	movs	r1, #140	@ 0x8c
 8016402:	187b      	adds	r3, r7, r1
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	881b      	ldrh	r3, [r3, #0]
 8016408:	b29a      	uxth	r2, r3
 801640a:	23e8      	movs	r3, #232	@ 0xe8
 801640c:	18fb      	adds	r3, r7, r3
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	b29b      	uxth	r3, r3
 8016412:	029b      	lsls	r3, r3, #10
 8016414:	b29b      	uxth	r3, r3
 8016416:	4313      	orrs	r3, r2
 8016418:	b29a      	uxth	r2, r3
 801641a:	187b      	adds	r3, r7, r1
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	801a      	strh	r2, [r3, #0]
 8016420:	e31f      	b.n	8016a62 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	78db      	ldrb	r3, [r3, #3]
 8016426:	2b02      	cmp	r3, #2
 8016428:	d000      	beq.n	801642c <USB_EPStartXfer+0xbd8>
 801642a:	e191      	b.n	8016750 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	785b      	ldrb	r3, [r3, #1]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d000      	beq.n	8016436 <USB_EPStartXfer+0xbe2>
 8016434:	e07c      	b.n	8016530 <USB_EPStartXfer+0xcdc>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	21ac      	movs	r1, #172	@ 0xac
 801643a:	187a      	adds	r2, r7, r1
 801643c:	6013      	str	r3, [r2, #0]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2250      	movs	r2, #80	@ 0x50
 8016442:	5a9b      	ldrh	r3, [r3, r2]
 8016444:	b29b      	uxth	r3, r3
 8016446:	001a      	movs	r2, r3
 8016448:	187b      	adds	r3, r7, r1
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	189b      	adds	r3, r3, r2
 801644e:	187a      	adds	r2, r7, r1
 8016450:	6013      	str	r3, [r2, #0]
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	00da      	lsls	r2, r3, #3
 8016458:	187b      	adds	r3, r7, r1
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	18d3      	adds	r3, r2, r3
 801645e:	4a8b      	ldr	r2, [pc, #556]	@ (801668c <USB_EPStartXfer+0xe38>)
 8016460:	4694      	mov	ip, r2
 8016462:	4463      	add	r3, ip
 8016464:	21a8      	movs	r1, #168	@ 0xa8
 8016466:	187a      	adds	r2, r7, r1
 8016468:	6013      	str	r3, [r2, #0]
 801646a:	187b      	adds	r3, r7, r1
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	881b      	ldrh	r3, [r3, #0]
 8016470:	b29b      	uxth	r3, r3
 8016472:	059b      	lsls	r3, r3, #22
 8016474:	0d9b      	lsrs	r3, r3, #22
 8016476:	b29a      	uxth	r2, r3
 8016478:	187b      	adds	r3, r7, r1
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	801a      	strh	r2, [r3, #0]
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	691b      	ldr	r3, [r3, #16]
 8016482:	2b3e      	cmp	r3, #62	@ 0x3e
 8016484:	d923      	bls.n	80164ce <USB_EPStartXfer+0xc7a>
 8016486:	683b      	ldr	r3, [r7, #0]
 8016488:	691b      	ldr	r3, [r3, #16]
 801648a:	095b      	lsrs	r3, r3, #5
 801648c:	21e4      	movs	r1, #228	@ 0xe4
 801648e:	187a      	adds	r2, r7, r1
 8016490:	6013      	str	r3, [r2, #0]
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	691b      	ldr	r3, [r3, #16]
 8016496:	221f      	movs	r2, #31
 8016498:	4013      	ands	r3, r2
 801649a:	d104      	bne.n	80164a6 <USB_EPStartXfer+0xc52>
 801649c:	187b      	adds	r3, r7, r1
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	3b01      	subs	r3, #1
 80164a2:	187a      	adds	r2, r7, r1
 80164a4:	6013      	str	r3, [r2, #0]
 80164a6:	21a8      	movs	r1, #168	@ 0xa8
 80164a8:	187b      	adds	r3, r7, r1
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	881b      	ldrh	r3, [r3, #0]
 80164ae:	b29a      	uxth	r2, r3
 80164b0:	23e4      	movs	r3, #228	@ 0xe4
 80164b2:	18fb      	adds	r3, r7, r3
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	029b      	lsls	r3, r3, #10
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	4313      	orrs	r3, r2
 80164be:	b29b      	uxth	r3, r3
 80164c0:	4a71      	ldr	r2, [pc, #452]	@ (8016688 <USB_EPStartXfer+0xe34>)
 80164c2:	4313      	orrs	r3, r2
 80164c4:	b29a      	uxth	r2, r3
 80164c6:	187b      	adds	r3, r7, r1
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	801a      	strh	r2, [r3, #0]
 80164cc:	e054      	b.n	8016578 <USB_EPStartXfer+0xd24>
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	691b      	ldr	r3, [r3, #16]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d10b      	bne.n	80164ee <USB_EPStartXfer+0xc9a>
 80164d6:	21a8      	movs	r1, #168	@ 0xa8
 80164d8:	187b      	adds	r3, r7, r1
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	881b      	ldrh	r3, [r3, #0]
 80164de:	b29b      	uxth	r3, r3
 80164e0:	4a69      	ldr	r2, [pc, #420]	@ (8016688 <USB_EPStartXfer+0xe34>)
 80164e2:	4313      	orrs	r3, r2
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	187b      	adds	r3, r7, r1
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	801a      	strh	r2, [r3, #0]
 80164ec:	e044      	b.n	8016578 <USB_EPStartXfer+0xd24>
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	691b      	ldr	r3, [r3, #16]
 80164f2:	085b      	lsrs	r3, r3, #1
 80164f4:	21e4      	movs	r1, #228	@ 0xe4
 80164f6:	187a      	adds	r2, r7, r1
 80164f8:	6013      	str	r3, [r2, #0]
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	691b      	ldr	r3, [r3, #16]
 80164fe:	2201      	movs	r2, #1
 8016500:	4013      	ands	r3, r2
 8016502:	d004      	beq.n	801650e <USB_EPStartXfer+0xcba>
 8016504:	187b      	adds	r3, r7, r1
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	3301      	adds	r3, #1
 801650a:	187a      	adds	r2, r7, r1
 801650c:	6013      	str	r3, [r2, #0]
 801650e:	21a8      	movs	r1, #168	@ 0xa8
 8016510:	187b      	adds	r3, r7, r1
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	b29a      	uxth	r2, r3
 8016518:	23e4      	movs	r3, #228	@ 0xe4
 801651a:	18fb      	adds	r3, r7, r3
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	b29b      	uxth	r3, r3
 8016520:	029b      	lsls	r3, r3, #10
 8016522:	b29b      	uxth	r3, r3
 8016524:	4313      	orrs	r3, r2
 8016526:	b29a      	uxth	r2, r3
 8016528:	187b      	adds	r3, r7, r1
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	801a      	strh	r2, [r3, #0]
 801652e:	e023      	b.n	8016578 <USB_EPStartXfer+0xd24>
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	785b      	ldrb	r3, [r3, #1]
 8016534:	2b01      	cmp	r3, #1
 8016536:	d11f      	bne.n	8016578 <USB_EPStartXfer+0xd24>
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	21b4      	movs	r1, #180	@ 0xb4
 801653c:	187a      	adds	r2, r7, r1
 801653e:	6013      	str	r3, [r2, #0]
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2250      	movs	r2, #80	@ 0x50
 8016544:	5a9b      	ldrh	r3, [r3, r2]
 8016546:	b29b      	uxth	r3, r3
 8016548:	001a      	movs	r2, r3
 801654a:	187b      	adds	r3, r7, r1
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	189b      	adds	r3, r3, r2
 8016550:	187a      	adds	r2, r7, r1
 8016552:	6013      	str	r3, [r2, #0]
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	00da      	lsls	r2, r3, #3
 801655a:	187b      	adds	r3, r7, r1
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	18d3      	adds	r3, r2, r3
 8016560:	4a4a      	ldr	r2, [pc, #296]	@ (801668c <USB_EPStartXfer+0xe38>)
 8016562:	4694      	mov	ip, r2
 8016564:	4463      	add	r3, ip
 8016566:	21b0      	movs	r1, #176	@ 0xb0
 8016568:	187a      	adds	r2, r7, r1
 801656a:	6013      	str	r3, [r2, #0]
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	691b      	ldr	r3, [r3, #16]
 8016570:	b29a      	uxth	r2, r3
 8016572:	187b      	adds	r3, r7, r1
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	801a      	strh	r2, [r3, #0]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	22a4      	movs	r2, #164	@ 0xa4
 801657c:	18ba      	adds	r2, r7, r2
 801657e:	6013      	str	r3, [r2, #0]
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	785b      	ldrb	r3, [r3, #1]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d000      	beq.n	801658a <USB_EPStartXfer+0xd36>
 8016588:	e082      	b.n	8016690 <USB_EPStartXfer+0xe3c>
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	219c      	movs	r1, #156	@ 0x9c
 801658e:	187a      	adds	r2, r7, r1
 8016590:	6013      	str	r3, [r2, #0]
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2250      	movs	r2, #80	@ 0x50
 8016596:	5a9b      	ldrh	r3, [r3, r2]
 8016598:	b29b      	uxth	r3, r3
 801659a:	001a      	movs	r2, r3
 801659c:	187b      	adds	r3, r7, r1
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	189b      	adds	r3, r3, r2
 80165a2:	187a      	adds	r2, r7, r1
 80165a4:	6013      	str	r3, [r2, #0]
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	781b      	ldrb	r3, [r3, #0]
 80165aa:	00da      	lsls	r2, r3, #3
 80165ac:	187b      	adds	r3, r7, r1
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	18d3      	adds	r3, r2, r3
 80165b2:	4a34      	ldr	r2, [pc, #208]	@ (8016684 <USB_EPStartXfer+0xe30>)
 80165b4:	4694      	mov	ip, r2
 80165b6:	4463      	add	r3, ip
 80165b8:	2198      	movs	r1, #152	@ 0x98
 80165ba:	187a      	adds	r2, r7, r1
 80165bc:	6013      	str	r3, [r2, #0]
 80165be:	187b      	adds	r3, r7, r1
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	881b      	ldrh	r3, [r3, #0]
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	059b      	lsls	r3, r3, #22
 80165c8:	0d9b      	lsrs	r3, r3, #22
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	187b      	adds	r3, r7, r1
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	801a      	strh	r2, [r3, #0]
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	691b      	ldr	r3, [r3, #16]
 80165d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80165d8:	d923      	bls.n	8016622 <USB_EPStartXfer+0xdce>
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	691b      	ldr	r3, [r3, #16]
 80165de:	095b      	lsrs	r3, r3, #5
 80165e0:	21e0      	movs	r1, #224	@ 0xe0
 80165e2:	187a      	adds	r2, r7, r1
 80165e4:	6013      	str	r3, [r2, #0]
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	691b      	ldr	r3, [r3, #16]
 80165ea:	221f      	movs	r2, #31
 80165ec:	4013      	ands	r3, r2
 80165ee:	d104      	bne.n	80165fa <USB_EPStartXfer+0xda6>
 80165f0:	187b      	adds	r3, r7, r1
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	3b01      	subs	r3, #1
 80165f6:	187a      	adds	r2, r7, r1
 80165f8:	6013      	str	r3, [r2, #0]
 80165fa:	2198      	movs	r1, #152	@ 0x98
 80165fc:	187b      	adds	r3, r7, r1
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	881b      	ldrh	r3, [r3, #0]
 8016602:	b29a      	uxth	r2, r3
 8016604:	23e0      	movs	r3, #224	@ 0xe0
 8016606:	18fb      	adds	r3, r7, r3
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	b29b      	uxth	r3, r3
 801660c:	029b      	lsls	r3, r3, #10
 801660e:	b29b      	uxth	r3, r3
 8016610:	4313      	orrs	r3, r2
 8016612:	b29b      	uxth	r3, r3
 8016614:	4a1c      	ldr	r2, [pc, #112]	@ (8016688 <USB_EPStartXfer+0xe34>)
 8016616:	4313      	orrs	r3, r2
 8016618:	b29a      	uxth	r2, r3
 801661a:	187b      	adds	r3, r7, r1
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	801a      	strh	r2, [r3, #0]
 8016620:	e057      	b.n	80166d2 <USB_EPStartXfer+0xe7e>
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	691b      	ldr	r3, [r3, #16]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d10b      	bne.n	8016642 <USB_EPStartXfer+0xdee>
 801662a:	2198      	movs	r1, #152	@ 0x98
 801662c:	187b      	adds	r3, r7, r1
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	881b      	ldrh	r3, [r3, #0]
 8016632:	b29b      	uxth	r3, r3
 8016634:	4a14      	ldr	r2, [pc, #80]	@ (8016688 <USB_EPStartXfer+0xe34>)
 8016636:	4313      	orrs	r3, r2
 8016638:	b29a      	uxth	r2, r3
 801663a:	187b      	adds	r3, r7, r1
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	801a      	strh	r2, [r3, #0]
 8016640:	e047      	b.n	80166d2 <USB_EPStartXfer+0xe7e>
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	691b      	ldr	r3, [r3, #16]
 8016646:	085b      	lsrs	r3, r3, #1
 8016648:	21e0      	movs	r1, #224	@ 0xe0
 801664a:	187a      	adds	r2, r7, r1
 801664c:	6013      	str	r3, [r2, #0]
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	691b      	ldr	r3, [r3, #16]
 8016652:	2201      	movs	r2, #1
 8016654:	4013      	ands	r3, r2
 8016656:	d004      	beq.n	8016662 <USB_EPStartXfer+0xe0e>
 8016658:	187b      	adds	r3, r7, r1
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	3301      	adds	r3, #1
 801665e:	187a      	adds	r2, r7, r1
 8016660:	6013      	str	r3, [r2, #0]
 8016662:	2198      	movs	r1, #152	@ 0x98
 8016664:	187b      	adds	r3, r7, r1
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	881b      	ldrh	r3, [r3, #0]
 801666a:	b29a      	uxth	r2, r3
 801666c:	23e0      	movs	r3, #224	@ 0xe0
 801666e:	18fb      	adds	r3, r7, r3
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	b29b      	uxth	r3, r3
 8016674:	029b      	lsls	r3, r3, #10
 8016676:	b29b      	uxth	r3, r3
 8016678:	4313      	orrs	r3, r2
 801667a:	b29a      	uxth	r2, r3
 801667c:	187b      	adds	r3, r7, r1
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	801a      	strh	r2, [r3, #0]
 8016682:	e026      	b.n	80166d2 <USB_EPStartXfer+0xe7e>
 8016684:	00000406 	.word	0x00000406
 8016688:	ffff8000 	.word	0xffff8000
 801668c:	00000402 	.word	0x00000402
 8016690:	683b      	ldr	r3, [r7, #0]
 8016692:	785b      	ldrb	r3, [r3, #1]
 8016694:	2b01      	cmp	r3, #1
 8016696:	d11c      	bne.n	80166d2 <USB_EPStartXfer+0xe7e>
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2250      	movs	r2, #80	@ 0x50
 801669c:	5a9b      	ldrh	r3, [r3, r2]
 801669e:	b29b      	uxth	r3, r3
 80166a0:	001a      	movs	r2, r3
 80166a2:	21a4      	movs	r1, #164	@ 0xa4
 80166a4:	187b      	adds	r3, r7, r1
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	189b      	adds	r3, r3, r2
 80166aa:	187a      	adds	r2, r7, r1
 80166ac:	6013      	str	r3, [r2, #0]
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	781b      	ldrb	r3, [r3, #0]
 80166b2:	00da      	lsls	r2, r3, #3
 80166b4:	187b      	adds	r3, r7, r1
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	18d3      	adds	r3, r2, r3
 80166ba:	4ad2      	ldr	r2, [pc, #840]	@ (8016a04 <USB_EPStartXfer+0x11b0>)
 80166bc:	4694      	mov	ip, r2
 80166be:	4463      	add	r3, ip
 80166c0:	21a0      	movs	r1, #160	@ 0xa0
 80166c2:	187a      	adds	r2, r7, r1
 80166c4:	6013      	str	r3, [r2, #0]
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	691b      	ldr	r3, [r3, #16]
 80166ca:	b29a      	uxth	r2, r3
 80166cc:	187b      	adds	r3, r7, r1
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	69db      	ldr	r3, [r3, #28]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d100      	bne.n	80166dc <USB_EPStartXfer+0xe88>
 80166da:	e1c2      	b.n	8016a62 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	781b      	ldrb	r3, [r3, #0]
 80166e2:	009b      	lsls	r3, r3, #2
 80166e4:	18d2      	adds	r2, r2, r3
 80166e6:	2196      	movs	r1, #150	@ 0x96
 80166e8:	187b      	adds	r3, r7, r1
 80166ea:	8812      	ldrh	r2, [r2, #0]
 80166ec:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80166ee:	187b      	adds	r3, r7, r1
 80166f0:	881a      	ldrh	r2, [r3, #0]
 80166f2:	2380      	movs	r3, #128	@ 0x80
 80166f4:	01db      	lsls	r3, r3, #7
 80166f6:	4013      	ands	r3, r2
 80166f8:	d004      	beq.n	8016704 <USB_EPStartXfer+0xeb0>
 80166fa:	187b      	adds	r3, r7, r1
 80166fc:	881b      	ldrh	r3, [r3, #0]
 80166fe:	2240      	movs	r2, #64	@ 0x40
 8016700:	4013      	ands	r3, r2
 8016702:	d10d      	bne.n	8016720 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016704:	2196      	movs	r1, #150	@ 0x96
 8016706:	187b      	adds	r3, r7, r1
 8016708:	881a      	ldrh	r2, [r3, #0]
 801670a:	2380      	movs	r3, #128	@ 0x80
 801670c:	01db      	lsls	r3, r3, #7
 801670e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016710:	d000      	beq.n	8016714 <USB_EPStartXfer+0xec0>
 8016712:	e1a6      	b.n	8016a62 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016714:	187b      	adds	r3, r7, r1
 8016716:	881b      	ldrh	r3, [r3, #0]
 8016718:	2240      	movs	r2, #64	@ 0x40
 801671a:	4013      	ands	r3, r2
 801671c:	d000      	beq.n	8016720 <USB_EPStartXfer+0xecc>
 801671e:	e1a0      	b.n	8016a62 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	009b      	lsls	r3, r3, #2
 8016728:	18d3      	adds	r3, r2, r3
 801672a:	881b      	ldrh	r3, [r3, #0]
 801672c:	b29a      	uxth	r2, r3
 801672e:	2094      	movs	r0, #148	@ 0x94
 8016730:	183b      	adds	r3, r7, r0
 8016732:	49b5      	ldr	r1, [pc, #724]	@ (8016a08 <USB_EPStartXfer+0x11b4>)
 8016734:	400a      	ands	r2, r1
 8016736:	801a      	strh	r2, [r3, #0]
 8016738:	687a      	ldr	r2, [r7, #4]
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	009b      	lsls	r3, r3, #2
 8016740:	18d3      	adds	r3, r2, r3
 8016742:	183a      	adds	r2, r7, r0
 8016744:	8812      	ldrh	r2, [r2, #0]
 8016746:	49b1      	ldr	r1, [pc, #708]	@ (8016a0c <USB_EPStartXfer+0x11b8>)
 8016748:	430a      	orrs	r2, r1
 801674a:	b292      	uxth	r2, r2
 801674c:	801a      	strh	r2, [r3, #0]
 801674e:	e188      	b.n	8016a62 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	78db      	ldrb	r3, [r3, #3]
 8016754:	2b01      	cmp	r3, #1
 8016756:	d000      	beq.n	801675a <USB_EPStartXfer+0xf06>
 8016758:	e181      	b.n	8016a5e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	699a      	ldr	r2, [r3, #24]
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	691b      	ldr	r3, [r3, #16]
 8016762:	429a      	cmp	r2, r3
 8016764:	d90d      	bls.n	8016782 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8016766:	683b      	ldr	r3, [r7, #0]
 8016768:	691b      	ldr	r3, [r3, #16]
 801676a:	1d7a      	adds	r2, r7, #5
 801676c:	32ff      	adds	r2, #255	@ 0xff
 801676e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	699a      	ldr	r2, [r3, #24]
 8016774:	1d7b      	adds	r3, r7, #5
 8016776:	33ff      	adds	r3, #255	@ 0xff
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	1ad2      	subs	r2, r2, r3
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	619a      	str	r2, [r3, #24]
 8016780:	e007      	b.n	8016792 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	699b      	ldr	r3, [r3, #24]
 8016786:	1d7a      	adds	r2, r7, #5
 8016788:	32ff      	adds	r2, #255	@ 0xff
 801678a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	2200      	movs	r2, #0
 8016790:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	785b      	ldrb	r3, [r3, #1]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d000      	beq.n	801679c <USB_EPStartXfer+0xf48>
 801679a:	e082      	b.n	80168a2 <USB_EPStartXfer+0x104e>
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	21cc      	movs	r1, #204	@ 0xcc
 80167a0:	187a      	adds	r2, r7, r1
 80167a2:	6013      	str	r3, [r2, #0]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2250      	movs	r2, #80	@ 0x50
 80167a8:	5a9b      	ldrh	r3, [r3, r2]
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	001a      	movs	r2, r3
 80167ae:	187b      	adds	r3, r7, r1
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	189b      	adds	r3, r3, r2
 80167b4:	187a      	adds	r2, r7, r1
 80167b6:	6013      	str	r3, [r2, #0]
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	00da      	lsls	r2, r3, #3
 80167be:	187b      	adds	r3, r7, r1
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	18d3      	adds	r3, r2, r3
 80167c4:	4a92      	ldr	r2, [pc, #584]	@ (8016a10 <USB_EPStartXfer+0x11bc>)
 80167c6:	4694      	mov	ip, r2
 80167c8:	4463      	add	r3, ip
 80167ca:	21c8      	movs	r1, #200	@ 0xc8
 80167cc:	187a      	adds	r2, r7, r1
 80167ce:	6013      	str	r3, [r2, #0]
 80167d0:	187b      	adds	r3, r7, r1
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	881b      	ldrh	r3, [r3, #0]
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	059b      	lsls	r3, r3, #22
 80167da:	0d9b      	lsrs	r3, r3, #22
 80167dc:	b29a      	uxth	r2, r3
 80167de:	187b      	adds	r3, r7, r1
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	801a      	strh	r2, [r3, #0]
 80167e4:	1d7b      	adds	r3, r7, #5
 80167e6:	33ff      	adds	r3, #255	@ 0xff
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80167ec:	d925      	bls.n	801683a <USB_EPStartXfer+0xfe6>
 80167ee:	1d7b      	adds	r3, r7, #5
 80167f0:	33ff      	adds	r3, #255	@ 0xff
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	095b      	lsrs	r3, r3, #5
 80167f6:	21dc      	movs	r1, #220	@ 0xdc
 80167f8:	187a      	adds	r2, r7, r1
 80167fa:	6013      	str	r3, [r2, #0]
 80167fc:	1d7b      	adds	r3, r7, #5
 80167fe:	33ff      	adds	r3, #255	@ 0xff
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	221f      	movs	r2, #31
 8016804:	4013      	ands	r3, r2
 8016806:	d104      	bne.n	8016812 <USB_EPStartXfer+0xfbe>
 8016808:	187b      	adds	r3, r7, r1
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	3b01      	subs	r3, #1
 801680e:	187a      	adds	r2, r7, r1
 8016810:	6013      	str	r3, [r2, #0]
 8016812:	21c8      	movs	r1, #200	@ 0xc8
 8016814:	187b      	adds	r3, r7, r1
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	881b      	ldrh	r3, [r3, #0]
 801681a:	b29a      	uxth	r2, r3
 801681c:	23dc      	movs	r3, #220	@ 0xdc
 801681e:	18fb      	adds	r3, r7, r3
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	b29b      	uxth	r3, r3
 8016824:	029b      	lsls	r3, r3, #10
 8016826:	b29b      	uxth	r3, r3
 8016828:	4313      	orrs	r3, r2
 801682a:	b29b      	uxth	r3, r3
 801682c:	4a79      	ldr	r2, [pc, #484]	@ (8016a14 <USB_EPStartXfer+0x11c0>)
 801682e:	4313      	orrs	r3, r2
 8016830:	b29a      	uxth	r2, r3
 8016832:	187b      	adds	r3, r7, r1
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	801a      	strh	r2, [r3, #0]
 8016838:	e058      	b.n	80168ec <USB_EPStartXfer+0x1098>
 801683a:	1d7b      	adds	r3, r7, #5
 801683c:	33ff      	adds	r3, #255	@ 0xff
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d10b      	bne.n	801685c <USB_EPStartXfer+0x1008>
 8016844:	21c8      	movs	r1, #200	@ 0xc8
 8016846:	187b      	adds	r3, r7, r1
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	b29b      	uxth	r3, r3
 801684e:	4a71      	ldr	r2, [pc, #452]	@ (8016a14 <USB_EPStartXfer+0x11c0>)
 8016850:	4313      	orrs	r3, r2
 8016852:	b29a      	uxth	r2, r3
 8016854:	187b      	adds	r3, r7, r1
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	801a      	strh	r2, [r3, #0]
 801685a:	e047      	b.n	80168ec <USB_EPStartXfer+0x1098>
 801685c:	1d7b      	adds	r3, r7, #5
 801685e:	33ff      	adds	r3, #255	@ 0xff
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	085b      	lsrs	r3, r3, #1
 8016864:	21dc      	movs	r1, #220	@ 0xdc
 8016866:	187a      	adds	r2, r7, r1
 8016868:	6013      	str	r3, [r2, #0]
 801686a:	1d7b      	adds	r3, r7, #5
 801686c:	33ff      	adds	r3, #255	@ 0xff
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2201      	movs	r2, #1
 8016872:	4013      	ands	r3, r2
 8016874:	d004      	beq.n	8016880 <USB_EPStartXfer+0x102c>
 8016876:	187b      	adds	r3, r7, r1
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	3301      	adds	r3, #1
 801687c:	187a      	adds	r2, r7, r1
 801687e:	6013      	str	r3, [r2, #0]
 8016880:	21c8      	movs	r1, #200	@ 0xc8
 8016882:	187b      	adds	r3, r7, r1
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	881b      	ldrh	r3, [r3, #0]
 8016888:	b29a      	uxth	r2, r3
 801688a:	23dc      	movs	r3, #220	@ 0xdc
 801688c:	18fb      	adds	r3, r7, r3
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	b29b      	uxth	r3, r3
 8016892:	029b      	lsls	r3, r3, #10
 8016894:	b29b      	uxth	r3, r3
 8016896:	4313      	orrs	r3, r2
 8016898:	b29a      	uxth	r2, r3
 801689a:	187b      	adds	r3, r7, r1
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	801a      	strh	r2, [r3, #0]
 80168a0:	e024      	b.n	80168ec <USB_EPStartXfer+0x1098>
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	785b      	ldrb	r3, [r3, #1]
 80168a6:	2b01      	cmp	r3, #1
 80168a8:	d120      	bne.n	80168ec <USB_EPStartXfer+0x1098>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	21d4      	movs	r1, #212	@ 0xd4
 80168ae:	187a      	adds	r2, r7, r1
 80168b0:	6013      	str	r3, [r2, #0]
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2250      	movs	r2, #80	@ 0x50
 80168b6:	5a9b      	ldrh	r3, [r3, r2]
 80168b8:	b29b      	uxth	r3, r3
 80168ba:	001a      	movs	r2, r3
 80168bc:	187b      	adds	r3, r7, r1
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	189b      	adds	r3, r3, r2
 80168c2:	187a      	adds	r2, r7, r1
 80168c4:	6013      	str	r3, [r2, #0]
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	00da      	lsls	r2, r3, #3
 80168cc:	187b      	adds	r3, r7, r1
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	18d3      	adds	r3, r2, r3
 80168d2:	4a4f      	ldr	r2, [pc, #316]	@ (8016a10 <USB_EPStartXfer+0x11bc>)
 80168d4:	4694      	mov	ip, r2
 80168d6:	4463      	add	r3, ip
 80168d8:	21d0      	movs	r1, #208	@ 0xd0
 80168da:	187a      	adds	r2, r7, r1
 80168dc:	6013      	str	r3, [r2, #0]
 80168de:	1d7b      	adds	r3, r7, #5
 80168e0:	33ff      	adds	r3, #255	@ 0xff
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	187b      	adds	r3, r7, r1
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	801a      	strh	r2, [r3, #0]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	22c4      	movs	r2, #196	@ 0xc4
 80168f0:	18ba      	adds	r2, r7, r2
 80168f2:	6013      	str	r3, [r2, #0]
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	785b      	ldrb	r3, [r3, #1]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d000      	beq.n	80168fe <USB_EPStartXfer+0x10aa>
 80168fc:	e08c      	b.n	8016a18 <USB_EPStartXfer+0x11c4>
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	21bc      	movs	r1, #188	@ 0xbc
 8016902:	187a      	adds	r2, r7, r1
 8016904:	6013      	str	r3, [r2, #0]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2250      	movs	r2, #80	@ 0x50
 801690a:	5a9b      	ldrh	r3, [r3, r2]
 801690c:	b29b      	uxth	r3, r3
 801690e:	001a      	movs	r2, r3
 8016910:	187b      	adds	r3, r7, r1
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	189b      	adds	r3, r3, r2
 8016916:	187a      	adds	r2, r7, r1
 8016918:	6013      	str	r3, [r2, #0]
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	781b      	ldrb	r3, [r3, #0]
 801691e:	00da      	lsls	r2, r3, #3
 8016920:	187b      	adds	r3, r7, r1
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	18d3      	adds	r3, r2, r3
 8016926:	4a37      	ldr	r2, [pc, #220]	@ (8016a04 <USB_EPStartXfer+0x11b0>)
 8016928:	4694      	mov	ip, r2
 801692a:	4463      	add	r3, ip
 801692c:	21b8      	movs	r1, #184	@ 0xb8
 801692e:	187a      	adds	r2, r7, r1
 8016930:	6013      	str	r3, [r2, #0]
 8016932:	187b      	adds	r3, r7, r1
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	881b      	ldrh	r3, [r3, #0]
 8016938:	b29b      	uxth	r3, r3
 801693a:	059b      	lsls	r3, r3, #22
 801693c:	0d9b      	lsrs	r3, r3, #22
 801693e:	b29a      	uxth	r2, r3
 8016940:	187b      	adds	r3, r7, r1
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	801a      	strh	r2, [r3, #0]
 8016946:	1d7b      	adds	r3, r7, #5
 8016948:	33ff      	adds	r3, #255	@ 0xff
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2b3e      	cmp	r3, #62	@ 0x3e
 801694e:	d925      	bls.n	801699c <USB_EPStartXfer+0x1148>
 8016950:	1d7b      	adds	r3, r7, #5
 8016952:	33ff      	adds	r3, #255	@ 0xff
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	095b      	lsrs	r3, r3, #5
 8016958:	21d8      	movs	r1, #216	@ 0xd8
 801695a:	187a      	adds	r2, r7, r1
 801695c:	6013      	str	r3, [r2, #0]
 801695e:	1d7b      	adds	r3, r7, #5
 8016960:	33ff      	adds	r3, #255	@ 0xff
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	221f      	movs	r2, #31
 8016966:	4013      	ands	r3, r2
 8016968:	d104      	bne.n	8016974 <USB_EPStartXfer+0x1120>
 801696a:	187b      	adds	r3, r7, r1
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	3b01      	subs	r3, #1
 8016970:	187a      	adds	r2, r7, r1
 8016972:	6013      	str	r3, [r2, #0]
 8016974:	21b8      	movs	r1, #184	@ 0xb8
 8016976:	187b      	adds	r3, r7, r1
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	881b      	ldrh	r3, [r3, #0]
 801697c:	b29a      	uxth	r2, r3
 801697e:	23d8      	movs	r3, #216	@ 0xd8
 8016980:	18fb      	adds	r3, r7, r3
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	b29b      	uxth	r3, r3
 8016986:	029b      	lsls	r3, r3, #10
 8016988:	b29b      	uxth	r3, r3
 801698a:	4313      	orrs	r3, r2
 801698c:	b29b      	uxth	r3, r3
 801698e:	4a21      	ldr	r2, [pc, #132]	@ (8016a14 <USB_EPStartXfer+0x11c0>)
 8016990:	4313      	orrs	r3, r2
 8016992:	b29a      	uxth	r2, r3
 8016994:	187b      	adds	r3, r7, r1
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	801a      	strh	r2, [r3, #0]
 801699a:	e062      	b.n	8016a62 <USB_EPStartXfer+0x120e>
 801699c:	1d7b      	adds	r3, r7, #5
 801699e:	33ff      	adds	r3, #255	@ 0xff
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d10b      	bne.n	80169be <USB_EPStartXfer+0x116a>
 80169a6:	21b8      	movs	r1, #184	@ 0xb8
 80169a8:	187b      	adds	r3, r7, r1
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	881b      	ldrh	r3, [r3, #0]
 80169ae:	b29b      	uxth	r3, r3
 80169b0:	4a18      	ldr	r2, [pc, #96]	@ (8016a14 <USB_EPStartXfer+0x11c0>)
 80169b2:	4313      	orrs	r3, r2
 80169b4:	b29a      	uxth	r2, r3
 80169b6:	187b      	adds	r3, r7, r1
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	801a      	strh	r2, [r3, #0]
 80169bc:	e051      	b.n	8016a62 <USB_EPStartXfer+0x120e>
 80169be:	1d7b      	adds	r3, r7, #5
 80169c0:	33ff      	adds	r3, #255	@ 0xff
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	085b      	lsrs	r3, r3, #1
 80169c6:	21d8      	movs	r1, #216	@ 0xd8
 80169c8:	187a      	adds	r2, r7, r1
 80169ca:	6013      	str	r3, [r2, #0]
 80169cc:	1d7b      	adds	r3, r7, #5
 80169ce:	33ff      	adds	r3, #255	@ 0xff
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	2201      	movs	r2, #1
 80169d4:	4013      	ands	r3, r2
 80169d6:	d004      	beq.n	80169e2 <USB_EPStartXfer+0x118e>
 80169d8:	187b      	adds	r3, r7, r1
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	3301      	adds	r3, #1
 80169de:	187a      	adds	r2, r7, r1
 80169e0:	6013      	str	r3, [r2, #0]
 80169e2:	21b8      	movs	r1, #184	@ 0xb8
 80169e4:	187b      	adds	r3, r7, r1
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	881b      	ldrh	r3, [r3, #0]
 80169ea:	b29a      	uxth	r2, r3
 80169ec:	23d8      	movs	r3, #216	@ 0xd8
 80169ee:	18fb      	adds	r3, r7, r3
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	b29b      	uxth	r3, r3
 80169f4:	029b      	lsls	r3, r3, #10
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	4313      	orrs	r3, r2
 80169fa:	b29a      	uxth	r2, r3
 80169fc:	187b      	adds	r3, r7, r1
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	801a      	strh	r2, [r3, #0]
 8016a02:	e02e      	b.n	8016a62 <USB_EPStartXfer+0x120e>
 8016a04:	00000406 	.word	0x00000406
 8016a08:	ffff8f8f 	.word	0xffff8f8f
 8016a0c:	ffff80c0 	.word	0xffff80c0
 8016a10:	00000402 	.word	0x00000402
 8016a14:	ffff8000 	.word	0xffff8000
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	785b      	ldrb	r3, [r3, #1]
 8016a1c:	2b01      	cmp	r3, #1
 8016a1e:	d120      	bne.n	8016a62 <USB_EPStartXfer+0x120e>
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	2250      	movs	r2, #80	@ 0x50
 8016a24:	5a9b      	ldrh	r3, [r3, r2]
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	001a      	movs	r2, r3
 8016a2a:	21c4      	movs	r1, #196	@ 0xc4
 8016a2c:	187b      	adds	r3, r7, r1
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	189b      	adds	r3, r3, r2
 8016a32:	187a      	adds	r2, r7, r1
 8016a34:	6013      	str	r3, [r2, #0]
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	781b      	ldrb	r3, [r3, #0]
 8016a3a:	00da      	lsls	r2, r3, #3
 8016a3c:	187b      	adds	r3, r7, r1
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	18d3      	adds	r3, r2, r3
 8016a42:	4a1d      	ldr	r2, [pc, #116]	@ (8016ab8 <USB_EPStartXfer+0x1264>)
 8016a44:	4694      	mov	ip, r2
 8016a46:	4463      	add	r3, ip
 8016a48:	21c0      	movs	r1, #192	@ 0xc0
 8016a4a:	187a      	adds	r2, r7, r1
 8016a4c:	6013      	str	r3, [r2, #0]
 8016a4e:	1d7b      	adds	r3, r7, #5
 8016a50:	33ff      	adds	r3, #255	@ 0xff
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	b29a      	uxth	r2, r3
 8016a56:	187b      	adds	r3, r7, r1
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	801a      	strh	r2, [r3, #0]
 8016a5c:	e001      	b.n	8016a62 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8016a5e:	2301      	movs	r3, #1
 8016a60:	e025      	b.n	8016aae <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8016a62:	687a      	ldr	r2, [r7, #4]
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	781b      	ldrb	r3, [r3, #0]
 8016a68:	009b      	lsls	r3, r3, #2
 8016a6a:	18d3      	adds	r3, r2, r3
 8016a6c:	881b      	ldrh	r3, [r3, #0]
 8016a6e:	b29a      	uxth	r2, r3
 8016a70:	208a      	movs	r0, #138	@ 0x8a
 8016a72:	183b      	adds	r3, r7, r0
 8016a74:	4911      	ldr	r1, [pc, #68]	@ (8016abc <USB_EPStartXfer+0x1268>)
 8016a76:	400a      	ands	r2, r1
 8016a78:	801a      	strh	r2, [r3, #0]
 8016a7a:	183b      	adds	r3, r7, r0
 8016a7c:	183a      	adds	r2, r7, r0
 8016a7e:	8812      	ldrh	r2, [r2, #0]
 8016a80:	2180      	movs	r1, #128	@ 0x80
 8016a82:	0149      	lsls	r1, r1, #5
 8016a84:	404a      	eors	r2, r1
 8016a86:	801a      	strh	r2, [r3, #0]
 8016a88:	183b      	adds	r3, r7, r0
 8016a8a:	183a      	adds	r2, r7, r0
 8016a8c:	8812      	ldrh	r2, [r2, #0]
 8016a8e:	2180      	movs	r1, #128	@ 0x80
 8016a90:	0189      	lsls	r1, r1, #6
 8016a92:	404a      	eors	r2, r1
 8016a94:	801a      	strh	r2, [r3, #0]
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	009b      	lsls	r3, r3, #2
 8016a9e:	18d3      	adds	r3, r2, r3
 8016aa0:	183a      	adds	r2, r7, r0
 8016aa2:	8812      	ldrh	r2, [r2, #0]
 8016aa4:	4906      	ldr	r1, [pc, #24]	@ (8016ac0 <USB_EPStartXfer+0x126c>)
 8016aa6:	430a      	orrs	r2, r1
 8016aa8:	b292      	uxth	r2, r2
 8016aaa:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8016aac:	2300      	movs	r3, #0
}
 8016aae:	0018      	movs	r0, r3
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	b043      	add	sp, #268	@ 0x10c
 8016ab4:	bd90      	pop	{r4, r7, pc}
 8016ab6:	46c0      	nop			@ (mov r8, r8)
 8016ab8:	00000406 	.word	0x00000406
 8016abc:	ffffbf8f 	.word	0xffffbf8f
 8016ac0:	ffff8080 	.word	0xffff8080

08016ac4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b084      	sub	sp, #16
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
 8016acc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	785b      	ldrb	r3, [r3, #1]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d01d      	beq.n	8016b12 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8016ad6:	687a      	ldr	r2, [r7, #4]
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	781b      	ldrb	r3, [r3, #0]
 8016adc:	009b      	lsls	r3, r3, #2
 8016ade:	18d3      	adds	r3, r2, r3
 8016ae0:	881b      	ldrh	r3, [r3, #0]
 8016ae2:	b29a      	uxth	r2, r3
 8016ae4:	200c      	movs	r0, #12
 8016ae6:	183b      	adds	r3, r7, r0
 8016ae8:	491b      	ldr	r1, [pc, #108]	@ (8016b58 <USB_EPSetStall+0x94>)
 8016aea:	400a      	ands	r2, r1
 8016aec:	801a      	strh	r2, [r3, #0]
 8016aee:	183b      	adds	r3, r7, r0
 8016af0:	183a      	adds	r2, r7, r0
 8016af2:	8812      	ldrh	r2, [r2, #0]
 8016af4:	2110      	movs	r1, #16
 8016af6:	404a      	eors	r2, r1
 8016af8:	801a      	strh	r2, [r3, #0]
 8016afa:	687a      	ldr	r2, [r7, #4]
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	009b      	lsls	r3, r3, #2
 8016b02:	18d3      	adds	r3, r2, r3
 8016b04:	183a      	adds	r2, r7, r0
 8016b06:	8812      	ldrh	r2, [r2, #0]
 8016b08:	4914      	ldr	r1, [pc, #80]	@ (8016b5c <USB_EPSetStall+0x98>)
 8016b0a:	430a      	orrs	r2, r1
 8016b0c:	b292      	uxth	r2, r2
 8016b0e:	801a      	strh	r2, [r3, #0]
 8016b10:	e01d      	b.n	8016b4e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8016b12:	687a      	ldr	r2, [r7, #4]
 8016b14:	683b      	ldr	r3, [r7, #0]
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	18d3      	adds	r3, r2, r3
 8016b1c:	881b      	ldrh	r3, [r3, #0]
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	200e      	movs	r0, #14
 8016b22:	183b      	adds	r3, r7, r0
 8016b24:	490e      	ldr	r1, [pc, #56]	@ (8016b60 <USB_EPSetStall+0x9c>)
 8016b26:	400a      	ands	r2, r1
 8016b28:	801a      	strh	r2, [r3, #0]
 8016b2a:	183b      	adds	r3, r7, r0
 8016b2c:	183a      	adds	r2, r7, r0
 8016b2e:	8812      	ldrh	r2, [r2, #0]
 8016b30:	2180      	movs	r1, #128	@ 0x80
 8016b32:	0149      	lsls	r1, r1, #5
 8016b34:	404a      	eors	r2, r1
 8016b36:	801a      	strh	r2, [r3, #0]
 8016b38:	687a      	ldr	r2, [r7, #4]
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	18d3      	adds	r3, r2, r3
 8016b42:	183a      	adds	r2, r7, r0
 8016b44:	8812      	ldrh	r2, [r2, #0]
 8016b46:	4905      	ldr	r1, [pc, #20]	@ (8016b5c <USB_EPSetStall+0x98>)
 8016b48:	430a      	orrs	r2, r1
 8016b4a:	b292      	uxth	r2, r2
 8016b4c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8016b4e:	2300      	movs	r3, #0
}
 8016b50:	0018      	movs	r0, r3
 8016b52:	46bd      	mov	sp, r7
 8016b54:	b004      	add	sp, #16
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	ffff8fbf 	.word	0xffff8fbf
 8016b5c:	ffff8080 	.word	0xffff8080
 8016b60:	ffffbf8f 	.word	0xffffbf8f

08016b64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b086      	sub	sp, #24
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
 8016b6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	7b1b      	ldrb	r3, [r3, #12]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d000      	beq.n	8016b78 <USB_EPClearStall+0x14>
 8016b76:	e095      	b.n	8016ca4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	785b      	ldrb	r3, [r3, #1]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d046      	beq.n	8016c0e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8016b80:	687a      	ldr	r2, [r7, #4]
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	781b      	ldrb	r3, [r3, #0]
 8016b86:	009b      	lsls	r3, r3, #2
 8016b88:	18d2      	adds	r2, r2, r3
 8016b8a:	2110      	movs	r1, #16
 8016b8c:	187b      	adds	r3, r7, r1
 8016b8e:	8812      	ldrh	r2, [r2, #0]
 8016b90:	801a      	strh	r2, [r3, #0]
 8016b92:	187b      	adds	r3, r7, r1
 8016b94:	881b      	ldrh	r3, [r3, #0]
 8016b96:	2240      	movs	r2, #64	@ 0x40
 8016b98:	4013      	ands	r3, r2
 8016b9a:	d016      	beq.n	8016bca <USB_EPClearStall+0x66>
 8016b9c:	687a      	ldr	r2, [r7, #4]
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	009b      	lsls	r3, r3, #2
 8016ba4:	18d3      	adds	r3, r2, r3
 8016ba6:	881b      	ldrh	r3, [r3, #0]
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	200e      	movs	r0, #14
 8016bac:	183b      	adds	r3, r7, r0
 8016bae:	4940      	ldr	r1, [pc, #256]	@ (8016cb0 <USB_EPClearStall+0x14c>)
 8016bb0:	400a      	ands	r2, r1
 8016bb2:	801a      	strh	r2, [r3, #0]
 8016bb4:	687a      	ldr	r2, [r7, #4]
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	009b      	lsls	r3, r3, #2
 8016bbc:	18d3      	adds	r3, r2, r3
 8016bbe:	183a      	adds	r2, r7, r0
 8016bc0:	8812      	ldrh	r2, [r2, #0]
 8016bc2:	493c      	ldr	r1, [pc, #240]	@ (8016cb4 <USB_EPClearStall+0x150>)
 8016bc4:	430a      	orrs	r2, r1
 8016bc6:	b292      	uxth	r2, r2
 8016bc8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	78db      	ldrb	r3, [r3, #3]
 8016bce:	2b01      	cmp	r3, #1
 8016bd0:	d068      	beq.n	8016ca4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8016bd2:	687a      	ldr	r2, [r7, #4]
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	009b      	lsls	r3, r3, #2
 8016bda:	18d3      	adds	r3, r2, r3
 8016bdc:	881b      	ldrh	r3, [r3, #0]
 8016bde:	b29a      	uxth	r2, r3
 8016be0:	200c      	movs	r0, #12
 8016be2:	183b      	adds	r3, r7, r0
 8016be4:	4934      	ldr	r1, [pc, #208]	@ (8016cb8 <USB_EPClearStall+0x154>)
 8016be6:	400a      	ands	r2, r1
 8016be8:	801a      	strh	r2, [r3, #0]
 8016bea:	183b      	adds	r3, r7, r0
 8016bec:	183a      	adds	r2, r7, r0
 8016bee:	8812      	ldrh	r2, [r2, #0]
 8016bf0:	2120      	movs	r1, #32
 8016bf2:	404a      	eors	r2, r1
 8016bf4:	801a      	strh	r2, [r3, #0]
 8016bf6:	687a      	ldr	r2, [r7, #4]
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	009b      	lsls	r3, r3, #2
 8016bfe:	18d3      	adds	r3, r2, r3
 8016c00:	183a      	adds	r2, r7, r0
 8016c02:	8812      	ldrh	r2, [r2, #0]
 8016c04:	492d      	ldr	r1, [pc, #180]	@ (8016cbc <USB_EPClearStall+0x158>)
 8016c06:	430a      	orrs	r2, r1
 8016c08:	b292      	uxth	r2, r2
 8016c0a:	801a      	strh	r2, [r3, #0]
 8016c0c:	e04a      	b.n	8016ca4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	009b      	lsls	r3, r3, #2
 8016c16:	18d2      	adds	r2, r2, r3
 8016c18:	2116      	movs	r1, #22
 8016c1a:	187b      	adds	r3, r7, r1
 8016c1c:	8812      	ldrh	r2, [r2, #0]
 8016c1e:	801a      	strh	r2, [r3, #0]
 8016c20:	187b      	adds	r3, r7, r1
 8016c22:	881a      	ldrh	r2, [r3, #0]
 8016c24:	2380      	movs	r3, #128	@ 0x80
 8016c26:	01db      	lsls	r3, r3, #7
 8016c28:	4013      	ands	r3, r2
 8016c2a:	d016      	beq.n	8016c5a <USB_EPClearStall+0xf6>
 8016c2c:	687a      	ldr	r2, [r7, #4]
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	781b      	ldrb	r3, [r3, #0]
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	18d3      	adds	r3, r2, r3
 8016c36:	881b      	ldrh	r3, [r3, #0]
 8016c38:	b29a      	uxth	r2, r3
 8016c3a:	2014      	movs	r0, #20
 8016c3c:	183b      	adds	r3, r7, r0
 8016c3e:	491c      	ldr	r1, [pc, #112]	@ (8016cb0 <USB_EPClearStall+0x14c>)
 8016c40:	400a      	ands	r2, r1
 8016c42:	801a      	strh	r2, [r3, #0]
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	781b      	ldrb	r3, [r3, #0]
 8016c4a:	009b      	lsls	r3, r3, #2
 8016c4c:	18d3      	adds	r3, r2, r3
 8016c4e:	183a      	adds	r2, r7, r0
 8016c50:	8812      	ldrh	r2, [r2, #0]
 8016c52:	491b      	ldr	r1, [pc, #108]	@ (8016cc0 <USB_EPClearStall+0x15c>)
 8016c54:	430a      	orrs	r2, r1
 8016c56:	b292      	uxth	r2, r2
 8016c58:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8016c5a:	687a      	ldr	r2, [r7, #4]
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	009b      	lsls	r3, r3, #2
 8016c62:	18d3      	adds	r3, r2, r3
 8016c64:	881b      	ldrh	r3, [r3, #0]
 8016c66:	b29a      	uxth	r2, r3
 8016c68:	2012      	movs	r0, #18
 8016c6a:	183b      	adds	r3, r7, r0
 8016c6c:	4915      	ldr	r1, [pc, #84]	@ (8016cc4 <USB_EPClearStall+0x160>)
 8016c6e:	400a      	ands	r2, r1
 8016c70:	801a      	strh	r2, [r3, #0]
 8016c72:	183b      	adds	r3, r7, r0
 8016c74:	183a      	adds	r2, r7, r0
 8016c76:	8812      	ldrh	r2, [r2, #0]
 8016c78:	2180      	movs	r1, #128	@ 0x80
 8016c7a:	0149      	lsls	r1, r1, #5
 8016c7c:	404a      	eors	r2, r1
 8016c7e:	801a      	strh	r2, [r3, #0]
 8016c80:	183b      	adds	r3, r7, r0
 8016c82:	183a      	adds	r2, r7, r0
 8016c84:	8812      	ldrh	r2, [r2, #0]
 8016c86:	2180      	movs	r1, #128	@ 0x80
 8016c88:	0189      	lsls	r1, r1, #6
 8016c8a:	404a      	eors	r2, r1
 8016c8c:	801a      	strh	r2, [r3, #0]
 8016c8e:	687a      	ldr	r2, [r7, #4]
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	781b      	ldrb	r3, [r3, #0]
 8016c94:	009b      	lsls	r3, r3, #2
 8016c96:	18d3      	adds	r3, r2, r3
 8016c98:	183a      	adds	r2, r7, r0
 8016c9a:	8812      	ldrh	r2, [r2, #0]
 8016c9c:	4907      	ldr	r1, [pc, #28]	@ (8016cbc <USB_EPClearStall+0x158>)
 8016c9e:	430a      	orrs	r2, r1
 8016ca0:	b292      	uxth	r2, r2
 8016ca2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8016ca4:	2300      	movs	r3, #0
}
 8016ca6:	0018      	movs	r0, r3
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	b006      	add	sp, #24
 8016cac:	bd80      	pop	{r7, pc}
 8016cae:	46c0      	nop			@ (mov r8, r8)
 8016cb0:	ffff8f8f 	.word	0xffff8f8f
 8016cb4:	ffff80c0 	.word	0xffff80c0
 8016cb8:	ffff8fbf 	.word	0xffff8fbf
 8016cbc:	ffff8080 	.word	0xffff8080
 8016cc0:	ffffc080 	.word	0xffffc080
 8016cc4:	ffffbf8f 	.word	0xffffbf8f

08016cc8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	000a      	movs	r2, r1
 8016cd2:	1cfb      	adds	r3, r7, #3
 8016cd4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8016cd6:	1cfb      	adds	r3, r7, #3
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d103      	bne.n	8016ce6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	224c      	movs	r2, #76	@ 0x4c
 8016ce2:	2180      	movs	r1, #128	@ 0x80
 8016ce4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8016ce6:	2300      	movs	r3, #0
}
 8016ce8:	0018      	movs	r0, r3
 8016cea:	46bd      	mov	sp, r7
 8016cec:	b002      	add	sp, #8
 8016cee:	bd80      	pop	{r7, pc}

08016cf0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b082      	sub	sp, #8
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2258      	movs	r2, #88	@ 0x58
 8016cfc:	5a9b      	ldrh	r3, [r3, r2]
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	4a05      	ldr	r2, [pc, #20]	@ (8016d18 <USB_DevConnect+0x28>)
 8016d02:	4313      	orrs	r3, r2
 8016d04:	b299      	uxth	r1, r3
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2258      	movs	r2, #88	@ 0x58
 8016d0a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8016d0c:	2300      	movs	r3, #0
}
 8016d0e:	0018      	movs	r0, r3
 8016d10:	46bd      	mov	sp, r7
 8016d12:	b002      	add	sp, #8
 8016d14:	bd80      	pop	{r7, pc}
 8016d16:	46c0      	nop			@ (mov r8, r8)
 8016d18:	ffff8000 	.word	0xffff8000

08016d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b084      	sub	sp, #16
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2244      	movs	r2, #68	@ 0x44
 8016d28:	5a9b      	ldrh	r3, [r3, r2]
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
}
 8016d30:	0018      	movs	r0, r3
 8016d32:	46bd      	mov	sp, r7
 8016d34:	b004      	add	sp, #16
 8016d36:	bd80      	pop	{r7, pc}

08016d38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b08a      	sub	sp, #40	@ 0x28
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	60f8      	str	r0, [r7, #12]
 8016d40:	60b9      	str	r1, [r7, #8]
 8016d42:	0019      	movs	r1, r3
 8016d44:	1dbb      	adds	r3, r7, #6
 8016d46:	801a      	strh	r2, [r3, #0]
 8016d48:	1d3b      	adds	r3, r7, #4
 8016d4a:	1c0a      	adds	r2, r1, #0
 8016d4c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8016d4e:	1d3b      	adds	r3, r7, #4
 8016d50:	881b      	ldrh	r3, [r3, #0]
 8016d52:	3301      	adds	r3, #1
 8016d54:	085b      	lsrs	r3, r3, #1
 8016d56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8016d60:	1dbb      	adds	r3, r7, #6
 8016d62:	881a      	ldrh	r2, [r3, #0]
 8016d64:	697b      	ldr	r3, [r7, #20]
 8016d66:	18d3      	adds	r3, r2, r3
 8016d68:	2280      	movs	r2, #128	@ 0x80
 8016d6a:	00d2      	lsls	r2, r2, #3
 8016d6c:	4694      	mov	ip, r2
 8016d6e:	4463      	add	r3, ip
 8016d70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8016d76:	e020      	b.n	8016dba <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8016d78:	69fb      	ldr	r3, [r7, #28]
 8016d7a:	781a      	ldrb	r2, [r3, #0]
 8016d7c:	2112      	movs	r1, #18
 8016d7e:	187b      	adds	r3, r7, r1
 8016d80:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8016d82:	69fb      	ldr	r3, [r7, #28]
 8016d84:	3301      	adds	r3, #1
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	021b      	lsls	r3, r3, #8
 8016d8a:	b21a      	sxth	r2, r3
 8016d8c:	187b      	adds	r3, r7, r1
 8016d8e:	2000      	movs	r0, #0
 8016d90:	5e1b      	ldrsh	r3, [r3, r0]
 8016d92:	4313      	orrs	r3, r2
 8016d94:	b21a      	sxth	r2, r3
 8016d96:	187b      	adds	r3, r7, r1
 8016d98:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8016d9a:	6a3b      	ldr	r3, [r7, #32]
 8016d9c:	187a      	adds	r2, r7, r1
 8016d9e:	8812      	ldrh	r2, [r2, #0]
 8016da0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8016da2:	6a3b      	ldr	r3, [r7, #32]
 8016da4:	3302      	adds	r3, #2
 8016da6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	3301      	adds	r3, #1
 8016dac:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	3301      	adds	r3, #1
 8016db2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8016db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016db6:	3b01      	subs	r3, #1
 8016db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8016dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d1db      	bne.n	8016d78 <USB_WritePMA+0x40>
  }
}
 8016dc0:	46c0      	nop			@ (mov r8, r8)
 8016dc2:	46c0      	nop			@ (mov r8, r8)
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	b00a      	add	sp, #40	@ 0x28
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b08a      	sub	sp, #40	@ 0x28
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	60f8      	str	r0, [r7, #12]
 8016dd2:	60b9      	str	r1, [r7, #8]
 8016dd4:	0019      	movs	r1, r3
 8016dd6:	1dbb      	adds	r3, r7, #6
 8016dd8:	801a      	strh	r2, [r3, #0]
 8016dda:	1d3b      	adds	r3, r7, #4
 8016ddc:	1c0a      	adds	r2, r1, #0
 8016dde:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8016de0:	1d3b      	adds	r3, r7, #4
 8016de2:	881b      	ldrh	r3, [r3, #0]
 8016de4:	085b      	lsrs	r3, r3, #1
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8016df2:	1dbb      	adds	r3, r7, #6
 8016df4:	881a      	ldrh	r2, [r3, #0]
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	18d3      	adds	r3, r2, r3
 8016dfa:	2280      	movs	r2, #128	@ 0x80
 8016dfc:	00d2      	lsls	r2, r2, #3
 8016dfe:	4694      	mov	ip, r2
 8016e00:	4463      	add	r3, ip
 8016e02:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8016e04:	69bb      	ldr	r3, [r7, #24]
 8016e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e08:	e018      	b.n	8016e3c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8016e0a:	6a3b      	ldr	r3, [r7, #32]
 8016e0c:	881b      	ldrh	r3, [r3, #0]
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8016e12:	6a3b      	ldr	r3, [r7, #32]
 8016e14:	3302      	adds	r3, #2
 8016e16:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	b2da      	uxtb	r2, r3
 8016e1c:	69fb      	ldr	r3, [r7, #28]
 8016e1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	3301      	adds	r3, #1
 8016e24:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	0a1b      	lsrs	r3, r3, #8
 8016e2a:	b2da      	uxtb	r2, r3
 8016e2c:	69fb      	ldr	r3, [r7, #28]
 8016e2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8016e30:	69fb      	ldr	r3, [r7, #28]
 8016e32:	3301      	adds	r3, #1
 8016e34:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8016e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e38:	3b01      	subs	r3, #1
 8016e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d1e3      	bne.n	8016e0a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8016e42:	1d3b      	adds	r3, r7, #4
 8016e44:	881b      	ldrh	r3, [r3, #0]
 8016e46:	2201      	movs	r2, #1
 8016e48:	4013      	ands	r3, r2
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d007      	beq.n	8016e60 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8016e50:	6a3b      	ldr	r3, [r7, #32]
 8016e52:	881b      	ldrh	r3, [r3, #0]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	b2da      	uxtb	r2, r3
 8016e5c:	69fb      	ldr	r3, [r7, #28]
 8016e5e:	701a      	strb	r2, [r3, #0]
  }
}
 8016e60:	46c0      	nop			@ (mov r8, r8)
 8016e62:	46bd      	mov	sp, r7
 8016e64:	b00a      	add	sp, #40	@ 0x28
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b084      	sub	sp, #16
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	000a      	movs	r2, r1
 8016e72:	1cfb      	adds	r3, r7, #3
 8016e74:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8016e76:	230f      	movs	r3, #15
 8016e78:	18fb      	adds	r3, r7, r3
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	7c1b      	ldrb	r3, [r3, #16]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d116      	bne.n	8016eb4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016e86:	2380      	movs	r3, #128	@ 0x80
 8016e88:	009b      	lsls	r3, r3, #2
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	2202      	movs	r2, #2
 8016e8e:	2181      	movs	r1, #129	@ 0x81
 8016e90:	f002 f8eb 	bl	801906a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2201      	movs	r2, #1
 8016e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016e9a:	2380      	movs	r3, #128	@ 0x80
 8016e9c:	009b      	lsls	r3, r3, #2
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	2202      	movs	r2, #2
 8016ea2:	2101      	movs	r1, #1
 8016ea4:	f002 f8e1 	bl	801906a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	23b6      	movs	r3, #182	@ 0xb6
 8016eac:	005b      	lsls	r3, r3, #1
 8016eae:	2101      	movs	r1, #1
 8016eb0:	50d1      	str	r1, [r2, r3]
 8016eb2:	e013      	b.n	8016edc <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	2340      	movs	r3, #64	@ 0x40
 8016eb8:	2202      	movs	r2, #2
 8016eba:	2181      	movs	r1, #129	@ 0x81
 8016ebc:	f002 f8d5 	bl	801906a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2201      	movs	r2, #1
 8016ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	2340      	movs	r3, #64	@ 0x40
 8016eca:	2202      	movs	r2, #2
 8016ecc:	2101      	movs	r1, #1
 8016ece:	f002 f8cc 	bl	801906a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016ed2:	687a      	ldr	r2, [r7, #4]
 8016ed4:	23b6      	movs	r3, #182	@ 0xb6
 8016ed6:	005b      	lsls	r3, r3, #1
 8016ed8:	2101      	movs	r1, #1
 8016eda:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	2308      	movs	r3, #8
 8016ee0:	2203      	movs	r2, #3
 8016ee2:	2182      	movs	r1, #130	@ 0x82
 8016ee4:	f002 f8c1 	bl	801906a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2201      	movs	r2, #1
 8016eec:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016eee:	2387      	movs	r3, #135	@ 0x87
 8016ef0:	009b      	lsls	r3, r3, #2
 8016ef2:	0018      	movs	r0, r3
 8016ef4:	f002 fa52 	bl	801939c <USBD_static_malloc>
 8016ef8:	0001      	movs	r1, r0
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	23ae      	movs	r3, #174	@ 0xae
 8016efe:	009b      	lsls	r3, r3, #2
 8016f00:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8016f02:	687a      	ldr	r2, [r7, #4]
 8016f04:	23ae      	movs	r3, #174	@ 0xae
 8016f06:	009b      	lsls	r3, r3, #2
 8016f08:	58d3      	ldr	r3, [r2, r3]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d104      	bne.n	8016f18 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8016f0e:	230f      	movs	r3, #15
 8016f10:	18fb      	adds	r3, r7, r3
 8016f12:	2201      	movs	r2, #1
 8016f14:	701a      	strb	r2, [r3, #0]
 8016f16:	e02c      	b.n	8016f72 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016f18:	687a      	ldr	r2, [r7, #4]
 8016f1a:	23ae      	movs	r3, #174	@ 0xae
 8016f1c:	009b      	lsls	r3, r3, #2
 8016f1e:	58d3      	ldr	r3, [r2, r3]
 8016f20:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	23af      	movs	r3, #175	@ 0xaf
 8016f26:	009b      	lsls	r3, r3, #2
 8016f28:	58d3      	ldr	r3, [r2, r3]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8016f2e:	68ba      	ldr	r2, [r7, #8]
 8016f30:	2385      	movs	r3, #133	@ 0x85
 8016f32:	009b      	lsls	r3, r3, #2
 8016f34:	2100      	movs	r1, #0
 8016f36:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8016f38:	68ba      	ldr	r2, [r7, #8]
 8016f3a:	2386      	movs	r3, #134	@ 0x86
 8016f3c:	009b      	lsls	r3, r3, #2
 8016f3e:	2100      	movs	r1, #0
 8016f40:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	7c1b      	ldrb	r3, [r3, #16]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d10a      	bne.n	8016f60 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016f4a:	68ba      	ldr	r2, [r7, #8]
 8016f4c:	2381      	movs	r3, #129	@ 0x81
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	58d2      	ldr	r2, [r2, r3]
 8016f52:	2380      	movs	r3, #128	@ 0x80
 8016f54:	009b      	lsls	r3, r3, #2
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	2101      	movs	r1, #1
 8016f5a:	f002 f9d1 	bl	8019300 <USBD_LL_PrepareReceive>
 8016f5e:	e008      	b.n	8016f72 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016f60:	68ba      	ldr	r2, [r7, #8]
 8016f62:	2381      	movs	r3, #129	@ 0x81
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	58d2      	ldr	r2, [r2, r3]
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	2340      	movs	r3, #64	@ 0x40
 8016f6c:	2101      	movs	r1, #1
 8016f6e:	f002 f9c7 	bl	8019300 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8016f72:	230f      	movs	r3, #15
 8016f74:	18fb      	adds	r3, r7, r3
 8016f76:	781b      	ldrb	r3, [r3, #0]
}
 8016f78:	0018      	movs	r0, r3
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	b004      	add	sp, #16
 8016f7e:	bd80      	pop	{r7, pc}

08016f80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b084      	sub	sp, #16
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
 8016f88:	000a      	movs	r2, r1
 8016f8a:	1cfb      	adds	r3, r7, #3
 8016f8c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8016f8e:	230f      	movs	r3, #15
 8016f90:	18fb      	adds	r3, r7, r3
 8016f92:	2200      	movs	r2, #0
 8016f94:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	2181      	movs	r1, #129	@ 0x81
 8016f9a:	0018      	movs	r0, r3
 8016f9c:	f002 f89c 	bl	80190d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2101      	movs	r1, #1
 8016faa:	0018      	movs	r0, r3
 8016fac:	f002 f894 	bl	80190d8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016fb0:	687a      	ldr	r2, [r7, #4]
 8016fb2:	23b6      	movs	r3, #182	@ 0xb6
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	2100      	movs	r1, #0
 8016fb8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	2182      	movs	r1, #130	@ 0x82
 8016fbe:	0018      	movs	r0, r3
 8016fc0:	f002 f88a 	bl	80190d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016fca:	687a      	ldr	r2, [r7, #4]
 8016fcc:	23ae      	movs	r3, #174	@ 0xae
 8016fce:	009b      	lsls	r3, r3, #2
 8016fd0:	58d3      	ldr	r3, [r2, r3]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d011      	beq.n	8016ffa <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	23af      	movs	r3, #175	@ 0xaf
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	58d3      	ldr	r3, [r2, r3]
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8016fe2:	687a      	ldr	r2, [r7, #4]
 8016fe4:	23ae      	movs	r3, #174	@ 0xae
 8016fe6:	009b      	lsls	r3, r3, #2
 8016fe8:	58d3      	ldr	r3, [r2, r3]
 8016fea:	0018      	movs	r0, r3
 8016fec:	f002 f9e2 	bl	80193b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8016ff0:	687a      	ldr	r2, [r7, #4]
 8016ff2:	23ae      	movs	r3, #174	@ 0xae
 8016ff4:	009b      	lsls	r3, r3, #2
 8016ff6:	2100      	movs	r1, #0
 8016ff8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8016ffa:	230f      	movs	r3, #15
 8016ffc:	18fb      	adds	r3, r7, r3
 8016ffe:	781b      	ldrb	r3, [r3, #0]
}
 8017000:	0018      	movs	r0, r3
 8017002:	46bd      	mov	sp, r7
 8017004:	b004      	add	sp, #16
 8017006:	bd80      	pop	{r7, pc}

08017008 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b086      	sub	sp, #24
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
 8017010:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017012:	687a      	ldr	r2, [r7, #4]
 8017014:	23ae      	movs	r3, #174	@ 0xae
 8017016:	009b      	lsls	r3, r3, #2
 8017018:	58d3      	ldr	r3, [r2, r3]
 801701a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801701c:	230f      	movs	r3, #15
 801701e:	18fb      	adds	r3, r7, r3
 8017020:	2200      	movs	r2, #0
 8017022:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8017024:	230c      	movs	r3, #12
 8017026:	18fb      	adds	r3, r7, r3
 8017028:	2200      	movs	r2, #0
 801702a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801702c:	2317      	movs	r3, #23
 801702e:	18fb      	adds	r3, r7, r3
 8017030:	2200      	movs	r2, #0
 8017032:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	001a      	movs	r2, r3
 801703a:	2360      	movs	r3, #96	@ 0x60
 801703c:	4013      	ands	r3, r2
 801703e:	d03d      	beq.n	80170bc <USBD_CDC_Setup+0xb4>
 8017040:	2b20      	cmp	r3, #32
 8017042:	d000      	beq.n	8017046 <USBD_CDC_Setup+0x3e>
 8017044:	e094      	b.n	8017170 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	88db      	ldrh	r3, [r3, #6]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d02b      	beq.n	80170a6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	b25b      	sxtb	r3, r3
 8017054:	2b00      	cmp	r3, #0
 8017056:	da12      	bge.n	801707e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017058:	687a      	ldr	r2, [r7, #4]
 801705a:	23af      	movs	r3, #175	@ 0xaf
 801705c:	009b      	lsls	r3, r3, #2
 801705e:	58d3      	ldr	r3, [r2, r3]
 8017060:	689b      	ldr	r3, [r3, #8]
 8017062:	683a      	ldr	r2, [r7, #0]
 8017064:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8017066:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017068:	683a      	ldr	r2, [r7, #0]
 801706a:	88d2      	ldrh	r2, [r2, #6]
 801706c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801706e:	6939      	ldr	r1, [r7, #16]
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	88da      	ldrh	r2, [r3, #6]
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	0018      	movs	r0, r3
 8017078:	f001 fbaf 	bl	80187da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801707c:	e083      	b.n	8017186 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	7859      	ldrb	r1, [r3, #1]
 8017082:	693a      	ldr	r2, [r7, #16]
 8017084:	2380      	movs	r3, #128	@ 0x80
 8017086:	009b      	lsls	r3, r3, #2
 8017088:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	88db      	ldrh	r3, [r3, #6]
 801708e:	b2d9      	uxtb	r1, r3
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	4a40      	ldr	r2, [pc, #256]	@ (8017194 <USBD_CDC_Setup+0x18c>)
 8017094:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8017096:	6939      	ldr	r1, [r7, #16]
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	88da      	ldrh	r2, [r3, #6]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	0018      	movs	r0, r3
 80170a0:	f001 fbce 	bl	8018840 <USBD_CtlPrepareRx>
      break;
 80170a4:	e06f      	b.n	8017186 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80170a6:	687a      	ldr	r2, [r7, #4]
 80170a8:	23af      	movs	r3, #175	@ 0xaf
 80170aa:	009b      	lsls	r3, r3, #2
 80170ac:	58d3      	ldr	r3, [r2, r3]
 80170ae:	689b      	ldr	r3, [r3, #8]
 80170b0:	683a      	ldr	r2, [r7, #0]
 80170b2:	7850      	ldrb	r0, [r2, #1]
 80170b4:	6839      	ldr	r1, [r7, #0]
 80170b6:	2200      	movs	r2, #0
 80170b8:	4798      	blx	r3
      break;
 80170ba:	e064      	b.n	8017186 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	785b      	ldrb	r3, [r3, #1]
 80170c0:	2b0b      	cmp	r3, #11
 80170c2:	d037      	beq.n	8017134 <USBD_CDC_Setup+0x12c>
 80170c4:	dc47      	bgt.n	8017156 <USBD_CDC_Setup+0x14e>
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d002      	beq.n	80170d0 <USBD_CDC_Setup+0xc8>
 80170ca:	2b0a      	cmp	r3, #10
 80170cc:	d019      	beq.n	8017102 <USBD_CDC_Setup+0xfa>
 80170ce:	e042      	b.n	8017156 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170d0:	687a      	ldr	r2, [r7, #4]
 80170d2:	23a7      	movs	r3, #167	@ 0xa7
 80170d4:	009b      	lsls	r3, r3, #2
 80170d6:	5cd3      	ldrb	r3, [r2, r3]
 80170d8:	2b03      	cmp	r3, #3
 80170da:	d107      	bne.n	80170ec <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80170dc:	230c      	movs	r3, #12
 80170de:	18f9      	adds	r1, r7, r3
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2202      	movs	r2, #2
 80170e4:	0018      	movs	r0, r3
 80170e6:	f001 fb78 	bl	80187da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80170ea:	e040      	b.n	801716e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80170ec:	683a      	ldr	r2, [r7, #0]
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	0011      	movs	r1, r2
 80170f2:	0018      	movs	r0, r3
 80170f4:	f001 faf3 	bl	80186de <USBD_CtlError>
            ret = USBD_FAIL;
 80170f8:	2317      	movs	r3, #23
 80170fa:	18fb      	adds	r3, r7, r3
 80170fc:	2202      	movs	r2, #2
 80170fe:	701a      	strb	r2, [r3, #0]
          break;
 8017100:	e035      	b.n	801716e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017102:	687a      	ldr	r2, [r7, #4]
 8017104:	23a7      	movs	r3, #167	@ 0xa7
 8017106:	009b      	lsls	r3, r3, #2
 8017108:	5cd3      	ldrb	r3, [r2, r3]
 801710a:	2b03      	cmp	r3, #3
 801710c:	d107      	bne.n	801711e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801710e:	230f      	movs	r3, #15
 8017110:	18f9      	adds	r1, r7, r3
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	2201      	movs	r2, #1
 8017116:	0018      	movs	r0, r3
 8017118:	f001 fb5f 	bl	80187da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801711c:	e027      	b.n	801716e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801711e:	683a      	ldr	r2, [r7, #0]
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	0011      	movs	r1, r2
 8017124:	0018      	movs	r0, r3
 8017126:	f001 fada 	bl	80186de <USBD_CtlError>
            ret = USBD_FAIL;
 801712a:	2317      	movs	r3, #23
 801712c:	18fb      	adds	r3, r7, r3
 801712e:	2202      	movs	r2, #2
 8017130:	701a      	strb	r2, [r3, #0]
          break;
 8017132:	e01c      	b.n	801716e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	23a7      	movs	r3, #167	@ 0xa7
 8017138:	009b      	lsls	r3, r3, #2
 801713a:	5cd3      	ldrb	r3, [r2, r3]
 801713c:	2b03      	cmp	r3, #3
 801713e:	d015      	beq.n	801716c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8017140:	683a      	ldr	r2, [r7, #0]
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	0011      	movs	r1, r2
 8017146:	0018      	movs	r0, r3
 8017148:	f001 fac9 	bl	80186de <USBD_CtlError>
            ret = USBD_FAIL;
 801714c:	2317      	movs	r3, #23
 801714e:	18fb      	adds	r3, r7, r3
 8017150:	2202      	movs	r2, #2
 8017152:	701a      	strb	r2, [r3, #0]
          }
          break;
 8017154:	e00a      	b.n	801716c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8017156:	683a      	ldr	r2, [r7, #0]
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	0011      	movs	r1, r2
 801715c:	0018      	movs	r0, r3
 801715e:	f001 fabe 	bl	80186de <USBD_CtlError>
          ret = USBD_FAIL;
 8017162:	2317      	movs	r3, #23
 8017164:	18fb      	adds	r3, r7, r3
 8017166:	2202      	movs	r2, #2
 8017168:	701a      	strb	r2, [r3, #0]
          break;
 801716a:	e000      	b.n	801716e <USBD_CDC_Setup+0x166>
          break;
 801716c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801716e:	e00a      	b.n	8017186 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8017170:	683a      	ldr	r2, [r7, #0]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	0011      	movs	r1, r2
 8017176:	0018      	movs	r0, r3
 8017178:	f001 fab1 	bl	80186de <USBD_CtlError>
      ret = USBD_FAIL;
 801717c:	2317      	movs	r3, #23
 801717e:	18fb      	adds	r3, r7, r3
 8017180:	2202      	movs	r2, #2
 8017182:	701a      	strb	r2, [r3, #0]
      break;
 8017184:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8017186:	2317      	movs	r3, #23
 8017188:	18fb      	adds	r3, r7, r3
 801718a:	781b      	ldrb	r3, [r3, #0]
}
 801718c:	0018      	movs	r0, r3
 801718e:	46bd      	mov	sp, r7
 8017190:	b006      	add	sp, #24
 8017192:	bd80      	pop	{r7, pc}
 8017194:	00000201 	.word	0x00000201

08017198 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b084      	sub	sp, #16
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	000a      	movs	r2, r1
 80171a2:	1cfb      	adds	r3, r7, #3
 80171a4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	23ae      	movs	r3, #174	@ 0xae
 80171aa:	009b      	lsls	r3, r3, #2
 80171ac:	58d3      	ldr	r3, [r2, r3]
 80171ae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80171b0:	687a      	ldr	r2, [r7, #4]
 80171b2:	23b0      	movs	r3, #176	@ 0xb0
 80171b4:	009b      	lsls	r3, r3, #2
 80171b6:	58d3      	ldr	r3, [r2, r3]
 80171b8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80171ba:	687a      	ldr	r2, [r7, #4]
 80171bc:	23ae      	movs	r3, #174	@ 0xae
 80171be:	009b      	lsls	r3, r3, #2
 80171c0:	58d3      	ldr	r3, [r2, r3]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d03e      	beq.n	8017244 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80171c6:	1cfb      	adds	r3, r7, #3
 80171c8:	781a      	ldrb	r2, [r3, #0]
 80171ca:	6879      	ldr	r1, [r7, #4]
 80171cc:	0013      	movs	r3, r2
 80171ce:	009b      	lsls	r3, r3, #2
 80171d0:	189b      	adds	r3, r3, r2
 80171d2:	009b      	lsls	r3, r3, #2
 80171d4:	18cb      	adds	r3, r1, r3
 80171d6:	331c      	adds	r3, #28
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d02b      	beq.n	8017236 <USBD_CDC_DataIn+0x9e>
 80171de:	1cfb      	adds	r3, r7, #3
 80171e0:	781a      	ldrb	r2, [r3, #0]
 80171e2:	6879      	ldr	r1, [r7, #4]
 80171e4:	0013      	movs	r3, r2
 80171e6:	009b      	lsls	r3, r3, #2
 80171e8:	189b      	adds	r3, r3, r2
 80171ea:	009b      	lsls	r3, r3, #2
 80171ec:	18cb      	adds	r3, r1, r3
 80171ee:	331c      	adds	r3, #28
 80171f0:	6818      	ldr	r0, [r3, #0]
 80171f2:	1cfb      	adds	r3, r7, #3
 80171f4:	781a      	ldrb	r2, [r3, #0]
 80171f6:	68b9      	ldr	r1, [r7, #8]
 80171f8:	0013      	movs	r3, r2
 80171fa:	009b      	lsls	r3, r3, #2
 80171fc:	189b      	adds	r3, r3, r2
 80171fe:	00db      	lsls	r3, r3, #3
 8017200:	18cb      	adds	r3, r1, r3
 8017202:	3338      	adds	r3, #56	@ 0x38
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	0019      	movs	r1, r3
 8017208:	f7e9 f852 	bl	80002b0 <__aeabi_uidivmod>
 801720c:	1e0b      	subs	r3, r1, #0
 801720e:	d112      	bne.n	8017236 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8017210:	1cfb      	adds	r3, r7, #3
 8017212:	781a      	ldrb	r2, [r3, #0]
 8017214:	6879      	ldr	r1, [r7, #4]
 8017216:	0013      	movs	r3, r2
 8017218:	009b      	lsls	r3, r3, #2
 801721a:	189b      	adds	r3, r3, r2
 801721c:	009b      	lsls	r3, r3, #2
 801721e:	18cb      	adds	r3, r1, r3
 8017220:	331c      	adds	r3, #28
 8017222:	2200      	movs	r2, #0
 8017224:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017226:	1cfb      	adds	r3, r7, #3
 8017228:	7819      	ldrb	r1, [r3, #0]
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	2300      	movs	r3, #0
 801722e:	2200      	movs	r2, #0
 8017230:	f002 f82f 	bl	8019292 <USBD_LL_Transmit>
 8017234:	e004      	b.n	8017240 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8017236:	68fa      	ldr	r2, [r7, #12]
 8017238:	2385      	movs	r3, #133	@ 0x85
 801723a:	009b      	lsls	r3, r3, #2
 801723c:	2100      	movs	r1, #0
 801723e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8017240:	2300      	movs	r3, #0
 8017242:	e000      	b.n	8017246 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8017244:	2302      	movs	r3, #2
  }
}
 8017246:	0018      	movs	r0, r3
 8017248:	46bd      	mov	sp, r7
 801724a:	b004      	add	sp, #16
 801724c:	bd80      	pop	{r7, pc}

0801724e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801724e:	b580      	push	{r7, lr}
 8017250:	b084      	sub	sp, #16
 8017252:	af00      	add	r7, sp, #0
 8017254:	6078      	str	r0, [r7, #4]
 8017256:	000a      	movs	r2, r1
 8017258:	1cfb      	adds	r3, r7, #3
 801725a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801725c:	687a      	ldr	r2, [r7, #4]
 801725e:	23ae      	movs	r3, #174	@ 0xae
 8017260:	009b      	lsls	r3, r3, #2
 8017262:	58d3      	ldr	r3, [r2, r3]
 8017264:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017266:	1cfb      	adds	r3, r7, #3
 8017268:	781a      	ldrb	r2, [r3, #0]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	0011      	movs	r1, r2
 801726e:	0018      	movs	r0, r3
 8017270:	f002 f87d 	bl	801936e <USBD_LL_GetRxDataSize>
 8017274:	0001      	movs	r1, r0
 8017276:	68fa      	ldr	r2, [r7, #12]
 8017278:	2383      	movs	r3, #131	@ 0x83
 801727a:	009b      	lsls	r3, r3, #2
 801727c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801727e:	687a      	ldr	r2, [r7, #4]
 8017280:	23ae      	movs	r3, #174	@ 0xae
 8017282:	009b      	lsls	r3, r3, #2
 8017284:	58d3      	ldr	r3, [r2, r3]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d011      	beq.n	80172ae <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801728a:	687a      	ldr	r2, [r7, #4]
 801728c:	23af      	movs	r3, #175	@ 0xaf
 801728e:	009b      	lsls	r3, r3, #2
 8017290:	58d3      	ldr	r3, [r2, r3]
 8017292:	68da      	ldr	r2, [r3, #12]
 8017294:	68f9      	ldr	r1, [r7, #12]
 8017296:	2381      	movs	r3, #129	@ 0x81
 8017298:	009b      	lsls	r3, r3, #2
 801729a:	58c8      	ldr	r0, [r1, r3]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2183      	movs	r1, #131	@ 0x83
 80172a0:	0089      	lsls	r1, r1, #2
 80172a2:	468c      	mov	ip, r1
 80172a4:	4463      	add	r3, ip
 80172a6:	0019      	movs	r1, r3
 80172a8:	4790      	blx	r2

    return USBD_OK;
 80172aa:	2300      	movs	r3, #0
 80172ac:	e000      	b.n	80172b0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80172ae:	2302      	movs	r3, #2
  }
}
 80172b0:	0018      	movs	r0, r3
 80172b2:	46bd      	mov	sp, r7
 80172b4:	b004      	add	sp, #16
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80172b8:	b590      	push	{r4, r7, lr}
 80172ba:	b085      	sub	sp, #20
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80172c0:	687a      	ldr	r2, [r7, #4]
 80172c2:	23ae      	movs	r3, #174	@ 0xae
 80172c4:	009b      	lsls	r3, r3, #2
 80172c6:	58d3      	ldr	r3, [r2, r3]
 80172c8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80172ca:	687a      	ldr	r2, [r7, #4]
 80172cc:	23af      	movs	r3, #175	@ 0xaf
 80172ce:	009b      	lsls	r3, r3, #2
 80172d0:	58d3      	ldr	r3, [r2, r3]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d018      	beq.n	8017308 <USBD_CDC_EP0_RxReady+0x50>
 80172d6:	68fa      	ldr	r2, [r7, #12]
 80172d8:	2380      	movs	r3, #128	@ 0x80
 80172da:	009b      	lsls	r3, r3, #2
 80172dc:	5cd3      	ldrb	r3, [r2, r3]
 80172de:	2bff      	cmp	r3, #255	@ 0xff
 80172e0:	d012      	beq.n	8017308 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80172e2:	687a      	ldr	r2, [r7, #4]
 80172e4:	23af      	movs	r3, #175	@ 0xaf
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	58d3      	ldr	r3, [r2, r3]
 80172ea:	689b      	ldr	r3, [r3, #8]
 80172ec:	68f9      	ldr	r1, [r7, #12]
 80172ee:	2280      	movs	r2, #128	@ 0x80
 80172f0:	0092      	lsls	r2, r2, #2
 80172f2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80172f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80172f6:	68fa      	ldr	r2, [r7, #12]
 80172f8:	4c06      	ldr	r4, [pc, #24]	@ (8017314 <USBD_CDC_EP0_RxReady+0x5c>)
 80172fa:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80172fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80172fe:	68fa      	ldr	r2, [r7, #12]
 8017300:	2380      	movs	r3, #128	@ 0x80
 8017302:	009b      	lsls	r3, r3, #2
 8017304:	21ff      	movs	r1, #255	@ 0xff
 8017306:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8017308:	2300      	movs	r3, #0
}
 801730a:	0018      	movs	r0, r3
 801730c:	46bd      	mov	sp, r7
 801730e:	b005      	add	sp, #20
 8017310:	bd90      	pop	{r4, r7, pc}
 8017312:	46c0      	nop			@ (mov r8, r8)
 8017314:	00000201 	.word	0x00000201

08017318 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2243      	movs	r2, #67	@ 0x43
 8017324:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8017326:	4b02      	ldr	r3, [pc, #8]	@ (8017330 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8017328:	0018      	movs	r0, r3
 801732a:	46bd      	mov	sp, r7
 801732c:	b002      	add	sp, #8
 801732e:	bd80      	pop	{r7, pc}
 8017330:	2000016c 	.word	0x2000016c

08017334 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2243      	movs	r2, #67	@ 0x43
 8017340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8017342:	4b02      	ldr	r3, [pc, #8]	@ (801734c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8017344:	0018      	movs	r0, r3
 8017346:	46bd      	mov	sp, r7
 8017348:	b002      	add	sp, #8
 801734a:	bd80      	pop	{r7, pc}
 801734c:	20000128 	.word	0x20000128

08017350 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2243      	movs	r2, #67	@ 0x43
 801735c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801735e:	4b02      	ldr	r3, [pc, #8]	@ (8017368 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8017360:	0018      	movs	r0, r3
 8017362:	46bd      	mov	sp, r7
 8017364:	b002      	add	sp, #8
 8017366:	bd80      	pop	{r7, pc}
 8017368:	200001b0 	.word	0x200001b0

0801736c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	220a      	movs	r2, #10
 8017378:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801737a:	4b02      	ldr	r3, [pc, #8]	@ (8017384 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801737c:	0018      	movs	r0, r3
 801737e:	46bd      	mov	sp, r7
 8017380:	b002      	add	sp, #8
 8017382:	bd80      	pop	{r7, pc}
 8017384:	200000e4 	.word	0x200000e4

08017388 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8017392:	200f      	movs	r0, #15
 8017394:	183b      	adds	r3, r7, r0
 8017396:	2202      	movs	r2, #2
 8017398:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d007      	beq.n	80173b0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80173a0:	687a      	ldr	r2, [r7, #4]
 80173a2:	23af      	movs	r3, #175	@ 0xaf
 80173a4:	009b      	lsls	r3, r3, #2
 80173a6:	6839      	ldr	r1, [r7, #0]
 80173a8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80173aa:	183b      	adds	r3, r7, r0
 80173ac:	2200      	movs	r2, #0
 80173ae:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80173b0:	230f      	movs	r3, #15
 80173b2:	18fb      	adds	r3, r7, r3
 80173b4:	781b      	ldrb	r3, [r3, #0]
}
 80173b6:	0018      	movs	r0, r3
 80173b8:	46bd      	mov	sp, r7
 80173ba:	b004      	add	sp, #16
 80173bc:	bd80      	pop	{r7, pc}

080173be <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80173be:	b580      	push	{r7, lr}
 80173c0:	b086      	sub	sp, #24
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	60f8      	str	r0, [r7, #12]
 80173c6:	60b9      	str	r1, [r7, #8]
 80173c8:	1dbb      	adds	r3, r7, #6
 80173ca:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80173cc:	68fa      	ldr	r2, [r7, #12]
 80173ce:	23ae      	movs	r3, #174	@ 0xae
 80173d0:	009b      	lsls	r3, r3, #2
 80173d2:	58d3      	ldr	r3, [r2, r3]
 80173d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80173d6:	697a      	ldr	r2, [r7, #20]
 80173d8:	2382      	movs	r3, #130	@ 0x82
 80173da:	009b      	lsls	r3, r3, #2
 80173dc:	68b9      	ldr	r1, [r7, #8]
 80173de:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80173e0:	1dbb      	adds	r3, r7, #6
 80173e2:	8819      	ldrh	r1, [r3, #0]
 80173e4:	697a      	ldr	r2, [r7, #20]
 80173e6:	2384      	movs	r3, #132	@ 0x84
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80173ec:	2300      	movs	r3, #0
}
 80173ee:	0018      	movs	r0, r3
 80173f0:	46bd      	mov	sp, r7
 80173f2:	b006      	add	sp, #24
 80173f4:	bd80      	pop	{r7, pc}

080173f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80173f6:	b580      	push	{r7, lr}
 80173f8:	b084      	sub	sp, #16
 80173fa:	af00      	add	r7, sp, #0
 80173fc:	6078      	str	r0, [r7, #4]
 80173fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	23ae      	movs	r3, #174	@ 0xae
 8017404:	009b      	lsls	r3, r3, #2
 8017406:	58d3      	ldr	r3, [r2, r3]
 8017408:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801740a:	68fa      	ldr	r2, [r7, #12]
 801740c:	2381      	movs	r3, #129	@ 0x81
 801740e:	009b      	lsls	r3, r3, #2
 8017410:	6839      	ldr	r1, [r7, #0]
 8017412:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017414:	2300      	movs	r3, #0
}
 8017416:	0018      	movs	r0, r3
 8017418:	46bd      	mov	sp, r7
 801741a:	b004      	add	sp, #16
 801741c:	bd80      	pop	{r7, pc}

0801741e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801741e:	b580      	push	{r7, lr}
 8017420:	b084      	sub	sp, #16
 8017422:	af00      	add	r7, sp, #0
 8017424:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017426:	687a      	ldr	r2, [r7, #4]
 8017428:	23ae      	movs	r3, #174	@ 0xae
 801742a:	009b      	lsls	r3, r3, #2
 801742c:	58d3      	ldr	r3, [r2, r3]
 801742e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8017430:	687a      	ldr	r2, [r7, #4]
 8017432:	23ae      	movs	r3, #174	@ 0xae
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	58d3      	ldr	r3, [r2, r3]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d022      	beq.n	8017482 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801743c:	68fa      	ldr	r2, [r7, #12]
 801743e:	2385      	movs	r3, #133	@ 0x85
 8017440:	009b      	lsls	r3, r3, #2
 8017442:	58d3      	ldr	r3, [r2, r3]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d11a      	bne.n	801747e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8017448:	68fa      	ldr	r2, [r7, #12]
 801744a:	2385      	movs	r3, #133	@ 0x85
 801744c:	009b      	lsls	r3, r3, #2
 801744e:	2101      	movs	r1, #1
 8017450:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8017452:	68fa      	ldr	r2, [r7, #12]
 8017454:	2384      	movs	r3, #132	@ 0x84
 8017456:	009b      	lsls	r3, r3, #2
 8017458:	58d2      	ldr	r2, [r2, r3]
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	2382      	movs	r3, #130	@ 0x82
 8017462:	009b      	lsls	r3, r3, #2
 8017464:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8017466:	68fa      	ldr	r2, [r7, #12]
 8017468:	2384      	movs	r3, #132	@ 0x84
 801746a:	009b      	lsls	r3, r3, #2
 801746c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801746e:	b29b      	uxth	r3, r3
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	000a      	movs	r2, r1
 8017474:	2181      	movs	r1, #129	@ 0x81
 8017476:	f001 ff0c 	bl	8019292 <USBD_LL_Transmit>

      return USBD_OK;
 801747a:	2300      	movs	r3, #0
 801747c:	e002      	b.n	8017484 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801747e:	2301      	movs	r3, #1
 8017480:	e000      	b.n	8017484 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8017482:	2302      	movs	r3, #2
  }
}
 8017484:	0018      	movs	r0, r3
 8017486:	46bd      	mov	sp, r7
 8017488:	b004      	add	sp, #16
 801748a:	bd80      	pop	{r7, pc}

0801748c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017494:	687a      	ldr	r2, [r7, #4]
 8017496:	23ae      	movs	r3, #174	@ 0xae
 8017498:	009b      	lsls	r3, r3, #2
 801749a:	58d3      	ldr	r3, [r2, r3]
 801749c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801749e:	687a      	ldr	r2, [r7, #4]
 80174a0:	23ae      	movs	r3, #174	@ 0xae
 80174a2:	009b      	lsls	r3, r3, #2
 80174a4:	58d3      	ldr	r3, [r2, r3]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d019      	beq.n	80174de <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	7c1b      	ldrb	r3, [r3, #16]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d10a      	bne.n	80174c8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80174b2:	68fa      	ldr	r2, [r7, #12]
 80174b4:	2381      	movs	r3, #129	@ 0x81
 80174b6:	009b      	lsls	r3, r3, #2
 80174b8:	58d2      	ldr	r2, [r2, r3]
 80174ba:	2380      	movs	r3, #128	@ 0x80
 80174bc:	009b      	lsls	r3, r3, #2
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	2101      	movs	r1, #1
 80174c2:	f001 ff1d 	bl	8019300 <USBD_LL_PrepareReceive>
 80174c6:	e008      	b.n	80174da <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80174c8:	68fa      	ldr	r2, [r7, #12]
 80174ca:	2381      	movs	r3, #129	@ 0x81
 80174cc:	009b      	lsls	r3, r3, #2
 80174ce:	58d2      	ldr	r2, [r2, r3]
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	2340      	movs	r3, #64	@ 0x40
 80174d4:	2101      	movs	r1, #1
 80174d6:	f001 ff13 	bl	8019300 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80174da:	2300      	movs	r3, #0
 80174dc:	e000      	b.n	80174e0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80174de:	2302      	movs	r3, #2
  }
}
 80174e0:	0018      	movs	r0, r3
 80174e2:	46bd      	mov	sp, r7
 80174e4:	b004      	add	sp, #16
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	1dfb      	adds	r3, r7, #7
 80174f4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d101      	bne.n	8017500 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80174fc:	2302      	movs	r3, #2
 80174fe:	e020      	b.n	8017542 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8017500:	68fa      	ldr	r2, [r7, #12]
 8017502:	23ad      	movs	r3, #173	@ 0xad
 8017504:	009b      	lsls	r3, r3, #2
 8017506:	58d3      	ldr	r3, [r2, r3]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d004      	beq.n	8017516 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801750c:	68fa      	ldr	r2, [r7, #12]
 801750e:	23ad      	movs	r3, #173	@ 0xad
 8017510:	009b      	lsls	r3, r3, #2
 8017512:	2100      	movs	r1, #0
 8017514:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017516:	68bb      	ldr	r3, [r7, #8]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d004      	beq.n	8017526 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801751c:	68fa      	ldr	r2, [r7, #12]
 801751e:	23ac      	movs	r3, #172	@ 0xac
 8017520:	009b      	lsls	r3, r3, #2
 8017522:	68b9      	ldr	r1, [r7, #8]
 8017524:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017526:	68fa      	ldr	r2, [r7, #12]
 8017528:	23a7      	movs	r3, #167	@ 0xa7
 801752a:	009b      	lsls	r3, r3, #2
 801752c:	2101      	movs	r1, #1
 801752e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	1dfa      	adds	r2, r7, #7
 8017534:	7812      	ldrb	r2, [r2, #0]
 8017536:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	0018      	movs	r0, r3
 801753c:	f001 fd0c 	bl	8018f58 <USBD_LL_Init>

  return USBD_OK;
 8017540:	2300      	movs	r3, #0
}
 8017542:	0018      	movs	r0, r3
 8017544:	46bd      	mov	sp, r7
 8017546:	b004      	add	sp, #16
 8017548:	bd80      	pop	{r7, pc}

0801754a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801754a:	b580      	push	{r7, lr}
 801754c:	b084      	sub	sp, #16
 801754e:	af00      	add	r7, sp, #0
 8017550:	6078      	str	r0, [r7, #4]
 8017552:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8017554:	200f      	movs	r0, #15
 8017556:	183b      	adds	r3, r7, r0
 8017558:	2200      	movs	r2, #0
 801755a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d008      	beq.n	8017574 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8017562:	687a      	ldr	r2, [r7, #4]
 8017564:	23ad      	movs	r3, #173	@ 0xad
 8017566:	009b      	lsls	r3, r3, #2
 8017568:	6839      	ldr	r1, [r7, #0]
 801756a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801756c:	183b      	adds	r3, r7, r0
 801756e:	2200      	movs	r2, #0
 8017570:	701a      	strb	r2, [r3, #0]
 8017572:	e003      	b.n	801757c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8017574:	230f      	movs	r3, #15
 8017576:	18fb      	adds	r3, r7, r3
 8017578:	2202      	movs	r2, #2
 801757a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801757c:	230f      	movs	r3, #15
 801757e:	18fb      	adds	r3, r7, r3
 8017580:	781b      	ldrb	r3, [r3, #0]
}
 8017582:	0018      	movs	r0, r3
 8017584:	46bd      	mov	sp, r7
 8017586:	b004      	add	sp, #16
 8017588:	bd80      	pop	{r7, pc}

0801758a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801758a:	b580      	push	{r7, lr}
 801758c:	b082      	sub	sp, #8
 801758e:	af00      	add	r7, sp, #0
 8017590:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	0018      	movs	r0, r3
 8017596:	f001 fd43 	bl	8019020 <USBD_LL_Start>

  return USBD_OK;
 801759a:	2300      	movs	r3, #0
}
 801759c:	0018      	movs	r0, r3
 801759e:	46bd      	mov	sp, r7
 80175a0:	b002      	add	sp, #8
 80175a2:	bd80      	pop	{r7, pc}

080175a4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80175ac:	2300      	movs	r3, #0
}
 80175ae:	0018      	movs	r0, r3
 80175b0:	46bd      	mov	sp, r7
 80175b2:	b002      	add	sp, #8
 80175b4:	bd80      	pop	{r7, pc}

080175b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80175b6:	b590      	push	{r4, r7, lr}
 80175b8:	b085      	sub	sp, #20
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	6078      	str	r0, [r7, #4]
 80175be:	000a      	movs	r2, r1
 80175c0:	1cfb      	adds	r3, r7, #3
 80175c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80175c4:	240f      	movs	r4, #15
 80175c6:	193b      	adds	r3, r7, r4
 80175c8:	2202      	movs	r2, #2
 80175ca:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80175cc:	687a      	ldr	r2, [r7, #4]
 80175ce:	23ad      	movs	r3, #173	@ 0xad
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	58d3      	ldr	r3, [r2, r3]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d00e      	beq.n	80175f6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80175d8:	687a      	ldr	r2, [r7, #4]
 80175da:	23ad      	movs	r3, #173	@ 0xad
 80175dc:	009b      	lsls	r3, r3, #2
 80175de:	58d3      	ldr	r3, [r2, r3]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	1cfa      	adds	r2, r7, #3
 80175e4:	7811      	ldrb	r1, [r2, #0]
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	0010      	movs	r0, r2
 80175ea:	4798      	blx	r3
 80175ec:	1e03      	subs	r3, r0, #0
 80175ee:	d102      	bne.n	80175f6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80175f0:	193b      	adds	r3, r7, r4
 80175f2:	2200      	movs	r2, #0
 80175f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80175f6:	230f      	movs	r3, #15
 80175f8:	18fb      	adds	r3, r7, r3
 80175fa:	781b      	ldrb	r3, [r3, #0]
}
 80175fc:	0018      	movs	r0, r3
 80175fe:	46bd      	mov	sp, r7
 8017600:	b005      	add	sp, #20
 8017602:	bd90      	pop	{r4, r7, pc}

08017604 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
 801760c:	000a      	movs	r2, r1
 801760e:	1cfb      	adds	r3, r7, #3
 8017610:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	23ad      	movs	r3, #173	@ 0xad
 8017616:	009b      	lsls	r3, r3, #2
 8017618:	58d3      	ldr	r3, [r2, r3]
 801761a:	685b      	ldr	r3, [r3, #4]
 801761c:	1cfa      	adds	r2, r7, #3
 801761e:	7811      	ldrb	r1, [r2, #0]
 8017620:	687a      	ldr	r2, [r7, #4]
 8017622:	0010      	movs	r0, r2
 8017624:	4798      	blx	r3

  return USBD_OK;
 8017626:	2300      	movs	r3, #0
}
 8017628:	0018      	movs	r0, r3
 801762a:	46bd      	mov	sp, r7
 801762c:	b002      	add	sp, #8
 801762e:	bd80      	pop	{r7, pc}

08017630 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
 8017638:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	22aa      	movs	r2, #170	@ 0xaa
 801763e:	0092      	lsls	r2, r2, #2
 8017640:	4694      	mov	ip, r2
 8017642:	4463      	add	r3, ip
 8017644:	683a      	ldr	r2, [r7, #0]
 8017646:	0011      	movs	r1, r2
 8017648:	0018      	movs	r0, r3
 801764a:	f001 f810 	bl	801866e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801764e:	687a      	ldr	r2, [r7, #4]
 8017650:	23a5      	movs	r3, #165	@ 0xa5
 8017652:	009b      	lsls	r3, r3, #2
 8017654:	2101      	movs	r1, #1
 8017656:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	4a23      	ldr	r2, [pc, #140]	@ (80176e8 <USBD_LL_SetupStage+0xb8>)
 801765c:	5a9b      	ldrh	r3, [r3, r2]
 801765e:	0019      	movs	r1, r3
 8017660:	687a      	ldr	r2, [r7, #4]
 8017662:	23a6      	movs	r3, #166	@ 0xa6
 8017664:	009b      	lsls	r3, r3, #2
 8017666:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8017668:	687a      	ldr	r2, [r7, #4]
 801766a:	23aa      	movs	r3, #170	@ 0xaa
 801766c:	009b      	lsls	r3, r3, #2
 801766e:	5cd3      	ldrb	r3, [r2, r3]
 8017670:	001a      	movs	r2, r3
 8017672:	231f      	movs	r3, #31
 8017674:	4013      	ands	r3, r2
 8017676:	2b02      	cmp	r3, #2
 8017678:	d019      	beq.n	80176ae <USBD_LL_SetupStage+0x7e>
 801767a:	d822      	bhi.n	80176c2 <USBD_LL_SetupStage+0x92>
 801767c:	2b00      	cmp	r3, #0
 801767e:	d002      	beq.n	8017686 <USBD_LL_SetupStage+0x56>
 8017680:	2b01      	cmp	r3, #1
 8017682:	d00a      	beq.n	801769a <USBD_LL_SetupStage+0x6a>
 8017684:	e01d      	b.n	80176c2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	22aa      	movs	r2, #170	@ 0xaa
 801768a:	0092      	lsls	r2, r2, #2
 801768c:	189a      	adds	r2, r3, r2
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	0011      	movs	r1, r2
 8017692:	0018      	movs	r0, r3
 8017694:	f000 fa10 	bl	8017ab8 <USBD_StdDevReq>
      break;
 8017698:	e020      	b.n	80176dc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	22aa      	movs	r2, #170	@ 0xaa
 801769e:	0092      	lsls	r2, r2, #2
 80176a0:	189a      	adds	r2, r3, r2
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	0011      	movs	r1, r2
 80176a6:	0018      	movs	r0, r3
 80176a8:	f000 fa78 	bl	8017b9c <USBD_StdItfReq>
      break;
 80176ac:	e016      	b.n	80176dc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	22aa      	movs	r2, #170	@ 0xaa
 80176b2:	0092      	lsls	r2, r2, #2
 80176b4:	189a      	adds	r2, r3, r2
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	0011      	movs	r1, r2
 80176ba:	0018      	movs	r0, r3
 80176bc:	f000 fac5 	bl	8017c4a <USBD_StdEPReq>
      break;
 80176c0:	e00c      	b.n	80176dc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80176c2:	687a      	ldr	r2, [r7, #4]
 80176c4:	23aa      	movs	r3, #170	@ 0xaa
 80176c6:	009b      	lsls	r3, r3, #2
 80176c8:	5cd3      	ldrb	r3, [r2, r3]
 80176ca:	227f      	movs	r2, #127	@ 0x7f
 80176cc:	4393      	bics	r3, r2
 80176ce:	b2da      	uxtb	r2, r3
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	0011      	movs	r1, r2
 80176d4:	0018      	movs	r0, r3
 80176d6:	f001 fd2a 	bl	801912e <USBD_LL_StallEP>
      break;
 80176da:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80176dc:	2300      	movs	r3, #0
}
 80176de:	0018      	movs	r0, r3
 80176e0:	46bd      	mov	sp, r7
 80176e2:	b002      	add	sp, #8
 80176e4:	bd80      	pop	{r7, pc}
 80176e6:	46c0      	nop			@ (mov r8, r8)
 80176e8:	000002ae 	.word	0x000002ae

080176ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b086      	sub	sp, #24
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	60f8      	str	r0, [r7, #12]
 80176f4:	607a      	str	r2, [r7, #4]
 80176f6:	200b      	movs	r0, #11
 80176f8:	183b      	adds	r3, r7, r0
 80176fa:	1c0a      	adds	r2, r1, #0
 80176fc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80176fe:	183b      	adds	r3, r7, r0
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d154      	bne.n	80177b0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	3355      	adds	r3, #85	@ 0x55
 801770a:	33ff      	adds	r3, #255	@ 0xff
 801770c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801770e:	68fa      	ldr	r2, [r7, #12]
 8017710:	23a5      	movs	r3, #165	@ 0xa5
 8017712:	009b      	lsls	r3, r3, #2
 8017714:	58d3      	ldr	r3, [r2, r3]
 8017716:	2b03      	cmp	r3, #3
 8017718:	d139      	bne.n	801778e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801771a:	697b      	ldr	r3, [r7, #20]
 801771c:	68da      	ldr	r2, [r3, #12]
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	691b      	ldr	r3, [r3, #16]
 8017722:	429a      	cmp	r2, r3
 8017724:	d919      	bls.n	801775a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8017726:	697b      	ldr	r3, [r7, #20]
 8017728:	68da      	ldr	r2, [r3, #12]
 801772a:	697b      	ldr	r3, [r7, #20]
 801772c:	691b      	ldr	r3, [r3, #16]
 801772e:	1ad2      	subs	r2, r2, r3
 8017730:	697b      	ldr	r3, [r7, #20]
 8017732:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	68da      	ldr	r2, [r3, #12]
 8017738:	697b      	ldr	r3, [r7, #20]
 801773a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801773c:	429a      	cmp	r2, r3
 801773e:	d203      	bcs.n	8017748 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8017744:	b29b      	uxth	r3, r3
 8017746:	e002      	b.n	801774e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801774c:	b29b      	uxth	r3, r3
 801774e:	6879      	ldr	r1, [r7, #4]
 8017750:	68f8      	ldr	r0, [r7, #12]
 8017752:	001a      	movs	r2, r3
 8017754:	f001 f898 	bl	8018888 <USBD_CtlContinueRx>
 8017758:	e045      	b.n	80177e6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801775a:	68fa      	ldr	r2, [r7, #12]
 801775c:	23ad      	movs	r3, #173	@ 0xad
 801775e:	009b      	lsls	r3, r3, #2
 8017760:	58d3      	ldr	r3, [r2, r3]
 8017762:	691b      	ldr	r3, [r3, #16]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d00d      	beq.n	8017784 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017768:	68fa      	ldr	r2, [r7, #12]
 801776a:	23a7      	movs	r3, #167	@ 0xa7
 801776c:	009b      	lsls	r3, r3, #2
 801776e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017770:	2b03      	cmp	r3, #3
 8017772:	d107      	bne.n	8017784 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8017774:	68fa      	ldr	r2, [r7, #12]
 8017776:	23ad      	movs	r3, #173	@ 0xad
 8017778:	009b      	lsls	r3, r3, #2
 801777a:	58d3      	ldr	r3, [r2, r3]
 801777c:	691b      	ldr	r3, [r3, #16]
 801777e:	68fa      	ldr	r2, [r7, #12]
 8017780:	0010      	movs	r0, r2
 8017782:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	0018      	movs	r0, r3
 8017788:	f001 f891 	bl	80188ae <USBD_CtlSendStatus>
 801778c:	e02b      	b.n	80177e6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801778e:	68fa      	ldr	r2, [r7, #12]
 8017790:	23a5      	movs	r3, #165	@ 0xa5
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	58d3      	ldr	r3, [r2, r3]
 8017796:	2b05      	cmp	r3, #5
 8017798:	d125      	bne.n	80177e6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801779a:	68fa      	ldr	r2, [r7, #12]
 801779c:	23a5      	movs	r3, #165	@ 0xa5
 801779e:	009b      	lsls	r3, r3, #2
 80177a0:	2100      	movs	r1, #0
 80177a2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2100      	movs	r1, #0
 80177a8:	0018      	movs	r0, r3
 80177aa:	f001 fcc0 	bl	801912e <USBD_LL_StallEP>
 80177ae:	e01a      	b.n	80177e6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80177b0:	68fa      	ldr	r2, [r7, #12]
 80177b2:	23ad      	movs	r3, #173	@ 0xad
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	58d3      	ldr	r3, [r2, r3]
 80177b8:	699b      	ldr	r3, [r3, #24]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d011      	beq.n	80177e2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80177be:	68fa      	ldr	r2, [r7, #12]
 80177c0:	23a7      	movs	r3, #167	@ 0xa7
 80177c2:	009b      	lsls	r3, r3, #2
 80177c4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80177c6:	2b03      	cmp	r3, #3
 80177c8:	d10b      	bne.n	80177e2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80177ca:	68fa      	ldr	r2, [r7, #12]
 80177cc:	23ad      	movs	r3, #173	@ 0xad
 80177ce:	009b      	lsls	r3, r3, #2
 80177d0:	58d3      	ldr	r3, [r2, r3]
 80177d2:	699b      	ldr	r3, [r3, #24]
 80177d4:	220b      	movs	r2, #11
 80177d6:	18ba      	adds	r2, r7, r2
 80177d8:	7811      	ldrb	r1, [r2, #0]
 80177da:	68fa      	ldr	r2, [r7, #12]
 80177dc:	0010      	movs	r0, r2
 80177de:	4798      	blx	r3
 80177e0:	e001      	b.n	80177e6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80177e2:	2302      	movs	r3, #2
 80177e4:	e000      	b.n	80177e8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80177e6:	2300      	movs	r3, #0
}
 80177e8:	0018      	movs	r0, r3
 80177ea:	46bd      	mov	sp, r7
 80177ec:	b006      	add	sp, #24
 80177ee:	bd80      	pop	{r7, pc}

080177f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b086      	sub	sp, #24
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	60f8      	str	r0, [r7, #12]
 80177f8:	607a      	str	r2, [r7, #4]
 80177fa:	200b      	movs	r0, #11
 80177fc:	183b      	adds	r3, r7, r0
 80177fe:	1c0a      	adds	r2, r1, #0
 8017800:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017802:	183b      	adds	r3, r7, r0
 8017804:	781b      	ldrb	r3, [r3, #0]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d000      	beq.n	801780c <USBD_LL_DataInStage+0x1c>
 801780a:	e08e      	b.n	801792a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	3314      	adds	r3, #20
 8017810:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017812:	68fa      	ldr	r2, [r7, #12]
 8017814:	23a5      	movs	r3, #165	@ 0xa5
 8017816:	009b      	lsls	r3, r3, #2
 8017818:	58d3      	ldr	r3, [r2, r3]
 801781a:	2b02      	cmp	r3, #2
 801781c:	d164      	bne.n	80178e8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	68da      	ldr	r2, [r3, #12]
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	691b      	ldr	r3, [r3, #16]
 8017826:	429a      	cmp	r2, r3
 8017828:	d915      	bls.n	8017856 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	68da      	ldr	r2, [r3, #12]
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	691b      	ldr	r3, [r3, #16]
 8017832:	1ad2      	subs	r2, r2, r3
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	68db      	ldr	r3, [r3, #12]
 801783c:	b29a      	uxth	r2, r3
 801783e:	6879      	ldr	r1, [r7, #4]
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	0018      	movs	r0, r3
 8017844:	f000 ffe9 	bl	801881a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017848:	68f8      	ldr	r0, [r7, #12]
 801784a:	2300      	movs	r3, #0
 801784c:	2200      	movs	r2, #0
 801784e:	2100      	movs	r1, #0
 8017850:	f001 fd56 	bl	8019300 <USBD_LL_PrepareReceive>
 8017854:	e059      	b.n	801790a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	689a      	ldr	r2, [r3, #8]
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	691b      	ldr	r3, [r3, #16]
 801785e:	0019      	movs	r1, r3
 8017860:	0010      	movs	r0, r2
 8017862:	f7e8 fd25 	bl	80002b0 <__aeabi_uidivmod>
 8017866:	1e0b      	subs	r3, r1, #0
 8017868:	d11f      	bne.n	80178aa <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	689a      	ldr	r2, [r3, #8]
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8017872:	429a      	cmp	r2, r3
 8017874:	d319      	bcc.n	80178aa <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8017876:	697b      	ldr	r3, [r7, #20]
 8017878:	689a      	ldr	r2, [r3, #8]
 801787a:	68f9      	ldr	r1, [r7, #12]
 801787c:	23a6      	movs	r3, #166	@ 0xa6
 801787e:	009b      	lsls	r3, r3, #2
 8017880:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8017882:	429a      	cmp	r2, r3
 8017884:	d211      	bcs.n	80178aa <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	2200      	movs	r2, #0
 801788a:	2100      	movs	r1, #0
 801788c:	0018      	movs	r0, r3
 801788e:	f000 ffc4 	bl	801881a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017892:	68fa      	ldr	r2, [r7, #12]
 8017894:	23a6      	movs	r3, #166	@ 0xa6
 8017896:	009b      	lsls	r3, r3, #2
 8017898:	2100      	movs	r1, #0
 801789a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801789c:	68f8      	ldr	r0, [r7, #12]
 801789e:	2300      	movs	r3, #0
 80178a0:	2200      	movs	r2, #0
 80178a2:	2100      	movs	r1, #0
 80178a4:	f001 fd2c 	bl	8019300 <USBD_LL_PrepareReceive>
 80178a8:	e02f      	b.n	801790a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80178aa:	68fa      	ldr	r2, [r7, #12]
 80178ac:	23ad      	movs	r3, #173	@ 0xad
 80178ae:	009b      	lsls	r3, r3, #2
 80178b0:	58d3      	ldr	r3, [r2, r3]
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d00d      	beq.n	80178d4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80178b8:	68fa      	ldr	r2, [r7, #12]
 80178ba:	23a7      	movs	r3, #167	@ 0xa7
 80178bc:	009b      	lsls	r3, r3, #2
 80178be:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80178c0:	2b03      	cmp	r3, #3
 80178c2:	d107      	bne.n	80178d4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80178c4:	68fa      	ldr	r2, [r7, #12]
 80178c6:	23ad      	movs	r3, #173	@ 0xad
 80178c8:	009b      	lsls	r3, r3, #2
 80178ca:	58d3      	ldr	r3, [r2, r3]
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	68fa      	ldr	r2, [r7, #12]
 80178d0:	0010      	movs	r0, r2
 80178d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2180      	movs	r1, #128	@ 0x80
 80178d8:	0018      	movs	r0, r3
 80178da:	f001 fc28 	bl	801912e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	0018      	movs	r0, r3
 80178e2:	f000 fff8 	bl	80188d6 <USBD_CtlReceiveStatus>
 80178e6:	e010      	b.n	801790a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80178e8:	68fa      	ldr	r2, [r7, #12]
 80178ea:	23a5      	movs	r3, #165	@ 0xa5
 80178ec:	009b      	lsls	r3, r3, #2
 80178ee:	58d3      	ldr	r3, [r2, r3]
 80178f0:	2b04      	cmp	r3, #4
 80178f2:	d005      	beq.n	8017900 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80178f4:	68fa      	ldr	r2, [r7, #12]
 80178f6:	23a5      	movs	r3, #165	@ 0xa5
 80178f8:	009b      	lsls	r3, r3, #2
 80178fa:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d104      	bne.n	801790a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	2180      	movs	r1, #128	@ 0x80
 8017904:	0018      	movs	r0, r3
 8017906:	f001 fc12 	bl	801912e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801790a:	68fa      	ldr	r2, [r7, #12]
 801790c:	23a8      	movs	r3, #168	@ 0xa8
 801790e:	009b      	lsls	r3, r3, #2
 8017910:	5cd3      	ldrb	r3, [r2, r3]
 8017912:	2b01      	cmp	r3, #1
 8017914:	d124      	bne.n	8017960 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	0018      	movs	r0, r3
 801791a:	f7ff fe43 	bl	80175a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801791e:	68fa      	ldr	r2, [r7, #12]
 8017920:	23a8      	movs	r3, #168	@ 0xa8
 8017922:	009b      	lsls	r3, r3, #2
 8017924:	2100      	movs	r1, #0
 8017926:	54d1      	strb	r1, [r2, r3]
 8017928:	e01a      	b.n	8017960 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801792a:	68fa      	ldr	r2, [r7, #12]
 801792c:	23ad      	movs	r3, #173	@ 0xad
 801792e:	009b      	lsls	r3, r3, #2
 8017930:	58d3      	ldr	r3, [r2, r3]
 8017932:	695b      	ldr	r3, [r3, #20]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d011      	beq.n	801795c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017938:	68fa      	ldr	r2, [r7, #12]
 801793a:	23a7      	movs	r3, #167	@ 0xa7
 801793c:	009b      	lsls	r3, r3, #2
 801793e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8017940:	2b03      	cmp	r3, #3
 8017942:	d10b      	bne.n	801795c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8017944:	68fa      	ldr	r2, [r7, #12]
 8017946:	23ad      	movs	r3, #173	@ 0xad
 8017948:	009b      	lsls	r3, r3, #2
 801794a:	58d3      	ldr	r3, [r2, r3]
 801794c:	695b      	ldr	r3, [r3, #20]
 801794e:	220b      	movs	r2, #11
 8017950:	18ba      	adds	r2, r7, r2
 8017952:	7811      	ldrb	r1, [r2, #0]
 8017954:	68fa      	ldr	r2, [r7, #12]
 8017956:	0010      	movs	r0, r2
 8017958:	4798      	blx	r3
 801795a:	e001      	b.n	8017960 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801795c:	2302      	movs	r3, #2
 801795e:	e000      	b.n	8017962 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8017960:	2300      	movs	r3, #0
}
 8017962:	0018      	movs	r0, r3
 8017964:	46bd      	mov	sp, r7
 8017966:	b006      	add	sp, #24
 8017968:	bd80      	pop	{r7, pc}

0801796a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801796a:	b580      	push	{r7, lr}
 801796c:	b082      	sub	sp, #8
 801796e:	af00      	add	r7, sp, #0
 8017970:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	2340      	movs	r3, #64	@ 0x40
 8017976:	2200      	movs	r2, #0
 8017978:	2100      	movs	r1, #0
 801797a:	f001 fb76 	bl	801906a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801797e:	687a      	ldr	r2, [r7, #4]
 8017980:	23ac      	movs	r3, #172	@ 0xac
 8017982:	005b      	lsls	r3, r3, #1
 8017984:	2101      	movs	r1, #1
 8017986:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017988:	687a      	ldr	r2, [r7, #4]
 801798a:	23b2      	movs	r3, #178	@ 0xb2
 801798c:	005b      	lsls	r3, r3, #1
 801798e:	2140      	movs	r1, #64	@ 0x40
 8017990:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	2340      	movs	r3, #64	@ 0x40
 8017996:	2200      	movs	r2, #0
 8017998:	2180      	movs	r1, #128	@ 0x80
 801799a:	f001 fb66 	bl	801906a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2201      	movs	r2, #1
 80179a2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2240      	movs	r2, #64	@ 0x40
 80179a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80179aa:	687a      	ldr	r2, [r7, #4]
 80179ac:	23a7      	movs	r3, #167	@ 0xa7
 80179ae:	009b      	lsls	r3, r3, #2
 80179b0:	2101      	movs	r1, #1
 80179b2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80179b4:	687a      	ldr	r2, [r7, #4]
 80179b6:	23a5      	movs	r3, #165	@ 0xa5
 80179b8:	009b      	lsls	r3, r3, #2
 80179ba:	2100      	movs	r1, #0
 80179bc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2200      	movs	r2, #0
 80179c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80179c4:	687a      	ldr	r2, [r7, #4]
 80179c6:	23a9      	movs	r3, #169	@ 0xa9
 80179c8:	009b      	lsls	r3, r3, #2
 80179ca:	2100      	movs	r1, #0
 80179cc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80179ce:	687a      	ldr	r2, [r7, #4]
 80179d0:	23ae      	movs	r3, #174	@ 0xae
 80179d2:	009b      	lsls	r3, r3, #2
 80179d4:	58d3      	ldr	r3, [r2, r3]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d00a      	beq.n	80179f0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	23ad      	movs	r3, #173	@ 0xad
 80179de:	009b      	lsls	r3, r3, #2
 80179e0:	58d3      	ldr	r3, [r2, r3]
 80179e2:	685a      	ldr	r2, [r3, #4]
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	b2d9      	uxtb	r1, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	0018      	movs	r0, r3
 80179ee:	4790      	blx	r2
  }

  return USBD_OK;
 80179f0:	2300      	movs	r3, #0
}
 80179f2:	0018      	movs	r0, r3
 80179f4:	46bd      	mov	sp, r7
 80179f6:	b002      	add	sp, #8
 80179f8:	bd80      	pop	{r7, pc}

080179fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80179fa:	b580      	push	{r7, lr}
 80179fc:	b082      	sub	sp, #8
 80179fe:	af00      	add	r7, sp, #0
 8017a00:	6078      	str	r0, [r7, #4]
 8017a02:	000a      	movs	r2, r1
 8017a04:	1cfb      	adds	r3, r7, #3
 8017a06:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	1cfa      	adds	r2, r7, #3
 8017a0c:	7812      	ldrb	r2, [r2, #0]
 8017a0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017a10:	2300      	movs	r3, #0
}
 8017a12:	0018      	movs	r0, r3
 8017a14:	46bd      	mov	sp, r7
 8017a16:	b002      	add	sp, #8
 8017a18:	bd80      	pop	{r7, pc}
	...

08017a1c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8017a24:	687a      	ldr	r2, [r7, #4]
 8017a26:	23a7      	movs	r3, #167	@ 0xa7
 8017a28:	009b      	lsls	r3, r3, #2
 8017a2a:	5cd1      	ldrb	r1, [r2, r3]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	4a06      	ldr	r2, [pc, #24]	@ (8017a48 <USBD_LL_Suspend+0x2c>)
 8017a30:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	23a7      	movs	r3, #167	@ 0xa7
 8017a36:	009b      	lsls	r3, r3, #2
 8017a38:	2104      	movs	r1, #4
 8017a3a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8017a3c:	2300      	movs	r3, #0
}
 8017a3e:	0018      	movs	r0, r3
 8017a40:	46bd      	mov	sp, r7
 8017a42:	b002      	add	sp, #8
 8017a44:	bd80      	pop	{r7, pc}
 8017a46:	46c0      	nop			@ (mov r8, r8)
 8017a48:	0000029d 	.word	0x0000029d

08017a4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017a54:	687a      	ldr	r2, [r7, #4]
 8017a56:	23a7      	movs	r3, #167	@ 0xa7
 8017a58:	009b      	lsls	r3, r3, #2
 8017a5a:	5cd3      	ldrb	r3, [r2, r3]
 8017a5c:	2b04      	cmp	r3, #4
 8017a5e:	d106      	bne.n	8017a6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	4a05      	ldr	r2, [pc, #20]	@ (8017a78 <USBD_LL_Resume+0x2c>)
 8017a64:	5c99      	ldrb	r1, [r3, r2]
 8017a66:	687a      	ldr	r2, [r7, #4]
 8017a68:	23a7      	movs	r3, #167	@ 0xa7
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8017a6e:	2300      	movs	r3, #0
}
 8017a70:	0018      	movs	r0, r3
 8017a72:	46bd      	mov	sp, r7
 8017a74:	b002      	add	sp, #8
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	0000029d 	.word	0x0000029d

08017a7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	23a7      	movs	r3, #167	@ 0xa7
 8017a88:	009b      	lsls	r3, r3, #2
 8017a8a:	5cd3      	ldrb	r3, [r2, r3]
 8017a8c:	2b03      	cmp	r3, #3
 8017a8e:	d10e      	bne.n	8017aae <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8017a90:	687a      	ldr	r2, [r7, #4]
 8017a92:	23ad      	movs	r3, #173	@ 0xad
 8017a94:	009b      	lsls	r3, r3, #2
 8017a96:	58d3      	ldr	r3, [r2, r3]
 8017a98:	69db      	ldr	r3, [r3, #28]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d007      	beq.n	8017aae <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	23ad      	movs	r3, #173	@ 0xad
 8017aa2:	009b      	lsls	r3, r3, #2
 8017aa4:	58d3      	ldr	r3, [r2, r3]
 8017aa6:	69db      	ldr	r3, [r3, #28]
 8017aa8:	687a      	ldr	r2, [r7, #4]
 8017aaa:	0010      	movs	r0, r2
 8017aac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017aae:	2300      	movs	r3, #0
}
 8017ab0:	0018      	movs	r0, r3
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	b002      	add	sp, #8
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
 8017ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017ac2:	230f      	movs	r3, #15
 8017ac4:	18fb      	adds	r3, r7, r3
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	781b      	ldrb	r3, [r3, #0]
 8017ace:	001a      	movs	r2, r3
 8017ad0:	2360      	movs	r3, #96	@ 0x60
 8017ad2:	4013      	ands	r3, r2
 8017ad4:	2b40      	cmp	r3, #64	@ 0x40
 8017ad6:	d004      	beq.n	8017ae2 <USBD_StdDevReq+0x2a>
 8017ad8:	d84f      	bhi.n	8017b7a <USBD_StdDevReq+0xc2>
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d00b      	beq.n	8017af6 <USBD_StdDevReq+0x3e>
 8017ade:	2b20      	cmp	r3, #32
 8017ae0:	d14b      	bne.n	8017b7a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	23ad      	movs	r3, #173	@ 0xad
 8017ae6:	009b      	lsls	r3, r3, #2
 8017ae8:	58d3      	ldr	r3, [r2, r3]
 8017aea:	689b      	ldr	r3, [r3, #8]
 8017aec:	6839      	ldr	r1, [r7, #0]
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	0010      	movs	r0, r2
 8017af2:	4798      	blx	r3
      break;
 8017af4:	e048      	b.n	8017b88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	785b      	ldrb	r3, [r3, #1]
 8017afa:	2b09      	cmp	r3, #9
 8017afc:	d835      	bhi.n	8017b6a <USBD_StdDevReq+0xb2>
 8017afe:	009a      	lsls	r2, r3, #2
 8017b00:	4b25      	ldr	r3, [pc, #148]	@ (8017b98 <USBD_StdDevReq+0xe0>)
 8017b02:	18d3      	adds	r3, r2, r3
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017b08:	683a      	ldr	r2, [r7, #0]
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	0011      	movs	r1, r2
 8017b0e:	0018      	movs	r0, r3
 8017b10:	f000 fa52 	bl	8017fb8 <USBD_GetDescriptor>
          break;
 8017b14:	e030      	b.n	8017b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017b16:	683a      	ldr	r2, [r7, #0]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	0011      	movs	r1, r2
 8017b1c:	0018      	movs	r0, r3
 8017b1e:	f000 fbfd 	bl	801831c <USBD_SetAddress>
          break;
 8017b22:	e029      	b.n	8017b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8017b24:	683a      	ldr	r2, [r7, #0]
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	0011      	movs	r1, r2
 8017b2a:	0018      	movs	r0, r3
 8017b2c:	f000 fc4a 	bl	80183c4 <USBD_SetConfig>
          break;
 8017b30:	e022      	b.n	8017b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017b32:	683a      	ldr	r2, [r7, #0]
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	0011      	movs	r1, r2
 8017b38:	0018      	movs	r0, r3
 8017b3a:	f000 fce7 	bl	801850c <USBD_GetConfig>
          break;
 8017b3e:	e01b      	b.n	8017b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017b40:	683a      	ldr	r2, [r7, #0]
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	0011      	movs	r1, r2
 8017b46:	0018      	movs	r0, r3
 8017b48:	f000 fd1b 	bl	8018582 <USBD_GetStatus>
          break;
 8017b4c:	e014      	b.n	8017b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017b4e:	683a      	ldr	r2, [r7, #0]
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	0011      	movs	r1, r2
 8017b54:	0018      	movs	r0, r3
 8017b56:	f000 fd4e 	bl	80185f6 <USBD_SetFeature>
          break;
 8017b5a:	e00d      	b.n	8017b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017b5c:	683a      	ldr	r2, [r7, #0]
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	0011      	movs	r1, r2
 8017b62:	0018      	movs	r0, r3
 8017b64:	f000 fd5d 	bl	8018622 <USBD_ClrFeature>
          break;
 8017b68:	e006      	b.n	8017b78 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8017b6a:	683a      	ldr	r2, [r7, #0]
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	0011      	movs	r1, r2
 8017b70:	0018      	movs	r0, r3
 8017b72:	f000 fdb4 	bl	80186de <USBD_CtlError>
          break;
 8017b76:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017b78:	e006      	b.n	8017b88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8017b7a:	683a      	ldr	r2, [r7, #0]
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	0011      	movs	r1, r2
 8017b80:	0018      	movs	r0, r3
 8017b82:	f000 fdac 	bl	80186de <USBD_CtlError>
      break;
 8017b86:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8017b88:	230f      	movs	r3, #15
 8017b8a:	18fb      	adds	r3, r7, r3
 8017b8c:	781b      	ldrb	r3, [r3, #0]
}
 8017b8e:	0018      	movs	r0, r3
 8017b90:	46bd      	mov	sp, r7
 8017b92:	b004      	add	sp, #16
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	46c0      	nop			@ (mov r8, r8)
 8017b98:	08020154 	.word	0x08020154

08017b9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8017b9c:	b5b0      	push	{r4, r5, r7, lr}
 8017b9e:	b084      	sub	sp, #16
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017ba6:	230f      	movs	r3, #15
 8017ba8:	18fb      	adds	r3, r7, r3
 8017baa:	2200      	movs	r2, #0
 8017bac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	001a      	movs	r2, r3
 8017bb4:	2360      	movs	r3, #96	@ 0x60
 8017bb6:	4013      	ands	r3, r2
 8017bb8:	2b40      	cmp	r3, #64	@ 0x40
 8017bba:	d004      	beq.n	8017bc6 <USBD_StdItfReq+0x2a>
 8017bbc:	d839      	bhi.n	8017c32 <USBD_StdItfReq+0x96>
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d001      	beq.n	8017bc6 <USBD_StdItfReq+0x2a>
 8017bc2:	2b20      	cmp	r3, #32
 8017bc4:	d135      	bne.n	8017c32 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	23a7      	movs	r3, #167	@ 0xa7
 8017bca:	009b      	lsls	r3, r3, #2
 8017bcc:	5cd3      	ldrb	r3, [r2, r3]
 8017bce:	3b01      	subs	r3, #1
 8017bd0:	2b02      	cmp	r3, #2
 8017bd2:	d825      	bhi.n	8017c20 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	889b      	ldrh	r3, [r3, #4]
 8017bd8:	b2db      	uxtb	r3, r3
 8017bda:	2b01      	cmp	r3, #1
 8017bdc:	d819      	bhi.n	8017c12 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017bde:	687a      	ldr	r2, [r7, #4]
 8017be0:	23ad      	movs	r3, #173	@ 0xad
 8017be2:	009b      	lsls	r3, r3, #2
 8017be4:	58d3      	ldr	r3, [r2, r3]
 8017be6:	689b      	ldr	r3, [r3, #8]
 8017be8:	250f      	movs	r5, #15
 8017bea:	197c      	adds	r4, r7, r5
 8017bec:	6839      	ldr	r1, [r7, #0]
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	0010      	movs	r0, r2
 8017bf2:	4798      	blx	r3
 8017bf4:	0003      	movs	r3, r0
 8017bf6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	88db      	ldrh	r3, [r3, #6]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d116      	bne.n	8017c2e <USBD_StdItfReq+0x92>
 8017c00:	197b      	adds	r3, r7, r5
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d112      	bne.n	8017c2e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	0018      	movs	r0, r3
 8017c0c:	f000 fe4f 	bl	80188ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017c10:	e00d      	b.n	8017c2e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8017c12:	683a      	ldr	r2, [r7, #0]
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	0011      	movs	r1, r2
 8017c18:	0018      	movs	r0, r3
 8017c1a:	f000 fd60 	bl	80186de <USBD_CtlError>
          break;
 8017c1e:	e006      	b.n	8017c2e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8017c20:	683a      	ldr	r2, [r7, #0]
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	0011      	movs	r1, r2
 8017c26:	0018      	movs	r0, r3
 8017c28:	f000 fd59 	bl	80186de <USBD_CtlError>
          break;
 8017c2c:	e000      	b.n	8017c30 <USBD_StdItfReq+0x94>
          break;
 8017c2e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017c30:	e006      	b.n	8017c40 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8017c32:	683a      	ldr	r2, [r7, #0]
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	0011      	movs	r1, r2
 8017c38:	0018      	movs	r0, r3
 8017c3a:	f000 fd50 	bl	80186de <USBD_CtlError>
      break;
 8017c3e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8017c40:	2300      	movs	r3, #0
}
 8017c42:	0018      	movs	r0, r3
 8017c44:	46bd      	mov	sp, r7
 8017c46:	b004      	add	sp, #16
 8017c48:	bdb0      	pop	{r4, r5, r7, pc}

08017c4a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8017c4a:	b5b0      	push	{r4, r5, r7, lr}
 8017c4c:	b084      	sub	sp, #16
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	6078      	str	r0, [r7, #4]
 8017c52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017c54:	230f      	movs	r3, #15
 8017c56:	18fb      	adds	r3, r7, r3
 8017c58:	2200      	movs	r2, #0
 8017c5a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8017c5c:	683b      	ldr	r3, [r7, #0]
 8017c5e:	889a      	ldrh	r2, [r3, #4]
 8017c60:	230e      	movs	r3, #14
 8017c62:	18fb      	adds	r3, r7, r3
 8017c64:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017c66:	683b      	ldr	r3, [r7, #0]
 8017c68:	781b      	ldrb	r3, [r3, #0]
 8017c6a:	001a      	movs	r2, r3
 8017c6c:	2360      	movs	r3, #96	@ 0x60
 8017c6e:	4013      	ands	r3, r2
 8017c70:	2b40      	cmp	r3, #64	@ 0x40
 8017c72:	d006      	beq.n	8017c82 <USBD_StdEPReq+0x38>
 8017c74:	d900      	bls.n	8017c78 <USBD_StdEPReq+0x2e>
 8017c76:	e190      	b.n	8017f9a <USBD_StdEPReq+0x350>
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d00c      	beq.n	8017c96 <USBD_StdEPReq+0x4c>
 8017c7c:	2b20      	cmp	r3, #32
 8017c7e:	d000      	beq.n	8017c82 <USBD_StdEPReq+0x38>
 8017c80:	e18b      	b.n	8017f9a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017c82:	687a      	ldr	r2, [r7, #4]
 8017c84:	23ad      	movs	r3, #173	@ 0xad
 8017c86:	009b      	lsls	r3, r3, #2
 8017c88:	58d3      	ldr	r3, [r2, r3]
 8017c8a:	689b      	ldr	r3, [r3, #8]
 8017c8c:	6839      	ldr	r1, [r7, #0]
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	0010      	movs	r0, r2
 8017c92:	4798      	blx	r3
      break;
 8017c94:	e188      	b.n	8017fa8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	781b      	ldrb	r3, [r3, #0]
 8017c9a:	001a      	movs	r2, r3
 8017c9c:	2360      	movs	r3, #96	@ 0x60
 8017c9e:	4013      	ands	r3, r2
 8017ca0:	2b20      	cmp	r3, #32
 8017ca2:	d10f      	bne.n	8017cc4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017ca4:	687a      	ldr	r2, [r7, #4]
 8017ca6:	23ad      	movs	r3, #173	@ 0xad
 8017ca8:	009b      	lsls	r3, r3, #2
 8017caa:	58d3      	ldr	r3, [r2, r3]
 8017cac:	689b      	ldr	r3, [r3, #8]
 8017cae:	250f      	movs	r5, #15
 8017cb0:	197c      	adds	r4, r7, r5
 8017cb2:	6839      	ldr	r1, [r7, #0]
 8017cb4:	687a      	ldr	r2, [r7, #4]
 8017cb6:	0010      	movs	r0, r2
 8017cb8:	4798      	blx	r3
 8017cba:	0003      	movs	r3, r0
 8017cbc:	7023      	strb	r3, [r4, #0]

        return ret;
 8017cbe:	197b      	adds	r3, r7, r5
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	e174      	b.n	8017fae <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	785b      	ldrb	r3, [r3, #1]
 8017cc8:	2b03      	cmp	r3, #3
 8017cca:	d007      	beq.n	8017cdc <USBD_StdEPReq+0x92>
 8017ccc:	dd00      	ble.n	8017cd0 <USBD_StdEPReq+0x86>
 8017cce:	e15c      	b.n	8017f8a <USBD_StdEPReq+0x340>
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d100      	bne.n	8017cd6 <USBD_StdEPReq+0x8c>
 8017cd4:	e092      	b.n	8017dfc <USBD_StdEPReq+0x1b2>
 8017cd6:	2b01      	cmp	r3, #1
 8017cd8:	d04b      	beq.n	8017d72 <USBD_StdEPReq+0x128>
 8017cda:	e156      	b.n	8017f8a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017cdc:	687a      	ldr	r2, [r7, #4]
 8017cde:	23a7      	movs	r3, #167	@ 0xa7
 8017ce0:	009b      	lsls	r3, r3, #2
 8017ce2:	5cd3      	ldrb	r3, [r2, r3]
 8017ce4:	2b02      	cmp	r3, #2
 8017ce6:	d002      	beq.n	8017cee <USBD_StdEPReq+0xa4>
 8017ce8:	2b03      	cmp	r3, #3
 8017cea:	d01d      	beq.n	8017d28 <USBD_StdEPReq+0xde>
 8017cec:	e039      	b.n	8017d62 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017cee:	220e      	movs	r2, #14
 8017cf0:	18bb      	adds	r3, r7, r2
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d010      	beq.n	8017d1a <USBD_StdEPReq+0xd0>
 8017cf8:	18bb      	adds	r3, r7, r2
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	2b80      	cmp	r3, #128	@ 0x80
 8017cfe:	d00c      	beq.n	8017d1a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017d00:	18bb      	adds	r3, r7, r2
 8017d02:	781a      	ldrb	r2, [r3, #0]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	0011      	movs	r1, r2
 8017d08:	0018      	movs	r0, r3
 8017d0a:	f001 fa10 	bl	801912e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2180      	movs	r1, #128	@ 0x80
 8017d12:	0018      	movs	r0, r3
 8017d14:	f001 fa0b 	bl	801912e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017d18:	e02a      	b.n	8017d70 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8017d1a:	683a      	ldr	r2, [r7, #0]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	0011      	movs	r1, r2
 8017d20:	0018      	movs	r0, r3
 8017d22:	f000 fcdc 	bl	80186de <USBD_CtlError>
              break;
 8017d26:	e023      	b.n	8017d70 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017d28:	683b      	ldr	r3, [r7, #0]
 8017d2a:	885b      	ldrh	r3, [r3, #2]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d113      	bne.n	8017d58 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8017d30:	220e      	movs	r2, #14
 8017d32:	18bb      	adds	r3, r7, r2
 8017d34:	781b      	ldrb	r3, [r3, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d00e      	beq.n	8017d58 <USBD_StdEPReq+0x10e>
 8017d3a:	18bb      	adds	r3, r7, r2
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	2b80      	cmp	r3, #128	@ 0x80
 8017d40:	d00a      	beq.n	8017d58 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	88db      	ldrh	r3, [r3, #6]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d106      	bne.n	8017d58 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8017d4a:	18bb      	adds	r3, r7, r2
 8017d4c:	781a      	ldrb	r2, [r3, #0]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	0011      	movs	r1, r2
 8017d52:	0018      	movs	r0, r3
 8017d54:	f001 f9eb 	bl	801912e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	0018      	movs	r0, r3
 8017d5c:	f000 fda7 	bl	80188ae <USBD_CtlSendStatus>

              break;
 8017d60:	e006      	b.n	8017d70 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8017d62:	683a      	ldr	r2, [r7, #0]
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	0011      	movs	r1, r2
 8017d68:	0018      	movs	r0, r3
 8017d6a:	f000 fcb8 	bl	80186de <USBD_CtlError>
              break;
 8017d6e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8017d70:	e112      	b.n	8017f98 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017d72:	687a      	ldr	r2, [r7, #4]
 8017d74:	23a7      	movs	r3, #167	@ 0xa7
 8017d76:	009b      	lsls	r3, r3, #2
 8017d78:	5cd3      	ldrb	r3, [r2, r3]
 8017d7a:	2b02      	cmp	r3, #2
 8017d7c:	d002      	beq.n	8017d84 <USBD_StdEPReq+0x13a>
 8017d7e:	2b03      	cmp	r3, #3
 8017d80:	d01d      	beq.n	8017dbe <USBD_StdEPReq+0x174>
 8017d82:	e032      	b.n	8017dea <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017d84:	220e      	movs	r2, #14
 8017d86:	18bb      	adds	r3, r7, r2
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d010      	beq.n	8017db0 <USBD_StdEPReq+0x166>
 8017d8e:	18bb      	adds	r3, r7, r2
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	2b80      	cmp	r3, #128	@ 0x80
 8017d94:	d00c      	beq.n	8017db0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017d96:	18bb      	adds	r3, r7, r2
 8017d98:	781a      	ldrb	r2, [r3, #0]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	0011      	movs	r1, r2
 8017d9e:	0018      	movs	r0, r3
 8017da0:	f001 f9c5 	bl	801912e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	2180      	movs	r1, #128	@ 0x80
 8017da8:	0018      	movs	r0, r3
 8017daa:	f001 f9c0 	bl	801912e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017dae:	e024      	b.n	8017dfa <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8017db0:	683a      	ldr	r2, [r7, #0]
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	0011      	movs	r1, r2
 8017db6:	0018      	movs	r0, r3
 8017db8:	f000 fc91 	bl	80186de <USBD_CtlError>
              break;
 8017dbc:	e01d      	b.n	8017dfa <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	885b      	ldrh	r3, [r3, #2]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d118      	bne.n	8017df8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017dc6:	210e      	movs	r1, #14
 8017dc8:	187b      	adds	r3, r7, r1
 8017dca:	781b      	ldrb	r3, [r3, #0]
 8017dcc:	227f      	movs	r2, #127	@ 0x7f
 8017dce:	4013      	ands	r3, r2
 8017dd0:	d006      	beq.n	8017de0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8017dd2:	187b      	adds	r3, r7, r1
 8017dd4:	781a      	ldrb	r2, [r3, #0]
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	0011      	movs	r1, r2
 8017dda:	0018      	movs	r0, r3
 8017ddc:	f001 f9d2 	bl	8019184 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	0018      	movs	r0, r3
 8017de4:	f000 fd63 	bl	80188ae <USBD_CtlSendStatus>
              }
              break;
 8017de8:	e006      	b.n	8017df8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8017dea:	683a      	ldr	r2, [r7, #0]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	0011      	movs	r1, r2
 8017df0:	0018      	movs	r0, r3
 8017df2:	f000 fc74 	bl	80186de <USBD_CtlError>
              break;
 8017df6:	e000      	b.n	8017dfa <USBD_StdEPReq+0x1b0>
              break;
 8017df8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8017dfa:	e0cd      	b.n	8017f98 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017dfc:	687a      	ldr	r2, [r7, #4]
 8017dfe:	23a7      	movs	r3, #167	@ 0xa7
 8017e00:	009b      	lsls	r3, r3, #2
 8017e02:	5cd3      	ldrb	r3, [r2, r3]
 8017e04:	2b02      	cmp	r3, #2
 8017e06:	d002      	beq.n	8017e0e <USBD_StdEPReq+0x1c4>
 8017e08:	2b03      	cmp	r3, #3
 8017e0a:	d03c      	beq.n	8017e86 <USBD_StdEPReq+0x23c>
 8017e0c:	e0b5      	b.n	8017f7a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017e0e:	220e      	movs	r2, #14
 8017e10:	18bb      	adds	r3, r7, r2
 8017e12:	781b      	ldrb	r3, [r3, #0]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d00a      	beq.n	8017e2e <USBD_StdEPReq+0x1e4>
 8017e18:	18bb      	adds	r3, r7, r2
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	2b80      	cmp	r3, #128	@ 0x80
 8017e1e:	d006      	beq.n	8017e2e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8017e20:	683a      	ldr	r2, [r7, #0]
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	0011      	movs	r1, r2
 8017e26:	0018      	movs	r0, r3
 8017e28:	f000 fc59 	bl	80186de <USBD_CtlError>
                break;
 8017e2c:	e0ac      	b.n	8017f88 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017e2e:	220e      	movs	r2, #14
 8017e30:	18bb      	adds	r3, r7, r2
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	b25b      	sxtb	r3, r3
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	da0c      	bge.n	8017e54 <USBD_StdEPReq+0x20a>
 8017e3a:	18bb      	adds	r3, r7, r2
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	227f      	movs	r2, #127	@ 0x7f
 8017e40:	401a      	ands	r2, r3
 8017e42:	0013      	movs	r3, r2
 8017e44:	009b      	lsls	r3, r3, #2
 8017e46:	189b      	adds	r3, r3, r2
 8017e48:	009b      	lsls	r3, r3, #2
 8017e4a:	3310      	adds	r3, #16
 8017e4c:	687a      	ldr	r2, [r7, #4]
 8017e4e:	18d3      	adds	r3, r2, r3
 8017e50:	3304      	adds	r3, #4
 8017e52:	e00d      	b.n	8017e70 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017e54:	230e      	movs	r3, #14
 8017e56:	18fb      	adds	r3, r7, r3
 8017e58:	781b      	ldrb	r3, [r3, #0]
 8017e5a:	227f      	movs	r2, #127	@ 0x7f
 8017e5c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017e5e:	0013      	movs	r3, r2
 8017e60:	009b      	lsls	r3, r3, #2
 8017e62:	189b      	adds	r3, r3, r2
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	3351      	adds	r3, #81	@ 0x51
 8017e68:	33ff      	adds	r3, #255	@ 0xff
 8017e6a:	687a      	ldr	r2, [r7, #4]
 8017e6c:	18d3      	adds	r3, r2, r3
 8017e6e:	3304      	adds	r3, #4
 8017e70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017e72:	68bb      	ldr	r3, [r7, #8]
 8017e74:	2200      	movs	r2, #0
 8017e76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017e78:	68b9      	ldr	r1, [r7, #8]
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2202      	movs	r2, #2
 8017e7e:	0018      	movs	r0, r3
 8017e80:	f000 fcab 	bl	80187da <USBD_CtlSendData>
              break;
 8017e84:	e080      	b.n	8017f88 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017e86:	220e      	movs	r2, #14
 8017e88:	18bb      	adds	r3, r7, r2
 8017e8a:	781b      	ldrb	r3, [r3, #0]
 8017e8c:	b25b      	sxtb	r3, r3
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	da14      	bge.n	8017ebc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017e92:	18bb      	adds	r3, r7, r2
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	220f      	movs	r2, #15
 8017e98:	401a      	ands	r2, r3
 8017e9a:	6879      	ldr	r1, [r7, #4]
 8017e9c:	0013      	movs	r3, r2
 8017e9e:	009b      	lsls	r3, r3, #2
 8017ea0:	189b      	adds	r3, r3, r2
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	18cb      	adds	r3, r1, r3
 8017ea6:	3318      	adds	r3, #24
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d11e      	bne.n	8017eec <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8017eae:	683a      	ldr	r2, [r7, #0]
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	0011      	movs	r1, r2
 8017eb4:	0018      	movs	r0, r3
 8017eb6:	f000 fc12 	bl	80186de <USBD_CtlError>
                  break;
 8017eba:	e065      	b.n	8017f88 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017ebc:	230e      	movs	r3, #14
 8017ebe:	18fb      	adds	r3, r7, r3
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	220f      	movs	r2, #15
 8017ec4:	401a      	ands	r2, r3
 8017ec6:	6878      	ldr	r0, [r7, #4]
 8017ec8:	23ac      	movs	r3, #172	@ 0xac
 8017eca:	0059      	lsls	r1, r3, #1
 8017ecc:	0013      	movs	r3, r2
 8017ece:	009b      	lsls	r3, r3, #2
 8017ed0:	189b      	adds	r3, r3, r2
 8017ed2:	009b      	lsls	r3, r3, #2
 8017ed4:	18c3      	adds	r3, r0, r3
 8017ed6:	185b      	adds	r3, r3, r1
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d106      	bne.n	8017eec <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8017ede:	683a      	ldr	r2, [r7, #0]
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	0011      	movs	r1, r2
 8017ee4:	0018      	movs	r0, r3
 8017ee6:	f000 fbfa 	bl	80186de <USBD_CtlError>
                  break;
 8017eea:	e04d      	b.n	8017f88 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017eec:	220e      	movs	r2, #14
 8017eee:	18bb      	adds	r3, r7, r2
 8017ef0:	781b      	ldrb	r3, [r3, #0]
 8017ef2:	b25b      	sxtb	r3, r3
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	da0c      	bge.n	8017f12 <USBD_StdEPReq+0x2c8>
 8017ef8:	18bb      	adds	r3, r7, r2
 8017efa:	781b      	ldrb	r3, [r3, #0]
 8017efc:	227f      	movs	r2, #127	@ 0x7f
 8017efe:	401a      	ands	r2, r3
 8017f00:	0013      	movs	r3, r2
 8017f02:	009b      	lsls	r3, r3, #2
 8017f04:	189b      	adds	r3, r3, r2
 8017f06:	009b      	lsls	r3, r3, #2
 8017f08:	3310      	adds	r3, #16
 8017f0a:	687a      	ldr	r2, [r7, #4]
 8017f0c:	18d3      	adds	r3, r2, r3
 8017f0e:	3304      	adds	r3, #4
 8017f10:	e00d      	b.n	8017f2e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017f12:	230e      	movs	r3, #14
 8017f14:	18fb      	adds	r3, r7, r3
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	227f      	movs	r2, #127	@ 0x7f
 8017f1a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017f1c:	0013      	movs	r3, r2
 8017f1e:	009b      	lsls	r3, r3, #2
 8017f20:	189b      	adds	r3, r3, r2
 8017f22:	009b      	lsls	r3, r3, #2
 8017f24:	3351      	adds	r3, #81	@ 0x51
 8017f26:	33ff      	adds	r3, #255	@ 0xff
 8017f28:	687a      	ldr	r2, [r7, #4]
 8017f2a:	18d3      	adds	r3, r2, r3
 8017f2c:	3304      	adds	r3, #4
 8017f2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017f30:	220e      	movs	r2, #14
 8017f32:	18bb      	adds	r3, r7, r2
 8017f34:	781b      	ldrb	r3, [r3, #0]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d003      	beq.n	8017f42 <USBD_StdEPReq+0x2f8>
 8017f3a:	18bb      	adds	r3, r7, r2
 8017f3c:	781b      	ldrb	r3, [r3, #0]
 8017f3e:	2b80      	cmp	r3, #128	@ 0x80
 8017f40:	d103      	bne.n	8017f4a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	2200      	movs	r2, #0
 8017f46:	601a      	str	r2, [r3, #0]
 8017f48:	e010      	b.n	8017f6c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8017f4a:	230e      	movs	r3, #14
 8017f4c:	18fb      	adds	r3, r7, r3
 8017f4e:	781a      	ldrb	r2, [r3, #0]
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	0011      	movs	r1, r2
 8017f54:	0018      	movs	r0, r3
 8017f56:	f001 f940 	bl	80191da <USBD_LL_IsStallEP>
 8017f5a:	1e03      	subs	r3, r0, #0
 8017f5c:	d003      	beq.n	8017f66 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	2201      	movs	r2, #1
 8017f62:	601a      	str	r2, [r3, #0]
 8017f64:	e002      	b.n	8017f6c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	2200      	movs	r2, #0
 8017f6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017f6c:	68b9      	ldr	r1, [r7, #8]
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	2202      	movs	r2, #2
 8017f72:	0018      	movs	r0, r3
 8017f74:	f000 fc31 	bl	80187da <USBD_CtlSendData>
              break;
 8017f78:	e006      	b.n	8017f88 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8017f7a:	683a      	ldr	r2, [r7, #0]
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	0011      	movs	r1, r2
 8017f80:	0018      	movs	r0, r3
 8017f82:	f000 fbac 	bl	80186de <USBD_CtlError>
              break;
 8017f86:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8017f88:	e006      	b.n	8017f98 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8017f8a:	683a      	ldr	r2, [r7, #0]
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	0011      	movs	r1, r2
 8017f90:	0018      	movs	r0, r3
 8017f92:	f000 fba4 	bl	80186de <USBD_CtlError>
          break;
 8017f96:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017f98:	e006      	b.n	8017fa8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8017f9a:	683a      	ldr	r2, [r7, #0]
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	0011      	movs	r1, r2
 8017fa0:	0018      	movs	r0, r3
 8017fa2:	f000 fb9c 	bl	80186de <USBD_CtlError>
      break;
 8017fa6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8017fa8:	230f      	movs	r3, #15
 8017faa:	18fb      	adds	r3, r7, r3
 8017fac:	781b      	ldrb	r3, [r3, #0]
}
 8017fae:	0018      	movs	r0, r3
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	b004      	add	sp, #16
 8017fb4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017fb8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b084      	sub	sp, #16
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
 8017fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017fc2:	2308      	movs	r3, #8
 8017fc4:	18fb      	adds	r3, r7, r3
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017fce:	230b      	movs	r3, #11
 8017fd0:	18fb      	adds	r3, r7, r3
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	885b      	ldrh	r3, [r3, #2]
 8017fda:	0a1b      	lsrs	r3, r3, #8
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	2b07      	cmp	r3, #7
 8017fe0:	d900      	bls.n	8017fe4 <USBD_GetDescriptor+0x2c>
 8017fe2:	e159      	b.n	8018298 <USBD_GetDescriptor+0x2e0>
 8017fe4:	009a      	lsls	r2, r3, #2
 8017fe6:	4bcb      	ldr	r3, [pc, #812]	@ (8018314 <USBD_GetDescriptor+0x35c>)
 8017fe8:	18d3      	adds	r3, r2, r3
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017fee:	687a      	ldr	r2, [r7, #4]
 8017ff0:	23ac      	movs	r3, #172	@ 0xac
 8017ff2:	009b      	lsls	r3, r3, #2
 8017ff4:	58d3      	ldr	r3, [r2, r3]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	687a      	ldr	r2, [r7, #4]
 8017ffa:	7c12      	ldrb	r2, [r2, #16]
 8017ffc:	2108      	movs	r1, #8
 8017ffe:	1879      	adds	r1, r7, r1
 8018000:	0010      	movs	r0, r2
 8018002:	4798      	blx	r3
 8018004:	0003      	movs	r3, r0
 8018006:	60fb      	str	r3, [r7, #12]
      break;
 8018008:	e153      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	7c1b      	ldrb	r3, [r3, #16]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d10f      	bne.n	8018032 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8018012:	687a      	ldr	r2, [r7, #4]
 8018014:	23ad      	movs	r3, #173	@ 0xad
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	58d3      	ldr	r3, [r2, r3]
 801801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801801c:	2208      	movs	r2, #8
 801801e:	18ba      	adds	r2, r7, r2
 8018020:	0010      	movs	r0, r2
 8018022:	4798      	blx	r3
 8018024:	0003      	movs	r3, r0
 8018026:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	3301      	adds	r3, #1
 801802c:	2202      	movs	r2, #2
 801802e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018030:	e13f      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018032:	687a      	ldr	r2, [r7, #4]
 8018034:	23ad      	movs	r3, #173	@ 0xad
 8018036:	009b      	lsls	r3, r3, #2
 8018038:	58d3      	ldr	r3, [r2, r3]
 801803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801803c:	2208      	movs	r2, #8
 801803e:	18ba      	adds	r2, r7, r2
 8018040:	0010      	movs	r0, r2
 8018042:	4798      	blx	r3
 8018044:	0003      	movs	r3, r0
 8018046:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	3301      	adds	r3, #1
 801804c:	2202      	movs	r2, #2
 801804e:	701a      	strb	r2, [r3, #0]
      break;
 8018050:	e12f      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018052:	683b      	ldr	r3, [r7, #0]
 8018054:	885b      	ldrh	r3, [r3, #2]
 8018056:	b2db      	uxtb	r3, r3
 8018058:	2b05      	cmp	r3, #5
 801805a:	d900      	bls.n	801805e <USBD_GetDescriptor+0xa6>
 801805c:	e0d0      	b.n	8018200 <USBD_GetDescriptor+0x248>
 801805e:	009a      	lsls	r2, r3, #2
 8018060:	4bad      	ldr	r3, [pc, #692]	@ (8018318 <USBD_GetDescriptor+0x360>)
 8018062:	18d3      	adds	r3, r2, r3
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018068:	687a      	ldr	r2, [r7, #4]
 801806a:	23ac      	movs	r3, #172	@ 0xac
 801806c:	009b      	lsls	r3, r3, #2
 801806e:	58d3      	ldr	r3, [r2, r3]
 8018070:	685b      	ldr	r3, [r3, #4]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d00d      	beq.n	8018092 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	23ac      	movs	r3, #172	@ 0xac
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	58d3      	ldr	r3, [r2, r3]
 801807e:	685b      	ldr	r3, [r3, #4]
 8018080:	687a      	ldr	r2, [r7, #4]
 8018082:	7c12      	ldrb	r2, [r2, #16]
 8018084:	2108      	movs	r1, #8
 8018086:	1879      	adds	r1, r7, r1
 8018088:	0010      	movs	r0, r2
 801808a:	4798      	blx	r3
 801808c:	0003      	movs	r3, r0
 801808e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018090:	e0c3      	b.n	801821a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018092:	683a      	ldr	r2, [r7, #0]
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	0011      	movs	r1, r2
 8018098:	0018      	movs	r0, r3
 801809a:	f000 fb20 	bl	80186de <USBD_CtlError>
            err++;
 801809e:	210b      	movs	r1, #11
 80180a0:	187b      	adds	r3, r7, r1
 80180a2:	781a      	ldrb	r2, [r3, #0]
 80180a4:	187b      	adds	r3, r7, r1
 80180a6:	3201      	adds	r2, #1
 80180a8:	701a      	strb	r2, [r3, #0]
          break;
 80180aa:	e0b6      	b.n	801821a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80180ac:	687a      	ldr	r2, [r7, #4]
 80180ae:	23ac      	movs	r3, #172	@ 0xac
 80180b0:	009b      	lsls	r3, r3, #2
 80180b2:	58d3      	ldr	r3, [r2, r3]
 80180b4:	689b      	ldr	r3, [r3, #8]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d00d      	beq.n	80180d6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	23ac      	movs	r3, #172	@ 0xac
 80180be:	009b      	lsls	r3, r3, #2
 80180c0:	58d3      	ldr	r3, [r2, r3]
 80180c2:	689b      	ldr	r3, [r3, #8]
 80180c4:	687a      	ldr	r2, [r7, #4]
 80180c6:	7c12      	ldrb	r2, [r2, #16]
 80180c8:	2108      	movs	r1, #8
 80180ca:	1879      	adds	r1, r7, r1
 80180cc:	0010      	movs	r0, r2
 80180ce:	4798      	blx	r3
 80180d0:	0003      	movs	r3, r0
 80180d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80180d4:	e0a1      	b.n	801821a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80180d6:	683a      	ldr	r2, [r7, #0]
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	0011      	movs	r1, r2
 80180dc:	0018      	movs	r0, r3
 80180de:	f000 fafe 	bl	80186de <USBD_CtlError>
            err++;
 80180e2:	210b      	movs	r1, #11
 80180e4:	187b      	adds	r3, r7, r1
 80180e6:	781a      	ldrb	r2, [r3, #0]
 80180e8:	187b      	adds	r3, r7, r1
 80180ea:	3201      	adds	r2, #1
 80180ec:	701a      	strb	r2, [r3, #0]
          break;
 80180ee:	e094      	b.n	801821a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80180f0:	687a      	ldr	r2, [r7, #4]
 80180f2:	23ac      	movs	r3, #172	@ 0xac
 80180f4:	009b      	lsls	r3, r3, #2
 80180f6:	58d3      	ldr	r3, [r2, r3]
 80180f8:	68db      	ldr	r3, [r3, #12]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d00d      	beq.n	801811a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80180fe:	687a      	ldr	r2, [r7, #4]
 8018100:	23ac      	movs	r3, #172	@ 0xac
 8018102:	009b      	lsls	r3, r3, #2
 8018104:	58d3      	ldr	r3, [r2, r3]
 8018106:	68db      	ldr	r3, [r3, #12]
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	7c12      	ldrb	r2, [r2, #16]
 801810c:	2108      	movs	r1, #8
 801810e:	1879      	adds	r1, r7, r1
 8018110:	0010      	movs	r0, r2
 8018112:	4798      	blx	r3
 8018114:	0003      	movs	r3, r0
 8018116:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018118:	e07f      	b.n	801821a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801811a:	683a      	ldr	r2, [r7, #0]
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	0011      	movs	r1, r2
 8018120:	0018      	movs	r0, r3
 8018122:	f000 fadc 	bl	80186de <USBD_CtlError>
            err++;
 8018126:	210b      	movs	r1, #11
 8018128:	187b      	adds	r3, r7, r1
 801812a:	781a      	ldrb	r2, [r3, #0]
 801812c:	187b      	adds	r3, r7, r1
 801812e:	3201      	adds	r2, #1
 8018130:	701a      	strb	r2, [r3, #0]
          break;
 8018132:	e072      	b.n	801821a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018134:	687a      	ldr	r2, [r7, #4]
 8018136:	23ac      	movs	r3, #172	@ 0xac
 8018138:	009b      	lsls	r3, r3, #2
 801813a:	58d3      	ldr	r3, [r2, r3]
 801813c:	691b      	ldr	r3, [r3, #16]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d00d      	beq.n	801815e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018142:	687a      	ldr	r2, [r7, #4]
 8018144:	23ac      	movs	r3, #172	@ 0xac
 8018146:	009b      	lsls	r3, r3, #2
 8018148:	58d3      	ldr	r3, [r2, r3]
 801814a:	691b      	ldr	r3, [r3, #16]
 801814c:	687a      	ldr	r2, [r7, #4]
 801814e:	7c12      	ldrb	r2, [r2, #16]
 8018150:	2108      	movs	r1, #8
 8018152:	1879      	adds	r1, r7, r1
 8018154:	0010      	movs	r0, r2
 8018156:	4798      	blx	r3
 8018158:	0003      	movs	r3, r0
 801815a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801815c:	e05d      	b.n	801821a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801815e:	683a      	ldr	r2, [r7, #0]
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	0011      	movs	r1, r2
 8018164:	0018      	movs	r0, r3
 8018166:	f000 faba 	bl	80186de <USBD_CtlError>
            err++;
 801816a:	210b      	movs	r1, #11
 801816c:	187b      	adds	r3, r7, r1
 801816e:	781a      	ldrb	r2, [r3, #0]
 8018170:	187b      	adds	r3, r7, r1
 8018172:	3201      	adds	r2, #1
 8018174:	701a      	strb	r2, [r3, #0]
          break;
 8018176:	e050      	b.n	801821a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018178:	687a      	ldr	r2, [r7, #4]
 801817a:	23ac      	movs	r3, #172	@ 0xac
 801817c:	009b      	lsls	r3, r3, #2
 801817e:	58d3      	ldr	r3, [r2, r3]
 8018180:	695b      	ldr	r3, [r3, #20]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d00d      	beq.n	80181a2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018186:	687a      	ldr	r2, [r7, #4]
 8018188:	23ac      	movs	r3, #172	@ 0xac
 801818a:	009b      	lsls	r3, r3, #2
 801818c:	58d3      	ldr	r3, [r2, r3]
 801818e:	695b      	ldr	r3, [r3, #20]
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	7c12      	ldrb	r2, [r2, #16]
 8018194:	2108      	movs	r1, #8
 8018196:	1879      	adds	r1, r7, r1
 8018198:	0010      	movs	r0, r2
 801819a:	4798      	blx	r3
 801819c:	0003      	movs	r3, r0
 801819e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80181a0:	e03b      	b.n	801821a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80181a2:	683a      	ldr	r2, [r7, #0]
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	0011      	movs	r1, r2
 80181a8:	0018      	movs	r0, r3
 80181aa:	f000 fa98 	bl	80186de <USBD_CtlError>
            err++;
 80181ae:	210b      	movs	r1, #11
 80181b0:	187b      	adds	r3, r7, r1
 80181b2:	781a      	ldrb	r2, [r3, #0]
 80181b4:	187b      	adds	r3, r7, r1
 80181b6:	3201      	adds	r2, #1
 80181b8:	701a      	strb	r2, [r3, #0]
          break;
 80181ba:	e02e      	b.n	801821a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80181bc:	687a      	ldr	r2, [r7, #4]
 80181be:	23ac      	movs	r3, #172	@ 0xac
 80181c0:	009b      	lsls	r3, r3, #2
 80181c2:	58d3      	ldr	r3, [r2, r3]
 80181c4:	699b      	ldr	r3, [r3, #24]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00d      	beq.n	80181e6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80181ca:	687a      	ldr	r2, [r7, #4]
 80181cc:	23ac      	movs	r3, #172	@ 0xac
 80181ce:	009b      	lsls	r3, r3, #2
 80181d0:	58d3      	ldr	r3, [r2, r3]
 80181d2:	699b      	ldr	r3, [r3, #24]
 80181d4:	687a      	ldr	r2, [r7, #4]
 80181d6:	7c12      	ldrb	r2, [r2, #16]
 80181d8:	2108      	movs	r1, #8
 80181da:	1879      	adds	r1, r7, r1
 80181dc:	0010      	movs	r0, r2
 80181de:	4798      	blx	r3
 80181e0:	0003      	movs	r3, r0
 80181e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80181e4:	e019      	b.n	801821a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80181e6:	683a      	ldr	r2, [r7, #0]
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	0011      	movs	r1, r2
 80181ec:	0018      	movs	r0, r3
 80181ee:	f000 fa76 	bl	80186de <USBD_CtlError>
            err++;
 80181f2:	210b      	movs	r1, #11
 80181f4:	187b      	adds	r3, r7, r1
 80181f6:	781a      	ldrb	r2, [r3, #0]
 80181f8:	187b      	adds	r3, r7, r1
 80181fa:	3201      	adds	r2, #1
 80181fc:	701a      	strb	r2, [r3, #0]
          break;
 80181fe:	e00c      	b.n	801821a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8018200:	683a      	ldr	r2, [r7, #0]
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	0011      	movs	r1, r2
 8018206:	0018      	movs	r0, r3
 8018208:	f000 fa69 	bl	80186de <USBD_CtlError>
          err++;
 801820c:	210b      	movs	r1, #11
 801820e:	187b      	adds	r3, r7, r1
 8018210:	781a      	ldrb	r2, [r3, #0]
 8018212:	187b      	adds	r3, r7, r1
 8018214:	3201      	adds	r2, #1
 8018216:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8018218:	e04b      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>
 801821a:	e04a      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	7c1b      	ldrb	r3, [r3, #16]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d10b      	bne.n	801823c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018224:	687a      	ldr	r2, [r7, #4]
 8018226:	23ad      	movs	r3, #173	@ 0xad
 8018228:	009b      	lsls	r3, r3, #2
 801822a:	58d3      	ldr	r3, [r2, r3]
 801822c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801822e:	2208      	movs	r2, #8
 8018230:	18ba      	adds	r2, r7, r2
 8018232:	0010      	movs	r0, r2
 8018234:	4798      	blx	r3
 8018236:	0003      	movs	r3, r0
 8018238:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801823a:	e03a      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801823c:	683a      	ldr	r2, [r7, #0]
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	0011      	movs	r1, r2
 8018242:	0018      	movs	r0, r3
 8018244:	f000 fa4b 	bl	80186de <USBD_CtlError>
        err++;
 8018248:	210b      	movs	r1, #11
 801824a:	187b      	adds	r3, r7, r1
 801824c:	781a      	ldrb	r2, [r3, #0]
 801824e:	187b      	adds	r3, r7, r1
 8018250:	3201      	adds	r2, #1
 8018252:	701a      	strb	r2, [r3, #0]
      break;
 8018254:	e02d      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	7c1b      	ldrb	r3, [r3, #16]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d10f      	bne.n	801827e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	23ad      	movs	r3, #173	@ 0xad
 8018262:	009b      	lsls	r3, r3, #2
 8018264:	58d3      	ldr	r3, [r2, r3]
 8018266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018268:	2208      	movs	r2, #8
 801826a:	18ba      	adds	r2, r7, r2
 801826c:	0010      	movs	r0, r2
 801826e:	4798      	blx	r3
 8018270:	0003      	movs	r3, r0
 8018272:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	3301      	adds	r3, #1
 8018278:	2207      	movs	r2, #7
 801827a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801827c:	e019      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801827e:	683a      	ldr	r2, [r7, #0]
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	0011      	movs	r1, r2
 8018284:	0018      	movs	r0, r3
 8018286:	f000 fa2a 	bl	80186de <USBD_CtlError>
        err++;
 801828a:	210b      	movs	r1, #11
 801828c:	187b      	adds	r3, r7, r1
 801828e:	781a      	ldrb	r2, [r3, #0]
 8018290:	187b      	adds	r3, r7, r1
 8018292:	3201      	adds	r2, #1
 8018294:	701a      	strb	r2, [r3, #0]
      break;
 8018296:	e00c      	b.n	80182b2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8018298:	683a      	ldr	r2, [r7, #0]
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	0011      	movs	r1, r2
 801829e:	0018      	movs	r0, r3
 80182a0:	f000 fa1d 	bl	80186de <USBD_CtlError>
      err++;
 80182a4:	210b      	movs	r1, #11
 80182a6:	187b      	adds	r3, r7, r1
 80182a8:	781a      	ldrb	r2, [r3, #0]
 80182aa:	187b      	adds	r3, r7, r1
 80182ac:	3201      	adds	r2, #1
 80182ae:	701a      	strb	r2, [r3, #0]
      break;
 80182b0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80182b2:	230b      	movs	r3, #11
 80182b4:	18fb      	adds	r3, r7, r3
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d127      	bne.n	801830c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80182bc:	2108      	movs	r1, #8
 80182be:	187b      	adds	r3, r7, r1
 80182c0:	881b      	ldrh	r3, [r3, #0]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d019      	beq.n	80182fa <USBD_GetDescriptor+0x342>
 80182c6:	683b      	ldr	r3, [r7, #0]
 80182c8:	88db      	ldrh	r3, [r3, #6]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d015      	beq.n	80182fa <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	88da      	ldrh	r2, [r3, #6]
 80182d2:	187b      	adds	r3, r7, r1
 80182d4:	881b      	ldrh	r3, [r3, #0]
 80182d6:	1c18      	adds	r0, r3, #0
 80182d8:	1c11      	adds	r1, r2, #0
 80182da:	b28a      	uxth	r2, r1
 80182dc:	b283      	uxth	r3, r0
 80182de:	429a      	cmp	r2, r3
 80182e0:	d900      	bls.n	80182e4 <USBD_GetDescriptor+0x32c>
 80182e2:	1c01      	adds	r1, r0, #0
 80182e4:	b28a      	uxth	r2, r1
 80182e6:	2108      	movs	r1, #8
 80182e8:	187b      	adds	r3, r7, r1
 80182ea:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80182ec:	187b      	adds	r3, r7, r1
 80182ee:	881a      	ldrh	r2, [r3, #0]
 80182f0:	68f9      	ldr	r1, [r7, #12]
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	0018      	movs	r0, r3
 80182f6:	f000 fa70 	bl	80187da <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	88db      	ldrh	r3, [r3, #6]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d105      	bne.n	801830e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	0018      	movs	r0, r3
 8018306:	f000 fad2 	bl	80188ae <USBD_CtlSendStatus>
 801830a:	e000      	b.n	801830e <USBD_GetDescriptor+0x356>
    return;
 801830c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801830e:	46bd      	mov	sp, r7
 8018310:	b004      	add	sp, #16
 8018312:	bd80      	pop	{r7, pc}
 8018314:	0802017c 	.word	0x0802017c
 8018318:	0802019c 	.word	0x0802019c

0801831c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801831c:	b590      	push	{r4, r7, lr}
 801831e:	b085      	sub	sp, #20
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
 8018324:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	889b      	ldrh	r3, [r3, #4]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d13d      	bne.n	80183aa <USBD_SetAddress+0x8e>
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	88db      	ldrh	r3, [r3, #6]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d139      	bne.n	80183aa <USBD_SetAddress+0x8e>
 8018336:	683b      	ldr	r3, [r7, #0]
 8018338:	885b      	ldrh	r3, [r3, #2]
 801833a:	2b7f      	cmp	r3, #127	@ 0x7f
 801833c:	d835      	bhi.n	80183aa <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	885b      	ldrh	r3, [r3, #2]
 8018342:	b2da      	uxtb	r2, r3
 8018344:	230f      	movs	r3, #15
 8018346:	18fb      	adds	r3, r7, r3
 8018348:	217f      	movs	r1, #127	@ 0x7f
 801834a:	400a      	ands	r2, r1
 801834c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801834e:	687a      	ldr	r2, [r7, #4]
 8018350:	23a7      	movs	r3, #167	@ 0xa7
 8018352:	009b      	lsls	r3, r3, #2
 8018354:	5cd3      	ldrb	r3, [r2, r3]
 8018356:	2b03      	cmp	r3, #3
 8018358:	d106      	bne.n	8018368 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801835a:	683a      	ldr	r2, [r7, #0]
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	0011      	movs	r1, r2
 8018360:	0018      	movs	r0, r3
 8018362:	f000 f9bc 	bl	80186de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018366:	e027      	b.n	80183b8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	240f      	movs	r4, #15
 801836c:	193a      	adds	r2, r7, r4
 801836e:	4914      	ldr	r1, [pc, #80]	@ (80183c0 <USBD_SetAddress+0xa4>)
 8018370:	7812      	ldrb	r2, [r2, #0]
 8018372:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018374:	193b      	adds	r3, r7, r4
 8018376:	781a      	ldrb	r2, [r3, #0]
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	0011      	movs	r1, r2
 801837c:	0018      	movs	r0, r3
 801837e:	f000 ff5d 	bl	801923c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	0018      	movs	r0, r3
 8018386:	f000 fa92 	bl	80188ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801838a:	193b      	adds	r3, r7, r4
 801838c:	781b      	ldrb	r3, [r3, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d005      	beq.n	801839e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	23a7      	movs	r3, #167	@ 0xa7
 8018396:	009b      	lsls	r3, r3, #2
 8018398:	2102      	movs	r1, #2
 801839a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801839c:	e00c      	b.n	80183b8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801839e:	687a      	ldr	r2, [r7, #4]
 80183a0:	23a7      	movs	r3, #167	@ 0xa7
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	2101      	movs	r1, #1
 80183a6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80183a8:	e006      	b.n	80183b8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80183aa:	683a      	ldr	r2, [r7, #0]
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	0011      	movs	r1, r2
 80183b0:	0018      	movs	r0, r3
 80183b2:	f000 f994 	bl	80186de <USBD_CtlError>
  }
}
 80183b6:	46c0      	nop			@ (mov r8, r8)
 80183b8:	46c0      	nop			@ (mov r8, r8)
 80183ba:	46bd      	mov	sp, r7
 80183bc:	b005      	add	sp, #20
 80183be:	bd90      	pop	{r4, r7, pc}
 80183c0:	0000029e 	.word	0x0000029e

080183c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
 80183cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80183ce:	683b      	ldr	r3, [r7, #0]
 80183d0:	885b      	ldrh	r3, [r3, #2]
 80183d2:	b2da      	uxtb	r2, r3
 80183d4:	4b4c      	ldr	r3, [pc, #304]	@ (8018508 <USBD_SetConfig+0x144>)
 80183d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80183d8:	4b4b      	ldr	r3, [pc, #300]	@ (8018508 <USBD_SetConfig+0x144>)
 80183da:	781b      	ldrb	r3, [r3, #0]
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d906      	bls.n	80183ee <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80183e0:	683a      	ldr	r2, [r7, #0]
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	0011      	movs	r1, r2
 80183e6:	0018      	movs	r0, r3
 80183e8:	f000 f979 	bl	80186de <USBD_CtlError>
 80183ec:	e088      	b.n	8018500 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80183ee:	687a      	ldr	r2, [r7, #4]
 80183f0:	23a7      	movs	r3, #167	@ 0xa7
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	5cd3      	ldrb	r3, [r2, r3]
 80183f6:	2b02      	cmp	r3, #2
 80183f8:	d002      	beq.n	8018400 <USBD_SetConfig+0x3c>
 80183fa:	2b03      	cmp	r3, #3
 80183fc:	d029      	beq.n	8018452 <USBD_SetConfig+0x8e>
 80183fe:	e071      	b.n	80184e4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8018400:	4b41      	ldr	r3, [pc, #260]	@ (8018508 <USBD_SetConfig+0x144>)
 8018402:	781b      	ldrb	r3, [r3, #0]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d01f      	beq.n	8018448 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8018408:	4b3f      	ldr	r3, [pc, #252]	@ (8018508 <USBD_SetConfig+0x144>)
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	001a      	movs	r2, r3
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018412:	687a      	ldr	r2, [r7, #4]
 8018414:	23a7      	movs	r3, #167	@ 0xa7
 8018416:	009b      	lsls	r3, r3, #2
 8018418:	2103      	movs	r1, #3
 801841a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801841c:	4b3a      	ldr	r3, [pc, #232]	@ (8018508 <USBD_SetConfig+0x144>)
 801841e:	781a      	ldrb	r2, [r3, #0]
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	0011      	movs	r1, r2
 8018424:	0018      	movs	r0, r3
 8018426:	f7ff f8c6 	bl	80175b6 <USBD_SetClassConfig>
 801842a:	0003      	movs	r3, r0
 801842c:	2b02      	cmp	r3, #2
 801842e:	d106      	bne.n	801843e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8018430:	683a      	ldr	r2, [r7, #0]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	0011      	movs	r1, r2
 8018436:	0018      	movs	r0, r3
 8018438:	f000 f951 	bl	80186de <USBD_CtlError>
            return;
 801843c:	e060      	b.n	8018500 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	0018      	movs	r0, r3
 8018442:	f000 fa34 	bl	80188ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018446:	e05b      	b.n	8018500 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	0018      	movs	r0, r3
 801844c:	f000 fa2f 	bl	80188ae <USBD_CtlSendStatus>
        break;
 8018450:	e056      	b.n	8018500 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8018452:	4b2d      	ldr	r3, [pc, #180]	@ (8018508 <USBD_SetConfig+0x144>)
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d115      	bne.n	8018486 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801845a:	687a      	ldr	r2, [r7, #4]
 801845c:	23a7      	movs	r3, #167	@ 0xa7
 801845e:	009b      	lsls	r3, r3, #2
 8018460:	2102      	movs	r1, #2
 8018462:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8018464:	4b28      	ldr	r3, [pc, #160]	@ (8018508 <USBD_SetConfig+0x144>)
 8018466:	781b      	ldrb	r3, [r3, #0]
 8018468:	001a      	movs	r2, r3
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801846e:	4b26      	ldr	r3, [pc, #152]	@ (8018508 <USBD_SetConfig+0x144>)
 8018470:	781a      	ldrb	r2, [r3, #0]
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	0011      	movs	r1, r2
 8018476:	0018      	movs	r0, r3
 8018478:	f7ff f8c4 	bl	8017604 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	0018      	movs	r0, r3
 8018480:	f000 fa15 	bl	80188ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018484:	e03c      	b.n	8018500 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8018486:	4b20      	ldr	r3, [pc, #128]	@ (8018508 <USBD_SetConfig+0x144>)
 8018488:	781b      	ldrb	r3, [r3, #0]
 801848a:	001a      	movs	r2, r3
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	685b      	ldr	r3, [r3, #4]
 8018490:	429a      	cmp	r2, r3
 8018492:	d022      	beq.n	80184da <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	685b      	ldr	r3, [r3, #4]
 8018498:	b2da      	uxtb	r2, r3
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	0011      	movs	r1, r2
 801849e:	0018      	movs	r0, r3
 80184a0:	f7ff f8b0 	bl	8017604 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80184a4:	4b18      	ldr	r3, [pc, #96]	@ (8018508 <USBD_SetConfig+0x144>)
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	001a      	movs	r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80184ae:	4b16      	ldr	r3, [pc, #88]	@ (8018508 <USBD_SetConfig+0x144>)
 80184b0:	781a      	ldrb	r2, [r3, #0]
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	0011      	movs	r1, r2
 80184b6:	0018      	movs	r0, r3
 80184b8:	f7ff f87d 	bl	80175b6 <USBD_SetClassConfig>
 80184bc:	0003      	movs	r3, r0
 80184be:	2b02      	cmp	r3, #2
 80184c0:	d106      	bne.n	80184d0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80184c2:	683a      	ldr	r2, [r7, #0]
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	0011      	movs	r1, r2
 80184c8:	0018      	movs	r0, r3
 80184ca:	f000 f908 	bl	80186de <USBD_CtlError>
            return;
 80184ce:	e017      	b.n	8018500 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	0018      	movs	r0, r3
 80184d4:	f000 f9eb 	bl	80188ae <USBD_CtlSendStatus>
        break;
 80184d8:	e012      	b.n	8018500 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	0018      	movs	r0, r3
 80184de:	f000 f9e6 	bl	80188ae <USBD_CtlSendStatus>
        break;
 80184e2:	e00d      	b.n	8018500 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80184e4:	683a      	ldr	r2, [r7, #0]
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	0011      	movs	r1, r2
 80184ea:	0018      	movs	r0, r3
 80184ec:	f000 f8f7 	bl	80186de <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80184f0:	4b05      	ldr	r3, [pc, #20]	@ (8018508 <USBD_SetConfig+0x144>)
 80184f2:	781a      	ldrb	r2, [r3, #0]
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	0011      	movs	r1, r2
 80184f8:	0018      	movs	r0, r3
 80184fa:	f7ff f883 	bl	8017604 <USBD_ClrClassConfig>
        break;
 80184fe:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018500:	46bd      	mov	sp, r7
 8018502:	b002      	add	sp, #8
 8018504:	bd80      	pop	{r7, pc}
 8018506:	46c0      	nop			@ (mov r8, r8)
 8018508:	200024c0 	.word	0x200024c0

0801850c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b082      	sub	sp, #8
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	88db      	ldrh	r3, [r3, #6]
 801851a:	2b01      	cmp	r3, #1
 801851c:	d006      	beq.n	801852c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801851e:	683a      	ldr	r2, [r7, #0]
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	0011      	movs	r1, r2
 8018524:	0018      	movs	r0, r3
 8018526:	f000 f8da 	bl	80186de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801852a:	e026      	b.n	801857a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801852c:	687a      	ldr	r2, [r7, #4]
 801852e:	23a7      	movs	r3, #167	@ 0xa7
 8018530:	009b      	lsls	r3, r3, #2
 8018532:	5cd3      	ldrb	r3, [r2, r3]
 8018534:	2b02      	cmp	r3, #2
 8018536:	dc02      	bgt.n	801853e <USBD_GetConfig+0x32>
 8018538:	2b00      	cmp	r3, #0
 801853a:	dc03      	bgt.n	8018544 <USBD_GetConfig+0x38>
 801853c:	e016      	b.n	801856c <USBD_GetConfig+0x60>
 801853e:	2b03      	cmp	r3, #3
 8018540:	d00c      	beq.n	801855c <USBD_GetConfig+0x50>
 8018542:	e013      	b.n	801856c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2200      	movs	r2, #0
 8018548:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	3308      	adds	r3, #8
 801854e:	0019      	movs	r1, r3
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	2201      	movs	r2, #1
 8018554:	0018      	movs	r0, r3
 8018556:	f000 f940 	bl	80187da <USBD_CtlSendData>
        break;
 801855a:	e00e      	b.n	801857a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	1d19      	adds	r1, r3, #4
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2201      	movs	r2, #1
 8018564:	0018      	movs	r0, r3
 8018566:	f000 f938 	bl	80187da <USBD_CtlSendData>
        break;
 801856a:	e006      	b.n	801857a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801856c:	683a      	ldr	r2, [r7, #0]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	0011      	movs	r1, r2
 8018572:	0018      	movs	r0, r3
 8018574:	f000 f8b3 	bl	80186de <USBD_CtlError>
        break;
 8018578:	46c0      	nop			@ (mov r8, r8)
}
 801857a:	46c0      	nop			@ (mov r8, r8)
 801857c:	46bd      	mov	sp, r7
 801857e:	b002      	add	sp, #8
 8018580:	bd80      	pop	{r7, pc}

08018582 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018582:	b580      	push	{r7, lr}
 8018584:	b082      	sub	sp, #8
 8018586:	af00      	add	r7, sp, #0
 8018588:	6078      	str	r0, [r7, #4]
 801858a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801858c:	687a      	ldr	r2, [r7, #4]
 801858e:	23a7      	movs	r3, #167	@ 0xa7
 8018590:	009b      	lsls	r3, r3, #2
 8018592:	5cd3      	ldrb	r3, [r2, r3]
 8018594:	3b01      	subs	r3, #1
 8018596:	2b02      	cmp	r3, #2
 8018598:	d822      	bhi.n	80185e0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801859a:	683b      	ldr	r3, [r7, #0]
 801859c:	88db      	ldrh	r3, [r3, #6]
 801859e:	2b02      	cmp	r3, #2
 80185a0:	d006      	beq.n	80185b0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80185a2:	683a      	ldr	r2, [r7, #0]
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	0011      	movs	r1, r2
 80185a8:	0018      	movs	r0, r3
 80185aa:	f000 f898 	bl	80186de <USBD_CtlError>
        break;
 80185ae:	e01e      	b.n	80185ee <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	2201      	movs	r2, #1
 80185b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80185b6:	687a      	ldr	r2, [r7, #4]
 80185b8:	23a9      	movs	r3, #169	@ 0xa9
 80185ba:	009b      	lsls	r3, r3, #2
 80185bc:	58d3      	ldr	r3, [r2, r3]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d005      	beq.n	80185ce <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	68db      	ldr	r3, [r3, #12]
 80185c6:	2202      	movs	r2, #2
 80185c8:	431a      	orrs	r2, r3
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	330c      	adds	r3, #12
 80185d2:	0019      	movs	r1, r3
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	2202      	movs	r2, #2
 80185d8:	0018      	movs	r0, r3
 80185da:	f000 f8fe 	bl	80187da <USBD_CtlSendData>
      break;
 80185de:	e006      	b.n	80185ee <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80185e0:	683a      	ldr	r2, [r7, #0]
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	0011      	movs	r1, r2
 80185e6:	0018      	movs	r0, r3
 80185e8:	f000 f879 	bl	80186de <USBD_CtlError>
      break;
 80185ec:	46c0      	nop			@ (mov r8, r8)
  }
}
 80185ee:	46c0      	nop			@ (mov r8, r8)
 80185f0:	46bd      	mov	sp, r7
 80185f2:	b002      	add	sp, #8
 80185f4:	bd80      	pop	{r7, pc}

080185f6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80185f6:	b580      	push	{r7, lr}
 80185f8:	b082      	sub	sp, #8
 80185fa:	af00      	add	r7, sp, #0
 80185fc:	6078      	str	r0, [r7, #4]
 80185fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	885b      	ldrh	r3, [r3, #2]
 8018604:	2b01      	cmp	r3, #1
 8018606:	d108      	bne.n	801861a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8018608:	687a      	ldr	r2, [r7, #4]
 801860a:	23a9      	movs	r3, #169	@ 0xa9
 801860c:	009b      	lsls	r3, r3, #2
 801860e:	2101      	movs	r1, #1
 8018610:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	0018      	movs	r0, r3
 8018616:	f000 f94a 	bl	80188ae <USBD_CtlSendStatus>
  }
}
 801861a:	46c0      	nop			@ (mov r8, r8)
 801861c:	46bd      	mov	sp, r7
 801861e:	b002      	add	sp, #8
 8018620:	bd80      	pop	{r7, pc}

08018622 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018622:	b580      	push	{r7, lr}
 8018624:	b082      	sub	sp, #8
 8018626:	af00      	add	r7, sp, #0
 8018628:	6078      	str	r0, [r7, #4]
 801862a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801862c:	687a      	ldr	r2, [r7, #4]
 801862e:	23a7      	movs	r3, #167	@ 0xa7
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	5cd3      	ldrb	r3, [r2, r3]
 8018634:	3b01      	subs	r3, #1
 8018636:	2b02      	cmp	r3, #2
 8018638:	d80d      	bhi.n	8018656 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	885b      	ldrh	r3, [r3, #2]
 801863e:	2b01      	cmp	r3, #1
 8018640:	d110      	bne.n	8018664 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8018642:	687a      	ldr	r2, [r7, #4]
 8018644:	23a9      	movs	r3, #169	@ 0xa9
 8018646:	009b      	lsls	r3, r3, #2
 8018648:	2100      	movs	r1, #0
 801864a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	0018      	movs	r0, r3
 8018650:	f000 f92d 	bl	80188ae <USBD_CtlSendStatus>
      }
      break;
 8018654:	e006      	b.n	8018664 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8018656:	683a      	ldr	r2, [r7, #0]
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	0011      	movs	r1, r2
 801865c:	0018      	movs	r0, r3
 801865e:	f000 f83e 	bl	80186de <USBD_CtlError>
      break;
 8018662:	e000      	b.n	8018666 <USBD_ClrFeature+0x44>
      break;
 8018664:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018666:	46c0      	nop			@ (mov r8, r8)
 8018668:	46bd      	mov	sp, r7
 801866a:	b002      	add	sp, #8
 801866c:	bd80      	pop	{r7, pc}

0801866e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801866e:	b580      	push	{r7, lr}
 8018670:	b082      	sub	sp, #8
 8018672:	af00      	add	r7, sp, #0
 8018674:	6078      	str	r0, [r7, #4]
 8018676:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	781a      	ldrb	r2, [r3, #0]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	785a      	ldrb	r2, [r3, #1]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8018688:	683b      	ldr	r3, [r7, #0]
 801868a:	3302      	adds	r3, #2
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	001a      	movs	r2, r3
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	3303      	adds	r3, #3
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	021b      	lsls	r3, r3, #8
 8018698:	b29b      	uxth	r3, r3
 801869a:	18d3      	adds	r3, r2, r3
 801869c:	b29a      	uxth	r2, r3
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	3304      	adds	r3, #4
 80186a6:	781b      	ldrb	r3, [r3, #0]
 80186a8:	001a      	movs	r2, r3
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	3305      	adds	r3, #5
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	021b      	lsls	r3, r3, #8
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	18d3      	adds	r3, r2, r3
 80186b6:	b29a      	uxth	r2, r3
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80186bc:	683b      	ldr	r3, [r7, #0]
 80186be:	3306      	adds	r3, #6
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	001a      	movs	r2, r3
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	3307      	adds	r3, #7
 80186c8:	781b      	ldrb	r3, [r3, #0]
 80186ca:	021b      	lsls	r3, r3, #8
 80186cc:	b29b      	uxth	r3, r3
 80186ce:	18d3      	adds	r3, r2, r3
 80186d0:	b29a      	uxth	r2, r3
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	80da      	strh	r2, [r3, #6]

}
 80186d6:	46c0      	nop			@ (mov r8, r8)
 80186d8:	46bd      	mov	sp, r7
 80186da:	b002      	add	sp, #8
 80186dc:	bd80      	pop	{r7, pc}

080186de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80186de:	b580      	push	{r7, lr}
 80186e0:	b082      	sub	sp, #8
 80186e2:	af00      	add	r7, sp, #0
 80186e4:	6078      	str	r0, [r7, #4]
 80186e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2180      	movs	r1, #128	@ 0x80
 80186ec:	0018      	movs	r0, r3
 80186ee:	f000 fd1e 	bl	801912e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	2100      	movs	r1, #0
 80186f6:	0018      	movs	r0, r3
 80186f8:	f000 fd19 	bl	801912e <USBD_LL_StallEP>
}
 80186fc:	46c0      	nop			@ (mov r8, r8)
 80186fe:	46bd      	mov	sp, r7
 8018700:	b002      	add	sp, #8
 8018702:	bd80      	pop	{r7, pc}

08018704 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018704:	b590      	push	{r4, r7, lr}
 8018706:	b087      	sub	sp, #28
 8018708:	af00      	add	r7, sp, #0
 801870a:	60f8      	str	r0, [r7, #12]
 801870c:	60b9      	str	r1, [r7, #8]
 801870e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018710:	2417      	movs	r4, #23
 8018712:	193b      	adds	r3, r7, r4
 8018714:	2200      	movs	r2, #0
 8018716:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d03c      	beq.n	8018798 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	0018      	movs	r0, r3
 8018722:	f000 f83d 	bl	80187a0 <USBD_GetLen>
 8018726:	0003      	movs	r3, r0
 8018728:	3301      	adds	r3, #1
 801872a:	b29b      	uxth	r3, r3
 801872c:	18db      	adds	r3, r3, r3
 801872e:	b29a      	uxth	r2, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8018734:	193b      	adds	r3, r7, r4
 8018736:	781b      	ldrb	r3, [r3, #0]
 8018738:	193a      	adds	r2, r7, r4
 801873a:	1c59      	adds	r1, r3, #1
 801873c:	7011      	strb	r1, [r2, #0]
 801873e:	001a      	movs	r2, r3
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	189b      	adds	r3, r3, r2
 8018744:	687a      	ldr	r2, [r7, #4]
 8018746:	7812      	ldrb	r2, [r2, #0]
 8018748:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801874a:	193b      	adds	r3, r7, r4
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	193a      	adds	r2, r7, r4
 8018750:	1c59      	adds	r1, r3, #1
 8018752:	7011      	strb	r1, [r2, #0]
 8018754:	001a      	movs	r2, r3
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	189b      	adds	r3, r3, r2
 801875a:	2203      	movs	r2, #3
 801875c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801875e:	e017      	b.n	8018790 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	1c5a      	adds	r2, r3, #1
 8018764:	60fa      	str	r2, [r7, #12]
 8018766:	2417      	movs	r4, #23
 8018768:	193a      	adds	r2, r7, r4
 801876a:	7812      	ldrb	r2, [r2, #0]
 801876c:	1939      	adds	r1, r7, r4
 801876e:	1c50      	adds	r0, r2, #1
 8018770:	7008      	strb	r0, [r1, #0]
 8018772:	0011      	movs	r1, r2
 8018774:	68ba      	ldr	r2, [r7, #8]
 8018776:	1852      	adds	r2, r2, r1
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801877c:	193b      	adds	r3, r7, r4
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	193a      	adds	r2, r7, r4
 8018782:	1c59      	adds	r1, r3, #1
 8018784:	7011      	strb	r1, [r2, #0]
 8018786:	001a      	movs	r2, r3
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	189b      	adds	r3, r3, r2
 801878c:	2200      	movs	r2, #0
 801878e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d1e3      	bne.n	8018760 <USBD_GetString+0x5c>
    }
  }
}
 8018798:	46c0      	nop			@ (mov r8, r8)
 801879a:	46bd      	mov	sp, r7
 801879c:	b007      	add	sp, #28
 801879e:	bd90      	pop	{r4, r7, pc}

080187a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80187a8:	230f      	movs	r3, #15
 80187aa:	18fb      	adds	r3, r7, r3
 80187ac:	2200      	movs	r2, #0
 80187ae:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80187b0:	e008      	b.n	80187c4 <USBD_GetLen+0x24>
  {
    len++;
 80187b2:	210f      	movs	r1, #15
 80187b4:	187b      	adds	r3, r7, r1
 80187b6:	781a      	ldrb	r2, [r3, #0]
 80187b8:	187b      	adds	r3, r7, r1
 80187ba:	3201      	adds	r2, #1
 80187bc:	701a      	strb	r2, [r3, #0]
    buf++;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	3301      	adds	r3, #1
 80187c2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	781b      	ldrb	r3, [r3, #0]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d1f2      	bne.n	80187b2 <USBD_GetLen+0x12>
  }

  return len;
 80187cc:	230f      	movs	r3, #15
 80187ce:	18fb      	adds	r3, r7, r3
 80187d0:	781b      	ldrb	r3, [r3, #0]
}
 80187d2:	0018      	movs	r0, r3
 80187d4:	46bd      	mov	sp, r7
 80187d6:	b004      	add	sp, #16
 80187d8:	bd80      	pop	{r7, pc}

080187da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80187da:	b580      	push	{r7, lr}
 80187dc:	b084      	sub	sp, #16
 80187de:	af00      	add	r7, sp, #0
 80187e0:	60f8      	str	r0, [r7, #12]
 80187e2:	60b9      	str	r1, [r7, #8]
 80187e4:	1dbb      	adds	r3, r7, #6
 80187e6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80187e8:	68fa      	ldr	r2, [r7, #12]
 80187ea:	23a5      	movs	r3, #165	@ 0xa5
 80187ec:	009b      	lsls	r3, r3, #2
 80187ee:	2102      	movs	r1, #2
 80187f0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80187f2:	1dbb      	adds	r3, r7, #6
 80187f4:	881a      	ldrh	r2, [r3, #0]
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80187fa:	1dbb      	adds	r3, r7, #6
 80187fc:	881a      	ldrh	r2, [r3, #0]
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018802:	1dbb      	adds	r3, r7, #6
 8018804:	881b      	ldrh	r3, [r3, #0]
 8018806:	68ba      	ldr	r2, [r7, #8]
 8018808:	68f8      	ldr	r0, [r7, #12]
 801880a:	2100      	movs	r1, #0
 801880c:	f000 fd41 	bl	8019292 <USBD_LL_Transmit>

  return USBD_OK;
 8018810:	2300      	movs	r3, #0
}
 8018812:	0018      	movs	r0, r3
 8018814:	46bd      	mov	sp, r7
 8018816:	b004      	add	sp, #16
 8018818:	bd80      	pop	{r7, pc}

0801881a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801881a:	b580      	push	{r7, lr}
 801881c:	b084      	sub	sp, #16
 801881e:	af00      	add	r7, sp, #0
 8018820:	60f8      	str	r0, [r7, #12]
 8018822:	60b9      	str	r1, [r7, #8]
 8018824:	1dbb      	adds	r3, r7, #6
 8018826:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018828:	1dbb      	adds	r3, r7, #6
 801882a:	881b      	ldrh	r3, [r3, #0]
 801882c:	68ba      	ldr	r2, [r7, #8]
 801882e:	68f8      	ldr	r0, [r7, #12]
 8018830:	2100      	movs	r1, #0
 8018832:	f000 fd2e 	bl	8019292 <USBD_LL_Transmit>

  return USBD_OK;
 8018836:	2300      	movs	r3, #0
}
 8018838:	0018      	movs	r0, r3
 801883a:	46bd      	mov	sp, r7
 801883c:	b004      	add	sp, #16
 801883e:	bd80      	pop	{r7, pc}

08018840 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b084      	sub	sp, #16
 8018844:	af00      	add	r7, sp, #0
 8018846:	60f8      	str	r0, [r7, #12]
 8018848:	60b9      	str	r1, [r7, #8]
 801884a:	1dbb      	adds	r3, r7, #6
 801884c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801884e:	68fa      	ldr	r2, [r7, #12]
 8018850:	23a5      	movs	r3, #165	@ 0xa5
 8018852:	009b      	lsls	r3, r3, #2
 8018854:	2103      	movs	r1, #3
 8018856:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8018858:	1dbb      	adds	r3, r7, #6
 801885a:	8819      	ldrh	r1, [r3, #0]
 801885c:	68fa      	ldr	r2, [r7, #12]
 801885e:	23ae      	movs	r3, #174	@ 0xae
 8018860:	005b      	lsls	r3, r3, #1
 8018862:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8018864:	1dbb      	adds	r3, r7, #6
 8018866:	8819      	ldrh	r1, [r3, #0]
 8018868:	68fa      	ldr	r2, [r7, #12]
 801886a:	23b0      	movs	r3, #176	@ 0xb0
 801886c:	005b      	lsls	r3, r3, #1
 801886e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018870:	1dbb      	adds	r3, r7, #6
 8018872:	881b      	ldrh	r3, [r3, #0]
 8018874:	68ba      	ldr	r2, [r7, #8]
 8018876:	68f8      	ldr	r0, [r7, #12]
 8018878:	2100      	movs	r1, #0
 801887a:	f000 fd41 	bl	8019300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801887e:	2300      	movs	r3, #0
}
 8018880:	0018      	movs	r0, r3
 8018882:	46bd      	mov	sp, r7
 8018884:	b004      	add	sp, #16
 8018886:	bd80      	pop	{r7, pc}

08018888 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b084      	sub	sp, #16
 801888c:	af00      	add	r7, sp, #0
 801888e:	60f8      	str	r0, [r7, #12]
 8018890:	60b9      	str	r1, [r7, #8]
 8018892:	1dbb      	adds	r3, r7, #6
 8018894:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018896:	1dbb      	adds	r3, r7, #6
 8018898:	881b      	ldrh	r3, [r3, #0]
 801889a:	68ba      	ldr	r2, [r7, #8]
 801889c:	68f8      	ldr	r0, [r7, #12]
 801889e:	2100      	movs	r1, #0
 80188a0:	f000 fd2e 	bl	8019300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80188a4:	2300      	movs	r3, #0
}
 80188a6:	0018      	movs	r0, r3
 80188a8:	46bd      	mov	sp, r7
 80188aa:	b004      	add	sp, #16
 80188ac:	bd80      	pop	{r7, pc}

080188ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80188ae:	b580      	push	{r7, lr}
 80188b0:	b082      	sub	sp, #8
 80188b2:	af00      	add	r7, sp, #0
 80188b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80188b6:	687a      	ldr	r2, [r7, #4]
 80188b8:	23a5      	movs	r3, #165	@ 0xa5
 80188ba:	009b      	lsls	r3, r3, #2
 80188bc:	2104      	movs	r1, #4
 80188be:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	2300      	movs	r3, #0
 80188c4:	2200      	movs	r2, #0
 80188c6:	2100      	movs	r1, #0
 80188c8:	f000 fce3 	bl	8019292 <USBD_LL_Transmit>

  return USBD_OK;
 80188cc:	2300      	movs	r3, #0
}
 80188ce:	0018      	movs	r0, r3
 80188d0:	46bd      	mov	sp, r7
 80188d2:	b002      	add	sp, #8
 80188d4:	bd80      	pop	{r7, pc}

080188d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80188d6:	b580      	push	{r7, lr}
 80188d8:	b082      	sub	sp, #8
 80188da:	af00      	add	r7, sp, #0
 80188dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80188de:	687a      	ldr	r2, [r7, #4]
 80188e0:	23a5      	movs	r3, #165	@ 0xa5
 80188e2:	009b      	lsls	r3, r3, #2
 80188e4:	2105      	movs	r1, #5
 80188e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	2300      	movs	r3, #0
 80188ec:	2200      	movs	r2, #0
 80188ee:	2100      	movs	r1, #0
 80188f0:	f000 fd06 	bl	8019300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80188f4:	2300      	movs	r3, #0
}
 80188f6:	0018      	movs	r0, r3
 80188f8:	46bd      	mov	sp, r7
 80188fa:	b002      	add	sp, #8
 80188fc:	bd80      	pop	{r7, pc}
	...

08018900 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018904:	4914      	ldr	r1, [pc, #80]	@ (8018958 <MX_USB_DEVICE_Init+0x58>)
 8018906:	4b15      	ldr	r3, [pc, #84]	@ (801895c <MX_USB_DEVICE_Init+0x5c>)
 8018908:	2200      	movs	r2, #0
 801890a:	0018      	movs	r0, r3
 801890c:	f7fe fdec 	bl	80174e8 <USBD_Init>
 8018910:	1e03      	subs	r3, r0, #0
 8018912:	d001      	beq.n	8018918 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018914:	f7ee fcda 	bl	80072cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018918:	4a11      	ldr	r2, [pc, #68]	@ (8018960 <MX_USB_DEVICE_Init+0x60>)
 801891a:	4b10      	ldr	r3, [pc, #64]	@ (801895c <MX_USB_DEVICE_Init+0x5c>)
 801891c:	0011      	movs	r1, r2
 801891e:	0018      	movs	r0, r3
 8018920:	f7fe fe13 	bl	801754a <USBD_RegisterClass>
 8018924:	1e03      	subs	r3, r0, #0
 8018926:	d001      	beq.n	801892c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8018928:	f7ee fcd0 	bl	80072cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801892c:	4a0d      	ldr	r2, [pc, #52]	@ (8018964 <MX_USB_DEVICE_Init+0x64>)
 801892e:	4b0b      	ldr	r3, [pc, #44]	@ (801895c <MX_USB_DEVICE_Init+0x5c>)
 8018930:	0011      	movs	r1, r2
 8018932:	0018      	movs	r0, r3
 8018934:	f7fe fd28 	bl	8017388 <USBD_CDC_RegisterInterface>
 8018938:	1e03      	subs	r3, r0, #0
 801893a:	d001      	beq.n	8018940 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801893c:	f7ee fcc6 	bl	80072cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018940:	4b06      	ldr	r3, [pc, #24]	@ (801895c <MX_USB_DEVICE_Init+0x5c>)
 8018942:	0018      	movs	r0, r3
 8018944:	f7fe fe21 	bl	801758a <USBD_Start>
 8018948:	1e03      	subs	r3, r0, #0
 801894a:	d001      	beq.n	8018950 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801894c:	f7ee fcbe 	bl	80072cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018950:	46c0      	nop			@ (mov r8, r8)
 8018952:	46bd      	mov	sp, r7
 8018954:	bd80      	pop	{r7, pc}
 8018956:	46c0      	nop			@ (mov r8, r8)
 8018958:	20000204 	.word	0x20000204
 801895c:	200024c4 	.word	0x200024c4
 8018960:	200000f0 	.word	0x200000f0
 8018964:	200001f4 	.word	0x200001f4

08018968 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801896c:	4907      	ldr	r1, [pc, #28]	@ (801898c <CDC_Init_FS+0x24>)
 801896e:	4b08      	ldr	r3, [pc, #32]	@ (8018990 <CDC_Init_FS+0x28>)
 8018970:	2200      	movs	r2, #0
 8018972:	0018      	movs	r0, r3
 8018974:	f7fe fd23 	bl	80173be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018978:	4a06      	ldr	r2, [pc, #24]	@ (8018994 <CDC_Init_FS+0x2c>)
 801897a:	4b05      	ldr	r3, [pc, #20]	@ (8018990 <CDC_Init_FS+0x28>)
 801897c:	0011      	movs	r1, r2
 801897e:	0018      	movs	r0, r3
 8018980:	f7fe fd39 	bl	80173f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018984:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018986:	0018      	movs	r0, r3
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	20002c48 	.word	0x20002c48
 8018990:	200024c4 	.word	0x200024c4
 8018994:	20002848 	.word	0x20002848

08018998 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801899c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801899e:	0018      	movs	r0, r3
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}

080189a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6039      	str	r1, [r7, #0]
 80189ac:	0011      	movs	r1, r2
 80189ae:	1dfb      	adds	r3, r7, #7
 80189b0:	1c02      	adds	r2, r0, #0
 80189b2:	701a      	strb	r2, [r3, #0]
 80189b4:	1d3b      	adds	r3, r7, #4
 80189b6:	1c0a      	adds	r2, r1, #0
 80189b8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80189ba:	1dfb      	adds	r3, r7, #7
 80189bc:	781b      	ldrb	r3, [r3, #0]
 80189be:	2b23      	cmp	r3, #35	@ 0x23
 80189c0:	d804      	bhi.n	80189cc <CDC_Control_FS+0x28>
 80189c2:	009a      	lsls	r2, r3, #2
 80189c4:	4b04      	ldr	r3, [pc, #16]	@ (80189d8 <CDC_Control_FS+0x34>)
 80189c6:	18d3      	adds	r3, r2, r3
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80189cc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80189ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80189d0:	0018      	movs	r0, r3
 80189d2:	46bd      	mov	sp, r7
 80189d4:	b002      	add	sp, #8
 80189d6:	bd80      	pop	{r7, pc}
 80189d8:	080201b4 	.word	0x080201b4

080189dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80189e6:	4b12      	ldr	r3, [pc, #72]	@ (8018a30 <CDC_Receive_FS+0x54>)
 80189e8:	781b      	ldrb	r3, [r3, #0]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d013      	beq.n	8018a16 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	b29a      	uxth	r2, r3
 80189f4:	2301      	movs	r3, #1
 80189f6:	425b      	negs	r3, r3
 80189f8:	6879      	ldr	r1, [r7, #4]
 80189fa:	480e      	ldr	r0, [pc, #56]	@ (8018a34 <CDC_Receive_FS+0x58>)
 80189fc:	f7fa fd32 	bl	8013464 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018a00:	687a      	ldr	r2, [r7, #4]
 8018a02:	4b0d      	ldr	r3, [pc, #52]	@ (8018a38 <CDC_Receive_FS+0x5c>)
 8018a04:	0011      	movs	r1, r2
 8018a06:	0018      	movs	r0, r3
 8018a08:	f7fe fcf5 	bl	80173f6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8018a38 <CDC_Receive_FS+0x5c>)
 8018a0e:	0018      	movs	r0, r3
 8018a10:	f7fe fd3c 	bl	801748c <USBD_CDC_ReceivePacket>
 8018a14:	e006      	b.n	8018a24 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	681a      	ldr	r2, [r3, #0]
 8018a1a:	4b08      	ldr	r3, [pc, #32]	@ (8018a3c <CDC_Receive_FS+0x60>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	18d2      	adds	r2, r2, r3
 8018a20:	4b06      	ldr	r3, [pc, #24]	@ (8018a3c <CDC_Receive_FS+0x60>)
 8018a22:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8018a24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018a26:	0018      	movs	r0, r3
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	b002      	add	sp, #8
 8018a2c:	bd80      	pop	{r7, pc}
 8018a2e:	46c0      	nop			@ (mov r8, r8)
 8018a30:	20002788 	.word	0x20002788
 8018a34:	2000278c 	.word	0x2000278c
 8018a38:	200024c4 	.word	0x200024c4
 8018a3c:	20002844 	.word	0x20002844

08018a40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018a40:	b5b0      	push	{r4, r5, r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
 8018a48:	000a      	movs	r2, r1
 8018a4a:	1cbb      	adds	r3, r7, #2
 8018a4c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8018a4e:	230f      	movs	r3, #15
 8018a50:	18fb      	adds	r3, r7, r3
 8018a52:	2200      	movs	r2, #0
 8018a54:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018a56:	4a11      	ldr	r2, [pc, #68]	@ (8018a9c <CDC_Transmit_FS+0x5c>)
 8018a58:	23ae      	movs	r3, #174	@ 0xae
 8018a5a:	009b      	lsls	r3, r3, #2
 8018a5c:	58d3      	ldr	r3, [r2, r3]
 8018a5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018a60:	68ba      	ldr	r2, [r7, #8]
 8018a62:	2385      	movs	r3, #133	@ 0x85
 8018a64:	009b      	lsls	r3, r3, #2
 8018a66:	58d3      	ldr	r3, [r2, r3]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d001      	beq.n	8018a70 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	e010      	b.n	8018a92 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018a70:	1cbb      	adds	r3, r7, #2
 8018a72:	881a      	ldrh	r2, [r3, #0]
 8018a74:	6879      	ldr	r1, [r7, #4]
 8018a76:	4b09      	ldr	r3, [pc, #36]	@ (8018a9c <CDC_Transmit_FS+0x5c>)
 8018a78:	0018      	movs	r0, r3
 8018a7a:	f7fe fca0 	bl	80173be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018a7e:	250f      	movs	r5, #15
 8018a80:	197c      	adds	r4, r7, r5
 8018a82:	4b06      	ldr	r3, [pc, #24]	@ (8018a9c <CDC_Transmit_FS+0x5c>)
 8018a84:	0018      	movs	r0, r3
 8018a86:	f7fe fcca 	bl	801741e <USBD_CDC_TransmitPacket>
 8018a8a:	0003      	movs	r3, r0
 8018a8c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8018a8e:	197b      	adds	r3, r7, r5
 8018a90:	781b      	ldrb	r3, [r3, #0]
}
 8018a92:	0018      	movs	r0, r3
 8018a94:	46bd      	mov	sp, r7
 8018a96:	b004      	add	sp, #16
 8018a98:	bdb0      	pop	{r4, r5, r7, pc}
 8018a9a:	46c0      	nop			@ (mov r8, r8)
 8018a9c:	200024c4 	.word	0x200024c4

08018aa0 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	af00      	add	r7, sp, #0
  ESPProg = true;
 8018aa4:	4b02      	ldr	r3, [pc, #8]	@ (8018ab0 <EnableESPProg+0x10>)
 8018aa6:	2201      	movs	r2, #1
 8018aa8:	701a      	strb	r2, [r3, #0]
}
 8018aaa:	46c0      	nop			@ (mov r8, r8)
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	20002788 	.word	0x20002788

08018ab4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8018ab8:	4b01      	ldr	r3, [pc, #4]	@ (8018ac0 <GetUsbRxPointer+0xc>)
}
 8018aba:	0018      	movs	r0, r3
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}
 8018ac0:	20002848 	.word	0x20002848

08018ac4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8018ac8:	4b07      	ldr	r3, [pc, #28]	@ (8018ae8 <ResetUsbRxDataSize+0x24>)
 8018aca:	2200      	movs	r2, #0
 8018acc:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8018ace:	4a07      	ldr	r2, [pc, #28]	@ (8018aec <ResetUsbRxDataSize+0x28>)
 8018ad0:	4b07      	ldr	r3, [pc, #28]	@ (8018af0 <ResetUsbRxDataSize+0x2c>)
 8018ad2:	0011      	movs	r1, r2
 8018ad4:	0018      	movs	r0, r3
 8018ad6:	f7fe fc8e 	bl	80173f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018ada:	4b05      	ldr	r3, [pc, #20]	@ (8018af0 <ResetUsbRxDataSize+0x2c>)
 8018adc:	0018      	movs	r0, r3
 8018ade:	f7fe fcd5 	bl	801748c <USBD_CDC_ReceivePacket>
}
 8018ae2:	46c0      	nop			@ (mov r8, r8)
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}
 8018ae8:	20002844 	.word	0x20002844
 8018aec:	20002848 	.word	0x20002848
 8018af0:	200024c4 	.word	0x200024c4

08018af4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8018af8:	4b02      	ldr	r3, [pc, #8]	@ (8018b04 <GetUsbRxDataSize+0x10>)
 8018afa:	681b      	ldr	r3, [r3, #0]
}
 8018afc:	0018      	movs	r0, r3
 8018afe:	46bd      	mov	sp, r7
 8018b00:	bd80      	pop	{r7, pc}
 8018b02:	46c0      	nop			@ (mov r8, r8)
 8018b04:	20002844 	.word	0x20002844

08018b08 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8018b10:	687a      	ldr	r2, [r7, #4]
 8018b12:	4b07      	ldr	r3, [pc, #28]	@ (8018b30 <GetUsbRxNextChunk+0x28>)
 8018b14:	18d2      	adds	r2, r2, r3
 8018b16:	4b07      	ldr	r3, [pc, #28]	@ (8018b34 <GetUsbRxNextChunk+0x2c>)
 8018b18:	0011      	movs	r1, r2
 8018b1a:	0018      	movs	r0, r3
 8018b1c:	f7fe fc6b 	bl	80173f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018b20:	4b04      	ldr	r3, [pc, #16]	@ (8018b34 <GetUsbRxNextChunk+0x2c>)
 8018b22:	0018      	movs	r0, r3
 8018b24:	f7fe fcb2 	bl	801748c <USBD_CDC_ReceivePacket>
}
 8018b28:	46c0      	nop			@ (mov r8, r8)
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	b002      	add	sp, #8
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	20002848 	.word	0x20002848
 8018b34:	200024c4 	.word	0x200024c4

08018b38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b082      	sub	sp, #8
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	0002      	movs	r2, r0
 8018b40:	6039      	str	r1, [r7, #0]
 8018b42:	1dfb      	adds	r3, r7, #7
 8018b44:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018b46:	683b      	ldr	r3, [r7, #0]
 8018b48:	2212      	movs	r2, #18
 8018b4a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018b4c:	4b02      	ldr	r3, [pc, #8]	@ (8018b58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018b4e:	0018      	movs	r0, r3
 8018b50:	46bd      	mov	sp, r7
 8018b52:	b002      	add	sp, #8
 8018b54:	bd80      	pop	{r7, pc}
 8018b56:	46c0      	nop			@ (mov r8, r8)
 8018b58:	20000220 	.word	0x20000220

08018b5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b082      	sub	sp, #8
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	0002      	movs	r2, r0
 8018b64:	6039      	str	r1, [r7, #0]
 8018b66:	1dfb      	adds	r3, r7, #7
 8018b68:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018b6a:	683b      	ldr	r3, [r7, #0]
 8018b6c:	2204      	movs	r2, #4
 8018b6e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018b70:	4b02      	ldr	r3, [pc, #8]	@ (8018b7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018b72:	0018      	movs	r0, r3
 8018b74:	46bd      	mov	sp, r7
 8018b76:	b002      	add	sp, #8
 8018b78:	bd80      	pop	{r7, pc}
 8018b7a:	46c0      	nop			@ (mov r8, r8)
 8018b7c:	20000234 	.word	0x20000234

08018b80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b082      	sub	sp, #8
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	0002      	movs	r2, r0
 8018b88:	6039      	str	r1, [r7, #0]
 8018b8a:	1dfb      	adds	r3, r7, #7
 8018b8c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8018b8e:	1dfb      	adds	r3, r7, #7
 8018b90:	781b      	ldrb	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d106      	bne.n	8018ba4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018b96:	683a      	ldr	r2, [r7, #0]
 8018b98:	4908      	ldr	r1, [pc, #32]	@ (8018bbc <USBD_FS_ProductStrDescriptor+0x3c>)
 8018b9a:	4b09      	ldr	r3, [pc, #36]	@ (8018bc0 <USBD_FS_ProductStrDescriptor+0x40>)
 8018b9c:	0018      	movs	r0, r3
 8018b9e:	f7ff fdb1 	bl	8018704 <USBD_GetString>
 8018ba2:	e005      	b.n	8018bb0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018ba4:	683a      	ldr	r2, [r7, #0]
 8018ba6:	4905      	ldr	r1, [pc, #20]	@ (8018bbc <USBD_FS_ProductStrDescriptor+0x3c>)
 8018ba8:	4b05      	ldr	r3, [pc, #20]	@ (8018bc0 <USBD_FS_ProductStrDescriptor+0x40>)
 8018baa:	0018      	movs	r0, r3
 8018bac:	f7ff fdaa 	bl	8018704 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018bb0:	4b02      	ldr	r3, [pc, #8]	@ (8018bbc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8018bb2:	0018      	movs	r0, r3
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	b002      	add	sp, #8
 8018bb8:	bd80      	pop	{r7, pc}
 8018bba:	46c0      	nop			@ (mov r8, r8)
 8018bbc:	20003048 	.word	0x20003048
 8018bc0:	0801fcdc 	.word	0x0801fcdc

08018bc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b082      	sub	sp, #8
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	0002      	movs	r2, r0
 8018bcc:	6039      	str	r1, [r7, #0]
 8018bce:	1dfb      	adds	r3, r7, #7
 8018bd0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018bd2:	683a      	ldr	r2, [r7, #0]
 8018bd4:	4904      	ldr	r1, [pc, #16]	@ (8018be8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018bd6:	4b05      	ldr	r3, [pc, #20]	@ (8018bec <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8018bd8:	0018      	movs	r0, r3
 8018bda:	f7ff fd93 	bl	8018704 <USBD_GetString>
  return USBD_StrDesc;
 8018bde:	4b02      	ldr	r3, [pc, #8]	@ (8018be8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8018be0:	0018      	movs	r0, r3
 8018be2:	46bd      	mov	sp, r7
 8018be4:	b002      	add	sp, #8
 8018be6:	bd80      	pop	{r7, pc}
 8018be8:	20003048 	.word	0x20003048
 8018bec:	0801fcf4 	.word	0x0801fcf4

08018bf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b082      	sub	sp, #8
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	0002      	movs	r2, r0
 8018bf8:	6039      	str	r1, [r7, #0]
 8018bfa:	1dfb      	adds	r3, r7, #7
 8018bfc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	221a      	movs	r2, #26
 8018c02:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018c04:	f000 f84c 	bl	8018ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018c08:	4b02      	ldr	r3, [pc, #8]	@ (8018c14 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8018c0a:	0018      	movs	r0, r3
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	b002      	add	sp, #8
 8018c10:	bd80      	pop	{r7, pc}
 8018c12:	46c0      	nop			@ (mov r8, r8)
 8018c14:	20000238 	.word	0x20000238

08018c18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b082      	sub	sp, #8
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	0002      	movs	r2, r0
 8018c20:	6039      	str	r1, [r7, #0]
 8018c22:	1dfb      	adds	r3, r7, #7
 8018c24:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8018c26:	1dfb      	adds	r3, r7, #7
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d106      	bne.n	8018c3c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c2e:	683a      	ldr	r2, [r7, #0]
 8018c30:	4908      	ldr	r1, [pc, #32]	@ (8018c54 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8018c32:	4b09      	ldr	r3, [pc, #36]	@ (8018c58 <USBD_FS_ConfigStrDescriptor+0x40>)
 8018c34:	0018      	movs	r0, r3
 8018c36:	f7ff fd65 	bl	8018704 <USBD_GetString>
 8018c3a:	e005      	b.n	8018c48 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c3c:	683a      	ldr	r2, [r7, #0]
 8018c3e:	4905      	ldr	r1, [pc, #20]	@ (8018c54 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8018c40:	4b05      	ldr	r3, [pc, #20]	@ (8018c58 <USBD_FS_ConfigStrDescriptor+0x40>)
 8018c42:	0018      	movs	r0, r3
 8018c44:	f7ff fd5e 	bl	8018704 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c48:	4b02      	ldr	r3, [pc, #8]	@ (8018c54 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8018c4a:	0018      	movs	r0, r3
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	b002      	add	sp, #8
 8018c50:	bd80      	pop	{r7, pc}
 8018c52:	46c0      	nop			@ (mov r8, r8)
 8018c54:	20003048 	.word	0x20003048
 8018c58:	0801fd08 	.word	0x0801fd08

08018c5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b082      	sub	sp, #8
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	0002      	movs	r2, r0
 8018c64:	6039      	str	r1, [r7, #0]
 8018c66:	1dfb      	adds	r3, r7, #7
 8018c68:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8018c6a:	1dfb      	adds	r3, r7, #7
 8018c6c:	781b      	ldrb	r3, [r3, #0]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d106      	bne.n	8018c80 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c72:	683a      	ldr	r2, [r7, #0]
 8018c74:	4908      	ldr	r1, [pc, #32]	@ (8018c98 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8018c76:	4b09      	ldr	r3, [pc, #36]	@ (8018c9c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8018c78:	0018      	movs	r0, r3
 8018c7a:	f7ff fd43 	bl	8018704 <USBD_GetString>
 8018c7e:	e005      	b.n	8018c8c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c80:	683a      	ldr	r2, [r7, #0]
 8018c82:	4905      	ldr	r1, [pc, #20]	@ (8018c98 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8018c84:	4b05      	ldr	r3, [pc, #20]	@ (8018c9c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8018c86:	0018      	movs	r0, r3
 8018c88:	f7ff fd3c 	bl	8018704 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c8c:	4b02      	ldr	r3, [pc, #8]	@ (8018c98 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8018c8e:	0018      	movs	r0, r3
 8018c90:	46bd      	mov	sp, r7
 8018c92:	b002      	add	sp, #8
 8018c94:	bd80      	pop	{r7, pc}
 8018c96:	46c0      	nop			@ (mov r8, r8)
 8018c98:	20003048 	.word	0x20003048
 8018c9c:	0801fd14 	.word	0x0801fd14

08018ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b084      	sub	sp, #16
 8018ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018ca6:	4b10      	ldr	r3, [pc, #64]	@ (8018ce8 <Get_SerialNum+0x48>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018cac:	4b0f      	ldr	r3, [pc, #60]	@ (8018cec <Get_SerialNum+0x4c>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8018cf0 <Get_SerialNum+0x50>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018cb8:	68fa      	ldr	r2, [r7, #12]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	18d3      	adds	r3, r2, r3
 8018cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d00b      	beq.n	8018cde <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018cc6:	490b      	ldr	r1, [pc, #44]	@ (8018cf4 <Get_SerialNum+0x54>)
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	2208      	movs	r2, #8
 8018ccc:	0018      	movs	r0, r3
 8018cce:	f000 f815 	bl	8018cfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018cd2:	4909      	ldr	r1, [pc, #36]	@ (8018cf8 <Get_SerialNum+0x58>)
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	2204      	movs	r2, #4
 8018cd8:	0018      	movs	r0, r3
 8018cda:	f000 f80f 	bl	8018cfc <IntToUnicode>
  }
}
 8018cde:	46c0      	nop			@ (mov r8, r8)
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	b004      	add	sp, #16
 8018ce4:	bd80      	pop	{r7, pc}
 8018ce6:	46c0      	nop			@ (mov r8, r8)
 8018ce8:	1ff80050 	.word	0x1ff80050
 8018cec:	1ff80054 	.word	0x1ff80054
 8018cf0:	1ff80058 	.word	0x1ff80058
 8018cf4:	2000023a 	.word	0x2000023a
 8018cf8:	2000024a 	.word	0x2000024a

08018cfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b086      	sub	sp, #24
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	60f8      	str	r0, [r7, #12]
 8018d04:	60b9      	str	r1, [r7, #8]
 8018d06:	1dfb      	adds	r3, r7, #7
 8018d08:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8018d0a:	2117      	movs	r1, #23
 8018d0c:	187b      	adds	r3, r7, r1
 8018d0e:	2200      	movs	r2, #0
 8018d10:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8018d12:	187b      	adds	r3, r7, r1
 8018d14:	2200      	movs	r2, #0
 8018d16:	701a      	strb	r2, [r3, #0]
 8018d18:	e02f      	b.n	8018d7a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	0f1b      	lsrs	r3, r3, #28
 8018d1e:	2b09      	cmp	r3, #9
 8018d20:	d80d      	bhi.n	8018d3e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	0f1b      	lsrs	r3, r3, #28
 8018d26:	b2da      	uxtb	r2, r3
 8018d28:	2317      	movs	r3, #23
 8018d2a:	18fb      	adds	r3, r7, r3
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	005b      	lsls	r3, r3, #1
 8018d30:	0019      	movs	r1, r3
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	185b      	adds	r3, r3, r1
 8018d36:	3230      	adds	r2, #48	@ 0x30
 8018d38:	b2d2      	uxtb	r2, r2
 8018d3a:	701a      	strb	r2, [r3, #0]
 8018d3c:	e00c      	b.n	8018d58 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	0f1b      	lsrs	r3, r3, #28
 8018d42:	b2da      	uxtb	r2, r3
 8018d44:	2317      	movs	r3, #23
 8018d46:	18fb      	adds	r3, r7, r3
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	005b      	lsls	r3, r3, #1
 8018d4c:	0019      	movs	r1, r3
 8018d4e:	68bb      	ldr	r3, [r7, #8]
 8018d50:	185b      	adds	r3, r3, r1
 8018d52:	3237      	adds	r2, #55	@ 0x37
 8018d54:	b2d2      	uxtb	r2, r2
 8018d56:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	011b      	lsls	r3, r3, #4
 8018d5c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018d5e:	2117      	movs	r1, #23
 8018d60:	187b      	adds	r3, r7, r1
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	005b      	lsls	r3, r3, #1
 8018d66:	3301      	adds	r3, #1
 8018d68:	68ba      	ldr	r2, [r7, #8]
 8018d6a:	18d3      	adds	r3, r2, r3
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018d70:	187b      	adds	r3, r7, r1
 8018d72:	781a      	ldrb	r2, [r3, #0]
 8018d74:	187b      	adds	r3, r7, r1
 8018d76:	3201      	adds	r2, #1
 8018d78:	701a      	strb	r2, [r3, #0]
 8018d7a:	2317      	movs	r3, #23
 8018d7c:	18fa      	adds	r2, r7, r3
 8018d7e:	1dfb      	adds	r3, r7, #7
 8018d80:	7812      	ldrb	r2, [r2, #0]
 8018d82:	781b      	ldrb	r3, [r3, #0]
 8018d84:	429a      	cmp	r2, r3
 8018d86:	d3c8      	bcc.n	8018d1a <IntToUnicode+0x1e>
  }
}
 8018d88:	46c0      	nop			@ (mov r8, r8)
 8018d8a:	46c0      	nop			@ (mov r8, r8)
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	b006      	add	sp, #24
 8018d90:	bd80      	pop	{r7, pc}
	...

08018d94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b082      	sub	sp, #8
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	4a0a      	ldr	r2, [pc, #40]	@ (8018dcc <HAL_PCD_MspInit+0x38>)
 8018da2:	4293      	cmp	r3, r2
 8018da4:	d10e      	bne.n	8018dc4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018da6:	4b0a      	ldr	r3, [pc, #40]	@ (8018dd0 <HAL_PCD_MspInit+0x3c>)
 8018da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018daa:	4b09      	ldr	r3, [pc, #36]	@ (8018dd0 <HAL_PCD_MspInit+0x3c>)
 8018dac:	2180      	movs	r1, #128	@ 0x80
 8018dae:	0409      	lsls	r1, r1, #16
 8018db0:	430a      	orrs	r2, r1
 8018db2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8018db4:	2200      	movs	r2, #0
 8018db6:	2100      	movs	r1, #0
 8018db8:	201f      	movs	r0, #31
 8018dba:	f7f3 fbc3 	bl	800c544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8018dbe:	201f      	movs	r0, #31
 8018dc0:	f7f3 fbd5 	bl	800c56e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018dc4:	46c0      	nop			@ (mov r8, r8)
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	b002      	add	sp, #8
 8018dca:	bd80      	pop	{r7, pc}
 8018dcc:	40005c00 	.word	0x40005c00
 8018dd0:	40021000 	.word	0x40021000

08018dd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018ddc:	687a      	ldr	r2, [r7, #4]
 8018dde:	23bc      	movs	r3, #188	@ 0xbc
 8018de0:	009b      	lsls	r3, r3, #2
 8018de2:	58d2      	ldr	r2, [r2, r3]
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	21ac      	movs	r1, #172	@ 0xac
 8018de8:	0089      	lsls	r1, r1, #2
 8018dea:	468c      	mov	ip, r1
 8018dec:	4463      	add	r3, ip
 8018dee:	0019      	movs	r1, r3
 8018df0:	0010      	movs	r0, r2
 8018df2:	f7fe fc1d 	bl	8017630 <USBD_LL_SetupStage>
}
 8018df6:	46c0      	nop			@ (mov r8, r8)
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	b002      	add	sp, #8
 8018dfc:	bd80      	pop	{r7, pc}

08018dfe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dfe:	b590      	push	{r4, r7, lr}
 8018e00:	b083      	sub	sp, #12
 8018e02:	af00      	add	r7, sp, #0
 8018e04:	6078      	str	r0, [r7, #4]
 8018e06:	000a      	movs	r2, r1
 8018e08:	1cfb      	adds	r3, r7, #3
 8018e0a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018e0c:	687a      	ldr	r2, [r7, #4]
 8018e0e:	23bc      	movs	r3, #188	@ 0xbc
 8018e10:	009b      	lsls	r3, r3, #2
 8018e12:	58d4      	ldr	r4, [r2, r3]
 8018e14:	1cfb      	adds	r3, r7, #3
 8018e16:	781a      	ldrb	r2, [r3, #0]
 8018e18:	6878      	ldr	r0, [r7, #4]
 8018e1a:	23be      	movs	r3, #190	@ 0xbe
 8018e1c:	0059      	lsls	r1, r3, #1
 8018e1e:	0013      	movs	r3, r2
 8018e20:	009b      	lsls	r3, r3, #2
 8018e22:	189b      	adds	r3, r3, r2
 8018e24:	00db      	lsls	r3, r3, #3
 8018e26:	18c3      	adds	r3, r0, r3
 8018e28:	185b      	adds	r3, r3, r1
 8018e2a:	681a      	ldr	r2, [r3, #0]
 8018e2c:	1cfb      	adds	r3, r7, #3
 8018e2e:	781b      	ldrb	r3, [r3, #0]
 8018e30:	0019      	movs	r1, r3
 8018e32:	0020      	movs	r0, r4
 8018e34:	f7fe fc5a 	bl	80176ec <USBD_LL_DataOutStage>
}
 8018e38:	46c0      	nop			@ (mov r8, r8)
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	b003      	add	sp, #12
 8018e3e:	bd90      	pop	{r4, r7, pc}

08018e40 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b082      	sub	sp, #8
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
 8018e48:	000a      	movs	r2, r1
 8018e4a:	1cfb      	adds	r3, r7, #3
 8018e4c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018e4e:	687a      	ldr	r2, [r7, #4]
 8018e50:	23bc      	movs	r3, #188	@ 0xbc
 8018e52:	009b      	lsls	r3, r3, #2
 8018e54:	58d0      	ldr	r0, [r2, r3]
 8018e56:	1cfb      	adds	r3, r7, #3
 8018e58:	781a      	ldrb	r2, [r3, #0]
 8018e5a:	6879      	ldr	r1, [r7, #4]
 8018e5c:	0013      	movs	r3, r2
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	189b      	adds	r3, r3, r2
 8018e62:	00db      	lsls	r3, r3, #3
 8018e64:	18cb      	adds	r3, r1, r3
 8018e66:	333c      	adds	r3, #60	@ 0x3c
 8018e68:	681a      	ldr	r2, [r3, #0]
 8018e6a:	1cfb      	adds	r3, r7, #3
 8018e6c:	781b      	ldrb	r3, [r3, #0]
 8018e6e:	0019      	movs	r1, r3
 8018e70:	f7fe fcbe 	bl	80177f0 <USBD_LL_DataInStage>
}
 8018e74:	46c0      	nop			@ (mov r8, r8)
 8018e76:	46bd      	mov	sp, r7
 8018e78:	b002      	add	sp, #8
 8018e7a:	bd80      	pop	{r7, pc}

08018e7c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018e84:	687a      	ldr	r2, [r7, #4]
 8018e86:	23bc      	movs	r3, #188	@ 0xbc
 8018e88:	009b      	lsls	r3, r3, #2
 8018e8a:	58d3      	ldr	r3, [r2, r3]
 8018e8c:	0018      	movs	r0, r3
 8018e8e:	f7fe fdf5 	bl	8017a7c <USBD_LL_SOF>
}
 8018e92:	46c0      	nop			@ (mov r8, r8)
 8018e94:	46bd      	mov	sp, r7
 8018e96:	b002      	add	sp, #8
 8018e98:	bd80      	pop	{r7, pc}

08018e9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e9a:	b580      	push	{r7, lr}
 8018e9c:	b084      	sub	sp, #16
 8018e9e:	af00      	add	r7, sp, #0
 8018ea0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018ea2:	230f      	movs	r3, #15
 8018ea4:	18fb      	adds	r3, r7, r3
 8018ea6:	2201      	movs	r2, #1
 8018ea8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	689b      	ldr	r3, [r3, #8]
 8018eae:	2b02      	cmp	r3, #2
 8018eb0:	d001      	beq.n	8018eb6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8018eb2:	f7ee fa0b 	bl	80072cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018eb6:	687a      	ldr	r2, [r7, #4]
 8018eb8:	23bc      	movs	r3, #188	@ 0xbc
 8018eba:	009b      	lsls	r3, r3, #2
 8018ebc:	58d2      	ldr	r2, [r2, r3]
 8018ebe:	230f      	movs	r3, #15
 8018ec0:	18fb      	adds	r3, r7, r3
 8018ec2:	781b      	ldrb	r3, [r3, #0]
 8018ec4:	0019      	movs	r1, r3
 8018ec6:	0010      	movs	r0, r2
 8018ec8:	f7fe fd97 	bl	80179fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018ecc:	687a      	ldr	r2, [r7, #4]
 8018ece:	23bc      	movs	r3, #188	@ 0xbc
 8018ed0:	009b      	lsls	r3, r3, #2
 8018ed2:	58d3      	ldr	r3, [r2, r3]
 8018ed4:	0018      	movs	r0, r3
 8018ed6:	f7fe fd48 	bl	801796a <USBD_LL_Reset>
}
 8018eda:	46c0      	nop			@ (mov r8, r8)
 8018edc:	46bd      	mov	sp, r7
 8018ede:	b004      	add	sp, #16
 8018ee0:	bd80      	pop	{r7, pc}
	...

08018ee4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018eec:	687a      	ldr	r2, [r7, #4]
 8018eee:	23bc      	movs	r3, #188	@ 0xbc
 8018ef0:	009b      	lsls	r3, r3, #2
 8018ef2:	58d3      	ldr	r3, [r2, r3]
 8018ef4:	0018      	movs	r0, r3
 8018ef6:	f7fe fd91 	bl	8017a1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	699b      	ldr	r3, [r3, #24]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d005      	beq.n	8018f0e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f02:	4b05      	ldr	r3, [pc, #20]	@ (8018f18 <HAL_PCD_SuspendCallback+0x34>)
 8018f04:	691a      	ldr	r2, [r3, #16]
 8018f06:	4b04      	ldr	r3, [pc, #16]	@ (8018f18 <HAL_PCD_SuspendCallback+0x34>)
 8018f08:	2106      	movs	r1, #6
 8018f0a:	430a      	orrs	r2, r1
 8018f0c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8018f0e:	46c0      	nop			@ (mov r8, r8)
 8018f10:	46bd      	mov	sp, r7
 8018f12:	b002      	add	sp, #8
 8018f14:	bd80      	pop	{r7, pc}
 8018f16:	46c0      	nop			@ (mov r8, r8)
 8018f18:	e000ed00 	.word	0xe000ed00

08018f1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b082      	sub	sp, #8
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	699b      	ldr	r3, [r3, #24]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d007      	beq.n	8018f3c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f2c:	4b09      	ldr	r3, [pc, #36]	@ (8018f54 <HAL_PCD_ResumeCallback+0x38>)
 8018f2e:	691a      	ldr	r2, [r3, #16]
 8018f30:	4b08      	ldr	r3, [pc, #32]	@ (8018f54 <HAL_PCD_ResumeCallback+0x38>)
 8018f32:	2106      	movs	r1, #6
 8018f34:	438a      	bics	r2, r1
 8018f36:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8018f38:	f000 fa44 	bl	80193c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	23bc      	movs	r3, #188	@ 0xbc
 8018f40:	009b      	lsls	r3, r3, #2
 8018f42:	58d3      	ldr	r3, [r2, r3]
 8018f44:	0018      	movs	r0, r3
 8018f46:	f7fe fd81 	bl	8017a4c <USBD_LL_Resume>
}
 8018f4a:	46c0      	nop			@ (mov r8, r8)
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	b002      	add	sp, #8
 8018f50:	bd80      	pop	{r7, pc}
 8018f52:	46c0      	nop			@ (mov r8, r8)
 8018f54:	e000ed00 	.word	0xe000ed00

08018f58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b082      	sub	sp, #8
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8018f60:	4a2d      	ldr	r2, [pc, #180]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f62:	23bc      	movs	r3, #188	@ 0xbc
 8018f64:	009b      	lsls	r3, r3, #2
 8018f66:	6879      	ldr	r1, [r7, #4]
 8018f68:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8018f6a:	687a      	ldr	r2, [r7, #4]
 8018f6c:	23b0      	movs	r3, #176	@ 0xb0
 8018f6e:	009b      	lsls	r3, r3, #2
 8018f70:	4929      	ldr	r1, [pc, #164]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f72:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8018f74:	4b28      	ldr	r3, [pc, #160]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f76:	4a29      	ldr	r2, [pc, #164]	@ (801901c <USBD_LL_Init+0xc4>)
 8018f78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018f7a:	4b27      	ldr	r3, [pc, #156]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f7c:	2208      	movs	r2, #8
 8018f7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018f80:	4b25      	ldr	r3, [pc, #148]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f82:	2202      	movs	r2, #2
 8018f84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018f86:	4b24      	ldr	r3, [pc, #144]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f88:	2202      	movs	r2, #2
 8018f8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018f8c:	4b22      	ldr	r3, [pc, #136]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f8e:	2200      	movs	r2, #0
 8018f90:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018f92:	4b21      	ldr	r3, [pc, #132]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f94:	2200      	movs	r2, #0
 8018f96:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018f98:	4b1f      	ldr	r3, [pc, #124]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8019018 <USBD_LL_Init+0xc0>)
 8018fa0:	0018      	movs	r0, r3
 8018fa2:	f7f6 fbf7 	bl	800f794 <HAL_PCD_Init>
 8018fa6:	1e03      	subs	r3, r0, #0
 8018fa8:	d001      	beq.n	8018fae <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8018faa:	f7ee f98f 	bl	80072cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018fae:	687a      	ldr	r2, [r7, #4]
 8018fb0:	23b0      	movs	r3, #176	@ 0xb0
 8018fb2:	009b      	lsls	r3, r3, #2
 8018fb4:	58d0      	ldr	r0, [r2, r3]
 8018fb6:	2318      	movs	r3, #24
 8018fb8:	2200      	movs	r2, #0
 8018fba:	2100      	movs	r1, #0
 8018fbc:	f7f8 f9b8 	bl	8011330 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018fc0:	687a      	ldr	r2, [r7, #4]
 8018fc2:	23b0      	movs	r3, #176	@ 0xb0
 8018fc4:	009b      	lsls	r3, r3, #2
 8018fc6:	58d0      	ldr	r0, [r2, r3]
 8018fc8:	2358      	movs	r3, #88	@ 0x58
 8018fca:	2200      	movs	r2, #0
 8018fcc:	2180      	movs	r1, #128	@ 0x80
 8018fce:	f7f8 f9af 	bl	8011330 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018fd2:	687a      	ldr	r2, [r7, #4]
 8018fd4:	23b0      	movs	r3, #176	@ 0xb0
 8018fd6:	009b      	lsls	r3, r3, #2
 8018fd8:	58d0      	ldr	r0, [r2, r3]
 8018fda:	23c0      	movs	r3, #192	@ 0xc0
 8018fdc:	2200      	movs	r2, #0
 8018fde:	2181      	movs	r1, #129	@ 0x81
 8018fe0:	f7f8 f9a6 	bl	8011330 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018fe4:	687a      	ldr	r2, [r7, #4]
 8018fe6:	23b0      	movs	r3, #176	@ 0xb0
 8018fe8:	009b      	lsls	r3, r3, #2
 8018fea:	58d0      	ldr	r0, [r2, r3]
 8018fec:	2388      	movs	r3, #136	@ 0x88
 8018fee:	005b      	lsls	r3, r3, #1
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	f7f8 f99c 	bl	8011330 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018ff8:	687a      	ldr	r2, [r7, #4]
 8018ffa:	23b0      	movs	r3, #176	@ 0xb0
 8018ffc:	009b      	lsls	r3, r3, #2
 8018ffe:	58d0      	ldr	r0, [r2, r3]
 8019000:	2380      	movs	r3, #128	@ 0x80
 8019002:	005b      	lsls	r3, r3, #1
 8019004:	2200      	movs	r2, #0
 8019006:	2182      	movs	r1, #130	@ 0x82
 8019008:	f7f8 f992 	bl	8011330 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801900c:	2300      	movs	r3, #0
}
 801900e:	0018      	movs	r0, r3
 8019010:	46bd      	mov	sp, r7
 8019012:	b002      	add	sp, #8
 8019014:	bd80      	pop	{r7, pc}
 8019016:	46c0      	nop			@ (mov r8, r8)
 8019018:	20003248 	.word	0x20003248
 801901c:	40005c00 	.word	0x40005c00

08019020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019022:	b085      	sub	sp, #20
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019028:	210f      	movs	r1, #15
 801902a:	187b      	adds	r3, r7, r1
 801902c:	2200      	movs	r2, #0
 801902e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019030:	260e      	movs	r6, #14
 8019032:	19bb      	adds	r3, r7, r6
 8019034:	2200      	movs	r2, #0
 8019036:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019038:	687a      	ldr	r2, [r7, #4]
 801903a:	23b0      	movs	r3, #176	@ 0xb0
 801903c:	009b      	lsls	r3, r3, #2
 801903e:	58d3      	ldr	r3, [r2, r3]
 8019040:	000d      	movs	r5, r1
 8019042:	187c      	adds	r4, r7, r1
 8019044:	0018      	movs	r0, r3
 8019046:	f7f6 fca5 	bl	800f994 <HAL_PCD_Start>
 801904a:	0003      	movs	r3, r0
 801904c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801904e:	19bc      	adds	r4, r7, r6
 8019050:	197b      	adds	r3, r7, r5
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	0018      	movs	r0, r3
 8019056:	f000 f9bc 	bl	80193d2 <USBD_Get_USB_Status>
 801905a:	0003      	movs	r3, r0
 801905c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801905e:	19bb      	adds	r3, r7, r6
 8019060:	781b      	ldrb	r3, [r3, #0]
}
 8019062:	0018      	movs	r0, r3
 8019064:	46bd      	mov	sp, r7
 8019066:	b005      	add	sp, #20
 8019068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801906a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801906a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801906c:	b085      	sub	sp, #20
 801906e:	af00      	add	r7, sp, #0
 8019070:	6078      	str	r0, [r7, #4]
 8019072:	000c      	movs	r4, r1
 8019074:	0010      	movs	r0, r2
 8019076:	0019      	movs	r1, r3
 8019078:	1cfb      	adds	r3, r7, #3
 801907a:	1c22      	adds	r2, r4, #0
 801907c:	701a      	strb	r2, [r3, #0]
 801907e:	1cbb      	adds	r3, r7, #2
 8019080:	1c02      	adds	r2, r0, #0
 8019082:	701a      	strb	r2, [r3, #0]
 8019084:	003b      	movs	r3, r7
 8019086:	1c0a      	adds	r2, r1, #0
 8019088:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801908a:	260f      	movs	r6, #15
 801908c:	19bb      	adds	r3, r7, r6
 801908e:	2200      	movs	r2, #0
 8019090:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019092:	250e      	movs	r5, #14
 8019094:	197b      	adds	r3, r7, r5
 8019096:	2200      	movs	r2, #0
 8019098:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801909a:	687a      	ldr	r2, [r7, #4]
 801909c:	23b0      	movs	r3, #176	@ 0xb0
 801909e:	009b      	lsls	r3, r3, #2
 80190a0:	58d0      	ldr	r0, [r2, r3]
 80190a2:	19bc      	adds	r4, r7, r6
 80190a4:	1cbb      	adds	r3, r7, #2
 80190a6:	781d      	ldrb	r5, [r3, #0]
 80190a8:	003b      	movs	r3, r7
 80190aa:	881a      	ldrh	r2, [r3, #0]
 80190ac:	1cfb      	adds	r3, r7, #3
 80190ae:	7819      	ldrb	r1, [r3, #0]
 80190b0:	002b      	movs	r3, r5
 80190b2:	f7f6 fe04 	bl	800fcbe <HAL_PCD_EP_Open>
 80190b6:	0003      	movs	r3, r0
 80190b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190ba:	250e      	movs	r5, #14
 80190bc:	197c      	adds	r4, r7, r5
 80190be:	19bb      	adds	r3, r7, r6
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	0018      	movs	r0, r3
 80190c4:	f000 f985 	bl	80193d2 <USBD_Get_USB_Status>
 80190c8:	0003      	movs	r3, r0
 80190ca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80190cc:	197b      	adds	r3, r7, r5
 80190ce:	781b      	ldrb	r3, [r3, #0]
}
 80190d0:	0018      	movs	r0, r3
 80190d2:	46bd      	mov	sp, r7
 80190d4:	b005      	add	sp, #20
 80190d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080190d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190da:	b085      	sub	sp, #20
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
 80190e0:	000a      	movs	r2, r1
 80190e2:	1cfb      	adds	r3, r7, #3
 80190e4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190e6:	210f      	movs	r1, #15
 80190e8:	187b      	adds	r3, r7, r1
 80190ea:	2200      	movs	r2, #0
 80190ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190ee:	260e      	movs	r6, #14
 80190f0:	19bb      	adds	r3, r7, r6
 80190f2:	2200      	movs	r2, #0
 80190f4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80190f6:	687a      	ldr	r2, [r7, #4]
 80190f8:	23b0      	movs	r3, #176	@ 0xb0
 80190fa:	009b      	lsls	r3, r3, #2
 80190fc:	58d2      	ldr	r2, [r2, r3]
 80190fe:	000d      	movs	r5, r1
 8019100:	187c      	adds	r4, r7, r1
 8019102:	1cfb      	adds	r3, r7, #3
 8019104:	781b      	ldrb	r3, [r3, #0]
 8019106:	0019      	movs	r1, r3
 8019108:	0010      	movs	r0, r2
 801910a:	f7f6 fe47 	bl	800fd9c <HAL_PCD_EP_Close>
 801910e:	0003      	movs	r3, r0
 8019110:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019112:	19bc      	adds	r4, r7, r6
 8019114:	197b      	adds	r3, r7, r5
 8019116:	781b      	ldrb	r3, [r3, #0]
 8019118:	0018      	movs	r0, r3
 801911a:	f000 f95a 	bl	80193d2 <USBD_Get_USB_Status>
 801911e:	0003      	movs	r3, r0
 8019120:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019122:	19bb      	adds	r3, r7, r6
 8019124:	781b      	ldrb	r3, [r3, #0]
}
 8019126:	0018      	movs	r0, r3
 8019128:	46bd      	mov	sp, r7
 801912a:	b005      	add	sp, #20
 801912c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801912e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801912e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019130:	b085      	sub	sp, #20
 8019132:	af00      	add	r7, sp, #0
 8019134:	6078      	str	r0, [r7, #4]
 8019136:	000a      	movs	r2, r1
 8019138:	1cfb      	adds	r3, r7, #3
 801913a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801913c:	210f      	movs	r1, #15
 801913e:	187b      	adds	r3, r7, r1
 8019140:	2200      	movs	r2, #0
 8019142:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019144:	260e      	movs	r6, #14
 8019146:	19bb      	adds	r3, r7, r6
 8019148:	2200      	movs	r2, #0
 801914a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801914c:	687a      	ldr	r2, [r7, #4]
 801914e:	23b0      	movs	r3, #176	@ 0xb0
 8019150:	009b      	lsls	r3, r3, #2
 8019152:	58d2      	ldr	r2, [r2, r3]
 8019154:	000d      	movs	r5, r1
 8019156:	187c      	adds	r4, r7, r1
 8019158:	1cfb      	adds	r3, r7, #3
 801915a:	781b      	ldrb	r3, [r3, #0]
 801915c:	0019      	movs	r1, r3
 801915e:	0010      	movs	r0, r2
 8019160:	f7f6 fef9 	bl	800ff56 <HAL_PCD_EP_SetStall>
 8019164:	0003      	movs	r3, r0
 8019166:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019168:	19bc      	adds	r4, r7, r6
 801916a:	197b      	adds	r3, r7, r5
 801916c:	781b      	ldrb	r3, [r3, #0]
 801916e:	0018      	movs	r0, r3
 8019170:	f000 f92f 	bl	80193d2 <USBD_Get_USB_Status>
 8019174:	0003      	movs	r3, r0
 8019176:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019178:	19bb      	adds	r3, r7, r6
 801917a:	781b      	ldrb	r3, [r3, #0]
}
 801917c:	0018      	movs	r0, r3
 801917e:	46bd      	mov	sp, r7
 8019180:	b005      	add	sp, #20
 8019182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019184 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019186:	b085      	sub	sp, #20
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
 801918c:	000a      	movs	r2, r1
 801918e:	1cfb      	adds	r3, r7, #3
 8019190:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019192:	210f      	movs	r1, #15
 8019194:	187b      	adds	r3, r7, r1
 8019196:	2200      	movs	r2, #0
 8019198:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801919a:	260e      	movs	r6, #14
 801919c:	19bb      	adds	r3, r7, r6
 801919e:	2200      	movs	r2, #0
 80191a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	23b0      	movs	r3, #176	@ 0xb0
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	58d2      	ldr	r2, [r2, r3]
 80191aa:	000d      	movs	r5, r1
 80191ac:	187c      	adds	r4, r7, r1
 80191ae:	1cfb      	adds	r3, r7, #3
 80191b0:	781b      	ldrb	r3, [r3, #0]
 80191b2:	0019      	movs	r1, r3
 80191b4:	0010      	movs	r0, r2
 80191b6:	f7f6 ff2a 	bl	801000e <HAL_PCD_EP_ClrStall>
 80191ba:	0003      	movs	r3, r0
 80191bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191be:	19bc      	adds	r4, r7, r6
 80191c0:	197b      	adds	r3, r7, r5
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	0018      	movs	r0, r3
 80191c6:	f000 f904 	bl	80193d2 <USBD_Get_USB_Status>
 80191ca:	0003      	movs	r3, r0
 80191cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80191ce:	19bb      	adds	r3, r7, r6
 80191d0:	781b      	ldrb	r3, [r3, #0]
}
 80191d2:	0018      	movs	r0, r3
 80191d4:	46bd      	mov	sp, r7
 80191d6:	b005      	add	sp, #20
 80191d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080191da <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191da:	b580      	push	{r7, lr}
 80191dc:	b084      	sub	sp, #16
 80191de:	af00      	add	r7, sp, #0
 80191e0:	6078      	str	r0, [r7, #4]
 80191e2:	000a      	movs	r2, r1
 80191e4:	1cfb      	adds	r3, r7, #3
 80191e6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80191e8:	687a      	ldr	r2, [r7, #4]
 80191ea:	23b0      	movs	r3, #176	@ 0xb0
 80191ec:	009b      	lsls	r3, r3, #2
 80191ee:	58d3      	ldr	r3, [r2, r3]
 80191f0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80191f2:	1cfb      	adds	r3, r7, #3
 80191f4:	781b      	ldrb	r3, [r3, #0]
 80191f6:	b25b      	sxtb	r3, r3
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	da0d      	bge.n	8019218 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80191fc:	1cfb      	adds	r3, r7, #3
 80191fe:	781b      	ldrb	r3, [r3, #0]
 8019200:	227f      	movs	r2, #127	@ 0x7f
 8019202:	4013      	ands	r3, r2
 8019204:	68f9      	ldr	r1, [r7, #12]
 8019206:	1c5a      	adds	r2, r3, #1
 8019208:	0013      	movs	r3, r2
 801920a:	009b      	lsls	r3, r3, #2
 801920c:	189b      	adds	r3, r3, r2
 801920e:	00db      	lsls	r3, r3, #3
 8019210:	18cb      	adds	r3, r1, r3
 8019212:	3302      	adds	r3, #2
 8019214:	781b      	ldrb	r3, [r3, #0]
 8019216:	e00d      	b.n	8019234 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019218:	1cfb      	adds	r3, r7, #3
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	227f      	movs	r2, #127	@ 0x7f
 801921e:	401a      	ands	r2, r3
 8019220:	68f8      	ldr	r0, [r7, #12]
 8019222:	23b5      	movs	r3, #181	@ 0xb5
 8019224:	0059      	lsls	r1, r3, #1
 8019226:	0013      	movs	r3, r2
 8019228:	009b      	lsls	r3, r3, #2
 801922a:	189b      	adds	r3, r3, r2
 801922c:	00db      	lsls	r3, r3, #3
 801922e:	18c3      	adds	r3, r0, r3
 8019230:	185b      	adds	r3, r3, r1
 8019232:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019234:	0018      	movs	r0, r3
 8019236:	46bd      	mov	sp, r7
 8019238:	b004      	add	sp, #16
 801923a:	bd80      	pop	{r7, pc}

0801923c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801923c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801923e:	b085      	sub	sp, #20
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	000a      	movs	r2, r1
 8019246:	1cfb      	adds	r3, r7, #3
 8019248:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801924a:	210f      	movs	r1, #15
 801924c:	187b      	adds	r3, r7, r1
 801924e:	2200      	movs	r2, #0
 8019250:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019252:	260e      	movs	r6, #14
 8019254:	19bb      	adds	r3, r7, r6
 8019256:	2200      	movs	r2, #0
 8019258:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801925a:	687a      	ldr	r2, [r7, #4]
 801925c:	23b0      	movs	r3, #176	@ 0xb0
 801925e:	009b      	lsls	r3, r3, #2
 8019260:	58d2      	ldr	r2, [r2, r3]
 8019262:	000d      	movs	r5, r1
 8019264:	187c      	adds	r4, r7, r1
 8019266:	1cfb      	adds	r3, r7, #3
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	0019      	movs	r1, r3
 801926c:	0010      	movs	r0, r2
 801926e:	f7f6 fcfb 	bl	800fc68 <HAL_PCD_SetAddress>
 8019272:	0003      	movs	r3, r0
 8019274:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019276:	19bc      	adds	r4, r7, r6
 8019278:	197b      	adds	r3, r7, r5
 801927a:	781b      	ldrb	r3, [r3, #0]
 801927c:	0018      	movs	r0, r3
 801927e:	f000 f8a8 	bl	80193d2 <USBD_Get_USB_Status>
 8019282:	0003      	movs	r3, r0
 8019284:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019286:	19bb      	adds	r3, r7, r6
 8019288:	781b      	ldrb	r3, [r3, #0]
}
 801928a:	0018      	movs	r0, r3
 801928c:	46bd      	mov	sp, r7
 801928e:	b005      	add	sp, #20
 8019290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019292 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019294:	b087      	sub	sp, #28
 8019296:	af00      	add	r7, sp, #0
 8019298:	60f8      	str	r0, [r7, #12]
 801929a:	0008      	movs	r0, r1
 801929c:	607a      	str	r2, [r7, #4]
 801929e:	0019      	movs	r1, r3
 80192a0:	230b      	movs	r3, #11
 80192a2:	18fb      	adds	r3, r7, r3
 80192a4:	1c02      	adds	r2, r0, #0
 80192a6:	701a      	strb	r2, [r3, #0]
 80192a8:	2408      	movs	r4, #8
 80192aa:	193b      	adds	r3, r7, r4
 80192ac:	1c0a      	adds	r2, r1, #0
 80192ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192b0:	2117      	movs	r1, #23
 80192b2:	187b      	adds	r3, r7, r1
 80192b4:	2200      	movs	r2, #0
 80192b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192b8:	2516      	movs	r5, #22
 80192ba:	197b      	adds	r3, r7, r5
 80192bc:	2200      	movs	r2, #0
 80192be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80192c0:	68fa      	ldr	r2, [r7, #12]
 80192c2:	23b0      	movs	r3, #176	@ 0xb0
 80192c4:	009b      	lsls	r3, r3, #2
 80192c6:	58d0      	ldr	r0, [r2, r3]
 80192c8:	193b      	adds	r3, r7, r4
 80192ca:	881d      	ldrh	r5, [r3, #0]
 80192cc:	000e      	movs	r6, r1
 80192ce:	187c      	adds	r4, r7, r1
 80192d0:	687a      	ldr	r2, [r7, #4]
 80192d2:	230b      	movs	r3, #11
 80192d4:	18fb      	adds	r3, r7, r3
 80192d6:	7819      	ldrb	r1, [r3, #0]
 80192d8:	002b      	movs	r3, r5
 80192da:	f7f6 fe00 	bl	800fede <HAL_PCD_EP_Transmit>
 80192de:	0003      	movs	r3, r0
 80192e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192e2:	2516      	movs	r5, #22
 80192e4:	197c      	adds	r4, r7, r5
 80192e6:	19bb      	adds	r3, r7, r6
 80192e8:	781b      	ldrb	r3, [r3, #0]
 80192ea:	0018      	movs	r0, r3
 80192ec:	f000 f871 	bl	80193d2 <USBD_Get_USB_Status>
 80192f0:	0003      	movs	r3, r0
 80192f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80192f4:	197b      	adds	r3, r7, r5
 80192f6:	781b      	ldrb	r3, [r3, #0]
}
 80192f8:	0018      	movs	r0, r3
 80192fa:	46bd      	mov	sp, r7
 80192fc:	b007      	add	sp, #28
 80192fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019302:	b087      	sub	sp, #28
 8019304:	af00      	add	r7, sp, #0
 8019306:	60f8      	str	r0, [r7, #12]
 8019308:	0008      	movs	r0, r1
 801930a:	607a      	str	r2, [r7, #4]
 801930c:	0019      	movs	r1, r3
 801930e:	230b      	movs	r3, #11
 8019310:	18fb      	adds	r3, r7, r3
 8019312:	1c02      	adds	r2, r0, #0
 8019314:	701a      	strb	r2, [r3, #0]
 8019316:	2408      	movs	r4, #8
 8019318:	193b      	adds	r3, r7, r4
 801931a:	1c0a      	adds	r2, r1, #0
 801931c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801931e:	2117      	movs	r1, #23
 8019320:	187b      	adds	r3, r7, r1
 8019322:	2200      	movs	r2, #0
 8019324:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019326:	2516      	movs	r5, #22
 8019328:	197b      	adds	r3, r7, r5
 801932a:	2200      	movs	r2, #0
 801932c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801932e:	68fa      	ldr	r2, [r7, #12]
 8019330:	23b0      	movs	r3, #176	@ 0xb0
 8019332:	009b      	lsls	r3, r3, #2
 8019334:	58d0      	ldr	r0, [r2, r3]
 8019336:	193b      	adds	r3, r7, r4
 8019338:	881d      	ldrh	r5, [r3, #0]
 801933a:	000e      	movs	r6, r1
 801933c:	187c      	adds	r4, r7, r1
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	230b      	movs	r3, #11
 8019342:	18fb      	adds	r3, r7, r3
 8019344:	7819      	ldrb	r1, [r3, #0]
 8019346:	002b      	movs	r3, r5
 8019348:	f7f6 fd79 	bl	800fe3e <HAL_PCD_EP_Receive>
 801934c:	0003      	movs	r3, r0
 801934e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019350:	2516      	movs	r5, #22
 8019352:	197c      	adds	r4, r7, r5
 8019354:	19bb      	adds	r3, r7, r6
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	0018      	movs	r0, r3
 801935a:	f000 f83a 	bl	80193d2 <USBD_Get_USB_Status>
 801935e:	0003      	movs	r3, r0
 8019360:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019362:	197b      	adds	r3, r7, r5
 8019364:	781b      	ldrb	r3, [r3, #0]
}
 8019366:	0018      	movs	r0, r3
 8019368:	46bd      	mov	sp, r7
 801936a:	b007      	add	sp, #28
 801936c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801936e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801936e:	b580      	push	{r7, lr}
 8019370:	b082      	sub	sp, #8
 8019372:	af00      	add	r7, sp, #0
 8019374:	6078      	str	r0, [r7, #4]
 8019376:	000a      	movs	r2, r1
 8019378:	1cfb      	adds	r3, r7, #3
 801937a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801937c:	687a      	ldr	r2, [r7, #4]
 801937e:	23b0      	movs	r3, #176	@ 0xb0
 8019380:	009b      	lsls	r3, r3, #2
 8019382:	58d2      	ldr	r2, [r2, r3]
 8019384:	1cfb      	adds	r3, r7, #3
 8019386:	781b      	ldrb	r3, [r3, #0]
 8019388:	0019      	movs	r1, r3
 801938a:	0010      	movs	r0, r2
 801938c:	f7f6 fd8e 	bl	800feac <HAL_PCD_EP_GetRxCount>
 8019390:	0003      	movs	r3, r0
}
 8019392:	0018      	movs	r0, r3
 8019394:	46bd      	mov	sp, r7
 8019396:	b002      	add	sp, #8
 8019398:	bd80      	pop	{r7, pc}
	...

0801939c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b082      	sub	sp, #8
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80193a4:	4b02      	ldr	r3, [pc, #8]	@ (80193b0 <USBD_static_malloc+0x14>)
}
 80193a6:	0018      	movs	r0, r3
 80193a8:	46bd      	mov	sp, r7
 80193aa:	b002      	add	sp, #8
 80193ac:	bd80      	pop	{r7, pc}
 80193ae:	46c0      	nop			@ (mov r8, r8)
 80193b0:	2000353c 	.word	0x2000353c

080193b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b082      	sub	sp, #8
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]

}
 80193bc:	46c0      	nop			@ (mov r8, r8)
 80193be:	46bd      	mov	sp, r7
 80193c0:	b002      	add	sp, #8
 80193c2:	bd80      	pop	{r7, pc}

080193c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80193c8:	f7ed fee2 	bl	8007190 <SystemClock_Config>
}
 80193cc:	46c0      	nop			@ (mov r8, r8)
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd80      	pop	{r7, pc}

080193d2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80193d2:	b580      	push	{r7, lr}
 80193d4:	b084      	sub	sp, #16
 80193d6:	af00      	add	r7, sp, #0
 80193d8:	0002      	movs	r2, r0
 80193da:	1dfb      	adds	r3, r7, #7
 80193dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193de:	230f      	movs	r3, #15
 80193e0:	18fb      	adds	r3, r7, r3
 80193e2:	2200      	movs	r2, #0
 80193e4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80193e6:	1dfb      	adds	r3, r7, #7
 80193e8:	781b      	ldrb	r3, [r3, #0]
 80193ea:	2b03      	cmp	r3, #3
 80193ec:	d017      	beq.n	801941e <USBD_Get_USB_Status+0x4c>
 80193ee:	dc1b      	bgt.n	8019428 <USBD_Get_USB_Status+0x56>
 80193f0:	2b02      	cmp	r3, #2
 80193f2:	d00f      	beq.n	8019414 <USBD_Get_USB_Status+0x42>
 80193f4:	dc18      	bgt.n	8019428 <USBD_Get_USB_Status+0x56>
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d002      	beq.n	8019400 <USBD_Get_USB_Status+0x2e>
 80193fa:	2b01      	cmp	r3, #1
 80193fc:	d005      	beq.n	801940a <USBD_Get_USB_Status+0x38>
 80193fe:	e013      	b.n	8019428 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019400:	230f      	movs	r3, #15
 8019402:	18fb      	adds	r3, r7, r3
 8019404:	2200      	movs	r2, #0
 8019406:	701a      	strb	r2, [r3, #0]
    break;
 8019408:	e013      	b.n	8019432 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801940a:	230f      	movs	r3, #15
 801940c:	18fb      	adds	r3, r7, r3
 801940e:	2202      	movs	r2, #2
 8019410:	701a      	strb	r2, [r3, #0]
    break;
 8019412:	e00e      	b.n	8019432 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019414:	230f      	movs	r3, #15
 8019416:	18fb      	adds	r3, r7, r3
 8019418:	2201      	movs	r2, #1
 801941a:	701a      	strb	r2, [r3, #0]
    break;
 801941c:	e009      	b.n	8019432 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801941e:	230f      	movs	r3, #15
 8019420:	18fb      	adds	r3, r7, r3
 8019422:	2202      	movs	r2, #2
 8019424:	701a      	strb	r2, [r3, #0]
    break;
 8019426:	e004      	b.n	8019432 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8019428:	230f      	movs	r3, #15
 801942a:	18fb      	adds	r3, r7, r3
 801942c:	2202      	movs	r2, #2
 801942e:	701a      	strb	r2, [r3, #0]
    break;
 8019430:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8019432:	230f      	movs	r3, #15
 8019434:	18fb      	adds	r3, r7, r3
 8019436:	781b      	ldrb	r3, [r3, #0]
}
 8019438:	0018      	movs	r0, r3
 801943a:	46bd      	mov	sp, r7
 801943c:	b004      	add	sp, #16
 801943e:	bd80      	pop	{r7, pc}

08019440 <arm_cfft_radix4by2_q31>:
 8019440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019442:	465f      	mov	r7, fp
 8019444:	4656      	mov	r6, sl
 8019446:	464d      	mov	r5, r9
 8019448:	4644      	mov	r4, r8
 801944a:	000b      	movs	r3, r1
 801944c:	b4f0      	push	{r4, r5, r6, r7}
 801944e:	085b      	lsrs	r3, r3, #1
 8019450:	b08f      	sub	sp, #60	@ 0x3c
 8019452:	910a      	str	r1, [sp, #40]	@ 0x28
 8019454:	0007      	movs	r7, r0
 8019456:	9009      	str	r0, [sp, #36]	@ 0x24
 8019458:	0011      	movs	r1, r2
 801945a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801945c:	930c      	str	r3, [sp, #48]	@ 0x30
 801945e:	2b00      	cmp	r3, #0
 8019460:	d100      	bne.n	8019464 <arm_cfft_radix4by2_q31+0x24>
 8019462:	e0a0      	b.n	80195a6 <arm_cfft_radix4by2_q31+0x166>
 8019464:	0002      	movs	r2, r0
 8019466:	00db      	lsls	r3, r3, #3
 8019468:	3204      	adds	r2, #4
 801946a:	4691      	mov	r9, r2
 801946c:	4698      	mov	r8, r3
 801946e:	000a      	movs	r2, r1
 8019470:	464e      	mov	r6, r9
 8019472:	4442      	add	r2, r8
 8019474:	4699      	mov	r9, r3
 8019476:	4688      	mov	r8, r1
 8019478:	9208      	str	r2, [sp, #32]
 801947a:	900d      	str	r0, [sp, #52]	@ 0x34
 801947c:	4643      	mov	r3, r8
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	469b      	mov	fp, r3
 8019482:	4643      	mov	r3, r8
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	469a      	mov	sl, r3
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	109c      	asrs	r4, r3, #2
 801948c:	464b      	mov	r3, r9
 801948e:	58fb      	ldr	r3, [r7, r3]
 8019490:	109a      	asrs	r2, r3, #2
 8019492:	18a3      	adds	r3, r4, r2
 8019494:	603b      	str	r3, [r7, #0]
 8019496:	6833      	ldr	r3, [r6, #0]
 8019498:	1aa4      	subs	r4, r4, r2
 801949a:	109d      	asrs	r5, r3, #2
 801949c:	464b      	mov	r3, r9
 801949e:	58f3      	ldr	r3, [r6, r3]
 80194a0:	17e2      	asrs	r2, r4, #31
 80194a2:	109b      	asrs	r3, r3, #2
 80194a4:	18e9      	adds	r1, r5, r3
 80194a6:	6031      	str	r1, [r6, #0]
 80194a8:	0011      	movs	r1, r2
 80194aa:	465a      	mov	r2, fp
 80194ac:	17d2      	asrs	r2, r2, #31
 80194ae:	0010      	movs	r0, r2
 80194b0:	4652      	mov	r2, sl
 80194b2:	1aed      	subs	r5, r5, r3
 80194b4:	17eb      	asrs	r3, r5, #31
 80194b6:	17d2      	asrs	r2, r2, #31
 80194b8:	9307      	str	r3, [sp, #28]
 80194ba:	9204      	str	r2, [sp, #16]
 80194bc:	0003      	movs	r3, r0
 80194be:	465a      	mov	r2, fp
 80194c0:	9006      	str	r0, [sp, #24]
 80194c2:	0020      	movs	r0, r4
 80194c4:	9105      	str	r1, [sp, #20]
 80194c6:	f7e7 f87b 	bl	80005c0 <__aeabi_lmul>
 80194ca:	2280      	movs	r2, #128	@ 0x80
 80194cc:	2300      	movs	r3, #0
 80194ce:	0612      	lsls	r2, r2, #24
 80194d0:	1880      	adds	r0, r0, r2
 80194d2:	4159      	adcs	r1, r3
 80194d4:	2300      	movs	r3, #0
 80194d6:	9101      	str	r1, [sp, #4]
 80194d8:	9300      	str	r3, [sp, #0]
 80194da:	4652      	mov	r2, sl
 80194dc:	9b04      	ldr	r3, [sp, #16]
 80194de:	0028      	movs	r0, r5
 80194e0:	17e9      	asrs	r1, r5, #31
 80194e2:	f7e7 f86d 	bl	80005c0 <__aeabi_lmul>
 80194e6:	9a00      	ldr	r2, [sp, #0]
 80194e8:	9b01      	ldr	r3, [sp, #4]
 80194ea:	1880      	adds	r0, r0, r2
 80194ec:	4159      	adcs	r1, r3
 80194ee:	2280      	movs	r2, #128	@ 0x80
 80194f0:	2300      	movs	r3, #0
 80194f2:	0612      	lsls	r2, r2, #24
 80194f4:	1880      	adds	r0, r0, r2
 80194f6:	4159      	adcs	r1, r3
 80194f8:	464a      	mov	r2, r9
 80194fa:	004b      	lsls	r3, r1, #1
 80194fc:	50bb      	str	r3, [r7, r2]
 80194fe:	4658      	mov	r0, fp
 8019500:	002a      	movs	r2, r5
 8019502:	9b07      	ldr	r3, [sp, #28]
 8019504:	9906      	ldr	r1, [sp, #24]
 8019506:	f7e7 f85b 	bl	80005c0 <__aeabi_lmul>
 801950a:	2280      	movs	r2, #128	@ 0x80
 801950c:	2300      	movs	r3, #0
 801950e:	0612      	lsls	r2, r2, #24
 8019510:	1880      	adds	r0, r0, r2
 8019512:	4159      	adcs	r1, r3
 8019514:	2000      	movs	r0, #0
 8019516:	9103      	str	r1, [sp, #12]
 8019518:	9002      	str	r0, [sp, #8]
 801951a:	4652      	mov	r2, sl
 801951c:	9b04      	ldr	r3, [sp, #16]
 801951e:	0020      	movs	r0, r4
 8019520:	9905      	ldr	r1, [sp, #20]
 8019522:	f7e7 f84d 	bl	80005c0 <__aeabi_lmul>
 8019526:	9a02      	ldr	r2, [sp, #8]
 8019528:	9b03      	ldr	r3, [sp, #12]
 801952a:	1a12      	subs	r2, r2, r0
 801952c:	418b      	sbcs	r3, r1
 801952e:	2080      	movs	r0, #128	@ 0x80
 8019530:	2100      	movs	r1, #0
 8019532:	0600      	lsls	r0, r0, #24
 8019534:	1812      	adds	r2, r2, r0
 8019536:	414b      	adcs	r3, r1
 8019538:	464a      	mov	r2, r9
 801953a:	005b      	lsls	r3, r3, #1
 801953c:	50b3      	str	r3, [r6, r2]
 801953e:	2308      	movs	r3, #8
 8019540:	469c      	mov	ip, r3
 8019542:	9b08      	ldr	r3, [sp, #32]
 8019544:	44e0      	add	r8, ip
 8019546:	3708      	adds	r7, #8
 8019548:	3608      	adds	r6, #8
 801954a:	4598      	cmp	r8, r3
 801954c:	d196      	bne.n	801947c <arm_cfft_radix4by2_q31+0x3c>
 801954e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019550:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019552:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019554:	2302      	movs	r3, #2
 8019556:	003a      	movs	r2, r7
 8019558:	0029      	movs	r1, r5
 801955a:	0020      	movs	r0, r4
 801955c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801955e:	f000 f957 	bl	8019810 <arm_radix4_butterfly_q31>
 8019562:	46a4      	mov	ip, r4
 8019564:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019566:	2302      	movs	r3, #2
 8019568:	0088      	lsls	r0, r1, #2
 801956a:	4460      	add	r0, ip
 801956c:	003a      	movs	r2, r7
 801956e:	0029      	movs	r1, r5
 8019570:	f000 f94e 	bl	8019810 <arm_radix4_butterfly_q31>
 8019574:	46a4      	mov	ip, r4
 8019576:	0128      	lsls	r0, r5, #4
 8019578:	4460      	add	r0, ip
 801957a:	6833      	ldr	r3, [r6, #0]
 801957c:	005b      	lsls	r3, r3, #1
 801957e:	6033      	str	r3, [r6, #0]
 8019580:	6873      	ldr	r3, [r6, #4]
 8019582:	005b      	lsls	r3, r3, #1
 8019584:	6073      	str	r3, [r6, #4]
 8019586:	68b3      	ldr	r3, [r6, #8]
 8019588:	005b      	lsls	r3, r3, #1
 801958a:	60b3      	str	r3, [r6, #8]
 801958c:	68f3      	ldr	r3, [r6, #12]
 801958e:	005b      	lsls	r3, r3, #1
 8019590:	60f3      	str	r3, [r6, #12]
 8019592:	3610      	adds	r6, #16
 8019594:	42b0      	cmp	r0, r6
 8019596:	d1f0      	bne.n	801957a <arm_cfft_radix4by2_q31+0x13a>
 8019598:	b00f      	add	sp, #60	@ 0x3c
 801959a:	bc3c      	pop	{r2, r3, r4, r5}
 801959c:	4690      	mov	r8, r2
 801959e:	4699      	mov	r9, r3
 80195a0:	46a2      	mov	sl, r4
 80195a2:	46ab      	mov	fp, r5
 80195a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195a6:	2302      	movs	r3, #2
 80195a8:	2100      	movs	r1, #0
 80195aa:	0015      	movs	r5, r2
 80195ac:	f000 f930 	bl	8019810 <arm_radix4_butterfly_q31>
 80195b0:	46bc      	mov	ip, r7
 80195b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80195b4:	002a      	movs	r2, r5
 80195b6:	0098      	lsls	r0, r3, #2
 80195b8:	4460      	add	r0, ip
 80195ba:	2302      	movs	r3, #2
 80195bc:	2100      	movs	r1, #0
 80195be:	f000 f927 	bl	8019810 <arm_radix4_butterfly_q31>
 80195c2:	e7e9      	b.n	8019598 <arm_cfft_radix4by2_q31+0x158>

080195c4 <arm_cfft_radix4by2_inverse_q31>:
 80195c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195c6:	465f      	mov	r7, fp
 80195c8:	4656      	mov	r6, sl
 80195ca:	464d      	mov	r5, r9
 80195cc:	4644      	mov	r4, r8
 80195ce:	000b      	movs	r3, r1
 80195d0:	b4f0      	push	{r4, r5, r6, r7}
 80195d2:	085b      	lsrs	r3, r3, #1
 80195d4:	b08f      	sub	sp, #60	@ 0x3c
 80195d6:	910a      	str	r1, [sp, #40]	@ 0x28
 80195d8:	0007      	movs	r7, r0
 80195da:	9009      	str	r0, [sp, #36]	@ 0x24
 80195dc:	0011      	movs	r1, r2
 80195de:	920b      	str	r2, [sp, #44]	@ 0x2c
 80195e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d100      	bne.n	80195e8 <arm_cfft_radix4by2_inverse_q31+0x24>
 80195e6:	e0a0      	b.n	801972a <arm_cfft_radix4by2_inverse_q31+0x166>
 80195e8:	0002      	movs	r2, r0
 80195ea:	00db      	lsls	r3, r3, #3
 80195ec:	3204      	adds	r2, #4
 80195ee:	4691      	mov	r9, r2
 80195f0:	4698      	mov	r8, r3
 80195f2:	000a      	movs	r2, r1
 80195f4:	464e      	mov	r6, r9
 80195f6:	4442      	add	r2, r8
 80195f8:	4699      	mov	r9, r3
 80195fa:	4688      	mov	r8, r1
 80195fc:	9208      	str	r2, [sp, #32]
 80195fe:	900d      	str	r0, [sp, #52]	@ 0x34
 8019600:	4643      	mov	r3, r8
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	469b      	mov	fp, r3
 8019606:	4643      	mov	r3, r8
 8019608:	685b      	ldr	r3, [r3, #4]
 801960a:	469a      	mov	sl, r3
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	109c      	asrs	r4, r3, #2
 8019610:	464b      	mov	r3, r9
 8019612:	58fb      	ldr	r3, [r7, r3]
 8019614:	109a      	asrs	r2, r3, #2
 8019616:	18a3      	adds	r3, r4, r2
 8019618:	603b      	str	r3, [r7, #0]
 801961a:	6833      	ldr	r3, [r6, #0]
 801961c:	1aa4      	subs	r4, r4, r2
 801961e:	109d      	asrs	r5, r3, #2
 8019620:	464b      	mov	r3, r9
 8019622:	58f3      	ldr	r3, [r6, r3]
 8019624:	17e2      	asrs	r2, r4, #31
 8019626:	109b      	asrs	r3, r3, #2
 8019628:	18e9      	adds	r1, r5, r3
 801962a:	6031      	str	r1, [r6, #0]
 801962c:	0011      	movs	r1, r2
 801962e:	465a      	mov	r2, fp
 8019630:	17d2      	asrs	r2, r2, #31
 8019632:	0010      	movs	r0, r2
 8019634:	4652      	mov	r2, sl
 8019636:	1aed      	subs	r5, r5, r3
 8019638:	17eb      	asrs	r3, r5, #31
 801963a:	17d2      	asrs	r2, r2, #31
 801963c:	9307      	str	r3, [sp, #28]
 801963e:	9204      	str	r2, [sp, #16]
 8019640:	0003      	movs	r3, r0
 8019642:	465a      	mov	r2, fp
 8019644:	9006      	str	r0, [sp, #24]
 8019646:	0020      	movs	r0, r4
 8019648:	9105      	str	r1, [sp, #20]
 801964a:	f7e6 ffb9 	bl	80005c0 <__aeabi_lmul>
 801964e:	2280      	movs	r2, #128	@ 0x80
 8019650:	2300      	movs	r3, #0
 8019652:	0612      	lsls	r2, r2, #24
 8019654:	1880      	adds	r0, r0, r2
 8019656:	4159      	adcs	r1, r3
 8019658:	2300      	movs	r3, #0
 801965a:	9101      	str	r1, [sp, #4]
 801965c:	9300      	str	r3, [sp, #0]
 801965e:	4652      	mov	r2, sl
 8019660:	9b04      	ldr	r3, [sp, #16]
 8019662:	0028      	movs	r0, r5
 8019664:	17e9      	asrs	r1, r5, #31
 8019666:	f7e6 ffab 	bl	80005c0 <__aeabi_lmul>
 801966a:	9a00      	ldr	r2, [sp, #0]
 801966c:	9b01      	ldr	r3, [sp, #4]
 801966e:	1a12      	subs	r2, r2, r0
 8019670:	418b      	sbcs	r3, r1
 8019672:	2080      	movs	r0, #128	@ 0x80
 8019674:	2100      	movs	r1, #0
 8019676:	0600      	lsls	r0, r0, #24
 8019678:	1812      	adds	r2, r2, r0
 801967a:	414b      	adcs	r3, r1
 801967c:	464a      	mov	r2, r9
 801967e:	005b      	lsls	r3, r3, #1
 8019680:	50bb      	str	r3, [r7, r2]
 8019682:	4658      	mov	r0, fp
 8019684:	002a      	movs	r2, r5
 8019686:	9b07      	ldr	r3, [sp, #28]
 8019688:	9906      	ldr	r1, [sp, #24]
 801968a:	f7e6 ff99 	bl	80005c0 <__aeabi_lmul>
 801968e:	2280      	movs	r2, #128	@ 0x80
 8019690:	2300      	movs	r3, #0
 8019692:	0612      	lsls	r2, r2, #24
 8019694:	1880      	adds	r0, r0, r2
 8019696:	4159      	adcs	r1, r3
 8019698:	2000      	movs	r0, #0
 801969a:	9103      	str	r1, [sp, #12]
 801969c:	9002      	str	r0, [sp, #8]
 801969e:	4652      	mov	r2, sl
 80196a0:	9b04      	ldr	r3, [sp, #16]
 80196a2:	0020      	movs	r0, r4
 80196a4:	9905      	ldr	r1, [sp, #20]
 80196a6:	f7e6 ff8b 	bl	80005c0 <__aeabi_lmul>
 80196aa:	9b02      	ldr	r3, [sp, #8]
 80196ac:	9c03      	ldr	r4, [sp, #12]
 80196ae:	18c0      	adds	r0, r0, r3
 80196b0:	4161      	adcs	r1, r4
 80196b2:	2380      	movs	r3, #128	@ 0x80
 80196b4:	2400      	movs	r4, #0
 80196b6:	061b      	lsls	r3, r3, #24
 80196b8:	18c0      	adds	r0, r0, r3
 80196ba:	4161      	adcs	r1, r4
 80196bc:	464a      	mov	r2, r9
 80196be:	004b      	lsls	r3, r1, #1
 80196c0:	50b3      	str	r3, [r6, r2]
 80196c2:	2308      	movs	r3, #8
 80196c4:	469c      	mov	ip, r3
 80196c6:	9b08      	ldr	r3, [sp, #32]
 80196c8:	44e0      	add	r8, ip
 80196ca:	3708      	adds	r7, #8
 80196cc:	3608      	adds	r6, #8
 80196ce:	4598      	cmp	r8, r3
 80196d0:	d196      	bne.n	8019600 <arm_cfft_radix4by2_inverse_q31+0x3c>
 80196d2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80196d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80196d6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80196d8:	2302      	movs	r3, #2
 80196da:	003a      	movs	r2, r7
 80196dc:	0029      	movs	r1, r5
 80196de:	0020      	movs	r0, r4
 80196e0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80196e2:	f000 fb3b 	bl	8019d5c <arm_radix4_butterfly_inverse_q31>
 80196e6:	46a4      	mov	ip, r4
 80196e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80196ea:	2302      	movs	r3, #2
 80196ec:	0088      	lsls	r0, r1, #2
 80196ee:	4460      	add	r0, ip
 80196f0:	003a      	movs	r2, r7
 80196f2:	0029      	movs	r1, r5
 80196f4:	f000 fb32 	bl	8019d5c <arm_radix4_butterfly_inverse_q31>
 80196f8:	46a4      	mov	ip, r4
 80196fa:	0128      	lsls	r0, r5, #4
 80196fc:	4460      	add	r0, ip
 80196fe:	6833      	ldr	r3, [r6, #0]
 8019700:	005b      	lsls	r3, r3, #1
 8019702:	6033      	str	r3, [r6, #0]
 8019704:	6873      	ldr	r3, [r6, #4]
 8019706:	005b      	lsls	r3, r3, #1
 8019708:	6073      	str	r3, [r6, #4]
 801970a:	68b3      	ldr	r3, [r6, #8]
 801970c:	005b      	lsls	r3, r3, #1
 801970e:	60b3      	str	r3, [r6, #8]
 8019710:	68f3      	ldr	r3, [r6, #12]
 8019712:	005b      	lsls	r3, r3, #1
 8019714:	60f3      	str	r3, [r6, #12]
 8019716:	3610      	adds	r6, #16
 8019718:	42b0      	cmp	r0, r6
 801971a:	d1f0      	bne.n	80196fe <arm_cfft_radix4by2_inverse_q31+0x13a>
 801971c:	b00f      	add	sp, #60	@ 0x3c
 801971e:	bc3c      	pop	{r2, r3, r4, r5}
 8019720:	4690      	mov	r8, r2
 8019722:	4699      	mov	r9, r3
 8019724:	46a2      	mov	sl, r4
 8019726:	46ab      	mov	fp, r5
 8019728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801972a:	2302      	movs	r3, #2
 801972c:	2100      	movs	r1, #0
 801972e:	0015      	movs	r5, r2
 8019730:	f000 fb14 	bl	8019d5c <arm_radix4_butterfly_inverse_q31>
 8019734:	46bc      	mov	ip, r7
 8019736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019738:	002a      	movs	r2, r5
 801973a:	0098      	lsls	r0, r3, #2
 801973c:	4460      	add	r0, ip
 801973e:	2302      	movs	r3, #2
 8019740:	2100      	movs	r1, #0
 8019742:	f000 fb0b 	bl	8019d5c <arm_radix4_butterfly_inverse_q31>
 8019746:	e7e9      	b.n	801971c <arm_cfft_radix4by2_inverse_q31+0x158>

08019748 <arm_cfft_q31>:
 8019748:	b570      	push	{r4, r5, r6, lr}
 801974a:	001e      	movs	r6, r3
 801974c:	2380      	movs	r3, #128	@ 0x80
 801974e:	000d      	movs	r5, r1
 8019750:	0004      	movs	r4, r0
 8019752:	8801      	ldrh	r1, [r0, #0]
 8019754:	005b      	lsls	r3, r3, #1
 8019756:	2a01      	cmp	r2, #1
 8019758:	d028      	beq.n	80197ac <arm_cfft_q31+0x64>
 801975a:	4299      	cmp	r1, r3
 801975c:	d020      	beq.n	80197a0 <arm_cfft_q31+0x58>
 801975e:	d812      	bhi.n	8019786 <arm_cfft_q31+0x3e>
 8019760:	2920      	cmp	r1, #32
 8019762:	d004      	beq.n	801976e <arm_cfft_q31+0x26>
 8019764:	d949      	bls.n	80197fa <arm_cfft_q31+0xb2>
 8019766:	2940      	cmp	r1, #64	@ 0x40
 8019768:	d01a      	beq.n	80197a0 <arm_cfft_q31+0x58>
 801976a:	2980      	cmp	r1, #128	@ 0x80
 801976c:	d103      	bne.n	8019776 <arm_cfft_q31+0x2e>
 801976e:	6862      	ldr	r2, [r4, #4]
 8019770:	0028      	movs	r0, r5
 8019772:	f7ff fe65 	bl	8019440 <arm_cfft_radix4by2_q31>
 8019776:	2e00      	cmp	r6, #0
 8019778:	d004      	beq.n	8019784 <arm_cfft_q31+0x3c>
 801977a:	68a2      	ldr	r2, [r4, #8]
 801977c:	89a1      	ldrh	r1, [r4, #12]
 801977e:	0028      	movs	r0, r5
 8019780:	f7e6 fcc2 	bl	8000108 <arm_bitreversal_32>
 8019784:	bd70      	pop	{r4, r5, r6, pc}
 8019786:	2380      	movs	r3, #128	@ 0x80
 8019788:	00db      	lsls	r3, r3, #3
 801978a:	4299      	cmp	r1, r3
 801978c:	d008      	beq.n	80197a0 <arm_cfft_q31+0x58>
 801978e:	d92f      	bls.n	80197f0 <arm_cfft_q31+0xa8>
 8019790:	2380      	movs	r3, #128	@ 0x80
 8019792:	011b      	lsls	r3, r3, #4
 8019794:	4299      	cmp	r1, r3
 8019796:	d0ea      	beq.n	801976e <arm_cfft_q31+0x26>
 8019798:	2380      	movs	r3, #128	@ 0x80
 801979a:	015b      	lsls	r3, r3, #5
 801979c:	4299      	cmp	r1, r3
 801979e:	d1ea      	bne.n	8019776 <arm_cfft_q31+0x2e>
 80197a0:	2301      	movs	r3, #1
 80197a2:	6862      	ldr	r2, [r4, #4]
 80197a4:	0028      	movs	r0, r5
 80197a6:	f000 f833 	bl	8019810 <arm_radix4_butterfly_q31>
 80197aa:	e7e4      	b.n	8019776 <arm_cfft_q31+0x2e>
 80197ac:	4299      	cmp	r1, r3
 80197ae:	d019      	beq.n	80197e4 <arm_cfft_q31+0x9c>
 80197b0:	d80b      	bhi.n	80197ca <arm_cfft_q31+0x82>
 80197b2:	2920      	cmp	r1, #32
 80197b4:	d004      	beq.n	80197c0 <arm_cfft_q31+0x78>
 80197b6:	d928      	bls.n	801980a <arm_cfft_q31+0xc2>
 80197b8:	2940      	cmp	r1, #64	@ 0x40
 80197ba:	d013      	beq.n	80197e4 <arm_cfft_q31+0x9c>
 80197bc:	2980      	cmp	r1, #128	@ 0x80
 80197be:	d1da      	bne.n	8019776 <arm_cfft_q31+0x2e>
 80197c0:	6862      	ldr	r2, [r4, #4]
 80197c2:	0028      	movs	r0, r5
 80197c4:	f7ff fefe 	bl	80195c4 <arm_cfft_radix4by2_inverse_q31>
 80197c8:	e7d5      	b.n	8019776 <arm_cfft_q31+0x2e>
 80197ca:	2380      	movs	r3, #128	@ 0x80
 80197cc:	00db      	lsls	r3, r3, #3
 80197ce:	4299      	cmp	r1, r3
 80197d0:	d008      	beq.n	80197e4 <arm_cfft_q31+0x9c>
 80197d2:	d915      	bls.n	8019800 <arm_cfft_q31+0xb8>
 80197d4:	2380      	movs	r3, #128	@ 0x80
 80197d6:	011b      	lsls	r3, r3, #4
 80197d8:	4299      	cmp	r1, r3
 80197da:	d0f1      	beq.n	80197c0 <arm_cfft_q31+0x78>
 80197dc:	2380      	movs	r3, #128	@ 0x80
 80197de:	015b      	lsls	r3, r3, #5
 80197e0:	4299      	cmp	r1, r3
 80197e2:	d1c8      	bne.n	8019776 <arm_cfft_q31+0x2e>
 80197e4:	2301      	movs	r3, #1
 80197e6:	6862      	ldr	r2, [r4, #4]
 80197e8:	0028      	movs	r0, r5
 80197ea:	f000 fab7 	bl	8019d5c <arm_radix4_butterfly_inverse_q31>
 80197ee:	e7c2      	b.n	8019776 <arm_cfft_q31+0x2e>
 80197f0:	2380      	movs	r3, #128	@ 0x80
 80197f2:	009b      	lsls	r3, r3, #2
 80197f4:	4299      	cmp	r1, r3
 80197f6:	d0ba      	beq.n	801976e <arm_cfft_q31+0x26>
 80197f8:	e7bd      	b.n	8019776 <arm_cfft_q31+0x2e>
 80197fa:	2910      	cmp	r1, #16
 80197fc:	d1bb      	bne.n	8019776 <arm_cfft_q31+0x2e>
 80197fe:	e7cf      	b.n	80197a0 <arm_cfft_q31+0x58>
 8019800:	2380      	movs	r3, #128	@ 0x80
 8019802:	009b      	lsls	r3, r3, #2
 8019804:	4299      	cmp	r1, r3
 8019806:	d0db      	beq.n	80197c0 <arm_cfft_q31+0x78>
 8019808:	e7b5      	b.n	8019776 <arm_cfft_q31+0x2e>
 801980a:	2910      	cmp	r1, #16
 801980c:	d1b3      	bne.n	8019776 <arm_cfft_q31+0x2e>
 801980e:	e7e9      	b.n	80197e4 <arm_cfft_q31+0x9c>

08019810 <arm_radix4_butterfly_q31>:
 8019810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019812:	464d      	mov	r5, r9
 8019814:	4644      	mov	r4, r8
 8019816:	465f      	mov	r7, fp
 8019818:	4656      	mov	r6, sl
 801981a:	469c      	mov	ip, r3
 801981c:	b4f0      	push	{r4, r5, r6, r7}
 801981e:	b0a7      	sub	sp, #156	@ 0x9c
 8019820:	9114      	str	r1, [sp, #80]	@ 0x50
 8019822:	0889      	lsrs	r1, r1, #2
 8019824:	9310      	str	r3, [sp, #64]	@ 0x40
 8019826:	00cb      	lsls	r3, r1, #3
 8019828:	0015      	movs	r5, r2
 801982a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801982c:	18c2      	adds	r2, r0, r3
 801982e:	000c      	movs	r4, r1
 8019830:	469a      	mov	sl, r3
 8019832:	9124      	str	r1, [sp, #144]	@ 0x90
 8019834:	18d1      	adds	r1, r2, r3
 8019836:	4663      	mov	r3, ip
 8019838:	468b      	mov	fp, r1
 801983a:	0119      	lsls	r1, r3, #4
 801983c:	910d      	str	r1, [sp, #52]	@ 0x34
 801983e:	00d9      	lsls	r1, r3, #3
 8019840:	005b      	lsls	r3, r3, #1
 8019842:	4463      	add	r3, ip
 8019844:	910e      	str	r1, [sp, #56]	@ 0x38
 8019846:	00d9      	lsls	r1, r3, #3
 8019848:	465b      	mov	r3, fp
 801984a:	44da      	add	sl, fp
 801984c:	4690      	mov	r8, r2
 801984e:	4683      	mov	fp, r0
 8019850:	4699      	mov	r9, r3
 8019852:	9022      	str	r0, [sp, #136]	@ 0x88
 8019854:	9025      	str	r0, [sp, #148]	@ 0x94
 8019856:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019858:	9502      	str	r5, [sp, #8]
 801985a:	9500      	str	r5, [sp, #0]
 801985c:	9501      	str	r5, [sp, #4]
 801985e:	9407      	str	r4, [sp, #28]
 8019860:	465b      	mov	r3, fp
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	4642      	mov	r2, r8
 8019866:	111c      	asrs	r4, r3, #4
 8019868:	464b      	mov	r3, r9
 801986a:	4658      	mov	r0, fp
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	6812      	ldr	r2, [r2, #0]
 8019870:	111b      	asrs	r3, r3, #4
 8019872:	18e7      	adds	r7, r4, r3
 8019874:	1ae3      	subs	r3, r4, r3
 8019876:	1114      	asrs	r4, r2, #4
 8019878:	4652      	mov	r2, sl
 801987a:	6840      	ldr	r0, [r0, #4]
 801987c:	6812      	ldr	r2, [r2, #0]
 801987e:	1105      	asrs	r5, r0, #4
 8019880:	4648      	mov	r0, r9
 8019882:	9303      	str	r3, [sp, #12]
 8019884:	1113      	asrs	r3, r2, #4
 8019886:	18e2      	adds	r2, r4, r3
 8019888:	465c      	mov	r4, fp
 801988a:	6840      	ldr	r0, [r0, #4]
 801988c:	1103      	asrs	r3, r0, #4
 801988e:	18ee      	adds	r6, r5, r3
 8019890:	1ae8      	subs	r0, r5, r3
 8019892:	18bb      	adds	r3, r7, r2
 8019894:	6023      	str	r3, [r4, #0]
 8019896:	4644      	mov	r4, r8
 8019898:	6864      	ldr	r4, [r4, #4]
 801989a:	9004      	str	r0, [sp, #16]
 801989c:	1125      	asrs	r5, r4, #4
 801989e:	4654      	mov	r4, sl
 80198a0:	6864      	ldr	r4, [r4, #4]
 80198a2:	1123      	asrs	r3, r4, #4
 80198a4:	465c      	mov	r4, fp
 80198a6:	18eb      	adds	r3, r5, r3
 80198a8:	18f1      	adds	r1, r6, r3
 80198aa:	6061      	str	r1, [r4, #4]
 80198ac:	4655      	mov	r5, sl
 80198ae:	4644      	mov	r4, r8
 80198b0:	686d      	ldr	r5, [r5, #4]
 80198b2:	6864      	ldr	r4, [r4, #4]
 80198b4:	1129      	asrs	r1, r5, #4
 80198b6:	1124      	asrs	r4, r4, #4
 80198b8:	1a64      	subs	r4, r4, r1
 80198ba:	4641      	mov	r1, r8
 80198bc:	6809      	ldr	r1, [r1, #0]
 80198be:	9405      	str	r4, [sp, #20]
 80198c0:	1108      	asrs	r0, r1, #4
 80198c2:	4651      	mov	r1, sl
 80198c4:	6809      	ldr	r1, [r1, #0]
 80198c6:	1abc      	subs	r4, r7, r2
 80198c8:	1109      	asrs	r1, r1, #4
 80198ca:	1a41      	subs	r1, r0, r1
 80198cc:	17e2      	asrs	r2, r4, #31
 80198ce:	9106      	str	r1, [sp, #24]
 80198d0:	0011      	movs	r1, r2
 80198d2:	9a01      	ldr	r2, [sp, #4]
 80198d4:	9108      	str	r1, [sp, #32]
 80198d6:	6817      	ldr	r7, [r2, #0]
 80198d8:	17fd      	asrs	r5, r7, #31
 80198da:	0028      	movs	r0, r5
 80198dc:	1af5      	subs	r5, r6, r3
 80198de:	17ee      	asrs	r6, r5, #31
 80198e0:	960a      	str	r6, [sp, #40]	@ 0x28
 80198e2:	6856      	ldr	r6, [r2, #4]
 80198e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80198e6:	17f3      	asrs	r3, r6, #31
 80198e8:	003a      	movs	r2, r7
 80198ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80198ec:	0003      	movs	r3, r0
 80198ee:	0020      	movs	r0, r4
 80198f0:	f7e6 fe66 	bl	80005c0 <__aeabi_lmul>
 80198f4:	0032      	movs	r2, r6
 80198f6:	17f3      	asrs	r3, r6, #31
 80198f8:	910c      	str	r1, [sp, #48]	@ 0x30
 80198fa:	0028      	movs	r0, r5
 80198fc:	17e9      	asrs	r1, r5, #31
 80198fe:	f7e6 fe5f 	bl	80005c0 <__aeabi_lmul>
 8019902:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019904:	002a      	movs	r2, r5
 8019906:	4684      	mov	ip, r0
 8019908:	4640      	mov	r0, r8
 801990a:	4461      	add	r1, ip
 801990c:	0049      	lsls	r1, r1, #1
 801990e:	6001      	str	r1, [r0, #0]
 8019910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019912:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019914:	0038      	movs	r0, r7
 8019916:	f7e6 fe53 	bl	80005c0 <__aeabi_lmul>
 801991a:	0032      	movs	r2, r6
 801991c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801991e:	000d      	movs	r5, r1
 8019920:	0020      	movs	r0, r4
 8019922:	9908      	ldr	r1, [sp, #32]
 8019924:	f7e6 fe4c 	bl	80005c0 <__aeabi_lmul>
 8019928:	4646      	mov	r6, r8
 801992a:	1a6d      	subs	r5, r5, r1
 801992c:	006d      	lsls	r5, r5, #1
 801992e:	6075      	str	r5, [r6, #4]
 8019930:	9903      	ldr	r1, [sp, #12]
 8019932:	9d05      	ldr	r5, [sp, #20]
 8019934:	000c      	movs	r4, r1
 8019936:	46ac      	mov	ip, r5
 8019938:	4464      	add	r4, ip
 801993a:	17e6      	asrs	r6, r4, #31
 801993c:	0031      	movs	r1, r6
 801993e:	9b00      	ldr	r3, [sp, #0]
 8019940:	9804      	ldr	r0, [sp, #16]
 8019942:	681e      	ldr	r6, [r3, #0]
 8019944:	17f7      	asrs	r7, r6, #31
 8019946:	9709      	str	r7, [sp, #36]	@ 0x24
 8019948:	9f06      	ldr	r7, [sp, #24]
 801994a:	0032      	movs	r2, r6
 801994c:	1bc7      	subs	r7, r0, r7
 801994e:	17fd      	asrs	r5, r7, #31
 8019950:	950a      	str	r5, [sp, #40]	@ 0x28
 8019952:	685d      	ldr	r5, [r3, #4]
 8019954:	17f3      	asrs	r3, r6, #31
 8019956:	17e8      	asrs	r0, r5, #31
 8019958:	900b      	str	r0, [sp, #44]	@ 0x2c
 801995a:	0020      	movs	r0, r4
 801995c:	9108      	str	r1, [sp, #32]
 801995e:	f7e6 fe2f 	bl	80005c0 <__aeabi_lmul>
 8019962:	002a      	movs	r2, r5
 8019964:	17eb      	asrs	r3, r5, #31
 8019966:	910c      	str	r1, [sp, #48]	@ 0x30
 8019968:	0038      	movs	r0, r7
 801996a:	17f9      	asrs	r1, r7, #31
 801996c:	f7e6 fe28 	bl	80005c0 <__aeabi_lmul>
 8019970:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019972:	003a      	movs	r2, r7
 8019974:	4684      	mov	ip, r0
 8019976:	4648      	mov	r0, r9
 8019978:	4461      	add	r1, ip
 801997a:	0049      	lsls	r1, r1, #1
 801997c:	6001      	str	r1, [r0, #0]
 801997e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019980:	0030      	movs	r0, r6
 8019982:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019984:	f7e6 fe1c 	bl	80005c0 <__aeabi_lmul>
 8019988:	002a      	movs	r2, r5
 801998a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801998c:	000e      	movs	r6, r1
 801998e:	0020      	movs	r0, r4
 8019990:	9908      	ldr	r1, [sp, #32]
 8019992:	f7e6 fe15 	bl	80005c0 <__aeabi_lmul>
 8019996:	464c      	mov	r4, r9
 8019998:	9d05      	ldr	r5, [sp, #20]
 801999a:	1a76      	subs	r6, r6, r1
 801999c:	9903      	ldr	r1, [sp, #12]
 801999e:	0076      	lsls	r6, r6, #1
 80199a0:	6066      	str	r6, [r4, #4]
 80199a2:	1b4c      	subs	r4, r1, r5
 80199a4:	9e06      	ldr	r6, [sp, #24]
 80199a6:	17e1      	asrs	r1, r4, #31
 80199a8:	9103      	str	r1, [sp, #12]
 80199aa:	9902      	ldr	r1, [sp, #8]
 80199ac:	46b4      	mov	ip, r6
 80199ae:	680f      	ldr	r7, [r1, #0]
 80199b0:	9804      	ldr	r0, [sp, #16]
 80199b2:	17fd      	asrs	r5, r7, #31
 80199b4:	002b      	movs	r3, r5
 80199b6:	684e      	ldr	r6, [r1, #4]
 80199b8:	4460      	add	r0, ip
 80199ba:	0005      	movs	r5, r0
 80199bc:	17c0      	asrs	r0, r0, #31
 80199be:	9005      	str	r0, [sp, #20]
 80199c0:	17f0      	asrs	r0, r6, #31
 80199c2:	9006      	str	r0, [sp, #24]
 80199c4:	003a      	movs	r2, r7
 80199c6:	0020      	movs	r0, r4
 80199c8:	17e1      	asrs	r1, r4, #31
 80199ca:	9304      	str	r3, [sp, #16]
 80199cc:	f7e6 fdf8 	bl	80005c0 <__aeabi_lmul>
 80199d0:	0032      	movs	r2, r6
 80199d2:	9108      	str	r1, [sp, #32]
 80199d4:	17f3      	asrs	r3, r6, #31
 80199d6:	0028      	movs	r0, r5
 80199d8:	17e9      	asrs	r1, r5, #31
 80199da:	f7e6 fdf1 	bl	80005c0 <__aeabi_lmul>
 80199de:	9808      	ldr	r0, [sp, #32]
 80199e0:	002a      	movs	r2, r5
 80199e2:	4684      	mov	ip, r0
 80199e4:	4650      	mov	r0, sl
 80199e6:	4461      	add	r1, ip
 80199e8:	0049      	lsls	r1, r1, #1
 80199ea:	6001      	str	r1, [r0, #0]
 80199ec:	9b05      	ldr	r3, [sp, #20]
 80199ee:	9904      	ldr	r1, [sp, #16]
 80199f0:	0038      	movs	r0, r7
 80199f2:	f7e6 fde5 	bl	80005c0 <__aeabi_lmul>
 80199f6:	0020      	movs	r0, r4
 80199f8:	2408      	movs	r4, #8
 80199fa:	000d      	movs	r5, r1
 80199fc:	0032      	movs	r2, r6
 80199fe:	9b06      	ldr	r3, [sp, #24]
 8019a00:	9903      	ldr	r1, [sp, #12]
 8019a02:	f7e6 fddd 	bl	80005c0 <__aeabi_lmul>
 8019a06:	46a4      	mov	ip, r4
 8019a08:	4650      	mov	r0, sl
 8019a0a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8019a0c:	44e3      	add	fp, ip
 8019a0e:	44e0      	add	r8, ip
 8019a10:	44e1      	add	r9, ip
 8019a12:	44e2      	add	sl, ip
 8019a14:	46a4      	mov	ip, r4
 8019a16:	1a6d      	subs	r5, r5, r1
 8019a18:	006d      	lsls	r5, r5, #1
 8019a1a:	9a01      	ldr	r2, [sp, #4]
 8019a1c:	6045      	str	r5, [r0, #4]
 8019a1e:	9807      	ldr	r0, [sp, #28]
 8019a20:	4462      	add	r2, ip
 8019a22:	3801      	subs	r0, #1
 8019a24:	9201      	str	r2, [sp, #4]
 8019a26:	9007      	str	r0, [sp, #28]
 8019a28:	9b00      	ldr	r3, [sp, #0]
 8019a2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019a2c:	9902      	ldr	r1, [sp, #8]
 8019a2e:	4694      	mov	ip, r2
 8019a30:	4463      	add	r3, ip
 8019a32:	9300      	str	r3, [sp, #0]
 8019a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a36:	469c      	mov	ip, r3
 8019a38:	4461      	add	r1, ip
 8019a3a:	9102      	str	r1, [sp, #8]
 8019a3c:	2800      	cmp	r0, #0
 8019a3e:	d000      	beq.n	8019a42 <arm_radix4_butterfly_q31+0x232>
 8019a40:	e70e      	b.n	8019860 <arm_radix4_butterfly_q31+0x50>
 8019a42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019a44:	009b      	lsls	r3, r3, #2
 8019a46:	931f      	str	r3, [sp, #124]	@ 0x7c
 8019a48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8019a4a:	9320      	str	r3, [sp, #128]	@ 0x80
 8019a4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019a4e:	2b04      	cmp	r3, #4
 8019a50:	d800      	bhi.n	8019a54 <arm_radix4_butterfly_q31+0x244>
 8019a52:	e180      	b.n	8019d56 <arm_radix4_butterfly_q31+0x546>
 8019a54:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019a56:	0893      	lsrs	r3, r2, #2
 8019a58:	1e59      	subs	r1, r3, #1
 8019a5a:	9321      	str	r3, [sp, #132]	@ 0x84
 8019a5c:	00db      	lsls	r3, r3, #3
 8019a5e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019a60:	00d3      	lsls	r3, r2, #3
 8019a62:	9300      	str	r3, [sp, #0]
 8019a64:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019a66:	911a      	str	r1, [sp, #104]	@ 0x68
 8019a68:	00da      	lsls	r2, r3, #3
 8019a6a:	921e      	str	r2, [sp, #120]	@ 0x78
 8019a6c:	011a      	lsls	r2, r3, #4
 8019a6e:	921d      	str	r2, [sp, #116]	@ 0x74
 8019a70:	001a      	movs	r2, r3
 8019a72:	4694      	mov	ip, r2
 8019a74:	005b      	lsls	r3, r3, #1
 8019a76:	4463      	add	r3, ip
 8019a78:	00db      	lsls	r3, r3, #3
 8019a7a:	931c      	str	r3, [sp, #112]	@ 0x70
 8019a7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019a7e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019a80:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019a82:	9318      	str	r3, [sp, #96]	@ 0x60
 8019a84:	9319      	str	r3, [sp, #100]	@ 0x64
 8019a86:	9316      	str	r3, [sp, #88]	@ 0x58
 8019a88:	2300      	movs	r3, #0
 8019a8a:	9315      	str	r3, [sp, #84]	@ 0x54
 8019a8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019a8e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8019a90:	681a      	ldr	r2, [r3, #0]
 8019a92:	685b      	ldr	r3, [r3, #4]
 8019a94:	9205      	str	r2, [sp, #20]
 8019a96:	9306      	str	r3, [sp, #24]
 8019a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a9a:	468c      	mov	ip, r1
 8019a9c:	681a      	ldr	r2, [r3, #0]
 8019a9e:	685b      	ldr	r3, [r3, #4]
 8019aa0:	9207      	str	r2, [sp, #28]
 8019aa2:	9308      	str	r3, [sp, #32]
 8019aa4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019aa6:	681a      	ldr	r2, [r3, #0]
 8019aa8:	685b      	ldr	r3, [r3, #4]
 8019aaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8019aac:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8019ab0:	0013      	movs	r3, r2
 8019ab2:	4463      	add	r3, ip
 8019ab4:	4698      	mov	r8, r3
 8019ab6:	0013      	movs	r3, r2
 8019ab8:	4442      	add	r2, r8
 8019aba:	4691      	mov	r9, r2
 8019abc:	001a      	movs	r2, r3
 8019abe:	444a      	add	r2, r9
 8019ac0:	4692      	mov	sl, r2
 8019ac2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019ac4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019ac6:	4293      	cmp	r3, r2
 8019ac8:	d800      	bhi.n	8019acc <arm_radix4_butterfly_q31+0x2bc>
 8019aca:	e0dd      	b.n	8019c88 <arm_radix4_butterfly_q31+0x478>
 8019acc:	4694      	mov	ip, r2
 8019ace:	468b      	mov	fp, r1
 8019ad0:	4644      	mov	r4, r8
 8019ad2:	4655      	mov	r5, sl
 8019ad4:	9b07      	ldr	r3, [sp, #28]
 8019ad6:	17db      	asrs	r3, r3, #31
 8019ad8:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ada:	9b08      	ldr	r3, [sp, #32]
 8019adc:	17db      	asrs	r3, r3, #31
 8019ade:	930d      	str	r3, [sp, #52]	@ 0x34
 8019ae0:	9b05      	ldr	r3, [sp, #20]
 8019ae2:	17db      	asrs	r3, r3, #31
 8019ae4:	930e      	str	r3, [sp, #56]	@ 0x38
 8019ae6:	9b06      	ldr	r3, [sp, #24]
 8019ae8:	17db      	asrs	r3, r3, #31
 8019aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019aee:	17db      	asrs	r3, r3, #31
 8019af0:	9310      	str	r3, [sp, #64]	@ 0x40
 8019af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019af4:	17db      	asrs	r3, r3, #31
 8019af6:	9311      	str	r3, [sp, #68]	@ 0x44
 8019af8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019afa:	4463      	add	r3, ip
 8019afc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019afe:	465b      	mov	r3, fp
 8019b00:	4659      	mov	r1, fp
 8019b02:	681a      	ldr	r2, [r3, #0]
 8019b04:	464b      	mov	r3, r9
 8019b06:	684f      	ldr	r7, [r1, #4]
 8019b08:	4649      	mov	r1, r9
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	18d6      	adds	r6, r2, r3
 8019b0e:	1ad3      	subs	r3, r2, r3
 8019b10:	9301      	str	r3, [sp, #4]
 8019b12:	684b      	ldr	r3, [r1, #4]
 8019b14:	18f8      	adds	r0, r7, r3
 8019b16:	1af9      	subs	r1, r7, r3
 8019b18:	6827      	ldr	r7, [r4, #0]
 8019b1a:	9102      	str	r1, [sp, #8]
 8019b1c:	003a      	movs	r2, r7
 8019b1e:	682f      	ldr	r7, [r5, #0]
 8019b20:	46bc      	mov	ip, r7
 8019b22:	465f      	mov	r7, fp
 8019b24:	4462      	add	r2, ip
 8019b26:	18b3      	adds	r3, r6, r2
 8019b28:	109b      	asrs	r3, r3, #2
 8019b2a:	603b      	str	r3, [r7, #0]
 8019b2c:	6867      	ldr	r7, [r4, #4]
 8019b2e:	1ab6      	subs	r6, r6, r2
 8019b30:	46b8      	mov	r8, r7
 8019b32:	686f      	ldr	r7, [r5, #4]
 8019b34:	17f2      	asrs	r2, r6, #31
 8019b36:	46bc      	mov	ip, r7
 8019b38:	44e0      	add	r8, ip
 8019b3a:	4643      	mov	r3, r8
 8019b3c:	465f      	mov	r7, fp
 8019b3e:	18c1      	adds	r1, r0, r3
 8019b40:	1089      	asrs	r1, r1, #2
 8019b42:	6079      	str	r1, [r7, #4]
 8019b44:	9900      	ldr	r1, [sp, #0]
 8019b46:	4690      	mov	r8, r2
 8019b48:	468c      	mov	ip, r1
 8019b4a:	6867      	ldr	r7, [r4, #4]
 8019b4c:	6869      	ldr	r1, [r5, #4]
 8019b4e:	44e3      	add	fp, ip
 8019b50:	1a7f      	subs	r7, r7, r1
 8019b52:	9703      	str	r7, [sp, #12]
 8019b54:	6829      	ldr	r1, [r5, #0]
 8019b56:	6827      	ldr	r7, [r4, #0]
 8019b58:	1a7f      	subs	r7, r7, r1
 8019b5a:	9704      	str	r7, [sp, #16]
 8019b5c:	1ac7      	subs	r7, r0, r3
 8019b5e:	17fa      	asrs	r2, r7, #31
 8019b60:	4692      	mov	sl, r2
 8019b62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b64:	9a07      	ldr	r2, [sp, #28]
 8019b66:	0030      	movs	r0, r6
 8019b68:	4641      	mov	r1, r8
 8019b6a:	f7e6 fd29 	bl	80005c0 <__aeabi_lmul>
 8019b6e:	9a08      	ldr	r2, [sp, #32]
 8019b70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b72:	9112      	str	r1, [sp, #72]	@ 0x48
 8019b74:	0038      	movs	r0, r7
 8019b76:	4651      	mov	r1, sl
 8019b78:	f7e6 fd22 	bl	80005c0 <__aeabi_lmul>
 8019b7c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019b7e:	9a07      	ldr	r2, [sp, #28]
 8019b80:	4684      	mov	ip, r0
 8019b82:	4461      	add	r1, ip
 8019b84:	1049      	asrs	r1, r1, #1
 8019b86:	6021      	str	r1, [r4, #0]
 8019b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b8a:	0038      	movs	r0, r7
 8019b8c:	4651      	mov	r1, sl
 8019b8e:	f7e6 fd17 	bl	80005c0 <__aeabi_lmul>
 8019b92:	9a08      	ldr	r2, [sp, #32]
 8019b94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b96:	000f      	movs	r7, r1
 8019b98:	0030      	movs	r0, r6
 8019b9a:	4641      	mov	r1, r8
 8019b9c:	f7e6 fd10 	bl	80005c0 <__aeabi_lmul>
 8019ba0:	9b00      	ldr	r3, [sp, #0]
 8019ba2:	9a01      	ldr	r2, [sp, #4]
 8019ba4:	469c      	mov	ip, r3
 8019ba6:	9803      	ldr	r0, [sp, #12]
 8019ba8:	1a7f      	subs	r7, r7, r1
 8019baa:	107f      	asrs	r7, r7, #1
 8019bac:	6067      	str	r7, [r4, #4]
 8019bae:	0016      	movs	r6, r2
 8019bb0:	4464      	add	r4, ip
 8019bb2:	4684      	mov	ip, r0
 8019bb4:	4466      	add	r6, ip
 8019bb6:	17f2      	asrs	r2, r6, #31
 8019bb8:	4690      	mov	r8, r2
 8019bba:	9902      	ldr	r1, [sp, #8]
 8019bbc:	9f04      	ldr	r7, [sp, #16]
 8019bbe:	0030      	movs	r0, r6
 8019bc0:	1bcf      	subs	r7, r1, r7
 8019bc2:	17fa      	asrs	r2, r7, #31
 8019bc4:	4692      	mov	sl, r2
 8019bc6:	4641      	mov	r1, r8
 8019bc8:	9a05      	ldr	r2, [sp, #20]
 8019bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019bcc:	f7e6 fcf8 	bl	80005c0 <__aeabi_lmul>
 8019bd0:	9a06      	ldr	r2, [sp, #24]
 8019bd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019bd4:	9112      	str	r1, [sp, #72]	@ 0x48
 8019bd6:	0038      	movs	r0, r7
 8019bd8:	4651      	mov	r1, sl
 8019bda:	f7e6 fcf1 	bl	80005c0 <__aeabi_lmul>
 8019bde:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019be0:	9a05      	ldr	r2, [sp, #20]
 8019be2:	4684      	mov	ip, r0
 8019be4:	4648      	mov	r0, r9
 8019be6:	4461      	add	r1, ip
 8019be8:	1049      	asrs	r1, r1, #1
 8019bea:	6001      	str	r1, [r0, #0]
 8019bec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019bee:	0038      	movs	r0, r7
 8019bf0:	4651      	mov	r1, sl
 8019bf2:	f7e6 fce5 	bl	80005c0 <__aeabi_lmul>
 8019bf6:	9a06      	ldr	r2, [sp, #24]
 8019bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019bfa:	000f      	movs	r7, r1
 8019bfc:	0030      	movs	r0, r6
 8019bfe:	4641      	mov	r1, r8
 8019c00:	f7e6 fcde 	bl	80005c0 <__aeabi_lmul>
 8019c04:	464e      	mov	r6, r9
 8019c06:	9a00      	ldr	r2, [sp, #0]
 8019c08:	9b01      	ldr	r3, [sp, #4]
 8019c0a:	4694      	mov	ip, r2
 8019c0c:	9803      	ldr	r0, [sp, #12]
 8019c0e:	1a7f      	subs	r7, r7, r1
 8019c10:	107f      	asrs	r7, r7, #1
 8019c12:	6077      	str	r7, [r6, #4]
 8019c14:	1a1e      	subs	r6, r3, r0
 8019c16:	9b04      	ldr	r3, [sp, #16]
 8019c18:	44e1      	add	r9, ip
 8019c1a:	469c      	mov	ip, r3
 8019c1c:	17f0      	asrs	r0, r6, #31
 8019c1e:	4680      	mov	r8, r0
 8019c20:	9902      	ldr	r1, [sp, #8]
 8019c22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c24:	4461      	add	r1, ip
 8019c26:	17cb      	asrs	r3, r1, #31
 8019c28:	000f      	movs	r7, r1
 8019c2a:	469a      	mov	sl, r3
 8019c2c:	0030      	movs	r0, r6
 8019c2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019c30:	4641      	mov	r1, r8
 8019c32:	f7e6 fcc5 	bl	80005c0 <__aeabi_lmul>
 8019c36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019c3a:	9101      	str	r1, [sp, #4]
 8019c3c:	0038      	movs	r0, r7
 8019c3e:	4651      	mov	r1, sl
 8019c40:	f7e6 fcbe 	bl	80005c0 <__aeabi_lmul>
 8019c44:	9801      	ldr	r0, [sp, #4]
 8019c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c48:	4684      	mov	ip, r0
 8019c4a:	4461      	add	r1, ip
 8019c4c:	1049      	asrs	r1, r1, #1
 8019c4e:	6029      	str	r1, [r5, #0]
 8019c50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019c52:	0038      	movs	r0, r7
 8019c54:	4651      	mov	r1, sl
 8019c56:	f7e6 fcb3 	bl	80005c0 <__aeabi_lmul>
 8019c5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019c5c:	000f      	movs	r7, r1
 8019c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c60:	0030      	movs	r0, r6
 8019c62:	4641      	mov	r1, r8
 8019c64:	f7e6 fcac 	bl	80005c0 <__aeabi_lmul>
 8019c68:	1a7f      	subs	r7, r7, r1
 8019c6a:	107f      	asrs	r7, r7, #1
 8019c6c:	606f      	str	r7, [r5, #4]
 8019c6e:	9a00      	ldr	r2, [sp, #0]
 8019c70:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019c72:	4694      	mov	ip, r2
 8019c74:	4465      	add	r5, ip
 8019c76:	468c      	mov	ip, r1
 8019c78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019c7a:	0013      	movs	r3, r2
 8019c7c:	4462      	add	r2, ip
 8019c7e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019c80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019c82:	429a      	cmp	r2, r3
 8019c84:	d900      	bls.n	8019c88 <arm_radix4_butterfly_q31+0x478>
 8019c86:	e73a      	b.n	8019afe <arm_radix4_butterfly_q31+0x2ee>
 8019c88:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019c8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019c8c:	468c      	mov	ip, r1
 8019c8e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8019c90:	4462      	add	r2, ip
 8019c92:	468c      	mov	ip, r1
 8019c94:	9216      	str	r2, [sp, #88]	@ 0x58
 8019c96:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8019c98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019c9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019c9c:	4462      	add	r2, ip
 8019c9e:	468c      	mov	ip, r1
 8019ca0:	9219      	str	r2, [sp, #100]	@ 0x64
 8019ca2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019ca4:	3301      	adds	r3, #1
 8019ca6:	4462      	add	r2, ip
 8019ca8:	9218      	str	r2, [sp, #96]	@ 0x60
 8019caa:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019cac:	9315      	str	r3, [sp, #84]	@ 0x54
 8019cae:	3208      	adds	r2, #8
 8019cb0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019cb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019cb4:	4293      	cmp	r3, r2
 8019cb6:	d800      	bhi.n	8019cba <arm_radix4_butterfly_q31+0x4aa>
 8019cb8:	e6e8      	b.n	8019a8c <arm_radix4_butterfly_q31+0x27c>
 8019cba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019cbc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	931f      	str	r3, [sp, #124]	@ 0x7c
 8019cc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8019cc4:	9213      	str	r2, [sp, #76]	@ 0x4c
 8019cc6:	089b      	lsrs	r3, r3, #2
 8019cc8:	9320      	str	r3, [sp, #128]	@ 0x80
 8019cca:	2b04      	cmp	r3, #4
 8019ccc:	d900      	bls.n	8019cd0 <arm_radix4_butterfly_q31+0x4c0>
 8019cce:	e6c1      	b.n	8019a54 <arm_radix4_butterfly_q31+0x244>
 8019cd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8019cd2:	469a      	mov	sl, r3
 8019cd4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8019cd6:	691c      	ldr	r4, [r3, #16]
 8019cd8:	685a      	ldr	r2, [r3, #4]
 8019cda:	46a1      	mov	r9, r4
 8019cdc:	4690      	mov	r8, r2
 8019cde:	6819      	ldr	r1, [r3, #0]
 8019ce0:	689a      	ldr	r2, [r3, #8]
 8019ce2:	699f      	ldr	r7, [r3, #24]
 8019ce4:	188d      	adds	r5, r1, r2
 8019ce6:	444d      	add	r5, r9
 8019ce8:	19ed      	adds	r5, r5, r7
 8019cea:	69de      	ldr	r6, [r3, #28]
 8019cec:	601d      	str	r5, [r3, #0]
 8019cee:	4645      	mov	r5, r8
 8019cf0:	46b4      	mov	ip, r6
 8019cf2:	68d8      	ldr	r0, [r3, #12]
 8019cf4:	695c      	ldr	r4, [r3, #20]
 8019cf6:	182d      	adds	r5, r5, r0
 8019cf8:	192d      	adds	r5, r5, r4
 8019cfa:	4465      	add	r5, ip
 8019cfc:	605d      	str	r5, [r3, #4]
 8019cfe:	1a8d      	subs	r5, r1, r2
 8019d00:	444d      	add	r5, r9
 8019d02:	1bed      	subs	r5, r5, r7
 8019d04:	609d      	str	r5, [r3, #8]
 8019d06:	4645      	mov	r5, r8
 8019d08:	1a2d      	subs	r5, r5, r0
 8019d0a:	192d      	adds	r5, r5, r4
 8019d0c:	1bad      	subs	r5, r5, r6
 8019d0e:	464e      	mov	r6, r9
 8019d10:	60dd      	str	r5, [r3, #12]
 8019d12:	180d      	adds	r5, r1, r0
 8019d14:	1bad      	subs	r5, r5, r6
 8019d16:	4666      	mov	r6, ip
 8019d18:	1bad      	subs	r5, r5, r6
 8019d1a:	611d      	str	r5, [r3, #16]
 8019d1c:	4645      	mov	r5, r8
 8019d1e:	1aad      	subs	r5, r5, r2
 8019d20:	4442      	add	r2, r8
 8019d22:	1b12      	subs	r2, r2, r4
 8019d24:	1bd2      	subs	r2, r2, r7
 8019d26:	1a08      	subs	r0, r1, r0
 8019d28:	61da      	str	r2, [r3, #28]
 8019d2a:	4649      	mov	r1, r9
 8019d2c:	2201      	movs	r2, #1
 8019d2e:	1a41      	subs	r1, r0, r1
 8019d30:	4252      	negs	r2, r2
 8019d32:	4461      	add	r1, ip
 8019d34:	4694      	mov	ip, r2
 8019d36:	44e2      	add	sl, ip
 8019d38:	4652      	mov	r2, sl
 8019d3a:	1b2d      	subs	r5, r5, r4
 8019d3c:	19ed      	adds	r5, r5, r7
 8019d3e:	615d      	str	r5, [r3, #20]
 8019d40:	6199      	str	r1, [r3, #24]
 8019d42:	3320      	adds	r3, #32
 8019d44:	2a00      	cmp	r2, #0
 8019d46:	d1c6      	bne.n	8019cd6 <arm_radix4_butterfly_q31+0x4c6>
 8019d48:	b027      	add	sp, #156	@ 0x9c
 8019d4a:	bc3c      	pop	{r2, r3, r4, r5}
 8019d4c:	4690      	mov	r8, r2
 8019d4e:	4699      	mov	r9, r3
 8019d50:	46a2      	mov	sl, r4
 8019d52:	46ab      	mov	fp, r5
 8019d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d56:	469a      	mov	sl, r3
 8019d58:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8019d5a:	e7bc      	b.n	8019cd6 <arm_radix4_butterfly_q31+0x4c6>

08019d5c <arm_radix4_butterfly_inverse_q31>:
 8019d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d5e:	464d      	mov	r5, r9
 8019d60:	4644      	mov	r4, r8
 8019d62:	465f      	mov	r7, fp
 8019d64:	4656      	mov	r6, sl
 8019d66:	b4f0      	push	{r4, r5, r6, r7}
 8019d68:	b0a7      	sub	sp, #156	@ 0x9c
 8019d6a:	469c      	mov	ip, r3
 8019d6c:	9114      	str	r1, [sp, #80]	@ 0x50
 8019d6e:	0889      	lsrs	r1, r1, #2
 8019d70:	9310      	str	r3, [sp, #64]	@ 0x40
 8019d72:	00cb      	lsls	r3, r1, #3
 8019d74:	0015      	movs	r5, r2
 8019d76:	9223      	str	r2, [sp, #140]	@ 0x8c
 8019d78:	18c2      	adds	r2, r0, r3
 8019d7a:	000c      	movs	r4, r1
 8019d7c:	9124      	str	r1, [sp, #144]	@ 0x90
 8019d7e:	18d1      	adds	r1, r2, r3
 8019d80:	468b      	mov	fp, r1
 8019d82:	469a      	mov	sl, r3
 8019d84:	4663      	mov	r3, ip
 8019d86:	44da      	add	sl, fp
 8019d88:	46d0      	mov	r8, sl
 8019d8a:	4681      	mov	r9, r0
 8019d8c:	4692      	mov	sl, r2
 8019d8e:	0119      	lsls	r1, r3, #4
 8019d90:	910d      	str	r1, [sp, #52]	@ 0x34
 8019d92:	00d9      	lsls	r1, r3, #3
 8019d94:	005b      	lsls	r3, r3, #1
 8019d96:	4463      	add	r3, ip
 8019d98:	910e      	str	r1, [sp, #56]	@ 0x38
 8019d9a:	00d9      	lsls	r1, r3, #3
 8019d9c:	9022      	str	r0, [sp, #136]	@ 0x88
 8019d9e:	9025      	str	r0, [sp, #148]	@ 0x94
 8019da0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019da2:	9502      	str	r5, [sp, #8]
 8019da4:	9500      	str	r5, [sp, #0]
 8019da6:	9501      	str	r5, [sp, #4]
 8019da8:	9409      	str	r4, [sp, #36]	@ 0x24
 8019daa:	464b      	mov	r3, r9
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	4652      	mov	r2, sl
 8019db0:	111c      	asrs	r4, r3, #4
 8019db2:	465b      	mov	r3, fp
 8019db4:	4648      	mov	r0, r9
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	6812      	ldr	r2, [r2, #0]
 8019dba:	6840      	ldr	r0, [r0, #4]
 8019dbc:	111b      	asrs	r3, r3, #4
 8019dbe:	18e7      	adds	r7, r4, r3
 8019dc0:	1ae3      	subs	r3, r4, r3
 8019dc2:	1114      	asrs	r4, r2, #4
 8019dc4:	4642      	mov	r2, r8
 8019dc6:	1105      	asrs	r5, r0, #4
 8019dc8:	4658      	mov	r0, fp
 8019dca:	6812      	ldr	r2, [r2, #0]
 8019dcc:	6840      	ldr	r0, [r0, #4]
 8019dce:	9303      	str	r3, [sp, #12]
 8019dd0:	1113      	asrs	r3, r2, #4
 8019dd2:	18e2      	adds	r2, r4, r3
 8019dd4:	1103      	asrs	r3, r0, #4
 8019dd6:	18ee      	adds	r6, r5, r3
 8019dd8:	1ae8      	subs	r0, r5, r3
 8019dda:	464d      	mov	r5, r9
 8019ddc:	18bb      	adds	r3, r7, r2
 8019dde:	602b      	str	r3, [r5, #0]
 8019de0:	4641      	mov	r1, r8
 8019de2:	4655      	mov	r5, sl
 8019de4:	6849      	ldr	r1, [r1, #4]
 8019de6:	686d      	ldr	r5, [r5, #4]
 8019de8:	110b      	asrs	r3, r1, #4
 8019dea:	112d      	asrs	r5, r5, #4
 8019dec:	18eb      	adds	r3, r5, r3
 8019dee:	464d      	mov	r5, r9
 8019df0:	18f1      	adds	r1, r6, r3
 8019df2:	6069      	str	r1, [r5, #4]
 8019df4:	4655      	mov	r5, sl
 8019df6:	686d      	ldr	r5, [r5, #4]
 8019df8:	9004      	str	r0, [sp, #16]
 8019dfa:	112c      	asrs	r4, r5, #4
 8019dfc:	4645      	mov	r5, r8
 8019dfe:	686d      	ldr	r5, [r5, #4]
 8019e00:	1129      	asrs	r1, r5, #4
 8019e02:	1a65      	subs	r5, r4, r1
 8019e04:	4651      	mov	r1, sl
 8019e06:	6809      	ldr	r1, [r1, #0]
 8019e08:	1abc      	subs	r4, r7, r2
 8019e0a:	1108      	asrs	r0, r1, #4
 8019e0c:	4641      	mov	r1, r8
 8019e0e:	17e2      	asrs	r2, r4, #31
 8019e10:	6809      	ldr	r1, [r1, #0]
 8019e12:	9207      	str	r2, [sp, #28]
 8019e14:	9a01      	ldr	r2, [sp, #4]
 8019e16:	1109      	asrs	r1, r1, #4
 8019e18:	6817      	ldr	r7, [r2, #0]
 8019e1a:	1a41      	subs	r1, r0, r1
 8019e1c:	9106      	str	r1, [sp, #24]
 8019e1e:	0039      	movs	r1, r7
 8019e20:	17ff      	asrs	r7, r7, #31
 8019e22:	0038      	movs	r0, r7
 8019e24:	9505      	str	r5, [sp, #20]
 8019e26:	1af5      	subs	r5, r6, r3
 8019e28:	17ef      	asrs	r7, r5, #31
 8019e2a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8019e2c:	6857      	ldr	r7, [r2, #4]
 8019e2e:	0003      	movs	r3, r0
 8019e30:	17fe      	asrs	r6, r7, #31
 8019e32:	000a      	movs	r2, r1
 8019e34:	9108      	str	r1, [sp, #32]
 8019e36:	900a      	str	r0, [sp, #40]	@ 0x28
 8019e38:	17e1      	asrs	r1, r4, #31
 8019e3a:	0020      	movs	r0, r4
 8019e3c:	960c      	str	r6, [sp, #48]	@ 0x30
 8019e3e:	f7e6 fbbf 	bl	80005c0 <__aeabi_lmul>
 8019e42:	003a      	movs	r2, r7
 8019e44:	17fb      	asrs	r3, r7, #31
 8019e46:	000e      	movs	r6, r1
 8019e48:	0028      	movs	r0, r5
 8019e4a:	17e9      	asrs	r1, r5, #31
 8019e4c:	f7e6 fbb8 	bl	80005c0 <__aeabi_lmul>
 8019e50:	4653      	mov	r3, sl
 8019e52:	1a76      	subs	r6, r6, r1
 8019e54:	0076      	lsls	r6, r6, #1
 8019e56:	601e      	str	r6, [r3, #0]
 8019e58:	002a      	movs	r2, r5
 8019e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019e5c:	9808      	ldr	r0, [sp, #32]
 8019e5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e60:	f7e6 fbae 	bl	80005c0 <__aeabi_lmul>
 8019e64:	003a      	movs	r2, r7
 8019e66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e68:	000d      	movs	r5, r1
 8019e6a:	0020      	movs	r0, r4
 8019e6c:	9907      	ldr	r1, [sp, #28]
 8019e6e:	f7e6 fba7 	bl	80005c0 <__aeabi_lmul>
 8019e72:	4657      	mov	r7, sl
 8019e74:	186d      	adds	r5, r5, r1
 8019e76:	006d      	lsls	r5, r5, #1
 8019e78:	607d      	str	r5, [r7, #4]
 8019e7a:	9b03      	ldr	r3, [sp, #12]
 8019e7c:	9e06      	ldr	r6, [sp, #24]
 8019e7e:	9d05      	ldr	r5, [sp, #20]
 8019e80:	46b4      	mov	ip, r6
 8019e82:	1b5d      	subs	r5, r3, r5
 8019e84:	9b00      	ldr	r3, [sp, #0]
 8019e86:	17ef      	asrs	r7, r5, #31
 8019e88:	0039      	movs	r1, r7
 8019e8a:	681f      	ldr	r7, [r3, #0]
 8019e8c:	17fc      	asrs	r4, r7, #31
 8019e8e:	0020      	movs	r0, r4
 8019e90:	9c04      	ldr	r4, [sp, #16]
 8019e92:	4464      	add	r4, ip
 8019e94:	17e6      	asrs	r6, r4, #31
 8019e96:	9407      	str	r4, [sp, #28]
 8019e98:	9608      	str	r6, [sp, #32]
 8019e9a:	685e      	ldr	r6, [r3, #4]
 8019e9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019e9e:	17f2      	asrs	r2, r6, #31
 8019ea0:	0003      	movs	r3, r0
 8019ea2:	920c      	str	r2, [sp, #48]	@ 0x30
 8019ea4:	0028      	movs	r0, r5
 8019ea6:	003a      	movs	r2, r7
 8019ea8:	910a      	str	r1, [sp, #40]	@ 0x28
 8019eaa:	f7e6 fb89 	bl	80005c0 <__aeabi_lmul>
 8019eae:	0032      	movs	r2, r6
 8019eb0:	17f3      	asrs	r3, r6, #31
 8019eb2:	9807      	ldr	r0, [sp, #28]
 8019eb4:	000c      	movs	r4, r1
 8019eb6:	9908      	ldr	r1, [sp, #32]
 8019eb8:	f7e6 fb82 	bl	80005c0 <__aeabi_lmul>
 8019ebc:	4658      	mov	r0, fp
 8019ebe:	1a64      	subs	r4, r4, r1
 8019ec0:	0064      	lsls	r4, r4, #1
 8019ec2:	9a07      	ldr	r2, [sp, #28]
 8019ec4:	6004      	str	r4, [r0, #0]
 8019ec6:	9b08      	ldr	r3, [sp, #32]
 8019ec8:	0038      	movs	r0, r7
 8019eca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019ecc:	f7e6 fb78 	bl	80005c0 <__aeabi_lmul>
 8019ed0:	0032      	movs	r2, r6
 8019ed2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ed4:	000c      	movs	r4, r1
 8019ed6:	0028      	movs	r0, r5
 8019ed8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019eda:	f7e6 fb71 	bl	80005c0 <__aeabi_lmul>
 8019ede:	9d05      	ldr	r5, [sp, #20]
 8019ee0:	465f      	mov	r7, fp
 8019ee2:	46ac      	mov	ip, r5
 8019ee4:	1864      	adds	r4, r4, r1
 8019ee6:	9903      	ldr	r1, [sp, #12]
 8019ee8:	0064      	lsls	r4, r4, #1
 8019eea:	4461      	add	r1, ip
 8019eec:	607c      	str	r4, [r7, #4]
 8019eee:	000c      	movs	r4, r1
 8019ef0:	17c9      	asrs	r1, r1, #31
 8019ef2:	9105      	str	r1, [sp, #20]
 8019ef4:	9902      	ldr	r1, [sp, #8]
 8019ef6:	9804      	ldr	r0, [sp, #16]
 8019ef8:	680d      	ldr	r5, [r1, #0]
 8019efa:	9e06      	ldr	r6, [sp, #24]
 8019efc:	002b      	movs	r3, r5
 8019efe:	17ed      	asrs	r5, r5, #31
 8019f00:	684f      	ldr	r7, [r1, #4]
 8019f02:	9503      	str	r5, [sp, #12]
 8019f04:	1b85      	subs	r5, r0, r6
 8019f06:	17e8      	asrs	r0, r5, #31
 8019f08:	001a      	movs	r2, r3
 8019f0a:	9006      	str	r0, [sp, #24]
 8019f0c:	17fe      	asrs	r6, r7, #31
 8019f0e:	9304      	str	r3, [sp, #16]
 8019f10:	0020      	movs	r0, r4
 8019f12:	9b03      	ldr	r3, [sp, #12]
 8019f14:	17e1      	asrs	r1, r4, #31
 8019f16:	9607      	str	r6, [sp, #28]
 8019f18:	f7e6 fb52 	bl	80005c0 <__aeabi_lmul>
 8019f1c:	003a      	movs	r2, r7
 8019f1e:	000e      	movs	r6, r1
 8019f20:	17fb      	asrs	r3, r7, #31
 8019f22:	0028      	movs	r0, r5
 8019f24:	17e9      	asrs	r1, r5, #31
 8019f26:	f7e6 fb4b 	bl	80005c0 <__aeabi_lmul>
 8019f2a:	4640      	mov	r0, r8
 8019f2c:	1a76      	subs	r6, r6, r1
 8019f2e:	0076      	lsls	r6, r6, #1
 8019f30:	002a      	movs	r2, r5
 8019f32:	9b06      	ldr	r3, [sp, #24]
 8019f34:	6006      	str	r6, [r0, #0]
 8019f36:	9903      	ldr	r1, [sp, #12]
 8019f38:	9804      	ldr	r0, [sp, #16]
 8019f3a:	f7e6 fb41 	bl	80005c0 <__aeabi_lmul>
 8019f3e:	0020      	movs	r0, r4
 8019f40:	2408      	movs	r4, #8
 8019f42:	9b07      	ldr	r3, [sp, #28]
 8019f44:	000d      	movs	r5, r1
 8019f46:	003a      	movs	r2, r7
 8019f48:	9905      	ldr	r1, [sp, #20]
 8019f4a:	f7e6 fb39 	bl	80005c0 <__aeabi_lmul>
 8019f4e:	4640      	mov	r0, r8
 8019f50:	46a4      	mov	ip, r4
 8019f52:	186d      	adds	r5, r5, r1
 8019f54:	006d      	lsls	r5, r5, #1
 8019f56:	6045      	str	r5, [r0, #4]
 8019f58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f5a:	44e1      	add	r9, ip
 8019f5c:	3801      	subs	r0, #1
 8019f5e:	9009      	str	r0, [sp, #36]	@ 0x24
 8019f60:	9a01      	ldr	r2, [sp, #4]
 8019f62:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8019f64:	44e2      	add	sl, ip
 8019f66:	44e3      	add	fp, ip
 8019f68:	44e0      	add	r8, ip
 8019f6a:	46a4      	mov	ip, r4
 8019f6c:	4462      	add	r2, ip
 8019f6e:	9201      	str	r2, [sp, #4]
 8019f70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019f72:	9b00      	ldr	r3, [sp, #0]
 8019f74:	4694      	mov	ip, r2
 8019f76:	4463      	add	r3, ip
 8019f78:	9300      	str	r3, [sp, #0]
 8019f7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f7c:	9902      	ldr	r1, [sp, #8]
 8019f7e:	469c      	mov	ip, r3
 8019f80:	4461      	add	r1, ip
 8019f82:	9102      	str	r1, [sp, #8]
 8019f84:	2800      	cmp	r0, #0
 8019f86:	d000      	beq.n	8019f8a <arm_radix4_butterfly_inverse_q31+0x22e>
 8019f88:	e70f      	b.n	8019daa <arm_radix4_butterfly_inverse_q31+0x4e>
 8019f8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019f8c:	009b      	lsls	r3, r3, #2
 8019f8e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8019f90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8019f92:	9320      	str	r3, [sp, #128]	@ 0x80
 8019f94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019f96:	2b04      	cmp	r3, #4
 8019f98:	d800      	bhi.n	8019f9c <arm_radix4_butterfly_inverse_q31+0x240>
 8019f9a:	e17c      	b.n	801a296 <arm_radix4_butterfly_inverse_q31+0x53a>
 8019f9c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019f9e:	0893      	lsrs	r3, r2, #2
 8019fa0:	1e59      	subs	r1, r3, #1
 8019fa2:	9321      	str	r3, [sp, #132]	@ 0x84
 8019fa4:	00db      	lsls	r3, r3, #3
 8019fa6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019fa8:	00d3      	lsls	r3, r2, #3
 8019faa:	9300      	str	r3, [sp, #0]
 8019fac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019fae:	911a      	str	r1, [sp, #104]	@ 0x68
 8019fb0:	00da      	lsls	r2, r3, #3
 8019fb2:	921e      	str	r2, [sp, #120]	@ 0x78
 8019fb4:	011a      	lsls	r2, r3, #4
 8019fb6:	921d      	str	r2, [sp, #116]	@ 0x74
 8019fb8:	001a      	movs	r2, r3
 8019fba:	4694      	mov	ip, r2
 8019fbc:	005b      	lsls	r3, r3, #1
 8019fbe:	4463      	add	r3, ip
 8019fc0:	00db      	lsls	r3, r3, #3
 8019fc2:	931c      	str	r3, [sp, #112]	@ 0x70
 8019fc4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019fc6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019fc8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019fca:	9318      	str	r3, [sp, #96]	@ 0x60
 8019fcc:	9319      	str	r3, [sp, #100]	@ 0x64
 8019fce:	9316      	str	r3, [sp, #88]	@ 0x58
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	9315      	str	r3, [sp, #84]	@ 0x54
 8019fd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019fd6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8019fd8:	681a      	ldr	r2, [r3, #0]
 8019fda:	685b      	ldr	r3, [r3, #4]
 8019fdc:	9205      	str	r2, [sp, #20]
 8019fde:	9306      	str	r3, [sp, #24]
 8019fe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019fe2:	468c      	mov	ip, r1
 8019fe4:	681a      	ldr	r2, [r3, #0]
 8019fe6:	685b      	ldr	r3, [r3, #4]
 8019fe8:	9207      	str	r2, [sp, #28]
 8019fea:	9308      	str	r3, [sp, #32]
 8019fec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019fee:	681a      	ldr	r2, [r3, #0]
 8019ff0:	685b      	ldr	r3, [r3, #4]
 8019ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8019ff4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8019ff8:	0013      	movs	r3, r2
 8019ffa:	4463      	add	r3, ip
 8019ffc:	4698      	mov	r8, r3
 8019ffe:	0013      	movs	r3, r2
 801a000:	4442      	add	r2, r8
 801a002:	4691      	mov	r9, r2
 801a004:	001a      	movs	r2, r3
 801a006:	444a      	add	r2, r9
 801a008:	4692      	mov	sl, r2
 801a00a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a00c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a00e:	4293      	cmp	r3, r2
 801a010:	d800      	bhi.n	801a014 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801a012:	e0d9      	b.n	801a1c8 <arm_radix4_butterfly_inverse_q31+0x46c>
 801a014:	4694      	mov	ip, r2
 801a016:	4644      	mov	r4, r8
 801a018:	4655      	mov	r5, sl
 801a01a:	4688      	mov	r8, r1
 801a01c:	9b07      	ldr	r3, [sp, #28]
 801a01e:	17db      	asrs	r3, r3, #31
 801a020:	930c      	str	r3, [sp, #48]	@ 0x30
 801a022:	9b08      	ldr	r3, [sp, #32]
 801a024:	17db      	asrs	r3, r3, #31
 801a026:	930d      	str	r3, [sp, #52]	@ 0x34
 801a028:	9b05      	ldr	r3, [sp, #20]
 801a02a:	17db      	asrs	r3, r3, #31
 801a02c:	930e      	str	r3, [sp, #56]	@ 0x38
 801a02e:	9b06      	ldr	r3, [sp, #24]
 801a030:	17db      	asrs	r3, r3, #31
 801a032:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a036:	17db      	asrs	r3, r3, #31
 801a038:	9310      	str	r3, [sp, #64]	@ 0x40
 801a03a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a03c:	17db      	asrs	r3, r3, #31
 801a03e:	9311      	str	r3, [sp, #68]	@ 0x44
 801a040:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a042:	4463      	add	r3, ip
 801a044:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a046:	4643      	mov	r3, r8
 801a048:	4641      	mov	r1, r8
 801a04a:	681a      	ldr	r2, [r3, #0]
 801a04c:	464b      	mov	r3, r9
 801a04e:	684f      	ldr	r7, [r1, #4]
 801a050:	4649      	mov	r1, r9
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	18d6      	adds	r6, r2, r3
 801a056:	1ad3      	subs	r3, r2, r3
 801a058:	9301      	str	r3, [sp, #4]
 801a05a:	684b      	ldr	r3, [r1, #4]
 801a05c:	1af9      	subs	r1, r7, r3
 801a05e:	9102      	str	r1, [sp, #8]
 801a060:	6829      	ldr	r1, [r5, #0]
 801a062:	18f8      	adds	r0, r7, r3
 801a064:	468c      	mov	ip, r1
 801a066:	6827      	ldr	r7, [r4, #0]
 801a068:	4467      	add	r7, ip
 801a06a:	003a      	movs	r2, r7
 801a06c:	19f3      	adds	r3, r6, r7
 801a06e:	4647      	mov	r7, r8
 801a070:	109b      	asrs	r3, r3, #2
 801a072:	603b      	str	r3, [r7, #0]
 801a074:	6869      	ldr	r1, [r5, #4]
 801a076:	6867      	ldr	r7, [r4, #4]
 801a078:	468c      	mov	ip, r1
 801a07a:	4467      	add	r7, ip
 801a07c:	003b      	movs	r3, r7
 801a07e:	19c1      	adds	r1, r0, r7
 801a080:	4647      	mov	r7, r8
 801a082:	1ab6      	subs	r6, r6, r2
 801a084:	1089      	asrs	r1, r1, #2
 801a086:	6079      	str	r1, [r7, #4]
 801a088:	17f2      	asrs	r2, r6, #31
 801a08a:	9900      	ldr	r1, [sp, #0]
 801a08c:	4692      	mov	sl, r2
 801a08e:	468c      	mov	ip, r1
 801a090:	6867      	ldr	r7, [r4, #4]
 801a092:	6869      	ldr	r1, [r5, #4]
 801a094:	44e0      	add	r8, ip
 801a096:	1a7f      	subs	r7, r7, r1
 801a098:	9703      	str	r7, [sp, #12]
 801a09a:	6821      	ldr	r1, [r4, #0]
 801a09c:	682f      	ldr	r7, [r5, #0]
 801a09e:	1bc9      	subs	r1, r1, r7
 801a0a0:	1ac7      	subs	r7, r0, r3
 801a0a2:	17fa      	asrs	r2, r7, #31
 801a0a4:	4693      	mov	fp, r2
 801a0a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a0a8:	9a07      	ldr	r2, [sp, #28]
 801a0aa:	9104      	str	r1, [sp, #16]
 801a0ac:	0030      	movs	r0, r6
 801a0ae:	4651      	mov	r1, sl
 801a0b0:	f7e6 fa86 	bl	80005c0 <__aeabi_lmul>
 801a0b4:	9a08      	ldr	r2, [sp, #32]
 801a0b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a0b8:	9112      	str	r1, [sp, #72]	@ 0x48
 801a0ba:	0038      	movs	r0, r7
 801a0bc:	4659      	mov	r1, fp
 801a0be:	f7e6 fa7f 	bl	80005c0 <__aeabi_lmul>
 801a0c2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a0c4:	9a07      	ldr	r2, [sp, #28]
 801a0c6:	1a41      	subs	r1, r0, r1
 801a0c8:	1049      	asrs	r1, r1, #1
 801a0ca:	6021      	str	r1, [r4, #0]
 801a0cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a0ce:	0038      	movs	r0, r7
 801a0d0:	4659      	mov	r1, fp
 801a0d2:	f7e6 fa75 	bl	80005c0 <__aeabi_lmul>
 801a0d6:	9a08      	ldr	r2, [sp, #32]
 801a0d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a0da:	000f      	movs	r7, r1
 801a0dc:	0030      	movs	r0, r6
 801a0de:	4651      	mov	r1, sl
 801a0e0:	f7e6 fa6e 	bl	80005c0 <__aeabi_lmul>
 801a0e4:	9b00      	ldr	r3, [sp, #0]
 801a0e6:	187f      	adds	r7, r7, r1
 801a0e8:	469c      	mov	ip, r3
 801a0ea:	107f      	asrs	r7, r7, #1
 801a0ec:	6067      	str	r7, [r4, #4]
 801a0ee:	9a01      	ldr	r2, [sp, #4]
 801a0f0:	9f03      	ldr	r7, [sp, #12]
 801a0f2:	9802      	ldr	r0, [sp, #8]
 801a0f4:	1bd7      	subs	r7, r2, r7
 801a0f6:	17fe      	asrs	r6, r7, #31
 801a0f8:	0031      	movs	r1, r6
 801a0fa:	9e04      	ldr	r6, [sp, #16]
 801a0fc:	4682      	mov	sl, r0
 801a0fe:	4464      	add	r4, ip
 801a100:	46b4      	mov	ip, r6
 801a102:	44e2      	add	sl, ip
 801a104:	4652      	mov	r2, sl
 801a106:	17d2      	asrs	r2, r2, #31
 801a108:	4693      	mov	fp, r2
 801a10a:	0038      	movs	r0, r7
 801a10c:	9a05      	ldr	r2, [sp, #20]
 801a10e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a110:	9112      	str	r1, [sp, #72]	@ 0x48
 801a112:	f7e6 fa55 	bl	80005c0 <__aeabi_lmul>
 801a116:	9a06      	ldr	r2, [sp, #24]
 801a118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a11a:	000e      	movs	r6, r1
 801a11c:	4650      	mov	r0, sl
 801a11e:	4659      	mov	r1, fp
 801a120:	f7e6 fa4e 	bl	80005c0 <__aeabi_lmul>
 801a124:	4648      	mov	r0, r9
 801a126:	1a76      	subs	r6, r6, r1
 801a128:	1076      	asrs	r6, r6, #1
 801a12a:	6006      	str	r6, [r0, #0]
 801a12c:	9a05      	ldr	r2, [sp, #20]
 801a12e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a130:	4650      	mov	r0, sl
 801a132:	4659      	mov	r1, fp
 801a134:	f7e6 fa44 	bl	80005c0 <__aeabi_lmul>
 801a138:	9a06      	ldr	r2, [sp, #24]
 801a13a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a13c:	000e      	movs	r6, r1
 801a13e:	0038      	movs	r0, r7
 801a140:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a142:	f7e6 fa3d 	bl	80005c0 <__aeabi_lmul>
 801a146:	9a00      	ldr	r2, [sp, #0]
 801a148:	9f03      	ldr	r7, [sp, #12]
 801a14a:	4694      	mov	ip, r2
 801a14c:	1876      	adds	r6, r6, r1
 801a14e:	4649      	mov	r1, r9
 801a150:	44e1      	add	r9, ip
 801a152:	46bc      	mov	ip, r7
 801a154:	9b01      	ldr	r3, [sp, #4]
 801a156:	1076      	asrs	r6, r6, #1
 801a158:	4463      	add	r3, ip
 801a15a:	17df      	asrs	r7, r3, #31
 801a15c:	604e      	str	r6, [r1, #4]
 801a15e:	46ba      	mov	sl, r7
 801a160:	001e      	movs	r6, r3
 801a162:	9802      	ldr	r0, [sp, #8]
 801a164:	9b04      	ldr	r3, [sp, #16]
 801a166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a168:	1ac7      	subs	r7, r0, r3
 801a16a:	17fb      	asrs	r3, r7, #31
 801a16c:	469b      	mov	fp, r3
 801a16e:	0030      	movs	r0, r6
 801a170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a172:	4651      	mov	r1, sl
 801a174:	f7e6 fa24 	bl	80005c0 <__aeabi_lmul>
 801a178:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a17a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a17c:	9101      	str	r1, [sp, #4]
 801a17e:	0038      	movs	r0, r7
 801a180:	4659      	mov	r1, fp
 801a182:	f7e6 fa1d 	bl	80005c0 <__aeabi_lmul>
 801a186:	9801      	ldr	r0, [sp, #4]
 801a188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a18a:	1a41      	subs	r1, r0, r1
 801a18c:	1049      	asrs	r1, r1, #1
 801a18e:	6029      	str	r1, [r5, #0]
 801a190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a192:	0038      	movs	r0, r7
 801a194:	4659      	mov	r1, fp
 801a196:	f7e6 fa13 	bl	80005c0 <__aeabi_lmul>
 801a19a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a19c:	000f      	movs	r7, r1
 801a19e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a1a0:	0030      	movs	r0, r6
 801a1a2:	4651      	mov	r1, sl
 801a1a4:	f7e6 fa0c 	bl	80005c0 <__aeabi_lmul>
 801a1a8:	187f      	adds	r7, r7, r1
 801a1aa:	107f      	asrs	r7, r7, #1
 801a1ac:	606f      	str	r7, [r5, #4]
 801a1ae:	9a00      	ldr	r2, [sp, #0]
 801a1b0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a1b2:	4694      	mov	ip, r2
 801a1b4:	4465      	add	r5, ip
 801a1b6:	468c      	mov	ip, r1
 801a1b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a1ba:	0013      	movs	r3, r2
 801a1bc:	4462      	add	r2, ip
 801a1be:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a1c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	d900      	bls.n	801a1c8 <arm_radix4_butterfly_inverse_q31+0x46c>
 801a1c6:	e73e      	b.n	801a046 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801a1c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a1ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a1cc:	468c      	mov	ip, r1
 801a1ce:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801a1d0:	4462      	add	r2, ip
 801a1d2:	468c      	mov	ip, r1
 801a1d4:	9216      	str	r2, [sp, #88]	@ 0x58
 801a1d6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801a1d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a1da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a1dc:	4462      	add	r2, ip
 801a1de:	468c      	mov	ip, r1
 801a1e0:	9219      	str	r2, [sp, #100]	@ 0x64
 801a1e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	4462      	add	r2, ip
 801a1e8:	9218      	str	r2, [sp, #96]	@ 0x60
 801a1ea:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a1ec:	9315      	str	r3, [sp, #84]	@ 0x54
 801a1ee:	3208      	adds	r2, #8
 801a1f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a1f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a1f4:	4293      	cmp	r3, r2
 801a1f6:	d800      	bhi.n	801a1fa <arm_radix4_butterfly_inverse_q31+0x49e>
 801a1f8:	e6ec      	b.n	8019fd4 <arm_radix4_butterfly_inverse_q31+0x278>
 801a1fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a1fc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a1fe:	009b      	lsls	r3, r3, #2
 801a200:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a204:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a206:	089b      	lsrs	r3, r3, #2
 801a208:	9320      	str	r3, [sp, #128]	@ 0x80
 801a20a:	2b04      	cmp	r3, #4
 801a20c:	d900      	bls.n	801a210 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801a20e:	e6c5      	b.n	8019f9c <arm_radix4_butterfly_inverse_q31+0x240>
 801a210:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a212:	469a      	mov	sl, r3
 801a214:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a216:	681a      	ldr	r2, [r3, #0]
 801a218:	6918      	ldr	r0, [r3, #16]
 801a21a:	4691      	mov	r9, r2
 801a21c:	464c      	mov	r4, r9
 801a21e:	4680      	mov	r8, r0
 801a220:	69de      	ldr	r6, [r3, #28]
 801a222:	689d      	ldr	r5, [r3, #8]
 801a224:	46b4      	mov	ip, r6
 801a226:	6998      	ldr	r0, [r3, #24]
 801a228:	1964      	adds	r4, r4, r5
 801a22a:	6859      	ldr	r1, [r3, #4]
 801a22c:	68da      	ldr	r2, [r3, #12]
 801a22e:	4444      	add	r4, r8
 801a230:	695f      	ldr	r7, [r3, #20]
 801a232:	1824      	adds	r4, r4, r0
 801a234:	601c      	str	r4, [r3, #0]
 801a236:	188c      	adds	r4, r1, r2
 801a238:	19e4      	adds	r4, r4, r7
 801a23a:	4464      	add	r4, ip
 801a23c:	605c      	str	r4, [r3, #4]
 801a23e:	464c      	mov	r4, r9
 801a240:	1b64      	subs	r4, r4, r5
 801a242:	4444      	add	r4, r8
 801a244:	1a24      	subs	r4, r4, r0
 801a246:	609c      	str	r4, [r3, #8]
 801a248:	1a8c      	subs	r4, r1, r2
 801a24a:	19e4      	adds	r4, r4, r7
 801a24c:	1ba4      	subs	r4, r4, r6
 801a24e:	60dc      	str	r4, [r3, #12]
 801a250:	464c      	mov	r4, r9
 801a252:	4646      	mov	r6, r8
 801a254:	1aa4      	subs	r4, r4, r2
 801a256:	1ba4      	subs	r4, r4, r6
 801a258:	4464      	add	r4, ip
 801a25a:	611c      	str	r4, [r3, #16]
 801a25c:	194c      	adds	r4, r1, r5
 801a25e:	1be4      	subs	r4, r4, r7
 801a260:	1a24      	subs	r4, r4, r0
 801a262:	615c      	str	r4, [r3, #20]
 801a264:	4644      	mov	r4, r8
 801a266:	4666      	mov	r6, ip
 801a268:	444a      	add	r2, r9
 801a26a:	1b12      	subs	r2, r2, r4
 801a26c:	1b92      	subs	r2, r2, r6
 801a26e:	619a      	str	r2, [r3, #24]
 801a270:	1b4a      	subs	r2, r1, r5
 801a272:	1bd1      	subs	r1, r2, r7
 801a274:	2201      	movs	r2, #1
 801a276:	4252      	negs	r2, r2
 801a278:	4694      	mov	ip, r2
 801a27a:	44e2      	add	sl, ip
 801a27c:	4652      	mov	r2, sl
 801a27e:	1809      	adds	r1, r1, r0
 801a280:	61d9      	str	r1, [r3, #28]
 801a282:	3320      	adds	r3, #32
 801a284:	2a00      	cmp	r2, #0
 801a286:	d1c6      	bne.n	801a216 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801a288:	b027      	add	sp, #156	@ 0x9c
 801a28a:	bc3c      	pop	{r2, r3, r4, r5}
 801a28c:	4690      	mov	r8, r2
 801a28e:	4699      	mov	r9, r3
 801a290:	46a2      	mov	sl, r4
 801a292:	46ab      	mov	fp, r5
 801a294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a296:	469a      	mov	sl, r3
 801a298:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a29a:	e7bc      	b.n	801a216 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801a29c <arm_cmplx_mag_squared_q31>:
 801a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a29e:	464f      	mov	r7, r9
 801a2a0:	4646      	mov	r6, r8
 801a2a2:	0004      	movs	r4, r0
 801a2a4:	b4c0      	push	{r6, r7}
 801a2a6:	0016      	movs	r6, r2
 801a2a8:	000f      	movs	r7, r1
 801a2aa:	2a00      	cmp	r2, #0
 801a2ac:	d018      	beq.n	801a2e0 <arm_cmplx_mag_squared_q31+0x44>
 801a2ae:	6823      	ldr	r3, [r4, #0]
 801a2b0:	6822      	ldr	r2, [r4, #0]
 801a2b2:	17d9      	asrs	r1, r3, #31
 801a2b4:	6863      	ldr	r3, [r4, #4]
 801a2b6:	0010      	movs	r0, r2
 801a2b8:	4698      	mov	r8, r3
 801a2ba:	17db      	asrs	r3, r3, #31
 801a2bc:	4699      	mov	r9, r3
 801a2be:	000b      	movs	r3, r1
 801a2c0:	f7e6 f97e 	bl	80005c0 <__aeabi_lmul>
 801a2c4:	4642      	mov	r2, r8
 801a2c6:	104d      	asrs	r5, r1, #1
 801a2c8:	464b      	mov	r3, r9
 801a2ca:	4640      	mov	r0, r8
 801a2cc:	4649      	mov	r1, r9
 801a2ce:	f7e6 f977 	bl	80005c0 <__aeabi_lmul>
 801a2d2:	1049      	asrs	r1, r1, #1
 801a2d4:	1869      	adds	r1, r5, r1
 801a2d6:	3e01      	subs	r6, #1
 801a2d8:	c702      	stmia	r7!, {r1}
 801a2da:	3408      	adds	r4, #8
 801a2dc:	2e00      	cmp	r6, #0
 801a2de:	d1e6      	bne.n	801a2ae <arm_cmplx_mag_squared_q31+0x12>
 801a2e0:	bc0c      	pop	{r2, r3}
 801a2e2:	4690      	mov	r8, r2
 801a2e4:	4699      	mov	r9, r3
 801a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a2e8 <arm_mult_q31>:
 801a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2ea:	4646      	mov	r6, r8
 801a2ec:	464f      	mov	r7, r9
 801a2ee:	4690      	mov	r8, r2
 801a2f0:	b4c0      	push	{r6, r7}
 801a2f2:	001d      	movs	r5, r3
 801a2f4:	0006      	movs	r6, r0
 801a2f6:	000f      	movs	r7, r1
 801a2f8:	2400      	movs	r4, #0
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d020      	beq.n	801a340 <arm_mult_q31+0x58>
 801a2fe:	4b12      	ldr	r3, [pc, #72]	@ (801a348 <arm_mult_q31+0x60>)
 801a300:	4699      	mov	r9, r3
 801a302:	e007      	b.n	801a314 <arm_mult_q31+0x2c>
 801a304:	464b      	mov	r3, r9
 801a306:	4059      	eors	r1, r3
 801a308:	4643      	mov	r3, r8
 801a30a:	3d01      	subs	r5, #1
 801a30c:	5119      	str	r1, [r3, r4]
 801a30e:	3404      	adds	r4, #4
 801a310:	2d00      	cmp	r5, #0
 801a312:	d015      	beq.n	801a340 <arm_mult_q31+0x58>
 801a314:	5933      	ldr	r3, [r6, r4]
 801a316:	593a      	ldr	r2, [r7, r4]
 801a318:	17d9      	asrs	r1, r3, #31
 801a31a:	593b      	ldr	r3, [r7, r4]
 801a31c:	5930      	ldr	r0, [r6, r4]
 801a31e:	17db      	asrs	r3, r3, #31
 801a320:	f7e6 f94e 	bl	80005c0 <__aeabi_lmul>
 801a324:	004b      	lsls	r3, r1, #1
 801a326:	0fc0      	lsrs	r0, r0, #31
 801a328:	4318      	orrs	r0, r3
 801a32a:	17c9      	asrs	r1, r1, #31
 801a32c:	17c3      	asrs	r3, r0, #31
 801a32e:	428b      	cmp	r3, r1
 801a330:	d1e8      	bne.n	801a304 <arm_mult_q31+0x1c>
 801a332:	0001      	movs	r1, r0
 801a334:	4643      	mov	r3, r8
 801a336:	3d01      	subs	r5, #1
 801a338:	5119      	str	r1, [r3, r4]
 801a33a:	3404      	adds	r4, #4
 801a33c:	2d00      	cmp	r5, #0
 801a33e:	d1e9      	bne.n	801a314 <arm_mult_q31+0x2c>
 801a340:	bc0c      	pop	{r2, r3}
 801a342:	4690      	mov	r8, r2
 801a344:	4699      	mov	r9, r3
 801a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a348:	7fffffff 	.word	0x7fffffff

0801a34c <arm_add_q31>:
 801a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a34e:	465f      	mov	r7, fp
 801a350:	4656      	mov	r6, sl
 801a352:	464d      	mov	r5, r9
 801a354:	4644      	mov	r4, r8
 801a356:	b4f0      	push	{r4, r5, r6, r7}
 801a358:	4693      	mov	fp, r2
 801a35a:	b083      	sub	sp, #12
 801a35c:	4681      	mov	r9, r0
 801a35e:	468a      	mov	sl, r1
 801a360:	4698      	mov	r8, r3
 801a362:	2200      	movs	r2, #0
 801a364:	2b00      	cmp	r3, #0
 801a366:	d020      	beq.n	801a3aa <arm_add_q31+0x5e>
 801a368:	4649      	mov	r1, r9
 801a36a:	4653      	mov	r3, sl
 801a36c:	588e      	ldr	r6, [r1, r2]
 801a36e:	589b      	ldr	r3, [r3, r2]
 801a370:	17f7      	asrs	r7, r6, #31
 801a372:	001c      	movs	r4, r3
 801a374:	0030      	movs	r0, r6
 801a376:	0039      	movs	r1, r7
 801a378:	17dd      	asrs	r5, r3, #31
 801a37a:	46b4      	mov	ip, r6
 801a37c:	1900      	adds	r0, r0, r4
 801a37e:	4169      	adcs	r1, r5
 801a380:	4463      	add	r3, ip
 801a382:	9000      	str	r0, [sp, #0]
 801a384:	9101      	str	r1, [sp, #4]
 801a386:	17d9      	asrs	r1, r3, #31
 801a388:	468c      	mov	ip, r1
 801a38a:	9901      	ldr	r1, [sp, #4]
 801a38c:	458c      	cmp	ip, r1
 801a38e:	d002      	beq.n	801a396 <arm_add_q31+0x4a>
 801a390:	17cb      	asrs	r3, r1, #31
 801a392:	4909      	ldr	r1, [pc, #36]	@ (801a3b8 <arm_add_q31+0x6c>)
 801a394:	404b      	eors	r3, r1
 801a396:	4659      	mov	r1, fp
 801a398:	508b      	str	r3, [r1, r2]
 801a39a:	2301      	movs	r3, #1
 801a39c:	425b      	negs	r3, r3
 801a39e:	469c      	mov	ip, r3
 801a3a0:	44e0      	add	r8, ip
 801a3a2:	4643      	mov	r3, r8
 801a3a4:	3204      	adds	r2, #4
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d1de      	bne.n	801a368 <arm_add_q31+0x1c>
 801a3aa:	b003      	add	sp, #12
 801a3ac:	bc3c      	pop	{r2, r3, r4, r5}
 801a3ae:	4690      	mov	r8, r2
 801a3b0:	4699      	mov	r9, r3
 801a3b2:	46a2      	mov	sl, r4
 801a3b4:	46ab      	mov	fp, r5
 801a3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3b8:	7fffffff 	.word	0x7fffffff

0801a3bc <atof>:
 801a3bc:	b510      	push	{r4, lr}
 801a3be:	2100      	movs	r1, #0
 801a3c0:	f000 fe12 	bl	801afe8 <strtod>
 801a3c4:	bd10      	pop	{r4, pc}

0801a3c6 <atoi>:
 801a3c6:	b510      	push	{r4, lr}
 801a3c8:	220a      	movs	r2, #10
 801a3ca:	2100      	movs	r1, #0
 801a3cc:	f000 fea4 	bl	801b118 <strtol>
 801a3d0:	bd10      	pop	{r4, pc}
	...

0801a3d4 <sulp>:
 801a3d4:	b570      	push	{r4, r5, r6, lr}
 801a3d6:	0016      	movs	r6, r2
 801a3d8:	000d      	movs	r5, r1
 801a3da:	f003 fbf3 	bl	801dbc4 <__ulp>
 801a3de:	2e00      	cmp	r6, #0
 801a3e0:	d00d      	beq.n	801a3fe <sulp+0x2a>
 801a3e2:	236b      	movs	r3, #107	@ 0x6b
 801a3e4:	006a      	lsls	r2, r5, #1
 801a3e6:	0d52      	lsrs	r2, r2, #21
 801a3e8:	1a9b      	subs	r3, r3, r2
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	dd07      	ble.n	801a3fe <sulp+0x2a>
 801a3ee:	2400      	movs	r4, #0
 801a3f0:	4a03      	ldr	r2, [pc, #12]	@ (801a400 <sulp+0x2c>)
 801a3f2:	051b      	lsls	r3, r3, #20
 801a3f4:	189d      	adds	r5, r3, r2
 801a3f6:	002b      	movs	r3, r5
 801a3f8:	0022      	movs	r2, r4
 801a3fa:	f7e8 f91f 	bl	800263c <__aeabi_dmul>
 801a3fe:	bd70      	pop	{r4, r5, r6, pc}
 801a400:	3ff00000 	.word	0x3ff00000

0801a404 <_strtod_l>:
 801a404:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a406:	b0a3      	sub	sp, #140	@ 0x8c
 801a408:	921b      	str	r2, [sp, #108]	@ 0x6c
 801a40a:	2200      	movs	r2, #0
 801a40c:	2600      	movs	r6, #0
 801a40e:	2700      	movs	r7, #0
 801a410:	9005      	str	r0, [sp, #20]
 801a412:	9109      	str	r1, [sp, #36]	@ 0x24
 801a414:	921e      	str	r2, [sp, #120]	@ 0x78
 801a416:	911d      	str	r1, [sp, #116]	@ 0x74
 801a418:	780a      	ldrb	r2, [r1, #0]
 801a41a:	2a2b      	cmp	r2, #43	@ 0x2b
 801a41c:	d053      	beq.n	801a4c6 <_strtod_l+0xc2>
 801a41e:	d83f      	bhi.n	801a4a0 <_strtod_l+0x9c>
 801a420:	2a0d      	cmp	r2, #13
 801a422:	d839      	bhi.n	801a498 <_strtod_l+0x94>
 801a424:	2a08      	cmp	r2, #8
 801a426:	d839      	bhi.n	801a49c <_strtod_l+0x98>
 801a428:	2a00      	cmp	r2, #0
 801a42a:	d042      	beq.n	801a4b2 <_strtod_l+0xae>
 801a42c:	2200      	movs	r2, #0
 801a42e:	9212      	str	r2, [sp, #72]	@ 0x48
 801a430:	2100      	movs	r1, #0
 801a432:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801a434:	910c      	str	r1, [sp, #48]	@ 0x30
 801a436:	782a      	ldrb	r2, [r5, #0]
 801a438:	2a30      	cmp	r2, #48	@ 0x30
 801a43a:	d000      	beq.n	801a43e <_strtod_l+0x3a>
 801a43c:	e083      	b.n	801a546 <_strtod_l+0x142>
 801a43e:	786a      	ldrb	r2, [r5, #1]
 801a440:	3120      	adds	r1, #32
 801a442:	438a      	bics	r2, r1
 801a444:	2a58      	cmp	r2, #88	@ 0x58
 801a446:	d000      	beq.n	801a44a <_strtod_l+0x46>
 801a448:	e073      	b.n	801a532 <_strtod_l+0x12e>
 801a44a:	9302      	str	r3, [sp, #8]
 801a44c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a44e:	4a95      	ldr	r2, [pc, #596]	@ (801a6a4 <_strtod_l+0x2a0>)
 801a450:	9301      	str	r3, [sp, #4]
 801a452:	ab1e      	add	r3, sp, #120	@ 0x78
 801a454:	9300      	str	r3, [sp, #0]
 801a456:	9805      	ldr	r0, [sp, #20]
 801a458:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a45a:	a91d      	add	r1, sp, #116	@ 0x74
 801a45c:	f002 fc62 	bl	801cd24 <__gethex>
 801a460:	230f      	movs	r3, #15
 801a462:	0002      	movs	r2, r0
 801a464:	401a      	ands	r2, r3
 801a466:	0004      	movs	r4, r0
 801a468:	9206      	str	r2, [sp, #24]
 801a46a:	4218      	tst	r0, r3
 801a46c:	d005      	beq.n	801a47a <_strtod_l+0x76>
 801a46e:	2a06      	cmp	r2, #6
 801a470:	d12b      	bne.n	801a4ca <_strtod_l+0xc6>
 801a472:	2300      	movs	r3, #0
 801a474:	3501      	adds	r5, #1
 801a476:	951d      	str	r5, [sp, #116]	@ 0x74
 801a478:	9312      	str	r3, [sp, #72]	@ 0x48
 801a47a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d002      	beq.n	801a486 <_strtod_l+0x82>
 801a480:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a482:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a484:	6013      	str	r3, [r2, #0]
 801a486:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d019      	beq.n	801a4c0 <_strtod_l+0xbc>
 801a48c:	2380      	movs	r3, #128	@ 0x80
 801a48e:	0030      	movs	r0, r6
 801a490:	061b      	lsls	r3, r3, #24
 801a492:	18f9      	adds	r1, r7, r3
 801a494:	b023      	add	sp, #140	@ 0x8c
 801a496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a498:	2a20      	cmp	r2, #32
 801a49a:	d1c7      	bne.n	801a42c <_strtod_l+0x28>
 801a49c:	3101      	adds	r1, #1
 801a49e:	e7ba      	b.n	801a416 <_strtod_l+0x12>
 801a4a0:	2a2d      	cmp	r2, #45	@ 0x2d
 801a4a2:	d1c3      	bne.n	801a42c <_strtod_l+0x28>
 801a4a4:	3a2c      	subs	r2, #44	@ 0x2c
 801a4a6:	9212      	str	r2, [sp, #72]	@ 0x48
 801a4a8:	1c4a      	adds	r2, r1, #1
 801a4aa:	921d      	str	r2, [sp, #116]	@ 0x74
 801a4ac:	784a      	ldrb	r2, [r1, #1]
 801a4ae:	2a00      	cmp	r2, #0
 801a4b0:	d1be      	bne.n	801a430 <_strtod_l+0x2c>
 801a4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4b4:	931d      	str	r3, [sp, #116]	@ 0x74
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	9312      	str	r3, [sp, #72]	@ 0x48
 801a4ba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d1df      	bne.n	801a480 <_strtod_l+0x7c>
 801a4c0:	0030      	movs	r0, r6
 801a4c2:	0039      	movs	r1, r7
 801a4c4:	e7e6      	b.n	801a494 <_strtod_l+0x90>
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	e7ed      	b.n	801a4a6 <_strtod_l+0xa2>
 801a4ca:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a4cc:	2a00      	cmp	r2, #0
 801a4ce:	d007      	beq.n	801a4e0 <_strtod_l+0xdc>
 801a4d0:	2135      	movs	r1, #53	@ 0x35
 801a4d2:	a820      	add	r0, sp, #128	@ 0x80
 801a4d4:	f003 fc6c 	bl	801ddb0 <__copybits>
 801a4d8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a4da:	9805      	ldr	r0, [sp, #20]
 801a4dc:	f003 f826 	bl	801d52c <_Bfree>
 801a4e0:	9806      	ldr	r0, [sp, #24]
 801a4e2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a4e4:	3801      	subs	r0, #1
 801a4e6:	2804      	cmp	r0, #4
 801a4e8:	d806      	bhi.n	801a4f8 <_strtod_l+0xf4>
 801a4ea:	f7e5 fe47 	bl	800017c <__gnu_thumb1_case_uqi>
 801a4ee:	0312      	.short	0x0312
 801a4f0:	1e1c      	.short	0x1e1c
 801a4f2:	12          	.byte	0x12
 801a4f3:	00          	.byte	0x00
 801a4f4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a4f6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801a4f8:	05e4      	lsls	r4, r4, #23
 801a4fa:	d502      	bpl.n	801a502 <_strtod_l+0xfe>
 801a4fc:	2380      	movs	r3, #128	@ 0x80
 801a4fe:	061b      	lsls	r3, r3, #24
 801a500:	431f      	orrs	r7, r3
 801a502:	4b69      	ldr	r3, [pc, #420]	@ (801a6a8 <_strtod_l+0x2a4>)
 801a504:	423b      	tst	r3, r7
 801a506:	d1b8      	bne.n	801a47a <_strtod_l+0x76>
 801a508:	f001 fc90 	bl	801be2c <__errno>
 801a50c:	2322      	movs	r3, #34	@ 0x22
 801a50e:	6003      	str	r3, [r0, #0]
 801a510:	e7b3      	b.n	801a47a <_strtod_l+0x76>
 801a512:	4966      	ldr	r1, [pc, #408]	@ (801a6ac <_strtod_l+0x2a8>)
 801a514:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a516:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a518:	400a      	ands	r2, r1
 801a51a:	4965      	ldr	r1, [pc, #404]	@ (801a6b0 <_strtod_l+0x2ac>)
 801a51c:	185b      	adds	r3, r3, r1
 801a51e:	051b      	lsls	r3, r3, #20
 801a520:	431a      	orrs	r2, r3
 801a522:	0017      	movs	r7, r2
 801a524:	e7e8      	b.n	801a4f8 <_strtod_l+0xf4>
 801a526:	4f60      	ldr	r7, [pc, #384]	@ (801a6a8 <_strtod_l+0x2a4>)
 801a528:	e7e6      	b.n	801a4f8 <_strtod_l+0xf4>
 801a52a:	2601      	movs	r6, #1
 801a52c:	4f61      	ldr	r7, [pc, #388]	@ (801a6b4 <_strtod_l+0x2b0>)
 801a52e:	4276      	negs	r6, r6
 801a530:	e7e2      	b.n	801a4f8 <_strtod_l+0xf4>
 801a532:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a534:	1c5a      	adds	r2, r3, #1
 801a536:	921d      	str	r2, [sp, #116]	@ 0x74
 801a538:	785b      	ldrb	r3, [r3, #1]
 801a53a:	2b30      	cmp	r3, #48	@ 0x30
 801a53c:	d0f9      	beq.n	801a532 <_strtod_l+0x12e>
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d09b      	beq.n	801a47a <_strtod_l+0x76>
 801a542:	2301      	movs	r3, #1
 801a544:	930c      	str	r3, [sp, #48]	@ 0x30
 801a546:	2500      	movs	r5, #0
 801a548:	220a      	movs	r2, #10
 801a54a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a54c:	950d      	str	r5, [sp, #52]	@ 0x34
 801a54e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a550:	9508      	str	r5, [sp, #32]
 801a552:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801a554:	7804      	ldrb	r4, [r0, #0]
 801a556:	0023      	movs	r3, r4
 801a558:	3b30      	subs	r3, #48	@ 0x30
 801a55a:	b2d9      	uxtb	r1, r3
 801a55c:	2909      	cmp	r1, #9
 801a55e:	d927      	bls.n	801a5b0 <_strtod_l+0x1ac>
 801a560:	2201      	movs	r2, #1
 801a562:	4955      	ldr	r1, [pc, #340]	@ (801a6b8 <_strtod_l+0x2b4>)
 801a564:	f001 fbd4 	bl	801bd10 <strncmp>
 801a568:	2800      	cmp	r0, #0
 801a56a:	d031      	beq.n	801a5d0 <_strtod_l+0x1cc>
 801a56c:	2000      	movs	r0, #0
 801a56e:	0023      	movs	r3, r4
 801a570:	4684      	mov	ip, r0
 801a572:	9a08      	ldr	r2, [sp, #32]
 801a574:	900e      	str	r0, [sp, #56]	@ 0x38
 801a576:	9206      	str	r2, [sp, #24]
 801a578:	2220      	movs	r2, #32
 801a57a:	0019      	movs	r1, r3
 801a57c:	4391      	bics	r1, r2
 801a57e:	000a      	movs	r2, r1
 801a580:	2100      	movs	r1, #0
 801a582:	9107      	str	r1, [sp, #28]
 801a584:	2a45      	cmp	r2, #69	@ 0x45
 801a586:	d000      	beq.n	801a58a <_strtod_l+0x186>
 801a588:	e0c0      	b.n	801a70c <_strtod_l+0x308>
 801a58a:	9b06      	ldr	r3, [sp, #24]
 801a58c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a58e:	4303      	orrs	r3, r0
 801a590:	4313      	orrs	r3, r2
 801a592:	428b      	cmp	r3, r1
 801a594:	d08d      	beq.n	801a4b2 <_strtod_l+0xae>
 801a596:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a598:	9309      	str	r3, [sp, #36]	@ 0x24
 801a59a:	3301      	adds	r3, #1
 801a59c:	931d      	str	r3, [sp, #116]	@ 0x74
 801a59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5a0:	785b      	ldrb	r3, [r3, #1]
 801a5a2:	2b2b      	cmp	r3, #43	@ 0x2b
 801a5a4:	d070      	beq.n	801a688 <_strtod_l+0x284>
 801a5a6:	000c      	movs	r4, r1
 801a5a8:	2b2d      	cmp	r3, #45	@ 0x2d
 801a5aa:	d173      	bne.n	801a694 <_strtod_l+0x290>
 801a5ac:	2401      	movs	r4, #1
 801a5ae:	e06c      	b.n	801a68a <_strtod_l+0x286>
 801a5b0:	9908      	ldr	r1, [sp, #32]
 801a5b2:	2908      	cmp	r1, #8
 801a5b4:	dc09      	bgt.n	801a5ca <_strtod_l+0x1c6>
 801a5b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801a5b8:	4351      	muls	r1, r2
 801a5ba:	185b      	adds	r3, r3, r1
 801a5bc:	930d      	str	r3, [sp, #52]	@ 0x34
 801a5be:	9b08      	ldr	r3, [sp, #32]
 801a5c0:	3001      	adds	r0, #1
 801a5c2:	3301      	adds	r3, #1
 801a5c4:	9308      	str	r3, [sp, #32]
 801a5c6:	901d      	str	r0, [sp, #116]	@ 0x74
 801a5c8:	e7c3      	b.n	801a552 <_strtod_l+0x14e>
 801a5ca:	4355      	muls	r5, r2
 801a5cc:	195d      	adds	r5, r3, r5
 801a5ce:	e7f6      	b.n	801a5be <_strtod_l+0x1ba>
 801a5d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a5d2:	1c5a      	adds	r2, r3, #1
 801a5d4:	921d      	str	r2, [sp, #116]	@ 0x74
 801a5d6:	9a08      	ldr	r2, [sp, #32]
 801a5d8:	785b      	ldrb	r3, [r3, #1]
 801a5da:	2a00      	cmp	r2, #0
 801a5dc:	d03a      	beq.n	801a654 <_strtod_l+0x250>
 801a5de:	900e      	str	r0, [sp, #56]	@ 0x38
 801a5e0:	9206      	str	r2, [sp, #24]
 801a5e2:	001a      	movs	r2, r3
 801a5e4:	3a30      	subs	r2, #48	@ 0x30
 801a5e6:	2a09      	cmp	r2, #9
 801a5e8:	d912      	bls.n	801a610 <_strtod_l+0x20c>
 801a5ea:	2201      	movs	r2, #1
 801a5ec:	4694      	mov	ip, r2
 801a5ee:	e7c3      	b.n	801a578 <_strtod_l+0x174>
 801a5f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a5f2:	3001      	adds	r0, #1
 801a5f4:	1c5a      	adds	r2, r3, #1
 801a5f6:	921d      	str	r2, [sp, #116]	@ 0x74
 801a5f8:	785b      	ldrb	r3, [r3, #1]
 801a5fa:	2b30      	cmp	r3, #48	@ 0x30
 801a5fc:	d0f8      	beq.n	801a5f0 <_strtod_l+0x1ec>
 801a5fe:	001a      	movs	r2, r3
 801a600:	3a31      	subs	r2, #49	@ 0x31
 801a602:	2a08      	cmp	r2, #8
 801a604:	d83b      	bhi.n	801a67e <_strtod_l+0x27a>
 801a606:	900e      	str	r0, [sp, #56]	@ 0x38
 801a608:	2000      	movs	r0, #0
 801a60a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a60c:	9006      	str	r0, [sp, #24]
 801a60e:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a610:	001a      	movs	r2, r3
 801a612:	1c41      	adds	r1, r0, #1
 801a614:	3a30      	subs	r2, #48	@ 0x30
 801a616:	2b30      	cmp	r3, #48	@ 0x30
 801a618:	d016      	beq.n	801a648 <_strtod_l+0x244>
 801a61a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a61c:	185b      	adds	r3, r3, r1
 801a61e:	930e      	str	r3, [sp, #56]	@ 0x38
 801a620:	9b06      	ldr	r3, [sp, #24]
 801a622:	210a      	movs	r1, #10
 801a624:	469c      	mov	ip, r3
 801a626:	4484      	add	ip, r0
 801a628:	459c      	cmp	ip, r3
 801a62a:	d115      	bne.n	801a658 <_strtod_l+0x254>
 801a62c:	9906      	ldr	r1, [sp, #24]
 801a62e:	9b06      	ldr	r3, [sp, #24]
 801a630:	3101      	adds	r1, #1
 801a632:	1809      	adds	r1, r1, r0
 801a634:	181b      	adds	r3, r3, r0
 801a636:	9106      	str	r1, [sp, #24]
 801a638:	2b08      	cmp	r3, #8
 801a63a:	dc19      	bgt.n	801a670 <_strtod_l+0x26c>
 801a63c:	230a      	movs	r3, #10
 801a63e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801a640:	434b      	muls	r3, r1
 801a642:	2100      	movs	r1, #0
 801a644:	18d3      	adds	r3, r2, r3
 801a646:	930d      	str	r3, [sp, #52]	@ 0x34
 801a648:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a64a:	0008      	movs	r0, r1
 801a64c:	1c5a      	adds	r2, r3, #1
 801a64e:	921d      	str	r2, [sp, #116]	@ 0x74
 801a650:	785b      	ldrb	r3, [r3, #1]
 801a652:	e7c6      	b.n	801a5e2 <_strtod_l+0x1de>
 801a654:	9808      	ldr	r0, [sp, #32]
 801a656:	e7d0      	b.n	801a5fa <_strtod_l+0x1f6>
 801a658:	1c5c      	adds	r4, r3, #1
 801a65a:	2b08      	cmp	r3, #8
 801a65c:	dc04      	bgt.n	801a668 <_strtod_l+0x264>
 801a65e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a660:	434b      	muls	r3, r1
 801a662:	930d      	str	r3, [sp, #52]	@ 0x34
 801a664:	0023      	movs	r3, r4
 801a666:	e7df      	b.n	801a628 <_strtod_l+0x224>
 801a668:	2c10      	cmp	r4, #16
 801a66a:	dcfb      	bgt.n	801a664 <_strtod_l+0x260>
 801a66c:	434d      	muls	r5, r1
 801a66e:	e7f9      	b.n	801a664 <_strtod_l+0x260>
 801a670:	2100      	movs	r1, #0
 801a672:	2b0f      	cmp	r3, #15
 801a674:	dce8      	bgt.n	801a648 <_strtod_l+0x244>
 801a676:	230a      	movs	r3, #10
 801a678:	435d      	muls	r5, r3
 801a67a:	1955      	adds	r5, r2, r5
 801a67c:	e7e4      	b.n	801a648 <_strtod_l+0x244>
 801a67e:	2200      	movs	r2, #0
 801a680:	920e      	str	r2, [sp, #56]	@ 0x38
 801a682:	9206      	str	r2, [sp, #24]
 801a684:	3201      	adds	r2, #1
 801a686:	e7b1      	b.n	801a5ec <_strtod_l+0x1e8>
 801a688:	2400      	movs	r4, #0
 801a68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a68c:	3302      	adds	r3, #2
 801a68e:	931d      	str	r3, [sp, #116]	@ 0x74
 801a690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a692:	789b      	ldrb	r3, [r3, #2]
 801a694:	001a      	movs	r2, r3
 801a696:	3a30      	subs	r2, #48	@ 0x30
 801a698:	2a09      	cmp	r2, #9
 801a69a:	d913      	bls.n	801a6c4 <_strtod_l+0x2c0>
 801a69c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a69e:	921d      	str	r2, [sp, #116]	@ 0x74
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	e032      	b.n	801a70a <_strtod_l+0x306>
 801a6a4:	0802064c 	.word	0x0802064c
 801a6a8:	7ff00000 	.word	0x7ff00000
 801a6ac:	ffefffff 	.word	0xffefffff
 801a6b0:	00000433 	.word	0x00000433
 801a6b4:	7fffffff 	.word	0x7fffffff
 801a6b8:	08020634 	.word	0x08020634
 801a6bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a6be:	1c5a      	adds	r2, r3, #1
 801a6c0:	921d      	str	r2, [sp, #116]	@ 0x74
 801a6c2:	785b      	ldrb	r3, [r3, #1]
 801a6c4:	2b30      	cmp	r3, #48	@ 0x30
 801a6c6:	d0f9      	beq.n	801a6bc <_strtod_l+0x2b8>
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	9207      	str	r2, [sp, #28]
 801a6cc:	001a      	movs	r2, r3
 801a6ce:	3a31      	subs	r2, #49	@ 0x31
 801a6d0:	2a08      	cmp	r2, #8
 801a6d2:	d81b      	bhi.n	801a70c <_strtod_l+0x308>
 801a6d4:	3b30      	subs	r3, #48	@ 0x30
 801a6d6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a6d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a6da:	9307      	str	r3, [sp, #28]
 801a6dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a6de:	1c59      	adds	r1, r3, #1
 801a6e0:	911d      	str	r1, [sp, #116]	@ 0x74
 801a6e2:	785b      	ldrb	r3, [r3, #1]
 801a6e4:	001a      	movs	r2, r3
 801a6e6:	3a30      	subs	r2, #48	@ 0x30
 801a6e8:	2a09      	cmp	r2, #9
 801a6ea:	d93a      	bls.n	801a762 <_strtod_l+0x35e>
 801a6ec:	9a07      	ldr	r2, [sp, #28]
 801a6ee:	1a8a      	subs	r2, r1, r2
 801a6f0:	49b4      	ldr	r1, [pc, #720]	@ (801a9c4 <_strtod_l+0x5c0>)
 801a6f2:	9107      	str	r1, [sp, #28]
 801a6f4:	2a08      	cmp	r2, #8
 801a6f6:	dc04      	bgt.n	801a702 <_strtod_l+0x2fe>
 801a6f8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a6fa:	9207      	str	r2, [sp, #28]
 801a6fc:	428a      	cmp	r2, r1
 801a6fe:	dd00      	ble.n	801a702 <_strtod_l+0x2fe>
 801a700:	9107      	str	r1, [sp, #28]
 801a702:	2c00      	cmp	r4, #0
 801a704:	d002      	beq.n	801a70c <_strtod_l+0x308>
 801a706:	9a07      	ldr	r2, [sp, #28]
 801a708:	4252      	negs	r2, r2
 801a70a:	9207      	str	r2, [sp, #28]
 801a70c:	9a06      	ldr	r2, [sp, #24]
 801a70e:	2a00      	cmp	r2, #0
 801a710:	d14d      	bne.n	801a7ae <_strtod_l+0x3aa>
 801a712:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a714:	4310      	orrs	r0, r2
 801a716:	d000      	beq.n	801a71a <_strtod_l+0x316>
 801a718:	e6af      	b.n	801a47a <_strtod_l+0x76>
 801a71a:	4662      	mov	r2, ip
 801a71c:	2a00      	cmp	r2, #0
 801a71e:	d000      	beq.n	801a722 <_strtod_l+0x31e>
 801a720:	e6c7      	b.n	801a4b2 <_strtod_l+0xae>
 801a722:	2b69      	cmp	r3, #105	@ 0x69
 801a724:	d027      	beq.n	801a776 <_strtod_l+0x372>
 801a726:	dc23      	bgt.n	801a770 <_strtod_l+0x36c>
 801a728:	2b49      	cmp	r3, #73	@ 0x49
 801a72a:	d024      	beq.n	801a776 <_strtod_l+0x372>
 801a72c:	2b4e      	cmp	r3, #78	@ 0x4e
 801a72e:	d000      	beq.n	801a732 <_strtod_l+0x32e>
 801a730:	e6bf      	b.n	801a4b2 <_strtod_l+0xae>
 801a732:	49a5      	ldr	r1, [pc, #660]	@ (801a9c8 <_strtod_l+0x5c4>)
 801a734:	a81d      	add	r0, sp, #116	@ 0x74
 801a736:	f002 fd2b 	bl	801d190 <__match>
 801a73a:	2800      	cmp	r0, #0
 801a73c:	d100      	bne.n	801a740 <_strtod_l+0x33c>
 801a73e:	e6b8      	b.n	801a4b2 <_strtod_l+0xae>
 801a740:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a742:	781b      	ldrb	r3, [r3, #0]
 801a744:	2b28      	cmp	r3, #40	@ 0x28
 801a746:	d12c      	bne.n	801a7a2 <_strtod_l+0x39e>
 801a748:	49a0      	ldr	r1, [pc, #640]	@ (801a9cc <_strtod_l+0x5c8>)
 801a74a:	aa20      	add	r2, sp, #128	@ 0x80
 801a74c:	a81d      	add	r0, sp, #116	@ 0x74
 801a74e:	f002 fd33 	bl	801d1b8 <__hexnan>
 801a752:	2805      	cmp	r0, #5
 801a754:	d125      	bne.n	801a7a2 <_strtod_l+0x39e>
 801a756:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a758:	4a9d      	ldr	r2, [pc, #628]	@ (801a9d0 <_strtod_l+0x5cc>)
 801a75a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a75c:	431a      	orrs	r2, r3
 801a75e:	0017      	movs	r7, r2
 801a760:	e68b      	b.n	801a47a <_strtod_l+0x76>
 801a762:	220a      	movs	r2, #10
 801a764:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a766:	434a      	muls	r2, r1
 801a768:	18d2      	adds	r2, r2, r3
 801a76a:	3a30      	subs	r2, #48	@ 0x30
 801a76c:	9210      	str	r2, [sp, #64]	@ 0x40
 801a76e:	e7b5      	b.n	801a6dc <_strtod_l+0x2d8>
 801a770:	2b6e      	cmp	r3, #110	@ 0x6e
 801a772:	d0de      	beq.n	801a732 <_strtod_l+0x32e>
 801a774:	e69d      	b.n	801a4b2 <_strtod_l+0xae>
 801a776:	4997      	ldr	r1, [pc, #604]	@ (801a9d4 <_strtod_l+0x5d0>)
 801a778:	a81d      	add	r0, sp, #116	@ 0x74
 801a77a:	f002 fd09 	bl	801d190 <__match>
 801a77e:	2800      	cmp	r0, #0
 801a780:	d100      	bne.n	801a784 <_strtod_l+0x380>
 801a782:	e696      	b.n	801a4b2 <_strtod_l+0xae>
 801a784:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a786:	4994      	ldr	r1, [pc, #592]	@ (801a9d8 <_strtod_l+0x5d4>)
 801a788:	3b01      	subs	r3, #1
 801a78a:	a81d      	add	r0, sp, #116	@ 0x74
 801a78c:	931d      	str	r3, [sp, #116]	@ 0x74
 801a78e:	f002 fcff 	bl	801d190 <__match>
 801a792:	2800      	cmp	r0, #0
 801a794:	d102      	bne.n	801a79c <_strtod_l+0x398>
 801a796:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a798:	3301      	adds	r3, #1
 801a79a:	931d      	str	r3, [sp, #116]	@ 0x74
 801a79c:	2600      	movs	r6, #0
 801a79e:	4f8c      	ldr	r7, [pc, #560]	@ (801a9d0 <_strtod_l+0x5cc>)
 801a7a0:	e66b      	b.n	801a47a <_strtod_l+0x76>
 801a7a2:	488e      	ldr	r0, [pc, #568]	@ (801a9dc <_strtod_l+0x5d8>)
 801a7a4:	f001 fb84 	bl	801beb0 <nan>
 801a7a8:	0006      	movs	r6, r0
 801a7aa:	000f      	movs	r7, r1
 801a7ac:	e665      	b.n	801a47a <_strtod_l+0x76>
 801a7ae:	9b07      	ldr	r3, [sp, #28]
 801a7b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a7b2:	1a9b      	subs	r3, r3, r2
 801a7b4:	930c      	str	r3, [sp, #48]	@ 0x30
 801a7b6:	9b08      	ldr	r3, [sp, #32]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d101      	bne.n	801a7c0 <_strtod_l+0x3bc>
 801a7bc:	9b06      	ldr	r3, [sp, #24]
 801a7be:	9308      	str	r3, [sp, #32]
 801a7c0:	9c06      	ldr	r4, [sp, #24]
 801a7c2:	2c10      	cmp	r4, #16
 801a7c4:	dd00      	ble.n	801a7c8 <_strtod_l+0x3c4>
 801a7c6:	2410      	movs	r4, #16
 801a7c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a7ca:	f7e8 fe27 	bl	800341c <__aeabi_ui2d>
 801a7ce:	9b06      	ldr	r3, [sp, #24]
 801a7d0:	0006      	movs	r6, r0
 801a7d2:	000f      	movs	r7, r1
 801a7d4:	2b09      	cmp	r3, #9
 801a7d6:	dc13      	bgt.n	801a800 <_strtod_l+0x3fc>
 801a7d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d100      	bne.n	801a7e0 <_strtod_l+0x3dc>
 801a7de:	e64c      	b.n	801a47a <_strtod_l+0x76>
 801a7e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	dc00      	bgt.n	801a7e8 <_strtod_l+0x3e4>
 801a7e6:	e07e      	b.n	801a8e6 <_strtod_l+0x4e2>
 801a7e8:	2b16      	cmp	r3, #22
 801a7ea:	dc63      	bgt.n	801a8b4 <_strtod_l+0x4b0>
 801a7ec:	497c      	ldr	r1, [pc, #496]	@ (801a9e0 <_strtod_l+0x5dc>)
 801a7ee:	00db      	lsls	r3, r3, #3
 801a7f0:	18c9      	adds	r1, r1, r3
 801a7f2:	0032      	movs	r2, r6
 801a7f4:	6808      	ldr	r0, [r1, #0]
 801a7f6:	6849      	ldr	r1, [r1, #4]
 801a7f8:	003b      	movs	r3, r7
 801a7fa:	f7e7 ff1f 	bl	800263c <__aeabi_dmul>
 801a7fe:	e7d3      	b.n	801a7a8 <_strtod_l+0x3a4>
 801a800:	0022      	movs	r2, r4
 801a802:	4b77      	ldr	r3, [pc, #476]	@ (801a9e0 <_strtod_l+0x5dc>)
 801a804:	3a09      	subs	r2, #9
 801a806:	00d2      	lsls	r2, r2, #3
 801a808:	189b      	adds	r3, r3, r2
 801a80a:	681a      	ldr	r2, [r3, #0]
 801a80c:	685b      	ldr	r3, [r3, #4]
 801a80e:	f7e7 ff15 	bl	800263c <__aeabi_dmul>
 801a812:	0006      	movs	r6, r0
 801a814:	0028      	movs	r0, r5
 801a816:	000f      	movs	r7, r1
 801a818:	f7e8 fe00 	bl	800341c <__aeabi_ui2d>
 801a81c:	000b      	movs	r3, r1
 801a81e:	0002      	movs	r2, r0
 801a820:	0039      	movs	r1, r7
 801a822:	0030      	movs	r0, r6
 801a824:	f7e6 ff62 	bl	80016ec <__aeabi_dadd>
 801a828:	9b06      	ldr	r3, [sp, #24]
 801a82a:	0006      	movs	r6, r0
 801a82c:	000f      	movs	r7, r1
 801a82e:	2b0f      	cmp	r3, #15
 801a830:	ddd2      	ble.n	801a7d8 <_strtod_l+0x3d4>
 801a832:	9b06      	ldr	r3, [sp, #24]
 801a834:	1b1c      	subs	r4, r3, r4
 801a836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a838:	18e4      	adds	r4, r4, r3
 801a83a:	2c00      	cmp	r4, #0
 801a83c:	dc00      	bgt.n	801a840 <_strtod_l+0x43c>
 801a83e:	e09b      	b.n	801a978 <_strtod_l+0x574>
 801a840:	220f      	movs	r2, #15
 801a842:	0023      	movs	r3, r4
 801a844:	4013      	ands	r3, r2
 801a846:	4214      	tst	r4, r2
 801a848:	d00a      	beq.n	801a860 <_strtod_l+0x45c>
 801a84a:	4965      	ldr	r1, [pc, #404]	@ (801a9e0 <_strtod_l+0x5dc>)
 801a84c:	00db      	lsls	r3, r3, #3
 801a84e:	18c9      	adds	r1, r1, r3
 801a850:	0032      	movs	r2, r6
 801a852:	6808      	ldr	r0, [r1, #0]
 801a854:	6849      	ldr	r1, [r1, #4]
 801a856:	003b      	movs	r3, r7
 801a858:	f7e7 fef0 	bl	800263c <__aeabi_dmul>
 801a85c:	0006      	movs	r6, r0
 801a85e:	000f      	movs	r7, r1
 801a860:	230f      	movs	r3, #15
 801a862:	439c      	bics	r4, r3
 801a864:	d073      	beq.n	801a94e <_strtod_l+0x54a>
 801a866:	3326      	adds	r3, #38	@ 0x26
 801a868:	33ff      	adds	r3, #255	@ 0xff
 801a86a:	429c      	cmp	r4, r3
 801a86c:	dd4b      	ble.n	801a906 <_strtod_l+0x502>
 801a86e:	2300      	movs	r3, #0
 801a870:	9306      	str	r3, [sp, #24]
 801a872:	9307      	str	r3, [sp, #28]
 801a874:	930d      	str	r3, [sp, #52]	@ 0x34
 801a876:	9308      	str	r3, [sp, #32]
 801a878:	2322      	movs	r3, #34	@ 0x22
 801a87a:	2600      	movs	r6, #0
 801a87c:	9a05      	ldr	r2, [sp, #20]
 801a87e:	4f54      	ldr	r7, [pc, #336]	@ (801a9d0 <_strtod_l+0x5cc>)
 801a880:	6013      	str	r3, [r2, #0]
 801a882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a884:	42b3      	cmp	r3, r6
 801a886:	d100      	bne.n	801a88a <_strtod_l+0x486>
 801a888:	e5f7      	b.n	801a47a <_strtod_l+0x76>
 801a88a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a88c:	9805      	ldr	r0, [sp, #20]
 801a88e:	f002 fe4d 	bl	801d52c <_Bfree>
 801a892:	9908      	ldr	r1, [sp, #32]
 801a894:	9805      	ldr	r0, [sp, #20]
 801a896:	f002 fe49 	bl	801d52c <_Bfree>
 801a89a:	9907      	ldr	r1, [sp, #28]
 801a89c:	9805      	ldr	r0, [sp, #20]
 801a89e:	f002 fe45 	bl	801d52c <_Bfree>
 801a8a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801a8a4:	9805      	ldr	r0, [sp, #20]
 801a8a6:	f002 fe41 	bl	801d52c <_Bfree>
 801a8aa:	9906      	ldr	r1, [sp, #24]
 801a8ac:	9805      	ldr	r0, [sp, #20]
 801a8ae:	f002 fe3d 	bl	801d52c <_Bfree>
 801a8b2:	e5e2      	b.n	801a47a <_strtod_l+0x76>
 801a8b4:	2325      	movs	r3, #37	@ 0x25
 801a8b6:	9a06      	ldr	r2, [sp, #24]
 801a8b8:	1a9b      	subs	r3, r3, r2
 801a8ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a8bc:	4293      	cmp	r3, r2
 801a8be:	dbb8      	blt.n	801a832 <_strtod_l+0x42e>
 801a8c0:	240f      	movs	r4, #15
 801a8c2:	9b06      	ldr	r3, [sp, #24]
 801a8c4:	4d46      	ldr	r5, [pc, #280]	@ (801a9e0 <_strtod_l+0x5dc>)
 801a8c6:	1ae4      	subs	r4, r4, r3
 801a8c8:	00e1      	lsls	r1, r4, #3
 801a8ca:	1869      	adds	r1, r5, r1
 801a8cc:	0032      	movs	r2, r6
 801a8ce:	6808      	ldr	r0, [r1, #0]
 801a8d0:	6849      	ldr	r1, [r1, #4]
 801a8d2:	003b      	movs	r3, r7
 801a8d4:	f7e7 feb2 	bl	800263c <__aeabi_dmul>
 801a8d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8da:	1b1c      	subs	r4, r3, r4
 801a8dc:	00e4      	lsls	r4, r4, #3
 801a8de:	192d      	adds	r5, r5, r4
 801a8e0:	682a      	ldr	r2, [r5, #0]
 801a8e2:	686b      	ldr	r3, [r5, #4]
 801a8e4:	e789      	b.n	801a7fa <_strtod_l+0x3f6>
 801a8e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8e8:	3316      	adds	r3, #22
 801a8ea:	dba2      	blt.n	801a832 <_strtod_l+0x42e>
 801a8ec:	9907      	ldr	r1, [sp, #28]
 801a8ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a8f0:	4b3b      	ldr	r3, [pc, #236]	@ (801a9e0 <_strtod_l+0x5dc>)
 801a8f2:	1a52      	subs	r2, r2, r1
 801a8f4:	00d2      	lsls	r2, r2, #3
 801a8f6:	189b      	adds	r3, r3, r2
 801a8f8:	0030      	movs	r0, r6
 801a8fa:	681a      	ldr	r2, [r3, #0]
 801a8fc:	685b      	ldr	r3, [r3, #4]
 801a8fe:	0039      	movs	r1, r7
 801a900:	f7e7 fa58 	bl	8001db4 <__aeabi_ddiv>
 801a904:	e750      	b.n	801a7a8 <_strtod_l+0x3a4>
 801a906:	2300      	movs	r3, #0
 801a908:	0030      	movs	r0, r6
 801a90a:	0039      	movs	r1, r7
 801a90c:	4d35      	ldr	r5, [pc, #212]	@ (801a9e4 <_strtod_l+0x5e0>)
 801a90e:	1124      	asrs	r4, r4, #4
 801a910:	9309      	str	r3, [sp, #36]	@ 0x24
 801a912:	2c01      	cmp	r4, #1
 801a914:	dc1e      	bgt.n	801a954 <_strtod_l+0x550>
 801a916:	2b00      	cmp	r3, #0
 801a918:	d001      	beq.n	801a91e <_strtod_l+0x51a>
 801a91a:	0006      	movs	r6, r0
 801a91c:	000f      	movs	r7, r1
 801a91e:	4b32      	ldr	r3, [pc, #200]	@ (801a9e8 <_strtod_l+0x5e4>)
 801a920:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a922:	18ff      	adds	r7, r7, r3
 801a924:	4b2f      	ldr	r3, [pc, #188]	@ (801a9e4 <_strtod_l+0x5e0>)
 801a926:	00d5      	lsls	r5, r2, #3
 801a928:	195d      	adds	r5, r3, r5
 801a92a:	0032      	movs	r2, r6
 801a92c:	6828      	ldr	r0, [r5, #0]
 801a92e:	6869      	ldr	r1, [r5, #4]
 801a930:	003b      	movs	r3, r7
 801a932:	f7e7 fe83 	bl	800263c <__aeabi_dmul>
 801a936:	4b26      	ldr	r3, [pc, #152]	@ (801a9d0 <_strtod_l+0x5cc>)
 801a938:	4a2c      	ldr	r2, [pc, #176]	@ (801a9ec <_strtod_l+0x5e8>)
 801a93a:	0006      	movs	r6, r0
 801a93c:	400b      	ands	r3, r1
 801a93e:	4293      	cmp	r3, r2
 801a940:	d895      	bhi.n	801a86e <_strtod_l+0x46a>
 801a942:	4a2b      	ldr	r2, [pc, #172]	@ (801a9f0 <_strtod_l+0x5ec>)
 801a944:	4293      	cmp	r3, r2
 801a946:	d913      	bls.n	801a970 <_strtod_l+0x56c>
 801a948:	2601      	movs	r6, #1
 801a94a:	4f2a      	ldr	r7, [pc, #168]	@ (801a9f4 <_strtod_l+0x5f0>)
 801a94c:	4276      	negs	r6, r6
 801a94e:	2300      	movs	r3, #0
 801a950:	9309      	str	r3, [sp, #36]	@ 0x24
 801a952:	e086      	b.n	801aa62 <_strtod_l+0x65e>
 801a954:	2201      	movs	r2, #1
 801a956:	4214      	tst	r4, r2
 801a958:	d004      	beq.n	801a964 <_strtod_l+0x560>
 801a95a:	682a      	ldr	r2, [r5, #0]
 801a95c:	686b      	ldr	r3, [r5, #4]
 801a95e:	f7e7 fe6d 	bl	800263c <__aeabi_dmul>
 801a962:	2301      	movs	r3, #1
 801a964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a966:	1064      	asrs	r4, r4, #1
 801a968:	3201      	adds	r2, #1
 801a96a:	9209      	str	r2, [sp, #36]	@ 0x24
 801a96c:	3508      	adds	r5, #8
 801a96e:	e7d0      	b.n	801a912 <_strtod_l+0x50e>
 801a970:	23d4      	movs	r3, #212	@ 0xd4
 801a972:	049b      	lsls	r3, r3, #18
 801a974:	18cf      	adds	r7, r1, r3
 801a976:	e7ea      	b.n	801a94e <_strtod_l+0x54a>
 801a978:	2c00      	cmp	r4, #0
 801a97a:	d0e8      	beq.n	801a94e <_strtod_l+0x54a>
 801a97c:	4264      	negs	r4, r4
 801a97e:	230f      	movs	r3, #15
 801a980:	0022      	movs	r2, r4
 801a982:	401a      	ands	r2, r3
 801a984:	421c      	tst	r4, r3
 801a986:	d00a      	beq.n	801a99e <_strtod_l+0x59a>
 801a988:	4b15      	ldr	r3, [pc, #84]	@ (801a9e0 <_strtod_l+0x5dc>)
 801a98a:	00d2      	lsls	r2, r2, #3
 801a98c:	189b      	adds	r3, r3, r2
 801a98e:	0030      	movs	r0, r6
 801a990:	681a      	ldr	r2, [r3, #0]
 801a992:	685b      	ldr	r3, [r3, #4]
 801a994:	0039      	movs	r1, r7
 801a996:	f7e7 fa0d 	bl	8001db4 <__aeabi_ddiv>
 801a99a:	0006      	movs	r6, r0
 801a99c:	000f      	movs	r7, r1
 801a99e:	1124      	asrs	r4, r4, #4
 801a9a0:	d0d5      	beq.n	801a94e <_strtod_l+0x54a>
 801a9a2:	2c1f      	cmp	r4, #31
 801a9a4:	dd28      	ble.n	801a9f8 <_strtod_l+0x5f4>
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	9306      	str	r3, [sp, #24]
 801a9aa:	9307      	str	r3, [sp, #28]
 801a9ac:	930d      	str	r3, [sp, #52]	@ 0x34
 801a9ae:	9308      	str	r3, [sp, #32]
 801a9b0:	2322      	movs	r3, #34	@ 0x22
 801a9b2:	9a05      	ldr	r2, [sp, #20]
 801a9b4:	2600      	movs	r6, #0
 801a9b6:	6013      	str	r3, [r2, #0]
 801a9b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a9ba:	2700      	movs	r7, #0
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d000      	beq.n	801a9c2 <_strtod_l+0x5be>
 801a9c0:	e763      	b.n	801a88a <_strtod_l+0x486>
 801a9c2:	e55a      	b.n	801a47a <_strtod_l+0x76>
 801a9c4:	00004e1f 	.word	0x00004e1f
 801a9c8:	08020796 	.word	0x08020796
 801a9cc:	08020638 	.word	0x08020638
 801a9d0:	7ff00000 	.word	0x7ff00000
 801a9d4:	0802078e 	.word	0x0802078e
 801a9d8:	080207c8 	.word	0x080207c8
 801a9dc:	08020a54 	.word	0x08020a54
 801a9e0:	08020940 	.word	0x08020940
 801a9e4:	08020918 	.word	0x08020918
 801a9e8:	fcb00000 	.word	0xfcb00000
 801a9ec:	7ca00000 	.word	0x7ca00000
 801a9f0:	7c900000 	.word	0x7c900000
 801a9f4:	7fefffff 	.word	0x7fefffff
 801a9f8:	2310      	movs	r3, #16
 801a9fa:	0022      	movs	r2, r4
 801a9fc:	401a      	ands	r2, r3
 801a9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 801aa00:	421c      	tst	r4, r3
 801aa02:	d001      	beq.n	801aa08 <_strtod_l+0x604>
 801aa04:	335a      	adds	r3, #90	@ 0x5a
 801aa06:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa08:	0030      	movs	r0, r6
 801aa0a:	0039      	movs	r1, r7
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	4dbf      	ldr	r5, [pc, #764]	@ (801ad0c <_strtod_l+0x908>)
 801aa10:	2201      	movs	r2, #1
 801aa12:	4214      	tst	r4, r2
 801aa14:	d004      	beq.n	801aa20 <_strtod_l+0x61c>
 801aa16:	682a      	ldr	r2, [r5, #0]
 801aa18:	686b      	ldr	r3, [r5, #4]
 801aa1a:	f7e7 fe0f 	bl	800263c <__aeabi_dmul>
 801aa1e:	2301      	movs	r3, #1
 801aa20:	1064      	asrs	r4, r4, #1
 801aa22:	3508      	adds	r5, #8
 801aa24:	2c00      	cmp	r4, #0
 801aa26:	d1f3      	bne.n	801aa10 <_strtod_l+0x60c>
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d001      	beq.n	801aa30 <_strtod_l+0x62c>
 801aa2c:	0006      	movs	r6, r0
 801aa2e:	000f      	movs	r7, r1
 801aa30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d00d      	beq.n	801aa52 <_strtod_l+0x64e>
 801aa36:	236b      	movs	r3, #107	@ 0x6b
 801aa38:	007a      	lsls	r2, r7, #1
 801aa3a:	0d52      	lsrs	r2, r2, #21
 801aa3c:	0039      	movs	r1, r7
 801aa3e:	1a9b      	subs	r3, r3, r2
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	dd06      	ble.n	801aa52 <_strtod_l+0x64e>
 801aa44:	2b1f      	cmp	r3, #31
 801aa46:	dd5a      	ble.n	801aafe <_strtod_l+0x6fa>
 801aa48:	2600      	movs	r6, #0
 801aa4a:	2b34      	cmp	r3, #52	@ 0x34
 801aa4c:	dd50      	ble.n	801aaf0 <_strtod_l+0x6ec>
 801aa4e:	27dc      	movs	r7, #220	@ 0xdc
 801aa50:	04bf      	lsls	r7, r7, #18
 801aa52:	2200      	movs	r2, #0
 801aa54:	2300      	movs	r3, #0
 801aa56:	0030      	movs	r0, r6
 801aa58:	0039      	movs	r1, r7
 801aa5a:	f7e5 fd29 	bl	80004b0 <__aeabi_dcmpeq>
 801aa5e:	2800      	cmp	r0, #0
 801aa60:	d1a1      	bne.n	801a9a6 <_strtod_l+0x5a2>
 801aa62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aa64:	9a08      	ldr	r2, [sp, #32]
 801aa66:	9300      	str	r3, [sp, #0]
 801aa68:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801aa6a:	9b06      	ldr	r3, [sp, #24]
 801aa6c:	9805      	ldr	r0, [sp, #20]
 801aa6e:	f002 fdc5 	bl	801d5fc <__s2b>
 801aa72:	900d      	str	r0, [sp, #52]	@ 0x34
 801aa74:	2800      	cmp	r0, #0
 801aa76:	d100      	bne.n	801aa7a <_strtod_l+0x676>
 801aa78:	e6f9      	b.n	801a86e <_strtod_l+0x46a>
 801aa7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa7c:	9907      	ldr	r1, [sp, #28]
 801aa7e:	17da      	asrs	r2, r3, #31
 801aa80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa82:	1a5b      	subs	r3, r3, r1
 801aa84:	401a      	ands	r2, r3
 801aa86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa88:	9217      	str	r2, [sp, #92]	@ 0x5c
 801aa8a:	43db      	mvns	r3, r3
 801aa8c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa8e:	17db      	asrs	r3, r3, #31
 801aa90:	401a      	ands	r2, r3
 801aa92:	2300      	movs	r3, #0
 801aa94:	921a      	str	r2, [sp, #104]	@ 0x68
 801aa96:	9306      	str	r3, [sp, #24]
 801aa98:	9307      	str	r3, [sp, #28]
 801aa9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aa9c:	9805      	ldr	r0, [sp, #20]
 801aa9e:	6859      	ldr	r1, [r3, #4]
 801aaa0:	f002 fd00 	bl	801d4a4 <_Balloc>
 801aaa4:	9008      	str	r0, [sp, #32]
 801aaa6:	2800      	cmp	r0, #0
 801aaa8:	d100      	bne.n	801aaac <_strtod_l+0x6a8>
 801aaaa:	e6e5      	b.n	801a878 <_strtod_l+0x474>
 801aaac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aaae:	300c      	adds	r0, #12
 801aab0:	0019      	movs	r1, r3
 801aab2:	691a      	ldr	r2, [r3, #16]
 801aab4:	310c      	adds	r1, #12
 801aab6:	3202      	adds	r2, #2
 801aab8:	0092      	lsls	r2, r2, #2
 801aaba:	f001 f9ef 	bl	801be9c <memcpy>
 801aabe:	ab20      	add	r3, sp, #128	@ 0x80
 801aac0:	9301      	str	r3, [sp, #4]
 801aac2:	ab1f      	add	r3, sp, #124	@ 0x7c
 801aac4:	9300      	str	r3, [sp, #0]
 801aac6:	0032      	movs	r2, r6
 801aac8:	003b      	movs	r3, r7
 801aaca:	9805      	ldr	r0, [sp, #20]
 801aacc:	9610      	str	r6, [sp, #64]	@ 0x40
 801aace:	9711      	str	r7, [sp, #68]	@ 0x44
 801aad0:	f003 f8e4 	bl	801dc9c <__d2b>
 801aad4:	901e      	str	r0, [sp, #120]	@ 0x78
 801aad6:	2800      	cmp	r0, #0
 801aad8:	d100      	bne.n	801aadc <_strtod_l+0x6d8>
 801aada:	e6cd      	b.n	801a878 <_strtod_l+0x474>
 801aadc:	2101      	movs	r1, #1
 801aade:	9805      	ldr	r0, [sp, #20]
 801aae0:	f002 fe28 	bl	801d734 <__i2b>
 801aae4:	9007      	str	r0, [sp, #28]
 801aae6:	2800      	cmp	r0, #0
 801aae8:	d10e      	bne.n	801ab08 <_strtod_l+0x704>
 801aaea:	2300      	movs	r3, #0
 801aaec:	9307      	str	r3, [sp, #28]
 801aaee:	e6c3      	b.n	801a878 <_strtod_l+0x474>
 801aaf0:	234b      	movs	r3, #75	@ 0x4b
 801aaf2:	1a9a      	subs	r2, r3, r2
 801aaf4:	3b4c      	subs	r3, #76	@ 0x4c
 801aaf6:	4093      	lsls	r3, r2
 801aaf8:	4019      	ands	r1, r3
 801aafa:	000f      	movs	r7, r1
 801aafc:	e7a9      	b.n	801aa52 <_strtod_l+0x64e>
 801aafe:	2201      	movs	r2, #1
 801ab00:	4252      	negs	r2, r2
 801ab02:	409a      	lsls	r2, r3
 801ab04:	4016      	ands	r6, r2
 801ab06:	e7a4      	b.n	801aa52 <_strtod_l+0x64e>
 801ab08:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ab0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ab0c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ab0e:	1ad4      	subs	r4, r2, r3
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	db01      	blt.n	801ab18 <_strtod_l+0x714>
 801ab14:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ab16:	195d      	adds	r5, r3, r5
 801ab18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ab1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ab1c:	1a5b      	subs	r3, r3, r1
 801ab1e:	2136      	movs	r1, #54	@ 0x36
 801ab20:	189b      	adds	r3, r3, r2
 801ab22:	1a8a      	subs	r2, r1, r2
 801ab24:	497a      	ldr	r1, [pc, #488]	@ (801ad10 <_strtod_l+0x90c>)
 801ab26:	2001      	movs	r0, #1
 801ab28:	468c      	mov	ip, r1
 801ab2a:	2100      	movs	r1, #0
 801ab2c:	3b01      	subs	r3, #1
 801ab2e:	9116      	str	r1, [sp, #88]	@ 0x58
 801ab30:	9014      	str	r0, [sp, #80]	@ 0x50
 801ab32:	4563      	cmp	r3, ip
 801ab34:	da06      	bge.n	801ab44 <_strtod_l+0x740>
 801ab36:	4661      	mov	r1, ip
 801ab38:	1ac9      	subs	r1, r1, r3
 801ab3a:	1a52      	subs	r2, r2, r1
 801ab3c:	291f      	cmp	r1, #31
 801ab3e:	dc3f      	bgt.n	801abc0 <_strtod_l+0x7bc>
 801ab40:	4088      	lsls	r0, r1
 801ab42:	9014      	str	r0, [sp, #80]	@ 0x50
 801ab44:	18ab      	adds	r3, r5, r2
 801ab46:	930e      	str	r3, [sp, #56]	@ 0x38
 801ab48:	18a4      	adds	r4, r4, r2
 801ab4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab4e:	191c      	adds	r4, r3, r4
 801ab50:	002b      	movs	r3, r5
 801ab52:	4295      	cmp	r5, r2
 801ab54:	dd00      	ble.n	801ab58 <_strtod_l+0x754>
 801ab56:	0013      	movs	r3, r2
 801ab58:	42a3      	cmp	r3, r4
 801ab5a:	dd00      	ble.n	801ab5e <_strtod_l+0x75a>
 801ab5c:	0023      	movs	r3, r4
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	dd04      	ble.n	801ab6c <_strtod_l+0x768>
 801ab62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab64:	1ae4      	subs	r4, r4, r3
 801ab66:	1ad2      	subs	r2, r2, r3
 801ab68:	920e      	str	r2, [sp, #56]	@ 0x38
 801ab6a:	1aed      	subs	r5, r5, r3
 801ab6c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	dd16      	ble.n	801aba0 <_strtod_l+0x79c>
 801ab72:	001a      	movs	r2, r3
 801ab74:	9907      	ldr	r1, [sp, #28]
 801ab76:	9805      	ldr	r0, [sp, #20]
 801ab78:	f002 fea6 	bl	801d8c8 <__pow5mult>
 801ab7c:	9007      	str	r0, [sp, #28]
 801ab7e:	2800      	cmp	r0, #0
 801ab80:	d0b3      	beq.n	801aaea <_strtod_l+0x6e6>
 801ab82:	0001      	movs	r1, r0
 801ab84:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ab86:	9805      	ldr	r0, [sp, #20]
 801ab88:	f002 fdec 	bl	801d764 <__multiply>
 801ab8c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ab8e:	2800      	cmp	r0, #0
 801ab90:	d100      	bne.n	801ab94 <_strtod_l+0x790>
 801ab92:	e671      	b.n	801a878 <_strtod_l+0x474>
 801ab94:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ab96:	9805      	ldr	r0, [sp, #20]
 801ab98:	f002 fcc8 	bl	801d52c <_Bfree>
 801ab9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ab9e:	931e      	str	r3, [sp, #120]	@ 0x78
 801aba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	dc12      	bgt.n	801abcc <_strtod_l+0x7c8>
 801aba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	dd18      	ble.n	801abde <_strtod_l+0x7da>
 801abac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801abae:	9908      	ldr	r1, [sp, #32]
 801abb0:	9805      	ldr	r0, [sp, #20]
 801abb2:	f002 fe89 	bl	801d8c8 <__pow5mult>
 801abb6:	9008      	str	r0, [sp, #32]
 801abb8:	2800      	cmp	r0, #0
 801abba:	d110      	bne.n	801abde <_strtod_l+0x7da>
 801abbc:	2300      	movs	r3, #0
 801abbe:	e65a      	b.n	801a876 <_strtod_l+0x472>
 801abc0:	4954      	ldr	r1, [pc, #336]	@ (801ad14 <_strtod_l+0x910>)
 801abc2:	1acb      	subs	r3, r1, r3
 801abc4:	0001      	movs	r1, r0
 801abc6:	4099      	lsls	r1, r3
 801abc8:	9116      	str	r1, [sp, #88]	@ 0x58
 801abca:	e7ba      	b.n	801ab42 <_strtod_l+0x73e>
 801abcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801abce:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801abd0:	9805      	ldr	r0, [sp, #20]
 801abd2:	f002 fed5 	bl	801d980 <__lshift>
 801abd6:	901e      	str	r0, [sp, #120]	@ 0x78
 801abd8:	2800      	cmp	r0, #0
 801abda:	d1e4      	bne.n	801aba6 <_strtod_l+0x7a2>
 801abdc:	e64c      	b.n	801a878 <_strtod_l+0x474>
 801abde:	2c00      	cmp	r4, #0
 801abe0:	dd07      	ble.n	801abf2 <_strtod_l+0x7ee>
 801abe2:	0022      	movs	r2, r4
 801abe4:	9908      	ldr	r1, [sp, #32]
 801abe6:	9805      	ldr	r0, [sp, #20]
 801abe8:	f002 feca 	bl	801d980 <__lshift>
 801abec:	9008      	str	r0, [sp, #32]
 801abee:	2800      	cmp	r0, #0
 801abf0:	d0e4      	beq.n	801abbc <_strtod_l+0x7b8>
 801abf2:	2d00      	cmp	r5, #0
 801abf4:	dd08      	ble.n	801ac08 <_strtod_l+0x804>
 801abf6:	002a      	movs	r2, r5
 801abf8:	9907      	ldr	r1, [sp, #28]
 801abfa:	9805      	ldr	r0, [sp, #20]
 801abfc:	f002 fec0 	bl	801d980 <__lshift>
 801ac00:	9007      	str	r0, [sp, #28]
 801ac02:	2800      	cmp	r0, #0
 801ac04:	d100      	bne.n	801ac08 <_strtod_l+0x804>
 801ac06:	e637      	b.n	801a878 <_strtod_l+0x474>
 801ac08:	9a08      	ldr	r2, [sp, #32]
 801ac0a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ac0c:	9805      	ldr	r0, [sp, #20]
 801ac0e:	f002 ff3f 	bl	801da90 <__mdiff>
 801ac12:	9006      	str	r0, [sp, #24]
 801ac14:	2800      	cmp	r0, #0
 801ac16:	d100      	bne.n	801ac1a <_strtod_l+0x816>
 801ac18:	e62e      	b.n	801a878 <_strtod_l+0x474>
 801ac1a:	68c3      	ldr	r3, [r0, #12]
 801ac1c:	9907      	ldr	r1, [sp, #28]
 801ac1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ac20:	2300      	movs	r3, #0
 801ac22:	60c3      	str	r3, [r0, #12]
 801ac24:	f002 ff18 	bl	801da58 <__mcmp>
 801ac28:	2800      	cmp	r0, #0
 801ac2a:	da3b      	bge.n	801aca4 <_strtod_l+0x8a0>
 801ac2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ac2e:	4333      	orrs	r3, r6
 801ac30:	d167      	bne.n	801ad02 <_strtod_l+0x8fe>
 801ac32:	033b      	lsls	r3, r7, #12
 801ac34:	d165      	bne.n	801ad02 <_strtod_l+0x8fe>
 801ac36:	22d6      	movs	r2, #214	@ 0xd6
 801ac38:	4b37      	ldr	r3, [pc, #220]	@ (801ad18 <_strtod_l+0x914>)
 801ac3a:	04d2      	lsls	r2, r2, #19
 801ac3c:	403b      	ands	r3, r7
 801ac3e:	4293      	cmp	r3, r2
 801ac40:	d95f      	bls.n	801ad02 <_strtod_l+0x8fe>
 801ac42:	9b06      	ldr	r3, [sp, #24]
 801ac44:	695b      	ldr	r3, [r3, #20]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d103      	bne.n	801ac52 <_strtod_l+0x84e>
 801ac4a:	9b06      	ldr	r3, [sp, #24]
 801ac4c:	691b      	ldr	r3, [r3, #16]
 801ac4e:	2b01      	cmp	r3, #1
 801ac50:	dd57      	ble.n	801ad02 <_strtod_l+0x8fe>
 801ac52:	9906      	ldr	r1, [sp, #24]
 801ac54:	2201      	movs	r2, #1
 801ac56:	9805      	ldr	r0, [sp, #20]
 801ac58:	f002 fe92 	bl	801d980 <__lshift>
 801ac5c:	9907      	ldr	r1, [sp, #28]
 801ac5e:	9006      	str	r0, [sp, #24]
 801ac60:	f002 fefa 	bl	801da58 <__mcmp>
 801ac64:	2800      	cmp	r0, #0
 801ac66:	dd4c      	ble.n	801ad02 <_strtod_l+0x8fe>
 801ac68:	4b2b      	ldr	r3, [pc, #172]	@ (801ad18 <_strtod_l+0x914>)
 801ac6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac6c:	403b      	ands	r3, r7
 801ac6e:	2a00      	cmp	r2, #0
 801ac70:	d074      	beq.n	801ad5c <_strtod_l+0x958>
 801ac72:	22d6      	movs	r2, #214	@ 0xd6
 801ac74:	04d2      	lsls	r2, r2, #19
 801ac76:	4293      	cmp	r3, r2
 801ac78:	d870      	bhi.n	801ad5c <_strtod_l+0x958>
 801ac7a:	22dc      	movs	r2, #220	@ 0xdc
 801ac7c:	0492      	lsls	r2, r2, #18
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d800      	bhi.n	801ac84 <_strtod_l+0x880>
 801ac82:	e695      	b.n	801a9b0 <_strtod_l+0x5ac>
 801ac84:	0030      	movs	r0, r6
 801ac86:	0039      	movs	r1, r7
 801ac88:	4b24      	ldr	r3, [pc, #144]	@ (801ad1c <_strtod_l+0x918>)
 801ac8a:	2200      	movs	r2, #0
 801ac8c:	f7e7 fcd6 	bl	800263c <__aeabi_dmul>
 801ac90:	4b21      	ldr	r3, [pc, #132]	@ (801ad18 <_strtod_l+0x914>)
 801ac92:	0006      	movs	r6, r0
 801ac94:	000f      	movs	r7, r1
 801ac96:	420b      	tst	r3, r1
 801ac98:	d000      	beq.n	801ac9c <_strtod_l+0x898>
 801ac9a:	e5f6      	b.n	801a88a <_strtod_l+0x486>
 801ac9c:	2322      	movs	r3, #34	@ 0x22
 801ac9e:	9a05      	ldr	r2, [sp, #20]
 801aca0:	6013      	str	r3, [r2, #0]
 801aca2:	e5f2      	b.n	801a88a <_strtod_l+0x486>
 801aca4:	970e      	str	r7, [sp, #56]	@ 0x38
 801aca6:	2800      	cmp	r0, #0
 801aca8:	d175      	bne.n	801ad96 <_strtod_l+0x992>
 801acaa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801acac:	033b      	lsls	r3, r7, #12
 801acae:	0b1b      	lsrs	r3, r3, #12
 801acb0:	2a00      	cmp	r2, #0
 801acb2:	d039      	beq.n	801ad28 <_strtod_l+0x924>
 801acb4:	4a1a      	ldr	r2, [pc, #104]	@ (801ad20 <_strtod_l+0x91c>)
 801acb6:	4293      	cmp	r3, r2
 801acb8:	d138      	bne.n	801ad2c <_strtod_l+0x928>
 801acba:	2101      	movs	r1, #1
 801acbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acbe:	4249      	negs	r1, r1
 801acc0:	0032      	movs	r2, r6
 801acc2:	0008      	movs	r0, r1
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d00b      	beq.n	801ace0 <_strtod_l+0x8dc>
 801acc8:	24d4      	movs	r4, #212	@ 0xd4
 801acca:	4b13      	ldr	r3, [pc, #76]	@ (801ad18 <_strtod_l+0x914>)
 801accc:	0008      	movs	r0, r1
 801acce:	403b      	ands	r3, r7
 801acd0:	04e4      	lsls	r4, r4, #19
 801acd2:	42a3      	cmp	r3, r4
 801acd4:	d804      	bhi.n	801ace0 <_strtod_l+0x8dc>
 801acd6:	306c      	adds	r0, #108	@ 0x6c
 801acd8:	0d1b      	lsrs	r3, r3, #20
 801acda:	1ac3      	subs	r3, r0, r3
 801acdc:	4099      	lsls	r1, r3
 801acde:	0008      	movs	r0, r1
 801ace0:	4282      	cmp	r2, r0
 801ace2:	d123      	bne.n	801ad2c <_strtod_l+0x928>
 801ace4:	4b0f      	ldr	r3, [pc, #60]	@ (801ad24 <_strtod_l+0x920>)
 801ace6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ace8:	4299      	cmp	r1, r3
 801acea:	d102      	bne.n	801acf2 <_strtod_l+0x8ee>
 801acec:	3201      	adds	r2, #1
 801acee:	d100      	bne.n	801acf2 <_strtod_l+0x8ee>
 801acf0:	e5c2      	b.n	801a878 <_strtod_l+0x474>
 801acf2:	4b09      	ldr	r3, [pc, #36]	@ (801ad18 <_strtod_l+0x914>)
 801acf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801acf6:	2600      	movs	r6, #0
 801acf8:	401a      	ands	r2, r3
 801acfa:	0013      	movs	r3, r2
 801acfc:	2280      	movs	r2, #128	@ 0x80
 801acfe:	0352      	lsls	r2, r2, #13
 801ad00:	189f      	adds	r7, r3, r2
 801ad02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d1bd      	bne.n	801ac84 <_strtod_l+0x880>
 801ad08:	e5bf      	b.n	801a88a <_strtod_l+0x486>
 801ad0a:	46c0      	nop			@ (mov r8, r8)
 801ad0c:	08020660 	.word	0x08020660
 801ad10:	fffffc02 	.word	0xfffffc02
 801ad14:	fffffbe2 	.word	0xfffffbe2
 801ad18:	7ff00000 	.word	0x7ff00000
 801ad1c:	39500000 	.word	0x39500000
 801ad20:	000fffff 	.word	0x000fffff
 801ad24:	7fefffff 	.word	0x7fefffff
 801ad28:	4333      	orrs	r3, r6
 801ad2a:	d09d      	beq.n	801ac68 <_strtod_l+0x864>
 801ad2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d01c      	beq.n	801ad6c <_strtod_l+0x968>
 801ad32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ad36:	4213      	tst	r3, r2
 801ad38:	d0e3      	beq.n	801ad02 <_strtod_l+0x8fe>
 801ad3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ad3c:	0030      	movs	r0, r6
 801ad3e:	0039      	movs	r1, r7
 801ad40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d016      	beq.n	801ad74 <_strtod_l+0x970>
 801ad46:	f7ff fb45 	bl	801a3d4 <sulp>
 801ad4a:	0002      	movs	r2, r0
 801ad4c:	000b      	movs	r3, r1
 801ad4e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ad50:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ad52:	f7e6 fccb 	bl	80016ec <__aeabi_dadd>
 801ad56:	0006      	movs	r6, r0
 801ad58:	000f      	movs	r7, r1
 801ad5a:	e7d2      	b.n	801ad02 <_strtod_l+0x8fe>
 801ad5c:	2601      	movs	r6, #1
 801ad5e:	4a92      	ldr	r2, [pc, #584]	@ (801afa8 <_strtod_l+0xba4>)
 801ad60:	4276      	negs	r6, r6
 801ad62:	189b      	adds	r3, r3, r2
 801ad64:	4a91      	ldr	r2, [pc, #580]	@ (801afac <_strtod_l+0xba8>)
 801ad66:	431a      	orrs	r2, r3
 801ad68:	0017      	movs	r7, r2
 801ad6a:	e7ca      	b.n	801ad02 <_strtod_l+0x8fe>
 801ad6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ad6e:	4233      	tst	r3, r6
 801ad70:	d0c7      	beq.n	801ad02 <_strtod_l+0x8fe>
 801ad72:	e7e2      	b.n	801ad3a <_strtod_l+0x936>
 801ad74:	f7ff fb2e 	bl	801a3d4 <sulp>
 801ad78:	0002      	movs	r2, r0
 801ad7a:	000b      	movs	r3, r1
 801ad7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ad7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ad80:	f7e7 ff24 	bl	8002bcc <__aeabi_dsub>
 801ad84:	2200      	movs	r2, #0
 801ad86:	2300      	movs	r3, #0
 801ad88:	0006      	movs	r6, r0
 801ad8a:	000f      	movs	r7, r1
 801ad8c:	f7e5 fb90 	bl	80004b0 <__aeabi_dcmpeq>
 801ad90:	2800      	cmp	r0, #0
 801ad92:	d0b6      	beq.n	801ad02 <_strtod_l+0x8fe>
 801ad94:	e60c      	b.n	801a9b0 <_strtod_l+0x5ac>
 801ad96:	9907      	ldr	r1, [sp, #28]
 801ad98:	9806      	ldr	r0, [sp, #24]
 801ad9a:	f002 ffdf 	bl	801dd5c <__ratio>
 801ad9e:	2380      	movs	r3, #128	@ 0x80
 801ada0:	2200      	movs	r2, #0
 801ada2:	05db      	lsls	r3, r3, #23
 801ada4:	0004      	movs	r4, r0
 801ada6:	000d      	movs	r5, r1
 801ada8:	f7e5 fb92 	bl	80004d0 <__aeabi_dcmple>
 801adac:	2800      	cmp	r0, #0
 801adae:	d06c      	beq.n	801ae8a <_strtod_l+0xa86>
 801adb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d177      	bne.n	801aea6 <_strtod_l+0xaa2>
 801adb6:	2e00      	cmp	r6, #0
 801adb8:	d157      	bne.n	801ae6a <_strtod_l+0xa66>
 801adba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801adbc:	031b      	lsls	r3, r3, #12
 801adbe:	d15a      	bne.n	801ae76 <_strtod_l+0xa72>
 801adc0:	2200      	movs	r2, #0
 801adc2:	0020      	movs	r0, r4
 801adc4:	0029      	movs	r1, r5
 801adc6:	4b7a      	ldr	r3, [pc, #488]	@ (801afb0 <_strtod_l+0xbac>)
 801adc8:	f7e5 fb78 	bl	80004bc <__aeabi_dcmplt>
 801adcc:	2800      	cmp	r0, #0
 801adce:	d159      	bne.n	801ae84 <_strtod_l+0xa80>
 801add0:	0020      	movs	r0, r4
 801add2:	0029      	movs	r1, r5
 801add4:	2200      	movs	r2, #0
 801add6:	4b77      	ldr	r3, [pc, #476]	@ (801afb4 <_strtod_l+0xbb0>)
 801add8:	f7e7 fc30 	bl	800263c <__aeabi_dmul>
 801addc:	0004      	movs	r4, r0
 801adde:	000d      	movs	r5, r1
 801ade0:	2380      	movs	r3, #128	@ 0x80
 801ade2:	061b      	lsls	r3, r3, #24
 801ade4:	18eb      	adds	r3, r5, r3
 801ade6:	940a      	str	r4, [sp, #40]	@ 0x28
 801ade8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801adea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801adec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801adee:	9214      	str	r2, [sp, #80]	@ 0x50
 801adf0:	9315      	str	r3, [sp, #84]	@ 0x54
 801adf2:	4a71      	ldr	r2, [pc, #452]	@ (801afb8 <_strtod_l+0xbb4>)
 801adf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801adf6:	4013      	ands	r3, r2
 801adf8:	9316      	str	r3, [sp, #88]	@ 0x58
 801adfa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801adfc:	4b6f      	ldr	r3, [pc, #444]	@ (801afbc <_strtod_l+0xbb8>)
 801adfe:	429a      	cmp	r2, r3
 801ae00:	d000      	beq.n	801ae04 <_strtod_l+0xa00>
 801ae02:	e087      	b.n	801af14 <_strtod_l+0xb10>
 801ae04:	4a6e      	ldr	r2, [pc, #440]	@ (801afc0 <_strtod_l+0xbbc>)
 801ae06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae08:	4694      	mov	ip, r2
 801ae0a:	4463      	add	r3, ip
 801ae0c:	001f      	movs	r7, r3
 801ae0e:	0030      	movs	r0, r6
 801ae10:	0019      	movs	r1, r3
 801ae12:	f002 fed7 	bl	801dbc4 <__ulp>
 801ae16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ae18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ae1a:	f7e7 fc0f 	bl	800263c <__aeabi_dmul>
 801ae1e:	0032      	movs	r2, r6
 801ae20:	003b      	movs	r3, r7
 801ae22:	f7e6 fc63 	bl	80016ec <__aeabi_dadd>
 801ae26:	4a64      	ldr	r2, [pc, #400]	@ (801afb8 <_strtod_l+0xbb4>)
 801ae28:	4b66      	ldr	r3, [pc, #408]	@ (801afc4 <_strtod_l+0xbc0>)
 801ae2a:	0006      	movs	r6, r0
 801ae2c:	400a      	ands	r2, r1
 801ae2e:	429a      	cmp	r2, r3
 801ae30:	d940      	bls.n	801aeb4 <_strtod_l+0xab0>
 801ae32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ae34:	4a64      	ldr	r2, [pc, #400]	@ (801afc8 <_strtod_l+0xbc4>)
 801ae36:	4293      	cmp	r3, r2
 801ae38:	d103      	bne.n	801ae42 <_strtod_l+0xa3e>
 801ae3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ae3c:	3301      	adds	r3, #1
 801ae3e:	d100      	bne.n	801ae42 <_strtod_l+0xa3e>
 801ae40:	e51a      	b.n	801a878 <_strtod_l+0x474>
 801ae42:	2601      	movs	r6, #1
 801ae44:	4f60      	ldr	r7, [pc, #384]	@ (801afc8 <_strtod_l+0xbc4>)
 801ae46:	4276      	negs	r6, r6
 801ae48:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ae4a:	9805      	ldr	r0, [sp, #20]
 801ae4c:	f002 fb6e 	bl	801d52c <_Bfree>
 801ae50:	9908      	ldr	r1, [sp, #32]
 801ae52:	9805      	ldr	r0, [sp, #20]
 801ae54:	f002 fb6a 	bl	801d52c <_Bfree>
 801ae58:	9907      	ldr	r1, [sp, #28]
 801ae5a:	9805      	ldr	r0, [sp, #20]
 801ae5c:	f002 fb66 	bl	801d52c <_Bfree>
 801ae60:	9906      	ldr	r1, [sp, #24]
 801ae62:	9805      	ldr	r0, [sp, #20]
 801ae64:	f002 fb62 	bl	801d52c <_Bfree>
 801ae68:	e617      	b.n	801aa9a <_strtod_l+0x696>
 801ae6a:	2e01      	cmp	r6, #1
 801ae6c:	d103      	bne.n	801ae76 <_strtod_l+0xa72>
 801ae6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d100      	bne.n	801ae76 <_strtod_l+0xa72>
 801ae74:	e59c      	b.n	801a9b0 <_strtod_l+0x5ac>
 801ae76:	2300      	movs	r3, #0
 801ae78:	4c54      	ldr	r4, [pc, #336]	@ (801afcc <_strtod_l+0xbc8>)
 801ae7a:	4d4d      	ldr	r5, [pc, #308]	@ (801afb0 <_strtod_l+0xbac>)
 801ae7c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ae80:	2400      	movs	r4, #0
 801ae82:	e7b2      	b.n	801adea <_strtod_l+0x9e6>
 801ae84:	2400      	movs	r4, #0
 801ae86:	4d4b      	ldr	r5, [pc, #300]	@ (801afb4 <_strtod_l+0xbb0>)
 801ae88:	e7aa      	b.n	801ade0 <_strtod_l+0x9dc>
 801ae8a:	0020      	movs	r0, r4
 801ae8c:	0029      	movs	r1, r5
 801ae8e:	4b49      	ldr	r3, [pc, #292]	@ (801afb4 <_strtod_l+0xbb0>)
 801ae90:	2200      	movs	r2, #0
 801ae92:	f7e7 fbd3 	bl	800263c <__aeabi_dmul>
 801ae96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ae98:	0004      	movs	r4, r0
 801ae9a:	000d      	movs	r5, r1
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d09f      	beq.n	801ade0 <_strtod_l+0x9dc>
 801aea0:	940a      	str	r4, [sp, #40]	@ 0x28
 801aea2:	950b      	str	r5, [sp, #44]	@ 0x2c
 801aea4:	e7a1      	b.n	801adea <_strtod_l+0x9e6>
 801aea6:	2300      	movs	r3, #0
 801aea8:	4c41      	ldr	r4, [pc, #260]	@ (801afb0 <_strtod_l+0xbac>)
 801aeaa:	0025      	movs	r5, r4
 801aeac:	930a      	str	r3, [sp, #40]	@ 0x28
 801aeae:	940b      	str	r4, [sp, #44]	@ 0x2c
 801aeb0:	001c      	movs	r4, r3
 801aeb2:	e79a      	b.n	801adea <_strtod_l+0x9e6>
 801aeb4:	23d4      	movs	r3, #212	@ 0xd4
 801aeb6:	049b      	lsls	r3, r3, #18
 801aeb8:	18cf      	adds	r7, r1, r3
 801aeba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aebc:	9710      	str	r7, [sp, #64]	@ 0x40
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d1c2      	bne.n	801ae48 <_strtod_l+0xa44>
 801aec2:	4b3d      	ldr	r3, [pc, #244]	@ (801afb8 <_strtod_l+0xbb4>)
 801aec4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801aec6:	403b      	ands	r3, r7
 801aec8:	429a      	cmp	r2, r3
 801aeca:	d1bd      	bne.n	801ae48 <_strtod_l+0xa44>
 801aecc:	0020      	movs	r0, r4
 801aece:	0029      	movs	r1, r5
 801aed0:	f7e5 fbda 	bl	8000688 <__aeabi_d2lz>
 801aed4:	f7e5 fc12 	bl	80006fc <__aeabi_l2d>
 801aed8:	0002      	movs	r2, r0
 801aeda:	000b      	movs	r3, r1
 801aedc:	0020      	movs	r0, r4
 801aede:	0029      	movs	r1, r5
 801aee0:	f7e7 fe74 	bl	8002bcc <__aeabi_dsub>
 801aee4:	033c      	lsls	r4, r7, #12
 801aee6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801aee8:	0b24      	lsrs	r4, r4, #12
 801aeea:	4334      	orrs	r4, r6
 801aeec:	900e      	str	r0, [sp, #56]	@ 0x38
 801aeee:	910f      	str	r1, [sp, #60]	@ 0x3c
 801aef0:	4a37      	ldr	r2, [pc, #220]	@ (801afd0 <_strtod_l+0xbcc>)
 801aef2:	431c      	orrs	r4, r3
 801aef4:	d052      	beq.n	801af9c <_strtod_l+0xb98>
 801aef6:	4b37      	ldr	r3, [pc, #220]	@ (801afd4 <_strtod_l+0xbd0>)
 801aef8:	f7e5 fae0 	bl	80004bc <__aeabi_dcmplt>
 801aefc:	2800      	cmp	r0, #0
 801aefe:	d000      	beq.n	801af02 <_strtod_l+0xafe>
 801af00:	e4c3      	b.n	801a88a <_strtod_l+0x486>
 801af02:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801af04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801af06:	4a34      	ldr	r2, [pc, #208]	@ (801afd8 <_strtod_l+0xbd4>)
 801af08:	4b2a      	ldr	r3, [pc, #168]	@ (801afb4 <_strtod_l+0xbb0>)
 801af0a:	f7e5 faeb 	bl	80004e4 <__aeabi_dcmpgt>
 801af0e:	2800      	cmp	r0, #0
 801af10:	d09a      	beq.n	801ae48 <_strtod_l+0xa44>
 801af12:	e4ba      	b.n	801a88a <_strtod_l+0x486>
 801af14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af16:	2b00      	cmp	r3, #0
 801af18:	d02a      	beq.n	801af70 <_strtod_l+0xb6c>
 801af1a:	23d4      	movs	r3, #212	@ 0xd4
 801af1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801af1e:	04db      	lsls	r3, r3, #19
 801af20:	429a      	cmp	r2, r3
 801af22:	d825      	bhi.n	801af70 <_strtod_l+0xb6c>
 801af24:	0020      	movs	r0, r4
 801af26:	0029      	movs	r1, r5
 801af28:	4a2c      	ldr	r2, [pc, #176]	@ (801afdc <_strtod_l+0xbd8>)
 801af2a:	4b2d      	ldr	r3, [pc, #180]	@ (801afe0 <_strtod_l+0xbdc>)
 801af2c:	f7e5 fad0 	bl	80004d0 <__aeabi_dcmple>
 801af30:	2800      	cmp	r0, #0
 801af32:	d016      	beq.n	801af62 <_strtod_l+0xb5e>
 801af34:	0020      	movs	r0, r4
 801af36:	0029      	movs	r1, r5
 801af38:	f7e5 fb88 	bl	800064c <__aeabi_d2uiz>
 801af3c:	2800      	cmp	r0, #0
 801af3e:	d100      	bne.n	801af42 <_strtod_l+0xb3e>
 801af40:	3001      	adds	r0, #1
 801af42:	f7e8 fa6b 	bl	800341c <__aeabi_ui2d>
 801af46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801af48:	0004      	movs	r4, r0
 801af4a:	000d      	movs	r5, r1
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d122      	bne.n	801af96 <_strtod_l+0xb92>
 801af50:	2380      	movs	r3, #128	@ 0x80
 801af52:	061b      	lsls	r3, r3, #24
 801af54:	18cb      	adds	r3, r1, r3
 801af56:	9018      	str	r0, [sp, #96]	@ 0x60
 801af58:	9319      	str	r3, [sp, #100]	@ 0x64
 801af5a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801af5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801af5e:	9214      	str	r2, [sp, #80]	@ 0x50
 801af60:	9315      	str	r3, [sp, #84]	@ 0x54
 801af62:	22d6      	movs	r2, #214	@ 0xd6
 801af64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801af66:	04d2      	lsls	r2, r2, #19
 801af68:	189b      	adds	r3, r3, r2
 801af6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801af6c:	1a9b      	subs	r3, r3, r2
 801af6e:	9315      	str	r3, [sp, #84]	@ 0x54
 801af70:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801af72:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801af74:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801af76:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801af78:	f002 fe24 	bl	801dbc4 <__ulp>
 801af7c:	0002      	movs	r2, r0
 801af7e:	000b      	movs	r3, r1
 801af80:	0030      	movs	r0, r6
 801af82:	0039      	movs	r1, r7
 801af84:	f7e7 fb5a 	bl	800263c <__aeabi_dmul>
 801af88:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801af8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801af8c:	f7e6 fbae 	bl	80016ec <__aeabi_dadd>
 801af90:	0006      	movs	r6, r0
 801af92:	000f      	movs	r7, r1
 801af94:	e791      	b.n	801aeba <_strtod_l+0xab6>
 801af96:	9418      	str	r4, [sp, #96]	@ 0x60
 801af98:	9519      	str	r5, [sp, #100]	@ 0x64
 801af9a:	e7de      	b.n	801af5a <_strtod_l+0xb56>
 801af9c:	4b11      	ldr	r3, [pc, #68]	@ (801afe4 <_strtod_l+0xbe0>)
 801af9e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801afa0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801afa2:	f7e5 fa8b 	bl	80004bc <__aeabi_dcmplt>
 801afa6:	e7b2      	b.n	801af0e <_strtod_l+0xb0a>
 801afa8:	fff00000 	.word	0xfff00000
 801afac:	000fffff 	.word	0x000fffff
 801afb0:	3ff00000 	.word	0x3ff00000
 801afb4:	3fe00000 	.word	0x3fe00000
 801afb8:	7ff00000 	.word	0x7ff00000
 801afbc:	7fe00000 	.word	0x7fe00000
 801afc0:	fcb00000 	.word	0xfcb00000
 801afc4:	7c9fffff 	.word	0x7c9fffff
 801afc8:	7fefffff 	.word	0x7fefffff
 801afcc:	bff00000 	.word	0xbff00000
 801afd0:	94a03595 	.word	0x94a03595
 801afd4:	3fdfffff 	.word	0x3fdfffff
 801afd8:	35afe535 	.word	0x35afe535
 801afdc:	ffc00000 	.word	0xffc00000
 801afe0:	41dfffff 	.word	0x41dfffff
 801afe4:	3fcfffff 	.word	0x3fcfffff

0801afe8 <strtod>:
 801afe8:	b510      	push	{r4, lr}
 801afea:	4c04      	ldr	r4, [pc, #16]	@ (801affc <strtod+0x14>)
 801afec:	000a      	movs	r2, r1
 801afee:	0001      	movs	r1, r0
 801aff0:	4b03      	ldr	r3, [pc, #12]	@ (801b000 <strtod+0x18>)
 801aff2:	6820      	ldr	r0, [r4, #0]
 801aff4:	f7ff fa06 	bl	801a404 <_strtod_l>
 801aff8:	bd10      	pop	{r4, pc}
 801affa:	46c0      	nop			@ (mov r8, r8)
 801affc:	200003cc 	.word	0x200003cc
 801b000:	20000260 	.word	0x20000260

0801b004 <_strtol_l.constprop.0>:
 801b004:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b006:	b085      	sub	sp, #20
 801b008:	0017      	movs	r7, r2
 801b00a:	001e      	movs	r6, r3
 801b00c:	9003      	str	r0, [sp, #12]
 801b00e:	9101      	str	r1, [sp, #4]
 801b010:	2b24      	cmp	r3, #36	@ 0x24
 801b012:	d844      	bhi.n	801b09e <_strtol_l.constprop.0+0x9a>
 801b014:	000c      	movs	r4, r1
 801b016:	2b01      	cmp	r3, #1
 801b018:	d041      	beq.n	801b09e <_strtol_l.constprop.0+0x9a>
 801b01a:	4b3d      	ldr	r3, [pc, #244]	@ (801b110 <_strtol_l.constprop.0+0x10c>)
 801b01c:	2208      	movs	r2, #8
 801b01e:	469c      	mov	ip, r3
 801b020:	0023      	movs	r3, r4
 801b022:	4661      	mov	r1, ip
 801b024:	781d      	ldrb	r5, [r3, #0]
 801b026:	3401      	adds	r4, #1
 801b028:	5d48      	ldrb	r0, [r1, r5]
 801b02a:	0001      	movs	r1, r0
 801b02c:	4011      	ands	r1, r2
 801b02e:	4210      	tst	r0, r2
 801b030:	d1f6      	bne.n	801b020 <_strtol_l.constprop.0+0x1c>
 801b032:	2d2d      	cmp	r5, #45	@ 0x2d
 801b034:	d13a      	bne.n	801b0ac <_strtol_l.constprop.0+0xa8>
 801b036:	7825      	ldrb	r5, [r4, #0]
 801b038:	1c9c      	adds	r4, r3, #2
 801b03a:	2301      	movs	r3, #1
 801b03c:	9300      	str	r3, [sp, #0]
 801b03e:	2210      	movs	r2, #16
 801b040:	0033      	movs	r3, r6
 801b042:	4393      	bics	r3, r2
 801b044:	d109      	bne.n	801b05a <_strtol_l.constprop.0+0x56>
 801b046:	2d30      	cmp	r5, #48	@ 0x30
 801b048:	d136      	bne.n	801b0b8 <_strtol_l.constprop.0+0xb4>
 801b04a:	2120      	movs	r1, #32
 801b04c:	7823      	ldrb	r3, [r4, #0]
 801b04e:	438b      	bics	r3, r1
 801b050:	2b58      	cmp	r3, #88	@ 0x58
 801b052:	d131      	bne.n	801b0b8 <_strtol_l.constprop.0+0xb4>
 801b054:	0016      	movs	r6, r2
 801b056:	7865      	ldrb	r5, [r4, #1]
 801b058:	3402      	adds	r4, #2
 801b05a:	4a2e      	ldr	r2, [pc, #184]	@ (801b114 <_strtol_l.constprop.0+0x110>)
 801b05c:	9b00      	ldr	r3, [sp, #0]
 801b05e:	4694      	mov	ip, r2
 801b060:	4463      	add	r3, ip
 801b062:	0031      	movs	r1, r6
 801b064:	0018      	movs	r0, r3
 801b066:	9302      	str	r3, [sp, #8]
 801b068:	f7e5 f922 	bl	80002b0 <__aeabi_uidivmod>
 801b06c:	2200      	movs	r2, #0
 801b06e:	4684      	mov	ip, r0
 801b070:	0010      	movs	r0, r2
 801b072:	002b      	movs	r3, r5
 801b074:	3b30      	subs	r3, #48	@ 0x30
 801b076:	2b09      	cmp	r3, #9
 801b078:	d825      	bhi.n	801b0c6 <_strtol_l.constprop.0+0xc2>
 801b07a:	001d      	movs	r5, r3
 801b07c:	42ae      	cmp	r6, r5
 801b07e:	dd31      	ble.n	801b0e4 <_strtol_l.constprop.0+0xe0>
 801b080:	1c53      	adds	r3, r2, #1
 801b082:	d009      	beq.n	801b098 <_strtol_l.constprop.0+0x94>
 801b084:	2201      	movs	r2, #1
 801b086:	4252      	negs	r2, r2
 801b088:	4584      	cmp	ip, r0
 801b08a:	d305      	bcc.n	801b098 <_strtol_l.constprop.0+0x94>
 801b08c:	d101      	bne.n	801b092 <_strtol_l.constprop.0+0x8e>
 801b08e:	42a9      	cmp	r1, r5
 801b090:	db25      	blt.n	801b0de <_strtol_l.constprop.0+0xda>
 801b092:	2201      	movs	r2, #1
 801b094:	4370      	muls	r0, r6
 801b096:	1828      	adds	r0, r5, r0
 801b098:	7825      	ldrb	r5, [r4, #0]
 801b09a:	3401      	adds	r4, #1
 801b09c:	e7e9      	b.n	801b072 <_strtol_l.constprop.0+0x6e>
 801b09e:	f000 fec5 	bl	801be2c <__errno>
 801b0a2:	2316      	movs	r3, #22
 801b0a4:	6003      	str	r3, [r0, #0]
 801b0a6:	2000      	movs	r0, #0
 801b0a8:	b005      	add	sp, #20
 801b0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0ac:	9100      	str	r1, [sp, #0]
 801b0ae:	2d2b      	cmp	r5, #43	@ 0x2b
 801b0b0:	d1c5      	bne.n	801b03e <_strtol_l.constprop.0+0x3a>
 801b0b2:	7825      	ldrb	r5, [r4, #0]
 801b0b4:	1c9c      	adds	r4, r3, #2
 801b0b6:	e7c2      	b.n	801b03e <_strtol_l.constprop.0+0x3a>
 801b0b8:	2e00      	cmp	r6, #0
 801b0ba:	d1ce      	bne.n	801b05a <_strtol_l.constprop.0+0x56>
 801b0bc:	3608      	adds	r6, #8
 801b0be:	2d30      	cmp	r5, #48	@ 0x30
 801b0c0:	d0cb      	beq.n	801b05a <_strtol_l.constprop.0+0x56>
 801b0c2:	3602      	adds	r6, #2
 801b0c4:	e7c9      	b.n	801b05a <_strtol_l.constprop.0+0x56>
 801b0c6:	002b      	movs	r3, r5
 801b0c8:	3b41      	subs	r3, #65	@ 0x41
 801b0ca:	2b19      	cmp	r3, #25
 801b0cc:	d801      	bhi.n	801b0d2 <_strtol_l.constprop.0+0xce>
 801b0ce:	3d37      	subs	r5, #55	@ 0x37
 801b0d0:	e7d4      	b.n	801b07c <_strtol_l.constprop.0+0x78>
 801b0d2:	002b      	movs	r3, r5
 801b0d4:	3b61      	subs	r3, #97	@ 0x61
 801b0d6:	2b19      	cmp	r3, #25
 801b0d8:	d804      	bhi.n	801b0e4 <_strtol_l.constprop.0+0xe0>
 801b0da:	3d57      	subs	r5, #87	@ 0x57
 801b0dc:	e7ce      	b.n	801b07c <_strtol_l.constprop.0+0x78>
 801b0de:	2201      	movs	r2, #1
 801b0e0:	4252      	negs	r2, r2
 801b0e2:	e7d9      	b.n	801b098 <_strtol_l.constprop.0+0x94>
 801b0e4:	1c53      	adds	r3, r2, #1
 801b0e6:	d108      	bne.n	801b0fa <_strtol_l.constprop.0+0xf6>
 801b0e8:	2322      	movs	r3, #34	@ 0x22
 801b0ea:	9a03      	ldr	r2, [sp, #12]
 801b0ec:	9802      	ldr	r0, [sp, #8]
 801b0ee:	6013      	str	r3, [r2, #0]
 801b0f0:	2f00      	cmp	r7, #0
 801b0f2:	d0d9      	beq.n	801b0a8 <_strtol_l.constprop.0+0xa4>
 801b0f4:	1e63      	subs	r3, r4, #1
 801b0f6:	9301      	str	r3, [sp, #4]
 801b0f8:	e007      	b.n	801b10a <_strtol_l.constprop.0+0x106>
 801b0fa:	9b00      	ldr	r3, [sp, #0]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d000      	beq.n	801b102 <_strtol_l.constprop.0+0xfe>
 801b100:	4240      	negs	r0, r0
 801b102:	2f00      	cmp	r7, #0
 801b104:	d0d0      	beq.n	801b0a8 <_strtol_l.constprop.0+0xa4>
 801b106:	2a00      	cmp	r2, #0
 801b108:	d1f4      	bne.n	801b0f4 <_strtol_l.constprop.0+0xf0>
 801b10a:	9b01      	ldr	r3, [sp, #4]
 801b10c:	603b      	str	r3, [r7, #0]
 801b10e:	e7cb      	b.n	801b0a8 <_strtol_l.constprop.0+0xa4>
 801b110:	08020689 	.word	0x08020689
 801b114:	7fffffff 	.word	0x7fffffff

0801b118 <strtol>:
 801b118:	b510      	push	{r4, lr}
 801b11a:	4c04      	ldr	r4, [pc, #16]	@ (801b12c <strtol+0x14>)
 801b11c:	0013      	movs	r3, r2
 801b11e:	000a      	movs	r2, r1
 801b120:	0001      	movs	r1, r0
 801b122:	6820      	ldr	r0, [r4, #0]
 801b124:	f7ff ff6e 	bl	801b004 <_strtol_l.constprop.0>
 801b128:	bd10      	pop	{r4, pc}
 801b12a:	46c0      	nop			@ (mov r8, r8)
 801b12c:	200003cc 	.word	0x200003cc

0801b130 <__cvt>:
 801b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b132:	001f      	movs	r7, r3
 801b134:	2300      	movs	r3, #0
 801b136:	0016      	movs	r6, r2
 801b138:	b08b      	sub	sp, #44	@ 0x2c
 801b13a:	429f      	cmp	r7, r3
 801b13c:	da04      	bge.n	801b148 <__cvt+0x18>
 801b13e:	2180      	movs	r1, #128	@ 0x80
 801b140:	0609      	lsls	r1, r1, #24
 801b142:	187b      	adds	r3, r7, r1
 801b144:	001f      	movs	r7, r3
 801b146:	232d      	movs	r3, #45	@ 0x2d
 801b148:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b14a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b14c:	7013      	strb	r3, [r2, #0]
 801b14e:	2320      	movs	r3, #32
 801b150:	2203      	movs	r2, #3
 801b152:	439d      	bics	r5, r3
 801b154:	2d46      	cmp	r5, #70	@ 0x46
 801b156:	d007      	beq.n	801b168 <__cvt+0x38>
 801b158:	002b      	movs	r3, r5
 801b15a:	3b45      	subs	r3, #69	@ 0x45
 801b15c:	4259      	negs	r1, r3
 801b15e:	414b      	adcs	r3, r1
 801b160:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b162:	3a01      	subs	r2, #1
 801b164:	18cb      	adds	r3, r1, r3
 801b166:	9310      	str	r3, [sp, #64]	@ 0x40
 801b168:	ab09      	add	r3, sp, #36	@ 0x24
 801b16a:	9304      	str	r3, [sp, #16]
 801b16c:	ab08      	add	r3, sp, #32
 801b16e:	9303      	str	r3, [sp, #12]
 801b170:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b172:	9200      	str	r2, [sp, #0]
 801b174:	9302      	str	r3, [sp, #8]
 801b176:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b178:	0032      	movs	r2, r6
 801b17a:	9301      	str	r3, [sp, #4]
 801b17c:	003b      	movs	r3, r7
 801b17e:	f000 ff2b 	bl	801bfd8 <_dtoa_r>
 801b182:	0004      	movs	r4, r0
 801b184:	2d47      	cmp	r5, #71	@ 0x47
 801b186:	d11b      	bne.n	801b1c0 <__cvt+0x90>
 801b188:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b18a:	07db      	lsls	r3, r3, #31
 801b18c:	d511      	bpl.n	801b1b2 <__cvt+0x82>
 801b18e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b190:	18c3      	adds	r3, r0, r3
 801b192:	9307      	str	r3, [sp, #28]
 801b194:	2200      	movs	r2, #0
 801b196:	2300      	movs	r3, #0
 801b198:	0030      	movs	r0, r6
 801b19a:	0039      	movs	r1, r7
 801b19c:	f7e5 f988 	bl	80004b0 <__aeabi_dcmpeq>
 801b1a0:	2800      	cmp	r0, #0
 801b1a2:	d001      	beq.n	801b1a8 <__cvt+0x78>
 801b1a4:	9b07      	ldr	r3, [sp, #28]
 801b1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1a8:	2230      	movs	r2, #48	@ 0x30
 801b1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1ac:	9907      	ldr	r1, [sp, #28]
 801b1ae:	428b      	cmp	r3, r1
 801b1b0:	d320      	bcc.n	801b1f4 <__cvt+0xc4>
 801b1b2:	0020      	movs	r0, r4
 801b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b1b8:	1b1b      	subs	r3, r3, r4
 801b1ba:	6013      	str	r3, [r2, #0]
 801b1bc:	b00b      	add	sp, #44	@ 0x2c
 801b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b1c2:	18c3      	adds	r3, r0, r3
 801b1c4:	9307      	str	r3, [sp, #28]
 801b1c6:	2d46      	cmp	r5, #70	@ 0x46
 801b1c8:	d1e4      	bne.n	801b194 <__cvt+0x64>
 801b1ca:	7803      	ldrb	r3, [r0, #0]
 801b1cc:	2b30      	cmp	r3, #48	@ 0x30
 801b1ce:	d10c      	bne.n	801b1ea <__cvt+0xba>
 801b1d0:	2200      	movs	r2, #0
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	0030      	movs	r0, r6
 801b1d6:	0039      	movs	r1, r7
 801b1d8:	f7e5 f96a 	bl	80004b0 <__aeabi_dcmpeq>
 801b1dc:	2800      	cmp	r0, #0
 801b1de:	d104      	bne.n	801b1ea <__cvt+0xba>
 801b1e0:	2301      	movs	r3, #1
 801b1e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b1e4:	1a9b      	subs	r3, r3, r2
 801b1e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b1e8:	6013      	str	r3, [r2, #0]
 801b1ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b1ec:	9a07      	ldr	r2, [sp, #28]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	18d3      	adds	r3, r2, r3
 801b1f2:	e7ce      	b.n	801b192 <__cvt+0x62>
 801b1f4:	1c59      	adds	r1, r3, #1
 801b1f6:	9109      	str	r1, [sp, #36]	@ 0x24
 801b1f8:	701a      	strb	r2, [r3, #0]
 801b1fa:	e7d6      	b.n	801b1aa <__cvt+0x7a>

0801b1fc <__exponent>:
 801b1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1fe:	232b      	movs	r3, #43	@ 0x2b
 801b200:	0005      	movs	r5, r0
 801b202:	000c      	movs	r4, r1
 801b204:	b085      	sub	sp, #20
 801b206:	7002      	strb	r2, [r0, #0]
 801b208:	2900      	cmp	r1, #0
 801b20a:	da01      	bge.n	801b210 <__exponent+0x14>
 801b20c:	424c      	negs	r4, r1
 801b20e:	3302      	adds	r3, #2
 801b210:	706b      	strb	r3, [r5, #1]
 801b212:	2c09      	cmp	r4, #9
 801b214:	dd2c      	ble.n	801b270 <__exponent+0x74>
 801b216:	ab02      	add	r3, sp, #8
 801b218:	1dde      	adds	r6, r3, #7
 801b21a:	0020      	movs	r0, r4
 801b21c:	210a      	movs	r1, #10
 801b21e:	f7e5 f931 	bl	8000484 <__aeabi_idivmod>
 801b222:	0037      	movs	r7, r6
 801b224:	3130      	adds	r1, #48	@ 0x30
 801b226:	3e01      	subs	r6, #1
 801b228:	0020      	movs	r0, r4
 801b22a:	7031      	strb	r1, [r6, #0]
 801b22c:	210a      	movs	r1, #10
 801b22e:	9401      	str	r4, [sp, #4]
 801b230:	f7e5 f842 	bl	80002b8 <__divsi3>
 801b234:	9b01      	ldr	r3, [sp, #4]
 801b236:	0004      	movs	r4, r0
 801b238:	2b63      	cmp	r3, #99	@ 0x63
 801b23a:	dcee      	bgt.n	801b21a <__exponent+0x1e>
 801b23c:	1eba      	subs	r2, r7, #2
 801b23e:	1ca8      	adds	r0, r5, #2
 801b240:	0001      	movs	r1, r0
 801b242:	0013      	movs	r3, r2
 801b244:	3430      	adds	r4, #48	@ 0x30
 801b246:	7014      	strb	r4, [r2, #0]
 801b248:	ac02      	add	r4, sp, #8
 801b24a:	3407      	adds	r4, #7
 801b24c:	429c      	cmp	r4, r3
 801b24e:	d80a      	bhi.n	801b266 <__exponent+0x6a>
 801b250:	2300      	movs	r3, #0
 801b252:	42a2      	cmp	r2, r4
 801b254:	d803      	bhi.n	801b25e <__exponent+0x62>
 801b256:	3309      	adds	r3, #9
 801b258:	aa02      	add	r2, sp, #8
 801b25a:	189b      	adds	r3, r3, r2
 801b25c:	1bdb      	subs	r3, r3, r7
 801b25e:	18c0      	adds	r0, r0, r3
 801b260:	1b40      	subs	r0, r0, r5
 801b262:	b005      	add	sp, #20
 801b264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b266:	781c      	ldrb	r4, [r3, #0]
 801b268:	3301      	adds	r3, #1
 801b26a:	700c      	strb	r4, [r1, #0]
 801b26c:	3101      	adds	r1, #1
 801b26e:	e7eb      	b.n	801b248 <__exponent+0x4c>
 801b270:	2330      	movs	r3, #48	@ 0x30
 801b272:	18e4      	adds	r4, r4, r3
 801b274:	70ab      	strb	r3, [r5, #2]
 801b276:	1d28      	adds	r0, r5, #4
 801b278:	70ec      	strb	r4, [r5, #3]
 801b27a:	e7f1      	b.n	801b260 <__exponent+0x64>

0801b27c <_printf_float>:
 801b27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b27e:	b097      	sub	sp, #92	@ 0x5c
 801b280:	000d      	movs	r5, r1
 801b282:	920a      	str	r2, [sp, #40]	@ 0x28
 801b284:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b286:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b288:	9009      	str	r0, [sp, #36]	@ 0x24
 801b28a:	f000 fd7d 	bl	801bd88 <_localeconv_r>
 801b28e:	6803      	ldr	r3, [r0, #0]
 801b290:	0018      	movs	r0, r3
 801b292:	930d      	str	r3, [sp, #52]	@ 0x34
 801b294:	f7e4 ff6a 	bl	800016c <strlen>
 801b298:	2300      	movs	r3, #0
 801b29a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801b29c:	9314      	str	r3, [sp, #80]	@ 0x50
 801b29e:	7e2b      	ldrb	r3, [r5, #24]
 801b2a0:	2207      	movs	r2, #7
 801b2a2:	930c      	str	r3, [sp, #48]	@ 0x30
 801b2a4:	682b      	ldr	r3, [r5, #0]
 801b2a6:	930e      	str	r3, [sp, #56]	@ 0x38
 801b2a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b2aa:	6823      	ldr	r3, [r4, #0]
 801b2ac:	05c9      	lsls	r1, r1, #23
 801b2ae:	d545      	bpl.n	801b33c <_printf_float+0xc0>
 801b2b0:	189b      	adds	r3, r3, r2
 801b2b2:	4393      	bics	r3, r2
 801b2b4:	001a      	movs	r2, r3
 801b2b6:	3208      	adds	r2, #8
 801b2b8:	6022      	str	r2, [r4, #0]
 801b2ba:	2201      	movs	r2, #1
 801b2bc:	681e      	ldr	r6, [r3, #0]
 801b2be:	685f      	ldr	r7, [r3, #4]
 801b2c0:	007b      	lsls	r3, r7, #1
 801b2c2:	085b      	lsrs	r3, r3, #1
 801b2c4:	9311      	str	r3, [sp, #68]	@ 0x44
 801b2c6:	9610      	str	r6, [sp, #64]	@ 0x40
 801b2c8:	64ae      	str	r6, [r5, #72]	@ 0x48
 801b2ca:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801b2cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b2ce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b2d0:	4ba7      	ldr	r3, [pc, #668]	@ (801b570 <_printf_float+0x2f4>)
 801b2d2:	4252      	negs	r2, r2
 801b2d4:	f7e8 f816 	bl	8003304 <__aeabi_dcmpun>
 801b2d8:	2800      	cmp	r0, #0
 801b2da:	d131      	bne.n	801b340 <_printf_float+0xc4>
 801b2dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b2de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b2e0:	2201      	movs	r2, #1
 801b2e2:	4ba3      	ldr	r3, [pc, #652]	@ (801b570 <_printf_float+0x2f4>)
 801b2e4:	4252      	negs	r2, r2
 801b2e6:	f7e5 f8f3 	bl	80004d0 <__aeabi_dcmple>
 801b2ea:	2800      	cmp	r0, #0
 801b2ec:	d128      	bne.n	801b340 <_printf_float+0xc4>
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	0030      	movs	r0, r6
 801b2f4:	0039      	movs	r1, r7
 801b2f6:	f7e5 f8e1 	bl	80004bc <__aeabi_dcmplt>
 801b2fa:	2800      	cmp	r0, #0
 801b2fc:	d003      	beq.n	801b306 <_printf_float+0x8a>
 801b2fe:	002b      	movs	r3, r5
 801b300:	222d      	movs	r2, #45	@ 0x2d
 801b302:	3343      	adds	r3, #67	@ 0x43
 801b304:	701a      	strb	r2, [r3, #0]
 801b306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b308:	4f9a      	ldr	r7, [pc, #616]	@ (801b574 <_printf_float+0x2f8>)
 801b30a:	2b47      	cmp	r3, #71	@ 0x47
 801b30c:	d900      	bls.n	801b310 <_printf_float+0x94>
 801b30e:	4f9a      	ldr	r7, [pc, #616]	@ (801b578 <_printf_float+0x2fc>)
 801b310:	2303      	movs	r3, #3
 801b312:	2400      	movs	r4, #0
 801b314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b316:	612b      	str	r3, [r5, #16]
 801b318:	3301      	adds	r3, #1
 801b31a:	439a      	bics	r2, r3
 801b31c:	602a      	str	r2, [r5, #0]
 801b31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b320:	0029      	movs	r1, r5
 801b322:	9300      	str	r3, [sp, #0]
 801b324:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b328:	aa15      	add	r2, sp, #84	@ 0x54
 801b32a:	f000 f9e5 	bl	801b6f8 <_printf_common>
 801b32e:	3001      	adds	r0, #1
 801b330:	d000      	beq.n	801b334 <_printf_float+0xb8>
 801b332:	e09f      	b.n	801b474 <_printf_float+0x1f8>
 801b334:	2001      	movs	r0, #1
 801b336:	4240      	negs	r0, r0
 801b338:	b017      	add	sp, #92	@ 0x5c
 801b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b33c:	3307      	adds	r3, #7
 801b33e:	e7b8      	b.n	801b2b2 <_printf_float+0x36>
 801b340:	0032      	movs	r2, r6
 801b342:	003b      	movs	r3, r7
 801b344:	0030      	movs	r0, r6
 801b346:	0039      	movs	r1, r7
 801b348:	f7e7 ffdc 	bl	8003304 <__aeabi_dcmpun>
 801b34c:	2800      	cmp	r0, #0
 801b34e:	d00b      	beq.n	801b368 <_printf_float+0xec>
 801b350:	2f00      	cmp	r7, #0
 801b352:	da03      	bge.n	801b35c <_printf_float+0xe0>
 801b354:	002b      	movs	r3, r5
 801b356:	222d      	movs	r2, #45	@ 0x2d
 801b358:	3343      	adds	r3, #67	@ 0x43
 801b35a:	701a      	strb	r2, [r3, #0]
 801b35c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b35e:	4f87      	ldr	r7, [pc, #540]	@ (801b57c <_printf_float+0x300>)
 801b360:	2b47      	cmp	r3, #71	@ 0x47
 801b362:	d9d5      	bls.n	801b310 <_printf_float+0x94>
 801b364:	4f86      	ldr	r7, [pc, #536]	@ (801b580 <_printf_float+0x304>)
 801b366:	e7d3      	b.n	801b310 <_printf_float+0x94>
 801b368:	2220      	movs	r2, #32
 801b36a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b36c:	686b      	ldr	r3, [r5, #4]
 801b36e:	4394      	bics	r4, r2
 801b370:	1c5a      	adds	r2, r3, #1
 801b372:	d146      	bne.n	801b402 <_printf_float+0x186>
 801b374:	3307      	adds	r3, #7
 801b376:	606b      	str	r3, [r5, #4]
 801b378:	2380      	movs	r3, #128	@ 0x80
 801b37a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b37c:	00db      	lsls	r3, r3, #3
 801b37e:	4313      	orrs	r3, r2
 801b380:	2200      	movs	r2, #0
 801b382:	602b      	str	r3, [r5, #0]
 801b384:	9206      	str	r2, [sp, #24]
 801b386:	aa14      	add	r2, sp, #80	@ 0x50
 801b388:	9205      	str	r2, [sp, #20]
 801b38a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b38c:	a90a      	add	r1, sp, #40	@ 0x28
 801b38e:	9204      	str	r2, [sp, #16]
 801b390:	aa13      	add	r2, sp, #76	@ 0x4c
 801b392:	9203      	str	r2, [sp, #12]
 801b394:	2223      	movs	r2, #35	@ 0x23
 801b396:	1852      	adds	r2, r2, r1
 801b398:	9202      	str	r2, [sp, #8]
 801b39a:	9301      	str	r3, [sp, #4]
 801b39c:	686b      	ldr	r3, [r5, #4]
 801b39e:	0032      	movs	r2, r6
 801b3a0:	9300      	str	r3, [sp, #0]
 801b3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b3a4:	003b      	movs	r3, r7
 801b3a6:	f7ff fec3 	bl	801b130 <__cvt>
 801b3aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b3ac:	0007      	movs	r7, r0
 801b3ae:	2c47      	cmp	r4, #71	@ 0x47
 801b3b0:	d12d      	bne.n	801b40e <_printf_float+0x192>
 801b3b2:	1cd3      	adds	r3, r2, #3
 801b3b4:	db02      	blt.n	801b3bc <_printf_float+0x140>
 801b3b6:	686b      	ldr	r3, [r5, #4]
 801b3b8:	429a      	cmp	r2, r3
 801b3ba:	dd48      	ble.n	801b44e <_printf_float+0x1d2>
 801b3bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b3be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b3c0:	3b02      	subs	r3, #2
 801b3c2:	b2db      	uxtb	r3, r3
 801b3c4:	930c      	str	r3, [sp, #48]	@ 0x30
 801b3c6:	0028      	movs	r0, r5
 801b3c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b3ca:	3901      	subs	r1, #1
 801b3cc:	3050      	adds	r0, #80	@ 0x50
 801b3ce:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b3d0:	f7ff ff14 	bl	801b1fc <__exponent>
 801b3d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b3d6:	0004      	movs	r4, r0
 801b3d8:	1813      	adds	r3, r2, r0
 801b3da:	612b      	str	r3, [r5, #16]
 801b3dc:	2a01      	cmp	r2, #1
 801b3de:	dc02      	bgt.n	801b3e6 <_printf_float+0x16a>
 801b3e0:	682a      	ldr	r2, [r5, #0]
 801b3e2:	07d2      	lsls	r2, r2, #31
 801b3e4:	d501      	bpl.n	801b3ea <_printf_float+0x16e>
 801b3e6:	3301      	adds	r3, #1
 801b3e8:	612b      	str	r3, [r5, #16]
 801b3ea:	2323      	movs	r3, #35	@ 0x23
 801b3ec:	aa0a      	add	r2, sp, #40	@ 0x28
 801b3ee:	189b      	adds	r3, r3, r2
 801b3f0:	781b      	ldrb	r3, [r3, #0]
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d100      	bne.n	801b3f8 <_printf_float+0x17c>
 801b3f6:	e792      	b.n	801b31e <_printf_float+0xa2>
 801b3f8:	002b      	movs	r3, r5
 801b3fa:	222d      	movs	r2, #45	@ 0x2d
 801b3fc:	3343      	adds	r3, #67	@ 0x43
 801b3fe:	701a      	strb	r2, [r3, #0]
 801b400:	e78d      	b.n	801b31e <_printf_float+0xa2>
 801b402:	2c47      	cmp	r4, #71	@ 0x47
 801b404:	d1b8      	bne.n	801b378 <_printf_float+0xfc>
 801b406:	2b00      	cmp	r3, #0
 801b408:	d1b6      	bne.n	801b378 <_printf_float+0xfc>
 801b40a:	3301      	adds	r3, #1
 801b40c:	e7b3      	b.n	801b376 <_printf_float+0xfa>
 801b40e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b410:	0011      	movs	r1, r2
 801b412:	2b65      	cmp	r3, #101	@ 0x65
 801b414:	d9d7      	bls.n	801b3c6 <_printf_float+0x14a>
 801b416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b418:	2b66      	cmp	r3, #102	@ 0x66
 801b41a:	d11a      	bne.n	801b452 <_printf_float+0x1d6>
 801b41c:	686b      	ldr	r3, [r5, #4]
 801b41e:	2a00      	cmp	r2, #0
 801b420:	dd09      	ble.n	801b436 <_printf_float+0x1ba>
 801b422:	612a      	str	r2, [r5, #16]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d102      	bne.n	801b42e <_printf_float+0x1b2>
 801b428:	6829      	ldr	r1, [r5, #0]
 801b42a:	07c9      	lsls	r1, r1, #31
 801b42c:	d50b      	bpl.n	801b446 <_printf_float+0x1ca>
 801b42e:	3301      	adds	r3, #1
 801b430:	189b      	adds	r3, r3, r2
 801b432:	612b      	str	r3, [r5, #16]
 801b434:	e007      	b.n	801b446 <_printf_float+0x1ca>
 801b436:	2b00      	cmp	r3, #0
 801b438:	d103      	bne.n	801b442 <_printf_float+0x1c6>
 801b43a:	2201      	movs	r2, #1
 801b43c:	6829      	ldr	r1, [r5, #0]
 801b43e:	4211      	tst	r1, r2
 801b440:	d000      	beq.n	801b444 <_printf_float+0x1c8>
 801b442:	1c9a      	adds	r2, r3, #2
 801b444:	612a      	str	r2, [r5, #16]
 801b446:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b448:	2400      	movs	r4, #0
 801b44a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801b44c:	e7cd      	b.n	801b3ea <_printf_float+0x16e>
 801b44e:	2367      	movs	r3, #103	@ 0x67
 801b450:	930c      	str	r3, [sp, #48]	@ 0x30
 801b452:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b454:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b456:	4299      	cmp	r1, r3
 801b458:	db06      	blt.n	801b468 <_printf_float+0x1ec>
 801b45a:	682b      	ldr	r3, [r5, #0]
 801b45c:	6129      	str	r1, [r5, #16]
 801b45e:	07db      	lsls	r3, r3, #31
 801b460:	d5f1      	bpl.n	801b446 <_printf_float+0x1ca>
 801b462:	3101      	adds	r1, #1
 801b464:	6129      	str	r1, [r5, #16]
 801b466:	e7ee      	b.n	801b446 <_printf_float+0x1ca>
 801b468:	2201      	movs	r2, #1
 801b46a:	2900      	cmp	r1, #0
 801b46c:	dce0      	bgt.n	801b430 <_printf_float+0x1b4>
 801b46e:	1892      	adds	r2, r2, r2
 801b470:	1a52      	subs	r2, r2, r1
 801b472:	e7dd      	b.n	801b430 <_printf_float+0x1b4>
 801b474:	682a      	ldr	r2, [r5, #0]
 801b476:	0553      	lsls	r3, r2, #21
 801b478:	d408      	bmi.n	801b48c <_printf_float+0x210>
 801b47a:	692b      	ldr	r3, [r5, #16]
 801b47c:	003a      	movs	r2, r7
 801b47e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b480:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b482:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b484:	47a0      	blx	r4
 801b486:	3001      	adds	r0, #1
 801b488:	d129      	bne.n	801b4de <_printf_float+0x262>
 801b48a:	e753      	b.n	801b334 <_printf_float+0xb8>
 801b48c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b48e:	2b65      	cmp	r3, #101	@ 0x65
 801b490:	d800      	bhi.n	801b494 <_printf_float+0x218>
 801b492:	e0da      	b.n	801b64a <_printf_float+0x3ce>
 801b494:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801b496:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801b498:	2200      	movs	r2, #0
 801b49a:	2300      	movs	r3, #0
 801b49c:	f7e5 f808 	bl	80004b0 <__aeabi_dcmpeq>
 801b4a0:	2800      	cmp	r0, #0
 801b4a2:	d033      	beq.n	801b50c <_printf_float+0x290>
 801b4a4:	2301      	movs	r3, #1
 801b4a6:	4a37      	ldr	r2, [pc, #220]	@ (801b584 <_printf_float+0x308>)
 801b4a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b4ae:	47a0      	blx	r4
 801b4b0:	3001      	adds	r0, #1
 801b4b2:	d100      	bne.n	801b4b6 <_printf_float+0x23a>
 801b4b4:	e73e      	b.n	801b334 <_printf_float+0xb8>
 801b4b6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b4b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b4ba:	42b3      	cmp	r3, r6
 801b4bc:	db02      	blt.n	801b4c4 <_printf_float+0x248>
 801b4be:	682b      	ldr	r3, [r5, #0]
 801b4c0:	07db      	lsls	r3, r3, #31
 801b4c2:	d50c      	bpl.n	801b4de <_printf_float+0x262>
 801b4c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b4c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b4c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b4ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b4cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4ce:	47a0      	blx	r4
 801b4d0:	2400      	movs	r4, #0
 801b4d2:	3001      	adds	r0, #1
 801b4d4:	d100      	bne.n	801b4d8 <_printf_float+0x25c>
 801b4d6:	e72d      	b.n	801b334 <_printf_float+0xb8>
 801b4d8:	1e73      	subs	r3, r6, #1
 801b4da:	42a3      	cmp	r3, r4
 801b4dc:	dc0a      	bgt.n	801b4f4 <_printf_float+0x278>
 801b4de:	682b      	ldr	r3, [r5, #0]
 801b4e0:	079b      	lsls	r3, r3, #30
 801b4e2:	d500      	bpl.n	801b4e6 <_printf_float+0x26a>
 801b4e4:	e105      	b.n	801b6f2 <_printf_float+0x476>
 801b4e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b4e8:	68e8      	ldr	r0, [r5, #12]
 801b4ea:	4298      	cmp	r0, r3
 801b4ec:	db00      	blt.n	801b4f0 <_printf_float+0x274>
 801b4ee:	e723      	b.n	801b338 <_printf_float+0xbc>
 801b4f0:	0018      	movs	r0, r3
 801b4f2:	e721      	b.n	801b338 <_printf_float+0xbc>
 801b4f4:	002a      	movs	r2, r5
 801b4f6:	2301      	movs	r3, #1
 801b4f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b4fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b4fe:	321a      	adds	r2, #26
 801b500:	47b8      	blx	r7
 801b502:	3001      	adds	r0, #1
 801b504:	d100      	bne.n	801b508 <_printf_float+0x28c>
 801b506:	e715      	b.n	801b334 <_printf_float+0xb8>
 801b508:	3401      	adds	r4, #1
 801b50a:	e7e5      	b.n	801b4d8 <_printf_float+0x25c>
 801b50c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b50e:	2b00      	cmp	r3, #0
 801b510:	dc3a      	bgt.n	801b588 <_printf_float+0x30c>
 801b512:	2301      	movs	r3, #1
 801b514:	4a1b      	ldr	r2, [pc, #108]	@ (801b584 <_printf_float+0x308>)
 801b516:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b518:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b51a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b51c:	47a0      	blx	r4
 801b51e:	3001      	adds	r0, #1
 801b520:	d100      	bne.n	801b524 <_printf_float+0x2a8>
 801b522:	e707      	b.n	801b334 <_printf_float+0xb8>
 801b524:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b526:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b528:	4333      	orrs	r3, r6
 801b52a:	d102      	bne.n	801b532 <_printf_float+0x2b6>
 801b52c:	682b      	ldr	r3, [r5, #0]
 801b52e:	07db      	lsls	r3, r3, #31
 801b530:	d5d5      	bpl.n	801b4de <_printf_float+0x262>
 801b532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b534:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b536:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b538:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b53a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b53c:	47a0      	blx	r4
 801b53e:	2300      	movs	r3, #0
 801b540:	3001      	adds	r0, #1
 801b542:	d100      	bne.n	801b546 <_printf_float+0x2ca>
 801b544:	e6f6      	b.n	801b334 <_printf_float+0xb8>
 801b546:	930c      	str	r3, [sp, #48]	@ 0x30
 801b548:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b54a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b54c:	425b      	negs	r3, r3
 801b54e:	4293      	cmp	r3, r2
 801b550:	dc01      	bgt.n	801b556 <_printf_float+0x2da>
 801b552:	0033      	movs	r3, r6
 801b554:	e792      	b.n	801b47c <_printf_float+0x200>
 801b556:	002a      	movs	r2, r5
 801b558:	2301      	movs	r3, #1
 801b55a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b55c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b55e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b560:	321a      	adds	r2, #26
 801b562:	47a0      	blx	r4
 801b564:	3001      	adds	r0, #1
 801b566:	d100      	bne.n	801b56a <_printf_float+0x2ee>
 801b568:	e6e4      	b.n	801b334 <_printf_float+0xb8>
 801b56a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b56c:	3301      	adds	r3, #1
 801b56e:	e7ea      	b.n	801b546 <_printf_float+0x2ca>
 801b570:	7fefffff 	.word	0x7fefffff
 801b574:	08020789 	.word	0x08020789
 801b578:	0802078d 	.word	0x0802078d
 801b57c:	08020791 	.word	0x08020791
 801b580:	08020795 	.word	0x08020795
 801b584:	08020799 	.word	0x08020799
 801b588:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b58a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801b58c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b58e:	429e      	cmp	r6, r3
 801b590:	dd00      	ble.n	801b594 <_printf_float+0x318>
 801b592:	001e      	movs	r6, r3
 801b594:	2e00      	cmp	r6, #0
 801b596:	dc31      	bgt.n	801b5fc <_printf_float+0x380>
 801b598:	43f3      	mvns	r3, r6
 801b59a:	2400      	movs	r4, #0
 801b59c:	17db      	asrs	r3, r3, #31
 801b59e:	4033      	ands	r3, r6
 801b5a0:	930e      	str	r3, [sp, #56]	@ 0x38
 801b5a2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801b5a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5a6:	1af3      	subs	r3, r6, r3
 801b5a8:	42a3      	cmp	r3, r4
 801b5aa:	dc30      	bgt.n	801b60e <_printf_float+0x392>
 801b5ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b5ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b5b0:	429a      	cmp	r2, r3
 801b5b2:	dc38      	bgt.n	801b626 <_printf_float+0x3aa>
 801b5b4:	682b      	ldr	r3, [r5, #0]
 801b5b6:	07db      	lsls	r3, r3, #31
 801b5b8:	d435      	bmi.n	801b626 <_printf_float+0x3aa>
 801b5ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b5bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b5be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b5c0:	1b9b      	subs	r3, r3, r6
 801b5c2:	1b14      	subs	r4, r2, r4
 801b5c4:	429c      	cmp	r4, r3
 801b5c6:	dd00      	ble.n	801b5ca <_printf_float+0x34e>
 801b5c8:	001c      	movs	r4, r3
 801b5ca:	2c00      	cmp	r4, #0
 801b5cc:	dc34      	bgt.n	801b638 <_printf_float+0x3bc>
 801b5ce:	43e3      	mvns	r3, r4
 801b5d0:	2600      	movs	r6, #0
 801b5d2:	17db      	asrs	r3, r3, #31
 801b5d4:	401c      	ands	r4, r3
 801b5d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b5d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b5da:	1ad3      	subs	r3, r2, r3
 801b5dc:	1b1b      	subs	r3, r3, r4
 801b5de:	42b3      	cmp	r3, r6
 801b5e0:	dc00      	bgt.n	801b5e4 <_printf_float+0x368>
 801b5e2:	e77c      	b.n	801b4de <_printf_float+0x262>
 801b5e4:	002a      	movs	r2, r5
 801b5e6:	2301      	movs	r3, #1
 801b5e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b5ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b5ee:	321a      	adds	r2, #26
 801b5f0:	47b8      	blx	r7
 801b5f2:	3001      	adds	r0, #1
 801b5f4:	d100      	bne.n	801b5f8 <_printf_float+0x37c>
 801b5f6:	e69d      	b.n	801b334 <_printf_float+0xb8>
 801b5f8:	3601      	adds	r6, #1
 801b5fa:	e7ec      	b.n	801b5d6 <_printf_float+0x35a>
 801b5fc:	0033      	movs	r3, r6
 801b5fe:	003a      	movs	r2, r7
 801b600:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b604:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b606:	47a0      	blx	r4
 801b608:	3001      	adds	r0, #1
 801b60a:	d1c5      	bne.n	801b598 <_printf_float+0x31c>
 801b60c:	e692      	b.n	801b334 <_printf_float+0xb8>
 801b60e:	002a      	movs	r2, r5
 801b610:	2301      	movs	r3, #1
 801b612:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b614:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b616:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b618:	321a      	adds	r2, #26
 801b61a:	47b0      	blx	r6
 801b61c:	3001      	adds	r0, #1
 801b61e:	d100      	bne.n	801b622 <_printf_float+0x3a6>
 801b620:	e688      	b.n	801b334 <_printf_float+0xb8>
 801b622:	3401      	adds	r4, #1
 801b624:	e7bd      	b.n	801b5a2 <_printf_float+0x326>
 801b626:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b628:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b62a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b62c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b62e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b630:	47a0      	blx	r4
 801b632:	3001      	adds	r0, #1
 801b634:	d1c1      	bne.n	801b5ba <_printf_float+0x33e>
 801b636:	e67d      	b.n	801b334 <_printf_float+0xb8>
 801b638:	19ba      	adds	r2, r7, r6
 801b63a:	0023      	movs	r3, r4
 801b63c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b63e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b640:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b642:	47b0      	blx	r6
 801b644:	3001      	adds	r0, #1
 801b646:	d1c2      	bne.n	801b5ce <_printf_float+0x352>
 801b648:	e674      	b.n	801b334 <_printf_float+0xb8>
 801b64a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b64c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b64e:	2b01      	cmp	r3, #1
 801b650:	dc02      	bgt.n	801b658 <_printf_float+0x3dc>
 801b652:	2301      	movs	r3, #1
 801b654:	421a      	tst	r2, r3
 801b656:	d039      	beq.n	801b6cc <_printf_float+0x450>
 801b658:	2301      	movs	r3, #1
 801b65a:	003a      	movs	r2, r7
 801b65c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b65e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b660:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b662:	47b0      	blx	r6
 801b664:	3001      	adds	r0, #1
 801b666:	d100      	bne.n	801b66a <_printf_float+0x3ee>
 801b668:	e664      	b.n	801b334 <_printf_float+0xb8>
 801b66a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b66c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b66e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b670:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b672:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b674:	47b0      	blx	r6
 801b676:	3001      	adds	r0, #1
 801b678:	d100      	bne.n	801b67c <_printf_float+0x400>
 801b67a:	e65b      	b.n	801b334 <_printf_float+0xb8>
 801b67c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801b67e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801b680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b682:	2200      	movs	r2, #0
 801b684:	3b01      	subs	r3, #1
 801b686:	930c      	str	r3, [sp, #48]	@ 0x30
 801b688:	2300      	movs	r3, #0
 801b68a:	f7e4 ff11 	bl	80004b0 <__aeabi_dcmpeq>
 801b68e:	2800      	cmp	r0, #0
 801b690:	d11a      	bne.n	801b6c8 <_printf_float+0x44c>
 801b692:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b694:	1c7a      	adds	r2, r7, #1
 801b696:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b698:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b69a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b69c:	47b0      	blx	r6
 801b69e:	3001      	adds	r0, #1
 801b6a0:	d10e      	bne.n	801b6c0 <_printf_float+0x444>
 801b6a2:	e647      	b.n	801b334 <_printf_float+0xb8>
 801b6a4:	002a      	movs	r2, r5
 801b6a6:	2301      	movs	r3, #1
 801b6a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b6aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b6ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b6ae:	321a      	adds	r2, #26
 801b6b0:	47b8      	blx	r7
 801b6b2:	3001      	adds	r0, #1
 801b6b4:	d100      	bne.n	801b6b8 <_printf_float+0x43c>
 801b6b6:	e63d      	b.n	801b334 <_printf_float+0xb8>
 801b6b8:	3601      	adds	r6, #1
 801b6ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b6bc:	429e      	cmp	r6, r3
 801b6be:	dbf1      	blt.n	801b6a4 <_printf_float+0x428>
 801b6c0:	002a      	movs	r2, r5
 801b6c2:	0023      	movs	r3, r4
 801b6c4:	3250      	adds	r2, #80	@ 0x50
 801b6c6:	e6da      	b.n	801b47e <_printf_float+0x202>
 801b6c8:	2600      	movs	r6, #0
 801b6ca:	e7f6      	b.n	801b6ba <_printf_float+0x43e>
 801b6cc:	003a      	movs	r2, r7
 801b6ce:	e7e2      	b.n	801b696 <_printf_float+0x41a>
 801b6d0:	002a      	movs	r2, r5
 801b6d2:	2301      	movs	r3, #1
 801b6d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b6d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b6da:	3219      	adds	r2, #25
 801b6dc:	47b0      	blx	r6
 801b6de:	3001      	adds	r0, #1
 801b6e0:	d100      	bne.n	801b6e4 <_printf_float+0x468>
 801b6e2:	e627      	b.n	801b334 <_printf_float+0xb8>
 801b6e4:	3401      	adds	r4, #1
 801b6e6:	68eb      	ldr	r3, [r5, #12]
 801b6e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b6ea:	1a9b      	subs	r3, r3, r2
 801b6ec:	42a3      	cmp	r3, r4
 801b6ee:	dcef      	bgt.n	801b6d0 <_printf_float+0x454>
 801b6f0:	e6f9      	b.n	801b4e6 <_printf_float+0x26a>
 801b6f2:	2400      	movs	r4, #0
 801b6f4:	e7f7      	b.n	801b6e6 <_printf_float+0x46a>
 801b6f6:	46c0      	nop			@ (mov r8, r8)

0801b6f8 <_printf_common>:
 801b6f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b6fa:	0016      	movs	r6, r2
 801b6fc:	9301      	str	r3, [sp, #4]
 801b6fe:	688a      	ldr	r2, [r1, #8]
 801b700:	690b      	ldr	r3, [r1, #16]
 801b702:	000c      	movs	r4, r1
 801b704:	9000      	str	r0, [sp, #0]
 801b706:	4293      	cmp	r3, r2
 801b708:	da00      	bge.n	801b70c <_printf_common+0x14>
 801b70a:	0013      	movs	r3, r2
 801b70c:	0022      	movs	r2, r4
 801b70e:	6033      	str	r3, [r6, #0]
 801b710:	3243      	adds	r2, #67	@ 0x43
 801b712:	7812      	ldrb	r2, [r2, #0]
 801b714:	2a00      	cmp	r2, #0
 801b716:	d001      	beq.n	801b71c <_printf_common+0x24>
 801b718:	3301      	adds	r3, #1
 801b71a:	6033      	str	r3, [r6, #0]
 801b71c:	6823      	ldr	r3, [r4, #0]
 801b71e:	069b      	lsls	r3, r3, #26
 801b720:	d502      	bpl.n	801b728 <_printf_common+0x30>
 801b722:	6833      	ldr	r3, [r6, #0]
 801b724:	3302      	adds	r3, #2
 801b726:	6033      	str	r3, [r6, #0]
 801b728:	6822      	ldr	r2, [r4, #0]
 801b72a:	2306      	movs	r3, #6
 801b72c:	0015      	movs	r5, r2
 801b72e:	401d      	ands	r5, r3
 801b730:	421a      	tst	r2, r3
 801b732:	d027      	beq.n	801b784 <_printf_common+0x8c>
 801b734:	0023      	movs	r3, r4
 801b736:	3343      	adds	r3, #67	@ 0x43
 801b738:	781b      	ldrb	r3, [r3, #0]
 801b73a:	1e5a      	subs	r2, r3, #1
 801b73c:	4193      	sbcs	r3, r2
 801b73e:	6822      	ldr	r2, [r4, #0]
 801b740:	0692      	lsls	r2, r2, #26
 801b742:	d430      	bmi.n	801b7a6 <_printf_common+0xae>
 801b744:	0022      	movs	r2, r4
 801b746:	9901      	ldr	r1, [sp, #4]
 801b748:	9800      	ldr	r0, [sp, #0]
 801b74a:	9d08      	ldr	r5, [sp, #32]
 801b74c:	3243      	adds	r2, #67	@ 0x43
 801b74e:	47a8      	blx	r5
 801b750:	3001      	adds	r0, #1
 801b752:	d025      	beq.n	801b7a0 <_printf_common+0xa8>
 801b754:	2206      	movs	r2, #6
 801b756:	6823      	ldr	r3, [r4, #0]
 801b758:	2500      	movs	r5, #0
 801b75a:	4013      	ands	r3, r2
 801b75c:	2b04      	cmp	r3, #4
 801b75e:	d105      	bne.n	801b76c <_printf_common+0x74>
 801b760:	6833      	ldr	r3, [r6, #0]
 801b762:	68e5      	ldr	r5, [r4, #12]
 801b764:	1aed      	subs	r5, r5, r3
 801b766:	43eb      	mvns	r3, r5
 801b768:	17db      	asrs	r3, r3, #31
 801b76a:	401d      	ands	r5, r3
 801b76c:	68a3      	ldr	r3, [r4, #8]
 801b76e:	6922      	ldr	r2, [r4, #16]
 801b770:	4293      	cmp	r3, r2
 801b772:	dd01      	ble.n	801b778 <_printf_common+0x80>
 801b774:	1a9b      	subs	r3, r3, r2
 801b776:	18ed      	adds	r5, r5, r3
 801b778:	2600      	movs	r6, #0
 801b77a:	42b5      	cmp	r5, r6
 801b77c:	d120      	bne.n	801b7c0 <_printf_common+0xc8>
 801b77e:	2000      	movs	r0, #0
 801b780:	e010      	b.n	801b7a4 <_printf_common+0xac>
 801b782:	3501      	adds	r5, #1
 801b784:	68e3      	ldr	r3, [r4, #12]
 801b786:	6832      	ldr	r2, [r6, #0]
 801b788:	1a9b      	subs	r3, r3, r2
 801b78a:	42ab      	cmp	r3, r5
 801b78c:	ddd2      	ble.n	801b734 <_printf_common+0x3c>
 801b78e:	0022      	movs	r2, r4
 801b790:	2301      	movs	r3, #1
 801b792:	9901      	ldr	r1, [sp, #4]
 801b794:	9800      	ldr	r0, [sp, #0]
 801b796:	9f08      	ldr	r7, [sp, #32]
 801b798:	3219      	adds	r2, #25
 801b79a:	47b8      	blx	r7
 801b79c:	3001      	adds	r0, #1
 801b79e:	d1f0      	bne.n	801b782 <_printf_common+0x8a>
 801b7a0:	2001      	movs	r0, #1
 801b7a2:	4240      	negs	r0, r0
 801b7a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b7a6:	2030      	movs	r0, #48	@ 0x30
 801b7a8:	18e1      	adds	r1, r4, r3
 801b7aa:	3143      	adds	r1, #67	@ 0x43
 801b7ac:	7008      	strb	r0, [r1, #0]
 801b7ae:	0021      	movs	r1, r4
 801b7b0:	1c5a      	adds	r2, r3, #1
 801b7b2:	3145      	adds	r1, #69	@ 0x45
 801b7b4:	7809      	ldrb	r1, [r1, #0]
 801b7b6:	18a2      	adds	r2, r4, r2
 801b7b8:	3243      	adds	r2, #67	@ 0x43
 801b7ba:	3302      	adds	r3, #2
 801b7bc:	7011      	strb	r1, [r2, #0]
 801b7be:	e7c1      	b.n	801b744 <_printf_common+0x4c>
 801b7c0:	0022      	movs	r2, r4
 801b7c2:	2301      	movs	r3, #1
 801b7c4:	9901      	ldr	r1, [sp, #4]
 801b7c6:	9800      	ldr	r0, [sp, #0]
 801b7c8:	9f08      	ldr	r7, [sp, #32]
 801b7ca:	321a      	adds	r2, #26
 801b7cc:	47b8      	blx	r7
 801b7ce:	3001      	adds	r0, #1
 801b7d0:	d0e6      	beq.n	801b7a0 <_printf_common+0xa8>
 801b7d2:	3601      	adds	r6, #1
 801b7d4:	e7d1      	b.n	801b77a <_printf_common+0x82>
	...

0801b7d8 <_printf_i>:
 801b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7da:	b08b      	sub	sp, #44	@ 0x2c
 801b7dc:	9206      	str	r2, [sp, #24]
 801b7de:	000a      	movs	r2, r1
 801b7e0:	3243      	adds	r2, #67	@ 0x43
 801b7e2:	9307      	str	r3, [sp, #28]
 801b7e4:	9005      	str	r0, [sp, #20]
 801b7e6:	9203      	str	r2, [sp, #12]
 801b7e8:	7e0a      	ldrb	r2, [r1, #24]
 801b7ea:	000c      	movs	r4, r1
 801b7ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b7ee:	2a78      	cmp	r2, #120	@ 0x78
 801b7f0:	d809      	bhi.n	801b806 <_printf_i+0x2e>
 801b7f2:	2a62      	cmp	r2, #98	@ 0x62
 801b7f4:	d80b      	bhi.n	801b80e <_printf_i+0x36>
 801b7f6:	2a00      	cmp	r2, #0
 801b7f8:	d100      	bne.n	801b7fc <_printf_i+0x24>
 801b7fa:	e0bc      	b.n	801b976 <_printf_i+0x19e>
 801b7fc:	497b      	ldr	r1, [pc, #492]	@ (801b9ec <_printf_i+0x214>)
 801b7fe:	9104      	str	r1, [sp, #16]
 801b800:	2a58      	cmp	r2, #88	@ 0x58
 801b802:	d100      	bne.n	801b806 <_printf_i+0x2e>
 801b804:	e090      	b.n	801b928 <_printf_i+0x150>
 801b806:	0025      	movs	r5, r4
 801b808:	3542      	adds	r5, #66	@ 0x42
 801b80a:	702a      	strb	r2, [r5, #0]
 801b80c:	e022      	b.n	801b854 <_printf_i+0x7c>
 801b80e:	0010      	movs	r0, r2
 801b810:	3863      	subs	r0, #99	@ 0x63
 801b812:	2815      	cmp	r0, #21
 801b814:	d8f7      	bhi.n	801b806 <_printf_i+0x2e>
 801b816:	f7e4 fcbb 	bl	8000190 <__gnu_thumb1_case_shi>
 801b81a:	0016      	.short	0x0016
 801b81c:	fff6001f 	.word	0xfff6001f
 801b820:	fff6fff6 	.word	0xfff6fff6
 801b824:	001ffff6 	.word	0x001ffff6
 801b828:	fff6fff6 	.word	0xfff6fff6
 801b82c:	fff6fff6 	.word	0xfff6fff6
 801b830:	003600a1 	.word	0x003600a1
 801b834:	fff60080 	.word	0xfff60080
 801b838:	00b2fff6 	.word	0x00b2fff6
 801b83c:	0036fff6 	.word	0x0036fff6
 801b840:	fff6fff6 	.word	0xfff6fff6
 801b844:	0084      	.short	0x0084
 801b846:	0025      	movs	r5, r4
 801b848:	681a      	ldr	r2, [r3, #0]
 801b84a:	3542      	adds	r5, #66	@ 0x42
 801b84c:	1d11      	adds	r1, r2, #4
 801b84e:	6019      	str	r1, [r3, #0]
 801b850:	6813      	ldr	r3, [r2, #0]
 801b852:	702b      	strb	r3, [r5, #0]
 801b854:	2301      	movs	r3, #1
 801b856:	e0a0      	b.n	801b99a <_printf_i+0x1c2>
 801b858:	6818      	ldr	r0, [r3, #0]
 801b85a:	6809      	ldr	r1, [r1, #0]
 801b85c:	1d02      	adds	r2, r0, #4
 801b85e:	060d      	lsls	r5, r1, #24
 801b860:	d50b      	bpl.n	801b87a <_printf_i+0xa2>
 801b862:	6806      	ldr	r6, [r0, #0]
 801b864:	601a      	str	r2, [r3, #0]
 801b866:	2e00      	cmp	r6, #0
 801b868:	da03      	bge.n	801b872 <_printf_i+0x9a>
 801b86a:	232d      	movs	r3, #45	@ 0x2d
 801b86c:	9a03      	ldr	r2, [sp, #12]
 801b86e:	4276      	negs	r6, r6
 801b870:	7013      	strb	r3, [r2, #0]
 801b872:	4b5e      	ldr	r3, [pc, #376]	@ (801b9ec <_printf_i+0x214>)
 801b874:	270a      	movs	r7, #10
 801b876:	9304      	str	r3, [sp, #16]
 801b878:	e018      	b.n	801b8ac <_printf_i+0xd4>
 801b87a:	6806      	ldr	r6, [r0, #0]
 801b87c:	601a      	str	r2, [r3, #0]
 801b87e:	0649      	lsls	r1, r1, #25
 801b880:	d5f1      	bpl.n	801b866 <_printf_i+0x8e>
 801b882:	b236      	sxth	r6, r6
 801b884:	e7ef      	b.n	801b866 <_printf_i+0x8e>
 801b886:	6808      	ldr	r0, [r1, #0]
 801b888:	6819      	ldr	r1, [r3, #0]
 801b88a:	c940      	ldmia	r1!, {r6}
 801b88c:	0605      	lsls	r5, r0, #24
 801b88e:	d402      	bmi.n	801b896 <_printf_i+0xbe>
 801b890:	0640      	lsls	r0, r0, #25
 801b892:	d500      	bpl.n	801b896 <_printf_i+0xbe>
 801b894:	b2b6      	uxth	r6, r6
 801b896:	6019      	str	r1, [r3, #0]
 801b898:	4b54      	ldr	r3, [pc, #336]	@ (801b9ec <_printf_i+0x214>)
 801b89a:	270a      	movs	r7, #10
 801b89c:	9304      	str	r3, [sp, #16]
 801b89e:	2a6f      	cmp	r2, #111	@ 0x6f
 801b8a0:	d100      	bne.n	801b8a4 <_printf_i+0xcc>
 801b8a2:	3f02      	subs	r7, #2
 801b8a4:	0023      	movs	r3, r4
 801b8a6:	2200      	movs	r2, #0
 801b8a8:	3343      	adds	r3, #67	@ 0x43
 801b8aa:	701a      	strb	r2, [r3, #0]
 801b8ac:	6863      	ldr	r3, [r4, #4]
 801b8ae:	60a3      	str	r3, [r4, #8]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	db03      	blt.n	801b8bc <_printf_i+0xe4>
 801b8b4:	2104      	movs	r1, #4
 801b8b6:	6822      	ldr	r2, [r4, #0]
 801b8b8:	438a      	bics	r2, r1
 801b8ba:	6022      	str	r2, [r4, #0]
 801b8bc:	2e00      	cmp	r6, #0
 801b8be:	d102      	bne.n	801b8c6 <_printf_i+0xee>
 801b8c0:	9d03      	ldr	r5, [sp, #12]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d00c      	beq.n	801b8e0 <_printf_i+0x108>
 801b8c6:	9d03      	ldr	r5, [sp, #12]
 801b8c8:	0030      	movs	r0, r6
 801b8ca:	0039      	movs	r1, r7
 801b8cc:	f7e4 fcf0 	bl	80002b0 <__aeabi_uidivmod>
 801b8d0:	9b04      	ldr	r3, [sp, #16]
 801b8d2:	3d01      	subs	r5, #1
 801b8d4:	5c5b      	ldrb	r3, [r3, r1]
 801b8d6:	702b      	strb	r3, [r5, #0]
 801b8d8:	0033      	movs	r3, r6
 801b8da:	0006      	movs	r6, r0
 801b8dc:	429f      	cmp	r7, r3
 801b8de:	d9f3      	bls.n	801b8c8 <_printf_i+0xf0>
 801b8e0:	2f08      	cmp	r7, #8
 801b8e2:	d109      	bne.n	801b8f8 <_printf_i+0x120>
 801b8e4:	6823      	ldr	r3, [r4, #0]
 801b8e6:	07db      	lsls	r3, r3, #31
 801b8e8:	d506      	bpl.n	801b8f8 <_printf_i+0x120>
 801b8ea:	6862      	ldr	r2, [r4, #4]
 801b8ec:	6923      	ldr	r3, [r4, #16]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	dc02      	bgt.n	801b8f8 <_printf_i+0x120>
 801b8f2:	2330      	movs	r3, #48	@ 0x30
 801b8f4:	3d01      	subs	r5, #1
 801b8f6:	702b      	strb	r3, [r5, #0]
 801b8f8:	9b03      	ldr	r3, [sp, #12]
 801b8fa:	1b5b      	subs	r3, r3, r5
 801b8fc:	6123      	str	r3, [r4, #16]
 801b8fe:	9b07      	ldr	r3, [sp, #28]
 801b900:	0021      	movs	r1, r4
 801b902:	9300      	str	r3, [sp, #0]
 801b904:	9805      	ldr	r0, [sp, #20]
 801b906:	9b06      	ldr	r3, [sp, #24]
 801b908:	aa09      	add	r2, sp, #36	@ 0x24
 801b90a:	f7ff fef5 	bl	801b6f8 <_printf_common>
 801b90e:	3001      	adds	r0, #1
 801b910:	d148      	bne.n	801b9a4 <_printf_i+0x1cc>
 801b912:	2001      	movs	r0, #1
 801b914:	4240      	negs	r0, r0
 801b916:	b00b      	add	sp, #44	@ 0x2c
 801b918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b91a:	2220      	movs	r2, #32
 801b91c:	6809      	ldr	r1, [r1, #0]
 801b91e:	430a      	orrs	r2, r1
 801b920:	6022      	str	r2, [r4, #0]
 801b922:	2278      	movs	r2, #120	@ 0x78
 801b924:	4932      	ldr	r1, [pc, #200]	@ (801b9f0 <_printf_i+0x218>)
 801b926:	9104      	str	r1, [sp, #16]
 801b928:	0021      	movs	r1, r4
 801b92a:	3145      	adds	r1, #69	@ 0x45
 801b92c:	700a      	strb	r2, [r1, #0]
 801b92e:	6819      	ldr	r1, [r3, #0]
 801b930:	6822      	ldr	r2, [r4, #0]
 801b932:	c940      	ldmia	r1!, {r6}
 801b934:	0610      	lsls	r0, r2, #24
 801b936:	d402      	bmi.n	801b93e <_printf_i+0x166>
 801b938:	0650      	lsls	r0, r2, #25
 801b93a:	d500      	bpl.n	801b93e <_printf_i+0x166>
 801b93c:	b2b6      	uxth	r6, r6
 801b93e:	6019      	str	r1, [r3, #0]
 801b940:	07d3      	lsls	r3, r2, #31
 801b942:	d502      	bpl.n	801b94a <_printf_i+0x172>
 801b944:	2320      	movs	r3, #32
 801b946:	4313      	orrs	r3, r2
 801b948:	6023      	str	r3, [r4, #0]
 801b94a:	2e00      	cmp	r6, #0
 801b94c:	d001      	beq.n	801b952 <_printf_i+0x17a>
 801b94e:	2710      	movs	r7, #16
 801b950:	e7a8      	b.n	801b8a4 <_printf_i+0xcc>
 801b952:	2220      	movs	r2, #32
 801b954:	6823      	ldr	r3, [r4, #0]
 801b956:	4393      	bics	r3, r2
 801b958:	6023      	str	r3, [r4, #0]
 801b95a:	e7f8      	b.n	801b94e <_printf_i+0x176>
 801b95c:	681a      	ldr	r2, [r3, #0]
 801b95e:	680d      	ldr	r5, [r1, #0]
 801b960:	1d10      	adds	r0, r2, #4
 801b962:	6949      	ldr	r1, [r1, #20]
 801b964:	6018      	str	r0, [r3, #0]
 801b966:	6813      	ldr	r3, [r2, #0]
 801b968:	062e      	lsls	r6, r5, #24
 801b96a:	d501      	bpl.n	801b970 <_printf_i+0x198>
 801b96c:	6019      	str	r1, [r3, #0]
 801b96e:	e002      	b.n	801b976 <_printf_i+0x19e>
 801b970:	066d      	lsls	r5, r5, #25
 801b972:	d5fb      	bpl.n	801b96c <_printf_i+0x194>
 801b974:	8019      	strh	r1, [r3, #0]
 801b976:	2300      	movs	r3, #0
 801b978:	9d03      	ldr	r5, [sp, #12]
 801b97a:	6123      	str	r3, [r4, #16]
 801b97c:	e7bf      	b.n	801b8fe <_printf_i+0x126>
 801b97e:	681a      	ldr	r2, [r3, #0]
 801b980:	1d11      	adds	r1, r2, #4
 801b982:	6019      	str	r1, [r3, #0]
 801b984:	6815      	ldr	r5, [r2, #0]
 801b986:	2100      	movs	r1, #0
 801b988:	0028      	movs	r0, r5
 801b98a:	6862      	ldr	r2, [r4, #4]
 801b98c:	f000 fa7b 	bl	801be86 <memchr>
 801b990:	2800      	cmp	r0, #0
 801b992:	d001      	beq.n	801b998 <_printf_i+0x1c0>
 801b994:	1b40      	subs	r0, r0, r5
 801b996:	6060      	str	r0, [r4, #4]
 801b998:	6863      	ldr	r3, [r4, #4]
 801b99a:	6123      	str	r3, [r4, #16]
 801b99c:	2300      	movs	r3, #0
 801b99e:	9a03      	ldr	r2, [sp, #12]
 801b9a0:	7013      	strb	r3, [r2, #0]
 801b9a2:	e7ac      	b.n	801b8fe <_printf_i+0x126>
 801b9a4:	002a      	movs	r2, r5
 801b9a6:	6923      	ldr	r3, [r4, #16]
 801b9a8:	9906      	ldr	r1, [sp, #24]
 801b9aa:	9805      	ldr	r0, [sp, #20]
 801b9ac:	9d07      	ldr	r5, [sp, #28]
 801b9ae:	47a8      	blx	r5
 801b9b0:	3001      	adds	r0, #1
 801b9b2:	d0ae      	beq.n	801b912 <_printf_i+0x13a>
 801b9b4:	6823      	ldr	r3, [r4, #0]
 801b9b6:	079b      	lsls	r3, r3, #30
 801b9b8:	d415      	bmi.n	801b9e6 <_printf_i+0x20e>
 801b9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9bc:	68e0      	ldr	r0, [r4, #12]
 801b9be:	4298      	cmp	r0, r3
 801b9c0:	daa9      	bge.n	801b916 <_printf_i+0x13e>
 801b9c2:	0018      	movs	r0, r3
 801b9c4:	e7a7      	b.n	801b916 <_printf_i+0x13e>
 801b9c6:	0022      	movs	r2, r4
 801b9c8:	2301      	movs	r3, #1
 801b9ca:	9906      	ldr	r1, [sp, #24]
 801b9cc:	9805      	ldr	r0, [sp, #20]
 801b9ce:	9e07      	ldr	r6, [sp, #28]
 801b9d0:	3219      	adds	r2, #25
 801b9d2:	47b0      	blx	r6
 801b9d4:	3001      	adds	r0, #1
 801b9d6:	d09c      	beq.n	801b912 <_printf_i+0x13a>
 801b9d8:	3501      	adds	r5, #1
 801b9da:	68e3      	ldr	r3, [r4, #12]
 801b9dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9de:	1a9b      	subs	r3, r3, r2
 801b9e0:	42ab      	cmp	r3, r5
 801b9e2:	dcf0      	bgt.n	801b9c6 <_printf_i+0x1ee>
 801b9e4:	e7e9      	b.n	801b9ba <_printf_i+0x1e2>
 801b9e6:	2500      	movs	r5, #0
 801b9e8:	e7f7      	b.n	801b9da <_printf_i+0x202>
 801b9ea:	46c0      	nop			@ (mov r8, r8)
 801b9ec:	0802079b 	.word	0x0802079b
 801b9f0:	080207ac 	.word	0x080207ac

0801b9f4 <std>:
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	b510      	push	{r4, lr}
 801b9f8:	0004      	movs	r4, r0
 801b9fa:	6003      	str	r3, [r0, #0]
 801b9fc:	6043      	str	r3, [r0, #4]
 801b9fe:	6083      	str	r3, [r0, #8]
 801ba00:	8181      	strh	r1, [r0, #12]
 801ba02:	6643      	str	r3, [r0, #100]	@ 0x64
 801ba04:	81c2      	strh	r2, [r0, #14]
 801ba06:	6103      	str	r3, [r0, #16]
 801ba08:	6143      	str	r3, [r0, #20]
 801ba0a:	6183      	str	r3, [r0, #24]
 801ba0c:	0019      	movs	r1, r3
 801ba0e:	2208      	movs	r2, #8
 801ba10:	305c      	adds	r0, #92	@ 0x5c
 801ba12:	f000 f967 	bl	801bce4 <memset>
 801ba16:	4b0b      	ldr	r3, [pc, #44]	@ (801ba44 <std+0x50>)
 801ba18:	6224      	str	r4, [r4, #32]
 801ba1a:	6263      	str	r3, [r4, #36]	@ 0x24
 801ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (801ba48 <std+0x54>)
 801ba1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ba20:	4b0a      	ldr	r3, [pc, #40]	@ (801ba4c <std+0x58>)
 801ba22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ba24:	4b0a      	ldr	r3, [pc, #40]	@ (801ba50 <std+0x5c>)
 801ba26:	6323      	str	r3, [r4, #48]	@ 0x30
 801ba28:	4b0a      	ldr	r3, [pc, #40]	@ (801ba54 <std+0x60>)
 801ba2a:	429c      	cmp	r4, r3
 801ba2c:	d005      	beq.n	801ba3a <std+0x46>
 801ba2e:	4b0a      	ldr	r3, [pc, #40]	@ (801ba58 <std+0x64>)
 801ba30:	429c      	cmp	r4, r3
 801ba32:	d002      	beq.n	801ba3a <std+0x46>
 801ba34:	4b09      	ldr	r3, [pc, #36]	@ (801ba5c <std+0x68>)
 801ba36:	429c      	cmp	r4, r3
 801ba38:	d103      	bne.n	801ba42 <std+0x4e>
 801ba3a:	0020      	movs	r0, r4
 801ba3c:	3058      	adds	r0, #88	@ 0x58
 801ba3e:	f000 fa1f 	bl	801be80 <__retarget_lock_init_recursive>
 801ba42:	bd10      	pop	{r4, pc}
 801ba44:	0801bbdd 	.word	0x0801bbdd
 801ba48:	0801bc05 	.word	0x0801bc05
 801ba4c:	0801bc3d 	.word	0x0801bc3d
 801ba50:	0801bc69 	.word	0x0801bc69
 801ba54:	2000375c 	.word	0x2000375c
 801ba58:	200037c4 	.word	0x200037c4
 801ba5c:	2000382c 	.word	0x2000382c

0801ba60 <stdio_exit_handler>:
 801ba60:	b510      	push	{r4, lr}
 801ba62:	4a03      	ldr	r2, [pc, #12]	@ (801ba70 <stdio_exit_handler+0x10>)
 801ba64:	4903      	ldr	r1, [pc, #12]	@ (801ba74 <stdio_exit_handler+0x14>)
 801ba66:	4804      	ldr	r0, [pc, #16]	@ (801ba78 <stdio_exit_handler+0x18>)
 801ba68:	f000 f86c 	bl	801bb44 <_fwalk_sglue>
 801ba6c:	bd10      	pop	{r4, pc}
 801ba6e:	46c0      	nop			@ (mov r8, r8)
 801ba70:	20000254 	.word	0x20000254
 801ba74:	0801e4a5 	.word	0x0801e4a5
 801ba78:	200003d0 	.word	0x200003d0

0801ba7c <cleanup_stdio>:
 801ba7c:	6841      	ldr	r1, [r0, #4]
 801ba7e:	4b0b      	ldr	r3, [pc, #44]	@ (801baac <cleanup_stdio+0x30>)
 801ba80:	b510      	push	{r4, lr}
 801ba82:	0004      	movs	r4, r0
 801ba84:	4299      	cmp	r1, r3
 801ba86:	d001      	beq.n	801ba8c <cleanup_stdio+0x10>
 801ba88:	f002 fd0c 	bl	801e4a4 <_fflush_r>
 801ba8c:	68a1      	ldr	r1, [r4, #8]
 801ba8e:	4b08      	ldr	r3, [pc, #32]	@ (801bab0 <cleanup_stdio+0x34>)
 801ba90:	4299      	cmp	r1, r3
 801ba92:	d002      	beq.n	801ba9a <cleanup_stdio+0x1e>
 801ba94:	0020      	movs	r0, r4
 801ba96:	f002 fd05 	bl	801e4a4 <_fflush_r>
 801ba9a:	68e1      	ldr	r1, [r4, #12]
 801ba9c:	4b05      	ldr	r3, [pc, #20]	@ (801bab4 <cleanup_stdio+0x38>)
 801ba9e:	4299      	cmp	r1, r3
 801baa0:	d002      	beq.n	801baa8 <cleanup_stdio+0x2c>
 801baa2:	0020      	movs	r0, r4
 801baa4:	f002 fcfe 	bl	801e4a4 <_fflush_r>
 801baa8:	bd10      	pop	{r4, pc}
 801baaa:	46c0      	nop			@ (mov r8, r8)
 801baac:	2000375c 	.word	0x2000375c
 801bab0:	200037c4 	.word	0x200037c4
 801bab4:	2000382c 	.word	0x2000382c

0801bab8 <global_stdio_init.part.0>:
 801bab8:	b510      	push	{r4, lr}
 801baba:	4b09      	ldr	r3, [pc, #36]	@ (801bae0 <global_stdio_init.part.0+0x28>)
 801babc:	4a09      	ldr	r2, [pc, #36]	@ (801bae4 <global_stdio_init.part.0+0x2c>)
 801babe:	2104      	movs	r1, #4
 801bac0:	601a      	str	r2, [r3, #0]
 801bac2:	4809      	ldr	r0, [pc, #36]	@ (801bae8 <global_stdio_init.part.0+0x30>)
 801bac4:	2200      	movs	r2, #0
 801bac6:	f7ff ff95 	bl	801b9f4 <std>
 801baca:	2201      	movs	r2, #1
 801bacc:	2109      	movs	r1, #9
 801bace:	4807      	ldr	r0, [pc, #28]	@ (801baec <global_stdio_init.part.0+0x34>)
 801bad0:	f7ff ff90 	bl	801b9f4 <std>
 801bad4:	2202      	movs	r2, #2
 801bad6:	2112      	movs	r1, #18
 801bad8:	4805      	ldr	r0, [pc, #20]	@ (801baf0 <global_stdio_init.part.0+0x38>)
 801bada:	f7ff ff8b 	bl	801b9f4 <std>
 801bade:	bd10      	pop	{r4, pc}
 801bae0:	20003894 	.word	0x20003894
 801bae4:	0801ba61 	.word	0x0801ba61
 801bae8:	2000375c 	.word	0x2000375c
 801baec:	200037c4 	.word	0x200037c4
 801baf0:	2000382c 	.word	0x2000382c

0801baf4 <__sfp_lock_acquire>:
 801baf4:	b510      	push	{r4, lr}
 801baf6:	4802      	ldr	r0, [pc, #8]	@ (801bb00 <__sfp_lock_acquire+0xc>)
 801baf8:	f000 f9c3 	bl	801be82 <__retarget_lock_acquire_recursive>
 801bafc:	bd10      	pop	{r4, pc}
 801bafe:	46c0      	nop			@ (mov r8, r8)
 801bb00:	2000389d 	.word	0x2000389d

0801bb04 <__sfp_lock_release>:
 801bb04:	b510      	push	{r4, lr}
 801bb06:	4802      	ldr	r0, [pc, #8]	@ (801bb10 <__sfp_lock_release+0xc>)
 801bb08:	f000 f9bc 	bl	801be84 <__retarget_lock_release_recursive>
 801bb0c:	bd10      	pop	{r4, pc}
 801bb0e:	46c0      	nop			@ (mov r8, r8)
 801bb10:	2000389d 	.word	0x2000389d

0801bb14 <__sinit>:
 801bb14:	b510      	push	{r4, lr}
 801bb16:	0004      	movs	r4, r0
 801bb18:	f7ff ffec 	bl	801baf4 <__sfp_lock_acquire>
 801bb1c:	6a23      	ldr	r3, [r4, #32]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d002      	beq.n	801bb28 <__sinit+0x14>
 801bb22:	f7ff ffef 	bl	801bb04 <__sfp_lock_release>
 801bb26:	bd10      	pop	{r4, pc}
 801bb28:	4b04      	ldr	r3, [pc, #16]	@ (801bb3c <__sinit+0x28>)
 801bb2a:	6223      	str	r3, [r4, #32]
 801bb2c:	4b04      	ldr	r3, [pc, #16]	@ (801bb40 <__sinit+0x2c>)
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d1f6      	bne.n	801bb22 <__sinit+0xe>
 801bb34:	f7ff ffc0 	bl	801bab8 <global_stdio_init.part.0>
 801bb38:	e7f3      	b.n	801bb22 <__sinit+0xe>
 801bb3a:	46c0      	nop			@ (mov r8, r8)
 801bb3c:	0801ba7d 	.word	0x0801ba7d
 801bb40:	20003894 	.word	0x20003894

0801bb44 <_fwalk_sglue>:
 801bb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb46:	0014      	movs	r4, r2
 801bb48:	2600      	movs	r6, #0
 801bb4a:	9000      	str	r0, [sp, #0]
 801bb4c:	9101      	str	r1, [sp, #4]
 801bb4e:	68a5      	ldr	r5, [r4, #8]
 801bb50:	6867      	ldr	r7, [r4, #4]
 801bb52:	3f01      	subs	r7, #1
 801bb54:	d504      	bpl.n	801bb60 <_fwalk_sglue+0x1c>
 801bb56:	6824      	ldr	r4, [r4, #0]
 801bb58:	2c00      	cmp	r4, #0
 801bb5a:	d1f8      	bne.n	801bb4e <_fwalk_sglue+0xa>
 801bb5c:	0030      	movs	r0, r6
 801bb5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bb60:	89ab      	ldrh	r3, [r5, #12]
 801bb62:	2b01      	cmp	r3, #1
 801bb64:	d908      	bls.n	801bb78 <_fwalk_sglue+0x34>
 801bb66:	220e      	movs	r2, #14
 801bb68:	5eab      	ldrsh	r3, [r5, r2]
 801bb6a:	3301      	adds	r3, #1
 801bb6c:	d004      	beq.n	801bb78 <_fwalk_sglue+0x34>
 801bb6e:	0029      	movs	r1, r5
 801bb70:	9800      	ldr	r0, [sp, #0]
 801bb72:	9b01      	ldr	r3, [sp, #4]
 801bb74:	4798      	blx	r3
 801bb76:	4306      	orrs	r6, r0
 801bb78:	3568      	adds	r5, #104	@ 0x68
 801bb7a:	e7ea      	b.n	801bb52 <_fwalk_sglue+0xe>

0801bb7c <iprintf>:
 801bb7c:	b40f      	push	{r0, r1, r2, r3}
 801bb7e:	b507      	push	{r0, r1, r2, lr}
 801bb80:	4905      	ldr	r1, [pc, #20]	@ (801bb98 <iprintf+0x1c>)
 801bb82:	ab04      	add	r3, sp, #16
 801bb84:	6808      	ldr	r0, [r1, #0]
 801bb86:	cb04      	ldmia	r3!, {r2}
 801bb88:	6881      	ldr	r1, [r0, #8]
 801bb8a:	9301      	str	r3, [sp, #4]
 801bb8c:	f002 fae8 	bl	801e160 <_vfiprintf_r>
 801bb90:	b003      	add	sp, #12
 801bb92:	bc08      	pop	{r3}
 801bb94:	b004      	add	sp, #16
 801bb96:	4718      	bx	r3
 801bb98:	200003cc 	.word	0x200003cc

0801bb9c <siprintf>:
 801bb9c:	b40e      	push	{r1, r2, r3}
 801bb9e:	b500      	push	{lr}
 801bba0:	490b      	ldr	r1, [pc, #44]	@ (801bbd0 <siprintf+0x34>)
 801bba2:	b09c      	sub	sp, #112	@ 0x70
 801bba4:	ab1d      	add	r3, sp, #116	@ 0x74
 801bba6:	9002      	str	r0, [sp, #8]
 801bba8:	9006      	str	r0, [sp, #24]
 801bbaa:	9107      	str	r1, [sp, #28]
 801bbac:	9104      	str	r1, [sp, #16]
 801bbae:	4809      	ldr	r0, [pc, #36]	@ (801bbd4 <siprintf+0x38>)
 801bbb0:	4909      	ldr	r1, [pc, #36]	@ (801bbd8 <siprintf+0x3c>)
 801bbb2:	cb04      	ldmia	r3!, {r2}
 801bbb4:	9105      	str	r1, [sp, #20]
 801bbb6:	6800      	ldr	r0, [r0, #0]
 801bbb8:	a902      	add	r1, sp, #8
 801bbba:	9301      	str	r3, [sp, #4]
 801bbbc:	f002 f9aa 	bl	801df14 <_svfiprintf_r>
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	9b02      	ldr	r3, [sp, #8]
 801bbc4:	701a      	strb	r2, [r3, #0]
 801bbc6:	b01c      	add	sp, #112	@ 0x70
 801bbc8:	bc08      	pop	{r3}
 801bbca:	b003      	add	sp, #12
 801bbcc:	4718      	bx	r3
 801bbce:	46c0      	nop			@ (mov r8, r8)
 801bbd0:	7fffffff 	.word	0x7fffffff
 801bbd4:	200003cc 	.word	0x200003cc
 801bbd8:	ffff0208 	.word	0xffff0208

0801bbdc <__sread>:
 801bbdc:	b570      	push	{r4, r5, r6, lr}
 801bbde:	000c      	movs	r4, r1
 801bbe0:	250e      	movs	r5, #14
 801bbe2:	5f49      	ldrsh	r1, [r1, r5]
 801bbe4:	f000 f8fa 	bl	801bddc <_read_r>
 801bbe8:	2800      	cmp	r0, #0
 801bbea:	db03      	blt.n	801bbf4 <__sread+0x18>
 801bbec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801bbee:	181b      	adds	r3, r3, r0
 801bbf0:	6563      	str	r3, [r4, #84]	@ 0x54
 801bbf2:	bd70      	pop	{r4, r5, r6, pc}
 801bbf4:	89a3      	ldrh	r3, [r4, #12]
 801bbf6:	4a02      	ldr	r2, [pc, #8]	@ (801bc00 <__sread+0x24>)
 801bbf8:	4013      	ands	r3, r2
 801bbfa:	81a3      	strh	r3, [r4, #12]
 801bbfc:	e7f9      	b.n	801bbf2 <__sread+0x16>
 801bbfe:	46c0      	nop			@ (mov r8, r8)
 801bc00:	ffffefff 	.word	0xffffefff

0801bc04 <__swrite>:
 801bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc06:	001f      	movs	r7, r3
 801bc08:	898b      	ldrh	r3, [r1, #12]
 801bc0a:	0005      	movs	r5, r0
 801bc0c:	000c      	movs	r4, r1
 801bc0e:	0016      	movs	r6, r2
 801bc10:	05db      	lsls	r3, r3, #23
 801bc12:	d505      	bpl.n	801bc20 <__swrite+0x1c>
 801bc14:	230e      	movs	r3, #14
 801bc16:	5ec9      	ldrsh	r1, [r1, r3]
 801bc18:	2200      	movs	r2, #0
 801bc1a:	2302      	movs	r3, #2
 801bc1c:	f000 f8ca 	bl	801bdb4 <_lseek_r>
 801bc20:	89a3      	ldrh	r3, [r4, #12]
 801bc22:	4a05      	ldr	r2, [pc, #20]	@ (801bc38 <__swrite+0x34>)
 801bc24:	0028      	movs	r0, r5
 801bc26:	4013      	ands	r3, r2
 801bc28:	81a3      	strh	r3, [r4, #12]
 801bc2a:	0032      	movs	r2, r6
 801bc2c:	230e      	movs	r3, #14
 801bc2e:	5ee1      	ldrsh	r1, [r4, r3]
 801bc30:	003b      	movs	r3, r7
 801bc32:	f000 f8e7 	bl	801be04 <_write_r>
 801bc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc38:	ffffefff 	.word	0xffffefff

0801bc3c <__sseek>:
 801bc3c:	b570      	push	{r4, r5, r6, lr}
 801bc3e:	000c      	movs	r4, r1
 801bc40:	250e      	movs	r5, #14
 801bc42:	5f49      	ldrsh	r1, [r1, r5]
 801bc44:	f000 f8b6 	bl	801bdb4 <_lseek_r>
 801bc48:	89a3      	ldrh	r3, [r4, #12]
 801bc4a:	1c42      	adds	r2, r0, #1
 801bc4c:	d103      	bne.n	801bc56 <__sseek+0x1a>
 801bc4e:	4a05      	ldr	r2, [pc, #20]	@ (801bc64 <__sseek+0x28>)
 801bc50:	4013      	ands	r3, r2
 801bc52:	81a3      	strh	r3, [r4, #12]
 801bc54:	bd70      	pop	{r4, r5, r6, pc}
 801bc56:	2280      	movs	r2, #128	@ 0x80
 801bc58:	0152      	lsls	r2, r2, #5
 801bc5a:	4313      	orrs	r3, r2
 801bc5c:	81a3      	strh	r3, [r4, #12]
 801bc5e:	6560      	str	r0, [r4, #84]	@ 0x54
 801bc60:	e7f8      	b.n	801bc54 <__sseek+0x18>
 801bc62:	46c0      	nop			@ (mov r8, r8)
 801bc64:	ffffefff 	.word	0xffffefff

0801bc68 <__sclose>:
 801bc68:	b510      	push	{r4, lr}
 801bc6a:	230e      	movs	r3, #14
 801bc6c:	5ec9      	ldrsh	r1, [r1, r3]
 801bc6e:	f000 f88f 	bl	801bd90 <_close_r>
 801bc72:	bd10      	pop	{r4, pc}

0801bc74 <_vsniprintf_r>:
 801bc74:	b530      	push	{r4, r5, lr}
 801bc76:	0014      	movs	r4, r2
 801bc78:	0005      	movs	r5, r0
 801bc7a:	001a      	movs	r2, r3
 801bc7c:	b09b      	sub	sp, #108	@ 0x6c
 801bc7e:	2c00      	cmp	r4, #0
 801bc80:	da05      	bge.n	801bc8e <_vsniprintf_r+0x1a>
 801bc82:	238b      	movs	r3, #139	@ 0x8b
 801bc84:	6003      	str	r3, [r0, #0]
 801bc86:	2001      	movs	r0, #1
 801bc88:	4240      	negs	r0, r0
 801bc8a:	b01b      	add	sp, #108	@ 0x6c
 801bc8c:	bd30      	pop	{r4, r5, pc}
 801bc8e:	2382      	movs	r3, #130	@ 0x82
 801bc90:	4668      	mov	r0, sp
 801bc92:	009b      	lsls	r3, r3, #2
 801bc94:	8183      	strh	r3, [r0, #12]
 801bc96:	2300      	movs	r3, #0
 801bc98:	9100      	str	r1, [sp, #0]
 801bc9a:	9104      	str	r1, [sp, #16]
 801bc9c:	429c      	cmp	r4, r3
 801bc9e:	d000      	beq.n	801bca2 <_vsniprintf_r+0x2e>
 801bca0:	1e63      	subs	r3, r4, #1
 801bca2:	9302      	str	r3, [sp, #8]
 801bca4:	9305      	str	r3, [sp, #20]
 801bca6:	2301      	movs	r3, #1
 801bca8:	4669      	mov	r1, sp
 801bcaa:	425b      	negs	r3, r3
 801bcac:	81cb      	strh	r3, [r1, #14]
 801bcae:	0028      	movs	r0, r5
 801bcb0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bcb2:	f002 f92f 	bl	801df14 <_svfiprintf_r>
 801bcb6:	1c43      	adds	r3, r0, #1
 801bcb8:	da01      	bge.n	801bcbe <_vsniprintf_r+0x4a>
 801bcba:	238b      	movs	r3, #139	@ 0x8b
 801bcbc:	602b      	str	r3, [r5, #0]
 801bcbe:	2c00      	cmp	r4, #0
 801bcc0:	d0e3      	beq.n	801bc8a <_vsniprintf_r+0x16>
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	9b00      	ldr	r3, [sp, #0]
 801bcc6:	701a      	strb	r2, [r3, #0]
 801bcc8:	e7df      	b.n	801bc8a <_vsniprintf_r+0x16>
	...

0801bccc <vsniprintf>:
 801bccc:	b513      	push	{r0, r1, r4, lr}
 801bcce:	4c04      	ldr	r4, [pc, #16]	@ (801bce0 <vsniprintf+0x14>)
 801bcd0:	9300      	str	r3, [sp, #0]
 801bcd2:	0013      	movs	r3, r2
 801bcd4:	000a      	movs	r2, r1
 801bcd6:	0001      	movs	r1, r0
 801bcd8:	6820      	ldr	r0, [r4, #0]
 801bcda:	f7ff ffcb 	bl	801bc74 <_vsniprintf_r>
 801bcde:	bd16      	pop	{r1, r2, r4, pc}
 801bce0:	200003cc 	.word	0x200003cc

0801bce4 <memset>:
 801bce4:	0003      	movs	r3, r0
 801bce6:	1882      	adds	r2, r0, r2
 801bce8:	4293      	cmp	r3, r2
 801bcea:	d100      	bne.n	801bcee <memset+0xa>
 801bcec:	4770      	bx	lr
 801bcee:	7019      	strb	r1, [r3, #0]
 801bcf0:	3301      	adds	r3, #1
 801bcf2:	e7f9      	b.n	801bce8 <memset+0x4>

0801bcf4 <strchr>:
 801bcf4:	b2c9      	uxtb	r1, r1
 801bcf6:	7803      	ldrb	r3, [r0, #0]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d004      	beq.n	801bd06 <strchr+0x12>
 801bcfc:	428b      	cmp	r3, r1
 801bcfe:	d100      	bne.n	801bd02 <strchr+0xe>
 801bd00:	4770      	bx	lr
 801bd02:	3001      	adds	r0, #1
 801bd04:	e7f7      	b.n	801bcf6 <strchr+0x2>
 801bd06:	424b      	negs	r3, r1
 801bd08:	4159      	adcs	r1, r3
 801bd0a:	4249      	negs	r1, r1
 801bd0c:	4008      	ands	r0, r1
 801bd0e:	e7f7      	b.n	801bd00 <strchr+0xc>

0801bd10 <strncmp>:
 801bd10:	b530      	push	{r4, r5, lr}
 801bd12:	0005      	movs	r5, r0
 801bd14:	1e10      	subs	r0, r2, #0
 801bd16:	d00b      	beq.n	801bd30 <strncmp+0x20>
 801bd18:	2400      	movs	r4, #0
 801bd1a:	3a01      	subs	r2, #1
 801bd1c:	5d2b      	ldrb	r3, [r5, r4]
 801bd1e:	5d08      	ldrb	r0, [r1, r4]
 801bd20:	4283      	cmp	r3, r0
 801bd22:	d104      	bne.n	801bd2e <strncmp+0x1e>
 801bd24:	42a2      	cmp	r2, r4
 801bd26:	d002      	beq.n	801bd2e <strncmp+0x1e>
 801bd28:	3401      	adds	r4, #1
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d1f6      	bne.n	801bd1c <strncmp+0xc>
 801bd2e:	1a18      	subs	r0, r3, r0
 801bd30:	bd30      	pop	{r4, r5, pc}

0801bd32 <strncpy>:
 801bd32:	0003      	movs	r3, r0
 801bd34:	b530      	push	{r4, r5, lr}
 801bd36:	001d      	movs	r5, r3
 801bd38:	2a00      	cmp	r2, #0
 801bd3a:	d006      	beq.n	801bd4a <strncpy+0x18>
 801bd3c:	780c      	ldrb	r4, [r1, #0]
 801bd3e:	3a01      	subs	r2, #1
 801bd40:	3301      	adds	r3, #1
 801bd42:	702c      	strb	r4, [r5, #0]
 801bd44:	3101      	adds	r1, #1
 801bd46:	2c00      	cmp	r4, #0
 801bd48:	d1f5      	bne.n	801bd36 <strncpy+0x4>
 801bd4a:	2100      	movs	r1, #0
 801bd4c:	189a      	adds	r2, r3, r2
 801bd4e:	4293      	cmp	r3, r2
 801bd50:	d100      	bne.n	801bd54 <strncpy+0x22>
 801bd52:	bd30      	pop	{r4, r5, pc}
 801bd54:	7019      	strb	r1, [r3, #0]
 801bd56:	3301      	adds	r3, #1
 801bd58:	e7f9      	b.n	801bd4e <strncpy+0x1c>

0801bd5a <strstr>:
 801bd5a:	780a      	ldrb	r2, [r1, #0]
 801bd5c:	b530      	push	{r4, r5, lr}
 801bd5e:	2a00      	cmp	r2, #0
 801bd60:	d10c      	bne.n	801bd7c <strstr+0x22>
 801bd62:	bd30      	pop	{r4, r5, pc}
 801bd64:	429a      	cmp	r2, r3
 801bd66:	d108      	bne.n	801bd7a <strstr+0x20>
 801bd68:	2301      	movs	r3, #1
 801bd6a:	5ccc      	ldrb	r4, [r1, r3]
 801bd6c:	2c00      	cmp	r4, #0
 801bd6e:	d0f8      	beq.n	801bd62 <strstr+0x8>
 801bd70:	5cc5      	ldrb	r5, [r0, r3]
 801bd72:	42a5      	cmp	r5, r4
 801bd74:	d101      	bne.n	801bd7a <strstr+0x20>
 801bd76:	3301      	adds	r3, #1
 801bd78:	e7f7      	b.n	801bd6a <strstr+0x10>
 801bd7a:	3001      	adds	r0, #1
 801bd7c:	7803      	ldrb	r3, [r0, #0]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d1f0      	bne.n	801bd64 <strstr+0xa>
 801bd82:	0018      	movs	r0, r3
 801bd84:	e7ed      	b.n	801bd62 <strstr+0x8>
	...

0801bd88 <_localeconv_r>:
 801bd88:	4800      	ldr	r0, [pc, #0]	@ (801bd8c <_localeconv_r+0x4>)
 801bd8a:	4770      	bx	lr
 801bd8c:	20000350 	.word	0x20000350

0801bd90 <_close_r>:
 801bd90:	2300      	movs	r3, #0
 801bd92:	b570      	push	{r4, r5, r6, lr}
 801bd94:	4d06      	ldr	r5, [pc, #24]	@ (801bdb0 <_close_r+0x20>)
 801bd96:	0004      	movs	r4, r0
 801bd98:	0008      	movs	r0, r1
 801bd9a:	602b      	str	r3, [r5, #0]
 801bd9c:	f7ee ff60 	bl	800ac60 <_close>
 801bda0:	1c43      	adds	r3, r0, #1
 801bda2:	d103      	bne.n	801bdac <_close_r+0x1c>
 801bda4:	682b      	ldr	r3, [r5, #0]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d000      	beq.n	801bdac <_close_r+0x1c>
 801bdaa:	6023      	str	r3, [r4, #0]
 801bdac:	bd70      	pop	{r4, r5, r6, pc}
 801bdae:	46c0      	nop			@ (mov r8, r8)
 801bdb0:	20003898 	.word	0x20003898

0801bdb4 <_lseek_r>:
 801bdb4:	b570      	push	{r4, r5, r6, lr}
 801bdb6:	0004      	movs	r4, r0
 801bdb8:	0008      	movs	r0, r1
 801bdba:	0011      	movs	r1, r2
 801bdbc:	001a      	movs	r2, r3
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	4d05      	ldr	r5, [pc, #20]	@ (801bdd8 <_lseek_r+0x24>)
 801bdc2:	602b      	str	r3, [r5, #0]
 801bdc4:	f7ee ff6d 	bl	800aca2 <_lseek>
 801bdc8:	1c43      	adds	r3, r0, #1
 801bdca:	d103      	bne.n	801bdd4 <_lseek_r+0x20>
 801bdcc:	682b      	ldr	r3, [r5, #0]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d000      	beq.n	801bdd4 <_lseek_r+0x20>
 801bdd2:	6023      	str	r3, [r4, #0]
 801bdd4:	bd70      	pop	{r4, r5, r6, pc}
 801bdd6:	46c0      	nop			@ (mov r8, r8)
 801bdd8:	20003898 	.word	0x20003898

0801bddc <_read_r>:
 801bddc:	b570      	push	{r4, r5, r6, lr}
 801bdde:	0004      	movs	r4, r0
 801bde0:	0008      	movs	r0, r1
 801bde2:	0011      	movs	r1, r2
 801bde4:	001a      	movs	r2, r3
 801bde6:	2300      	movs	r3, #0
 801bde8:	4d05      	ldr	r5, [pc, #20]	@ (801be00 <_read_r+0x24>)
 801bdea:	602b      	str	r3, [r5, #0]
 801bdec:	f7ee ff1b 	bl	800ac26 <_read>
 801bdf0:	1c43      	adds	r3, r0, #1
 801bdf2:	d103      	bne.n	801bdfc <_read_r+0x20>
 801bdf4:	682b      	ldr	r3, [r5, #0]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d000      	beq.n	801bdfc <_read_r+0x20>
 801bdfa:	6023      	str	r3, [r4, #0]
 801bdfc:	bd70      	pop	{r4, r5, r6, pc}
 801bdfe:	46c0      	nop			@ (mov r8, r8)
 801be00:	20003898 	.word	0x20003898

0801be04 <_write_r>:
 801be04:	b570      	push	{r4, r5, r6, lr}
 801be06:	0004      	movs	r4, r0
 801be08:	0008      	movs	r0, r1
 801be0a:	0011      	movs	r1, r2
 801be0c:	001a      	movs	r2, r3
 801be0e:	2300      	movs	r3, #0
 801be10:	4d05      	ldr	r5, [pc, #20]	@ (801be28 <_write_r+0x24>)
 801be12:	602b      	str	r3, [r5, #0]
 801be14:	f7ef fbcc 	bl	800b5b0 <_write>
 801be18:	1c43      	adds	r3, r0, #1
 801be1a:	d103      	bne.n	801be24 <_write_r+0x20>
 801be1c:	682b      	ldr	r3, [r5, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d000      	beq.n	801be24 <_write_r+0x20>
 801be22:	6023      	str	r3, [r4, #0]
 801be24:	bd70      	pop	{r4, r5, r6, pc}
 801be26:	46c0      	nop			@ (mov r8, r8)
 801be28:	20003898 	.word	0x20003898

0801be2c <__errno>:
 801be2c:	4b01      	ldr	r3, [pc, #4]	@ (801be34 <__errno+0x8>)
 801be2e:	6818      	ldr	r0, [r3, #0]
 801be30:	4770      	bx	lr
 801be32:	46c0      	nop			@ (mov r8, r8)
 801be34:	200003cc 	.word	0x200003cc

0801be38 <__libc_init_array>:
 801be38:	b570      	push	{r4, r5, r6, lr}
 801be3a:	2600      	movs	r6, #0
 801be3c:	4c0c      	ldr	r4, [pc, #48]	@ (801be70 <__libc_init_array+0x38>)
 801be3e:	4d0d      	ldr	r5, [pc, #52]	@ (801be74 <__libc_init_array+0x3c>)
 801be40:	1b64      	subs	r4, r4, r5
 801be42:	10a4      	asrs	r4, r4, #2
 801be44:	42a6      	cmp	r6, r4
 801be46:	d109      	bne.n	801be5c <__libc_init_array+0x24>
 801be48:	2600      	movs	r6, #0
 801be4a:	f002 ff8b 	bl	801ed64 <_init>
 801be4e:	4c0a      	ldr	r4, [pc, #40]	@ (801be78 <__libc_init_array+0x40>)
 801be50:	4d0a      	ldr	r5, [pc, #40]	@ (801be7c <__libc_init_array+0x44>)
 801be52:	1b64      	subs	r4, r4, r5
 801be54:	10a4      	asrs	r4, r4, #2
 801be56:	42a6      	cmp	r6, r4
 801be58:	d105      	bne.n	801be66 <__libc_init_array+0x2e>
 801be5a:	bd70      	pop	{r4, r5, r6, pc}
 801be5c:	00b3      	lsls	r3, r6, #2
 801be5e:	58eb      	ldr	r3, [r5, r3]
 801be60:	4798      	blx	r3
 801be62:	3601      	adds	r6, #1
 801be64:	e7ee      	b.n	801be44 <__libc_init_array+0xc>
 801be66:	00b3      	lsls	r3, r6, #2
 801be68:	58eb      	ldr	r3, [r5, r3]
 801be6a:	4798      	blx	r3
 801be6c:	3601      	adds	r6, #1
 801be6e:	e7f2      	b.n	801be56 <__libc_init_array+0x1e>
 801be70:	08020a78 	.word	0x08020a78
 801be74:	08020a78 	.word	0x08020a78
 801be78:	08020a7c 	.word	0x08020a7c
 801be7c:	08020a78 	.word	0x08020a78

0801be80 <__retarget_lock_init_recursive>:
 801be80:	4770      	bx	lr

0801be82 <__retarget_lock_acquire_recursive>:
 801be82:	4770      	bx	lr

0801be84 <__retarget_lock_release_recursive>:
 801be84:	4770      	bx	lr

0801be86 <memchr>:
 801be86:	b2c9      	uxtb	r1, r1
 801be88:	1882      	adds	r2, r0, r2
 801be8a:	4290      	cmp	r0, r2
 801be8c:	d101      	bne.n	801be92 <memchr+0xc>
 801be8e:	2000      	movs	r0, #0
 801be90:	4770      	bx	lr
 801be92:	7803      	ldrb	r3, [r0, #0]
 801be94:	428b      	cmp	r3, r1
 801be96:	d0fb      	beq.n	801be90 <memchr+0xa>
 801be98:	3001      	adds	r0, #1
 801be9a:	e7f6      	b.n	801be8a <memchr+0x4>

0801be9c <memcpy>:
 801be9c:	2300      	movs	r3, #0
 801be9e:	b510      	push	{r4, lr}
 801bea0:	429a      	cmp	r2, r3
 801bea2:	d100      	bne.n	801bea6 <memcpy+0xa>
 801bea4:	bd10      	pop	{r4, pc}
 801bea6:	5ccc      	ldrb	r4, [r1, r3]
 801bea8:	54c4      	strb	r4, [r0, r3]
 801beaa:	3301      	adds	r3, #1
 801beac:	e7f8      	b.n	801bea0 <memcpy+0x4>
	...

0801beb0 <nan>:
 801beb0:	2000      	movs	r0, #0
 801beb2:	4901      	ldr	r1, [pc, #4]	@ (801beb8 <nan+0x8>)
 801beb4:	4770      	bx	lr
 801beb6:	46c0      	nop			@ (mov r8, r8)
 801beb8:	7ff80000 	.word	0x7ff80000

0801bebc <quorem>:
 801bebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bebe:	6902      	ldr	r2, [r0, #16]
 801bec0:	690f      	ldr	r7, [r1, #16]
 801bec2:	b087      	sub	sp, #28
 801bec4:	0006      	movs	r6, r0
 801bec6:	000b      	movs	r3, r1
 801bec8:	2000      	movs	r0, #0
 801beca:	9102      	str	r1, [sp, #8]
 801becc:	42ba      	cmp	r2, r7
 801bece:	db6d      	blt.n	801bfac <quorem+0xf0>
 801bed0:	3f01      	subs	r7, #1
 801bed2:	00bc      	lsls	r4, r7, #2
 801bed4:	3314      	adds	r3, #20
 801bed6:	9305      	str	r3, [sp, #20]
 801bed8:	191b      	adds	r3, r3, r4
 801beda:	9303      	str	r3, [sp, #12]
 801bedc:	0033      	movs	r3, r6
 801bede:	3314      	adds	r3, #20
 801bee0:	191c      	adds	r4, r3, r4
 801bee2:	9301      	str	r3, [sp, #4]
 801bee4:	6823      	ldr	r3, [r4, #0]
 801bee6:	9304      	str	r3, [sp, #16]
 801bee8:	9b03      	ldr	r3, [sp, #12]
 801beea:	9804      	ldr	r0, [sp, #16]
 801beec:	681d      	ldr	r5, [r3, #0]
 801beee:	3501      	adds	r5, #1
 801bef0:	0029      	movs	r1, r5
 801bef2:	f7e4 f957 	bl	80001a4 <__udivsi3>
 801bef6:	9b04      	ldr	r3, [sp, #16]
 801bef8:	9000      	str	r0, [sp, #0]
 801befa:	42ab      	cmp	r3, r5
 801befc:	d32b      	bcc.n	801bf56 <quorem+0x9a>
 801befe:	9b05      	ldr	r3, [sp, #20]
 801bf00:	9d01      	ldr	r5, [sp, #4]
 801bf02:	469c      	mov	ip, r3
 801bf04:	2300      	movs	r3, #0
 801bf06:	9305      	str	r3, [sp, #20]
 801bf08:	9304      	str	r3, [sp, #16]
 801bf0a:	4662      	mov	r2, ip
 801bf0c:	ca08      	ldmia	r2!, {r3}
 801bf0e:	6828      	ldr	r0, [r5, #0]
 801bf10:	4694      	mov	ip, r2
 801bf12:	9a00      	ldr	r2, [sp, #0]
 801bf14:	b299      	uxth	r1, r3
 801bf16:	4351      	muls	r1, r2
 801bf18:	9a05      	ldr	r2, [sp, #20]
 801bf1a:	0c1b      	lsrs	r3, r3, #16
 801bf1c:	1889      	adds	r1, r1, r2
 801bf1e:	9a00      	ldr	r2, [sp, #0]
 801bf20:	4353      	muls	r3, r2
 801bf22:	0c0a      	lsrs	r2, r1, #16
 801bf24:	189b      	adds	r3, r3, r2
 801bf26:	0c1a      	lsrs	r2, r3, #16
 801bf28:	b289      	uxth	r1, r1
 801bf2a:	9205      	str	r2, [sp, #20]
 801bf2c:	b282      	uxth	r2, r0
 801bf2e:	1a52      	subs	r2, r2, r1
 801bf30:	9904      	ldr	r1, [sp, #16]
 801bf32:	0c00      	lsrs	r0, r0, #16
 801bf34:	1852      	adds	r2, r2, r1
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	1411      	asrs	r1, r2, #16
 801bf3a:	1ac3      	subs	r3, r0, r3
 801bf3c:	185b      	adds	r3, r3, r1
 801bf3e:	1419      	asrs	r1, r3, #16
 801bf40:	b292      	uxth	r2, r2
 801bf42:	041b      	lsls	r3, r3, #16
 801bf44:	431a      	orrs	r2, r3
 801bf46:	9b03      	ldr	r3, [sp, #12]
 801bf48:	9104      	str	r1, [sp, #16]
 801bf4a:	c504      	stmia	r5!, {r2}
 801bf4c:	4563      	cmp	r3, ip
 801bf4e:	d2dc      	bcs.n	801bf0a <quorem+0x4e>
 801bf50:	6823      	ldr	r3, [r4, #0]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d030      	beq.n	801bfb8 <quorem+0xfc>
 801bf56:	0030      	movs	r0, r6
 801bf58:	9902      	ldr	r1, [sp, #8]
 801bf5a:	f001 fd7d 	bl	801da58 <__mcmp>
 801bf5e:	2800      	cmp	r0, #0
 801bf60:	db23      	blt.n	801bfaa <quorem+0xee>
 801bf62:	0034      	movs	r4, r6
 801bf64:	2500      	movs	r5, #0
 801bf66:	9902      	ldr	r1, [sp, #8]
 801bf68:	3414      	adds	r4, #20
 801bf6a:	3114      	adds	r1, #20
 801bf6c:	6823      	ldr	r3, [r4, #0]
 801bf6e:	c901      	ldmia	r1!, {r0}
 801bf70:	9302      	str	r3, [sp, #8]
 801bf72:	466b      	mov	r3, sp
 801bf74:	891b      	ldrh	r3, [r3, #8]
 801bf76:	b282      	uxth	r2, r0
 801bf78:	1a9a      	subs	r2, r3, r2
 801bf7a:	9b02      	ldr	r3, [sp, #8]
 801bf7c:	1952      	adds	r2, r2, r5
 801bf7e:	0c00      	lsrs	r0, r0, #16
 801bf80:	0c1b      	lsrs	r3, r3, #16
 801bf82:	1a1b      	subs	r3, r3, r0
 801bf84:	1410      	asrs	r0, r2, #16
 801bf86:	181b      	adds	r3, r3, r0
 801bf88:	141d      	asrs	r5, r3, #16
 801bf8a:	b292      	uxth	r2, r2
 801bf8c:	041b      	lsls	r3, r3, #16
 801bf8e:	431a      	orrs	r2, r3
 801bf90:	9b03      	ldr	r3, [sp, #12]
 801bf92:	c404      	stmia	r4!, {r2}
 801bf94:	428b      	cmp	r3, r1
 801bf96:	d2e9      	bcs.n	801bf6c <quorem+0xb0>
 801bf98:	9a01      	ldr	r2, [sp, #4]
 801bf9a:	00bb      	lsls	r3, r7, #2
 801bf9c:	18d3      	adds	r3, r2, r3
 801bf9e:	681a      	ldr	r2, [r3, #0]
 801bfa0:	2a00      	cmp	r2, #0
 801bfa2:	d013      	beq.n	801bfcc <quorem+0x110>
 801bfa4:	9b00      	ldr	r3, [sp, #0]
 801bfa6:	3301      	adds	r3, #1
 801bfa8:	9300      	str	r3, [sp, #0]
 801bfaa:	9800      	ldr	r0, [sp, #0]
 801bfac:	b007      	add	sp, #28
 801bfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfb0:	6823      	ldr	r3, [r4, #0]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d104      	bne.n	801bfc0 <quorem+0x104>
 801bfb6:	3f01      	subs	r7, #1
 801bfb8:	9b01      	ldr	r3, [sp, #4]
 801bfba:	3c04      	subs	r4, #4
 801bfbc:	42a3      	cmp	r3, r4
 801bfbe:	d3f7      	bcc.n	801bfb0 <quorem+0xf4>
 801bfc0:	6137      	str	r7, [r6, #16]
 801bfc2:	e7c8      	b.n	801bf56 <quorem+0x9a>
 801bfc4:	681a      	ldr	r2, [r3, #0]
 801bfc6:	2a00      	cmp	r2, #0
 801bfc8:	d104      	bne.n	801bfd4 <quorem+0x118>
 801bfca:	3f01      	subs	r7, #1
 801bfcc:	9a01      	ldr	r2, [sp, #4]
 801bfce:	3b04      	subs	r3, #4
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	d3f7      	bcc.n	801bfc4 <quorem+0x108>
 801bfd4:	6137      	str	r7, [r6, #16]
 801bfd6:	e7e5      	b.n	801bfa4 <quorem+0xe8>

0801bfd8 <_dtoa_r>:
 801bfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfda:	0014      	movs	r4, r2
 801bfdc:	001d      	movs	r5, r3
 801bfde:	69c6      	ldr	r6, [r0, #28]
 801bfe0:	b09d      	sub	sp, #116	@ 0x74
 801bfe2:	940a      	str	r4, [sp, #40]	@ 0x28
 801bfe4:	950b      	str	r5, [sp, #44]	@ 0x2c
 801bfe6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801bfe8:	9003      	str	r0, [sp, #12]
 801bfea:	2e00      	cmp	r6, #0
 801bfec:	d10f      	bne.n	801c00e <_dtoa_r+0x36>
 801bfee:	2010      	movs	r0, #16
 801bff0:	f001 f98a 	bl	801d308 <malloc>
 801bff4:	9b03      	ldr	r3, [sp, #12]
 801bff6:	1e02      	subs	r2, r0, #0
 801bff8:	61d8      	str	r0, [r3, #28]
 801bffa:	d104      	bne.n	801c006 <_dtoa_r+0x2e>
 801bffc:	21ef      	movs	r1, #239	@ 0xef
 801bffe:	4bc7      	ldr	r3, [pc, #796]	@ (801c31c <_dtoa_r+0x344>)
 801c000:	48c7      	ldr	r0, [pc, #796]	@ (801c320 <_dtoa_r+0x348>)
 801c002:	f002 fb41 	bl	801e688 <__assert_func>
 801c006:	6046      	str	r6, [r0, #4]
 801c008:	6086      	str	r6, [r0, #8]
 801c00a:	6006      	str	r6, [r0, #0]
 801c00c:	60c6      	str	r6, [r0, #12]
 801c00e:	9b03      	ldr	r3, [sp, #12]
 801c010:	69db      	ldr	r3, [r3, #28]
 801c012:	6819      	ldr	r1, [r3, #0]
 801c014:	2900      	cmp	r1, #0
 801c016:	d00b      	beq.n	801c030 <_dtoa_r+0x58>
 801c018:	685a      	ldr	r2, [r3, #4]
 801c01a:	2301      	movs	r3, #1
 801c01c:	4093      	lsls	r3, r2
 801c01e:	604a      	str	r2, [r1, #4]
 801c020:	608b      	str	r3, [r1, #8]
 801c022:	9803      	ldr	r0, [sp, #12]
 801c024:	f001 fa82 	bl	801d52c <_Bfree>
 801c028:	2200      	movs	r2, #0
 801c02a:	9b03      	ldr	r3, [sp, #12]
 801c02c:	69db      	ldr	r3, [r3, #28]
 801c02e:	601a      	str	r2, [r3, #0]
 801c030:	2d00      	cmp	r5, #0
 801c032:	da1e      	bge.n	801c072 <_dtoa_r+0x9a>
 801c034:	2301      	movs	r3, #1
 801c036:	603b      	str	r3, [r7, #0]
 801c038:	006b      	lsls	r3, r5, #1
 801c03a:	085b      	lsrs	r3, r3, #1
 801c03c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c03e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c040:	4bb8      	ldr	r3, [pc, #736]	@ (801c324 <_dtoa_r+0x34c>)
 801c042:	4ab8      	ldr	r2, [pc, #736]	@ (801c324 <_dtoa_r+0x34c>)
 801c044:	403b      	ands	r3, r7
 801c046:	4293      	cmp	r3, r2
 801c048:	d116      	bne.n	801c078 <_dtoa_r+0xa0>
 801c04a:	4bb7      	ldr	r3, [pc, #732]	@ (801c328 <_dtoa_r+0x350>)
 801c04c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c04e:	6013      	str	r3, [r2, #0]
 801c050:	033b      	lsls	r3, r7, #12
 801c052:	0b1b      	lsrs	r3, r3, #12
 801c054:	4323      	orrs	r3, r4
 801c056:	d101      	bne.n	801c05c <_dtoa_r+0x84>
 801c058:	f000 fd83 	bl	801cb62 <_dtoa_r+0xb8a>
 801c05c:	4bb3      	ldr	r3, [pc, #716]	@ (801c32c <_dtoa_r+0x354>)
 801c05e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c060:	9308      	str	r3, [sp, #32]
 801c062:	2a00      	cmp	r2, #0
 801c064:	d002      	beq.n	801c06c <_dtoa_r+0x94>
 801c066:	4bb2      	ldr	r3, [pc, #712]	@ (801c330 <_dtoa_r+0x358>)
 801c068:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c06a:	6013      	str	r3, [r2, #0]
 801c06c:	9808      	ldr	r0, [sp, #32]
 801c06e:	b01d      	add	sp, #116	@ 0x74
 801c070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c072:	2300      	movs	r3, #0
 801c074:	603b      	str	r3, [r7, #0]
 801c076:	e7e2      	b.n	801c03e <_dtoa_r+0x66>
 801c078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c07a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c07c:	9212      	str	r2, [sp, #72]	@ 0x48
 801c07e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c080:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c082:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c084:	2200      	movs	r2, #0
 801c086:	2300      	movs	r3, #0
 801c088:	f7e4 fa12 	bl	80004b0 <__aeabi_dcmpeq>
 801c08c:	1e06      	subs	r6, r0, #0
 801c08e:	d00b      	beq.n	801c0a8 <_dtoa_r+0xd0>
 801c090:	2301      	movs	r3, #1
 801c092:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c094:	6013      	str	r3, [r2, #0]
 801c096:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d002      	beq.n	801c0a2 <_dtoa_r+0xca>
 801c09c:	4ba5      	ldr	r3, [pc, #660]	@ (801c334 <_dtoa_r+0x35c>)
 801c09e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c0a0:	6013      	str	r3, [r2, #0]
 801c0a2:	4ba5      	ldr	r3, [pc, #660]	@ (801c338 <_dtoa_r+0x360>)
 801c0a4:	9308      	str	r3, [sp, #32]
 801c0a6:	e7e1      	b.n	801c06c <_dtoa_r+0x94>
 801c0a8:	ab1a      	add	r3, sp, #104	@ 0x68
 801c0aa:	9301      	str	r3, [sp, #4]
 801c0ac:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c0ae:	9300      	str	r3, [sp, #0]
 801c0b0:	9803      	ldr	r0, [sp, #12]
 801c0b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c0b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c0b6:	f001 fdf1 	bl	801dc9c <__d2b>
 801c0ba:	007a      	lsls	r2, r7, #1
 801c0bc:	9005      	str	r0, [sp, #20]
 801c0be:	0d52      	lsrs	r2, r2, #21
 801c0c0:	d100      	bne.n	801c0c4 <_dtoa_r+0xec>
 801c0c2:	e07b      	b.n	801c1bc <_dtoa_r+0x1e4>
 801c0c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c0c6:	9618      	str	r6, [sp, #96]	@ 0x60
 801c0c8:	0319      	lsls	r1, r3, #12
 801c0ca:	4b9c      	ldr	r3, [pc, #624]	@ (801c33c <_dtoa_r+0x364>)
 801c0cc:	0b09      	lsrs	r1, r1, #12
 801c0ce:	430b      	orrs	r3, r1
 801c0d0:	499b      	ldr	r1, [pc, #620]	@ (801c340 <_dtoa_r+0x368>)
 801c0d2:	1857      	adds	r7, r2, r1
 801c0d4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c0d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c0d8:	0019      	movs	r1, r3
 801c0da:	2200      	movs	r2, #0
 801c0dc:	4b99      	ldr	r3, [pc, #612]	@ (801c344 <_dtoa_r+0x36c>)
 801c0de:	f7e6 fd75 	bl	8002bcc <__aeabi_dsub>
 801c0e2:	4a99      	ldr	r2, [pc, #612]	@ (801c348 <_dtoa_r+0x370>)
 801c0e4:	4b99      	ldr	r3, [pc, #612]	@ (801c34c <_dtoa_r+0x374>)
 801c0e6:	f7e6 faa9 	bl	800263c <__aeabi_dmul>
 801c0ea:	4a99      	ldr	r2, [pc, #612]	@ (801c350 <_dtoa_r+0x378>)
 801c0ec:	4b99      	ldr	r3, [pc, #612]	@ (801c354 <_dtoa_r+0x37c>)
 801c0ee:	f7e5 fafd 	bl	80016ec <__aeabi_dadd>
 801c0f2:	0004      	movs	r4, r0
 801c0f4:	0038      	movs	r0, r7
 801c0f6:	000d      	movs	r5, r1
 801c0f8:	f7e7 f962 	bl	80033c0 <__aeabi_i2d>
 801c0fc:	4a96      	ldr	r2, [pc, #600]	@ (801c358 <_dtoa_r+0x380>)
 801c0fe:	4b97      	ldr	r3, [pc, #604]	@ (801c35c <_dtoa_r+0x384>)
 801c100:	f7e6 fa9c 	bl	800263c <__aeabi_dmul>
 801c104:	0002      	movs	r2, r0
 801c106:	000b      	movs	r3, r1
 801c108:	0020      	movs	r0, r4
 801c10a:	0029      	movs	r1, r5
 801c10c:	f7e5 faee 	bl	80016ec <__aeabi_dadd>
 801c110:	0004      	movs	r4, r0
 801c112:	000d      	movs	r5, r1
 801c114:	f7e7 f918 	bl	8003348 <__aeabi_d2iz>
 801c118:	2200      	movs	r2, #0
 801c11a:	9004      	str	r0, [sp, #16]
 801c11c:	2300      	movs	r3, #0
 801c11e:	0020      	movs	r0, r4
 801c120:	0029      	movs	r1, r5
 801c122:	f7e4 f9cb 	bl	80004bc <__aeabi_dcmplt>
 801c126:	2800      	cmp	r0, #0
 801c128:	d00b      	beq.n	801c142 <_dtoa_r+0x16a>
 801c12a:	9804      	ldr	r0, [sp, #16]
 801c12c:	f7e7 f948 	bl	80033c0 <__aeabi_i2d>
 801c130:	002b      	movs	r3, r5
 801c132:	0022      	movs	r2, r4
 801c134:	f7e4 f9bc 	bl	80004b0 <__aeabi_dcmpeq>
 801c138:	4243      	negs	r3, r0
 801c13a:	4158      	adcs	r0, r3
 801c13c:	9b04      	ldr	r3, [sp, #16]
 801c13e:	1a1b      	subs	r3, r3, r0
 801c140:	9304      	str	r3, [sp, #16]
 801c142:	2301      	movs	r3, #1
 801c144:	9315      	str	r3, [sp, #84]	@ 0x54
 801c146:	9b04      	ldr	r3, [sp, #16]
 801c148:	2b16      	cmp	r3, #22
 801c14a:	d810      	bhi.n	801c16e <_dtoa_r+0x196>
 801c14c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c14e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c150:	9a04      	ldr	r2, [sp, #16]
 801c152:	4b83      	ldr	r3, [pc, #524]	@ (801c360 <_dtoa_r+0x388>)
 801c154:	00d2      	lsls	r2, r2, #3
 801c156:	189b      	adds	r3, r3, r2
 801c158:	681a      	ldr	r2, [r3, #0]
 801c15a:	685b      	ldr	r3, [r3, #4]
 801c15c:	f7e4 f9ae 	bl	80004bc <__aeabi_dcmplt>
 801c160:	2800      	cmp	r0, #0
 801c162:	d047      	beq.n	801c1f4 <_dtoa_r+0x21c>
 801c164:	9b04      	ldr	r3, [sp, #16]
 801c166:	3b01      	subs	r3, #1
 801c168:	9304      	str	r3, [sp, #16]
 801c16a:	2300      	movs	r3, #0
 801c16c:	9315      	str	r3, [sp, #84]	@ 0x54
 801c16e:	2200      	movs	r2, #0
 801c170:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c172:	9206      	str	r2, [sp, #24]
 801c174:	1bdb      	subs	r3, r3, r7
 801c176:	1e5a      	subs	r2, r3, #1
 801c178:	d53e      	bpl.n	801c1f8 <_dtoa_r+0x220>
 801c17a:	2201      	movs	r2, #1
 801c17c:	1ad3      	subs	r3, r2, r3
 801c17e:	9306      	str	r3, [sp, #24]
 801c180:	2300      	movs	r3, #0
 801c182:	930d      	str	r3, [sp, #52]	@ 0x34
 801c184:	9b04      	ldr	r3, [sp, #16]
 801c186:	2b00      	cmp	r3, #0
 801c188:	db38      	blt.n	801c1fc <_dtoa_r+0x224>
 801c18a:	9a04      	ldr	r2, [sp, #16]
 801c18c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c18e:	4694      	mov	ip, r2
 801c190:	4463      	add	r3, ip
 801c192:	930d      	str	r3, [sp, #52]	@ 0x34
 801c194:	2300      	movs	r3, #0
 801c196:	9214      	str	r2, [sp, #80]	@ 0x50
 801c198:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c19a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c19c:	2401      	movs	r4, #1
 801c19e:	2b09      	cmp	r3, #9
 801c1a0:	d867      	bhi.n	801c272 <_dtoa_r+0x29a>
 801c1a2:	2b05      	cmp	r3, #5
 801c1a4:	dd02      	ble.n	801c1ac <_dtoa_r+0x1d4>
 801c1a6:	2400      	movs	r4, #0
 801c1a8:	3b04      	subs	r3, #4
 801c1aa:	9322      	str	r3, [sp, #136]	@ 0x88
 801c1ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c1ae:	1e98      	subs	r0, r3, #2
 801c1b0:	2803      	cmp	r0, #3
 801c1b2:	d867      	bhi.n	801c284 <_dtoa_r+0x2ac>
 801c1b4:	f7e3 ffe2 	bl	800017c <__gnu_thumb1_case_uqi>
 801c1b8:	5b383a2b 	.word	0x5b383a2b
 801c1bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c1be:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801c1c0:	18f6      	adds	r6, r6, r3
 801c1c2:	4b68      	ldr	r3, [pc, #416]	@ (801c364 <_dtoa_r+0x38c>)
 801c1c4:	18f2      	adds	r2, r6, r3
 801c1c6:	2a20      	cmp	r2, #32
 801c1c8:	dd0f      	ble.n	801c1ea <_dtoa_r+0x212>
 801c1ca:	2340      	movs	r3, #64	@ 0x40
 801c1cc:	1a9b      	subs	r3, r3, r2
 801c1ce:	409f      	lsls	r7, r3
 801c1d0:	4b65      	ldr	r3, [pc, #404]	@ (801c368 <_dtoa_r+0x390>)
 801c1d2:	0038      	movs	r0, r7
 801c1d4:	18f3      	adds	r3, r6, r3
 801c1d6:	40dc      	lsrs	r4, r3
 801c1d8:	4320      	orrs	r0, r4
 801c1da:	f7e7 f91f 	bl	800341c <__aeabi_ui2d>
 801c1de:	2201      	movs	r2, #1
 801c1e0:	4b62      	ldr	r3, [pc, #392]	@ (801c36c <_dtoa_r+0x394>)
 801c1e2:	1e77      	subs	r7, r6, #1
 801c1e4:	18cb      	adds	r3, r1, r3
 801c1e6:	9218      	str	r2, [sp, #96]	@ 0x60
 801c1e8:	e776      	b.n	801c0d8 <_dtoa_r+0x100>
 801c1ea:	2320      	movs	r3, #32
 801c1ec:	0020      	movs	r0, r4
 801c1ee:	1a9b      	subs	r3, r3, r2
 801c1f0:	4098      	lsls	r0, r3
 801c1f2:	e7f2      	b.n	801c1da <_dtoa_r+0x202>
 801c1f4:	9015      	str	r0, [sp, #84]	@ 0x54
 801c1f6:	e7ba      	b.n	801c16e <_dtoa_r+0x196>
 801c1f8:	920d      	str	r2, [sp, #52]	@ 0x34
 801c1fa:	e7c3      	b.n	801c184 <_dtoa_r+0x1ac>
 801c1fc:	9b06      	ldr	r3, [sp, #24]
 801c1fe:	9a04      	ldr	r2, [sp, #16]
 801c200:	1a9b      	subs	r3, r3, r2
 801c202:	9306      	str	r3, [sp, #24]
 801c204:	4253      	negs	r3, r2
 801c206:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c208:	2300      	movs	r3, #0
 801c20a:	9314      	str	r3, [sp, #80]	@ 0x50
 801c20c:	e7c5      	b.n	801c19a <_dtoa_r+0x1c2>
 801c20e:	2300      	movs	r3, #0
 801c210:	9310      	str	r3, [sp, #64]	@ 0x40
 801c212:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c214:	930e      	str	r3, [sp, #56]	@ 0x38
 801c216:	9309      	str	r3, [sp, #36]	@ 0x24
 801c218:	2b00      	cmp	r3, #0
 801c21a:	dc13      	bgt.n	801c244 <_dtoa_r+0x26c>
 801c21c:	2301      	movs	r3, #1
 801c21e:	001a      	movs	r2, r3
 801c220:	930e      	str	r3, [sp, #56]	@ 0x38
 801c222:	9309      	str	r3, [sp, #36]	@ 0x24
 801c224:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c226:	e00d      	b.n	801c244 <_dtoa_r+0x26c>
 801c228:	2301      	movs	r3, #1
 801c22a:	e7f1      	b.n	801c210 <_dtoa_r+0x238>
 801c22c:	2300      	movs	r3, #0
 801c22e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c230:	9310      	str	r3, [sp, #64]	@ 0x40
 801c232:	4694      	mov	ip, r2
 801c234:	9b04      	ldr	r3, [sp, #16]
 801c236:	4463      	add	r3, ip
 801c238:	930e      	str	r3, [sp, #56]	@ 0x38
 801c23a:	3301      	adds	r3, #1
 801c23c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c23e:	2b00      	cmp	r3, #0
 801c240:	dc00      	bgt.n	801c244 <_dtoa_r+0x26c>
 801c242:	2301      	movs	r3, #1
 801c244:	9a03      	ldr	r2, [sp, #12]
 801c246:	2100      	movs	r1, #0
 801c248:	69d0      	ldr	r0, [r2, #28]
 801c24a:	2204      	movs	r2, #4
 801c24c:	0015      	movs	r5, r2
 801c24e:	3514      	adds	r5, #20
 801c250:	429d      	cmp	r5, r3
 801c252:	d91b      	bls.n	801c28c <_dtoa_r+0x2b4>
 801c254:	6041      	str	r1, [r0, #4]
 801c256:	9803      	ldr	r0, [sp, #12]
 801c258:	f001 f924 	bl	801d4a4 <_Balloc>
 801c25c:	9008      	str	r0, [sp, #32]
 801c25e:	2800      	cmp	r0, #0
 801c260:	d117      	bne.n	801c292 <_dtoa_r+0x2ba>
 801c262:	21b0      	movs	r1, #176	@ 0xb0
 801c264:	4b42      	ldr	r3, [pc, #264]	@ (801c370 <_dtoa_r+0x398>)
 801c266:	482e      	ldr	r0, [pc, #184]	@ (801c320 <_dtoa_r+0x348>)
 801c268:	9a08      	ldr	r2, [sp, #32]
 801c26a:	31ff      	adds	r1, #255	@ 0xff
 801c26c:	e6c9      	b.n	801c002 <_dtoa_r+0x2a>
 801c26e:	2301      	movs	r3, #1
 801c270:	e7dd      	b.n	801c22e <_dtoa_r+0x256>
 801c272:	2300      	movs	r3, #0
 801c274:	9410      	str	r4, [sp, #64]	@ 0x40
 801c276:	9322      	str	r3, [sp, #136]	@ 0x88
 801c278:	3b01      	subs	r3, #1
 801c27a:	930e      	str	r3, [sp, #56]	@ 0x38
 801c27c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c27e:	2200      	movs	r2, #0
 801c280:	3313      	adds	r3, #19
 801c282:	e7cf      	b.n	801c224 <_dtoa_r+0x24c>
 801c284:	2301      	movs	r3, #1
 801c286:	9310      	str	r3, [sp, #64]	@ 0x40
 801c288:	3b02      	subs	r3, #2
 801c28a:	e7f6      	b.n	801c27a <_dtoa_r+0x2a2>
 801c28c:	3101      	adds	r1, #1
 801c28e:	0052      	lsls	r2, r2, #1
 801c290:	e7dc      	b.n	801c24c <_dtoa_r+0x274>
 801c292:	9b03      	ldr	r3, [sp, #12]
 801c294:	9a08      	ldr	r2, [sp, #32]
 801c296:	69db      	ldr	r3, [r3, #28]
 801c298:	601a      	str	r2, [r3, #0]
 801c29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c29c:	2b0e      	cmp	r3, #14
 801c29e:	d900      	bls.n	801c2a2 <_dtoa_r+0x2ca>
 801c2a0:	e0d9      	b.n	801c456 <_dtoa_r+0x47e>
 801c2a2:	2c00      	cmp	r4, #0
 801c2a4:	d100      	bne.n	801c2a8 <_dtoa_r+0x2d0>
 801c2a6:	e0d6      	b.n	801c456 <_dtoa_r+0x47e>
 801c2a8:	9b04      	ldr	r3, [sp, #16]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	dd64      	ble.n	801c378 <_dtoa_r+0x3a0>
 801c2ae:	210f      	movs	r1, #15
 801c2b0:	9a04      	ldr	r2, [sp, #16]
 801c2b2:	4b2b      	ldr	r3, [pc, #172]	@ (801c360 <_dtoa_r+0x388>)
 801c2b4:	400a      	ands	r2, r1
 801c2b6:	00d2      	lsls	r2, r2, #3
 801c2b8:	189b      	adds	r3, r3, r2
 801c2ba:	681e      	ldr	r6, [r3, #0]
 801c2bc:	685f      	ldr	r7, [r3, #4]
 801c2be:	9b04      	ldr	r3, [sp, #16]
 801c2c0:	2402      	movs	r4, #2
 801c2c2:	111d      	asrs	r5, r3, #4
 801c2c4:	05db      	lsls	r3, r3, #23
 801c2c6:	d50a      	bpl.n	801c2de <_dtoa_r+0x306>
 801c2c8:	4b2a      	ldr	r3, [pc, #168]	@ (801c374 <_dtoa_r+0x39c>)
 801c2ca:	400d      	ands	r5, r1
 801c2cc:	6a1a      	ldr	r2, [r3, #32]
 801c2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c2d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c2d4:	f7e5 fd6e 	bl	8001db4 <__aeabi_ddiv>
 801c2d8:	900a      	str	r0, [sp, #40]	@ 0x28
 801c2da:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c2dc:	3401      	adds	r4, #1
 801c2de:	4b25      	ldr	r3, [pc, #148]	@ (801c374 <_dtoa_r+0x39c>)
 801c2e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2e2:	2d00      	cmp	r5, #0
 801c2e4:	d108      	bne.n	801c2f8 <_dtoa_r+0x320>
 801c2e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c2e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c2ea:	0032      	movs	r2, r6
 801c2ec:	003b      	movs	r3, r7
 801c2ee:	f7e5 fd61 	bl	8001db4 <__aeabi_ddiv>
 801c2f2:	900a      	str	r0, [sp, #40]	@ 0x28
 801c2f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c2f6:	e05a      	b.n	801c3ae <_dtoa_r+0x3d6>
 801c2f8:	2301      	movs	r3, #1
 801c2fa:	421d      	tst	r5, r3
 801c2fc:	d009      	beq.n	801c312 <_dtoa_r+0x33a>
 801c2fe:	18e4      	adds	r4, r4, r3
 801c300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c302:	0030      	movs	r0, r6
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	685b      	ldr	r3, [r3, #4]
 801c308:	0039      	movs	r1, r7
 801c30a:	f7e6 f997 	bl	800263c <__aeabi_dmul>
 801c30e:	0006      	movs	r6, r0
 801c310:	000f      	movs	r7, r1
 801c312:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c314:	106d      	asrs	r5, r5, #1
 801c316:	3308      	adds	r3, #8
 801c318:	e7e2      	b.n	801c2e0 <_dtoa_r+0x308>
 801c31a:	46c0      	nop			@ (mov r8, r8)
 801c31c:	080207d2 	.word	0x080207d2
 801c320:	080207e9 	.word	0x080207e9
 801c324:	7ff00000 	.word	0x7ff00000
 801c328:	0000270f 	.word	0x0000270f
 801c32c:	080207ce 	.word	0x080207ce
 801c330:	080207d1 	.word	0x080207d1
 801c334:	0802079a 	.word	0x0802079a
 801c338:	08020799 	.word	0x08020799
 801c33c:	3ff00000 	.word	0x3ff00000
 801c340:	fffffc01 	.word	0xfffffc01
 801c344:	3ff80000 	.word	0x3ff80000
 801c348:	636f4361 	.word	0x636f4361
 801c34c:	3fd287a7 	.word	0x3fd287a7
 801c350:	8b60c8b3 	.word	0x8b60c8b3
 801c354:	3fc68a28 	.word	0x3fc68a28
 801c358:	509f79fb 	.word	0x509f79fb
 801c35c:	3fd34413 	.word	0x3fd34413
 801c360:	08020940 	.word	0x08020940
 801c364:	00000432 	.word	0x00000432
 801c368:	00000412 	.word	0x00000412
 801c36c:	fe100000 	.word	0xfe100000
 801c370:	08020841 	.word	0x08020841
 801c374:	08020918 	.word	0x08020918
 801c378:	9b04      	ldr	r3, [sp, #16]
 801c37a:	2402      	movs	r4, #2
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d016      	beq.n	801c3ae <_dtoa_r+0x3d6>
 801c380:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c382:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c384:	220f      	movs	r2, #15
 801c386:	425d      	negs	r5, r3
 801c388:	402a      	ands	r2, r5
 801c38a:	4bd7      	ldr	r3, [pc, #860]	@ (801c6e8 <_dtoa_r+0x710>)
 801c38c:	00d2      	lsls	r2, r2, #3
 801c38e:	189b      	adds	r3, r3, r2
 801c390:	681a      	ldr	r2, [r3, #0]
 801c392:	685b      	ldr	r3, [r3, #4]
 801c394:	f7e6 f952 	bl	800263c <__aeabi_dmul>
 801c398:	2701      	movs	r7, #1
 801c39a:	2300      	movs	r3, #0
 801c39c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c39e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c3a0:	4ed2      	ldr	r6, [pc, #840]	@ (801c6ec <_dtoa_r+0x714>)
 801c3a2:	112d      	asrs	r5, r5, #4
 801c3a4:	2d00      	cmp	r5, #0
 801c3a6:	d000      	beq.n	801c3aa <_dtoa_r+0x3d2>
 801c3a8:	e0ba      	b.n	801c520 <_dtoa_r+0x548>
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d1a1      	bne.n	801c2f2 <_dtoa_r+0x31a>
 801c3ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c3b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c3b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d100      	bne.n	801c3ba <_dtoa_r+0x3e2>
 801c3b8:	e0bd      	b.n	801c536 <_dtoa_r+0x55e>
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	0030      	movs	r0, r6
 801c3be:	0039      	movs	r1, r7
 801c3c0:	4bcb      	ldr	r3, [pc, #812]	@ (801c6f0 <_dtoa_r+0x718>)
 801c3c2:	f7e4 f87b 	bl	80004bc <__aeabi_dcmplt>
 801c3c6:	2800      	cmp	r0, #0
 801c3c8:	d100      	bne.n	801c3cc <_dtoa_r+0x3f4>
 801c3ca:	e0b4      	b.n	801c536 <_dtoa_r+0x55e>
 801c3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d100      	bne.n	801c3d4 <_dtoa_r+0x3fc>
 801c3d2:	e0b0      	b.n	801c536 <_dtoa_r+0x55e>
 801c3d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	dd39      	ble.n	801c44e <_dtoa_r+0x476>
 801c3da:	9b04      	ldr	r3, [sp, #16]
 801c3dc:	2200      	movs	r2, #0
 801c3de:	3b01      	subs	r3, #1
 801c3e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801c3e2:	0030      	movs	r0, r6
 801c3e4:	4bc3      	ldr	r3, [pc, #780]	@ (801c6f4 <_dtoa_r+0x71c>)
 801c3e6:	0039      	movs	r1, r7
 801c3e8:	f7e6 f928 	bl	800263c <__aeabi_dmul>
 801c3ec:	900a      	str	r0, [sp, #40]	@ 0x28
 801c3ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3f2:	3401      	adds	r4, #1
 801c3f4:	0020      	movs	r0, r4
 801c3f6:	9311      	str	r3, [sp, #68]	@ 0x44
 801c3f8:	f7e6 ffe2 	bl	80033c0 <__aeabi_i2d>
 801c3fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c400:	f7e6 f91c 	bl	800263c <__aeabi_dmul>
 801c404:	4bbc      	ldr	r3, [pc, #752]	@ (801c6f8 <_dtoa_r+0x720>)
 801c406:	2200      	movs	r2, #0
 801c408:	f7e5 f970 	bl	80016ec <__aeabi_dadd>
 801c40c:	4bbb      	ldr	r3, [pc, #748]	@ (801c6fc <_dtoa_r+0x724>)
 801c40e:	0006      	movs	r6, r0
 801c410:	18cf      	adds	r7, r1, r3
 801c412:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c414:	2b00      	cmp	r3, #0
 801c416:	d000      	beq.n	801c41a <_dtoa_r+0x442>
 801c418:	e091      	b.n	801c53e <_dtoa_r+0x566>
 801c41a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c41c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c41e:	2200      	movs	r2, #0
 801c420:	4bb7      	ldr	r3, [pc, #732]	@ (801c700 <_dtoa_r+0x728>)
 801c422:	f7e6 fbd3 	bl	8002bcc <__aeabi_dsub>
 801c426:	0032      	movs	r2, r6
 801c428:	003b      	movs	r3, r7
 801c42a:	0004      	movs	r4, r0
 801c42c:	000d      	movs	r5, r1
 801c42e:	f7e4 f859 	bl	80004e4 <__aeabi_dcmpgt>
 801c432:	2800      	cmp	r0, #0
 801c434:	d000      	beq.n	801c438 <_dtoa_r+0x460>
 801c436:	e29d      	b.n	801c974 <_dtoa_r+0x99c>
 801c438:	2180      	movs	r1, #128	@ 0x80
 801c43a:	0609      	lsls	r1, r1, #24
 801c43c:	187b      	adds	r3, r7, r1
 801c43e:	0032      	movs	r2, r6
 801c440:	0020      	movs	r0, r4
 801c442:	0029      	movs	r1, r5
 801c444:	f7e4 f83a 	bl	80004bc <__aeabi_dcmplt>
 801c448:	2800      	cmp	r0, #0
 801c44a:	d000      	beq.n	801c44e <_dtoa_r+0x476>
 801c44c:	e130      	b.n	801c6b0 <_dtoa_r+0x6d8>
 801c44e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c450:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c452:	930a      	str	r3, [sp, #40]	@ 0x28
 801c454:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c456:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c458:	2b00      	cmp	r3, #0
 801c45a:	da00      	bge.n	801c45e <_dtoa_r+0x486>
 801c45c:	e177      	b.n	801c74e <_dtoa_r+0x776>
 801c45e:	9a04      	ldr	r2, [sp, #16]
 801c460:	2a0e      	cmp	r2, #14
 801c462:	dd00      	ble.n	801c466 <_dtoa_r+0x48e>
 801c464:	e173      	b.n	801c74e <_dtoa_r+0x776>
 801c466:	4ba0      	ldr	r3, [pc, #640]	@ (801c6e8 <_dtoa_r+0x710>)
 801c468:	00d2      	lsls	r2, r2, #3
 801c46a:	189b      	adds	r3, r3, r2
 801c46c:	685c      	ldr	r4, [r3, #4]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	9306      	str	r3, [sp, #24]
 801c472:	9407      	str	r4, [sp, #28]
 801c474:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c476:	2b00      	cmp	r3, #0
 801c478:	da03      	bge.n	801c482 <_dtoa_r+0x4aa>
 801c47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	dc00      	bgt.n	801c482 <_dtoa_r+0x4aa>
 801c480:	e106      	b.n	801c690 <_dtoa_r+0x6b8>
 801c482:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c484:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c488:	9d08      	ldr	r5, [sp, #32]
 801c48a:	3b01      	subs	r3, #1
 801c48c:	195b      	adds	r3, r3, r5
 801c48e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c490:	9a06      	ldr	r2, [sp, #24]
 801c492:	9b07      	ldr	r3, [sp, #28]
 801c494:	0030      	movs	r0, r6
 801c496:	0039      	movs	r1, r7
 801c498:	f7e5 fc8c 	bl	8001db4 <__aeabi_ddiv>
 801c49c:	f7e6 ff54 	bl	8003348 <__aeabi_d2iz>
 801c4a0:	9009      	str	r0, [sp, #36]	@ 0x24
 801c4a2:	f7e6 ff8d 	bl	80033c0 <__aeabi_i2d>
 801c4a6:	9a06      	ldr	r2, [sp, #24]
 801c4a8:	9b07      	ldr	r3, [sp, #28]
 801c4aa:	f7e6 f8c7 	bl	800263c <__aeabi_dmul>
 801c4ae:	0002      	movs	r2, r0
 801c4b0:	000b      	movs	r3, r1
 801c4b2:	0030      	movs	r0, r6
 801c4b4:	0039      	movs	r1, r7
 801c4b6:	f7e6 fb89 	bl	8002bcc <__aeabi_dsub>
 801c4ba:	002b      	movs	r3, r5
 801c4bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c4be:	3501      	adds	r5, #1
 801c4c0:	3230      	adds	r2, #48	@ 0x30
 801c4c2:	701a      	strb	r2, [r3, #0]
 801c4c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c4c6:	002c      	movs	r4, r5
 801c4c8:	429a      	cmp	r2, r3
 801c4ca:	d000      	beq.n	801c4ce <_dtoa_r+0x4f6>
 801c4cc:	e131      	b.n	801c732 <_dtoa_r+0x75a>
 801c4ce:	0002      	movs	r2, r0
 801c4d0:	000b      	movs	r3, r1
 801c4d2:	f7e5 f90b 	bl	80016ec <__aeabi_dadd>
 801c4d6:	9a06      	ldr	r2, [sp, #24]
 801c4d8:	9b07      	ldr	r3, [sp, #28]
 801c4da:	0006      	movs	r6, r0
 801c4dc:	000f      	movs	r7, r1
 801c4de:	f7e4 f801 	bl	80004e4 <__aeabi_dcmpgt>
 801c4e2:	2800      	cmp	r0, #0
 801c4e4:	d000      	beq.n	801c4e8 <_dtoa_r+0x510>
 801c4e6:	e10f      	b.n	801c708 <_dtoa_r+0x730>
 801c4e8:	9a06      	ldr	r2, [sp, #24]
 801c4ea:	9b07      	ldr	r3, [sp, #28]
 801c4ec:	0030      	movs	r0, r6
 801c4ee:	0039      	movs	r1, r7
 801c4f0:	f7e3 ffde 	bl	80004b0 <__aeabi_dcmpeq>
 801c4f4:	2800      	cmp	r0, #0
 801c4f6:	d003      	beq.n	801c500 <_dtoa_r+0x528>
 801c4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4fa:	07dd      	lsls	r5, r3, #31
 801c4fc:	d500      	bpl.n	801c500 <_dtoa_r+0x528>
 801c4fe:	e103      	b.n	801c708 <_dtoa_r+0x730>
 801c500:	9905      	ldr	r1, [sp, #20]
 801c502:	9803      	ldr	r0, [sp, #12]
 801c504:	f001 f812 	bl	801d52c <_Bfree>
 801c508:	2300      	movs	r3, #0
 801c50a:	7023      	strb	r3, [r4, #0]
 801c50c:	9b04      	ldr	r3, [sp, #16]
 801c50e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c510:	3301      	adds	r3, #1
 801c512:	6013      	str	r3, [r2, #0]
 801c514:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c516:	2b00      	cmp	r3, #0
 801c518:	d100      	bne.n	801c51c <_dtoa_r+0x544>
 801c51a:	e5a7      	b.n	801c06c <_dtoa_r+0x94>
 801c51c:	601c      	str	r4, [r3, #0]
 801c51e:	e5a5      	b.n	801c06c <_dtoa_r+0x94>
 801c520:	423d      	tst	r5, r7
 801c522:	d005      	beq.n	801c530 <_dtoa_r+0x558>
 801c524:	6832      	ldr	r2, [r6, #0]
 801c526:	6873      	ldr	r3, [r6, #4]
 801c528:	f7e6 f888 	bl	800263c <__aeabi_dmul>
 801c52c:	003b      	movs	r3, r7
 801c52e:	3401      	adds	r4, #1
 801c530:	106d      	asrs	r5, r5, #1
 801c532:	3608      	adds	r6, #8
 801c534:	e736      	b.n	801c3a4 <_dtoa_r+0x3cc>
 801c536:	9b04      	ldr	r3, [sp, #16]
 801c538:	930c      	str	r3, [sp, #48]	@ 0x30
 801c53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c53c:	e75a      	b.n	801c3f4 <_dtoa_r+0x41c>
 801c53e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c540:	4b69      	ldr	r3, [pc, #420]	@ (801c6e8 <_dtoa_r+0x710>)
 801c542:	3a01      	subs	r2, #1
 801c544:	00d2      	lsls	r2, r2, #3
 801c546:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c548:	189b      	adds	r3, r3, r2
 801c54a:	681a      	ldr	r2, [r3, #0]
 801c54c:	685b      	ldr	r3, [r3, #4]
 801c54e:	2900      	cmp	r1, #0
 801c550:	d04c      	beq.n	801c5ec <_dtoa_r+0x614>
 801c552:	2000      	movs	r0, #0
 801c554:	496b      	ldr	r1, [pc, #428]	@ (801c704 <_dtoa_r+0x72c>)
 801c556:	f7e5 fc2d 	bl	8001db4 <__aeabi_ddiv>
 801c55a:	0032      	movs	r2, r6
 801c55c:	003b      	movs	r3, r7
 801c55e:	f7e6 fb35 	bl	8002bcc <__aeabi_dsub>
 801c562:	9a08      	ldr	r2, [sp, #32]
 801c564:	0006      	movs	r6, r0
 801c566:	4694      	mov	ip, r2
 801c568:	000f      	movs	r7, r1
 801c56a:	9b08      	ldr	r3, [sp, #32]
 801c56c:	9316      	str	r3, [sp, #88]	@ 0x58
 801c56e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c570:	4463      	add	r3, ip
 801c572:	9311      	str	r3, [sp, #68]	@ 0x44
 801c574:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c576:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c578:	f7e6 fee6 	bl	8003348 <__aeabi_d2iz>
 801c57c:	0005      	movs	r5, r0
 801c57e:	f7e6 ff1f 	bl	80033c0 <__aeabi_i2d>
 801c582:	0002      	movs	r2, r0
 801c584:	000b      	movs	r3, r1
 801c586:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c58a:	f7e6 fb1f 	bl	8002bcc <__aeabi_dsub>
 801c58e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c590:	3530      	adds	r5, #48	@ 0x30
 801c592:	1c5c      	adds	r4, r3, #1
 801c594:	701d      	strb	r5, [r3, #0]
 801c596:	0032      	movs	r2, r6
 801c598:	003b      	movs	r3, r7
 801c59a:	900a      	str	r0, [sp, #40]	@ 0x28
 801c59c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c59e:	f7e3 ff8d 	bl	80004bc <__aeabi_dcmplt>
 801c5a2:	2800      	cmp	r0, #0
 801c5a4:	d16a      	bne.n	801c67c <_dtoa_r+0x6a4>
 801c5a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c5a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c5aa:	2000      	movs	r0, #0
 801c5ac:	4950      	ldr	r1, [pc, #320]	@ (801c6f0 <_dtoa_r+0x718>)
 801c5ae:	f7e6 fb0d 	bl	8002bcc <__aeabi_dsub>
 801c5b2:	0032      	movs	r2, r6
 801c5b4:	003b      	movs	r3, r7
 801c5b6:	f7e3 ff81 	bl	80004bc <__aeabi_dcmplt>
 801c5ba:	2800      	cmp	r0, #0
 801c5bc:	d000      	beq.n	801c5c0 <_dtoa_r+0x5e8>
 801c5be:	e0a5      	b.n	801c70c <_dtoa_r+0x734>
 801c5c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c5c2:	42a3      	cmp	r3, r4
 801c5c4:	d100      	bne.n	801c5c8 <_dtoa_r+0x5f0>
 801c5c6:	e742      	b.n	801c44e <_dtoa_r+0x476>
 801c5c8:	2200      	movs	r2, #0
 801c5ca:	0030      	movs	r0, r6
 801c5cc:	0039      	movs	r1, r7
 801c5ce:	4b49      	ldr	r3, [pc, #292]	@ (801c6f4 <_dtoa_r+0x71c>)
 801c5d0:	f7e6 f834 	bl	800263c <__aeabi_dmul>
 801c5d4:	2200      	movs	r2, #0
 801c5d6:	0006      	movs	r6, r0
 801c5d8:	000f      	movs	r7, r1
 801c5da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c5dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c5de:	4b45      	ldr	r3, [pc, #276]	@ (801c6f4 <_dtoa_r+0x71c>)
 801c5e0:	f7e6 f82c 	bl	800263c <__aeabi_dmul>
 801c5e4:	9416      	str	r4, [sp, #88]	@ 0x58
 801c5e6:	900a      	str	r0, [sp, #40]	@ 0x28
 801c5e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c5ea:	e7c3      	b.n	801c574 <_dtoa_r+0x59c>
 801c5ec:	0030      	movs	r0, r6
 801c5ee:	0039      	movs	r1, r7
 801c5f0:	f7e6 f824 	bl	800263c <__aeabi_dmul>
 801c5f4:	9d08      	ldr	r5, [sp, #32]
 801c5f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c5f8:	002b      	movs	r3, r5
 801c5fa:	4694      	mov	ip, r2
 801c5fc:	9016      	str	r0, [sp, #88]	@ 0x58
 801c5fe:	9117      	str	r1, [sp, #92]	@ 0x5c
 801c600:	4463      	add	r3, ip
 801c602:	9319      	str	r3, [sp, #100]	@ 0x64
 801c604:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c606:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c608:	f7e6 fe9e 	bl	8003348 <__aeabi_d2iz>
 801c60c:	0004      	movs	r4, r0
 801c60e:	f7e6 fed7 	bl	80033c0 <__aeabi_i2d>
 801c612:	000b      	movs	r3, r1
 801c614:	0002      	movs	r2, r0
 801c616:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c618:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c61a:	f7e6 fad7 	bl	8002bcc <__aeabi_dsub>
 801c61e:	3430      	adds	r4, #48	@ 0x30
 801c620:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c622:	702c      	strb	r4, [r5, #0]
 801c624:	3501      	adds	r5, #1
 801c626:	0006      	movs	r6, r0
 801c628:	000f      	movs	r7, r1
 801c62a:	42ab      	cmp	r3, r5
 801c62c:	d129      	bne.n	801c682 <_dtoa_r+0x6aa>
 801c62e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801c630:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c632:	9b08      	ldr	r3, [sp, #32]
 801c634:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c636:	469c      	mov	ip, r3
 801c638:	2200      	movs	r2, #0
 801c63a:	4b32      	ldr	r3, [pc, #200]	@ (801c704 <_dtoa_r+0x72c>)
 801c63c:	4464      	add	r4, ip
 801c63e:	f7e5 f855 	bl	80016ec <__aeabi_dadd>
 801c642:	0002      	movs	r2, r0
 801c644:	000b      	movs	r3, r1
 801c646:	0030      	movs	r0, r6
 801c648:	0039      	movs	r1, r7
 801c64a:	f7e3 ff4b 	bl	80004e4 <__aeabi_dcmpgt>
 801c64e:	2800      	cmp	r0, #0
 801c650:	d15c      	bne.n	801c70c <_dtoa_r+0x734>
 801c652:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c654:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c656:	2000      	movs	r0, #0
 801c658:	492a      	ldr	r1, [pc, #168]	@ (801c704 <_dtoa_r+0x72c>)
 801c65a:	f7e6 fab7 	bl	8002bcc <__aeabi_dsub>
 801c65e:	0002      	movs	r2, r0
 801c660:	000b      	movs	r3, r1
 801c662:	0030      	movs	r0, r6
 801c664:	0039      	movs	r1, r7
 801c666:	f7e3 ff29 	bl	80004bc <__aeabi_dcmplt>
 801c66a:	2800      	cmp	r0, #0
 801c66c:	d100      	bne.n	801c670 <_dtoa_r+0x698>
 801c66e:	e6ee      	b.n	801c44e <_dtoa_r+0x476>
 801c670:	0023      	movs	r3, r4
 801c672:	3c01      	subs	r4, #1
 801c674:	7822      	ldrb	r2, [r4, #0]
 801c676:	2a30      	cmp	r2, #48	@ 0x30
 801c678:	d0fa      	beq.n	801c670 <_dtoa_r+0x698>
 801c67a:	001c      	movs	r4, r3
 801c67c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c67e:	9304      	str	r3, [sp, #16]
 801c680:	e73e      	b.n	801c500 <_dtoa_r+0x528>
 801c682:	2200      	movs	r2, #0
 801c684:	4b1b      	ldr	r3, [pc, #108]	@ (801c6f4 <_dtoa_r+0x71c>)
 801c686:	f7e5 ffd9 	bl	800263c <__aeabi_dmul>
 801c68a:	900a      	str	r0, [sp, #40]	@ 0x28
 801c68c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c68e:	e7b9      	b.n	801c604 <_dtoa_r+0x62c>
 801c690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c692:	2b00      	cmp	r3, #0
 801c694:	d10c      	bne.n	801c6b0 <_dtoa_r+0x6d8>
 801c696:	9806      	ldr	r0, [sp, #24]
 801c698:	9907      	ldr	r1, [sp, #28]
 801c69a:	2200      	movs	r2, #0
 801c69c:	4b18      	ldr	r3, [pc, #96]	@ (801c700 <_dtoa_r+0x728>)
 801c69e:	f7e5 ffcd 	bl	800263c <__aeabi_dmul>
 801c6a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c6a6:	f7e3 ff27 	bl	80004f8 <__aeabi_dcmpge>
 801c6aa:	2800      	cmp	r0, #0
 801c6ac:	d100      	bne.n	801c6b0 <_dtoa_r+0x6d8>
 801c6ae:	e164      	b.n	801c97a <_dtoa_r+0x9a2>
 801c6b0:	2600      	movs	r6, #0
 801c6b2:	0037      	movs	r7, r6
 801c6b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c6b6:	9c08      	ldr	r4, [sp, #32]
 801c6b8:	43db      	mvns	r3, r3
 801c6ba:	930c      	str	r3, [sp, #48]	@ 0x30
 801c6bc:	2300      	movs	r3, #0
 801c6be:	9304      	str	r3, [sp, #16]
 801c6c0:	0031      	movs	r1, r6
 801c6c2:	9803      	ldr	r0, [sp, #12]
 801c6c4:	f000 ff32 	bl	801d52c <_Bfree>
 801c6c8:	2f00      	cmp	r7, #0
 801c6ca:	d0d7      	beq.n	801c67c <_dtoa_r+0x6a4>
 801c6cc:	9b04      	ldr	r3, [sp, #16]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d005      	beq.n	801c6de <_dtoa_r+0x706>
 801c6d2:	42bb      	cmp	r3, r7
 801c6d4:	d003      	beq.n	801c6de <_dtoa_r+0x706>
 801c6d6:	0019      	movs	r1, r3
 801c6d8:	9803      	ldr	r0, [sp, #12]
 801c6da:	f000 ff27 	bl	801d52c <_Bfree>
 801c6de:	0039      	movs	r1, r7
 801c6e0:	9803      	ldr	r0, [sp, #12]
 801c6e2:	f000 ff23 	bl	801d52c <_Bfree>
 801c6e6:	e7c9      	b.n	801c67c <_dtoa_r+0x6a4>
 801c6e8:	08020940 	.word	0x08020940
 801c6ec:	08020918 	.word	0x08020918
 801c6f0:	3ff00000 	.word	0x3ff00000
 801c6f4:	40240000 	.word	0x40240000
 801c6f8:	401c0000 	.word	0x401c0000
 801c6fc:	fcc00000 	.word	0xfcc00000
 801c700:	40140000 	.word	0x40140000
 801c704:	3fe00000 	.word	0x3fe00000
 801c708:	9b04      	ldr	r3, [sp, #16]
 801c70a:	930c      	str	r3, [sp, #48]	@ 0x30
 801c70c:	0023      	movs	r3, r4
 801c70e:	001c      	movs	r4, r3
 801c710:	3b01      	subs	r3, #1
 801c712:	781a      	ldrb	r2, [r3, #0]
 801c714:	2a39      	cmp	r2, #57	@ 0x39
 801c716:	d108      	bne.n	801c72a <_dtoa_r+0x752>
 801c718:	9a08      	ldr	r2, [sp, #32]
 801c71a:	429a      	cmp	r2, r3
 801c71c:	d1f7      	bne.n	801c70e <_dtoa_r+0x736>
 801c71e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c720:	9908      	ldr	r1, [sp, #32]
 801c722:	3201      	adds	r2, #1
 801c724:	920c      	str	r2, [sp, #48]	@ 0x30
 801c726:	2230      	movs	r2, #48	@ 0x30
 801c728:	700a      	strb	r2, [r1, #0]
 801c72a:	781a      	ldrb	r2, [r3, #0]
 801c72c:	3201      	adds	r2, #1
 801c72e:	701a      	strb	r2, [r3, #0]
 801c730:	e7a4      	b.n	801c67c <_dtoa_r+0x6a4>
 801c732:	2200      	movs	r2, #0
 801c734:	4bc6      	ldr	r3, [pc, #792]	@ (801ca50 <_dtoa_r+0xa78>)
 801c736:	f7e5 ff81 	bl	800263c <__aeabi_dmul>
 801c73a:	2200      	movs	r2, #0
 801c73c:	2300      	movs	r3, #0
 801c73e:	0006      	movs	r6, r0
 801c740:	000f      	movs	r7, r1
 801c742:	f7e3 feb5 	bl	80004b0 <__aeabi_dcmpeq>
 801c746:	2800      	cmp	r0, #0
 801c748:	d100      	bne.n	801c74c <_dtoa_r+0x774>
 801c74a:	e6a1      	b.n	801c490 <_dtoa_r+0x4b8>
 801c74c:	e6d8      	b.n	801c500 <_dtoa_r+0x528>
 801c74e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c750:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801c752:	9c06      	ldr	r4, [sp, #24]
 801c754:	2f00      	cmp	r7, #0
 801c756:	d014      	beq.n	801c782 <_dtoa_r+0x7aa>
 801c758:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c75a:	2a01      	cmp	r2, #1
 801c75c:	dd00      	ble.n	801c760 <_dtoa_r+0x788>
 801c75e:	e0c8      	b.n	801c8f2 <_dtoa_r+0x91a>
 801c760:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c762:	2a00      	cmp	r2, #0
 801c764:	d100      	bne.n	801c768 <_dtoa_r+0x790>
 801c766:	e0be      	b.n	801c8e6 <_dtoa_r+0x90e>
 801c768:	4aba      	ldr	r2, [pc, #744]	@ (801ca54 <_dtoa_r+0xa7c>)
 801c76a:	189b      	adds	r3, r3, r2
 801c76c:	9a06      	ldr	r2, [sp, #24]
 801c76e:	2101      	movs	r1, #1
 801c770:	18d2      	adds	r2, r2, r3
 801c772:	9206      	str	r2, [sp, #24]
 801c774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c776:	9803      	ldr	r0, [sp, #12]
 801c778:	18d3      	adds	r3, r2, r3
 801c77a:	930d      	str	r3, [sp, #52]	@ 0x34
 801c77c:	f000 ffda 	bl	801d734 <__i2b>
 801c780:	0007      	movs	r7, r0
 801c782:	2c00      	cmp	r4, #0
 801c784:	d00e      	beq.n	801c7a4 <_dtoa_r+0x7cc>
 801c786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c788:	2b00      	cmp	r3, #0
 801c78a:	dd0b      	ble.n	801c7a4 <_dtoa_r+0x7cc>
 801c78c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c78e:	0023      	movs	r3, r4
 801c790:	4294      	cmp	r4, r2
 801c792:	dd00      	ble.n	801c796 <_dtoa_r+0x7be>
 801c794:	0013      	movs	r3, r2
 801c796:	9a06      	ldr	r2, [sp, #24]
 801c798:	1ae4      	subs	r4, r4, r3
 801c79a:	1ad2      	subs	r2, r2, r3
 801c79c:	9206      	str	r2, [sp, #24]
 801c79e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c7a0:	1ad3      	subs	r3, r2, r3
 801c7a2:	930d      	str	r3, [sp, #52]	@ 0x34
 801c7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d01f      	beq.n	801c7ea <_dtoa_r+0x812>
 801c7aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d100      	bne.n	801c7b2 <_dtoa_r+0x7da>
 801c7b0:	e0b5      	b.n	801c91e <_dtoa_r+0x946>
 801c7b2:	2d00      	cmp	r5, #0
 801c7b4:	d010      	beq.n	801c7d8 <_dtoa_r+0x800>
 801c7b6:	0039      	movs	r1, r7
 801c7b8:	002a      	movs	r2, r5
 801c7ba:	9803      	ldr	r0, [sp, #12]
 801c7bc:	f001 f884 	bl	801d8c8 <__pow5mult>
 801c7c0:	9a05      	ldr	r2, [sp, #20]
 801c7c2:	0001      	movs	r1, r0
 801c7c4:	0007      	movs	r7, r0
 801c7c6:	9803      	ldr	r0, [sp, #12]
 801c7c8:	f000 ffcc 	bl	801d764 <__multiply>
 801c7cc:	0006      	movs	r6, r0
 801c7ce:	9905      	ldr	r1, [sp, #20]
 801c7d0:	9803      	ldr	r0, [sp, #12]
 801c7d2:	f000 feab 	bl	801d52c <_Bfree>
 801c7d6:	9605      	str	r6, [sp, #20]
 801c7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7da:	1b5a      	subs	r2, r3, r5
 801c7dc:	42ab      	cmp	r3, r5
 801c7de:	d004      	beq.n	801c7ea <_dtoa_r+0x812>
 801c7e0:	9905      	ldr	r1, [sp, #20]
 801c7e2:	9803      	ldr	r0, [sp, #12]
 801c7e4:	f001 f870 	bl	801d8c8 <__pow5mult>
 801c7e8:	9005      	str	r0, [sp, #20]
 801c7ea:	2101      	movs	r1, #1
 801c7ec:	9803      	ldr	r0, [sp, #12]
 801c7ee:	f000 ffa1 	bl	801d734 <__i2b>
 801c7f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c7f4:	0006      	movs	r6, r0
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d100      	bne.n	801c7fc <_dtoa_r+0x824>
 801c7fa:	e1bc      	b.n	801cb76 <_dtoa_r+0xb9e>
 801c7fc:	001a      	movs	r2, r3
 801c7fe:	0001      	movs	r1, r0
 801c800:	9803      	ldr	r0, [sp, #12]
 801c802:	f001 f861 	bl	801d8c8 <__pow5mult>
 801c806:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c808:	0006      	movs	r6, r0
 801c80a:	2500      	movs	r5, #0
 801c80c:	2b01      	cmp	r3, #1
 801c80e:	dc16      	bgt.n	801c83e <_dtoa_r+0x866>
 801c810:	2500      	movs	r5, #0
 801c812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c814:	42ab      	cmp	r3, r5
 801c816:	d10e      	bne.n	801c836 <_dtoa_r+0x85e>
 801c818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c81a:	031b      	lsls	r3, r3, #12
 801c81c:	42ab      	cmp	r3, r5
 801c81e:	d10a      	bne.n	801c836 <_dtoa_r+0x85e>
 801c820:	4b8d      	ldr	r3, [pc, #564]	@ (801ca58 <_dtoa_r+0xa80>)
 801c822:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c824:	4213      	tst	r3, r2
 801c826:	d006      	beq.n	801c836 <_dtoa_r+0x85e>
 801c828:	9b06      	ldr	r3, [sp, #24]
 801c82a:	3501      	adds	r5, #1
 801c82c:	3301      	adds	r3, #1
 801c82e:	9306      	str	r3, [sp, #24]
 801c830:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c832:	3301      	adds	r3, #1
 801c834:	930d      	str	r3, [sp, #52]	@ 0x34
 801c836:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c838:	2001      	movs	r0, #1
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d008      	beq.n	801c850 <_dtoa_r+0x878>
 801c83e:	6933      	ldr	r3, [r6, #16]
 801c840:	3303      	adds	r3, #3
 801c842:	009b      	lsls	r3, r3, #2
 801c844:	18f3      	adds	r3, r6, r3
 801c846:	6858      	ldr	r0, [r3, #4]
 801c848:	f000 ff24 	bl	801d694 <__hi0bits>
 801c84c:	2320      	movs	r3, #32
 801c84e:	1a18      	subs	r0, r3, r0
 801c850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c852:	1818      	adds	r0, r3, r0
 801c854:	0002      	movs	r2, r0
 801c856:	231f      	movs	r3, #31
 801c858:	401a      	ands	r2, r3
 801c85a:	4218      	tst	r0, r3
 801c85c:	d065      	beq.n	801c92a <_dtoa_r+0x952>
 801c85e:	3301      	adds	r3, #1
 801c860:	1a9b      	subs	r3, r3, r2
 801c862:	2b04      	cmp	r3, #4
 801c864:	dd5d      	ble.n	801c922 <_dtoa_r+0x94a>
 801c866:	231c      	movs	r3, #28
 801c868:	1a9b      	subs	r3, r3, r2
 801c86a:	9a06      	ldr	r2, [sp, #24]
 801c86c:	18e4      	adds	r4, r4, r3
 801c86e:	18d2      	adds	r2, r2, r3
 801c870:	9206      	str	r2, [sp, #24]
 801c872:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c874:	18d3      	adds	r3, r2, r3
 801c876:	930d      	str	r3, [sp, #52]	@ 0x34
 801c878:	9b06      	ldr	r3, [sp, #24]
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	dd05      	ble.n	801c88a <_dtoa_r+0x8b2>
 801c87e:	001a      	movs	r2, r3
 801c880:	9905      	ldr	r1, [sp, #20]
 801c882:	9803      	ldr	r0, [sp, #12]
 801c884:	f001 f87c 	bl	801d980 <__lshift>
 801c888:	9005      	str	r0, [sp, #20]
 801c88a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	dd05      	ble.n	801c89c <_dtoa_r+0x8c4>
 801c890:	0031      	movs	r1, r6
 801c892:	001a      	movs	r2, r3
 801c894:	9803      	ldr	r0, [sp, #12]
 801c896:	f001 f873 	bl	801d980 <__lshift>
 801c89a:	0006      	movs	r6, r0
 801c89c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d045      	beq.n	801c92e <_dtoa_r+0x956>
 801c8a2:	0031      	movs	r1, r6
 801c8a4:	9805      	ldr	r0, [sp, #20]
 801c8a6:	f001 f8d7 	bl	801da58 <__mcmp>
 801c8aa:	2800      	cmp	r0, #0
 801c8ac:	da3f      	bge.n	801c92e <_dtoa_r+0x956>
 801c8ae:	9b04      	ldr	r3, [sp, #16]
 801c8b0:	220a      	movs	r2, #10
 801c8b2:	3b01      	subs	r3, #1
 801c8b4:	930c      	str	r3, [sp, #48]	@ 0x30
 801c8b6:	9905      	ldr	r1, [sp, #20]
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	9803      	ldr	r0, [sp, #12]
 801c8bc:	f000 fe5a 	bl	801d574 <__multadd>
 801c8c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c8c2:	9005      	str	r0, [sp, #20]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d100      	bne.n	801c8ca <_dtoa_r+0x8f2>
 801c8c8:	e15c      	b.n	801cb84 <_dtoa_r+0xbac>
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	0039      	movs	r1, r7
 801c8ce:	220a      	movs	r2, #10
 801c8d0:	9803      	ldr	r0, [sp, #12]
 801c8d2:	f000 fe4f 	bl	801d574 <__multadd>
 801c8d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c8d8:	0007      	movs	r7, r0
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	dc55      	bgt.n	801c98a <_dtoa_r+0x9b2>
 801c8de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c8e0:	2b02      	cmp	r3, #2
 801c8e2:	dc2d      	bgt.n	801c940 <_dtoa_r+0x968>
 801c8e4:	e051      	b.n	801c98a <_dtoa_r+0x9b2>
 801c8e6:	2336      	movs	r3, #54	@ 0x36
 801c8e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c8ea:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801c8ec:	9c06      	ldr	r4, [sp, #24]
 801c8ee:	1a9b      	subs	r3, r3, r2
 801c8f0:	e73c      	b.n	801c76c <_dtoa_r+0x794>
 801c8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8f4:	1e5d      	subs	r5, r3, #1
 801c8f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8f8:	42ab      	cmp	r3, r5
 801c8fa:	db08      	blt.n	801c90e <_dtoa_r+0x936>
 801c8fc:	1b5d      	subs	r5, r3, r5
 801c8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c900:	9c06      	ldr	r4, [sp, #24]
 801c902:	2b00      	cmp	r3, #0
 801c904:	db00      	blt.n	801c908 <_dtoa_r+0x930>
 801c906:	e731      	b.n	801c76c <_dtoa_r+0x794>
 801c908:	1ae4      	subs	r4, r4, r3
 801c90a:	2300      	movs	r3, #0
 801c90c:	e72e      	b.n	801c76c <_dtoa_r+0x794>
 801c90e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c910:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c912:	1aeb      	subs	r3, r5, r3
 801c914:	18d3      	adds	r3, r2, r3
 801c916:	950f      	str	r5, [sp, #60]	@ 0x3c
 801c918:	9314      	str	r3, [sp, #80]	@ 0x50
 801c91a:	2500      	movs	r5, #0
 801c91c:	e7ef      	b.n	801c8fe <_dtoa_r+0x926>
 801c91e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c920:	e75e      	b.n	801c7e0 <_dtoa_r+0x808>
 801c922:	2b04      	cmp	r3, #4
 801c924:	d0a8      	beq.n	801c878 <_dtoa_r+0x8a0>
 801c926:	331c      	adds	r3, #28
 801c928:	e79f      	b.n	801c86a <_dtoa_r+0x892>
 801c92a:	0013      	movs	r3, r2
 801c92c:	e7fb      	b.n	801c926 <_dtoa_r+0x94e>
 801c92e:	9b04      	ldr	r3, [sp, #16]
 801c930:	930c      	str	r3, [sp, #48]	@ 0x30
 801c932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c934:	930e      	str	r3, [sp, #56]	@ 0x38
 801c936:	2b00      	cmp	r3, #0
 801c938:	dc23      	bgt.n	801c982 <_dtoa_r+0x9aa>
 801c93a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c93c:	2b02      	cmp	r3, #2
 801c93e:	dd20      	ble.n	801c982 <_dtoa_r+0x9aa>
 801c940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c942:	2b00      	cmp	r3, #0
 801c944:	d000      	beq.n	801c948 <_dtoa_r+0x970>
 801c946:	e6b5      	b.n	801c6b4 <_dtoa_r+0x6dc>
 801c948:	0031      	movs	r1, r6
 801c94a:	2205      	movs	r2, #5
 801c94c:	9803      	ldr	r0, [sp, #12]
 801c94e:	f000 fe11 	bl	801d574 <__multadd>
 801c952:	0006      	movs	r6, r0
 801c954:	0001      	movs	r1, r0
 801c956:	9805      	ldr	r0, [sp, #20]
 801c958:	f001 f87e 	bl	801da58 <__mcmp>
 801c95c:	2800      	cmp	r0, #0
 801c95e:	dc00      	bgt.n	801c962 <_dtoa_r+0x98a>
 801c960:	e6a8      	b.n	801c6b4 <_dtoa_r+0x6dc>
 801c962:	9b08      	ldr	r3, [sp, #32]
 801c964:	9a08      	ldr	r2, [sp, #32]
 801c966:	1c5c      	adds	r4, r3, #1
 801c968:	2331      	movs	r3, #49	@ 0x31
 801c96a:	7013      	strb	r3, [r2, #0]
 801c96c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c96e:	3301      	adds	r3, #1
 801c970:	930c      	str	r3, [sp, #48]	@ 0x30
 801c972:	e6a3      	b.n	801c6bc <_dtoa_r+0x6e4>
 801c974:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c976:	0037      	movs	r7, r6
 801c978:	e7f3      	b.n	801c962 <_dtoa_r+0x98a>
 801c97a:	9b04      	ldr	r3, [sp, #16]
 801c97c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801c97e:	930c      	str	r3, [sp, #48]	@ 0x30
 801c980:	e7f9      	b.n	801c976 <_dtoa_r+0x99e>
 801c982:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c984:	2b00      	cmp	r3, #0
 801c986:	d100      	bne.n	801c98a <_dtoa_r+0x9b2>
 801c988:	e100      	b.n	801cb8c <_dtoa_r+0xbb4>
 801c98a:	2c00      	cmp	r4, #0
 801c98c:	dd05      	ble.n	801c99a <_dtoa_r+0x9c2>
 801c98e:	0039      	movs	r1, r7
 801c990:	0022      	movs	r2, r4
 801c992:	9803      	ldr	r0, [sp, #12]
 801c994:	f000 fff4 	bl	801d980 <__lshift>
 801c998:	0007      	movs	r7, r0
 801c99a:	0038      	movs	r0, r7
 801c99c:	2d00      	cmp	r5, #0
 801c99e:	d018      	beq.n	801c9d2 <_dtoa_r+0x9fa>
 801c9a0:	6879      	ldr	r1, [r7, #4]
 801c9a2:	9803      	ldr	r0, [sp, #12]
 801c9a4:	f000 fd7e 	bl	801d4a4 <_Balloc>
 801c9a8:	1e04      	subs	r4, r0, #0
 801c9aa:	d105      	bne.n	801c9b8 <_dtoa_r+0x9e0>
 801c9ac:	0022      	movs	r2, r4
 801c9ae:	4b2b      	ldr	r3, [pc, #172]	@ (801ca5c <_dtoa_r+0xa84>)
 801c9b0:	482b      	ldr	r0, [pc, #172]	@ (801ca60 <_dtoa_r+0xa88>)
 801c9b2:	492c      	ldr	r1, [pc, #176]	@ (801ca64 <_dtoa_r+0xa8c>)
 801c9b4:	f7ff fb25 	bl	801c002 <_dtoa_r+0x2a>
 801c9b8:	0039      	movs	r1, r7
 801c9ba:	693a      	ldr	r2, [r7, #16]
 801c9bc:	310c      	adds	r1, #12
 801c9be:	3202      	adds	r2, #2
 801c9c0:	0092      	lsls	r2, r2, #2
 801c9c2:	300c      	adds	r0, #12
 801c9c4:	f7ff fa6a 	bl	801be9c <memcpy>
 801c9c8:	2201      	movs	r2, #1
 801c9ca:	0021      	movs	r1, r4
 801c9cc:	9803      	ldr	r0, [sp, #12]
 801c9ce:	f000 ffd7 	bl	801d980 <__lshift>
 801c9d2:	9b08      	ldr	r3, [sp, #32]
 801c9d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c9d6:	9306      	str	r3, [sp, #24]
 801c9d8:	3b01      	subs	r3, #1
 801c9da:	189b      	adds	r3, r3, r2
 801c9dc:	2201      	movs	r2, #1
 801c9de:	9704      	str	r7, [sp, #16]
 801c9e0:	0007      	movs	r7, r0
 801c9e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c9e6:	4013      	ands	r3, r2
 801c9e8:	930e      	str	r3, [sp, #56]	@ 0x38
 801c9ea:	0031      	movs	r1, r6
 801c9ec:	9805      	ldr	r0, [sp, #20]
 801c9ee:	f7ff fa65 	bl	801bebc <quorem>
 801c9f2:	9904      	ldr	r1, [sp, #16]
 801c9f4:	0005      	movs	r5, r0
 801c9f6:	900a      	str	r0, [sp, #40]	@ 0x28
 801c9f8:	9805      	ldr	r0, [sp, #20]
 801c9fa:	f001 f82d 	bl	801da58 <__mcmp>
 801c9fe:	003a      	movs	r2, r7
 801ca00:	900d      	str	r0, [sp, #52]	@ 0x34
 801ca02:	0031      	movs	r1, r6
 801ca04:	9803      	ldr	r0, [sp, #12]
 801ca06:	f001 f843 	bl	801da90 <__mdiff>
 801ca0a:	2201      	movs	r2, #1
 801ca0c:	68c3      	ldr	r3, [r0, #12]
 801ca0e:	0004      	movs	r4, r0
 801ca10:	3530      	adds	r5, #48	@ 0x30
 801ca12:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d104      	bne.n	801ca22 <_dtoa_r+0xa4a>
 801ca18:	0001      	movs	r1, r0
 801ca1a:	9805      	ldr	r0, [sp, #20]
 801ca1c:	f001 f81c 	bl	801da58 <__mcmp>
 801ca20:	9009      	str	r0, [sp, #36]	@ 0x24
 801ca22:	0021      	movs	r1, r4
 801ca24:	9803      	ldr	r0, [sp, #12]
 801ca26:	f000 fd81 	bl	801d52c <_Bfree>
 801ca2a:	9b06      	ldr	r3, [sp, #24]
 801ca2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca2e:	1c5c      	adds	r4, r3, #1
 801ca30:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ca32:	4313      	orrs	r3, r2
 801ca34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca36:	4313      	orrs	r3, r2
 801ca38:	d116      	bne.n	801ca68 <_dtoa_r+0xa90>
 801ca3a:	2d39      	cmp	r5, #57	@ 0x39
 801ca3c:	d02f      	beq.n	801ca9e <_dtoa_r+0xac6>
 801ca3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	dd01      	ble.n	801ca48 <_dtoa_r+0xa70>
 801ca44:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ca46:	3531      	adds	r5, #49	@ 0x31
 801ca48:	9b06      	ldr	r3, [sp, #24]
 801ca4a:	701d      	strb	r5, [r3, #0]
 801ca4c:	e638      	b.n	801c6c0 <_dtoa_r+0x6e8>
 801ca4e:	46c0      	nop			@ (mov r8, r8)
 801ca50:	40240000 	.word	0x40240000
 801ca54:	00000433 	.word	0x00000433
 801ca58:	7ff00000 	.word	0x7ff00000
 801ca5c:	08020841 	.word	0x08020841
 801ca60:	080207e9 	.word	0x080207e9
 801ca64:	000002ef 	.word	0x000002ef
 801ca68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	db04      	blt.n	801ca78 <_dtoa_r+0xaa0>
 801ca6e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ca70:	4313      	orrs	r3, r2
 801ca72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca74:	4313      	orrs	r3, r2
 801ca76:	d11e      	bne.n	801cab6 <_dtoa_r+0xade>
 801ca78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	dde4      	ble.n	801ca48 <_dtoa_r+0xa70>
 801ca7e:	9905      	ldr	r1, [sp, #20]
 801ca80:	2201      	movs	r2, #1
 801ca82:	9803      	ldr	r0, [sp, #12]
 801ca84:	f000 ff7c 	bl	801d980 <__lshift>
 801ca88:	0031      	movs	r1, r6
 801ca8a:	9005      	str	r0, [sp, #20]
 801ca8c:	f000 ffe4 	bl	801da58 <__mcmp>
 801ca90:	2800      	cmp	r0, #0
 801ca92:	dc02      	bgt.n	801ca9a <_dtoa_r+0xac2>
 801ca94:	d1d8      	bne.n	801ca48 <_dtoa_r+0xa70>
 801ca96:	07eb      	lsls	r3, r5, #31
 801ca98:	d5d6      	bpl.n	801ca48 <_dtoa_r+0xa70>
 801ca9a:	2d39      	cmp	r5, #57	@ 0x39
 801ca9c:	d1d2      	bne.n	801ca44 <_dtoa_r+0xa6c>
 801ca9e:	2339      	movs	r3, #57	@ 0x39
 801caa0:	9a06      	ldr	r2, [sp, #24]
 801caa2:	7013      	strb	r3, [r2, #0]
 801caa4:	0023      	movs	r3, r4
 801caa6:	001c      	movs	r4, r3
 801caa8:	3b01      	subs	r3, #1
 801caaa:	781a      	ldrb	r2, [r3, #0]
 801caac:	2a39      	cmp	r2, #57	@ 0x39
 801caae:	d04f      	beq.n	801cb50 <_dtoa_r+0xb78>
 801cab0:	3201      	adds	r2, #1
 801cab2:	701a      	strb	r2, [r3, #0]
 801cab4:	e604      	b.n	801c6c0 <_dtoa_r+0x6e8>
 801cab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cab8:	2b00      	cmp	r3, #0
 801caba:	dd03      	ble.n	801cac4 <_dtoa_r+0xaec>
 801cabc:	2d39      	cmp	r5, #57	@ 0x39
 801cabe:	d0ee      	beq.n	801ca9e <_dtoa_r+0xac6>
 801cac0:	3501      	adds	r5, #1
 801cac2:	e7c1      	b.n	801ca48 <_dtoa_r+0xa70>
 801cac4:	9b06      	ldr	r3, [sp, #24]
 801cac6:	9a06      	ldr	r2, [sp, #24]
 801cac8:	701d      	strb	r5, [r3, #0]
 801caca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cacc:	4293      	cmp	r3, r2
 801cace:	d02a      	beq.n	801cb26 <_dtoa_r+0xb4e>
 801cad0:	2300      	movs	r3, #0
 801cad2:	220a      	movs	r2, #10
 801cad4:	9905      	ldr	r1, [sp, #20]
 801cad6:	9803      	ldr	r0, [sp, #12]
 801cad8:	f000 fd4c 	bl	801d574 <__multadd>
 801cadc:	9b04      	ldr	r3, [sp, #16]
 801cade:	9005      	str	r0, [sp, #20]
 801cae0:	42bb      	cmp	r3, r7
 801cae2:	d109      	bne.n	801caf8 <_dtoa_r+0xb20>
 801cae4:	2300      	movs	r3, #0
 801cae6:	220a      	movs	r2, #10
 801cae8:	9904      	ldr	r1, [sp, #16]
 801caea:	9803      	ldr	r0, [sp, #12]
 801caec:	f000 fd42 	bl	801d574 <__multadd>
 801caf0:	9004      	str	r0, [sp, #16]
 801caf2:	0007      	movs	r7, r0
 801caf4:	9406      	str	r4, [sp, #24]
 801caf6:	e778      	b.n	801c9ea <_dtoa_r+0xa12>
 801caf8:	9904      	ldr	r1, [sp, #16]
 801cafa:	2300      	movs	r3, #0
 801cafc:	220a      	movs	r2, #10
 801cafe:	9803      	ldr	r0, [sp, #12]
 801cb00:	f000 fd38 	bl	801d574 <__multadd>
 801cb04:	2300      	movs	r3, #0
 801cb06:	9004      	str	r0, [sp, #16]
 801cb08:	220a      	movs	r2, #10
 801cb0a:	0039      	movs	r1, r7
 801cb0c:	9803      	ldr	r0, [sp, #12]
 801cb0e:	f000 fd31 	bl	801d574 <__multadd>
 801cb12:	e7ee      	b.n	801caf2 <_dtoa_r+0xb1a>
 801cb14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb16:	2401      	movs	r4, #1
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	dd00      	ble.n	801cb1e <_dtoa_r+0xb46>
 801cb1c:	001c      	movs	r4, r3
 801cb1e:	9b08      	ldr	r3, [sp, #32]
 801cb20:	191c      	adds	r4, r3, r4
 801cb22:	2300      	movs	r3, #0
 801cb24:	9304      	str	r3, [sp, #16]
 801cb26:	9905      	ldr	r1, [sp, #20]
 801cb28:	2201      	movs	r2, #1
 801cb2a:	9803      	ldr	r0, [sp, #12]
 801cb2c:	f000 ff28 	bl	801d980 <__lshift>
 801cb30:	0031      	movs	r1, r6
 801cb32:	9005      	str	r0, [sp, #20]
 801cb34:	f000 ff90 	bl	801da58 <__mcmp>
 801cb38:	2800      	cmp	r0, #0
 801cb3a:	dcb3      	bgt.n	801caa4 <_dtoa_r+0xacc>
 801cb3c:	d101      	bne.n	801cb42 <_dtoa_r+0xb6a>
 801cb3e:	07ed      	lsls	r5, r5, #31
 801cb40:	d4b0      	bmi.n	801caa4 <_dtoa_r+0xacc>
 801cb42:	0023      	movs	r3, r4
 801cb44:	001c      	movs	r4, r3
 801cb46:	3b01      	subs	r3, #1
 801cb48:	781a      	ldrb	r2, [r3, #0]
 801cb4a:	2a30      	cmp	r2, #48	@ 0x30
 801cb4c:	d0fa      	beq.n	801cb44 <_dtoa_r+0xb6c>
 801cb4e:	e5b7      	b.n	801c6c0 <_dtoa_r+0x6e8>
 801cb50:	9a08      	ldr	r2, [sp, #32]
 801cb52:	429a      	cmp	r2, r3
 801cb54:	d1a7      	bne.n	801caa6 <_dtoa_r+0xace>
 801cb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb58:	3301      	adds	r3, #1
 801cb5a:	930c      	str	r3, [sp, #48]	@ 0x30
 801cb5c:	2331      	movs	r3, #49	@ 0x31
 801cb5e:	7013      	strb	r3, [r2, #0]
 801cb60:	e5ae      	b.n	801c6c0 <_dtoa_r+0x6e8>
 801cb62:	4b15      	ldr	r3, [pc, #84]	@ (801cbb8 <_dtoa_r+0xbe0>)
 801cb64:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801cb66:	9308      	str	r3, [sp, #32]
 801cb68:	4b14      	ldr	r3, [pc, #80]	@ (801cbbc <_dtoa_r+0xbe4>)
 801cb6a:	2a00      	cmp	r2, #0
 801cb6c:	d001      	beq.n	801cb72 <_dtoa_r+0xb9a>
 801cb6e:	f7ff fa7b 	bl	801c068 <_dtoa_r+0x90>
 801cb72:	f7ff fa7b 	bl	801c06c <_dtoa_r+0x94>
 801cb76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cb78:	2b01      	cmp	r3, #1
 801cb7a:	dc00      	bgt.n	801cb7e <_dtoa_r+0xba6>
 801cb7c:	e648      	b.n	801c810 <_dtoa_r+0x838>
 801cb7e:	2001      	movs	r0, #1
 801cb80:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801cb82:	e665      	b.n	801c850 <_dtoa_r+0x878>
 801cb84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	dc00      	bgt.n	801cb8c <_dtoa_r+0xbb4>
 801cb8a:	e6d6      	b.n	801c93a <_dtoa_r+0x962>
 801cb8c:	2400      	movs	r4, #0
 801cb8e:	0031      	movs	r1, r6
 801cb90:	9805      	ldr	r0, [sp, #20]
 801cb92:	f7ff f993 	bl	801bebc <quorem>
 801cb96:	9b08      	ldr	r3, [sp, #32]
 801cb98:	3030      	adds	r0, #48	@ 0x30
 801cb9a:	5518      	strb	r0, [r3, r4]
 801cb9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb9e:	3401      	adds	r4, #1
 801cba0:	0005      	movs	r5, r0
 801cba2:	429c      	cmp	r4, r3
 801cba4:	dab6      	bge.n	801cb14 <_dtoa_r+0xb3c>
 801cba6:	2300      	movs	r3, #0
 801cba8:	220a      	movs	r2, #10
 801cbaa:	9905      	ldr	r1, [sp, #20]
 801cbac:	9803      	ldr	r0, [sp, #12]
 801cbae:	f000 fce1 	bl	801d574 <__multadd>
 801cbb2:	9005      	str	r0, [sp, #20]
 801cbb4:	e7eb      	b.n	801cb8e <_dtoa_r+0xbb6>
 801cbb6:	46c0      	nop			@ (mov r8, r8)
 801cbb8:	080207c5 	.word	0x080207c5
 801cbbc:	080207cd 	.word	0x080207cd

0801cbc0 <_free_r>:
 801cbc0:	b570      	push	{r4, r5, r6, lr}
 801cbc2:	0005      	movs	r5, r0
 801cbc4:	1e0c      	subs	r4, r1, #0
 801cbc6:	d010      	beq.n	801cbea <_free_r+0x2a>
 801cbc8:	3c04      	subs	r4, #4
 801cbca:	6823      	ldr	r3, [r4, #0]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	da00      	bge.n	801cbd2 <_free_r+0x12>
 801cbd0:	18e4      	adds	r4, r4, r3
 801cbd2:	0028      	movs	r0, r5
 801cbd4:	f000 fc56 	bl	801d484 <__malloc_lock>
 801cbd8:	4a1d      	ldr	r2, [pc, #116]	@ (801cc50 <_free_r+0x90>)
 801cbda:	6813      	ldr	r3, [r2, #0]
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d105      	bne.n	801cbec <_free_r+0x2c>
 801cbe0:	6063      	str	r3, [r4, #4]
 801cbe2:	6014      	str	r4, [r2, #0]
 801cbe4:	0028      	movs	r0, r5
 801cbe6:	f000 fc55 	bl	801d494 <__malloc_unlock>
 801cbea:	bd70      	pop	{r4, r5, r6, pc}
 801cbec:	42a3      	cmp	r3, r4
 801cbee:	d908      	bls.n	801cc02 <_free_r+0x42>
 801cbf0:	6820      	ldr	r0, [r4, #0]
 801cbf2:	1821      	adds	r1, r4, r0
 801cbf4:	428b      	cmp	r3, r1
 801cbf6:	d1f3      	bne.n	801cbe0 <_free_r+0x20>
 801cbf8:	6819      	ldr	r1, [r3, #0]
 801cbfa:	685b      	ldr	r3, [r3, #4]
 801cbfc:	1809      	adds	r1, r1, r0
 801cbfe:	6021      	str	r1, [r4, #0]
 801cc00:	e7ee      	b.n	801cbe0 <_free_r+0x20>
 801cc02:	001a      	movs	r2, r3
 801cc04:	685b      	ldr	r3, [r3, #4]
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d001      	beq.n	801cc0e <_free_r+0x4e>
 801cc0a:	42a3      	cmp	r3, r4
 801cc0c:	d9f9      	bls.n	801cc02 <_free_r+0x42>
 801cc0e:	6811      	ldr	r1, [r2, #0]
 801cc10:	1850      	adds	r0, r2, r1
 801cc12:	42a0      	cmp	r0, r4
 801cc14:	d10b      	bne.n	801cc2e <_free_r+0x6e>
 801cc16:	6820      	ldr	r0, [r4, #0]
 801cc18:	1809      	adds	r1, r1, r0
 801cc1a:	1850      	adds	r0, r2, r1
 801cc1c:	6011      	str	r1, [r2, #0]
 801cc1e:	4283      	cmp	r3, r0
 801cc20:	d1e0      	bne.n	801cbe4 <_free_r+0x24>
 801cc22:	6818      	ldr	r0, [r3, #0]
 801cc24:	685b      	ldr	r3, [r3, #4]
 801cc26:	1841      	adds	r1, r0, r1
 801cc28:	6011      	str	r1, [r2, #0]
 801cc2a:	6053      	str	r3, [r2, #4]
 801cc2c:	e7da      	b.n	801cbe4 <_free_r+0x24>
 801cc2e:	42a0      	cmp	r0, r4
 801cc30:	d902      	bls.n	801cc38 <_free_r+0x78>
 801cc32:	230c      	movs	r3, #12
 801cc34:	602b      	str	r3, [r5, #0]
 801cc36:	e7d5      	b.n	801cbe4 <_free_r+0x24>
 801cc38:	6820      	ldr	r0, [r4, #0]
 801cc3a:	1821      	adds	r1, r4, r0
 801cc3c:	428b      	cmp	r3, r1
 801cc3e:	d103      	bne.n	801cc48 <_free_r+0x88>
 801cc40:	6819      	ldr	r1, [r3, #0]
 801cc42:	685b      	ldr	r3, [r3, #4]
 801cc44:	1809      	adds	r1, r1, r0
 801cc46:	6021      	str	r1, [r4, #0]
 801cc48:	6063      	str	r3, [r4, #4]
 801cc4a:	6054      	str	r4, [r2, #4]
 801cc4c:	e7ca      	b.n	801cbe4 <_free_r+0x24>
 801cc4e:	46c0      	nop			@ (mov r8, r8)
 801cc50:	200038a4 	.word	0x200038a4

0801cc54 <rshift>:
 801cc54:	0002      	movs	r2, r0
 801cc56:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc58:	6904      	ldr	r4, [r0, #16]
 801cc5a:	b085      	sub	sp, #20
 801cc5c:	3214      	adds	r2, #20
 801cc5e:	114b      	asrs	r3, r1, #5
 801cc60:	0016      	movs	r6, r2
 801cc62:	9302      	str	r3, [sp, #8]
 801cc64:	429c      	cmp	r4, r3
 801cc66:	dd31      	ble.n	801cccc <rshift+0x78>
 801cc68:	261f      	movs	r6, #31
 801cc6a:	000f      	movs	r7, r1
 801cc6c:	009b      	lsls	r3, r3, #2
 801cc6e:	00a5      	lsls	r5, r4, #2
 801cc70:	18d3      	adds	r3, r2, r3
 801cc72:	4037      	ands	r7, r6
 801cc74:	1955      	adds	r5, r2, r5
 801cc76:	9300      	str	r3, [sp, #0]
 801cc78:	9701      	str	r7, [sp, #4]
 801cc7a:	4231      	tst	r1, r6
 801cc7c:	d10d      	bne.n	801cc9a <rshift+0x46>
 801cc7e:	0016      	movs	r6, r2
 801cc80:	0019      	movs	r1, r3
 801cc82:	428d      	cmp	r5, r1
 801cc84:	d836      	bhi.n	801ccf4 <rshift+0xa0>
 801cc86:	9b00      	ldr	r3, [sp, #0]
 801cc88:	2600      	movs	r6, #0
 801cc8a:	3b03      	subs	r3, #3
 801cc8c:	429d      	cmp	r5, r3
 801cc8e:	d302      	bcc.n	801cc96 <rshift+0x42>
 801cc90:	9b02      	ldr	r3, [sp, #8]
 801cc92:	1ae4      	subs	r4, r4, r3
 801cc94:	00a6      	lsls	r6, r4, #2
 801cc96:	1996      	adds	r6, r2, r6
 801cc98:	e018      	b.n	801cccc <rshift+0x78>
 801cc9a:	2120      	movs	r1, #32
 801cc9c:	9e01      	ldr	r6, [sp, #4]
 801cc9e:	9f01      	ldr	r7, [sp, #4]
 801cca0:	1b89      	subs	r1, r1, r6
 801cca2:	9e00      	ldr	r6, [sp, #0]
 801cca4:	9103      	str	r1, [sp, #12]
 801cca6:	ce02      	ldmia	r6!, {r1}
 801cca8:	4694      	mov	ip, r2
 801ccaa:	40f9      	lsrs	r1, r7
 801ccac:	42b5      	cmp	r5, r6
 801ccae:	d816      	bhi.n	801ccde <rshift+0x8a>
 801ccb0:	9b00      	ldr	r3, [sp, #0]
 801ccb2:	2600      	movs	r6, #0
 801ccb4:	3301      	adds	r3, #1
 801ccb6:	429d      	cmp	r5, r3
 801ccb8:	d303      	bcc.n	801ccc2 <rshift+0x6e>
 801ccba:	9b02      	ldr	r3, [sp, #8]
 801ccbc:	1ae4      	subs	r4, r4, r3
 801ccbe:	00a6      	lsls	r6, r4, #2
 801ccc0:	3e04      	subs	r6, #4
 801ccc2:	1996      	adds	r6, r2, r6
 801ccc4:	6031      	str	r1, [r6, #0]
 801ccc6:	2900      	cmp	r1, #0
 801ccc8:	d000      	beq.n	801cccc <rshift+0x78>
 801ccca:	3604      	adds	r6, #4
 801cccc:	1ab1      	subs	r1, r6, r2
 801ccce:	1089      	asrs	r1, r1, #2
 801ccd0:	6101      	str	r1, [r0, #16]
 801ccd2:	4296      	cmp	r6, r2
 801ccd4:	d101      	bne.n	801ccda <rshift+0x86>
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	6143      	str	r3, [r0, #20]
 801ccda:	b005      	add	sp, #20
 801ccdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccde:	6837      	ldr	r7, [r6, #0]
 801cce0:	9b03      	ldr	r3, [sp, #12]
 801cce2:	409f      	lsls	r7, r3
 801cce4:	430f      	orrs	r7, r1
 801cce6:	4661      	mov	r1, ip
 801cce8:	c180      	stmia	r1!, {r7}
 801ccea:	468c      	mov	ip, r1
 801ccec:	9b01      	ldr	r3, [sp, #4]
 801ccee:	ce02      	ldmia	r6!, {r1}
 801ccf0:	40d9      	lsrs	r1, r3
 801ccf2:	e7db      	b.n	801ccac <rshift+0x58>
 801ccf4:	c980      	ldmia	r1!, {r7}
 801ccf6:	c680      	stmia	r6!, {r7}
 801ccf8:	e7c3      	b.n	801cc82 <rshift+0x2e>

0801ccfa <__hexdig_fun>:
 801ccfa:	0002      	movs	r2, r0
 801ccfc:	3a30      	subs	r2, #48	@ 0x30
 801ccfe:	0003      	movs	r3, r0
 801cd00:	2a09      	cmp	r2, #9
 801cd02:	d802      	bhi.n	801cd0a <__hexdig_fun+0x10>
 801cd04:	3b20      	subs	r3, #32
 801cd06:	b2d8      	uxtb	r0, r3
 801cd08:	4770      	bx	lr
 801cd0a:	0002      	movs	r2, r0
 801cd0c:	3a61      	subs	r2, #97	@ 0x61
 801cd0e:	2a05      	cmp	r2, #5
 801cd10:	d801      	bhi.n	801cd16 <__hexdig_fun+0x1c>
 801cd12:	3b47      	subs	r3, #71	@ 0x47
 801cd14:	e7f7      	b.n	801cd06 <__hexdig_fun+0xc>
 801cd16:	001a      	movs	r2, r3
 801cd18:	3a41      	subs	r2, #65	@ 0x41
 801cd1a:	2000      	movs	r0, #0
 801cd1c:	2a05      	cmp	r2, #5
 801cd1e:	d8f3      	bhi.n	801cd08 <__hexdig_fun+0xe>
 801cd20:	3b27      	subs	r3, #39	@ 0x27
 801cd22:	e7f0      	b.n	801cd06 <__hexdig_fun+0xc>

0801cd24 <__gethex>:
 801cd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd26:	b089      	sub	sp, #36	@ 0x24
 801cd28:	9307      	str	r3, [sp, #28]
 801cd2a:	680b      	ldr	r3, [r1, #0]
 801cd2c:	9201      	str	r2, [sp, #4]
 801cd2e:	9003      	str	r0, [sp, #12]
 801cd30:	9106      	str	r1, [sp, #24]
 801cd32:	1c9a      	adds	r2, r3, #2
 801cd34:	0011      	movs	r1, r2
 801cd36:	3201      	adds	r2, #1
 801cd38:	1e50      	subs	r0, r2, #1
 801cd3a:	7800      	ldrb	r0, [r0, #0]
 801cd3c:	2830      	cmp	r0, #48	@ 0x30
 801cd3e:	d0f9      	beq.n	801cd34 <__gethex+0x10>
 801cd40:	1acb      	subs	r3, r1, r3
 801cd42:	3b02      	subs	r3, #2
 801cd44:	9305      	str	r3, [sp, #20]
 801cd46:	9100      	str	r1, [sp, #0]
 801cd48:	f7ff ffd7 	bl	801ccfa <__hexdig_fun>
 801cd4c:	2300      	movs	r3, #0
 801cd4e:	001d      	movs	r5, r3
 801cd50:	9302      	str	r3, [sp, #8]
 801cd52:	4298      	cmp	r0, r3
 801cd54:	d11e      	bne.n	801cd94 <__gethex+0x70>
 801cd56:	2201      	movs	r2, #1
 801cd58:	49a6      	ldr	r1, [pc, #664]	@ (801cff4 <__gethex+0x2d0>)
 801cd5a:	9800      	ldr	r0, [sp, #0]
 801cd5c:	f7fe ffd8 	bl	801bd10 <strncmp>
 801cd60:	0007      	movs	r7, r0
 801cd62:	42a8      	cmp	r0, r5
 801cd64:	d000      	beq.n	801cd68 <__gethex+0x44>
 801cd66:	e06a      	b.n	801ce3e <__gethex+0x11a>
 801cd68:	9b00      	ldr	r3, [sp, #0]
 801cd6a:	7858      	ldrb	r0, [r3, #1]
 801cd6c:	1c5c      	adds	r4, r3, #1
 801cd6e:	f7ff ffc4 	bl	801ccfa <__hexdig_fun>
 801cd72:	2301      	movs	r3, #1
 801cd74:	9302      	str	r3, [sp, #8]
 801cd76:	42a8      	cmp	r0, r5
 801cd78:	d02f      	beq.n	801cdda <__gethex+0xb6>
 801cd7a:	9400      	str	r4, [sp, #0]
 801cd7c:	9b00      	ldr	r3, [sp, #0]
 801cd7e:	7818      	ldrb	r0, [r3, #0]
 801cd80:	2830      	cmp	r0, #48	@ 0x30
 801cd82:	d009      	beq.n	801cd98 <__gethex+0x74>
 801cd84:	f7ff ffb9 	bl	801ccfa <__hexdig_fun>
 801cd88:	4242      	negs	r2, r0
 801cd8a:	4142      	adcs	r2, r0
 801cd8c:	2301      	movs	r3, #1
 801cd8e:	0025      	movs	r5, r4
 801cd90:	9202      	str	r2, [sp, #8]
 801cd92:	9305      	str	r3, [sp, #20]
 801cd94:	9c00      	ldr	r4, [sp, #0]
 801cd96:	e004      	b.n	801cda2 <__gethex+0x7e>
 801cd98:	9b00      	ldr	r3, [sp, #0]
 801cd9a:	3301      	adds	r3, #1
 801cd9c:	9300      	str	r3, [sp, #0]
 801cd9e:	e7ed      	b.n	801cd7c <__gethex+0x58>
 801cda0:	3401      	adds	r4, #1
 801cda2:	7820      	ldrb	r0, [r4, #0]
 801cda4:	f7ff ffa9 	bl	801ccfa <__hexdig_fun>
 801cda8:	1e07      	subs	r7, r0, #0
 801cdaa:	d1f9      	bne.n	801cda0 <__gethex+0x7c>
 801cdac:	2201      	movs	r2, #1
 801cdae:	0020      	movs	r0, r4
 801cdb0:	4990      	ldr	r1, [pc, #576]	@ (801cff4 <__gethex+0x2d0>)
 801cdb2:	f7fe ffad 	bl	801bd10 <strncmp>
 801cdb6:	2800      	cmp	r0, #0
 801cdb8:	d10d      	bne.n	801cdd6 <__gethex+0xb2>
 801cdba:	2d00      	cmp	r5, #0
 801cdbc:	d106      	bne.n	801cdcc <__gethex+0xa8>
 801cdbe:	3401      	adds	r4, #1
 801cdc0:	0025      	movs	r5, r4
 801cdc2:	7820      	ldrb	r0, [r4, #0]
 801cdc4:	f7ff ff99 	bl	801ccfa <__hexdig_fun>
 801cdc8:	2800      	cmp	r0, #0
 801cdca:	d102      	bne.n	801cdd2 <__gethex+0xae>
 801cdcc:	1b2d      	subs	r5, r5, r4
 801cdce:	00af      	lsls	r7, r5, #2
 801cdd0:	e003      	b.n	801cdda <__gethex+0xb6>
 801cdd2:	3401      	adds	r4, #1
 801cdd4:	e7f5      	b.n	801cdc2 <__gethex+0x9e>
 801cdd6:	2d00      	cmp	r5, #0
 801cdd8:	d1f8      	bne.n	801cdcc <__gethex+0xa8>
 801cdda:	2220      	movs	r2, #32
 801cddc:	7823      	ldrb	r3, [r4, #0]
 801cdde:	0026      	movs	r6, r4
 801cde0:	4393      	bics	r3, r2
 801cde2:	2b50      	cmp	r3, #80	@ 0x50
 801cde4:	d11d      	bne.n	801ce22 <__gethex+0xfe>
 801cde6:	7863      	ldrb	r3, [r4, #1]
 801cde8:	2b2b      	cmp	r3, #43	@ 0x2b
 801cdea:	d02d      	beq.n	801ce48 <__gethex+0x124>
 801cdec:	2b2d      	cmp	r3, #45	@ 0x2d
 801cdee:	d02f      	beq.n	801ce50 <__gethex+0x12c>
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	1c66      	adds	r6, r4, #1
 801cdf4:	9304      	str	r3, [sp, #16]
 801cdf6:	7830      	ldrb	r0, [r6, #0]
 801cdf8:	f7ff ff7f 	bl	801ccfa <__hexdig_fun>
 801cdfc:	1e43      	subs	r3, r0, #1
 801cdfe:	b2db      	uxtb	r3, r3
 801ce00:	0005      	movs	r5, r0
 801ce02:	2b18      	cmp	r3, #24
 801ce04:	d82a      	bhi.n	801ce5c <__gethex+0x138>
 801ce06:	7870      	ldrb	r0, [r6, #1]
 801ce08:	f7ff ff77 	bl	801ccfa <__hexdig_fun>
 801ce0c:	1e43      	subs	r3, r0, #1
 801ce0e:	b2db      	uxtb	r3, r3
 801ce10:	3601      	adds	r6, #1
 801ce12:	3d10      	subs	r5, #16
 801ce14:	2b18      	cmp	r3, #24
 801ce16:	d91d      	bls.n	801ce54 <__gethex+0x130>
 801ce18:	9b04      	ldr	r3, [sp, #16]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d000      	beq.n	801ce20 <__gethex+0xfc>
 801ce1e:	426d      	negs	r5, r5
 801ce20:	197f      	adds	r7, r7, r5
 801ce22:	9b06      	ldr	r3, [sp, #24]
 801ce24:	601e      	str	r6, [r3, #0]
 801ce26:	9b02      	ldr	r3, [sp, #8]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d019      	beq.n	801ce60 <__gethex+0x13c>
 801ce2c:	9b05      	ldr	r3, [sp, #20]
 801ce2e:	2606      	movs	r6, #6
 801ce30:	425a      	negs	r2, r3
 801ce32:	4153      	adcs	r3, r2
 801ce34:	425b      	negs	r3, r3
 801ce36:	401e      	ands	r6, r3
 801ce38:	0030      	movs	r0, r6
 801ce3a:	b009      	add	sp, #36	@ 0x24
 801ce3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce3e:	2301      	movs	r3, #1
 801ce40:	2700      	movs	r7, #0
 801ce42:	9c00      	ldr	r4, [sp, #0]
 801ce44:	9302      	str	r3, [sp, #8]
 801ce46:	e7c8      	b.n	801cdda <__gethex+0xb6>
 801ce48:	2300      	movs	r3, #0
 801ce4a:	9304      	str	r3, [sp, #16]
 801ce4c:	1ca6      	adds	r6, r4, #2
 801ce4e:	e7d2      	b.n	801cdf6 <__gethex+0xd2>
 801ce50:	2301      	movs	r3, #1
 801ce52:	e7fa      	b.n	801ce4a <__gethex+0x126>
 801ce54:	230a      	movs	r3, #10
 801ce56:	435d      	muls	r5, r3
 801ce58:	182d      	adds	r5, r5, r0
 801ce5a:	e7d4      	b.n	801ce06 <__gethex+0xe2>
 801ce5c:	0026      	movs	r6, r4
 801ce5e:	e7e0      	b.n	801ce22 <__gethex+0xfe>
 801ce60:	9b00      	ldr	r3, [sp, #0]
 801ce62:	9902      	ldr	r1, [sp, #8]
 801ce64:	1ae3      	subs	r3, r4, r3
 801ce66:	3b01      	subs	r3, #1
 801ce68:	2b07      	cmp	r3, #7
 801ce6a:	dc0a      	bgt.n	801ce82 <__gethex+0x15e>
 801ce6c:	9803      	ldr	r0, [sp, #12]
 801ce6e:	f000 fb19 	bl	801d4a4 <_Balloc>
 801ce72:	1e05      	subs	r5, r0, #0
 801ce74:	d108      	bne.n	801ce88 <__gethex+0x164>
 801ce76:	002a      	movs	r2, r5
 801ce78:	21e4      	movs	r1, #228	@ 0xe4
 801ce7a:	4b5f      	ldr	r3, [pc, #380]	@ (801cff8 <__gethex+0x2d4>)
 801ce7c:	485f      	ldr	r0, [pc, #380]	@ (801cffc <__gethex+0x2d8>)
 801ce7e:	f001 fc03 	bl	801e688 <__assert_func>
 801ce82:	3101      	adds	r1, #1
 801ce84:	105b      	asrs	r3, r3, #1
 801ce86:	e7ef      	b.n	801ce68 <__gethex+0x144>
 801ce88:	0003      	movs	r3, r0
 801ce8a:	3314      	adds	r3, #20
 801ce8c:	9302      	str	r3, [sp, #8]
 801ce8e:	9305      	str	r3, [sp, #20]
 801ce90:	2300      	movs	r3, #0
 801ce92:	001e      	movs	r6, r3
 801ce94:	9304      	str	r3, [sp, #16]
 801ce96:	9b00      	ldr	r3, [sp, #0]
 801ce98:	42a3      	cmp	r3, r4
 801ce9a:	d338      	bcc.n	801cf0e <__gethex+0x1ea>
 801ce9c:	9c05      	ldr	r4, [sp, #20]
 801ce9e:	9b02      	ldr	r3, [sp, #8]
 801cea0:	c440      	stmia	r4!, {r6}
 801cea2:	1ae4      	subs	r4, r4, r3
 801cea4:	10a4      	asrs	r4, r4, #2
 801cea6:	0030      	movs	r0, r6
 801cea8:	612c      	str	r4, [r5, #16]
 801ceaa:	f000 fbf3 	bl	801d694 <__hi0bits>
 801ceae:	9b01      	ldr	r3, [sp, #4]
 801ceb0:	0164      	lsls	r4, r4, #5
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	1a26      	subs	r6, r4, r0
 801ceb6:	9300      	str	r3, [sp, #0]
 801ceb8:	429e      	cmp	r6, r3
 801ceba:	dd52      	ble.n	801cf62 <__gethex+0x23e>
 801cebc:	1af6      	subs	r6, r6, r3
 801cebe:	0031      	movs	r1, r6
 801cec0:	0028      	movs	r0, r5
 801cec2:	f000 ff96 	bl	801ddf2 <__any_on>
 801cec6:	1e04      	subs	r4, r0, #0
 801cec8:	d00f      	beq.n	801ceea <__gethex+0x1c6>
 801ceca:	2401      	movs	r4, #1
 801cecc:	231f      	movs	r3, #31
 801cece:	0020      	movs	r0, r4
 801ced0:	1e72      	subs	r2, r6, #1
 801ced2:	4013      	ands	r3, r2
 801ced4:	4098      	lsls	r0, r3
 801ced6:	0003      	movs	r3, r0
 801ced8:	1151      	asrs	r1, r2, #5
 801ceda:	9802      	ldr	r0, [sp, #8]
 801cedc:	0089      	lsls	r1, r1, #2
 801cede:	5809      	ldr	r1, [r1, r0]
 801cee0:	4219      	tst	r1, r3
 801cee2:	d002      	beq.n	801ceea <__gethex+0x1c6>
 801cee4:	42a2      	cmp	r2, r4
 801cee6:	dc34      	bgt.n	801cf52 <__gethex+0x22e>
 801cee8:	2402      	movs	r4, #2
 801ceea:	0031      	movs	r1, r6
 801ceec:	0028      	movs	r0, r5
 801ceee:	f7ff feb1 	bl	801cc54 <rshift>
 801cef2:	19bf      	adds	r7, r7, r6
 801cef4:	9b01      	ldr	r3, [sp, #4]
 801cef6:	689b      	ldr	r3, [r3, #8]
 801cef8:	42bb      	cmp	r3, r7
 801cefa:	da42      	bge.n	801cf82 <__gethex+0x25e>
 801cefc:	0029      	movs	r1, r5
 801cefe:	9803      	ldr	r0, [sp, #12]
 801cf00:	f000 fb14 	bl	801d52c <_Bfree>
 801cf04:	2300      	movs	r3, #0
 801cf06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cf08:	26a3      	movs	r6, #163	@ 0xa3
 801cf0a:	6013      	str	r3, [r2, #0]
 801cf0c:	e794      	b.n	801ce38 <__gethex+0x114>
 801cf0e:	3c01      	subs	r4, #1
 801cf10:	7823      	ldrb	r3, [r4, #0]
 801cf12:	2b2e      	cmp	r3, #46	@ 0x2e
 801cf14:	d012      	beq.n	801cf3c <__gethex+0x218>
 801cf16:	9b04      	ldr	r3, [sp, #16]
 801cf18:	2b20      	cmp	r3, #32
 801cf1a:	d104      	bne.n	801cf26 <__gethex+0x202>
 801cf1c:	9b05      	ldr	r3, [sp, #20]
 801cf1e:	c340      	stmia	r3!, {r6}
 801cf20:	2600      	movs	r6, #0
 801cf22:	9305      	str	r3, [sp, #20]
 801cf24:	9604      	str	r6, [sp, #16]
 801cf26:	7820      	ldrb	r0, [r4, #0]
 801cf28:	f7ff fee7 	bl	801ccfa <__hexdig_fun>
 801cf2c:	230f      	movs	r3, #15
 801cf2e:	4018      	ands	r0, r3
 801cf30:	9b04      	ldr	r3, [sp, #16]
 801cf32:	4098      	lsls	r0, r3
 801cf34:	3304      	adds	r3, #4
 801cf36:	4306      	orrs	r6, r0
 801cf38:	9304      	str	r3, [sp, #16]
 801cf3a:	e7ac      	b.n	801ce96 <__gethex+0x172>
 801cf3c:	9b00      	ldr	r3, [sp, #0]
 801cf3e:	42a3      	cmp	r3, r4
 801cf40:	d8e9      	bhi.n	801cf16 <__gethex+0x1f2>
 801cf42:	2201      	movs	r2, #1
 801cf44:	0020      	movs	r0, r4
 801cf46:	492b      	ldr	r1, [pc, #172]	@ (801cff4 <__gethex+0x2d0>)
 801cf48:	f7fe fee2 	bl	801bd10 <strncmp>
 801cf4c:	2800      	cmp	r0, #0
 801cf4e:	d1e2      	bne.n	801cf16 <__gethex+0x1f2>
 801cf50:	e7a1      	b.n	801ce96 <__gethex+0x172>
 801cf52:	0028      	movs	r0, r5
 801cf54:	1eb1      	subs	r1, r6, #2
 801cf56:	f000 ff4c 	bl	801ddf2 <__any_on>
 801cf5a:	2800      	cmp	r0, #0
 801cf5c:	d0c4      	beq.n	801cee8 <__gethex+0x1c4>
 801cf5e:	2403      	movs	r4, #3
 801cf60:	e7c3      	b.n	801ceea <__gethex+0x1c6>
 801cf62:	9b00      	ldr	r3, [sp, #0]
 801cf64:	2400      	movs	r4, #0
 801cf66:	429e      	cmp	r6, r3
 801cf68:	dac4      	bge.n	801cef4 <__gethex+0x1d0>
 801cf6a:	1b9e      	subs	r6, r3, r6
 801cf6c:	0029      	movs	r1, r5
 801cf6e:	0032      	movs	r2, r6
 801cf70:	9803      	ldr	r0, [sp, #12]
 801cf72:	f000 fd05 	bl	801d980 <__lshift>
 801cf76:	0003      	movs	r3, r0
 801cf78:	3314      	adds	r3, #20
 801cf7a:	0005      	movs	r5, r0
 801cf7c:	1bbf      	subs	r7, r7, r6
 801cf7e:	9302      	str	r3, [sp, #8]
 801cf80:	e7b8      	b.n	801cef4 <__gethex+0x1d0>
 801cf82:	9b01      	ldr	r3, [sp, #4]
 801cf84:	685e      	ldr	r6, [r3, #4]
 801cf86:	42be      	cmp	r6, r7
 801cf88:	dd6f      	ble.n	801d06a <__gethex+0x346>
 801cf8a:	9b00      	ldr	r3, [sp, #0]
 801cf8c:	1bf6      	subs	r6, r6, r7
 801cf8e:	42b3      	cmp	r3, r6
 801cf90:	dc36      	bgt.n	801d000 <__gethex+0x2dc>
 801cf92:	9b01      	ldr	r3, [sp, #4]
 801cf94:	68db      	ldr	r3, [r3, #12]
 801cf96:	2b02      	cmp	r3, #2
 801cf98:	d024      	beq.n	801cfe4 <__gethex+0x2c0>
 801cf9a:	2b03      	cmp	r3, #3
 801cf9c:	d026      	beq.n	801cfec <__gethex+0x2c8>
 801cf9e:	2b01      	cmp	r3, #1
 801cfa0:	d117      	bne.n	801cfd2 <__gethex+0x2ae>
 801cfa2:	9b00      	ldr	r3, [sp, #0]
 801cfa4:	42b3      	cmp	r3, r6
 801cfa6:	d114      	bne.n	801cfd2 <__gethex+0x2ae>
 801cfa8:	2b01      	cmp	r3, #1
 801cfaa:	d10b      	bne.n	801cfc4 <__gethex+0x2a0>
 801cfac:	9b01      	ldr	r3, [sp, #4]
 801cfae:	9a07      	ldr	r2, [sp, #28]
 801cfb0:	685b      	ldr	r3, [r3, #4]
 801cfb2:	2662      	movs	r6, #98	@ 0x62
 801cfb4:	6013      	str	r3, [r2, #0]
 801cfb6:	2301      	movs	r3, #1
 801cfb8:	9a02      	ldr	r2, [sp, #8]
 801cfba:	612b      	str	r3, [r5, #16]
 801cfbc:	6013      	str	r3, [r2, #0]
 801cfbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cfc0:	601d      	str	r5, [r3, #0]
 801cfc2:	e739      	b.n	801ce38 <__gethex+0x114>
 801cfc4:	9900      	ldr	r1, [sp, #0]
 801cfc6:	0028      	movs	r0, r5
 801cfc8:	3901      	subs	r1, #1
 801cfca:	f000 ff12 	bl	801ddf2 <__any_on>
 801cfce:	2800      	cmp	r0, #0
 801cfd0:	d1ec      	bne.n	801cfac <__gethex+0x288>
 801cfd2:	0029      	movs	r1, r5
 801cfd4:	9803      	ldr	r0, [sp, #12]
 801cfd6:	f000 faa9 	bl	801d52c <_Bfree>
 801cfda:	2300      	movs	r3, #0
 801cfdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cfde:	2650      	movs	r6, #80	@ 0x50
 801cfe0:	6013      	str	r3, [r2, #0]
 801cfe2:	e729      	b.n	801ce38 <__gethex+0x114>
 801cfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d1f3      	bne.n	801cfd2 <__gethex+0x2ae>
 801cfea:	e7df      	b.n	801cfac <__gethex+0x288>
 801cfec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d1dc      	bne.n	801cfac <__gethex+0x288>
 801cff2:	e7ee      	b.n	801cfd2 <__gethex+0x2ae>
 801cff4:	08020634 	.word	0x08020634
 801cff8:	08020841 	.word	0x08020841
 801cffc:	08020852 	.word	0x08020852
 801d000:	1e77      	subs	r7, r6, #1
 801d002:	2c00      	cmp	r4, #0
 801d004:	d12f      	bne.n	801d066 <__gethex+0x342>
 801d006:	2f00      	cmp	r7, #0
 801d008:	d004      	beq.n	801d014 <__gethex+0x2f0>
 801d00a:	0039      	movs	r1, r7
 801d00c:	0028      	movs	r0, r5
 801d00e:	f000 fef0 	bl	801ddf2 <__any_on>
 801d012:	0004      	movs	r4, r0
 801d014:	231f      	movs	r3, #31
 801d016:	117a      	asrs	r2, r7, #5
 801d018:	401f      	ands	r7, r3
 801d01a:	3b1e      	subs	r3, #30
 801d01c:	40bb      	lsls	r3, r7
 801d01e:	9902      	ldr	r1, [sp, #8]
 801d020:	0092      	lsls	r2, r2, #2
 801d022:	5852      	ldr	r2, [r2, r1]
 801d024:	421a      	tst	r2, r3
 801d026:	d001      	beq.n	801d02c <__gethex+0x308>
 801d028:	2302      	movs	r3, #2
 801d02a:	431c      	orrs	r4, r3
 801d02c:	9b00      	ldr	r3, [sp, #0]
 801d02e:	0031      	movs	r1, r6
 801d030:	1b9b      	subs	r3, r3, r6
 801d032:	2602      	movs	r6, #2
 801d034:	0028      	movs	r0, r5
 801d036:	9300      	str	r3, [sp, #0]
 801d038:	f7ff fe0c 	bl	801cc54 <rshift>
 801d03c:	9b01      	ldr	r3, [sp, #4]
 801d03e:	685f      	ldr	r7, [r3, #4]
 801d040:	2c00      	cmp	r4, #0
 801d042:	d03f      	beq.n	801d0c4 <__gethex+0x3a0>
 801d044:	9b01      	ldr	r3, [sp, #4]
 801d046:	68db      	ldr	r3, [r3, #12]
 801d048:	2b02      	cmp	r3, #2
 801d04a:	d010      	beq.n	801d06e <__gethex+0x34a>
 801d04c:	2b03      	cmp	r3, #3
 801d04e:	d012      	beq.n	801d076 <__gethex+0x352>
 801d050:	2b01      	cmp	r3, #1
 801d052:	d106      	bne.n	801d062 <__gethex+0x33e>
 801d054:	07a2      	lsls	r2, r4, #30
 801d056:	d504      	bpl.n	801d062 <__gethex+0x33e>
 801d058:	9a02      	ldr	r2, [sp, #8]
 801d05a:	6812      	ldr	r2, [r2, #0]
 801d05c:	4314      	orrs	r4, r2
 801d05e:	421c      	tst	r4, r3
 801d060:	d10c      	bne.n	801d07c <__gethex+0x358>
 801d062:	2310      	movs	r3, #16
 801d064:	e02d      	b.n	801d0c2 <__gethex+0x39e>
 801d066:	2401      	movs	r4, #1
 801d068:	e7d4      	b.n	801d014 <__gethex+0x2f0>
 801d06a:	2601      	movs	r6, #1
 801d06c:	e7e8      	b.n	801d040 <__gethex+0x31c>
 801d06e:	2301      	movs	r3, #1
 801d070:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d072:	1a9b      	subs	r3, r3, r2
 801d074:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d0f2      	beq.n	801d062 <__gethex+0x33e>
 801d07c:	692b      	ldr	r3, [r5, #16]
 801d07e:	2000      	movs	r0, #0
 801d080:	9302      	str	r3, [sp, #8]
 801d082:	009b      	lsls	r3, r3, #2
 801d084:	9304      	str	r3, [sp, #16]
 801d086:	002b      	movs	r3, r5
 801d088:	9a04      	ldr	r2, [sp, #16]
 801d08a:	3314      	adds	r3, #20
 801d08c:	1899      	adds	r1, r3, r2
 801d08e:	681a      	ldr	r2, [r3, #0]
 801d090:	1c54      	adds	r4, r2, #1
 801d092:	d01c      	beq.n	801d0ce <__gethex+0x3aa>
 801d094:	3201      	adds	r2, #1
 801d096:	601a      	str	r2, [r3, #0]
 801d098:	002b      	movs	r3, r5
 801d09a:	3314      	adds	r3, #20
 801d09c:	2e02      	cmp	r6, #2
 801d09e:	d13f      	bne.n	801d120 <__gethex+0x3fc>
 801d0a0:	9a01      	ldr	r2, [sp, #4]
 801d0a2:	9900      	ldr	r1, [sp, #0]
 801d0a4:	6812      	ldr	r2, [r2, #0]
 801d0a6:	3a01      	subs	r2, #1
 801d0a8:	428a      	cmp	r2, r1
 801d0aa:	d109      	bne.n	801d0c0 <__gethex+0x39c>
 801d0ac:	000a      	movs	r2, r1
 801d0ae:	201f      	movs	r0, #31
 801d0b0:	4010      	ands	r0, r2
 801d0b2:	2201      	movs	r2, #1
 801d0b4:	4082      	lsls	r2, r0
 801d0b6:	1149      	asrs	r1, r1, #5
 801d0b8:	0089      	lsls	r1, r1, #2
 801d0ba:	58cb      	ldr	r3, [r1, r3]
 801d0bc:	4213      	tst	r3, r2
 801d0be:	d13d      	bne.n	801d13c <__gethex+0x418>
 801d0c0:	2320      	movs	r3, #32
 801d0c2:	431e      	orrs	r6, r3
 801d0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0c6:	601d      	str	r5, [r3, #0]
 801d0c8:	9b07      	ldr	r3, [sp, #28]
 801d0ca:	601f      	str	r7, [r3, #0]
 801d0cc:	e6b4      	b.n	801ce38 <__gethex+0x114>
 801d0ce:	c301      	stmia	r3!, {r0}
 801d0d0:	4299      	cmp	r1, r3
 801d0d2:	d8dc      	bhi.n	801d08e <__gethex+0x36a>
 801d0d4:	68ab      	ldr	r3, [r5, #8]
 801d0d6:	9a02      	ldr	r2, [sp, #8]
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	db18      	blt.n	801d10e <__gethex+0x3ea>
 801d0dc:	6869      	ldr	r1, [r5, #4]
 801d0de:	9803      	ldr	r0, [sp, #12]
 801d0e0:	3101      	adds	r1, #1
 801d0e2:	f000 f9df 	bl	801d4a4 <_Balloc>
 801d0e6:	1e04      	subs	r4, r0, #0
 801d0e8:	d104      	bne.n	801d0f4 <__gethex+0x3d0>
 801d0ea:	0022      	movs	r2, r4
 801d0ec:	2184      	movs	r1, #132	@ 0x84
 801d0ee:	4b1d      	ldr	r3, [pc, #116]	@ (801d164 <__gethex+0x440>)
 801d0f0:	481d      	ldr	r0, [pc, #116]	@ (801d168 <__gethex+0x444>)
 801d0f2:	e6c4      	b.n	801ce7e <__gethex+0x15a>
 801d0f4:	0029      	movs	r1, r5
 801d0f6:	692a      	ldr	r2, [r5, #16]
 801d0f8:	310c      	adds	r1, #12
 801d0fa:	3202      	adds	r2, #2
 801d0fc:	0092      	lsls	r2, r2, #2
 801d0fe:	300c      	adds	r0, #12
 801d100:	f7fe fecc 	bl	801be9c <memcpy>
 801d104:	0029      	movs	r1, r5
 801d106:	9803      	ldr	r0, [sp, #12]
 801d108:	f000 fa10 	bl	801d52c <_Bfree>
 801d10c:	0025      	movs	r5, r4
 801d10e:	692b      	ldr	r3, [r5, #16]
 801d110:	1c5a      	adds	r2, r3, #1
 801d112:	612a      	str	r2, [r5, #16]
 801d114:	2201      	movs	r2, #1
 801d116:	3304      	adds	r3, #4
 801d118:	009b      	lsls	r3, r3, #2
 801d11a:	18eb      	adds	r3, r5, r3
 801d11c:	605a      	str	r2, [r3, #4]
 801d11e:	e7bb      	b.n	801d098 <__gethex+0x374>
 801d120:	692a      	ldr	r2, [r5, #16]
 801d122:	9902      	ldr	r1, [sp, #8]
 801d124:	428a      	cmp	r2, r1
 801d126:	dd0b      	ble.n	801d140 <__gethex+0x41c>
 801d128:	2101      	movs	r1, #1
 801d12a:	0028      	movs	r0, r5
 801d12c:	f7ff fd92 	bl	801cc54 <rshift>
 801d130:	9b01      	ldr	r3, [sp, #4]
 801d132:	3701      	adds	r7, #1
 801d134:	689b      	ldr	r3, [r3, #8]
 801d136:	42bb      	cmp	r3, r7
 801d138:	da00      	bge.n	801d13c <__gethex+0x418>
 801d13a:	e6df      	b.n	801cefc <__gethex+0x1d8>
 801d13c:	2601      	movs	r6, #1
 801d13e:	e7bf      	b.n	801d0c0 <__gethex+0x39c>
 801d140:	221f      	movs	r2, #31
 801d142:	9c00      	ldr	r4, [sp, #0]
 801d144:	9900      	ldr	r1, [sp, #0]
 801d146:	4014      	ands	r4, r2
 801d148:	4211      	tst	r1, r2
 801d14a:	d0f7      	beq.n	801d13c <__gethex+0x418>
 801d14c:	9a04      	ldr	r2, [sp, #16]
 801d14e:	189b      	adds	r3, r3, r2
 801d150:	3b04      	subs	r3, #4
 801d152:	6818      	ldr	r0, [r3, #0]
 801d154:	f000 fa9e 	bl	801d694 <__hi0bits>
 801d158:	2320      	movs	r3, #32
 801d15a:	1b1b      	subs	r3, r3, r4
 801d15c:	4298      	cmp	r0, r3
 801d15e:	dbe3      	blt.n	801d128 <__gethex+0x404>
 801d160:	e7ec      	b.n	801d13c <__gethex+0x418>
 801d162:	46c0      	nop			@ (mov r8, r8)
 801d164:	08020841 	.word	0x08020841
 801d168:	08020852 	.word	0x08020852

0801d16c <L_shift>:
 801d16c:	2308      	movs	r3, #8
 801d16e:	b570      	push	{r4, r5, r6, lr}
 801d170:	2520      	movs	r5, #32
 801d172:	1a9a      	subs	r2, r3, r2
 801d174:	0092      	lsls	r2, r2, #2
 801d176:	1aad      	subs	r5, r5, r2
 801d178:	6843      	ldr	r3, [r0, #4]
 801d17a:	6804      	ldr	r4, [r0, #0]
 801d17c:	001e      	movs	r6, r3
 801d17e:	40ae      	lsls	r6, r5
 801d180:	40d3      	lsrs	r3, r2
 801d182:	4334      	orrs	r4, r6
 801d184:	6004      	str	r4, [r0, #0]
 801d186:	6043      	str	r3, [r0, #4]
 801d188:	3004      	adds	r0, #4
 801d18a:	4288      	cmp	r0, r1
 801d18c:	d3f4      	bcc.n	801d178 <L_shift+0xc>
 801d18e:	bd70      	pop	{r4, r5, r6, pc}

0801d190 <__match>:
 801d190:	b530      	push	{r4, r5, lr}
 801d192:	6803      	ldr	r3, [r0, #0]
 801d194:	780c      	ldrb	r4, [r1, #0]
 801d196:	3301      	adds	r3, #1
 801d198:	2c00      	cmp	r4, #0
 801d19a:	d102      	bne.n	801d1a2 <__match+0x12>
 801d19c:	6003      	str	r3, [r0, #0]
 801d19e:	2001      	movs	r0, #1
 801d1a0:	bd30      	pop	{r4, r5, pc}
 801d1a2:	781a      	ldrb	r2, [r3, #0]
 801d1a4:	0015      	movs	r5, r2
 801d1a6:	3d41      	subs	r5, #65	@ 0x41
 801d1a8:	2d19      	cmp	r5, #25
 801d1aa:	d800      	bhi.n	801d1ae <__match+0x1e>
 801d1ac:	3220      	adds	r2, #32
 801d1ae:	3101      	adds	r1, #1
 801d1b0:	42a2      	cmp	r2, r4
 801d1b2:	d0ef      	beq.n	801d194 <__match+0x4>
 801d1b4:	2000      	movs	r0, #0
 801d1b6:	e7f3      	b.n	801d1a0 <__match+0x10>

0801d1b8 <__hexnan>:
 801d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1ba:	680b      	ldr	r3, [r1, #0]
 801d1bc:	b08b      	sub	sp, #44	@ 0x2c
 801d1be:	9201      	str	r2, [sp, #4]
 801d1c0:	9901      	ldr	r1, [sp, #4]
 801d1c2:	115a      	asrs	r2, r3, #5
 801d1c4:	0092      	lsls	r2, r2, #2
 801d1c6:	188a      	adds	r2, r1, r2
 801d1c8:	9202      	str	r2, [sp, #8]
 801d1ca:	0019      	movs	r1, r3
 801d1cc:	221f      	movs	r2, #31
 801d1ce:	4011      	ands	r1, r2
 801d1d0:	9008      	str	r0, [sp, #32]
 801d1d2:	9106      	str	r1, [sp, #24]
 801d1d4:	4213      	tst	r3, r2
 801d1d6:	d002      	beq.n	801d1de <__hexnan+0x26>
 801d1d8:	9b02      	ldr	r3, [sp, #8]
 801d1da:	3304      	adds	r3, #4
 801d1dc:	9302      	str	r3, [sp, #8]
 801d1de:	9b02      	ldr	r3, [sp, #8]
 801d1e0:	2500      	movs	r5, #0
 801d1e2:	1f1f      	subs	r7, r3, #4
 801d1e4:	003e      	movs	r6, r7
 801d1e6:	003c      	movs	r4, r7
 801d1e8:	9b08      	ldr	r3, [sp, #32]
 801d1ea:	603d      	str	r5, [r7, #0]
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	9507      	str	r5, [sp, #28]
 801d1f0:	9305      	str	r3, [sp, #20]
 801d1f2:	9503      	str	r5, [sp, #12]
 801d1f4:	9b05      	ldr	r3, [sp, #20]
 801d1f6:	3301      	adds	r3, #1
 801d1f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1fa:	9b05      	ldr	r3, [sp, #20]
 801d1fc:	785b      	ldrb	r3, [r3, #1]
 801d1fe:	9304      	str	r3, [sp, #16]
 801d200:	2b00      	cmp	r3, #0
 801d202:	d028      	beq.n	801d256 <__hexnan+0x9e>
 801d204:	9804      	ldr	r0, [sp, #16]
 801d206:	f7ff fd78 	bl	801ccfa <__hexdig_fun>
 801d20a:	2800      	cmp	r0, #0
 801d20c:	d155      	bne.n	801d2ba <__hexnan+0x102>
 801d20e:	9b04      	ldr	r3, [sp, #16]
 801d210:	2b20      	cmp	r3, #32
 801d212:	d819      	bhi.n	801d248 <__hexnan+0x90>
 801d214:	9b03      	ldr	r3, [sp, #12]
 801d216:	9a07      	ldr	r2, [sp, #28]
 801d218:	4293      	cmp	r3, r2
 801d21a:	dd12      	ble.n	801d242 <__hexnan+0x8a>
 801d21c:	42b4      	cmp	r4, r6
 801d21e:	d206      	bcs.n	801d22e <__hexnan+0x76>
 801d220:	2d07      	cmp	r5, #7
 801d222:	dc04      	bgt.n	801d22e <__hexnan+0x76>
 801d224:	002a      	movs	r2, r5
 801d226:	0031      	movs	r1, r6
 801d228:	0020      	movs	r0, r4
 801d22a:	f7ff ff9f 	bl	801d16c <L_shift>
 801d22e:	9b01      	ldr	r3, [sp, #4]
 801d230:	2508      	movs	r5, #8
 801d232:	429c      	cmp	r4, r3
 801d234:	d905      	bls.n	801d242 <__hexnan+0x8a>
 801d236:	1f26      	subs	r6, r4, #4
 801d238:	2500      	movs	r5, #0
 801d23a:	0034      	movs	r4, r6
 801d23c:	9b03      	ldr	r3, [sp, #12]
 801d23e:	6035      	str	r5, [r6, #0]
 801d240:	9307      	str	r3, [sp, #28]
 801d242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d244:	9305      	str	r3, [sp, #20]
 801d246:	e7d5      	b.n	801d1f4 <__hexnan+0x3c>
 801d248:	9b04      	ldr	r3, [sp, #16]
 801d24a:	2b29      	cmp	r3, #41	@ 0x29
 801d24c:	d15a      	bne.n	801d304 <__hexnan+0x14c>
 801d24e:	9b05      	ldr	r3, [sp, #20]
 801d250:	9a08      	ldr	r2, [sp, #32]
 801d252:	3302      	adds	r3, #2
 801d254:	6013      	str	r3, [r2, #0]
 801d256:	9b03      	ldr	r3, [sp, #12]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d053      	beq.n	801d304 <__hexnan+0x14c>
 801d25c:	42b4      	cmp	r4, r6
 801d25e:	d206      	bcs.n	801d26e <__hexnan+0xb6>
 801d260:	2d07      	cmp	r5, #7
 801d262:	dc04      	bgt.n	801d26e <__hexnan+0xb6>
 801d264:	002a      	movs	r2, r5
 801d266:	0031      	movs	r1, r6
 801d268:	0020      	movs	r0, r4
 801d26a:	f7ff ff7f 	bl	801d16c <L_shift>
 801d26e:	9b01      	ldr	r3, [sp, #4]
 801d270:	429c      	cmp	r4, r3
 801d272:	d936      	bls.n	801d2e2 <__hexnan+0x12a>
 801d274:	001a      	movs	r2, r3
 801d276:	0023      	movs	r3, r4
 801d278:	cb02      	ldmia	r3!, {r1}
 801d27a:	c202      	stmia	r2!, {r1}
 801d27c:	429f      	cmp	r7, r3
 801d27e:	d2fb      	bcs.n	801d278 <__hexnan+0xc0>
 801d280:	9b02      	ldr	r3, [sp, #8]
 801d282:	1c61      	adds	r1, r4, #1
 801d284:	1eda      	subs	r2, r3, #3
 801d286:	2304      	movs	r3, #4
 801d288:	4291      	cmp	r1, r2
 801d28a:	d805      	bhi.n	801d298 <__hexnan+0xe0>
 801d28c:	9b02      	ldr	r3, [sp, #8]
 801d28e:	3b04      	subs	r3, #4
 801d290:	1b1b      	subs	r3, r3, r4
 801d292:	089b      	lsrs	r3, r3, #2
 801d294:	3301      	adds	r3, #1
 801d296:	009b      	lsls	r3, r3, #2
 801d298:	9a01      	ldr	r2, [sp, #4]
 801d29a:	18d3      	adds	r3, r2, r3
 801d29c:	2200      	movs	r2, #0
 801d29e:	c304      	stmia	r3!, {r2}
 801d2a0:	429f      	cmp	r7, r3
 801d2a2:	d2fc      	bcs.n	801d29e <__hexnan+0xe6>
 801d2a4:	683b      	ldr	r3, [r7, #0]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d104      	bne.n	801d2b4 <__hexnan+0xfc>
 801d2aa:	9b01      	ldr	r3, [sp, #4]
 801d2ac:	429f      	cmp	r7, r3
 801d2ae:	d127      	bne.n	801d300 <__hexnan+0x148>
 801d2b0:	2301      	movs	r3, #1
 801d2b2:	603b      	str	r3, [r7, #0]
 801d2b4:	2005      	movs	r0, #5
 801d2b6:	b00b      	add	sp, #44	@ 0x2c
 801d2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2ba:	9b03      	ldr	r3, [sp, #12]
 801d2bc:	3501      	adds	r5, #1
 801d2be:	3301      	adds	r3, #1
 801d2c0:	9303      	str	r3, [sp, #12]
 801d2c2:	2d08      	cmp	r5, #8
 801d2c4:	dd06      	ble.n	801d2d4 <__hexnan+0x11c>
 801d2c6:	9b01      	ldr	r3, [sp, #4]
 801d2c8:	429c      	cmp	r4, r3
 801d2ca:	d9ba      	bls.n	801d242 <__hexnan+0x8a>
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	2501      	movs	r5, #1
 801d2d0:	3c04      	subs	r4, #4
 801d2d2:	6023      	str	r3, [r4, #0]
 801d2d4:	220f      	movs	r2, #15
 801d2d6:	6823      	ldr	r3, [r4, #0]
 801d2d8:	4010      	ands	r0, r2
 801d2da:	011b      	lsls	r3, r3, #4
 801d2dc:	4303      	orrs	r3, r0
 801d2de:	6023      	str	r3, [r4, #0]
 801d2e0:	e7af      	b.n	801d242 <__hexnan+0x8a>
 801d2e2:	9b06      	ldr	r3, [sp, #24]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d0dd      	beq.n	801d2a4 <__hexnan+0xec>
 801d2e8:	2320      	movs	r3, #32
 801d2ea:	9a06      	ldr	r2, [sp, #24]
 801d2ec:	9902      	ldr	r1, [sp, #8]
 801d2ee:	1a9b      	subs	r3, r3, r2
 801d2f0:	2201      	movs	r2, #1
 801d2f2:	4252      	negs	r2, r2
 801d2f4:	40da      	lsrs	r2, r3
 801d2f6:	3904      	subs	r1, #4
 801d2f8:	680b      	ldr	r3, [r1, #0]
 801d2fa:	4013      	ands	r3, r2
 801d2fc:	600b      	str	r3, [r1, #0]
 801d2fe:	e7d1      	b.n	801d2a4 <__hexnan+0xec>
 801d300:	3f04      	subs	r7, #4
 801d302:	e7cf      	b.n	801d2a4 <__hexnan+0xec>
 801d304:	2004      	movs	r0, #4
 801d306:	e7d6      	b.n	801d2b6 <__hexnan+0xfe>

0801d308 <malloc>:
 801d308:	b510      	push	{r4, lr}
 801d30a:	4b03      	ldr	r3, [pc, #12]	@ (801d318 <malloc+0x10>)
 801d30c:	0001      	movs	r1, r0
 801d30e:	6818      	ldr	r0, [r3, #0]
 801d310:	f000 f826 	bl	801d360 <_malloc_r>
 801d314:	bd10      	pop	{r4, pc}
 801d316:	46c0      	nop			@ (mov r8, r8)
 801d318:	200003cc 	.word	0x200003cc

0801d31c <sbrk_aligned>:
 801d31c:	b570      	push	{r4, r5, r6, lr}
 801d31e:	4e0f      	ldr	r6, [pc, #60]	@ (801d35c <sbrk_aligned+0x40>)
 801d320:	000d      	movs	r5, r1
 801d322:	6831      	ldr	r1, [r6, #0]
 801d324:	0004      	movs	r4, r0
 801d326:	2900      	cmp	r1, #0
 801d328:	d102      	bne.n	801d330 <sbrk_aligned+0x14>
 801d32a:	f001 f99b 	bl	801e664 <_sbrk_r>
 801d32e:	6030      	str	r0, [r6, #0]
 801d330:	0029      	movs	r1, r5
 801d332:	0020      	movs	r0, r4
 801d334:	f001 f996 	bl	801e664 <_sbrk_r>
 801d338:	1c43      	adds	r3, r0, #1
 801d33a:	d103      	bne.n	801d344 <sbrk_aligned+0x28>
 801d33c:	2501      	movs	r5, #1
 801d33e:	426d      	negs	r5, r5
 801d340:	0028      	movs	r0, r5
 801d342:	bd70      	pop	{r4, r5, r6, pc}
 801d344:	2303      	movs	r3, #3
 801d346:	1cc5      	adds	r5, r0, #3
 801d348:	439d      	bics	r5, r3
 801d34a:	42a8      	cmp	r0, r5
 801d34c:	d0f8      	beq.n	801d340 <sbrk_aligned+0x24>
 801d34e:	1a29      	subs	r1, r5, r0
 801d350:	0020      	movs	r0, r4
 801d352:	f001 f987 	bl	801e664 <_sbrk_r>
 801d356:	3001      	adds	r0, #1
 801d358:	d1f2      	bne.n	801d340 <sbrk_aligned+0x24>
 801d35a:	e7ef      	b.n	801d33c <sbrk_aligned+0x20>
 801d35c:	200038a0 	.word	0x200038a0

0801d360 <_malloc_r>:
 801d360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d362:	2203      	movs	r2, #3
 801d364:	1ccb      	adds	r3, r1, #3
 801d366:	4393      	bics	r3, r2
 801d368:	3308      	adds	r3, #8
 801d36a:	0005      	movs	r5, r0
 801d36c:	001f      	movs	r7, r3
 801d36e:	2b0c      	cmp	r3, #12
 801d370:	d234      	bcs.n	801d3dc <_malloc_r+0x7c>
 801d372:	270c      	movs	r7, #12
 801d374:	42b9      	cmp	r1, r7
 801d376:	d833      	bhi.n	801d3e0 <_malloc_r+0x80>
 801d378:	0028      	movs	r0, r5
 801d37a:	f000 f883 	bl	801d484 <__malloc_lock>
 801d37e:	4e37      	ldr	r6, [pc, #220]	@ (801d45c <_malloc_r+0xfc>)
 801d380:	6833      	ldr	r3, [r6, #0]
 801d382:	001c      	movs	r4, r3
 801d384:	2c00      	cmp	r4, #0
 801d386:	d12f      	bne.n	801d3e8 <_malloc_r+0x88>
 801d388:	0039      	movs	r1, r7
 801d38a:	0028      	movs	r0, r5
 801d38c:	f7ff ffc6 	bl	801d31c <sbrk_aligned>
 801d390:	0004      	movs	r4, r0
 801d392:	1c43      	adds	r3, r0, #1
 801d394:	d15f      	bne.n	801d456 <_malloc_r+0xf6>
 801d396:	6834      	ldr	r4, [r6, #0]
 801d398:	9400      	str	r4, [sp, #0]
 801d39a:	9b00      	ldr	r3, [sp, #0]
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d14a      	bne.n	801d436 <_malloc_r+0xd6>
 801d3a0:	2c00      	cmp	r4, #0
 801d3a2:	d052      	beq.n	801d44a <_malloc_r+0xea>
 801d3a4:	6823      	ldr	r3, [r4, #0]
 801d3a6:	0028      	movs	r0, r5
 801d3a8:	18e3      	adds	r3, r4, r3
 801d3aa:	9900      	ldr	r1, [sp, #0]
 801d3ac:	9301      	str	r3, [sp, #4]
 801d3ae:	f001 f959 	bl	801e664 <_sbrk_r>
 801d3b2:	9b01      	ldr	r3, [sp, #4]
 801d3b4:	4283      	cmp	r3, r0
 801d3b6:	d148      	bne.n	801d44a <_malloc_r+0xea>
 801d3b8:	6823      	ldr	r3, [r4, #0]
 801d3ba:	0028      	movs	r0, r5
 801d3bc:	1aff      	subs	r7, r7, r3
 801d3be:	0039      	movs	r1, r7
 801d3c0:	f7ff ffac 	bl	801d31c <sbrk_aligned>
 801d3c4:	3001      	adds	r0, #1
 801d3c6:	d040      	beq.n	801d44a <_malloc_r+0xea>
 801d3c8:	6823      	ldr	r3, [r4, #0]
 801d3ca:	19db      	adds	r3, r3, r7
 801d3cc:	6023      	str	r3, [r4, #0]
 801d3ce:	6833      	ldr	r3, [r6, #0]
 801d3d0:	685a      	ldr	r2, [r3, #4]
 801d3d2:	2a00      	cmp	r2, #0
 801d3d4:	d133      	bne.n	801d43e <_malloc_r+0xde>
 801d3d6:	9b00      	ldr	r3, [sp, #0]
 801d3d8:	6033      	str	r3, [r6, #0]
 801d3da:	e019      	b.n	801d410 <_malloc_r+0xb0>
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	dac9      	bge.n	801d374 <_malloc_r+0x14>
 801d3e0:	230c      	movs	r3, #12
 801d3e2:	602b      	str	r3, [r5, #0]
 801d3e4:	2000      	movs	r0, #0
 801d3e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d3e8:	6821      	ldr	r1, [r4, #0]
 801d3ea:	1bc9      	subs	r1, r1, r7
 801d3ec:	d420      	bmi.n	801d430 <_malloc_r+0xd0>
 801d3ee:	290b      	cmp	r1, #11
 801d3f0:	d90a      	bls.n	801d408 <_malloc_r+0xa8>
 801d3f2:	19e2      	adds	r2, r4, r7
 801d3f4:	6027      	str	r7, [r4, #0]
 801d3f6:	42a3      	cmp	r3, r4
 801d3f8:	d104      	bne.n	801d404 <_malloc_r+0xa4>
 801d3fa:	6032      	str	r2, [r6, #0]
 801d3fc:	6863      	ldr	r3, [r4, #4]
 801d3fe:	6011      	str	r1, [r2, #0]
 801d400:	6053      	str	r3, [r2, #4]
 801d402:	e005      	b.n	801d410 <_malloc_r+0xb0>
 801d404:	605a      	str	r2, [r3, #4]
 801d406:	e7f9      	b.n	801d3fc <_malloc_r+0x9c>
 801d408:	6862      	ldr	r2, [r4, #4]
 801d40a:	42a3      	cmp	r3, r4
 801d40c:	d10e      	bne.n	801d42c <_malloc_r+0xcc>
 801d40e:	6032      	str	r2, [r6, #0]
 801d410:	0028      	movs	r0, r5
 801d412:	f000 f83f 	bl	801d494 <__malloc_unlock>
 801d416:	0020      	movs	r0, r4
 801d418:	2207      	movs	r2, #7
 801d41a:	300b      	adds	r0, #11
 801d41c:	1d23      	adds	r3, r4, #4
 801d41e:	4390      	bics	r0, r2
 801d420:	1ac2      	subs	r2, r0, r3
 801d422:	4298      	cmp	r0, r3
 801d424:	d0df      	beq.n	801d3e6 <_malloc_r+0x86>
 801d426:	1a1b      	subs	r3, r3, r0
 801d428:	50a3      	str	r3, [r4, r2]
 801d42a:	e7dc      	b.n	801d3e6 <_malloc_r+0x86>
 801d42c:	605a      	str	r2, [r3, #4]
 801d42e:	e7ef      	b.n	801d410 <_malloc_r+0xb0>
 801d430:	0023      	movs	r3, r4
 801d432:	6864      	ldr	r4, [r4, #4]
 801d434:	e7a6      	b.n	801d384 <_malloc_r+0x24>
 801d436:	9c00      	ldr	r4, [sp, #0]
 801d438:	6863      	ldr	r3, [r4, #4]
 801d43a:	9300      	str	r3, [sp, #0]
 801d43c:	e7ad      	b.n	801d39a <_malloc_r+0x3a>
 801d43e:	001a      	movs	r2, r3
 801d440:	685b      	ldr	r3, [r3, #4]
 801d442:	42a3      	cmp	r3, r4
 801d444:	d1fb      	bne.n	801d43e <_malloc_r+0xde>
 801d446:	2300      	movs	r3, #0
 801d448:	e7da      	b.n	801d400 <_malloc_r+0xa0>
 801d44a:	230c      	movs	r3, #12
 801d44c:	0028      	movs	r0, r5
 801d44e:	602b      	str	r3, [r5, #0]
 801d450:	f000 f820 	bl	801d494 <__malloc_unlock>
 801d454:	e7c6      	b.n	801d3e4 <_malloc_r+0x84>
 801d456:	6007      	str	r7, [r0, #0]
 801d458:	e7da      	b.n	801d410 <_malloc_r+0xb0>
 801d45a:	46c0      	nop			@ (mov r8, r8)
 801d45c:	200038a4 	.word	0x200038a4

0801d460 <__ascii_mbtowc>:
 801d460:	b082      	sub	sp, #8
 801d462:	2900      	cmp	r1, #0
 801d464:	d100      	bne.n	801d468 <__ascii_mbtowc+0x8>
 801d466:	a901      	add	r1, sp, #4
 801d468:	1e10      	subs	r0, r2, #0
 801d46a:	d006      	beq.n	801d47a <__ascii_mbtowc+0x1a>
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d006      	beq.n	801d47e <__ascii_mbtowc+0x1e>
 801d470:	7813      	ldrb	r3, [r2, #0]
 801d472:	600b      	str	r3, [r1, #0]
 801d474:	7810      	ldrb	r0, [r2, #0]
 801d476:	1e43      	subs	r3, r0, #1
 801d478:	4198      	sbcs	r0, r3
 801d47a:	b002      	add	sp, #8
 801d47c:	4770      	bx	lr
 801d47e:	2002      	movs	r0, #2
 801d480:	4240      	negs	r0, r0
 801d482:	e7fa      	b.n	801d47a <__ascii_mbtowc+0x1a>

0801d484 <__malloc_lock>:
 801d484:	b510      	push	{r4, lr}
 801d486:	4802      	ldr	r0, [pc, #8]	@ (801d490 <__malloc_lock+0xc>)
 801d488:	f7fe fcfb 	bl	801be82 <__retarget_lock_acquire_recursive>
 801d48c:	bd10      	pop	{r4, pc}
 801d48e:	46c0      	nop			@ (mov r8, r8)
 801d490:	2000389c 	.word	0x2000389c

0801d494 <__malloc_unlock>:
 801d494:	b510      	push	{r4, lr}
 801d496:	4802      	ldr	r0, [pc, #8]	@ (801d4a0 <__malloc_unlock+0xc>)
 801d498:	f7fe fcf4 	bl	801be84 <__retarget_lock_release_recursive>
 801d49c:	bd10      	pop	{r4, pc}
 801d49e:	46c0      	nop			@ (mov r8, r8)
 801d4a0:	2000389c 	.word	0x2000389c

0801d4a4 <_Balloc>:
 801d4a4:	b570      	push	{r4, r5, r6, lr}
 801d4a6:	69c5      	ldr	r5, [r0, #28]
 801d4a8:	0006      	movs	r6, r0
 801d4aa:	000c      	movs	r4, r1
 801d4ac:	2d00      	cmp	r5, #0
 801d4ae:	d10e      	bne.n	801d4ce <_Balloc+0x2a>
 801d4b0:	2010      	movs	r0, #16
 801d4b2:	f7ff ff29 	bl	801d308 <malloc>
 801d4b6:	1e02      	subs	r2, r0, #0
 801d4b8:	61f0      	str	r0, [r6, #28]
 801d4ba:	d104      	bne.n	801d4c6 <_Balloc+0x22>
 801d4bc:	216b      	movs	r1, #107	@ 0x6b
 801d4be:	4b19      	ldr	r3, [pc, #100]	@ (801d524 <_Balloc+0x80>)
 801d4c0:	4819      	ldr	r0, [pc, #100]	@ (801d528 <_Balloc+0x84>)
 801d4c2:	f001 f8e1 	bl	801e688 <__assert_func>
 801d4c6:	6045      	str	r5, [r0, #4]
 801d4c8:	6085      	str	r5, [r0, #8]
 801d4ca:	6005      	str	r5, [r0, #0]
 801d4cc:	60c5      	str	r5, [r0, #12]
 801d4ce:	69f5      	ldr	r5, [r6, #28]
 801d4d0:	68eb      	ldr	r3, [r5, #12]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d013      	beq.n	801d4fe <_Balloc+0x5a>
 801d4d6:	69f3      	ldr	r3, [r6, #28]
 801d4d8:	00a2      	lsls	r2, r4, #2
 801d4da:	68db      	ldr	r3, [r3, #12]
 801d4dc:	189b      	adds	r3, r3, r2
 801d4de:	6818      	ldr	r0, [r3, #0]
 801d4e0:	2800      	cmp	r0, #0
 801d4e2:	d118      	bne.n	801d516 <_Balloc+0x72>
 801d4e4:	2101      	movs	r1, #1
 801d4e6:	000d      	movs	r5, r1
 801d4e8:	40a5      	lsls	r5, r4
 801d4ea:	1d6a      	adds	r2, r5, #5
 801d4ec:	0030      	movs	r0, r6
 801d4ee:	0092      	lsls	r2, r2, #2
 801d4f0:	f001 f8e8 	bl	801e6c4 <_calloc_r>
 801d4f4:	2800      	cmp	r0, #0
 801d4f6:	d00c      	beq.n	801d512 <_Balloc+0x6e>
 801d4f8:	6044      	str	r4, [r0, #4]
 801d4fa:	6085      	str	r5, [r0, #8]
 801d4fc:	e00d      	b.n	801d51a <_Balloc+0x76>
 801d4fe:	2221      	movs	r2, #33	@ 0x21
 801d500:	2104      	movs	r1, #4
 801d502:	0030      	movs	r0, r6
 801d504:	f001 f8de 	bl	801e6c4 <_calloc_r>
 801d508:	69f3      	ldr	r3, [r6, #28]
 801d50a:	60e8      	str	r0, [r5, #12]
 801d50c:	68db      	ldr	r3, [r3, #12]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d1e1      	bne.n	801d4d6 <_Balloc+0x32>
 801d512:	2000      	movs	r0, #0
 801d514:	bd70      	pop	{r4, r5, r6, pc}
 801d516:	6802      	ldr	r2, [r0, #0]
 801d518:	601a      	str	r2, [r3, #0]
 801d51a:	2300      	movs	r3, #0
 801d51c:	6103      	str	r3, [r0, #16]
 801d51e:	60c3      	str	r3, [r0, #12]
 801d520:	e7f8      	b.n	801d514 <_Balloc+0x70>
 801d522:	46c0      	nop			@ (mov r8, r8)
 801d524:	080207d2 	.word	0x080207d2
 801d528:	080208b2 	.word	0x080208b2

0801d52c <_Bfree>:
 801d52c:	b570      	push	{r4, r5, r6, lr}
 801d52e:	69c6      	ldr	r6, [r0, #28]
 801d530:	0005      	movs	r5, r0
 801d532:	000c      	movs	r4, r1
 801d534:	2e00      	cmp	r6, #0
 801d536:	d10e      	bne.n	801d556 <_Bfree+0x2a>
 801d538:	2010      	movs	r0, #16
 801d53a:	f7ff fee5 	bl	801d308 <malloc>
 801d53e:	1e02      	subs	r2, r0, #0
 801d540:	61e8      	str	r0, [r5, #28]
 801d542:	d104      	bne.n	801d54e <_Bfree+0x22>
 801d544:	218f      	movs	r1, #143	@ 0x8f
 801d546:	4b09      	ldr	r3, [pc, #36]	@ (801d56c <_Bfree+0x40>)
 801d548:	4809      	ldr	r0, [pc, #36]	@ (801d570 <_Bfree+0x44>)
 801d54a:	f001 f89d 	bl	801e688 <__assert_func>
 801d54e:	6046      	str	r6, [r0, #4]
 801d550:	6086      	str	r6, [r0, #8]
 801d552:	6006      	str	r6, [r0, #0]
 801d554:	60c6      	str	r6, [r0, #12]
 801d556:	2c00      	cmp	r4, #0
 801d558:	d007      	beq.n	801d56a <_Bfree+0x3e>
 801d55a:	69eb      	ldr	r3, [r5, #28]
 801d55c:	6862      	ldr	r2, [r4, #4]
 801d55e:	68db      	ldr	r3, [r3, #12]
 801d560:	0092      	lsls	r2, r2, #2
 801d562:	189b      	adds	r3, r3, r2
 801d564:	681a      	ldr	r2, [r3, #0]
 801d566:	6022      	str	r2, [r4, #0]
 801d568:	601c      	str	r4, [r3, #0]
 801d56a:	bd70      	pop	{r4, r5, r6, pc}
 801d56c:	080207d2 	.word	0x080207d2
 801d570:	080208b2 	.word	0x080208b2

0801d574 <__multadd>:
 801d574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d576:	000f      	movs	r7, r1
 801d578:	9001      	str	r0, [sp, #4]
 801d57a:	000c      	movs	r4, r1
 801d57c:	001e      	movs	r6, r3
 801d57e:	2000      	movs	r0, #0
 801d580:	690d      	ldr	r5, [r1, #16]
 801d582:	3714      	adds	r7, #20
 801d584:	683b      	ldr	r3, [r7, #0]
 801d586:	3001      	adds	r0, #1
 801d588:	b299      	uxth	r1, r3
 801d58a:	4351      	muls	r1, r2
 801d58c:	0c1b      	lsrs	r3, r3, #16
 801d58e:	4353      	muls	r3, r2
 801d590:	1989      	adds	r1, r1, r6
 801d592:	0c0e      	lsrs	r6, r1, #16
 801d594:	199b      	adds	r3, r3, r6
 801d596:	0c1e      	lsrs	r6, r3, #16
 801d598:	b289      	uxth	r1, r1
 801d59a:	041b      	lsls	r3, r3, #16
 801d59c:	185b      	adds	r3, r3, r1
 801d59e:	c708      	stmia	r7!, {r3}
 801d5a0:	4285      	cmp	r5, r0
 801d5a2:	dcef      	bgt.n	801d584 <__multadd+0x10>
 801d5a4:	2e00      	cmp	r6, #0
 801d5a6:	d022      	beq.n	801d5ee <__multadd+0x7a>
 801d5a8:	68a3      	ldr	r3, [r4, #8]
 801d5aa:	42ab      	cmp	r3, r5
 801d5ac:	dc19      	bgt.n	801d5e2 <__multadd+0x6e>
 801d5ae:	6861      	ldr	r1, [r4, #4]
 801d5b0:	9801      	ldr	r0, [sp, #4]
 801d5b2:	3101      	adds	r1, #1
 801d5b4:	f7ff ff76 	bl	801d4a4 <_Balloc>
 801d5b8:	1e07      	subs	r7, r0, #0
 801d5ba:	d105      	bne.n	801d5c8 <__multadd+0x54>
 801d5bc:	003a      	movs	r2, r7
 801d5be:	21ba      	movs	r1, #186	@ 0xba
 801d5c0:	4b0c      	ldr	r3, [pc, #48]	@ (801d5f4 <__multadd+0x80>)
 801d5c2:	480d      	ldr	r0, [pc, #52]	@ (801d5f8 <__multadd+0x84>)
 801d5c4:	f001 f860 	bl	801e688 <__assert_func>
 801d5c8:	0021      	movs	r1, r4
 801d5ca:	6922      	ldr	r2, [r4, #16]
 801d5cc:	310c      	adds	r1, #12
 801d5ce:	3202      	adds	r2, #2
 801d5d0:	0092      	lsls	r2, r2, #2
 801d5d2:	300c      	adds	r0, #12
 801d5d4:	f7fe fc62 	bl	801be9c <memcpy>
 801d5d8:	0021      	movs	r1, r4
 801d5da:	9801      	ldr	r0, [sp, #4]
 801d5dc:	f7ff ffa6 	bl	801d52c <_Bfree>
 801d5e0:	003c      	movs	r4, r7
 801d5e2:	1d2b      	adds	r3, r5, #4
 801d5e4:	009b      	lsls	r3, r3, #2
 801d5e6:	18e3      	adds	r3, r4, r3
 801d5e8:	3501      	adds	r5, #1
 801d5ea:	605e      	str	r6, [r3, #4]
 801d5ec:	6125      	str	r5, [r4, #16]
 801d5ee:	0020      	movs	r0, r4
 801d5f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d5f2:	46c0      	nop			@ (mov r8, r8)
 801d5f4:	08020841 	.word	0x08020841
 801d5f8:	080208b2 	.word	0x080208b2

0801d5fc <__s2b>:
 801d5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d5fe:	0007      	movs	r7, r0
 801d600:	0018      	movs	r0, r3
 801d602:	000c      	movs	r4, r1
 801d604:	3008      	adds	r0, #8
 801d606:	2109      	movs	r1, #9
 801d608:	9301      	str	r3, [sp, #4]
 801d60a:	0015      	movs	r5, r2
 801d60c:	f7e2 fe54 	bl	80002b8 <__divsi3>
 801d610:	2301      	movs	r3, #1
 801d612:	2100      	movs	r1, #0
 801d614:	4283      	cmp	r3, r0
 801d616:	db0a      	blt.n	801d62e <__s2b+0x32>
 801d618:	0038      	movs	r0, r7
 801d61a:	f7ff ff43 	bl	801d4a4 <_Balloc>
 801d61e:	1e01      	subs	r1, r0, #0
 801d620:	d108      	bne.n	801d634 <__s2b+0x38>
 801d622:	000a      	movs	r2, r1
 801d624:	4b19      	ldr	r3, [pc, #100]	@ (801d68c <__s2b+0x90>)
 801d626:	481a      	ldr	r0, [pc, #104]	@ (801d690 <__s2b+0x94>)
 801d628:	31d3      	adds	r1, #211	@ 0xd3
 801d62a:	f001 f82d 	bl	801e688 <__assert_func>
 801d62e:	005b      	lsls	r3, r3, #1
 801d630:	3101      	adds	r1, #1
 801d632:	e7ef      	b.n	801d614 <__s2b+0x18>
 801d634:	9b08      	ldr	r3, [sp, #32]
 801d636:	6143      	str	r3, [r0, #20]
 801d638:	2301      	movs	r3, #1
 801d63a:	6103      	str	r3, [r0, #16]
 801d63c:	2d09      	cmp	r5, #9
 801d63e:	dd18      	ble.n	801d672 <__s2b+0x76>
 801d640:	0023      	movs	r3, r4
 801d642:	3309      	adds	r3, #9
 801d644:	001e      	movs	r6, r3
 801d646:	9300      	str	r3, [sp, #0]
 801d648:	1964      	adds	r4, r4, r5
 801d64a:	7833      	ldrb	r3, [r6, #0]
 801d64c:	220a      	movs	r2, #10
 801d64e:	0038      	movs	r0, r7
 801d650:	3b30      	subs	r3, #48	@ 0x30
 801d652:	f7ff ff8f 	bl	801d574 <__multadd>
 801d656:	3601      	adds	r6, #1
 801d658:	0001      	movs	r1, r0
 801d65a:	42a6      	cmp	r6, r4
 801d65c:	d1f5      	bne.n	801d64a <__s2b+0x4e>
 801d65e:	002c      	movs	r4, r5
 801d660:	9b00      	ldr	r3, [sp, #0]
 801d662:	3c08      	subs	r4, #8
 801d664:	191c      	adds	r4, r3, r4
 801d666:	002e      	movs	r6, r5
 801d668:	9b01      	ldr	r3, [sp, #4]
 801d66a:	429e      	cmp	r6, r3
 801d66c:	db04      	blt.n	801d678 <__s2b+0x7c>
 801d66e:	0008      	movs	r0, r1
 801d670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d672:	2509      	movs	r5, #9
 801d674:	340a      	adds	r4, #10
 801d676:	e7f6      	b.n	801d666 <__s2b+0x6a>
 801d678:	1b63      	subs	r3, r4, r5
 801d67a:	5d9b      	ldrb	r3, [r3, r6]
 801d67c:	220a      	movs	r2, #10
 801d67e:	0038      	movs	r0, r7
 801d680:	3b30      	subs	r3, #48	@ 0x30
 801d682:	f7ff ff77 	bl	801d574 <__multadd>
 801d686:	3601      	adds	r6, #1
 801d688:	0001      	movs	r1, r0
 801d68a:	e7ed      	b.n	801d668 <__s2b+0x6c>
 801d68c:	08020841 	.word	0x08020841
 801d690:	080208b2 	.word	0x080208b2

0801d694 <__hi0bits>:
 801d694:	2280      	movs	r2, #128	@ 0x80
 801d696:	0003      	movs	r3, r0
 801d698:	0252      	lsls	r2, r2, #9
 801d69a:	2000      	movs	r0, #0
 801d69c:	4293      	cmp	r3, r2
 801d69e:	d201      	bcs.n	801d6a4 <__hi0bits+0x10>
 801d6a0:	041b      	lsls	r3, r3, #16
 801d6a2:	3010      	adds	r0, #16
 801d6a4:	2280      	movs	r2, #128	@ 0x80
 801d6a6:	0452      	lsls	r2, r2, #17
 801d6a8:	4293      	cmp	r3, r2
 801d6aa:	d201      	bcs.n	801d6b0 <__hi0bits+0x1c>
 801d6ac:	3008      	adds	r0, #8
 801d6ae:	021b      	lsls	r3, r3, #8
 801d6b0:	2280      	movs	r2, #128	@ 0x80
 801d6b2:	0552      	lsls	r2, r2, #21
 801d6b4:	4293      	cmp	r3, r2
 801d6b6:	d201      	bcs.n	801d6bc <__hi0bits+0x28>
 801d6b8:	3004      	adds	r0, #4
 801d6ba:	011b      	lsls	r3, r3, #4
 801d6bc:	2280      	movs	r2, #128	@ 0x80
 801d6be:	05d2      	lsls	r2, r2, #23
 801d6c0:	4293      	cmp	r3, r2
 801d6c2:	d201      	bcs.n	801d6c8 <__hi0bits+0x34>
 801d6c4:	3002      	adds	r0, #2
 801d6c6:	009b      	lsls	r3, r3, #2
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	db03      	blt.n	801d6d4 <__hi0bits+0x40>
 801d6cc:	3001      	adds	r0, #1
 801d6ce:	4213      	tst	r3, r2
 801d6d0:	d100      	bne.n	801d6d4 <__hi0bits+0x40>
 801d6d2:	2020      	movs	r0, #32
 801d6d4:	4770      	bx	lr

0801d6d6 <__lo0bits>:
 801d6d6:	6803      	ldr	r3, [r0, #0]
 801d6d8:	0001      	movs	r1, r0
 801d6da:	2207      	movs	r2, #7
 801d6dc:	0018      	movs	r0, r3
 801d6de:	4010      	ands	r0, r2
 801d6e0:	4213      	tst	r3, r2
 801d6e2:	d00d      	beq.n	801d700 <__lo0bits+0x2a>
 801d6e4:	3a06      	subs	r2, #6
 801d6e6:	2000      	movs	r0, #0
 801d6e8:	4213      	tst	r3, r2
 801d6ea:	d105      	bne.n	801d6f8 <__lo0bits+0x22>
 801d6ec:	3002      	adds	r0, #2
 801d6ee:	4203      	tst	r3, r0
 801d6f0:	d003      	beq.n	801d6fa <__lo0bits+0x24>
 801d6f2:	40d3      	lsrs	r3, r2
 801d6f4:	0010      	movs	r0, r2
 801d6f6:	600b      	str	r3, [r1, #0]
 801d6f8:	4770      	bx	lr
 801d6fa:	089b      	lsrs	r3, r3, #2
 801d6fc:	600b      	str	r3, [r1, #0]
 801d6fe:	e7fb      	b.n	801d6f8 <__lo0bits+0x22>
 801d700:	b29a      	uxth	r2, r3
 801d702:	2a00      	cmp	r2, #0
 801d704:	d101      	bne.n	801d70a <__lo0bits+0x34>
 801d706:	2010      	movs	r0, #16
 801d708:	0c1b      	lsrs	r3, r3, #16
 801d70a:	b2da      	uxtb	r2, r3
 801d70c:	2a00      	cmp	r2, #0
 801d70e:	d101      	bne.n	801d714 <__lo0bits+0x3e>
 801d710:	3008      	adds	r0, #8
 801d712:	0a1b      	lsrs	r3, r3, #8
 801d714:	071a      	lsls	r2, r3, #28
 801d716:	d101      	bne.n	801d71c <__lo0bits+0x46>
 801d718:	3004      	adds	r0, #4
 801d71a:	091b      	lsrs	r3, r3, #4
 801d71c:	079a      	lsls	r2, r3, #30
 801d71e:	d101      	bne.n	801d724 <__lo0bits+0x4e>
 801d720:	3002      	adds	r0, #2
 801d722:	089b      	lsrs	r3, r3, #2
 801d724:	07da      	lsls	r2, r3, #31
 801d726:	d4e9      	bmi.n	801d6fc <__lo0bits+0x26>
 801d728:	3001      	adds	r0, #1
 801d72a:	085b      	lsrs	r3, r3, #1
 801d72c:	d1e6      	bne.n	801d6fc <__lo0bits+0x26>
 801d72e:	2020      	movs	r0, #32
 801d730:	e7e2      	b.n	801d6f8 <__lo0bits+0x22>
	...

0801d734 <__i2b>:
 801d734:	b510      	push	{r4, lr}
 801d736:	000c      	movs	r4, r1
 801d738:	2101      	movs	r1, #1
 801d73a:	f7ff feb3 	bl	801d4a4 <_Balloc>
 801d73e:	2800      	cmp	r0, #0
 801d740:	d107      	bne.n	801d752 <__i2b+0x1e>
 801d742:	2146      	movs	r1, #70	@ 0x46
 801d744:	4c05      	ldr	r4, [pc, #20]	@ (801d75c <__i2b+0x28>)
 801d746:	0002      	movs	r2, r0
 801d748:	4b05      	ldr	r3, [pc, #20]	@ (801d760 <__i2b+0x2c>)
 801d74a:	0020      	movs	r0, r4
 801d74c:	31ff      	adds	r1, #255	@ 0xff
 801d74e:	f000 ff9b 	bl	801e688 <__assert_func>
 801d752:	2301      	movs	r3, #1
 801d754:	6144      	str	r4, [r0, #20]
 801d756:	6103      	str	r3, [r0, #16]
 801d758:	bd10      	pop	{r4, pc}
 801d75a:	46c0      	nop			@ (mov r8, r8)
 801d75c:	080208b2 	.word	0x080208b2
 801d760:	08020841 	.word	0x08020841

0801d764 <__multiply>:
 801d764:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d766:	0014      	movs	r4, r2
 801d768:	690a      	ldr	r2, [r1, #16]
 801d76a:	6923      	ldr	r3, [r4, #16]
 801d76c:	000d      	movs	r5, r1
 801d76e:	b08b      	sub	sp, #44	@ 0x2c
 801d770:	429a      	cmp	r2, r3
 801d772:	db02      	blt.n	801d77a <__multiply+0x16>
 801d774:	0023      	movs	r3, r4
 801d776:	000c      	movs	r4, r1
 801d778:	001d      	movs	r5, r3
 801d77a:	6927      	ldr	r7, [r4, #16]
 801d77c:	692e      	ldr	r6, [r5, #16]
 801d77e:	6861      	ldr	r1, [r4, #4]
 801d780:	19bb      	adds	r3, r7, r6
 801d782:	9303      	str	r3, [sp, #12]
 801d784:	68a3      	ldr	r3, [r4, #8]
 801d786:	19ba      	adds	r2, r7, r6
 801d788:	4293      	cmp	r3, r2
 801d78a:	da00      	bge.n	801d78e <__multiply+0x2a>
 801d78c:	3101      	adds	r1, #1
 801d78e:	f7ff fe89 	bl	801d4a4 <_Balloc>
 801d792:	9002      	str	r0, [sp, #8]
 801d794:	2800      	cmp	r0, #0
 801d796:	d106      	bne.n	801d7a6 <__multiply+0x42>
 801d798:	21b1      	movs	r1, #177	@ 0xb1
 801d79a:	4b49      	ldr	r3, [pc, #292]	@ (801d8c0 <__multiply+0x15c>)
 801d79c:	4849      	ldr	r0, [pc, #292]	@ (801d8c4 <__multiply+0x160>)
 801d79e:	9a02      	ldr	r2, [sp, #8]
 801d7a0:	0049      	lsls	r1, r1, #1
 801d7a2:	f000 ff71 	bl	801e688 <__assert_func>
 801d7a6:	9b02      	ldr	r3, [sp, #8]
 801d7a8:	2200      	movs	r2, #0
 801d7aa:	3314      	adds	r3, #20
 801d7ac:	469c      	mov	ip, r3
 801d7ae:	19bb      	adds	r3, r7, r6
 801d7b0:	009b      	lsls	r3, r3, #2
 801d7b2:	4463      	add	r3, ip
 801d7b4:	9304      	str	r3, [sp, #16]
 801d7b6:	4663      	mov	r3, ip
 801d7b8:	9904      	ldr	r1, [sp, #16]
 801d7ba:	428b      	cmp	r3, r1
 801d7bc:	d32a      	bcc.n	801d814 <__multiply+0xb0>
 801d7be:	0023      	movs	r3, r4
 801d7c0:	00bf      	lsls	r7, r7, #2
 801d7c2:	3314      	adds	r3, #20
 801d7c4:	3514      	adds	r5, #20
 801d7c6:	9308      	str	r3, [sp, #32]
 801d7c8:	00b6      	lsls	r6, r6, #2
 801d7ca:	19db      	adds	r3, r3, r7
 801d7cc:	9305      	str	r3, [sp, #20]
 801d7ce:	19ab      	adds	r3, r5, r6
 801d7d0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7d2:	2304      	movs	r3, #4
 801d7d4:	9306      	str	r3, [sp, #24]
 801d7d6:	0023      	movs	r3, r4
 801d7d8:	9a05      	ldr	r2, [sp, #20]
 801d7da:	3315      	adds	r3, #21
 801d7dc:	9501      	str	r5, [sp, #4]
 801d7de:	429a      	cmp	r2, r3
 801d7e0:	d305      	bcc.n	801d7ee <__multiply+0x8a>
 801d7e2:	1b13      	subs	r3, r2, r4
 801d7e4:	3b15      	subs	r3, #21
 801d7e6:	089b      	lsrs	r3, r3, #2
 801d7e8:	3301      	adds	r3, #1
 801d7ea:	009b      	lsls	r3, r3, #2
 801d7ec:	9306      	str	r3, [sp, #24]
 801d7ee:	9b01      	ldr	r3, [sp, #4]
 801d7f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d7f2:	4293      	cmp	r3, r2
 801d7f4:	d310      	bcc.n	801d818 <__multiply+0xb4>
 801d7f6:	9b03      	ldr	r3, [sp, #12]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	dd05      	ble.n	801d808 <__multiply+0xa4>
 801d7fc:	9b04      	ldr	r3, [sp, #16]
 801d7fe:	3b04      	subs	r3, #4
 801d800:	9304      	str	r3, [sp, #16]
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	2b00      	cmp	r3, #0
 801d806:	d056      	beq.n	801d8b6 <__multiply+0x152>
 801d808:	9b02      	ldr	r3, [sp, #8]
 801d80a:	9a03      	ldr	r2, [sp, #12]
 801d80c:	0018      	movs	r0, r3
 801d80e:	611a      	str	r2, [r3, #16]
 801d810:	b00b      	add	sp, #44	@ 0x2c
 801d812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d814:	c304      	stmia	r3!, {r2}
 801d816:	e7cf      	b.n	801d7b8 <__multiply+0x54>
 801d818:	9b01      	ldr	r3, [sp, #4]
 801d81a:	6818      	ldr	r0, [r3, #0]
 801d81c:	b280      	uxth	r0, r0
 801d81e:	2800      	cmp	r0, #0
 801d820:	d01e      	beq.n	801d860 <__multiply+0xfc>
 801d822:	4667      	mov	r7, ip
 801d824:	2500      	movs	r5, #0
 801d826:	9e08      	ldr	r6, [sp, #32]
 801d828:	ce02      	ldmia	r6!, {r1}
 801d82a:	683b      	ldr	r3, [r7, #0]
 801d82c:	9307      	str	r3, [sp, #28]
 801d82e:	b28b      	uxth	r3, r1
 801d830:	4343      	muls	r3, r0
 801d832:	001a      	movs	r2, r3
 801d834:	466b      	mov	r3, sp
 801d836:	0c09      	lsrs	r1, r1, #16
 801d838:	8b9b      	ldrh	r3, [r3, #28]
 801d83a:	4341      	muls	r1, r0
 801d83c:	18d3      	adds	r3, r2, r3
 801d83e:	9a07      	ldr	r2, [sp, #28]
 801d840:	195b      	adds	r3, r3, r5
 801d842:	0c12      	lsrs	r2, r2, #16
 801d844:	1889      	adds	r1, r1, r2
 801d846:	0c1a      	lsrs	r2, r3, #16
 801d848:	188a      	adds	r2, r1, r2
 801d84a:	b29b      	uxth	r3, r3
 801d84c:	0c15      	lsrs	r5, r2, #16
 801d84e:	0412      	lsls	r2, r2, #16
 801d850:	431a      	orrs	r2, r3
 801d852:	9b05      	ldr	r3, [sp, #20]
 801d854:	c704      	stmia	r7!, {r2}
 801d856:	42b3      	cmp	r3, r6
 801d858:	d8e6      	bhi.n	801d828 <__multiply+0xc4>
 801d85a:	4663      	mov	r3, ip
 801d85c:	9a06      	ldr	r2, [sp, #24]
 801d85e:	509d      	str	r5, [r3, r2]
 801d860:	9b01      	ldr	r3, [sp, #4]
 801d862:	6818      	ldr	r0, [r3, #0]
 801d864:	0c00      	lsrs	r0, r0, #16
 801d866:	d020      	beq.n	801d8aa <__multiply+0x146>
 801d868:	4663      	mov	r3, ip
 801d86a:	0025      	movs	r5, r4
 801d86c:	4661      	mov	r1, ip
 801d86e:	2700      	movs	r7, #0
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	3514      	adds	r5, #20
 801d874:	682a      	ldr	r2, [r5, #0]
 801d876:	680e      	ldr	r6, [r1, #0]
 801d878:	b292      	uxth	r2, r2
 801d87a:	4342      	muls	r2, r0
 801d87c:	0c36      	lsrs	r6, r6, #16
 801d87e:	1992      	adds	r2, r2, r6
 801d880:	19d2      	adds	r2, r2, r7
 801d882:	0416      	lsls	r6, r2, #16
 801d884:	b29b      	uxth	r3, r3
 801d886:	431e      	orrs	r6, r3
 801d888:	600e      	str	r6, [r1, #0]
 801d88a:	cd40      	ldmia	r5!, {r6}
 801d88c:	684b      	ldr	r3, [r1, #4]
 801d88e:	0c36      	lsrs	r6, r6, #16
 801d890:	4346      	muls	r6, r0
 801d892:	b29b      	uxth	r3, r3
 801d894:	0c12      	lsrs	r2, r2, #16
 801d896:	18f3      	adds	r3, r6, r3
 801d898:	189b      	adds	r3, r3, r2
 801d89a:	9a05      	ldr	r2, [sp, #20]
 801d89c:	0c1f      	lsrs	r7, r3, #16
 801d89e:	3104      	adds	r1, #4
 801d8a0:	42aa      	cmp	r2, r5
 801d8a2:	d8e7      	bhi.n	801d874 <__multiply+0x110>
 801d8a4:	4662      	mov	r2, ip
 801d8a6:	9906      	ldr	r1, [sp, #24]
 801d8a8:	5053      	str	r3, [r2, r1]
 801d8aa:	9b01      	ldr	r3, [sp, #4]
 801d8ac:	3304      	adds	r3, #4
 801d8ae:	9301      	str	r3, [sp, #4]
 801d8b0:	2304      	movs	r3, #4
 801d8b2:	449c      	add	ip, r3
 801d8b4:	e79b      	b.n	801d7ee <__multiply+0x8a>
 801d8b6:	9b03      	ldr	r3, [sp, #12]
 801d8b8:	3b01      	subs	r3, #1
 801d8ba:	9303      	str	r3, [sp, #12]
 801d8bc:	e79b      	b.n	801d7f6 <__multiply+0x92>
 801d8be:	46c0      	nop			@ (mov r8, r8)
 801d8c0:	08020841 	.word	0x08020841
 801d8c4:	080208b2 	.word	0x080208b2

0801d8c8 <__pow5mult>:
 801d8c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d8ca:	2303      	movs	r3, #3
 801d8cc:	0015      	movs	r5, r2
 801d8ce:	0007      	movs	r7, r0
 801d8d0:	000e      	movs	r6, r1
 801d8d2:	401a      	ands	r2, r3
 801d8d4:	421d      	tst	r5, r3
 801d8d6:	d008      	beq.n	801d8ea <__pow5mult+0x22>
 801d8d8:	4925      	ldr	r1, [pc, #148]	@ (801d970 <__pow5mult+0xa8>)
 801d8da:	3a01      	subs	r2, #1
 801d8dc:	0092      	lsls	r2, r2, #2
 801d8de:	5852      	ldr	r2, [r2, r1]
 801d8e0:	2300      	movs	r3, #0
 801d8e2:	0031      	movs	r1, r6
 801d8e4:	f7ff fe46 	bl	801d574 <__multadd>
 801d8e8:	0006      	movs	r6, r0
 801d8ea:	10ad      	asrs	r5, r5, #2
 801d8ec:	d03d      	beq.n	801d96a <__pow5mult+0xa2>
 801d8ee:	69fc      	ldr	r4, [r7, #28]
 801d8f0:	2c00      	cmp	r4, #0
 801d8f2:	d10f      	bne.n	801d914 <__pow5mult+0x4c>
 801d8f4:	2010      	movs	r0, #16
 801d8f6:	f7ff fd07 	bl	801d308 <malloc>
 801d8fa:	1e02      	subs	r2, r0, #0
 801d8fc:	61f8      	str	r0, [r7, #28]
 801d8fe:	d105      	bne.n	801d90c <__pow5mult+0x44>
 801d900:	21b4      	movs	r1, #180	@ 0xb4
 801d902:	4b1c      	ldr	r3, [pc, #112]	@ (801d974 <__pow5mult+0xac>)
 801d904:	481c      	ldr	r0, [pc, #112]	@ (801d978 <__pow5mult+0xb0>)
 801d906:	31ff      	adds	r1, #255	@ 0xff
 801d908:	f000 febe 	bl	801e688 <__assert_func>
 801d90c:	6044      	str	r4, [r0, #4]
 801d90e:	6084      	str	r4, [r0, #8]
 801d910:	6004      	str	r4, [r0, #0]
 801d912:	60c4      	str	r4, [r0, #12]
 801d914:	69fb      	ldr	r3, [r7, #28]
 801d916:	689c      	ldr	r4, [r3, #8]
 801d918:	9301      	str	r3, [sp, #4]
 801d91a:	2c00      	cmp	r4, #0
 801d91c:	d108      	bne.n	801d930 <__pow5mult+0x68>
 801d91e:	0038      	movs	r0, r7
 801d920:	4916      	ldr	r1, [pc, #88]	@ (801d97c <__pow5mult+0xb4>)
 801d922:	f7ff ff07 	bl	801d734 <__i2b>
 801d926:	9b01      	ldr	r3, [sp, #4]
 801d928:	0004      	movs	r4, r0
 801d92a:	6098      	str	r0, [r3, #8]
 801d92c:	2300      	movs	r3, #0
 801d92e:	6003      	str	r3, [r0, #0]
 801d930:	2301      	movs	r3, #1
 801d932:	421d      	tst	r5, r3
 801d934:	d00a      	beq.n	801d94c <__pow5mult+0x84>
 801d936:	0031      	movs	r1, r6
 801d938:	0022      	movs	r2, r4
 801d93a:	0038      	movs	r0, r7
 801d93c:	f7ff ff12 	bl	801d764 <__multiply>
 801d940:	0031      	movs	r1, r6
 801d942:	9001      	str	r0, [sp, #4]
 801d944:	0038      	movs	r0, r7
 801d946:	f7ff fdf1 	bl	801d52c <_Bfree>
 801d94a:	9e01      	ldr	r6, [sp, #4]
 801d94c:	106d      	asrs	r5, r5, #1
 801d94e:	d00c      	beq.n	801d96a <__pow5mult+0xa2>
 801d950:	6820      	ldr	r0, [r4, #0]
 801d952:	2800      	cmp	r0, #0
 801d954:	d107      	bne.n	801d966 <__pow5mult+0x9e>
 801d956:	0022      	movs	r2, r4
 801d958:	0021      	movs	r1, r4
 801d95a:	0038      	movs	r0, r7
 801d95c:	f7ff ff02 	bl	801d764 <__multiply>
 801d960:	2300      	movs	r3, #0
 801d962:	6020      	str	r0, [r4, #0]
 801d964:	6003      	str	r3, [r0, #0]
 801d966:	0004      	movs	r4, r0
 801d968:	e7e2      	b.n	801d930 <__pow5mult+0x68>
 801d96a:	0030      	movs	r0, r6
 801d96c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d96e:	46c0      	nop			@ (mov r8, r8)
 801d970:	0802090c 	.word	0x0802090c
 801d974:	080207d2 	.word	0x080207d2
 801d978:	080208b2 	.word	0x080208b2
 801d97c:	00000271 	.word	0x00000271

0801d980 <__lshift>:
 801d980:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d982:	000c      	movs	r4, r1
 801d984:	0016      	movs	r6, r2
 801d986:	6923      	ldr	r3, [r4, #16]
 801d988:	1157      	asrs	r7, r2, #5
 801d98a:	b085      	sub	sp, #20
 801d98c:	18fb      	adds	r3, r7, r3
 801d98e:	9301      	str	r3, [sp, #4]
 801d990:	3301      	adds	r3, #1
 801d992:	9300      	str	r3, [sp, #0]
 801d994:	6849      	ldr	r1, [r1, #4]
 801d996:	68a3      	ldr	r3, [r4, #8]
 801d998:	9002      	str	r0, [sp, #8]
 801d99a:	9a00      	ldr	r2, [sp, #0]
 801d99c:	4293      	cmp	r3, r2
 801d99e:	db10      	blt.n	801d9c2 <__lshift+0x42>
 801d9a0:	9802      	ldr	r0, [sp, #8]
 801d9a2:	f7ff fd7f 	bl	801d4a4 <_Balloc>
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	0001      	movs	r1, r0
 801d9aa:	0005      	movs	r5, r0
 801d9ac:	001a      	movs	r2, r3
 801d9ae:	3114      	adds	r1, #20
 801d9b0:	4298      	cmp	r0, r3
 801d9b2:	d10c      	bne.n	801d9ce <__lshift+0x4e>
 801d9b4:	21ef      	movs	r1, #239	@ 0xef
 801d9b6:	002a      	movs	r2, r5
 801d9b8:	4b25      	ldr	r3, [pc, #148]	@ (801da50 <__lshift+0xd0>)
 801d9ba:	4826      	ldr	r0, [pc, #152]	@ (801da54 <__lshift+0xd4>)
 801d9bc:	0049      	lsls	r1, r1, #1
 801d9be:	f000 fe63 	bl	801e688 <__assert_func>
 801d9c2:	3101      	adds	r1, #1
 801d9c4:	005b      	lsls	r3, r3, #1
 801d9c6:	e7e8      	b.n	801d99a <__lshift+0x1a>
 801d9c8:	0098      	lsls	r0, r3, #2
 801d9ca:	500a      	str	r2, [r1, r0]
 801d9cc:	3301      	adds	r3, #1
 801d9ce:	42bb      	cmp	r3, r7
 801d9d0:	dbfa      	blt.n	801d9c8 <__lshift+0x48>
 801d9d2:	43fb      	mvns	r3, r7
 801d9d4:	17db      	asrs	r3, r3, #31
 801d9d6:	401f      	ands	r7, r3
 801d9d8:	00bf      	lsls	r7, r7, #2
 801d9da:	0023      	movs	r3, r4
 801d9dc:	201f      	movs	r0, #31
 801d9de:	19c9      	adds	r1, r1, r7
 801d9e0:	0037      	movs	r7, r6
 801d9e2:	6922      	ldr	r2, [r4, #16]
 801d9e4:	3314      	adds	r3, #20
 801d9e6:	0092      	lsls	r2, r2, #2
 801d9e8:	189a      	adds	r2, r3, r2
 801d9ea:	4007      	ands	r7, r0
 801d9ec:	4206      	tst	r6, r0
 801d9ee:	d029      	beq.n	801da44 <__lshift+0xc4>
 801d9f0:	3001      	adds	r0, #1
 801d9f2:	1bc0      	subs	r0, r0, r7
 801d9f4:	9003      	str	r0, [sp, #12]
 801d9f6:	468c      	mov	ip, r1
 801d9f8:	2000      	movs	r0, #0
 801d9fa:	681e      	ldr	r6, [r3, #0]
 801d9fc:	40be      	lsls	r6, r7
 801d9fe:	4306      	orrs	r6, r0
 801da00:	4660      	mov	r0, ip
 801da02:	c040      	stmia	r0!, {r6}
 801da04:	4684      	mov	ip, r0
 801da06:	9e03      	ldr	r6, [sp, #12]
 801da08:	cb01      	ldmia	r3!, {r0}
 801da0a:	40f0      	lsrs	r0, r6
 801da0c:	429a      	cmp	r2, r3
 801da0e:	d8f4      	bhi.n	801d9fa <__lshift+0x7a>
 801da10:	0026      	movs	r6, r4
 801da12:	3615      	adds	r6, #21
 801da14:	2304      	movs	r3, #4
 801da16:	42b2      	cmp	r2, r6
 801da18:	d304      	bcc.n	801da24 <__lshift+0xa4>
 801da1a:	1b13      	subs	r3, r2, r4
 801da1c:	3b15      	subs	r3, #21
 801da1e:	089b      	lsrs	r3, r3, #2
 801da20:	3301      	adds	r3, #1
 801da22:	009b      	lsls	r3, r3, #2
 801da24:	50c8      	str	r0, [r1, r3]
 801da26:	2800      	cmp	r0, #0
 801da28:	d002      	beq.n	801da30 <__lshift+0xb0>
 801da2a:	9b01      	ldr	r3, [sp, #4]
 801da2c:	3302      	adds	r3, #2
 801da2e:	9300      	str	r3, [sp, #0]
 801da30:	9b00      	ldr	r3, [sp, #0]
 801da32:	9802      	ldr	r0, [sp, #8]
 801da34:	3b01      	subs	r3, #1
 801da36:	0021      	movs	r1, r4
 801da38:	612b      	str	r3, [r5, #16]
 801da3a:	f7ff fd77 	bl	801d52c <_Bfree>
 801da3e:	0028      	movs	r0, r5
 801da40:	b005      	add	sp, #20
 801da42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da44:	cb01      	ldmia	r3!, {r0}
 801da46:	c101      	stmia	r1!, {r0}
 801da48:	429a      	cmp	r2, r3
 801da4a:	d8fb      	bhi.n	801da44 <__lshift+0xc4>
 801da4c:	e7f0      	b.n	801da30 <__lshift+0xb0>
 801da4e:	46c0      	nop			@ (mov r8, r8)
 801da50:	08020841 	.word	0x08020841
 801da54:	080208b2 	.word	0x080208b2

0801da58 <__mcmp>:
 801da58:	b530      	push	{r4, r5, lr}
 801da5a:	690b      	ldr	r3, [r1, #16]
 801da5c:	6904      	ldr	r4, [r0, #16]
 801da5e:	0002      	movs	r2, r0
 801da60:	1ae0      	subs	r0, r4, r3
 801da62:	429c      	cmp	r4, r3
 801da64:	d10f      	bne.n	801da86 <__mcmp+0x2e>
 801da66:	3214      	adds	r2, #20
 801da68:	009b      	lsls	r3, r3, #2
 801da6a:	3114      	adds	r1, #20
 801da6c:	0014      	movs	r4, r2
 801da6e:	18c9      	adds	r1, r1, r3
 801da70:	18d2      	adds	r2, r2, r3
 801da72:	3a04      	subs	r2, #4
 801da74:	3904      	subs	r1, #4
 801da76:	6815      	ldr	r5, [r2, #0]
 801da78:	680b      	ldr	r3, [r1, #0]
 801da7a:	429d      	cmp	r5, r3
 801da7c:	d004      	beq.n	801da88 <__mcmp+0x30>
 801da7e:	2001      	movs	r0, #1
 801da80:	429d      	cmp	r5, r3
 801da82:	d200      	bcs.n	801da86 <__mcmp+0x2e>
 801da84:	3802      	subs	r0, #2
 801da86:	bd30      	pop	{r4, r5, pc}
 801da88:	4294      	cmp	r4, r2
 801da8a:	d3f2      	bcc.n	801da72 <__mcmp+0x1a>
 801da8c:	e7fb      	b.n	801da86 <__mcmp+0x2e>
	...

0801da90 <__mdiff>:
 801da90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da92:	000c      	movs	r4, r1
 801da94:	b087      	sub	sp, #28
 801da96:	9000      	str	r0, [sp, #0]
 801da98:	0011      	movs	r1, r2
 801da9a:	0020      	movs	r0, r4
 801da9c:	0017      	movs	r7, r2
 801da9e:	f7ff ffdb 	bl	801da58 <__mcmp>
 801daa2:	1e05      	subs	r5, r0, #0
 801daa4:	d110      	bne.n	801dac8 <__mdiff+0x38>
 801daa6:	0001      	movs	r1, r0
 801daa8:	9800      	ldr	r0, [sp, #0]
 801daaa:	f7ff fcfb 	bl	801d4a4 <_Balloc>
 801daae:	1e02      	subs	r2, r0, #0
 801dab0:	d104      	bne.n	801dabc <__mdiff+0x2c>
 801dab2:	4b40      	ldr	r3, [pc, #256]	@ (801dbb4 <__mdiff+0x124>)
 801dab4:	4840      	ldr	r0, [pc, #256]	@ (801dbb8 <__mdiff+0x128>)
 801dab6:	4941      	ldr	r1, [pc, #260]	@ (801dbbc <__mdiff+0x12c>)
 801dab8:	f000 fde6 	bl	801e688 <__assert_func>
 801dabc:	2301      	movs	r3, #1
 801dabe:	6145      	str	r5, [r0, #20]
 801dac0:	6103      	str	r3, [r0, #16]
 801dac2:	0010      	movs	r0, r2
 801dac4:	b007      	add	sp, #28
 801dac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dac8:	2600      	movs	r6, #0
 801daca:	42b0      	cmp	r0, r6
 801dacc:	da03      	bge.n	801dad6 <__mdiff+0x46>
 801dace:	0023      	movs	r3, r4
 801dad0:	003c      	movs	r4, r7
 801dad2:	001f      	movs	r7, r3
 801dad4:	3601      	adds	r6, #1
 801dad6:	6861      	ldr	r1, [r4, #4]
 801dad8:	9800      	ldr	r0, [sp, #0]
 801dada:	f7ff fce3 	bl	801d4a4 <_Balloc>
 801dade:	1e02      	subs	r2, r0, #0
 801dae0:	d103      	bne.n	801daea <__mdiff+0x5a>
 801dae2:	4b34      	ldr	r3, [pc, #208]	@ (801dbb4 <__mdiff+0x124>)
 801dae4:	4834      	ldr	r0, [pc, #208]	@ (801dbb8 <__mdiff+0x128>)
 801dae6:	4936      	ldr	r1, [pc, #216]	@ (801dbc0 <__mdiff+0x130>)
 801dae8:	e7e6      	b.n	801dab8 <__mdiff+0x28>
 801daea:	6923      	ldr	r3, [r4, #16]
 801daec:	3414      	adds	r4, #20
 801daee:	9300      	str	r3, [sp, #0]
 801daf0:	009b      	lsls	r3, r3, #2
 801daf2:	18e3      	adds	r3, r4, r3
 801daf4:	0021      	movs	r1, r4
 801daf6:	9401      	str	r4, [sp, #4]
 801daf8:	003c      	movs	r4, r7
 801dafa:	9302      	str	r3, [sp, #8]
 801dafc:	693b      	ldr	r3, [r7, #16]
 801dafe:	3414      	adds	r4, #20
 801db00:	009b      	lsls	r3, r3, #2
 801db02:	18e3      	adds	r3, r4, r3
 801db04:	9303      	str	r3, [sp, #12]
 801db06:	0003      	movs	r3, r0
 801db08:	60c6      	str	r6, [r0, #12]
 801db0a:	468c      	mov	ip, r1
 801db0c:	2000      	movs	r0, #0
 801db0e:	3314      	adds	r3, #20
 801db10:	9304      	str	r3, [sp, #16]
 801db12:	9305      	str	r3, [sp, #20]
 801db14:	4663      	mov	r3, ip
 801db16:	cb20      	ldmia	r3!, {r5}
 801db18:	b2a9      	uxth	r1, r5
 801db1a:	000e      	movs	r6, r1
 801db1c:	469c      	mov	ip, r3
 801db1e:	cc08      	ldmia	r4!, {r3}
 801db20:	0c2d      	lsrs	r5, r5, #16
 801db22:	b299      	uxth	r1, r3
 801db24:	1a71      	subs	r1, r6, r1
 801db26:	1809      	adds	r1, r1, r0
 801db28:	0c1b      	lsrs	r3, r3, #16
 801db2a:	1408      	asrs	r0, r1, #16
 801db2c:	1aeb      	subs	r3, r5, r3
 801db2e:	181b      	adds	r3, r3, r0
 801db30:	1418      	asrs	r0, r3, #16
 801db32:	b289      	uxth	r1, r1
 801db34:	041b      	lsls	r3, r3, #16
 801db36:	4319      	orrs	r1, r3
 801db38:	9b05      	ldr	r3, [sp, #20]
 801db3a:	c302      	stmia	r3!, {r1}
 801db3c:	9305      	str	r3, [sp, #20]
 801db3e:	9b03      	ldr	r3, [sp, #12]
 801db40:	42a3      	cmp	r3, r4
 801db42:	d8e7      	bhi.n	801db14 <__mdiff+0x84>
 801db44:	0039      	movs	r1, r7
 801db46:	9c03      	ldr	r4, [sp, #12]
 801db48:	3115      	adds	r1, #21
 801db4a:	2304      	movs	r3, #4
 801db4c:	428c      	cmp	r4, r1
 801db4e:	d304      	bcc.n	801db5a <__mdiff+0xca>
 801db50:	1be3      	subs	r3, r4, r7
 801db52:	3b15      	subs	r3, #21
 801db54:	089b      	lsrs	r3, r3, #2
 801db56:	3301      	adds	r3, #1
 801db58:	009b      	lsls	r3, r3, #2
 801db5a:	9901      	ldr	r1, [sp, #4]
 801db5c:	18cd      	adds	r5, r1, r3
 801db5e:	9904      	ldr	r1, [sp, #16]
 801db60:	002e      	movs	r6, r5
 801db62:	18cb      	adds	r3, r1, r3
 801db64:	001f      	movs	r7, r3
 801db66:	9902      	ldr	r1, [sp, #8]
 801db68:	428e      	cmp	r6, r1
 801db6a:	d311      	bcc.n	801db90 <__mdiff+0x100>
 801db6c:	9c02      	ldr	r4, [sp, #8]
 801db6e:	1ee9      	subs	r1, r5, #3
 801db70:	2000      	movs	r0, #0
 801db72:	428c      	cmp	r4, r1
 801db74:	d304      	bcc.n	801db80 <__mdiff+0xf0>
 801db76:	0021      	movs	r1, r4
 801db78:	3103      	adds	r1, #3
 801db7a:	1b49      	subs	r1, r1, r5
 801db7c:	0889      	lsrs	r1, r1, #2
 801db7e:	0088      	lsls	r0, r1, #2
 801db80:	181b      	adds	r3, r3, r0
 801db82:	3b04      	subs	r3, #4
 801db84:	6819      	ldr	r1, [r3, #0]
 801db86:	2900      	cmp	r1, #0
 801db88:	d010      	beq.n	801dbac <__mdiff+0x11c>
 801db8a:	9b00      	ldr	r3, [sp, #0]
 801db8c:	6113      	str	r3, [r2, #16]
 801db8e:	e798      	b.n	801dac2 <__mdiff+0x32>
 801db90:	4684      	mov	ip, r0
 801db92:	ce02      	ldmia	r6!, {r1}
 801db94:	b288      	uxth	r0, r1
 801db96:	4460      	add	r0, ip
 801db98:	1400      	asrs	r0, r0, #16
 801db9a:	0c0c      	lsrs	r4, r1, #16
 801db9c:	1904      	adds	r4, r0, r4
 801db9e:	4461      	add	r1, ip
 801dba0:	1420      	asrs	r0, r4, #16
 801dba2:	b289      	uxth	r1, r1
 801dba4:	0424      	lsls	r4, r4, #16
 801dba6:	4321      	orrs	r1, r4
 801dba8:	c702      	stmia	r7!, {r1}
 801dbaa:	e7dc      	b.n	801db66 <__mdiff+0xd6>
 801dbac:	9900      	ldr	r1, [sp, #0]
 801dbae:	3901      	subs	r1, #1
 801dbb0:	9100      	str	r1, [sp, #0]
 801dbb2:	e7e6      	b.n	801db82 <__mdiff+0xf2>
 801dbb4:	08020841 	.word	0x08020841
 801dbb8:	080208b2 	.word	0x080208b2
 801dbbc:	00000237 	.word	0x00000237
 801dbc0:	00000245 	.word	0x00000245

0801dbc4 <__ulp>:
 801dbc4:	b510      	push	{r4, lr}
 801dbc6:	2400      	movs	r4, #0
 801dbc8:	4b0c      	ldr	r3, [pc, #48]	@ (801dbfc <__ulp+0x38>)
 801dbca:	4a0d      	ldr	r2, [pc, #52]	@ (801dc00 <__ulp+0x3c>)
 801dbcc:	400b      	ands	r3, r1
 801dbce:	189b      	adds	r3, r3, r2
 801dbd0:	42a3      	cmp	r3, r4
 801dbd2:	dc06      	bgt.n	801dbe2 <__ulp+0x1e>
 801dbd4:	425b      	negs	r3, r3
 801dbd6:	151a      	asrs	r2, r3, #20
 801dbd8:	2a13      	cmp	r2, #19
 801dbda:	dc05      	bgt.n	801dbe8 <__ulp+0x24>
 801dbdc:	2380      	movs	r3, #128	@ 0x80
 801dbde:	031b      	lsls	r3, r3, #12
 801dbe0:	4113      	asrs	r3, r2
 801dbe2:	0019      	movs	r1, r3
 801dbe4:	0020      	movs	r0, r4
 801dbe6:	bd10      	pop	{r4, pc}
 801dbe8:	3a14      	subs	r2, #20
 801dbea:	2401      	movs	r4, #1
 801dbec:	2a1e      	cmp	r2, #30
 801dbee:	dc02      	bgt.n	801dbf6 <__ulp+0x32>
 801dbf0:	2480      	movs	r4, #128	@ 0x80
 801dbf2:	0624      	lsls	r4, r4, #24
 801dbf4:	40d4      	lsrs	r4, r2
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	e7f3      	b.n	801dbe2 <__ulp+0x1e>
 801dbfa:	46c0      	nop			@ (mov r8, r8)
 801dbfc:	7ff00000 	.word	0x7ff00000
 801dc00:	fcc00000 	.word	0xfcc00000

0801dc04 <__b2d>:
 801dc04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc06:	0006      	movs	r6, r0
 801dc08:	6903      	ldr	r3, [r0, #16]
 801dc0a:	3614      	adds	r6, #20
 801dc0c:	009b      	lsls	r3, r3, #2
 801dc0e:	18f3      	adds	r3, r6, r3
 801dc10:	1f1d      	subs	r5, r3, #4
 801dc12:	682c      	ldr	r4, [r5, #0]
 801dc14:	000f      	movs	r7, r1
 801dc16:	0020      	movs	r0, r4
 801dc18:	9301      	str	r3, [sp, #4]
 801dc1a:	f7ff fd3b 	bl	801d694 <__hi0bits>
 801dc1e:	2220      	movs	r2, #32
 801dc20:	1a12      	subs	r2, r2, r0
 801dc22:	603a      	str	r2, [r7, #0]
 801dc24:	0003      	movs	r3, r0
 801dc26:	4a1c      	ldr	r2, [pc, #112]	@ (801dc98 <__b2d+0x94>)
 801dc28:	280a      	cmp	r0, #10
 801dc2a:	dc15      	bgt.n	801dc58 <__b2d+0x54>
 801dc2c:	210b      	movs	r1, #11
 801dc2e:	0027      	movs	r7, r4
 801dc30:	1a09      	subs	r1, r1, r0
 801dc32:	40cf      	lsrs	r7, r1
 801dc34:	433a      	orrs	r2, r7
 801dc36:	468c      	mov	ip, r1
 801dc38:	0011      	movs	r1, r2
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	42ae      	cmp	r6, r5
 801dc3e:	d202      	bcs.n	801dc46 <__b2d+0x42>
 801dc40:	9a01      	ldr	r2, [sp, #4]
 801dc42:	3a08      	subs	r2, #8
 801dc44:	6812      	ldr	r2, [r2, #0]
 801dc46:	3315      	adds	r3, #21
 801dc48:	409c      	lsls	r4, r3
 801dc4a:	4663      	mov	r3, ip
 801dc4c:	0027      	movs	r7, r4
 801dc4e:	40da      	lsrs	r2, r3
 801dc50:	4317      	orrs	r7, r2
 801dc52:	0038      	movs	r0, r7
 801dc54:	b003      	add	sp, #12
 801dc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc58:	2700      	movs	r7, #0
 801dc5a:	42ae      	cmp	r6, r5
 801dc5c:	d202      	bcs.n	801dc64 <__b2d+0x60>
 801dc5e:	9d01      	ldr	r5, [sp, #4]
 801dc60:	3d08      	subs	r5, #8
 801dc62:	682f      	ldr	r7, [r5, #0]
 801dc64:	210b      	movs	r1, #11
 801dc66:	4249      	negs	r1, r1
 801dc68:	468c      	mov	ip, r1
 801dc6a:	449c      	add	ip, r3
 801dc6c:	2b0b      	cmp	r3, #11
 801dc6e:	d010      	beq.n	801dc92 <__b2d+0x8e>
 801dc70:	4661      	mov	r1, ip
 801dc72:	2320      	movs	r3, #32
 801dc74:	408c      	lsls	r4, r1
 801dc76:	1a5b      	subs	r3, r3, r1
 801dc78:	0039      	movs	r1, r7
 801dc7a:	40d9      	lsrs	r1, r3
 801dc7c:	430c      	orrs	r4, r1
 801dc7e:	4322      	orrs	r2, r4
 801dc80:	0011      	movs	r1, r2
 801dc82:	2200      	movs	r2, #0
 801dc84:	42b5      	cmp	r5, r6
 801dc86:	d901      	bls.n	801dc8c <__b2d+0x88>
 801dc88:	3d04      	subs	r5, #4
 801dc8a:	682a      	ldr	r2, [r5, #0]
 801dc8c:	4664      	mov	r4, ip
 801dc8e:	40a7      	lsls	r7, r4
 801dc90:	e7dd      	b.n	801dc4e <__b2d+0x4a>
 801dc92:	4322      	orrs	r2, r4
 801dc94:	0011      	movs	r1, r2
 801dc96:	e7dc      	b.n	801dc52 <__b2d+0x4e>
 801dc98:	3ff00000 	.word	0x3ff00000

0801dc9c <__d2b>:
 801dc9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc9e:	2101      	movs	r1, #1
 801dca0:	0016      	movs	r6, r2
 801dca2:	001f      	movs	r7, r3
 801dca4:	f7ff fbfe 	bl	801d4a4 <_Balloc>
 801dca8:	1e04      	subs	r4, r0, #0
 801dcaa:	d105      	bne.n	801dcb8 <__d2b+0x1c>
 801dcac:	0022      	movs	r2, r4
 801dcae:	4b25      	ldr	r3, [pc, #148]	@ (801dd44 <__d2b+0xa8>)
 801dcb0:	4825      	ldr	r0, [pc, #148]	@ (801dd48 <__d2b+0xac>)
 801dcb2:	4926      	ldr	r1, [pc, #152]	@ (801dd4c <__d2b+0xb0>)
 801dcb4:	f000 fce8 	bl	801e688 <__assert_func>
 801dcb8:	033b      	lsls	r3, r7, #12
 801dcba:	007d      	lsls	r5, r7, #1
 801dcbc:	0b1b      	lsrs	r3, r3, #12
 801dcbe:	0d6d      	lsrs	r5, r5, #21
 801dcc0:	d002      	beq.n	801dcc8 <__d2b+0x2c>
 801dcc2:	2280      	movs	r2, #128	@ 0x80
 801dcc4:	0352      	lsls	r2, r2, #13
 801dcc6:	4313      	orrs	r3, r2
 801dcc8:	9301      	str	r3, [sp, #4]
 801dcca:	2e00      	cmp	r6, #0
 801dccc:	d025      	beq.n	801dd1a <__d2b+0x7e>
 801dcce:	4668      	mov	r0, sp
 801dcd0:	9600      	str	r6, [sp, #0]
 801dcd2:	f7ff fd00 	bl	801d6d6 <__lo0bits>
 801dcd6:	9b01      	ldr	r3, [sp, #4]
 801dcd8:	9900      	ldr	r1, [sp, #0]
 801dcda:	2800      	cmp	r0, #0
 801dcdc:	d01b      	beq.n	801dd16 <__d2b+0x7a>
 801dcde:	2220      	movs	r2, #32
 801dce0:	001e      	movs	r6, r3
 801dce2:	1a12      	subs	r2, r2, r0
 801dce4:	4096      	lsls	r6, r2
 801dce6:	0032      	movs	r2, r6
 801dce8:	40c3      	lsrs	r3, r0
 801dcea:	430a      	orrs	r2, r1
 801dcec:	6162      	str	r2, [r4, #20]
 801dcee:	9301      	str	r3, [sp, #4]
 801dcf0:	9e01      	ldr	r6, [sp, #4]
 801dcf2:	61a6      	str	r6, [r4, #24]
 801dcf4:	1e73      	subs	r3, r6, #1
 801dcf6:	419e      	sbcs	r6, r3
 801dcf8:	3601      	adds	r6, #1
 801dcfa:	6126      	str	r6, [r4, #16]
 801dcfc:	2d00      	cmp	r5, #0
 801dcfe:	d014      	beq.n	801dd2a <__d2b+0x8e>
 801dd00:	2635      	movs	r6, #53	@ 0x35
 801dd02:	4b13      	ldr	r3, [pc, #76]	@ (801dd50 <__d2b+0xb4>)
 801dd04:	18ed      	adds	r5, r5, r3
 801dd06:	9b08      	ldr	r3, [sp, #32]
 801dd08:	182d      	adds	r5, r5, r0
 801dd0a:	601d      	str	r5, [r3, #0]
 801dd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd0e:	1a36      	subs	r6, r6, r0
 801dd10:	601e      	str	r6, [r3, #0]
 801dd12:	0020      	movs	r0, r4
 801dd14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dd16:	6161      	str	r1, [r4, #20]
 801dd18:	e7ea      	b.n	801dcf0 <__d2b+0x54>
 801dd1a:	a801      	add	r0, sp, #4
 801dd1c:	f7ff fcdb 	bl	801d6d6 <__lo0bits>
 801dd20:	9b01      	ldr	r3, [sp, #4]
 801dd22:	2601      	movs	r6, #1
 801dd24:	6163      	str	r3, [r4, #20]
 801dd26:	3020      	adds	r0, #32
 801dd28:	e7e7      	b.n	801dcfa <__d2b+0x5e>
 801dd2a:	4b0a      	ldr	r3, [pc, #40]	@ (801dd54 <__d2b+0xb8>)
 801dd2c:	18c0      	adds	r0, r0, r3
 801dd2e:	9b08      	ldr	r3, [sp, #32]
 801dd30:	6018      	str	r0, [r3, #0]
 801dd32:	4b09      	ldr	r3, [pc, #36]	@ (801dd58 <__d2b+0xbc>)
 801dd34:	18f3      	adds	r3, r6, r3
 801dd36:	009b      	lsls	r3, r3, #2
 801dd38:	18e3      	adds	r3, r4, r3
 801dd3a:	6958      	ldr	r0, [r3, #20]
 801dd3c:	f7ff fcaa 	bl	801d694 <__hi0bits>
 801dd40:	0176      	lsls	r6, r6, #5
 801dd42:	e7e3      	b.n	801dd0c <__d2b+0x70>
 801dd44:	08020841 	.word	0x08020841
 801dd48:	080208b2 	.word	0x080208b2
 801dd4c:	0000030f 	.word	0x0000030f
 801dd50:	fffffbcd 	.word	0xfffffbcd
 801dd54:	fffffbce 	.word	0xfffffbce
 801dd58:	3fffffff 	.word	0x3fffffff

0801dd5c <__ratio>:
 801dd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd5e:	b087      	sub	sp, #28
 801dd60:	000f      	movs	r7, r1
 801dd62:	a904      	add	r1, sp, #16
 801dd64:	0006      	movs	r6, r0
 801dd66:	f7ff ff4d 	bl	801dc04 <__b2d>
 801dd6a:	9000      	str	r0, [sp, #0]
 801dd6c:	9101      	str	r1, [sp, #4]
 801dd6e:	9b00      	ldr	r3, [sp, #0]
 801dd70:	9c01      	ldr	r4, [sp, #4]
 801dd72:	0038      	movs	r0, r7
 801dd74:	a905      	add	r1, sp, #20
 801dd76:	9302      	str	r3, [sp, #8]
 801dd78:	9403      	str	r4, [sp, #12]
 801dd7a:	f7ff ff43 	bl	801dc04 <__b2d>
 801dd7e:	000d      	movs	r5, r1
 801dd80:	0002      	movs	r2, r0
 801dd82:	000b      	movs	r3, r1
 801dd84:	6930      	ldr	r0, [r6, #16]
 801dd86:	6939      	ldr	r1, [r7, #16]
 801dd88:	9e04      	ldr	r6, [sp, #16]
 801dd8a:	1a40      	subs	r0, r0, r1
 801dd8c:	9905      	ldr	r1, [sp, #20]
 801dd8e:	0140      	lsls	r0, r0, #5
 801dd90:	1a71      	subs	r1, r6, r1
 801dd92:	1841      	adds	r1, r0, r1
 801dd94:	0508      	lsls	r0, r1, #20
 801dd96:	2900      	cmp	r1, #0
 801dd98:	dd08      	ble.n	801ddac <__ratio+0x50>
 801dd9a:	9901      	ldr	r1, [sp, #4]
 801dd9c:	1841      	adds	r1, r0, r1
 801dd9e:	9103      	str	r1, [sp, #12]
 801dda0:	9802      	ldr	r0, [sp, #8]
 801dda2:	9903      	ldr	r1, [sp, #12]
 801dda4:	f7e4 f806 	bl	8001db4 <__aeabi_ddiv>
 801dda8:	b007      	add	sp, #28
 801ddaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddac:	1a2b      	subs	r3, r5, r0
 801ddae:	e7f7      	b.n	801dda0 <__ratio+0x44>

0801ddb0 <__copybits>:
 801ddb0:	b570      	push	{r4, r5, r6, lr}
 801ddb2:	0014      	movs	r4, r2
 801ddb4:	0005      	movs	r5, r0
 801ddb6:	3901      	subs	r1, #1
 801ddb8:	6913      	ldr	r3, [r2, #16]
 801ddba:	1149      	asrs	r1, r1, #5
 801ddbc:	3101      	adds	r1, #1
 801ddbe:	0089      	lsls	r1, r1, #2
 801ddc0:	3414      	adds	r4, #20
 801ddc2:	009b      	lsls	r3, r3, #2
 801ddc4:	1841      	adds	r1, r0, r1
 801ddc6:	18e3      	adds	r3, r4, r3
 801ddc8:	42a3      	cmp	r3, r4
 801ddca:	d80d      	bhi.n	801dde8 <__copybits+0x38>
 801ddcc:	0014      	movs	r4, r2
 801ddce:	3411      	adds	r4, #17
 801ddd0:	2500      	movs	r5, #0
 801ddd2:	429c      	cmp	r4, r3
 801ddd4:	d803      	bhi.n	801ddde <__copybits+0x2e>
 801ddd6:	1a9b      	subs	r3, r3, r2
 801ddd8:	3b11      	subs	r3, #17
 801ddda:	089b      	lsrs	r3, r3, #2
 801dddc:	009d      	lsls	r5, r3, #2
 801ddde:	2300      	movs	r3, #0
 801dde0:	1940      	adds	r0, r0, r5
 801dde2:	4281      	cmp	r1, r0
 801dde4:	d803      	bhi.n	801ddee <__copybits+0x3e>
 801dde6:	bd70      	pop	{r4, r5, r6, pc}
 801dde8:	cc40      	ldmia	r4!, {r6}
 801ddea:	c540      	stmia	r5!, {r6}
 801ddec:	e7ec      	b.n	801ddc8 <__copybits+0x18>
 801ddee:	c008      	stmia	r0!, {r3}
 801ddf0:	e7f7      	b.n	801dde2 <__copybits+0x32>

0801ddf2 <__any_on>:
 801ddf2:	0002      	movs	r2, r0
 801ddf4:	6900      	ldr	r0, [r0, #16]
 801ddf6:	b510      	push	{r4, lr}
 801ddf8:	3214      	adds	r2, #20
 801ddfa:	114b      	asrs	r3, r1, #5
 801ddfc:	4298      	cmp	r0, r3
 801ddfe:	db13      	blt.n	801de28 <__any_on+0x36>
 801de00:	dd0c      	ble.n	801de1c <__any_on+0x2a>
 801de02:	241f      	movs	r4, #31
 801de04:	0008      	movs	r0, r1
 801de06:	4020      	ands	r0, r4
 801de08:	4221      	tst	r1, r4
 801de0a:	d007      	beq.n	801de1c <__any_on+0x2a>
 801de0c:	0099      	lsls	r1, r3, #2
 801de0e:	588c      	ldr	r4, [r1, r2]
 801de10:	0021      	movs	r1, r4
 801de12:	40c1      	lsrs	r1, r0
 801de14:	4081      	lsls	r1, r0
 801de16:	2001      	movs	r0, #1
 801de18:	428c      	cmp	r4, r1
 801de1a:	d104      	bne.n	801de26 <__any_on+0x34>
 801de1c:	009b      	lsls	r3, r3, #2
 801de1e:	18d3      	adds	r3, r2, r3
 801de20:	4293      	cmp	r3, r2
 801de22:	d803      	bhi.n	801de2c <__any_on+0x3a>
 801de24:	2000      	movs	r0, #0
 801de26:	bd10      	pop	{r4, pc}
 801de28:	0003      	movs	r3, r0
 801de2a:	e7f7      	b.n	801de1c <__any_on+0x2a>
 801de2c:	3b04      	subs	r3, #4
 801de2e:	6819      	ldr	r1, [r3, #0]
 801de30:	2900      	cmp	r1, #0
 801de32:	d0f5      	beq.n	801de20 <__any_on+0x2e>
 801de34:	2001      	movs	r0, #1
 801de36:	e7f6      	b.n	801de26 <__any_on+0x34>

0801de38 <__ascii_wctomb>:
 801de38:	0003      	movs	r3, r0
 801de3a:	1e08      	subs	r0, r1, #0
 801de3c:	d005      	beq.n	801de4a <__ascii_wctomb+0x12>
 801de3e:	2aff      	cmp	r2, #255	@ 0xff
 801de40:	d904      	bls.n	801de4c <__ascii_wctomb+0x14>
 801de42:	228a      	movs	r2, #138	@ 0x8a
 801de44:	2001      	movs	r0, #1
 801de46:	601a      	str	r2, [r3, #0]
 801de48:	4240      	negs	r0, r0
 801de4a:	4770      	bx	lr
 801de4c:	2001      	movs	r0, #1
 801de4e:	700a      	strb	r2, [r1, #0]
 801de50:	e7fb      	b.n	801de4a <__ascii_wctomb+0x12>
	...

0801de54 <__ssputs_r>:
 801de54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de56:	688e      	ldr	r6, [r1, #8]
 801de58:	b085      	sub	sp, #20
 801de5a:	001f      	movs	r7, r3
 801de5c:	000c      	movs	r4, r1
 801de5e:	680b      	ldr	r3, [r1, #0]
 801de60:	9002      	str	r0, [sp, #8]
 801de62:	9203      	str	r2, [sp, #12]
 801de64:	42be      	cmp	r6, r7
 801de66:	d830      	bhi.n	801deca <__ssputs_r+0x76>
 801de68:	210c      	movs	r1, #12
 801de6a:	5e62      	ldrsh	r2, [r4, r1]
 801de6c:	2190      	movs	r1, #144	@ 0x90
 801de6e:	00c9      	lsls	r1, r1, #3
 801de70:	420a      	tst	r2, r1
 801de72:	d028      	beq.n	801dec6 <__ssputs_r+0x72>
 801de74:	2003      	movs	r0, #3
 801de76:	6921      	ldr	r1, [r4, #16]
 801de78:	1a5b      	subs	r3, r3, r1
 801de7a:	9301      	str	r3, [sp, #4]
 801de7c:	6963      	ldr	r3, [r4, #20]
 801de7e:	4343      	muls	r3, r0
 801de80:	9801      	ldr	r0, [sp, #4]
 801de82:	0fdd      	lsrs	r5, r3, #31
 801de84:	18ed      	adds	r5, r5, r3
 801de86:	1c7b      	adds	r3, r7, #1
 801de88:	181b      	adds	r3, r3, r0
 801de8a:	106d      	asrs	r5, r5, #1
 801de8c:	42ab      	cmp	r3, r5
 801de8e:	d900      	bls.n	801de92 <__ssputs_r+0x3e>
 801de90:	001d      	movs	r5, r3
 801de92:	0552      	lsls	r2, r2, #21
 801de94:	d528      	bpl.n	801dee8 <__ssputs_r+0x94>
 801de96:	0029      	movs	r1, r5
 801de98:	9802      	ldr	r0, [sp, #8]
 801de9a:	f7ff fa61 	bl	801d360 <_malloc_r>
 801de9e:	1e06      	subs	r6, r0, #0
 801dea0:	d02c      	beq.n	801defc <__ssputs_r+0xa8>
 801dea2:	9a01      	ldr	r2, [sp, #4]
 801dea4:	6921      	ldr	r1, [r4, #16]
 801dea6:	f7fd fff9 	bl	801be9c <memcpy>
 801deaa:	89a2      	ldrh	r2, [r4, #12]
 801deac:	4b18      	ldr	r3, [pc, #96]	@ (801df10 <__ssputs_r+0xbc>)
 801deae:	401a      	ands	r2, r3
 801deb0:	2380      	movs	r3, #128	@ 0x80
 801deb2:	4313      	orrs	r3, r2
 801deb4:	81a3      	strh	r3, [r4, #12]
 801deb6:	9b01      	ldr	r3, [sp, #4]
 801deb8:	6126      	str	r6, [r4, #16]
 801deba:	18f6      	adds	r6, r6, r3
 801debc:	6026      	str	r6, [r4, #0]
 801debe:	003e      	movs	r6, r7
 801dec0:	6165      	str	r5, [r4, #20]
 801dec2:	1aed      	subs	r5, r5, r3
 801dec4:	60a5      	str	r5, [r4, #8]
 801dec6:	42be      	cmp	r6, r7
 801dec8:	d900      	bls.n	801decc <__ssputs_r+0x78>
 801deca:	003e      	movs	r6, r7
 801decc:	0032      	movs	r2, r6
 801dece:	9903      	ldr	r1, [sp, #12]
 801ded0:	6820      	ldr	r0, [r4, #0]
 801ded2:	f000 fbb3 	bl	801e63c <memmove>
 801ded6:	2000      	movs	r0, #0
 801ded8:	68a3      	ldr	r3, [r4, #8]
 801deda:	1b9b      	subs	r3, r3, r6
 801dedc:	60a3      	str	r3, [r4, #8]
 801dede:	6823      	ldr	r3, [r4, #0]
 801dee0:	199b      	adds	r3, r3, r6
 801dee2:	6023      	str	r3, [r4, #0]
 801dee4:	b005      	add	sp, #20
 801dee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dee8:	002a      	movs	r2, r5
 801deea:	9802      	ldr	r0, [sp, #8]
 801deec:	f000 fc17 	bl	801e71e <_realloc_r>
 801def0:	1e06      	subs	r6, r0, #0
 801def2:	d1e0      	bne.n	801deb6 <__ssputs_r+0x62>
 801def4:	6921      	ldr	r1, [r4, #16]
 801def6:	9802      	ldr	r0, [sp, #8]
 801def8:	f7fe fe62 	bl	801cbc0 <_free_r>
 801defc:	230c      	movs	r3, #12
 801defe:	2001      	movs	r0, #1
 801df00:	9a02      	ldr	r2, [sp, #8]
 801df02:	4240      	negs	r0, r0
 801df04:	6013      	str	r3, [r2, #0]
 801df06:	89a2      	ldrh	r2, [r4, #12]
 801df08:	3334      	adds	r3, #52	@ 0x34
 801df0a:	4313      	orrs	r3, r2
 801df0c:	81a3      	strh	r3, [r4, #12]
 801df0e:	e7e9      	b.n	801dee4 <__ssputs_r+0x90>
 801df10:	fffffb7f 	.word	0xfffffb7f

0801df14 <_svfiprintf_r>:
 801df14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df16:	b0a1      	sub	sp, #132	@ 0x84
 801df18:	9003      	str	r0, [sp, #12]
 801df1a:	001d      	movs	r5, r3
 801df1c:	898b      	ldrh	r3, [r1, #12]
 801df1e:	000f      	movs	r7, r1
 801df20:	0016      	movs	r6, r2
 801df22:	061b      	lsls	r3, r3, #24
 801df24:	d511      	bpl.n	801df4a <_svfiprintf_r+0x36>
 801df26:	690b      	ldr	r3, [r1, #16]
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d10e      	bne.n	801df4a <_svfiprintf_r+0x36>
 801df2c:	2140      	movs	r1, #64	@ 0x40
 801df2e:	f7ff fa17 	bl	801d360 <_malloc_r>
 801df32:	6038      	str	r0, [r7, #0]
 801df34:	6138      	str	r0, [r7, #16]
 801df36:	2800      	cmp	r0, #0
 801df38:	d105      	bne.n	801df46 <_svfiprintf_r+0x32>
 801df3a:	230c      	movs	r3, #12
 801df3c:	9a03      	ldr	r2, [sp, #12]
 801df3e:	6013      	str	r3, [r2, #0]
 801df40:	2001      	movs	r0, #1
 801df42:	4240      	negs	r0, r0
 801df44:	e0cf      	b.n	801e0e6 <_svfiprintf_r+0x1d2>
 801df46:	2340      	movs	r3, #64	@ 0x40
 801df48:	617b      	str	r3, [r7, #20]
 801df4a:	2300      	movs	r3, #0
 801df4c:	ac08      	add	r4, sp, #32
 801df4e:	6163      	str	r3, [r4, #20]
 801df50:	3320      	adds	r3, #32
 801df52:	7663      	strb	r3, [r4, #25]
 801df54:	3310      	adds	r3, #16
 801df56:	76a3      	strb	r3, [r4, #26]
 801df58:	9507      	str	r5, [sp, #28]
 801df5a:	0035      	movs	r5, r6
 801df5c:	782b      	ldrb	r3, [r5, #0]
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d001      	beq.n	801df66 <_svfiprintf_r+0x52>
 801df62:	2b25      	cmp	r3, #37	@ 0x25
 801df64:	d148      	bne.n	801dff8 <_svfiprintf_r+0xe4>
 801df66:	1bab      	subs	r3, r5, r6
 801df68:	9305      	str	r3, [sp, #20]
 801df6a:	42b5      	cmp	r5, r6
 801df6c:	d00b      	beq.n	801df86 <_svfiprintf_r+0x72>
 801df6e:	0032      	movs	r2, r6
 801df70:	0039      	movs	r1, r7
 801df72:	9803      	ldr	r0, [sp, #12]
 801df74:	f7ff ff6e 	bl	801de54 <__ssputs_r>
 801df78:	3001      	adds	r0, #1
 801df7a:	d100      	bne.n	801df7e <_svfiprintf_r+0x6a>
 801df7c:	e0ae      	b.n	801e0dc <_svfiprintf_r+0x1c8>
 801df7e:	6963      	ldr	r3, [r4, #20]
 801df80:	9a05      	ldr	r2, [sp, #20]
 801df82:	189b      	adds	r3, r3, r2
 801df84:	6163      	str	r3, [r4, #20]
 801df86:	782b      	ldrb	r3, [r5, #0]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d100      	bne.n	801df8e <_svfiprintf_r+0x7a>
 801df8c:	e0a6      	b.n	801e0dc <_svfiprintf_r+0x1c8>
 801df8e:	2201      	movs	r2, #1
 801df90:	2300      	movs	r3, #0
 801df92:	4252      	negs	r2, r2
 801df94:	6062      	str	r2, [r4, #4]
 801df96:	a904      	add	r1, sp, #16
 801df98:	3254      	adds	r2, #84	@ 0x54
 801df9a:	1852      	adds	r2, r2, r1
 801df9c:	1c6e      	adds	r6, r5, #1
 801df9e:	6023      	str	r3, [r4, #0]
 801dfa0:	60e3      	str	r3, [r4, #12]
 801dfa2:	60a3      	str	r3, [r4, #8]
 801dfa4:	7013      	strb	r3, [r2, #0]
 801dfa6:	65a3      	str	r3, [r4, #88]	@ 0x58
 801dfa8:	4b54      	ldr	r3, [pc, #336]	@ (801e0fc <_svfiprintf_r+0x1e8>)
 801dfaa:	2205      	movs	r2, #5
 801dfac:	0018      	movs	r0, r3
 801dfae:	7831      	ldrb	r1, [r6, #0]
 801dfb0:	9305      	str	r3, [sp, #20]
 801dfb2:	f7fd ff68 	bl	801be86 <memchr>
 801dfb6:	1c75      	adds	r5, r6, #1
 801dfb8:	2800      	cmp	r0, #0
 801dfba:	d11f      	bne.n	801dffc <_svfiprintf_r+0xe8>
 801dfbc:	6822      	ldr	r2, [r4, #0]
 801dfbe:	06d3      	lsls	r3, r2, #27
 801dfc0:	d504      	bpl.n	801dfcc <_svfiprintf_r+0xb8>
 801dfc2:	2353      	movs	r3, #83	@ 0x53
 801dfc4:	a904      	add	r1, sp, #16
 801dfc6:	185b      	adds	r3, r3, r1
 801dfc8:	2120      	movs	r1, #32
 801dfca:	7019      	strb	r1, [r3, #0]
 801dfcc:	0713      	lsls	r3, r2, #28
 801dfce:	d504      	bpl.n	801dfda <_svfiprintf_r+0xc6>
 801dfd0:	2353      	movs	r3, #83	@ 0x53
 801dfd2:	a904      	add	r1, sp, #16
 801dfd4:	185b      	adds	r3, r3, r1
 801dfd6:	212b      	movs	r1, #43	@ 0x2b
 801dfd8:	7019      	strb	r1, [r3, #0]
 801dfda:	7833      	ldrb	r3, [r6, #0]
 801dfdc:	2b2a      	cmp	r3, #42	@ 0x2a
 801dfde:	d016      	beq.n	801e00e <_svfiprintf_r+0xfa>
 801dfe0:	0035      	movs	r5, r6
 801dfe2:	2100      	movs	r1, #0
 801dfe4:	200a      	movs	r0, #10
 801dfe6:	68e3      	ldr	r3, [r4, #12]
 801dfe8:	782a      	ldrb	r2, [r5, #0]
 801dfea:	1c6e      	adds	r6, r5, #1
 801dfec:	3a30      	subs	r2, #48	@ 0x30
 801dfee:	2a09      	cmp	r2, #9
 801dff0:	d950      	bls.n	801e094 <_svfiprintf_r+0x180>
 801dff2:	2900      	cmp	r1, #0
 801dff4:	d111      	bne.n	801e01a <_svfiprintf_r+0x106>
 801dff6:	e017      	b.n	801e028 <_svfiprintf_r+0x114>
 801dff8:	3501      	adds	r5, #1
 801dffa:	e7af      	b.n	801df5c <_svfiprintf_r+0x48>
 801dffc:	9b05      	ldr	r3, [sp, #20]
 801dffe:	6822      	ldr	r2, [r4, #0]
 801e000:	1ac0      	subs	r0, r0, r3
 801e002:	2301      	movs	r3, #1
 801e004:	4083      	lsls	r3, r0
 801e006:	4313      	orrs	r3, r2
 801e008:	002e      	movs	r6, r5
 801e00a:	6023      	str	r3, [r4, #0]
 801e00c:	e7cc      	b.n	801dfa8 <_svfiprintf_r+0x94>
 801e00e:	9b07      	ldr	r3, [sp, #28]
 801e010:	1d19      	adds	r1, r3, #4
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	9107      	str	r1, [sp, #28]
 801e016:	2b00      	cmp	r3, #0
 801e018:	db01      	blt.n	801e01e <_svfiprintf_r+0x10a>
 801e01a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e01c:	e004      	b.n	801e028 <_svfiprintf_r+0x114>
 801e01e:	425b      	negs	r3, r3
 801e020:	60e3      	str	r3, [r4, #12]
 801e022:	2302      	movs	r3, #2
 801e024:	4313      	orrs	r3, r2
 801e026:	6023      	str	r3, [r4, #0]
 801e028:	782b      	ldrb	r3, [r5, #0]
 801e02a:	2b2e      	cmp	r3, #46	@ 0x2e
 801e02c:	d10c      	bne.n	801e048 <_svfiprintf_r+0x134>
 801e02e:	786b      	ldrb	r3, [r5, #1]
 801e030:	2b2a      	cmp	r3, #42	@ 0x2a
 801e032:	d134      	bne.n	801e09e <_svfiprintf_r+0x18a>
 801e034:	9b07      	ldr	r3, [sp, #28]
 801e036:	3502      	adds	r5, #2
 801e038:	1d1a      	adds	r2, r3, #4
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	9207      	str	r2, [sp, #28]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	da01      	bge.n	801e046 <_svfiprintf_r+0x132>
 801e042:	2301      	movs	r3, #1
 801e044:	425b      	negs	r3, r3
 801e046:	9309      	str	r3, [sp, #36]	@ 0x24
 801e048:	4e2d      	ldr	r6, [pc, #180]	@ (801e100 <_svfiprintf_r+0x1ec>)
 801e04a:	2203      	movs	r2, #3
 801e04c:	0030      	movs	r0, r6
 801e04e:	7829      	ldrb	r1, [r5, #0]
 801e050:	f7fd ff19 	bl	801be86 <memchr>
 801e054:	2800      	cmp	r0, #0
 801e056:	d006      	beq.n	801e066 <_svfiprintf_r+0x152>
 801e058:	2340      	movs	r3, #64	@ 0x40
 801e05a:	1b80      	subs	r0, r0, r6
 801e05c:	4083      	lsls	r3, r0
 801e05e:	6822      	ldr	r2, [r4, #0]
 801e060:	3501      	adds	r5, #1
 801e062:	4313      	orrs	r3, r2
 801e064:	6023      	str	r3, [r4, #0]
 801e066:	7829      	ldrb	r1, [r5, #0]
 801e068:	2206      	movs	r2, #6
 801e06a:	4826      	ldr	r0, [pc, #152]	@ (801e104 <_svfiprintf_r+0x1f0>)
 801e06c:	1c6e      	adds	r6, r5, #1
 801e06e:	7621      	strb	r1, [r4, #24]
 801e070:	f7fd ff09 	bl	801be86 <memchr>
 801e074:	2800      	cmp	r0, #0
 801e076:	d038      	beq.n	801e0ea <_svfiprintf_r+0x1d6>
 801e078:	4b23      	ldr	r3, [pc, #140]	@ (801e108 <_svfiprintf_r+0x1f4>)
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d122      	bne.n	801e0c4 <_svfiprintf_r+0x1b0>
 801e07e:	2207      	movs	r2, #7
 801e080:	9b07      	ldr	r3, [sp, #28]
 801e082:	3307      	adds	r3, #7
 801e084:	4393      	bics	r3, r2
 801e086:	3308      	adds	r3, #8
 801e088:	9307      	str	r3, [sp, #28]
 801e08a:	6963      	ldr	r3, [r4, #20]
 801e08c:	9a04      	ldr	r2, [sp, #16]
 801e08e:	189b      	adds	r3, r3, r2
 801e090:	6163      	str	r3, [r4, #20]
 801e092:	e762      	b.n	801df5a <_svfiprintf_r+0x46>
 801e094:	4343      	muls	r3, r0
 801e096:	0035      	movs	r5, r6
 801e098:	2101      	movs	r1, #1
 801e09a:	189b      	adds	r3, r3, r2
 801e09c:	e7a4      	b.n	801dfe8 <_svfiprintf_r+0xd4>
 801e09e:	2300      	movs	r3, #0
 801e0a0:	200a      	movs	r0, #10
 801e0a2:	0019      	movs	r1, r3
 801e0a4:	3501      	adds	r5, #1
 801e0a6:	6063      	str	r3, [r4, #4]
 801e0a8:	782a      	ldrb	r2, [r5, #0]
 801e0aa:	1c6e      	adds	r6, r5, #1
 801e0ac:	3a30      	subs	r2, #48	@ 0x30
 801e0ae:	2a09      	cmp	r2, #9
 801e0b0:	d903      	bls.n	801e0ba <_svfiprintf_r+0x1a6>
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d0c8      	beq.n	801e048 <_svfiprintf_r+0x134>
 801e0b6:	9109      	str	r1, [sp, #36]	@ 0x24
 801e0b8:	e7c6      	b.n	801e048 <_svfiprintf_r+0x134>
 801e0ba:	4341      	muls	r1, r0
 801e0bc:	0035      	movs	r5, r6
 801e0be:	2301      	movs	r3, #1
 801e0c0:	1889      	adds	r1, r1, r2
 801e0c2:	e7f1      	b.n	801e0a8 <_svfiprintf_r+0x194>
 801e0c4:	aa07      	add	r2, sp, #28
 801e0c6:	9200      	str	r2, [sp, #0]
 801e0c8:	0021      	movs	r1, r4
 801e0ca:	003a      	movs	r2, r7
 801e0cc:	4b0f      	ldr	r3, [pc, #60]	@ (801e10c <_svfiprintf_r+0x1f8>)
 801e0ce:	9803      	ldr	r0, [sp, #12]
 801e0d0:	f7fd f8d4 	bl	801b27c <_printf_float>
 801e0d4:	9004      	str	r0, [sp, #16]
 801e0d6:	9b04      	ldr	r3, [sp, #16]
 801e0d8:	3301      	adds	r3, #1
 801e0da:	d1d6      	bne.n	801e08a <_svfiprintf_r+0x176>
 801e0dc:	89bb      	ldrh	r3, [r7, #12]
 801e0de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e0e0:	065b      	lsls	r3, r3, #25
 801e0e2:	d500      	bpl.n	801e0e6 <_svfiprintf_r+0x1d2>
 801e0e4:	e72c      	b.n	801df40 <_svfiprintf_r+0x2c>
 801e0e6:	b021      	add	sp, #132	@ 0x84
 801e0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0ea:	aa07      	add	r2, sp, #28
 801e0ec:	9200      	str	r2, [sp, #0]
 801e0ee:	0021      	movs	r1, r4
 801e0f0:	003a      	movs	r2, r7
 801e0f2:	4b06      	ldr	r3, [pc, #24]	@ (801e10c <_svfiprintf_r+0x1f8>)
 801e0f4:	9803      	ldr	r0, [sp, #12]
 801e0f6:	f7fd fb6f 	bl	801b7d8 <_printf_i>
 801e0fa:	e7eb      	b.n	801e0d4 <_svfiprintf_r+0x1c0>
 801e0fc:	08020a08 	.word	0x08020a08
 801e100:	08020a0e 	.word	0x08020a0e
 801e104:	08020a12 	.word	0x08020a12
 801e108:	0801b27d 	.word	0x0801b27d
 801e10c:	0801de55 	.word	0x0801de55

0801e110 <__sfputc_r>:
 801e110:	6893      	ldr	r3, [r2, #8]
 801e112:	b510      	push	{r4, lr}
 801e114:	3b01      	subs	r3, #1
 801e116:	6093      	str	r3, [r2, #8]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	da04      	bge.n	801e126 <__sfputc_r+0x16>
 801e11c:	6994      	ldr	r4, [r2, #24]
 801e11e:	42a3      	cmp	r3, r4
 801e120:	db07      	blt.n	801e132 <__sfputc_r+0x22>
 801e122:	290a      	cmp	r1, #10
 801e124:	d005      	beq.n	801e132 <__sfputc_r+0x22>
 801e126:	6813      	ldr	r3, [r2, #0]
 801e128:	1c58      	adds	r0, r3, #1
 801e12a:	6010      	str	r0, [r2, #0]
 801e12c:	7019      	strb	r1, [r3, #0]
 801e12e:	0008      	movs	r0, r1
 801e130:	bd10      	pop	{r4, pc}
 801e132:	f000 f9e2 	bl	801e4fa <__swbuf_r>
 801e136:	0001      	movs	r1, r0
 801e138:	e7f9      	b.n	801e12e <__sfputc_r+0x1e>

0801e13a <__sfputs_r>:
 801e13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e13c:	0006      	movs	r6, r0
 801e13e:	000f      	movs	r7, r1
 801e140:	0014      	movs	r4, r2
 801e142:	18d5      	adds	r5, r2, r3
 801e144:	42ac      	cmp	r4, r5
 801e146:	d101      	bne.n	801e14c <__sfputs_r+0x12>
 801e148:	2000      	movs	r0, #0
 801e14a:	e007      	b.n	801e15c <__sfputs_r+0x22>
 801e14c:	7821      	ldrb	r1, [r4, #0]
 801e14e:	003a      	movs	r2, r7
 801e150:	0030      	movs	r0, r6
 801e152:	f7ff ffdd 	bl	801e110 <__sfputc_r>
 801e156:	3401      	adds	r4, #1
 801e158:	1c43      	adds	r3, r0, #1
 801e15a:	d1f3      	bne.n	801e144 <__sfputs_r+0xa>
 801e15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e160 <_vfiprintf_r>:
 801e160:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e162:	b0a1      	sub	sp, #132	@ 0x84
 801e164:	000f      	movs	r7, r1
 801e166:	0015      	movs	r5, r2
 801e168:	001e      	movs	r6, r3
 801e16a:	9003      	str	r0, [sp, #12]
 801e16c:	2800      	cmp	r0, #0
 801e16e:	d004      	beq.n	801e17a <_vfiprintf_r+0x1a>
 801e170:	6a03      	ldr	r3, [r0, #32]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d101      	bne.n	801e17a <_vfiprintf_r+0x1a>
 801e176:	f7fd fccd 	bl	801bb14 <__sinit>
 801e17a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e17c:	07db      	lsls	r3, r3, #31
 801e17e:	d405      	bmi.n	801e18c <_vfiprintf_r+0x2c>
 801e180:	89bb      	ldrh	r3, [r7, #12]
 801e182:	059b      	lsls	r3, r3, #22
 801e184:	d402      	bmi.n	801e18c <_vfiprintf_r+0x2c>
 801e186:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e188:	f7fd fe7b 	bl	801be82 <__retarget_lock_acquire_recursive>
 801e18c:	89bb      	ldrh	r3, [r7, #12]
 801e18e:	071b      	lsls	r3, r3, #28
 801e190:	d502      	bpl.n	801e198 <_vfiprintf_r+0x38>
 801e192:	693b      	ldr	r3, [r7, #16]
 801e194:	2b00      	cmp	r3, #0
 801e196:	d113      	bne.n	801e1c0 <_vfiprintf_r+0x60>
 801e198:	0039      	movs	r1, r7
 801e19a:	9803      	ldr	r0, [sp, #12]
 801e19c:	f000 f9f0 	bl	801e580 <__swsetup_r>
 801e1a0:	2800      	cmp	r0, #0
 801e1a2:	d00d      	beq.n	801e1c0 <_vfiprintf_r+0x60>
 801e1a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e1a6:	07db      	lsls	r3, r3, #31
 801e1a8:	d503      	bpl.n	801e1b2 <_vfiprintf_r+0x52>
 801e1aa:	2001      	movs	r0, #1
 801e1ac:	4240      	negs	r0, r0
 801e1ae:	b021      	add	sp, #132	@ 0x84
 801e1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1b2:	89bb      	ldrh	r3, [r7, #12]
 801e1b4:	059b      	lsls	r3, r3, #22
 801e1b6:	d4f8      	bmi.n	801e1aa <_vfiprintf_r+0x4a>
 801e1b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e1ba:	f7fd fe63 	bl	801be84 <__retarget_lock_release_recursive>
 801e1be:	e7f4      	b.n	801e1aa <_vfiprintf_r+0x4a>
 801e1c0:	2300      	movs	r3, #0
 801e1c2:	ac08      	add	r4, sp, #32
 801e1c4:	6163      	str	r3, [r4, #20]
 801e1c6:	3320      	adds	r3, #32
 801e1c8:	7663      	strb	r3, [r4, #25]
 801e1ca:	3310      	adds	r3, #16
 801e1cc:	76a3      	strb	r3, [r4, #26]
 801e1ce:	9607      	str	r6, [sp, #28]
 801e1d0:	002e      	movs	r6, r5
 801e1d2:	7833      	ldrb	r3, [r6, #0]
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	d001      	beq.n	801e1dc <_vfiprintf_r+0x7c>
 801e1d8:	2b25      	cmp	r3, #37	@ 0x25
 801e1da:	d148      	bne.n	801e26e <_vfiprintf_r+0x10e>
 801e1dc:	1b73      	subs	r3, r6, r5
 801e1de:	9305      	str	r3, [sp, #20]
 801e1e0:	42ae      	cmp	r6, r5
 801e1e2:	d00b      	beq.n	801e1fc <_vfiprintf_r+0x9c>
 801e1e4:	002a      	movs	r2, r5
 801e1e6:	0039      	movs	r1, r7
 801e1e8:	9803      	ldr	r0, [sp, #12]
 801e1ea:	f7ff ffa6 	bl	801e13a <__sfputs_r>
 801e1ee:	3001      	adds	r0, #1
 801e1f0:	d100      	bne.n	801e1f4 <_vfiprintf_r+0x94>
 801e1f2:	e0ae      	b.n	801e352 <_vfiprintf_r+0x1f2>
 801e1f4:	6963      	ldr	r3, [r4, #20]
 801e1f6:	9a05      	ldr	r2, [sp, #20]
 801e1f8:	189b      	adds	r3, r3, r2
 801e1fa:	6163      	str	r3, [r4, #20]
 801e1fc:	7833      	ldrb	r3, [r6, #0]
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d100      	bne.n	801e204 <_vfiprintf_r+0xa4>
 801e202:	e0a6      	b.n	801e352 <_vfiprintf_r+0x1f2>
 801e204:	2201      	movs	r2, #1
 801e206:	2300      	movs	r3, #0
 801e208:	4252      	negs	r2, r2
 801e20a:	6062      	str	r2, [r4, #4]
 801e20c:	a904      	add	r1, sp, #16
 801e20e:	3254      	adds	r2, #84	@ 0x54
 801e210:	1852      	adds	r2, r2, r1
 801e212:	1c75      	adds	r5, r6, #1
 801e214:	6023      	str	r3, [r4, #0]
 801e216:	60e3      	str	r3, [r4, #12]
 801e218:	60a3      	str	r3, [r4, #8]
 801e21a:	7013      	strb	r3, [r2, #0]
 801e21c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801e21e:	4b59      	ldr	r3, [pc, #356]	@ (801e384 <_vfiprintf_r+0x224>)
 801e220:	2205      	movs	r2, #5
 801e222:	0018      	movs	r0, r3
 801e224:	7829      	ldrb	r1, [r5, #0]
 801e226:	9305      	str	r3, [sp, #20]
 801e228:	f7fd fe2d 	bl	801be86 <memchr>
 801e22c:	1c6e      	adds	r6, r5, #1
 801e22e:	2800      	cmp	r0, #0
 801e230:	d11f      	bne.n	801e272 <_vfiprintf_r+0x112>
 801e232:	6822      	ldr	r2, [r4, #0]
 801e234:	06d3      	lsls	r3, r2, #27
 801e236:	d504      	bpl.n	801e242 <_vfiprintf_r+0xe2>
 801e238:	2353      	movs	r3, #83	@ 0x53
 801e23a:	a904      	add	r1, sp, #16
 801e23c:	185b      	adds	r3, r3, r1
 801e23e:	2120      	movs	r1, #32
 801e240:	7019      	strb	r1, [r3, #0]
 801e242:	0713      	lsls	r3, r2, #28
 801e244:	d504      	bpl.n	801e250 <_vfiprintf_r+0xf0>
 801e246:	2353      	movs	r3, #83	@ 0x53
 801e248:	a904      	add	r1, sp, #16
 801e24a:	185b      	adds	r3, r3, r1
 801e24c:	212b      	movs	r1, #43	@ 0x2b
 801e24e:	7019      	strb	r1, [r3, #0]
 801e250:	782b      	ldrb	r3, [r5, #0]
 801e252:	2b2a      	cmp	r3, #42	@ 0x2a
 801e254:	d016      	beq.n	801e284 <_vfiprintf_r+0x124>
 801e256:	002e      	movs	r6, r5
 801e258:	2100      	movs	r1, #0
 801e25a:	200a      	movs	r0, #10
 801e25c:	68e3      	ldr	r3, [r4, #12]
 801e25e:	7832      	ldrb	r2, [r6, #0]
 801e260:	1c75      	adds	r5, r6, #1
 801e262:	3a30      	subs	r2, #48	@ 0x30
 801e264:	2a09      	cmp	r2, #9
 801e266:	d950      	bls.n	801e30a <_vfiprintf_r+0x1aa>
 801e268:	2900      	cmp	r1, #0
 801e26a:	d111      	bne.n	801e290 <_vfiprintf_r+0x130>
 801e26c:	e017      	b.n	801e29e <_vfiprintf_r+0x13e>
 801e26e:	3601      	adds	r6, #1
 801e270:	e7af      	b.n	801e1d2 <_vfiprintf_r+0x72>
 801e272:	9b05      	ldr	r3, [sp, #20]
 801e274:	6822      	ldr	r2, [r4, #0]
 801e276:	1ac0      	subs	r0, r0, r3
 801e278:	2301      	movs	r3, #1
 801e27a:	4083      	lsls	r3, r0
 801e27c:	4313      	orrs	r3, r2
 801e27e:	0035      	movs	r5, r6
 801e280:	6023      	str	r3, [r4, #0]
 801e282:	e7cc      	b.n	801e21e <_vfiprintf_r+0xbe>
 801e284:	9b07      	ldr	r3, [sp, #28]
 801e286:	1d19      	adds	r1, r3, #4
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	9107      	str	r1, [sp, #28]
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	db01      	blt.n	801e294 <_vfiprintf_r+0x134>
 801e290:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e292:	e004      	b.n	801e29e <_vfiprintf_r+0x13e>
 801e294:	425b      	negs	r3, r3
 801e296:	60e3      	str	r3, [r4, #12]
 801e298:	2302      	movs	r3, #2
 801e29a:	4313      	orrs	r3, r2
 801e29c:	6023      	str	r3, [r4, #0]
 801e29e:	7833      	ldrb	r3, [r6, #0]
 801e2a0:	2b2e      	cmp	r3, #46	@ 0x2e
 801e2a2:	d10c      	bne.n	801e2be <_vfiprintf_r+0x15e>
 801e2a4:	7873      	ldrb	r3, [r6, #1]
 801e2a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801e2a8:	d134      	bne.n	801e314 <_vfiprintf_r+0x1b4>
 801e2aa:	9b07      	ldr	r3, [sp, #28]
 801e2ac:	3602      	adds	r6, #2
 801e2ae:	1d1a      	adds	r2, r3, #4
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	9207      	str	r2, [sp, #28]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	da01      	bge.n	801e2bc <_vfiprintf_r+0x15c>
 801e2b8:	2301      	movs	r3, #1
 801e2ba:	425b      	negs	r3, r3
 801e2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2be:	4d32      	ldr	r5, [pc, #200]	@ (801e388 <_vfiprintf_r+0x228>)
 801e2c0:	2203      	movs	r2, #3
 801e2c2:	0028      	movs	r0, r5
 801e2c4:	7831      	ldrb	r1, [r6, #0]
 801e2c6:	f7fd fdde 	bl	801be86 <memchr>
 801e2ca:	2800      	cmp	r0, #0
 801e2cc:	d006      	beq.n	801e2dc <_vfiprintf_r+0x17c>
 801e2ce:	2340      	movs	r3, #64	@ 0x40
 801e2d0:	1b40      	subs	r0, r0, r5
 801e2d2:	4083      	lsls	r3, r0
 801e2d4:	6822      	ldr	r2, [r4, #0]
 801e2d6:	3601      	adds	r6, #1
 801e2d8:	4313      	orrs	r3, r2
 801e2da:	6023      	str	r3, [r4, #0]
 801e2dc:	7831      	ldrb	r1, [r6, #0]
 801e2de:	2206      	movs	r2, #6
 801e2e0:	482a      	ldr	r0, [pc, #168]	@ (801e38c <_vfiprintf_r+0x22c>)
 801e2e2:	1c75      	adds	r5, r6, #1
 801e2e4:	7621      	strb	r1, [r4, #24]
 801e2e6:	f7fd fdce 	bl	801be86 <memchr>
 801e2ea:	2800      	cmp	r0, #0
 801e2ec:	d040      	beq.n	801e370 <_vfiprintf_r+0x210>
 801e2ee:	4b28      	ldr	r3, [pc, #160]	@ (801e390 <_vfiprintf_r+0x230>)
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d122      	bne.n	801e33a <_vfiprintf_r+0x1da>
 801e2f4:	2207      	movs	r2, #7
 801e2f6:	9b07      	ldr	r3, [sp, #28]
 801e2f8:	3307      	adds	r3, #7
 801e2fa:	4393      	bics	r3, r2
 801e2fc:	3308      	adds	r3, #8
 801e2fe:	9307      	str	r3, [sp, #28]
 801e300:	6963      	ldr	r3, [r4, #20]
 801e302:	9a04      	ldr	r2, [sp, #16]
 801e304:	189b      	adds	r3, r3, r2
 801e306:	6163      	str	r3, [r4, #20]
 801e308:	e762      	b.n	801e1d0 <_vfiprintf_r+0x70>
 801e30a:	4343      	muls	r3, r0
 801e30c:	002e      	movs	r6, r5
 801e30e:	2101      	movs	r1, #1
 801e310:	189b      	adds	r3, r3, r2
 801e312:	e7a4      	b.n	801e25e <_vfiprintf_r+0xfe>
 801e314:	2300      	movs	r3, #0
 801e316:	200a      	movs	r0, #10
 801e318:	0019      	movs	r1, r3
 801e31a:	3601      	adds	r6, #1
 801e31c:	6063      	str	r3, [r4, #4]
 801e31e:	7832      	ldrb	r2, [r6, #0]
 801e320:	1c75      	adds	r5, r6, #1
 801e322:	3a30      	subs	r2, #48	@ 0x30
 801e324:	2a09      	cmp	r2, #9
 801e326:	d903      	bls.n	801e330 <_vfiprintf_r+0x1d0>
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d0c8      	beq.n	801e2be <_vfiprintf_r+0x15e>
 801e32c:	9109      	str	r1, [sp, #36]	@ 0x24
 801e32e:	e7c6      	b.n	801e2be <_vfiprintf_r+0x15e>
 801e330:	4341      	muls	r1, r0
 801e332:	002e      	movs	r6, r5
 801e334:	2301      	movs	r3, #1
 801e336:	1889      	adds	r1, r1, r2
 801e338:	e7f1      	b.n	801e31e <_vfiprintf_r+0x1be>
 801e33a:	aa07      	add	r2, sp, #28
 801e33c:	9200      	str	r2, [sp, #0]
 801e33e:	0021      	movs	r1, r4
 801e340:	003a      	movs	r2, r7
 801e342:	4b14      	ldr	r3, [pc, #80]	@ (801e394 <_vfiprintf_r+0x234>)
 801e344:	9803      	ldr	r0, [sp, #12]
 801e346:	f7fc ff99 	bl	801b27c <_printf_float>
 801e34a:	9004      	str	r0, [sp, #16]
 801e34c:	9b04      	ldr	r3, [sp, #16]
 801e34e:	3301      	adds	r3, #1
 801e350:	d1d6      	bne.n	801e300 <_vfiprintf_r+0x1a0>
 801e352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e354:	07db      	lsls	r3, r3, #31
 801e356:	d405      	bmi.n	801e364 <_vfiprintf_r+0x204>
 801e358:	89bb      	ldrh	r3, [r7, #12]
 801e35a:	059b      	lsls	r3, r3, #22
 801e35c:	d402      	bmi.n	801e364 <_vfiprintf_r+0x204>
 801e35e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e360:	f7fd fd90 	bl	801be84 <__retarget_lock_release_recursive>
 801e364:	89bb      	ldrh	r3, [r7, #12]
 801e366:	065b      	lsls	r3, r3, #25
 801e368:	d500      	bpl.n	801e36c <_vfiprintf_r+0x20c>
 801e36a:	e71e      	b.n	801e1aa <_vfiprintf_r+0x4a>
 801e36c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e36e:	e71e      	b.n	801e1ae <_vfiprintf_r+0x4e>
 801e370:	aa07      	add	r2, sp, #28
 801e372:	9200      	str	r2, [sp, #0]
 801e374:	0021      	movs	r1, r4
 801e376:	003a      	movs	r2, r7
 801e378:	4b06      	ldr	r3, [pc, #24]	@ (801e394 <_vfiprintf_r+0x234>)
 801e37a:	9803      	ldr	r0, [sp, #12]
 801e37c:	f7fd fa2c 	bl	801b7d8 <_printf_i>
 801e380:	e7e3      	b.n	801e34a <_vfiprintf_r+0x1ea>
 801e382:	46c0      	nop			@ (mov r8, r8)
 801e384:	08020a08 	.word	0x08020a08
 801e388:	08020a0e 	.word	0x08020a0e
 801e38c:	08020a12 	.word	0x08020a12
 801e390:	0801b27d 	.word	0x0801b27d
 801e394:	0801e13b 	.word	0x0801e13b

0801e398 <__sflush_r>:
 801e398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e39a:	220c      	movs	r2, #12
 801e39c:	5e8b      	ldrsh	r3, [r1, r2]
 801e39e:	0005      	movs	r5, r0
 801e3a0:	000c      	movs	r4, r1
 801e3a2:	071a      	lsls	r2, r3, #28
 801e3a4:	d456      	bmi.n	801e454 <__sflush_r+0xbc>
 801e3a6:	684a      	ldr	r2, [r1, #4]
 801e3a8:	2a00      	cmp	r2, #0
 801e3aa:	dc02      	bgt.n	801e3b2 <__sflush_r+0x1a>
 801e3ac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801e3ae:	2a00      	cmp	r2, #0
 801e3b0:	dd4e      	ble.n	801e450 <__sflush_r+0xb8>
 801e3b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801e3b4:	2f00      	cmp	r7, #0
 801e3b6:	d04b      	beq.n	801e450 <__sflush_r+0xb8>
 801e3b8:	2200      	movs	r2, #0
 801e3ba:	2080      	movs	r0, #128	@ 0x80
 801e3bc:	682e      	ldr	r6, [r5, #0]
 801e3be:	602a      	str	r2, [r5, #0]
 801e3c0:	001a      	movs	r2, r3
 801e3c2:	0140      	lsls	r0, r0, #5
 801e3c4:	6a21      	ldr	r1, [r4, #32]
 801e3c6:	4002      	ands	r2, r0
 801e3c8:	4203      	tst	r3, r0
 801e3ca:	d033      	beq.n	801e434 <__sflush_r+0x9c>
 801e3cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e3ce:	89a3      	ldrh	r3, [r4, #12]
 801e3d0:	075b      	lsls	r3, r3, #29
 801e3d2:	d506      	bpl.n	801e3e2 <__sflush_r+0x4a>
 801e3d4:	6863      	ldr	r3, [r4, #4]
 801e3d6:	1ad2      	subs	r2, r2, r3
 801e3d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d001      	beq.n	801e3e2 <__sflush_r+0x4a>
 801e3de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e3e0:	1ad2      	subs	r2, r2, r3
 801e3e2:	2300      	movs	r3, #0
 801e3e4:	0028      	movs	r0, r5
 801e3e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801e3e8:	6a21      	ldr	r1, [r4, #32]
 801e3ea:	47b8      	blx	r7
 801e3ec:	89a2      	ldrh	r2, [r4, #12]
 801e3ee:	1c43      	adds	r3, r0, #1
 801e3f0:	d106      	bne.n	801e400 <__sflush_r+0x68>
 801e3f2:	6829      	ldr	r1, [r5, #0]
 801e3f4:	291d      	cmp	r1, #29
 801e3f6:	d846      	bhi.n	801e486 <__sflush_r+0xee>
 801e3f8:	4b29      	ldr	r3, [pc, #164]	@ (801e4a0 <__sflush_r+0x108>)
 801e3fa:	410b      	asrs	r3, r1
 801e3fc:	07db      	lsls	r3, r3, #31
 801e3fe:	d442      	bmi.n	801e486 <__sflush_r+0xee>
 801e400:	2300      	movs	r3, #0
 801e402:	6063      	str	r3, [r4, #4]
 801e404:	6923      	ldr	r3, [r4, #16]
 801e406:	6023      	str	r3, [r4, #0]
 801e408:	04d2      	lsls	r2, r2, #19
 801e40a:	d505      	bpl.n	801e418 <__sflush_r+0x80>
 801e40c:	1c43      	adds	r3, r0, #1
 801e40e:	d102      	bne.n	801e416 <__sflush_r+0x7e>
 801e410:	682b      	ldr	r3, [r5, #0]
 801e412:	2b00      	cmp	r3, #0
 801e414:	d100      	bne.n	801e418 <__sflush_r+0x80>
 801e416:	6560      	str	r0, [r4, #84]	@ 0x54
 801e418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e41a:	602e      	str	r6, [r5, #0]
 801e41c:	2900      	cmp	r1, #0
 801e41e:	d017      	beq.n	801e450 <__sflush_r+0xb8>
 801e420:	0023      	movs	r3, r4
 801e422:	3344      	adds	r3, #68	@ 0x44
 801e424:	4299      	cmp	r1, r3
 801e426:	d002      	beq.n	801e42e <__sflush_r+0x96>
 801e428:	0028      	movs	r0, r5
 801e42a:	f7fe fbc9 	bl	801cbc0 <_free_r>
 801e42e:	2300      	movs	r3, #0
 801e430:	6363      	str	r3, [r4, #52]	@ 0x34
 801e432:	e00d      	b.n	801e450 <__sflush_r+0xb8>
 801e434:	2301      	movs	r3, #1
 801e436:	0028      	movs	r0, r5
 801e438:	47b8      	blx	r7
 801e43a:	0002      	movs	r2, r0
 801e43c:	1c43      	adds	r3, r0, #1
 801e43e:	d1c6      	bne.n	801e3ce <__sflush_r+0x36>
 801e440:	682b      	ldr	r3, [r5, #0]
 801e442:	2b00      	cmp	r3, #0
 801e444:	d0c3      	beq.n	801e3ce <__sflush_r+0x36>
 801e446:	2b1d      	cmp	r3, #29
 801e448:	d001      	beq.n	801e44e <__sflush_r+0xb6>
 801e44a:	2b16      	cmp	r3, #22
 801e44c:	d11a      	bne.n	801e484 <__sflush_r+0xec>
 801e44e:	602e      	str	r6, [r5, #0]
 801e450:	2000      	movs	r0, #0
 801e452:	e01e      	b.n	801e492 <__sflush_r+0xfa>
 801e454:	690e      	ldr	r6, [r1, #16]
 801e456:	2e00      	cmp	r6, #0
 801e458:	d0fa      	beq.n	801e450 <__sflush_r+0xb8>
 801e45a:	680f      	ldr	r7, [r1, #0]
 801e45c:	600e      	str	r6, [r1, #0]
 801e45e:	1bba      	subs	r2, r7, r6
 801e460:	9201      	str	r2, [sp, #4]
 801e462:	2200      	movs	r2, #0
 801e464:	079b      	lsls	r3, r3, #30
 801e466:	d100      	bne.n	801e46a <__sflush_r+0xd2>
 801e468:	694a      	ldr	r2, [r1, #20]
 801e46a:	60a2      	str	r2, [r4, #8]
 801e46c:	9b01      	ldr	r3, [sp, #4]
 801e46e:	2b00      	cmp	r3, #0
 801e470:	ddee      	ble.n	801e450 <__sflush_r+0xb8>
 801e472:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e474:	0032      	movs	r2, r6
 801e476:	001f      	movs	r7, r3
 801e478:	0028      	movs	r0, r5
 801e47a:	9b01      	ldr	r3, [sp, #4]
 801e47c:	6a21      	ldr	r1, [r4, #32]
 801e47e:	47b8      	blx	r7
 801e480:	2800      	cmp	r0, #0
 801e482:	dc07      	bgt.n	801e494 <__sflush_r+0xfc>
 801e484:	89a2      	ldrh	r2, [r4, #12]
 801e486:	2340      	movs	r3, #64	@ 0x40
 801e488:	2001      	movs	r0, #1
 801e48a:	4313      	orrs	r3, r2
 801e48c:	b21b      	sxth	r3, r3
 801e48e:	81a3      	strh	r3, [r4, #12]
 801e490:	4240      	negs	r0, r0
 801e492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e494:	9b01      	ldr	r3, [sp, #4]
 801e496:	1836      	adds	r6, r6, r0
 801e498:	1a1b      	subs	r3, r3, r0
 801e49a:	9301      	str	r3, [sp, #4]
 801e49c:	e7e6      	b.n	801e46c <__sflush_r+0xd4>
 801e49e:	46c0      	nop			@ (mov r8, r8)
 801e4a0:	dfbffffe 	.word	0xdfbffffe

0801e4a4 <_fflush_r>:
 801e4a4:	690b      	ldr	r3, [r1, #16]
 801e4a6:	b570      	push	{r4, r5, r6, lr}
 801e4a8:	0005      	movs	r5, r0
 801e4aa:	000c      	movs	r4, r1
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d102      	bne.n	801e4b6 <_fflush_r+0x12>
 801e4b0:	2500      	movs	r5, #0
 801e4b2:	0028      	movs	r0, r5
 801e4b4:	bd70      	pop	{r4, r5, r6, pc}
 801e4b6:	2800      	cmp	r0, #0
 801e4b8:	d004      	beq.n	801e4c4 <_fflush_r+0x20>
 801e4ba:	6a03      	ldr	r3, [r0, #32]
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d101      	bne.n	801e4c4 <_fflush_r+0x20>
 801e4c0:	f7fd fb28 	bl	801bb14 <__sinit>
 801e4c4:	220c      	movs	r2, #12
 801e4c6:	5ea3      	ldrsh	r3, [r4, r2]
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d0f1      	beq.n	801e4b0 <_fflush_r+0xc>
 801e4cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e4ce:	07d2      	lsls	r2, r2, #31
 801e4d0:	d404      	bmi.n	801e4dc <_fflush_r+0x38>
 801e4d2:	059b      	lsls	r3, r3, #22
 801e4d4:	d402      	bmi.n	801e4dc <_fflush_r+0x38>
 801e4d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e4d8:	f7fd fcd3 	bl	801be82 <__retarget_lock_acquire_recursive>
 801e4dc:	0028      	movs	r0, r5
 801e4de:	0021      	movs	r1, r4
 801e4e0:	f7ff ff5a 	bl	801e398 <__sflush_r>
 801e4e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e4e6:	0005      	movs	r5, r0
 801e4e8:	07db      	lsls	r3, r3, #31
 801e4ea:	d4e2      	bmi.n	801e4b2 <_fflush_r+0xe>
 801e4ec:	89a3      	ldrh	r3, [r4, #12]
 801e4ee:	059b      	lsls	r3, r3, #22
 801e4f0:	d4df      	bmi.n	801e4b2 <_fflush_r+0xe>
 801e4f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e4f4:	f7fd fcc6 	bl	801be84 <__retarget_lock_release_recursive>
 801e4f8:	e7db      	b.n	801e4b2 <_fflush_r+0xe>

0801e4fa <__swbuf_r>:
 801e4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4fc:	0006      	movs	r6, r0
 801e4fe:	000d      	movs	r5, r1
 801e500:	0014      	movs	r4, r2
 801e502:	2800      	cmp	r0, #0
 801e504:	d004      	beq.n	801e510 <__swbuf_r+0x16>
 801e506:	6a03      	ldr	r3, [r0, #32]
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d101      	bne.n	801e510 <__swbuf_r+0x16>
 801e50c:	f7fd fb02 	bl	801bb14 <__sinit>
 801e510:	69a3      	ldr	r3, [r4, #24]
 801e512:	60a3      	str	r3, [r4, #8]
 801e514:	89a3      	ldrh	r3, [r4, #12]
 801e516:	071b      	lsls	r3, r3, #28
 801e518:	d502      	bpl.n	801e520 <__swbuf_r+0x26>
 801e51a:	6923      	ldr	r3, [r4, #16]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d109      	bne.n	801e534 <__swbuf_r+0x3a>
 801e520:	0021      	movs	r1, r4
 801e522:	0030      	movs	r0, r6
 801e524:	f000 f82c 	bl	801e580 <__swsetup_r>
 801e528:	2800      	cmp	r0, #0
 801e52a:	d003      	beq.n	801e534 <__swbuf_r+0x3a>
 801e52c:	2501      	movs	r5, #1
 801e52e:	426d      	negs	r5, r5
 801e530:	0028      	movs	r0, r5
 801e532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e534:	6923      	ldr	r3, [r4, #16]
 801e536:	6820      	ldr	r0, [r4, #0]
 801e538:	b2ef      	uxtb	r7, r5
 801e53a:	1ac0      	subs	r0, r0, r3
 801e53c:	6963      	ldr	r3, [r4, #20]
 801e53e:	b2ed      	uxtb	r5, r5
 801e540:	4283      	cmp	r3, r0
 801e542:	dc05      	bgt.n	801e550 <__swbuf_r+0x56>
 801e544:	0021      	movs	r1, r4
 801e546:	0030      	movs	r0, r6
 801e548:	f7ff ffac 	bl	801e4a4 <_fflush_r>
 801e54c:	2800      	cmp	r0, #0
 801e54e:	d1ed      	bne.n	801e52c <__swbuf_r+0x32>
 801e550:	68a3      	ldr	r3, [r4, #8]
 801e552:	3001      	adds	r0, #1
 801e554:	3b01      	subs	r3, #1
 801e556:	60a3      	str	r3, [r4, #8]
 801e558:	6823      	ldr	r3, [r4, #0]
 801e55a:	1c5a      	adds	r2, r3, #1
 801e55c:	6022      	str	r2, [r4, #0]
 801e55e:	701f      	strb	r7, [r3, #0]
 801e560:	6963      	ldr	r3, [r4, #20]
 801e562:	4283      	cmp	r3, r0
 801e564:	d004      	beq.n	801e570 <__swbuf_r+0x76>
 801e566:	89a3      	ldrh	r3, [r4, #12]
 801e568:	07db      	lsls	r3, r3, #31
 801e56a:	d5e1      	bpl.n	801e530 <__swbuf_r+0x36>
 801e56c:	2d0a      	cmp	r5, #10
 801e56e:	d1df      	bne.n	801e530 <__swbuf_r+0x36>
 801e570:	0021      	movs	r1, r4
 801e572:	0030      	movs	r0, r6
 801e574:	f7ff ff96 	bl	801e4a4 <_fflush_r>
 801e578:	2800      	cmp	r0, #0
 801e57a:	d0d9      	beq.n	801e530 <__swbuf_r+0x36>
 801e57c:	e7d6      	b.n	801e52c <__swbuf_r+0x32>
	...

0801e580 <__swsetup_r>:
 801e580:	4b2d      	ldr	r3, [pc, #180]	@ (801e638 <__swsetup_r+0xb8>)
 801e582:	b570      	push	{r4, r5, r6, lr}
 801e584:	0005      	movs	r5, r0
 801e586:	6818      	ldr	r0, [r3, #0]
 801e588:	000c      	movs	r4, r1
 801e58a:	2800      	cmp	r0, #0
 801e58c:	d004      	beq.n	801e598 <__swsetup_r+0x18>
 801e58e:	6a03      	ldr	r3, [r0, #32]
 801e590:	2b00      	cmp	r3, #0
 801e592:	d101      	bne.n	801e598 <__swsetup_r+0x18>
 801e594:	f7fd fabe 	bl	801bb14 <__sinit>
 801e598:	230c      	movs	r3, #12
 801e59a:	5ee2      	ldrsh	r2, [r4, r3]
 801e59c:	0713      	lsls	r3, r2, #28
 801e59e:	d423      	bmi.n	801e5e8 <__swsetup_r+0x68>
 801e5a0:	06d3      	lsls	r3, r2, #27
 801e5a2:	d407      	bmi.n	801e5b4 <__swsetup_r+0x34>
 801e5a4:	2309      	movs	r3, #9
 801e5a6:	602b      	str	r3, [r5, #0]
 801e5a8:	2340      	movs	r3, #64	@ 0x40
 801e5aa:	2001      	movs	r0, #1
 801e5ac:	4313      	orrs	r3, r2
 801e5ae:	81a3      	strh	r3, [r4, #12]
 801e5b0:	4240      	negs	r0, r0
 801e5b2:	e03a      	b.n	801e62a <__swsetup_r+0xaa>
 801e5b4:	0752      	lsls	r2, r2, #29
 801e5b6:	d513      	bpl.n	801e5e0 <__swsetup_r+0x60>
 801e5b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e5ba:	2900      	cmp	r1, #0
 801e5bc:	d008      	beq.n	801e5d0 <__swsetup_r+0x50>
 801e5be:	0023      	movs	r3, r4
 801e5c0:	3344      	adds	r3, #68	@ 0x44
 801e5c2:	4299      	cmp	r1, r3
 801e5c4:	d002      	beq.n	801e5cc <__swsetup_r+0x4c>
 801e5c6:	0028      	movs	r0, r5
 801e5c8:	f7fe fafa 	bl	801cbc0 <_free_r>
 801e5cc:	2300      	movs	r3, #0
 801e5ce:	6363      	str	r3, [r4, #52]	@ 0x34
 801e5d0:	2224      	movs	r2, #36	@ 0x24
 801e5d2:	89a3      	ldrh	r3, [r4, #12]
 801e5d4:	4393      	bics	r3, r2
 801e5d6:	81a3      	strh	r3, [r4, #12]
 801e5d8:	2300      	movs	r3, #0
 801e5da:	6063      	str	r3, [r4, #4]
 801e5dc:	6923      	ldr	r3, [r4, #16]
 801e5de:	6023      	str	r3, [r4, #0]
 801e5e0:	2308      	movs	r3, #8
 801e5e2:	89a2      	ldrh	r2, [r4, #12]
 801e5e4:	4313      	orrs	r3, r2
 801e5e6:	81a3      	strh	r3, [r4, #12]
 801e5e8:	6923      	ldr	r3, [r4, #16]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d10b      	bne.n	801e606 <__swsetup_r+0x86>
 801e5ee:	21a0      	movs	r1, #160	@ 0xa0
 801e5f0:	2280      	movs	r2, #128	@ 0x80
 801e5f2:	89a3      	ldrh	r3, [r4, #12]
 801e5f4:	0089      	lsls	r1, r1, #2
 801e5f6:	0092      	lsls	r2, r2, #2
 801e5f8:	400b      	ands	r3, r1
 801e5fa:	4293      	cmp	r3, r2
 801e5fc:	d003      	beq.n	801e606 <__swsetup_r+0x86>
 801e5fe:	0021      	movs	r1, r4
 801e600:	0028      	movs	r0, r5
 801e602:	f000 f8f5 	bl	801e7f0 <__smakebuf_r>
 801e606:	230c      	movs	r3, #12
 801e608:	5ee2      	ldrsh	r2, [r4, r3]
 801e60a:	2101      	movs	r1, #1
 801e60c:	0013      	movs	r3, r2
 801e60e:	400b      	ands	r3, r1
 801e610:	420a      	tst	r2, r1
 801e612:	d00b      	beq.n	801e62c <__swsetup_r+0xac>
 801e614:	2300      	movs	r3, #0
 801e616:	60a3      	str	r3, [r4, #8]
 801e618:	6963      	ldr	r3, [r4, #20]
 801e61a:	425b      	negs	r3, r3
 801e61c:	61a3      	str	r3, [r4, #24]
 801e61e:	2000      	movs	r0, #0
 801e620:	6923      	ldr	r3, [r4, #16]
 801e622:	4283      	cmp	r3, r0
 801e624:	d101      	bne.n	801e62a <__swsetup_r+0xaa>
 801e626:	0613      	lsls	r3, r2, #24
 801e628:	d4be      	bmi.n	801e5a8 <__swsetup_r+0x28>
 801e62a:	bd70      	pop	{r4, r5, r6, pc}
 801e62c:	0791      	lsls	r1, r2, #30
 801e62e:	d400      	bmi.n	801e632 <__swsetup_r+0xb2>
 801e630:	6963      	ldr	r3, [r4, #20]
 801e632:	60a3      	str	r3, [r4, #8]
 801e634:	e7f3      	b.n	801e61e <__swsetup_r+0x9e>
 801e636:	46c0      	nop			@ (mov r8, r8)
 801e638:	200003cc 	.word	0x200003cc

0801e63c <memmove>:
 801e63c:	b510      	push	{r4, lr}
 801e63e:	4288      	cmp	r0, r1
 801e640:	d806      	bhi.n	801e650 <memmove+0x14>
 801e642:	2300      	movs	r3, #0
 801e644:	429a      	cmp	r2, r3
 801e646:	d008      	beq.n	801e65a <memmove+0x1e>
 801e648:	5ccc      	ldrb	r4, [r1, r3]
 801e64a:	54c4      	strb	r4, [r0, r3]
 801e64c:	3301      	adds	r3, #1
 801e64e:	e7f9      	b.n	801e644 <memmove+0x8>
 801e650:	188b      	adds	r3, r1, r2
 801e652:	4298      	cmp	r0, r3
 801e654:	d2f5      	bcs.n	801e642 <memmove+0x6>
 801e656:	3a01      	subs	r2, #1
 801e658:	d200      	bcs.n	801e65c <memmove+0x20>
 801e65a:	bd10      	pop	{r4, pc}
 801e65c:	5c8b      	ldrb	r3, [r1, r2]
 801e65e:	5483      	strb	r3, [r0, r2]
 801e660:	e7f9      	b.n	801e656 <memmove+0x1a>
	...

0801e664 <_sbrk_r>:
 801e664:	2300      	movs	r3, #0
 801e666:	b570      	push	{r4, r5, r6, lr}
 801e668:	4d06      	ldr	r5, [pc, #24]	@ (801e684 <_sbrk_r+0x20>)
 801e66a:	0004      	movs	r4, r0
 801e66c:	0008      	movs	r0, r1
 801e66e:	602b      	str	r3, [r5, #0]
 801e670:	f7ec fb22 	bl	800acb8 <_sbrk>
 801e674:	1c43      	adds	r3, r0, #1
 801e676:	d103      	bne.n	801e680 <_sbrk_r+0x1c>
 801e678:	682b      	ldr	r3, [r5, #0]
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d000      	beq.n	801e680 <_sbrk_r+0x1c>
 801e67e:	6023      	str	r3, [r4, #0]
 801e680:	bd70      	pop	{r4, r5, r6, pc}
 801e682:	46c0      	nop			@ (mov r8, r8)
 801e684:	20003898 	.word	0x20003898

0801e688 <__assert_func>:
 801e688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e68a:	0014      	movs	r4, r2
 801e68c:	001a      	movs	r2, r3
 801e68e:	4b09      	ldr	r3, [pc, #36]	@ (801e6b4 <__assert_func+0x2c>)
 801e690:	0005      	movs	r5, r0
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	000e      	movs	r6, r1
 801e696:	68d8      	ldr	r0, [r3, #12]
 801e698:	4b07      	ldr	r3, [pc, #28]	@ (801e6b8 <__assert_func+0x30>)
 801e69a:	2c00      	cmp	r4, #0
 801e69c:	d101      	bne.n	801e6a2 <__assert_func+0x1a>
 801e69e:	4b07      	ldr	r3, [pc, #28]	@ (801e6bc <__assert_func+0x34>)
 801e6a0:	001c      	movs	r4, r3
 801e6a2:	4907      	ldr	r1, [pc, #28]	@ (801e6c0 <__assert_func+0x38>)
 801e6a4:	9301      	str	r3, [sp, #4]
 801e6a6:	9402      	str	r4, [sp, #8]
 801e6a8:	002b      	movs	r3, r5
 801e6aa:	9600      	str	r6, [sp, #0]
 801e6ac:	f000 f866 	bl	801e77c <fiprintf>
 801e6b0:	f000 f904 	bl	801e8bc <abort>
 801e6b4:	200003cc 	.word	0x200003cc
 801e6b8:	08020a19 	.word	0x08020a19
 801e6bc:	08020a54 	.word	0x08020a54
 801e6c0:	08020a26 	.word	0x08020a26

0801e6c4 <_calloc_r>:
 801e6c4:	b570      	push	{r4, r5, r6, lr}
 801e6c6:	0c0b      	lsrs	r3, r1, #16
 801e6c8:	0c15      	lsrs	r5, r2, #16
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	d11e      	bne.n	801e70c <_calloc_r+0x48>
 801e6ce:	2d00      	cmp	r5, #0
 801e6d0:	d10c      	bne.n	801e6ec <_calloc_r+0x28>
 801e6d2:	b289      	uxth	r1, r1
 801e6d4:	b294      	uxth	r4, r2
 801e6d6:	434c      	muls	r4, r1
 801e6d8:	0021      	movs	r1, r4
 801e6da:	f7fe fe41 	bl	801d360 <_malloc_r>
 801e6de:	1e05      	subs	r5, r0, #0
 801e6e0:	d01a      	beq.n	801e718 <_calloc_r+0x54>
 801e6e2:	0022      	movs	r2, r4
 801e6e4:	2100      	movs	r1, #0
 801e6e6:	f7fd fafd 	bl	801bce4 <memset>
 801e6ea:	e016      	b.n	801e71a <_calloc_r+0x56>
 801e6ec:	1c2b      	adds	r3, r5, #0
 801e6ee:	1c0c      	adds	r4, r1, #0
 801e6f0:	b289      	uxth	r1, r1
 801e6f2:	b292      	uxth	r2, r2
 801e6f4:	434a      	muls	r2, r1
 801e6f6:	b29b      	uxth	r3, r3
 801e6f8:	b2a1      	uxth	r1, r4
 801e6fa:	4359      	muls	r1, r3
 801e6fc:	0c14      	lsrs	r4, r2, #16
 801e6fe:	190c      	adds	r4, r1, r4
 801e700:	0c23      	lsrs	r3, r4, #16
 801e702:	d107      	bne.n	801e714 <_calloc_r+0x50>
 801e704:	0424      	lsls	r4, r4, #16
 801e706:	b292      	uxth	r2, r2
 801e708:	4314      	orrs	r4, r2
 801e70a:	e7e5      	b.n	801e6d8 <_calloc_r+0x14>
 801e70c:	2d00      	cmp	r5, #0
 801e70e:	d101      	bne.n	801e714 <_calloc_r+0x50>
 801e710:	1c14      	adds	r4, r2, #0
 801e712:	e7ed      	b.n	801e6f0 <_calloc_r+0x2c>
 801e714:	230c      	movs	r3, #12
 801e716:	6003      	str	r3, [r0, #0]
 801e718:	2500      	movs	r5, #0
 801e71a:	0028      	movs	r0, r5
 801e71c:	bd70      	pop	{r4, r5, r6, pc}

0801e71e <_realloc_r>:
 801e71e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e720:	0006      	movs	r6, r0
 801e722:	000c      	movs	r4, r1
 801e724:	0015      	movs	r5, r2
 801e726:	2900      	cmp	r1, #0
 801e728:	d105      	bne.n	801e736 <_realloc_r+0x18>
 801e72a:	0011      	movs	r1, r2
 801e72c:	f7fe fe18 	bl	801d360 <_malloc_r>
 801e730:	0004      	movs	r4, r0
 801e732:	0020      	movs	r0, r4
 801e734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e736:	2a00      	cmp	r2, #0
 801e738:	d103      	bne.n	801e742 <_realloc_r+0x24>
 801e73a:	f7fe fa41 	bl	801cbc0 <_free_r>
 801e73e:	2400      	movs	r4, #0
 801e740:	e7f7      	b.n	801e732 <_realloc_r+0x14>
 801e742:	f000 f8c2 	bl	801e8ca <_malloc_usable_size_r>
 801e746:	0007      	movs	r7, r0
 801e748:	4285      	cmp	r5, r0
 801e74a:	d802      	bhi.n	801e752 <_realloc_r+0x34>
 801e74c:	0843      	lsrs	r3, r0, #1
 801e74e:	42ab      	cmp	r3, r5
 801e750:	d3ef      	bcc.n	801e732 <_realloc_r+0x14>
 801e752:	0029      	movs	r1, r5
 801e754:	0030      	movs	r0, r6
 801e756:	f7fe fe03 	bl	801d360 <_malloc_r>
 801e75a:	9001      	str	r0, [sp, #4]
 801e75c:	2800      	cmp	r0, #0
 801e75e:	d0ee      	beq.n	801e73e <_realloc_r+0x20>
 801e760:	002a      	movs	r2, r5
 801e762:	42bd      	cmp	r5, r7
 801e764:	d900      	bls.n	801e768 <_realloc_r+0x4a>
 801e766:	003a      	movs	r2, r7
 801e768:	0021      	movs	r1, r4
 801e76a:	9801      	ldr	r0, [sp, #4]
 801e76c:	f7fd fb96 	bl	801be9c <memcpy>
 801e770:	0021      	movs	r1, r4
 801e772:	0030      	movs	r0, r6
 801e774:	f7fe fa24 	bl	801cbc0 <_free_r>
 801e778:	9c01      	ldr	r4, [sp, #4]
 801e77a:	e7da      	b.n	801e732 <_realloc_r+0x14>

0801e77c <fiprintf>:
 801e77c:	b40e      	push	{r1, r2, r3}
 801e77e:	b517      	push	{r0, r1, r2, r4, lr}
 801e780:	4c05      	ldr	r4, [pc, #20]	@ (801e798 <fiprintf+0x1c>)
 801e782:	ab05      	add	r3, sp, #20
 801e784:	cb04      	ldmia	r3!, {r2}
 801e786:	0001      	movs	r1, r0
 801e788:	6820      	ldr	r0, [r4, #0]
 801e78a:	9301      	str	r3, [sp, #4]
 801e78c:	f7ff fce8 	bl	801e160 <_vfiprintf_r>
 801e790:	bc1e      	pop	{r1, r2, r3, r4}
 801e792:	bc08      	pop	{r3}
 801e794:	b003      	add	sp, #12
 801e796:	4718      	bx	r3
 801e798:	200003cc 	.word	0x200003cc

0801e79c <__swhatbuf_r>:
 801e79c:	b570      	push	{r4, r5, r6, lr}
 801e79e:	000e      	movs	r6, r1
 801e7a0:	001d      	movs	r5, r3
 801e7a2:	230e      	movs	r3, #14
 801e7a4:	5ec9      	ldrsh	r1, [r1, r3]
 801e7a6:	0014      	movs	r4, r2
 801e7a8:	b096      	sub	sp, #88	@ 0x58
 801e7aa:	2900      	cmp	r1, #0
 801e7ac:	da0c      	bge.n	801e7c8 <__swhatbuf_r+0x2c>
 801e7ae:	89b2      	ldrh	r2, [r6, #12]
 801e7b0:	2380      	movs	r3, #128	@ 0x80
 801e7b2:	0011      	movs	r1, r2
 801e7b4:	4019      	ands	r1, r3
 801e7b6:	421a      	tst	r2, r3
 801e7b8:	d114      	bne.n	801e7e4 <__swhatbuf_r+0x48>
 801e7ba:	2380      	movs	r3, #128	@ 0x80
 801e7bc:	00db      	lsls	r3, r3, #3
 801e7be:	2000      	movs	r0, #0
 801e7c0:	6029      	str	r1, [r5, #0]
 801e7c2:	6023      	str	r3, [r4, #0]
 801e7c4:	b016      	add	sp, #88	@ 0x58
 801e7c6:	bd70      	pop	{r4, r5, r6, pc}
 801e7c8:	466a      	mov	r2, sp
 801e7ca:	f000 f853 	bl	801e874 <_fstat_r>
 801e7ce:	2800      	cmp	r0, #0
 801e7d0:	dbed      	blt.n	801e7ae <__swhatbuf_r+0x12>
 801e7d2:	23f0      	movs	r3, #240	@ 0xf0
 801e7d4:	9901      	ldr	r1, [sp, #4]
 801e7d6:	021b      	lsls	r3, r3, #8
 801e7d8:	4019      	ands	r1, r3
 801e7da:	4b04      	ldr	r3, [pc, #16]	@ (801e7ec <__swhatbuf_r+0x50>)
 801e7dc:	18c9      	adds	r1, r1, r3
 801e7de:	424b      	negs	r3, r1
 801e7e0:	4159      	adcs	r1, r3
 801e7e2:	e7ea      	b.n	801e7ba <__swhatbuf_r+0x1e>
 801e7e4:	2100      	movs	r1, #0
 801e7e6:	2340      	movs	r3, #64	@ 0x40
 801e7e8:	e7e9      	b.n	801e7be <__swhatbuf_r+0x22>
 801e7ea:	46c0      	nop			@ (mov r8, r8)
 801e7ec:	ffffe000 	.word	0xffffe000

0801e7f0 <__smakebuf_r>:
 801e7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7f2:	2602      	movs	r6, #2
 801e7f4:	898b      	ldrh	r3, [r1, #12]
 801e7f6:	0005      	movs	r5, r0
 801e7f8:	000c      	movs	r4, r1
 801e7fa:	b085      	sub	sp, #20
 801e7fc:	4233      	tst	r3, r6
 801e7fe:	d007      	beq.n	801e810 <__smakebuf_r+0x20>
 801e800:	0023      	movs	r3, r4
 801e802:	3347      	adds	r3, #71	@ 0x47
 801e804:	6023      	str	r3, [r4, #0]
 801e806:	6123      	str	r3, [r4, #16]
 801e808:	2301      	movs	r3, #1
 801e80a:	6163      	str	r3, [r4, #20]
 801e80c:	b005      	add	sp, #20
 801e80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e810:	ab03      	add	r3, sp, #12
 801e812:	aa02      	add	r2, sp, #8
 801e814:	f7ff ffc2 	bl	801e79c <__swhatbuf_r>
 801e818:	9f02      	ldr	r7, [sp, #8]
 801e81a:	9001      	str	r0, [sp, #4]
 801e81c:	0039      	movs	r1, r7
 801e81e:	0028      	movs	r0, r5
 801e820:	f7fe fd9e 	bl	801d360 <_malloc_r>
 801e824:	2800      	cmp	r0, #0
 801e826:	d108      	bne.n	801e83a <__smakebuf_r+0x4a>
 801e828:	220c      	movs	r2, #12
 801e82a:	5ea3      	ldrsh	r3, [r4, r2]
 801e82c:	059a      	lsls	r2, r3, #22
 801e82e:	d4ed      	bmi.n	801e80c <__smakebuf_r+0x1c>
 801e830:	2203      	movs	r2, #3
 801e832:	4393      	bics	r3, r2
 801e834:	431e      	orrs	r6, r3
 801e836:	81a6      	strh	r6, [r4, #12]
 801e838:	e7e2      	b.n	801e800 <__smakebuf_r+0x10>
 801e83a:	2380      	movs	r3, #128	@ 0x80
 801e83c:	89a2      	ldrh	r2, [r4, #12]
 801e83e:	6020      	str	r0, [r4, #0]
 801e840:	4313      	orrs	r3, r2
 801e842:	81a3      	strh	r3, [r4, #12]
 801e844:	9b03      	ldr	r3, [sp, #12]
 801e846:	6120      	str	r0, [r4, #16]
 801e848:	6167      	str	r7, [r4, #20]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d00c      	beq.n	801e868 <__smakebuf_r+0x78>
 801e84e:	0028      	movs	r0, r5
 801e850:	230e      	movs	r3, #14
 801e852:	5ee1      	ldrsh	r1, [r4, r3]
 801e854:	f000 f820 	bl	801e898 <_isatty_r>
 801e858:	2800      	cmp	r0, #0
 801e85a:	d005      	beq.n	801e868 <__smakebuf_r+0x78>
 801e85c:	2303      	movs	r3, #3
 801e85e:	89a2      	ldrh	r2, [r4, #12]
 801e860:	439a      	bics	r2, r3
 801e862:	3b02      	subs	r3, #2
 801e864:	4313      	orrs	r3, r2
 801e866:	81a3      	strh	r3, [r4, #12]
 801e868:	89a3      	ldrh	r3, [r4, #12]
 801e86a:	9a01      	ldr	r2, [sp, #4]
 801e86c:	4313      	orrs	r3, r2
 801e86e:	81a3      	strh	r3, [r4, #12]
 801e870:	e7cc      	b.n	801e80c <__smakebuf_r+0x1c>
	...

0801e874 <_fstat_r>:
 801e874:	2300      	movs	r3, #0
 801e876:	b570      	push	{r4, r5, r6, lr}
 801e878:	4d06      	ldr	r5, [pc, #24]	@ (801e894 <_fstat_r+0x20>)
 801e87a:	0004      	movs	r4, r0
 801e87c:	0008      	movs	r0, r1
 801e87e:	0011      	movs	r1, r2
 801e880:	602b      	str	r3, [r5, #0]
 801e882:	f7ec f9f7 	bl	800ac74 <_fstat>
 801e886:	1c43      	adds	r3, r0, #1
 801e888:	d103      	bne.n	801e892 <_fstat_r+0x1e>
 801e88a:	682b      	ldr	r3, [r5, #0]
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d000      	beq.n	801e892 <_fstat_r+0x1e>
 801e890:	6023      	str	r3, [r4, #0]
 801e892:	bd70      	pop	{r4, r5, r6, pc}
 801e894:	20003898 	.word	0x20003898

0801e898 <_isatty_r>:
 801e898:	2300      	movs	r3, #0
 801e89a:	b570      	push	{r4, r5, r6, lr}
 801e89c:	4d06      	ldr	r5, [pc, #24]	@ (801e8b8 <_isatty_r+0x20>)
 801e89e:	0004      	movs	r4, r0
 801e8a0:	0008      	movs	r0, r1
 801e8a2:	602b      	str	r3, [r5, #0]
 801e8a4:	f7ec f9f4 	bl	800ac90 <_isatty>
 801e8a8:	1c43      	adds	r3, r0, #1
 801e8aa:	d103      	bne.n	801e8b4 <_isatty_r+0x1c>
 801e8ac:	682b      	ldr	r3, [r5, #0]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d000      	beq.n	801e8b4 <_isatty_r+0x1c>
 801e8b2:	6023      	str	r3, [r4, #0]
 801e8b4:	bd70      	pop	{r4, r5, r6, pc}
 801e8b6:	46c0      	nop			@ (mov r8, r8)
 801e8b8:	20003898 	.word	0x20003898

0801e8bc <abort>:
 801e8bc:	2006      	movs	r0, #6
 801e8be:	b510      	push	{r4, lr}
 801e8c0:	f000 f834 	bl	801e92c <raise>
 801e8c4:	2001      	movs	r0, #1
 801e8c6:	f7ec f9a1 	bl	800ac0c <_exit>

0801e8ca <_malloc_usable_size_r>:
 801e8ca:	1f0b      	subs	r3, r1, #4
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	1f18      	subs	r0, r3, #4
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	da01      	bge.n	801e8d8 <_malloc_usable_size_r+0xe>
 801e8d4:	580b      	ldr	r3, [r1, r0]
 801e8d6:	18c0      	adds	r0, r0, r3
 801e8d8:	4770      	bx	lr

0801e8da <_raise_r>:
 801e8da:	b570      	push	{r4, r5, r6, lr}
 801e8dc:	0004      	movs	r4, r0
 801e8de:	000d      	movs	r5, r1
 801e8e0:	291f      	cmp	r1, #31
 801e8e2:	d904      	bls.n	801e8ee <_raise_r+0x14>
 801e8e4:	2316      	movs	r3, #22
 801e8e6:	6003      	str	r3, [r0, #0]
 801e8e8:	2001      	movs	r0, #1
 801e8ea:	4240      	negs	r0, r0
 801e8ec:	bd70      	pop	{r4, r5, r6, pc}
 801e8ee:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d004      	beq.n	801e8fe <_raise_r+0x24>
 801e8f4:	008a      	lsls	r2, r1, #2
 801e8f6:	189b      	adds	r3, r3, r2
 801e8f8:	681a      	ldr	r2, [r3, #0]
 801e8fa:	2a00      	cmp	r2, #0
 801e8fc:	d108      	bne.n	801e910 <_raise_r+0x36>
 801e8fe:	0020      	movs	r0, r4
 801e900:	f000 f830 	bl	801e964 <_getpid_r>
 801e904:	002a      	movs	r2, r5
 801e906:	0001      	movs	r1, r0
 801e908:	0020      	movs	r0, r4
 801e90a:	f000 f819 	bl	801e940 <_kill_r>
 801e90e:	e7ed      	b.n	801e8ec <_raise_r+0x12>
 801e910:	2a01      	cmp	r2, #1
 801e912:	d009      	beq.n	801e928 <_raise_r+0x4e>
 801e914:	1c51      	adds	r1, r2, #1
 801e916:	d103      	bne.n	801e920 <_raise_r+0x46>
 801e918:	2316      	movs	r3, #22
 801e91a:	6003      	str	r3, [r0, #0]
 801e91c:	2001      	movs	r0, #1
 801e91e:	e7e5      	b.n	801e8ec <_raise_r+0x12>
 801e920:	2100      	movs	r1, #0
 801e922:	0028      	movs	r0, r5
 801e924:	6019      	str	r1, [r3, #0]
 801e926:	4790      	blx	r2
 801e928:	2000      	movs	r0, #0
 801e92a:	e7df      	b.n	801e8ec <_raise_r+0x12>

0801e92c <raise>:
 801e92c:	b510      	push	{r4, lr}
 801e92e:	4b03      	ldr	r3, [pc, #12]	@ (801e93c <raise+0x10>)
 801e930:	0001      	movs	r1, r0
 801e932:	6818      	ldr	r0, [r3, #0]
 801e934:	f7ff ffd1 	bl	801e8da <_raise_r>
 801e938:	bd10      	pop	{r4, pc}
 801e93a:	46c0      	nop			@ (mov r8, r8)
 801e93c:	200003cc 	.word	0x200003cc

0801e940 <_kill_r>:
 801e940:	2300      	movs	r3, #0
 801e942:	b570      	push	{r4, r5, r6, lr}
 801e944:	4d06      	ldr	r5, [pc, #24]	@ (801e960 <_kill_r+0x20>)
 801e946:	0004      	movs	r4, r0
 801e948:	0008      	movs	r0, r1
 801e94a:	0011      	movs	r1, r2
 801e94c:	602b      	str	r3, [r5, #0]
 801e94e:	f7ec f94d 	bl	800abec <_kill>
 801e952:	1c43      	adds	r3, r0, #1
 801e954:	d103      	bne.n	801e95e <_kill_r+0x1e>
 801e956:	682b      	ldr	r3, [r5, #0]
 801e958:	2b00      	cmp	r3, #0
 801e95a:	d000      	beq.n	801e95e <_kill_r+0x1e>
 801e95c:	6023      	str	r3, [r4, #0]
 801e95e:	bd70      	pop	{r4, r5, r6, pc}
 801e960:	20003898 	.word	0x20003898

0801e964 <_getpid_r>:
 801e964:	b510      	push	{r4, lr}
 801e966:	f7ec f93b 	bl	800abe0 <_getpid>
 801e96a:	bd10      	pop	{r4, pc}

0801e96c <expf>:
 801e96c:	b570      	push	{r4, r5, r6, lr}
 801e96e:	1c04      	adds	r4, r0, #0
 801e970:	f000 f8e6 	bl	801eb40 <__ieee754_expf>
 801e974:	1c05      	adds	r5, r0, #0
 801e976:	1c20      	adds	r0, r4, #0
 801e978:	f000 f83c 	bl	801e9f4 <finitef>
 801e97c:	2800      	cmp	r0, #0
 801e97e:	d00b      	beq.n	801e998 <expf+0x2c>
 801e980:	490c      	ldr	r1, [pc, #48]	@ (801e9b4 <expf+0x48>)
 801e982:	1c20      	adds	r0, r4, #0
 801e984:	f7e1 fde8 	bl	8000558 <__aeabi_fcmpgt>
 801e988:	2800      	cmp	r0, #0
 801e98a:	d007      	beq.n	801e99c <expf+0x30>
 801e98c:	f7fd fa4e 	bl	801be2c <__errno>
 801e990:	25ff      	movs	r5, #255	@ 0xff
 801e992:	2322      	movs	r3, #34	@ 0x22
 801e994:	05ed      	lsls	r5, r5, #23
 801e996:	6003      	str	r3, [r0, #0]
 801e998:	1c28      	adds	r0, r5, #0
 801e99a:	bd70      	pop	{r4, r5, r6, pc}
 801e99c:	4906      	ldr	r1, [pc, #24]	@ (801e9b8 <expf+0x4c>)
 801e99e:	1c20      	adds	r0, r4, #0
 801e9a0:	f7e1 fdc6 	bl	8000530 <__aeabi_fcmplt>
 801e9a4:	2800      	cmp	r0, #0
 801e9a6:	d0f7      	beq.n	801e998 <expf+0x2c>
 801e9a8:	f7fd fa40 	bl	801be2c <__errno>
 801e9ac:	2322      	movs	r3, #34	@ 0x22
 801e9ae:	2500      	movs	r5, #0
 801e9b0:	6003      	str	r3, [r0, #0]
 801e9b2:	e7f1      	b.n	801e998 <expf+0x2c>
 801e9b4:	42b17217 	.word	0x42b17217
 801e9b8:	c2cff1b5 	.word	0xc2cff1b5

0801e9bc <sqrtf>:
 801e9bc:	b570      	push	{r4, r5, r6, lr}
 801e9be:	1c05      	adds	r5, r0, #0
 801e9c0:	f000 f822 	bl	801ea08 <__ieee754_sqrtf>
 801e9c4:	1c29      	adds	r1, r5, #0
 801e9c6:	1c04      	adds	r4, r0, #0
 801e9c8:	1c28      	adds	r0, r5, #0
 801e9ca:	f7e2 fdcb 	bl	8001564 <__aeabi_fcmpun>
 801e9ce:	2800      	cmp	r0, #0
 801e9d0:	d10e      	bne.n	801e9f0 <sqrtf+0x34>
 801e9d2:	2100      	movs	r1, #0
 801e9d4:	1c28      	adds	r0, r5, #0
 801e9d6:	f7e1 fdab 	bl	8000530 <__aeabi_fcmplt>
 801e9da:	2800      	cmp	r0, #0
 801e9dc:	d008      	beq.n	801e9f0 <sqrtf+0x34>
 801e9de:	f7fd fa25 	bl	801be2c <__errno>
 801e9e2:	2321      	movs	r3, #33	@ 0x21
 801e9e4:	2100      	movs	r1, #0
 801e9e6:	6003      	str	r3, [r0, #0]
 801e9e8:	1c08      	adds	r0, r1, #0
 801e9ea:	f7e2 f8f3 	bl	8000bd4 <__aeabi_fdiv>
 801e9ee:	1c04      	adds	r4, r0, #0
 801e9f0:	1c20      	adds	r0, r4, #0
 801e9f2:	bd70      	pop	{r4, r5, r6, pc}

0801e9f4 <finitef>:
 801e9f4:	22ff      	movs	r2, #255	@ 0xff
 801e9f6:	0043      	lsls	r3, r0, #1
 801e9f8:	085b      	lsrs	r3, r3, #1
 801e9fa:	2001      	movs	r0, #1
 801e9fc:	05d2      	lsls	r2, r2, #23
 801e9fe:	4293      	cmp	r3, r2
 801ea00:	db00      	blt.n	801ea04 <finitef+0x10>
 801ea02:	2000      	movs	r0, #0
 801ea04:	4770      	bx	lr
	...

0801ea08 <__ieee754_sqrtf>:
 801ea08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea0a:	0003      	movs	r3, r0
 801ea0c:	0042      	lsls	r2, r0, #1
 801ea0e:	1c04      	adds	r4, r0, #0
 801ea10:	20ff      	movs	r0, #255	@ 0xff
 801ea12:	0852      	lsrs	r2, r2, #1
 801ea14:	05c0      	lsls	r0, r0, #23
 801ea16:	4282      	cmp	r2, r0
 801ea18:	d30a      	bcc.n	801ea30 <__ieee754_sqrtf+0x28>
 801ea1a:	1c21      	adds	r1, r4, #0
 801ea1c:	1c20      	adds	r0, r4, #0
 801ea1e:	f7e2 fabf 	bl	8000fa0 <__aeabi_fmul>
 801ea22:	1c01      	adds	r1, r0, #0
 801ea24:	1c20      	adds	r0, r4, #0
 801ea26:	f7e1 ff4b 	bl	80008c0 <__aeabi_fadd>
 801ea2a:	1c04      	adds	r4, r0, #0
 801ea2c:	1c20      	adds	r0, r4, #0
 801ea2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ea30:	2a00      	cmp	r2, #0
 801ea32:	d0fb      	beq.n	801ea2c <__ieee754_sqrtf+0x24>
 801ea34:	2c00      	cmp	r4, #0
 801ea36:	da07      	bge.n	801ea48 <__ieee754_sqrtf+0x40>
 801ea38:	1c21      	adds	r1, r4, #0
 801ea3a:	1c20      	adds	r0, r4, #0
 801ea3c:	f7e2 fbee 	bl	800121c <__aeabi_fsub>
 801ea40:	1c01      	adds	r1, r0, #0
 801ea42:	f7e2 f8c7 	bl	8000bd4 <__aeabi_fdiv>
 801ea46:	e7f0      	b.n	801ea2a <__ieee754_sqrtf+0x22>
 801ea48:	0022      	movs	r2, r4
 801ea4a:	15e1      	asrs	r1, r4, #23
 801ea4c:	4002      	ands	r2, r0
 801ea4e:	4204      	tst	r4, r0
 801ea50:	d046      	beq.n	801eae0 <__ieee754_sqrtf+0xd8>
 801ea52:	2280      	movs	r2, #128	@ 0x80
 801ea54:	000f      	movs	r7, r1
 801ea56:	025b      	lsls	r3, r3, #9
 801ea58:	0a5b      	lsrs	r3, r3, #9
 801ea5a:	0412      	lsls	r2, r2, #16
 801ea5c:	3f7f      	subs	r7, #127	@ 0x7f
 801ea5e:	4313      	orrs	r3, r2
 801ea60:	07c9      	lsls	r1, r1, #31
 801ea62:	d400      	bmi.n	801ea66 <__ieee754_sqrtf+0x5e>
 801ea64:	005b      	lsls	r3, r3, #1
 801ea66:	2400      	movs	r4, #0
 801ea68:	2180      	movs	r1, #128	@ 0x80
 801ea6a:	2019      	movs	r0, #25
 801ea6c:	0026      	movs	r6, r4
 801ea6e:	107f      	asrs	r7, r7, #1
 801ea70:	005b      	lsls	r3, r3, #1
 801ea72:	0449      	lsls	r1, r1, #17
 801ea74:	1875      	adds	r5, r6, r1
 801ea76:	001a      	movs	r2, r3
 801ea78:	429d      	cmp	r5, r3
 801ea7a:	dc02      	bgt.n	801ea82 <__ieee754_sqrtf+0x7a>
 801ea7c:	186e      	adds	r6, r5, r1
 801ea7e:	1b5a      	subs	r2, r3, r5
 801ea80:	1864      	adds	r4, r4, r1
 801ea82:	3801      	subs	r0, #1
 801ea84:	0053      	lsls	r3, r2, #1
 801ea86:	0849      	lsrs	r1, r1, #1
 801ea88:	2800      	cmp	r0, #0
 801ea8a:	d1f3      	bne.n	801ea74 <__ieee754_sqrtf+0x6c>
 801ea8c:	2a00      	cmp	r2, #0
 801ea8e:	d019      	beq.n	801eac4 <__ieee754_sqrtf+0xbc>
 801ea90:	4d17      	ldr	r5, [pc, #92]	@ (801eaf0 <__ieee754_sqrtf+0xe8>)
 801ea92:	4e18      	ldr	r6, [pc, #96]	@ (801eaf4 <__ieee754_sqrtf+0xec>)
 801ea94:	6828      	ldr	r0, [r5, #0]
 801ea96:	6831      	ldr	r1, [r6, #0]
 801ea98:	682b      	ldr	r3, [r5, #0]
 801ea9a:	9301      	str	r3, [sp, #4]
 801ea9c:	f7e2 fbbe 	bl	800121c <__aeabi_fsub>
 801eaa0:	1c01      	adds	r1, r0, #0
 801eaa2:	9801      	ldr	r0, [sp, #4]
 801eaa4:	f7e1 fd4e 	bl	8000544 <__aeabi_fcmple>
 801eaa8:	2800      	cmp	r0, #0
 801eaaa:	d00b      	beq.n	801eac4 <__ieee754_sqrtf+0xbc>
 801eaac:	6828      	ldr	r0, [r5, #0]
 801eaae:	6831      	ldr	r1, [r6, #0]
 801eab0:	f7e1 ff06 	bl	80008c0 <__aeabi_fadd>
 801eab4:	682d      	ldr	r5, [r5, #0]
 801eab6:	1c01      	adds	r1, r0, #0
 801eab8:	1c28      	adds	r0, r5, #0
 801eaba:	f7e1 fd39 	bl	8000530 <__aeabi_fcmplt>
 801eabe:	2800      	cmp	r0, #0
 801eac0:	d011      	beq.n	801eae6 <__ieee754_sqrtf+0xde>
 801eac2:	3402      	adds	r4, #2
 801eac4:	23fc      	movs	r3, #252	@ 0xfc
 801eac6:	1064      	asrs	r4, r4, #1
 801eac8:	059b      	lsls	r3, r3, #22
 801eaca:	18e3      	adds	r3, r4, r3
 801eacc:	05fc      	lsls	r4, r7, #23
 801eace:	18e4      	adds	r4, r4, r3
 801ead0:	e7ac      	b.n	801ea2c <__ieee754_sqrtf+0x24>
 801ead2:	005b      	lsls	r3, r3, #1
 801ead4:	3201      	adds	r2, #1
 801ead6:	4203      	tst	r3, r0
 801ead8:	d0fb      	beq.n	801ead2 <__ieee754_sqrtf+0xca>
 801eada:	3a01      	subs	r2, #1
 801eadc:	1a89      	subs	r1, r1, r2
 801eade:	e7b8      	b.n	801ea52 <__ieee754_sqrtf+0x4a>
 801eae0:	2080      	movs	r0, #128	@ 0x80
 801eae2:	0400      	lsls	r0, r0, #16
 801eae4:	e7f7      	b.n	801ead6 <__ieee754_sqrtf+0xce>
 801eae6:	2301      	movs	r3, #1
 801eae8:	3401      	adds	r4, #1
 801eaea:	439c      	bics	r4, r3
 801eaec:	e7ea      	b.n	801eac4 <__ieee754_sqrtf+0xbc>
 801eaee:	46c0      	nop			@ (mov r8, r8)
 801eaf0:	20000420 	.word	0x20000420
 801eaf4:	2000041c 	.word	0x2000041c

0801eaf8 <roundf>:
 801eaf8:	0dc3      	lsrs	r3, r0, #23
 801eafa:	b2db      	uxtb	r3, r3
 801eafc:	3b7f      	subs	r3, #127	@ 0x7f
 801eafe:	0002      	movs	r2, r0
 801eb00:	b510      	push	{r4, lr}
 801eb02:	2b16      	cmp	r3, #22
 801eb04:	dc13      	bgt.n	801eb2e <roundf+0x36>
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	da07      	bge.n	801eb1a <roundf+0x22>
 801eb0a:	0fc2      	lsrs	r2, r0, #31
 801eb0c:	07d0      	lsls	r0, r2, #31
 801eb0e:	3301      	adds	r3, #1
 801eb10:	d102      	bne.n	801eb18 <roundf+0x20>
 801eb12:	23fe      	movs	r3, #254	@ 0xfe
 801eb14:	059b      	lsls	r3, r3, #22
 801eb16:	4318      	orrs	r0, r3
 801eb18:	bd10      	pop	{r4, pc}
 801eb1a:	4908      	ldr	r1, [pc, #32]	@ (801eb3c <roundf+0x44>)
 801eb1c:	4119      	asrs	r1, r3
 801eb1e:	4208      	tst	r0, r1
 801eb20:	d0fa      	beq.n	801eb18 <roundf+0x20>
 801eb22:	2080      	movs	r0, #128	@ 0x80
 801eb24:	03c0      	lsls	r0, r0, #15
 801eb26:	4118      	asrs	r0, r3
 801eb28:	1880      	adds	r0, r0, r2
 801eb2a:	4388      	bics	r0, r1
 801eb2c:	e7f4      	b.n	801eb18 <roundf+0x20>
 801eb2e:	2b80      	cmp	r3, #128	@ 0x80
 801eb30:	d1f2      	bne.n	801eb18 <roundf+0x20>
 801eb32:	1c01      	adds	r1, r0, #0
 801eb34:	f7e1 fec4 	bl	80008c0 <__aeabi_fadd>
 801eb38:	e7ee      	b.n	801eb18 <roundf+0x20>
 801eb3a:	46c0      	nop			@ (mov r8, r8)
 801eb3c:	007fffff 	.word	0x007fffff

0801eb40 <__ieee754_expf>:
 801eb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eb42:	21ff      	movs	r1, #255	@ 0xff
 801eb44:	0043      	lsls	r3, r0, #1
 801eb46:	1c04      	adds	r4, r0, #0
 801eb48:	085b      	lsrs	r3, r3, #1
 801eb4a:	05c9      	lsls	r1, r1, #23
 801eb4c:	428b      	cmp	r3, r1
 801eb4e:	d904      	bls.n	801eb5a <__ieee754_expf+0x1a>
 801eb50:	1c01      	adds	r1, r0, #0
 801eb52:	1c20      	adds	r0, r4, #0
 801eb54:	f7e1 feb4 	bl	80008c0 <__aeabi_fadd>
 801eb58:	e00d      	b.n	801eb76 <__ieee754_expf+0x36>
 801eb5a:	0fc6      	lsrs	r6, r0, #31
 801eb5c:	428b      	cmp	r3, r1
 801eb5e:	d104      	bne.n	801eb6a <__ieee754_expf+0x2a>
 801eb60:	2e00      	cmp	r6, #0
 801eb62:	d000      	beq.n	801eb66 <__ieee754_expf+0x26>
 801eb64:	e0ba      	b.n	801ecdc <__ieee754_expf+0x19c>
 801eb66:	1c20      	adds	r0, r4, #0
 801eb68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801eb6a:	495d      	ldr	r1, [pc, #372]	@ (801ece0 <__ieee754_expf+0x1a0>)
 801eb6c:	4288      	cmp	r0, r1
 801eb6e:	dd04      	ble.n	801eb7a <__ieee754_expf+0x3a>
 801eb70:	2000      	movs	r0, #0
 801eb72:	f000 f8f1 	bl	801ed58 <__math_oflowf>
 801eb76:	1c04      	adds	r4, r0, #0
 801eb78:	e7f5      	b.n	801eb66 <__ieee754_expf+0x26>
 801eb7a:	2800      	cmp	r0, #0
 801eb7c:	da06      	bge.n	801eb8c <__ieee754_expf+0x4c>
 801eb7e:	4a59      	ldr	r2, [pc, #356]	@ (801ece4 <__ieee754_expf+0x1a4>)
 801eb80:	4293      	cmp	r3, r2
 801eb82:	d903      	bls.n	801eb8c <__ieee754_expf+0x4c>
 801eb84:	2000      	movs	r0, #0
 801eb86:	f000 f8e1 	bl	801ed4c <__math_uflowf>
 801eb8a:	e7f4      	b.n	801eb76 <__ieee754_expf+0x36>
 801eb8c:	4a56      	ldr	r2, [pc, #344]	@ (801ece8 <__ieee754_expf+0x1a8>)
 801eb8e:	4293      	cmp	r3, r2
 801eb90:	d96e      	bls.n	801ec70 <__ieee754_expf+0x130>
 801eb92:	4a56      	ldr	r2, [pc, #344]	@ (801ecec <__ieee754_expf+0x1ac>)
 801eb94:	00b5      	lsls	r5, r6, #2
 801eb96:	4293      	cmp	r3, r2
 801eb98:	d84e      	bhi.n	801ec38 <__ieee754_expf+0xf8>
 801eb9a:	4b55      	ldr	r3, [pc, #340]	@ (801ecf0 <__ieee754_expf+0x1b0>)
 801eb9c:	1c20      	adds	r0, r4, #0
 801eb9e:	5959      	ldr	r1, [r3, r5]
 801eba0:	f7e2 fb3c 	bl	800121c <__aeabi_fsub>
 801eba4:	4b53      	ldr	r3, [pc, #332]	@ (801ecf4 <__ieee754_expf+0x1b4>)
 801eba6:	1c07      	adds	r7, r0, #0
 801eba8:	595b      	ldr	r3, [r3, r5]
 801ebaa:	2501      	movs	r5, #1
 801ebac:	1bad      	subs	r5, r5, r6
 801ebae:	9300      	str	r3, [sp, #0]
 801ebb0:	1bad      	subs	r5, r5, r6
 801ebb2:	9900      	ldr	r1, [sp, #0]
 801ebb4:	1c38      	adds	r0, r7, #0
 801ebb6:	f7e2 fb31 	bl	800121c <__aeabi_fsub>
 801ebba:	1c04      	adds	r4, r0, #0
 801ebbc:	1c21      	adds	r1, r4, #0
 801ebbe:	1c20      	adds	r0, r4, #0
 801ebc0:	f7e2 f9ee 	bl	8000fa0 <__aeabi_fmul>
 801ebc4:	494c      	ldr	r1, [pc, #304]	@ (801ecf8 <__ieee754_expf+0x1b8>)
 801ebc6:	1c06      	adds	r6, r0, #0
 801ebc8:	f7e2 f9ea 	bl	8000fa0 <__aeabi_fmul>
 801ebcc:	494b      	ldr	r1, [pc, #300]	@ (801ecfc <__ieee754_expf+0x1bc>)
 801ebce:	f7e2 fb25 	bl	800121c <__aeabi_fsub>
 801ebd2:	1c31      	adds	r1, r6, #0
 801ebd4:	f7e2 f9e4 	bl	8000fa0 <__aeabi_fmul>
 801ebd8:	4949      	ldr	r1, [pc, #292]	@ (801ed00 <__ieee754_expf+0x1c0>)
 801ebda:	f7e1 fe71 	bl	80008c0 <__aeabi_fadd>
 801ebde:	1c31      	adds	r1, r6, #0
 801ebe0:	f7e2 f9de 	bl	8000fa0 <__aeabi_fmul>
 801ebe4:	4947      	ldr	r1, [pc, #284]	@ (801ed04 <__ieee754_expf+0x1c4>)
 801ebe6:	f7e2 fb19 	bl	800121c <__aeabi_fsub>
 801ebea:	1c31      	adds	r1, r6, #0
 801ebec:	f7e2 f9d8 	bl	8000fa0 <__aeabi_fmul>
 801ebf0:	4945      	ldr	r1, [pc, #276]	@ (801ed08 <__ieee754_expf+0x1c8>)
 801ebf2:	f7e1 fe65 	bl	80008c0 <__aeabi_fadd>
 801ebf6:	1c31      	adds	r1, r6, #0
 801ebf8:	f7e2 f9d2 	bl	8000fa0 <__aeabi_fmul>
 801ebfc:	1c01      	adds	r1, r0, #0
 801ebfe:	1c20      	adds	r0, r4, #0
 801ec00:	f7e2 fb0c 	bl	800121c <__aeabi_fsub>
 801ec04:	1c01      	adds	r1, r0, #0
 801ec06:	1c06      	adds	r6, r0, #0
 801ec08:	1c20      	adds	r0, r4, #0
 801ec0a:	f7e2 f9c9 	bl	8000fa0 <__aeabi_fmul>
 801ec0e:	9001      	str	r0, [sp, #4]
 801ec10:	2d00      	cmp	r5, #0
 801ec12:	d140      	bne.n	801ec96 <__ieee754_expf+0x156>
 801ec14:	2180      	movs	r1, #128	@ 0x80
 801ec16:	1c30      	adds	r0, r6, #0
 801ec18:	05c9      	lsls	r1, r1, #23
 801ec1a:	f7e2 faff 	bl	800121c <__aeabi_fsub>
 801ec1e:	1c01      	adds	r1, r0, #0
 801ec20:	9801      	ldr	r0, [sp, #4]
 801ec22:	f7e1 ffd7 	bl	8000bd4 <__aeabi_fdiv>
 801ec26:	1c21      	adds	r1, r4, #0
 801ec28:	f7e2 faf8 	bl	800121c <__aeabi_fsub>
 801ec2c:	1c01      	adds	r1, r0, #0
 801ec2e:	20fe      	movs	r0, #254	@ 0xfe
 801ec30:	0580      	lsls	r0, r0, #22
 801ec32:	f7e2 faf3 	bl	800121c <__aeabi_fsub>
 801ec36:	e79e      	b.n	801eb76 <__ieee754_expf+0x36>
 801ec38:	4934      	ldr	r1, [pc, #208]	@ (801ed0c <__ieee754_expf+0x1cc>)
 801ec3a:	1c20      	adds	r0, r4, #0
 801ec3c:	f7e2 f9b0 	bl	8000fa0 <__aeabi_fmul>
 801ec40:	4b33      	ldr	r3, [pc, #204]	@ (801ed10 <__ieee754_expf+0x1d0>)
 801ec42:	5959      	ldr	r1, [r3, r5]
 801ec44:	f7e1 fe3c 	bl	80008c0 <__aeabi_fadd>
 801ec48:	f7e2 fca2 	bl	8001590 <__aeabi_f2iz>
 801ec4c:	0005      	movs	r5, r0
 801ec4e:	f7e2 fcbf 	bl	80015d0 <__aeabi_i2f>
 801ec52:	4930      	ldr	r1, [pc, #192]	@ (801ed14 <__ieee754_expf+0x1d4>)
 801ec54:	1c06      	adds	r6, r0, #0
 801ec56:	f7e2 f9a3 	bl	8000fa0 <__aeabi_fmul>
 801ec5a:	1c01      	adds	r1, r0, #0
 801ec5c:	1c20      	adds	r0, r4, #0
 801ec5e:	f7e2 fadd 	bl	800121c <__aeabi_fsub>
 801ec62:	492d      	ldr	r1, [pc, #180]	@ (801ed18 <__ieee754_expf+0x1d8>)
 801ec64:	1c07      	adds	r7, r0, #0
 801ec66:	1c30      	adds	r0, r6, #0
 801ec68:	f7e2 f99a 	bl	8000fa0 <__aeabi_fmul>
 801ec6c:	9000      	str	r0, [sp, #0]
 801ec6e:	e7a0      	b.n	801ebb2 <__ieee754_expf+0x72>
 801ec70:	22d0      	movs	r2, #208	@ 0xd0
 801ec72:	0592      	lsls	r2, r2, #22
 801ec74:	4293      	cmp	r3, r2
 801ec76:	d20c      	bcs.n	801ec92 <__ieee754_expf+0x152>
 801ec78:	4928      	ldr	r1, [pc, #160]	@ (801ed1c <__ieee754_expf+0x1dc>)
 801ec7a:	1c20      	adds	r0, r4, #0
 801ec7c:	f7e1 fe20 	bl	80008c0 <__aeabi_fadd>
 801ec80:	21fe      	movs	r1, #254	@ 0xfe
 801ec82:	0589      	lsls	r1, r1, #22
 801ec84:	f7e1 fc68 	bl	8000558 <__aeabi_fcmpgt>
 801ec88:	1e05      	subs	r5, r0, #0
 801ec8a:	d097      	beq.n	801ebbc <__ieee754_expf+0x7c>
 801ec8c:	21fe      	movs	r1, #254	@ 0xfe
 801ec8e:	0589      	lsls	r1, r1, #22
 801ec90:	e75f      	b.n	801eb52 <__ieee754_expf+0x12>
 801ec92:	2500      	movs	r5, #0
 801ec94:	e792      	b.n	801ebbc <__ieee754_expf+0x7c>
 801ec96:	2080      	movs	r0, #128	@ 0x80
 801ec98:	1c31      	adds	r1, r6, #0
 801ec9a:	05c0      	lsls	r0, r0, #23
 801ec9c:	f7e2 fabe 	bl	800121c <__aeabi_fsub>
 801eca0:	1c01      	adds	r1, r0, #0
 801eca2:	9801      	ldr	r0, [sp, #4]
 801eca4:	f7e1 ff96 	bl	8000bd4 <__aeabi_fdiv>
 801eca8:	1c01      	adds	r1, r0, #0
 801ecaa:	9800      	ldr	r0, [sp, #0]
 801ecac:	f7e2 fab6 	bl	800121c <__aeabi_fsub>
 801ecb0:	1c39      	adds	r1, r7, #0
 801ecb2:	f7e2 fab3 	bl	800121c <__aeabi_fsub>
 801ecb6:	1c01      	adds	r1, r0, #0
 801ecb8:	20fe      	movs	r0, #254	@ 0xfe
 801ecba:	0580      	lsls	r0, r0, #22
 801ecbc:	f7e2 faae 	bl	800121c <__aeabi_fsub>
 801ecc0:	002b      	movs	r3, r5
 801ecc2:	337d      	adds	r3, #125	@ 0x7d
 801ecc4:	db02      	blt.n	801eccc <__ieee754_expf+0x18c>
 801ecc6:	05ec      	lsls	r4, r5, #23
 801ecc8:	1824      	adds	r4, r4, r0
 801ecca:	e74c      	b.n	801eb66 <__ieee754_expf+0x26>
 801eccc:	21d8      	movs	r1, #216	@ 0xd8
 801ecce:	3564      	adds	r5, #100	@ 0x64
 801ecd0:	05ed      	lsls	r5, r5, #23
 801ecd2:	1828      	adds	r0, r5, r0
 801ecd4:	0509      	lsls	r1, r1, #20
 801ecd6:	f7e2 f963 	bl	8000fa0 <__aeabi_fmul>
 801ecda:	e74c      	b.n	801eb76 <__ieee754_expf+0x36>
 801ecdc:	2400      	movs	r4, #0
 801ecde:	e742      	b.n	801eb66 <__ieee754_expf+0x26>
 801ece0:	42b17217 	.word	0x42b17217
 801ece4:	42cff1b5 	.word	0x42cff1b5
 801ece8:	3eb17218 	.word	0x3eb17218
 801ecec:	3f851591 	.word	0x3f851591
 801ecf0:	08020a60 	.word	0x08020a60
 801ecf4:	08020a58 	.word	0x08020a58
 801ecf8:	3331bb4c 	.word	0x3331bb4c
 801ecfc:	35ddea0e 	.word	0x35ddea0e
 801ed00:	388ab355 	.word	0x388ab355
 801ed04:	3b360b61 	.word	0x3b360b61
 801ed08:	3e2aaaab 	.word	0x3e2aaaab
 801ed0c:	3fb8aa3b 	.word	0x3fb8aa3b
 801ed10:	08020a68 	.word	0x08020a68
 801ed14:	3f317180 	.word	0x3f317180
 801ed18:	3717f7d1 	.word	0x3717f7d1
 801ed1c:	7149f2ca 	.word	0x7149f2ca

0801ed20 <with_errnof>:
 801ed20:	b570      	push	{r4, r5, r6, lr}
 801ed22:	000d      	movs	r5, r1
 801ed24:	1c04      	adds	r4, r0, #0
 801ed26:	f7fd f881 	bl	801be2c <__errno>
 801ed2a:	6005      	str	r5, [r0, #0]
 801ed2c:	1c20      	adds	r0, r4, #0
 801ed2e:	bd70      	pop	{r4, r5, r6, pc}

0801ed30 <xflowf>:
 801ed30:	b510      	push	{r4, lr}
 801ed32:	1c0b      	adds	r3, r1, #0
 801ed34:	2800      	cmp	r0, #0
 801ed36:	d002      	beq.n	801ed3e <xflowf+0xe>
 801ed38:	2380      	movs	r3, #128	@ 0x80
 801ed3a:	061b      	lsls	r3, r3, #24
 801ed3c:	18cb      	adds	r3, r1, r3
 801ed3e:	1c18      	adds	r0, r3, #0
 801ed40:	f7e2 f92e 	bl	8000fa0 <__aeabi_fmul>
 801ed44:	2122      	movs	r1, #34	@ 0x22
 801ed46:	f7ff ffeb 	bl	801ed20 <with_errnof>
 801ed4a:	bd10      	pop	{r4, pc}

0801ed4c <__math_uflowf>:
 801ed4c:	2180      	movs	r1, #128	@ 0x80
 801ed4e:	b510      	push	{r4, lr}
 801ed50:	0549      	lsls	r1, r1, #21
 801ed52:	f7ff ffed 	bl	801ed30 <xflowf>
 801ed56:	bd10      	pop	{r4, pc}

0801ed58 <__math_oflowf>:
 801ed58:	21e0      	movs	r1, #224	@ 0xe0
 801ed5a:	b510      	push	{r4, lr}
 801ed5c:	05c9      	lsls	r1, r1, #23
 801ed5e:	f7ff ffe7 	bl	801ed30 <xflowf>
 801ed62:	bd10      	pop	{r4, pc}

0801ed64 <_init>:
 801ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed66:	46c0      	nop			@ (mov r8, r8)
 801ed68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed6a:	bc08      	pop	{r3}
 801ed6c:	469e      	mov	lr, r3
 801ed6e:	4770      	bx	lr

0801ed70 <_fini>:
 801ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed72:	46c0      	nop			@ (mov r8, r8)
 801ed74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed76:	bc08      	pop	{r3}
 801ed78:	469e      	mov	lr, r3
 801ed7a:	4770      	bx	lr
