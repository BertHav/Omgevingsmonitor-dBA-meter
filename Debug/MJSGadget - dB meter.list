
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e0bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a38  0801e180  0801e180  0001f180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fbb8  0801fbb8  000213cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801fbb8  0801fbb8  00020bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fbc0  0801fbc0  000213cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fbc0  0801fbc0  00020bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fbc4  0801fbc4  00020bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003cc  20000000  0801fbc8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003480  200003cc  0801ff94  000213cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000384c  0801ff94  0002184c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000213cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031513  00000000  00000000  000213f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008f2d  00000000  00000000  00052907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a0  00000000  00000000  0005b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d27  00000000  00000000  0005dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022329  00000000  00000000  0005fcff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f07e  00000000  00000000  00082028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f1ca  00000000  00000000  000c10a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00160270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a02c  00000000  00000000  00160324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016a350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0016a3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016c939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003cc 	.word	0x200003cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801e164 	.word	0x0801e164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003d0 	.word	0x200003d0
 8000104:	0801e164 	.word	0x0801e164

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strlen>:
 8000158:	2300      	movs	r3, #0
 800015a:	5cc2      	ldrb	r2, [r0, r3]
 800015c:	3301      	adds	r3, #1
 800015e:	2a00      	cmp	r2, #0
 8000160:	d1fb      	bne.n	800015a <strlen+0x2>
 8000162:	1e58      	subs	r0, r3, #1
 8000164:	4770      	bx	lr
	...

08000168 <__gnu_thumb1_case_uqi>:
 8000168:	b402      	push	{r1}
 800016a:	4671      	mov	r1, lr
 800016c:	0849      	lsrs	r1, r1, #1
 800016e:	0049      	lsls	r1, r1, #1
 8000170:	5c09      	ldrb	r1, [r1, r0]
 8000172:	0049      	lsls	r1, r1, #1
 8000174:	448e      	add	lr, r1
 8000176:	bc02      	pop	{r1}
 8000178:	4770      	bx	lr
 800017a:	46c0      	nop			@ (mov r8, r8)

0800017c <__gnu_thumb1_case_shi>:
 800017c:	b403      	push	{r0, r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0040      	lsls	r0, r0, #1
 8000184:	0049      	lsls	r1, r1, #1
 8000186:	5e09      	ldrsh	r1, [r1, r0]
 8000188:	0049      	lsls	r1, r1, #1
 800018a:	448e      	add	lr, r1
 800018c:	bc03      	pop	{r0, r1}
 800018e:	4770      	bx	lr

08000190 <__udivsi3>:
 8000190:	2200      	movs	r2, #0
 8000192:	0843      	lsrs	r3, r0, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d374      	bcc.n	8000282 <__udivsi3+0xf2>
 8000198:	0903      	lsrs	r3, r0, #4
 800019a:	428b      	cmp	r3, r1
 800019c:	d35f      	bcc.n	800025e <__udivsi3+0xce>
 800019e:	0a03      	lsrs	r3, r0, #8
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d344      	bcc.n	800022e <__udivsi3+0x9e>
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d328      	bcc.n	80001fc <__udivsi3+0x6c>
 80001aa:	0c03      	lsrs	r3, r0, #16
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d30d      	bcc.n	80001cc <__udivsi3+0x3c>
 80001b0:	22ff      	movs	r2, #255	@ 0xff
 80001b2:	0209      	lsls	r1, r1, #8
 80001b4:	ba12      	rev	r2, r2
 80001b6:	0c03      	lsrs	r3, r0, #16
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d302      	bcc.n	80001c2 <__udivsi3+0x32>
 80001bc:	1212      	asrs	r2, r2, #8
 80001be:	0209      	lsls	r1, r1, #8
 80001c0:	d065      	beq.n	800028e <__udivsi3+0xfe>
 80001c2:	0b03      	lsrs	r3, r0, #12
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d319      	bcc.n	80001fc <__udivsi3+0x6c>
 80001c8:	e000      	b.n	80001cc <__udivsi3+0x3c>
 80001ca:	0a09      	lsrs	r1, r1, #8
 80001cc:	0bc3      	lsrs	r3, r0, #15
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x46>
 80001d2:	03cb      	lsls	r3, r1, #15
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0b83      	lsrs	r3, r0, #14
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x52>
 80001de:	038b      	lsls	r3, r1, #14
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0b43      	lsrs	r3, r0, #13
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x5e>
 80001ea:	034b      	lsls	r3, r1, #13
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0b03      	lsrs	r3, r0, #12
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x6a>
 80001f6:	030b      	lsls	r3, r1, #12
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0ac3      	lsrs	r3, r0, #11
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x76>
 8000202:	02cb      	lsls	r3, r1, #11
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0a83      	lsrs	r3, r0, #10
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x82>
 800020e:	028b      	lsls	r3, r1, #10
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0a43      	lsrs	r3, r0, #9
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x8e>
 800021a:	024b      	lsls	r3, r1, #9
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0a03      	lsrs	r3, r0, #8
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x9a>
 8000226:	020b      	lsls	r3, r1, #8
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	d2cd      	bcs.n	80001ca <__udivsi3+0x3a>
 800022e:	09c3      	lsrs	r3, r0, #7
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xa8>
 8000234:	01cb      	lsls	r3, r1, #7
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0983      	lsrs	r3, r0, #6
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xb4>
 8000240:	018b      	lsls	r3, r1, #6
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0943      	lsrs	r3, r0, #5
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xc0>
 800024c:	014b      	lsls	r3, r1, #5
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xcc>
 8000258:	010b      	lsls	r3, r1, #4
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	08c3      	lsrs	r3, r0, #3
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xd8>
 8000264:	00cb      	lsls	r3, r1, #3
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0883      	lsrs	r3, r0, #2
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xe4>
 8000270:	008b      	lsls	r3, r1, #2
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0843      	lsrs	r3, r0, #1
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xf0>
 800027c:	004b      	lsls	r3, r1, #1
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	1a41      	subs	r1, r0, r1
 8000284:	d200      	bcs.n	8000288 <__udivsi3+0xf8>
 8000286:	4601      	mov	r1, r0
 8000288:	4152      	adcs	r2, r2
 800028a:	4610      	mov	r0, r2
 800028c:	4770      	bx	lr
 800028e:	e7ff      	b.n	8000290 <__udivsi3+0x100>
 8000290:	b501      	push	{r0, lr}
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f8f0 	bl	8000478 <__aeabi_idiv0>
 8000298:	bd02      	pop	{r1, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_uidivmod>:
 800029c:	2900      	cmp	r1, #0
 800029e:	d0f7      	beq.n	8000290 <__udivsi3+0x100>
 80002a0:	e776      	b.n	8000190 <__udivsi3>
 80002a2:	4770      	bx	lr

080002a4 <__divsi3>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	430b      	orrs	r3, r1
 80002a8:	d47f      	bmi.n	80003aa <__divsi3+0x106>
 80002aa:	2200      	movs	r2, #0
 80002ac:	0843      	lsrs	r3, r0, #1
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d374      	bcc.n	800039c <__divsi3+0xf8>
 80002b2:	0903      	lsrs	r3, r0, #4
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d35f      	bcc.n	8000378 <__divsi3+0xd4>
 80002b8:	0a03      	lsrs	r3, r0, #8
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d344      	bcc.n	8000348 <__divsi3+0xa4>
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d328      	bcc.n	8000316 <__divsi3+0x72>
 80002c4:	0c03      	lsrs	r3, r0, #16
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d30d      	bcc.n	80002e6 <__divsi3+0x42>
 80002ca:	22ff      	movs	r2, #255	@ 0xff
 80002cc:	0209      	lsls	r1, r1, #8
 80002ce:	ba12      	rev	r2, r2
 80002d0:	0c03      	lsrs	r3, r0, #16
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__divsi3+0x38>
 80002d6:	1212      	asrs	r2, r2, #8
 80002d8:	0209      	lsls	r1, r1, #8
 80002da:	d065      	beq.n	80003a8 <__divsi3+0x104>
 80002dc:	0b03      	lsrs	r3, r0, #12
 80002de:	428b      	cmp	r3, r1
 80002e0:	d319      	bcc.n	8000316 <__divsi3+0x72>
 80002e2:	e000      	b.n	80002e6 <__divsi3+0x42>
 80002e4:	0a09      	lsrs	r1, r1, #8
 80002e6:	0bc3      	lsrs	r3, r0, #15
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x4c>
 80002ec:	03cb      	lsls	r3, r1, #15
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0b83      	lsrs	r3, r0, #14
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x58>
 80002f8:	038b      	lsls	r3, r1, #14
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0b43      	lsrs	r3, r0, #13
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x64>
 8000304:	034b      	lsls	r3, r1, #13
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0b03      	lsrs	r3, r0, #12
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0x70>
 8000310:	030b      	lsls	r3, r1, #12
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	0ac3      	lsrs	r3, r0, #11
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__divsi3+0x7c>
 800031c:	02cb      	lsls	r3, r1, #11
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0a83      	lsrs	r3, r0, #10
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__divsi3+0x88>
 8000328:	028b      	lsls	r3, r1, #10
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	0a43      	lsrs	r3, r0, #9
 8000330:	428b      	cmp	r3, r1
 8000332:	d301      	bcc.n	8000338 <__divsi3+0x94>
 8000334:	024b      	lsls	r3, r1, #9
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4152      	adcs	r2, r2
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d301      	bcc.n	8000344 <__divsi3+0xa0>
 8000340:	020b      	lsls	r3, r1, #8
 8000342:	1ac0      	subs	r0, r0, r3
 8000344:	4152      	adcs	r2, r2
 8000346:	d2cd      	bcs.n	80002e4 <__divsi3+0x40>
 8000348:	09c3      	lsrs	r3, r0, #7
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xae>
 800034e:	01cb      	lsls	r3, r1, #7
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0983      	lsrs	r3, r0, #6
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xba>
 800035a:	018b      	lsls	r3, r1, #6
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0943      	lsrs	r3, r0, #5
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xc6>
 8000366:	014b      	lsls	r3, r1, #5
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d301      	bcc.n	8000376 <__divsi3+0xd2>
 8000372:	010b      	lsls	r3, r1, #4
 8000374:	1ac0      	subs	r0, r0, r3
 8000376:	4152      	adcs	r2, r2
 8000378:	08c3      	lsrs	r3, r0, #3
 800037a:	428b      	cmp	r3, r1
 800037c:	d301      	bcc.n	8000382 <__divsi3+0xde>
 800037e:	00cb      	lsls	r3, r1, #3
 8000380:	1ac0      	subs	r0, r0, r3
 8000382:	4152      	adcs	r2, r2
 8000384:	0883      	lsrs	r3, r0, #2
 8000386:	428b      	cmp	r3, r1
 8000388:	d301      	bcc.n	800038e <__divsi3+0xea>
 800038a:	008b      	lsls	r3, r1, #2
 800038c:	1ac0      	subs	r0, r0, r3
 800038e:	4152      	adcs	r2, r2
 8000390:	0843      	lsrs	r3, r0, #1
 8000392:	428b      	cmp	r3, r1
 8000394:	d301      	bcc.n	800039a <__divsi3+0xf6>
 8000396:	004b      	lsls	r3, r1, #1
 8000398:	1ac0      	subs	r0, r0, r3
 800039a:	4152      	adcs	r2, r2
 800039c:	1a41      	subs	r1, r0, r1
 800039e:	d200      	bcs.n	80003a2 <__divsi3+0xfe>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4152      	adcs	r2, r2
 80003a4:	4610      	mov	r0, r2
 80003a6:	4770      	bx	lr
 80003a8:	e05d      	b.n	8000466 <__divsi3+0x1c2>
 80003aa:	0fca      	lsrs	r2, r1, #31
 80003ac:	d000      	beq.n	80003b0 <__divsi3+0x10c>
 80003ae:	4249      	negs	r1, r1
 80003b0:	1003      	asrs	r3, r0, #32
 80003b2:	d300      	bcc.n	80003b6 <__divsi3+0x112>
 80003b4:	4240      	negs	r0, r0
 80003b6:	4053      	eors	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	469c      	mov	ip, r3
 80003bc:	0903      	lsrs	r3, r0, #4
 80003be:	428b      	cmp	r3, r1
 80003c0:	d32d      	bcc.n	800041e <__divsi3+0x17a>
 80003c2:	0a03      	lsrs	r3, r0, #8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d312      	bcc.n	80003ee <__divsi3+0x14a>
 80003c8:	22fc      	movs	r2, #252	@ 0xfc
 80003ca:	0189      	lsls	r1, r1, #6
 80003cc:	ba12      	rev	r2, r2
 80003ce:	0a03      	lsrs	r3, r0, #8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d30c      	bcc.n	80003ee <__divsi3+0x14a>
 80003d4:	0189      	lsls	r1, r1, #6
 80003d6:	1192      	asrs	r2, r2, #6
 80003d8:	428b      	cmp	r3, r1
 80003da:	d308      	bcc.n	80003ee <__divsi3+0x14a>
 80003dc:	0189      	lsls	r1, r1, #6
 80003de:	1192      	asrs	r2, r2, #6
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d304      	bcc.n	80003ee <__divsi3+0x14a>
 80003e4:	0189      	lsls	r1, r1, #6
 80003e6:	d03a      	beq.n	800045e <__divsi3+0x1ba>
 80003e8:	1192      	asrs	r2, r2, #6
 80003ea:	e000      	b.n	80003ee <__divsi3+0x14a>
 80003ec:	0989      	lsrs	r1, r1, #6
 80003ee:	09c3      	lsrs	r3, r0, #7
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x154>
 80003f4:	01cb      	lsls	r3, r1, #7
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0983      	lsrs	r3, r0, #6
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x160>
 8000400:	018b      	lsls	r3, r1, #6
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	0943      	lsrs	r3, r0, #5
 8000408:	428b      	cmp	r3, r1
 800040a:	d301      	bcc.n	8000410 <__divsi3+0x16c>
 800040c:	014b      	lsls	r3, r1, #5
 800040e:	1ac0      	subs	r0, r0, r3
 8000410:	4152      	adcs	r2, r2
 8000412:	0903      	lsrs	r3, r0, #4
 8000414:	428b      	cmp	r3, r1
 8000416:	d301      	bcc.n	800041c <__divsi3+0x178>
 8000418:	010b      	lsls	r3, r1, #4
 800041a:	1ac0      	subs	r0, r0, r3
 800041c:	4152      	adcs	r2, r2
 800041e:	08c3      	lsrs	r3, r0, #3
 8000420:	428b      	cmp	r3, r1
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x184>
 8000424:	00cb      	lsls	r3, r1, #3
 8000426:	1ac0      	subs	r0, r0, r3
 8000428:	4152      	adcs	r2, r2
 800042a:	0883      	lsrs	r3, r0, #2
 800042c:	428b      	cmp	r3, r1
 800042e:	d301      	bcc.n	8000434 <__divsi3+0x190>
 8000430:	008b      	lsls	r3, r1, #2
 8000432:	1ac0      	subs	r0, r0, r3
 8000434:	4152      	adcs	r2, r2
 8000436:	d2d9      	bcs.n	80003ec <__divsi3+0x148>
 8000438:	0843      	lsrs	r3, r0, #1
 800043a:	428b      	cmp	r3, r1
 800043c:	d301      	bcc.n	8000442 <__divsi3+0x19e>
 800043e:	004b      	lsls	r3, r1, #1
 8000440:	1ac0      	subs	r0, r0, r3
 8000442:	4152      	adcs	r2, r2
 8000444:	1a41      	subs	r1, r0, r1
 8000446:	d200      	bcs.n	800044a <__divsi3+0x1a6>
 8000448:	4601      	mov	r1, r0
 800044a:	4663      	mov	r3, ip
 800044c:	4152      	adcs	r2, r2
 800044e:	105b      	asrs	r3, r3, #1
 8000450:	4610      	mov	r0, r2
 8000452:	d301      	bcc.n	8000458 <__divsi3+0x1b4>
 8000454:	4240      	negs	r0, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d500      	bpl.n	800045c <__divsi3+0x1b8>
 800045a:	4249      	negs	r1, r1
 800045c:	4770      	bx	lr
 800045e:	4663      	mov	r3, ip
 8000460:	105b      	asrs	r3, r3, #1
 8000462:	d300      	bcc.n	8000466 <__divsi3+0x1c2>
 8000464:	4240      	negs	r0, r0
 8000466:	b501      	push	{r0, lr}
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f805 	bl	8000478 <__aeabi_idiv0>
 800046e:	bd02      	pop	{r1, pc}

08000470 <__aeabi_idivmod>:
 8000470:	2900      	cmp	r1, #0
 8000472:	d0f8      	beq.n	8000466 <__divsi3+0x1c2>
 8000474:	e716      	b.n	80002a4 <__divsi3>
 8000476:	4770      	bx	lr

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_cdrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	0010      	movs	r0, r2
 8000480:	4662      	mov	r2, ip
 8000482:	468c      	mov	ip, r1
 8000484:	0019      	movs	r1, r3
 8000486:	4663      	mov	r3, ip
 8000488:	e000      	b.n	800048c <__aeabi_cdcmpeq>
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_cdcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f002 f859 	bl	8002544 <__ledf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cdcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_dcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f001 ff99 	bl	80023d4 <__eqdf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_dcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f84b 	bl	8002544 <__ledf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_dcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f841 	bl	8002544 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_dcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f001 ffc3 	bl	800245c <__gedf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_dcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffb9 	bl	800245c <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_dcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_cfrcmple>:
 80004f8:	4684      	mov	ip, r0
 80004fa:	0008      	movs	r0, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	e7ff      	b.n	8000500 <__aeabi_cfcmpeq>

08000500 <__aeabi_cfcmpeq>:
 8000500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000502:	f000 fcf5 	bl	8000ef0 <__lesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	d401      	bmi.n	800050e <__aeabi_cfcmpeq+0xe>
 800050a:	2100      	movs	r1, #0
 800050c:	42c8      	cmn	r0, r1
 800050e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000510 <__aeabi_fcmpeq>:
 8000510:	b510      	push	{r4, lr}
 8000512:	f000 fc75 	bl	8000e00 <__eqsf2>
 8000516:	4240      	negs	r0, r0
 8000518:	3001      	adds	r0, #1
 800051a:	bd10      	pop	{r4, pc}

0800051c <__aeabi_fcmplt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fce7 	bl	8000ef0 <__lesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	db01      	blt.n	800052a <__aeabi_fcmplt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmple>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fcdd 	bl	8000ef0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	dd01      	ble.n	800053e <__aeabi_fcmple+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmpgt>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fc83 	bl	8000e50 <__gesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dc01      	bgt.n	8000552 <__aeabi_fcmpgt+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpge>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc79 	bl	8000e50 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	da01      	bge.n	8000566 <__aeabi_fcmpge+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_uldivmod>:
 800056c:	2b00      	cmp	r3, #0
 800056e:	d111      	bne.n	8000594 <__aeabi_uldivmod+0x28>
 8000570:	2a00      	cmp	r2, #0
 8000572:	d10f      	bne.n	8000594 <__aeabi_uldivmod+0x28>
 8000574:	2900      	cmp	r1, #0
 8000576:	d100      	bne.n	800057a <__aeabi_uldivmod+0xe>
 8000578:	2800      	cmp	r0, #0
 800057a:	d002      	beq.n	8000582 <__aeabi_uldivmod+0x16>
 800057c:	2100      	movs	r1, #0
 800057e:	43c9      	mvns	r1, r1
 8000580:	0008      	movs	r0, r1
 8000582:	b407      	push	{r0, r1, r2}
 8000584:	4802      	ldr	r0, [pc, #8]	@ (8000590 <__aeabi_uldivmod+0x24>)
 8000586:	a102      	add	r1, pc, #8	@ (adr r1, 8000590 <__aeabi_uldivmod+0x24>)
 8000588:	1840      	adds	r0, r0, r1
 800058a:	9002      	str	r0, [sp, #8]
 800058c:	bd03      	pop	{r0, r1, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	fffffee9 	.word	0xfffffee9
 8000594:	b403      	push	{r0, r1}
 8000596:	4668      	mov	r0, sp
 8000598:	b501      	push	{r0, lr}
 800059a:	9802      	ldr	r0, [sp, #8]
 800059c:	f000 f8ba 	bl	8000714 <__udivmoddi4>
 80005a0:	9b01      	ldr	r3, [sp, #4]
 80005a2:	469e      	mov	lr, r3
 80005a4:	b002      	add	sp, #8
 80005a6:	bc0c      	pop	{r2, r3}
 80005a8:	4770      	bx	lr
 80005aa:	46c0      	nop			@ (mov r8, r8)

080005ac <__aeabi_lmul>:
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	46ce      	mov	lr, r9
 80005b0:	4699      	mov	r9, r3
 80005b2:	0c03      	lsrs	r3, r0, #16
 80005b4:	469c      	mov	ip, r3
 80005b6:	0413      	lsls	r3, r2, #16
 80005b8:	4647      	mov	r7, r8
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	001d      	movs	r5, r3
 80005be:	000e      	movs	r6, r1
 80005c0:	4661      	mov	r1, ip
 80005c2:	0404      	lsls	r4, r0, #16
 80005c4:	0c24      	lsrs	r4, r4, #16
 80005c6:	b580      	push	{r7, lr}
 80005c8:	0007      	movs	r7, r0
 80005ca:	0c10      	lsrs	r0, r2, #16
 80005cc:	434b      	muls	r3, r1
 80005ce:	4365      	muls	r5, r4
 80005d0:	4341      	muls	r1, r0
 80005d2:	4360      	muls	r0, r4
 80005d4:	0c2c      	lsrs	r4, r5, #16
 80005d6:	18c0      	adds	r0, r0, r3
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	468c      	mov	ip, r1
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d903      	bls.n	80005e8 <__aeabi_lmul+0x3c>
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	025b      	lsls	r3, r3, #9
 80005e4:	4698      	mov	r8, r3
 80005e6:	44c4      	add	ip, r8
 80005e8:	4649      	mov	r1, r9
 80005ea:	4379      	muls	r1, r7
 80005ec:	4356      	muls	r6, r2
 80005ee:	0c23      	lsrs	r3, r4, #16
 80005f0:	042d      	lsls	r5, r5, #16
 80005f2:	0c2d      	lsrs	r5, r5, #16
 80005f4:	1989      	adds	r1, r1, r6
 80005f6:	4463      	add	r3, ip
 80005f8:	0424      	lsls	r4, r4, #16
 80005fa:	1960      	adds	r0, r4, r5
 80005fc:	18c9      	adds	r1, r1, r3
 80005fe:	bcc0      	pop	{r6, r7}
 8000600:	46b9      	mov	r9, r7
 8000602:	46b0      	mov	r8, r6
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__aeabi_f2uiz>:
 8000608:	219e      	movs	r1, #158	@ 0x9e
 800060a:	b510      	push	{r4, lr}
 800060c:	05c9      	lsls	r1, r1, #23
 800060e:	1c04      	adds	r4, r0, #0
 8000610:	f7ff ffa2 	bl	8000558 <__aeabi_fcmpge>
 8000614:	2800      	cmp	r0, #0
 8000616:	d103      	bne.n	8000620 <__aeabi_f2uiz+0x18>
 8000618:	1c20      	adds	r0, r4, #0
 800061a:	f000 ffaf 	bl	800157c <__aeabi_f2iz>
 800061e:	bd10      	pop	{r4, pc}
 8000620:	219e      	movs	r1, #158	@ 0x9e
 8000622:	1c20      	adds	r0, r4, #0
 8000624:	05c9      	lsls	r1, r1, #23
 8000626:	f000 fdef 	bl	8001208 <__aeabi_fsub>
 800062a:	f000 ffa7 	bl	800157c <__aeabi_f2iz>
 800062e:	2380      	movs	r3, #128	@ 0x80
 8000630:	061b      	lsls	r3, r3, #24
 8000632:	469c      	mov	ip, r3
 8000634:	4460      	add	r0, ip
 8000636:	e7f2      	b.n	800061e <__aeabi_f2uiz+0x16>

08000638 <__aeabi_d2uiz>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	2200      	movs	r2, #0
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <__aeabi_d2uiz+0x38>)
 800063e:	0004      	movs	r4, r0
 8000640:	000d      	movs	r5, r1
 8000642:	f7ff ff4f 	bl	80004e4 <__aeabi_dcmpge>
 8000646:	2800      	cmp	r0, #0
 8000648:	d104      	bne.n	8000654 <__aeabi_d2uiz+0x1c>
 800064a:	0020      	movs	r0, r4
 800064c:	0029      	movs	r1, r5
 800064e:	f002 fe71 	bl	8003334 <__aeabi_d2iz>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <__aeabi_d2uiz+0x38>)
 8000656:	2200      	movs	r2, #0
 8000658:	0020      	movs	r0, r4
 800065a:	0029      	movs	r1, r5
 800065c:	f002 faac 	bl	8002bb8 <__aeabi_dsub>
 8000660:	f002 fe68 	bl	8003334 <__aeabi_d2iz>
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	061b      	lsls	r3, r3, #24
 8000668:	469c      	mov	ip, r3
 800066a:	4460      	add	r0, ip
 800066c:	e7f1      	b.n	8000652 <__aeabi_d2uiz+0x1a>
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	41e00000 	.word	0x41e00000

08000674 <__aeabi_d2lz>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2200      	movs	r2, #0
 8000678:	2300      	movs	r3, #0
 800067a:	0004      	movs	r4, r0
 800067c:	000d      	movs	r5, r1
 800067e:	f7ff ff13 	bl	80004a8 <__aeabi_dcmplt>
 8000682:	2800      	cmp	r0, #0
 8000684:	d108      	bne.n	8000698 <__aeabi_d2lz+0x24>
 8000686:	0020      	movs	r0, r4
 8000688:	0029      	movs	r1, r5
 800068a:	f000 f80f 	bl	80006ac <__aeabi_d2ulz>
 800068e:	0002      	movs	r2, r0
 8000690:	000b      	movs	r3, r1
 8000692:	0010      	movs	r0, r2
 8000694:	0019      	movs	r1, r3
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	061b      	lsls	r3, r3, #24
 800069c:	18e9      	adds	r1, r5, r3
 800069e:	0020      	movs	r0, r4
 80006a0:	f000 f804 	bl	80006ac <__aeabi_d2ulz>
 80006a4:	2300      	movs	r3, #0
 80006a6:	4242      	negs	r2, r0
 80006a8:	418b      	sbcs	r3, r1
 80006aa:	e7f2      	b.n	8000692 <__aeabi_d2lz+0x1e>

080006ac <__aeabi_d2ulz>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	2200      	movs	r2, #0
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <__aeabi_d2ulz+0x34>)
 80006b2:	000d      	movs	r5, r1
 80006b4:	0004      	movs	r4, r0
 80006b6:	f001 ffb7 	bl	8002628 <__aeabi_dmul>
 80006ba:	f7ff ffbd 	bl	8000638 <__aeabi_d2uiz>
 80006be:	0006      	movs	r6, r0
 80006c0:	f002 fea2 	bl	8003408 <__aeabi_ui2d>
 80006c4:	2200      	movs	r2, #0
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <__aeabi_d2ulz+0x38>)
 80006c8:	f001 ffae 	bl	8002628 <__aeabi_dmul>
 80006cc:	0002      	movs	r2, r0
 80006ce:	000b      	movs	r3, r1
 80006d0:	0020      	movs	r0, r4
 80006d2:	0029      	movs	r1, r5
 80006d4:	f002 fa70 	bl	8002bb8 <__aeabi_dsub>
 80006d8:	f7ff ffae 	bl	8000638 <__aeabi_d2uiz>
 80006dc:	0031      	movs	r1, r6
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	3df00000 	.word	0x3df00000
 80006e4:	41f00000 	.word	0x41f00000

080006e8 <__aeabi_l2d>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	0006      	movs	r6, r0
 80006ec:	0008      	movs	r0, r1
 80006ee:	f002 fe5d 	bl	80033ac <__aeabi_i2d>
 80006f2:	2200      	movs	r2, #0
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <__aeabi_l2d+0x28>)
 80006f6:	f001 ff97 	bl	8002628 <__aeabi_dmul>
 80006fa:	000d      	movs	r5, r1
 80006fc:	0004      	movs	r4, r0
 80006fe:	0030      	movs	r0, r6
 8000700:	f002 fe82 	bl	8003408 <__aeabi_ui2d>
 8000704:	002b      	movs	r3, r5
 8000706:	0022      	movs	r2, r4
 8000708:	f000 ffe6 	bl	80016d8 <__aeabi_dadd>
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	41f00000 	.word	0x41f00000

08000714 <__udivmoddi4>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	4657      	mov	r7, sl
 8000718:	464e      	mov	r6, r9
 800071a:	4645      	mov	r5, r8
 800071c:	46de      	mov	lr, fp
 800071e:	b5e0      	push	{r5, r6, r7, lr}
 8000720:	0004      	movs	r4, r0
 8000722:	000d      	movs	r5, r1
 8000724:	4692      	mov	sl, r2
 8000726:	4699      	mov	r9, r3
 8000728:	b083      	sub	sp, #12
 800072a:	428b      	cmp	r3, r1
 800072c:	d830      	bhi.n	8000790 <__udivmoddi4+0x7c>
 800072e:	d02d      	beq.n	800078c <__udivmoddi4+0x78>
 8000730:	4649      	mov	r1, r9
 8000732:	4650      	mov	r0, sl
 8000734:	f002 ff76 	bl	8003624 <__clzdi2>
 8000738:	0029      	movs	r1, r5
 800073a:	0006      	movs	r6, r0
 800073c:	0020      	movs	r0, r4
 800073e:	f002 ff71 	bl	8003624 <__clzdi2>
 8000742:	1a33      	subs	r3, r6, r0
 8000744:	4698      	mov	r8, r3
 8000746:	3b20      	subs	r3, #32
 8000748:	d434      	bmi.n	80007b4 <__udivmoddi4+0xa0>
 800074a:	469b      	mov	fp, r3
 800074c:	4653      	mov	r3, sl
 800074e:	465a      	mov	r2, fp
 8000750:	4093      	lsls	r3, r2
 8000752:	4642      	mov	r2, r8
 8000754:	001f      	movs	r7, r3
 8000756:	4653      	mov	r3, sl
 8000758:	4093      	lsls	r3, r2
 800075a:	001e      	movs	r6, r3
 800075c:	42af      	cmp	r7, r5
 800075e:	d83b      	bhi.n	80007d8 <__udivmoddi4+0xc4>
 8000760:	42af      	cmp	r7, r5
 8000762:	d100      	bne.n	8000766 <__udivmoddi4+0x52>
 8000764:	e079      	b.n	800085a <__udivmoddi4+0x146>
 8000766:	465b      	mov	r3, fp
 8000768:	1ba4      	subs	r4, r4, r6
 800076a:	41bd      	sbcs	r5, r7
 800076c:	2b00      	cmp	r3, #0
 800076e:	da00      	bge.n	8000772 <__udivmoddi4+0x5e>
 8000770:	e076      	b.n	8000860 <__udivmoddi4+0x14c>
 8000772:	2200      	movs	r2, #0
 8000774:	2300      	movs	r3, #0
 8000776:	9200      	str	r2, [sp, #0]
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2301      	movs	r3, #1
 800077c:	465a      	mov	r2, fp
 800077e:	4093      	lsls	r3, r2
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2301      	movs	r3, #1
 8000784:	4642      	mov	r2, r8
 8000786:	4093      	lsls	r3, r2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	e029      	b.n	80007e0 <__udivmoddi4+0xcc>
 800078c:	4282      	cmp	r2, r0
 800078e:	d9cf      	bls.n	8000730 <__udivmoddi4+0x1c>
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <__udivmoddi4+0x8e>
 800079e:	601c      	str	r4, [r3, #0]
 80007a0:	605d      	str	r5, [r3, #4]
 80007a2:	9800      	ldr	r0, [sp, #0]
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	b003      	add	sp, #12
 80007a8:	bcf0      	pop	{r4, r5, r6, r7}
 80007aa:	46bb      	mov	fp, r7
 80007ac:	46b2      	mov	sl, r6
 80007ae:	46a9      	mov	r9, r5
 80007b0:	46a0      	mov	r8, r4
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b4:	4642      	mov	r2, r8
 80007b6:	469b      	mov	fp, r3
 80007b8:	2320      	movs	r3, #32
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	4652      	mov	r2, sl
 80007be:	40da      	lsrs	r2, r3
 80007c0:	4641      	mov	r1, r8
 80007c2:	0013      	movs	r3, r2
 80007c4:	464a      	mov	r2, r9
 80007c6:	408a      	lsls	r2, r1
 80007c8:	0017      	movs	r7, r2
 80007ca:	4642      	mov	r2, r8
 80007cc:	431f      	orrs	r7, r3
 80007ce:	4653      	mov	r3, sl
 80007d0:	4093      	lsls	r3, r2
 80007d2:	001e      	movs	r6, r3
 80007d4:	42af      	cmp	r7, r5
 80007d6:	d9c3      	bls.n	8000760 <__udivmoddi4+0x4c>
 80007d8:	2200      	movs	r2, #0
 80007da:	2300      	movs	r3, #0
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	4643      	mov	r3, r8
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0d8      	beq.n	8000798 <__udivmoddi4+0x84>
 80007e6:	07fb      	lsls	r3, r7, #31
 80007e8:	0872      	lsrs	r2, r6, #1
 80007ea:	431a      	orrs	r2, r3
 80007ec:	4646      	mov	r6, r8
 80007ee:	087b      	lsrs	r3, r7, #1
 80007f0:	e00e      	b.n	8000810 <__udivmoddi4+0xfc>
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	d101      	bne.n	80007fa <__udivmoddi4+0xe6>
 80007f6:	42a2      	cmp	r2, r4
 80007f8:	d80c      	bhi.n	8000814 <__udivmoddi4+0x100>
 80007fa:	1aa4      	subs	r4, r4, r2
 80007fc:	419d      	sbcs	r5, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	1924      	adds	r4, r4, r4
 8000802:	416d      	adcs	r5, r5
 8000804:	2100      	movs	r1, #0
 8000806:	3e01      	subs	r6, #1
 8000808:	1824      	adds	r4, r4, r0
 800080a:	414d      	adcs	r5, r1
 800080c:	2e00      	cmp	r6, #0
 800080e:	d006      	beq.n	800081e <__udivmoddi4+0x10a>
 8000810:	42ab      	cmp	r3, r5
 8000812:	d9ee      	bls.n	80007f2 <__udivmoddi4+0xde>
 8000814:	3e01      	subs	r6, #1
 8000816:	1924      	adds	r4, r4, r4
 8000818:	416d      	adcs	r5, r5
 800081a:	2e00      	cmp	r6, #0
 800081c:	d1f8      	bne.n	8000810 <__udivmoddi4+0xfc>
 800081e:	9800      	ldr	r0, [sp, #0]
 8000820:	9901      	ldr	r1, [sp, #4]
 8000822:	465b      	mov	r3, fp
 8000824:	1900      	adds	r0, r0, r4
 8000826:	4169      	adcs	r1, r5
 8000828:	2b00      	cmp	r3, #0
 800082a:	db24      	blt.n	8000876 <__udivmoddi4+0x162>
 800082c:	002b      	movs	r3, r5
 800082e:	465a      	mov	r2, fp
 8000830:	4644      	mov	r4, r8
 8000832:	40d3      	lsrs	r3, r2
 8000834:	002a      	movs	r2, r5
 8000836:	40e2      	lsrs	r2, r4
 8000838:	001c      	movs	r4, r3
 800083a:	465b      	mov	r3, fp
 800083c:	0015      	movs	r5, r2
 800083e:	2b00      	cmp	r3, #0
 8000840:	db2a      	blt.n	8000898 <__udivmoddi4+0x184>
 8000842:	0026      	movs	r6, r4
 8000844:	409e      	lsls	r6, r3
 8000846:	0033      	movs	r3, r6
 8000848:	0026      	movs	r6, r4
 800084a:	4647      	mov	r7, r8
 800084c:	40be      	lsls	r6, r7
 800084e:	0032      	movs	r2, r6
 8000850:	1a80      	subs	r0, r0, r2
 8000852:	4199      	sbcs	r1, r3
 8000854:	9000      	str	r0, [sp, #0]
 8000856:	9101      	str	r1, [sp, #4]
 8000858:	e79e      	b.n	8000798 <__udivmoddi4+0x84>
 800085a:	42a3      	cmp	r3, r4
 800085c:	d8bc      	bhi.n	80007d8 <__udivmoddi4+0xc4>
 800085e:	e782      	b.n	8000766 <__udivmoddi4+0x52>
 8000860:	4642      	mov	r2, r8
 8000862:	2320      	movs	r3, #32
 8000864:	2100      	movs	r1, #0
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	9100      	str	r1, [sp, #0]
 800086c:	9201      	str	r2, [sp, #4]
 800086e:	2201      	movs	r2, #1
 8000870:	40da      	lsrs	r2, r3
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	e785      	b.n	8000782 <__udivmoddi4+0x6e>
 8000876:	4642      	mov	r2, r8
 8000878:	2320      	movs	r3, #32
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	002a      	movs	r2, r5
 800087e:	4646      	mov	r6, r8
 8000880:	409a      	lsls	r2, r3
 8000882:	0023      	movs	r3, r4
 8000884:	40f3      	lsrs	r3, r6
 8000886:	4644      	mov	r4, r8
 8000888:	4313      	orrs	r3, r2
 800088a:	002a      	movs	r2, r5
 800088c:	40e2      	lsrs	r2, r4
 800088e:	001c      	movs	r4, r3
 8000890:	465b      	mov	r3, fp
 8000892:	0015      	movs	r5, r2
 8000894:	2b00      	cmp	r3, #0
 8000896:	dad4      	bge.n	8000842 <__udivmoddi4+0x12e>
 8000898:	4642      	mov	r2, r8
 800089a:	002f      	movs	r7, r5
 800089c:	2320      	movs	r3, #32
 800089e:	0026      	movs	r6, r4
 80008a0:	4097      	lsls	r7, r2
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	40de      	lsrs	r6, r3
 80008a6:	003b      	movs	r3, r7
 80008a8:	4333      	orrs	r3, r6
 80008aa:	e7cd      	b.n	8000848 <__udivmoddi4+0x134>

080008ac <__aeabi_fadd>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	46ce      	mov	lr, r9
 80008b0:	4647      	mov	r7, r8
 80008b2:	0243      	lsls	r3, r0, #9
 80008b4:	0a5a      	lsrs	r2, r3, #9
 80008b6:	024e      	lsls	r6, r1, #9
 80008b8:	0045      	lsls	r5, r0, #1
 80008ba:	0fc4      	lsrs	r4, r0, #31
 80008bc:	0048      	lsls	r0, r1, #1
 80008be:	4691      	mov	r9, r2
 80008c0:	0e2d      	lsrs	r5, r5, #24
 80008c2:	0a72      	lsrs	r2, r6, #9
 80008c4:	0e00      	lsrs	r0, r0, #24
 80008c6:	4694      	mov	ip, r2
 80008c8:	b580      	push	{r7, lr}
 80008ca:	099b      	lsrs	r3, r3, #6
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	09b6      	lsrs	r6, r6, #6
 80008d0:	1a2a      	subs	r2, r5, r0
 80008d2:	428c      	cmp	r4, r1
 80008d4:	d021      	beq.n	800091a <__aeabi_fadd+0x6e>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	dd0d      	ble.n	80008f6 <__aeabi_fadd+0x4a>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d12d      	bne.n	800093a <__aeabi_fadd+0x8e>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fadd+0x38>
 80008e2:	e08d      	b.n	8000a00 <__aeabi_fadd+0x154>
 80008e4:	1e51      	subs	r1, r2, #1
 80008e6:	2a01      	cmp	r2, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x40>
 80008ea:	e11d      	b.n	8000b28 <__aeabi_fadd+0x27c>
 80008ec:	2aff      	cmp	r2, #255	@ 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x46>
 80008f0:	e0ab      	b.n	8000a4a <__aeabi_fadd+0x19e>
 80008f2:	000a      	movs	r2, r1
 80008f4:	e027      	b.n	8000946 <__aeabi_fadd+0x9a>
 80008f6:	2a00      	cmp	r2, #0
 80008f8:	d04d      	beq.n	8000996 <__aeabi_fadd+0xea>
 80008fa:	1b42      	subs	r2, r0, r5
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d000      	beq.n	8000902 <__aeabi_fadd+0x56>
 8000900:	e0cc      	b.n	8000a9c <__aeabi_fadd+0x1f0>
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x5c>
 8000906:	e079      	b.n	80009fc <__aeabi_fadd+0x150>
 8000908:	1e54      	subs	r4, r2, #1
 800090a:	2a01      	cmp	r2, #1
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x64>
 800090e:	e128      	b.n	8000b62 <__aeabi_fadd+0x2b6>
 8000910:	2aff      	cmp	r2, #255	@ 0xff
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x6a>
 8000914:	e097      	b.n	8000a46 <__aeabi_fadd+0x19a>
 8000916:	0022      	movs	r2, r4
 8000918:	e0c5      	b.n	8000aa6 <__aeabi_fadd+0x1fa>
 800091a:	2a00      	cmp	r2, #0
 800091c:	dc00      	bgt.n	8000920 <__aeabi_fadd+0x74>
 800091e:	e096      	b.n	8000a4e <__aeabi_fadd+0x1a2>
 8000920:	2800      	cmp	r0, #0
 8000922:	d04f      	beq.n	80009c4 <__aeabi_fadd+0x118>
 8000924:	2dff      	cmp	r5, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x7e>
 8000928:	e08f      	b.n	8000a4a <__aeabi_fadd+0x19e>
 800092a:	2180      	movs	r1, #128	@ 0x80
 800092c:	04c9      	lsls	r1, r1, #19
 800092e:	430e      	orrs	r6, r1
 8000930:	2a1b      	cmp	r2, #27
 8000932:	dd51      	ble.n	80009d8 <__aeabi_fadd+0x12c>
 8000934:	002a      	movs	r2, r5
 8000936:	3301      	adds	r3, #1
 8000938:	e018      	b.n	800096c <__aeabi_fadd+0xc0>
 800093a:	2dff      	cmp	r5, #255	@ 0xff
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x94>
 800093e:	e084      	b.n	8000a4a <__aeabi_fadd+0x19e>
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	04c9      	lsls	r1, r1, #19
 8000944:	430e      	orrs	r6, r1
 8000946:	2101      	movs	r1, #1
 8000948:	2a1b      	cmp	r2, #27
 800094a:	dc08      	bgt.n	800095e <__aeabi_fadd+0xb2>
 800094c:	0031      	movs	r1, r6
 800094e:	2020      	movs	r0, #32
 8000950:	40d1      	lsrs	r1, r2
 8000952:	1a82      	subs	r2, r0, r2
 8000954:	4096      	lsls	r6, r2
 8000956:	0032      	movs	r2, r6
 8000958:	1e50      	subs	r0, r2, #1
 800095a:	4182      	sbcs	r2, r0
 800095c:	4311      	orrs	r1, r2
 800095e:	1a5b      	subs	r3, r3, r1
 8000960:	015a      	lsls	r2, r3, #5
 8000962:	d459      	bmi.n	8000a18 <__aeabi_fadd+0x16c>
 8000964:	2107      	movs	r1, #7
 8000966:	002a      	movs	r2, r5
 8000968:	4019      	ands	r1, r3
 800096a:	d049      	beq.n	8000a00 <__aeabi_fadd+0x154>
 800096c:	210f      	movs	r1, #15
 800096e:	4019      	ands	r1, r3
 8000970:	2904      	cmp	r1, #4
 8000972:	d000      	beq.n	8000976 <__aeabi_fadd+0xca>
 8000974:	3304      	adds	r3, #4
 8000976:	0159      	lsls	r1, r3, #5
 8000978:	d542      	bpl.n	8000a00 <__aeabi_fadd+0x154>
 800097a:	1c50      	adds	r0, r2, #1
 800097c:	2afe      	cmp	r2, #254	@ 0xfe
 800097e:	d03a      	beq.n	80009f6 <__aeabi_fadd+0x14a>
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	b2c0      	uxtb	r0, r0
 8000984:	0a5b      	lsrs	r3, r3, #9
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	4318      	orrs	r0, r3
 800098a:	07e4      	lsls	r4, r4, #31
 800098c:	4320      	orrs	r0, r4
 800098e:	bcc0      	pop	{r6, r7}
 8000990:	46b9      	mov	r9, r7
 8000992:	46b0      	mov	r8, r6
 8000994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000996:	20fe      	movs	r0, #254	@ 0xfe
 8000998:	4680      	mov	r8, r0
 800099a:	1c6f      	adds	r7, r5, #1
 800099c:	0038      	movs	r0, r7
 800099e:	4647      	mov	r7, r8
 80009a0:	4207      	tst	r7, r0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fadd+0xfa>
 80009a4:	e08e      	b.n	8000ac4 <__aeabi_fadd+0x218>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d000      	beq.n	80009ac <__aeabi_fadd+0x100>
 80009aa:	e0b4      	b.n	8000b16 <__aeabi_fadd+0x26a>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fadd+0x106>
 80009b0:	e0db      	b.n	8000b6a <__aeabi_fadd+0x2be>
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d06c      	beq.n	8000a90 <__aeabi_fadd+0x1e4>
 80009b6:	1b98      	subs	r0, r3, r6
 80009b8:	0145      	lsls	r5, r0, #5
 80009ba:	d400      	bmi.n	80009be <__aeabi_fadd+0x112>
 80009bc:	e0f7      	b.n	8000bae <__aeabi_fadd+0x302>
 80009be:	000c      	movs	r4, r1
 80009c0:	1af3      	subs	r3, r6, r3
 80009c2:	e03d      	b.n	8000a40 <__aeabi_fadd+0x194>
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d01b      	beq.n	8000a00 <__aeabi_fadd+0x154>
 80009c8:	1e51      	subs	r1, r2, #1
 80009ca:	2a01      	cmp	r2, #1
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fadd+0x124>
 80009ce:	e082      	b.n	8000ad6 <__aeabi_fadd+0x22a>
 80009d0:	2aff      	cmp	r2, #255	@ 0xff
 80009d2:	d03a      	beq.n	8000a4a <__aeabi_fadd+0x19e>
 80009d4:	000a      	movs	r2, r1
 80009d6:	e7ab      	b.n	8000930 <__aeabi_fadd+0x84>
 80009d8:	0031      	movs	r1, r6
 80009da:	2020      	movs	r0, #32
 80009dc:	40d1      	lsrs	r1, r2
 80009de:	1a82      	subs	r2, r0, r2
 80009e0:	4096      	lsls	r6, r2
 80009e2:	0032      	movs	r2, r6
 80009e4:	1e50      	subs	r0, r2, #1
 80009e6:	4182      	sbcs	r2, r0
 80009e8:	430a      	orrs	r2, r1
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	015a      	lsls	r2, r3, #5
 80009ee:	d5b9      	bpl.n	8000964 <__aeabi_fadd+0xb8>
 80009f0:	1c6a      	adds	r2, r5, #1
 80009f2:	2dfe      	cmp	r5, #254	@ 0xfe
 80009f4:	d175      	bne.n	8000ae2 <__aeabi_fadd+0x236>
 80009f6:	20ff      	movs	r0, #255	@ 0xff
 80009f8:	2300      	movs	r3, #0
 80009fa:	e7c4      	b.n	8000986 <__aeabi_fadd+0xda>
 80009fc:	000c      	movs	r4, r1
 80009fe:	0033      	movs	r3, r6
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d146      	bne.n	8000a94 <__aeabi_fadd+0x1e8>
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f5      	beq.n	80009f6 <__aeabi_fadd+0x14a>
 8000a0a:	2280      	movs	r2, #128	@ 0x80
 8000a0c:	03d2      	lsls	r2, r2, #15
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	025b      	lsls	r3, r3, #9
 8000a12:	20ff      	movs	r0, #255	@ 0xff
 8000a14:	0a5b      	lsrs	r3, r3, #9
 8000a16:	e7b6      	b.n	8000986 <__aeabi_fadd+0xda>
 8000a18:	019f      	lsls	r7, r3, #6
 8000a1a:	09bf      	lsrs	r7, r7, #6
 8000a1c:	0038      	movs	r0, r7
 8000a1e:	f002 fde3 	bl	80035e8 <__clzsi2>
 8000a22:	3805      	subs	r0, #5
 8000a24:	4087      	lsls	r7, r0
 8000a26:	4285      	cmp	r5, r0
 8000a28:	dc24      	bgt.n	8000a74 <__aeabi_fadd+0x1c8>
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	1b42      	subs	r2, r0, r5
 8000a30:	3201      	adds	r2, #1
 8000a32:	40d3      	lsrs	r3, r2
 8000a34:	1a8a      	subs	r2, r1, r2
 8000a36:	4097      	lsls	r7, r2
 8000a38:	1e7a      	subs	r2, r7, #1
 8000a3a:	4197      	sbcs	r7, r2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	433b      	orrs	r3, r7
 8000a40:	0759      	lsls	r1, r3, #29
 8000a42:	d193      	bne.n	800096c <__aeabi_fadd+0xc0>
 8000a44:	e797      	b.n	8000976 <__aeabi_fadd+0xca>
 8000a46:	000c      	movs	r4, r1
 8000a48:	0033      	movs	r3, r6
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	e7db      	b.n	8000a06 <__aeabi_fadd+0x15a>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d014      	beq.n	8000a7c <__aeabi_fadd+0x1d0>
 8000a52:	1b42      	subs	r2, r0, r5
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	d14b      	bne.n	8000af0 <__aeabi_fadd+0x244>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0d0      	beq.n	80009fe <__aeabi_fadd+0x152>
 8000a5c:	1e51      	subs	r1, r2, #1
 8000a5e:	2a01      	cmp	r2, #1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fadd+0x1b8>
 8000a62:	e09e      	b.n	8000ba2 <__aeabi_fadd+0x2f6>
 8000a64:	2aff      	cmp	r2, #255	@ 0xff
 8000a66:	d0ef      	beq.n	8000a48 <__aeabi_fadd+0x19c>
 8000a68:	000a      	movs	r2, r1
 8000a6a:	2a1b      	cmp	r2, #27
 8000a6c:	dd5f      	ble.n	8000b2e <__aeabi_fadd+0x282>
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1c73      	adds	r3, r6, #1
 8000a72:	e77b      	b.n	800096c <__aeabi_fadd+0xc0>
 8000a74:	4b50      	ldr	r3, [pc, #320]	@ (8000bb8 <__aeabi_fadd+0x30c>)
 8000a76:	1a2a      	subs	r2, r5, r0
 8000a78:	403b      	ands	r3, r7
 8000a7a:	e7e1      	b.n	8000a40 <__aeabi_fadd+0x194>
 8000a7c:	21fe      	movs	r1, #254	@ 0xfe
 8000a7e:	1c6a      	adds	r2, r5, #1
 8000a80:	4211      	tst	r1, r2
 8000a82:	d13b      	bne.n	8000afc <__aeabi_fadd+0x250>
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d15d      	bne.n	8000b44 <__aeabi_fadd+0x298>
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d07f      	beq.n	8000b8c <__aeabi_fadd+0x2e0>
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d17f      	bne.n	8000b90 <__aeabi_fadd+0x2e4>
 8000a90:	2200      	movs	r2, #0
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	025b      	lsls	r3, r3, #9
 8000a96:	0a5b      	lsrs	r3, r3, #9
 8000a98:	b2d0      	uxtb	r0, r2
 8000a9a:	e774      	b.n	8000986 <__aeabi_fadd+0xda>
 8000a9c:	28ff      	cmp	r0, #255	@ 0xff
 8000a9e:	d0d2      	beq.n	8000a46 <__aeabi_fadd+0x19a>
 8000aa0:	2480      	movs	r4, #128	@ 0x80
 8000aa2:	04e4      	lsls	r4, r4, #19
 8000aa4:	4323      	orrs	r3, r4
 8000aa6:	2401      	movs	r4, #1
 8000aa8:	2a1b      	cmp	r2, #27
 8000aaa:	dc07      	bgt.n	8000abc <__aeabi_fadd+0x210>
 8000aac:	001c      	movs	r4, r3
 8000aae:	2520      	movs	r5, #32
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	1aaa      	subs	r2, r5, r2
 8000ab4:	4093      	lsls	r3, r2
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	4193      	sbcs	r3, r2
 8000aba:	431c      	orrs	r4, r3
 8000abc:	1b33      	subs	r3, r6, r4
 8000abe:	0005      	movs	r5, r0
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	e74d      	b.n	8000960 <__aeabi_fadd+0xb4>
 8000ac4:	1b9f      	subs	r7, r3, r6
 8000ac6:	017a      	lsls	r2, r7, #5
 8000ac8:	d422      	bmi.n	8000b10 <__aeabi_fadd+0x264>
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d1a6      	bne.n	8000a1c <__aeabi_fadd+0x170>
 8000ace:	2400      	movs	r4, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e757      	b.n	8000986 <__aeabi_fadd+0xda>
 8000ad6:	199b      	adds	r3, r3, r6
 8000ad8:	2501      	movs	r5, #1
 8000ada:	3201      	adds	r2, #1
 8000adc:	0159      	lsls	r1, r3, #5
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_fadd+0x236>
 8000ae0:	e740      	b.n	8000964 <__aeabi_fadd+0xb8>
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4835      	ldr	r0, [pc, #212]	@ (8000bbc <__aeabi_fadd+0x310>)
 8000ae6:	4019      	ands	r1, r3
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	4003      	ands	r3, r0
 8000aec:	430b      	orrs	r3, r1
 8000aee:	e7a7      	b.n	8000a40 <__aeabi_fadd+0x194>
 8000af0:	28ff      	cmp	r0, #255	@ 0xff
 8000af2:	d0a9      	beq.n	8000a48 <__aeabi_fadd+0x19c>
 8000af4:	2180      	movs	r1, #128	@ 0x80
 8000af6:	04c9      	lsls	r1, r1, #19
 8000af8:	430b      	orrs	r3, r1
 8000afa:	e7b6      	b.n	8000a6a <__aeabi_fadd+0x1be>
 8000afc:	2aff      	cmp	r2, #255	@ 0xff
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fadd+0x256>
 8000b00:	e779      	b.n	80009f6 <__aeabi_fadd+0x14a>
 8000b02:	199b      	adds	r3, r3, r6
 8000b04:	085b      	lsrs	r3, r3, #1
 8000b06:	0759      	lsls	r1, r3, #29
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fadd+0x260>
 8000b0a:	e72f      	b.n	800096c <__aeabi_fadd+0xc0>
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	e7c1      	b.n	8000a94 <__aeabi_fadd+0x1e8>
 8000b10:	000c      	movs	r4, r1
 8000b12:	1af7      	subs	r7, r6, r3
 8000b14:	e782      	b.n	8000a1c <__aeabi_fadd+0x170>
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d12c      	bne.n	8000b74 <__aeabi_fadd+0x2c8>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d193      	bne.n	8000a46 <__aeabi_fadd+0x19a>
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	2400      	movs	r4, #0
 8000b22:	20ff      	movs	r0, #255	@ 0xff
 8000b24:	03db      	lsls	r3, r3, #15
 8000b26:	e72e      	b.n	8000986 <__aeabi_fadd+0xda>
 8000b28:	2501      	movs	r5, #1
 8000b2a:	1b9b      	subs	r3, r3, r6
 8000b2c:	e718      	b.n	8000960 <__aeabi_fadd+0xb4>
 8000b2e:	0019      	movs	r1, r3
 8000b30:	2520      	movs	r5, #32
 8000b32:	40d1      	lsrs	r1, r2
 8000b34:	1aaa      	subs	r2, r5, r2
 8000b36:	4093      	lsls	r3, r2
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	4193      	sbcs	r3, r2
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	0005      	movs	r5, r0
 8000b40:	199b      	adds	r3, r3, r6
 8000b42:	e753      	b.n	80009ec <__aeabi_fadd+0x140>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fadd+0x29e>
 8000b48:	e77e      	b.n	8000a48 <__aeabi_fadd+0x19c>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fadd+0x2a4>
 8000b4e:	e77c      	b.n	8000a4a <__aeabi_fadd+0x19e>
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	03d2      	lsls	r2, r2, #15
 8000b54:	4591      	cmp	r9, r2
 8000b56:	d302      	bcc.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b58:	4594      	cmp	ip, r2
 8000b5a:	d200      	bcs.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b5c:	0033      	movs	r3, r6
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	e753      	b.n	8000a0a <__aeabi_fadd+0x15e>
 8000b62:	000c      	movs	r4, r1
 8000b64:	1af3      	subs	r3, r6, r3
 8000b66:	3501      	adds	r5, #1
 8000b68:	e6fa      	b.n	8000960 <__aeabi_fadd+0xb4>
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d0af      	beq.n	8000ace <__aeabi_fadd+0x222>
 8000b6e:	000c      	movs	r4, r1
 8000b70:	0033      	movs	r3, r6
 8000b72:	e78d      	b.n	8000a90 <__aeabi_fadd+0x1e4>
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_fadd+0x2ce>
 8000b78:	e767      	b.n	8000a4a <__aeabi_fadd+0x19e>
 8000b7a:	2280      	movs	r2, #128	@ 0x80
 8000b7c:	03d2      	lsls	r2, r2, #15
 8000b7e:	4591      	cmp	r9, r2
 8000b80:	d3ed      	bcc.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b82:	4594      	cmp	ip, r2
 8000b84:	d2eb      	bcs.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b86:	000c      	movs	r4, r1
 8000b88:	0033      	movs	r3, r6
 8000b8a:	e7e8      	b.n	8000b5e <__aeabi_fadd+0x2b2>
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	e77f      	b.n	8000a90 <__aeabi_fadd+0x1e4>
 8000b90:	199b      	adds	r3, r3, r6
 8000b92:	2200      	movs	r2, #0
 8000b94:	0159      	lsls	r1, r3, #5
 8000b96:	d5b9      	bpl.n	8000b0c <__aeabi_fadd+0x260>
 8000b98:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <__aeabi_fadd+0x30c>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	e778      	b.n	8000a94 <__aeabi_fadd+0x1e8>
 8000ba2:	199b      	adds	r3, r3, r6
 8000ba4:	3201      	adds	r2, #1
 8000ba6:	3501      	adds	r5, #1
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d49a      	bmi.n	8000ae2 <__aeabi_fadd+0x236>
 8000bac:	e6da      	b.n	8000964 <__aeabi_fadd+0xb8>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d08d      	beq.n	8000ace <__aeabi_fadd+0x222>
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	e76e      	b.n	8000a94 <__aeabi_fadd+0x1e8>
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	fbffffff 	.word	0xfbffffff
 8000bbc:	7dffffff 	.word	0x7dffffff

08000bc0 <__aeabi_fdiv>:
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	464f      	mov	r7, r9
 8000bc4:	4646      	mov	r6, r8
 8000bc6:	46d6      	mov	lr, sl
 8000bc8:	0244      	lsls	r4, r0, #9
 8000bca:	b5c0      	push	{r6, r7, lr}
 8000bcc:	0047      	lsls	r7, r0, #1
 8000bce:	1c0e      	adds	r6, r1, #0
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	0e3f      	lsrs	r7, r7, #24
 8000bd4:	0fc5      	lsrs	r5, r0, #31
 8000bd6:	2f00      	cmp	r7, #0
 8000bd8:	d03c      	beq.n	8000c54 <__aeabi_fdiv+0x94>
 8000bda:	2fff      	cmp	r7, #255	@ 0xff
 8000bdc:	d042      	beq.n	8000c64 <__aeabi_fdiv+0xa4>
 8000bde:	2300      	movs	r3, #0
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	4699      	mov	r9, r3
 8000be4:	469a      	mov	sl, r3
 8000be6:	00e4      	lsls	r4, r4, #3
 8000be8:	04d2      	lsls	r2, r2, #19
 8000bea:	4314      	orrs	r4, r2
 8000bec:	3f7f      	subs	r7, #127	@ 0x7f
 8000bee:	0273      	lsls	r3, r6, #9
 8000bf0:	0a5b      	lsrs	r3, r3, #9
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	0073      	lsls	r3, r6, #1
 8000bf6:	0e1b      	lsrs	r3, r3, #24
 8000bf8:	0ff6      	lsrs	r6, r6, #31
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d01b      	beq.n	8000c36 <__aeabi_fdiv+0x76>
 8000bfe:	2bff      	cmp	r3, #255	@ 0xff
 8000c00:	d013      	beq.n	8000c2a <__aeabi_fdiv+0x6a>
 8000c02:	4642      	mov	r2, r8
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	00d2      	lsls	r2, r2, #3
 8000c08:	04c9      	lsls	r1, r1, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4688      	mov	r8, r1
 8000c0e:	2000      	movs	r0, #0
 8000c10:	3b7f      	subs	r3, #127	@ 0x7f
 8000c12:	0029      	movs	r1, r5
 8000c14:	1aff      	subs	r7, r7, r3
 8000c16:	464b      	mov	r3, r9
 8000c18:	4071      	eors	r1, r6
 8000c1a:	b2c9      	uxtb	r1, r1
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d900      	bls.n	8000c22 <__aeabi_fdiv+0x62>
 8000c20:	e0b5      	b.n	8000d8e <__aeabi_fdiv+0x1ce>
 8000c22:	4a74      	ldr	r2, [pc, #464]	@ (8000df4 <__aeabi_fdiv+0x234>)
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	58d3      	ldr	r3, [r2, r3]
 8000c28:	469f      	mov	pc, r3
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d13f      	bne.n	8000cb0 <__aeabi_fdiv+0xf0>
 8000c30:	3fff      	subs	r7, #255	@ 0xff
 8000c32:	3302      	adds	r3, #2
 8000c34:	e003      	b.n	8000c3e <__aeabi_fdiv+0x7e>
 8000c36:	4643      	mov	r3, r8
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d12d      	bne.n	8000c98 <__aeabi_fdiv+0xd8>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	0029      	movs	r1, r5
 8000c40:	464a      	mov	r2, r9
 8000c42:	4071      	eors	r1, r6
 8000c44:	b2c9      	uxtb	r1, r1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	2a0e      	cmp	r2, #14
 8000c4a:	d838      	bhi.n	8000cbe <__aeabi_fdiv+0xfe>
 8000c4c:	486a      	ldr	r0, [pc, #424]	@ (8000df8 <__aeabi_fdiv+0x238>)
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	5882      	ldr	r2, [r0, r2]
 8000c52:	4697      	mov	pc, r2
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d113      	bne.n	8000c80 <__aeabi_fdiv+0xc0>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	2700      	movs	r7, #0
 8000c60:	469a      	mov	sl, r3
 8000c62:	e7c4      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d105      	bne.n	8000c74 <__aeabi_fdiv+0xb4>
 8000c68:	2308      	movs	r3, #8
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	3b06      	subs	r3, #6
 8000c6e:	27ff      	movs	r7, #255	@ 0xff
 8000c70:	469a      	mov	sl, r3
 8000c72:	e7bc      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c74:	230c      	movs	r3, #12
 8000c76:	4699      	mov	r9, r3
 8000c78:	3b09      	subs	r3, #9
 8000c7a:	27ff      	movs	r7, #255	@ 0xff
 8000c7c:	469a      	mov	sl, r3
 8000c7e:	e7b6      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c80:	0020      	movs	r0, r4
 8000c82:	f002 fcb1 	bl	80035e8 <__clzsi2>
 8000c86:	2776      	movs	r7, #118	@ 0x76
 8000c88:	1f43      	subs	r3, r0, #5
 8000c8a:	409c      	lsls	r4, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	427f      	negs	r7, r7
 8000c90:	4699      	mov	r9, r3
 8000c92:	469a      	mov	sl, r3
 8000c94:	1a3f      	subs	r7, r7, r0
 8000c96:	e7aa      	b.n	8000bee <__aeabi_fdiv+0x2e>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	f002 fca5 	bl	80035e8 <__clzsi2>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	1f43      	subs	r3, r0, #5
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	2376      	movs	r3, #118	@ 0x76
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	1a1b      	subs	r3, r3, r0
 8000caa:	4690      	mov	r8, r2
 8000cac:	2000      	movs	r0, #0
 8000cae:	e7b0      	b.n	8000c12 <__aeabi_fdiv+0x52>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	4691      	mov	r9, r2
 8000cb8:	2003      	movs	r0, #3
 8000cba:	33fc      	adds	r3, #252	@ 0xfc
 8000cbc:	e7a9      	b.n	8000c12 <__aeabi_fdiv+0x52>
 8000cbe:	000d      	movs	r5, r1
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	07ed      	lsls	r5, r5, #31
 8000cc8:	4310      	orrs	r0, r2
 8000cca:	4328      	orrs	r0, r5
 8000ccc:	bce0      	pop	{r5, r6, r7}
 8000cce:	46ba      	mov	sl, r7
 8000cd0:	46b1      	mov	r9, r6
 8000cd2:	46a8      	mov	r8, r5
 8000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd6:	000d      	movs	r5, r1
 8000cd8:	2000      	movs	r0, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	e7f2      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000cde:	4653      	mov	r3, sl
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d0ed      	beq.n	8000cc0 <__aeabi_fdiv+0x100>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d033      	beq.n	8000d50 <__aeabi_fdiv+0x190>
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d105      	bne.n	8000cfa <__aeabi_fdiv+0x13a>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e7e7      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000cf4:	0035      	movs	r5, r6
 8000cf6:	2803      	cmp	r0, #3
 8000cf8:	d07a      	beq.n	8000df0 <__aeabi_fdiv+0x230>
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	337f      	adds	r3, #127	@ 0x7f
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dd2d      	ble.n	8000d5e <__aeabi_fdiv+0x19e>
 8000d02:	4642      	mov	r2, r8
 8000d04:	0752      	lsls	r2, r2, #29
 8000d06:	d007      	beq.n	8000d18 <__aeabi_fdiv+0x158>
 8000d08:	220f      	movs	r2, #15
 8000d0a:	4641      	mov	r1, r8
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	2a04      	cmp	r2, #4
 8000d10:	d002      	beq.n	8000d18 <__aeabi_fdiv+0x158>
 8000d12:	2204      	movs	r2, #4
 8000d14:	4694      	mov	ip, r2
 8000d16:	44e0      	add	r8, ip
 8000d18:	4642      	mov	r2, r8
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	d505      	bpl.n	8000d2a <__aeabi_fdiv+0x16a>
 8000d1e:	4642      	mov	r2, r8
 8000d20:	4b36      	ldr	r3, [pc, #216]	@ (8000dfc <__aeabi_fdiv+0x23c>)
 8000d22:	401a      	ands	r2, r3
 8000d24:	003b      	movs	r3, r7
 8000d26:	4690      	mov	r8, r2
 8000d28:	3380      	adds	r3, #128	@ 0x80
 8000d2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d2c:	dcc8      	bgt.n	8000cc0 <__aeabi_fdiv+0x100>
 8000d2e:	4642      	mov	r2, r8
 8000d30:	0192      	lsls	r2, r2, #6
 8000d32:	0a52      	lsrs	r2, r2, #9
 8000d34:	b2d8      	uxtb	r0, r3
 8000d36:	e7c5      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	20ff      	movs	r0, #255	@ 0xff
 8000d3e:	03d2      	lsls	r2, r2, #15
 8000d40:	e7c0      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d42:	2280      	movs	r2, #128	@ 0x80
 8000d44:	03d2      	lsls	r2, r2, #15
 8000d46:	4214      	tst	r4, r2
 8000d48:	d002      	beq.n	8000d50 <__aeabi_fdiv+0x190>
 8000d4a:	4643      	mov	r3, r8
 8000d4c:	4213      	tst	r3, r2
 8000d4e:	d049      	beq.n	8000de4 <__aeabi_fdiv+0x224>
 8000d50:	2280      	movs	r2, #128	@ 0x80
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	4322      	orrs	r2, r4
 8000d56:	0252      	lsls	r2, r2, #9
 8000d58:	20ff      	movs	r0, #255	@ 0xff
 8000d5a:	0a52      	lsrs	r2, r2, #9
 8000d5c:	e7b2      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d5e:	2201      	movs	r2, #1
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b1b      	cmp	r3, #27
 8000d64:	dcc3      	bgt.n	8000cee <__aeabi_fdiv+0x12e>
 8000d66:	4642      	mov	r2, r8
 8000d68:	40da      	lsrs	r2, r3
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	379e      	adds	r7, #158	@ 0x9e
 8000d6e:	40bb      	lsls	r3, r7
 8000d70:	1e59      	subs	r1, r3, #1
 8000d72:	418b      	sbcs	r3, r1
 8000d74:	431a      	orrs	r2, r3
 8000d76:	0753      	lsls	r3, r2, #29
 8000d78:	d004      	beq.n	8000d84 <__aeabi_fdiv+0x1c4>
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d000      	beq.n	8000d84 <__aeabi_fdiv+0x1c4>
 8000d82:	3204      	adds	r2, #4
 8000d84:	0153      	lsls	r3, r2, #5
 8000d86:	d529      	bpl.n	8000ddc <__aeabi_fdiv+0x21c>
 8000d88:	2001      	movs	r0, #1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	e79a      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000d8e:	4642      	mov	r2, r8
 8000d90:	0163      	lsls	r3, r4, #5
 8000d92:	0155      	lsls	r5, r2, #5
 8000d94:	42ab      	cmp	r3, r5
 8000d96:	d215      	bcs.n	8000dc4 <__aeabi_fdiv+0x204>
 8000d98:	201b      	movs	r0, #27
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	3f01      	subs	r7, #1
 8000d9e:	2601      	movs	r6, #1
 8000da0:	001c      	movs	r4, r3
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	db01      	blt.n	8000dae <__aeabi_fdiv+0x1ee>
 8000daa:	429d      	cmp	r5, r3
 8000dac:	d801      	bhi.n	8000db2 <__aeabi_fdiv+0x1f2>
 8000dae:	1b5b      	subs	r3, r3, r5
 8000db0:	4332      	orrs	r2, r6
 8000db2:	3801      	subs	r0, #1
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d1f3      	bne.n	8000da0 <__aeabi_fdiv+0x1e0>
 8000db8:	1e58      	subs	r0, r3, #1
 8000dba:	4183      	sbcs	r3, r0
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	000d      	movs	r5, r1
 8000dc2:	e79a      	b.n	8000cfa <__aeabi_fdiv+0x13a>
 8000dc4:	201a      	movs	r0, #26
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	1b5b      	subs	r3, r3, r5
 8000dca:	e7e8      	b.n	8000d9e <__aeabi_fdiv+0x1de>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	425a      	negs	r2, r3
 8000dd0:	4153      	adcs	r3, r2
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	0035      	movs	r5, r6
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	b2d8      	uxtb	r0, r3
 8000dda:	e773      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000ddc:	0192      	lsls	r2, r2, #6
 8000dde:	2000      	movs	r0, #0
 8000de0:	0a52      	lsrs	r2, r2, #9
 8000de2:	e76f      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000de4:	431a      	orrs	r2, r3
 8000de6:	0252      	lsls	r2, r2, #9
 8000de8:	0035      	movs	r5, r6
 8000dea:	20ff      	movs	r0, #255	@ 0xff
 8000dec:	0a52      	lsrs	r2, r2, #9
 8000dee:	e769      	b.n	8000cc4 <__aeabi_fdiv+0x104>
 8000df0:	4644      	mov	r4, r8
 8000df2:	e7ad      	b.n	8000d50 <__aeabi_fdiv+0x190>
 8000df4:	0801ee58 	.word	0x0801ee58
 8000df8:	0801ee98 	.word	0x0801ee98
 8000dfc:	f7ffffff 	.word	0xf7ffffff

08000e00 <__eqsf2>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	024e      	lsls	r6, r1, #9
 8000e06:	004c      	lsls	r4, r1, #1
 8000e08:	0245      	lsls	r5, r0, #9
 8000e0a:	0a6d      	lsrs	r5, r5, #9
 8000e0c:	0e12      	lsrs	r2, r2, #24
 8000e0e:	0fc3      	lsrs	r3, r0, #31
 8000e10:	0a76      	lsrs	r6, r6, #9
 8000e12:	0e24      	lsrs	r4, r4, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d010      	beq.n	8000e3c <__eqsf2+0x3c>
 8000e1a:	2cff      	cmp	r4, #255	@ 0xff
 8000e1c:	d00c      	beq.n	8000e38 <__eqsf2+0x38>
 8000e1e:	2001      	movs	r0, #1
 8000e20:	42a2      	cmp	r2, r4
 8000e22:	d10a      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e24:	42b5      	cmp	r5, r6
 8000e26:	d108      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d00f      	beq.n	8000e4c <__eqsf2+0x4c>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d104      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e30:	0028      	movs	r0, r5
 8000e32:	1e43      	subs	r3, r0, #1
 8000e34:	4198      	sbcs	r0, r3
 8000e36:	e000      	b.n	8000e3a <__eqsf2+0x3a>
 8000e38:	2001      	movs	r0, #1
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	2cff      	cmp	r4, #255	@ 0xff
 8000e40:	d1fb      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e42:	4335      	orrs	r5, r6
 8000e44:	d1f9      	bne.n	8000e3a <__eqsf2+0x3a>
 8000e46:	404b      	eors	r3, r1
 8000e48:	0018      	movs	r0, r3
 8000e4a:	e7f6      	b.n	8000e3a <__eqsf2+0x3a>
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	e7f4      	b.n	8000e3a <__eqsf2+0x3a>

08000e50 <__gesf2>:
 8000e50:	b530      	push	{r4, r5, lr}
 8000e52:	0042      	lsls	r2, r0, #1
 8000e54:	0244      	lsls	r4, r0, #9
 8000e56:	024d      	lsls	r5, r1, #9
 8000e58:	0fc3      	lsrs	r3, r0, #31
 8000e5a:	0048      	lsls	r0, r1, #1
 8000e5c:	0a64      	lsrs	r4, r4, #9
 8000e5e:	0e12      	lsrs	r2, r2, #24
 8000e60:	0a6d      	lsrs	r5, r5, #9
 8000e62:	0e00      	lsrs	r0, r0, #24
 8000e64:	0fc9      	lsrs	r1, r1, #31
 8000e66:	2aff      	cmp	r2, #255	@ 0xff
 8000e68:	d019      	beq.n	8000e9e <__gesf2+0x4e>
 8000e6a:	28ff      	cmp	r0, #255	@ 0xff
 8000e6c:	d00b      	beq.n	8000e86 <__gesf2+0x36>
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d11e      	bne.n	8000eb0 <__gesf2+0x60>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d10b      	bne.n	8000e8e <__gesf2+0x3e>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d027      	beq.n	8000eca <__gesf2+0x7a>
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	d134      	bne.n	8000ee8 <__gesf2+0x98>
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d02f      	beq.n	8000ee2 <__gesf2+0x92>
 8000e82:	0008      	movs	r0, r1
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d128      	bne.n	8000edc <__gesf2+0x8c>
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d101      	bne.n	8000e92 <__gesf2+0x42>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d0f5      	beq.n	8000e7e <__gesf2+0x2e>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d107      	bne.n	8000ea6 <__gesf2+0x56>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d023      	beq.n	8000ee2 <__gesf2+0x92>
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	e7f2      	b.n	8000e84 <__gesf2+0x34>
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d11c      	bne.n	8000edc <__gesf2+0x8c>
 8000ea2:	28ff      	cmp	r0, #255	@ 0xff
 8000ea4:	d014      	beq.n	8000ed0 <__gesf2+0x80>
 8000ea6:	1e58      	subs	r0, r3, #1
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	4018      	ands	r0, r3
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7e9      	b.n	8000e84 <__gesf2+0x34>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d0f8      	beq.n	8000ea6 <__gesf2+0x56>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d1f6      	bne.n	8000ea6 <__gesf2+0x56>
 8000eb8:	4282      	cmp	r2, r0
 8000eba:	dcf4      	bgt.n	8000ea6 <__gesf2+0x56>
 8000ebc:	dbeb      	blt.n	8000e96 <__gesf2+0x46>
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	d8f1      	bhi.n	8000ea6 <__gesf2+0x56>
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	42ac      	cmp	r4, r5
 8000ec6:	d2dd      	bcs.n	8000e84 <__gesf2+0x34>
 8000ec8:	e7e5      	b.n	8000e96 <__gesf2+0x46>
 8000eca:	2c00      	cmp	r4, #0
 8000ecc:	d0da      	beq.n	8000e84 <__gesf2+0x34>
 8000ece:	e7ea      	b.n	8000ea6 <__gesf2+0x56>
 8000ed0:	2d00      	cmp	r5, #0
 8000ed2:	d103      	bne.n	8000edc <__gesf2+0x8c>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e6      	bne.n	8000ea6 <__gesf2+0x56>
 8000ed8:	2000      	movs	r0, #0
 8000eda:	e7d3      	b.n	8000e84 <__gesf2+0x34>
 8000edc:	2002      	movs	r0, #2
 8000ede:	4240      	negs	r0, r0
 8000ee0:	e7d0      	b.n	8000e84 <__gesf2+0x34>
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	4240      	negs	r0, r0
 8000ee6:	e7cd      	b.n	8000e84 <__gesf2+0x34>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d0e8      	beq.n	8000ebe <__gesf2+0x6e>
 8000eec:	e7db      	b.n	8000ea6 <__gesf2+0x56>
 8000eee:	46c0      	nop			@ (mov r8, r8)

08000ef0 <__lesf2>:
 8000ef0:	b530      	push	{r4, r5, lr}
 8000ef2:	0042      	lsls	r2, r0, #1
 8000ef4:	0244      	lsls	r4, r0, #9
 8000ef6:	024d      	lsls	r5, r1, #9
 8000ef8:	0fc3      	lsrs	r3, r0, #31
 8000efa:	0048      	lsls	r0, r1, #1
 8000efc:	0a64      	lsrs	r4, r4, #9
 8000efe:	0e12      	lsrs	r2, r2, #24
 8000f00:	0a6d      	lsrs	r5, r5, #9
 8000f02:	0e00      	lsrs	r0, r0, #24
 8000f04:	0fc9      	lsrs	r1, r1, #31
 8000f06:	2aff      	cmp	r2, #255	@ 0xff
 8000f08:	d01a      	beq.n	8000f40 <__lesf2+0x50>
 8000f0a:	28ff      	cmp	r0, #255	@ 0xff
 8000f0c:	d00e      	beq.n	8000f2c <__lesf2+0x3c>
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d11e      	bne.n	8000f50 <__lesf2+0x60>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d10e      	bne.n	8000f34 <__lesf2+0x44>
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d02a      	beq.n	8000f70 <__lesf2+0x80>
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d00c      	beq.n	8000f38 <__lesf2+0x48>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d01d      	beq.n	8000f5e <__lesf2+0x6e>
 8000f22:	1e58      	subs	r0, r3, #1
 8000f24:	2302      	movs	r3, #2
 8000f26:	4018      	ands	r0, r3
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e010      	b.n	8000f4e <__lesf2+0x5e>
 8000f2c:	2d00      	cmp	r5, #0
 8000f2e:	d10d      	bne.n	8000f4c <__lesf2+0x5c>
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	d120      	bne.n	8000f76 <__lesf2+0x86>
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d11e      	bne.n	8000f76 <__lesf2+0x86>
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d023      	beq.n	8000f84 <__lesf2+0x94>
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	e006      	b.n	8000f4e <__lesf2+0x5e>
 8000f40:	2c00      	cmp	r4, #0
 8000f42:	d103      	bne.n	8000f4c <__lesf2+0x5c>
 8000f44:	28ff      	cmp	r0, #255	@ 0xff
 8000f46:	d1ec      	bne.n	8000f22 <__lesf2+0x32>
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	d017      	beq.n	8000f7c <__lesf2+0x8c>
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	bd30      	pop	{r4, r5, pc}
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d0e6      	beq.n	8000f22 <__lesf2+0x32>
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d1e4      	bne.n	8000f22 <__lesf2+0x32>
 8000f58:	4282      	cmp	r2, r0
 8000f5a:	dce2      	bgt.n	8000f22 <__lesf2+0x32>
 8000f5c:	db04      	blt.n	8000f68 <__lesf2+0x78>
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	d8df      	bhi.n	8000f22 <__lesf2+0x32>
 8000f62:	2000      	movs	r0, #0
 8000f64:	42ac      	cmp	r4, r5
 8000f66:	d2f2      	bcs.n	8000f4e <__lesf2+0x5e>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <__lesf2+0x94>
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	e7ee      	b.n	8000f4e <__lesf2+0x5e>
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d0ec      	beq.n	8000f4e <__lesf2+0x5e>
 8000f74:	e7d5      	b.n	8000f22 <__lesf2+0x32>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d1d3      	bne.n	8000f22 <__lesf2+0x32>
 8000f7a:	e7f5      	b.n	8000f68 <__lesf2+0x78>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d0e5      	beq.n	8000f4e <__lesf2+0x5e>
 8000f82:	e7ce      	b.n	8000f22 <__lesf2+0x32>
 8000f84:	2001      	movs	r0, #1
 8000f86:	4240      	negs	r0, r0
 8000f88:	e7e1      	b.n	8000f4e <__lesf2+0x5e>
 8000f8a:	46c0      	nop			@ (mov r8, r8)

08000f8c <__aeabi_fmul>:
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	464f      	mov	r7, r9
 8000f90:	4646      	mov	r6, r8
 8000f92:	46d6      	mov	lr, sl
 8000f94:	0243      	lsls	r3, r0, #9
 8000f96:	0a5b      	lsrs	r3, r3, #9
 8000f98:	0045      	lsls	r5, r0, #1
 8000f9a:	b5c0      	push	{r6, r7, lr}
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	1c0f      	adds	r7, r1, #0
 8000fa0:	0e2d      	lsrs	r5, r5, #24
 8000fa2:	0fc6      	lsrs	r6, r0, #31
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fmul+0x1e>
 8000fa8:	e088      	b.n	80010bc <__aeabi_fmul+0x130>
 8000faa:	2dff      	cmp	r5, #255	@ 0xff
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fmul+0x24>
 8000fae:	e08d      	b.n	80010cc <__aeabi_fmul+0x140>
 8000fb0:	2280      	movs	r2, #128	@ 0x80
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	04d2      	lsls	r2, r2, #19
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4691      	mov	r9, r2
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	469a      	mov	sl, r3
 8000fc0:	3d7f      	subs	r5, #127	@ 0x7f
 8000fc2:	027c      	lsls	r4, r7, #9
 8000fc4:	007b      	lsls	r3, r7, #1
 8000fc6:	0a64      	lsrs	r4, r4, #9
 8000fc8:	0e1b      	lsrs	r3, r3, #24
 8000fca:	0fff      	lsrs	r7, r7, #31
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d068      	beq.n	80010a2 <__aeabi_fmul+0x116>
 8000fd0:	2bff      	cmp	r3, #255	@ 0xff
 8000fd2:	d021      	beq.n	8001018 <__aeabi_fmul+0x8c>
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	00e4      	lsls	r4, r4, #3
 8000fd8:	04d2      	lsls	r2, r2, #19
 8000fda:	4314      	orrs	r4, r2
 8000fdc:	4642      	mov	r2, r8
 8000fde:	3b7f      	subs	r3, #127	@ 0x7f
 8000fe0:	195b      	adds	r3, r3, r5
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	1c5d      	adds	r5, r3, #1
 8000fe6:	2a0a      	cmp	r2, #10
 8000fe8:	dc2e      	bgt.n	8001048 <__aeabi_fmul+0xbc>
 8000fea:	407e      	eors	r6, r7
 8000fec:	4642      	mov	r2, r8
 8000fee:	2a02      	cmp	r2, #2
 8000ff0:	dc23      	bgt.n	800103a <__aeabi_fmul+0xae>
 8000ff2:	3a01      	subs	r2, #1
 8000ff4:	2a01      	cmp	r2, #1
 8000ff6:	d900      	bls.n	8000ffa <__aeabi_fmul+0x6e>
 8000ff8:	e0bd      	b.n	8001176 <__aeabi_fmul+0x1ea>
 8000ffa:	2902      	cmp	r1, #2
 8000ffc:	d06e      	beq.n	80010dc <__aeabi_fmul+0x150>
 8000ffe:	2901      	cmp	r1, #1
 8001000:	d12c      	bne.n	800105c <__aeabi_fmul+0xd0>
 8001002:	2000      	movs	r0, #0
 8001004:	2200      	movs	r2, #0
 8001006:	05c0      	lsls	r0, r0, #23
 8001008:	07f6      	lsls	r6, r6, #31
 800100a:	4310      	orrs	r0, r2
 800100c:	4330      	orrs	r0, r6
 800100e:	bce0      	pop	{r5, r6, r7}
 8001010:	46ba      	mov	sl, r7
 8001012:	46b1      	mov	r9, r6
 8001014:	46a8      	mov	r8, r5
 8001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001018:	002b      	movs	r3, r5
 800101a:	33ff      	adds	r3, #255	@ 0xff
 800101c:	2c00      	cmp	r4, #0
 800101e:	d065      	beq.n	80010ec <__aeabi_fmul+0x160>
 8001020:	2203      	movs	r2, #3
 8001022:	4641      	mov	r1, r8
 8001024:	4311      	orrs	r1, r2
 8001026:	0032      	movs	r2, r6
 8001028:	3501      	adds	r5, #1
 800102a:	4688      	mov	r8, r1
 800102c:	407a      	eors	r2, r7
 800102e:	35ff      	adds	r5, #255	@ 0xff
 8001030:	290a      	cmp	r1, #10
 8001032:	dd00      	ble.n	8001036 <__aeabi_fmul+0xaa>
 8001034:	e0d8      	b.n	80011e8 <__aeabi_fmul+0x25c>
 8001036:	0016      	movs	r6, r2
 8001038:	2103      	movs	r1, #3
 800103a:	4640      	mov	r0, r8
 800103c:	2201      	movs	r2, #1
 800103e:	4082      	lsls	r2, r0
 8001040:	20a6      	movs	r0, #166	@ 0xa6
 8001042:	00c0      	lsls	r0, r0, #3
 8001044:	4202      	tst	r2, r0
 8001046:	d020      	beq.n	800108a <__aeabi_fmul+0xfe>
 8001048:	4653      	mov	r3, sl
 800104a:	2b02      	cmp	r3, #2
 800104c:	d046      	beq.n	80010dc <__aeabi_fmul+0x150>
 800104e:	2b03      	cmp	r3, #3
 8001050:	d100      	bne.n	8001054 <__aeabi_fmul+0xc8>
 8001052:	e0bb      	b.n	80011cc <__aeabi_fmul+0x240>
 8001054:	4651      	mov	r1, sl
 8001056:	464c      	mov	r4, r9
 8001058:	2901      	cmp	r1, #1
 800105a:	d0d2      	beq.n	8001002 <__aeabi_fmul+0x76>
 800105c:	002b      	movs	r3, r5
 800105e:	337f      	adds	r3, #127	@ 0x7f
 8001060:	2b00      	cmp	r3, #0
 8001062:	dd70      	ble.n	8001146 <__aeabi_fmul+0x1ba>
 8001064:	0762      	lsls	r2, r4, #29
 8001066:	d004      	beq.n	8001072 <__aeabi_fmul+0xe6>
 8001068:	220f      	movs	r2, #15
 800106a:	4022      	ands	r2, r4
 800106c:	2a04      	cmp	r2, #4
 800106e:	d000      	beq.n	8001072 <__aeabi_fmul+0xe6>
 8001070:	3404      	adds	r4, #4
 8001072:	0122      	lsls	r2, r4, #4
 8001074:	d503      	bpl.n	800107e <__aeabi_fmul+0xf2>
 8001076:	4b63      	ldr	r3, [pc, #396]	@ (8001204 <__aeabi_fmul+0x278>)
 8001078:	401c      	ands	r4, r3
 800107a:	002b      	movs	r3, r5
 800107c:	3380      	adds	r3, #128	@ 0x80
 800107e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001080:	dc2c      	bgt.n	80010dc <__aeabi_fmul+0x150>
 8001082:	01a2      	lsls	r2, r4, #6
 8001084:	0a52      	lsrs	r2, r2, #9
 8001086:	b2d8      	uxtb	r0, r3
 8001088:	e7bd      	b.n	8001006 <__aeabi_fmul+0x7a>
 800108a:	2090      	movs	r0, #144	@ 0x90
 800108c:	0080      	lsls	r0, r0, #2
 800108e:	4202      	tst	r2, r0
 8001090:	d127      	bne.n	80010e2 <__aeabi_fmul+0x156>
 8001092:	38b9      	subs	r0, #185	@ 0xb9
 8001094:	38ff      	subs	r0, #255	@ 0xff
 8001096:	4210      	tst	r0, r2
 8001098:	d06d      	beq.n	8001176 <__aeabi_fmul+0x1ea>
 800109a:	003e      	movs	r6, r7
 800109c:	46a1      	mov	r9, r4
 800109e:	468a      	mov	sl, r1
 80010a0:	e7d2      	b.n	8001048 <__aeabi_fmul+0xbc>
 80010a2:	2c00      	cmp	r4, #0
 80010a4:	d141      	bne.n	800112a <__aeabi_fmul+0x19e>
 80010a6:	2301      	movs	r3, #1
 80010a8:	4642      	mov	r2, r8
 80010aa:	431a      	orrs	r2, r3
 80010ac:	4690      	mov	r8, r2
 80010ae:	002b      	movs	r3, r5
 80010b0:	4642      	mov	r2, r8
 80010b2:	2101      	movs	r1, #1
 80010b4:	1c5d      	adds	r5, r3, #1
 80010b6:	2a0a      	cmp	r2, #10
 80010b8:	dd97      	ble.n	8000fea <__aeabi_fmul+0x5e>
 80010ba:	e7c5      	b.n	8001048 <__aeabi_fmul+0xbc>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d126      	bne.n	800110e <__aeabi_fmul+0x182>
 80010c0:	2304      	movs	r3, #4
 80010c2:	4698      	mov	r8, r3
 80010c4:	3b03      	subs	r3, #3
 80010c6:	2500      	movs	r5, #0
 80010c8:	469a      	mov	sl, r3
 80010ca:	e77a      	b.n	8000fc2 <__aeabi_fmul+0x36>
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d118      	bne.n	8001102 <__aeabi_fmul+0x176>
 80010d0:	2308      	movs	r3, #8
 80010d2:	4698      	mov	r8, r3
 80010d4:	3b06      	subs	r3, #6
 80010d6:	25ff      	movs	r5, #255	@ 0xff
 80010d8:	469a      	mov	sl, r3
 80010da:	e772      	b.n	8000fc2 <__aeabi_fmul+0x36>
 80010dc:	20ff      	movs	r0, #255	@ 0xff
 80010de:	2200      	movs	r2, #0
 80010e0:	e791      	b.n	8001006 <__aeabi_fmul+0x7a>
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	2600      	movs	r6, #0
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	03d2      	lsls	r2, r2, #15
 80010ea:	e78c      	b.n	8001006 <__aeabi_fmul+0x7a>
 80010ec:	4641      	mov	r1, r8
 80010ee:	2202      	movs	r2, #2
 80010f0:	3501      	adds	r5, #1
 80010f2:	4311      	orrs	r1, r2
 80010f4:	4688      	mov	r8, r1
 80010f6:	35ff      	adds	r5, #255	@ 0xff
 80010f8:	290a      	cmp	r1, #10
 80010fa:	dca5      	bgt.n	8001048 <__aeabi_fmul+0xbc>
 80010fc:	2102      	movs	r1, #2
 80010fe:	407e      	eors	r6, r7
 8001100:	e774      	b.n	8000fec <__aeabi_fmul+0x60>
 8001102:	230c      	movs	r3, #12
 8001104:	4698      	mov	r8, r3
 8001106:	3b09      	subs	r3, #9
 8001108:	25ff      	movs	r5, #255	@ 0xff
 800110a:	469a      	mov	sl, r3
 800110c:	e759      	b.n	8000fc2 <__aeabi_fmul+0x36>
 800110e:	0018      	movs	r0, r3
 8001110:	f002 fa6a 	bl	80035e8 <__clzsi2>
 8001114:	464a      	mov	r2, r9
 8001116:	1f43      	subs	r3, r0, #5
 8001118:	2576      	movs	r5, #118	@ 0x76
 800111a:	409a      	lsls	r2, r3
 800111c:	2300      	movs	r3, #0
 800111e:	426d      	negs	r5, r5
 8001120:	4691      	mov	r9, r2
 8001122:	4698      	mov	r8, r3
 8001124:	469a      	mov	sl, r3
 8001126:	1a2d      	subs	r5, r5, r0
 8001128:	e74b      	b.n	8000fc2 <__aeabi_fmul+0x36>
 800112a:	0020      	movs	r0, r4
 800112c:	f002 fa5c 	bl	80035e8 <__clzsi2>
 8001130:	4642      	mov	r2, r8
 8001132:	1f43      	subs	r3, r0, #5
 8001134:	409c      	lsls	r4, r3
 8001136:	1a2b      	subs	r3, r5, r0
 8001138:	3b76      	subs	r3, #118	@ 0x76
 800113a:	2100      	movs	r1, #0
 800113c:	1c5d      	adds	r5, r3, #1
 800113e:	2a0a      	cmp	r2, #10
 8001140:	dc00      	bgt.n	8001144 <__aeabi_fmul+0x1b8>
 8001142:	e752      	b.n	8000fea <__aeabi_fmul+0x5e>
 8001144:	e780      	b.n	8001048 <__aeabi_fmul+0xbc>
 8001146:	2201      	movs	r2, #1
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b1b      	cmp	r3, #27
 800114c:	dd00      	ble.n	8001150 <__aeabi_fmul+0x1c4>
 800114e:	e758      	b.n	8001002 <__aeabi_fmul+0x76>
 8001150:	359e      	adds	r5, #158	@ 0x9e
 8001152:	0022      	movs	r2, r4
 8001154:	40ac      	lsls	r4, r5
 8001156:	40da      	lsrs	r2, r3
 8001158:	1e63      	subs	r3, r4, #1
 800115a:	419c      	sbcs	r4, r3
 800115c:	4322      	orrs	r2, r4
 800115e:	0753      	lsls	r3, r2, #29
 8001160:	d004      	beq.n	800116c <__aeabi_fmul+0x1e0>
 8001162:	230f      	movs	r3, #15
 8001164:	4013      	ands	r3, r2
 8001166:	2b04      	cmp	r3, #4
 8001168:	d000      	beq.n	800116c <__aeabi_fmul+0x1e0>
 800116a:	3204      	adds	r2, #4
 800116c:	0153      	lsls	r3, r2, #5
 800116e:	d537      	bpl.n	80011e0 <__aeabi_fmul+0x254>
 8001170:	2001      	movs	r0, #1
 8001172:	2200      	movs	r2, #0
 8001174:	e747      	b.n	8001006 <__aeabi_fmul+0x7a>
 8001176:	0c21      	lsrs	r1, r4, #16
 8001178:	464a      	mov	r2, r9
 800117a:	0424      	lsls	r4, r4, #16
 800117c:	0c24      	lsrs	r4, r4, #16
 800117e:	0027      	movs	r7, r4
 8001180:	0c10      	lsrs	r0, r2, #16
 8001182:	0412      	lsls	r2, r2, #16
 8001184:	0c12      	lsrs	r2, r2, #16
 8001186:	4344      	muls	r4, r0
 8001188:	4357      	muls	r7, r2
 800118a:	4348      	muls	r0, r1
 800118c:	4351      	muls	r1, r2
 800118e:	0c3a      	lsrs	r2, r7, #16
 8001190:	1909      	adds	r1, r1, r4
 8001192:	1852      	adds	r2, r2, r1
 8001194:	4294      	cmp	r4, r2
 8001196:	d903      	bls.n	80011a0 <__aeabi_fmul+0x214>
 8001198:	2180      	movs	r1, #128	@ 0x80
 800119a:	0249      	lsls	r1, r1, #9
 800119c:	468c      	mov	ip, r1
 800119e:	4460      	add	r0, ip
 80011a0:	043f      	lsls	r7, r7, #16
 80011a2:	0411      	lsls	r1, r2, #16
 80011a4:	0c3f      	lsrs	r7, r7, #16
 80011a6:	19c9      	adds	r1, r1, r7
 80011a8:	018c      	lsls	r4, r1, #6
 80011aa:	1e67      	subs	r7, r4, #1
 80011ac:	41bc      	sbcs	r4, r7
 80011ae:	0c12      	lsrs	r2, r2, #16
 80011b0:	0e89      	lsrs	r1, r1, #26
 80011b2:	1812      	adds	r2, r2, r0
 80011b4:	430c      	orrs	r4, r1
 80011b6:	0192      	lsls	r2, r2, #6
 80011b8:	4314      	orrs	r4, r2
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	d50e      	bpl.n	80011dc <__aeabi_fmul+0x250>
 80011be:	2301      	movs	r3, #1
 80011c0:	0862      	lsrs	r2, r4, #1
 80011c2:	401c      	ands	r4, r3
 80011c4:	4314      	orrs	r4, r2
 80011c6:	e749      	b.n	800105c <__aeabi_fmul+0xd0>
 80011c8:	003e      	movs	r6, r7
 80011ca:	46a1      	mov	r9, r4
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	464b      	mov	r3, r9
 80011d0:	03d2      	lsls	r2, r2, #15
 80011d2:	431a      	orrs	r2, r3
 80011d4:	0252      	lsls	r2, r2, #9
 80011d6:	20ff      	movs	r0, #255	@ 0xff
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	e714      	b.n	8001006 <__aeabi_fmul+0x7a>
 80011dc:	001d      	movs	r5, r3
 80011de:	e73d      	b.n	800105c <__aeabi_fmul+0xd0>
 80011e0:	0192      	lsls	r2, r2, #6
 80011e2:	2000      	movs	r0, #0
 80011e4:	0a52      	lsrs	r2, r2, #9
 80011e6:	e70e      	b.n	8001006 <__aeabi_fmul+0x7a>
 80011e8:	290f      	cmp	r1, #15
 80011ea:	d1ed      	bne.n	80011c8 <__aeabi_fmul+0x23c>
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	464b      	mov	r3, r9
 80011f0:	03d2      	lsls	r2, r2, #15
 80011f2:	4213      	tst	r3, r2
 80011f4:	d0ea      	beq.n	80011cc <__aeabi_fmul+0x240>
 80011f6:	4214      	tst	r4, r2
 80011f8:	d1e8      	bne.n	80011cc <__aeabi_fmul+0x240>
 80011fa:	003e      	movs	r6, r7
 80011fc:	20ff      	movs	r0, #255	@ 0xff
 80011fe:	4322      	orrs	r2, r4
 8001200:	e701      	b.n	8001006 <__aeabi_fmul+0x7a>
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	f7ffffff 	.word	0xf7ffffff

08001208 <__aeabi_fsub>:
 8001208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120a:	4647      	mov	r7, r8
 800120c:	46ce      	mov	lr, r9
 800120e:	024e      	lsls	r6, r1, #9
 8001210:	0243      	lsls	r3, r0, #9
 8001212:	0045      	lsls	r5, r0, #1
 8001214:	0a72      	lsrs	r2, r6, #9
 8001216:	0fc4      	lsrs	r4, r0, #31
 8001218:	0048      	lsls	r0, r1, #1
 800121a:	b580      	push	{r7, lr}
 800121c:	4694      	mov	ip, r2
 800121e:	0a5f      	lsrs	r7, r3, #9
 8001220:	0e2d      	lsrs	r5, r5, #24
 8001222:	099b      	lsrs	r3, r3, #6
 8001224:	0e00      	lsrs	r0, r0, #24
 8001226:	0fc9      	lsrs	r1, r1, #31
 8001228:	09b6      	lsrs	r6, r6, #6
 800122a:	28ff      	cmp	r0, #255	@ 0xff
 800122c:	d024      	beq.n	8001278 <__aeabi_fsub+0x70>
 800122e:	2201      	movs	r2, #1
 8001230:	4051      	eors	r1, r2
 8001232:	1a2a      	subs	r2, r5, r0
 8001234:	428c      	cmp	r4, r1
 8001236:	d00f      	beq.n	8001258 <__aeabi_fsub+0x50>
 8001238:	2a00      	cmp	r2, #0
 800123a:	dc00      	bgt.n	800123e <__aeabi_fsub+0x36>
 800123c:	e16a      	b.n	8001514 <__aeabi_fsub+0x30c>
 800123e:	2800      	cmp	r0, #0
 8001240:	d135      	bne.n	80012ae <__aeabi_fsub+0xa6>
 8001242:	2e00      	cmp	r6, #0
 8001244:	d100      	bne.n	8001248 <__aeabi_fsub+0x40>
 8001246:	e0a2      	b.n	800138e <__aeabi_fsub+0x186>
 8001248:	1e51      	subs	r1, r2, #1
 800124a:	2a01      	cmp	r2, #1
 800124c:	d100      	bne.n	8001250 <__aeabi_fsub+0x48>
 800124e:	e124      	b.n	800149a <__aeabi_fsub+0x292>
 8001250:	2aff      	cmp	r2, #255	@ 0xff
 8001252:	d021      	beq.n	8001298 <__aeabi_fsub+0x90>
 8001254:	000a      	movs	r2, r1
 8001256:	e02f      	b.n	80012b8 <__aeabi_fsub+0xb0>
 8001258:	2a00      	cmp	r2, #0
 800125a:	dc00      	bgt.n	800125e <__aeabi_fsub+0x56>
 800125c:	e167      	b.n	800152e <__aeabi_fsub+0x326>
 800125e:	2800      	cmp	r0, #0
 8001260:	d05e      	beq.n	8001320 <__aeabi_fsub+0x118>
 8001262:	2dff      	cmp	r5, #255	@ 0xff
 8001264:	d018      	beq.n	8001298 <__aeabi_fsub+0x90>
 8001266:	2180      	movs	r1, #128	@ 0x80
 8001268:	04c9      	lsls	r1, r1, #19
 800126a:	430e      	orrs	r6, r1
 800126c:	2a1b      	cmp	r2, #27
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x6a>
 8001270:	e076      	b.n	8001360 <__aeabi_fsub+0x158>
 8001272:	002a      	movs	r2, r5
 8001274:	3301      	adds	r3, #1
 8001276:	e032      	b.n	80012de <__aeabi_fsub+0xd6>
 8001278:	002a      	movs	r2, r5
 800127a:	3aff      	subs	r2, #255	@ 0xff
 800127c:	4691      	mov	r9, r2
 800127e:	2e00      	cmp	r6, #0
 8001280:	d042      	beq.n	8001308 <__aeabi_fsub+0x100>
 8001282:	428c      	cmp	r4, r1
 8001284:	d055      	beq.n	8001332 <__aeabi_fsub+0x12a>
 8001286:	464a      	mov	r2, r9
 8001288:	2a00      	cmp	r2, #0
 800128a:	d100      	bne.n	800128e <__aeabi_fsub+0x86>
 800128c:	e09c      	b.n	80013c8 <__aeabi_fsub+0x1c0>
 800128e:	2d00      	cmp	r5, #0
 8001290:	d100      	bne.n	8001294 <__aeabi_fsub+0x8c>
 8001292:	e077      	b.n	8001384 <__aeabi_fsub+0x17c>
 8001294:	000c      	movs	r4, r1
 8001296:	0033      	movs	r3, r6
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x98>
 800129e:	e06e      	b.n	800137e <__aeabi_fsub+0x176>
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	03d2      	lsls	r2, r2, #15
 80012a4:	4313      	orrs	r3, r2
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	20ff      	movs	r0, #255	@ 0xff
 80012aa:	0a5b      	lsrs	r3, r3, #9
 80012ac:	e024      	b.n	80012f8 <__aeabi_fsub+0xf0>
 80012ae:	2dff      	cmp	r5, #255	@ 0xff
 80012b0:	d0f2      	beq.n	8001298 <__aeabi_fsub+0x90>
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	04c9      	lsls	r1, r1, #19
 80012b6:	430e      	orrs	r6, r1
 80012b8:	2101      	movs	r1, #1
 80012ba:	2a1b      	cmp	r2, #27
 80012bc:	dc08      	bgt.n	80012d0 <__aeabi_fsub+0xc8>
 80012be:	0031      	movs	r1, r6
 80012c0:	2020      	movs	r0, #32
 80012c2:	40d1      	lsrs	r1, r2
 80012c4:	1a82      	subs	r2, r0, r2
 80012c6:	4096      	lsls	r6, r2
 80012c8:	0032      	movs	r2, r6
 80012ca:	1e50      	subs	r0, r2, #1
 80012cc:	4182      	sbcs	r2, r0
 80012ce:	4311      	orrs	r1, r2
 80012d0:	1a5b      	subs	r3, r3, r1
 80012d2:	015a      	lsls	r2, r3, #5
 80012d4:	d460      	bmi.n	8001398 <__aeabi_fsub+0x190>
 80012d6:	2107      	movs	r1, #7
 80012d8:	002a      	movs	r2, r5
 80012da:	4019      	ands	r1, r3
 80012dc:	d057      	beq.n	800138e <__aeabi_fsub+0x186>
 80012de:	210f      	movs	r1, #15
 80012e0:	4019      	ands	r1, r3
 80012e2:	2904      	cmp	r1, #4
 80012e4:	d000      	beq.n	80012e8 <__aeabi_fsub+0xe0>
 80012e6:	3304      	adds	r3, #4
 80012e8:	0159      	lsls	r1, r3, #5
 80012ea:	d550      	bpl.n	800138e <__aeabi_fsub+0x186>
 80012ec:	1c50      	adds	r0, r2, #1
 80012ee:	2afe      	cmp	r2, #254	@ 0xfe
 80012f0:	d045      	beq.n	800137e <__aeabi_fsub+0x176>
 80012f2:	019b      	lsls	r3, r3, #6
 80012f4:	b2c0      	uxtb	r0, r0
 80012f6:	0a5b      	lsrs	r3, r3, #9
 80012f8:	05c0      	lsls	r0, r0, #23
 80012fa:	4318      	orrs	r0, r3
 80012fc:	07e4      	lsls	r4, r4, #31
 80012fe:	4320      	orrs	r0, r4
 8001300:	bcc0      	pop	{r6, r7}
 8001302:	46b9      	mov	r9, r7
 8001304:	46b0      	mov	r8, r6
 8001306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001308:	2201      	movs	r2, #1
 800130a:	4051      	eors	r1, r2
 800130c:	428c      	cmp	r4, r1
 800130e:	d1ba      	bne.n	8001286 <__aeabi_fsub+0x7e>
 8001310:	464a      	mov	r2, r9
 8001312:	2a00      	cmp	r2, #0
 8001314:	d010      	beq.n	8001338 <__aeabi_fsub+0x130>
 8001316:	2d00      	cmp	r5, #0
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0x114>
 800131a:	e098      	b.n	800144e <__aeabi_fsub+0x246>
 800131c:	2300      	movs	r3, #0
 800131e:	e7bb      	b.n	8001298 <__aeabi_fsub+0x90>
 8001320:	2e00      	cmp	r6, #0
 8001322:	d034      	beq.n	800138e <__aeabi_fsub+0x186>
 8001324:	1e51      	subs	r1, r2, #1
 8001326:	2a01      	cmp	r2, #1
 8001328:	d06e      	beq.n	8001408 <__aeabi_fsub+0x200>
 800132a:	2aff      	cmp	r2, #255	@ 0xff
 800132c:	d0b4      	beq.n	8001298 <__aeabi_fsub+0x90>
 800132e:	000a      	movs	r2, r1
 8001330:	e79c      	b.n	800126c <__aeabi_fsub+0x64>
 8001332:	2a00      	cmp	r2, #0
 8001334:	d000      	beq.n	8001338 <__aeabi_fsub+0x130>
 8001336:	e088      	b.n	800144a <__aeabi_fsub+0x242>
 8001338:	20fe      	movs	r0, #254	@ 0xfe
 800133a:	1c6a      	adds	r2, r5, #1
 800133c:	4210      	tst	r0, r2
 800133e:	d000      	beq.n	8001342 <__aeabi_fsub+0x13a>
 8001340:	e092      	b.n	8001468 <__aeabi_fsub+0x260>
 8001342:	2d00      	cmp	r5, #0
 8001344:	d000      	beq.n	8001348 <__aeabi_fsub+0x140>
 8001346:	e0a4      	b.n	8001492 <__aeabi_fsub+0x28a>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d100      	bne.n	800134e <__aeabi_fsub+0x146>
 800134c:	e0cb      	b.n	80014e6 <__aeabi_fsub+0x2de>
 800134e:	2e00      	cmp	r6, #0
 8001350:	d000      	beq.n	8001354 <__aeabi_fsub+0x14c>
 8001352:	e0ca      	b.n	80014ea <__aeabi_fsub+0x2e2>
 8001354:	2200      	movs	r2, #0
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	0a5b      	lsrs	r3, r3, #9
 800135c:	b2d0      	uxtb	r0, r2
 800135e:	e7cb      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001360:	0031      	movs	r1, r6
 8001362:	2020      	movs	r0, #32
 8001364:	40d1      	lsrs	r1, r2
 8001366:	1a82      	subs	r2, r0, r2
 8001368:	4096      	lsls	r6, r2
 800136a:	0032      	movs	r2, r6
 800136c:	1e50      	subs	r0, r2, #1
 800136e:	4182      	sbcs	r2, r0
 8001370:	430a      	orrs	r2, r1
 8001372:	189b      	adds	r3, r3, r2
 8001374:	015a      	lsls	r2, r3, #5
 8001376:	d5ae      	bpl.n	80012d6 <__aeabi_fsub+0xce>
 8001378:	1c6a      	adds	r2, r5, #1
 800137a:	2dfe      	cmp	r5, #254	@ 0xfe
 800137c:	d14a      	bne.n	8001414 <__aeabi_fsub+0x20c>
 800137e:	20ff      	movs	r0, #255	@ 0xff
 8001380:	2300      	movs	r3, #0
 8001382:	e7b9      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001384:	22ff      	movs	r2, #255	@ 0xff
 8001386:	2b00      	cmp	r3, #0
 8001388:	d14b      	bne.n	8001422 <__aeabi_fsub+0x21a>
 800138a:	000c      	movs	r4, r1
 800138c:	0033      	movs	r3, r6
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	2aff      	cmp	r2, #255	@ 0xff
 8001392:	d100      	bne.n	8001396 <__aeabi_fsub+0x18e>
 8001394:	e781      	b.n	800129a <__aeabi_fsub+0x92>
 8001396:	e7df      	b.n	8001358 <__aeabi_fsub+0x150>
 8001398:	019f      	lsls	r7, r3, #6
 800139a:	09bf      	lsrs	r7, r7, #6
 800139c:	0038      	movs	r0, r7
 800139e:	f002 f923 	bl	80035e8 <__clzsi2>
 80013a2:	3805      	subs	r0, #5
 80013a4:	4087      	lsls	r7, r0
 80013a6:	4285      	cmp	r5, r0
 80013a8:	dc21      	bgt.n	80013ee <__aeabi_fsub+0x1e6>
 80013aa:	003b      	movs	r3, r7
 80013ac:	2120      	movs	r1, #32
 80013ae:	1b42      	subs	r2, r0, r5
 80013b0:	3201      	adds	r2, #1
 80013b2:	40d3      	lsrs	r3, r2
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	4097      	lsls	r7, r2
 80013b8:	1e7a      	subs	r2, r7, #1
 80013ba:	4197      	sbcs	r7, r2
 80013bc:	2200      	movs	r2, #0
 80013be:	433b      	orrs	r3, r7
 80013c0:	0759      	lsls	r1, r3, #29
 80013c2:	d000      	beq.n	80013c6 <__aeabi_fsub+0x1be>
 80013c4:	e78b      	b.n	80012de <__aeabi_fsub+0xd6>
 80013c6:	e78f      	b.n	80012e8 <__aeabi_fsub+0xe0>
 80013c8:	20fe      	movs	r0, #254	@ 0xfe
 80013ca:	1c6a      	adds	r2, r5, #1
 80013cc:	4210      	tst	r0, r2
 80013ce:	d112      	bne.n	80013f6 <__aeabi_fsub+0x1ee>
 80013d0:	2d00      	cmp	r5, #0
 80013d2:	d152      	bne.n	800147a <__aeabi_fsub+0x272>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d07c      	beq.n	80014d2 <__aeabi_fsub+0x2ca>
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d0bb      	beq.n	8001354 <__aeabi_fsub+0x14c>
 80013dc:	1b9a      	subs	r2, r3, r6
 80013de:	0150      	lsls	r0, r2, #5
 80013e0:	d400      	bmi.n	80013e4 <__aeabi_fsub+0x1dc>
 80013e2:	e08b      	b.n	80014fc <__aeabi_fsub+0x2f4>
 80013e4:	2401      	movs	r4, #1
 80013e6:	2200      	movs	r2, #0
 80013e8:	1af3      	subs	r3, r6, r3
 80013ea:	400c      	ands	r4, r1
 80013ec:	e7e8      	b.n	80013c0 <__aeabi_fsub+0x1b8>
 80013ee:	4b56      	ldr	r3, [pc, #344]	@ (8001548 <__aeabi_fsub+0x340>)
 80013f0:	1a2a      	subs	r2, r5, r0
 80013f2:	403b      	ands	r3, r7
 80013f4:	e7e4      	b.n	80013c0 <__aeabi_fsub+0x1b8>
 80013f6:	1b9f      	subs	r7, r3, r6
 80013f8:	017a      	lsls	r2, r7, #5
 80013fa:	d446      	bmi.n	800148a <__aeabi_fsub+0x282>
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d1cd      	bne.n	800139c <__aeabi_fsub+0x194>
 8001400:	2400      	movs	r4, #0
 8001402:	2000      	movs	r0, #0
 8001404:	2300      	movs	r3, #0
 8001406:	e777      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001408:	199b      	adds	r3, r3, r6
 800140a:	2501      	movs	r5, #1
 800140c:	3201      	adds	r2, #1
 800140e:	0159      	lsls	r1, r3, #5
 8001410:	d400      	bmi.n	8001414 <__aeabi_fsub+0x20c>
 8001412:	e760      	b.n	80012d6 <__aeabi_fsub+0xce>
 8001414:	2101      	movs	r1, #1
 8001416:	484d      	ldr	r0, [pc, #308]	@ (800154c <__aeabi_fsub+0x344>)
 8001418:	4019      	ands	r1, r3
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	4003      	ands	r3, r0
 800141e:	430b      	orrs	r3, r1
 8001420:	e7ce      	b.n	80013c0 <__aeabi_fsub+0x1b8>
 8001422:	1e57      	subs	r7, r2, #1
 8001424:	2a01      	cmp	r2, #1
 8001426:	d05a      	beq.n	80014de <__aeabi_fsub+0x2d6>
 8001428:	000c      	movs	r4, r1
 800142a:	2aff      	cmp	r2, #255	@ 0xff
 800142c:	d033      	beq.n	8001496 <__aeabi_fsub+0x28e>
 800142e:	2201      	movs	r2, #1
 8001430:	2f1b      	cmp	r7, #27
 8001432:	dc07      	bgt.n	8001444 <__aeabi_fsub+0x23c>
 8001434:	2120      	movs	r1, #32
 8001436:	1bc9      	subs	r1, r1, r7
 8001438:	001a      	movs	r2, r3
 800143a:	408b      	lsls	r3, r1
 800143c:	40fa      	lsrs	r2, r7
 800143e:	1e59      	subs	r1, r3, #1
 8001440:	418b      	sbcs	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	0005      	movs	r5, r0
 8001446:	1ab3      	subs	r3, r6, r2
 8001448:	e743      	b.n	80012d2 <__aeabi_fsub+0xca>
 800144a:	2d00      	cmp	r5, #0
 800144c:	d123      	bne.n	8001496 <__aeabi_fsub+0x28e>
 800144e:	22ff      	movs	r2, #255	@ 0xff
 8001450:	2b00      	cmp	r3, #0
 8001452:	d09b      	beq.n	800138c <__aeabi_fsub+0x184>
 8001454:	1e51      	subs	r1, r2, #1
 8001456:	2a01      	cmp	r2, #1
 8001458:	d0d6      	beq.n	8001408 <__aeabi_fsub+0x200>
 800145a:	2aff      	cmp	r2, #255	@ 0xff
 800145c:	d01b      	beq.n	8001496 <__aeabi_fsub+0x28e>
 800145e:	291b      	cmp	r1, #27
 8001460:	dd2c      	ble.n	80014bc <__aeabi_fsub+0x2b4>
 8001462:	0002      	movs	r2, r0
 8001464:	1c73      	adds	r3, r6, #1
 8001466:	e73a      	b.n	80012de <__aeabi_fsub+0xd6>
 8001468:	2aff      	cmp	r2, #255	@ 0xff
 800146a:	d088      	beq.n	800137e <__aeabi_fsub+0x176>
 800146c:	199b      	adds	r3, r3, r6
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	0759      	lsls	r1, r3, #29
 8001472:	d000      	beq.n	8001476 <__aeabi_fsub+0x26e>
 8001474:	e733      	b.n	80012de <__aeabi_fsub+0xd6>
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	e76e      	b.n	8001358 <__aeabi_fsub+0x150>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d110      	bne.n	80014a0 <__aeabi_fsub+0x298>
 800147e:	2e00      	cmp	r6, #0
 8001480:	d043      	beq.n	800150a <__aeabi_fsub+0x302>
 8001482:	2401      	movs	r4, #1
 8001484:	0033      	movs	r3, r6
 8001486:	400c      	ands	r4, r1
 8001488:	e706      	b.n	8001298 <__aeabi_fsub+0x90>
 800148a:	2401      	movs	r4, #1
 800148c:	1af7      	subs	r7, r6, r3
 800148e:	400c      	ands	r4, r1
 8001490:	e784      	b.n	800139c <__aeabi_fsub+0x194>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <__aeabi_fsub+0x298>
 8001496:	0033      	movs	r3, r6
 8001498:	e6fe      	b.n	8001298 <__aeabi_fsub+0x90>
 800149a:	2501      	movs	r5, #1
 800149c:	1b9b      	subs	r3, r3, r6
 800149e:	e718      	b.n	80012d2 <__aeabi_fsub+0xca>
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_fsub+0x29e>
 80014a4:	e6f8      	b.n	8001298 <__aeabi_fsub+0x90>
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	03d2      	lsls	r2, r2, #15
 80014aa:	4297      	cmp	r7, r2
 80014ac:	d304      	bcc.n	80014b8 <__aeabi_fsub+0x2b0>
 80014ae:	4594      	cmp	ip, r2
 80014b0:	d202      	bcs.n	80014b8 <__aeabi_fsub+0x2b0>
 80014b2:	2401      	movs	r4, #1
 80014b4:	0033      	movs	r3, r6
 80014b6:	400c      	ands	r4, r1
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	e6f1      	b.n	80012a0 <__aeabi_fsub+0x98>
 80014bc:	001a      	movs	r2, r3
 80014be:	2520      	movs	r5, #32
 80014c0:	40ca      	lsrs	r2, r1
 80014c2:	1a69      	subs	r1, r5, r1
 80014c4:	408b      	lsls	r3, r1
 80014c6:	1e59      	subs	r1, r3, #1
 80014c8:	418b      	sbcs	r3, r1
 80014ca:	4313      	orrs	r3, r2
 80014cc:	0005      	movs	r5, r0
 80014ce:	199b      	adds	r3, r3, r6
 80014d0:	e750      	b.n	8001374 <__aeabi_fsub+0x16c>
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d094      	beq.n	8001400 <__aeabi_fsub+0x1f8>
 80014d6:	2401      	movs	r4, #1
 80014d8:	0033      	movs	r3, r6
 80014da:	400c      	ands	r4, r1
 80014dc:	e73a      	b.n	8001354 <__aeabi_fsub+0x14c>
 80014de:	000c      	movs	r4, r1
 80014e0:	2501      	movs	r5, #1
 80014e2:	1af3      	subs	r3, r6, r3
 80014e4:	e6f5      	b.n	80012d2 <__aeabi_fsub+0xca>
 80014e6:	0033      	movs	r3, r6
 80014e8:	e734      	b.n	8001354 <__aeabi_fsub+0x14c>
 80014ea:	199b      	adds	r3, r3, r6
 80014ec:	2200      	movs	r2, #0
 80014ee:	0159      	lsls	r1, r3, #5
 80014f0:	d5c1      	bpl.n	8001476 <__aeabi_fsub+0x26e>
 80014f2:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <__aeabi_fsub+0x340>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	2201      	movs	r2, #1
 80014fa:	e72d      	b.n	8001358 <__aeabi_fsub+0x150>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d100      	bne.n	8001502 <__aeabi_fsub+0x2fa>
 8001500:	e77e      	b.n	8001400 <__aeabi_fsub+0x1f8>
 8001502:	0013      	movs	r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	e726      	b.n	8001358 <__aeabi_fsub+0x150>
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	2400      	movs	r4, #0
 800150e:	20ff      	movs	r0, #255	@ 0xff
 8001510:	03db      	lsls	r3, r3, #15
 8001512:	e6f1      	b.n	80012f8 <__aeabi_fsub+0xf0>
 8001514:	2a00      	cmp	r2, #0
 8001516:	d100      	bne.n	800151a <__aeabi_fsub+0x312>
 8001518:	e756      	b.n	80013c8 <__aeabi_fsub+0x1c0>
 800151a:	1b47      	subs	r7, r0, r5
 800151c:	003a      	movs	r2, r7
 800151e:	2d00      	cmp	r5, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_fsub+0x31c>
 8001522:	e730      	b.n	8001386 <__aeabi_fsub+0x17e>
 8001524:	2280      	movs	r2, #128	@ 0x80
 8001526:	04d2      	lsls	r2, r2, #19
 8001528:	000c      	movs	r4, r1
 800152a:	4313      	orrs	r3, r2
 800152c:	e77f      	b.n	800142e <__aeabi_fsub+0x226>
 800152e:	2a00      	cmp	r2, #0
 8001530:	d100      	bne.n	8001534 <__aeabi_fsub+0x32c>
 8001532:	e701      	b.n	8001338 <__aeabi_fsub+0x130>
 8001534:	1b41      	subs	r1, r0, r5
 8001536:	2d00      	cmp	r5, #0
 8001538:	d101      	bne.n	800153e <__aeabi_fsub+0x336>
 800153a:	000a      	movs	r2, r1
 800153c:	e788      	b.n	8001450 <__aeabi_fsub+0x248>
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	04d2      	lsls	r2, r2, #19
 8001542:	4313      	orrs	r3, r2
 8001544:	e78b      	b.n	800145e <__aeabi_fsub+0x256>
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	fbffffff 	.word	0xfbffffff
 800154c:	7dffffff 	.word	0x7dffffff

08001550 <__aeabi_fcmpun>:
 8001550:	0243      	lsls	r3, r0, #9
 8001552:	024a      	lsls	r2, r1, #9
 8001554:	0040      	lsls	r0, r0, #1
 8001556:	0049      	lsls	r1, r1, #1
 8001558:	0a5b      	lsrs	r3, r3, #9
 800155a:	0a52      	lsrs	r2, r2, #9
 800155c:	0e09      	lsrs	r1, r1, #24
 800155e:	0e00      	lsrs	r0, r0, #24
 8001560:	28ff      	cmp	r0, #255	@ 0xff
 8001562:	d006      	beq.n	8001572 <__aeabi_fcmpun+0x22>
 8001564:	2000      	movs	r0, #0
 8001566:	29ff      	cmp	r1, #255	@ 0xff
 8001568:	d102      	bne.n	8001570 <__aeabi_fcmpun+0x20>
 800156a:	1e53      	subs	r3, r2, #1
 800156c:	419a      	sbcs	r2, r3
 800156e:	0010      	movs	r0, r2
 8001570:	4770      	bx	lr
 8001572:	38fe      	subs	r0, #254	@ 0xfe
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1fb      	bne.n	8001570 <__aeabi_fcmpun+0x20>
 8001578:	e7f4      	b.n	8001564 <__aeabi_fcmpun+0x14>
 800157a:	46c0      	nop			@ (mov r8, r8)

0800157c <__aeabi_f2iz>:
 800157c:	0241      	lsls	r1, r0, #9
 800157e:	0042      	lsls	r2, r0, #1
 8001580:	0fc3      	lsrs	r3, r0, #31
 8001582:	0a49      	lsrs	r1, r1, #9
 8001584:	2000      	movs	r0, #0
 8001586:	0e12      	lsrs	r2, r2, #24
 8001588:	2a7e      	cmp	r2, #126	@ 0x7e
 800158a:	dd03      	ble.n	8001594 <__aeabi_f2iz+0x18>
 800158c:	2a9d      	cmp	r2, #157	@ 0x9d
 800158e:	dd02      	ble.n	8001596 <__aeabi_f2iz+0x1a>
 8001590:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <__aeabi_f2iz+0x3c>)
 8001592:	1898      	adds	r0, r3, r2
 8001594:	4770      	bx	lr
 8001596:	2080      	movs	r0, #128	@ 0x80
 8001598:	0400      	lsls	r0, r0, #16
 800159a:	4301      	orrs	r1, r0
 800159c:	2a95      	cmp	r2, #149	@ 0x95
 800159e:	dc07      	bgt.n	80015b0 <__aeabi_f2iz+0x34>
 80015a0:	2096      	movs	r0, #150	@ 0x96
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	40d1      	lsrs	r1, r2
 80015a6:	4248      	negs	r0, r1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f3      	bne.n	8001594 <__aeabi_f2iz+0x18>
 80015ac:	0008      	movs	r0, r1
 80015ae:	e7f1      	b.n	8001594 <__aeabi_f2iz+0x18>
 80015b0:	3a96      	subs	r2, #150	@ 0x96
 80015b2:	4091      	lsls	r1, r2
 80015b4:	e7f7      	b.n	80015a6 <__aeabi_f2iz+0x2a>
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	7fffffff 	.word	0x7fffffff

080015bc <__aeabi_i2f>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	2800      	cmp	r0, #0
 80015c0:	d013      	beq.n	80015ea <__aeabi_i2f+0x2e>
 80015c2:	17c3      	asrs	r3, r0, #31
 80015c4:	18c5      	adds	r5, r0, r3
 80015c6:	405d      	eors	r5, r3
 80015c8:	0fc4      	lsrs	r4, r0, #31
 80015ca:	0028      	movs	r0, r5
 80015cc:	f002 f80c 	bl	80035e8 <__clzsi2>
 80015d0:	239e      	movs	r3, #158	@ 0x9e
 80015d2:	0001      	movs	r1, r0
 80015d4:	1a1b      	subs	r3, r3, r0
 80015d6:	2b96      	cmp	r3, #150	@ 0x96
 80015d8:	dc0f      	bgt.n	80015fa <__aeabi_i2f+0x3e>
 80015da:	2808      	cmp	r0, #8
 80015dc:	d034      	beq.n	8001648 <__aeabi_i2f+0x8c>
 80015de:	3908      	subs	r1, #8
 80015e0:	408d      	lsls	r5, r1
 80015e2:	026d      	lsls	r5, r5, #9
 80015e4:	0a6d      	lsrs	r5, r5, #9
 80015e6:	b2d8      	uxtb	r0, r3
 80015e8:	e002      	b.n	80015f0 <__aeabi_i2f+0x34>
 80015ea:	2400      	movs	r4, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	2500      	movs	r5, #0
 80015f0:	05c0      	lsls	r0, r0, #23
 80015f2:	4328      	orrs	r0, r5
 80015f4:	07e4      	lsls	r4, r4, #31
 80015f6:	4320      	orrs	r0, r4
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	2b99      	cmp	r3, #153	@ 0x99
 80015fc:	dc16      	bgt.n	800162c <__aeabi_i2f+0x70>
 80015fe:	1f42      	subs	r2, r0, #5
 8001600:	2805      	cmp	r0, #5
 8001602:	d000      	beq.n	8001606 <__aeabi_i2f+0x4a>
 8001604:	4095      	lsls	r5, r2
 8001606:	002a      	movs	r2, r5
 8001608:	4811      	ldr	r0, [pc, #68]	@ (8001650 <__aeabi_i2f+0x94>)
 800160a:	4002      	ands	r2, r0
 800160c:	076e      	lsls	r6, r5, #29
 800160e:	d009      	beq.n	8001624 <__aeabi_i2f+0x68>
 8001610:	260f      	movs	r6, #15
 8001612:	4035      	ands	r5, r6
 8001614:	2d04      	cmp	r5, #4
 8001616:	d005      	beq.n	8001624 <__aeabi_i2f+0x68>
 8001618:	3204      	adds	r2, #4
 800161a:	0155      	lsls	r5, r2, #5
 800161c:	d502      	bpl.n	8001624 <__aeabi_i2f+0x68>
 800161e:	239f      	movs	r3, #159	@ 0x9f
 8001620:	4002      	ands	r2, r0
 8001622:	1a5b      	subs	r3, r3, r1
 8001624:	0192      	lsls	r2, r2, #6
 8001626:	0a55      	lsrs	r5, r2, #9
 8001628:	b2d8      	uxtb	r0, r3
 800162a:	e7e1      	b.n	80015f0 <__aeabi_i2f+0x34>
 800162c:	2205      	movs	r2, #5
 800162e:	1a12      	subs	r2, r2, r0
 8001630:	0028      	movs	r0, r5
 8001632:	40d0      	lsrs	r0, r2
 8001634:	0002      	movs	r2, r0
 8001636:	0008      	movs	r0, r1
 8001638:	301b      	adds	r0, #27
 800163a:	4085      	lsls	r5, r0
 800163c:	0028      	movs	r0, r5
 800163e:	1e45      	subs	r5, r0, #1
 8001640:	41a8      	sbcs	r0, r5
 8001642:	4302      	orrs	r2, r0
 8001644:	0015      	movs	r5, r2
 8001646:	e7de      	b.n	8001606 <__aeabi_i2f+0x4a>
 8001648:	026d      	lsls	r5, r5, #9
 800164a:	2096      	movs	r0, #150	@ 0x96
 800164c:	0a6d      	lsrs	r5, r5, #9
 800164e:	e7cf      	b.n	80015f0 <__aeabi_i2f+0x34>
 8001650:	fbffffff 	.word	0xfbffffff

08001654 <__aeabi_ui2f>:
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	1e04      	subs	r4, r0, #0
 8001658:	d00e      	beq.n	8001678 <__aeabi_ui2f+0x24>
 800165a:	f001 ffc5 	bl	80035e8 <__clzsi2>
 800165e:	239e      	movs	r3, #158	@ 0x9e
 8001660:	0001      	movs	r1, r0
 8001662:	1a1b      	subs	r3, r3, r0
 8001664:	2b96      	cmp	r3, #150	@ 0x96
 8001666:	dc0c      	bgt.n	8001682 <__aeabi_ui2f+0x2e>
 8001668:	2808      	cmp	r0, #8
 800166a:	d02f      	beq.n	80016cc <__aeabi_ui2f+0x78>
 800166c:	3908      	subs	r1, #8
 800166e:	408c      	lsls	r4, r1
 8001670:	0264      	lsls	r4, r4, #9
 8001672:	0a64      	lsrs	r4, r4, #9
 8001674:	b2d8      	uxtb	r0, r3
 8001676:	e001      	b.n	800167c <__aeabi_ui2f+0x28>
 8001678:	2000      	movs	r0, #0
 800167a:	2400      	movs	r4, #0
 800167c:	05c0      	lsls	r0, r0, #23
 800167e:	4320      	orrs	r0, r4
 8001680:	bd70      	pop	{r4, r5, r6, pc}
 8001682:	2b99      	cmp	r3, #153	@ 0x99
 8001684:	dc16      	bgt.n	80016b4 <__aeabi_ui2f+0x60>
 8001686:	1f42      	subs	r2, r0, #5
 8001688:	2805      	cmp	r0, #5
 800168a:	d000      	beq.n	800168e <__aeabi_ui2f+0x3a>
 800168c:	4094      	lsls	r4, r2
 800168e:	0022      	movs	r2, r4
 8001690:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <__aeabi_ui2f+0x80>)
 8001692:	4002      	ands	r2, r0
 8001694:	0765      	lsls	r5, r4, #29
 8001696:	d009      	beq.n	80016ac <__aeabi_ui2f+0x58>
 8001698:	250f      	movs	r5, #15
 800169a:	402c      	ands	r4, r5
 800169c:	2c04      	cmp	r4, #4
 800169e:	d005      	beq.n	80016ac <__aeabi_ui2f+0x58>
 80016a0:	3204      	adds	r2, #4
 80016a2:	0154      	lsls	r4, r2, #5
 80016a4:	d502      	bpl.n	80016ac <__aeabi_ui2f+0x58>
 80016a6:	239f      	movs	r3, #159	@ 0x9f
 80016a8:	4002      	ands	r2, r0
 80016aa:	1a5b      	subs	r3, r3, r1
 80016ac:	0192      	lsls	r2, r2, #6
 80016ae:	0a54      	lsrs	r4, r2, #9
 80016b0:	b2d8      	uxtb	r0, r3
 80016b2:	e7e3      	b.n	800167c <__aeabi_ui2f+0x28>
 80016b4:	0002      	movs	r2, r0
 80016b6:	0020      	movs	r0, r4
 80016b8:	321b      	adds	r2, #27
 80016ba:	4090      	lsls	r0, r2
 80016bc:	0002      	movs	r2, r0
 80016be:	1e50      	subs	r0, r2, #1
 80016c0:	4182      	sbcs	r2, r0
 80016c2:	2005      	movs	r0, #5
 80016c4:	1a40      	subs	r0, r0, r1
 80016c6:	40c4      	lsrs	r4, r0
 80016c8:	4314      	orrs	r4, r2
 80016ca:	e7e0      	b.n	800168e <__aeabi_ui2f+0x3a>
 80016cc:	0264      	lsls	r4, r4, #9
 80016ce:	2096      	movs	r0, #150	@ 0x96
 80016d0:	0a64      	lsrs	r4, r4, #9
 80016d2:	e7d3      	b.n	800167c <__aeabi_ui2f+0x28>
 80016d4:	fbffffff 	.word	0xfbffffff

080016d8 <__aeabi_dadd>:
 80016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016da:	4657      	mov	r7, sl
 80016dc:	464e      	mov	r6, r9
 80016de:	4645      	mov	r5, r8
 80016e0:	46de      	mov	lr, fp
 80016e2:	b5e0      	push	{r5, r6, r7, lr}
 80016e4:	b083      	sub	sp, #12
 80016e6:	9000      	str	r0, [sp, #0]
 80016e8:	9101      	str	r1, [sp, #4]
 80016ea:	030c      	lsls	r4, r1, #12
 80016ec:	004f      	lsls	r7, r1, #1
 80016ee:	0fce      	lsrs	r6, r1, #31
 80016f0:	0a61      	lsrs	r1, r4, #9
 80016f2:	9c00      	ldr	r4, [sp, #0]
 80016f4:	031d      	lsls	r5, r3, #12
 80016f6:	0f64      	lsrs	r4, r4, #29
 80016f8:	430c      	orrs	r4, r1
 80016fa:	9900      	ldr	r1, [sp, #0]
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	00c8      	lsls	r0, r1, #3
 8001702:	0059      	lsls	r1, r3, #1
 8001704:	0d4b      	lsrs	r3, r1, #21
 8001706:	4699      	mov	r9, r3
 8001708:	9a00      	ldr	r2, [sp, #0]
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	0a6d      	lsrs	r5, r5, #9
 800170e:	0fd9      	lsrs	r1, r3, #31
 8001710:	0f53      	lsrs	r3, r2, #29
 8001712:	432b      	orrs	r3, r5
 8001714:	469a      	mov	sl, r3
 8001716:	9b00      	ldr	r3, [sp, #0]
 8001718:	0d7f      	lsrs	r7, r7, #21
 800171a:	00da      	lsls	r2, r3, #3
 800171c:	4694      	mov	ip, r2
 800171e:	464a      	mov	r2, r9
 8001720:	46b0      	mov	r8, r6
 8001722:	1aba      	subs	r2, r7, r2
 8001724:	428e      	cmp	r6, r1
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x52>
 8001728:	e0b0      	b.n	800188c <__aeabi_dadd+0x1b4>
 800172a:	2a00      	cmp	r2, #0
 800172c:	dc00      	bgt.n	8001730 <__aeabi_dadd+0x58>
 800172e:	e078      	b.n	8001822 <__aeabi_dadd+0x14a>
 8001730:	4649      	mov	r1, r9
 8001732:	2900      	cmp	r1, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x60>
 8001736:	e0e9      	b.n	800190c <__aeabi_dadd+0x234>
 8001738:	49c9      	ldr	r1, [pc, #804]	@ (8001a60 <__aeabi_dadd+0x388>)
 800173a:	428f      	cmp	r7, r1
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x68>
 800173e:	e195      	b.n	8001a6c <__aeabi_dadd+0x394>
 8001740:	2501      	movs	r5, #1
 8001742:	2a38      	cmp	r2, #56	@ 0x38
 8001744:	dc16      	bgt.n	8001774 <__aeabi_dadd+0x9c>
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	4653      	mov	r3, sl
 800174a:	0409      	lsls	r1, r1, #16
 800174c:	430b      	orrs	r3, r1
 800174e:	469a      	mov	sl, r3
 8001750:	2a1f      	cmp	r2, #31
 8001752:	dd00      	ble.n	8001756 <__aeabi_dadd+0x7e>
 8001754:	e1e7      	b.n	8001b26 <__aeabi_dadd+0x44e>
 8001756:	2120      	movs	r1, #32
 8001758:	4655      	mov	r5, sl
 800175a:	1a8b      	subs	r3, r1, r2
 800175c:	4661      	mov	r1, ip
 800175e:	409d      	lsls	r5, r3
 8001760:	40d1      	lsrs	r1, r2
 8001762:	430d      	orrs	r5, r1
 8001764:	4661      	mov	r1, ip
 8001766:	4099      	lsls	r1, r3
 8001768:	1e4b      	subs	r3, r1, #1
 800176a:	4199      	sbcs	r1, r3
 800176c:	4653      	mov	r3, sl
 800176e:	40d3      	lsrs	r3, r2
 8001770:	430d      	orrs	r5, r1
 8001772:	1ae4      	subs	r4, r4, r3
 8001774:	1b45      	subs	r5, r0, r5
 8001776:	42a8      	cmp	r0, r5
 8001778:	4180      	sbcs	r0, r0
 800177a:	4240      	negs	r0, r0
 800177c:	1a24      	subs	r4, r4, r0
 800177e:	0223      	lsls	r3, r4, #8
 8001780:	d400      	bmi.n	8001784 <__aeabi_dadd+0xac>
 8001782:	e10f      	b.n	80019a4 <__aeabi_dadd+0x2cc>
 8001784:	0264      	lsls	r4, r4, #9
 8001786:	0a64      	lsrs	r4, r4, #9
 8001788:	2c00      	cmp	r4, #0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0xb6>
 800178c:	e139      	b.n	8001a02 <__aeabi_dadd+0x32a>
 800178e:	0020      	movs	r0, r4
 8001790:	f001 ff2a 	bl	80035e8 <__clzsi2>
 8001794:	0003      	movs	r3, r0
 8001796:	3b08      	subs	r3, #8
 8001798:	2120      	movs	r1, #32
 800179a:	0028      	movs	r0, r5
 800179c:	1aca      	subs	r2, r1, r3
 800179e:	40d0      	lsrs	r0, r2
 80017a0:	409c      	lsls	r4, r3
 80017a2:	0002      	movs	r2, r0
 80017a4:	409d      	lsls	r5, r3
 80017a6:	4322      	orrs	r2, r4
 80017a8:	429f      	cmp	r7, r3
 80017aa:	dd00      	ble.n	80017ae <__aeabi_dadd+0xd6>
 80017ac:	e173      	b.n	8001a96 <__aeabi_dadd+0x3be>
 80017ae:	1bd8      	subs	r0, r3, r7
 80017b0:	3001      	adds	r0, #1
 80017b2:	1a09      	subs	r1, r1, r0
 80017b4:	002c      	movs	r4, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	40c4      	lsrs	r4, r0
 80017ba:	1e6b      	subs	r3, r5, #1
 80017bc:	419d      	sbcs	r5, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	40c2      	lsrs	r2, r0
 80017c2:	408b      	lsls	r3, r1
 80017c4:	4325      	orrs	r5, r4
 80017c6:	2700      	movs	r7, #0
 80017c8:	0014      	movs	r4, r2
 80017ca:	431d      	orrs	r5, r3
 80017cc:	076b      	lsls	r3, r5, #29
 80017ce:	d009      	beq.n	80017e4 <__aeabi_dadd+0x10c>
 80017d0:	230f      	movs	r3, #15
 80017d2:	402b      	ands	r3, r5
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d005      	beq.n	80017e4 <__aeabi_dadd+0x10c>
 80017d8:	1d2b      	adds	r3, r5, #4
 80017da:	42ab      	cmp	r3, r5
 80017dc:	41ad      	sbcs	r5, r5
 80017de:	426d      	negs	r5, r5
 80017e0:	1964      	adds	r4, r4, r5
 80017e2:	001d      	movs	r5, r3
 80017e4:	0223      	lsls	r3, r4, #8
 80017e6:	d400      	bmi.n	80017ea <__aeabi_dadd+0x112>
 80017e8:	e12d      	b.n	8001a46 <__aeabi_dadd+0x36e>
 80017ea:	4a9d      	ldr	r2, [pc, #628]	@ (8001a60 <__aeabi_dadd+0x388>)
 80017ec:	3701      	adds	r7, #1
 80017ee:	4297      	cmp	r7, r2
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dadd+0x11c>
 80017f2:	e0d3      	b.n	800199c <__aeabi_dadd+0x2c4>
 80017f4:	4646      	mov	r6, r8
 80017f6:	499b      	ldr	r1, [pc, #620]	@ (8001a64 <__aeabi_dadd+0x38c>)
 80017f8:	08ed      	lsrs	r5, r5, #3
 80017fa:	4021      	ands	r1, r4
 80017fc:	074a      	lsls	r2, r1, #29
 80017fe:	432a      	orrs	r2, r5
 8001800:	057c      	lsls	r4, r7, #21
 8001802:	024d      	lsls	r5, r1, #9
 8001804:	0b2d      	lsrs	r5, r5, #12
 8001806:	0d64      	lsrs	r4, r4, #21
 8001808:	0524      	lsls	r4, r4, #20
 800180a:	432c      	orrs	r4, r5
 800180c:	07f6      	lsls	r6, r6, #31
 800180e:	4334      	orrs	r4, r6
 8001810:	0010      	movs	r0, r2
 8001812:	0021      	movs	r1, r4
 8001814:	b003      	add	sp, #12
 8001816:	bcf0      	pop	{r4, r5, r6, r7}
 8001818:	46bb      	mov	fp, r7
 800181a:	46b2      	mov	sl, r6
 800181c:	46a9      	mov	r9, r5
 800181e:	46a0      	mov	r8, r4
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001822:	2a00      	cmp	r2, #0
 8001824:	d100      	bne.n	8001828 <__aeabi_dadd+0x150>
 8001826:	e084      	b.n	8001932 <__aeabi_dadd+0x25a>
 8001828:	464a      	mov	r2, r9
 800182a:	1bd2      	subs	r2, r2, r7
 800182c:	2f00      	cmp	r7, #0
 800182e:	d000      	beq.n	8001832 <__aeabi_dadd+0x15a>
 8001830:	e16d      	b.n	8001b0e <__aeabi_dadd+0x436>
 8001832:	0025      	movs	r5, r4
 8001834:	4305      	orrs	r5, r0
 8001836:	d100      	bne.n	800183a <__aeabi_dadd+0x162>
 8001838:	e127      	b.n	8001a8a <__aeabi_dadd+0x3b2>
 800183a:	1e56      	subs	r6, r2, #1
 800183c:	2a01      	cmp	r2, #1
 800183e:	d100      	bne.n	8001842 <__aeabi_dadd+0x16a>
 8001840:	e23b      	b.n	8001cba <__aeabi_dadd+0x5e2>
 8001842:	4d87      	ldr	r5, [pc, #540]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001844:	42aa      	cmp	r2, r5
 8001846:	d100      	bne.n	800184a <__aeabi_dadd+0x172>
 8001848:	e26a      	b.n	8001d20 <__aeabi_dadd+0x648>
 800184a:	2501      	movs	r5, #1
 800184c:	2e38      	cmp	r6, #56	@ 0x38
 800184e:	dc12      	bgt.n	8001876 <__aeabi_dadd+0x19e>
 8001850:	0032      	movs	r2, r6
 8001852:	2a1f      	cmp	r2, #31
 8001854:	dd00      	ble.n	8001858 <__aeabi_dadd+0x180>
 8001856:	e1f8      	b.n	8001c4a <__aeabi_dadd+0x572>
 8001858:	2620      	movs	r6, #32
 800185a:	0025      	movs	r5, r4
 800185c:	1ab6      	subs	r6, r6, r2
 800185e:	0007      	movs	r7, r0
 8001860:	4653      	mov	r3, sl
 8001862:	40b0      	lsls	r0, r6
 8001864:	40d4      	lsrs	r4, r2
 8001866:	40b5      	lsls	r5, r6
 8001868:	40d7      	lsrs	r7, r2
 800186a:	1e46      	subs	r6, r0, #1
 800186c:	41b0      	sbcs	r0, r6
 800186e:	1b1b      	subs	r3, r3, r4
 8001870:	469a      	mov	sl, r3
 8001872:	433d      	orrs	r5, r7
 8001874:	4305      	orrs	r5, r0
 8001876:	4662      	mov	r2, ip
 8001878:	1b55      	subs	r5, r2, r5
 800187a:	45ac      	cmp	ip, r5
 800187c:	4192      	sbcs	r2, r2
 800187e:	4653      	mov	r3, sl
 8001880:	4252      	negs	r2, r2
 8001882:	000e      	movs	r6, r1
 8001884:	464f      	mov	r7, r9
 8001886:	4688      	mov	r8, r1
 8001888:	1a9c      	subs	r4, r3, r2
 800188a:	e778      	b.n	800177e <__aeabi_dadd+0xa6>
 800188c:	2a00      	cmp	r2, #0
 800188e:	dc00      	bgt.n	8001892 <__aeabi_dadd+0x1ba>
 8001890:	e08e      	b.n	80019b0 <__aeabi_dadd+0x2d8>
 8001892:	4649      	mov	r1, r9
 8001894:	2900      	cmp	r1, #0
 8001896:	d175      	bne.n	8001984 <__aeabi_dadd+0x2ac>
 8001898:	4661      	mov	r1, ip
 800189a:	4653      	mov	r3, sl
 800189c:	4319      	orrs	r1, r3
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x1ca>
 80018a0:	e0f6      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 80018a2:	1e51      	subs	r1, r2, #1
 80018a4:	2a01      	cmp	r2, #1
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x1d2>
 80018a8:	e191      	b.n	8001bce <__aeabi_dadd+0x4f6>
 80018aa:	4d6d      	ldr	r5, [pc, #436]	@ (8001a60 <__aeabi_dadd+0x388>)
 80018ac:	42aa      	cmp	r2, r5
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x1da>
 80018b0:	e0dc      	b.n	8001a6c <__aeabi_dadd+0x394>
 80018b2:	2501      	movs	r5, #1
 80018b4:	2938      	cmp	r1, #56	@ 0x38
 80018b6:	dc14      	bgt.n	80018e2 <__aeabi_dadd+0x20a>
 80018b8:	000a      	movs	r2, r1
 80018ba:	2a1f      	cmp	r2, #31
 80018bc:	dd00      	ble.n	80018c0 <__aeabi_dadd+0x1e8>
 80018be:	e1a2      	b.n	8001c06 <__aeabi_dadd+0x52e>
 80018c0:	2120      	movs	r1, #32
 80018c2:	4653      	mov	r3, sl
 80018c4:	1a89      	subs	r1, r1, r2
 80018c6:	408b      	lsls	r3, r1
 80018c8:	001d      	movs	r5, r3
 80018ca:	4663      	mov	r3, ip
 80018cc:	40d3      	lsrs	r3, r2
 80018ce:	431d      	orrs	r5, r3
 80018d0:	4663      	mov	r3, ip
 80018d2:	408b      	lsls	r3, r1
 80018d4:	0019      	movs	r1, r3
 80018d6:	1e4b      	subs	r3, r1, #1
 80018d8:	4199      	sbcs	r1, r3
 80018da:	4653      	mov	r3, sl
 80018dc:	40d3      	lsrs	r3, r2
 80018de:	430d      	orrs	r5, r1
 80018e0:	18e4      	adds	r4, r4, r3
 80018e2:	182d      	adds	r5, r5, r0
 80018e4:	4285      	cmp	r5, r0
 80018e6:	4180      	sbcs	r0, r0
 80018e8:	4240      	negs	r0, r0
 80018ea:	1824      	adds	r4, r4, r0
 80018ec:	0223      	lsls	r3, r4, #8
 80018ee:	d559      	bpl.n	80019a4 <__aeabi_dadd+0x2cc>
 80018f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a60 <__aeabi_dadd+0x388>)
 80018f2:	3701      	adds	r7, #1
 80018f4:	429f      	cmp	r7, r3
 80018f6:	d051      	beq.n	800199c <__aeabi_dadd+0x2c4>
 80018f8:	2101      	movs	r1, #1
 80018fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001a64 <__aeabi_dadd+0x38c>)
 80018fc:	086a      	lsrs	r2, r5, #1
 80018fe:	401c      	ands	r4, r3
 8001900:	4029      	ands	r1, r5
 8001902:	430a      	orrs	r2, r1
 8001904:	07e5      	lsls	r5, r4, #31
 8001906:	4315      	orrs	r5, r2
 8001908:	0864      	lsrs	r4, r4, #1
 800190a:	e75f      	b.n	80017cc <__aeabi_dadd+0xf4>
 800190c:	4661      	mov	r1, ip
 800190e:	4653      	mov	r3, sl
 8001910:	4319      	orrs	r1, r3
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x23e>
 8001914:	e0bc      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 8001916:	1e51      	subs	r1, r2, #1
 8001918:	2a01      	cmp	r2, #1
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x246>
 800191c:	e164      	b.n	8001be8 <__aeabi_dadd+0x510>
 800191e:	4d50      	ldr	r5, [pc, #320]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001920:	42aa      	cmp	r2, r5
 8001922:	d100      	bne.n	8001926 <__aeabi_dadd+0x24e>
 8001924:	e16a      	b.n	8001bfc <__aeabi_dadd+0x524>
 8001926:	2501      	movs	r5, #1
 8001928:	2938      	cmp	r1, #56	@ 0x38
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x256>
 800192c:	e722      	b.n	8001774 <__aeabi_dadd+0x9c>
 800192e:	000a      	movs	r2, r1
 8001930:	e70e      	b.n	8001750 <__aeabi_dadd+0x78>
 8001932:	4a4d      	ldr	r2, [pc, #308]	@ (8001a68 <__aeabi_dadd+0x390>)
 8001934:	1c7d      	adds	r5, r7, #1
 8001936:	4215      	tst	r5, r2
 8001938:	d000      	beq.n	800193c <__aeabi_dadd+0x264>
 800193a:	e0d0      	b.n	8001ade <__aeabi_dadd+0x406>
 800193c:	0025      	movs	r5, r4
 800193e:	4662      	mov	r2, ip
 8001940:	4653      	mov	r3, sl
 8001942:	4305      	orrs	r5, r0
 8001944:	431a      	orrs	r2, r3
 8001946:	2f00      	cmp	r7, #0
 8001948:	d000      	beq.n	800194c <__aeabi_dadd+0x274>
 800194a:	e137      	b.n	8001bbc <__aeabi_dadd+0x4e4>
 800194c:	2d00      	cmp	r5, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0x27a>
 8001950:	e1a8      	b.n	8001ca4 <__aeabi_dadd+0x5cc>
 8001952:	2a00      	cmp	r2, #0
 8001954:	d100      	bne.n	8001958 <__aeabi_dadd+0x280>
 8001956:	e16a      	b.n	8001c2e <__aeabi_dadd+0x556>
 8001958:	4663      	mov	r3, ip
 800195a:	1ac5      	subs	r5, r0, r3
 800195c:	4653      	mov	r3, sl
 800195e:	1ae2      	subs	r2, r4, r3
 8001960:	42a8      	cmp	r0, r5
 8001962:	419b      	sbcs	r3, r3
 8001964:	425b      	negs	r3, r3
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	021a      	lsls	r2, r3, #8
 800196a:	d400      	bmi.n	800196e <__aeabi_dadd+0x296>
 800196c:	e203      	b.n	8001d76 <__aeabi_dadd+0x69e>
 800196e:	4663      	mov	r3, ip
 8001970:	1a1d      	subs	r5, r3, r0
 8001972:	45ac      	cmp	ip, r5
 8001974:	4192      	sbcs	r2, r2
 8001976:	4653      	mov	r3, sl
 8001978:	4252      	negs	r2, r2
 800197a:	1b1c      	subs	r4, r3, r4
 800197c:	000e      	movs	r6, r1
 800197e:	4688      	mov	r8, r1
 8001980:	1aa4      	subs	r4, r4, r2
 8001982:	e723      	b.n	80017cc <__aeabi_dadd+0xf4>
 8001984:	4936      	ldr	r1, [pc, #216]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001986:	428f      	cmp	r7, r1
 8001988:	d070      	beq.n	8001a6c <__aeabi_dadd+0x394>
 800198a:	2501      	movs	r5, #1
 800198c:	2a38      	cmp	r2, #56	@ 0x38
 800198e:	dca8      	bgt.n	80018e2 <__aeabi_dadd+0x20a>
 8001990:	2180      	movs	r1, #128	@ 0x80
 8001992:	4653      	mov	r3, sl
 8001994:	0409      	lsls	r1, r1, #16
 8001996:	430b      	orrs	r3, r1
 8001998:	469a      	mov	sl, r3
 800199a:	e78e      	b.n	80018ba <__aeabi_dadd+0x1e2>
 800199c:	003c      	movs	r4, r7
 800199e:	2500      	movs	r5, #0
 80019a0:	2200      	movs	r2, #0
 80019a2:	e731      	b.n	8001808 <__aeabi_dadd+0x130>
 80019a4:	2307      	movs	r3, #7
 80019a6:	402b      	ands	r3, r5
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d000      	beq.n	80019ae <__aeabi_dadd+0x2d6>
 80019ac:	e710      	b.n	80017d0 <__aeabi_dadd+0xf8>
 80019ae:	e093      	b.n	8001ad8 <__aeabi_dadd+0x400>
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d074      	beq.n	8001a9e <__aeabi_dadd+0x3c6>
 80019b4:	464a      	mov	r2, r9
 80019b6:	1bd2      	subs	r2, r2, r7
 80019b8:	2f00      	cmp	r7, #0
 80019ba:	d100      	bne.n	80019be <__aeabi_dadd+0x2e6>
 80019bc:	e0c7      	b.n	8001b4e <__aeabi_dadd+0x476>
 80019be:	4928      	ldr	r1, [pc, #160]	@ (8001a60 <__aeabi_dadd+0x388>)
 80019c0:	4589      	cmp	r9, r1
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x2ee>
 80019c4:	e185      	b.n	8001cd2 <__aeabi_dadd+0x5fa>
 80019c6:	2501      	movs	r5, #1
 80019c8:	2a38      	cmp	r2, #56	@ 0x38
 80019ca:	dc12      	bgt.n	80019f2 <__aeabi_dadd+0x31a>
 80019cc:	2180      	movs	r1, #128	@ 0x80
 80019ce:	0409      	lsls	r1, r1, #16
 80019d0:	430c      	orrs	r4, r1
 80019d2:	2a1f      	cmp	r2, #31
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dadd+0x300>
 80019d6:	e1ab      	b.n	8001d30 <__aeabi_dadd+0x658>
 80019d8:	2120      	movs	r1, #32
 80019da:	0025      	movs	r5, r4
 80019dc:	1a89      	subs	r1, r1, r2
 80019de:	0007      	movs	r7, r0
 80019e0:	4088      	lsls	r0, r1
 80019e2:	408d      	lsls	r5, r1
 80019e4:	40d7      	lsrs	r7, r2
 80019e6:	1e41      	subs	r1, r0, #1
 80019e8:	4188      	sbcs	r0, r1
 80019ea:	40d4      	lsrs	r4, r2
 80019ec:	433d      	orrs	r5, r7
 80019ee:	4305      	orrs	r5, r0
 80019f0:	44a2      	add	sl, r4
 80019f2:	4465      	add	r5, ip
 80019f4:	4565      	cmp	r5, ip
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4252      	negs	r2, r2
 80019fa:	4452      	add	r2, sl
 80019fc:	0014      	movs	r4, r2
 80019fe:	464f      	mov	r7, r9
 8001a00:	e774      	b.n	80018ec <__aeabi_dadd+0x214>
 8001a02:	0028      	movs	r0, r5
 8001a04:	f001 fdf0 	bl	80035e8 <__clzsi2>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	2b1f      	cmp	r3, #31
 8001a0e:	dc00      	bgt.n	8001a12 <__aeabi_dadd+0x33a>
 8001a10:	e6c2      	b.n	8001798 <__aeabi_dadd+0xc0>
 8001a12:	002a      	movs	r2, r5
 8001a14:	3808      	subs	r0, #8
 8001a16:	4082      	lsls	r2, r0
 8001a18:	429f      	cmp	r7, r3
 8001a1a:	dd00      	ble.n	8001a1e <__aeabi_dadd+0x346>
 8001a1c:	e0a9      	b.n	8001b72 <__aeabi_dadd+0x49a>
 8001a1e:	1bdb      	subs	r3, r3, r7
 8001a20:	1c58      	adds	r0, r3, #1
 8001a22:	281f      	cmp	r0, #31
 8001a24:	dc00      	bgt.n	8001a28 <__aeabi_dadd+0x350>
 8001a26:	e1ac      	b.n	8001d82 <__aeabi_dadd+0x6aa>
 8001a28:	0015      	movs	r5, r2
 8001a2a:	3b1f      	subs	r3, #31
 8001a2c:	40dd      	lsrs	r5, r3
 8001a2e:	2820      	cmp	r0, #32
 8001a30:	d005      	beq.n	8001a3e <__aeabi_dadd+0x366>
 8001a32:	2340      	movs	r3, #64	@ 0x40
 8001a34:	1a1b      	subs	r3, r3, r0
 8001a36:	409a      	lsls	r2, r3
 8001a38:	1e53      	subs	r3, r2, #1
 8001a3a:	419a      	sbcs	r2, r3
 8001a3c:	4315      	orrs	r5, r2
 8001a3e:	2307      	movs	r3, #7
 8001a40:	2700      	movs	r7, #0
 8001a42:	402b      	ands	r3, r5
 8001a44:	e7b0      	b.n	80019a8 <__aeabi_dadd+0x2d0>
 8001a46:	08ed      	lsrs	r5, r5, #3
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <__aeabi_dadd+0x388>)
 8001a4a:	0762      	lsls	r2, r4, #29
 8001a4c:	432a      	orrs	r2, r5
 8001a4e:	08e4      	lsrs	r4, r4, #3
 8001a50:	429f      	cmp	r7, r3
 8001a52:	d00f      	beq.n	8001a74 <__aeabi_dadd+0x39c>
 8001a54:	0324      	lsls	r4, r4, #12
 8001a56:	0b25      	lsrs	r5, r4, #12
 8001a58:	057c      	lsls	r4, r7, #21
 8001a5a:	0d64      	lsrs	r4, r4, #21
 8001a5c:	e6d4      	b.n	8001808 <__aeabi_dadd+0x130>
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	000007ff 	.word	0x000007ff
 8001a64:	ff7fffff 	.word	0xff7fffff
 8001a68:	000007fe 	.word	0x000007fe
 8001a6c:	08c0      	lsrs	r0, r0, #3
 8001a6e:	0762      	lsls	r2, r4, #29
 8001a70:	4302      	orrs	r2, r0
 8001a72:	08e4      	lsrs	r4, r4, #3
 8001a74:	0013      	movs	r3, r2
 8001a76:	4323      	orrs	r3, r4
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dadd+0x3a4>
 8001a7a:	e186      	b.n	8001d8a <__aeabi_dadd+0x6b2>
 8001a7c:	2580      	movs	r5, #128	@ 0x80
 8001a7e:	032d      	lsls	r5, r5, #12
 8001a80:	4325      	orrs	r5, r4
 8001a82:	032d      	lsls	r5, r5, #12
 8001a84:	4cc3      	ldr	r4, [pc, #780]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001a86:	0b2d      	lsrs	r5, r5, #12
 8001a88:	e6be      	b.n	8001808 <__aeabi_dadd+0x130>
 8001a8a:	4660      	mov	r0, ip
 8001a8c:	4654      	mov	r4, sl
 8001a8e:	000e      	movs	r6, r1
 8001a90:	0017      	movs	r7, r2
 8001a92:	08c5      	lsrs	r5, r0, #3
 8001a94:	e7d8      	b.n	8001a48 <__aeabi_dadd+0x370>
 8001a96:	4cc0      	ldr	r4, [pc, #768]	@ (8001d98 <__aeabi_dadd+0x6c0>)
 8001a98:	1aff      	subs	r7, r7, r3
 8001a9a:	4014      	ands	r4, r2
 8001a9c:	e696      	b.n	80017cc <__aeabi_dadd+0xf4>
 8001a9e:	4abf      	ldr	r2, [pc, #764]	@ (8001d9c <__aeabi_dadd+0x6c4>)
 8001aa0:	1c79      	adds	r1, r7, #1
 8001aa2:	4211      	tst	r1, r2
 8001aa4:	d16b      	bne.n	8001b7e <__aeabi_dadd+0x4a6>
 8001aa6:	0022      	movs	r2, r4
 8001aa8:	4302      	orrs	r2, r0
 8001aaa:	2f00      	cmp	r7, #0
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_dadd+0x3d8>
 8001aae:	e0db      	b.n	8001c68 <__aeabi_dadd+0x590>
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x3de>
 8001ab4:	e12d      	b.n	8001d12 <__aeabi_dadd+0x63a>
 8001ab6:	4662      	mov	r2, ip
 8001ab8:	4653      	mov	r3, sl
 8001aba:	431a      	orrs	r2, r3
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dadd+0x3e8>
 8001abe:	e0b6      	b.n	8001c2e <__aeabi_dadd+0x556>
 8001ac0:	4663      	mov	r3, ip
 8001ac2:	18c5      	adds	r5, r0, r3
 8001ac4:	4285      	cmp	r5, r0
 8001ac6:	4180      	sbcs	r0, r0
 8001ac8:	4454      	add	r4, sl
 8001aca:	4240      	negs	r0, r0
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	0223      	lsls	r3, r4, #8
 8001ad0:	d502      	bpl.n	8001ad8 <__aeabi_dadd+0x400>
 8001ad2:	000f      	movs	r7, r1
 8001ad4:	4bb0      	ldr	r3, [pc, #704]	@ (8001d98 <__aeabi_dadd+0x6c0>)
 8001ad6:	401c      	ands	r4, r3
 8001ad8:	003a      	movs	r2, r7
 8001ada:	0028      	movs	r0, r5
 8001adc:	e7d8      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 8001ade:	4662      	mov	r2, ip
 8001ae0:	1a85      	subs	r5, r0, r2
 8001ae2:	42a8      	cmp	r0, r5
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4653      	mov	r3, sl
 8001ae8:	4252      	negs	r2, r2
 8001aea:	4691      	mov	r9, r2
 8001aec:	1ae3      	subs	r3, r4, r3
 8001aee:	001a      	movs	r2, r3
 8001af0:	464b      	mov	r3, r9
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	4691      	mov	r9, r2
 8001af8:	021a      	lsls	r2, r3, #8
 8001afa:	d454      	bmi.n	8001ba6 <__aeabi_dadd+0x4ce>
 8001afc:	464a      	mov	r2, r9
 8001afe:	464c      	mov	r4, r9
 8001b00:	432a      	orrs	r2, r5
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dadd+0x42e>
 8001b04:	e640      	b.n	8001788 <__aeabi_dadd+0xb0>
 8001b06:	2600      	movs	r6, #0
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	e67c      	b.n	8001808 <__aeabi_dadd+0x130>
 8001b0e:	4da1      	ldr	r5, [pc, #644]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001b10:	45a9      	cmp	r9, r5
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dadd+0x43e>
 8001b14:	e090      	b.n	8001c38 <__aeabi_dadd+0x560>
 8001b16:	2501      	movs	r5, #1
 8001b18:	2a38      	cmp	r2, #56	@ 0x38
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dadd+0x446>
 8001b1c:	e6ab      	b.n	8001876 <__aeabi_dadd+0x19e>
 8001b1e:	2580      	movs	r5, #128	@ 0x80
 8001b20:	042d      	lsls	r5, r5, #16
 8001b22:	432c      	orrs	r4, r5
 8001b24:	e695      	b.n	8001852 <__aeabi_dadd+0x17a>
 8001b26:	0011      	movs	r1, r2
 8001b28:	4655      	mov	r5, sl
 8001b2a:	3920      	subs	r1, #32
 8001b2c:	40cd      	lsrs	r5, r1
 8001b2e:	46a9      	mov	r9, r5
 8001b30:	2a20      	cmp	r2, #32
 8001b32:	d006      	beq.n	8001b42 <__aeabi_dadd+0x46a>
 8001b34:	2140      	movs	r1, #64	@ 0x40
 8001b36:	4653      	mov	r3, sl
 8001b38:	1a8a      	subs	r2, r1, r2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	4662      	mov	r2, ip
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	4694      	mov	ip, r2
 8001b42:	4665      	mov	r5, ip
 8001b44:	1e6b      	subs	r3, r5, #1
 8001b46:	419d      	sbcs	r5, r3
 8001b48:	464b      	mov	r3, r9
 8001b4a:	431d      	orrs	r5, r3
 8001b4c:	e612      	b.n	8001774 <__aeabi_dadd+0x9c>
 8001b4e:	0021      	movs	r1, r4
 8001b50:	4301      	orrs	r1, r0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dadd+0x47e>
 8001b54:	e0c4      	b.n	8001ce0 <__aeabi_dadd+0x608>
 8001b56:	1e51      	subs	r1, r2, #1
 8001b58:	2a01      	cmp	r2, #1
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dadd+0x486>
 8001b5c:	e0fb      	b.n	8001d56 <__aeabi_dadd+0x67e>
 8001b5e:	4d8d      	ldr	r5, [pc, #564]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001b60:	42aa      	cmp	r2, r5
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dadd+0x48e>
 8001b64:	e0b5      	b.n	8001cd2 <__aeabi_dadd+0x5fa>
 8001b66:	2501      	movs	r5, #1
 8001b68:	2938      	cmp	r1, #56	@ 0x38
 8001b6a:	dd00      	ble.n	8001b6e <__aeabi_dadd+0x496>
 8001b6c:	e741      	b.n	80019f2 <__aeabi_dadd+0x31a>
 8001b6e:	000a      	movs	r2, r1
 8001b70:	e72f      	b.n	80019d2 <__aeabi_dadd+0x2fa>
 8001b72:	4c89      	ldr	r4, [pc, #548]	@ (8001d98 <__aeabi_dadd+0x6c0>)
 8001b74:	1aff      	subs	r7, r7, r3
 8001b76:	4014      	ands	r4, r2
 8001b78:	0762      	lsls	r2, r4, #29
 8001b7a:	08e4      	lsrs	r4, r4, #3
 8001b7c:	e76a      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001b7e:	4a85      	ldr	r2, [pc, #532]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001b80:	4291      	cmp	r1, r2
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dadd+0x4ae>
 8001b84:	e0e3      	b.n	8001d4e <__aeabi_dadd+0x676>
 8001b86:	4663      	mov	r3, ip
 8001b88:	18c2      	adds	r2, r0, r3
 8001b8a:	4282      	cmp	r2, r0
 8001b8c:	4180      	sbcs	r0, r0
 8001b8e:	0023      	movs	r3, r4
 8001b90:	4240      	negs	r0, r0
 8001b92:	4453      	add	r3, sl
 8001b94:	181b      	adds	r3, r3, r0
 8001b96:	07dd      	lsls	r5, r3, #31
 8001b98:	085c      	lsrs	r4, r3, #1
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	0852      	lsrs	r2, r2, #1
 8001b9e:	4315      	orrs	r5, r2
 8001ba0:	000f      	movs	r7, r1
 8001ba2:	402b      	ands	r3, r5
 8001ba4:	e700      	b.n	80019a8 <__aeabi_dadd+0x2d0>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	1a1d      	subs	r5, r3, r0
 8001baa:	45ac      	cmp	ip, r5
 8001bac:	4192      	sbcs	r2, r2
 8001bae:	4653      	mov	r3, sl
 8001bb0:	4252      	negs	r2, r2
 8001bb2:	1b1c      	subs	r4, r3, r4
 8001bb4:	000e      	movs	r6, r1
 8001bb6:	4688      	mov	r8, r1
 8001bb8:	1aa4      	subs	r4, r4, r2
 8001bba:	e5e5      	b.n	8001788 <__aeabi_dadd+0xb0>
 8001bbc:	2d00      	cmp	r5, #0
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dadd+0x4ea>
 8001bc0:	e091      	b.n	8001ce6 <__aeabi_dadd+0x60e>
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d138      	bne.n	8001c38 <__aeabi_dadd+0x560>
 8001bc6:	2480      	movs	r4, #128	@ 0x80
 8001bc8:	2600      	movs	r6, #0
 8001bca:	0324      	lsls	r4, r4, #12
 8001bcc:	e756      	b.n	8001a7c <__aeabi_dadd+0x3a4>
 8001bce:	4663      	mov	r3, ip
 8001bd0:	18c5      	adds	r5, r0, r3
 8001bd2:	4285      	cmp	r5, r0
 8001bd4:	4180      	sbcs	r0, r0
 8001bd6:	4454      	add	r4, sl
 8001bd8:	4240      	negs	r0, r0
 8001bda:	1824      	adds	r4, r4, r0
 8001bdc:	2701      	movs	r7, #1
 8001bde:	0223      	lsls	r3, r4, #8
 8001be0:	d400      	bmi.n	8001be4 <__aeabi_dadd+0x50c>
 8001be2:	e6df      	b.n	80019a4 <__aeabi_dadd+0x2cc>
 8001be4:	2702      	movs	r7, #2
 8001be6:	e687      	b.n	80018f8 <__aeabi_dadd+0x220>
 8001be8:	4663      	mov	r3, ip
 8001bea:	1ac5      	subs	r5, r0, r3
 8001bec:	42a8      	cmp	r0, r5
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4653      	mov	r3, sl
 8001bf2:	4240      	negs	r0, r0
 8001bf4:	1ae4      	subs	r4, r4, r3
 8001bf6:	2701      	movs	r7, #1
 8001bf8:	1a24      	subs	r4, r4, r0
 8001bfa:	e5c0      	b.n	800177e <__aeabi_dadd+0xa6>
 8001bfc:	0762      	lsls	r2, r4, #29
 8001bfe:	08c0      	lsrs	r0, r0, #3
 8001c00:	4302      	orrs	r2, r0
 8001c02:	08e4      	lsrs	r4, r4, #3
 8001c04:	e736      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001c06:	0011      	movs	r1, r2
 8001c08:	4653      	mov	r3, sl
 8001c0a:	3920      	subs	r1, #32
 8001c0c:	40cb      	lsrs	r3, r1
 8001c0e:	4699      	mov	r9, r3
 8001c10:	2a20      	cmp	r2, #32
 8001c12:	d006      	beq.n	8001c22 <__aeabi_dadd+0x54a>
 8001c14:	2140      	movs	r1, #64	@ 0x40
 8001c16:	4653      	mov	r3, sl
 8001c18:	1a8a      	subs	r2, r1, r2
 8001c1a:	4093      	lsls	r3, r2
 8001c1c:	4662      	mov	r2, ip
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	4694      	mov	ip, r2
 8001c22:	4665      	mov	r5, ip
 8001c24:	1e6b      	subs	r3, r5, #1
 8001c26:	419d      	sbcs	r5, r3
 8001c28:	464b      	mov	r3, r9
 8001c2a:	431d      	orrs	r5, r3
 8001c2c:	e659      	b.n	80018e2 <__aeabi_dadd+0x20a>
 8001c2e:	0762      	lsls	r2, r4, #29
 8001c30:	08c0      	lsrs	r0, r0, #3
 8001c32:	4302      	orrs	r2, r0
 8001c34:	08e4      	lsrs	r4, r4, #3
 8001c36:	e70d      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001c38:	4653      	mov	r3, sl
 8001c3a:	075a      	lsls	r2, r3, #29
 8001c3c:	4663      	mov	r3, ip
 8001c3e:	08d8      	lsrs	r0, r3, #3
 8001c40:	4653      	mov	r3, sl
 8001c42:	000e      	movs	r6, r1
 8001c44:	4302      	orrs	r2, r0
 8001c46:	08dc      	lsrs	r4, r3, #3
 8001c48:	e714      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001c4a:	0015      	movs	r5, r2
 8001c4c:	0026      	movs	r6, r4
 8001c4e:	3d20      	subs	r5, #32
 8001c50:	40ee      	lsrs	r6, r5
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d003      	beq.n	8001c5e <__aeabi_dadd+0x586>
 8001c56:	2540      	movs	r5, #64	@ 0x40
 8001c58:	1aaa      	subs	r2, r5, r2
 8001c5a:	4094      	lsls	r4, r2
 8001c5c:	4320      	orrs	r0, r4
 8001c5e:	1e42      	subs	r2, r0, #1
 8001c60:	4190      	sbcs	r0, r2
 8001c62:	0005      	movs	r5, r0
 8001c64:	4335      	orrs	r5, r6
 8001c66:	e606      	b.n	8001876 <__aeabi_dadd+0x19e>
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d07c      	beq.n	8001d66 <__aeabi_dadd+0x68e>
 8001c6c:	4662      	mov	r2, ip
 8001c6e:	4653      	mov	r3, sl
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	431a      	orrs	r2, r3
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dadd+0x5a0>
 8001c76:	e6fa      	b.n	8001a6e <__aeabi_dadd+0x396>
 8001c78:	0762      	lsls	r2, r4, #29
 8001c7a:	4310      	orrs	r0, r2
 8001c7c:	2280      	movs	r2, #128	@ 0x80
 8001c7e:	08e4      	lsrs	r4, r4, #3
 8001c80:	0312      	lsls	r2, r2, #12
 8001c82:	4214      	tst	r4, r2
 8001c84:	d008      	beq.n	8001c98 <__aeabi_dadd+0x5c0>
 8001c86:	08d9      	lsrs	r1, r3, #3
 8001c88:	4211      	tst	r1, r2
 8001c8a:	d105      	bne.n	8001c98 <__aeabi_dadd+0x5c0>
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	08d8      	lsrs	r0, r3, #3
 8001c90:	4653      	mov	r3, sl
 8001c92:	000c      	movs	r4, r1
 8001c94:	075b      	lsls	r3, r3, #29
 8001c96:	4318      	orrs	r0, r3
 8001c98:	0f42      	lsrs	r2, r0, #29
 8001c9a:	00c0      	lsls	r0, r0, #3
 8001c9c:	08c0      	lsrs	r0, r0, #3
 8001c9e:	0752      	lsls	r2, r2, #29
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	e6e7      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001ca4:	2a00      	cmp	r2, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dadd+0x5d2>
 8001ca8:	e72d      	b.n	8001b06 <__aeabi_dadd+0x42e>
 8001caa:	4663      	mov	r3, ip
 8001cac:	08d8      	lsrs	r0, r3, #3
 8001cae:	4653      	mov	r3, sl
 8001cb0:	075a      	lsls	r2, r3, #29
 8001cb2:	000e      	movs	r6, r1
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	08dc      	lsrs	r4, r3, #3
 8001cb8:	e6cc      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001cba:	4663      	mov	r3, ip
 8001cbc:	1a1d      	subs	r5, r3, r0
 8001cbe:	45ac      	cmp	ip, r5
 8001cc0:	4192      	sbcs	r2, r2
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	4252      	negs	r2, r2
 8001cc6:	1b1c      	subs	r4, r3, r4
 8001cc8:	000e      	movs	r6, r1
 8001cca:	4688      	mov	r8, r1
 8001ccc:	1aa4      	subs	r4, r4, r2
 8001cce:	3701      	adds	r7, #1
 8001cd0:	e555      	b.n	800177e <__aeabi_dadd+0xa6>
 8001cd2:	4663      	mov	r3, ip
 8001cd4:	08d9      	lsrs	r1, r3, #3
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	075a      	lsls	r2, r3, #29
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	08dc      	lsrs	r4, r3, #3
 8001cde:	e6c9      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001ce0:	4660      	mov	r0, ip
 8001ce2:	4654      	mov	r4, sl
 8001ce4:	e6d4      	b.n	8001a90 <__aeabi_dadd+0x3b8>
 8001ce6:	08c0      	lsrs	r0, r0, #3
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dadd+0x616>
 8001cec:	e6bf      	b.n	8001a6e <__aeabi_dadd+0x396>
 8001cee:	0762      	lsls	r2, r4, #29
 8001cf0:	4310      	orrs	r0, r2
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	08e4      	lsrs	r4, r4, #3
 8001cf6:	0312      	lsls	r2, r2, #12
 8001cf8:	4214      	tst	r4, r2
 8001cfa:	d0cd      	beq.n	8001c98 <__aeabi_dadd+0x5c0>
 8001cfc:	08dd      	lsrs	r5, r3, #3
 8001cfe:	4215      	tst	r5, r2
 8001d00:	d1ca      	bne.n	8001c98 <__aeabi_dadd+0x5c0>
 8001d02:	4663      	mov	r3, ip
 8001d04:	08d8      	lsrs	r0, r3, #3
 8001d06:	4653      	mov	r3, sl
 8001d08:	075b      	lsls	r3, r3, #29
 8001d0a:	000e      	movs	r6, r1
 8001d0c:	002c      	movs	r4, r5
 8001d0e:	4318      	orrs	r0, r3
 8001d10:	e7c2      	b.n	8001c98 <__aeabi_dadd+0x5c0>
 8001d12:	4663      	mov	r3, ip
 8001d14:	08d9      	lsrs	r1, r3, #3
 8001d16:	4653      	mov	r3, sl
 8001d18:	075a      	lsls	r2, r3, #29
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	08dc      	lsrs	r4, r3, #3
 8001d1e:	e699      	b.n	8001a54 <__aeabi_dadd+0x37c>
 8001d20:	4663      	mov	r3, ip
 8001d22:	08d8      	lsrs	r0, r3, #3
 8001d24:	4653      	mov	r3, sl
 8001d26:	075a      	lsls	r2, r3, #29
 8001d28:	000e      	movs	r6, r1
 8001d2a:	4302      	orrs	r2, r0
 8001d2c:	08dc      	lsrs	r4, r3, #3
 8001d2e:	e6a1      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001d30:	0011      	movs	r1, r2
 8001d32:	0027      	movs	r7, r4
 8001d34:	3920      	subs	r1, #32
 8001d36:	40cf      	lsrs	r7, r1
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d003      	beq.n	8001d44 <__aeabi_dadd+0x66c>
 8001d3c:	2140      	movs	r1, #64	@ 0x40
 8001d3e:	1a8a      	subs	r2, r1, r2
 8001d40:	4094      	lsls	r4, r2
 8001d42:	4320      	orrs	r0, r4
 8001d44:	1e42      	subs	r2, r0, #1
 8001d46:	4190      	sbcs	r0, r2
 8001d48:	0005      	movs	r5, r0
 8001d4a:	433d      	orrs	r5, r7
 8001d4c:	e651      	b.n	80019f2 <__aeabi_dadd+0x31a>
 8001d4e:	000c      	movs	r4, r1
 8001d50:	2500      	movs	r5, #0
 8001d52:	2200      	movs	r2, #0
 8001d54:	e558      	b.n	8001808 <__aeabi_dadd+0x130>
 8001d56:	4460      	add	r0, ip
 8001d58:	4560      	cmp	r0, ip
 8001d5a:	4192      	sbcs	r2, r2
 8001d5c:	4454      	add	r4, sl
 8001d5e:	4252      	negs	r2, r2
 8001d60:	0005      	movs	r5, r0
 8001d62:	18a4      	adds	r4, r4, r2
 8001d64:	e73a      	b.n	8001bdc <__aeabi_dadd+0x504>
 8001d66:	4653      	mov	r3, sl
 8001d68:	075a      	lsls	r2, r3, #29
 8001d6a:	4663      	mov	r3, ip
 8001d6c:	08d9      	lsrs	r1, r3, #3
 8001d6e:	4653      	mov	r3, sl
 8001d70:	430a      	orrs	r2, r1
 8001d72:	08dc      	lsrs	r4, r3, #3
 8001d74:	e67e      	b.n	8001a74 <__aeabi_dadd+0x39c>
 8001d76:	001a      	movs	r2, r3
 8001d78:	001c      	movs	r4, r3
 8001d7a:	432a      	orrs	r2, r5
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_dadd+0x6a8>
 8001d7e:	e6ab      	b.n	8001ad8 <__aeabi_dadd+0x400>
 8001d80:	e6c1      	b.n	8001b06 <__aeabi_dadd+0x42e>
 8001d82:	2120      	movs	r1, #32
 8001d84:	2500      	movs	r5, #0
 8001d86:	1a09      	subs	r1, r1, r0
 8001d88:	e519      	b.n	80017be <__aeabi_dadd+0xe6>
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2500      	movs	r5, #0
 8001d8e:	4c01      	ldr	r4, [pc, #4]	@ (8001d94 <__aeabi_dadd+0x6bc>)
 8001d90:	e53a      	b.n	8001808 <__aeabi_dadd+0x130>
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	000007ff 	.word	0x000007ff
 8001d98:	ff7fffff 	.word	0xff7fffff
 8001d9c:	000007fe 	.word	0x000007fe

08001da0 <__aeabi_ddiv>:
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	46de      	mov	lr, fp
 8001da4:	4645      	mov	r5, r8
 8001da6:	4657      	mov	r7, sl
 8001da8:	464e      	mov	r6, r9
 8001daa:	b5e0      	push	{r5, r6, r7, lr}
 8001dac:	b087      	sub	sp, #28
 8001dae:	9200      	str	r2, [sp, #0]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	030b      	lsls	r3, r1, #12
 8001db4:	0b1b      	lsrs	r3, r3, #12
 8001db6:	469b      	mov	fp, r3
 8001db8:	0fca      	lsrs	r2, r1, #31
 8001dba:	004b      	lsls	r3, r1, #1
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	4680      	mov	r8, r0
 8001dc0:	0d5b      	lsrs	r3, r3, #21
 8001dc2:	9202      	str	r2, [sp, #8]
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x28>
 8001dc6:	e16a      	b.n	800209e <__aeabi_ddiv+0x2fe>
 8001dc8:	4ad4      	ldr	r2, [pc, #848]	@ (800211c <__aeabi_ddiv+0x37c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_ddiv+0x30>
 8001dce:	e18c      	b.n	80020ea <__aeabi_ddiv+0x34a>
 8001dd0:	4659      	mov	r1, fp
 8001dd2:	0f42      	lsrs	r2, r0, #29
 8001dd4:	00c9      	lsls	r1, r1, #3
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	0409      	lsls	r1, r1, #16
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	00c2      	lsls	r2, r0, #3
 8001de0:	4690      	mov	r8, r2
 8001de2:	4acf      	ldr	r2, [pc, #828]	@ (8002120 <__aeabi_ddiv+0x380>)
 8001de4:	4689      	mov	r9, r1
 8001de6:	4692      	mov	sl, r2
 8001de8:	449a      	add	sl, r3
 8001dea:	2300      	movs	r3, #0
 8001dec:	2400      	movs	r4, #0
 8001dee:	9303      	str	r3, [sp, #12]
 8001df0:	9e00      	ldr	r6, [sp, #0]
 8001df2:	9f01      	ldr	r7, [sp, #4]
 8001df4:	033b      	lsls	r3, r7, #12
 8001df6:	0b1b      	lsrs	r3, r3, #12
 8001df8:	469b      	mov	fp, r3
 8001dfa:	007b      	lsls	r3, r7, #1
 8001dfc:	0030      	movs	r0, r6
 8001dfe:	0d5b      	lsrs	r3, r3, #21
 8001e00:	0ffd      	lsrs	r5, r7, #31
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d100      	bne.n	8001e08 <__aeabi_ddiv+0x68>
 8001e06:	e128      	b.n	800205a <__aeabi_ddiv+0x2ba>
 8001e08:	4ac4      	ldr	r2, [pc, #784]	@ (800211c <__aeabi_ddiv+0x37c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_ddiv+0x70>
 8001e0e:	e177      	b.n	8002100 <__aeabi_ddiv+0x360>
 8001e10:	4659      	mov	r1, fp
 8001e12:	0f72      	lsrs	r2, r6, #29
 8001e14:	00c9      	lsls	r1, r1, #3
 8001e16:	430a      	orrs	r2, r1
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	0409      	lsls	r1, r1, #16
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	468b      	mov	fp, r1
 8001e20:	49bf      	ldr	r1, [pc, #764]	@ (8002120 <__aeabi_ddiv+0x380>)
 8001e22:	00f2      	lsls	r2, r6, #3
 8001e24:	468c      	mov	ip, r1
 8001e26:	4651      	mov	r1, sl
 8001e28:	4463      	add	r3, ip
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	469a      	mov	sl, r3
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9e02      	ldr	r6, [sp, #8]
 8001e32:	406e      	eors	r6, r5
 8001e34:	2c0f      	cmp	r4, #15
 8001e36:	d827      	bhi.n	8001e88 <__aeabi_ddiv+0xe8>
 8001e38:	49ba      	ldr	r1, [pc, #744]	@ (8002124 <__aeabi_ddiv+0x384>)
 8001e3a:	00a4      	lsls	r4, r4, #2
 8001e3c:	5909      	ldr	r1, [r1, r4]
 8001e3e:	468f      	mov	pc, r1
 8001e40:	46cb      	mov	fp, r9
 8001e42:	4642      	mov	r2, r8
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	9b03      	ldr	r3, [sp, #12]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d016      	beq.n	8001e7a <__aeabi_ddiv+0xda>
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_ddiv+0xb2>
 8001e50:	e2a6      	b.n	80023a0 <__aeabi_ddiv+0x600>
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d000      	beq.n	8001e58 <__aeabi_ddiv+0xb8>
 8001e56:	e0df      	b.n	8002018 <__aeabi_ddiv+0x278>
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	4690      	mov	r8, r2
 8001e60:	051b      	lsls	r3, r3, #20
 8001e62:	4323      	orrs	r3, r4
 8001e64:	07f6      	lsls	r6, r6, #31
 8001e66:	4333      	orrs	r3, r6
 8001e68:	4640      	mov	r0, r8
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	b007      	add	sp, #28
 8001e6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e70:	46bb      	mov	fp, r7
 8001e72:	46b2      	mov	sl, r6
 8001e74:	46a9      	mov	r9, r5
 8001e76:	46a0      	mov	r8, r4
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	4690      	mov	r8, r2
 8001e80:	4ba6      	ldr	r3, [pc, #664]	@ (800211c <__aeabi_ddiv+0x37c>)
 8001e82:	e7ed      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 8001e84:	002e      	movs	r6, r5
 8001e86:	e7df      	b.n	8001e48 <__aeabi_ddiv+0xa8>
 8001e88:	45cb      	cmp	fp, r9
 8001e8a:	d200      	bcs.n	8001e8e <__aeabi_ddiv+0xee>
 8001e8c:	e1d4      	b.n	8002238 <__aeabi_ddiv+0x498>
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_ddiv+0xf2>
 8001e90:	e1cf      	b.n	8002232 <__aeabi_ddiv+0x492>
 8001e92:	2301      	movs	r3, #1
 8001e94:	425b      	negs	r3, r3
 8001e96:	469c      	mov	ip, r3
 8001e98:	4644      	mov	r4, r8
 8001e9a:	4648      	mov	r0, r9
 8001e9c:	2700      	movs	r7, #0
 8001e9e:	44e2      	add	sl, ip
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	0e15      	lsrs	r5, r2, #24
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	431d      	orrs	r5, r3
 8001ea8:	0c19      	lsrs	r1, r3, #16
 8001eaa:	042b      	lsls	r3, r5, #16
 8001eac:	0212      	lsls	r2, r2, #8
 8001eae:	9500      	str	r5, [sp, #0]
 8001eb0:	0c1d      	lsrs	r5, r3, #16
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	9102      	str	r1, [sp, #8]
 8001eb6:	9503      	str	r5, [sp, #12]
 8001eb8:	f7fe f9f0 	bl	800029c <__aeabi_uidivmod>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	436a      	muls	r2, r5
 8001ec0:	040b      	lsls	r3, r1, #16
 8001ec2:	0c21      	lsrs	r1, r4, #16
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	4319      	orrs	r1, r3
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	d909      	bls.n	8001ee0 <__aeabi_ddiv+0x140>
 8001ecc:	9d00      	ldr	r5, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	46ac      	mov	ip, r5
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	4461      	add	r1, ip
 8001ed6:	469c      	mov	ip, r3
 8001ed8:	44e0      	add	r8, ip
 8001eda:	428d      	cmp	r5, r1
 8001edc:	d800      	bhi.n	8001ee0 <__aeabi_ddiv+0x140>
 8001ede:	e1fb      	b.n	80022d8 <__aeabi_ddiv+0x538>
 8001ee0:	1a88      	subs	r0, r1, r2
 8001ee2:	9902      	ldr	r1, [sp, #8]
 8001ee4:	f7fe f9da 	bl	800029c <__aeabi_uidivmod>
 8001ee8:	9a03      	ldr	r2, [sp, #12]
 8001eea:	0424      	lsls	r4, r4, #16
 8001eec:	4342      	muls	r2, r0
 8001eee:	0409      	lsls	r1, r1, #16
 8001ef0:	0c24      	lsrs	r4, r4, #16
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	430c      	orrs	r4, r1
 8001ef6:	42a2      	cmp	r2, r4
 8001ef8:	d906      	bls.n	8001f08 <__aeabi_ddiv+0x168>
 8001efa:	9900      	ldr	r1, [sp, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	468c      	mov	ip, r1
 8001f00:	4464      	add	r4, ip
 8001f02:	42a1      	cmp	r1, r4
 8001f04:	d800      	bhi.n	8001f08 <__aeabi_ddiv+0x168>
 8001f06:	e1e1      	b.n	80022cc <__aeabi_ddiv+0x52c>
 8001f08:	1aa0      	subs	r0, r4, r2
 8001f0a:	4642      	mov	r2, r8
 8001f0c:	0412      	lsls	r2, r2, #16
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	4693      	mov	fp, r2
 8001f12:	464b      	mov	r3, r9
 8001f14:	4659      	mov	r1, fp
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	001d      	movs	r5, r3
 8001f1a:	9304      	str	r3, [sp, #16]
 8001f1c:	040b      	lsls	r3, r1, #16
 8001f1e:	4649      	mov	r1, r9
 8001f20:	0409      	lsls	r1, r1, #16
 8001f22:	0c09      	lsrs	r1, r1, #16
 8001f24:	000c      	movs	r4, r1
 8001f26:	0c1b      	lsrs	r3, r3, #16
 8001f28:	435c      	muls	r4, r3
 8001f2a:	0c12      	lsrs	r2, r2, #16
 8001f2c:	436b      	muls	r3, r5
 8001f2e:	4688      	mov	r8, r1
 8001f30:	4351      	muls	r1, r2
 8001f32:	436a      	muls	r2, r5
 8001f34:	0c25      	lsrs	r5, r4, #16
 8001f36:	46ac      	mov	ip, r5
 8001f38:	185b      	adds	r3, r3, r1
 8001f3a:	4463      	add	r3, ip
 8001f3c:	4299      	cmp	r1, r3
 8001f3e:	d903      	bls.n	8001f48 <__aeabi_ddiv+0x1a8>
 8001f40:	2180      	movs	r1, #128	@ 0x80
 8001f42:	0249      	lsls	r1, r1, #9
 8001f44:	468c      	mov	ip, r1
 8001f46:	4462      	add	r2, ip
 8001f48:	0c19      	lsrs	r1, r3, #16
 8001f4a:	0424      	lsls	r4, r4, #16
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	0c24      	lsrs	r4, r4, #16
 8001f50:	188a      	adds	r2, r1, r2
 8001f52:	191c      	adds	r4, r3, r4
 8001f54:	4290      	cmp	r0, r2
 8001f56:	d302      	bcc.n	8001f5e <__aeabi_ddiv+0x1be>
 8001f58:	d116      	bne.n	8001f88 <__aeabi_ddiv+0x1e8>
 8001f5a:	42a7      	cmp	r7, r4
 8001f5c:	d214      	bcs.n	8001f88 <__aeabi_ddiv+0x1e8>
 8001f5e:	465b      	mov	r3, fp
 8001f60:	9d00      	ldr	r5, [sp, #0]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	444f      	add	r7, r9
 8001f66:	9305      	str	r3, [sp, #20]
 8001f68:	454f      	cmp	r7, r9
 8001f6a:	419b      	sbcs	r3, r3
 8001f6c:	46ac      	mov	ip, r5
 8001f6e:	425b      	negs	r3, r3
 8001f70:	4463      	add	r3, ip
 8001f72:	18c0      	adds	r0, r0, r3
 8001f74:	4285      	cmp	r5, r0
 8001f76:	d300      	bcc.n	8001f7a <__aeabi_ddiv+0x1da>
 8001f78:	e1a1      	b.n	80022be <__aeabi_ddiv+0x51e>
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	d900      	bls.n	8001f80 <__aeabi_ddiv+0x1e0>
 8001f7e:	e1f6      	b.n	800236e <__aeabi_ddiv+0x5ce>
 8001f80:	d100      	bne.n	8001f84 <__aeabi_ddiv+0x1e4>
 8001f82:	e1f1      	b.n	8002368 <__aeabi_ddiv+0x5c8>
 8001f84:	9b05      	ldr	r3, [sp, #20]
 8001f86:	469b      	mov	fp, r3
 8001f88:	1b3c      	subs	r4, r7, r4
 8001f8a:	42a7      	cmp	r7, r4
 8001f8c:	41bf      	sbcs	r7, r7
 8001f8e:	9d00      	ldr	r5, [sp, #0]
 8001f90:	1a80      	subs	r0, r0, r2
 8001f92:	427f      	negs	r7, r7
 8001f94:	1bc0      	subs	r0, r0, r7
 8001f96:	4285      	cmp	r5, r0
 8001f98:	d100      	bne.n	8001f9c <__aeabi_ddiv+0x1fc>
 8001f9a:	e1d0      	b.n	800233e <__aeabi_ddiv+0x59e>
 8001f9c:	9902      	ldr	r1, [sp, #8]
 8001f9e:	f7fe f97d 	bl	800029c <__aeabi_uidivmod>
 8001fa2:	9a03      	ldr	r2, [sp, #12]
 8001fa4:	040b      	lsls	r3, r1, #16
 8001fa6:	4342      	muls	r2, r0
 8001fa8:	0c21      	lsrs	r1, r4, #16
 8001faa:	0007      	movs	r7, r0
 8001fac:	4319      	orrs	r1, r3
 8001fae:	428a      	cmp	r2, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x214>
 8001fb2:	e178      	b.n	80022a6 <__aeabi_ddiv+0x506>
 8001fb4:	1a88      	subs	r0, r1, r2
 8001fb6:	9902      	ldr	r1, [sp, #8]
 8001fb8:	f7fe f970 	bl	800029c <__aeabi_uidivmod>
 8001fbc:	9a03      	ldr	r2, [sp, #12]
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4342      	muls	r2, r0
 8001fc2:	0409      	lsls	r1, r1, #16
 8001fc4:	0c24      	lsrs	r4, r4, #16
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	430c      	orrs	r4, r1
 8001fca:	42a2      	cmp	r2, r4
 8001fcc:	d900      	bls.n	8001fd0 <__aeabi_ddiv+0x230>
 8001fce:	e15d      	b.n	800228c <__aeabi_ddiv+0x4ec>
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	1aa4      	subs	r4, r4, r2
 8001fd4:	043a      	lsls	r2, r7, #16
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	9d04      	ldr	r5, [sp, #16]
 8001fda:	0413      	lsls	r3, r2, #16
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	4359      	muls	r1, r3
 8001fe0:	4647      	mov	r7, r8
 8001fe2:	436b      	muls	r3, r5
 8001fe4:	469c      	mov	ip, r3
 8001fe6:	0c10      	lsrs	r0, r2, #16
 8001fe8:	4347      	muls	r7, r0
 8001fea:	0c0b      	lsrs	r3, r1, #16
 8001fec:	44bc      	add	ip, r7
 8001fee:	4463      	add	r3, ip
 8001ff0:	4368      	muls	r0, r5
 8001ff2:	429f      	cmp	r7, r3
 8001ff4:	d903      	bls.n	8001ffe <__aeabi_ddiv+0x25e>
 8001ff6:	2580      	movs	r5, #128	@ 0x80
 8001ff8:	026d      	lsls	r5, r5, #9
 8001ffa:	46ac      	mov	ip, r5
 8001ffc:	4460      	add	r0, ip
 8001ffe:	0c1f      	lsrs	r7, r3, #16
 8002000:	0409      	lsls	r1, r1, #16
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	0c09      	lsrs	r1, r1, #16
 8002006:	183f      	adds	r7, r7, r0
 8002008:	185b      	adds	r3, r3, r1
 800200a:	42bc      	cmp	r4, r7
 800200c:	d200      	bcs.n	8002010 <__aeabi_ddiv+0x270>
 800200e:	e102      	b.n	8002216 <__aeabi_ddiv+0x476>
 8002010:	d100      	bne.n	8002014 <__aeabi_ddiv+0x274>
 8002012:	e0fd      	b.n	8002210 <__aeabi_ddiv+0x470>
 8002014:	2301      	movs	r3, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <__aeabi_ddiv+0x388>)
 800201a:	4453      	add	r3, sl
 800201c:	2b00      	cmp	r3, #0
 800201e:	dc00      	bgt.n	8002022 <__aeabi_ddiv+0x282>
 8002020:	e0ae      	b.n	8002180 <__aeabi_ddiv+0x3e0>
 8002022:	0751      	lsls	r1, r2, #29
 8002024:	d000      	beq.n	8002028 <__aeabi_ddiv+0x288>
 8002026:	e198      	b.n	800235a <__aeabi_ddiv+0x5ba>
 8002028:	4659      	mov	r1, fp
 800202a:	01c9      	lsls	r1, r1, #7
 800202c:	d506      	bpl.n	800203c <__aeabi_ddiv+0x29c>
 800202e:	4659      	mov	r1, fp
 8002030:	4b3e      	ldr	r3, [pc, #248]	@ (800212c <__aeabi_ddiv+0x38c>)
 8002032:	4019      	ands	r1, r3
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	468b      	mov	fp, r1
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4453      	add	r3, sl
 800203c:	493c      	ldr	r1, [pc, #240]	@ (8002130 <__aeabi_ddiv+0x390>)
 800203e:	428b      	cmp	r3, r1
 8002040:	dd00      	ble.n	8002044 <__aeabi_ddiv+0x2a4>
 8002042:	e71a      	b.n	8001e7a <__aeabi_ddiv+0xda>
 8002044:	4659      	mov	r1, fp
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	0749      	lsls	r1, r1, #29
 800204a:	4311      	orrs	r1, r2
 800204c:	465a      	mov	r2, fp
 800204e:	055b      	lsls	r3, r3, #21
 8002050:	0254      	lsls	r4, r2, #9
 8002052:	4688      	mov	r8, r1
 8002054:	0b24      	lsrs	r4, r4, #12
 8002056:	0d5b      	lsrs	r3, r3, #21
 8002058:	e702      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 800205a:	465a      	mov	r2, fp
 800205c:	9b00      	ldr	r3, [sp, #0]
 800205e:	431a      	orrs	r2, r3
 8002060:	d100      	bne.n	8002064 <__aeabi_ddiv+0x2c4>
 8002062:	e07e      	b.n	8002162 <__aeabi_ddiv+0x3c2>
 8002064:	465b      	mov	r3, fp
 8002066:	2b00      	cmp	r3, #0
 8002068:	d100      	bne.n	800206c <__aeabi_ddiv+0x2cc>
 800206a:	e100      	b.n	800226e <__aeabi_ddiv+0x4ce>
 800206c:	4658      	mov	r0, fp
 800206e:	f001 fabb 	bl	80035e8 <__clzsi2>
 8002072:	0002      	movs	r2, r0
 8002074:	0003      	movs	r3, r0
 8002076:	3a0b      	subs	r2, #11
 8002078:	271d      	movs	r7, #29
 800207a:	9e00      	ldr	r6, [sp, #0]
 800207c:	1aba      	subs	r2, r7, r2
 800207e:	0019      	movs	r1, r3
 8002080:	4658      	mov	r0, fp
 8002082:	40d6      	lsrs	r6, r2
 8002084:	3908      	subs	r1, #8
 8002086:	4088      	lsls	r0, r1
 8002088:	0032      	movs	r2, r6
 800208a:	4302      	orrs	r2, r0
 800208c:	4693      	mov	fp, r2
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	408a      	lsls	r2, r1
 8002092:	4928      	ldr	r1, [pc, #160]	@ (8002134 <__aeabi_ddiv+0x394>)
 8002094:	4453      	add	r3, sl
 8002096:	468a      	mov	sl, r1
 8002098:	449a      	add	sl, r3
 800209a:	2300      	movs	r3, #0
 800209c:	e6c8      	b.n	8001e30 <__aeabi_ddiv+0x90>
 800209e:	465b      	mov	r3, fp
 80020a0:	4303      	orrs	r3, r0
 80020a2:	4699      	mov	r9, r3
 80020a4:	d056      	beq.n	8002154 <__aeabi_ddiv+0x3b4>
 80020a6:	465b      	mov	r3, fp
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d100      	bne.n	80020ae <__aeabi_ddiv+0x30e>
 80020ac:	e0cd      	b.n	800224a <__aeabi_ddiv+0x4aa>
 80020ae:	4658      	mov	r0, fp
 80020b0:	f001 fa9a 	bl	80035e8 <__clzsi2>
 80020b4:	230b      	movs	r3, #11
 80020b6:	425b      	negs	r3, r3
 80020b8:	469c      	mov	ip, r3
 80020ba:	0002      	movs	r2, r0
 80020bc:	4484      	add	ip, r0
 80020be:	4666      	mov	r6, ip
 80020c0:	231d      	movs	r3, #29
 80020c2:	1b9b      	subs	r3, r3, r6
 80020c4:	0026      	movs	r6, r4
 80020c6:	0011      	movs	r1, r2
 80020c8:	4658      	mov	r0, fp
 80020ca:	40de      	lsrs	r6, r3
 80020cc:	3908      	subs	r1, #8
 80020ce:	4088      	lsls	r0, r1
 80020d0:	0033      	movs	r3, r6
 80020d2:	4303      	orrs	r3, r0
 80020d4:	4699      	mov	r9, r3
 80020d6:	0023      	movs	r3, r4
 80020d8:	408b      	lsls	r3, r1
 80020da:	4698      	mov	r8, r3
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <__aeabi_ddiv+0x398>)
 80020de:	2400      	movs	r4, #0
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	469a      	mov	sl, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	9303      	str	r3, [sp, #12]
 80020e8:	e682      	b.n	8001df0 <__aeabi_ddiv+0x50>
 80020ea:	465a      	mov	r2, fp
 80020ec:	4302      	orrs	r2, r0
 80020ee:	4691      	mov	r9, r2
 80020f0:	d12a      	bne.n	8002148 <__aeabi_ddiv+0x3a8>
 80020f2:	2200      	movs	r2, #0
 80020f4:	469a      	mov	sl, r3
 80020f6:	2302      	movs	r3, #2
 80020f8:	4690      	mov	r8, r2
 80020fa:	2408      	movs	r4, #8
 80020fc:	9303      	str	r3, [sp, #12]
 80020fe:	e677      	b.n	8001df0 <__aeabi_ddiv+0x50>
 8002100:	465a      	mov	r2, fp
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	431a      	orrs	r2, r3
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <__aeabi_ddiv+0x39c>)
 8002108:	469c      	mov	ip, r3
 800210a:	44e2      	add	sl, ip
 800210c:	2a00      	cmp	r2, #0
 800210e:	d117      	bne.n	8002140 <__aeabi_ddiv+0x3a0>
 8002110:	2302      	movs	r3, #2
 8002112:	431c      	orrs	r4, r3
 8002114:	2300      	movs	r3, #0
 8002116:	469b      	mov	fp, r3
 8002118:	3302      	adds	r3, #2
 800211a:	e689      	b.n	8001e30 <__aeabi_ddiv+0x90>
 800211c:	000007ff 	.word	0x000007ff
 8002120:	fffffc01 	.word	0xfffffc01
 8002124:	0801eed4 	.word	0x0801eed4
 8002128:	000003ff 	.word	0x000003ff
 800212c:	feffffff 	.word	0xfeffffff
 8002130:	000007fe 	.word	0x000007fe
 8002134:	000003f3 	.word	0x000003f3
 8002138:	fffffc0d 	.word	0xfffffc0d
 800213c:	fffff801 	.word	0xfffff801
 8002140:	2303      	movs	r3, #3
 8002142:	0032      	movs	r2, r6
 8002144:	431c      	orrs	r4, r3
 8002146:	e673      	b.n	8001e30 <__aeabi_ddiv+0x90>
 8002148:	469a      	mov	sl, r3
 800214a:	2303      	movs	r3, #3
 800214c:	46d9      	mov	r9, fp
 800214e:	240c      	movs	r4, #12
 8002150:	9303      	str	r3, [sp, #12]
 8002152:	e64d      	b.n	8001df0 <__aeabi_ddiv+0x50>
 8002154:	2300      	movs	r3, #0
 8002156:	4698      	mov	r8, r3
 8002158:	469a      	mov	sl, r3
 800215a:	3301      	adds	r3, #1
 800215c:	2404      	movs	r4, #4
 800215e:	9303      	str	r3, [sp, #12]
 8002160:	e646      	b.n	8001df0 <__aeabi_ddiv+0x50>
 8002162:	2301      	movs	r3, #1
 8002164:	431c      	orrs	r4, r3
 8002166:	2300      	movs	r3, #0
 8002168:	469b      	mov	fp, r3
 800216a:	3301      	adds	r3, #1
 800216c:	e660      	b.n	8001e30 <__aeabi_ddiv+0x90>
 800216e:	2300      	movs	r3, #0
 8002170:	2480      	movs	r4, #128	@ 0x80
 8002172:	4698      	mov	r8, r3
 8002174:	2600      	movs	r6, #0
 8002176:	4b92      	ldr	r3, [pc, #584]	@ (80023c0 <__aeabi_ddiv+0x620>)
 8002178:	0324      	lsls	r4, r4, #12
 800217a:	e671      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 800217c:	2201      	movs	r2, #1
 800217e:	4252      	negs	r2, r2
 8002180:	2101      	movs	r1, #1
 8002182:	1ac9      	subs	r1, r1, r3
 8002184:	2938      	cmp	r1, #56	@ 0x38
 8002186:	dd00      	ble.n	800218a <__aeabi_ddiv+0x3ea>
 8002188:	e666      	b.n	8001e58 <__aeabi_ddiv+0xb8>
 800218a:	291f      	cmp	r1, #31
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x3f0>
 800218e:	e0ab      	b.n	80022e8 <__aeabi_ddiv+0x548>
 8002190:	201f      	movs	r0, #31
 8002192:	4240      	negs	r0, r0
 8002194:	1ac3      	subs	r3, r0, r3
 8002196:	4658      	mov	r0, fp
 8002198:	40d8      	lsrs	r0, r3
 800219a:	0003      	movs	r3, r0
 800219c:	2920      	cmp	r1, #32
 800219e:	d004      	beq.n	80021aa <__aeabi_ddiv+0x40a>
 80021a0:	4658      	mov	r0, fp
 80021a2:	4988      	ldr	r1, [pc, #544]	@ (80023c4 <__aeabi_ddiv+0x624>)
 80021a4:	4451      	add	r1, sl
 80021a6:	4088      	lsls	r0, r1
 80021a8:	4302      	orrs	r2, r0
 80021aa:	1e51      	subs	r1, r2, #1
 80021ac:	418a      	sbcs	r2, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	2307      	movs	r3, #7
 80021b2:	0019      	movs	r1, r3
 80021b4:	2400      	movs	r4, #0
 80021b6:	4011      	ands	r1, r2
 80021b8:	4213      	tst	r3, r2
 80021ba:	d00c      	beq.n	80021d6 <__aeabi_ddiv+0x436>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d100      	bne.n	80021c6 <__aeabi_ddiv+0x426>
 80021c4:	e0f9      	b.n	80023ba <__aeabi_ddiv+0x61a>
 80021c6:	1d11      	adds	r1, r2, #4
 80021c8:	4291      	cmp	r1, r2
 80021ca:	419b      	sbcs	r3, r3
 80021cc:	000a      	movs	r2, r1
 80021ce:	425b      	negs	r3, r3
 80021d0:	0759      	lsls	r1, r3, #29
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	0b1c      	lsrs	r4, r3, #12
 80021d6:	08d2      	lsrs	r2, r2, #3
 80021d8:	430a      	orrs	r2, r1
 80021da:	4690      	mov	r8, r2
 80021dc:	2300      	movs	r3, #0
 80021de:	e63f      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 80021e0:	2480      	movs	r4, #128	@ 0x80
 80021e2:	464b      	mov	r3, r9
 80021e4:	0324      	lsls	r4, r4, #12
 80021e6:	4223      	tst	r3, r4
 80021e8:	d009      	beq.n	80021fe <__aeabi_ddiv+0x45e>
 80021ea:	465b      	mov	r3, fp
 80021ec:	4223      	tst	r3, r4
 80021ee:	d106      	bne.n	80021fe <__aeabi_ddiv+0x45e>
 80021f0:	431c      	orrs	r4, r3
 80021f2:	0324      	lsls	r4, r4, #12
 80021f4:	002e      	movs	r6, r5
 80021f6:	4690      	mov	r8, r2
 80021f8:	4b71      	ldr	r3, [pc, #452]	@ (80023c0 <__aeabi_ddiv+0x620>)
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	e630      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 80021fe:	2480      	movs	r4, #128	@ 0x80
 8002200:	464b      	mov	r3, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	9e02      	ldr	r6, [sp, #8]
 800220a:	4b6d      	ldr	r3, [pc, #436]	@ (80023c0 <__aeabi_ddiv+0x620>)
 800220c:	0b24      	lsrs	r4, r4, #12
 800220e:	e627      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_ddiv+0x476>
 8002214:	e700      	b.n	8002018 <__aeabi_ddiv+0x278>
 8002216:	9800      	ldr	r0, [sp, #0]
 8002218:	1e51      	subs	r1, r2, #1
 800221a:	4684      	mov	ip, r0
 800221c:	4464      	add	r4, ip
 800221e:	4284      	cmp	r4, r0
 8002220:	d200      	bcs.n	8002224 <__aeabi_ddiv+0x484>
 8002222:	e084      	b.n	800232e <__aeabi_ddiv+0x58e>
 8002224:	42bc      	cmp	r4, r7
 8002226:	d200      	bcs.n	800222a <__aeabi_ddiv+0x48a>
 8002228:	e0ae      	b.n	8002388 <__aeabi_ddiv+0x5e8>
 800222a:	d100      	bne.n	800222e <__aeabi_ddiv+0x48e>
 800222c:	e0c1      	b.n	80023b2 <__aeabi_ddiv+0x612>
 800222e:	000a      	movs	r2, r1
 8002230:	e6f0      	b.n	8002014 <__aeabi_ddiv+0x274>
 8002232:	4542      	cmp	r2, r8
 8002234:	d900      	bls.n	8002238 <__aeabi_ddiv+0x498>
 8002236:	e62c      	b.n	8001e92 <__aeabi_ddiv+0xf2>
 8002238:	464b      	mov	r3, r9
 800223a:	07dc      	lsls	r4, r3, #31
 800223c:	0858      	lsrs	r0, r3, #1
 800223e:	4643      	mov	r3, r8
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	431c      	orrs	r4, r3
 8002244:	4643      	mov	r3, r8
 8002246:	07df      	lsls	r7, r3, #31
 8002248:	e62a      	b.n	8001ea0 <__aeabi_ddiv+0x100>
 800224a:	f001 f9cd 	bl	80035e8 <__clzsi2>
 800224e:	2315      	movs	r3, #21
 8002250:	469c      	mov	ip, r3
 8002252:	4484      	add	ip, r0
 8002254:	0002      	movs	r2, r0
 8002256:	4663      	mov	r3, ip
 8002258:	3220      	adds	r2, #32
 800225a:	2b1c      	cmp	r3, #28
 800225c:	dc00      	bgt.n	8002260 <__aeabi_ddiv+0x4c0>
 800225e:	e72e      	b.n	80020be <__aeabi_ddiv+0x31e>
 8002260:	0023      	movs	r3, r4
 8002262:	3808      	subs	r0, #8
 8002264:	4083      	lsls	r3, r0
 8002266:	4699      	mov	r9, r3
 8002268:	2300      	movs	r3, #0
 800226a:	4698      	mov	r8, r3
 800226c:	e736      	b.n	80020dc <__aeabi_ddiv+0x33c>
 800226e:	f001 f9bb 	bl	80035e8 <__clzsi2>
 8002272:	0002      	movs	r2, r0
 8002274:	0003      	movs	r3, r0
 8002276:	3215      	adds	r2, #21
 8002278:	3320      	adds	r3, #32
 800227a:	2a1c      	cmp	r2, #28
 800227c:	dc00      	bgt.n	8002280 <__aeabi_ddiv+0x4e0>
 800227e:	e6fb      	b.n	8002078 <__aeabi_ddiv+0x2d8>
 8002280:	9900      	ldr	r1, [sp, #0]
 8002282:	3808      	subs	r0, #8
 8002284:	4081      	lsls	r1, r0
 8002286:	2200      	movs	r2, #0
 8002288:	468b      	mov	fp, r1
 800228a:	e702      	b.n	8002092 <__aeabi_ddiv+0x2f2>
 800228c:	9900      	ldr	r1, [sp, #0]
 800228e:	3b01      	subs	r3, #1
 8002290:	468c      	mov	ip, r1
 8002292:	4464      	add	r4, ip
 8002294:	42a1      	cmp	r1, r4
 8002296:	d900      	bls.n	800229a <__aeabi_ddiv+0x4fa>
 8002298:	e69a      	b.n	8001fd0 <__aeabi_ddiv+0x230>
 800229a:	42a2      	cmp	r2, r4
 800229c:	d800      	bhi.n	80022a0 <__aeabi_ddiv+0x500>
 800229e:	e697      	b.n	8001fd0 <__aeabi_ddiv+0x230>
 80022a0:	1e83      	subs	r3, r0, #2
 80022a2:	4464      	add	r4, ip
 80022a4:	e694      	b.n	8001fd0 <__aeabi_ddiv+0x230>
 80022a6:	46ac      	mov	ip, r5
 80022a8:	4461      	add	r1, ip
 80022aa:	3f01      	subs	r7, #1
 80022ac:	428d      	cmp	r5, r1
 80022ae:	d900      	bls.n	80022b2 <__aeabi_ddiv+0x512>
 80022b0:	e680      	b.n	8001fb4 <__aeabi_ddiv+0x214>
 80022b2:	428a      	cmp	r2, r1
 80022b4:	d800      	bhi.n	80022b8 <__aeabi_ddiv+0x518>
 80022b6:	e67d      	b.n	8001fb4 <__aeabi_ddiv+0x214>
 80022b8:	1e87      	subs	r7, r0, #2
 80022ba:	4461      	add	r1, ip
 80022bc:	e67a      	b.n	8001fb4 <__aeabi_ddiv+0x214>
 80022be:	4285      	cmp	r5, r0
 80022c0:	d000      	beq.n	80022c4 <__aeabi_ddiv+0x524>
 80022c2:	e65f      	b.n	8001f84 <__aeabi_ddiv+0x1e4>
 80022c4:	45b9      	cmp	r9, r7
 80022c6:	d900      	bls.n	80022ca <__aeabi_ddiv+0x52a>
 80022c8:	e65c      	b.n	8001f84 <__aeabi_ddiv+0x1e4>
 80022ca:	e656      	b.n	8001f7a <__aeabi_ddiv+0x1da>
 80022cc:	42a2      	cmp	r2, r4
 80022ce:	d800      	bhi.n	80022d2 <__aeabi_ddiv+0x532>
 80022d0:	e61a      	b.n	8001f08 <__aeabi_ddiv+0x168>
 80022d2:	1e83      	subs	r3, r0, #2
 80022d4:	4464      	add	r4, ip
 80022d6:	e617      	b.n	8001f08 <__aeabi_ddiv+0x168>
 80022d8:	428a      	cmp	r2, r1
 80022da:	d800      	bhi.n	80022de <__aeabi_ddiv+0x53e>
 80022dc:	e600      	b.n	8001ee0 <__aeabi_ddiv+0x140>
 80022de:	46ac      	mov	ip, r5
 80022e0:	1e83      	subs	r3, r0, #2
 80022e2:	4698      	mov	r8, r3
 80022e4:	4461      	add	r1, ip
 80022e6:	e5fb      	b.n	8001ee0 <__aeabi_ddiv+0x140>
 80022e8:	4837      	ldr	r0, [pc, #220]	@ (80023c8 <__aeabi_ddiv+0x628>)
 80022ea:	0014      	movs	r4, r2
 80022ec:	4450      	add	r0, sl
 80022ee:	4082      	lsls	r2, r0
 80022f0:	465b      	mov	r3, fp
 80022f2:	0017      	movs	r7, r2
 80022f4:	4083      	lsls	r3, r0
 80022f6:	40cc      	lsrs	r4, r1
 80022f8:	1e7a      	subs	r2, r7, #1
 80022fa:	4197      	sbcs	r7, r2
 80022fc:	4323      	orrs	r3, r4
 80022fe:	433b      	orrs	r3, r7
 8002300:	001a      	movs	r2, r3
 8002302:	465b      	mov	r3, fp
 8002304:	40cb      	lsrs	r3, r1
 8002306:	0751      	lsls	r1, r2, #29
 8002308:	d009      	beq.n	800231e <__aeabi_ddiv+0x57e>
 800230a:	210f      	movs	r1, #15
 800230c:	4011      	ands	r1, r2
 800230e:	2904      	cmp	r1, #4
 8002310:	d005      	beq.n	800231e <__aeabi_ddiv+0x57e>
 8002312:	1d11      	adds	r1, r2, #4
 8002314:	4291      	cmp	r1, r2
 8002316:	4192      	sbcs	r2, r2
 8002318:	4252      	negs	r2, r2
 800231a:	189b      	adds	r3, r3, r2
 800231c:	000a      	movs	r2, r1
 800231e:	0219      	lsls	r1, r3, #8
 8002320:	d400      	bmi.n	8002324 <__aeabi_ddiv+0x584>
 8002322:	e755      	b.n	80021d0 <__aeabi_ddiv+0x430>
 8002324:	2200      	movs	r2, #0
 8002326:	2301      	movs	r3, #1
 8002328:	2400      	movs	r4, #0
 800232a:	4690      	mov	r8, r2
 800232c:	e598      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 800232e:	000a      	movs	r2, r1
 8002330:	42bc      	cmp	r4, r7
 8002332:	d000      	beq.n	8002336 <__aeabi_ddiv+0x596>
 8002334:	e66e      	b.n	8002014 <__aeabi_ddiv+0x274>
 8002336:	454b      	cmp	r3, r9
 8002338:	d000      	beq.n	800233c <__aeabi_ddiv+0x59c>
 800233a:	e66b      	b.n	8002014 <__aeabi_ddiv+0x274>
 800233c:	e66c      	b.n	8002018 <__aeabi_ddiv+0x278>
 800233e:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <__aeabi_ddiv+0x62c>)
 8002340:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <__aeabi_ddiv+0x630>)
 8002342:	4453      	add	r3, sl
 8002344:	4592      	cmp	sl, r2
 8002346:	da00      	bge.n	800234a <__aeabi_ddiv+0x5aa>
 8002348:	e718      	b.n	800217c <__aeabi_ddiv+0x3dc>
 800234a:	2101      	movs	r1, #1
 800234c:	4249      	negs	r1, r1
 800234e:	1d0a      	adds	r2, r1, #4
 8002350:	428a      	cmp	r2, r1
 8002352:	4189      	sbcs	r1, r1
 8002354:	4249      	negs	r1, r1
 8002356:	448b      	add	fp, r1
 8002358:	e666      	b.n	8002028 <__aeabi_ddiv+0x288>
 800235a:	210f      	movs	r1, #15
 800235c:	4011      	ands	r1, r2
 800235e:	2904      	cmp	r1, #4
 8002360:	d100      	bne.n	8002364 <__aeabi_ddiv+0x5c4>
 8002362:	e661      	b.n	8002028 <__aeabi_ddiv+0x288>
 8002364:	0011      	movs	r1, r2
 8002366:	e7f2      	b.n	800234e <__aeabi_ddiv+0x5ae>
 8002368:	42bc      	cmp	r4, r7
 800236a:	d800      	bhi.n	800236e <__aeabi_ddiv+0x5ce>
 800236c:	e60a      	b.n	8001f84 <__aeabi_ddiv+0x1e4>
 800236e:	2302      	movs	r3, #2
 8002370:	425b      	negs	r3, r3
 8002372:	469c      	mov	ip, r3
 8002374:	9900      	ldr	r1, [sp, #0]
 8002376:	444f      	add	r7, r9
 8002378:	454f      	cmp	r7, r9
 800237a:	419b      	sbcs	r3, r3
 800237c:	44e3      	add	fp, ip
 800237e:	468c      	mov	ip, r1
 8002380:	425b      	negs	r3, r3
 8002382:	4463      	add	r3, ip
 8002384:	18c0      	adds	r0, r0, r3
 8002386:	e5ff      	b.n	8001f88 <__aeabi_ddiv+0x1e8>
 8002388:	4649      	mov	r1, r9
 800238a:	9d00      	ldr	r5, [sp, #0]
 800238c:	0048      	lsls	r0, r1, #1
 800238e:	4548      	cmp	r0, r9
 8002390:	4189      	sbcs	r1, r1
 8002392:	46ac      	mov	ip, r5
 8002394:	4249      	negs	r1, r1
 8002396:	4461      	add	r1, ip
 8002398:	4681      	mov	r9, r0
 800239a:	3a02      	subs	r2, #2
 800239c:	1864      	adds	r4, r4, r1
 800239e:	e7c7      	b.n	8002330 <__aeabi_ddiv+0x590>
 80023a0:	2480      	movs	r4, #128	@ 0x80
 80023a2:	465b      	mov	r3, fp
 80023a4:	0324      	lsls	r4, r4, #12
 80023a6:	431c      	orrs	r4, r3
 80023a8:	0324      	lsls	r4, r4, #12
 80023aa:	4690      	mov	r8, r2
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <__aeabi_ddiv+0x620>)
 80023ae:	0b24      	lsrs	r4, r4, #12
 80023b0:	e556      	b.n	8001e60 <__aeabi_ddiv+0xc0>
 80023b2:	4599      	cmp	r9, r3
 80023b4:	d3e8      	bcc.n	8002388 <__aeabi_ddiv+0x5e8>
 80023b6:	000a      	movs	r2, r1
 80023b8:	e7bd      	b.n	8002336 <__aeabi_ddiv+0x596>
 80023ba:	2300      	movs	r3, #0
 80023bc:	e708      	b.n	80021d0 <__aeabi_ddiv+0x430>
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	000007ff 	.word	0x000007ff
 80023c4:	0000043e 	.word	0x0000043e
 80023c8:	0000041e 	.word	0x0000041e
 80023cc:	000003ff 	.word	0x000003ff
 80023d0:	fffffc02 	.word	0xfffffc02

080023d4 <__eqdf2>:
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d6:	4657      	mov	r7, sl
 80023d8:	46de      	mov	lr, fp
 80023da:	464e      	mov	r6, r9
 80023dc:	4645      	mov	r5, r8
 80023de:	b5e0      	push	{r5, r6, r7, lr}
 80023e0:	000d      	movs	r5, r1
 80023e2:	0004      	movs	r4, r0
 80023e4:	0fe8      	lsrs	r0, r5, #31
 80023e6:	4683      	mov	fp, r0
 80023e8:	0309      	lsls	r1, r1, #12
 80023ea:	0fd8      	lsrs	r0, r3, #31
 80023ec:	0b09      	lsrs	r1, r1, #12
 80023ee:	4682      	mov	sl, r0
 80023f0:	4819      	ldr	r0, [pc, #100]	@ (8002458 <__eqdf2+0x84>)
 80023f2:	468c      	mov	ip, r1
 80023f4:	031f      	lsls	r7, r3, #12
 80023f6:	0069      	lsls	r1, r5, #1
 80023f8:	005e      	lsls	r6, r3, #1
 80023fa:	0d49      	lsrs	r1, r1, #21
 80023fc:	0b3f      	lsrs	r7, r7, #12
 80023fe:	0d76      	lsrs	r6, r6, #21
 8002400:	4281      	cmp	r1, r0
 8002402:	d018      	beq.n	8002436 <__eqdf2+0x62>
 8002404:	4286      	cmp	r6, r0
 8002406:	d00f      	beq.n	8002428 <__eqdf2+0x54>
 8002408:	2001      	movs	r0, #1
 800240a:	42b1      	cmp	r1, r6
 800240c:	d10d      	bne.n	800242a <__eqdf2+0x56>
 800240e:	45bc      	cmp	ip, r7
 8002410:	d10b      	bne.n	800242a <__eqdf2+0x56>
 8002412:	4294      	cmp	r4, r2
 8002414:	d109      	bne.n	800242a <__eqdf2+0x56>
 8002416:	45d3      	cmp	fp, sl
 8002418:	d01c      	beq.n	8002454 <__eqdf2+0x80>
 800241a:	2900      	cmp	r1, #0
 800241c:	d105      	bne.n	800242a <__eqdf2+0x56>
 800241e:	4660      	mov	r0, ip
 8002420:	4320      	orrs	r0, r4
 8002422:	1e43      	subs	r3, r0, #1
 8002424:	4198      	sbcs	r0, r3
 8002426:	e000      	b.n	800242a <__eqdf2+0x56>
 8002428:	2001      	movs	r0, #1
 800242a:	bcf0      	pop	{r4, r5, r6, r7}
 800242c:	46bb      	mov	fp, r7
 800242e:	46b2      	mov	sl, r6
 8002430:	46a9      	mov	r9, r5
 8002432:	46a0      	mov	r8, r4
 8002434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002436:	2001      	movs	r0, #1
 8002438:	428e      	cmp	r6, r1
 800243a:	d1f6      	bne.n	800242a <__eqdf2+0x56>
 800243c:	4661      	mov	r1, ip
 800243e:	4339      	orrs	r1, r7
 8002440:	000f      	movs	r7, r1
 8002442:	4317      	orrs	r7, r2
 8002444:	4327      	orrs	r7, r4
 8002446:	d1f0      	bne.n	800242a <__eqdf2+0x56>
 8002448:	465b      	mov	r3, fp
 800244a:	4652      	mov	r2, sl
 800244c:	1a98      	subs	r0, r3, r2
 800244e:	1e43      	subs	r3, r0, #1
 8002450:	4198      	sbcs	r0, r3
 8002452:	e7ea      	b.n	800242a <__eqdf2+0x56>
 8002454:	2000      	movs	r0, #0
 8002456:	e7e8      	b.n	800242a <__eqdf2+0x56>
 8002458:	000007ff 	.word	0x000007ff

0800245c <__gedf2>:
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	4657      	mov	r7, sl
 8002460:	464e      	mov	r6, r9
 8002462:	4645      	mov	r5, r8
 8002464:	46de      	mov	lr, fp
 8002466:	b5e0      	push	{r5, r6, r7, lr}
 8002468:	000d      	movs	r5, r1
 800246a:	030f      	lsls	r7, r1, #12
 800246c:	0b39      	lsrs	r1, r7, #12
 800246e:	b083      	sub	sp, #12
 8002470:	0004      	movs	r4, r0
 8002472:	4680      	mov	r8, r0
 8002474:	9101      	str	r1, [sp, #4]
 8002476:	0058      	lsls	r0, r3, #1
 8002478:	0fe9      	lsrs	r1, r5, #31
 800247a:	4f31      	ldr	r7, [pc, #196]	@ (8002540 <__gedf2+0xe4>)
 800247c:	0d40      	lsrs	r0, r0, #21
 800247e:	468c      	mov	ip, r1
 8002480:	006e      	lsls	r6, r5, #1
 8002482:	0319      	lsls	r1, r3, #12
 8002484:	4682      	mov	sl, r0
 8002486:	4691      	mov	r9, r2
 8002488:	0d76      	lsrs	r6, r6, #21
 800248a:	0b09      	lsrs	r1, r1, #12
 800248c:	0fd8      	lsrs	r0, r3, #31
 800248e:	42be      	cmp	r6, r7
 8002490:	d01f      	beq.n	80024d2 <__gedf2+0x76>
 8002492:	45ba      	cmp	sl, r7
 8002494:	d00f      	beq.n	80024b6 <__gedf2+0x5a>
 8002496:	2e00      	cmp	r6, #0
 8002498:	d12f      	bne.n	80024fa <__gedf2+0x9e>
 800249a:	4655      	mov	r5, sl
 800249c:	9e01      	ldr	r6, [sp, #4]
 800249e:	4334      	orrs	r4, r6
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	d127      	bne.n	80024f4 <__gedf2+0x98>
 80024a4:	430a      	orrs	r2, r1
 80024a6:	d03a      	beq.n	800251e <__gedf2+0xc2>
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d145      	bne.n	8002538 <__gedf2+0xdc>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d11a      	bne.n	80024e6 <__gedf2+0x8a>
 80024b0:	2001      	movs	r0, #1
 80024b2:	4240      	negs	r0, r0
 80024b4:	e017      	b.n	80024e6 <__gedf2+0x8a>
 80024b6:	4311      	orrs	r1, r2
 80024b8:	d13b      	bne.n	8002532 <__gedf2+0xd6>
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d102      	bne.n	80024c4 <__gedf2+0x68>
 80024be:	9f01      	ldr	r7, [sp, #4]
 80024c0:	4327      	orrs	r7, r4
 80024c2:	d0f3      	beq.n	80024ac <__gedf2+0x50>
 80024c4:	4584      	cmp	ip, r0
 80024c6:	d109      	bne.n	80024dc <__gedf2+0x80>
 80024c8:	4663      	mov	r3, ip
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <__gedf2+0x54>
 80024ce:	4660      	mov	r0, ip
 80024d0:	e009      	b.n	80024e6 <__gedf2+0x8a>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d12c      	bne.n	8002532 <__gedf2+0xd6>
 80024d8:	45b2      	cmp	sl, r6
 80024da:	d024      	beq.n	8002526 <__gedf2+0xca>
 80024dc:	4663      	mov	r3, ip
 80024de:	2002      	movs	r0, #2
 80024e0:	3b01      	subs	r3, #1
 80024e2:	4018      	ands	r0, r3
 80024e4:	3801      	subs	r0, #1
 80024e6:	b003      	add	sp, #12
 80024e8:	bcf0      	pop	{r4, r5, r6, r7}
 80024ea:	46bb      	mov	fp, r7
 80024ec:	46b2      	mov	sl, r6
 80024ee:	46a9      	mov	r9, r5
 80024f0:	46a0      	mov	r8, r4
 80024f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f4:	2c00      	cmp	r4, #0
 80024f6:	d0d9      	beq.n	80024ac <__gedf2+0x50>
 80024f8:	e7e4      	b.n	80024c4 <__gedf2+0x68>
 80024fa:	4654      	mov	r4, sl
 80024fc:	2c00      	cmp	r4, #0
 80024fe:	d0ed      	beq.n	80024dc <__gedf2+0x80>
 8002500:	4584      	cmp	ip, r0
 8002502:	d1eb      	bne.n	80024dc <__gedf2+0x80>
 8002504:	4556      	cmp	r6, sl
 8002506:	dce9      	bgt.n	80024dc <__gedf2+0x80>
 8002508:	dbde      	blt.n	80024c8 <__gedf2+0x6c>
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	428b      	cmp	r3, r1
 800250e:	d8e5      	bhi.n	80024dc <__gedf2+0x80>
 8002510:	d1da      	bne.n	80024c8 <__gedf2+0x6c>
 8002512:	45c8      	cmp	r8, r9
 8002514:	d8e2      	bhi.n	80024dc <__gedf2+0x80>
 8002516:	2000      	movs	r0, #0
 8002518:	45c8      	cmp	r8, r9
 800251a:	d2e4      	bcs.n	80024e6 <__gedf2+0x8a>
 800251c:	e7d4      	b.n	80024c8 <__gedf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	2c00      	cmp	r4, #0
 8002522:	d0e0      	beq.n	80024e6 <__gedf2+0x8a>
 8002524:	e7da      	b.n	80024dc <__gedf2+0x80>
 8002526:	4311      	orrs	r1, r2
 8002528:	d103      	bne.n	8002532 <__gedf2+0xd6>
 800252a:	4584      	cmp	ip, r0
 800252c:	d1d6      	bne.n	80024dc <__gedf2+0x80>
 800252e:	2000      	movs	r0, #0
 8002530:	e7d9      	b.n	80024e6 <__gedf2+0x8a>
 8002532:	2002      	movs	r0, #2
 8002534:	4240      	negs	r0, r0
 8002536:	e7d6      	b.n	80024e6 <__gedf2+0x8a>
 8002538:	4584      	cmp	ip, r0
 800253a:	d0e6      	beq.n	800250a <__gedf2+0xae>
 800253c:	e7ce      	b.n	80024dc <__gedf2+0x80>
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	000007ff 	.word	0x000007ff

08002544 <__ledf2>:
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	4657      	mov	r7, sl
 8002548:	464e      	mov	r6, r9
 800254a:	4645      	mov	r5, r8
 800254c:	46de      	mov	lr, fp
 800254e:	b5e0      	push	{r5, r6, r7, lr}
 8002550:	000d      	movs	r5, r1
 8002552:	030f      	lsls	r7, r1, #12
 8002554:	0004      	movs	r4, r0
 8002556:	4680      	mov	r8, r0
 8002558:	0fe8      	lsrs	r0, r5, #31
 800255a:	0b39      	lsrs	r1, r7, #12
 800255c:	4684      	mov	ip, r0
 800255e:	b083      	sub	sp, #12
 8002560:	0058      	lsls	r0, r3, #1
 8002562:	4f30      	ldr	r7, [pc, #192]	@ (8002624 <__ledf2+0xe0>)
 8002564:	0d40      	lsrs	r0, r0, #21
 8002566:	9101      	str	r1, [sp, #4]
 8002568:	031e      	lsls	r6, r3, #12
 800256a:	0069      	lsls	r1, r5, #1
 800256c:	4682      	mov	sl, r0
 800256e:	4691      	mov	r9, r2
 8002570:	0d49      	lsrs	r1, r1, #21
 8002572:	0b36      	lsrs	r6, r6, #12
 8002574:	0fd8      	lsrs	r0, r3, #31
 8002576:	42b9      	cmp	r1, r7
 8002578:	d020      	beq.n	80025bc <__ledf2+0x78>
 800257a:	45ba      	cmp	sl, r7
 800257c:	d00f      	beq.n	800259e <__ledf2+0x5a>
 800257e:	2900      	cmp	r1, #0
 8002580:	d12b      	bne.n	80025da <__ledf2+0x96>
 8002582:	9901      	ldr	r1, [sp, #4]
 8002584:	430c      	orrs	r4, r1
 8002586:	4651      	mov	r1, sl
 8002588:	2900      	cmp	r1, #0
 800258a:	d137      	bne.n	80025fc <__ledf2+0xb8>
 800258c:	4332      	orrs	r2, r6
 800258e:	d038      	beq.n	8002602 <__ledf2+0xbe>
 8002590:	2c00      	cmp	r4, #0
 8002592:	d144      	bne.n	800261e <__ledf2+0xda>
 8002594:	2800      	cmp	r0, #0
 8002596:	d119      	bne.n	80025cc <__ledf2+0x88>
 8002598:	2001      	movs	r0, #1
 800259a:	4240      	negs	r0, r0
 800259c:	e016      	b.n	80025cc <__ledf2+0x88>
 800259e:	4316      	orrs	r6, r2
 80025a0:	d113      	bne.n	80025ca <__ledf2+0x86>
 80025a2:	2900      	cmp	r1, #0
 80025a4:	d102      	bne.n	80025ac <__ledf2+0x68>
 80025a6:	9f01      	ldr	r7, [sp, #4]
 80025a8:	4327      	orrs	r7, r4
 80025aa:	d0f3      	beq.n	8002594 <__ledf2+0x50>
 80025ac:	4584      	cmp	ip, r0
 80025ae:	d020      	beq.n	80025f2 <__ledf2+0xae>
 80025b0:	4663      	mov	r3, ip
 80025b2:	2002      	movs	r0, #2
 80025b4:	3b01      	subs	r3, #1
 80025b6:	4018      	ands	r0, r3
 80025b8:	3801      	subs	r0, #1
 80025ba:	e007      	b.n	80025cc <__ledf2+0x88>
 80025bc:	9f01      	ldr	r7, [sp, #4]
 80025be:	4327      	orrs	r7, r4
 80025c0:	d103      	bne.n	80025ca <__ledf2+0x86>
 80025c2:	458a      	cmp	sl, r1
 80025c4:	d1f4      	bne.n	80025b0 <__ledf2+0x6c>
 80025c6:	4316      	orrs	r6, r2
 80025c8:	d01f      	beq.n	800260a <__ledf2+0xc6>
 80025ca:	2002      	movs	r0, #2
 80025cc:	b003      	add	sp, #12
 80025ce:	bcf0      	pop	{r4, r5, r6, r7}
 80025d0:	46bb      	mov	fp, r7
 80025d2:	46b2      	mov	sl, r6
 80025d4:	46a9      	mov	r9, r5
 80025d6:	46a0      	mov	r8, r4
 80025d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025da:	4654      	mov	r4, sl
 80025dc:	2c00      	cmp	r4, #0
 80025de:	d0e7      	beq.n	80025b0 <__ledf2+0x6c>
 80025e0:	4584      	cmp	ip, r0
 80025e2:	d1e5      	bne.n	80025b0 <__ledf2+0x6c>
 80025e4:	4551      	cmp	r1, sl
 80025e6:	dce3      	bgt.n	80025b0 <__ledf2+0x6c>
 80025e8:	db03      	blt.n	80025f2 <__ledf2+0xae>
 80025ea:	9b01      	ldr	r3, [sp, #4]
 80025ec:	42b3      	cmp	r3, r6
 80025ee:	d8df      	bhi.n	80025b0 <__ledf2+0x6c>
 80025f0:	d00f      	beq.n	8002612 <__ledf2+0xce>
 80025f2:	4663      	mov	r3, ip
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0cf      	beq.n	8002598 <__ledf2+0x54>
 80025f8:	4660      	mov	r0, ip
 80025fa:	e7e7      	b.n	80025cc <__ledf2+0x88>
 80025fc:	2c00      	cmp	r4, #0
 80025fe:	d0c9      	beq.n	8002594 <__ledf2+0x50>
 8002600:	e7d4      	b.n	80025ac <__ledf2+0x68>
 8002602:	2000      	movs	r0, #0
 8002604:	2c00      	cmp	r4, #0
 8002606:	d0e1      	beq.n	80025cc <__ledf2+0x88>
 8002608:	e7d2      	b.n	80025b0 <__ledf2+0x6c>
 800260a:	4584      	cmp	ip, r0
 800260c:	d1d0      	bne.n	80025b0 <__ledf2+0x6c>
 800260e:	2000      	movs	r0, #0
 8002610:	e7dc      	b.n	80025cc <__ledf2+0x88>
 8002612:	45c8      	cmp	r8, r9
 8002614:	d8cc      	bhi.n	80025b0 <__ledf2+0x6c>
 8002616:	2000      	movs	r0, #0
 8002618:	45c8      	cmp	r8, r9
 800261a:	d2d7      	bcs.n	80025cc <__ledf2+0x88>
 800261c:	e7e9      	b.n	80025f2 <__ledf2+0xae>
 800261e:	4584      	cmp	ip, r0
 8002620:	d0e3      	beq.n	80025ea <__ledf2+0xa6>
 8002622:	e7c5      	b.n	80025b0 <__ledf2+0x6c>
 8002624:	000007ff 	.word	0x000007ff

08002628 <__aeabi_dmul>:
 8002628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262a:	4657      	mov	r7, sl
 800262c:	46de      	mov	lr, fp
 800262e:	464e      	mov	r6, r9
 8002630:	4645      	mov	r5, r8
 8002632:	b5e0      	push	{r5, r6, r7, lr}
 8002634:	001f      	movs	r7, r3
 8002636:	030b      	lsls	r3, r1, #12
 8002638:	0b1b      	lsrs	r3, r3, #12
 800263a:	0016      	movs	r6, r2
 800263c:	469a      	mov	sl, r3
 800263e:	0fca      	lsrs	r2, r1, #31
 8002640:	004b      	lsls	r3, r1, #1
 8002642:	0004      	movs	r4, r0
 8002644:	4693      	mov	fp, r2
 8002646:	b087      	sub	sp, #28
 8002648:	0d5b      	lsrs	r3, r3, #21
 800264a:	d100      	bne.n	800264e <__aeabi_dmul+0x26>
 800264c:	e0d5      	b.n	80027fa <__aeabi_dmul+0x1d2>
 800264e:	4abb      	ldr	r2, [pc, #748]	@ (800293c <__aeabi_dmul+0x314>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d100      	bne.n	8002656 <__aeabi_dmul+0x2e>
 8002654:	e0f8      	b.n	8002848 <__aeabi_dmul+0x220>
 8002656:	4651      	mov	r1, sl
 8002658:	0f42      	lsrs	r2, r0, #29
 800265a:	00c9      	lsls	r1, r1, #3
 800265c:	430a      	orrs	r2, r1
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0409      	lsls	r1, r1, #16
 8002662:	4311      	orrs	r1, r2
 8002664:	00c2      	lsls	r2, r0, #3
 8002666:	4691      	mov	r9, r2
 8002668:	4ab5      	ldr	r2, [pc, #724]	@ (8002940 <__aeabi_dmul+0x318>)
 800266a:	468a      	mov	sl, r1
 800266c:	189d      	adds	r5, r3, r2
 800266e:	2300      	movs	r3, #0
 8002670:	4698      	mov	r8, r3
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	033c      	lsls	r4, r7, #12
 8002676:	007b      	lsls	r3, r7, #1
 8002678:	0ffa      	lsrs	r2, r7, #31
 800267a:	0030      	movs	r0, r6
 800267c:	0b24      	lsrs	r4, r4, #12
 800267e:	0d5b      	lsrs	r3, r3, #21
 8002680:	9200      	str	r2, [sp, #0]
 8002682:	d100      	bne.n	8002686 <__aeabi_dmul+0x5e>
 8002684:	e096      	b.n	80027b4 <__aeabi_dmul+0x18c>
 8002686:	4aad      	ldr	r2, [pc, #692]	@ (800293c <__aeabi_dmul+0x314>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d031      	beq.n	80026f0 <__aeabi_dmul+0xc8>
 800268c:	0f72      	lsrs	r2, r6, #29
 800268e:	00e4      	lsls	r4, r4, #3
 8002690:	4322      	orrs	r2, r4
 8002692:	2480      	movs	r4, #128	@ 0x80
 8002694:	0424      	lsls	r4, r4, #16
 8002696:	4314      	orrs	r4, r2
 8002698:	4aa9      	ldr	r2, [pc, #676]	@ (8002940 <__aeabi_dmul+0x318>)
 800269a:	00f0      	lsls	r0, r6, #3
 800269c:	4694      	mov	ip, r2
 800269e:	4463      	add	r3, ip
 80026a0:	195b      	adds	r3, r3, r5
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	9201      	str	r2, [sp, #4]
 80026a6:	4642      	mov	r2, r8
 80026a8:	2600      	movs	r6, #0
 80026aa:	2a0a      	cmp	r2, #10
 80026ac:	dc42      	bgt.n	8002734 <__aeabi_dmul+0x10c>
 80026ae:	465a      	mov	r2, fp
 80026b0:	9900      	ldr	r1, [sp, #0]
 80026b2:	404a      	eors	r2, r1
 80026b4:	4693      	mov	fp, r2
 80026b6:	4642      	mov	r2, r8
 80026b8:	2a02      	cmp	r2, #2
 80026ba:	dc32      	bgt.n	8002722 <__aeabi_dmul+0xfa>
 80026bc:	3a01      	subs	r2, #1
 80026be:	2a01      	cmp	r2, #1
 80026c0:	d900      	bls.n	80026c4 <__aeabi_dmul+0x9c>
 80026c2:	e149      	b.n	8002958 <__aeabi_dmul+0x330>
 80026c4:	2e02      	cmp	r6, #2
 80026c6:	d100      	bne.n	80026ca <__aeabi_dmul+0xa2>
 80026c8:	e0ca      	b.n	8002860 <__aeabi_dmul+0x238>
 80026ca:	2e01      	cmp	r6, #1
 80026cc:	d13d      	bne.n	800274a <__aeabi_dmul+0x122>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2400      	movs	r4, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	0010      	movs	r0, r2
 80026d6:	465a      	mov	r2, fp
 80026d8:	051b      	lsls	r3, r3, #20
 80026da:	4323      	orrs	r3, r4
 80026dc:	07d2      	lsls	r2, r2, #31
 80026de:	4313      	orrs	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	b007      	add	sp, #28
 80026e4:	bcf0      	pop	{r4, r5, r6, r7}
 80026e6:	46bb      	mov	fp, r7
 80026e8:	46b2      	mov	sl, r6
 80026ea:	46a9      	mov	r9, r5
 80026ec:	46a0      	mov	r8, r4
 80026ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f0:	4b92      	ldr	r3, [pc, #584]	@ (800293c <__aeabi_dmul+0x314>)
 80026f2:	4326      	orrs	r6, r4
 80026f4:	18eb      	adds	r3, r5, r3
 80026f6:	2e00      	cmp	r6, #0
 80026f8:	d100      	bne.n	80026fc <__aeabi_dmul+0xd4>
 80026fa:	e0bb      	b.n	8002874 <__aeabi_dmul+0x24c>
 80026fc:	2203      	movs	r2, #3
 80026fe:	4641      	mov	r1, r8
 8002700:	4311      	orrs	r1, r2
 8002702:	465a      	mov	r2, fp
 8002704:	4688      	mov	r8, r1
 8002706:	9900      	ldr	r1, [sp, #0]
 8002708:	404a      	eors	r2, r1
 800270a:	2180      	movs	r1, #128	@ 0x80
 800270c:	0109      	lsls	r1, r1, #4
 800270e:	468c      	mov	ip, r1
 8002710:	0029      	movs	r1, r5
 8002712:	4461      	add	r1, ip
 8002714:	9101      	str	r1, [sp, #4]
 8002716:	4641      	mov	r1, r8
 8002718:	290a      	cmp	r1, #10
 800271a:	dd00      	ble.n	800271e <__aeabi_dmul+0xf6>
 800271c:	e233      	b.n	8002b86 <__aeabi_dmul+0x55e>
 800271e:	4693      	mov	fp, r2
 8002720:	2603      	movs	r6, #3
 8002722:	4642      	mov	r2, r8
 8002724:	2701      	movs	r7, #1
 8002726:	4097      	lsls	r7, r2
 8002728:	21a6      	movs	r1, #166	@ 0xa6
 800272a:	003a      	movs	r2, r7
 800272c:	00c9      	lsls	r1, r1, #3
 800272e:	400a      	ands	r2, r1
 8002730:	420f      	tst	r7, r1
 8002732:	d031      	beq.n	8002798 <__aeabi_dmul+0x170>
 8002734:	9e02      	ldr	r6, [sp, #8]
 8002736:	2e02      	cmp	r6, #2
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x114>
 800273a:	e235      	b.n	8002ba8 <__aeabi_dmul+0x580>
 800273c:	2e03      	cmp	r6, #3
 800273e:	d100      	bne.n	8002742 <__aeabi_dmul+0x11a>
 8002740:	e1d2      	b.n	8002ae8 <__aeabi_dmul+0x4c0>
 8002742:	4654      	mov	r4, sl
 8002744:	4648      	mov	r0, r9
 8002746:	2e01      	cmp	r6, #1
 8002748:	d0c1      	beq.n	80026ce <__aeabi_dmul+0xa6>
 800274a:	9a01      	ldr	r2, [sp, #4]
 800274c:	4b7d      	ldr	r3, [pc, #500]	@ (8002944 <__aeabi_dmul+0x31c>)
 800274e:	4694      	mov	ip, r2
 8002750:	4463      	add	r3, ip
 8002752:	2b00      	cmp	r3, #0
 8002754:	dc00      	bgt.n	8002758 <__aeabi_dmul+0x130>
 8002756:	e0c0      	b.n	80028da <__aeabi_dmul+0x2b2>
 8002758:	0742      	lsls	r2, r0, #29
 800275a:	d009      	beq.n	8002770 <__aeabi_dmul+0x148>
 800275c:	220f      	movs	r2, #15
 800275e:	4002      	ands	r2, r0
 8002760:	2a04      	cmp	r2, #4
 8002762:	d005      	beq.n	8002770 <__aeabi_dmul+0x148>
 8002764:	1d02      	adds	r2, r0, #4
 8002766:	4282      	cmp	r2, r0
 8002768:	4180      	sbcs	r0, r0
 800276a:	4240      	negs	r0, r0
 800276c:	1824      	adds	r4, r4, r0
 800276e:	0010      	movs	r0, r2
 8002770:	01e2      	lsls	r2, r4, #7
 8002772:	d506      	bpl.n	8002782 <__aeabi_dmul+0x15a>
 8002774:	4b74      	ldr	r3, [pc, #464]	@ (8002948 <__aeabi_dmul+0x320>)
 8002776:	9a01      	ldr	r2, [sp, #4]
 8002778:	401c      	ands	r4, r3
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	4694      	mov	ip, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4463      	add	r3, ip
 8002782:	4a72      	ldr	r2, [pc, #456]	@ (800294c <__aeabi_dmul+0x324>)
 8002784:	4293      	cmp	r3, r2
 8002786:	dc6b      	bgt.n	8002860 <__aeabi_dmul+0x238>
 8002788:	0762      	lsls	r2, r4, #29
 800278a:	08c0      	lsrs	r0, r0, #3
 800278c:	0264      	lsls	r4, r4, #9
 800278e:	055b      	lsls	r3, r3, #21
 8002790:	4302      	orrs	r2, r0
 8002792:	0b24      	lsrs	r4, r4, #12
 8002794:	0d5b      	lsrs	r3, r3, #21
 8002796:	e79d      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002798:	2190      	movs	r1, #144	@ 0x90
 800279a:	0089      	lsls	r1, r1, #2
 800279c:	420f      	tst	r7, r1
 800279e:	d163      	bne.n	8002868 <__aeabi_dmul+0x240>
 80027a0:	2288      	movs	r2, #136	@ 0x88
 80027a2:	423a      	tst	r2, r7
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dmul+0x180>
 80027a6:	e0d7      	b.n	8002958 <__aeabi_dmul+0x330>
 80027a8:	9b00      	ldr	r3, [sp, #0]
 80027aa:	46a2      	mov	sl, r4
 80027ac:	469b      	mov	fp, r3
 80027ae:	4681      	mov	r9, r0
 80027b0:	9602      	str	r6, [sp, #8]
 80027b2:	e7bf      	b.n	8002734 <__aeabi_dmul+0x10c>
 80027b4:	0023      	movs	r3, r4
 80027b6:	4333      	orrs	r3, r6
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x194>
 80027ba:	e07f      	b.n	80028bc <__aeabi_dmul+0x294>
 80027bc:	2c00      	cmp	r4, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dmul+0x19a>
 80027c0:	e1ad      	b.n	8002b1e <__aeabi_dmul+0x4f6>
 80027c2:	0020      	movs	r0, r4
 80027c4:	f000 ff10 	bl	80035e8 <__clzsi2>
 80027c8:	0002      	movs	r2, r0
 80027ca:	0003      	movs	r3, r0
 80027cc:	3a0b      	subs	r2, #11
 80027ce:	201d      	movs	r0, #29
 80027d0:	0019      	movs	r1, r3
 80027d2:	1a82      	subs	r2, r0, r2
 80027d4:	0030      	movs	r0, r6
 80027d6:	3908      	subs	r1, #8
 80027d8:	40d0      	lsrs	r0, r2
 80027da:	408c      	lsls	r4, r1
 80027dc:	4304      	orrs	r4, r0
 80027de:	0030      	movs	r0, r6
 80027e0:	4088      	lsls	r0, r1
 80027e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002950 <__aeabi_dmul+0x328>)
 80027e4:	1aeb      	subs	r3, r5, r3
 80027e6:	4694      	mov	ip, r2
 80027e8:	4463      	add	r3, ip
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	9201      	str	r2, [sp, #4]
 80027ee:	4642      	mov	r2, r8
 80027f0:	2600      	movs	r6, #0
 80027f2:	2a0a      	cmp	r2, #10
 80027f4:	dc00      	bgt.n	80027f8 <__aeabi_dmul+0x1d0>
 80027f6:	e75a      	b.n	80026ae <__aeabi_dmul+0x86>
 80027f8:	e79c      	b.n	8002734 <__aeabi_dmul+0x10c>
 80027fa:	4653      	mov	r3, sl
 80027fc:	4303      	orrs	r3, r0
 80027fe:	4699      	mov	r9, r3
 8002800:	d054      	beq.n	80028ac <__aeabi_dmul+0x284>
 8002802:	4653      	mov	r3, sl
 8002804:	2b00      	cmp	r3, #0
 8002806:	d100      	bne.n	800280a <__aeabi_dmul+0x1e2>
 8002808:	e177      	b.n	8002afa <__aeabi_dmul+0x4d2>
 800280a:	4650      	mov	r0, sl
 800280c:	f000 feec 	bl	80035e8 <__clzsi2>
 8002810:	230b      	movs	r3, #11
 8002812:	425b      	negs	r3, r3
 8002814:	469c      	mov	ip, r3
 8002816:	0002      	movs	r2, r0
 8002818:	4484      	add	ip, r0
 800281a:	0011      	movs	r1, r2
 800281c:	4650      	mov	r0, sl
 800281e:	3908      	subs	r1, #8
 8002820:	4088      	lsls	r0, r1
 8002822:	231d      	movs	r3, #29
 8002824:	4680      	mov	r8, r0
 8002826:	4660      	mov	r0, ip
 8002828:	1a1b      	subs	r3, r3, r0
 800282a:	0020      	movs	r0, r4
 800282c:	40d8      	lsrs	r0, r3
 800282e:	0003      	movs	r3, r0
 8002830:	4640      	mov	r0, r8
 8002832:	4303      	orrs	r3, r0
 8002834:	469a      	mov	sl, r3
 8002836:	0023      	movs	r3, r4
 8002838:	408b      	lsls	r3, r1
 800283a:	4699      	mov	r9, r3
 800283c:	2300      	movs	r3, #0
 800283e:	4d44      	ldr	r5, [pc, #272]	@ (8002950 <__aeabi_dmul+0x328>)
 8002840:	4698      	mov	r8, r3
 8002842:	1aad      	subs	r5, r5, r2
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	e715      	b.n	8002674 <__aeabi_dmul+0x4c>
 8002848:	4652      	mov	r2, sl
 800284a:	4302      	orrs	r2, r0
 800284c:	4691      	mov	r9, r2
 800284e:	d126      	bne.n	800289e <__aeabi_dmul+0x276>
 8002850:	2200      	movs	r2, #0
 8002852:	001d      	movs	r5, r3
 8002854:	2302      	movs	r3, #2
 8002856:	4692      	mov	sl, r2
 8002858:	3208      	adds	r2, #8
 800285a:	4690      	mov	r8, r2
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	e709      	b.n	8002674 <__aeabi_dmul+0x4c>
 8002860:	2400      	movs	r4, #0
 8002862:	2200      	movs	r2, #0
 8002864:	4b35      	ldr	r3, [pc, #212]	@ (800293c <__aeabi_dmul+0x314>)
 8002866:	e735      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002868:	2300      	movs	r3, #0
 800286a:	2480      	movs	r4, #128	@ 0x80
 800286c:	469b      	mov	fp, r3
 800286e:	0324      	lsls	r4, r4, #12
 8002870:	4b32      	ldr	r3, [pc, #200]	@ (800293c <__aeabi_dmul+0x314>)
 8002872:	e72f      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002874:	2202      	movs	r2, #2
 8002876:	4641      	mov	r1, r8
 8002878:	4311      	orrs	r1, r2
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	4694      	mov	ip, r2
 8002880:	002a      	movs	r2, r5
 8002882:	4462      	add	r2, ip
 8002884:	4688      	mov	r8, r1
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	290a      	cmp	r1, #10
 800288a:	dd00      	ble.n	800288e <__aeabi_dmul+0x266>
 800288c:	e752      	b.n	8002734 <__aeabi_dmul+0x10c>
 800288e:	465a      	mov	r2, fp
 8002890:	2000      	movs	r0, #0
 8002892:	9900      	ldr	r1, [sp, #0]
 8002894:	0004      	movs	r4, r0
 8002896:	404a      	eors	r2, r1
 8002898:	4693      	mov	fp, r2
 800289a:	2602      	movs	r6, #2
 800289c:	e70b      	b.n	80026b6 <__aeabi_dmul+0x8e>
 800289e:	220c      	movs	r2, #12
 80028a0:	001d      	movs	r5, r3
 80028a2:	2303      	movs	r3, #3
 80028a4:	4681      	mov	r9, r0
 80028a6:	4690      	mov	r8, r2
 80028a8:	9302      	str	r3, [sp, #8]
 80028aa:	e6e3      	b.n	8002674 <__aeabi_dmul+0x4c>
 80028ac:	2300      	movs	r3, #0
 80028ae:	469a      	mov	sl, r3
 80028b0:	3304      	adds	r3, #4
 80028b2:	4698      	mov	r8, r3
 80028b4:	3b03      	subs	r3, #3
 80028b6:	2500      	movs	r5, #0
 80028b8:	9302      	str	r3, [sp, #8]
 80028ba:	e6db      	b.n	8002674 <__aeabi_dmul+0x4c>
 80028bc:	4642      	mov	r2, r8
 80028be:	3301      	adds	r3, #1
 80028c0:	431a      	orrs	r2, r3
 80028c2:	002b      	movs	r3, r5
 80028c4:	4690      	mov	r8, r2
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	9201      	str	r2, [sp, #4]
 80028ca:	4642      	mov	r2, r8
 80028cc:	2400      	movs	r4, #0
 80028ce:	2000      	movs	r0, #0
 80028d0:	2601      	movs	r6, #1
 80028d2:	2a0a      	cmp	r2, #10
 80028d4:	dc00      	bgt.n	80028d8 <__aeabi_dmul+0x2b0>
 80028d6:	e6ea      	b.n	80026ae <__aeabi_dmul+0x86>
 80028d8:	e72c      	b.n	8002734 <__aeabi_dmul+0x10c>
 80028da:	2201      	movs	r2, #1
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	2a38      	cmp	r2, #56	@ 0x38
 80028e0:	dd00      	ble.n	80028e4 <__aeabi_dmul+0x2bc>
 80028e2:	e6f4      	b.n	80026ce <__aeabi_dmul+0xa6>
 80028e4:	2a1f      	cmp	r2, #31
 80028e6:	dc00      	bgt.n	80028ea <__aeabi_dmul+0x2c2>
 80028e8:	e12a      	b.n	8002b40 <__aeabi_dmul+0x518>
 80028ea:	211f      	movs	r1, #31
 80028ec:	4249      	negs	r1, r1
 80028ee:	1acb      	subs	r3, r1, r3
 80028f0:	0021      	movs	r1, r4
 80028f2:	40d9      	lsrs	r1, r3
 80028f4:	000b      	movs	r3, r1
 80028f6:	2a20      	cmp	r2, #32
 80028f8:	d005      	beq.n	8002906 <__aeabi_dmul+0x2de>
 80028fa:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <__aeabi_dmul+0x32c>)
 80028fc:	9d01      	ldr	r5, [sp, #4]
 80028fe:	4694      	mov	ip, r2
 8002900:	4465      	add	r5, ip
 8002902:	40ac      	lsls	r4, r5
 8002904:	4320      	orrs	r0, r4
 8002906:	1e42      	subs	r2, r0, #1
 8002908:	4190      	sbcs	r0, r2
 800290a:	4318      	orrs	r0, r3
 800290c:	2307      	movs	r3, #7
 800290e:	0019      	movs	r1, r3
 8002910:	2400      	movs	r4, #0
 8002912:	4001      	ands	r1, r0
 8002914:	4203      	tst	r3, r0
 8002916:	d00c      	beq.n	8002932 <__aeabi_dmul+0x30a>
 8002918:	230f      	movs	r3, #15
 800291a:	4003      	ands	r3, r0
 800291c:	2b04      	cmp	r3, #4
 800291e:	d100      	bne.n	8002922 <__aeabi_dmul+0x2fa>
 8002920:	e140      	b.n	8002ba4 <__aeabi_dmul+0x57c>
 8002922:	1d03      	adds	r3, r0, #4
 8002924:	4283      	cmp	r3, r0
 8002926:	41a4      	sbcs	r4, r4
 8002928:	0018      	movs	r0, r3
 800292a:	4264      	negs	r4, r4
 800292c:	0761      	lsls	r1, r4, #29
 800292e:	0264      	lsls	r4, r4, #9
 8002930:	0b24      	lsrs	r4, r4, #12
 8002932:	08c2      	lsrs	r2, r0, #3
 8002934:	2300      	movs	r3, #0
 8002936:	430a      	orrs	r2, r1
 8002938:	e6cc      	b.n	80026d4 <__aeabi_dmul+0xac>
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	000007ff 	.word	0x000007ff
 8002940:	fffffc01 	.word	0xfffffc01
 8002944:	000003ff 	.word	0x000003ff
 8002948:	feffffff 	.word	0xfeffffff
 800294c:	000007fe 	.word	0x000007fe
 8002950:	fffffc0d 	.word	0xfffffc0d
 8002954:	0000043e 	.word	0x0000043e
 8002958:	4649      	mov	r1, r9
 800295a:	464a      	mov	r2, r9
 800295c:	0409      	lsls	r1, r1, #16
 800295e:	0c09      	lsrs	r1, r1, #16
 8002960:	000d      	movs	r5, r1
 8002962:	0c16      	lsrs	r6, r2, #16
 8002964:	0c02      	lsrs	r2, r0, #16
 8002966:	0400      	lsls	r0, r0, #16
 8002968:	0c00      	lsrs	r0, r0, #16
 800296a:	4345      	muls	r5, r0
 800296c:	46ac      	mov	ip, r5
 800296e:	0005      	movs	r5, r0
 8002970:	4375      	muls	r5, r6
 8002972:	46a8      	mov	r8, r5
 8002974:	0015      	movs	r5, r2
 8002976:	000f      	movs	r7, r1
 8002978:	4375      	muls	r5, r6
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	9502      	str	r5, [sp, #8]
 800297e:	002a      	movs	r2, r5
 8002980:	9d00      	ldr	r5, [sp, #0]
 8002982:	436f      	muls	r7, r5
 8002984:	4665      	mov	r5, ip
 8002986:	0c2d      	lsrs	r5, r5, #16
 8002988:	46a9      	mov	r9, r5
 800298a:	4447      	add	r7, r8
 800298c:	444f      	add	r7, r9
 800298e:	45b8      	cmp	r8, r7
 8002990:	d905      	bls.n	800299e <__aeabi_dmul+0x376>
 8002992:	0015      	movs	r5, r2
 8002994:	2280      	movs	r2, #128	@ 0x80
 8002996:	0252      	lsls	r2, r2, #9
 8002998:	4690      	mov	r8, r2
 800299a:	4445      	add	r5, r8
 800299c:	9502      	str	r5, [sp, #8]
 800299e:	0c3d      	lsrs	r5, r7, #16
 80029a0:	9503      	str	r5, [sp, #12]
 80029a2:	4665      	mov	r5, ip
 80029a4:	042d      	lsls	r5, r5, #16
 80029a6:	043f      	lsls	r7, r7, #16
 80029a8:	0c2d      	lsrs	r5, r5, #16
 80029aa:	46ac      	mov	ip, r5
 80029ac:	003d      	movs	r5, r7
 80029ae:	4465      	add	r5, ip
 80029b0:	9504      	str	r5, [sp, #16]
 80029b2:	0c25      	lsrs	r5, r4, #16
 80029b4:	0424      	lsls	r4, r4, #16
 80029b6:	0c24      	lsrs	r4, r4, #16
 80029b8:	46ac      	mov	ip, r5
 80029ba:	0025      	movs	r5, r4
 80029bc:	4375      	muls	r5, r6
 80029be:	46a8      	mov	r8, r5
 80029c0:	4665      	mov	r5, ip
 80029c2:	000f      	movs	r7, r1
 80029c4:	4369      	muls	r1, r5
 80029c6:	4441      	add	r1, r8
 80029c8:	4689      	mov	r9, r1
 80029ca:	4367      	muls	r7, r4
 80029cc:	0c39      	lsrs	r1, r7, #16
 80029ce:	4449      	add	r1, r9
 80029d0:	436e      	muls	r6, r5
 80029d2:	4588      	cmp	r8, r1
 80029d4:	d903      	bls.n	80029de <__aeabi_dmul+0x3b6>
 80029d6:	2280      	movs	r2, #128	@ 0x80
 80029d8:	0252      	lsls	r2, r2, #9
 80029da:	4690      	mov	r8, r2
 80029dc:	4446      	add	r6, r8
 80029de:	0c0d      	lsrs	r5, r1, #16
 80029e0:	46a8      	mov	r8, r5
 80029e2:	0035      	movs	r5, r6
 80029e4:	4445      	add	r5, r8
 80029e6:	9505      	str	r5, [sp, #20]
 80029e8:	9d03      	ldr	r5, [sp, #12]
 80029ea:	043f      	lsls	r7, r7, #16
 80029ec:	46a8      	mov	r8, r5
 80029ee:	0c3f      	lsrs	r7, r7, #16
 80029f0:	0409      	lsls	r1, r1, #16
 80029f2:	19c9      	adds	r1, r1, r7
 80029f4:	4488      	add	r8, r1
 80029f6:	4645      	mov	r5, r8
 80029f8:	9503      	str	r5, [sp, #12]
 80029fa:	4655      	mov	r5, sl
 80029fc:	042e      	lsls	r6, r5, #16
 80029fe:	0c36      	lsrs	r6, r6, #16
 8002a00:	0c2f      	lsrs	r7, r5, #16
 8002a02:	0035      	movs	r5, r6
 8002a04:	4345      	muls	r5, r0
 8002a06:	4378      	muls	r0, r7
 8002a08:	4681      	mov	r9, r0
 8002a0a:	0038      	movs	r0, r7
 8002a0c:	46a8      	mov	r8, r5
 8002a0e:	0c2d      	lsrs	r5, r5, #16
 8002a10:	46aa      	mov	sl, r5
 8002a12:	9a00      	ldr	r2, [sp, #0]
 8002a14:	4350      	muls	r0, r2
 8002a16:	4372      	muls	r2, r6
 8002a18:	444a      	add	r2, r9
 8002a1a:	4452      	add	r2, sl
 8002a1c:	4591      	cmp	r9, r2
 8002a1e:	d903      	bls.n	8002a28 <__aeabi_dmul+0x400>
 8002a20:	2580      	movs	r5, #128	@ 0x80
 8002a22:	026d      	lsls	r5, r5, #9
 8002a24:	46a9      	mov	r9, r5
 8002a26:	4448      	add	r0, r9
 8002a28:	0c15      	lsrs	r5, r2, #16
 8002a2a:	46a9      	mov	r9, r5
 8002a2c:	4645      	mov	r5, r8
 8002a2e:	042d      	lsls	r5, r5, #16
 8002a30:	0c2d      	lsrs	r5, r5, #16
 8002a32:	46a8      	mov	r8, r5
 8002a34:	4665      	mov	r5, ip
 8002a36:	437d      	muls	r5, r7
 8002a38:	0412      	lsls	r2, r2, #16
 8002a3a:	4448      	add	r0, r9
 8002a3c:	4490      	add	r8, r2
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	0032      	movs	r2, r6
 8002a42:	4665      	mov	r5, ip
 8002a44:	4362      	muls	r2, r4
 8002a46:	436e      	muls	r6, r5
 8002a48:	437c      	muls	r4, r7
 8002a4a:	0c17      	lsrs	r7, r2, #16
 8002a4c:	1936      	adds	r6, r6, r4
 8002a4e:	19bf      	adds	r7, r7, r6
 8002a50:	42bc      	cmp	r4, r7
 8002a52:	d903      	bls.n	8002a5c <__aeabi_dmul+0x434>
 8002a54:	2480      	movs	r4, #128	@ 0x80
 8002a56:	0264      	lsls	r4, r4, #9
 8002a58:	46a4      	mov	ip, r4
 8002a5a:	44e1      	add	r9, ip
 8002a5c:	9c02      	ldr	r4, [sp, #8]
 8002a5e:	9e03      	ldr	r6, [sp, #12]
 8002a60:	46a4      	mov	ip, r4
 8002a62:	9d05      	ldr	r5, [sp, #20]
 8002a64:	4466      	add	r6, ip
 8002a66:	428e      	cmp	r6, r1
 8002a68:	4189      	sbcs	r1, r1
 8002a6a:	46ac      	mov	ip, r5
 8002a6c:	0412      	lsls	r2, r2, #16
 8002a6e:	043c      	lsls	r4, r7, #16
 8002a70:	0c12      	lsrs	r2, r2, #16
 8002a72:	18a2      	adds	r2, r4, r2
 8002a74:	4462      	add	r2, ip
 8002a76:	4249      	negs	r1, r1
 8002a78:	1854      	adds	r4, r2, r1
 8002a7a:	4446      	add	r6, r8
 8002a7c:	46a4      	mov	ip, r4
 8002a7e:	4546      	cmp	r6, r8
 8002a80:	41a4      	sbcs	r4, r4
 8002a82:	4682      	mov	sl, r0
 8002a84:	4264      	negs	r4, r4
 8002a86:	46a0      	mov	r8, r4
 8002a88:	42aa      	cmp	r2, r5
 8002a8a:	4192      	sbcs	r2, r2
 8002a8c:	458c      	cmp	ip, r1
 8002a8e:	4189      	sbcs	r1, r1
 8002a90:	44e2      	add	sl, ip
 8002a92:	44d0      	add	r8, sl
 8002a94:	4249      	negs	r1, r1
 8002a96:	4252      	negs	r2, r2
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	45a0      	cmp	r8, r4
 8002a9c:	41a4      	sbcs	r4, r4
 8002a9e:	4582      	cmp	sl, r0
 8002aa0:	4189      	sbcs	r1, r1
 8002aa2:	4264      	negs	r4, r4
 8002aa4:	4249      	negs	r1, r1
 8002aa6:	430c      	orrs	r4, r1
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	0c3f      	lsrs	r7, r7, #16
 8002aac:	19d2      	adds	r2, r2, r7
 8002aae:	1912      	adds	r2, r2, r4
 8002ab0:	0dcc      	lsrs	r4, r1, #23
 8002ab2:	9904      	ldr	r1, [sp, #16]
 8002ab4:	0270      	lsls	r0, r6, #9
 8002ab6:	4308      	orrs	r0, r1
 8002ab8:	1e41      	subs	r1, r0, #1
 8002aba:	4188      	sbcs	r0, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	444a      	add	r2, r9
 8002ac0:	0df6      	lsrs	r6, r6, #23
 8002ac2:	0252      	lsls	r2, r2, #9
 8002ac4:	4330      	orrs	r0, r6
 8002ac6:	0249      	lsls	r1, r1, #9
 8002ac8:	4314      	orrs	r4, r2
 8002aca:	4308      	orrs	r0, r1
 8002acc:	01d2      	lsls	r2, r2, #7
 8002ace:	d535      	bpl.n	8002b3c <__aeabi_dmul+0x514>
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	0843      	lsrs	r3, r0, #1
 8002ad4:	4002      	ands	r2, r0
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	07e0      	lsls	r0, r4, #31
 8002ada:	4318      	orrs	r0, r3
 8002adc:	0864      	lsrs	r4, r4, #1
 8002ade:	e634      	b.n	800274a <__aeabi_dmul+0x122>
 8002ae0:	9b00      	ldr	r3, [sp, #0]
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	469b      	mov	fp, r3
 8002ae6:	4681      	mov	r9, r0
 8002ae8:	2480      	movs	r4, #128	@ 0x80
 8002aea:	4653      	mov	r3, sl
 8002aec:	0324      	lsls	r4, r4, #12
 8002aee:	431c      	orrs	r4, r3
 8002af0:	0324      	lsls	r4, r4, #12
 8002af2:	464a      	mov	r2, r9
 8002af4:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <__aeabi_dmul+0x588>)
 8002af6:	0b24      	lsrs	r4, r4, #12
 8002af8:	e5ec      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002afa:	f000 fd75 	bl	80035e8 <__clzsi2>
 8002afe:	2315      	movs	r3, #21
 8002b00:	469c      	mov	ip, r3
 8002b02:	4484      	add	ip, r0
 8002b04:	0002      	movs	r2, r0
 8002b06:	4663      	mov	r3, ip
 8002b08:	3220      	adds	r2, #32
 8002b0a:	2b1c      	cmp	r3, #28
 8002b0c:	dc00      	bgt.n	8002b10 <__aeabi_dmul+0x4e8>
 8002b0e:	e684      	b.n	800281a <__aeabi_dmul+0x1f2>
 8002b10:	2300      	movs	r3, #0
 8002b12:	4699      	mov	r9, r3
 8002b14:	0023      	movs	r3, r4
 8002b16:	3808      	subs	r0, #8
 8002b18:	4083      	lsls	r3, r0
 8002b1a:	469a      	mov	sl, r3
 8002b1c:	e68e      	b.n	800283c <__aeabi_dmul+0x214>
 8002b1e:	f000 fd63 	bl	80035e8 <__clzsi2>
 8002b22:	0002      	movs	r2, r0
 8002b24:	0003      	movs	r3, r0
 8002b26:	3215      	adds	r2, #21
 8002b28:	3320      	adds	r3, #32
 8002b2a:	2a1c      	cmp	r2, #28
 8002b2c:	dc00      	bgt.n	8002b30 <__aeabi_dmul+0x508>
 8002b2e:	e64e      	b.n	80027ce <__aeabi_dmul+0x1a6>
 8002b30:	0002      	movs	r2, r0
 8002b32:	0034      	movs	r4, r6
 8002b34:	3a08      	subs	r2, #8
 8002b36:	2000      	movs	r0, #0
 8002b38:	4094      	lsls	r4, r2
 8002b3a:	e652      	b.n	80027e2 <__aeabi_dmul+0x1ba>
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	e604      	b.n	800274a <__aeabi_dmul+0x122>
 8002b40:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <__aeabi_dmul+0x58c>)
 8002b42:	0021      	movs	r1, r4
 8002b44:	469c      	mov	ip, r3
 8002b46:	0003      	movs	r3, r0
 8002b48:	9d01      	ldr	r5, [sp, #4]
 8002b4a:	40d3      	lsrs	r3, r2
 8002b4c:	4465      	add	r5, ip
 8002b4e:	40a9      	lsls	r1, r5
 8002b50:	4319      	orrs	r1, r3
 8002b52:	0003      	movs	r3, r0
 8002b54:	40ab      	lsls	r3, r5
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	4183      	sbcs	r3, r0
 8002b5a:	4319      	orrs	r1, r3
 8002b5c:	0008      	movs	r0, r1
 8002b5e:	40d4      	lsrs	r4, r2
 8002b60:	074b      	lsls	r3, r1, #29
 8002b62:	d009      	beq.n	8002b78 <__aeabi_dmul+0x550>
 8002b64:	230f      	movs	r3, #15
 8002b66:	400b      	ands	r3, r1
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d005      	beq.n	8002b78 <__aeabi_dmul+0x550>
 8002b6c:	1d0b      	adds	r3, r1, #4
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	4180      	sbcs	r0, r0
 8002b72:	4240      	negs	r0, r0
 8002b74:	1824      	adds	r4, r4, r0
 8002b76:	0018      	movs	r0, r3
 8002b78:	0223      	lsls	r3, r4, #8
 8002b7a:	d400      	bmi.n	8002b7e <__aeabi_dmul+0x556>
 8002b7c:	e6d6      	b.n	800292c <__aeabi_dmul+0x304>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	2400      	movs	r4, #0
 8002b82:	2200      	movs	r2, #0
 8002b84:	e5a6      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002b86:	290f      	cmp	r1, #15
 8002b88:	d1aa      	bne.n	8002ae0 <__aeabi_dmul+0x4b8>
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	031b      	lsls	r3, r3, #12
 8002b90:	421a      	tst	r2, r3
 8002b92:	d0a9      	beq.n	8002ae8 <__aeabi_dmul+0x4c0>
 8002b94:	421c      	tst	r4, r3
 8002b96:	d1a7      	bne.n	8002ae8 <__aeabi_dmul+0x4c0>
 8002b98:	431c      	orrs	r4, r3
 8002b9a:	9b00      	ldr	r3, [sp, #0]
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	469b      	mov	fp, r3
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <__aeabi_dmul+0x588>)
 8002ba2:	e597      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002ba4:	2400      	movs	r4, #0
 8002ba6:	e6c1      	b.n	800292c <__aeabi_dmul+0x304>
 8002ba8:	2400      	movs	r4, #0
 8002baa:	4b01      	ldr	r3, [pc, #4]	@ (8002bb0 <__aeabi_dmul+0x588>)
 8002bac:	0022      	movs	r2, r4
 8002bae:	e591      	b.n	80026d4 <__aeabi_dmul+0xac>
 8002bb0:	000007ff 	.word	0x000007ff
 8002bb4:	0000041e 	.word	0x0000041e

08002bb8 <__aeabi_dsub>:
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	464e      	mov	r6, r9
 8002bbc:	4645      	mov	r5, r8
 8002bbe:	46de      	mov	lr, fp
 8002bc0:	4657      	mov	r7, sl
 8002bc2:	b5e0      	push	{r5, r6, r7, lr}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	9000      	str	r0, [sp, #0]
 8002bc8:	9101      	str	r1, [sp, #4]
 8002bca:	030c      	lsls	r4, r1, #12
 8002bcc:	004f      	lsls	r7, r1, #1
 8002bce:	0fce      	lsrs	r6, r1, #31
 8002bd0:	0a61      	lsrs	r1, r4, #9
 8002bd2:	9c00      	ldr	r4, [sp, #0]
 8002bd4:	46b0      	mov	r8, r6
 8002bd6:	0f64      	lsrs	r4, r4, #29
 8002bd8:	430c      	orrs	r4, r1
 8002bda:	9900      	ldr	r1, [sp, #0]
 8002bdc:	0d7f      	lsrs	r7, r7, #21
 8002bde:	00c8      	lsls	r0, r1, #3
 8002be0:	0011      	movs	r1, r2
 8002be2:	001a      	movs	r2, r3
 8002be4:	031b      	lsls	r3, r3, #12
 8002be6:	469c      	mov	ip, r3
 8002be8:	9100      	str	r1, [sp, #0]
 8002bea:	9201      	str	r2, [sp, #4]
 8002bec:	0051      	lsls	r1, r2, #1
 8002bee:	0d4b      	lsrs	r3, r1, #21
 8002bf0:	4699      	mov	r9, r3
 8002bf2:	9b01      	ldr	r3, [sp, #4]
 8002bf4:	9d00      	ldr	r5, [sp, #0]
 8002bf6:	0fd9      	lsrs	r1, r3, #31
 8002bf8:	4663      	mov	r3, ip
 8002bfa:	0f6a      	lsrs	r2, r5, #29
 8002bfc:	0a5b      	lsrs	r3, r3, #9
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	00ea      	lsls	r2, r5, #3
 8002c02:	4694      	mov	ip, r2
 8002c04:	4693      	mov	fp, r2
 8002c06:	4ac1      	ldr	r2, [pc, #772]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002c08:	9003      	str	r0, [sp, #12]
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	4591      	cmp	r9, r2
 8002c0e:	d100      	bne.n	8002c12 <__aeabi_dsub+0x5a>
 8002c10:	e0cd      	b.n	8002dae <__aeabi_dsub+0x1f6>
 8002c12:	2501      	movs	r5, #1
 8002c14:	4069      	eors	r1, r5
 8002c16:	464d      	mov	r5, r9
 8002c18:	1b7d      	subs	r5, r7, r5
 8002c1a:	46aa      	mov	sl, r5
 8002c1c:	428e      	cmp	r6, r1
 8002c1e:	d100      	bne.n	8002c22 <__aeabi_dsub+0x6a>
 8002c20:	e080      	b.n	8002d24 <__aeabi_dsub+0x16c>
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	dc00      	bgt.n	8002c28 <__aeabi_dsub+0x70>
 8002c26:	e335      	b.n	8003294 <__aeabi_dsub+0x6dc>
 8002c28:	4649      	mov	r1, r9
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d100      	bne.n	8002c30 <__aeabi_dsub+0x78>
 8002c2e:	e0df      	b.n	8002df0 <__aeabi_dsub+0x238>
 8002c30:	4297      	cmp	r7, r2
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x7e>
 8002c34:	e194      	b.n	8002f60 <__aeabi_dsub+0x3a8>
 8002c36:	4652      	mov	r2, sl
 8002c38:	2501      	movs	r5, #1
 8002c3a:	2a38      	cmp	r2, #56	@ 0x38
 8002c3c:	dc19      	bgt.n	8002c72 <__aeabi_dsub+0xba>
 8002c3e:	2280      	movs	r2, #128	@ 0x80
 8002c40:	9b02      	ldr	r3, [sp, #8]
 8002c42:	0412      	lsls	r2, r2, #16
 8002c44:	4313      	orrs	r3, r2
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	4652      	mov	r2, sl
 8002c4a:	2a1f      	cmp	r2, #31
 8002c4c:	dd00      	ble.n	8002c50 <__aeabi_dsub+0x98>
 8002c4e:	e1e3      	b.n	8003018 <__aeabi_dsub+0x460>
 8002c50:	4653      	mov	r3, sl
 8002c52:	2220      	movs	r2, #32
 8002c54:	4661      	mov	r1, ip
 8002c56:	9d02      	ldr	r5, [sp, #8]
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	4095      	lsls	r5, r2
 8002c5c:	40d9      	lsrs	r1, r3
 8002c5e:	430d      	orrs	r5, r1
 8002c60:	4661      	mov	r1, ip
 8002c62:	4091      	lsls	r1, r2
 8002c64:	000a      	movs	r2, r1
 8002c66:	1e51      	subs	r1, r2, #1
 8002c68:	418a      	sbcs	r2, r1
 8002c6a:	4315      	orrs	r5, r2
 8002c6c:	9a02      	ldr	r2, [sp, #8]
 8002c6e:	40da      	lsrs	r2, r3
 8002c70:	1aa4      	subs	r4, r4, r2
 8002c72:	1b45      	subs	r5, r0, r5
 8002c74:	42a8      	cmp	r0, r5
 8002c76:	4180      	sbcs	r0, r0
 8002c78:	4240      	negs	r0, r0
 8002c7a:	1a24      	subs	r4, r4, r0
 8002c7c:	0223      	lsls	r3, r4, #8
 8002c7e:	d400      	bmi.n	8002c82 <__aeabi_dsub+0xca>
 8002c80:	e13d      	b.n	8002efe <__aeabi_dsub+0x346>
 8002c82:	0264      	lsls	r4, r4, #9
 8002c84:	0a64      	lsrs	r4, r4, #9
 8002c86:	2c00      	cmp	r4, #0
 8002c88:	d100      	bne.n	8002c8c <__aeabi_dsub+0xd4>
 8002c8a:	e147      	b.n	8002f1c <__aeabi_dsub+0x364>
 8002c8c:	0020      	movs	r0, r4
 8002c8e:	f000 fcab 	bl	80035e8 <__clzsi2>
 8002c92:	0003      	movs	r3, r0
 8002c94:	3b08      	subs	r3, #8
 8002c96:	2120      	movs	r1, #32
 8002c98:	0028      	movs	r0, r5
 8002c9a:	1aca      	subs	r2, r1, r3
 8002c9c:	40d0      	lsrs	r0, r2
 8002c9e:	409c      	lsls	r4, r3
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	409d      	lsls	r5, r3
 8002ca4:	4322      	orrs	r2, r4
 8002ca6:	429f      	cmp	r7, r3
 8002ca8:	dd00      	ble.n	8002cac <__aeabi_dsub+0xf4>
 8002caa:	e177      	b.n	8002f9c <__aeabi_dsub+0x3e4>
 8002cac:	1bd8      	subs	r0, r3, r7
 8002cae:	3001      	adds	r0, #1
 8002cb0:	1a09      	subs	r1, r1, r0
 8002cb2:	002c      	movs	r4, r5
 8002cb4:	408d      	lsls	r5, r1
 8002cb6:	40c4      	lsrs	r4, r0
 8002cb8:	1e6b      	subs	r3, r5, #1
 8002cba:	419d      	sbcs	r5, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	40c2      	lsrs	r2, r0
 8002cc0:	408b      	lsls	r3, r1
 8002cc2:	4325      	orrs	r5, r4
 8002cc4:	2700      	movs	r7, #0
 8002cc6:	0014      	movs	r4, r2
 8002cc8:	431d      	orrs	r5, r3
 8002cca:	076b      	lsls	r3, r5, #29
 8002ccc:	d009      	beq.n	8002ce2 <__aeabi_dsub+0x12a>
 8002cce:	230f      	movs	r3, #15
 8002cd0:	402b      	ands	r3, r5
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d005      	beq.n	8002ce2 <__aeabi_dsub+0x12a>
 8002cd6:	1d2b      	adds	r3, r5, #4
 8002cd8:	42ab      	cmp	r3, r5
 8002cda:	41ad      	sbcs	r5, r5
 8002cdc:	426d      	negs	r5, r5
 8002cde:	1964      	adds	r4, r4, r5
 8002ce0:	001d      	movs	r5, r3
 8002ce2:	0223      	lsls	r3, r4, #8
 8002ce4:	d400      	bmi.n	8002ce8 <__aeabi_dsub+0x130>
 8002ce6:	e140      	b.n	8002f6a <__aeabi_dsub+0x3b2>
 8002ce8:	4a88      	ldr	r2, [pc, #544]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002cea:	3701      	adds	r7, #1
 8002cec:	4297      	cmp	r7, r2
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x13a>
 8002cf0:	e101      	b.n	8002ef6 <__aeabi_dsub+0x33e>
 8002cf2:	2601      	movs	r6, #1
 8002cf4:	4643      	mov	r3, r8
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dsub+0x358>)
 8002cf8:	08ed      	lsrs	r5, r5, #3
 8002cfa:	4021      	ands	r1, r4
 8002cfc:	074a      	lsls	r2, r1, #29
 8002cfe:	432a      	orrs	r2, r5
 8002d00:	057c      	lsls	r4, r7, #21
 8002d02:	024d      	lsls	r5, r1, #9
 8002d04:	0b2d      	lsrs	r5, r5, #12
 8002d06:	0d64      	lsrs	r4, r4, #21
 8002d08:	401e      	ands	r6, r3
 8002d0a:	0524      	lsls	r4, r4, #20
 8002d0c:	432c      	orrs	r4, r5
 8002d0e:	07f6      	lsls	r6, r6, #31
 8002d10:	4334      	orrs	r4, r6
 8002d12:	0010      	movs	r0, r2
 8002d14:	0021      	movs	r1, r4
 8002d16:	b005      	add	sp, #20
 8002d18:	bcf0      	pop	{r4, r5, r6, r7}
 8002d1a:	46bb      	mov	fp, r7
 8002d1c:	46b2      	mov	sl, r6
 8002d1e:	46a9      	mov	r9, r5
 8002d20:	46a0      	mov	r8, r4
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	2d00      	cmp	r5, #0
 8002d26:	dc00      	bgt.n	8002d2a <__aeabi_dsub+0x172>
 8002d28:	e2d0      	b.n	80032cc <__aeabi_dsub+0x714>
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	d000      	beq.n	8002d32 <__aeabi_dsub+0x17a>
 8002d30:	e0d4      	b.n	8002edc <__aeabi_dsub+0x324>
 8002d32:	4661      	mov	r1, ip
 8002d34:	9b02      	ldr	r3, [sp, #8]
 8002d36:	4319      	orrs	r1, r3
 8002d38:	d100      	bne.n	8002d3c <__aeabi_dsub+0x184>
 8002d3a:	e12b      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8002d3c:	1e69      	subs	r1, r5, #1
 8002d3e:	2d01      	cmp	r5, #1
 8002d40:	d100      	bne.n	8002d44 <__aeabi_dsub+0x18c>
 8002d42:	e1d9      	b.n	80030f8 <__aeabi_dsub+0x540>
 8002d44:	4295      	cmp	r5, r2
 8002d46:	d100      	bne.n	8002d4a <__aeabi_dsub+0x192>
 8002d48:	e10a      	b.n	8002f60 <__aeabi_dsub+0x3a8>
 8002d4a:	2501      	movs	r5, #1
 8002d4c:	2938      	cmp	r1, #56	@ 0x38
 8002d4e:	dc17      	bgt.n	8002d80 <__aeabi_dsub+0x1c8>
 8002d50:	468a      	mov	sl, r1
 8002d52:	4653      	mov	r3, sl
 8002d54:	2b1f      	cmp	r3, #31
 8002d56:	dd00      	ble.n	8002d5a <__aeabi_dsub+0x1a2>
 8002d58:	e1e7      	b.n	800312a <__aeabi_dsub+0x572>
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	9b02      	ldr	r3, [sp, #8]
 8002d60:	4661      	mov	r1, ip
 8002d62:	4093      	lsls	r3, r2
 8002d64:	001d      	movs	r5, r3
 8002d66:	4653      	mov	r3, sl
 8002d68:	40d9      	lsrs	r1, r3
 8002d6a:	4663      	mov	r3, ip
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	001a      	movs	r2, r3
 8002d70:	430d      	orrs	r5, r1
 8002d72:	1e51      	subs	r1, r2, #1
 8002d74:	418a      	sbcs	r2, r1
 8002d76:	4653      	mov	r3, sl
 8002d78:	4315      	orrs	r5, r2
 8002d7a:	9a02      	ldr	r2, [sp, #8]
 8002d7c:	40da      	lsrs	r2, r3
 8002d7e:	18a4      	adds	r4, r4, r2
 8002d80:	182d      	adds	r5, r5, r0
 8002d82:	4285      	cmp	r5, r0
 8002d84:	4180      	sbcs	r0, r0
 8002d86:	4240      	negs	r0, r0
 8002d88:	1824      	adds	r4, r4, r0
 8002d8a:	0223      	lsls	r3, r4, #8
 8002d8c:	d400      	bmi.n	8002d90 <__aeabi_dsub+0x1d8>
 8002d8e:	e0b6      	b.n	8002efe <__aeabi_dsub+0x346>
 8002d90:	4b5e      	ldr	r3, [pc, #376]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002d92:	3701      	adds	r7, #1
 8002d94:	429f      	cmp	r7, r3
 8002d96:	d100      	bne.n	8002d9a <__aeabi_dsub+0x1e2>
 8002d98:	e0ad      	b.n	8002ef6 <__aeabi_dsub+0x33e>
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8002f10 <__aeabi_dsub+0x358>)
 8002d9e:	086a      	lsrs	r2, r5, #1
 8002da0:	401c      	ands	r4, r3
 8002da2:	4029      	ands	r1, r5
 8002da4:	430a      	orrs	r2, r1
 8002da6:	07e5      	lsls	r5, r4, #31
 8002da8:	4315      	orrs	r5, r2
 8002daa:	0864      	lsrs	r4, r4, #1
 8002dac:	e78d      	b.n	8002cca <__aeabi_dsub+0x112>
 8002dae:	4a59      	ldr	r2, [pc, #356]	@ (8002f14 <__aeabi_dsub+0x35c>)
 8002db0:	9b02      	ldr	r3, [sp, #8]
 8002db2:	4692      	mov	sl, r2
 8002db4:	4662      	mov	r2, ip
 8002db6:	44ba      	add	sl, r7
 8002db8:	431a      	orrs	r2, r3
 8002dba:	d02c      	beq.n	8002e16 <__aeabi_dsub+0x25e>
 8002dbc:	428e      	cmp	r6, r1
 8002dbe:	d02e      	beq.n	8002e1e <__aeabi_dsub+0x266>
 8002dc0:	4652      	mov	r2, sl
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	d060      	beq.n	8002e88 <__aeabi_dsub+0x2d0>
 8002dc6:	2f00      	cmp	r7, #0
 8002dc8:	d100      	bne.n	8002dcc <__aeabi_dsub+0x214>
 8002dca:	e0db      	b.n	8002f84 <__aeabi_dsub+0x3cc>
 8002dcc:	4663      	mov	r3, ip
 8002dce:	000e      	movs	r6, r1
 8002dd0:	9c02      	ldr	r4, [sp, #8]
 8002dd2:	08d8      	lsrs	r0, r3, #3
 8002dd4:	0762      	lsls	r2, r4, #29
 8002dd6:	4302      	orrs	r2, r0
 8002dd8:	08e4      	lsrs	r4, r4, #3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	4323      	orrs	r3, r4
 8002dde:	d100      	bne.n	8002de2 <__aeabi_dsub+0x22a>
 8002de0:	e254      	b.n	800328c <__aeabi_dsub+0x6d4>
 8002de2:	2580      	movs	r5, #128	@ 0x80
 8002de4:	032d      	lsls	r5, r5, #12
 8002de6:	4325      	orrs	r5, r4
 8002de8:	032d      	lsls	r5, r5, #12
 8002dea:	4c48      	ldr	r4, [pc, #288]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002dec:	0b2d      	lsrs	r5, r5, #12
 8002dee:	e78c      	b.n	8002d0a <__aeabi_dsub+0x152>
 8002df0:	4661      	mov	r1, ip
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	4319      	orrs	r1, r3
 8002df6:	d100      	bne.n	8002dfa <__aeabi_dsub+0x242>
 8002df8:	e0cc      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8002dfa:	0029      	movs	r1, r5
 8002dfc:	3901      	subs	r1, #1
 8002dfe:	2d01      	cmp	r5, #1
 8002e00:	d100      	bne.n	8002e04 <__aeabi_dsub+0x24c>
 8002e02:	e188      	b.n	8003116 <__aeabi_dsub+0x55e>
 8002e04:	4295      	cmp	r5, r2
 8002e06:	d100      	bne.n	8002e0a <__aeabi_dsub+0x252>
 8002e08:	e0aa      	b.n	8002f60 <__aeabi_dsub+0x3a8>
 8002e0a:	2501      	movs	r5, #1
 8002e0c:	2938      	cmp	r1, #56	@ 0x38
 8002e0e:	dd00      	ble.n	8002e12 <__aeabi_dsub+0x25a>
 8002e10:	e72f      	b.n	8002c72 <__aeabi_dsub+0xba>
 8002e12:	468a      	mov	sl, r1
 8002e14:	e718      	b.n	8002c48 <__aeabi_dsub+0x90>
 8002e16:	2201      	movs	r2, #1
 8002e18:	4051      	eors	r1, r2
 8002e1a:	428e      	cmp	r6, r1
 8002e1c:	d1d0      	bne.n	8002dc0 <__aeabi_dsub+0x208>
 8002e1e:	4653      	mov	r3, sl
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d100      	bne.n	8002e26 <__aeabi_dsub+0x26e>
 8002e24:	e0be      	b.n	8002fa4 <__aeabi_dsub+0x3ec>
 8002e26:	2f00      	cmp	r7, #0
 8002e28:	d000      	beq.n	8002e2c <__aeabi_dsub+0x274>
 8002e2a:	e138      	b.n	800309e <__aeabi_dsub+0x4e6>
 8002e2c:	46ca      	mov	sl, r9
 8002e2e:	0022      	movs	r2, r4
 8002e30:	4302      	orrs	r2, r0
 8002e32:	d100      	bne.n	8002e36 <__aeabi_dsub+0x27e>
 8002e34:	e1e2      	b.n	80031fc <__aeabi_dsub+0x644>
 8002e36:	4653      	mov	r3, sl
 8002e38:	1e59      	subs	r1, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d100      	bne.n	8002e40 <__aeabi_dsub+0x288>
 8002e3e:	e20d      	b.n	800325c <__aeabi_dsub+0x6a4>
 8002e40:	4a32      	ldr	r2, [pc, #200]	@ (8002f0c <__aeabi_dsub+0x354>)
 8002e42:	4592      	cmp	sl, r2
 8002e44:	d100      	bne.n	8002e48 <__aeabi_dsub+0x290>
 8002e46:	e1d2      	b.n	80031ee <__aeabi_dsub+0x636>
 8002e48:	2701      	movs	r7, #1
 8002e4a:	2938      	cmp	r1, #56	@ 0x38
 8002e4c:	dc13      	bgt.n	8002e76 <__aeabi_dsub+0x2be>
 8002e4e:	291f      	cmp	r1, #31
 8002e50:	dd00      	ble.n	8002e54 <__aeabi_dsub+0x29c>
 8002e52:	e1ee      	b.n	8003232 <__aeabi_dsub+0x67a>
 8002e54:	2220      	movs	r2, #32
 8002e56:	9b02      	ldr	r3, [sp, #8]
 8002e58:	1a52      	subs	r2, r2, r1
 8002e5a:	0025      	movs	r5, r4
 8002e5c:	0007      	movs	r7, r0
 8002e5e:	469a      	mov	sl, r3
 8002e60:	40cc      	lsrs	r4, r1
 8002e62:	4090      	lsls	r0, r2
 8002e64:	4095      	lsls	r5, r2
 8002e66:	40cf      	lsrs	r7, r1
 8002e68:	44a2      	add	sl, r4
 8002e6a:	1e42      	subs	r2, r0, #1
 8002e6c:	4190      	sbcs	r0, r2
 8002e6e:	4653      	mov	r3, sl
 8002e70:	432f      	orrs	r7, r5
 8002e72:	4307      	orrs	r7, r0
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	003d      	movs	r5, r7
 8002e78:	4465      	add	r5, ip
 8002e7a:	4565      	cmp	r5, ip
 8002e7c:	4192      	sbcs	r2, r2
 8002e7e:	9b02      	ldr	r3, [sp, #8]
 8002e80:	4252      	negs	r2, r2
 8002e82:	464f      	mov	r7, r9
 8002e84:	18d4      	adds	r4, r2, r3
 8002e86:	e780      	b.n	8002d8a <__aeabi_dsub+0x1d2>
 8002e88:	4a23      	ldr	r2, [pc, #140]	@ (8002f18 <__aeabi_dsub+0x360>)
 8002e8a:	1c7d      	adds	r5, r7, #1
 8002e8c:	4215      	tst	r5, r2
 8002e8e:	d000      	beq.n	8002e92 <__aeabi_dsub+0x2da>
 8002e90:	e0aa      	b.n	8002fe8 <__aeabi_dsub+0x430>
 8002e92:	4662      	mov	r2, ip
 8002e94:	0025      	movs	r5, r4
 8002e96:	9b02      	ldr	r3, [sp, #8]
 8002e98:	4305      	orrs	r5, r0
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	2f00      	cmp	r7, #0
 8002e9e:	d000      	beq.n	8002ea2 <__aeabi_dsub+0x2ea>
 8002ea0:	e0f5      	b.n	800308e <__aeabi_dsub+0x4d6>
 8002ea2:	2d00      	cmp	r5, #0
 8002ea4:	d100      	bne.n	8002ea8 <__aeabi_dsub+0x2f0>
 8002ea6:	e16b      	b.n	8003180 <__aeabi_dsub+0x5c8>
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d100      	bne.n	8002eae <__aeabi_dsub+0x2f6>
 8002eac:	e152      	b.n	8003154 <__aeabi_dsub+0x59c>
 8002eae:	4663      	mov	r3, ip
 8002eb0:	1ac5      	subs	r5, r0, r3
 8002eb2:	9b02      	ldr	r3, [sp, #8]
 8002eb4:	1ae2      	subs	r2, r4, r3
 8002eb6:	42a8      	cmp	r0, r5
 8002eb8:	419b      	sbcs	r3, r3
 8002eba:	425b      	negs	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	d400      	bmi.n	8002ec4 <__aeabi_dsub+0x30c>
 8002ec2:	e1d5      	b.n	8003270 <__aeabi_dsub+0x6b8>
 8002ec4:	4663      	mov	r3, ip
 8002ec6:	1a1d      	subs	r5, r3, r0
 8002ec8:	45ac      	cmp	ip, r5
 8002eca:	4192      	sbcs	r2, r2
 8002ecc:	2601      	movs	r6, #1
 8002ece:	9b02      	ldr	r3, [sp, #8]
 8002ed0:	4252      	negs	r2, r2
 8002ed2:	1b1c      	subs	r4, r3, r4
 8002ed4:	4688      	mov	r8, r1
 8002ed6:	1aa4      	subs	r4, r4, r2
 8002ed8:	400e      	ands	r6, r1
 8002eda:	e6f6      	b.n	8002cca <__aeabi_dsub+0x112>
 8002edc:	4297      	cmp	r7, r2
 8002ede:	d03f      	beq.n	8002f60 <__aeabi_dsub+0x3a8>
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	2501      	movs	r5, #1
 8002ee4:	2a38      	cmp	r2, #56	@ 0x38
 8002ee6:	dd00      	ble.n	8002eea <__aeabi_dsub+0x332>
 8002ee8:	e74a      	b.n	8002d80 <__aeabi_dsub+0x1c8>
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	9b02      	ldr	r3, [sp, #8]
 8002eee:	0412      	lsls	r2, r2, #16
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	e72d      	b.n	8002d52 <__aeabi_dsub+0x19a>
 8002ef6:	003c      	movs	r4, r7
 8002ef8:	2500      	movs	r5, #0
 8002efa:	2200      	movs	r2, #0
 8002efc:	e705      	b.n	8002d0a <__aeabi_dsub+0x152>
 8002efe:	2307      	movs	r3, #7
 8002f00:	402b      	ands	r3, r5
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d000      	beq.n	8002f08 <__aeabi_dsub+0x350>
 8002f06:	e6e2      	b.n	8002cce <__aeabi_dsub+0x116>
 8002f08:	e06b      	b.n	8002fe2 <__aeabi_dsub+0x42a>
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	000007ff 	.word	0x000007ff
 8002f10:	ff7fffff 	.word	0xff7fffff
 8002f14:	fffff801 	.word	0xfffff801
 8002f18:	000007fe 	.word	0x000007fe
 8002f1c:	0028      	movs	r0, r5
 8002f1e:	f000 fb63 	bl	80035e8 <__clzsi2>
 8002f22:	0003      	movs	r3, r0
 8002f24:	3318      	adds	r3, #24
 8002f26:	2b1f      	cmp	r3, #31
 8002f28:	dc00      	bgt.n	8002f2c <__aeabi_dsub+0x374>
 8002f2a:	e6b4      	b.n	8002c96 <__aeabi_dsub+0xde>
 8002f2c:	002a      	movs	r2, r5
 8002f2e:	3808      	subs	r0, #8
 8002f30:	4082      	lsls	r2, r0
 8002f32:	429f      	cmp	r7, r3
 8002f34:	dd00      	ble.n	8002f38 <__aeabi_dsub+0x380>
 8002f36:	e0b9      	b.n	80030ac <__aeabi_dsub+0x4f4>
 8002f38:	1bdb      	subs	r3, r3, r7
 8002f3a:	1c58      	adds	r0, r3, #1
 8002f3c:	281f      	cmp	r0, #31
 8002f3e:	dc00      	bgt.n	8002f42 <__aeabi_dsub+0x38a>
 8002f40:	e1a0      	b.n	8003284 <__aeabi_dsub+0x6cc>
 8002f42:	0015      	movs	r5, r2
 8002f44:	3b1f      	subs	r3, #31
 8002f46:	40dd      	lsrs	r5, r3
 8002f48:	2820      	cmp	r0, #32
 8002f4a:	d005      	beq.n	8002f58 <__aeabi_dsub+0x3a0>
 8002f4c:	2340      	movs	r3, #64	@ 0x40
 8002f4e:	1a1b      	subs	r3, r3, r0
 8002f50:	409a      	lsls	r2, r3
 8002f52:	1e53      	subs	r3, r2, #1
 8002f54:	419a      	sbcs	r2, r3
 8002f56:	4315      	orrs	r5, r2
 8002f58:	2307      	movs	r3, #7
 8002f5a:	2700      	movs	r7, #0
 8002f5c:	402b      	ands	r3, r5
 8002f5e:	e7d0      	b.n	8002f02 <__aeabi_dsub+0x34a>
 8002f60:	08c0      	lsrs	r0, r0, #3
 8002f62:	0762      	lsls	r2, r4, #29
 8002f64:	4302      	orrs	r2, r0
 8002f66:	08e4      	lsrs	r4, r4, #3
 8002f68:	e737      	b.n	8002dda <__aeabi_dsub+0x222>
 8002f6a:	08ea      	lsrs	r2, r5, #3
 8002f6c:	0763      	lsls	r3, r4, #29
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	4bd3      	ldr	r3, [pc, #844]	@ (80032c0 <__aeabi_dsub+0x708>)
 8002f72:	08e4      	lsrs	r4, r4, #3
 8002f74:	429f      	cmp	r7, r3
 8002f76:	d100      	bne.n	8002f7a <__aeabi_dsub+0x3c2>
 8002f78:	e72f      	b.n	8002dda <__aeabi_dsub+0x222>
 8002f7a:	0324      	lsls	r4, r4, #12
 8002f7c:	0b25      	lsrs	r5, r4, #12
 8002f7e:	057c      	lsls	r4, r7, #21
 8002f80:	0d64      	lsrs	r4, r4, #21
 8002f82:	e6c2      	b.n	8002d0a <__aeabi_dsub+0x152>
 8002f84:	46ca      	mov	sl, r9
 8002f86:	0022      	movs	r2, r4
 8002f88:	4302      	orrs	r2, r0
 8002f8a:	d158      	bne.n	800303e <__aeabi_dsub+0x486>
 8002f8c:	4663      	mov	r3, ip
 8002f8e:	000e      	movs	r6, r1
 8002f90:	9c02      	ldr	r4, [sp, #8]
 8002f92:	9303      	str	r3, [sp, #12]
 8002f94:	9b03      	ldr	r3, [sp, #12]
 8002f96:	4657      	mov	r7, sl
 8002f98:	08da      	lsrs	r2, r3, #3
 8002f9a:	e7e7      	b.n	8002f6c <__aeabi_dsub+0x3b4>
 8002f9c:	4cc9      	ldr	r4, [pc, #804]	@ (80032c4 <__aeabi_dsub+0x70c>)
 8002f9e:	1aff      	subs	r7, r7, r3
 8002fa0:	4014      	ands	r4, r2
 8002fa2:	e692      	b.n	8002cca <__aeabi_dsub+0x112>
 8002fa4:	4dc8      	ldr	r5, [pc, #800]	@ (80032c8 <__aeabi_dsub+0x710>)
 8002fa6:	1c7a      	adds	r2, r7, #1
 8002fa8:	422a      	tst	r2, r5
 8002faa:	d000      	beq.n	8002fae <__aeabi_dsub+0x3f6>
 8002fac:	e084      	b.n	80030b8 <__aeabi_dsub+0x500>
 8002fae:	0022      	movs	r2, r4
 8002fb0:	4302      	orrs	r2, r0
 8002fb2:	2f00      	cmp	r7, #0
 8002fb4:	d000      	beq.n	8002fb8 <__aeabi_dsub+0x400>
 8002fb6:	e0ef      	b.n	8003198 <__aeabi_dsub+0x5e0>
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d100      	bne.n	8002fbe <__aeabi_dsub+0x406>
 8002fbc:	e0e5      	b.n	800318a <__aeabi_dsub+0x5d2>
 8002fbe:	4662      	mov	r2, ip
 8002fc0:	9902      	ldr	r1, [sp, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	d100      	bne.n	8002fc8 <__aeabi_dsub+0x410>
 8002fc6:	e0c5      	b.n	8003154 <__aeabi_dsub+0x59c>
 8002fc8:	4663      	mov	r3, ip
 8002fca:	18c5      	adds	r5, r0, r3
 8002fcc:	468c      	mov	ip, r1
 8002fce:	4285      	cmp	r5, r0
 8002fd0:	4180      	sbcs	r0, r0
 8002fd2:	4464      	add	r4, ip
 8002fd4:	4240      	negs	r0, r0
 8002fd6:	1824      	adds	r4, r4, r0
 8002fd8:	0223      	lsls	r3, r4, #8
 8002fda:	d502      	bpl.n	8002fe2 <__aeabi_dsub+0x42a>
 8002fdc:	4bb9      	ldr	r3, [pc, #740]	@ (80032c4 <__aeabi_dsub+0x70c>)
 8002fde:	3701      	adds	r7, #1
 8002fe0:	401c      	ands	r4, r3
 8002fe2:	46ba      	mov	sl, r7
 8002fe4:	9503      	str	r5, [sp, #12]
 8002fe6:	e7d5      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8002fe8:	4662      	mov	r2, ip
 8002fea:	1a85      	subs	r5, r0, r2
 8002fec:	42a8      	cmp	r0, r5
 8002fee:	4192      	sbcs	r2, r2
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	4691      	mov	r9, r2
 8002ff4:	9b02      	ldr	r3, [sp, #8]
 8002ff6:	1ae3      	subs	r3, r4, r3
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1ad2      	subs	r2, r2, r3
 8002ffe:	0013      	movs	r3, r2
 8003000:	4691      	mov	r9, r2
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	d46c      	bmi.n	80030e0 <__aeabi_dsub+0x528>
 8003006:	464a      	mov	r2, r9
 8003008:	464c      	mov	r4, r9
 800300a:	432a      	orrs	r2, r5
 800300c:	d000      	beq.n	8003010 <__aeabi_dsub+0x458>
 800300e:	e63a      	b.n	8002c86 <__aeabi_dsub+0xce>
 8003010:	2600      	movs	r6, #0
 8003012:	2400      	movs	r4, #0
 8003014:	2500      	movs	r5, #0
 8003016:	e678      	b.n	8002d0a <__aeabi_dsub+0x152>
 8003018:	9902      	ldr	r1, [sp, #8]
 800301a:	4653      	mov	r3, sl
 800301c:	000d      	movs	r5, r1
 800301e:	3a20      	subs	r2, #32
 8003020:	40d5      	lsrs	r5, r2
 8003022:	2b20      	cmp	r3, #32
 8003024:	d006      	beq.n	8003034 <__aeabi_dsub+0x47c>
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	000b      	movs	r3, r1
 800302c:	4093      	lsls	r3, r2
 800302e:	4662      	mov	r2, ip
 8003030:	431a      	orrs	r2, r3
 8003032:	4693      	mov	fp, r2
 8003034:	465b      	mov	r3, fp
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	4193      	sbcs	r3, r2
 800303a:	431d      	orrs	r5, r3
 800303c:	e619      	b.n	8002c72 <__aeabi_dsub+0xba>
 800303e:	4653      	mov	r3, sl
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d100      	bne.n	8003048 <__aeabi_dsub+0x490>
 8003046:	e0c6      	b.n	80031d6 <__aeabi_dsub+0x61e>
 8003048:	4e9d      	ldr	r6, [pc, #628]	@ (80032c0 <__aeabi_dsub+0x708>)
 800304a:	45b2      	cmp	sl, r6
 800304c:	d100      	bne.n	8003050 <__aeabi_dsub+0x498>
 800304e:	e6bd      	b.n	8002dcc <__aeabi_dsub+0x214>
 8003050:	4688      	mov	r8, r1
 8003052:	000e      	movs	r6, r1
 8003054:	2501      	movs	r5, #1
 8003056:	2a38      	cmp	r2, #56	@ 0x38
 8003058:	dc10      	bgt.n	800307c <__aeabi_dsub+0x4c4>
 800305a:	2a1f      	cmp	r2, #31
 800305c:	dc7f      	bgt.n	800315e <__aeabi_dsub+0x5a6>
 800305e:	2120      	movs	r1, #32
 8003060:	0025      	movs	r5, r4
 8003062:	1a89      	subs	r1, r1, r2
 8003064:	0007      	movs	r7, r0
 8003066:	4088      	lsls	r0, r1
 8003068:	408d      	lsls	r5, r1
 800306a:	40d7      	lsrs	r7, r2
 800306c:	40d4      	lsrs	r4, r2
 800306e:	1e41      	subs	r1, r0, #1
 8003070:	4188      	sbcs	r0, r1
 8003072:	9b02      	ldr	r3, [sp, #8]
 8003074:	433d      	orrs	r5, r7
 8003076:	1b1b      	subs	r3, r3, r4
 8003078:	4305      	orrs	r5, r0
 800307a:	9302      	str	r3, [sp, #8]
 800307c:	4662      	mov	r2, ip
 800307e:	1b55      	subs	r5, r2, r5
 8003080:	45ac      	cmp	ip, r5
 8003082:	4192      	sbcs	r2, r2
 8003084:	9b02      	ldr	r3, [sp, #8]
 8003086:	4252      	negs	r2, r2
 8003088:	464f      	mov	r7, r9
 800308a:	1a9c      	subs	r4, r3, r2
 800308c:	e5f6      	b.n	8002c7c <__aeabi_dsub+0xc4>
 800308e:	2d00      	cmp	r5, #0
 8003090:	d000      	beq.n	8003094 <__aeabi_dsub+0x4dc>
 8003092:	e0b7      	b.n	8003204 <__aeabi_dsub+0x64c>
 8003094:	2a00      	cmp	r2, #0
 8003096:	d100      	bne.n	800309a <__aeabi_dsub+0x4e2>
 8003098:	e0f0      	b.n	800327c <__aeabi_dsub+0x6c4>
 800309a:	2601      	movs	r6, #1
 800309c:	400e      	ands	r6, r1
 800309e:	4663      	mov	r3, ip
 80030a0:	9802      	ldr	r0, [sp, #8]
 80030a2:	08d9      	lsrs	r1, r3, #3
 80030a4:	0742      	lsls	r2, r0, #29
 80030a6:	430a      	orrs	r2, r1
 80030a8:	08c4      	lsrs	r4, r0, #3
 80030aa:	e696      	b.n	8002dda <__aeabi_dsub+0x222>
 80030ac:	4c85      	ldr	r4, [pc, #532]	@ (80032c4 <__aeabi_dsub+0x70c>)
 80030ae:	1aff      	subs	r7, r7, r3
 80030b0:	4014      	ands	r4, r2
 80030b2:	0762      	lsls	r2, r4, #29
 80030b4:	08e4      	lsrs	r4, r4, #3
 80030b6:	e760      	b.n	8002f7a <__aeabi_dsub+0x3c2>
 80030b8:	4981      	ldr	r1, [pc, #516]	@ (80032c0 <__aeabi_dsub+0x708>)
 80030ba:	428a      	cmp	r2, r1
 80030bc:	d100      	bne.n	80030c0 <__aeabi_dsub+0x508>
 80030be:	e0c9      	b.n	8003254 <__aeabi_dsub+0x69c>
 80030c0:	4663      	mov	r3, ip
 80030c2:	18c1      	adds	r1, r0, r3
 80030c4:	4281      	cmp	r1, r0
 80030c6:	4180      	sbcs	r0, r0
 80030c8:	9b02      	ldr	r3, [sp, #8]
 80030ca:	4240      	negs	r0, r0
 80030cc:	18e3      	adds	r3, r4, r3
 80030ce:	181b      	adds	r3, r3, r0
 80030d0:	07dd      	lsls	r5, r3, #31
 80030d2:	085c      	lsrs	r4, r3, #1
 80030d4:	2307      	movs	r3, #7
 80030d6:	0849      	lsrs	r1, r1, #1
 80030d8:	430d      	orrs	r5, r1
 80030da:	0017      	movs	r7, r2
 80030dc:	402b      	ands	r3, r5
 80030de:	e710      	b.n	8002f02 <__aeabi_dsub+0x34a>
 80030e0:	4663      	mov	r3, ip
 80030e2:	1a1d      	subs	r5, r3, r0
 80030e4:	45ac      	cmp	ip, r5
 80030e6:	4192      	sbcs	r2, r2
 80030e8:	2601      	movs	r6, #1
 80030ea:	9b02      	ldr	r3, [sp, #8]
 80030ec:	4252      	negs	r2, r2
 80030ee:	1b1c      	subs	r4, r3, r4
 80030f0:	4688      	mov	r8, r1
 80030f2:	1aa4      	subs	r4, r4, r2
 80030f4:	400e      	ands	r6, r1
 80030f6:	e5c6      	b.n	8002c86 <__aeabi_dsub+0xce>
 80030f8:	4663      	mov	r3, ip
 80030fa:	18c5      	adds	r5, r0, r3
 80030fc:	9b02      	ldr	r3, [sp, #8]
 80030fe:	4285      	cmp	r5, r0
 8003100:	4180      	sbcs	r0, r0
 8003102:	469c      	mov	ip, r3
 8003104:	4240      	negs	r0, r0
 8003106:	4464      	add	r4, ip
 8003108:	1824      	adds	r4, r4, r0
 800310a:	2701      	movs	r7, #1
 800310c:	0223      	lsls	r3, r4, #8
 800310e:	d400      	bmi.n	8003112 <__aeabi_dsub+0x55a>
 8003110:	e6f5      	b.n	8002efe <__aeabi_dsub+0x346>
 8003112:	2702      	movs	r7, #2
 8003114:	e641      	b.n	8002d9a <__aeabi_dsub+0x1e2>
 8003116:	4663      	mov	r3, ip
 8003118:	1ac5      	subs	r5, r0, r3
 800311a:	42a8      	cmp	r0, r5
 800311c:	4180      	sbcs	r0, r0
 800311e:	9b02      	ldr	r3, [sp, #8]
 8003120:	4240      	negs	r0, r0
 8003122:	1ae4      	subs	r4, r4, r3
 8003124:	2701      	movs	r7, #1
 8003126:	1a24      	subs	r4, r4, r0
 8003128:	e5a8      	b.n	8002c7c <__aeabi_dsub+0xc4>
 800312a:	9d02      	ldr	r5, [sp, #8]
 800312c:	4652      	mov	r2, sl
 800312e:	002b      	movs	r3, r5
 8003130:	3a20      	subs	r2, #32
 8003132:	40d3      	lsrs	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	4653      	mov	r3, sl
 8003138:	2b20      	cmp	r3, #32
 800313a:	d006      	beq.n	800314a <__aeabi_dsub+0x592>
 800313c:	2240      	movs	r2, #64	@ 0x40
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	002b      	movs	r3, r5
 8003142:	4093      	lsls	r3, r2
 8003144:	4662      	mov	r2, ip
 8003146:	431a      	orrs	r2, r3
 8003148:	4693      	mov	fp, r2
 800314a:	465d      	mov	r5, fp
 800314c:	1e6b      	subs	r3, r5, #1
 800314e:	419d      	sbcs	r5, r3
 8003150:	430d      	orrs	r5, r1
 8003152:	e615      	b.n	8002d80 <__aeabi_dsub+0x1c8>
 8003154:	0762      	lsls	r2, r4, #29
 8003156:	08c0      	lsrs	r0, r0, #3
 8003158:	4302      	orrs	r2, r0
 800315a:	08e4      	lsrs	r4, r4, #3
 800315c:	e70d      	b.n	8002f7a <__aeabi_dsub+0x3c2>
 800315e:	0011      	movs	r1, r2
 8003160:	0027      	movs	r7, r4
 8003162:	3920      	subs	r1, #32
 8003164:	40cf      	lsrs	r7, r1
 8003166:	2a20      	cmp	r2, #32
 8003168:	d005      	beq.n	8003176 <__aeabi_dsub+0x5be>
 800316a:	2140      	movs	r1, #64	@ 0x40
 800316c:	1a8a      	subs	r2, r1, r2
 800316e:	4094      	lsls	r4, r2
 8003170:	0025      	movs	r5, r4
 8003172:	4305      	orrs	r5, r0
 8003174:	9503      	str	r5, [sp, #12]
 8003176:	9d03      	ldr	r5, [sp, #12]
 8003178:	1e6a      	subs	r2, r5, #1
 800317a:	4195      	sbcs	r5, r2
 800317c:	433d      	orrs	r5, r7
 800317e:	e77d      	b.n	800307c <__aeabi_dsub+0x4c4>
 8003180:	2a00      	cmp	r2, #0
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x5ce>
 8003184:	e744      	b.n	8003010 <__aeabi_dsub+0x458>
 8003186:	2601      	movs	r6, #1
 8003188:	400e      	ands	r6, r1
 800318a:	4663      	mov	r3, ip
 800318c:	08d9      	lsrs	r1, r3, #3
 800318e:	9b02      	ldr	r3, [sp, #8]
 8003190:	075a      	lsls	r2, r3, #29
 8003192:	430a      	orrs	r2, r1
 8003194:	08dc      	lsrs	r4, r3, #3
 8003196:	e6f0      	b.n	8002f7a <__aeabi_dsub+0x3c2>
 8003198:	2a00      	cmp	r2, #0
 800319a:	d028      	beq.n	80031ee <__aeabi_dsub+0x636>
 800319c:	4662      	mov	r2, ip
 800319e:	9f02      	ldr	r7, [sp, #8]
 80031a0:	08c0      	lsrs	r0, r0, #3
 80031a2:	433a      	orrs	r2, r7
 80031a4:	d100      	bne.n	80031a8 <__aeabi_dsub+0x5f0>
 80031a6:	e6dc      	b.n	8002f62 <__aeabi_dsub+0x3aa>
 80031a8:	0762      	lsls	r2, r4, #29
 80031aa:	4310      	orrs	r0, r2
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	08e4      	lsrs	r4, r4, #3
 80031b0:	0312      	lsls	r2, r2, #12
 80031b2:	4214      	tst	r4, r2
 80031b4:	d009      	beq.n	80031ca <__aeabi_dsub+0x612>
 80031b6:	08fd      	lsrs	r5, r7, #3
 80031b8:	4215      	tst	r5, r2
 80031ba:	d106      	bne.n	80031ca <__aeabi_dsub+0x612>
 80031bc:	4663      	mov	r3, ip
 80031be:	2601      	movs	r6, #1
 80031c0:	002c      	movs	r4, r5
 80031c2:	08d8      	lsrs	r0, r3, #3
 80031c4:	077b      	lsls	r3, r7, #29
 80031c6:	4318      	orrs	r0, r3
 80031c8:	400e      	ands	r6, r1
 80031ca:	0f42      	lsrs	r2, r0, #29
 80031cc:	00c0      	lsls	r0, r0, #3
 80031ce:	08c0      	lsrs	r0, r0, #3
 80031d0:	0752      	lsls	r2, r2, #29
 80031d2:	4302      	orrs	r2, r0
 80031d4:	e601      	b.n	8002dda <__aeabi_dsub+0x222>
 80031d6:	4663      	mov	r3, ip
 80031d8:	1a1d      	subs	r5, r3, r0
 80031da:	45ac      	cmp	ip, r5
 80031dc:	4192      	sbcs	r2, r2
 80031de:	9b02      	ldr	r3, [sp, #8]
 80031e0:	4252      	negs	r2, r2
 80031e2:	1b1c      	subs	r4, r3, r4
 80031e4:	000e      	movs	r6, r1
 80031e6:	4688      	mov	r8, r1
 80031e8:	2701      	movs	r7, #1
 80031ea:	1aa4      	subs	r4, r4, r2
 80031ec:	e546      	b.n	8002c7c <__aeabi_dsub+0xc4>
 80031ee:	4663      	mov	r3, ip
 80031f0:	08d9      	lsrs	r1, r3, #3
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	075a      	lsls	r2, r3, #29
 80031f6:	430a      	orrs	r2, r1
 80031f8:	08dc      	lsrs	r4, r3, #3
 80031fa:	e5ee      	b.n	8002dda <__aeabi_dsub+0x222>
 80031fc:	4663      	mov	r3, ip
 80031fe:	9c02      	ldr	r4, [sp, #8]
 8003200:	9303      	str	r3, [sp, #12]
 8003202:	e6c7      	b.n	8002f94 <__aeabi_dsub+0x3dc>
 8003204:	08c0      	lsrs	r0, r0, #3
 8003206:	2a00      	cmp	r2, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x654>
 800320a:	e6aa      	b.n	8002f62 <__aeabi_dsub+0x3aa>
 800320c:	0762      	lsls	r2, r4, #29
 800320e:	4310      	orrs	r0, r2
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	08e4      	lsrs	r4, r4, #3
 8003214:	0312      	lsls	r2, r2, #12
 8003216:	4214      	tst	r4, r2
 8003218:	d0d7      	beq.n	80031ca <__aeabi_dsub+0x612>
 800321a:	9f02      	ldr	r7, [sp, #8]
 800321c:	08fd      	lsrs	r5, r7, #3
 800321e:	4215      	tst	r5, r2
 8003220:	d1d3      	bne.n	80031ca <__aeabi_dsub+0x612>
 8003222:	4663      	mov	r3, ip
 8003224:	2601      	movs	r6, #1
 8003226:	08d8      	lsrs	r0, r3, #3
 8003228:	077b      	lsls	r3, r7, #29
 800322a:	002c      	movs	r4, r5
 800322c:	4318      	orrs	r0, r3
 800322e:	400e      	ands	r6, r1
 8003230:	e7cb      	b.n	80031ca <__aeabi_dsub+0x612>
 8003232:	000a      	movs	r2, r1
 8003234:	0027      	movs	r7, r4
 8003236:	3a20      	subs	r2, #32
 8003238:	40d7      	lsrs	r7, r2
 800323a:	2920      	cmp	r1, #32
 800323c:	d005      	beq.n	800324a <__aeabi_dsub+0x692>
 800323e:	2240      	movs	r2, #64	@ 0x40
 8003240:	1a52      	subs	r2, r2, r1
 8003242:	4094      	lsls	r4, r2
 8003244:	0025      	movs	r5, r4
 8003246:	4305      	orrs	r5, r0
 8003248:	9503      	str	r5, [sp, #12]
 800324a:	9d03      	ldr	r5, [sp, #12]
 800324c:	1e6a      	subs	r2, r5, #1
 800324e:	4195      	sbcs	r5, r2
 8003250:	432f      	orrs	r7, r5
 8003252:	e610      	b.n	8002e76 <__aeabi_dsub+0x2be>
 8003254:	0014      	movs	r4, r2
 8003256:	2500      	movs	r5, #0
 8003258:	2200      	movs	r2, #0
 800325a:	e556      	b.n	8002d0a <__aeabi_dsub+0x152>
 800325c:	9b02      	ldr	r3, [sp, #8]
 800325e:	4460      	add	r0, ip
 8003260:	4699      	mov	r9, r3
 8003262:	4560      	cmp	r0, ip
 8003264:	4192      	sbcs	r2, r2
 8003266:	444c      	add	r4, r9
 8003268:	4252      	negs	r2, r2
 800326a:	0005      	movs	r5, r0
 800326c:	18a4      	adds	r4, r4, r2
 800326e:	e74c      	b.n	800310a <__aeabi_dsub+0x552>
 8003270:	001a      	movs	r2, r3
 8003272:	001c      	movs	r4, r3
 8003274:	432a      	orrs	r2, r5
 8003276:	d000      	beq.n	800327a <__aeabi_dsub+0x6c2>
 8003278:	e6b3      	b.n	8002fe2 <__aeabi_dsub+0x42a>
 800327a:	e6c9      	b.n	8003010 <__aeabi_dsub+0x458>
 800327c:	2480      	movs	r4, #128	@ 0x80
 800327e:	2600      	movs	r6, #0
 8003280:	0324      	lsls	r4, r4, #12
 8003282:	e5ae      	b.n	8002de2 <__aeabi_dsub+0x22a>
 8003284:	2120      	movs	r1, #32
 8003286:	2500      	movs	r5, #0
 8003288:	1a09      	subs	r1, r1, r0
 800328a:	e517      	b.n	8002cbc <__aeabi_dsub+0x104>
 800328c:	2200      	movs	r2, #0
 800328e:	2500      	movs	r5, #0
 8003290:	4c0b      	ldr	r4, [pc, #44]	@ (80032c0 <__aeabi_dsub+0x708>)
 8003292:	e53a      	b.n	8002d0a <__aeabi_dsub+0x152>
 8003294:	2d00      	cmp	r5, #0
 8003296:	d100      	bne.n	800329a <__aeabi_dsub+0x6e2>
 8003298:	e5f6      	b.n	8002e88 <__aeabi_dsub+0x2d0>
 800329a:	464b      	mov	r3, r9
 800329c:	1bda      	subs	r2, r3, r7
 800329e:	4692      	mov	sl, r2
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	d100      	bne.n	80032a6 <__aeabi_dsub+0x6ee>
 80032a4:	e66f      	b.n	8002f86 <__aeabi_dsub+0x3ce>
 80032a6:	2a38      	cmp	r2, #56	@ 0x38
 80032a8:	dc05      	bgt.n	80032b6 <__aeabi_dsub+0x6fe>
 80032aa:	2680      	movs	r6, #128	@ 0x80
 80032ac:	0436      	lsls	r6, r6, #16
 80032ae:	4334      	orrs	r4, r6
 80032b0:	4688      	mov	r8, r1
 80032b2:	000e      	movs	r6, r1
 80032b4:	e6d1      	b.n	800305a <__aeabi_dsub+0x4a2>
 80032b6:	4688      	mov	r8, r1
 80032b8:	000e      	movs	r6, r1
 80032ba:	2501      	movs	r5, #1
 80032bc:	e6de      	b.n	800307c <__aeabi_dsub+0x4c4>
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	000007ff 	.word	0x000007ff
 80032c4:	ff7fffff 	.word	0xff7fffff
 80032c8:	000007fe 	.word	0x000007fe
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	d100      	bne.n	80032d2 <__aeabi_dsub+0x71a>
 80032d0:	e668      	b.n	8002fa4 <__aeabi_dsub+0x3ec>
 80032d2:	464b      	mov	r3, r9
 80032d4:	1bd9      	subs	r1, r3, r7
 80032d6:	2f00      	cmp	r7, #0
 80032d8:	d101      	bne.n	80032de <__aeabi_dsub+0x726>
 80032da:	468a      	mov	sl, r1
 80032dc:	e5a7      	b.n	8002e2e <__aeabi_dsub+0x276>
 80032de:	2701      	movs	r7, #1
 80032e0:	2938      	cmp	r1, #56	@ 0x38
 80032e2:	dd00      	ble.n	80032e6 <__aeabi_dsub+0x72e>
 80032e4:	e5c7      	b.n	8002e76 <__aeabi_dsub+0x2be>
 80032e6:	2280      	movs	r2, #128	@ 0x80
 80032e8:	0412      	lsls	r2, r2, #16
 80032ea:	4314      	orrs	r4, r2
 80032ec:	e5af      	b.n	8002e4e <__aeabi_dsub+0x296>
 80032ee:	46c0      	nop			@ (mov r8, r8)

080032f0 <__aeabi_dcmpun>:
 80032f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f2:	46c6      	mov	lr, r8
 80032f4:	031e      	lsls	r6, r3, #12
 80032f6:	0b36      	lsrs	r6, r6, #12
 80032f8:	46b0      	mov	r8, r6
 80032fa:	4e0d      	ldr	r6, [pc, #52]	@ (8003330 <__aeabi_dcmpun+0x40>)
 80032fc:	030c      	lsls	r4, r1, #12
 80032fe:	004d      	lsls	r5, r1, #1
 8003300:	005f      	lsls	r7, r3, #1
 8003302:	b500      	push	{lr}
 8003304:	0b24      	lsrs	r4, r4, #12
 8003306:	0d6d      	lsrs	r5, r5, #21
 8003308:	0d7f      	lsrs	r7, r7, #21
 800330a:	42b5      	cmp	r5, r6
 800330c:	d00b      	beq.n	8003326 <__aeabi_dcmpun+0x36>
 800330e:	4908      	ldr	r1, [pc, #32]	@ (8003330 <__aeabi_dcmpun+0x40>)
 8003310:	2000      	movs	r0, #0
 8003312:	428f      	cmp	r7, r1
 8003314:	d104      	bne.n	8003320 <__aeabi_dcmpun+0x30>
 8003316:	4646      	mov	r6, r8
 8003318:	4316      	orrs	r6, r2
 800331a:	0030      	movs	r0, r6
 800331c:	1e43      	subs	r3, r0, #1
 800331e:	4198      	sbcs	r0, r3
 8003320:	bc80      	pop	{r7}
 8003322:	46b8      	mov	r8, r7
 8003324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003326:	4304      	orrs	r4, r0
 8003328:	2001      	movs	r0, #1
 800332a:	2c00      	cmp	r4, #0
 800332c:	d1f8      	bne.n	8003320 <__aeabi_dcmpun+0x30>
 800332e:	e7ee      	b.n	800330e <__aeabi_dcmpun+0x1e>
 8003330:	000007ff 	.word	0x000007ff

08003334 <__aeabi_d2iz>:
 8003334:	000b      	movs	r3, r1
 8003336:	0002      	movs	r2, r0
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4d16      	ldr	r5, [pc, #88]	@ (8003394 <__aeabi_d2iz+0x60>)
 800333c:	030c      	lsls	r4, r1, #12
 800333e:	b082      	sub	sp, #8
 8003340:	0049      	lsls	r1, r1, #1
 8003342:	2000      	movs	r0, #0
 8003344:	9200      	str	r2, [sp, #0]
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	0b24      	lsrs	r4, r4, #12
 800334a:	0d49      	lsrs	r1, r1, #21
 800334c:	0fde      	lsrs	r6, r3, #31
 800334e:	42a9      	cmp	r1, r5
 8003350:	dd04      	ble.n	800335c <__aeabi_d2iz+0x28>
 8003352:	4811      	ldr	r0, [pc, #68]	@ (8003398 <__aeabi_d2iz+0x64>)
 8003354:	4281      	cmp	r1, r0
 8003356:	dd03      	ble.n	8003360 <__aeabi_d2iz+0x2c>
 8003358:	4b10      	ldr	r3, [pc, #64]	@ (800339c <__aeabi_d2iz+0x68>)
 800335a:	18f0      	adds	r0, r6, r3
 800335c:	b002      	add	sp, #8
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	2080      	movs	r0, #128	@ 0x80
 8003362:	0340      	lsls	r0, r0, #13
 8003364:	4320      	orrs	r0, r4
 8003366:	4c0e      	ldr	r4, [pc, #56]	@ (80033a0 <__aeabi_d2iz+0x6c>)
 8003368:	1a64      	subs	r4, r4, r1
 800336a:	2c1f      	cmp	r4, #31
 800336c:	dd08      	ble.n	8003380 <__aeabi_d2iz+0x4c>
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <__aeabi_d2iz+0x70>)
 8003370:	1a5b      	subs	r3, r3, r1
 8003372:	40d8      	lsrs	r0, r3
 8003374:	0003      	movs	r3, r0
 8003376:	4258      	negs	r0, r3
 8003378:	2e00      	cmp	r6, #0
 800337a:	d1ef      	bne.n	800335c <__aeabi_d2iz+0x28>
 800337c:	0018      	movs	r0, r3
 800337e:	e7ed      	b.n	800335c <__aeabi_d2iz+0x28>
 8003380:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <__aeabi_d2iz+0x74>)
 8003382:	9a00      	ldr	r2, [sp, #0]
 8003384:	469c      	mov	ip, r3
 8003386:	0003      	movs	r3, r0
 8003388:	4461      	add	r1, ip
 800338a:	408b      	lsls	r3, r1
 800338c:	40e2      	lsrs	r2, r4
 800338e:	4313      	orrs	r3, r2
 8003390:	e7f1      	b.n	8003376 <__aeabi_d2iz+0x42>
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	000003fe 	.word	0x000003fe
 8003398:	0000041d 	.word	0x0000041d
 800339c:	7fffffff 	.word	0x7fffffff
 80033a0:	00000433 	.word	0x00000433
 80033a4:	00000413 	.word	0x00000413
 80033a8:	fffffbed 	.word	0xfffffbed

080033ac <__aeabi_i2d>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d016      	beq.n	80033e0 <__aeabi_i2d+0x34>
 80033b2:	17c3      	asrs	r3, r0, #31
 80033b4:	18c5      	adds	r5, r0, r3
 80033b6:	405d      	eors	r5, r3
 80033b8:	0fc4      	lsrs	r4, r0, #31
 80033ba:	0028      	movs	r0, r5
 80033bc:	f000 f914 	bl	80035e8 <__clzsi2>
 80033c0:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <__aeabi_i2d+0x58>)
 80033c2:	1a1b      	subs	r3, r3, r0
 80033c4:	055b      	lsls	r3, r3, #21
 80033c6:	0d5b      	lsrs	r3, r3, #21
 80033c8:	280a      	cmp	r0, #10
 80033ca:	dc14      	bgt.n	80033f6 <__aeabi_i2d+0x4a>
 80033cc:	0002      	movs	r2, r0
 80033ce:	002e      	movs	r6, r5
 80033d0:	3215      	adds	r2, #21
 80033d2:	4096      	lsls	r6, r2
 80033d4:	220b      	movs	r2, #11
 80033d6:	1a12      	subs	r2, r2, r0
 80033d8:	40d5      	lsrs	r5, r2
 80033da:	032d      	lsls	r5, r5, #12
 80033dc:	0b2d      	lsrs	r5, r5, #12
 80033de:	e003      	b.n	80033e8 <__aeabi_i2d+0x3c>
 80033e0:	2400      	movs	r4, #0
 80033e2:	2300      	movs	r3, #0
 80033e4:	2500      	movs	r5, #0
 80033e6:	2600      	movs	r6, #0
 80033e8:	051b      	lsls	r3, r3, #20
 80033ea:	432b      	orrs	r3, r5
 80033ec:	07e4      	lsls	r4, r4, #31
 80033ee:	4323      	orrs	r3, r4
 80033f0:	0030      	movs	r0, r6
 80033f2:	0019      	movs	r1, r3
 80033f4:	bd70      	pop	{r4, r5, r6, pc}
 80033f6:	380b      	subs	r0, #11
 80033f8:	4085      	lsls	r5, r0
 80033fa:	032d      	lsls	r5, r5, #12
 80033fc:	2600      	movs	r6, #0
 80033fe:	0b2d      	lsrs	r5, r5, #12
 8003400:	e7f2      	b.n	80033e8 <__aeabi_i2d+0x3c>
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	0000041e 	.word	0x0000041e

08003408 <__aeabi_ui2d>:
 8003408:	b510      	push	{r4, lr}
 800340a:	1e04      	subs	r4, r0, #0
 800340c:	d010      	beq.n	8003430 <__aeabi_ui2d+0x28>
 800340e:	f000 f8eb 	bl	80035e8 <__clzsi2>
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <__aeabi_ui2d+0x44>)
 8003414:	1a1b      	subs	r3, r3, r0
 8003416:	055b      	lsls	r3, r3, #21
 8003418:	0d5b      	lsrs	r3, r3, #21
 800341a:	280a      	cmp	r0, #10
 800341c:	dc0f      	bgt.n	800343e <__aeabi_ui2d+0x36>
 800341e:	220b      	movs	r2, #11
 8003420:	0021      	movs	r1, r4
 8003422:	1a12      	subs	r2, r2, r0
 8003424:	40d1      	lsrs	r1, r2
 8003426:	3015      	adds	r0, #21
 8003428:	030a      	lsls	r2, r1, #12
 800342a:	4084      	lsls	r4, r0
 800342c:	0b12      	lsrs	r2, r2, #12
 800342e:	e001      	b.n	8003434 <__aeabi_ui2d+0x2c>
 8003430:	2300      	movs	r3, #0
 8003432:	2200      	movs	r2, #0
 8003434:	051b      	lsls	r3, r3, #20
 8003436:	4313      	orrs	r3, r2
 8003438:	0020      	movs	r0, r4
 800343a:	0019      	movs	r1, r3
 800343c:	bd10      	pop	{r4, pc}
 800343e:	0022      	movs	r2, r4
 8003440:	380b      	subs	r0, #11
 8003442:	4082      	lsls	r2, r0
 8003444:	0312      	lsls	r2, r2, #12
 8003446:	2400      	movs	r4, #0
 8003448:	0b12      	lsrs	r2, r2, #12
 800344a:	e7f3      	b.n	8003434 <__aeabi_ui2d+0x2c>
 800344c:	0000041e 	.word	0x0000041e

08003450 <__aeabi_f2d>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	0242      	lsls	r2, r0, #9
 8003454:	0043      	lsls	r3, r0, #1
 8003456:	0fc4      	lsrs	r4, r0, #31
 8003458:	20fe      	movs	r0, #254	@ 0xfe
 800345a:	0e1b      	lsrs	r3, r3, #24
 800345c:	1c59      	adds	r1, r3, #1
 800345e:	0a55      	lsrs	r5, r2, #9
 8003460:	4208      	tst	r0, r1
 8003462:	d00c      	beq.n	800347e <__aeabi_f2d+0x2e>
 8003464:	21e0      	movs	r1, #224	@ 0xe0
 8003466:	0089      	lsls	r1, r1, #2
 8003468:	468c      	mov	ip, r1
 800346a:	076d      	lsls	r5, r5, #29
 800346c:	0b12      	lsrs	r2, r2, #12
 800346e:	4463      	add	r3, ip
 8003470:	051b      	lsls	r3, r3, #20
 8003472:	4313      	orrs	r3, r2
 8003474:	07e4      	lsls	r4, r4, #31
 8003476:	4323      	orrs	r3, r4
 8003478:	0028      	movs	r0, r5
 800347a:	0019      	movs	r1, r3
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	2b00      	cmp	r3, #0
 8003480:	d114      	bne.n	80034ac <__aeabi_f2d+0x5c>
 8003482:	2d00      	cmp	r5, #0
 8003484:	d01b      	beq.n	80034be <__aeabi_f2d+0x6e>
 8003486:	0028      	movs	r0, r5
 8003488:	f000 f8ae 	bl	80035e8 <__clzsi2>
 800348c:	280a      	cmp	r0, #10
 800348e:	dc1c      	bgt.n	80034ca <__aeabi_f2d+0x7a>
 8003490:	230b      	movs	r3, #11
 8003492:	002a      	movs	r2, r5
 8003494:	1a1b      	subs	r3, r3, r0
 8003496:	40da      	lsrs	r2, r3
 8003498:	0003      	movs	r3, r0
 800349a:	3315      	adds	r3, #21
 800349c:	409d      	lsls	r5, r3
 800349e:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <__aeabi_f2d+0x88>)
 80034a0:	0312      	lsls	r2, r2, #12
 80034a2:	1a1b      	subs	r3, r3, r0
 80034a4:	055b      	lsls	r3, r3, #21
 80034a6:	0b12      	lsrs	r2, r2, #12
 80034a8:	0d5b      	lsrs	r3, r3, #21
 80034aa:	e7e1      	b.n	8003470 <__aeabi_f2d+0x20>
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	d009      	beq.n	80034c4 <__aeabi_f2d+0x74>
 80034b0:	0b13      	lsrs	r3, r2, #12
 80034b2:	2280      	movs	r2, #128	@ 0x80
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	431a      	orrs	r2, r3
 80034b8:	076d      	lsls	r5, r5, #29
 80034ba:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <__aeabi_f2d+0x8c>)
 80034bc:	e7d8      	b.n	8003470 <__aeabi_f2d+0x20>
 80034be:	2300      	movs	r3, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	e7d5      	b.n	8003470 <__aeabi_f2d+0x20>
 80034c4:	2200      	movs	r2, #0
 80034c6:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <__aeabi_f2d+0x8c>)
 80034c8:	e7d2      	b.n	8003470 <__aeabi_f2d+0x20>
 80034ca:	0003      	movs	r3, r0
 80034cc:	002a      	movs	r2, r5
 80034ce:	3b0b      	subs	r3, #11
 80034d0:	409a      	lsls	r2, r3
 80034d2:	2500      	movs	r5, #0
 80034d4:	e7e3      	b.n	800349e <__aeabi_f2d+0x4e>
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	00000389 	.word	0x00000389
 80034dc:	000007ff 	.word	0x000007ff

080034e0 <__aeabi_d2f>:
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	004b      	lsls	r3, r1, #1
 80034e4:	030f      	lsls	r7, r1, #12
 80034e6:	0d5b      	lsrs	r3, r3, #21
 80034e8:	4c3b      	ldr	r4, [pc, #236]	@ (80035d8 <__aeabi_d2f+0xf8>)
 80034ea:	0f45      	lsrs	r5, r0, #29
 80034ec:	b083      	sub	sp, #12
 80034ee:	0a7f      	lsrs	r7, r7, #9
 80034f0:	1c5e      	adds	r6, r3, #1
 80034f2:	432f      	orrs	r7, r5
 80034f4:	9000      	str	r0, [sp, #0]
 80034f6:	9101      	str	r1, [sp, #4]
 80034f8:	0fca      	lsrs	r2, r1, #31
 80034fa:	00c5      	lsls	r5, r0, #3
 80034fc:	4226      	tst	r6, r4
 80034fe:	d00b      	beq.n	8003518 <__aeabi_d2f+0x38>
 8003500:	4936      	ldr	r1, [pc, #216]	@ (80035dc <__aeabi_d2f+0xfc>)
 8003502:	185c      	adds	r4, r3, r1
 8003504:	2cfe      	cmp	r4, #254	@ 0xfe
 8003506:	dd13      	ble.n	8003530 <__aeabi_d2f+0x50>
 8003508:	20ff      	movs	r0, #255	@ 0xff
 800350a:	2300      	movs	r3, #0
 800350c:	05c0      	lsls	r0, r0, #23
 800350e:	4318      	orrs	r0, r3
 8003510:	07d2      	lsls	r2, r2, #31
 8003512:	4310      	orrs	r0, r2
 8003514:	b003      	add	sp, #12
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <__aeabi_d2f+0x42>
 800351c:	2000      	movs	r0, #0
 800351e:	2300      	movs	r3, #0
 8003520:	e7f4      	b.n	800350c <__aeabi_d2f+0x2c>
 8003522:	433d      	orrs	r5, r7
 8003524:	d0f0      	beq.n	8003508 <__aeabi_d2f+0x28>
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	03db      	lsls	r3, r3, #15
 800352a:	20ff      	movs	r0, #255	@ 0xff
 800352c:	433b      	orrs	r3, r7
 800352e:	e7ed      	b.n	800350c <__aeabi_d2f+0x2c>
 8003530:	2c00      	cmp	r4, #0
 8003532:	dd14      	ble.n	800355e <__aeabi_d2f+0x7e>
 8003534:	9b00      	ldr	r3, [sp, #0]
 8003536:	00ff      	lsls	r7, r7, #3
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	4183      	sbcs	r3, r0
 800353e:	0f69      	lsrs	r1, r5, #29
 8003540:	433b      	orrs	r3, r7
 8003542:	430b      	orrs	r3, r1
 8003544:	0759      	lsls	r1, r3, #29
 8003546:	d041      	beq.n	80035cc <__aeabi_d2f+0xec>
 8003548:	210f      	movs	r1, #15
 800354a:	4019      	ands	r1, r3
 800354c:	2904      	cmp	r1, #4
 800354e:	d028      	beq.n	80035a2 <__aeabi_d2f+0xc2>
 8003550:	3304      	adds	r3, #4
 8003552:	0159      	lsls	r1, r3, #5
 8003554:	d525      	bpl.n	80035a2 <__aeabi_d2f+0xc2>
 8003556:	3401      	adds	r4, #1
 8003558:	2300      	movs	r3, #0
 800355a:	b2e0      	uxtb	r0, r4
 800355c:	e7d6      	b.n	800350c <__aeabi_d2f+0x2c>
 800355e:	0021      	movs	r1, r4
 8003560:	3117      	adds	r1, #23
 8003562:	dbdb      	blt.n	800351c <__aeabi_d2f+0x3c>
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	201e      	movs	r0, #30
 8003568:	0409      	lsls	r1, r1, #16
 800356a:	4339      	orrs	r1, r7
 800356c:	1b00      	subs	r0, r0, r4
 800356e:	281f      	cmp	r0, #31
 8003570:	dd1b      	ble.n	80035aa <__aeabi_d2f+0xca>
 8003572:	2602      	movs	r6, #2
 8003574:	4276      	negs	r6, r6
 8003576:	1b34      	subs	r4, r6, r4
 8003578:	000e      	movs	r6, r1
 800357a:	40e6      	lsrs	r6, r4
 800357c:	0034      	movs	r4, r6
 800357e:	2820      	cmp	r0, #32
 8003580:	d004      	beq.n	800358c <__aeabi_d2f+0xac>
 8003582:	4817      	ldr	r0, [pc, #92]	@ (80035e0 <__aeabi_d2f+0x100>)
 8003584:	4684      	mov	ip, r0
 8003586:	4463      	add	r3, ip
 8003588:	4099      	lsls	r1, r3
 800358a:	430d      	orrs	r5, r1
 800358c:	002b      	movs	r3, r5
 800358e:	1e59      	subs	r1, r3, #1
 8003590:	418b      	sbcs	r3, r1
 8003592:	4323      	orrs	r3, r4
 8003594:	0759      	lsls	r1, r3, #29
 8003596:	d015      	beq.n	80035c4 <__aeabi_d2f+0xe4>
 8003598:	210f      	movs	r1, #15
 800359a:	2400      	movs	r4, #0
 800359c:	4019      	ands	r1, r3
 800359e:	2904      	cmp	r1, #4
 80035a0:	d117      	bne.n	80035d2 <__aeabi_d2f+0xf2>
 80035a2:	019b      	lsls	r3, r3, #6
 80035a4:	0a5b      	lsrs	r3, r3, #9
 80035a6:	b2e0      	uxtb	r0, r4
 80035a8:	e7b0      	b.n	800350c <__aeabi_d2f+0x2c>
 80035aa:	4c0e      	ldr	r4, [pc, #56]	@ (80035e4 <__aeabi_d2f+0x104>)
 80035ac:	191c      	adds	r4, r3, r4
 80035ae:	002b      	movs	r3, r5
 80035b0:	40a5      	lsls	r5, r4
 80035b2:	40c3      	lsrs	r3, r0
 80035b4:	40a1      	lsls	r1, r4
 80035b6:	1e68      	subs	r0, r5, #1
 80035b8:	4185      	sbcs	r5, r0
 80035ba:	4329      	orrs	r1, r5
 80035bc:	430b      	orrs	r3, r1
 80035be:	2400      	movs	r4, #0
 80035c0:	0759      	lsls	r1, r3, #29
 80035c2:	d1c1      	bne.n	8003548 <__aeabi_d2f+0x68>
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	2000      	movs	r0, #0
 80035c8:	0a5b      	lsrs	r3, r3, #9
 80035ca:	e79f      	b.n	800350c <__aeabi_d2f+0x2c>
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	b2e0      	uxtb	r0, r4
 80035d0:	e79c      	b.n	800350c <__aeabi_d2f+0x2c>
 80035d2:	3304      	adds	r3, #4
 80035d4:	e7e5      	b.n	80035a2 <__aeabi_d2f+0xc2>
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	000007fe 	.word	0x000007fe
 80035dc:	fffffc80 	.word	0xfffffc80
 80035e0:	fffffca2 	.word	0xfffffca2
 80035e4:	fffffc82 	.word	0xfffffc82

080035e8 <__clzsi2>:
 80035e8:	211c      	movs	r1, #28
 80035ea:	2301      	movs	r3, #1
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	4298      	cmp	r0, r3
 80035f0:	d301      	bcc.n	80035f6 <__clzsi2+0xe>
 80035f2:	0c00      	lsrs	r0, r0, #16
 80035f4:	3910      	subs	r1, #16
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	4298      	cmp	r0, r3
 80035fa:	d301      	bcc.n	8003600 <__clzsi2+0x18>
 80035fc:	0a00      	lsrs	r0, r0, #8
 80035fe:	3908      	subs	r1, #8
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0x22>
 8003606:	0900      	lsrs	r0, r0, #4
 8003608:	3904      	subs	r1, #4
 800360a:	a202      	add	r2, pc, #8	@ (adr r2, 8003614 <__clzsi2+0x2c>)
 800360c:	5c10      	ldrb	r0, [r2, r0]
 800360e:	1840      	adds	r0, r0, r1
 8003610:	4770      	bx	lr
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	02020304 	.word	0x02020304
 8003618:	01010101 	.word	0x01010101
	...

08003624 <__clzdi2>:
 8003624:	b510      	push	{r4, lr}
 8003626:	2900      	cmp	r1, #0
 8003628:	d103      	bne.n	8003632 <__clzdi2+0xe>
 800362a:	f7ff ffdd 	bl	80035e8 <__clzsi2>
 800362e:	3020      	adds	r0, #32
 8003630:	e002      	b.n	8003638 <__clzdi2+0x14>
 8003632:	0008      	movs	r0, r1
 8003634:	f7ff ffd8 	bl	80035e8 <__clzsi2>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)

0800363c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	1dbb      	adds	r3, r7, #6
 8003648:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800364a:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003650:	f008 ff02 	bl	800c458 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003654:	2316      	movs	r3, #22
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2200      	movs	r2, #0
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	e015      	b.n	800368a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	2416      	movs	r4, #22
 8003664:	193b      	adds	r3, r7, r4
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	18d3      	adds	r3, r2, r3
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	001a      	movs	r2, r3
 8003670:	2000      	movs	r0, #0
 8003672:	f008 ff59 	bl	800c528 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003676:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 800367e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003680:	193b      	adds	r3, r7, r4
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	193b      	adds	r3, r7, r4
 8003686:	3201      	adds	r2, #1
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	2316      	movs	r3, #22
 800368c:	18fa      	adds	r2, r7, r3
 800368e:	1dbb      	adds	r3, r7, #6
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d3e2      	bcc.n	800365e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8003698:	f008 ff0c 	bl	800c4b4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800369c:	4b02      	ldr	r3, [pc, #8]	@ (80036a8 <WriteUint8ArrayEeprom+0x6c>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b007      	add	sp, #28
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	200003e8 	.word	0x200003e8

080036ac <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	0019      	movs	r1, r3
 80036b8:	1dbb      	adds	r3, r7, #6
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	1c0a      	adds	r2, r1, #0
 80036c0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036c2:	1dba      	adds	r2, r7, #6
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d806      	bhi.n	80036dc <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff ffb0 	bl	800363c <WriteUint8ArrayEeprom>
    }
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	1dbb      	adds	r3, r7, #6
 80036f0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80036f2:	2316      	movs	r3, #22
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2200      	movs	r2, #0
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	e010      	b.n	800371e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 80036fc:	2016      	movs	r0, #22
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	18d3      	adds	r3, r2, r3
 8003706:	0019      	movs	r1, r3
 8003708:	183b      	adds	r3, r7, r0
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	18d3      	adds	r3, r2, r3
 8003710:	780a      	ldrb	r2, [r1, #0]
 8003712:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003714:	183b      	adds	r3, r7, r0
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	183b      	adds	r3, r7, r0
 800371a:	3201      	adds	r2, #1
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	2316      	movs	r3, #22
 8003720:	18fa      	adds	r2, r7, r3
 8003722:	1dbb      	adds	r3, r7, #6
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d3e7      	bcc.n	80036fc <ReadUint8ArrayEEprom+0x18>
    }
}
 800372c:	46c0      	nop			@ (mov r8, r8)
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b006      	add	sp, #24
 8003734:	bd80      	pop	{r7, pc}

08003736 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003736:	b590      	push	{r4, r7, lr}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	000a      	movs	r2, r1
 8003740:	1cbb      	adds	r3, r7, #2
 8003742:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003744:	f008 fe88 	bl	800c458 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8003748:	230e      	movs	r3, #14
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	e00c      	b.n	800376c <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003752:	240e      	movs	r4, #14
 8003754:	193b      	adds	r3, r7, r4
 8003756:	881a      	ldrh	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	0018      	movs	r0, r3
 800375e:	f008 feb7 	bl	800c4d0 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003762:	193b      	adds	r3, r7, r4
 8003764:	193a      	adds	r2, r7, r4
 8003766:	8812      	ldrh	r2, [r2, #0]
 8003768:	3204      	adds	r2, #4
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	230e      	movs	r3, #14
 800376e:	18fa      	adds	r2, r7, r3
 8003770:	1cbb      	adds	r3, r7, #2
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3eb      	bcc.n	8003752 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800377a:	f008 fe9b 	bl	800c4b4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b005      	add	sp, #20
 8003784:	bd90      	pop	{r4, r7, pc}
	...

08003788 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800378c:	f002 f8c2 	bl	8005914 <ReadBatteryVoltage>
 8003790:	1c02      	adds	r2, r0, #0
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <setCharges+0x20>)
 8003794:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 8003796:	f002 f91f 	bl	80059d8 <ReadSolarVoltage>
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	4b03      	ldr	r3, [pc, #12]	@ (80037ac <setCharges+0x24>)
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	20000518 	.word	0x20000518
 80037ac:	2000051c 	.word	0x2000051c

080037b0 <checkEEprom>:
bool checkEEprom(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <checkEEprom+0x5c>)
 80037b8:	4815      	ldr	r0, [pc, #84]	@ (8003810 <checkEEprom+0x60>)
 80037ba:	220c      	movs	r2, #12
 80037bc:	0019      	movs	r1, r3
 80037be:	f7ff ff91 	bl	80036e4 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e00e      	b.n	80037e8 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037ca:	1dfb      	adds	r3, r7, #7
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	@ (800380c <checkEEprom+0x5c>)
 80037d0:	5cd3      	ldrb	r3, [r2, r3]
 80037d2:	001a      	movs	r2, r3
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <checkEEprom+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	18d2      	adds	r2, r2, r3
 80037da:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <checkEEprom+0x64>)
 80037dc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	3201      	adds	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b0b      	cmp	r3, #11
 80037ee:	d9ec      	bls.n	80037ca <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <checkEEprom+0x64>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	425a      	negs	r2, r3
 80037f6:	4153      	adcs	r3, r2
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <checkEEprom+0x68>)
 80037fc:	701a      	strb	r2, [r3, #0]
  return test;
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <checkEEprom+0x68>)
 8003800:	781b      	ldrb	r3, [r3, #0]
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	20000940 	.word	0x20000940
 8003810:	0808000c 	.word	0x0808000c
 8003814:	2000094c 	.word	0x2000094c
 8003818:	20000950 	.word	0x20000950

0800381c <checkName>:
bool checkName(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkName+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkName+0x60>)
 8003826:	221e      	movs	r2, #30
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff5b 	bl	80036e4 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkName+0x38>
    configSum += nameConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkName+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkName+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkName+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkName+0x1a>
  }
  test = (configSum != 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkName+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	1e5a      	subs	r2, r3, #1
 8003862:	4193      	sbcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkName+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkName+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000954 	.word	0x20000954
 800387c:	08080090 	.word	0x08080090
 8003880:	20000974 	.word	0x20000974
 8003884:	20000978 	.word	0x20000978

08003888 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003892:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <ESP_GetHT+0x20>)
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <ESP_GetHT+0x24>)
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b002      	add	sp, #8
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	20000510 	.word	0x20000510
 80038ac:	20000514 	.word	0x20000514

080038b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <setMeasurement+0x2c>)
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <setMeasurement+0x30>)
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <setMeasurement+0x34>)
 80038cc:	1dba      	adds	r2, r7, #6
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	801a      	strh	r2, [r3, #0]
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	20000510 	.word	0x20000510
 80038e0:	20000514 	.word	0x20000514
 80038e4:	20000520 	.word	0x20000520

080038e8 <setMic>:
void setMic(float dB){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  dBC = dB;
 80038f0:	4b03      	ldr	r3, [pc, #12]	@ (8003900 <setMic+0x18>)
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	20000524 	.word	0x20000524

08003904 <SetConfigMode>:

void SetConfigMode(){
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003908:	4b02      	ldr	r3, [pc, #8]	@ (8003914 <SetConfigMode+0x10>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200004f6 	.word	0x200004f6

08003918 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 800391c:	f007 fdc6 	bl	800b4ac <HAL_GetUIDw0>
 8003920:	0002      	movs	r2, r0
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <ESP_GetUID+0x28>)
 8003924:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003926:	f007 fdcb 	bl	800b4c0 <HAL_GetUIDw1>
 800392a:	0002      	movs	r2, r0
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <ESP_GetUID+0x28>)
 800392e:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003930:	f007 fdd0 	bl	800b4d4 <HAL_GetUIDw2>
 8003934:	0002      	movs	r2, r0
 8003936:	4b02      	ldr	r3, [pc, #8]	@ (8003940 <ESP_GetUID+0x28>)
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	200004fc 	.word	0x200004fc

08003944 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <ESP_Init+0x2c>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <ESP_Init+0x30>)
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003958:	f7ff ffde 	bl	8003918 <ESP_GetUID>
  beurs = checkEEprom();
 800395c:	f7ff ff28 	bl	80037b0 <checkEEprom>
 8003960:	0003      	movs	r3, r0
 8003962:	001a      	movs	r2, r3
 8003964:	4b04      	ldr	r3, [pc, #16]	@ (8003978 <ESP_Init+0x34>)
 8003966:	701a      	strb	r2, [r3, #0]
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200003ec 	.word	0x200003ec
 8003974:	20000021 	.word	0x20000021
 8003978:	200004f9 	.word	0x200004f9

0800397c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	000a      	movs	r2, r1
 8003986:	1cbb      	adds	r3, r7, #2
 8003988:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800398a:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <ESP_Send+0x48>)
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	250f      	movs	r5, #15
 8003990:	197c      	adds	r4, r7, r5
 8003992:	1cbb      	adds	r3, r7, #2
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0019      	movs	r1, r3
 800399a:	f00f f89f 	bl	8012adc <HAL_UART_Transmit_DMA>
 800399e:	0003      	movs	r3, r0
 80039a0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039a2:	197b      	adds	r3, r7, r5
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80039aa:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <ESP_Send+0x4c>)
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <ESP_Send+0x50>)
 80039ae:	0019      	movs	r1, r3
 80039b0:	2003      	movs	r0, #3
 80039b2:	f007 f9ab 	bl	800ad0c <CreateLine>
    return false;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <ESP_Send+0x40>
  }
  return true;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b004      	add	sp, #16
 80039c2:	bdb0      	pop	{r4, r5, r7, pc}
 80039c4:	200003ec 	.word	0x200003ec
 80039c8:	0801e180 	.word	0x0801e180
 80039cc:	0801e1a0 	.word	0x0801e1a0

080039d0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80039d0:	b5b0      	push	{r4, r5, r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	000a      	movs	r2, r1
 80039da:	1cfb      	adds	r3, r7, #3
 80039dc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80039de:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <ESP_Receive+0x58>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80039e4:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <ESP_Receive+0x5c>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	1cfb      	adds	r3, r7, #3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	250f      	movs	r5, #15
 80039f0:	197c      	adds	r4, r7, r5
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0019      	movs	r1, r3
 80039f6:	f00f f901 	bl	8012bfc <HAL_UART_Receive_DMA>
 80039fa:	0003      	movs	r3, r0
 80039fc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039fe:	197b      	adds	r3, r7, r5
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003a06:	4a0a      	ldr	r2, [pc, #40]	@ (8003a30 <ESP_Receive+0x60>)
 8003a08:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <ESP_Receive+0x64>)
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	2003      	movs	r0, #3
 8003a0e:	f007 f97d 	bl	800ad0c <CreateLine>
    RxComplete = true;
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <ESP_Receive+0x58>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
    return false;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <ESP_Receive+0x4e>
  }
  return true;
 8003a1c:	2301      	movs	r3, #1
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bdb0      	pop	{r4, r5, r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	200003f0 	.word	0x200003f0
 8003a2c:	200003ec 	.word	0x200003ec
 8003a30:	0801e1a4 	.word	0x0801e1a4
 8003a34:	0801e1a0 	.word	0x0801e1a0

08003a38 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a40:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <HAL_UART_ErrorCallback+0x34>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d10b      	bne.n	8003a62 <HAL_UART_ErrorCallback+0x2a>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred");
 8003a4a:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <HAL_UART_ErrorCallback+0x38>)
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_UART_ErrorCallback+0x3c>)
 8003a4e:	0019      	movs	r1, r3
 8003a50:	2003      	movs	r0, #3
 8003a52:	f007 f95b 	bl	800ad0c <CreateLine>
    errorHandler(__func__, __LINE__, __FILE__);
 8003a56:	4a08      	ldr	r2, [pc, #32]	@ (8003a78 <HAL_UART_ErrorCallback+0x40>)
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <HAL_UART_ErrorCallback+0x44>)
 8003a5a:	21ba      	movs	r1, #186	@ 0xba
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f007 fa01 	bl	800ae64 <errorHandler>
  }
}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b002      	add	sp, #8
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	200003ec 	.word	0x200003ec
 8003a70:	0801e1c4 	.word	0x0801e1c4
 8003a74:	0801e1a0 	.word	0x0801e1a0
 8003a78:	0801e1e4 	.word	0x0801e1e4
 8003a7c:	0801f03c 	.word	0x0801f03c

08003a80 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e010      	b.n	8003ab2 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	001a      	movs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	1898      	adds	r0, r3, r2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	18d3      	adds	r3, r2, r3
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <uint8ArrayToString+0x44>)
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	f017 fa78 	bl	801af9c <siprintf>
  for (int i = 0; i < 12; i++)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b0b      	cmp	r3, #11
 8003ab6:	ddeb      	ble.n	8003a90 <uint8ArrayToString+0x10>
  }
}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	0801e1f8 	.word	0x0801e1f8

08003ac8 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aca:	b089      	sub	sp, #36	@ 0x24
 8003acc:	af04      	add	r7, sp, #16
 8003ace:	0002      	movs	r2, r0
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	701a      	strb	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003ad4:	4bb6      	ldr	r3, [pc, #728]	@ (8003db0 <CreateMessage+0x2e8>)
 8003ad6:	48b7      	ldr	r0, [pc, #732]	@ (8003db4 <CreateMessage+0x2ec>)
 8003ad8:	220c      	movs	r2, #12
 8003ada:	0019      	movs	r1, r3
 8003adc:	f7ff fe02 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003ae0:	4bb5      	ldr	r3, [pc, #724]	@ (8003db8 <CreateMessage+0x2f0>)
 8003ae2:	48b6      	ldr	r0, [pc, #728]	@ (8003dbc <CreateMessage+0x2f4>)
 8003ae4:	220c      	movs	r2, #12
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	f7ff fdfc 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003aec:	4bb4      	ldr	r3, [pc, #720]	@ (8003dc0 <CreateMessage+0x2f8>)
 8003aee:	48b5      	ldr	r0, [pc, #724]	@ (8003dc4 <CreateMessage+0x2fc>)
 8003af0:	220c      	movs	r2, #12
 8003af2:	0019      	movs	r1, r3
 8003af4:	f7ff fdf6 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003af8:	4bb3      	ldr	r3, [pc, #716]	@ (8003dc8 <CreateMessage+0x300>)
 8003afa:	48b4      	ldr	r0, [pc, #720]	@ (8003dcc <CreateMessage+0x304>)
 8003afc:	220c      	movs	r2, #12
 8003afe:	0019      	movs	r1, r3
 8003b00:	f7ff fdf0 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b04:	4bb2      	ldr	r3, [pc, #712]	@ (8003dd0 <CreateMessage+0x308>)
 8003b06:	48b3      	ldr	r0, [pc, #716]	@ (8003dd4 <CreateMessage+0x30c>)
 8003b08:	220c      	movs	r2, #12
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	f7ff fdea 	bl	80036e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b10:	4bb1      	ldr	r3, [pc, #708]	@ (8003dd8 <CreateMessage+0x310>)
 8003b12:	48b2      	ldr	r0, [pc, #712]	@ (8003ddc <CreateMessage+0x314>)
 8003b14:	220c      	movs	r2, #12
 8003b16:	0019      	movs	r1, r3
 8003b18:	f7ff fde4 	bl	80036e4 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b1c:	f7ff fe7e 	bl	800381c <checkName>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d006      	beq.n	8003b32 <CreateMessage+0x6a>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b24:	4bae      	ldr	r3, [pc, #696]	@ (8003de0 <CreateMessage+0x318>)
 8003b26:	48af      	ldr	r0, [pc, #700]	@ (8003de4 <CreateMessage+0x31c>)
 8003b28:	221e      	movs	r2, #30
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7ff fdda 	bl	80036e4 <ReadUint8ArrayEEprom>
 8003b30:	e005      	b.n	8003b3e <CreateMessage+0x76>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b32:	4bab      	ldr	r3, [pc, #684]	@ (8003de0 <CreateMessage+0x318>)
 8003b34:	4aac      	ldr	r2, [pc, #688]	@ (8003de8 <CreateMessage+0x320>)
 8003b36:	6811      	ldr	r1, [r2, #0]
 8003b38:	6019      	str	r1, [r3, #0]
 8003b3a:	7912      	ldrb	r2, [r2, #4]
 8003b3c:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b3e:	f7ff fe23 	bl	8003788 <setCharges>

  memset(message, '\0', 1024);
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	00da      	lsls	r2, r3, #3
 8003b46:	4ba9      	ldr	r3, [pc, #676]	@ (8003dec <CreateMessage+0x324>)
 8003b48:	2100      	movs	r1, #0
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f017 faca 	bl	801b0e4 <memset>
  uint16_t index = 0;
 8003b50:	260e      	movs	r6, #14
 8003b52:	19bb      	adds	r3, r7, r6
 8003b54:	2200      	movs	r2, #0
 8003b56:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b58:	19bb      	adds	r3, r7, r6
 8003b5a:	881a      	ldrh	r2, [r3, #0]
 8003b5c:	4ba3      	ldr	r3, [pc, #652]	@ (8003dec <CreateMessage+0x324>)
 8003b5e:	18d3      	adds	r3, r2, r3
 8003b60:	4aa3      	ldr	r2, [pc, #652]	@ (8003df0 <CreateMessage+0x328>)
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f017 fa19 	bl	801af9c <siprintf>
  index = strlen(message);
 8003b6a:	4ba0      	ldr	r3, [pc, #640]	@ (8003dec <CreateMessage+0x324>)
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fc faf3 	bl	8000158 <strlen>
 8003b72:	0002      	movs	r2, r0
 8003b74:	19bb      	adds	r3, r7, r6
 8003b76:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003b78:	4a8d      	ldr	r2, [pc, #564]	@ (8003db0 <CreateMessage+0x2e8>)
 8003b7a:	4b9e      	ldr	r3, [pc, #632]	@ (8003df4 <CreateMessage+0x32c>)
 8003b7c:	0011      	movs	r1, r2
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ff7e 	bl	8003a80 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003b84:	19bb      	adds	r3, r7, r6
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	4b98      	ldr	r3, [pc, #608]	@ (8003dec <CreateMessage+0x324>)
 8003b8a:	18d4      	adds	r4, r2, r3
 8003b8c:	4b9a      	ldr	r3, [pc, #616]	@ (8003df8 <CreateMessage+0x330>)
 8003b8e:	689d      	ldr	r5, [r3, #8]
 8003b90:	4b9a      	ldr	r3, [pc, #616]	@ (8003dfc <CreateMessage+0x334>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	1c18      	adds	r0, r3, #0
 8003b96:	f7ff fc5b 	bl	8003450 <__aeabi_f2d>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	000b      	movs	r3, r1
 8003b9e:	4890      	ldr	r0, [pc, #576]	@ (8003de0 <CreateMessage+0x318>)
 8003ba0:	4997      	ldr	r1, [pc, #604]	@ (8003e00 <CreateMessage+0x338>)
 8003ba2:	9202      	str	r2, [sp, #8]
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	4b93      	ldr	r3, [pc, #588]	@ (8003df4 <CreateMessage+0x32c>)
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	0003      	movs	r3, r0
 8003bac:	002a      	movs	r2, r5
 8003bae:	0020      	movs	r0, r4
 8003bb0:	f017 f9f4 	bl	801af9c <siprintf>
  index = strlen(message);
 8003bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8003dec <CreateMessage+0x324>)
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7fc face 	bl	8000158 <strlen>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	19bb      	adds	r3, r7, r6
 8003bc0:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003bc2:	4a7d      	ldr	r2, [pc, #500]	@ (8003db8 <CreateMessage+0x2f0>)
 8003bc4:	4b8b      	ldr	r3, [pc, #556]	@ (8003df4 <CreateMessage+0x32c>)
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff ff59 	bl	8003a80 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003bce:	19bb      	adds	r3, r7, r6
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	4b86      	ldr	r3, [pc, #536]	@ (8003dec <CreateMessage+0x324>)
 8003bd4:	18d4      	adds	r4, r2, r3
 8003bd6:	4b88      	ldr	r3, [pc, #544]	@ (8003df8 <CreateMessage+0x330>)
 8003bd8:	689d      	ldr	r5, [r3, #8]
 8003bda:	4b8a      	ldr	r3, [pc, #552]	@ (8003e04 <CreateMessage+0x33c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	1c18      	adds	r0, r3, #0
 8003be0:	f7ff fc36 	bl	8003450 <__aeabi_f2d>
 8003be4:	0002      	movs	r2, r0
 8003be6:	000b      	movs	r3, r1
 8003be8:	487d      	ldr	r0, [pc, #500]	@ (8003de0 <CreateMessage+0x318>)
 8003bea:	4987      	ldr	r1, [pc, #540]	@ (8003e08 <CreateMessage+0x340>)
 8003bec:	9202      	str	r2, [sp, #8]
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	4b80      	ldr	r3, [pc, #512]	@ (8003df4 <CreateMessage+0x32c>)
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	002a      	movs	r2, r5
 8003bf8:	0020      	movs	r0, r4
 8003bfa:	f017 f9cf 	bl	801af9c <siprintf>
  index = strlen(message);
 8003bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8003dec <CreateMessage+0x324>)
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7fc faa9 	bl	8000158 <strlen>
 8003c06:	0002      	movs	r2, r0
 8003c08:	19bb      	adds	r3, r7, r6
 8003c0a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c0c:	4a6c      	ldr	r2, [pc, #432]	@ (8003dc0 <CreateMessage+0x2f8>)
 8003c0e:	4b79      	ldr	r3, [pc, #484]	@ (8003df4 <CreateMessage+0x32c>)
 8003c10:	0011      	movs	r1, r2
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7ff ff34 	bl	8003a80 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c18:	19bb      	adds	r3, r7, r6
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	4b73      	ldr	r3, [pc, #460]	@ (8003dec <CreateMessage+0x324>)
 8003c1e:	18d4      	adds	r4, r2, r3
 8003c20:	4b75      	ldr	r3, [pc, #468]	@ (8003df8 <CreateMessage+0x330>)
 8003c22:	689d      	ldr	r5, [r3, #8]
 8003c24:	4b79      	ldr	r3, [pc, #484]	@ (8003e0c <CreateMessage+0x344>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c18      	adds	r0, r3, #0
 8003c2a:	f7ff fc11 	bl	8003450 <__aeabi_f2d>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	000b      	movs	r3, r1
 8003c32:	486b      	ldr	r0, [pc, #428]	@ (8003de0 <CreateMessage+0x318>)
 8003c34:	4976      	ldr	r1, [pc, #472]	@ (8003e10 <CreateMessage+0x348>)
 8003c36:	9202      	str	r2, [sp, #8]
 8003c38:	9303      	str	r3, [sp, #12]
 8003c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003df4 <CreateMessage+0x32c>)
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	0003      	movs	r3, r0
 8003c40:	002a      	movs	r2, r5
 8003c42:	0020      	movs	r0, r4
 8003c44:	f017 f9aa 	bl	801af9c <siprintf>
  index = strlen(message);
 8003c48:	4b68      	ldr	r3, [pc, #416]	@ (8003dec <CreateMessage+0x324>)
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7fc fa84 	bl	8000158 <strlen>
 8003c50:	0002      	movs	r2, r0
 8003c52:	19bb      	adds	r3, r7, r6
 8003c54:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c56:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc8 <CreateMessage+0x300>)
 8003c58:	4b66      	ldr	r3, [pc, #408]	@ (8003df4 <CreateMessage+0x32c>)
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff ff0f 	bl	8003a80 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c62:	19bb      	adds	r3, r7, r6
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	4b61      	ldr	r3, [pc, #388]	@ (8003dec <CreateMessage+0x324>)
 8003c68:	18d0      	adds	r0, r2, r3
 8003c6a:	4b63      	ldr	r3, [pc, #396]	@ (8003df8 <CreateMessage+0x330>)
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	4b69      	ldr	r3, [pc, #420]	@ (8003e14 <CreateMessage+0x34c>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	4c5b      	ldr	r4, [pc, #364]	@ (8003de0 <CreateMessage+0x318>)
 8003c74:	4968      	ldr	r1, [pc, #416]	@ (8003e18 <CreateMessage+0x350>)
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	4b5e      	ldr	r3, [pc, #376]	@ (8003df4 <CreateMessage+0x32c>)
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	0023      	movs	r3, r4
 8003c7e:	f017 f98d 	bl	801af9c <siprintf>
  index = strlen(message);
 8003c82:	4b5a      	ldr	r3, [pc, #360]	@ (8003dec <CreateMessage+0x324>)
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7fc fa67 	bl	8000158 <strlen>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	19bb      	adds	r3, r7, r6
 8003c8e:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	4053      	eors	r3, r2
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d04a      	beq.n	8003d34 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8003dd0 <CreateMessage+0x308>)
 8003ca0:	4b54      	ldr	r3, [pc, #336]	@ (8003df4 <CreateMessage+0x32c>)
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7ff feeb 	bl	8003a80 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003caa:	19bb      	adds	r3, r7, r6
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	4b4f      	ldr	r3, [pc, #316]	@ (8003dec <CreateMessage+0x324>)
 8003cb0:	18d4      	adds	r4, r2, r3
 8003cb2:	4b51      	ldr	r3, [pc, #324]	@ (8003df8 <CreateMessage+0x330>)
 8003cb4:	689d      	ldr	r5, [r3, #8]
 8003cb6:	4b59      	ldr	r3, [pc, #356]	@ (8003e1c <CreateMessage+0x354>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	1c18      	adds	r0, r3, #0
 8003cbc:	f7ff fbc8 	bl	8003450 <__aeabi_f2d>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	000b      	movs	r3, r1
 8003cc4:	4846      	ldr	r0, [pc, #280]	@ (8003de0 <CreateMessage+0x318>)
 8003cc6:	4956      	ldr	r1, [pc, #344]	@ (8003e20 <CreateMessage+0x358>)
 8003cc8:	9202      	str	r2, [sp, #8]
 8003cca:	9303      	str	r3, [sp, #12]
 8003ccc:	4b49      	ldr	r3, [pc, #292]	@ (8003df4 <CreateMessage+0x32c>)
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	002a      	movs	r2, r5
 8003cd4:	0020      	movs	r0, r4
 8003cd6:	f017 f961 	bl	801af9c <siprintf>
    index = strlen(message);
 8003cda:	4b44      	ldr	r3, [pc, #272]	@ (8003dec <CreateMessage+0x324>)
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7fc fa3b 	bl	8000158 <strlen>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	19bb      	adds	r3, r7, r6
 8003ce6:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003ce8:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd8 <CreateMessage+0x310>)
 8003cea:	4b42      	ldr	r3, [pc, #264]	@ (8003df4 <CreateMessage+0x32c>)
 8003cec:	0011      	movs	r1, r2
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7ff fec6 	bl	8003a80 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003cf4:	19bb      	adds	r3, r7, r6
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8003dec <CreateMessage+0x324>)
 8003cfa:	18d4      	adds	r4, r2, r3
 8003cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8003df8 <CreateMessage+0x330>)
 8003cfe:	689d      	ldr	r5, [r3, #8]
 8003d00:	4b48      	ldr	r3, [pc, #288]	@ (8003e24 <CreateMessage+0x35c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1c18      	adds	r0, r3, #0
 8003d06:	f7ff fba3 	bl	8003450 <__aeabi_f2d>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	000b      	movs	r3, r1
 8003d0e:	4834      	ldr	r0, [pc, #208]	@ (8003de0 <CreateMessage+0x318>)
 8003d10:	4945      	ldr	r1, [pc, #276]	@ (8003e28 <CreateMessage+0x360>)
 8003d12:	9202      	str	r2, [sp, #8]
 8003d14:	9303      	str	r3, [sp, #12]
 8003d16:	4b37      	ldr	r3, [pc, #220]	@ (8003df4 <CreateMessage+0x32c>)
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	002a      	movs	r2, r5
 8003d1e:	0020      	movs	r0, r4
 8003d20:	f017 f93c 	bl	801af9c <siprintf>
    index = strlen(message);
 8003d24:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <CreateMessage+0x324>)
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7fc fa16 	bl	8000158 <strlen>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	19bb      	adds	r3, r7, r6
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	e025      	b.n	8003d80 <CreateMessage+0x2b8>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d34:	4a26      	ldr	r2, [pc, #152]	@ (8003dd0 <CreateMessage+0x308>)
 8003d36:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <CreateMessage+0x32c>)
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fea0 	bl	8003a80 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d40:	260e      	movs	r6, #14
 8003d42:	19bb      	adds	r3, r7, r6
 8003d44:	881a      	ldrh	r2, [r3, #0]
 8003d46:	4b29      	ldr	r3, [pc, #164]	@ (8003dec <CreateMessage+0x324>)
 8003d48:	18d4      	adds	r4, r2, r3
 8003d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003df8 <CreateMessage+0x330>)
 8003d4c:	689d      	ldr	r5, [r3, #8]
 8003d4e:	4b33      	ldr	r3, [pc, #204]	@ (8003e1c <CreateMessage+0x354>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c18      	adds	r0, r3, #0
 8003d54:	f7ff fb7c 	bl	8003450 <__aeabi_f2d>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	000b      	movs	r3, r1
 8003d5c:	4820      	ldr	r0, [pc, #128]	@ (8003de0 <CreateMessage+0x318>)
 8003d5e:	4933      	ldr	r1, [pc, #204]	@ (8003e2c <CreateMessage+0x364>)
 8003d60:	9202      	str	r2, [sp, #8]
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	4b23      	ldr	r3, [pc, #140]	@ (8003df4 <CreateMessage+0x32c>)
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	0003      	movs	r3, r0
 8003d6a:	002a      	movs	r2, r5
 8003d6c:	0020      	movs	r0, r4
 8003d6e:	f017 f915 	bl	801af9c <siprintf>
    index = strlen(message);
 8003d72:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <CreateMessage+0x324>)
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7fc f9ef 	bl	8000158 <strlen>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	19bb      	adds	r3, r7, r6
 8003d7e:	801a      	strh	r2, [r3, #0]
  }

  index = sprintf(&message[index], "]");
 8003d80:	240e      	movs	r4, #14
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	4b19      	ldr	r3, [pc, #100]	@ (8003dec <CreateMessage+0x324>)
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	4a29      	ldr	r2, [pc, #164]	@ (8003e30 <CreateMessage+0x368>)
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f017 f904 	bl	801af9c <siprintf>
 8003d94:	0002      	movs	r2, r0
 8003d96:	193b      	adds	r3, r7, r4
 8003d98:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003d9a:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <CreateMessage+0x324>)
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fc f9db 	bl	8000158 <strlen>
 8003da2:	0003      	movs	r3, r0
 8003da4:	b29b      	uxth	r3, r3
}
 8003da6:	0018      	movs	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b005      	add	sp, #20
 8003dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	2000097c 	.word	0x2000097c
 8003db4:	0808000c 	.word	0x0808000c
 8003db8:	20000988 	.word	0x20000988
 8003dbc:	08080018 	.word	0x08080018
 8003dc0:	20000994 	.word	0x20000994
 8003dc4:	08080048 	.word	0x08080048
 8003dc8:	200009a0 	.word	0x200009a0
 8003dcc:	08080030 	.word	0x08080030
 8003dd0:	200009ac 	.word	0x200009ac
 8003dd4:	0808006c 	.word	0x0808006c
 8003dd8:	200009b8 	.word	0x200009b8
 8003ddc:	08080078 	.word	0x08080078
 8003de0:	200009c4 	.word	0x200009c4
 8003de4:	08080090 	.word	0x08080090
 8003de8:	0801ef14 	.word	0x0801ef14
 8003dec:	20000528 	.word	0x20000528
 8003df0:	0801e200 	.word	0x0801e200
 8003df4:	200009e4 	.word	0x200009e4
 8003df8:	200004fc 	.word	0x200004fc
 8003dfc:	20000510 	.word	0x20000510
 8003e00:	0801e204 	.word	0x0801e204
 8003e04:	20000514 	.word	0x20000514
 8003e08:	0801e258 	.word	0x0801e258
 8003e0c:	20000524 	.word	0x20000524
 8003e10:	0801e2b0 	.word	0x0801e2b0
 8003e14:	20000520 	.word	0x20000520
 8003e18:	0801e308 	.word	0x0801e308
 8003e1c:	20000518 	.word	0x20000518
 8003e20:	0801e35c 	.word	0x0801e35c
 8003e24:	2000051c 	.word	0x2000051c
 8003e28:	0801e3bc 	.word	0x0801e3bc
 8003e2c:	0801e418 	.word	0x0801e418
 8003e30:	0801e470 	.word	0x0801e470

08003e34 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e38:	2064      	movs	r0, #100	@ 0x64
 8003e3a:	f007 fb13 	bl	800b464 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <StartProg+0x60>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	2101      	movs	r1, #1
 8003e44:	0018      	movs	r0, r3
 8003e46:	f008 fd62 	bl	800c90e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e4a:	2064      	movs	r0, #100	@ 0x64
 8003e4c:	f007 fb0a 	bl	800b464 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e50:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <StartProg+0x60>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	2102      	movs	r1, #2
 8003e56:	0018      	movs	r0, r3
 8003e58:	f008 fd59 	bl	800c90e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e5c:	23fa      	movs	r3, #250	@ 0xfa
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	0018      	movs	r0, r3
 8003e62:	f007 faff 	bl	800b464 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <StartProg+0x60>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f008 fd4e 	bl	800c90e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e72:	23fa      	movs	r3, #250	@ 0xfa
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	0018      	movs	r0, r3
 8003e78:	f007 faf4 	bl	800b464 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <StartProg+0x60>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2102      	movs	r1, #2
 8003e82:	0018      	movs	r0, r3
 8003e84:	f008 fd43 	bl	800c90e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003e88:	2028      	movs	r0, #40	@ 0x28
 8003e8a:	f007 faeb 	bl	800b464 <HAL_Delay>
}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	50001c00 	.word	0x50001c00

08003e98 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	b0d1      	sub	sp, #324	@ 0x144
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	0008      	movs	r0, r1
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8004120 <ParseBuffer+0x288>)
 8003ea6:	24a0      	movs	r4, #160	@ 0xa0
 8003ea8:	0064      	lsls	r4, r4, #1
 8003eaa:	191b      	adds	r3, r3, r4
 8003eac:	19db      	adds	r3, r3, r7
 8003eae:	1c02      	adds	r2, r0, #0
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8004124 <ParseBuffer+0x28c>)
 8003eb4:	191b      	adds	r3, r3, r4
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	1c0a      	adds	r2, r1, #0
 8003eba:	701a      	strb	r2, [r3, #0]
  char tempBuf[250];
  memset(tempBuf, '\0', 250);
 8003ebc:	2330      	movs	r3, #48	@ 0x30
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	22fa      	movs	r2, #250	@ 0xfa
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f017 f90d 	bl	801b0e4 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003eca:	2340      	movs	r3, #64	@ 0x40
 8003ecc:	33ff      	adds	r3, #255	@ 0xff
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003ed4:	239e      	movs	r3, #158	@ 0x9e
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2200      	movs	r2, #0
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	e013      	b.n	8003f08 <ParseBuffer+0x70>
    tempBuf[i] = (char)buffer[i];
 8003ee0:	209e      	movs	r0, #158	@ 0x9e
 8003ee2:	0040      	lsls	r0, r0, #1
 8003ee4:	183b      	adds	r3, r7, r0
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	18d2      	adds	r2, r2, r3
 8003eec:	183b      	adds	r3, r7, r0
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	7811      	ldrb	r1, [r2, #0]
 8003ef2:	4a8d      	ldr	r2, [pc, #564]	@ (8004128 <ParseBuffer+0x290>)
 8003ef4:	24a0      	movs	r4, #160	@ 0xa0
 8003ef6:	0064      	lsls	r4, r4, #1
 8003ef8:	1912      	adds	r2, r2, r4
 8003efa:	19d2      	adds	r2, r2, r7
 8003efc:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003efe:	183b      	adds	r3, r7, r0
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	183b      	adds	r3, r7, r0
 8003f04:	3201      	adds	r2, #1
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	239e      	movs	r3, #158	@ 0x9e
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	18fa      	adds	r2, r7, r3
 8003f0e:	4b84      	ldr	r3, [pc, #528]	@ (8004120 <ParseBuffer+0x288>)
 8003f10:	25a0      	movs	r5, #160	@ 0xa0
 8003f12:	006d      	lsls	r5, r5, #1
 8003f14:	195b      	adds	r3, r3, r5
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3df      	bcc.n	8003ee0 <ParseBuffer+0x48>
  }
  tempBuf[len] = '\0';
 8003f20:	4b7f      	ldr	r3, [pc, #508]	@ (8004120 <ParseBuffer+0x288>)
 8003f22:	195b      	adds	r3, r3, r5
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	4a7f      	ldr	r2, [pc, #508]	@ (8004128 <ParseBuffer+0x290>)
 8003f2a:	1952      	adds	r2, r2, r5
 8003f2c:	19d2      	adds	r2, r2, r7
 8003f2e:	2100      	movs	r1, #0
 8003f30:	54d1      	strb	r1, [r2, r3]
  char * ParsePoint = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	269c      	movs	r6, #156	@ 0x9c
 8003f36:	0076      	lsls	r6, r6, #1
 8003f38:	19ba      	adds	r2, r7, r6
 8003f3a:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f3c:	4b7b      	ldr	r3, [pc, #492]	@ (800412c <ParseBuffer+0x294>)
 8003f3e:	195b      	adds	r3, r3, r5
 8003f40:	19db      	adds	r3, r3, r7
 8003f42:	4a7b      	ldr	r2, [pc, #492]	@ (8004130 <ParseBuffer+0x298>)
 8003f44:	8811      	ldrh	r1, [r2, #0]
 8003f46:	8019      	strh	r1, [r3, #0]
 8003f48:	7892      	ldrb	r2, [r2, #2]
 8003f4a:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f4c:	4b79      	ldr	r3, [pc, #484]	@ (8004134 <ParseBuffer+0x29c>)
 8003f4e:	195b      	adds	r3, r3, r5
 8003f50:	19db      	adds	r3, r3, r7
 8003f52:	4a79      	ldr	r2, [pc, #484]	@ (8004138 <ParseBuffer+0x2a0>)
 8003f54:	6811      	ldr	r1, [r2, #0]
 8003f56:	6019      	str	r1, [r3, #0]
 8003f58:	8892      	ldrh	r2, [r2, #4]
 8003f5a:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003f5c:	4b77      	ldr	r3, [pc, #476]	@ (800413c <ParseBuffer+0x2a4>)
 8003f5e:	195b      	adds	r3, r3, r5
 8003f60:	19db      	adds	r3, r3, r7
 8003f62:	4a77      	ldr	r2, [pc, #476]	@ (8004140 <ParseBuffer+0x2a8>)
 8003f64:	6811      	ldr	r1, [r2, #0]
 8003f66:	6019      	str	r1, [r3, #0]
 8003f68:	8892      	ldrh	r2, [r2, #4]
 8003f6a:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003f6c:	4b75      	ldr	r3, [pc, #468]	@ (8004144 <ParseBuffer+0x2ac>)
 8003f6e:	195b      	adds	r3, r3, r5
 8003f70:	19db      	adds	r3, r3, r7
 8003f72:	223e      	movs	r2, #62	@ 0x3e
 8003f74:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003f76:	4b74      	ldr	r3, [pc, #464]	@ (8004148 <ParseBuffer+0x2b0>)
 8003f78:	195b      	adds	r3, r3, r5
 8003f7a:	19db      	adds	r3, r3, r7
 8003f7c:	4a73      	ldr	r2, [pc, #460]	@ (800414c <ParseBuffer+0x2b4>)
 8003f7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f80:	c313      	stmia	r3!, {r0, r1, r4}
 8003f82:	8811      	ldrh	r1, [r2, #0]
 8003f84:	8019      	strh	r1, [r3, #0]
 8003f86:	7892      	ldrb	r2, [r2, #2]
 8003f88:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003f8a:	4b66      	ldr	r3, [pc, #408]	@ (8004124 <ParseBuffer+0x28c>)
 8003f8c:	195b      	adds	r3, r3, r5
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <ParseBuffer+0x114>
    ParsePoint = strstr(tempBuf, OK);
 8003f96:	232c      	movs	r3, #44	@ 0x2c
 8003f98:	18fa      	adds	r2, r7, r3
 8003f9a:	2330      	movs	r3, #48	@ 0x30
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f017 f8da 	bl	801b15a <strstr>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	19ba      	adds	r2, r7, r6
 8003faa:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003fac:	4b5d      	ldr	r3, [pc, #372]	@ (8004124 <ParseBuffer+0x28c>)
 8003fae:	22a0      	movs	r2, #160	@ 0xa0
 8003fb0:	0052      	lsls	r2, r2, #1
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	19db      	adds	r3, r3, r7
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10c      	bne.n	8003fd6 <ParseBuffer+0x13e>
    ParsePoint = strstr(tempBuf, ready);
 8003fbc:	231c      	movs	r3, #28
 8003fbe:	18fa      	adds	r2, r7, r3
 8003fc0:	2330      	movs	r3, #48	@ 0x30
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	0011      	movs	r1, r2
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f017 f8c7 	bl	801b15a <strstr>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	229c      	movs	r2, #156	@ 0x9c
 8003fd0:	0052      	lsls	r2, r2, #1
 8003fd2:	18ba      	adds	r2, r7, r2
 8003fd4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003fd6:	4b53      	ldr	r3, [pc, #332]	@ (8004124 <ParseBuffer+0x28c>)
 8003fd8:	22a0      	movs	r2, #160	@ 0xa0
 8003fda:	0052      	lsls	r2, r2, #1
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d10c      	bne.n	8004000 <ParseBuffer+0x168>
    ParsePoint = strstr(tempBuf, start);
 8003fe6:	2318      	movs	r3, #24
 8003fe8:	18fa      	adds	r2, r7, r3
 8003fea:	2330      	movs	r3, #48	@ 0x30
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	0011      	movs	r1, r2
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f017 f8b2 	bl	801b15a <strstr>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	229c      	movs	r2, #156	@ 0x9c
 8003ffa:	0052      	lsls	r2, r2, #1
 8003ffc:	18ba      	adds	r2, r7, r2
 8003ffe:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004000:	2324      	movs	r3, #36	@ 0x24
 8004002:	18fa      	adds	r2, r7, r3
 8004004:	2430      	movs	r4, #48	@ 0x30
 8004006:	193b      	adds	r3, r7, r4
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f017 f8a5 	bl	801b15a <strstr>
 8004010:	0003      	movs	r3, r0
 8004012:	229a      	movs	r2, #154	@ 0x9a
 8004014:	0052      	lsls	r2, r2, #1
 8004016:	18ba      	adds	r2, r7, r2
 8004018:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800401a:	2308      	movs	r3, #8
 800401c:	18fa      	adds	r2, r7, r3
 800401e:	193b      	adds	r3, r7, r4
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f017 f899 	bl	801b15a <strstr>
 8004028:	0003      	movs	r3, r0
 800402a:	2298      	movs	r2, #152	@ 0x98
 800402c:	0052      	lsls	r2, r2, #1
 800402e:	18ba      	adds	r2, r7, r2
 8004030:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004032:	4a47      	ldr	r2, [pc, #284]	@ (8004150 <ParseBuffer+0x2b8>)
 8004034:	193b      	adds	r3, r7, r4
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f017 f88e 	bl	801b15a <strstr>
 800403e:	0003      	movs	r3, r0
 8004040:	2296      	movs	r2, #150	@ 0x96
 8004042:	0052      	lsls	r2, r2, #1
 8004044:	18ba      	adds	r2, r7, r2
 8004046:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004048:	4b35      	ldr	r3, [pc, #212]	@ (8004120 <ParseBuffer+0x288>)
 800404a:	22a0      	movs	r2, #160	@ 0xa0
 800404c:	0052      	lsls	r2, r2, #1
 800404e:	189b      	adds	r3, r3, r2
 8004050:	19db      	adds	r3, r3, r7
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d95b      	bls.n	8004110 <ParseBuffer+0x278>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004058:	229c      	movs	r2, #156	@ 0x9c
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	18bb      	adds	r3, r7, r2
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <ParseBuffer+0x1e0>
 8004064:	18bb      	adds	r3, r7, r2
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b4f      	cmp	r3, #79	@ 0x4f
 800406c:	d104      	bne.n	8004078 <ParseBuffer+0x1e0>
      status = RECEIVE_STATUS_OK;
 800406e:	2340      	movs	r3, #64	@ 0x40
 8004070:	33ff      	adds	r3, #255	@ 0xff
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == 'r'){
 8004078:	229c      	movs	r2, #156	@ 0x9c
 800407a:	0052      	lsls	r2, r2, #1
 800407c:	18bb      	adds	r3, r7, r2
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <ParseBuffer+0x200>
 8004084:	18bb      	adds	r3, r7, r2
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b72      	cmp	r3, #114	@ 0x72
 800408c:	d104      	bne.n	8004098 <ParseBuffer+0x200>
      status = RECEIVE_STATUS_READY;
 800408e:	2340      	movs	r3, #64	@ 0x40
 8004090:	33ff      	adds	r3, #255	@ 0xff
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	2202      	movs	r2, #2
 8004096:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>'){
 8004098:	229c      	movs	r2, #156	@ 0x9c
 800409a:	0052      	lsls	r2, r2, #1
 800409c:	18bb      	adds	r3, r7, r2
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <ParseBuffer+0x220>
 80040a4:	18bb      	adds	r3, r7, r2
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80040ac:	d104      	bne.n	80040b8 <ParseBuffer+0x220>
      status = RECEIVE_STATUS_START;
 80040ae:	2340      	movs	r3, #64	@ 0x40
 80040b0:	33ff      	adds	r3, #255	@ 0xff
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2205      	movs	r2, #5
 80040b6:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint2 != 0 && *ParsePoint2 == 'E'){
 80040b8:	229a      	movs	r2, #154	@ 0x9a
 80040ba:	0052      	lsls	r2, r2, #1
 80040bc:	18bb      	adds	r3, r7, r2
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <ParseBuffer+0x240>
 80040c4:	18bb      	adds	r3, r7, r2
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b45      	cmp	r3, #69	@ 0x45
 80040cc:	d104      	bne.n	80040d8 <ParseBuffer+0x240>
      status = RECEIVE_STATUS_ERROR;
 80040ce:	2340      	movs	r3, #64	@ 0x40
 80040d0:	33ff      	adds	r3, #255	@ 0xff
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80040d8:	2298      	movs	r2, #152	@ 0x98
 80040da:	0052      	lsls	r2, r2, #1
 80040dc:	18bb      	adds	r3, r7, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <ParseBuffer+0x25c>
 80040e4:	18bb      	adds	r3, r7, r2
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b57      	cmp	r3, #87	@ 0x57
 80040ec:	d102      	bne.n	80040f4 <ParseBuffer+0x25c>
      ConnectionMade = true;
 80040ee:	4b19      	ldr	r3, [pc, #100]	@ (8004154 <ParseBuffer+0x2bc>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80040f4:	2296      	movs	r2, #150	@ 0x96
 80040f6:	0052      	lsls	r2, r2, #1
 80040f8:	18bb      	adds	r3, r7, r2
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <ParseBuffer+0x278>
 8004100:	18bb      	adds	r3, r7, r2
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b32      	cmp	r3, #50	@ 0x32
 8004108:	d102      	bne.n	8004110 <ParseBuffer+0x278>
      beurs = true;
 800410a:	4b13      	ldr	r3, [pc, #76]	@ (8004158 <ParseBuffer+0x2c0>)
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004110:	2340      	movs	r3, #64	@ 0x40
 8004112:	33ff      	adds	r3, #255	@ 0xff
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]

}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b051      	add	sp, #324	@ 0x144
 800411e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004120:	fffffec2 	.word	0xfffffec2
 8004124:	fffffec1 	.word	0xfffffec1
 8004128:	fffffef0 	.word	0xfffffef0
 800412c:	fffffeec 	.word	0xfffffeec
 8004130:	0801e474 	.word	0x0801e474
 8004134:	fffffee4 	.word	0xfffffee4
 8004138:	0801e478 	.word	0x0801e478
 800413c:	fffffedc 	.word	0xfffffedc
 8004140:	0801e480 	.word	0x0801e480
 8004144:	fffffed8 	.word	0xfffffed8
 8004148:	fffffec8 	.word	0xfffffec8
 800414c:	0801e488 	.word	0x0801e488
 8004150:	0801ef1c 	.word	0x0801ef1c
 8004154:	200004f7 	.word	0x200004f7
 8004158:	200004f9 	.word	0x200004f9

0800415c <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <PollAwake+0x34>)
 8004164:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	0018      	movs	r0, r3
 800416a:	f7fb fff5 	bl	8000158 <strlen>
 800416e:	0003      	movs	r3, r0
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff fc00 	bl	800397c <ESP_Send>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d001      	beq.n	8004184 <PollAwake+0x28>
    return true;
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <PollAwake+0x2a>
  }
  else{
    return false;
 8004184:	2300      	movs	r3, #0
  }
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	b002      	add	sp, #8
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	0801e498 	.word	0x0801e498

08004194 <RFPower>:
bool RFPower(){
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800419a:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <RFPower+0x34>)
 800419c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7fb ffd9 	bl	8000158 <strlen>
 80041a6:	0003      	movs	r3, r0
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	0011      	movs	r1, r2
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fbe4 	bl	800397c <ESP_Send>
 80041b4:	1e03      	subs	r3, r0, #0
 80041b6:	d001      	beq.n	80041bc <RFPower+0x28>
    return true;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <RFPower+0x2a>
  }
  else{
    return false;
 80041bc:	2300      	movs	r3, #0
  }
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b002      	add	sp, #8
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	0801e4a0 	.word	0x0801e4a0

080041cc <CheckRFPower>:
bool CheckRFPower(){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80041d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <CheckRFPower+0x34>)
 80041d4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0018      	movs	r0, r3
 80041da:	f7fb ffbd 	bl	8000158 <strlen>
 80041de:	0003      	movs	r3, r0
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0011      	movs	r1, r2
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7ff fbc8 	bl	800397c <ESP_Send>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d001      	beq.n	80041f4 <CheckRFPower+0x28>
    return true;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80041f4:	2300      	movs	r3, #0
  }
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b002      	add	sp, #8
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	0801e4b0 	.word	0x0801e4b0

08004204 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <ATRestore+0x34>)
 800420c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f7fb ffa1 	bl	8000158 <strlen>
 8004216:	0003      	movs	r3, r0
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0011      	movs	r1, r2
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff fbac 	bl	800397c <ESP_Send>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d001      	beq.n	800422c <ATRestore+0x28>
    return true;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <ATRestore+0x2a>
  }
  else{
    return false;
 800422c:	2300      	movs	r3, #0
  }
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b002      	add	sp, #8
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	0801e4c0 	.word	0x0801e4c0

0800423c <CWINIT>:
bool CWINIT(){
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <CWINIT+0x34>)
 8004244:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f7fb ff85 	bl	8000158 <strlen>
 800424e:	0003      	movs	r3, r0
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0011      	movs	r1, r2
 8004256:	0018      	movs	r0, r3
 8004258:	f7ff fb90 	bl	800397c <ESP_Send>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d001      	beq.n	8004264 <CWINIT+0x28>
    return true;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <CWINIT+0x2a>
  }
  else{
    return false;
 8004264:	2300      	movs	r3, #0
  }
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b002      	add	sp, #8
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	0801e4d0 	.word	0x0801e4d0

08004274 <CWMODE1>:
bool CWMODE1(){
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800427a:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <CWMODE1+0x34>)
 800427c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	0018      	movs	r0, r3
 8004282:	f7fb ff69 	bl	8000158 <strlen>
 8004286:	0003      	movs	r3, r0
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0011      	movs	r1, r2
 800428e:	0018      	movs	r0, r3
 8004290:	f7ff fb74 	bl	800397c <ESP_Send>
 8004294:	1e03      	subs	r3, r0, #0
 8004296:	d001      	beq.n	800429c <CWMODE1+0x28>
    return true;
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <CWMODE1+0x2a>
  }
  else{
    return false;
 800429c:	2300      	movs	r3, #0
  }
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	0801e4e0 	.word	0x0801e4e0

080042ac <CWMODE2>:
bool CWMODE2(){
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <CWMODE2+0x34>)
 80042b4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fb ff4d 	bl	8000158 <strlen>
 80042be:	0003      	movs	r3, r0
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0011      	movs	r1, r2
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7ff fb58 	bl	800397c <ESP_Send>
 80042cc:	1e03      	subs	r3, r0, #0
 80042ce:	d001      	beq.n	80042d4 <CWMODE2+0x28>
    return true;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <CWMODE2+0x2a>
  }
  else{
    return false;
 80042d4:	2300      	movs	r3, #0
  }
}
 80042d6:	0018      	movs	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	b002      	add	sp, #8
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	0801e4f0 	.word	0x0801e4f0

080042e4 <CWAUTOCONN>:
bool CWAUTOCONN(){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80042ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <CWAUTOCONN+0x34>)
 80042ec:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7fb ff31 	bl	8000158 <strlen>
 80042f6:	0003      	movs	r3, r0
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0011      	movs	r1, r2
 80042fe:	0018      	movs	r0, r3
 8004300:	f7ff fb3c 	bl	800397c <ESP_Send>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d001      	beq.n	800430c <CWAUTOCONN+0x28>
    return true;
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 800430c:	2300      	movs	r3, #0
  }
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b002      	add	sp, #8
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	0801e500 	.word	0x0801e500

0800431c <CWJAP>:
bool CWJAP(){
 800431c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431e:	46c6      	mov	lr, r8
 8004320:	b500      	push	{lr}
 8004322:	b0a2      	sub	sp, #136	@ 0x88
 8004324:	af00      	add	r7, sp, #0
 8004326:	466b      	mov	r3, sp
 8004328:	4698      	mov	r8, r3
  beursTest = true;
 800432a:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <CWJAP+0xf4>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004330:	2618      	movs	r6, #24
 8004332:	19bb      	adds	r3, r7, r6
 8004334:	2264      	movs	r2, #100	@ 0x64
 8004336:	2100      	movs	r1, #0
 8004338:	0018      	movs	r0, r3
 800433a:	f016 fed3 	bl	801b0e4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800433e:	4b35      	ldr	r3, [pc, #212]	@ (8004414 <CWJAP+0xf8>)
 8004340:	4a35      	ldr	r2, [pc, #212]	@ (8004418 <CWJAP+0xfc>)
 8004342:	4936      	ldr	r1, [pc, #216]	@ (800441c <CWJAP+0x100>)
 8004344:	19b8      	adds	r0, r7, r6
 8004346:	f016 fe29 	bl	801af9c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800434a:	19bb      	adds	r3, r7, r6
 800434c:	0018      	movs	r0, r3
 800434e:	f7fb ff03 	bl	8000158 <strlen>
 8004352:	0002      	movs	r2, r0
 8004354:	216f      	movs	r1, #111	@ 0x6f
 8004356:	0030      	movs	r0, r6
 8004358:	180b      	adds	r3, r1, r0
 800435a:	19db      	adds	r3, r3, r7
 800435c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800435e:	180b      	adds	r3, r1, r0
 8004360:	19db      	adds	r3, r3, r7
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	1e5a      	subs	r2, r3, #1
 8004368:	2180      	movs	r1, #128	@ 0x80
 800436a:	1879      	adds	r1, r7, r1
 800436c:	600a      	str	r2, [r1, #0]
 800436e:	001a      	movs	r2, r3
 8004370:	60ba      	str	r2, [r7, #8]
 8004372:	2200      	movs	r2, #0
 8004374:	60fa      	str	r2, [r7, #12]
 8004376:	68b8      	ldr	r0, [r7, #8]
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	0002      	movs	r2, r0
 800437c:	0f52      	lsrs	r2, r2, #29
 800437e:	000e      	movs	r6, r1
 8004380:	00f6      	lsls	r6, r6, #3
 8004382:	617e      	str	r6, [r7, #20]
 8004384:	697e      	ldr	r6, [r7, #20]
 8004386:	4316      	orrs	r6, r2
 8004388:	617e      	str	r6, [r7, #20]
 800438a:	0002      	movs	r2, r0
 800438c:	00d2      	lsls	r2, r2, #3
 800438e:	613a      	str	r2, [r7, #16]
 8004390:	001a      	movs	r2, r3
 8004392:	603a      	str	r2, [r7, #0]
 8004394:	2200      	movs	r2, #0
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	6838      	ldr	r0, [r7, #0]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	0002      	movs	r2, r0
 800439e:	0f52      	lsrs	r2, r2, #29
 80043a0:	000e      	movs	r6, r1
 80043a2:	00f5      	lsls	r5, r6, #3
 80043a4:	4315      	orrs	r5, r2
 80043a6:	0002      	movs	r2, r0
 80043a8:	00d4      	lsls	r4, r2, #3
 80043aa:	3307      	adds	r3, #7
 80043ac:	08db      	lsrs	r3, r3, #3
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	466a      	mov	r2, sp
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	469d      	mov	sp, r3
 80043b6:	466b      	mov	r3, sp
 80043b8:	3300      	adds	r3, #0
 80043ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80043bc:	246f      	movs	r4, #111	@ 0x6f
 80043be:	2518      	movs	r5, #24
 80043c0:	1963      	adds	r3, r4, r5
 80043c2:	19db      	adds	r3, r3, r7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	001a      	movs	r2, r3
 80043ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043cc:	2100      	movs	r1, #0
 80043ce:	0018      	movs	r0, r3
 80043d0:	f016 fe88 	bl	801b0e4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80043d4:	1963      	adds	r3, r4, r5
 80043d6:	19db      	adds	r3, r3, r7
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	1979      	adds	r1, r7, r5
 80043dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043de:	0018      	movs	r0, r3
 80043e0:	f016 fea7 	bl	801b132 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80043e4:	1963      	adds	r3, r4, r5
 80043e6:	19db      	adds	r3, r3, r7
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fac3 	bl	800397c <ESP_Send>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d001      	beq.n	80043fe <CWJAP+0xe2>
    return true;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <CWJAP+0xe4>
  }
  else{
    return false;
 80043fe:	2300      	movs	r3, #0
 8004400:	46c5      	mov	sp, r8
  }
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b022      	add	sp, #136	@ 0x88
 8004408:	bc80      	pop	{r7}
 800440a:	46b8      	mov	r8, r7
 800440c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	200004f8 	.word	0x200004f8
 8004414:	0801ef28 	.word	0x0801ef28
 8004418:	0801ef1c 	.word	0x0801ef1c
 800441c:	0801e514 	.word	0x0801e514

08004420 <CWMODE3>:
bool CWMODE3(){
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004426:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <CWMODE3+0x34>)
 8004428:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f7fb fe93 	bl	8000158 <strlen>
 8004432:	0003      	movs	r3, r0
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0011      	movs	r1, r2
 800443a:	0018      	movs	r0, r3
 800443c:	f7ff fa9e 	bl	800397c <ESP_Send>
 8004440:	1e03      	subs	r3, r0, #0
 8004442:	d001      	beq.n	8004448 <CWMODE3+0x28>
    return true;
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <CWMODE3+0x2a>
  }
  else{
    return false;
 8004448:	2300      	movs	r3, #0
  }
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b002      	add	sp, #8
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	0801e52c 	.word	0x0801e52c

08004458 <CWSTATE>:
bool CWSTATE(){
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800445e:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <CWSTATE+0x34>)
 8004460:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0018      	movs	r0, r3
 8004466:	f7fb fe77 	bl	8000158 <strlen>
 800446a:	0003      	movs	r3, r0
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0011      	movs	r1, r2
 8004472:	0018      	movs	r0, r3
 8004474:	f7ff fa82 	bl	800397c <ESP_Send>
 8004478:	1e03      	subs	r3, r0, #0
 800447a:	d001      	beq.n	8004480 <CWSTATE+0x28>
    return true;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004480:	2300      	movs	r3, #0
  }
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b002      	add	sp, #8
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	0801e53c 	.word	0x0801e53c

08004490 <CWSAP>:
bool CWSAP(){
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004496:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <CWSAP+0x34>)
 8004498:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0018      	movs	r0, r3
 800449e:	f7fb fe5b 	bl	8000158 <strlen>
 80044a2:	0003      	movs	r3, r0
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0011      	movs	r1, r2
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7ff fa66 	bl	800397c <ESP_Send>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d001      	beq.n	80044b8 <CWSAP+0x28>
    return true;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <CWSAP+0x2a>
  }
  else{
    return false;
 80044b8:	2300      	movs	r3, #0
  }
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b002      	add	sp, #8
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	0801e54c 	.word	0x0801e54c

080044c8 <CIPMUX>:
bool CIPMUX(){
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80044ce:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <CIPMUX+0x34>)
 80044d0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7fb fe3f 	bl	8000158 <strlen>
 80044da:	0003      	movs	r3, r0
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0011      	movs	r1, r2
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7ff fa4a 	bl	800397c <ESP_Send>
 80044e8:	1e03      	subs	r3, r0, #0
 80044ea:	d001      	beq.n	80044f0 <CIPMUX+0x28>
    return true;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <CIPMUX+0x2a>
  }
  else{
    return false;
 80044f0:	2300      	movs	r3, #0
  }
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b002      	add	sp, #8
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	0801e570 	.word	0x0801e570

08004500 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <WEBSERVER+0x34>)
 8004508:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f7fb fe23 	bl	8000158 <strlen>
 8004512:	0003      	movs	r3, r0
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0011      	movs	r1, r2
 800451a:	0018      	movs	r0, r3
 800451c:	f7ff fa2e 	bl	800397c <ESP_Send>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d001      	beq.n	8004528 <WEBSERVER+0x28>
    return true;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004528:	2300      	movs	r3, #0
  }
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b002      	add	sp, #8
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	0801e580 	.word	0x0801e580

08004538 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b0c5      	sub	sp, #276	@ 0x114
 800453c:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800453e:	2380      	movs	r3, #128	@ 0x80
 8004540:	005a      	lsls	r2, r3, #1
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	2100      	movs	r1, #0
 8004546:	0018      	movs	r0, r3
 8004548:	f016 fdcc 	bl	801b0e4 <memset>
  uint16_t length = CreateMessage(beurs);
 800454c:	4b22      	ldr	r3, [pc, #136]	@ (80045d8 <HTTPCPOST+0xa0>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	1dfc      	adds	r4, r7, #7
 8004552:	34ff      	adds	r4, #255	@ 0xff
 8004554:	0018      	movs	r0, r3
 8004556:	f7ff fab7 	bl	8003ac8 <CreateMessage>
 800455a:	0003      	movs	r3, r0
 800455c:	8023      	strh	r3, [r4, #0]
  if(beurs){
 800455e:	4b1e      	ldr	r3, [pc, #120]	@ (80045d8 <HTTPCPOST+0xa0>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	33ff      	adds	r3, #255	@ 0xff
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <HTTPCPOST+0xa4>)
 800456e:	491c      	ldr	r1, [pc, #112]	@ (80045e0 <HTTPCPOST+0xa8>)
 8004570:	1d38      	adds	r0, r7, #4
 8004572:	f016 fd13 	bl	801af9c <siprintf>
 8004576:	e016      	b.n	80045a6 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004578:	4b1a      	ldr	r3, [pc, #104]	@ (80045e4 <HTTPCPOST+0xac>)
 800457a:	481b      	ldr	r0, [pc, #108]	@ (80045e8 <HTTPCPOST+0xb0>)
 800457c:	220c      	movs	r2, #12
 800457e:	0019      	movs	r1, r3
 8004580:	f7ff f8b0 	bl	80036e4 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004584:	4a17      	ldr	r2, [pc, #92]	@ (80045e4 <HTTPCPOST+0xac>)
 8004586:	4b19      	ldr	r3, [pc, #100]	@ (80045ec <HTTPCPOST+0xb4>)
 8004588:	0011      	movs	r1, r2
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff fa78 	bl	8003a80 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	33ff      	adds	r3, #255	@ 0xff
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	4c15      	ldr	r4, [pc, #84]	@ (80045ec <HTTPCPOST+0xb4>)
 8004598:	4a15      	ldr	r2, [pc, #84]	@ (80045f0 <HTTPCPOST+0xb8>)
 800459a:	4916      	ldr	r1, [pc, #88]	@ (80045f4 <HTTPCPOST+0xbc>)
 800459c:	1d38      	adds	r0, r7, #4
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	0023      	movs	r3, r4
 80045a2:	f016 fcfb 	bl	801af9c <siprintf>
  }
    uint16_t len = strlen(atCommandBuff);
 80045a6:	1d3b      	adds	r3, r7, #4
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fb fdd5 	bl	8000158 <strlen>
 80045ae:	0002      	movs	r2, r0
 80045b0:	1d7b      	adds	r3, r7, #5
 80045b2:	33ff      	adds	r3, #255	@ 0xff
 80045b4:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 80045b6:	1d7b      	adds	r3, r7, #5
 80045b8:	33ff      	adds	r3, #255	@ 0xff
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff f9db 	bl	800397c <ESP_Send>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d001      	beq.n	80045ce <HTTPCPOST+0x96>
    return true;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HTTPCPOST+0x98>
  }
  else{
    return false;
 80045ce:	2300      	movs	r3, #0
  }
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b043      	add	sp, #268	@ 0x10c
 80045d6:	bd90      	pop	{r4, r7, pc}
 80045d8:	200004f9 	.word	0x200004f9
 80045dc:	0801ef38 	.word	0x0801ef38
 80045e0:	0801e598 	.word	0x0801e598
 80045e4:	20000a00 	.word	0x20000a00
 80045e8:	08080000 	.word	0x08080000
 80045ec:	20000a0c 	.word	0x20000a0c
 80045f0:	0801ef74 	.word	0x0801ef74
 80045f4:	0801e5d0 	.word	0x0801e5d0

080045f8 <SENDDATA>:
bool SENDDATA(){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 80045fe:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <SENDDATA+0x34>)
 8004600:	0018      	movs	r0, r3
 8004602:	f7fb fda9 	bl	8000158 <strlen>
 8004606:	0002      	movs	r2, r0
 8004608:	1dbb      	adds	r3, r7, #6
 800460a:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 800460c:	1dbb      	adds	r3, r7, #6
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	4b06      	ldr	r3, [pc, #24]	@ (800462c <SENDDATA+0x34>)
 8004612:	0011      	movs	r1, r2
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff f9b1 	bl	800397c <ESP_Send>
 800461a:	1e03      	subs	r3, r0, #0
 800461c:	d001      	beq.n	8004622 <SENDDATA+0x2a>
    return true;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <SENDDATA+0x2c>
  }
  else{
    return false;
 8004622:	2300      	movs	r3, #0
  }
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000528 	.word	0x20000528

08004630 <SLEEP>:
bool SLEEP(){
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <SLEEP+0x34>)
 8004638:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f7fb fd8b 	bl	8000158 <strlen>
 8004642:	0003      	movs	r3, r0
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0011      	movs	r1, r2
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff f996 	bl	800397c <ESP_Send>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <SLEEP+0x28>
    return true;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <SLEEP+0x2a>
  }
  else{
    return false;
 8004658:	2300      	movs	r3, #0
  }
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	0801e610 	.word	0x0801e610

08004668 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	0002      	movs	r2, r0
 8004670:	1dfb      	adds	r3, r7, #7
 8004672:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004674:	4b61      	ldr	r3, [pc, #388]	@ (80047fc <DMA_ProcessBuffer+0x194>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	210e      	movs	r1, #14
 800467e:	187b      	adds	r3, r7, r1
 8004680:	43d2      	mvns	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004684:	200f      	movs	r0, #15
 8004686:	183b      	adds	r3, r7, r0
 8004688:	2203      	movs	r2, #3
 800468a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 800468c:	4b5c      	ldr	r3, [pc, #368]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	187a      	adds	r2, r7, r1
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d130      	bne.n	80046fc <DMA_ProcessBuffer+0x94>
      if(retry >4){
 800469a:	4b5a      	ldr	r3, [pc, #360]	@ (8004804 <DMA_ProcessBuffer+0x19c>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d91a      	bls.n	80046d8 <DMA_ProcessBuffer+0x70>
        retry = 0;
 80046a2:	4b58      	ldr	r3, [pc, #352]	@ (8004804 <DMA_ProcessBuffer+0x19c>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80046a8:	4b57      	ldr	r3, [pc, #348]	@ (8004808 <DMA_ProcessBuffer+0x1a0>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <DMA_ProcessBuffer+0x56>
 80046b0:	4b56      	ldr	r3, [pc, #344]	@ (800480c <DMA_ProcessBuffer+0x1a4>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 80046b8:	183b      	adds	r3, r7, r0
 80046ba:	2207      	movs	r2, #7
 80046bc:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80046be:	4b52      	ldr	r3, [pc, #328]	@ (8004808 <DMA_ProcessBuffer+0x1a0>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d103      	bne.n	80046ce <DMA_ProcessBuffer+0x66>
          EspState = ESP_STATE_MODE_SELECT;
 80046c6:	4b52      	ldr	r3, [pc, #328]	@ (8004810 <DMA_ProcessBuffer+0x1a8>)
 80046c8:	220b      	movs	r2, #11
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	e016      	b.n	80046fc <DMA_ProcessBuffer+0x94>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80046ce:	230f      	movs	r3, #15
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	2206      	movs	r2, #6
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e011      	b.n	80046fc <DMA_ProcessBuffer+0x94>
        }
      }
     else{
       retry ++;
 80046d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004804 <DMA_ProcessBuffer+0x19c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	4b48      	ldr	r3, [pc, #288]	@ (8004804 <DMA_ProcessBuffer+0x19c>)
 80046e2:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80046e4:	f006 feb4 	bl	800b450 <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	33f5      	adds	r3, #245	@ 0xf5
 80046ec:	33ff      	adds	r3, #255	@ 0xff
 80046ee:	001a      	movs	r2, r3
 80046f0:	4b48      	ldr	r3, [pc, #288]	@ (8004814 <DMA_ProcessBuffer+0x1ac>)
 80046f2:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80046f4:	230f      	movs	r3, #15
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2204      	movs	r2, #4
 80046fa:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80046fc:	4b40      	ldr	r3, [pc, #256]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	210e      	movs	r1, #14
 8004704:	187a      	adds	r2, r7, r1
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d070      	beq.n	80047ee <DMA_ProcessBuffer+0x186>
      retry = 0;
 800470c:	4b3d      	ldr	r3, [pc, #244]	@ (8004804 <DMA_ProcessBuffer+0x19c>)
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004712:	4b41      	ldr	r3, [pc, #260]	@ (8004818 <DMA_ProcessBuffer+0x1b0>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	4b39      	ldr	r3, [pc, #228]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	429a      	cmp	r2, r3
 8004720:	d108      	bne.n	8004734 <DMA_ProcessBuffer+0xcc>
        TempPos = pos;
 8004722:	4b3d      	ldr	r3, [pc, #244]	@ (8004818 <DMA_ProcessBuffer+0x1b0>)
 8004724:	187a      	adds	r2, r7, r1
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800472a:	230f      	movs	r3, #15
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	220a      	movs	r2, #10
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e05c      	b.n	80047ee <DMA_ProcessBuffer+0x186>
      }
      else{
        if(TempPos != pos){
 8004734:	4b38      	ldr	r3, [pc, #224]	@ (8004818 <DMA_ProcessBuffer+0x1b0>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	210e      	movs	r1, #14
 800473c:	187a      	adds	r2, r7, r1
 800473e:	7812      	ldrb	r2, [r2, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d008      	beq.n	8004756 <DMA_ProcessBuffer+0xee>
          TempPos = pos;
 8004744:	4b34      	ldr	r3, [pc, #208]	@ (8004818 <DMA_ProcessBuffer+0x1b0>)
 8004746:	187a      	adds	r2, r7, r1
 8004748:	7812      	ldrb	r2, [r2, #0]
 800474a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 800474c:	230f      	movs	r3, #15
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	220a      	movs	r2, #10
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e04b      	b.n	80047ee <DMA_ProcessBuffer+0x186>
        }
        else{
          if (pos > OldPos) {
 8004756:	4b2a      	ldr	r3, [pc, #168]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	210e      	movs	r1, #14
 800475e:	187a      	adds	r2, r7, r1
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d917      	bls.n	8004796 <DMA_ProcessBuffer+0x12e>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004766:	4b26      	ldr	r3, [pc, #152]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	001a      	movs	r2, r3
 800476e:	4b2b      	ldr	r3, [pc, #172]	@ (800481c <DMA_ProcessBuffer+0x1b4>)
 8004770:	18d0      	adds	r0, r2, r3
 8004772:	187b      	adds	r3, r7, r1
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	4a21      	ldr	r2, [pc, #132]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 800477a:	7812      	ldrb	r2, [r2, #0]
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	b299      	uxth	r1, r3
 8004782:	230f      	movs	r3, #15
 8004784:	18fc      	adds	r4, r7, r3
 8004786:	1dfb      	adds	r3, r7, #7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	001a      	movs	r2, r3
 800478c:	f7ff fb84 	bl	8003e98 <ParseBuffer>
 8004790:	0003      	movs	r3, r0
 8004792:	7023      	strb	r3, [r4, #0]
 8004794:	e026      	b.n	80047e4 <DMA_ProcessBuffer+0x17c>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004796:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	001a      	movs	r2, r3
 800479e:	4b1f      	ldr	r3, [pc, #124]	@ (800481c <DMA_ProcessBuffer+0x1b4>)
 80047a0:	18d0      	adds	r0, r2, r3
 80047a2:	4b17      	ldr	r3, [pc, #92]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	001a      	movs	r2, r3
 80047aa:	23ff      	movs	r3, #255	@ 0xff
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	b299      	uxth	r1, r3
 80047b0:	250f      	movs	r5, #15
 80047b2:	197c      	adds	r4, r7, r5
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	001a      	movs	r2, r3
 80047ba:	f7ff fb6d 	bl	8003e98 <ParseBuffer>
 80047be:	0003      	movs	r3, r0
 80047c0:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80047c2:	220e      	movs	r2, #14
 80047c4:	18bb      	adds	r3, r7, r2
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <DMA_ProcessBuffer+0x17c>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80047cc:	18bb      	adds	r3, r7, r2
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b299      	uxth	r1, r3
 80047d2:	197c      	adds	r4, r7, r5
 80047d4:	1dfb      	adds	r3, r7, #7
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	4b10      	ldr	r3, [pc, #64]	@ (800481c <DMA_ProcessBuffer+0x1b4>)
 80047da:	0018      	movs	r0, r3
 80047dc:	f7ff fb5c 	bl	8003e98 <ParseBuffer>
 80047e0:	0003      	movs	r3, r0
 80047e2:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 80047e4:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <DMA_ProcessBuffer+0x198>)
 80047e6:	220e      	movs	r2, #14
 80047e8:	18ba      	adds	r2, r7, r2
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 80047ee:	230f      	movs	r3, #15
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	781b      	ldrb	r3, [r3, #0]
}
 80047f4:	0018      	movs	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b004      	add	sp, #16
 80047fa:	bdb0      	pop	{r4, r5, r7, pc}
 80047fc:	2000239c 	.word	0x2000239c
 8004800:	20000a25 	.word	0x20000a25
 8004804:	20000938 	.word	0x20000938
 8004808:	2000093a 	.word	0x2000093a
 800480c:	20000000 	.word	0x20000000
 8004810:	20000021 	.word	0x20000021
 8004814:	20000934 	.word	0x20000934
 8004818:	20000a26 	.word	0x20000a26
 800481c:	200003f4 	.word	0x200003f4

08004820 <clearDMABuffer>:

void clearDMABuffer(){
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004824:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <clearDMABuffer+0x18>)
 8004826:	22ff      	movs	r2, #255	@ 0xff
 8004828:	2100      	movs	r1, #0
 800482a:	0018      	movs	r0, r3
 800482c:	f016 fc5a 	bl	801b0e4 <memset>
}
 8004830:	46c0      	nop			@ (mov r8, r8)
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	200003f4 	.word	0x200003f4

0800483c <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	0002      	movs	r2, r0
 8004844:	1dfb      	adds	r3, r7, #7
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	1dbb      	adds	r3, r7, #6
 800484a:	1c0a      	adds	r2, r1, #0
 800484c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800484e:	210f      	movs	r1, #15
 8004850:	187b      	adds	r3, r7, r1
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004856:	1dbb      	adds	r3, r7, #6
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d105      	bne.n	800486a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800485e:	187b      	adds	r3, r7, r1
 8004860:	1dfa      	adds	r2, r7, #7
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	4251      	negs	r1, r2
 8004866:	414a      	adcs	r2, r1
 8004868:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800486a:	1dbb      	adds	r3, r7, #6
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d107      	bne.n	8004882 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004872:	230f      	movs	r3, #15
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	1dfa      	adds	r2, r7, #7
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	3a02      	subs	r2, #2
 800487c:	4251      	negs	r1, r2
 800487e:	414a      	adcs	r2, r1
 8004880:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004882:	1dbb      	adds	r3, r7, #6
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d107      	bne.n	800489a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800488a:	230f      	movs	r3, #15
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	1dfa      	adds	r2, r7, #7
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	3a05      	subs	r2, #5
 8004894:	4251      	negs	r1, r2
 8004896:	414a      	adcs	r2, r1
 8004898:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800489a:	230f      	movs	r3, #15
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	781b      	ldrb	r3, [r3, #0]
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b004      	add	sp, #16
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <AT_Send>:

bool AT_Send(AT_Commands state){
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	0002      	movs	r2, r0
 80048b0:	1dfb      	adds	r3, r7, #7
 80048b2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80048b4:	230f      	movs	r3, #15
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
  switch (state){
 80048bc:	1dfb      	adds	r3, r7, #7
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b11      	cmp	r3, #17
 80048c2:	d900      	bls.n	80048c6 <AT_Send+0x1e>
 80048c4:	e15b      	b.n	8004b7e <AT_Send+0x2d6>
 80048c6:	009a      	lsls	r2, r3, #2
 80048c8:	4bb0      	ldr	r3, [pc, #704]	@ (8004b8c <AT_Send+0x2e4>)
 80048ca:	18d3      	adds	r3, r2, r3
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80048d0:	4baf      	ldr	r3, [pc, #700]	@ (8004b90 <AT_Send+0x2e8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f006 f9c3 	bl	800ac60 <TimestampIsReached>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d100      	bne.n	80048e0 <AT_Send+0x38>
 80048de:	e14d      	b.n	8004b7c <AT_Send+0x2d4>
    ATCommandSend = PollAwake();
 80048e0:	230f      	movs	r3, #15
 80048e2:	18fc      	adds	r4, r7, r3
 80048e4:	f7ff fc3a 	bl	800415c <PollAwake>
 80048e8:	0003      	movs	r3, r0
 80048ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80048ec:	f006 fdb0 	bl	800b450 <HAL_GetTick>
 80048f0:	0003      	movs	r3, r0
 80048f2:	3332      	adds	r3, #50	@ 0x32
 80048f4:	001a      	movs	r2, r3
 80048f6:	4ba6      	ldr	r3, [pc, #664]	@ (8004b90 <AT_Send+0x2e8>)
 80048f8:	601a      	str	r2, [r3, #0]
  }
  break;
 80048fa:	e13f      	b.n	8004b7c <AT_Send+0x2d4>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80048fc:	4aa5      	ldr	r2, [pc, #660]	@ (8004b94 <AT_Send+0x2ec>)
 80048fe:	4ba6      	ldr	r3, [pc, #664]	@ (8004b98 <AT_Send+0x2f0>)
 8004900:	0019      	movs	r1, r3
 8004902:	2003      	movs	r0, #3
 8004904:	f006 fa02 	bl	800ad0c <CreateLine>
    ATCommandSend = RFPower();
 8004908:	230f      	movs	r3, #15
 800490a:	18fc      	adds	r4, r7, r3
 800490c:	f7ff fc42 	bl	8004194 <RFPower>
 8004910:	0003      	movs	r3, r0
 8004912:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004914:	f006 fd9c 	bl	800b450 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	330a      	adds	r3, #10
 800491c:	001a      	movs	r2, r3
 800491e:	4b9c      	ldr	r3, [pc, #624]	@ (8004b90 <AT_Send+0x2e8>)
 8004920:	601a      	str	r2, [r3, #0]
    break;
 8004922:	e12c      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004924:	4a9d      	ldr	r2, [pc, #628]	@ (8004b9c <AT_Send+0x2f4>)
 8004926:	4b9c      	ldr	r3, [pc, #624]	@ (8004b98 <AT_Send+0x2f0>)
 8004928:	0019      	movs	r1, r3
 800492a:	2003      	movs	r0, #3
 800492c:	f006 f9ee 	bl	800ad0c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004930:	230f      	movs	r3, #15
 8004932:	18fc      	adds	r4, r7, r3
 8004934:	f7ff fc4a 	bl	80041cc <CheckRFPower>
 8004938:	0003      	movs	r3, r0
 800493a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800493c:	f006 fd88 	bl	800b450 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	330a      	adds	r3, #10
 8004944:	001a      	movs	r2, r3
 8004946:	4b92      	ldr	r3, [pc, #584]	@ (8004b90 <AT_Send+0x2e8>)
 8004948:	601a      	str	r2, [r3, #0]
    break;
 800494a:	e118      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_RESTORE:
    Debug("Restoring ESP");
 800494c:	4a94      	ldr	r2, [pc, #592]	@ (8004ba0 <AT_Send+0x2f8>)
 800494e:	4b92      	ldr	r3, [pc, #584]	@ (8004b98 <AT_Send+0x2f0>)
 8004950:	0019      	movs	r1, r3
 8004952:	2003      	movs	r0, #3
 8004954:	f006 f9da 	bl	800ad0c <CreateLine>
    ATCommandSend = ATRestore();
 8004958:	230f      	movs	r3, #15
 800495a:	18fc      	adds	r4, r7, r3
 800495c:	f7ff fc52 	bl	8004204 <ATRestore>
 8004960:	0003      	movs	r3, r0
 8004962:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004964:	f006 fd74 	bl	800b450 <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	3332      	adds	r3, #50	@ 0x32
 800496c:	001a      	movs	r2, r3
 800496e:	4b88      	ldr	r3, [pc, #544]	@ (8004b90 <AT_Send+0x2e8>)
 8004970:	601a      	str	r2, [r3, #0]
    break;
 8004972:	e104      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004974:	4a8b      	ldr	r2, [pc, #556]	@ (8004ba4 <AT_Send+0x2fc>)
 8004976:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <AT_Send+0x2f0>)
 8004978:	0019      	movs	r1, r3
 800497a:	2003      	movs	r0, #3
 800497c:	f006 f9c6 	bl	800ad0c <CreateLine>
    ATCommandSend = CWINIT();
 8004980:	230f      	movs	r3, #15
 8004982:	18fc      	adds	r4, r7, r3
 8004984:	f7ff fc5a 	bl	800423c <CWINIT>
 8004988:	0003      	movs	r3, r0
 800498a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800498c:	f006 fd60 	bl	800b450 <HAL_GetTick>
 8004990:	0003      	movs	r3, r0
 8004992:	33f5      	adds	r3, #245	@ 0xf5
 8004994:	33ff      	adds	r3, #255	@ 0xff
 8004996:	001a      	movs	r2, r3
 8004998:	4b7d      	ldr	r3, [pc, #500]	@ (8004b90 <AT_Send+0x2e8>)
 800499a:	601a      	str	r2, [r3, #0]
    break;
 800499c:	e0ef      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 800499e:	4a82      	ldr	r2, [pc, #520]	@ (8004ba8 <AT_Send+0x300>)
 80049a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004b98 <AT_Send+0x2f0>)
 80049a2:	0019      	movs	r1, r3
 80049a4:	2003      	movs	r0, #3
 80049a6:	f006 f9b1 	bl	800ad0c <CreateLine>
    ATCommandSend = CWSTATE();
 80049aa:	230f      	movs	r3, #15
 80049ac:	18fc      	adds	r4, r7, r3
 80049ae:	f7ff fd53 	bl	8004458 <CWSTATE>
 80049b2:	0003      	movs	r3, r0
 80049b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80049b6:	f006 fd4b 	bl	800b450 <HAL_GetTick>
 80049ba:	0003      	movs	r3, r0
 80049bc:	33f5      	adds	r3, #245	@ 0xf5
 80049be:	33ff      	adds	r3, #255	@ 0xff
 80049c0:	001a      	movs	r2, r3
 80049c2:	4b73      	ldr	r3, [pc, #460]	@ (8004b90 <AT_Send+0x2e8>)
 80049c4:	601a      	str	r2, [r3, #0]
    break;
 80049c6:	e0da      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80049c8:	4a78      	ldr	r2, [pc, #480]	@ (8004bac <AT_Send+0x304>)
 80049ca:	4b73      	ldr	r3, [pc, #460]	@ (8004b98 <AT_Send+0x2f0>)
 80049cc:	0019      	movs	r1, r3
 80049ce:	2003      	movs	r0, #3
 80049d0:	f006 f99c 	bl	800ad0c <CreateLine>
    ATCommandSend = CWMODE1();
 80049d4:	230f      	movs	r3, #15
 80049d6:	18fc      	adds	r4, r7, r3
 80049d8:	f7ff fc4c 	bl	8004274 <CWMODE1>
 80049dc:	0003      	movs	r3, r0
 80049de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80049e0:	f006 fd36 	bl	800b450 <HAL_GetTick>
 80049e4:	0003      	movs	r3, r0
 80049e6:	330a      	adds	r3, #10
 80049e8:	001a      	movs	r2, r3
 80049ea:	4b69      	ldr	r3, [pc, #420]	@ (8004b90 <AT_Send+0x2e8>)
 80049ec:	601a      	str	r2, [r3, #0]
    break;
 80049ee:	e0c6      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80049f0:	4a6e      	ldr	r2, [pc, #440]	@ (8004bac <AT_Send+0x304>)
 80049f2:	4b69      	ldr	r3, [pc, #420]	@ (8004b98 <AT_Send+0x2f0>)
 80049f4:	0019      	movs	r1, r3
 80049f6:	2003      	movs	r0, #3
 80049f8:	f006 f988 	bl	800ad0c <CreateLine>
    ATCommandSend = CWMODE2();
 80049fc:	230f      	movs	r3, #15
 80049fe:	18fc      	adds	r4, r7, r3
 8004a00:	f7ff fc54 	bl	80042ac <CWMODE2>
 8004a04:	0003      	movs	r3, r0
 8004a06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a08:	f006 fd22 	bl	800b450 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	330a      	adds	r3, #10
 8004a10:	001a      	movs	r2, r3
 8004a12:	4b5f      	ldr	r3, [pc, #380]	@ (8004b90 <AT_Send+0x2e8>)
 8004a14:	601a      	str	r2, [r3, #0]
    break;
 8004a16:	e0b2      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004a18:	4a65      	ldr	r2, [pc, #404]	@ (8004bb0 <AT_Send+0x308>)
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004b98 <AT_Send+0x2f0>)
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	2003      	movs	r0, #3
 8004a20:	f006 f974 	bl	800ad0c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004a24:	230f      	movs	r3, #15
 8004a26:	18fc      	adds	r4, r7, r3
 8004a28:	f7ff fc5c 	bl	80042e4 <CWAUTOCONN>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a30:	f006 fd0e 	bl	800b450 <HAL_GetTick>
 8004a34:	0003      	movs	r3, r0
 8004a36:	330a      	adds	r3, #10
 8004a38:	001a      	movs	r2, r3
 8004a3a:	4b55      	ldr	r3, [pc, #340]	@ (8004b90 <AT_Send+0x2e8>)
 8004a3c:	601a      	str	r2, [r3, #0]
    break;
 8004a3e:	e09e      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004a40:	4a5c      	ldr	r2, [pc, #368]	@ (8004bb4 <AT_Send+0x30c>)
 8004a42:	4b55      	ldr	r3, [pc, #340]	@ (8004b98 <AT_Send+0x2f0>)
 8004a44:	0019      	movs	r1, r3
 8004a46:	2003      	movs	r0, #3
 8004a48:	f006 f960 	bl	800ad0c <CreateLine>
    ATCommandSend = CWJAP();
 8004a4c:	230f      	movs	r3, #15
 8004a4e:	18fc      	adds	r4, r7, r3
 8004a50:	f7ff fc64 	bl	800431c <CWJAP>
 8004a54:	0003      	movs	r3, r0
 8004a56:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004a58:	f006 fcfa 	bl	800b450 <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	3332      	adds	r3, #50	@ 0x32
 8004a60:	001a      	movs	r2, r3
 8004a62:	4b4b      	ldr	r3, [pc, #300]	@ (8004b90 <AT_Send+0x2e8>)
 8004a64:	601a      	str	r2, [r3, #0]
    break;
 8004a66:	e08a      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004a68:	4a53      	ldr	r2, [pc, #332]	@ (8004bb8 <AT_Send+0x310>)
 8004a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b98 <AT_Send+0x2f0>)
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	2003      	movs	r0, #3
 8004a70:	f006 f94c 	bl	800ad0c <CreateLine>
    ATCommandSend = CWMODE3();
 8004a74:	230f      	movs	r3, #15
 8004a76:	18fc      	adds	r4, r7, r3
 8004a78:	f7ff fcd2 	bl	8004420 <CWMODE3>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a80:	f006 fce6 	bl	800b450 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	330a      	adds	r3, #10
 8004a88:	001a      	movs	r2, r3
 8004a8a:	4b41      	ldr	r3, [pc, #260]	@ (8004b90 <AT_Send+0x2e8>)
 8004a8c:	601a      	str	r2, [r3, #0]
    break;
 8004a8e:	e076      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004a90:	4a4a      	ldr	r2, [pc, #296]	@ (8004bbc <AT_Send+0x314>)
 8004a92:	4b41      	ldr	r3, [pc, #260]	@ (8004b98 <AT_Send+0x2f0>)
 8004a94:	0019      	movs	r1, r3
 8004a96:	2003      	movs	r0, #3
 8004a98:	f006 f938 	bl	800ad0c <CreateLine>
    ATCommandSend = CWSAP();
 8004a9c:	230f      	movs	r3, #15
 8004a9e:	18fc      	adds	r4, r7, r3
 8004aa0:	f7ff fcf6 	bl	8004490 <CWSAP>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004aa8:	f006 fcd2 	bl	800b450 <HAL_GetTick>
 8004aac:	0003      	movs	r3, r0
 8004aae:	330a      	adds	r3, #10
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <AT_Send+0x2e8>)
 8004ab4:	601a      	str	r2, [r3, #0]
    break;
 8004ab6:	e062      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004ab8:	230f      	movs	r3, #15
 8004aba:	18fc      	adds	r4, r7, r3
 8004abc:	f7ff fd04 	bl	80044c8 <CIPMUX>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ac4:	f006 fcc4 	bl	800b450 <HAL_GetTick>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	330a      	adds	r3, #10
 8004acc:	001a      	movs	r2, r3
 8004ace:	4b30      	ldr	r3, [pc, #192]	@ (8004b90 <AT_Send+0x2e8>)
 8004ad0:	601a      	str	r2, [r3, #0]
    break;
 8004ad2:	e054      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004ad4:	230f      	movs	r3, #15
 8004ad6:	18fc      	adds	r4, r7, r3
 8004ad8:	f7ff fd12 	bl	8004500 <WEBSERVER>
 8004adc:	0003      	movs	r3, r0
 8004ade:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ae0:	f006 fcb6 	bl	800b450 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	330a      	adds	r3, #10
 8004ae8:	001a      	movs	r2, r3
 8004aea:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <AT_Send+0x2e8>)
 8004aec:	601a      	str	r2, [r3, #0]
    break;
 8004aee:	e046      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004af0:	230f      	movs	r3, #15
 8004af2:	18fc      	adds	r4, r7, r3
 8004af4:	f7ff fd20 	bl	8004538 <HTTPCPOST>
 8004af8:	0003      	movs	r3, r0
 8004afa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004afc:	f006 fca8 	bl	800b450 <HAL_GetTick>
 8004b00:	0003      	movs	r3, r0
 8004b02:	33f5      	adds	r3, #245	@ 0xf5
 8004b04:	33ff      	adds	r3, #255	@ 0xff
 8004b06:	001a      	movs	r2, r3
 8004b08:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <AT_Send+0x2e8>)
 8004b0a:	601a      	str	r2, [r3, #0]
    break;
 8004b0c:	e037      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_SENDDATA:
    Debug("Send the data");
 8004b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc0 <AT_Send+0x318>)
 8004b10:	4b21      	ldr	r3, [pc, #132]	@ (8004b98 <AT_Send+0x2f0>)
 8004b12:	0019      	movs	r1, r3
 8004b14:	2003      	movs	r0, #3
 8004b16:	f006 f8f9 	bl	800ad0c <CreateLine>
    ATCommandSend = SENDDATA();
 8004b1a:	230f      	movs	r3, #15
 8004b1c:	18fc      	adds	r4, r7, r3
 8004b1e:	f7ff fd6b 	bl	80045f8 <SENDDATA>
 8004b22:	0003      	movs	r3, r0
 8004b24:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004b26:	f006 fc93 	bl	800b450 <HAL_GetTick>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	33f5      	adds	r3, #245	@ 0xf5
 8004b2e:	33ff      	adds	r3, #255	@ 0xff
 8004b30:	001a      	movs	r2, r3
 8004b32:	4b17      	ldr	r3, [pc, #92]	@ (8004b90 <AT_Send+0x2e8>)
 8004b34:	601a      	str	r2, [r3, #0]
    break;
 8004b36:	e022      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004b38:	4a22      	ldr	r2, [pc, #136]	@ (8004bc4 <AT_Send+0x31c>)
 8004b3a:	4b17      	ldr	r3, [pc, #92]	@ (8004b98 <AT_Send+0x2f0>)
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	2003      	movs	r0, #3
 8004b40:	f006 f8e4 	bl	800ad0c <CreateLine>
    ATCommandSend = SLEEP();
 8004b44:	230f      	movs	r3, #15
 8004b46:	18fc      	adds	r4, r7, r3
 8004b48:	f7ff fd72 	bl	8004630 <SLEEP>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b50:	f006 fc7e 	bl	800b450 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	330a      	adds	r3, #10
 8004b58:	001a      	movs	r2, r3
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b90 <AT_Send+0x2e8>)
 8004b5c:	601a      	str	r2, [r3, #0]
    break;
 8004b5e:	e00e      	b.n	8004b7e <AT_Send+0x2d6>

  case AT_END:
    Debug("Unexpected case, leave ESP untouched");
 8004b60:	4a19      	ldr	r2, [pc, #100]	@ (8004bc8 <AT_Send+0x320>)
 8004b62:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <AT_Send+0x2f0>)
 8004b64:	0019      	movs	r1, r3
 8004b66:	2003      	movs	r0, #3
 8004b68:	f006 f8d0 	bl	800ad0c <CreateLine>
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b6c:	f006 fc70 	bl	800b450 <HAL_GetTick>
 8004b70:	0003      	movs	r3, r0
 8004b72:	330a      	adds	r3, #10
 8004b74:	001a      	movs	r2, r3
 8004b76:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <AT_Send+0x2e8>)
 8004b78:	601a      	str	r2, [r3, #0]
    break;
 8004b7a:	e000      	b.n	8004b7e <AT_Send+0x2d6>
  break;
 8004b7c:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004b7e:	230f      	movs	r3, #15
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	781b      	ldrb	r3, [r3, #0]
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b005      	add	sp, #20
 8004b8a:	bd90      	pop	{r4, r7, pc}
 8004b8c:	0801ef9c 	.word	0x0801ef9c
 8004b90:	20000934 	.word	0x20000934
 8004b94:	0801e620 	.word	0x0801e620
 8004b98:	0801e1a0 	.word	0x0801e1a0
 8004b9c:	0801e634 	.word	0x0801e634
 8004ba0:	0801e648 	.word	0x0801e648
 8004ba4:	0801e658 	.word	0x0801e658
 8004ba8:	0801e66c 	.word	0x0801e66c
 8004bac:	0801e684 	.word	0x0801e684
 8004bb0:	0801e69c 	.word	0x0801e69c
 8004bb4:	0801e6b4 	.word	0x0801e6b4
 8004bb8:	0801e6c8 	.word	0x0801e6c8
 8004bbc:	0801e6e4 	.word	0x0801e6e4
 8004bc0:	0801e700 	.word	0x0801e700
 8004bc4:	0801e710 	.word	0x0801e710
 8004bc8:	0801e734 	.word	0x0801e734

08004bcc <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004bd2:	1dfb      	adds	r3, r7, #7
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004bd8:	4b79      	ldr	r3, [pc, #484]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d900      	bls.n	8004be2 <ESP_WakeTest+0x16>
 8004be0:	e0d4      	b.n	8004d8c <ESP_WakeTest+0x1c0>
 8004be2:	009a      	lsls	r2, r3, #2
 8004be4:	4b77      	ldr	r3, [pc, #476]	@ (8004dc4 <ESP_WakeTest+0x1f8>)
 8004be6:	18d3      	adds	r3, r2, r3
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004bec:	4b76      	ldr	r3, [pc, #472]	@ (8004dc8 <ESP_WakeTest+0x1fc>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4053      	eors	r3, r2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d036      	beq.n	8004c68 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	4873      	ldr	r0, [pc, #460]	@ (8004dcc <ESP_WakeTest+0x200>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	0019      	movs	r1, r3
 8004c04:	f007 fe83 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004c08:	2032      	movs	r0, #50	@ 0x32
 8004c0a:	f006 fc2b 	bl	800b464 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004c0e:	2380      	movs	r3, #128	@ 0x80
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	486e      	ldr	r0, [pc, #440]	@ (8004dcc <ESP_WakeTest+0x200>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	0019      	movs	r1, r3
 8004c18:	f007 fe79 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004c1c:	200a      	movs	r0, #10
 8004c1e:	f006 fc21 	bl	800b464 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c22:	4b6b      	ldr	r3, [pc, #428]	@ (8004dd0 <ESP_WakeTest+0x204>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	2101      	movs	r1, #1
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f007 fe70 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004c2e:	200a      	movs	r0, #10
 8004c30:	f006 fc18 	bl	800b464 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004c34:	4b66      	ldr	r3, [pc, #408]	@ (8004dd0 <ESP_WakeTest+0x204>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	2102      	movs	r1, #2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f007 fe67 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004c40:	200a      	movs	r0, #10
 8004c42:	f006 fc0f 	bl	800b464 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004c46:	4b62      	ldr	r3, [pc, #392]	@ (8004dd0 <ESP_WakeTest+0x204>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f007 fe5e 	bl	800c90e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004c52:	f006 fbfd 	bl	800b450 <HAL_GetTick>
 8004c56:	0003      	movs	r3, r0
 8004c58:	22af      	movs	r2, #175	@ 0xaf
 8004c5a:	0092      	lsls	r2, r2, #2
 8004c5c:	189a      	adds	r2, r3, r2
 8004c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd4 <ESP_WakeTest+0x208>)
 8004c60:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004c62:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <ESP_WakeTest+0x1fc>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004c68:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd8 <ESP_WakeTest+0x20c>)
 8004c6a:	21ff      	movs	r1, #255	@ 0xff
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7fe feaf 	bl	80039d0 <ESP_Receive>
 8004c72:	1e03      	subs	r3, r0, #0
 8004c74:	d100      	bne.n	8004c78 <ESP_WakeTest+0xac>
 8004c76:	e099      	b.n	8004dac <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 8004c78:	4b51      	ldr	r3, [pc, #324]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004c7e:	e095      	b.n	8004dac <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004c80:	4b54      	ldr	r3, [pc, #336]	@ (8004dd4 <ESP_WakeTest+0x208>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f005 ffeb 	bl	800ac60 <TimestampIsReached>
 8004c8a:	1e03      	subs	r3, r0, #0
 8004c8c:	d100      	bne.n	8004c90 <ESP_WakeTest+0xc4>
 8004c8e:	e08f      	b.n	8004db0 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004c90:	4b52      	ldr	r3, [pc, #328]	@ (8004ddc <ESP_WakeTest+0x210>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	1dfc      	adds	r4, r7, #7
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7ff fe06 	bl	80048a8 <AT_Send>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004ca0:	1dfb      	adds	r3, r7, #7
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d100      	bne.n	8004caa <ESP_WakeTest+0xde>
 8004ca8:	e082      	b.n	8004db0 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004caa:	4b45      	ldr	r3, [pc, #276]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004cac:	2202      	movs	r2, #2
 8004cae:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004cb0:	e07e      	b.n	8004db0 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004cb2:	4b48      	ldr	r3, [pc, #288]	@ (8004dd4 <ESP_WakeTest+0x208>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f005 ffd2 	bl	800ac60 <TimestampIsReached>
 8004cbc:	1e03      	subs	r3, r0, #0
 8004cbe:	d100      	bne.n	8004cc2 <ESP_WakeTest+0xf6>
 8004cc0:	e078      	b.n	8004db4 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004cc2:	4b47      	ldr	r3, [pc, #284]	@ (8004de0 <ESP_WakeTest+0x214>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f7ff fcce 	bl	8004668 <DMA_ProcessBuffer>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	001a      	movs	r2, r3
 8004cd0:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <ESP_WakeTest+0x218>)
 8004cd2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004cd4:	4b43      	ldr	r3, [pc, #268]	@ (8004de4 <ESP_WakeTest+0x218>)
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	4b41      	ldr	r3, [pc, #260]	@ (8004de0 <ESP_WakeTest+0x214>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	1dbc      	adds	r4, r7, #6
 8004cde:	0019      	movs	r1, r3
 8004ce0:	0010      	movs	r0, r2
 8004ce2:	f7ff fdab 	bl	800483c <ATCompare>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004cea:	4b3e      	ldr	r3, [pc, #248]	@ (8004de4 <ESP_WakeTest+0x218>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d102      	bne.n	8004cf8 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004cf2:	4b33      	ldr	r3, [pc, #204]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <ESP_WakeTest+0x218>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b07      	cmp	r3, #7
 8004cfe:	d104      	bne.n	8004d0a <ESP_WakeTest+0x13e>
          StartProg();
 8004d00:	f7ff f898 	bl	8003e34 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004d04:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004d06:	2205      	movs	r2, #5
 8004d08:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004d0a:	4b36      	ldr	r3, [pc, #216]	@ (8004de4 <ESP_WakeTest+0x218>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d109      	bne.n	8004d26 <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004d12:	f006 fb9d 	bl	800b450 <HAL_GetTick>
 8004d16:	0003      	movs	r3, r0
 8004d18:	3332      	adds	r3, #50	@ 0x32
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd4 <ESP_WakeTest+0x208>)
 8004d1e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004d20:	4b27      	ldr	r3, [pc, #156]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004d26:	1dbb      	adds	r3, r7, #6
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d042      	beq.n	8004db4 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004d30:	2203      	movs	r2, #3
 8004d32:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004d34:	e03e      	b.n	8004db4 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8004d36:	4b2c      	ldr	r3, [pc, #176]	@ (8004de8 <ESP_WakeTest+0x21c>)
 8004d38:	22fa      	movs	r2, #250	@ 0xfa
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004de8 <ESP_WakeTest+0x21c>)
 8004d40:	4a2a      	ldr	r2, [pc, #168]	@ (8004dec <ESP_WakeTest+0x220>)
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8004d44:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <ESP_WakeTest+0x21c>)
 8004d46:	22fa      	movs	r2, #250	@ 0xfa
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004d4e:	2204      	movs	r2, #4
 8004d50:	701a      	strb	r2, [r3, #0]

      break;
 8004d52:	e030      	b.n	8004db6 <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004d54:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <ESP_WakeTest+0x224>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <ESP_WakeTest+0x1fc>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004d60:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <ESP_WakeTest+0x204>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	0018      	movs	r0, r3
 8004d68:	f007 fdd1 	bl	800c90e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	4816      	ldr	r0, [pc, #88]	@ (8004dcc <ESP_WakeTest+0x200>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	0019      	movs	r1, r3
 8004d76:	f007 fdca 	bl	800c90e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004d7a:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <ESP_WakeTest+0x204>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2102      	movs	r1, #2
 8004d80:	0018      	movs	r0, r3
 8004d82:	f007 fdc4 	bl	800c90e <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004d86:	f002 fae1 	bl	800734c <SetESPMeasurementDone>
      break;
 8004d8a:	e014      	b.n	8004db6 <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <ESP_WakeTest+0x1f4>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
      break;
 8004d92:	e010      	b.n	8004db6 <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004d94:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <ESP_WakeTest+0x21c>)
 8004d96:	22fa      	movs	r2, #250	@ 0xfa
 8004d98:	0112      	lsls	r2, r2, #4
 8004d9a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004d9c:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <ESP_WakeTest+0x21c>)
 8004d9e:	22fa      	movs	r2, #250	@ 0xfa
 8004da0:	0112      	lsls	r2, r2, #4
 8004da2:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004da4:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <ESP_WakeTest+0x21c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004daa:	e004      	b.n	8004db6 <ESP_WakeTest+0x1ea>
      break;
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	e002      	b.n	8004db6 <ESP_WakeTest+0x1ea>
      break;
 8004db0:	46c0      	nop			@ (mov r8, r8)
 8004db2:	e000      	b.n	8004db6 <ESP_WakeTest+0x1ea>
      break;
 8004db4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b003      	add	sp, #12
 8004dbc:	bd90      	pop	{r4, r7, pc}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	2000093c 	.word	0x2000093c
 8004dc4:	0801efe4 	.word	0x0801efe4
 8004dc8:	200004f3 	.word	0x200004f3
 8004dcc:	50000800 	.word	0x50000800
 8004dd0:	50001c00 	.word	0x50001c00
 8004dd4:	20000934 	.word	0x20000934
 8004dd8:	200003f4 	.word	0x200003f4
 8004ddc:	2000093a 	.word	0x2000093a
 8004de0:	20000939 	.word	0x20000939
 8004de4:	20000022 	.word	0x20000022
 8004de8:	40000400 	.word	0x40000400
 8004dec:	00000bb8 	.word	0x00000bb8
 8004df0:	20000000 	.word	0x20000000

08004df4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004e00:	4bde      	ldr	r3, [pc, #888]	@ (800517c <ESP_Upkeep+0x388>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b0f      	cmp	r3, #15
 8004e06:	d900      	bls.n	8004e0a <ESP_Upkeep+0x16>
 8004e08:	e2b3      	b.n	8005372 <ESP_Upkeep+0x57e>
 8004e0a:	009a      	lsls	r2, r3, #2
 8004e0c:	4bdc      	ldr	r3, [pc, #880]	@ (8005180 <ESP_Upkeep+0x38c>)
 8004e0e:	18d3      	adds	r3, r2, r3
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004e14:	4bd9      	ldr	r3, [pc, #868]	@ (800517c <ESP_Upkeep+0x388>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
      break;
 8004e1a:	e2c3      	b.n	80053a4 <ESP_Upkeep+0x5b0>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004e1c:	4bd9      	ldr	r3, [pc, #868]	@ (8005184 <ESP_Upkeep+0x390>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2201      	movs	r2, #1
 8004e22:	4053      	eors	r3, r2
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d036      	beq.n	8004e98 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	48d6      	ldr	r0, [pc, #856]	@ (8005188 <ESP_Upkeep+0x394>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	0019      	movs	r1, r3
 8004e34:	f007 fd6b 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e38:	2001      	movs	r0, #1
 8004e3a:	f006 fb13 	bl	800b464 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	48d1      	ldr	r0, [pc, #836]	@ (8005188 <ESP_Upkeep+0x394>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	0019      	movs	r1, r3
 8004e48:	f007 fd61 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f006 fb09 	bl	800b464 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e52:	4bce      	ldr	r3, [pc, #824]	@ (800518c <ESP_Upkeep+0x398>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	2101      	movs	r1, #1
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f007 fd58 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e5e:	2001      	movs	r0, #1
 8004e60:	f006 fb00 	bl	800b464 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004e64:	4bc9      	ldr	r3, [pc, #804]	@ (800518c <ESP_Upkeep+0x398>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	2102      	movs	r1, #2
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f007 fd4f 	bl	800c90e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004e70:	2001      	movs	r0, #1
 8004e72:	f006 faf7 	bl	800b464 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004e76:	4bc5      	ldr	r3, [pc, #788]	@ (800518c <ESP_Upkeep+0x398>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f007 fd46 	bl	800c90e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004e82:	f006 fae5 	bl	800b450 <HAL_GetTick>
 8004e86:	0003      	movs	r3, r0
 8004e88:	22af      	movs	r2, #175	@ 0xaf
 8004e8a:	0092      	lsls	r2, r2, #2
 8004e8c:	189a      	adds	r2, r3, r2
 8004e8e:	4bc0      	ldr	r3, [pc, #768]	@ (8005190 <ESP_Upkeep+0x39c>)
 8004e90:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004e92:	4bbc      	ldr	r3, [pc, #752]	@ (8005184 <ESP_Upkeep+0x390>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004e98:	4bbe      	ldr	r3, [pc, #760]	@ (8005194 <ESP_Upkeep+0x3a0>)
 8004e9a:	21ff      	movs	r1, #255	@ 0xff
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f7fe fd97 	bl	80039d0 <ESP_Receive>
 8004ea2:	1e03      	subs	r3, r0, #0
 8004ea4:	d100      	bne.n	8004ea8 <ESP_Upkeep+0xb4>
 8004ea6:	e270      	b.n	800538a <ESP_Upkeep+0x596>
        EspState = ESP_STATE_WAIT_AWAKE;
 8004ea8:	4bb4      	ldr	r3, [pc, #720]	@ (800517c <ESP_Upkeep+0x388>)
 8004eaa:	220f      	movs	r2, #15
 8004eac:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8004eae:	f006 facf 	bl	800b450 <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	22fa      	movs	r2, #250	@ 0xfa
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	189a      	adds	r2, r3, r2
 8004eba:	4bb7      	ldr	r3, [pc, #732]	@ (8005198 <ESP_Upkeep+0x3a4>)
 8004ebc:	601a      	str	r2, [r3, #0]
      }
      break;
 8004ebe:	e264      	b.n	800538a <ESP_Upkeep+0x596>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7ff fbd1 	bl	8004668 <DMA_ProcessBuffer>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	001a      	movs	r2, r3
 8004eca:	4bb4      	ldr	r3, [pc, #720]	@ (800519c <ESP_Upkeep+0x3a8>)
 8004ecc:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8004ece:	4bb3      	ldr	r3, [pc, #716]	@ (800519c <ESP_Upkeep+0x3a8>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	1dbc      	adds	r4, r7, #6
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7ff fcb0 	bl	800483c <ATCompare>
 8004edc:	0003      	movs	r3, r0
 8004ede:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8004ee0:	1dbb      	adds	r3, r7, #6
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d107      	bne.n	8004ef8 <ESP_Upkeep+0x104>
 8004ee8:	4bab      	ldr	r3, [pc, #684]	@ (8005198 <ESP_Upkeep+0x3a4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f005 feb7 	bl	800ac60 <TimestampIsReached>
 8004ef2:	1e03      	subs	r3, r0, #0
 8004ef4:	d100      	bne.n	8004ef8 <ESP_Upkeep+0x104>
 8004ef6:	e24a      	b.n	800538e <ESP_Upkeep+0x59a>
          EspState = ESP_STATE_MODE_SELECT;
 8004ef8:	4ba0      	ldr	r3, [pc, #640]	@ (800517c <ESP_Upkeep+0x388>)
 8004efa:	220b      	movs	r2, #11
 8004efc:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004efe:	e246      	b.n	800538e <ESP_Upkeep+0x59a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004f00:	4ba7      	ldr	r3, [pc, #668]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8004f02:	2209      	movs	r2, #9
 8004f04:	2111      	movs	r1, #17
 8004f06:	0018      	movs	r0, r3
 8004f08:	f016 f8ec 	bl	801b0e4 <memset>
      if(!InitIsDone || WifiReset){
 8004f0c:	4ba5      	ldr	r3, [pc, #660]	@ (80051a4 <ESP_Upkeep+0x3b0>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	4053      	eors	r3, r2
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <ESP_Upkeep+0x12e>
 8004f1a:	4ba3      	ldr	r3, [pc, #652]	@ (80051a8 <ESP_Upkeep+0x3b4>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01a      	beq.n	8004f58 <ESP_Upkeep+0x164>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004f22:	4b9f      	ldr	r3, [pc, #636]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8004f24:	4aa1      	ldr	r2, [pc, #644]	@ (80051ac <ESP_Upkeep+0x3b8>)
 8004f26:	6811      	ldr	r1, [r2, #0]
 8004f28:	6019      	str	r1, [r3, #0]
 8004f2a:	8891      	ldrh	r1, [r2, #4]
 8004f2c:	8099      	strh	r1, [r3, #4]
 8004f2e:	7992      	ldrb	r2, [r2, #6]
 8004f30:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004f32:	4b92      	ldr	r3, [pc, #584]	@ (800517c <ESP_Upkeep+0x388>)
 8004f34:	2204      	movs	r2, #4
 8004f36:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004f38:	4b9d      	ldr	r3, [pc, #628]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004f3e:	4b9d      	ldr	r3, [pc, #628]	@ (80051b4 <ESP_Upkeep+0x3c0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004f44:	4b9a      	ldr	r3, [pc, #616]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	001a      	movs	r2, r3
 8004f4a:	4b95      	ldr	r3, [pc, #596]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8004f4c:	5c9a      	ldrb	r2, [r3, r2]
 8004f4e:	4b9a      	ldr	r3, [pc, #616]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 8004f50:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004f52:	4b9a      	ldr	r3, [pc, #616]	@ (80051bc <ESP_Upkeep+0x3c8>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004f58:	4b92      	ldr	r3, [pc, #584]	@ (80051a4 <ESP_Upkeep+0x3b0>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01f      	beq.n	8004fa0 <ESP_Upkeep+0x1ac>
 8004f60:	4b97      	ldr	r3, [pc, #604]	@ (80051c0 <ESP_Upkeep+0x3cc>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	4053      	eors	r3, r2
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <ESP_Upkeep+0x1ac>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004f6e:	4b8c      	ldr	r3, [pc, #560]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8004f70:	4a94      	ldr	r2, [pc, #592]	@ (80051c4 <ESP_Upkeep+0x3d0>)
 8004f72:	6811      	ldr	r1, [r2, #0]
 8004f74:	6019      	str	r1, [r3, #0]
 8004f76:	8892      	ldrh	r2, [r2, #4]
 8004f78:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004f7a:	4b80      	ldr	r3, [pc, #512]	@ (800517c <ESP_Upkeep+0x388>)
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004f80:	4b8b      	ldr	r3, [pc, #556]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004f86:	4b8b      	ldr	r3, [pc, #556]	@ (80051b4 <ESP_Upkeep+0x3c0>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004f8c:	4b88      	ldr	r3, [pc, #544]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	001a      	movs	r2, r3
 8004f92:	4b83      	ldr	r3, [pc, #524]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8004f94:	5c9a      	ldrb	r2, [r3, r2]
 8004f96:	4b88      	ldr	r3, [pc, #544]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 8004f98:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004f9a:	4b88      	ldr	r3, [pc, #544]	@ (80051bc <ESP_Upkeep+0x3c8>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8004fa0:	4b80      	ldr	r3, [pc, #512]	@ (80051a4 <ESP_Upkeep+0x3b0>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d021      	beq.n	8004fec <ESP_Upkeep+0x1f8>
 8004fa8:	4b85      	ldr	r3, [pc, #532]	@ (80051c0 <ESP_Upkeep+0x3cc>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01d      	beq.n	8004fec <ESP_Upkeep+0x1f8>
 8004fb0:	4b85      	ldr	r3, [pc, #532]	@ (80051c8 <ESP_Upkeep+0x3d4>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	4053      	eors	r3, r2
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <ESP_Upkeep+0x1f8>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8004fbe:	4b83      	ldr	r3, [pc, #524]	@ (80051cc <ESP_Upkeep+0x3d8>)
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	4b77      	ldr	r3, [pc, #476]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8004fc4:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800517c <ESP_Upkeep+0x388>)
 8004fc8:	2204      	movs	r2, #4
 8004fca:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004fcc:	4b78      	ldr	r3, [pc, #480]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8004fd2:	4b78      	ldr	r3, [pc, #480]	@ (80051b4 <ESP_Upkeep+0x3c0>)
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004fd8:	4b75      	ldr	r3, [pc, #468]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	001a      	movs	r2, r3
 8004fde:	4b70      	ldr	r3, [pc, #448]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8004fe0:	5c9a      	ldrb	r2, [r3, r2]
 8004fe2:	4b75      	ldr	r3, [pc, #468]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 8004fe4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004fe6:	4b75      	ldr	r3, [pc, #468]	@ (80051bc <ESP_Upkeep+0x3c8>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest){
 8004fec:	4b6d      	ldr	r3, [pc, #436]	@ (80051a4 <ESP_Upkeep+0x3b0>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d027      	beq.n	8005044 <ESP_Upkeep+0x250>
 8004ff4:	4b72      	ldr	r3, [pc, #456]	@ (80051c0 <ESP_Upkeep+0x3cc>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d023      	beq.n	8005044 <ESP_Upkeep+0x250>
 8004ffc:	4b72      	ldr	r3, [pc, #456]	@ (80051c8 <ESP_Upkeep+0x3d4>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01f      	beq.n	8005044 <ESP_Upkeep+0x250>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005004:	4b66      	ldr	r3, [pc, #408]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8005006:	4a72      	ldr	r2, [pc, #456]	@ (80051d0 <ESP_Upkeep+0x3dc>)
 8005008:	8811      	ldrh	r1, [r2, #0]
 800500a:	8019      	strh	r1, [r3, #0]
 800500c:	7892      	ldrb	r2, [r2, #2]
 800500e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005010:	4b5a      	ldr	r3, [pc, #360]	@ (800517c <ESP_Upkeep+0x388>)
 8005012:	2204      	movs	r2, #4
 8005014:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005016:	4b66      	ldr	r3, [pc, #408]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800501c:	4b65      	ldr	r3, [pc, #404]	@ (80051b4 <ESP_Upkeep+0x3c0>)
 800501e:	2202      	movs	r2, #2
 8005020:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005022:	f006 fa15 	bl	800b450 <HAL_GetTick>
 8005026:	0002      	movs	r2, r0
 8005028:	4b6a      	ldr	r3, [pc, #424]	@ (80051d4 <ESP_Upkeep+0x3e0>)
 800502a:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800502c:	f004 fff2 	bl	800a014 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005030:	4b5f      	ldr	r3, [pc, #380]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	001a      	movs	r2, r3
 8005036:	4b5a      	ldr	r3, [pc, #360]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8005038:	5c9a      	ldrb	r2, [r3, r2]
 800503a:	4b5f      	ldr	r3, [pc, #380]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 800503c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800503e:	4b5f      	ldr	r3, [pc, #380]	@ (80051bc <ESP_Upkeep+0x3c8>)
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005044:	4b64      	ldr	r3, [pc, #400]	@ (80051d8 <ESP_Upkeep+0x3e4>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d100      	bne.n	800504e <ESP_Upkeep+0x25a>
 800504c:	e1a1      	b.n	8005392 <ESP_Upkeep+0x59e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800504e:	4b54      	ldr	r3, [pc, #336]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8005050:	4a62      	ldr	r2, [pc, #392]	@ (80051dc <ESP_Upkeep+0x3e8>)
 8005052:	6811      	ldr	r1, [r2, #0]
 8005054:	6019      	str	r1, [r3, #0]
 8005056:	7912      	ldrb	r2, [r2, #4]
 8005058:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800505a:	4b48      	ldr	r3, [pc, #288]	@ (800517c <ESP_Upkeep+0x388>)
 800505c:	2204      	movs	r2, #4
 800505e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005060:	4b53      	ldr	r3, [pc, #332]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005066:	4b53      	ldr	r3, [pc, #332]	@ (80051b4 <ESP_Upkeep+0x3c0>)
 8005068:	2203      	movs	r2, #3
 800506a:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800506c:	f004 ffd2 	bl	800a014 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005070:	4b4f      	ldr	r3, [pc, #316]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	001a      	movs	r2, r3
 8005076:	4b4a      	ldr	r3, [pc, #296]	@ (80051a0 <ESP_Upkeep+0x3ac>)
 8005078:	5c9a      	ldrb	r2, [r3, r2]
 800507a:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 800507c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800507e:	4b4f      	ldr	r3, [pc, #316]	@ (80051bc <ESP_Upkeep+0x3c8>)
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
      }

    break;
 8005084:	e185      	b.n	8005392 <ESP_Upkeep+0x59e>



    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005086:	4b4c      	ldr	r3, [pc, #304]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	1dfc      	adds	r4, r7, #7
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff fc0b 	bl	80048a8 <AT_Send>
 8005092:	0003      	movs	r3, r0
 8005094:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005096:	1dfb      	adds	r3, r7, #7
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d100      	bne.n	80050a0 <ESP_Upkeep+0x2ac>
 800509e:	e17a      	b.n	8005396 <ESP_Upkeep+0x5a2>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80050a0:	4b36      	ldr	r3, [pc, #216]	@ (800517c <ESP_Upkeep+0x388>)
 80050a2:	2203      	movs	r2, #3
 80050a4:	701a      	strb	r2, [r3, #0]
        }
         break;
 80050a6:	e176      	b.n	8005396 <ESP_Upkeep+0x5a2>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80050a8:	4b39      	ldr	r3, [pc, #228]	@ (8005190 <ESP_Upkeep+0x39c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f005 fdd7 	bl	800ac60 <TimestampIsReached>
 80050b2:	1e03      	subs	r3, r0, #0
 80050b4:	d100      	bne.n	80050b8 <ESP_Upkeep+0x2c4>
 80050b6:	e170      	b.n	800539a <ESP_Upkeep+0x5a6>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80050b8:	4b40      	ldr	r3, [pc, #256]	@ (80051bc <ESP_Upkeep+0x3c8>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff fad3 	bl	8004668 <DMA_ProcessBuffer>
 80050c2:	0003      	movs	r3, r0
 80050c4:	001a      	movs	r2, r3
 80050c6:	4b35      	ldr	r3, [pc, #212]	@ (800519c <ESP_Upkeep+0x3a8>)
 80050c8:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80050ca:	4b34      	ldr	r3, [pc, #208]	@ (800519c <ESP_Upkeep+0x3a8>)
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	4b3b      	ldr	r3, [pc, #236]	@ (80051bc <ESP_Upkeep+0x3c8>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	1d7c      	adds	r4, r7, #5
 80050d4:	0019      	movs	r1, r3
 80050d6:	0010      	movs	r0, r2
 80050d8:	f7ff fbb0 	bl	800483c <ATCompare>
 80050dc:	0003      	movs	r3, r0
 80050de:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80050e0:	4b2e      	ldr	r3, [pc, #184]	@ (800519c <ESP_Upkeep+0x3a8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10f      	bne.n	8005108 <ESP_Upkeep+0x314>
          if(ATCommand == AT_SENDDATA){
 80050e8:	4b33      	ldr	r3, [pc, #204]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b0f      	cmp	r3, #15
 80050ee:	d108      	bne.n	8005102 <ESP_Upkeep+0x30e>
            ATCommand = AT_HTTPCPOST;
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 80050f2:	220e      	movs	r2, #14
 80050f4:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80050f6:	4b31      	ldr	r3, [pc, #196]	@ (80051bc <ESP_Upkeep+0x3c8>)
 80050f8:	2202      	movs	r2, #2
 80050fa:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80050fc:	4b2c      	ldr	r3, [pc, #176]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 80050fe:	2201      	movs	r2, #1
 8005100:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005102:	4b1e      	ldr	r3, [pc, #120]	@ (800517c <ESP_Upkeep+0x388>)
 8005104:	2204      	movs	r2, #4
 8005106:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005108:	4b24      	ldr	r3, [pc, #144]	@ (800519c <ESP_Upkeep+0x3a8>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d106      	bne.n	800511e <ESP_Upkeep+0x32a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005110:	f006 f99e 	bl	800b450 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	330a      	adds	r3, #10
 8005118:	001a      	movs	r2, r3
 800511a:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <ESP_Upkeep+0x39c>)
 800511c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800511e:	4b1f      	ldr	r3, [pc, #124]	@ (800519c <ESP_Upkeep+0x3a8>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b0a      	cmp	r3, #10
 8005124:	d106      	bne.n	8005134 <ESP_Upkeep+0x340>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005126:	f006 f993 	bl	800b450 <HAL_GetTick>
 800512a:	0003      	movs	r3, r0
 800512c:	330a      	adds	r3, #10
 800512e:	001a      	movs	r2, r3
 8005130:	4b17      	ldr	r3, [pc, #92]	@ (8005190 <ESP_Upkeep+0x39c>)
 8005132:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005134:	4b19      	ldr	r3, [pc, #100]	@ (800519c <ESP_Upkeep+0x3a8>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b06      	cmp	r3, #6
 800513a:	d116      	bne.n	800516a <ESP_Upkeep+0x376>
          if(ATCommand != AT_SENDDATA){
 800513c:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d003      	beq.n	800514c <ESP_Upkeep+0x358>
            EspState = ESP_STATE_SEND;
 8005144:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <ESP_Upkeep+0x388>)
 8005146:	2204      	movs	r2, #4
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	e00e      	b.n	800516a <ESP_Upkeep+0x376>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 800514c:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <ESP_Upkeep+0x3c4>)
 800514e:	220e      	movs	r2, #14
 8005150:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005152:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <ESP_Upkeep+0x3bc>)
 800515c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800515e:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <ESP_Upkeep+0x3c8>)
 8005160:	2202      	movs	r2, #2
 8005162:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <ESP_Upkeep+0x388>)
 8005166:	2204      	movs	r2, #4
 8005168:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800516a:	1d7b      	adds	r3, r7, #5
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d100      	bne.n	8005174 <ESP_Upkeep+0x380>
 8005172:	e112      	b.n	800539a <ESP_Upkeep+0x5a6>
          EspState = ESP_STATE_NEXT_AT;
 8005174:	4b01      	ldr	r3, [pc, #4]	@ (800517c <ESP_Upkeep+0x388>)
 8005176:	2205      	movs	r2, #5
 8005178:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800517a:	e10e      	b.n	800539a <ESP_Upkeep+0x5a6>
 800517c:	20000021 	.word	0x20000021
 8005180:	0801effc 	.word	0x0801effc
 8005184:	200004f3 	.word	0x200004f3
 8005188:	50000800 	.word	0x50000800
 800518c:	50001c00 	.word	0x50001c00
 8005190:	20000934 	.word	0x20000934
 8005194:	200003f4 	.word	0x200003f4
 8005198:	20000a28 	.word	0x20000a28
 800519c:	20000023 	.word	0x20000023
 80051a0:	20000928 	.word	0x20000928
 80051a4:	200004f4 	.word	0x200004f4
 80051a8:	200004f5 	.word	0x200004f5
 80051ac:	20000004 	.word	0x20000004
 80051b0:	20000932 	.word	0x20000932
 80051b4:	2000093b 	.word	0x2000093b
 80051b8:	2000093a 	.word	0x2000093a
 80051bc:	20000939 	.word	0x20000939
 80051c0:	200004f7 	.word	0x200004f7
 80051c4:	20000014 	.word	0x20000014
 80051c8:	200004f8 	.word	0x200004f8
 80051cc:	20000010 	.word	0x20000010
 80051d0:	2000000c 	.word	0x2000000c
 80051d4:	20000508 	.word	0x20000508
 80051d8:	200004f6 	.word	0x200004f6
 80051dc:	2000001c 	.word	0x2000001c

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 80051e0:	4b73      	ldr	r3, [pc, #460]	@ (80053b0 <ESP_Upkeep+0x5bc>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	4b71      	ldr	r3, [pc, #452]	@ (80053b0 <ESP_Upkeep+0x5bc>)
 80051ea:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80051ec:	4b70      	ldr	r3, [pc, #448]	@ (80053b0 <ESP_Upkeep+0x5bc>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	001a      	movs	r2, r3
 80051f2:	4b70      	ldr	r3, [pc, #448]	@ (80053b4 <ESP_Upkeep+0x5c0>)
 80051f4:	5c9a      	ldrb	r2, [r3, r2]
 80051f6:	4b70      	ldr	r3, [pc, #448]	@ (80053b8 <ESP_Upkeep+0x5c4>)
 80051f8:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80051fa:	4b6f      	ldr	r3, [pc, #444]	@ (80053b8 <ESP_Upkeep+0x5c4>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d102      	bne.n	8005208 <ESP_Upkeep+0x414>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005202:	4b6e      	ldr	r3, [pc, #440]	@ (80053bc <ESP_Upkeep+0x5c8>)
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005208:	4b6b      	ldr	r3, [pc, #428]	@ (80053b8 <ESP_Upkeep+0x5c4>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b0e      	cmp	r3, #14
 800520e:	d102      	bne.n	8005216 <ESP_Upkeep+0x422>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005210:	4b6a      	ldr	r3, [pc, #424]	@ (80053bc <ESP_Upkeep+0x5c8>)
 8005212:	2202      	movs	r2, #2
 8005214:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005216:	4b68      	ldr	r3, [pc, #416]	@ (80053b8 <ESP_Upkeep+0x5c4>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b0e      	cmp	r3, #14
 800521c:	d006      	beq.n	800522c <ESP_Upkeep+0x438>
 800521e:	4b66      	ldr	r3, [pc, #408]	@ (80053b8 <ESP_Upkeep+0x5c4>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b03      	cmp	r3, #3
 8005224:	d002      	beq.n	800522c <ESP_Upkeep+0x438>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005226:	4b65      	ldr	r3, [pc, #404]	@ (80053bc <ESP_Upkeep+0x5c8>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 800522c:	4b64      	ldr	r3, [pc, #400]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 800522e:	2204      	movs	r2, #4
 8005230:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005232:	4b61      	ldr	r3, [pc, #388]	@ (80053b8 <ESP_Upkeep+0x5c4>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b11      	cmp	r3, #17
 8005238:	d000      	beq.n	800523c <ESP_Upkeep+0x448>
 800523a:	e0b0      	b.n	800539e <ESP_Upkeep+0x5aa>
        if(Mode == AT_MODE_SEND){
 800523c:	4b61      	ldr	r3, [pc, #388]	@ (80053c4 <ESP_Upkeep+0x5d0>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d11d      	bne.n	8005280 <ESP_Upkeep+0x48c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005244:	f006 f904 	bl	800b450 <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	4a5f      	ldr	r2, [pc, #380]	@ (80053c8 <ESP_Upkeep+0x5d4>)
 800524c:	189a      	adds	r2, r3, r2
 800524e:	4b5f      	ldr	r3, [pc, #380]	@ (80053cc <ESP_Upkeep+0x5d8>)
 8005250:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005252:	f004 fef7 	bl	800a044 <ResetESPIndicator>
          clearDMABuffer();
 8005256:	f7ff fae3 	bl	8004820 <clearDMABuffer>
          stop = HAL_GetTick();
 800525a:	f006 f8f9 	bl	800b450 <HAL_GetTick>
 800525e:	0002      	movs	r2, r0
 8005260:	4b5b      	ldr	r3, [pc, #364]	@ (80053d0 <ESP_Upkeep+0x5dc>)
 8005262:	601a      	str	r2, [r3, #0]
          Debug("Message send in %ul ms", (stop-start));
 8005264:	4b5a      	ldr	r3, [pc, #360]	@ (80053d0 <ESP_Upkeep+0x5dc>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b5a      	ldr	r3, [pc, #360]	@ (80053d4 <ESP_Upkeep+0x5e0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	4a5a      	ldr	r2, [pc, #360]	@ (80053d8 <ESP_Upkeep+0x5e4>)
 8005270:	495a      	ldr	r1, [pc, #360]	@ (80053dc <ESP_Upkeep+0x5e8>)
 8005272:	2003      	movs	r0, #3
 8005274:	f005 fd4a 	bl	800ad0c <CreateLine>
          EspState = ESP_STATE_DEINIT;
 8005278:	4b51      	ldr	r3, [pc, #324]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 800527a:	220d      	movs	r2, #13
 800527c:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 800527e:	e08e      	b.n	800539e <ESP_Upkeep+0x5aa>
          EspState = ESP_STATE_RESET;
 8005280:	4b4f      	ldr	r3, [pc, #316]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 8005282:	2209      	movs	r2, #9
 8005284:	701a      	strb	r2, [r3, #0]
    break;
 8005286:	e08a      	b.n	800539e <ESP_Upkeep+0x5aa>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005288:	4b55      	ldr	r3, [pc, #340]	@ (80053e0 <ESP_Upkeep+0x5ec>)
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800528e:	4b55      	ldr	r3, [pc, #340]	@ (80053e4 <ESP_Upkeep+0x5f0>)
 8005290:	2200      	movs	r2, #0
 8005292:	2101      	movs	r1, #1
 8005294:	0018      	movs	r0, r3
 8005296:	f007 fb3a 	bl	800c90e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800529a:	2001      	movs	r0, #1
 800529c:	f006 f8e2 	bl	800b464 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052a0:	2380      	movs	r3, #128	@ 0x80
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	4850      	ldr	r0, [pc, #320]	@ (80053e8 <ESP_Upkeep+0x5f4>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	0019      	movs	r1, r3
 80052aa:	f007 fb30 	bl	800c90e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80052ae:	2001      	movs	r0, #1
 80052b0:	f006 f8d8 	bl	800b464 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80052b4:	4b4b      	ldr	r3, [pc, #300]	@ (80053e4 <ESP_Upkeep+0x5f0>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	2102      	movs	r1, #2
 80052ba:	0018      	movs	r0, r3
 80052bc:	f007 fb27 	bl	800c90e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80052c0:	4b3f      	ldr	r3, [pc, #252]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 80052c2:	2209      	movs	r2, #9
 80052c4:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80052c6:	2001      	movs	r0, #1
 80052c8:	f006 f8cc 	bl	800b464 <HAL_Delay>
      break;
 80052cc:	e06a      	b.n	80053a4 <ESP_Upkeep+0x5b0>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80052ce:	4b3f      	ldr	r3, [pc, #252]	@ (80053cc <ESP_Upkeep+0x5d8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f005 fcc4 	bl	800ac60 <TimestampIsReached>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d103      	bne.n	80052e4 <ESP_Upkeep+0x4f0>
 80052dc:	4b43      	ldr	r3, [pc, #268]	@ (80053ec <ESP_Upkeep+0x5f8>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d05e      	beq.n	80053a2 <ESP_Upkeep+0x5ae>
        if(Mode == AT_MODE_INIT){
 80052e4:	4b37      	ldr	r3, [pc, #220]	@ (80053c4 <ESP_Upkeep+0x5d0>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <ESP_Upkeep+0x504>
          InitIsDone = true;
 80052ec:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <ESP_Upkeep+0x5fc>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80052f2:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 80052f4:	220b      	movs	r2, #11
 80052f6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80052f8:	4b32      	ldr	r3, [pc, #200]	@ (80053c4 <ESP_Upkeep+0x5d0>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d108      	bne.n	8005312 <ESP_Upkeep+0x51e>
          ConnectionMade = true;
 8005300:	4b3c      	ldr	r3, [pc, #240]	@ (80053f4 <ESP_Upkeep+0x600>)
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005306:	4b3c      	ldr	r3, [pc, #240]	@ (80053f8 <ESP_Upkeep+0x604>)
 8005308:	2201      	movs	r2, #1
 800530a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800530c:	4b2c      	ldr	r3, [pc, #176]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 800530e:	220b      	movs	r2, #11
 8005310:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005312:	4b2c      	ldr	r3, [pc, #176]	@ (80053c4 <ESP_Upkeep+0x5d0>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d102      	bne.n	8005320 <ESP_Upkeep+0x52c>
          EspState = ESP_STATE_INIT;
 800531a:	4b29      	ldr	r3, [pc, #164]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 800531c:	2202      	movs	r2, #2
 800531e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005320:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <ESP_Upkeep+0x5d0>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d102      	bne.n	800532e <ESP_Upkeep+0x53a>
          EspState = ESP_STATE_CONFIG;
 8005328:	4b25      	ldr	r3, [pc, #148]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 800532a:	220e      	movs	r2, #14
 800532c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 800532e:	4b25      	ldr	r3, [pc, #148]	@ (80053c4 <ESP_Upkeep+0x5d0>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d135      	bne.n	80053a2 <ESP_Upkeep+0x5ae>
          EspState = ESP_STATE_MODE_SELECT;
 8005336:	4b22      	ldr	r3, [pc, #136]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 8005338:	220b      	movs	r2, #11
 800533a:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 800533c:	4b2f      	ldr	r3, [pc, #188]	@ (80053fc <ESP_Upkeep+0x608>)
 800533e:	2201      	movs	r2, #1
 8005340:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 8005342:	e02e      	b.n	80053a2 <ESP_Upkeep+0x5ae>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8005344:	4a2e      	ldr	r2, [pc, #184]	@ (8005400 <ESP_Upkeep+0x60c>)
 8005346:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <ESP_Upkeep+0x5e8>)
 8005348:	0019      	movs	r1, r3
 800534a:	2003      	movs	r0, #3
 800534c:	f005 fcde 	bl	800ad0c <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005350:	f012 fe4c 	bl	8017fec <GetUsbRxPointer>
 8005354:	0003      	movs	r3, r0
 8005356:	0018      	movs	r0, r3
 8005358:	f000 f8ca 	bl	80054f0 <Process_PC_Config>

      break;
 800535c:	e022      	b.n	80053a4 <ESP_Upkeep+0x5b0>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 800535e:	4a29      	ldr	r2, [pc, #164]	@ (8005404 <ESP_Upkeep+0x610>)
 8005360:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <ESP_Upkeep+0x5e8>)
 8005362:	0019      	movs	r1, r3
 8005364:	2003      	movs	r0, #3
 8005366:	f005 fcd1 	bl	800ad0c <CreateLine>
      EspState = ESP_STATE_INIT;
 800536a:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 800536c:	2202      	movs	r2, #2
 800536e:	701a      	strb	r2, [r3, #0]
      break;
 8005370:	e018      	b.n	80053a4 <ESP_Upkeep+0x5b0>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 8005372:	4a25      	ldr	r2, [pc, #148]	@ (8005408 <ESP_Upkeep+0x614>)
 8005374:	4b19      	ldr	r3, [pc, #100]	@ (80053dc <ESP_Upkeep+0x5e8>)
 8005376:	0019      	movs	r1, r3
 8005378:	2003      	movs	r0, #3
 800537a:	f005 fcc7 	bl	800ad0c <CreateLine>
      EspState = ESP_STATE_ERROR;
 800537e:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 8005380:	2207      	movs	r2, #7
 8005382:	701a      	strb	r2, [r3, #0]
      break;
 8005384:	e00e      	b.n	80053a4 <ESP_Upkeep+0x5b0>
      break;
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	e00c      	b.n	80053a4 <ESP_Upkeep+0x5b0>
      break;
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	e00a      	b.n	80053a4 <ESP_Upkeep+0x5b0>
        break;
 800538e:	46c0      	nop			@ (mov r8, r8)
 8005390:	e008      	b.n	80053a4 <ESP_Upkeep+0x5b0>
    break;
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	e006      	b.n	80053a4 <ESP_Upkeep+0x5b0>
         break;
 8005396:	46c0      	nop			@ (mov r8, r8)
 8005398:	e004      	b.n	80053a4 <ESP_Upkeep+0x5b0>
      break;
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	e002      	b.n	80053a4 <ESP_Upkeep+0x5b0>
    break;
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	e000      	b.n	80053a4 <ESP_Upkeep+0x5b0>
      break;
 80053a2:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80053a4:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <ESP_Upkeep+0x5cc>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
}
 80053a8:	0018      	movs	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b003      	add	sp, #12
 80053ae:	bd90      	pop	{r4, r7, pc}
 80053b0:	20000932 	.word	0x20000932
 80053b4:	20000928 	.word	0x20000928
 80053b8:	2000093a 	.word	0x2000093a
 80053bc:	20000939 	.word	0x20000939
 80053c0:	20000021 	.word	0x20000021
 80053c4:	2000093b 	.word	0x2000093b
 80053c8:	000493e0 	.word	0x000493e0
 80053cc:	20000934 	.word	0x20000934
 80053d0:	2000050c 	.word	0x2000050c
 80053d4:	20000508 	.word	0x20000508
 80053d8:	0801e75c 	.word	0x0801e75c
 80053dc:	0801e1a0 	.word	0x0801e1a0
 80053e0:	200004f3 	.word	0x200004f3
 80053e4:	50001c00 	.word	0x50001c00
 80053e8:	50000800 	.word	0x50000800
 80053ec:	200004f6 	.word	0x200004f6
 80053f0:	200004f4 	.word	0x200004f4
 80053f4:	200004f7 	.word	0x200004f7
 80053f8:	200004f9 	.word	0x200004f9
 80053fc:	200004f8 	.word	0x200004f8
 8005400:	0801e774 	.word	0x0801e774
 8005404:	0801e78c 	.word	0x0801e78c
 8005408:	0801e7a0 	.word	0x0801e7a0

0800540c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005414:	4b09      	ldr	r3, [pc, #36]	@ (800543c <I2CSensors_Init+0x30>)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800541a:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <I2CSensors_Init+0x34>)
 800541c:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <I2CSensors_Init+0x38>)
 800541e:	0011      	movs	r1, r2
 8005420:	0018      	movs	r0, r3
 8005422:	f000 ff89 	bl	8006338 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005426:	4a06      	ldr	r2, [pc, #24]	@ (8005440 <I2CSensors_Init+0x34>)
 8005428:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <I2CSensors_Init+0x38>)
 800542a:	0011      	movs	r1, r2
 800542c:	0018      	movs	r0, r3
 800542e:	f000 fdf3 	bl	8006018 <Gas_Init>
}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b002      	add	sp, #8
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	20000a2c 	.word	0x20000a2c
 8005440:	0800549d 	.word	0x0800549d
 8005444:	08005449 	.word	0x08005449

08005448 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6039      	str	r1, [r7, #0]
 8005450:	0011      	movs	r1, r2
 8005452:	1dfb      	adds	r3, r7, #7
 8005454:	1c02      	adds	r2, r0, #0
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	1dbb      	adds	r3, r7, #6
 800545a:	1c0a      	adds	r2, r1, #0
 800545c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800545e:	4b0e      	ldr	r3, [pc, #56]	@ (8005498 <ReadI2C+0x50>)
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	18db      	adds	r3, r3, r3
 800546a:	b299      	uxth	r1, r3
 800546c:	1dbb      	adds	r3, r7, #6
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	250f      	movs	r5, #15
 8005474:	197c      	adds	r4, r7, r5
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	f007 fc02 	bl	800cc80 <HAL_I2C_Master_Receive_DMA>
 800547c:	0003      	movs	r3, r0
 800547e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005480:	197b      	adds	r3, r7, r5
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <ReadI2C+0x44>
        return false;
 8005488:	2300      	movs	r3, #0
 800548a:	e000      	b.n	800548e <ReadI2C+0x46>
    }
    return true;
 800548c:	2301      	movs	r3, #1
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bdb0      	pop	{r4, r5, r7, pc}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	20000a2c 	.word	0x20000a2c

0800549c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800549c:	b5b0      	push	{r4, r5, r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6039      	str	r1, [r7, #0]
 80054a4:	0011      	movs	r1, r2
 80054a6:	1dfb      	adds	r3, r7, #7
 80054a8:	1c02      	adds	r2, r0, #0
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	1dbb      	adds	r3, r7, #6
 80054ae:	1c0a      	adds	r2, r1, #0
 80054b0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80054b2:	4b0e      	ldr	r3, [pc, #56]	@ (80054ec <WriteI2C+0x50>)
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	1dfb      	adds	r3, r7, #7
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	18db      	adds	r3, r3, r3
 80054be:	b299      	uxth	r1, r3
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	250f      	movs	r5, #15
 80054c8:	197c      	adds	r4, r7, r5
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	f007 fad2 	bl	800ca74 <HAL_I2C_Master_Transmit_DMA>
 80054d0:	0003      	movs	r3, r0
 80054d2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80054d4:	197b      	adds	r3, r7, r5
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <WriteI2C+0x44>
        return false;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <WriteI2C+0x46>
    }
    return true;
 80054e0:	2301      	movs	r3, #1
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b004      	add	sp, #16
 80054e8:	bdb0      	pop	{r4, r5, r7, pc}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	20000a2c 	.word	0x20000a2c

080054f0 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b0c3      	sub	sp, #268	@ 0x10c
 80054f4:	af3e      	add	r7, sp, #248	@ 0xf8
 80054f6:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80054f8:	f012 fd98 	bl	801802c <GetUsbRxDataSize>
 80054fc:	0003      	movs	r3, r0
 80054fe:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b05      	cmp	r3, #5
 8005504:	d971      	bls.n	80055ea <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2123      	movs	r1, #35	@ 0x23
 800550a:	0018      	movs	r0, r3
 800550c:	f015 fdf2 	bl	801b0f4 <strchr>
 8005510:	0003      	movs	r3, r0
 8005512:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d065      	beq.n	80055e6 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	785a      	ldrb	r2, [r3, #1]
 800551e:	4b34      	ldr	r3, [pc, #208]	@ (80055f0 <Process_PC_Config+0x100>)
 8005520:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	789a      	ldrb	r2, [r3, #2]
 8005526:	4b32      	ldr	r3, [pc, #200]	@ (80055f0 <Process_PC_Config+0x100>)
 8005528:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800552a:	4b31      	ldr	r3, [pc, #196]	@ (80055f0 <Process_PC_Config+0x100>)
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	3305      	adds	r3, #5
 8005530:	001a      	movs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4293      	cmp	r3, r2
 8005536:	d351      	bcc.n	80055dc <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	1cd9      	adds	r1, r3, #3
 800553c:	4b2c      	ldr	r3, [pc, #176]	@ (80055f0 <Process_PC_Config+0x100>)
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	001a      	movs	r2, r3
 8005542:	4b2c      	ldr	r3, [pc, #176]	@ (80055f4 <Process_PC_Config+0x104>)
 8005544:	0018      	movs	r0, r3
 8005546:	f015 fea9 	bl	801b29c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800554a:	4b29      	ldr	r3, [pc, #164]	@ (80055f0 <Process_PC_Config+0x100>)
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	3303      	adds	r3, #3
 8005550:	001a      	movs	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	189b      	adds	r3, r3, r2
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	b21a      	sxth	r2, r3
 800555c:	4b24      	ldr	r3, [pc, #144]	@ (80055f0 <Process_PC_Config+0x100>)
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	3304      	adds	r3, #4
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	18cb      	adds	r3, r1, r3
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b21b      	sxth	r3, r3
 800556a:	4313      	orrs	r3, r2
 800556c:	b21b      	sxth	r3, r3
 800556e:	b299      	uxth	r1, r3
 8005570:	4a1f      	ldr	r2, [pc, #124]	@ (80055f0 <Process_PC_Config+0x100>)
 8005572:	2381      	movs	r3, #129	@ 0x81
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005578:	4a1d      	ldr	r2, [pc, #116]	@ (80055f0 <Process_PC_Config+0x100>)
 800557a:	2381      	movs	r3, #129	@ 0x81
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	5ad4      	ldrh	r4, [r2, r3]
 8005580:	4b1b      	ldr	r3, [pc, #108]	@ (80055f0 <Process_PC_Config+0x100>)
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	3303      	adds	r3, #3
 8005586:	b29a      	uxth	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	0011      	movs	r1, r2
 800558c:	0018      	movs	r0, r3
 800558e:	f000 f975 	bl	800587c <CRC16_ARC>
 8005592:	0003      	movs	r3, r0
 8005594:	429c      	cmp	r4, r3
 8005596:	d007      	beq.n	80055a8 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005598:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <Process_PC_Config+0x100>)
 800559a:	785a      	ldrb	r2, [r3, #1]
 800559c:	4b15      	ldr	r3, [pc, #84]	@ (80055f4 <Process_PC_Config+0x104>)
 800559e:	0019      	movs	r1, r3
 80055a0:	2001      	movs	r0, #1
 80055a2:	f000 f919 	bl	80057d8 <Create_Message>
 80055a6:	e016      	b.n	80055d6 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80055a8:	4c11      	ldr	r4, [pc, #68]	@ (80055f0 <Process_PC_Config+0x100>)
 80055aa:	466b      	mov	r3, sp
 80055ac:	0018      	movs	r0, r3
 80055ae:	0023      	movs	r3, r4
 80055b0:	3310      	adds	r3, #16
 80055b2:	22f4      	movs	r2, #244	@ 0xf4
 80055b4:	0019      	movs	r1, r3
 80055b6:	f015 fe71 	bl	801b29c <memcpy>
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	6861      	ldr	r1, [r4, #4]
 80055be:	68a2      	ldr	r2, [r4, #8]
 80055c0:	68e3      	ldr	r3, [r4, #12]
 80055c2:	f000 f819 	bl	80055f8 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80055c6:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <Process_PC_Config+0x100>)
 80055c8:	7818      	ldrb	r0, [r3, #0]
 80055ca:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <Process_PC_Config+0x100>)
 80055cc:	785a      	ldrb	r2, [r3, #1]
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <Process_PC_Config+0x104>)
 80055d0:	0019      	movs	r1, r3
 80055d2:	f000 f901 	bl	80057d8 <Create_Message>
                }
                ResetUsbRxDataSize();
 80055d6:	f012 fd11 	bl	8017ffc <ResetUsbRxDataSize>
                return;
 80055da:	e006      	b.n	80055ea <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	0018      	movs	r0, r3
 80055e0:	f012 fd2e 	bl	8018040 <GetUsbRxNextChunk>
 80055e4:	e001      	b.n	80055ea <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80055e6:	f012 fd09 	bl	8017ffc <ResetUsbRxDataSize>
        }
    }
}
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b005      	add	sp, #20
 80055ee:	bd90      	pop	{r4, r7, pc}
 80055f0:	20000a30 	.word	0x20000a30
 80055f4:	20000a32 	.word	0x20000a32

080055f8 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80055f8:	b084      	sub	sp, #16
 80055fa:	b5b0      	push	{r4, r5, r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	2518      	movs	r5, #24
 8005602:	197c      	adds	r4, r7, r5
 8005604:	6020      	str	r0, [r4, #0]
 8005606:	6061      	str	r1, [r4, #4]
 8005608:	60a2      	str	r2, [r4, #8]
 800560a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 800560c:	197b      	adds	r3, r7, r5
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2bfe      	cmp	r3, #254	@ 0xfe
 8005612:	d100      	bne.n	8005616 <ProcessCmd+0x1e>
 8005614:	e09c      	b.n	8005750 <ProcessCmd+0x158>
 8005616:	dd00      	ble.n	800561a <ProcessCmd+0x22>
 8005618:	e0bc      	b.n	8005794 <ProcessCmd+0x19c>
 800561a:	2b0c      	cmp	r3, #12
 800561c:	dc0a      	bgt.n	8005634 <ProcessCmd+0x3c>
 800561e:	2b00      	cmp	r3, #0
 8005620:	da00      	bge.n	8005624 <ProcessCmd+0x2c>
 8005622:	e0b7      	b.n	8005794 <ProcessCmd+0x19c>
 8005624:	2b0c      	cmp	r3, #12
 8005626:	d900      	bls.n	800562a <ProcessCmd+0x32>
 8005628:	e0b4      	b.n	8005794 <ProcessCmd+0x19c>
 800562a:	009a      	lsls	r2, r3, #2
 800562c:	4b5d      	ldr	r3, [pc, #372]	@ (80057a4 <ProcessCmd+0x1ac>)
 800562e:	18d3      	adds	r3, r2, r3
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	469f      	mov	pc, r3
 8005634:	2bfd      	cmp	r3, #253	@ 0xfd
 8005636:	d100      	bne.n	800563a <ProcessCmd+0x42>
 8005638:	e084      	b.n	8005744 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800563a:	e0ab      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800563c:	2118      	movs	r1, #24
 800563e:	187b      	adds	r3, r7, r1
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	001a      	movs	r2, r3
 8005644:	187b      	adds	r3, r7, r1
 8005646:	1c99      	adds	r1, r3, #2
 8005648:	4857      	ldr	r0, [pc, #348]	@ (80057a8 <ProcessCmd+0x1b0>)
 800564a:	230c      	movs	r3, #12
 800564c:	f7fe f82e 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005650:	e0a0      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005652:	2118      	movs	r1, #24
 8005654:	187b      	adds	r3, r7, r1
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	001a      	movs	r2, r3
 800565a:	187b      	adds	r3, r7, r1
 800565c:	1c99      	adds	r1, r3, #2
 800565e:	4853      	ldr	r0, [pc, #332]	@ (80057ac <ProcessCmd+0x1b4>)
 8005660:	230c      	movs	r3, #12
 8005662:	f7fe f823 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005666:	e095      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005668:	2118      	movs	r1, #24
 800566a:	187b      	adds	r3, r7, r1
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	001a      	movs	r2, r3
 8005670:	187b      	adds	r3, r7, r1
 8005672:	1c99      	adds	r1, r3, #2
 8005674:	484e      	ldr	r0, [pc, #312]	@ (80057b0 <ProcessCmd+0x1b8>)
 8005676:	230c      	movs	r3, #12
 8005678:	f7fe f818 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 800567c:	e08a      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800567e:	2118      	movs	r1, #24
 8005680:	187b      	adds	r3, r7, r1
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	001a      	movs	r2, r3
 8005686:	187b      	adds	r3, r7, r1
 8005688:	1c99      	adds	r1, r3, #2
 800568a:	484a      	ldr	r0, [pc, #296]	@ (80057b4 <ProcessCmd+0x1bc>)
 800568c:	230c      	movs	r3, #12
 800568e:	f7fe f80d 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005692:	e07f      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005694:	2118      	movs	r1, #24
 8005696:	187b      	adds	r3, r7, r1
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	001a      	movs	r2, r3
 800569c:	187b      	adds	r3, r7, r1
 800569e:	1c99      	adds	r1, r3, #2
 80056a0:	4845      	ldr	r0, [pc, #276]	@ (80057b8 <ProcessCmd+0x1c0>)
 80056a2:	230c      	movs	r3, #12
 80056a4:	f7fe f802 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056a8:	e074      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80056aa:	2118      	movs	r1, #24
 80056ac:	187b      	adds	r3, r7, r1
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	001a      	movs	r2, r3
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	1c99      	adds	r1, r3, #2
 80056b6:	4841      	ldr	r0, [pc, #260]	@ (80057bc <ProcessCmd+0x1c4>)
 80056b8:	230c      	movs	r3, #12
 80056ba:	f7fd fff7 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056be:	e069      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80056c0:	2118      	movs	r1, #24
 80056c2:	187b      	adds	r3, r7, r1
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	001a      	movs	r2, r3
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	1c99      	adds	r1, r3, #2
 80056cc:	483c      	ldr	r0, [pc, #240]	@ (80057c0 <ProcessCmd+0x1c8>)
 80056ce:	230c      	movs	r3, #12
 80056d0:	f7fd ffec 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056d4:	e05e      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80056d6:	2118      	movs	r1, #24
 80056d8:	187b      	adds	r3, r7, r1
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	001a      	movs	r2, r3
 80056de:	187b      	adds	r3, r7, r1
 80056e0:	1c99      	adds	r1, r3, #2
 80056e2:	4838      	ldr	r0, [pc, #224]	@ (80057c4 <ProcessCmd+0x1cc>)
 80056e4:	231e      	movs	r3, #30
 80056e6:	f7fd ffe1 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 80056ea:	e053      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80056ec:	2118      	movs	r1, #24
 80056ee:	187b      	adds	r3, r7, r1
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	001a      	movs	r2, r3
 80056f4:	187b      	adds	r3, r7, r1
 80056f6:	1c99      	adds	r1, r3, #2
 80056f8:	4833      	ldr	r0, [pc, #204]	@ (80057c8 <ProcessCmd+0x1d0>)
 80056fa:	230c      	movs	r3, #12
 80056fc:	f7fd ffd6 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005700:	e048      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005702:	2118      	movs	r1, #24
 8005704:	187b      	adds	r3, r7, r1
 8005706:	785b      	ldrb	r3, [r3, #1]
 8005708:	001a      	movs	r2, r3
 800570a:	187b      	adds	r3, r7, r1
 800570c:	1c99      	adds	r1, r3, #2
 800570e:	482f      	ldr	r0, [pc, #188]	@ (80057cc <ProcessCmd+0x1d4>)
 8005710:	230c      	movs	r3, #12
 8005712:	f7fd ffcb 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005716:	e03d      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005718:	2118      	movs	r1, #24
 800571a:	187b      	adds	r3, r7, r1
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	001a      	movs	r2, r3
 8005720:	187b      	adds	r3, r7, r1
 8005722:	1c99      	adds	r1, r3, #2
 8005724:	482a      	ldr	r0, [pc, #168]	@ (80057d0 <ProcessCmd+0x1d8>)
 8005726:	230c      	movs	r3, #12
 8005728:	f7fd ffc0 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 800572c:	e032      	b.n	8005794 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800572e:	2118      	movs	r1, #24
 8005730:	187b      	adds	r3, r7, r1
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	001a      	movs	r2, r3
 8005736:	187b      	adds	r3, r7, r1
 8005738:	1c99      	adds	r1, r3, #2
 800573a:	4826      	ldr	r0, [pc, #152]	@ (80057d4 <ProcessCmd+0x1dc>)
 800573c:	230c      	movs	r3, #12
 800573e:	f7fd ffb5 	bl	80036ac <WriteUint8ArrayEepromSafe>
        break;
 8005742:	e027      	b.n	8005794 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005744:	4b18      	ldr	r3, [pc, #96]	@ (80057a8 <ProcessCmd+0x1b0>)
 8005746:	21ba      	movs	r1, #186	@ 0xba
 8005748:	0018      	movs	r0, r3
 800574a:	f7fd fff4 	bl	8003736 <ClearEEprom>
        break;
 800574e:	e021      	b.n	8005794 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005750:	2118      	movs	r1, #24
 8005752:	187b      	adds	r3, r7, r1
 8005754:	789b      	ldrb	r3, [r3, #2]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b21a      	sxth	r2, r3
 800575a:	187b      	adds	r3, r7, r1
 800575c:	78db      	ldrb	r3, [r3, #3]
 800575e:	b21b      	sxth	r3, r3
 8005760:	4313      	orrs	r3, r2
 8005762:	b21a      	sxth	r2, r3
 8005764:	1dbb      	adds	r3, r7, #6
 8005766:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005768:	1dbb      	adds	r3, r7, #6
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	23c0      	movs	r3, #192	@ 0xc0
 800576e:	015b      	lsls	r3, r3, #5
 8005770:	429a      	cmp	r2, r3
 8005772:	d207      	bcs.n	8005784 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005774:	1dbb      	adds	r3, r7, #6
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	4a0b      	ldr	r2, [pc, #44]	@ (80057a8 <ProcessCmd+0x1b0>)
 800577a:	0019      	movs	r1, r3
 800577c:	0010      	movs	r0, r2
 800577e:	f7fd ffda 	bl	8003736 <ClearEEprom>
            break;
 8005782:	e006      	b.n	8005792 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005784:	23c0      	movs	r3, #192	@ 0xc0
 8005786:	015b      	lsls	r3, r3, #5
 8005788:	4a07      	ldr	r2, [pc, #28]	@ (80057a8 <ProcessCmd+0x1b0>)
 800578a:	0019      	movs	r1, r3
 800578c:	0010      	movs	r0, r2
 800578e:	f7fd ffd2 	bl	8003736 <ClearEEprom>
            break;
 8005792:	46c0      	nop			@ (mov r8, r8)
}
 8005794:	46c0      	nop			@ (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b002      	add	sp, #8
 800579a:	bcb0      	pop	{r4, r5, r7}
 800579c:	bc08      	pop	{r3}
 800579e:	b004      	add	sp, #16
 80057a0:	4718      	bx	r3
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	0801f054 	.word	0x0801f054
 80057a8:	08080000 	.word	0x08080000
 80057ac:	0808000c 	.word	0x0808000c
 80057b0:	08080018 	.word	0x08080018
 80057b4:	08080024 	.word	0x08080024
 80057b8:	08080030 	.word	0x08080030
 80057bc:	0808003c 	.word	0x0808003c
 80057c0:	08080048 	.word	0x08080048
 80057c4:	08080090 	.word	0x08080090
 80057c8:	08080078 	.word	0x08080078
 80057cc:	0808006c 	.word	0x0808006c
 80057d0:	08080060 	.word	0x08080060
 80057d4:	08080054 	.word	0x08080054

080057d8 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6039      	str	r1, [r7, #0]
 80057e0:	0011      	movs	r1, r2
 80057e2:	1dfb      	adds	r3, r7, #7
 80057e4:	1c02      	adds	r2, r0, #0
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	1dbb      	adds	r3, r7, #6
 80057ea:	1c0a      	adds	r2, r1, #0
 80057ec:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80057ee:	2223      	movs	r2, #35	@ 0x23
 80057f0:	4b20      	ldr	r3, [pc, #128]	@ (8005874 <Create_Message+0x9c>)
 80057f2:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80057f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005874 <Create_Message+0x9c>)
 80057f6:	1dfa      	adds	r2, r7, #7
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <Create_Message+0x9c>)
 80057fe:	1dba      	adds	r2, r7, #6
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005804:	1dbb      	adds	r3, r7, #6
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	4b1b      	ldr	r3, [pc, #108]	@ (8005878 <Create_Message+0xa0>)
 800580c:	0018      	movs	r0, r3
 800580e:	f015 fd45 	bl	801b29c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005812:	1dbb      	adds	r3, r7, #6
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b29a      	uxth	r2, r3
 8005818:	250e      	movs	r5, #14
 800581a:	197b      	adds	r3, r7, r5
 800581c:	3203      	adds	r2, #3
 800581e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005820:	260c      	movs	r6, #12
 8005822:	19bc      	adds	r4, r7, r6
 8005824:	197b      	adds	r3, r7, r5
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	4b12      	ldr	r3, [pc, #72]	@ (8005874 <Create_Message+0x9c>)
 800582a:	0011      	movs	r1, r2
 800582c:	0018      	movs	r0, r3
 800582e:	f000 f825 	bl	800587c <CRC16_ARC>
 8005832:	0003      	movs	r3, r0
 8005834:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005836:	0030      	movs	r0, r6
 8005838:	183b      	adds	r3, r7, r0
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	b29a      	uxth	r2, r3
 8005840:	197b      	adds	r3, r7, r5
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b2d1      	uxtb	r1, r2
 8005846:	4a0b      	ldr	r2, [pc, #44]	@ (8005874 <Create_Message+0x9c>)
 8005848:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800584a:	197b      	adds	r3, r7, r5
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	183a      	adds	r2, r7, r0
 8005852:	8812      	ldrh	r2, [r2, #0]
 8005854:	b2d1      	uxtb	r1, r2
 8005856:	4a07      	ldr	r2, [pc, #28]	@ (8005874 <Create_Message+0x9c>)
 8005858:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800585a:	197b      	adds	r3, r7, r5
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	3302      	adds	r3, #2
 8005860:	b29a      	uxth	r2, r3
 8005862:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <Create_Message+0x9c>)
 8005864:	0011      	movs	r1, r2
 8005866:	0018      	movs	r0, r3
 8005868:	f012 fb86 	bl	8017f78 <CDC_Transmit_FS>
}
 800586c:	46c0      	nop			@ (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b005      	add	sp, #20
 8005872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005874:	20000b34 	.word	0x20000b34
 8005878:	20000b37 	.word	0x20000b37

0800587c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	000a      	movs	r2, r1
 8005886:	1cbb      	adds	r3, r7, #2
 8005888:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800588a:	2316      	movs	r3, #22
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	2200      	movs	r2, #0
 8005890:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e02e      	b.n	80058f6 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	18d3      	adds	r3, r2, r3
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	0019      	movs	r1, r3
 80058a2:	2216      	movs	r2, #22
 80058a4:	18bb      	adds	r3, r7, r2
 80058a6:	18ba      	adds	r2, r7, r2
 80058a8:	8812      	ldrh	r2, [r2, #0]
 80058aa:	404a      	eors	r2, r1
 80058ac:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e01a      	b.n	80058ea <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80058b4:	2116      	movs	r1, #22
 80058b6:	187b      	adds	r3, r7, r1
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	4013      	ands	r3, r2
 80058be:	d00b      	beq.n	80058d8 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80058c0:	187b      	adds	r3, r7, r1
 80058c2:	187a      	adds	r2, r7, r1
 80058c4:	8812      	ldrh	r2, [r2, #0]
 80058c6:	0852      	lsrs	r2, r2, #1
 80058c8:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80058ca:	187b      	adds	r3, r7, r1
 80058cc:	187a      	adds	r2, r7, r1
 80058ce:	8812      	ldrh	r2, [r2, #0]
 80058d0:	490f      	ldr	r1, [pc, #60]	@ (8005910 <CRC16_ARC+0x94>)
 80058d2:	404a      	eors	r2, r1
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e005      	b.n	80058e4 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80058d8:	2216      	movs	r2, #22
 80058da:	18bb      	adds	r3, r7, r2
 80058dc:	18ba      	adds	r2, r7, r2
 80058de:	8812      	ldrh	r2, [r2, #0]
 80058e0:	0852      	lsrs	r2, r2, #1
 80058e2:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b07      	cmp	r3, #7
 80058ee:	dde1      	ble.n	80058b4 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3301      	adds	r3, #1
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	1cbb      	adds	r3, r7, #2
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	dbcb      	blt.n	8005898 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005900:	2316      	movs	r3, #22
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	881b      	ldrh	r3, [r3, #0]
}
 8005906:	0018      	movs	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	b006      	add	sp, #24
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	ffffa001 	.word	0xffffa001

08005914 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005918:	4b26      	ldr	r3, [pc, #152]	@ (80059b4 <ReadBatteryVoltage+0xa0>)
 800591a:	4a27      	ldr	r2, [pc, #156]	@ (80059b8 <ReadBatteryVoltage+0xa4>)
 800591c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800591e:	4b25      	ldr	r3, [pc, #148]	@ (80059b4 <ReadBatteryVoltage+0xa0>)
 8005920:	2280      	movs	r2, #128	@ 0x80
 8005922:	0152      	lsls	r2, r2, #5
 8005924:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005926:	4a23      	ldr	r2, [pc, #140]	@ (80059b4 <ReadBatteryVoltage+0xa0>)
 8005928:	4b24      	ldr	r3, [pc, #144]	@ (80059bc <ReadBatteryVoltage+0xa8>)
 800592a:	0011      	movs	r1, r2
 800592c:	0018      	movs	r0, r3
 800592e:	f006 f84b 	bl	800b9c8 <HAL_ADC_ConfigChannel>
 8005932:	1e03      	subs	r3, r0, #0
 8005934:	d001      	beq.n	800593a <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005936:	f001 f8d9 	bl	8006aec <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800593a:	4b20      	ldr	r3, [pc, #128]	@ (80059bc <ReadBatteryVoltage+0xa8>)
 800593c:	0018      	movs	r0, r3
 800593e:	f005 ff47 	bl	800b7d0 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005942:	4b1e      	ldr	r3, [pc, #120]	@ (80059bc <ReadBatteryVoltage+0xa8>)
 8005944:	2101      	movs	r1, #1
 8005946:	0018      	movs	r0, r3
 8005948:	f005 ff96 	bl	800b878 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 800594c:	4b1b      	ldr	r3, [pc, #108]	@ (80059bc <ReadBatteryVoltage+0xa8>)
 800594e:	0018      	movs	r0, r3
 8005950:	f006 f82e 	bl	800b9b0 <HAL_ADC_GetValue>
 8005954:	0002      	movs	r2, r0
 8005956:	4b1a      	ldr	r3, [pc, #104]	@ (80059c0 <ReadBatteryVoltage+0xac>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4353      	muls	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4919      	ldr	r1, [pc, #100]	@ (80059c4 <ReadBatteryVoltage+0xb0>)
 8005960:	0018      	movs	r0, r3
 8005962:	f7fa fc15 	bl	8000190 <__udivsi3>
 8005966:	0003      	movs	r3, r0
 8005968:	001a      	movs	r2, r3
 800596a:	4b17      	ldr	r3, [pc, #92]	@ (80059c8 <ReadBatteryVoltage+0xb4>)
 800596c:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 800596e:	4b16      	ldr	r3, [pc, #88]	@ (80059c8 <ReadBatteryVoltage+0xb4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	0018      	movs	r0, r3
 8005974:	f7fb fe6e 	bl	8001654 <__aeabi_ui2f>
 8005978:	1c03      	adds	r3, r0, #0
 800597a:	4914      	ldr	r1, [pc, #80]	@ (80059cc <ReadBatteryVoltage+0xb8>)
 800597c:	1c18      	adds	r0, r3, #0
 800597e:	f7fb f91f 	bl	8000bc0 <__aeabi_fdiv>
 8005982:	1c03      	adds	r3, r0, #0
 8005984:	1c1a      	adds	r2, r3, #0
 8005986:	4b12      	ldr	r3, [pc, #72]	@ (80059d0 <ReadBatteryVoltage+0xbc>)
 8005988:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 800598a:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <ReadBatteryVoltage+0xa0>)
 800598c:	4a0a      	ldr	r2, [pc, #40]	@ (80059b8 <ReadBatteryVoltage+0xa4>)
 800598e:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005990:	4b08      	ldr	r3, [pc, #32]	@ (80059b4 <ReadBatteryVoltage+0xa0>)
 8005992:	4a10      	ldr	r2, [pc, #64]	@ (80059d4 <ReadBatteryVoltage+0xc0>)
 8005994:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005996:	4a07      	ldr	r2, [pc, #28]	@ (80059b4 <ReadBatteryVoltage+0xa0>)
 8005998:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <ReadBatteryVoltage+0xa8>)
 800599a:	0011      	movs	r1, r2
 800599c:	0018      	movs	r0, r3
 800599e:	f006 f813 	bl	800b9c8 <HAL_ADC_ConfigChannel>
 80059a2:	1e03      	subs	r3, r0, #0
 80059a4:	d001      	beq.n	80059aa <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 80059a6:	f001 f8a1 	bl	8006aec <Error_Handler>
   }
   return trueValue;
 80059aa:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <ReadBatteryVoltage+0xbc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 }
 80059ae:	1c18      	adds	r0, r3, #0
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000c3c 	.word	0x20000c3c
 80059b8:	38004000 	.word	0x38004000
 80059bc:	20000c5c 	.word	0x20000c5c
 80059c0:	20000024 	.word	0x20000024
 80059c4:	00000fff 	.word	0x00000fff
 80059c8:	20000c44 	.word	0x20000c44
 80059cc:	447a0000 	.word	0x447a0000
 80059d0:	20000c48 	.word	0x20000c48
 80059d4:	00001001 	.word	0x00001001

080059d8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 80059dc:	4b27      	ldr	r3, [pc, #156]	@ (8005a7c <ReadSolarVoltage+0xa4>)
 80059de:	4a28      	ldr	r2, [pc, #160]	@ (8005a80 <ReadSolarVoltage+0xa8>)
 80059e0:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80059e2:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <ReadSolarVoltage+0xa4>)
 80059e4:	2280      	movs	r2, #128	@ 0x80
 80059e6:	0152      	lsls	r2, r2, #5
 80059e8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80059ea:	4a24      	ldr	r2, [pc, #144]	@ (8005a7c <ReadSolarVoltage+0xa4>)
 80059ec:	4b25      	ldr	r3, [pc, #148]	@ (8005a84 <ReadSolarVoltage+0xac>)
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f005 ffe9 	bl	800b9c8 <HAL_ADC_ConfigChannel>
 80059f6:	1e03      	subs	r3, r0, #0
 80059f8:	d001      	beq.n	80059fe <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 80059fa:	f001 f877 	bl	8006aec <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 80059fe:	4b21      	ldr	r3, [pc, #132]	@ (8005a84 <ReadSolarVoltage+0xac>)
 8005a00:	0018      	movs	r0, r3
 8005a02:	f005 fee5 	bl	800b7d0 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005a06:	4b1f      	ldr	r3, [pc, #124]	@ (8005a84 <ReadSolarVoltage+0xac>)
 8005a08:	2101      	movs	r1, #1
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f005 ff34 	bl	800b878 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005a10:	4b1c      	ldr	r3, [pc, #112]	@ (8005a84 <ReadSolarVoltage+0xac>)
 8005a12:	0018      	movs	r0, r3
 8005a14:	f005 ffcc 	bl	800b9b0 <HAL_ADC_GetValue>
 8005a18:	0002      	movs	r2, r0
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <ReadSolarVoltage+0xb0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	435a      	muls	r2, r3
 8005a20:	0013      	movs	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	4919      	ldr	r1, [pc, #100]	@ (8005a8c <ReadSolarVoltage+0xb4>)
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fa fbb1 	bl	8000190 <__udivsi3>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	001a      	movs	r2, r3
 8005a32:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <ReadSolarVoltage+0xb8>)
 8005a34:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005a36:	4b16      	ldr	r3, [pc, #88]	@ (8005a90 <ReadSolarVoltage+0xb8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7fb fe0a 	bl	8001654 <__aeabi_ui2f>
 8005a40:	1c03      	adds	r3, r0, #0
 8005a42:	4914      	ldr	r1, [pc, #80]	@ (8005a94 <ReadSolarVoltage+0xbc>)
 8005a44:	1c18      	adds	r0, r3, #0
 8005a46:	f7fb f8bb 	bl	8000bc0 <__aeabi_fdiv>
 8005a4a:	1c03      	adds	r3, r0, #0
 8005a4c:	1c1a      	adds	r2, r3, #0
 8005a4e:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <ReadSolarVoltage+0xc0>)
 8005a50:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005a52:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <ReadSolarVoltage+0xa4>)
 8005a54:	4a0a      	ldr	r2, [pc, #40]	@ (8005a80 <ReadSolarVoltage+0xa8>)
 8005a56:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005a58:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <ReadSolarVoltage+0xa4>)
 8005a5a:	4a10      	ldr	r2, [pc, #64]	@ (8005a9c <ReadSolarVoltage+0xc4>)
 8005a5c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005a5e:	4a07      	ldr	r2, [pc, #28]	@ (8005a7c <ReadSolarVoltage+0xa4>)
 8005a60:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <ReadSolarVoltage+0xac>)
 8005a62:	0011      	movs	r1, r2
 8005a64:	0018      	movs	r0, r3
 8005a66:	f005 ffaf 	bl	800b9c8 <HAL_ADC_ConfigChannel>
 8005a6a:	1e03      	subs	r3, r0, #0
 8005a6c:	d001      	beq.n	8005a72 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005a6e:	f001 f83d 	bl	8006aec <Error_Handler>
   }
   return trueValue;
 8005a72:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <ReadSolarVoltage+0xc0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 }
 8005a76:	1c18      	adds	r0, r3, #0
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000c3c 	.word	0x20000c3c
 8005a80:	3c008000 	.word	0x3c008000
 8005a84:	20000c5c 	.word	0x20000c5c
 8005a88:	20000024 	.word	0x20000024
 8005a8c:	00000fff 	.word	0x00000fff
 8005a90:	20000c4c 	.word	0x20000c4c
 8005a94:	447a0000 	.word	0x447a0000
 8005a98:	20000c50 	.word	0x20000c50
 8005a9c:	00001001 	.word	0x00001001

08005aa0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005aa4:	23a0      	movs	r3, #160	@ 0xa0
 8005aa6:	05db      	lsls	r3, r3, #23
 8005aa8:	2180      	movs	r1, #128	@ 0x80
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f006 ff12 	bl	800c8d4 <HAL_GPIO_ReadPin>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	1e5a      	subs	r2, r3, #1
 8005ab4:	4193      	sbcs	r3, r2
 8005ab6:	b2db      	uxtb	r3, r3
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005ac2:	2380      	movs	r3, #128	@ 0x80
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	23a0      	movs	r3, #160	@ 0xa0
 8005ac8:	05db      	lsls	r3, r3, #23
 8005aca:	0011      	movs	r1, r2
 8005acc:	0018      	movs	r0, r3
 8005ace:	f006 ff01 	bl	800c8d4 <HAL_GPIO_ReadPin>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	4193      	sbcs	r3, r2
 8005ad8:	b2db      	uxtb	r3, r3
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <UserButton_Pressed+0x1c>)
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f006 fef3 	bl	800c8d4 <HAL_GPIO_ReadPin>
 8005aee:	0003      	movs	r3, r0
 8005af0:	425a      	negs	r2, r3
 8005af2:	4153      	adcs	r3, r2
 8005af4:	b2db      	uxtb	r3, r3
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	50000c00 	.word	0x50000c00

08005b00 <RTC_SetTime>:
static Clock RealTime = {.Hours = 0, .Minutes = 0, .Seconds = 0};
static Clock NextAction = {.Hours = 0, .Minutes = 0, .Seconds = 0};
RTC_HandleTypeDef* RealTime_Handle = NULL;

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b089      	sub	sp, #36	@ 0x24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	000c      	movs	r4, r1
 8005b0a:	0010      	movs	r0, r2
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	1cfb      	adds	r3, r7, #3
 8005b10:	1c22      	adds	r2, r4, #0
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	1cbb      	adds	r3, r7, #2
 8005b16:	1c02      	adds	r2, r0, #0
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	1c7b      	adds	r3, r7, #1
 8005b1c:	1c0a      	adds	r2, r1, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8005b20:	240c      	movs	r4, #12
 8005b22:	193b      	adds	r3, r7, r4
 8005b24:	0018      	movs	r0, r3
 8005b26:	2314      	movs	r3, #20
 8005b28:	001a      	movs	r2, r3
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f015 fada 	bl	801b0e4 <memset>

    sTime.Hours = hours;
 8005b30:	0021      	movs	r1, r4
 8005b32:	187b      	adds	r3, r7, r1
 8005b34:	1cfa      	adds	r2, r7, #3
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	1cba      	adds	r2, r7, #2
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 8005b42:	187b      	adds	r3, r7, r1
 8005b44:	1c7a      	adds	r2, r7, #1
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	2200      	movs	r2, #0
 8005b54:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005b56:	187b      	adds	r3, r7, r1
 8005b58:	2200      	movs	r2, #0
 8005b5a:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8005b5c:	1879      	adds	r1, r7, r1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	0018      	movs	r0, r3
 8005b64:	f00c f862 	bl	8011c2c <HAL_RTC_SetTime>
        // Foutafhandeling
    }
}
 8005b68:	46c0      	nop			@ (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b009      	add	sp, #36	@ 0x24
 8005b6e:	bd90      	pop	{r4, r7, pc}

08005b70 <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 8005b78:	4b08      	ldr	r3, [pc, #32]	@ (8005b9c <InitClock+0x2c>)
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 8005b7e:	4b07      	ldr	r3, [pc, #28]	@ (8005b9c <InitClock+0x2c>)
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	4b07      	ldr	r3, [pc, #28]	@ (8005ba0 <InitClock+0x30>)
 8005b84:	7819      	ldrb	r1, [r3, #0]
 8005b86:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <InitClock+0x30>)
 8005b88:	785a      	ldrb	r2, [r3, #1]
 8005b8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ba0 <InitClock+0x30>)
 8005b8c:	789b      	ldrb	r3, [r3, #2]
 8005b8e:	f7ff ffb7 	bl	8005b00 <RTC_SetTime>
}
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b002      	add	sp, #8
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	46c0      	nop			@ (mov r8, r8)
 8005b9c:	20000c58 	.word	0x20000c58
 8005ba0:	20000c54 	.word	0x20000c54

08005ba4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005baa:	003b      	movs	r3, r7
 8005bac:	0018      	movs	r0, r3
 8005bae:	2308      	movs	r3, #8
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	f015 fa96 	bl	801b0e4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005bb8:	4b30      	ldr	r3, [pc, #192]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bba:	4a31      	ldr	r2, [pc, #196]	@ (8005c80 <MX_ADC_Init+0xdc>)
 8005bbc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bc6:	22c0      	movs	r2, #192	@ 0xc0
 8005bc8:	0612      	lsls	r2, r2, #24
 8005bca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005bd8:	4b28      	ldr	r3, [pc, #160]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005bde:	4b27      	ldr	r3, [pc, #156]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005be4:	4b25      	ldr	r3, [pc, #148]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005be6:	2220      	movs	r2, #32
 8005be8:	2100      	movs	r1, #0
 8005bea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005bec:	4b23      	ldr	r3, [pc, #140]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bee:	2221      	movs	r2, #33	@ 0x21
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005bf4:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005bfa:	4b20      	ldr	r3, [pc, #128]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005bfc:	22c2      	movs	r2, #194	@ 0xc2
 8005bfe:	32ff      	adds	r2, #255	@ 0xff
 8005c00:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005c02:	4b1e      	ldr	r3, [pc, #120]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c04:	222c      	movs	r2, #44	@ 0x2c
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005c10:	4b1a      	ldr	r3, [pc, #104]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005c16:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8005c1c:	4b17      	ldr	r3, [pc, #92]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005c22:	4b16      	ldr	r3, [pc, #88]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005c28:	4b14      	ldr	r3, [pc, #80]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f005 fc5c 	bl	800b4e8 <HAL_ADC_Init>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d001      	beq.n	8005c38 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8005c34:	f000 ff5a 	bl	8006aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005c38:	003b      	movs	r3, r7
 8005c3a:	4a12      	ldr	r2, [pc, #72]	@ (8005c84 <MX_ADC_Init+0xe0>)
 8005c3c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005c3e:	003b      	movs	r3, r7
 8005c40:	2280      	movs	r2, #128	@ 0x80
 8005c42:	0152      	lsls	r2, r2, #5
 8005c44:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005c46:	003a      	movs	r2, r7
 8005c48:	4b0c      	ldr	r3, [pc, #48]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c4a:	0011      	movs	r1, r2
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f005 febb 	bl	800b9c8 <HAL_ADC_ConfigChannel>
 8005c52:	1e03      	subs	r3, r0, #0
 8005c54:	d001      	beq.n	8005c5a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8005c56:	f000 ff49 	bl	8006aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005c5a:	003b      	movs	r3, r7
 8005c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005c88 <MX_ADC_Init+0xe4>)
 8005c5e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005c60:	003a      	movs	r2, r7
 8005c62:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <MX_ADC_Init+0xd8>)
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f005 feae 	bl	800b9c8 <HAL_ADC_ConfigChannel>
 8005c6c:	1e03      	subs	r3, r0, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005c70:	f000 ff3c 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005c74:	46c0      	nop			@ (mov r8, r8)
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b002      	add	sp, #8
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000c5c 	.word	0x20000c5c
 8005c80:	40012400 	.word	0x40012400
 8005c84:	38004000 	.word	0x38004000
 8005c88:	3c008000 	.word	0x3c008000

08005c8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b089      	sub	sp, #36	@ 0x24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c94:	240c      	movs	r4, #12
 8005c96:	193b      	adds	r3, r7, r4
 8005c98:	0018      	movs	r0, r3
 8005c9a:	2314      	movs	r3, #20
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	f015 fa20 	bl	801b0e4 <memset>
  if(adcHandle->Instance==ADC1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a14      	ldr	r2, [pc, #80]	@ (8005cfc <HAL_ADC_MspInit+0x70>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d121      	bne.n	8005cf2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005cae:	4b14      	ldr	r3, [pc, #80]	@ (8005d00 <HAL_ADC_MspInit+0x74>)
 8005cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cb2:	4b13      	ldr	r3, [pc, #76]	@ (8005d00 <HAL_ADC_MspInit+0x74>)
 8005cb4:	2180      	movs	r1, #128	@ 0x80
 8005cb6:	0089      	lsls	r1, r1, #2
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cbc:	4b10      	ldr	r3, [pc, #64]	@ (8005d00 <HAL_ADC_MspInit+0x74>)
 8005cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d00 <HAL_ADC_MspInit+0x74>)
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <HAL_ADC_MspInit+0x74>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	2204      	movs	r2, #4
 8005cce:	4013      	ands	r3, r2
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005cd4:	193b      	adds	r3, r7, r4
 8005cd6:	2230      	movs	r2, #48	@ 0x30
 8005cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cda:	193b      	adds	r3, r7, r4
 8005cdc:	2203      	movs	r2, #3
 8005cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce0:	193b      	adds	r3, r7, r4
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ce6:	193b      	adds	r3, r7, r4
 8005ce8:	4a06      	ldr	r2, [pc, #24]	@ (8005d04 <HAL_ADC_MspInit+0x78>)
 8005cea:	0019      	movs	r1, r3
 8005cec:	0010      	movs	r0, r2
 8005cee:	f006 fc73 	bl	800c5d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b009      	add	sp, #36	@ 0x24
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	40012400 	.word	0x40012400
 8005d00:	40021000 	.word	0x40021000
 8005d04:	50000800 	.word	0x50000800

08005d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d0e:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <MX_DMA_Init+0x48>)
 8005d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d12:	4b0f      	ldr	r3, [pc, #60]	@ (8005d50 <MX_DMA_Init+0x48>)
 8005d14:	2101      	movs	r1, #1
 8005d16:	430a      	orrs	r2, r1
 8005d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d50 <MX_DMA_Init+0x48>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4013      	ands	r3, r2
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	200a      	movs	r0, #10
 8005d2c:	f006 f806 	bl	800bd3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005d30:	200a      	movs	r0, #10
 8005d32:	f006 f818 	bl	800bd66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8005d36:	2200      	movs	r2, #0
 8005d38:	2103      	movs	r1, #3
 8005d3a:	200b      	movs	r0, #11
 8005d3c:	f005 fffe 	bl	800bd3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005d40:	200b      	movs	r0, #11
 8005d42:	f006 f810 	bl	800bd66 <HAL_NVIC_EnableIRQ>

}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b002      	add	sp, #8
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	40021000 	.word	0x40021000

08005d54 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d64:	d901      	bls.n	8005d6a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8005d66:	237f      	movs	r3, #127	@ 0x7f
 8005d68:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8005d6a:	2017      	movs	r0, #23
 8005d6c:	183b      	adds	r3, r7, r0
 8005d6e:	490d      	ldr	r1, [pc, #52]	@ (8005da4 <accessLUT10log10+0x50>)
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	188a      	adds	r2, r1, r2
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8005d78:	0001      	movs	r1, r0
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2206      	movs	r2, #6
 8005d80:	4113      	asrs	r3, r2
 8005d82:	001a      	movs	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2106      	movs	r1, #6
 8005d92:	408b      	lsls	r3, r1
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b006      	add	sp, #24
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	0801f088 	.word	0x0801f088

08005da8 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8005da8:	b5b0      	push	{r4, r5, r7, lr}
 8005daa:	b090      	sub	sp, #64	@ 0x40
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6138      	str	r0, [r7, #16]
 8005db0:	6179      	str	r1, [r7, #20]
 8005db2:	60fa      	str	r2, [r7, #12]
 8005db4:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8005db6:	2308      	movs	r3, #8
 8005db8:	001a      	movs	r2, r3
 8005dba:	3a20      	subs	r2, #32
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	db03      	blt.n	8005dc8 <efficient10log10+0x20>
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	4091      	lsls	r1, r2
 8005dc4:	000d      	movs	r5, r1
 8005dc6:	e008      	b.n	8005dda <efficient10log10+0x32>
 8005dc8:	2220      	movs	r2, #32
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	2101      	movs	r1, #1
 8005dce:	40d1      	lsrs	r1, r2
 8005dd0:	000a      	movs	r2, r1
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4099      	lsls	r1, r3
 8005dd6:	000d      	movs	r5, r1
 8005dd8:	4315      	orrs	r5, r2
 8005dda:	2201      	movs	r2, #1
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	0014      	movs	r4, r2
 8005de0:	2201      	movs	r2, #1
 8005de2:	4252      	negs	r2, r2
 8005de4:	17d3      	asrs	r3, r2, #31
 8005de6:	1912      	adds	r2, r2, r4
 8005de8:	416b      	adcs	r3, r5
 8005dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8005dee:	2336      	movs	r3, #54	@ 0x36
 8005df0:	2208      	movs	r2, #8
 8005df2:	189b      	adds	r3, r3, r2
 8005df4:	19db      	adds	r3, r3, r7
 8005df6:	2200      	movs	r2, #0
 8005df8:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8005dfa:	e017      	b.n	8005e2c <efficient10log10+0x84>
    {
        P = P >> 1;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	07db      	lsls	r3, r3, #31
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	0852      	lsrs	r2, r2, #1
 8005e04:	603a      	str	r2, [r7, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	603a      	str	r2, [r7, #0]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	687c      	ldr	r4, [r7, #4]
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	617c      	str	r4, [r7, #20]
        bShift++;
 8005e1a:	2136      	movs	r1, #54	@ 0x36
 8005e1c:	2008      	movs	r0, #8
 8005e1e:	180b      	adds	r3, r1, r0
 8005e20:	19db      	adds	r3, r3, r7
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	180b      	adds	r3, r1, r0
 8005e26:	19db      	adds	r3, r3, r7
 8005e28:	3201      	adds	r2, #1
 8005e2a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d8e3      	bhi.n	8005dfc <efficient10log10+0x54>
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d103      	bne.n	8005e44 <efficient10log10+0x9c>
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d8db      	bhi.n	8005dfc <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	2308      	movs	r3, #8
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	4099      	lsls	r1, r3
 8005e4e:	000b      	movs	r3, r1
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8005e5c:	231c      	movs	r3, #28
 8005e5e:	2408      	movs	r4, #8
 8005e60:	191b      	adds	r3, r3, r4
 8005e62:	19da      	adds	r2, r3, r7
 8005e64:	2320      	movs	r3, #32
 8005e66:	191b      	adds	r3, r3, r4
 8005e68:	19d9      	adds	r1, r3, r7
 8005e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7ff ff71 	bl	8005d54 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8005e72:	2215      	movs	r2, #21
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8005e78:	2036      	movs	r0, #54	@ 0x36
 8005e7a:	1902      	adds	r2, r0, r4
 8005e7c:	19d2      	adds	r2, r2, r7
 8005e7e:	8812      	ldrh	r2, [r2, #0]
 8005e80:	2103      	movs	r1, #3
 8005e82:	434a      	muls	r2, r1
 8005e84:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8005e86:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8005e88:	0021      	movs	r1, r4
 8005e8a:	1843      	adds	r3, r0, r1
 8005e8c:	19db      	adds	r3, r3, r7
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	2201      	movs	r2, #1
 8005e92:	4353      	muls	r3, r2
 8005e94:	2203      	movs	r2, #3
 8005e96:	4113      	asrs	r3, r2
 8005e98:	001a      	movs	r2, r3
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8005e9e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8005ea0:	2314      	movs	r3, #20
 8005ea2:	185b      	adds	r3, r3, r1
 8005ea4:	19da      	adds	r2, r3, r7
 8005ea6:	2318      	movs	r3, #24
 8005ea8:	185b      	adds	r3, r3, r1
 8005eaa:	19db      	adds	r3, r3, r7
 8005eac:	0011      	movs	r1, r2
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 f80a 	bl	8005ec8 <correctIntFracNumber>
    integerPart[0] = intPart;
 8005eb4:	6a3a      	ldr	r2, [r7, #32]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	601a      	str	r2, [r3, #0]
}
 8005ec0:	46c0      	nop			@ (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b010      	add	sp, #64	@ 0x40
 8005ec6:	bdb0      	pop	{r4, r5, r7, pc}

08005ec8 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8005ed2:	e00a      	b.n	8005eea <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3b0a      	subs	r3, #10
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	dcf0      	bgt.n	8005ed4 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8005ef2:	e00a      	b.n	8005f0a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	1e5a      	subs	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330a      	adds	r3, #10
 8005f04:	001a      	movs	r2, r3
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3309      	adds	r3, #9
 8005f10:	dbf0      	blt.n	8005ef4 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da0f      	bge.n	8005f3a <correctIntFracNumber+0x72>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dd0b      	ble.n	8005f3a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3b0a      	subs	r3, #10
 8005f32:	001a      	movs	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8005f38:	e012      	b.n	8005f60 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dd0e      	ble.n	8005f60 <correctIntFracNumber+0x98>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da0a      	bge.n	8005f60 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1e5a      	subs	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330a      	adds	r3, #10
 8005f5a:	001a      	movs	r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	601a      	str	r2, [r3, #0]
}
 8005f60:	46c0      	nop			@ (mov r8, r8)
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b002      	add	sp, #8
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8005f76:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <Gadget_Init+0x40>)
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	f001 f999 	bl	80072b0 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 fe0b 	bl	8006ba0 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f7fd fcd9 	bl	8003944 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005f92:	4a06      	ldr	r2, [pc, #24]	@ (8005fac <Gadget_Init+0x44>)
 8005f94:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <Gadget_Init+0x48>)
 8005f96:	0019      	movs	r1, r3
 8005f98:	2003      	movs	r0, #3
 8005f9a:	f004 feb7 	bl	800ad0c <CreateLine>
}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b004      	add	sp, #16
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	20000028 	.word	0x20000028
 8005fac:	0801e7b8 	.word	0x0801e7b8
 8005fb0:	0801e7cc 	.word	0x0801e7cc

08005fb4 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  Meas_Test();
 8005fb8:	f000 ff2a 	bl	8006e10 <Meas_Test>
}
 8005fbc:	46c0      	nop			@ (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <UpkeepGadget>:

bool UpkeepGadget() {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8005fca:	f001 f8e1 	bl	8007190 <Meas_Upkeep>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	001a      	movs	r2, r3
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006010 <UpkeepGadget+0x4c>)
 8005fd4:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8005fd6:	f000 ffc1 	bl	8006f5c <Mic_Upkeep>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	001a      	movs	r2, r3
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <UpkeepGadget+0x50>)
 8005fe0:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <UpkeepGadget+0x4c>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d103      	bne.n	8005ff2 <UpkeepGadget+0x2e>
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <UpkeepGadget+0x50>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d001      	beq.n	8005ff6 <UpkeepGadget+0x32>
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	e000      	b.n	8005ff8 <UpkeepGadget+0x34>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	2101      	movs	r1, #1
 8006000:	400a      	ands	r2, r1
 8006002:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006004:	1dfb      	adds	r3, r7, #7
 8006006:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006008:	0018      	movs	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000cb8 	.word	0x20000cb8
 8006014:	20000cb9 	.word	0x20000cb9

08006018 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	0011      	movs	r1, r2
 8006028:	0018      	movs	r0, r3
 800602a:	f002 fa7f 	bl	800852c <SGP_Init>
}
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b002      	add	sp, #8
 8006034:	bd80      	pop	{r7, pc}

08006036 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006036:	b580      	push	{r7, lr}
 8006038:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800603a:	f002 fa91 	bl	8008560 <SGP_StartMeasurement>
}
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0018      	movs	r0, r3
 8006050:	f002 faf6 	bl	8008640 <SGP_GetMeasurementValues>
 8006054:	0003      	movs	r3, r0
}
 8006056:	0018      	movs	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	b002      	add	sp, #8
 800605c:	bd80      	pop	{r7, pc}

0800605e <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800605e:	b580      	push	{r7, lr}
 8006060:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8006062:	f002 fd03 	bl	8008a6c <SGP_DeviceConnected>
 8006066:	0003      	movs	r3, r0
}
 8006068:	0018      	movs	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b08b      	sub	sp, #44	@ 0x2c
 8006074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006076:	2414      	movs	r4, #20
 8006078:	193b      	adds	r3, r7, r4
 800607a:	0018      	movs	r0, r3
 800607c:	2314      	movs	r3, #20
 800607e:	001a      	movs	r2, r3
 8006080:	2100      	movs	r1, #0
 8006082:	f015 f82f 	bl	801b0e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006086:	4b7c      	ldr	r3, [pc, #496]	@ (8006278 <MX_GPIO_Init+0x208>)
 8006088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608a:	4b7b      	ldr	r3, [pc, #492]	@ (8006278 <MX_GPIO_Init+0x208>)
 800608c:	2104      	movs	r1, #4
 800608e:	430a      	orrs	r2, r1
 8006090:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006092:	4b79      	ldr	r3, [pc, #484]	@ (8006278 <MX_GPIO_Init+0x208>)
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	2204      	movs	r2, #4
 8006098:	4013      	ands	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800609e:	4b76      	ldr	r3, [pc, #472]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a2:	4b75      	ldr	r3, [pc, #468]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060a4:	2180      	movs	r1, #128	@ 0x80
 80060a6:	430a      	orrs	r2, r1
 80060a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060aa:	4b73      	ldr	r3, [pc, #460]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	2280      	movs	r2, #128	@ 0x80
 80060b0:	4013      	ands	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b6:	4b70      	ldr	r3, [pc, #448]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060bc:	2101      	movs	r1, #1
 80060be:	430a      	orrs	r2, r1
 80060c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c6:	2201      	movs	r2, #1
 80060c8:	4013      	ands	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d2:	4b69      	ldr	r3, [pc, #420]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060d4:	2102      	movs	r1, #2
 80060d6:	430a      	orrs	r2, r1
 80060d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060da:	4b67      	ldr	r3, [pc, #412]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	2202      	movs	r2, #2
 80060e0:	4013      	ands	r3, r2
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80060e6:	4b64      	ldr	r3, [pc, #400]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ea:	4b63      	ldr	r3, [pc, #396]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060ec:	2108      	movs	r1, #8
 80060ee:	430a      	orrs	r2, r1
 80060f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060f2:	4b61      	ldr	r3, [pc, #388]	@ (8006278 <MX_GPIO_Init+0x208>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	2208      	movs	r2, #8
 80060f8:	4013      	ands	r3, r2
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80060fe:	4b5f      	ldr	r3, [pc, #380]	@ (800627c <MX_GPIO_Init+0x20c>)
 8006100:	2201      	movs	r2, #1
 8006102:	2101      	movs	r1, #1
 8006104:	0018      	movs	r0, r3
 8006106:	f006 fc02 	bl	800c90e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800610a:	4b5c      	ldr	r3, [pc, #368]	@ (800627c <MX_GPIO_Init+0x20c>)
 800610c:	2200      	movs	r2, #0
 800610e:	2102      	movs	r1, #2
 8006110:	0018      	movs	r0, r3
 8006112:	f006 fbfc 	bl	800c90e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006116:	495a      	ldr	r1, [pc, #360]	@ (8006280 <MX_GPIO_Init+0x210>)
 8006118:	4b5a      	ldr	r3, [pc, #360]	@ (8006284 <MX_GPIO_Init+0x214>)
 800611a:	2201      	movs	r2, #1
 800611c:	0018      	movs	r0, r3
 800611e:	f006 fbf6 	bl	800c90e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006122:	2380      	movs	r3, #128	@ 0x80
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	4858      	ldr	r0, [pc, #352]	@ (8006288 <MX_GPIO_Init+0x218>)
 8006128:	2201      	movs	r2, #1
 800612a:	0019      	movs	r1, r3
 800612c:	f006 fbef 	bl	800c90e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006130:	2380      	movs	r3, #128	@ 0x80
 8006132:	015b      	lsls	r3, r3, #5
 8006134:	4854      	ldr	r0, [pc, #336]	@ (8006288 <MX_GPIO_Init+0x218>)
 8006136:	2200      	movs	r2, #0
 8006138:	0019      	movs	r1, r3
 800613a:	f006 fbe8 	bl	800c90e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800613e:	193b      	adds	r3, r7, r4
 8006140:	4a52      	ldr	r2, [pc, #328]	@ (800628c <MX_GPIO_Init+0x21c>)
 8006142:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006144:	193b      	adds	r3, r7, r4
 8006146:	2203      	movs	r2, #3
 8006148:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614a:	193b      	adds	r3, r7, r4
 800614c:	2200      	movs	r2, #0
 800614e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006150:	193b      	adds	r3, r7, r4
 8006152:	4a4d      	ldr	r2, [pc, #308]	@ (8006288 <MX_GPIO_Init+0x218>)
 8006154:	0019      	movs	r1, r3
 8006156:	0010      	movs	r0, r2
 8006158:	f006 fa3e 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800615c:	193b      	adds	r3, r7, r4
 800615e:	2203      	movs	r2, #3
 8006160:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006162:	193b      	adds	r3, r7, r4
 8006164:	2201      	movs	r2, #1
 8006166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006168:	193b      	adds	r3, r7, r4
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616e:	193b      	adds	r3, r7, r4
 8006170:	2200      	movs	r2, #0
 8006172:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006174:	193b      	adds	r3, r7, r4
 8006176:	4a41      	ldr	r2, [pc, #260]	@ (800627c <MX_GPIO_Init+0x20c>)
 8006178:	0019      	movs	r1, r3
 800617a:	0010      	movs	r0, r2
 800617c:	f006 fa2c 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006180:	193b      	adds	r3, r7, r4
 8006182:	2270      	movs	r2, #112	@ 0x70
 8006184:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006186:	193b      	adds	r3, r7, r4
 8006188:	2203      	movs	r2, #3
 800618a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618c:	193b      	adds	r3, r7, r4
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006192:	193a      	adds	r2, r7, r4
 8006194:	23a0      	movs	r3, #160	@ 0xa0
 8006196:	05db      	lsls	r3, r3, #23
 8006198:	0011      	movs	r1, r2
 800619a:	0018      	movs	r0, r3
 800619c:	f006 fa1c 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 80061a0:	193b      	adds	r3, r7, r4
 80061a2:	4a3b      	ldr	r2, [pc, #236]	@ (8006290 <MX_GPIO_Init+0x220>)
 80061a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061a6:	193b      	adds	r3, r7, r4
 80061a8:	2200      	movs	r2, #0
 80061aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ac:	193b      	adds	r3, r7, r4
 80061ae:	2200      	movs	r2, #0
 80061b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061b2:	193a      	adds	r2, r7, r4
 80061b4:	23a0      	movs	r3, #160	@ 0xa0
 80061b6:	05db      	lsls	r3, r3, #23
 80061b8:	0011      	movs	r1, r2
 80061ba:	0018      	movs	r0, r3
 80061bc:	f006 fa0c 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80061c0:	193b      	adds	r3, r7, r4
 80061c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006280 <MX_GPIO_Init+0x210>)
 80061c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061c6:	193b      	adds	r3, r7, r4
 80061c8:	2201      	movs	r2, #1
 80061ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061cc:	193b      	adds	r3, r7, r4
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061d2:	193b      	adds	r3, r7, r4
 80061d4:	2200      	movs	r2, #0
 80061d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d8:	193b      	adds	r3, r7, r4
 80061da:	4a2a      	ldr	r2, [pc, #168]	@ (8006284 <MX_GPIO_Init+0x214>)
 80061dc:	0019      	movs	r1, r3
 80061de:	0010      	movs	r0, r2
 80061e0:	f006 f9fa 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80061e4:	193b      	adds	r3, r7, r4
 80061e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006294 <MX_GPIO_Init+0x224>)
 80061e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061ea:	193b      	adds	r3, r7, r4
 80061ec:	2203      	movs	r2, #3
 80061ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	193b      	adds	r3, r7, r4
 80061f2:	2200      	movs	r2, #0
 80061f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f6:	193b      	adds	r3, r7, r4
 80061f8:	4a22      	ldr	r2, [pc, #136]	@ (8006284 <MX_GPIO_Init+0x214>)
 80061fa:	0019      	movs	r1, r3
 80061fc:	0010      	movs	r0, r2
 80061fe:	f006 f9eb 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006202:	0021      	movs	r1, r4
 8006204:	187b      	adds	r3, r7, r1
 8006206:	2280      	movs	r2, #128	@ 0x80
 8006208:	0092      	lsls	r2, r2, #2
 800620a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800620c:	000c      	movs	r4, r1
 800620e:	193b      	adds	r3, r7, r4
 8006210:	2200      	movs	r2, #0
 8006212:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006214:	193b      	adds	r3, r7, r4
 8006216:	2200      	movs	r2, #0
 8006218:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800621a:	193b      	adds	r3, r7, r4
 800621c:	4a1a      	ldr	r2, [pc, #104]	@ (8006288 <MX_GPIO_Init+0x218>)
 800621e:	0019      	movs	r1, r3
 8006220:	0010      	movs	r0, r2
 8006222:	f006 f9d9 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006226:	0021      	movs	r1, r4
 8006228:	187b      	adds	r3, r7, r1
 800622a:	22c0      	movs	r2, #192	@ 0xc0
 800622c:	0152      	lsls	r2, r2, #5
 800622e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006230:	000c      	movs	r4, r1
 8006232:	193b      	adds	r3, r7, r4
 8006234:	2201      	movs	r2, #1
 8006236:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006238:	193b      	adds	r3, r7, r4
 800623a:	2200      	movs	r2, #0
 800623c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800623e:	193b      	adds	r3, r7, r4
 8006240:	2200      	movs	r2, #0
 8006242:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006244:	193b      	adds	r3, r7, r4
 8006246:	4a10      	ldr	r2, [pc, #64]	@ (8006288 <MX_GPIO_Init+0x218>)
 8006248:	0019      	movs	r1, r3
 800624a:	0010      	movs	r0, r2
 800624c:	f006 f9c4 	bl	800c5d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006250:	0021      	movs	r1, r4
 8006252:	187b      	adds	r3, r7, r1
 8006254:	2204      	movs	r2, #4
 8006256:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006258:	187b      	adds	r3, r7, r1
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800625e:	187b      	adds	r3, r7, r1
 8006260:	2201      	movs	r2, #1
 8006262:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006264:	187b      	adds	r3, r7, r1
 8006266:	4a0c      	ldr	r2, [pc, #48]	@ (8006298 <MX_GPIO_Init+0x228>)
 8006268:	0019      	movs	r1, r3
 800626a:	0010      	movs	r0, r2
 800626c:	f006 f9b4 	bl	800c5d8 <HAL_GPIO_Init>

}
 8006270:	46c0      	nop			@ (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	b00b      	add	sp, #44	@ 0x2c
 8006276:	bd90      	pop	{r4, r7, pc}
 8006278:	40021000 	.word	0x40021000
 800627c:	50001c00 	.word	0x50001c00
 8006280:	00000301 	.word	0x00000301
 8006284:	50000400 	.word	0x50000400
 8006288:	50000800 	.word	0x50000800
 800628c:	0000200c 	.word	0x0000200c
 8006290:	00008180 	.word	0x00008180
 8006294:	0000403e 	.word	0x0000403e
 8006298:	50000c00 	.word	0x50000c00

0800629c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2100      	movs	r1, #0
 80062aa:	0018      	movs	r0, r3
 80062ac:	f00b ffb6 	bl	801221c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2108      	movs	r1, #8
 80062b4:	0018      	movs	r0, r3
 80062b6:	f00b ffb1 	bl	801221c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	210c      	movs	r1, #12
 80062be:	0018      	movs	r0, r3
 80062c0:	f00b ffac 	bl	801221c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	05db      	lsls	r3, r3, #23
 80062c8:	22fa      	movs	r2, #250	@ 0xfa
 80062ca:	0112      	lsls	r2, r2, #4
 80062cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80062ce:	2380      	movs	r3, #128	@ 0x80
 80062d0:	05db      	lsls	r3, r3, #23
 80062d2:	22fa      	movs	r2, #250	@ 0xfa
 80062d4:	0112      	lsls	r2, r2, #4
 80062d6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80062d8:	2380      	movs	r3, #128	@ 0x80
 80062da:	05db      	lsls	r3, r3, #23
 80062dc:	22fa      	movs	r2, #250	@ 0xfa
 80062de:	0112      	lsls	r2, r2, #4
 80062e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80062e2:	2380      	movs	r3, #128	@ 0x80
 80062e4:	05db      	lsls	r3, r3, #23
 80062e6:	22fa      	movs	r2, #250	@ 0xfa
 80062e8:	0112      	lsls	r2, r2, #4
 80062ea:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2100      	movs	r1, #0
 80062f0:	0018      	movs	r0, r3
 80062f2:	f00b ff93 	bl	801221c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2104      	movs	r1, #4
 80062fa:	0018      	movs	r0, r3
 80062fc:	f00b ff8e 	bl	801221c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2108      	movs	r1, #8
 8006304:	0018      	movs	r0, r3
 8006306:	f00b ff89 	bl	801221c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800630a:	4b0a      	ldr	r3, [pc, #40]	@ (8006334 <GPIO_InitPWMLEDs+0x98>)
 800630c:	22fa      	movs	r2, #250	@ 0xfa
 800630e:	0112      	lsls	r2, r2, #4
 8006310:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006312:	4b08      	ldr	r3, [pc, #32]	@ (8006334 <GPIO_InitPWMLEDs+0x98>)
 8006314:	22fa      	movs	r2, #250	@ 0xfa
 8006316:	0112      	lsls	r2, r2, #4
 8006318:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800631a:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <GPIO_InitPWMLEDs+0x98>)
 800631c:	22fa      	movs	r2, #250	@ 0xfa
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006322:	4b04      	ldr	r3, [pc, #16]	@ (8006334 <GPIO_InitPWMLEDs+0x98>)
 8006324:	22fa      	movs	r2, #250	@ 0xfa
 8006326:	0112      	lsls	r2, r2, #4
 8006328:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	46bd      	mov	sp, r7
 800632e:	b002      	add	sp, #8
 8006330:	bd80      	pop	{r7, pc}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	40000400 	.word	0x40000400

08006338 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	0011      	movs	r1, r2
 8006348:	0018      	movs	r0, r3
 800634a:	f004 fe37 	bl	800afbc <HIDS_Init>
}
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	46bd      	mov	sp, r7
 8006352:	b002      	add	sp, #8
 8006354:	bd80      	pop	{r7, pc}

08006356 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006356:	b580      	push	{r7, lr}
 8006358:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800635a:	f004 fe51 	bl	800b000 <HIDS_StartMeasurement>
}
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	0011      	movs	r1, r2
 8006374:	0018      	movs	r0, r3
 8006376:	f004 ff29 	bl	800b1cc <HIDS_GetMeasurementValues>
 800637a:	0003      	movs	r3, r0
}
 800637c:	0018      	movs	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	b002      	add	sp, #8
 8006382:	bd80      	pop	{r7, pc}

08006384 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006388:	f004 fec4 	bl	800b114 <HIDS_DeviceConnected>
 800638c:	0003      	movs	r3, r0
}
 800638e:	0018      	movs	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006398:	4b1b      	ldr	r3, [pc, #108]	@ (8006408 <MX_I2C1_Init+0x74>)
 800639a:	4a1c      	ldr	r2, [pc, #112]	@ (800640c <MX_I2C1_Init+0x78>)
 800639c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800639e:	4b1a      	ldr	r3, [pc, #104]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006410 <MX_I2C1_Init+0x7c>)
 80063a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80063a4:	4b18      	ldr	r3, [pc, #96]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063aa:	4b17      	ldr	r3, [pc, #92]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063ac:	2201      	movs	r2, #1
 80063ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063b0:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80063b6:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80063bc:	4b12      	ldr	r3, [pc, #72]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063be:	2200      	movs	r2, #0
 80063c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063c2:	4b11      	ldr	r3, [pc, #68]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063d0:	0018      	movs	r0, r3
 80063d2:	f006 fab9 	bl	800c948 <HAL_I2C_Init>
 80063d6:	1e03      	subs	r3, r0, #0
 80063d8:	d001      	beq.n	80063de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80063da:	f000 fb87 	bl	8006aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80063de:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063e0:	2100      	movs	r1, #0
 80063e2:	0018      	movs	r0, r3
 80063e4:	f008 fa28 	bl	800e838 <HAL_I2CEx_ConfigAnalogFilter>
 80063e8:	1e03      	subs	r3, r0, #0
 80063ea:	d001      	beq.n	80063f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80063ec:	f000 fb7e 	bl	8006aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <MX_I2C1_Init+0x74>)
 80063f2:	2100      	movs	r1, #0
 80063f4:	0018      	movs	r0, r3
 80063f6:	f008 fa6b 	bl	800e8d0 <HAL_I2CEx_ConfigDigitalFilter>
 80063fa:	1e03      	subs	r3, r0, #0
 80063fc:	d001      	beq.n	8006402 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80063fe:	f000 fb75 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000cbc 	.word	0x20000cbc
 800640c:	40005400 	.word	0x40005400
 8006410:	00503d58 	.word	0x00503d58

08006414 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006418:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <MX_I2C2_Init+0x74>)
 800641a:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <MX_I2C2_Init+0x78>)
 800641c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800641e:	4b1a      	ldr	r3, [pc, #104]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006420:	4a1b      	ldr	r2, [pc, #108]	@ (8006490 <MX_I2C2_Init+0x7c>)
 8006422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006424:	4b18      	ldr	r3, [pc, #96]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800642a:	4b17      	ldr	r3, [pc, #92]	@ (8006488 <MX_I2C2_Init+0x74>)
 800642c:	2201      	movs	r2, #1
 800642e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006430:	4b15      	ldr	r3, [pc, #84]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006432:	2200      	movs	r2, #0
 8006434:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006436:	4b14      	ldr	r3, [pc, #80]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006438:	2200      	movs	r2, #0
 800643a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800643c:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <MX_I2C2_Init+0x74>)
 800643e:	2200      	movs	r2, #0
 8006440:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006442:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006444:	2200      	movs	r2, #0
 8006446:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006448:	4b0f      	ldr	r3, [pc, #60]	@ (8006488 <MX_I2C2_Init+0x74>)
 800644a:	2200      	movs	r2, #0
 800644c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800644e:	4b0e      	ldr	r3, [pc, #56]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006450:	0018      	movs	r0, r3
 8006452:	f006 fa79 	bl	800c948 <HAL_I2C_Init>
 8006456:	1e03      	subs	r3, r0, #0
 8006458:	d001      	beq.n	800645e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800645a:	f000 fb47 	bl	8006aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800645e:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006460:	2100      	movs	r1, #0
 8006462:	0018      	movs	r0, r3
 8006464:	f008 f9e8 	bl	800e838 <HAL_I2CEx_ConfigAnalogFilter>
 8006468:	1e03      	subs	r3, r0, #0
 800646a:	d001      	beq.n	8006470 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800646c:	f000 fb3e 	bl	8006aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006470:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <MX_I2C2_Init+0x74>)
 8006472:	2100      	movs	r1, #0
 8006474:	0018      	movs	r0, r3
 8006476:	f008 fa2b 	bl	800e8d0 <HAL_I2CEx_ConfigDigitalFilter>
 800647a:	1e03      	subs	r3, r0, #0
 800647c:	d001      	beq.n	8006482 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800647e:	f000 fb35 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000d10 	.word	0x20000d10
 800648c:	40005800 	.word	0x40005800
 8006490:	00503d58 	.word	0x00503d58

08006494 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006494:	b590      	push	{r4, r7, lr}
 8006496:	b08b      	sub	sp, #44	@ 0x2c
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800649c:	2414      	movs	r4, #20
 800649e:	193b      	adds	r3, r7, r4
 80064a0:	0018      	movs	r0, r3
 80064a2:	2314      	movs	r3, #20
 80064a4:	001a      	movs	r2, r3
 80064a6:	2100      	movs	r1, #0
 80064a8:	f014 fe1c 	bl	801b0e4 <memset>
  if(i2cHandle->Instance==I2C1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006628 <HAL_I2C_MspInit+0x194>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d000      	beq.n	80064b8 <HAL_I2C_MspInit+0x24>
 80064b6:	e083      	b.n	80065c0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b8:	4b5c      	ldr	r3, [pc, #368]	@ (800662c <HAL_I2C_MspInit+0x198>)
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	4b5b      	ldr	r3, [pc, #364]	@ (800662c <HAL_I2C_MspInit+0x198>)
 80064be:	2102      	movs	r1, #2
 80064c0:	430a      	orrs	r2, r1
 80064c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064c4:	4b59      	ldr	r3, [pc, #356]	@ (800662c <HAL_I2C_MspInit+0x198>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	2202      	movs	r2, #2
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064d0:	0021      	movs	r1, r4
 80064d2:	187b      	adds	r3, r7, r1
 80064d4:	22c0      	movs	r2, #192	@ 0xc0
 80064d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064d8:	187b      	adds	r3, r7, r1
 80064da:	2212      	movs	r2, #18
 80064dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064de:	187b      	adds	r3, r7, r1
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e4:	187b      	adds	r3, r7, r1
 80064e6:	2203      	movs	r2, #3
 80064e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80064ea:	187b      	adds	r3, r7, r1
 80064ec:	2201      	movs	r2, #1
 80064ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f0:	187b      	adds	r3, r7, r1
 80064f2:	4a4f      	ldr	r2, [pc, #316]	@ (8006630 <HAL_I2C_MspInit+0x19c>)
 80064f4:	0019      	movs	r1, r3
 80064f6:	0010      	movs	r0, r2
 80064f8:	f006 f86e 	bl	800c5d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80064fc:	4b4b      	ldr	r3, [pc, #300]	@ (800662c <HAL_I2C_MspInit+0x198>)
 80064fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006500:	4b4a      	ldr	r3, [pc, #296]	@ (800662c <HAL_I2C_MspInit+0x198>)
 8006502:	2180      	movs	r1, #128	@ 0x80
 8006504:	0389      	lsls	r1, r1, #14
 8006506:	430a      	orrs	r2, r1
 8006508:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800650a:	4b4a      	ldr	r3, [pc, #296]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 800650c:	4a4a      	ldr	r2, [pc, #296]	@ (8006638 <HAL_I2C_MspInit+0x1a4>)
 800650e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006510:	4b48      	ldr	r3, [pc, #288]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006512:	2206      	movs	r2, #6
 8006514:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006516:	4b47      	ldr	r3, [pc, #284]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006518:	2200      	movs	r2, #0
 800651a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800651c:	4b45      	ldr	r3, [pc, #276]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 800651e:	2200      	movs	r2, #0
 8006520:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006522:	4b44      	ldr	r3, [pc, #272]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006524:	2280      	movs	r2, #128	@ 0x80
 8006526:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006528:	4b42      	ldr	r3, [pc, #264]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 800652a:	2200      	movs	r2, #0
 800652c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800652e:	4b41      	ldr	r3, [pc, #260]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006530:	2200      	movs	r2, #0
 8006532:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006534:	4b3f      	ldr	r3, [pc, #252]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006536:	2200      	movs	r2, #0
 8006538:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800653a:	4b3e      	ldr	r3, [pc, #248]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 800653c:	2200      	movs	r2, #0
 800653e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006540:	4b3c      	ldr	r3, [pc, #240]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006542:	0018      	movs	r0, r3
 8006544:	f005 fc2c 	bl	800bda0 <HAL_DMA_Init>
 8006548:	1e03      	subs	r3, r0, #0
 800654a:	d001      	beq.n	8006550 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800654c:	f000 face 	bl	8006aec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006554:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006556:	4b37      	ldr	r3, [pc, #220]	@ (8006634 <HAL_I2C_MspInit+0x1a0>)
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800655c:	4b37      	ldr	r3, [pc, #220]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 800655e:	4a38      	ldr	r2, [pc, #224]	@ (8006640 <HAL_I2C_MspInit+0x1ac>)
 8006560:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006562:	4b36      	ldr	r3, [pc, #216]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 8006564:	2206      	movs	r2, #6
 8006566:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006568:	4b34      	ldr	r3, [pc, #208]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 800656a:	2210      	movs	r2, #16
 800656c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800656e:	4b33      	ldr	r3, [pc, #204]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 8006570:	2200      	movs	r2, #0
 8006572:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006574:	4b31      	ldr	r3, [pc, #196]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 8006576:	2280      	movs	r2, #128	@ 0x80
 8006578:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800657a:	4b30      	ldr	r3, [pc, #192]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 800657c:	2200      	movs	r2, #0
 800657e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006580:	4b2e      	ldr	r3, [pc, #184]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 8006582:	2200      	movs	r2, #0
 8006584:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006586:	4b2d      	ldr	r3, [pc, #180]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 8006588:	2200      	movs	r2, #0
 800658a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800658c:	4b2b      	ldr	r3, [pc, #172]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 800658e:	2200      	movs	r2, #0
 8006590:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006592:	4b2a      	ldr	r3, [pc, #168]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 8006594:	0018      	movs	r0, r3
 8006596:	f005 fc03 	bl	800bda0 <HAL_DMA_Init>
 800659a:	1e03      	subs	r3, r0, #0
 800659c:	d001      	beq.n	80065a2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800659e:	f000 faa5 	bl	8006aec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a25      	ldr	r2, [pc, #148]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80065a8:	4b24      	ldr	r3, [pc, #144]	@ (800663c <HAL_I2C_MspInit+0x1a8>)
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80065ae:	2200      	movs	r2, #0
 80065b0:	2100      	movs	r1, #0
 80065b2:	2017      	movs	r0, #23
 80065b4:	f005 fbc2 	bl	800bd3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80065b8:	2017      	movs	r0, #23
 80065ba:	f005 fbd4 	bl	800bd66 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80065be:	e02e      	b.n	800661e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006644 <HAL_I2C_MspInit+0x1b0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d129      	bne.n	800661e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ca:	4b18      	ldr	r3, [pc, #96]	@ (800662c <HAL_I2C_MspInit+0x198>)
 80065cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ce:	4b17      	ldr	r3, [pc, #92]	@ (800662c <HAL_I2C_MspInit+0x198>)
 80065d0:	2102      	movs	r1, #2
 80065d2:	430a      	orrs	r2, r1
 80065d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80065d6:	4b15      	ldr	r3, [pc, #84]	@ (800662c <HAL_I2C_MspInit+0x198>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	2202      	movs	r2, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80065e2:	2114      	movs	r1, #20
 80065e4:	187b      	adds	r3, r7, r1
 80065e6:	22c0      	movs	r2, #192	@ 0xc0
 80065e8:	0112      	lsls	r2, r2, #4
 80065ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	2212      	movs	r2, #18
 80065f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f2:	187b      	adds	r3, r7, r1
 80065f4:	2200      	movs	r2, #0
 80065f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	2203      	movs	r2, #3
 80065fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80065fe:	187b      	adds	r3, r7, r1
 8006600:	2206      	movs	r2, #6
 8006602:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006604:	187b      	adds	r3, r7, r1
 8006606:	4a0a      	ldr	r2, [pc, #40]	@ (8006630 <HAL_I2C_MspInit+0x19c>)
 8006608:	0019      	movs	r1, r3
 800660a:	0010      	movs	r0, r2
 800660c:	f005 ffe4 	bl	800c5d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006610:	4b06      	ldr	r3, [pc, #24]	@ (800662c <HAL_I2C_MspInit+0x198>)
 8006612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006614:	4b05      	ldr	r3, [pc, #20]	@ (800662c <HAL_I2C_MspInit+0x198>)
 8006616:	2180      	movs	r1, #128	@ 0x80
 8006618:	03c9      	lsls	r1, r1, #15
 800661a:	430a      	orrs	r2, r1
 800661c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b00b      	add	sp, #44	@ 0x2c
 8006624:	bd90      	pop	{r4, r7, pc}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	40005400 	.word	0x40005400
 800662c:	40021000 	.word	0x40021000
 8006630:	50000400 	.word	0x50000400
 8006634:	20000d64 	.word	0x20000d64
 8006638:	40020030 	.word	0x40020030
 800663c:	20000dac 	.word	0x20000dac
 8006640:	4002001c 	.word	0x4002001c
 8006644:	40005800 	.word	0x40005800

08006648 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800664c:	4b10      	ldr	r3, [pc, #64]	@ (8006690 <MX_I2S2_Init+0x48>)
 800664e:	4a11      	ldr	r2, [pc, #68]	@ (8006694 <MX_I2S2_Init+0x4c>)
 8006650:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8006652:	4b0f      	ldr	r3, [pc, #60]	@ (8006690 <MX_I2S2_Init+0x48>)
 8006654:	22c0      	movs	r2, #192	@ 0xc0
 8006656:	0092      	lsls	r2, r2, #2
 8006658:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800665a:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <MX_I2S2_Init+0x48>)
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8006660:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <MX_I2S2_Init+0x48>)
 8006662:	2203      	movs	r2, #3
 8006664:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006666:	4b0a      	ldr	r3, [pc, #40]	@ (8006690 <MX_I2S2_Init+0x48>)
 8006668:	2200      	movs	r2, #0
 800666a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800666c:	4b08      	ldr	r3, [pc, #32]	@ (8006690 <MX_I2S2_Init+0x48>)
 800666e:	22fa      	movs	r2, #250	@ 0xfa
 8006670:	0192      	lsls	r2, r2, #6
 8006672:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8006674:	4b06      	ldr	r3, [pc, #24]	@ (8006690 <MX_I2S2_Init+0x48>)
 8006676:	2200      	movs	r2, #0
 8006678:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800667a:	4b05      	ldr	r3, [pc, #20]	@ (8006690 <MX_I2S2_Init+0x48>)
 800667c:	0018      	movs	r0, r3
 800667e:	f008 f973 	bl	800e968 <HAL_I2S_Init>
 8006682:	1e03      	subs	r3, r0, #0
 8006684:	d001      	beq.n	800668a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8006686:	f000 fa31 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800668a:	46c0      	nop			@ (mov r8, r8)
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000df4 	.word	0x20000df4
 8006694:	40003800 	.word	0x40003800

08006698 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b089      	sub	sp, #36	@ 0x24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a0:	240c      	movs	r4, #12
 80066a2:	193b      	adds	r3, r7, r4
 80066a4:	0018      	movs	r0, r3
 80066a6:	2314      	movs	r3, #20
 80066a8:	001a      	movs	r2, r3
 80066aa:	2100      	movs	r1, #0
 80066ac:	f014 fd1a 	bl	801b0e4 <memset>
  if(i2sHandle->Instance==SPI2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2d      	ldr	r2, [pc, #180]	@ (800676c <HAL_I2S_MspInit+0xd4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d154      	bne.n	8006764 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006770 <HAL_I2S_MspInit+0xd8>)
 80066bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066be:	4b2c      	ldr	r3, [pc, #176]	@ (8006770 <HAL_I2S_MspInit+0xd8>)
 80066c0:	2180      	movs	r1, #128	@ 0x80
 80066c2:	01c9      	lsls	r1, r1, #7
 80066c4:	430a      	orrs	r2, r1
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066c8:	4b29      	ldr	r3, [pc, #164]	@ (8006770 <HAL_I2S_MspInit+0xd8>)
 80066ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066cc:	4b28      	ldr	r3, [pc, #160]	@ (8006770 <HAL_I2S_MspInit+0xd8>)
 80066ce:	2102      	movs	r1, #2
 80066d0:	430a      	orrs	r2, r1
 80066d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80066d4:	4b26      	ldr	r3, [pc, #152]	@ (8006770 <HAL_I2S_MspInit+0xd8>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	2202      	movs	r2, #2
 80066da:	4013      	ands	r3, r2
 80066dc:	60bb      	str	r3, [r7, #8]
 80066de:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80066e0:	193b      	adds	r3, r7, r4
 80066e2:	22b0      	movs	r2, #176	@ 0xb0
 80066e4:	0212      	lsls	r2, r2, #8
 80066e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e8:	0021      	movs	r1, r4
 80066ea:	187b      	adds	r3, r7, r1
 80066ec:	2202      	movs	r2, #2
 80066ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f0:	187b      	adds	r3, r7, r1
 80066f2:	2200      	movs	r2, #0
 80066f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f6:	187b      	adds	r3, r7, r1
 80066f8:	2200      	movs	r2, #0
 80066fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80066fc:	187b      	adds	r3, r7, r1
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006702:	187b      	adds	r3, r7, r1
 8006704:	4a1b      	ldr	r2, [pc, #108]	@ (8006774 <HAL_I2S_MspInit+0xdc>)
 8006706:	0019      	movs	r1, r3
 8006708:	0010      	movs	r0, r2
 800670a:	f005 ff65 	bl	800c5d8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800670e:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 8006710:	4a1a      	ldr	r2, [pc, #104]	@ (800677c <HAL_I2S_MspInit+0xe4>)
 8006712:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006714:	4b18      	ldr	r3, [pc, #96]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 8006716:	2202      	movs	r2, #2
 8006718:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800671a:	4b17      	ldr	r3, [pc, #92]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 800671c:	2200      	movs	r2, #0
 800671e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006720:	4b15      	ldr	r3, [pc, #84]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 8006722:	2200      	movs	r2, #0
 8006724:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006726:	4b14      	ldr	r3, [pc, #80]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 8006728:	2280      	movs	r2, #128	@ 0x80
 800672a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800672c:	4b12      	ldr	r3, [pc, #72]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 800672e:	2280      	movs	r2, #128	@ 0x80
 8006730:	0052      	lsls	r2, r2, #1
 8006732:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006734:	4b10      	ldr	r3, [pc, #64]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 8006736:	2280      	movs	r2, #128	@ 0x80
 8006738:	00d2      	lsls	r2, r2, #3
 800673a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800673c:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 800673e:	2220      	movs	r2, #32
 8006740:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006742:	4b0d      	ldr	r3, [pc, #52]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 8006744:	2200      	movs	r2, #0
 8006746:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006748:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 800674a:	0018      	movs	r0, r3
 800674c:	f005 fb28 	bl	800bda0 <HAL_DMA_Init>
 8006750:	1e03      	subs	r3, r0, #0
 8006752:	d001      	beq.n	8006758 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006754:	f000 f9ca 	bl	8006aec <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a07      	ldr	r2, [pc, #28]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 800675c:	631a      	str	r2, [r3, #48]	@ 0x30
 800675e:	4b06      	ldr	r3, [pc, #24]	@ (8006778 <HAL_I2S_MspInit+0xe0>)
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006764:	46c0      	nop			@ (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b009      	add	sp, #36	@ 0x24
 800676a:	bd90      	pop	{r4, r7, pc}
 800676c:	40003800 	.word	0x40003800
 8006770:	40021000 	.word	0x40021000
 8006774:	50000400 	.word	0x50000400
 8006778:	20000e30 	.word	0x20000e30
 800677c:	40020044 	.word	0x40020044

08006780 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  testDone = true;
 8006784:	4b1e      	ldr	r3, [pc, #120]	@ (8006800 <SetTestDone+0x80>)
 8006786:	2201      	movs	r2, #1
 8006788:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 800678a:	23fa      	movs	r3, #250	@ 0xfa
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	0018      	movs	r0, r3
 8006790:	f004 fe68 	bl	800b464 <HAL_Delay>
  SetDBLED(false, false, true);
 8006794:	2201      	movs	r2, #1
 8006796:	2100      	movs	r1, #0
 8006798:	2000      	movs	r0, #0
 800679a:	f003 fb61 	bl	8009e60 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 800679e:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <SetTestDone+0x84>)
 80067a0:	23fa      	movs	r3, #250	@ 0xfa
 80067a2:	0119      	lsls	r1, r3, #4
 80067a4:	23fa      	movs	r3, #250	@ 0xfa
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	0018      	movs	r0, r3
 80067aa:	f003 fb25 	bl	8009df8 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <SetTestDone+0x84>)
 80067b0:	23fa      	movs	r3, #250	@ 0xfa
 80067b2:	0119      	lsls	r1, r3, #4
 80067b4:	23fa      	movs	r3, #250	@ 0xfa
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	0018      	movs	r0, r3
 80067ba:	f003 fb9b 	bl	8009ef4 <SetVocLED>
  HAL_Delay(1000);
 80067be:	23fa      	movs	r3, #250	@ 0xfa
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	0018      	movs	r0, r3
 80067c4:	f004 fe4e 	bl	800b464 <HAL_Delay>
  SetDBLED(false, false, false);
 80067c8:	2200      	movs	r2, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	2000      	movs	r0, #0
 80067ce:	f003 fb47 	bl	8009e60 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 80067d2:	23fa      	movs	r3, #250	@ 0xfa
 80067d4:	011a      	lsls	r2, r3, #4
 80067d6:	23fa      	movs	r3, #250	@ 0xfa
 80067d8:	0119      	lsls	r1, r3, #4
 80067da:	23fa      	movs	r3, #250	@ 0xfa
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	0018      	movs	r0, r3
 80067e0:	f003 fb0a 	bl	8009df8 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 80067e4:	23fa      	movs	r3, #250	@ 0xfa
 80067e6:	011a      	lsls	r2, r3, #4
 80067e8:	23fa      	movs	r3, #250	@ 0xfa
 80067ea:	0119      	lsls	r1, r3, #4
 80067ec:	23fa      	movs	r3, #250	@ 0xfa
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	0018      	movs	r0, r3
 80067f2:	f003 fb7f 	bl	8009ef4 <SetVocLED>
  InitDone();
 80067f6:	f003 faa9 	bl	8009d4c <InitDone>
}
 80067fa:	46c0      	nop			@ (mov r8, r8)
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000e78 	.word	0x20000e78
 8006804:	00000bb8 	.word	0x00000bb8

08006808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800680c:	f004 fdba 	bl	800b384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006810:	f000 f8ce 	bl	80069b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006814:	f7ff fc2c 	bl	8006070 <MX_GPIO_Init>
  MX_DMA_Init();
 8006818:	f7ff fa76 	bl	8005d08 <MX_DMA_Init>
  MX_I2C1_Init();
 800681c:	f7ff fdba 	bl	8006394 <MX_I2C1_Init>
  MX_I2S2_Init();
 8006820:	f7ff ff12 	bl	8006648 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8006824:	f004 f888 	bl	800a938 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8006828:	f7ff fdf4 	bl	8006414 <MX_I2C2_Init>
  MX_TIM2_Init();
 800682c:	f003 fe7c 	bl	800a528 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006830:	f003 feee 	bl	800a610 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8006834:	f004 f8b4 	bl	800a9a0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8006838:	f7ff f9b4 	bl	8005ba4 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800683c:	f011 fafc 	bl	8017e38 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006840:	f000 ff02 	bl	8007648 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8006844:	f004 f842 	bl	800a8cc <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8006848:	f003 ff60 	bl	800a70c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800684c:	4a45      	ldr	r2, [pc, #276]	@ (8006964 <main+0x15c>)
 800684e:	4b46      	ldr	r3, [pc, #280]	@ (8006968 <main+0x160>)
 8006850:	0011      	movs	r1, r2
 8006852:	0018      	movs	r0, r3
 8006854:	f7ff fd22 	bl	800629c <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8006858:	f7ff f942 	bl	8005ae0 <UserButton_Pressed>
 800685c:	1e03      	subs	r3, r0, #0
 800685e:	d004      	beq.n	800686a <main+0x62>
    EnableESPProg();
 8006860:	f011 fbba 	bl	8017fd8 <EnableESPProg>
    ESP_Programming = true;
 8006864:	4b41      	ldr	r3, [pc, #260]	@ (800696c <main+0x164>)
 8006866:	2201      	movs	r2, #1
 8006868:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800686a:	2003      	movs	r0, #3
 800686c:	f004 fab0 	bl	800add0 <SetVerboseLevel>
  BinaryReleaseInfo();
 8006870:	f004 fac6 	bl	800ae00 <BinaryReleaseInfo>
  InitClock(&hrtc);
 8006874:	4b3e      	ldr	r3, [pc, #248]	@ (8006970 <main+0x168>)
 8006876:	0018      	movs	r0, r3
 8006878:	f7ff f97a 	bl	8005b70 <InitClock>
  //===========
  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 800687c:	4a3d      	ldr	r2, [pc, #244]	@ (8006974 <main+0x16c>)
 800687e:	493e      	ldr	r1, [pc, #248]	@ (8006978 <main+0x170>)
 8006880:	483e      	ldr	r0, [pc, #248]	@ (800697c <main+0x174>)
 8006882:	230b      	movs	r3, #11
 8006884:	f002 fbec 	bl	8009060 <soundInit>
 8006888:	0003      	movs	r3, r0
 800688a:	001a      	movs	r2, r3
 800688c:	2301      	movs	r3, #1
 800688e:	4053      	eors	r3, r2
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <main+0x9a>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 8006896:	4a3a      	ldr	r2, [pc, #232]	@ (8006980 <main+0x178>)
 8006898:	4b3a      	ldr	r3, [pc, #232]	@ (8006984 <main+0x17c>)
 800689a:	21d4      	movs	r1, #212	@ 0xd4
 800689c:	0018      	movs	r0, r3
 800689e:	f004 fae1 	bl	800ae64 <errorHandler>
  }
  //============================
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80068a2:	4b39      	ldr	r3, [pc, #228]	@ (8006988 <main+0x180>)
 80068a4:	4a39      	ldr	r2, [pc, #228]	@ (800698c <main+0x184>)
 80068a6:	4934      	ldr	r1, [pc, #208]	@ (8006978 <main+0x170>)
 80068a8:	4839      	ldr	r0, [pc, #228]	@ (8006990 <main+0x188>)
 80068aa:	f7ff fb5d 	bl	8005f68 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 80068ae:	4b39      	ldr	r3, [pc, #228]	@ (8006994 <main+0x18c>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d019      	beq.n	80068ea <main+0xe2>
 80068b6:	4b2d      	ldr	r3, [pc, #180]	@ (800696c <main+0x164>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2201      	movs	r2, #1
 80068bc:	4053      	eors	r3, r2
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d012      	beq.n	80068ea <main+0xe2>
 80068c4:	4b34      	ldr	r3, [pc, #208]	@ (8006998 <main+0x190>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2201      	movs	r2, #1
 80068ca:	4053      	eors	r3, r2
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <main+0xe2>
      MeasurementBusy = UpkeepGadget();
 80068d2:	f7ff fb77 	bl	8005fc4 <UpkeepGadget>
 80068d6:	0003      	movs	r3, r0
 80068d8:	001a      	movs	r2, r3
 80068da:	4b30      	ldr	r3, [pc, #192]	@ (800699c <main+0x194>)
 80068dc:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 80068de:	f7fe fa89 	bl	8004df4 <ESP_Upkeep>
 80068e2:	0003      	movs	r3, r0
 80068e4:	001a      	movs	r2, r3
 80068e6:	4b2e      	ldr	r3, [pc, #184]	@ (80069a0 <main+0x198>)
 80068e8:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80068ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006994 <main+0x18c>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	4053      	eors	r3, r2
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00f      	beq.n	8006918 <main+0x110>
 80068f8:	4b1c      	ldr	r3, [pc, #112]	@ (800696c <main+0x164>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2201      	movs	r2, #1
 80068fe:	4053      	eors	r3, r2
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <main+0x110>
 8006906:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <main+0x190>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2201      	movs	r2, #1
 800690c:	4053      	eors	r3, r2
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <main+0x110>
      Gadget_Test();
 8006914:	f7ff fb4e 	bl	8005fb4 <Gadget_Test>
    }
    Status_Upkeep();
 8006918:	f003 fcbc 	bl	800a294 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 800691c:	4b21      	ldr	r3, [pc, #132]	@ (80069a4 <main+0x19c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	0018      	movs	r0, r3
 8006922:	f004 f99d 	bl	800ac60 <TimestampIsReached>
 8006926:	1e03      	subs	r3, r0, #0
 8006928:	d00c      	beq.n	8006944 <main+0x13c>
      charge = Battery_Upkeep();
 800692a:	f003 fcba 	bl	800a2a2 <Battery_Upkeep>
 800692e:	0003      	movs	r3, r0
 8006930:	001a      	movs	r2, r3
 8006932:	4b1d      	ldr	r3, [pc, #116]	@ (80069a8 <main+0x1a0>)
 8006934:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 8006936:	f004 fd8b 	bl	800b450 <HAL_GetTick>
 800693a:	0003      	movs	r3, r0
 800693c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ac <main+0x1a4>)
 800693e:	189a      	adds	r2, r3, r2
 8006940:	4b18      	ldr	r3, [pc, #96]	@ (80069a4 <main+0x19c>)
 8006942:	601a      	str	r2, [r3, #0]
      //GoToSleep(2);
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8006944:	4b18      	ldr	r3, [pc, #96]	@ (80069a8 <main+0x1a0>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d107      	bne.n	800695c <main+0x154>
 800694c:	4b14      	ldr	r3, [pc, #80]	@ (80069a0 <main+0x198>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b09      	cmp	r3, #9
 8006952:	d103      	bne.n	800695c <main+0x154>
      batteryEmpty = true;
 8006954:	4b10      	ldr	r3, [pc, #64]	@ (8006998 <main+0x190>)
 8006956:	2201      	movs	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	e002      	b.n	8006962 <main+0x15a>
    }
    else{
      batteryEmpty = false;
 800695c:	4b0e      	ldr	r3, [pc, #56]	@ (8006998 <main+0x190>)
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 8006962:	e7a4      	b.n	80068ae <main+0xa6>
 8006964:	200020f4 	.word	0x200020f4
 8006968:	200020b4 	.word	0x200020b4
 800696c:	20000e79 	.word	0x20000e79
 8006970:	20001124 	.word	0x20001124
 8006974:	20002134 	.word	0x20002134
 8006978:	20000df4 	.word	0x20000df4
 800697c:	20000e30 	.word	0x20000e30
 8006980:	0801e7d0 	.word	0x0801e7d0
 8006984:	0801f108 	.word	0x0801f108
 8006988:	20000c5c 	.word	0x20000c5c
 800698c:	200022e4 	.word	0x200022e4
 8006990:	20000cbc 	.word	0x20000cbc
 8006994:	20000e78 	.word	0x20000e78
 8006998:	20000e7a 	.word	0x20000e7a
 800699c:	20000e7b 	.word	0x20000e7b
 80069a0:	20000e81 	.word	0x20000e81
 80069a4:	20000e7c 	.word	0x20000e7c
 80069a8:	20000e80 	.word	0x20000e80
 80069ac:	0000ea60 	.word	0x0000ea60

080069b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b09d      	sub	sp, #116	@ 0x74
 80069b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069b6:	2438      	movs	r4, #56	@ 0x38
 80069b8:	193b      	adds	r3, r7, r4
 80069ba:	0018      	movs	r0, r3
 80069bc:	2338      	movs	r3, #56	@ 0x38
 80069be:	001a      	movs	r2, r3
 80069c0:	2100      	movs	r1, #0
 80069c2:	f014 fb8f 	bl	801b0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069c6:	2324      	movs	r3, #36	@ 0x24
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	0018      	movs	r0, r3
 80069cc:	2314      	movs	r3, #20
 80069ce:	001a      	movs	r2, r3
 80069d0:	2100      	movs	r1, #0
 80069d2:	f014 fb87 	bl	801b0e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80069d6:	003b      	movs	r3, r7
 80069d8:	0018      	movs	r0, r3
 80069da:	2324      	movs	r3, #36	@ 0x24
 80069dc:	001a      	movs	r2, r3
 80069de:	2100      	movs	r1, #0
 80069e0:	f014 fb80 	bl	801b0e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80069e4:	4b32      	ldr	r3, [pc, #200]	@ (8006ab0 <SystemClock_Config+0x100>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a32      	ldr	r2, [pc, #200]	@ (8006ab4 <SystemClock_Config+0x104>)
 80069ea:	401a      	ands	r2, r3
 80069ec:	4b30      	ldr	r3, [pc, #192]	@ (8006ab0 <SystemClock_Config+0x100>)
 80069ee:	2180      	movs	r1, #128	@ 0x80
 80069f0:	0109      	lsls	r1, r1, #4
 80069f2:	430a      	orrs	r2, r1
 80069f4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80069f6:	f00a f91b 	bl	8010c30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80069fa:	4b2f      	ldr	r3, [pc, #188]	@ (8006ab8 <SystemClock_Config+0x108>)
 80069fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069fe:	4b2e      	ldr	r3, [pc, #184]	@ (8006ab8 <SystemClock_Config+0x108>)
 8006a00:	492c      	ldr	r1, [pc, #176]	@ (8006ab4 <SystemClock_Config+0x104>)
 8006a02:	400a      	ands	r2, r1
 8006a04:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8006a06:	193b      	adds	r3, r7, r4
 8006a08:	2226      	movs	r2, #38	@ 0x26
 8006a0a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006a0c:	193b      	adds	r3, r7, r4
 8006a0e:	2280      	movs	r2, #128	@ 0x80
 8006a10:	0052      	lsls	r2, r2, #1
 8006a12:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a14:	0021      	movs	r1, r4
 8006a16:	187b      	adds	r3, r7, r1
 8006a18:	2201      	movs	r2, #1
 8006a1a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a1c:	187b      	adds	r3, r7, r1
 8006a1e:	2210      	movs	r2, #16
 8006a20:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	2201      	movs	r2, #1
 8006a26:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a28:	187b      	adds	r3, r7, r1
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a2e:	187b      	adds	r3, r7, r1
 8006a30:	0018      	movs	r0, r3
 8006a32:	f00a f90b 	bl	8010c4c <HAL_RCC_OscConfig>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d001      	beq.n	8006a3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006a3a:	f000 f857 	bl	8006aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a3e:	2124      	movs	r1, #36	@ 0x24
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	220f      	movs	r2, #15
 8006a44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	2201      	movs	r2, #1
 8006a4a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a4c:	187b      	adds	r3, r7, r1
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006a52:	187b      	adds	r3, r7, r1
 8006a54:	2200      	movs	r2, #0
 8006a56:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a58:	187b      	adds	r3, r7, r1
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006a5e:	187b      	adds	r3, r7, r1
 8006a60:	2100      	movs	r1, #0
 8006a62:	0018      	movs	r0, r3
 8006a64:	f00a fcc6 	bl	80113f4 <HAL_RCC_ClockConfig>
 8006a68:	1e03      	subs	r3, r0, #0
 8006a6a:	d001      	beq.n	8006a70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006a6c:	f000 f83e 	bl	8006aec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006a70:	003b      	movs	r3, r7
 8006a72:	226d      	movs	r2, #109	@ 0x6d
 8006a74:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006a76:	003b      	movs	r3, r7
 8006a78:	2200      	movs	r2, #0
 8006a7a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006a7c:	003b      	movs	r3, r7
 8006a7e:	2200      	movs	r2, #0
 8006a80:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006a82:	003b      	movs	r3, r7
 8006a84:	2200      	movs	r2, #0
 8006a86:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006a88:	003b      	movs	r3, r7
 8006a8a:	2280      	movs	r2, #128	@ 0x80
 8006a8c:	0252      	lsls	r2, r2, #9
 8006a8e:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006a90:	003b      	movs	r3, r7
 8006a92:	2280      	movs	r2, #128	@ 0x80
 8006a94:	04d2      	lsls	r2, r2, #19
 8006a96:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a98:	003b      	movs	r3, r7
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f00a fece 	bl	801183c <HAL_RCCEx_PeriphCLKConfig>
 8006aa0:	1e03      	subs	r3, r0, #0
 8006aa2:	d001      	beq.n	8006aa8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006aa4:	f000 f822 	bl	8006aec <Error_Handler>
  }
}
 8006aa8:	46c0      	nop			@ (mov r8, r8)
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b01d      	add	sp, #116	@ 0x74
 8006aae:	bd90      	pop	{r4, r7, pc}
 8006ab0:	40007000 	.word	0x40007000
 8006ab4:	ffffe7ff 	.word	0xffffe7ff
 8006ab8:	40021000 	.word	0x40021000

08006abc <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	000a      	movs	r2, r1
 8006ac6:	1cbb      	adds	r3, r7, #2
 8006ac8:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8006aca:	4c06      	ldr	r4, [pc, #24]	@ (8006ae4 <printString+0x28>)
 8006acc:	1cbb      	adds	r3, r7, #2
 8006ace:	881a      	ldrh	r2, [r3, #0]
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4805      	ldr	r0, [pc, #20]	@ (8006ae8 <printString+0x2c>)
 8006ad4:	0023      	movs	r3, r4
 8006ad6:	f00b ff61 	bl	801299c <HAL_UART_Transmit>
}
 8006ada:	46c0      	nop			@ (mov r8, r8)
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b003      	add	sp, #12
 8006ae0:	bd90      	pop	{r4, r7, pc}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	0000ffff 	.word	0x0000ffff
 8006ae8:	2000222c 	.word	0x2000222c

08006aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006af0:	b672      	cpsid	i
}
 8006af2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006af4:	46c0      	nop			@ (mov r8, r8)
 8006af6:	e7fd      	b.n	8006af4 <Error_Handler+0x8>

08006af8 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8006afc:	f7ff fc2b 	bl	8006356 <HT_StartMeasurement>
}
 8006b00:	46c0      	nop			@ (mov r8, r8)
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8006b0c:	4a04      	ldr	r2, [pc, #16]	@ (8006b20 <HT_IsMeasurementDoneWrapper+0x18>)
 8006b0e:	4b05      	ldr	r3, [pc, #20]	@ (8006b24 <HT_IsMeasurementDoneWrapper+0x1c>)
 8006b10:	0011      	movs	r1, r2
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7ff fc26 	bl	8006364 <HT_GetMeasurementValues>
 8006b18:	0003      	movs	r3, r0
}
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000e88 	.word	0x20000e88
 8006b24:	20000e84 	.word	0x20000e84

08006b28 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8006b2c:	f7ff fa83 	bl	8006036 <Gas_StartMeasurement>
}
 8006b30:	46c0      	nop			@ (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8006b3c:	4b03      	ldr	r3, [pc, #12]	@ (8006b4c <VOC_IsMeasurementDoneWrapper+0x14>)
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7ff fa80 	bl	8006044 <Gas_GetMeasurementValues>
 8006b44:	0003      	movs	r3, r0
}
 8006b46:	0018      	movs	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000e8c 	.word	0x20000e8c

08006b50 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
}
 8006b54:	46c0      	nop			@ (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	af00      	add	r7, sp, #0
  return true;
 8006b5e:	2301      	movs	r3, #1
}
 8006b60:	0018      	movs	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 8006b66:	b580      	push	{r7, lr}
 8006b68:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006b6a:	f000 fd1b 	bl	80075a4 <MIC_TestMeasurementDone>
 8006b6e:	0003      	movs	r3, r0
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <testInit>:

void testInit(){
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <testInit+0x24>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8006b82:	4b06      	ldr	r3, [pc, #24]	@ (8006b9c <testInit+0x24>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 8006b88:	4b04      	ldr	r3, [pc, #16]	@ (8006b9c <testInit+0x24>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8006b8e:	4b03      	ldr	r3, [pc, #12]	@ (8006b9c <testInit+0x24>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	705a      	strb	r2, [r3, #1]
}
 8006b94:	46c0      	nop			@ (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	20000ec8 	.word	0x20000ec8

08006ba0 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b092      	sub	sp, #72	@ 0x48
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 8006bac:	f7ff ffe4 	bl	8006b78 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8006bb0:	4b6e      	ldr	r3, [pc, #440]	@ (8006d6c <Meas_Init+0x1cc>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <Meas_Init+0x20>
 8006bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d6c <Meas_Init+0x1cc>)
 8006bba:	785b      	ldrb	r3, [r3, #1]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d068      	beq.n	8006c92 <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7fe fc22 	bl	800540c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8006bc8:	f7ff fbdc 	bl	8006384 <HT_DeviceConnected>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	001a      	movs	r2, r3
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4053      	eors	r3, r2
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 8006bda:	4a65      	ldr	r2, [pc, #404]	@ (8006d70 <Meas_Init+0x1d0>)
 8006bdc:	4b65      	ldr	r3, [pc, #404]	@ (8006d74 <Meas_Init+0x1d4>)
 8006bde:	0019      	movs	r1, r3
 8006be0:	2001      	movs	r0, #1
 8006be2:	f004 f893 	bl	800ad0c <CreateLine>
       MeasTest.HT_Tested = false;
 8006be6:	4b64      	ldr	r3, [pc, #400]	@ (8006d78 <Meas_Init+0x1d8>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8006bec:	4b5f      	ldr	r3, [pc, #380]	@ (8006d6c <Meas_Init+0x1cc>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	e008      	b.n	8006c06 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8006bf4:	4b60      	ldr	r3, [pc, #384]	@ (8006d78 <Meas_Init+0x1d8>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006bfa:	4a60      	ldr	r2, [pc, #384]	@ (8006d7c <Meas_Init+0x1dc>)
 8006bfc:	4b60      	ldr	r3, [pc, #384]	@ (8006d80 <Meas_Init+0x1e0>)
 8006bfe:	0019      	movs	r1, r3
 8006c00:	2003      	movs	r0, #3
 8006c02:	f004 f883 	bl	800ad0c <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006c06:	f7ff fa2a 	bl	800605e <Gas_DeviceConnected>
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4053      	eors	r3, r2
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8006c18:	4b57      	ldr	r3, [pc, #348]	@ (8006d78 <Meas_Init+0x1d8>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8006c1e:	4a59      	ldr	r2, [pc, #356]	@ (8006d84 <Meas_Init+0x1e4>)
 8006c20:	4b54      	ldr	r3, [pc, #336]	@ (8006d74 <Meas_Init+0x1d4>)
 8006c22:	0019      	movs	r1, r3
 8006c24:	2001      	movs	r0, #1
 8006c26:	f004 f871 	bl	800ad0c <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8006c2a:	4b50      	ldr	r3, [pc, #320]	@ (8006d6c <Meas_Init+0x1cc>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	705a      	strb	r2, [r3, #1]
 8006c30:	e008      	b.n	8006c44 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8006c32:	4b51      	ldr	r3, [pc, #324]	@ (8006d78 <Meas_Init+0x1d8>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8006c38:	4a53      	ldr	r2, [pc, #332]	@ (8006d88 <Meas_Init+0x1e8>)
 8006c3a:	4b51      	ldr	r3, [pc, #324]	@ (8006d80 <Meas_Init+0x1e0>)
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	2003      	movs	r0, #3
 8006c40:	f004 f864 	bl	800ad0c <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8006c44:	4b4c      	ldr	r3, [pc, #304]	@ (8006d78 <Meas_Init+0x1d8>)
 8006c46:	785b      	ldrb	r3, [r3, #1]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <Meas_Init+0xc0>
 8006c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8006d78 <Meas_Init+0x1d8>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8006c54:	2200      	movs	r2, #0
 8006c56:	2101      	movs	r1, #1
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f003 f901 	bl	8009e60 <SetDBLED>
 8006c5e:	e018      	b.n	8006c92 <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	2001      	movs	r0, #1
 8006c66:	f003 f8fb 	bl	8009e60 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006c6a:	4b48      	ldr	r3, [pc, #288]	@ (8006d8c <Meas_Init+0x1ec>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2101      	movs	r1, #1
 8006c70:	0018      	movs	r0, r3
 8006c72:	f005 fe4c 	bl	800c90e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006c76:	2380      	movs	r3, #128	@ 0x80
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4844      	ldr	r0, [pc, #272]	@ (8006d8c <Meas_Init+0x1ec>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	0019      	movs	r1, r3
 8006c80:	f005 fe45 	bl	800c90e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006c84:	2380      	movs	r3, #128	@ 0x80
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4840      	ldr	r0, [pc, #256]	@ (8006d8c <Meas_Init+0x1ec>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	0019      	movs	r1, r3
 8006c8e:	f005 fe3e 	bl	800c90e <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8006c92:	4b36      	ldr	r3, [pc, #216]	@ (8006d6c <Meas_Init+0x1cc>)
 8006c94:	78db      	ldrb	r3, [r3, #3]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8006d90 <Meas_Init+0x1f0>)
 8006c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8006d94 <Meas_Init+0x1f4>)
 8006c9e:	0019      	movs	r1, r3
 8006ca0:	2002      	movs	r0, #2
 8006ca2:	f004 f833 	bl	800ad0c <CreateLine>
          enableMicrophone(true);
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	f002 fa42 	bl	8009130 <enableMicrophone>

  }
  uint8_t offset = 0;
 8006cac:	2547      	movs	r5, #71	@ 0x47
 8006cae:	197b      	adds	r3, r7, r5
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8006cb4:	197b      	adds	r3, r7, r5
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	197a      	adds	r2, r7, r5
 8006cba:	1c59      	adds	r1, r3, #1
 8006cbc:	7011      	strb	r1, [r2, #0]
 8006cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8006d6c <Meas_Init+0x1cc>)
 8006cc0:	7814      	ldrb	r4, [r2, #0]
 8006cc2:	4a35      	ldr	r2, [pc, #212]	@ (8006d98 <Meas_Init+0x1f8>)
 8006cc4:	0119      	lsls	r1, r3, #4
 8006cc6:	4835      	ldr	r0, [pc, #212]	@ (8006d9c <Meas_Init+0x1fc>)
 8006cc8:	5088      	str	r0, [r1, r2]
 8006cca:	4933      	ldr	r1, [pc, #204]	@ (8006d98 <Meas_Init+0x1f8>)
 8006ccc:	011a      	lsls	r2, r3, #4
 8006cce:	188a      	adds	r2, r1, r2
 8006cd0:	3204      	adds	r2, #4
 8006cd2:	4933      	ldr	r1, [pc, #204]	@ (8006da0 <Meas_Init+0x200>)
 8006cd4:	6011      	str	r1, [r2, #0]
 8006cd6:	4930      	ldr	r1, [pc, #192]	@ (8006d98 <Meas_Init+0x1f8>)
 8006cd8:	011a      	lsls	r2, r3, #4
 8006cda:	188a      	adds	r2, r1, r2
 8006cdc:	3208      	adds	r2, #8
 8006cde:	4931      	ldr	r1, [pc, #196]	@ (8006da4 <Meas_Init+0x204>)
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d98 <Meas_Init+0x1f8>)
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	18d3      	adds	r3, r2, r3
 8006ce8:	330c      	adds	r3, #12
 8006cea:	1c22      	adds	r2, r4, #0
 8006cec:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8006cee:	197b      	adds	r3, r7, r5
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	197a      	adds	r2, r7, r5
 8006cf4:	1c59      	adds	r1, r3, #1
 8006cf6:	7011      	strb	r1, [r2, #0]
 8006cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d6c <Meas_Init+0x1cc>)
 8006cfa:	7854      	ldrb	r4, [r2, #1]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	@ (8006d98 <Meas_Init+0x1f8>)
 8006cfe:	0119      	lsls	r1, r3, #4
 8006d00:	4829      	ldr	r0, [pc, #164]	@ (8006da8 <Meas_Init+0x208>)
 8006d02:	5088      	str	r0, [r1, r2]
 8006d04:	4924      	ldr	r1, [pc, #144]	@ (8006d98 <Meas_Init+0x1f8>)
 8006d06:	011a      	lsls	r2, r3, #4
 8006d08:	188a      	adds	r2, r1, r2
 8006d0a:	3204      	adds	r2, #4
 8006d0c:	4927      	ldr	r1, [pc, #156]	@ (8006dac <Meas_Init+0x20c>)
 8006d0e:	6011      	str	r1, [r2, #0]
 8006d10:	4921      	ldr	r1, [pc, #132]	@ (8006d98 <Meas_Init+0x1f8>)
 8006d12:	011a      	lsls	r2, r3, #4
 8006d14:	188a      	adds	r2, r1, r2
 8006d16:	3208      	adds	r2, #8
 8006d18:	4925      	ldr	r1, [pc, #148]	@ (8006db0 <Meas_Init+0x210>)
 8006d1a:	6011      	str	r1, [r2, #0]
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8006d98 <Meas_Init+0x1f8>)
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	18d3      	adds	r3, r2, r3
 8006d22:	330c      	adds	r3, #12
 8006d24:	1c22      	adds	r2, r4, #0
 8006d26:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8006d28:	197b      	adds	r3, r7, r5
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	197a      	adds	r2, r7, r5
 8006d2e:	1c59      	adds	r1, r3, #1
 8006d30:	7011      	strb	r1, [r2, #0]
 8006d32:	4a0e      	ldr	r2, [pc, #56]	@ (8006d6c <Meas_Init+0x1cc>)
 8006d34:	7894      	ldrb	r4, [r2, #2]
 8006d36:	4a18      	ldr	r2, [pc, #96]	@ (8006d98 <Meas_Init+0x1f8>)
 8006d38:	0119      	lsls	r1, r3, #4
 8006d3a:	481e      	ldr	r0, [pc, #120]	@ (8006db4 <Meas_Init+0x214>)
 8006d3c:	5088      	str	r0, [r1, r2]
 8006d3e:	4916      	ldr	r1, [pc, #88]	@ (8006d98 <Meas_Init+0x1f8>)
 8006d40:	011a      	lsls	r2, r3, #4
 8006d42:	188a      	adds	r2, r1, r2
 8006d44:	3204      	adds	r2, #4
 8006d46:	491c      	ldr	r1, [pc, #112]	@ (8006db8 <Meas_Init+0x218>)
 8006d48:	6011      	str	r1, [r2, #0]
 8006d4a:	4913      	ldr	r1, [pc, #76]	@ (8006d98 <Meas_Init+0x1f8>)
 8006d4c:	011a      	lsls	r2, r3, #4
 8006d4e:	188a      	adds	r2, r1, r2
 8006d50:	3208      	adds	r2, #8
 8006d52:	491a      	ldr	r1, [pc, #104]	@ (8006dbc <Meas_Init+0x21c>)
 8006d54:	6011      	str	r1, [r2, #0]
 8006d56:	4a10      	ldr	r2, [pc, #64]	@ (8006d98 <Meas_Init+0x1f8>)
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	18d3      	adds	r3, r2, r3
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	1c22      	adds	r2, r4, #0
 8006d60:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b012      	add	sp, #72	@ 0x48
 8006d68:	bdb0      	pop	{r4, r5, r7, pc}
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	20000ec4 	.word	0x20000ec4
 8006d70:	0801e7e4 	.word	0x0801e7e4
 8006d74:	0801e814 	.word	0x0801e814
 8006d78:	20000ec8 	.word	0x20000ec8
 8006d7c:	0801e818 	.word	0x0801e818
 8006d80:	0801e844 	.word	0x0801e844
 8006d84:	0801e848 	.word	0x0801e848
 8006d88:	0801e864 	.word	0x0801e864
 8006d8c:	50000400 	.word	0x50000400
 8006d90:	0801e87c 	.word	0x0801e87c
 8006d94:	0801e8a0 	.word	0x0801e8a0
 8006d98:	20000e94 	.word	0x20000e94
 8006d9c:	08006af9 	.word	0x08006af9
 8006da0:	08006b09 	.word	0x08006b09
 8006da4:	20000e90 	.word	0x20000e90
 8006da8:	08006b29 	.word	0x08006b29
 8006dac:	08006b39 	.word	0x08006b39
 8006db0:	20000e91 	.word	0x20000e91
 8006db4:	08006b51 	.word	0x08006b51
 8006db8:	08006b5b 	.word	0x08006b5b
 8006dbc:	20000e92 	.word	0x20000e92

08006dc0 <StartMeasurements>:

void StartMeasurements(void) {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006dc4:	4b10      	ldr	r3, [pc, #64]	@ (8006e08 <StartMeasurements+0x48>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e015      	b.n	8006df8 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8006e08 <StartMeasurements+0x48>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8006e0c <StartMeasurements+0x4c>)
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	18d3      	adds	r3, r2, r3
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006dde:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <StartMeasurements+0x48>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	001a      	movs	r2, r3
 8006de4:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <StartMeasurements+0x4c>)
 8006de6:	0112      	lsls	r2, r2, #4
 8006de8:	58d3      	ldr	r3, [r2, r3]
 8006dea:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006dec:	4b06      	ldr	r3, [pc, #24]	@ (8006e08 <StartMeasurements+0x48>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <StartMeasurements+0x48>)
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	4b03      	ldr	r3, [pc, #12]	@ (8006e08 <StartMeasurements+0x48>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d9e5      	bls.n	8006dcc <StartMeasurements+0xc>
    }
  }
}
 8006e00:	46c0      	nop			@ (mov r8, r8)
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000ecc 	.word	0x20000ecc
 8006e0c:	20000e94 	.word	0x20000e94

08006e10 <Meas_Test>:

void Meas_Test(){
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8006e14:	4b23      	ldr	r3, [pc, #140]	@ (8006ea4 <Meas_Test+0x94>)
 8006e16:	78db      	ldrb	r3, [r3, #3]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4053      	eors	r3, r2
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <Meas_Test+0x16>
    ESP_WakeTest();
 8006e22:	f7fd fed3 	bl	8004bcc <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8006e26:	4b1f      	ldr	r3, [pc, #124]	@ (8006ea4 <Meas_Test+0x94>)
 8006e28:	789b      	ldrb	r3, [r3, #2]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	4053      	eors	r3, r2
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01b      	beq.n	8006e6c <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006e34:	f7ff fe97 	bl	8006b66 <MIC_IsTestMeasurementDoneWrapper>
 8006e38:	1e03      	subs	r3, r0, #0
 8006e3a:	d00b      	beq.n	8006e54 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8006e3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ea4 <Meas_Test+0x94>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8006e42:	23fa      	movs	r3, #250	@ 0xfa
 8006e44:	011a      	lsls	r2, r3, #4
 8006e46:	4918      	ldr	r1, [pc, #96]	@ (8006ea8 <Meas_Test+0x98>)
 8006e48:	23fa      	movs	r3, #250	@ 0xfa
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f002 ffd3 	bl	8009df8 <SetStatusLED>
 8006e52:	e00b      	b.n	8006e6c <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8006e54:	f002 f948 	bl	80090e8 <micSettlingComplete>
 8006e58:	1e03      	subs	r3, r0, #0
 8006e5a:	d007      	beq.n	8006e6c <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8006e5c:	23fa      	movs	r3, #250	@ 0xfa
 8006e5e:	011a      	lsls	r2, r3, #4
 8006e60:	23fa      	movs	r3, #250	@ 0xfa
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	4810      	ldr	r0, [pc, #64]	@ (8006ea8 <Meas_Test+0x98>)
 8006e66:	0019      	movs	r1, r3
 8006e68:	f002 ffc6 	bl	8009df8 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <Meas_Test+0x94>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d013      	beq.n	8006e9c <Meas_Test+0x8c>
 8006e74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <Meas_Test+0x94>)
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00f      	beq.n	8006e9c <Meas_Test+0x8c>
 8006e7c:	4b09      	ldr	r3, [pc, #36]	@ (8006ea4 <Meas_Test+0x94>)
 8006e7e:	78db      	ldrb	r3, [r3, #3]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <Meas_Test+0x8c>
 8006e84:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <Meas_Test+0x94>)
 8006e86:	789b      	ldrb	r3, [r3, #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <Meas_Test+0x8c>
    Info("Test completed");
 8006e8c:	4a07      	ldr	r2, [pc, #28]	@ (8006eac <Meas_Test+0x9c>)
 8006e8e:	4b08      	ldr	r3, [pc, #32]	@ (8006eb0 <Meas_Test+0xa0>)
 8006e90:	0019      	movs	r1, r3
 8006e92:	2002      	movs	r0, #2
 8006e94:	f003 ff3a 	bl	800ad0c <CreateLine>
    SetTestDone();
 8006e98:	f7ff fc72 	bl	8006780 <SetTestDone>
  }
}
 8006e9c:	46c0      	nop			@ (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	46c0      	nop			@ (mov r8, r8)
 8006ea4:	20000ec8 	.word	0x20000ec8
 8006ea8:	00000bb8 	.word	0x00000bb8
 8006eac:	0801e8a4 	.word	0x0801e8a4
 8006eb0:	0801e8a0 	.word	0x0801e8a0

08006eb4 <ResetMeasurements>:
void ResetMeasurements(void) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee8 <ResetMeasurements+0x34>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <ResetMeasurements+0x34>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006ec4:	4b08      	ldr	r3, [pc, #32]	@ (8006ee8 <ResetMeasurements+0x34>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8006eca:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <ResetMeasurements+0x34>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <ResetMeasurements+0x34>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8006ed6:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <ResetMeasurements+0x34>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8006edc:	4b02      	ldr	r3, [pc, #8]	@ (8006ee8 <ResetMeasurements+0x34>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	73da      	strb	r2, [r3, #15]
}
 8006ee2:	46c0      	nop			@ (mov r8, r8)
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000e84 	.word	0x20000e84

08006eec <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006ef0:	4b18      	ldr	r3, [pc, #96]	@ (8006f54 <MeasurementsCompleted+0x68>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e024      	b.n	8006f42 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006ef8:	4b16      	ldr	r3, [pc, #88]	@ (8006f54 <MeasurementsCompleted+0x68>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4a16      	ldr	r2, [pc, #88]	@ (8006f58 <MeasurementsCompleted+0x6c>)
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	18d3      	adds	r3, r2, r3
 8006f02:	330c      	adds	r3, #12
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d015      	beq.n	8006f36 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8006f0a:	4b12      	ldr	r3, [pc, #72]	@ (8006f54 <MeasurementsCompleted+0x68>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	4a12      	ldr	r2, [pc, #72]	@ (8006f58 <MeasurementsCompleted+0x6c>)
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	18d3      	adds	r3, r2, r3
 8006f14:	3304      	adds	r3, #4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4798      	blx	r3
 8006f1a:	1e03      	subs	r3, r0, #0
 8006f1c:	d009      	beq.n	8006f32 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <MeasurementsCompleted+0x68>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	4a0d      	ldr	r2, [pc, #52]	@ (8006f58 <MeasurementsCompleted+0x6c>)
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	18d3      	adds	r3, r2, r3
 8006f28:	3308      	adds	r3, #8
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e001      	b.n	8006f36 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e00a      	b.n	8006f4c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006f36:	4b07      	ldr	r3, [pc, #28]	@ (8006f54 <MeasurementsCompleted+0x68>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	4b05      	ldr	r3, [pc, #20]	@ (8006f54 <MeasurementsCompleted+0x68>)
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	4b04      	ldr	r3, [pc, #16]	@ (8006f54 <MeasurementsCompleted+0x68>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d9d6      	bls.n	8006ef8 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8006f4a:	2301      	movs	r3, #1
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	46c0      	nop			@ (mov r8, r8)
 8006f54:	20000ecc 	.word	0x20000ecc
 8006f58:	20000e94 	.word	0x20000e94

08006f5c <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8006f62:	4b7d      	ldr	r3, [pc, #500]	@ (8007158 <Mic_Upkeep+0x1fc>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d100      	bne.n	8006f6c <Mic_Upkeep+0x10>
 8006f6a:	e0c0      	b.n	80070ee <Mic_Upkeep+0x192>
 8006f6c:	dd00      	ble.n	8006f70 <Mic_Upkeep+0x14>
 8006f6e:	e0dd      	b.n	800712c <Mic_Upkeep+0x1d0>
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d037      	beq.n	8006fe4 <Mic_Upkeep+0x88>
 8006f74:	dd00      	ble.n	8006f78 <Mic_Upkeep+0x1c>
 8006f76:	e0d9      	b.n	800712c <Mic_Upkeep+0x1d0>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <Mic_Upkeep+0x26>
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d014      	beq.n	8006faa <Mic_Upkeep+0x4e>
 8006f80:	e0d4      	b.n	800712c <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8006f82:	2001      	movs	r0, #1
 8006f84:	f002 f8d4 	bl	8009130 <enableMicrophone>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	001a      	movs	r2, r3
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4053      	eors	r3, r2
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8006f96:	4a71      	ldr	r2, [pc, #452]	@ (800715c <Mic_Upkeep+0x200>)
 8006f98:	4b71      	ldr	r3, [pc, #452]	@ (8007160 <Mic_Upkeep+0x204>)
 8006f9a:	21d4      	movs	r1, #212	@ 0xd4
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f003 ff61 	bl	800ae64 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8006fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8007158 <Mic_Upkeep+0x1fc>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 8006fa8:	e0cf      	b.n	800714a <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 8006faa:	f002 f89d 	bl	80090e8 <micSettlingComplete>
 8006fae:	1e03      	subs	r3, r0, #0
 8006fb0:	d105      	bne.n	8006fbe <Mic_Upkeep+0x62>
 8006fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8007164 <Mic_Upkeep+0x208>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d100      	bne.n	8006fbe <Mic_Upkeep+0x62>
 8006fbc:	e0c0      	b.n	8007140 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 8006fbe:	f002 f921 	bl	8009204 <startSPLcalculation>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	001a      	movs	r2, r3
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4053      	eors	r3, r2
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 8006fd0:	4a62      	ldr	r2, [pc, #392]	@ (800715c <Mic_Upkeep+0x200>)
 8006fd2:	4b63      	ldr	r3, [pc, #396]	@ (8007160 <Mic_Upkeep+0x204>)
 8006fd4:	21e0      	movs	r1, #224	@ 0xe0
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f003 ff44 	bl	800ae64 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8007158 <Mic_Upkeep+0x1fc>)
 8006fde:	2202      	movs	r2, #2
 8006fe0:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 8006fe2:	e0ad      	b.n	8007140 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 8006fe4:	4b60      	ldr	r3, [pc, #384]	@ (8007168 <Mic_Upkeep+0x20c>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	2101      	movs	r1, #1
 8006fea:	0018      	movs	r0, r3
 8006fec:	f001 ff5e 	bl	8008eac <getSoundData>
 8006ff0:	1e03      	subs	r3, r0, #0
 8006ff2:	d100      	bne.n	8006ff6 <Mic_Upkeep+0x9a>
 8006ff4:	e0a6      	b.n	8007144 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 8006ff6:	f002 f857 	bl	80090a8 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8006ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8007168 <Mic_Upkeep+0x20c>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007000:	4b59      	ldr	r3, [pc, #356]	@ (8007168 <Mic_Upkeep+0x20c>)
 8007002:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007004:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007006:	4b58      	ldr	r3, [pc, #352]	@ (8007168 <Mic_Upkeep+0x20c>)
 8007008:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800700a:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 800700c:	4b56      	ldr	r3, [pc, #344]	@ (8007168 <Mic_Upkeep+0x20c>)
 800700e:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007010:	4856      	ldr	r0, [pc, #344]	@ (800716c <Mic_Upkeep+0x210>)
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	0023      	movs	r3, r4
 8007016:	f000 faf5 	bl	8007604 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800701a:	4b53      	ldr	r3, [pc, #332]	@ (8007168 <Mic_Upkeep+0x20c>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	001a      	movs	r2, r3
 8007020:	4b51      	ldr	r3, [pc, #324]	@ (8007168 <Mic_Upkeep+0x20c>)
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	4952      	ldr	r1, [pc, #328]	@ (8007170 <Mic_Upkeep+0x214>)
 8007026:	0038      	movs	r0, r7
 8007028:	f013 ffb8 	bl	801af9c <siprintf>

      dBValue = atof(dBbuffer);
 800702c:	003b      	movs	r3, r7
 800702e:	0018      	movs	r0, r3
 8007030:	f012 fc60 	bl	80198f4 <atof>
 8007034:	0002      	movs	r2, r0
 8007036:	000b      	movs	r3, r1
 8007038:	0010      	movs	r0, r2
 800703a:	0019      	movs	r1, r3
 800703c:	f7fc fa50 	bl	80034e0 <__aeabi_d2f>
 8007040:	1c02      	adds	r2, r0, #0
 8007042:	4b4c      	ldr	r3, [pc, #304]	@ (8007174 <Mic_Upkeep+0x218>)
 8007044:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8007046:	4b4b      	ldr	r3, [pc, #300]	@ (8007174 <Mic_Upkeep+0x218>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	494b      	ldr	r1, [pc, #300]	@ (8007178 <Mic_Upkeep+0x21c>)
 800704c:	1c18      	adds	r0, r3, #0
 800704e:	f7f9 ff9d 	bl	8000f8c <__aeabi_fmul>
 8007052:	1c03      	adds	r3, r0, #0
 8007054:	1c18      	adds	r0, r3, #0
 8007056:	f7fc f9fb 	bl	8003450 <__aeabi_f2d>
 800705a:	2200      	movs	r2, #0
 800705c:	4b47      	ldr	r3, [pc, #284]	@ (800717c <Mic_Upkeep+0x220>)
 800705e:	f7fa fb3b 	bl	80016d8 <__aeabi_dadd>
 8007062:	0002      	movs	r2, r0
 8007064:	000b      	movs	r3, r1
 8007066:	0010      	movs	r0, r2
 8007068:	0019      	movs	r1, r3
 800706a:	f7fc f963 	bl	8003334 <__aeabi_d2iz>
 800706e:	0003      	movs	r3, r0
 8007070:	0018      	movs	r0, r3
 8007072:	f7fc f99b 	bl	80033ac <__aeabi_i2d>
 8007076:	2200      	movs	r2, #0
 8007078:	4b41      	ldr	r3, [pc, #260]	@ (8007180 <Mic_Upkeep+0x224>)
 800707a:	f7fa fe91 	bl	8001da0 <__aeabi_ddiv>
 800707e:	0002      	movs	r2, r0
 8007080:	000b      	movs	r3, r1
 8007082:	0010      	movs	r0, r2
 8007084:	0019      	movs	r1, r3
 8007086:	f7fc fa2b 	bl	80034e0 <__aeabi_d2f>
 800708a:	1c02      	adds	r2, r0, #0
 800708c:	4b39      	ldr	r3, [pc, #228]	@ (8007174 <Mic_Upkeep+0x218>)
 800708e:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8007090:	f000 f966 	bl	8007360 <MIC_Print>
      if (!startSPLcalculation()) {
 8007094:	f002 f8b6 	bl	8009204 <startSPLcalculation>
 8007098:	0003      	movs	r3, r0
 800709a:	001a      	movs	r2, r3
 800709c:	2301      	movs	r3, #1
 800709e:	4053      	eors	r3, r2
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 80070a6:	4a2d      	ldr	r2, [pc, #180]	@ (800715c <Mic_Upkeep+0x200>)
 80070a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007160 <Mic_Upkeep+0x204>)
 80070aa:	21f9      	movs	r1, #249	@ 0xf9
 80070ac:	0018      	movs	r0, r3
 80070ae:	f003 fed9 	bl	800ae64 <errorHandler>
      }
      if (!enableMicrophone(false))
 80070b2:	2000      	movs	r0, #0
 80070b4:	f002 f83c 	bl	8009130 <enableMicrophone>
 80070b8:	0003      	movs	r3, r0
 80070ba:	001a      	movs	r2, r3
 80070bc:	2301      	movs	r3, #1
 80070be:	4053      	eors	r3, r2
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80070c6:	4a25      	ldr	r2, [pc, #148]	@ (800715c <Mic_Upkeep+0x200>)
 80070c8:	4b25      	ldr	r3, [pc, #148]	@ (8007160 <Mic_Upkeep+0x204>)
 80070ca:	21fd      	movs	r1, #253	@ 0xfd
 80070cc:	0018      	movs	r0, r3
 80070ce:	f003 fec9 	bl	800ae64 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 80070d2:	f004 f9bd 	bl	800b450 <HAL_GetTick>
 80070d6:	0003      	movs	r3, r0
 80070d8:	22fa      	movs	r2, #250	@ 0xfa
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	189a      	adds	r2, r3, r2
 80070de:	4b29      	ldr	r3, [pc, #164]	@ (8007184 <Mic_Upkeep+0x228>)
 80070e0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80070e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007158 <Mic_Upkeep+0x1fc>)
 80070e4:	2203      	movs	r2, #3
 80070e6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80070e8:	f002 ff7e 	bl	8009fe8 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 80070ec:	e02a      	b.n	8007144 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 80070ee:	4b25      	ldr	r3, [pc, #148]	@ (8007184 <Mic_Upkeep+0x228>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	0018      	movs	r0, r3
 80070f4:	f003 fdb4 	bl	800ac60 <TimestampIsReached>
 80070f8:	1e03      	subs	r3, r0, #0
 80070fa:	d025      	beq.n	8007148 <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 80070fc:	2001      	movs	r0, #1
 80070fe:	f002 f817 	bl	8009130 <enableMicrophone>
 8007102:	0003      	movs	r3, r0
 8007104:	001a      	movs	r2, r3
 8007106:	2301      	movs	r3, #1
 8007108:	4053      	eors	r3, r2
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d007      	beq.n	8007120 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007110:	4a12      	ldr	r2, [pc, #72]	@ (800715c <Mic_Upkeep+0x200>)
 8007112:	230c      	movs	r3, #12
 8007114:	33ff      	adds	r3, #255	@ 0xff
 8007116:	0019      	movs	r1, r3
 8007118:	4b11      	ldr	r3, [pc, #68]	@ (8007160 <Mic_Upkeep+0x204>)
 800711a:	0018      	movs	r0, r3
 800711c:	f003 fea2 	bl	800ae64 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007120:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <Mic_Upkeep+0x1fc>)
 8007122:	2201      	movs	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007126:	f002 ff47 	bl	8009fb8 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 800712a:	e00d      	b.n	8007148 <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 800712c:	4a16      	ldr	r2, [pc, #88]	@ (8007188 <Mic_Upkeep+0x22c>)
 800712e:	4b17      	ldr	r3, [pc, #92]	@ (800718c <Mic_Upkeep+0x230>)
 8007130:	0019      	movs	r1, r3
 8007132:	2003      	movs	r0, #3
 8007134:	f003 fdea 	bl	800ad0c <CreateLine>
    MicState = MIC_STATE_INIT;
 8007138:	4b07      	ldr	r3, [pc, #28]	@ (8007158 <Mic_Upkeep+0x1fc>)
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 800713e:	e004      	b.n	800714a <Mic_Upkeep+0x1ee>
    break;
 8007140:	46c0      	nop			@ (mov r8, r8)
 8007142:	e002      	b.n	800714a <Mic_Upkeep+0x1ee>
    break;
 8007144:	46c0      	nop			@ (mov r8, r8)
 8007146:	e000      	b.n	800714a <Mic_Upkeep+0x1ee>
    break;
 8007148:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800714a:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <Mic_Upkeep+0x1fc>)
 800714c:	781b      	ldrb	r3, [r3, #0]
}
 800714e:	0018      	movs	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	b003      	add	sp, #12
 8007154:	bd90      	pop	{r4, r7, pc}
 8007156:	46c0      	nop			@ (mov r8, r8)
 8007158:	20000eea 	.word	0x20000eea
 800715c:	0801e8b4 	.word	0x0801e8b4
 8007160:	0801f12c 	.word	0x0801f12c
 8007164:	2000120c 	.word	0x2000120c
 8007168:	20000ed8 	.word	0x20000ed8
 800716c:	0801e8d0 	.word	0x0801e8d0
 8007170:	0801e8fc 	.word	0x0801e8fc
 8007174:	20000f1c 	.word	0x20000f1c
 8007178:	42c80000 	.word	0x42c80000
 800717c:	3fe00000 	.word	0x3fe00000
 8007180:	40590000 	.word	0x40590000
 8007184:	20000ed4 	.word	0x20000ed4
 8007188:	0801e904 	.word	0x0801e904
 800718c:	0801e844 	.word	0x0801e844

08007190 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007190:	b5b0      	push	{r4, r5, r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007196:	4b3c      	ldr	r3, [pc, #240]	@ (8007288 <Meas_Upkeep+0xf8>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b06      	cmp	r3, #6
 800719c:	d868      	bhi.n	8007270 <Meas_Upkeep+0xe0>
 800719e:	009a      	lsls	r2, r3, #2
 80071a0:	4b3a      	ldr	r3, [pc, #232]	@ (800728c <Meas_Upkeep+0xfc>)
 80071a2:	18d3      	adds	r3, r2, r3
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 80071a8:	4a39      	ldr	r2, [pc, #228]	@ (8007290 <Meas_Upkeep+0x100>)
 80071aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007294 <Meas_Upkeep+0x104>)
 80071ac:	0019      	movs	r1, r3
 80071ae:	2003      	movs	r0, #3
 80071b0:	f003 fdac 	bl	800ad0c <CreateLine>
    break;
 80071b4:	e063      	b.n	800727e <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80071b6:	f7ff fe7d 	bl	8006eb4 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80071ba:	4b33      	ldr	r3, [pc, #204]	@ (8007288 <Meas_Upkeep+0xf8>)
 80071bc:	2201      	movs	r2, #1
 80071be:	701a      	strb	r2, [r3, #0]
    break;
 80071c0:	e05d      	b.n	800727e <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80071c2:	f7ff fdfd 	bl	8006dc0 <StartMeasurements>
    SetMeasurementIndicator();
 80071c6:	f002 fec9 	bl	8009f5c <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80071ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007288 <Meas_Upkeep+0xf8>)
 80071cc:	2202      	movs	r2, #2
 80071ce:	701a      	strb	r2, [r3, #0]
   break;
 80071d0:	e055      	b.n	800727e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80071d2:	f7ff fe8b 	bl	8006eec <MeasurementsCompleted>
 80071d6:	1e03      	subs	r3, r0, #0
 80071d8:	d04e      	beq.n	8007278 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80071da:	4b2b      	ldr	r3, [pc, #172]	@ (8007288 <Meas_Upkeep+0xf8>)
 80071dc:	2203      	movs	r2, #3
 80071de:	701a      	strb	r2, [r3, #0]
    }
    break;
 80071e0:	e04a      	b.n	8007278 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 80071e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007298 <Meas_Upkeep+0x108>)
 80071e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007294 <Meas_Upkeep+0x104>)
 80071e6:	0019      	movs	r1, r3
 80071e8:	2003      	movs	r0, #3
 80071ea:	f003 fd8f 	bl	800ad0c <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 80071ee:	4b2b      	ldr	r3, [pc, #172]	@ (800729c <Meas_Upkeep+0x10c>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	4a2b      	ldr	r2, [pc, #172]	@ (80072a0 <Meas_Upkeep+0x110>)
 80071f4:	4927      	ldr	r1, [pc, #156]	@ (8007294 <Meas_Upkeep+0x104>)
 80071f6:	2003      	movs	r0, #3
 80071f8:	f003 fd88 	bl	800ad0c <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 80071fc:	4b27      	ldr	r3, [pc, #156]	@ (800729c <Meas_Upkeep+0x10c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	1c18      	adds	r0, r3, #0
 8007202:	f7fc f925 	bl	8003450 <__aeabi_f2d>
 8007206:	0004      	movs	r4, r0
 8007208:	000d      	movs	r5, r1
 800720a:	4b24      	ldr	r3, [pc, #144]	@ (800729c <Meas_Upkeep+0x10c>)
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	1c18      	adds	r0, r3, #0
 8007210:	f7fc f91e 	bl	8003450 <__aeabi_f2d>
 8007214:	0002      	movs	r2, r0
 8007216:	000b      	movs	r3, r1
 8007218:	4822      	ldr	r0, [pc, #136]	@ (80072a4 <Meas_Upkeep+0x114>)
 800721a:	491e      	ldr	r1, [pc, #120]	@ (8007294 <Meas_Upkeep+0x104>)
 800721c:	9202      	str	r2, [sp, #8]
 800721e:	9303      	str	r3, [sp, #12]
 8007220:	9400      	str	r4, [sp, #0]
 8007222:	9501      	str	r5, [sp, #4]
 8007224:	0002      	movs	r2, r0
 8007226:	2003      	movs	r0, #3
 8007228:	f003 fd70 	bl	800ad0c <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 800722c:	4b1b      	ldr	r3, [pc, #108]	@ (800729c <Meas_Upkeep+0x10c>)
 800722e:	6858      	ldr	r0, [r3, #4]
 8007230:	4b1a      	ldr	r3, [pc, #104]	@ (800729c <Meas_Upkeep+0x10c>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	4b19      	ldr	r3, [pc, #100]	@ (800729c <Meas_Upkeep+0x10c>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	b29b      	uxth	r3, r3
 800723a:	001a      	movs	r2, r3
 800723c:	f7fc fb38 	bl	80038b0 <setMeasurement>
    ResetMeasurementIndicator();
 8007240:	f002 fea4 	bl	8009f8c <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007244:	f004 f904 	bl	800b450 <HAL_GetTick>
 8007248:	0003      	movs	r3, r0
 800724a:	4a17      	ldr	r2, [pc, #92]	@ (80072a8 <Meas_Upkeep+0x118>)
 800724c:	189a      	adds	r2, r3, r2
 800724e:	4b17      	ldr	r3, [pc, #92]	@ (80072ac <Meas_Upkeep+0x11c>)
 8007250:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007252:	4b0d      	ldr	r3, [pc, #52]	@ (8007288 <Meas_Upkeep+0xf8>)
 8007254:	2206      	movs	r2, #6
 8007256:	701a      	strb	r2, [r3, #0]
    break;
 8007258:	e011      	b.n	800727e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 800725a:	4b14      	ldr	r3, [pc, #80]	@ (80072ac <Meas_Upkeep+0x11c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	0018      	movs	r0, r3
 8007260:	f003 fcfe 	bl	800ac60 <TimestampIsReached>
 8007264:	1e03      	subs	r3, r0, #0
 8007266:	d009      	beq.n	800727c <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007268:	4b07      	ldr	r3, [pc, #28]	@ (8007288 <Meas_Upkeep+0xf8>)
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
    }

    break;
 800726e:	e005      	b.n	800727c <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007270:	4b05      	ldr	r3, [pc, #20]	@ (8007288 <Meas_Upkeep+0xf8>)
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
    break;
 8007276:	e002      	b.n	800727e <Meas_Upkeep+0xee>
    break;
 8007278:	46c0      	nop			@ (mov r8, r8)
 800727a:	e000      	b.n	800727e <Meas_Upkeep+0xee>
    break;
 800727c:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 800727e:	4b02      	ldr	r3, [pc, #8]	@ (8007288 <Meas_Upkeep+0xf8>)
 8007280:	781b      	ldrb	r3, [r3, #0]
}
 8007282:	0018      	movs	r0, r3
 8007284:	46bd      	mov	sp, r7
 8007286:	bdb0      	pop	{r4, r5, r7, pc}
 8007288:	20000eeb 	.word	0x20000eeb
 800728c:	0801f110 	.word	0x0801f110
 8007290:	0801e924 	.word	0x0801e924
 8007294:	0801e844 	.word	0x0801e844
 8007298:	0801e944 	.word	0x0801e944
 800729c:	20000e84 	.word	0x20000e84
 80072a0:	0801e958 	.word	0x0801e958
 80072a4:	0801e970 	.word	0x0801e970
 80072a8:	00002710 	.word	0x00002710
 80072ac:	20000ed0 	.word	0x20000ed0

080072b0 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80072b0:	b590      	push	{r4, r7, lr}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	1d3b      	adds	r3, r7, #4
 80072b8:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80072ba:	240f      	movs	r4, #15
 80072bc:	193b      	adds	r3, r7, r4
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80072c2:	4b20      	ldr	r3, [pc, #128]	@ (8007344 <Meas_SetEnabledSensors+0x94>)
 80072c4:	1d3a      	adds	r2, r7, #4
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80072ca:	193b      	adds	r3, r7, r4
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	193a      	adds	r2, r7, r4
 80072d0:	1c59      	adds	r1, r3, #1
 80072d2:	7011      	strb	r1, [r2, #0]
 80072d4:	0018      	movs	r0, r3
 80072d6:	1d3b      	adds	r3, r7, #4
 80072d8:	7819      	ldrb	r1, [r3, #0]
 80072da:	4a1b      	ldr	r2, [pc, #108]	@ (8007348 <Meas_SetEnabledSensors+0x98>)
 80072dc:	0103      	lsls	r3, r0, #4
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	330c      	adds	r3, #12
 80072e2:	1c0a      	adds	r2, r1, #0
 80072e4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80072e6:	193b      	adds	r3, r7, r4
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	193a      	adds	r2, r7, r4
 80072ec:	1c59      	adds	r1, r3, #1
 80072ee:	7011      	strb	r1, [r2, #0]
 80072f0:	0018      	movs	r0, r3
 80072f2:	1d3b      	adds	r3, r7, #4
 80072f4:	7859      	ldrb	r1, [r3, #1]
 80072f6:	4a14      	ldr	r2, [pc, #80]	@ (8007348 <Meas_SetEnabledSensors+0x98>)
 80072f8:	0103      	lsls	r3, r0, #4
 80072fa:	18d3      	adds	r3, r2, r3
 80072fc:	330c      	adds	r3, #12
 80072fe:	1c0a      	adds	r2, r1, #0
 8007300:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007302:	193b      	adds	r3, r7, r4
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	193a      	adds	r2, r7, r4
 8007308:	1c59      	adds	r1, r3, #1
 800730a:	7011      	strb	r1, [r2, #0]
 800730c:	0018      	movs	r0, r3
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	7899      	ldrb	r1, [r3, #2]
 8007312:	4a0d      	ldr	r2, [pc, #52]	@ (8007348 <Meas_SetEnabledSensors+0x98>)
 8007314:	0103      	lsls	r3, r0, #4
 8007316:	18d3      	adds	r3, r2, r3
 8007318:	330c      	adds	r3, #12
 800731a:	1c0a      	adds	r2, r1, #0
 800731c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 800731e:	193b      	adds	r3, r7, r4
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	193a      	adds	r2, r7, r4
 8007324:	1c59      	adds	r1, r3, #1
 8007326:	7011      	strb	r1, [r2, #0]
 8007328:	0018      	movs	r0, r3
 800732a:	1d3b      	adds	r3, r7, #4
 800732c:	78d9      	ldrb	r1, [r3, #3]
 800732e:	4a06      	ldr	r2, [pc, #24]	@ (8007348 <Meas_SetEnabledSensors+0x98>)
 8007330:	0103      	lsls	r3, r0, #4
 8007332:	18d3      	adds	r3, r2, r3
 8007334:	330c      	adds	r3, #12
 8007336:	1c0a      	adds	r2, r1, #0
 8007338:	701a      	strb	r2, [r3, #0]
}
 800733a:	46c0      	nop			@ (mov r8, r8)
 800733c:	46bd      	mov	sp, r7
 800733e:	b005      	add	sp, #20
 8007340:	bd90      	pop	{r4, r7, pc}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	20000ec4 	.word	0x20000ec4
 8007348:	20000e94 	.word	0x20000e94

0800734c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007350:	4b02      	ldr	r3, [pc, #8]	@ (800735c <SetESPMeasurementDone+0x10>)
 8007352:	2201      	movs	r2, #1
 8007354:	70da      	strb	r2, [r3, #3]
}
 8007356:	46c0      	nop			@ (mov r8, r8)
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000ec8 	.word	0x20000ec8

08007360 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007366:	4b81      	ldr	r3, [pc, #516]	@ (800756c <MIC_Print+0x20c>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b81      	ldr	r3, [pc, #516]	@ (8007570 <MIC_Print+0x210>)
 800736c:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 800736e:	4b81      	ldr	r3, [pc, #516]	@ (8007574 <MIC_Print+0x214>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b09      	cmp	r3, #9
 8007374:	d80e      	bhi.n	8007394 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007376:	4b7f      	ldr	r3, [pc, #508]	@ (8007574 <MIC_Print+0x214>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	001a      	movs	r2, r3
 800737c:	4b7c      	ldr	r3, [pc, #496]	@ (8007570 <MIC_Print+0x210>)
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	4b7d      	ldr	r3, [pc, #500]	@ (8007578 <MIC_Print+0x218>)
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007386:	4b7b      	ldr	r3, [pc, #492]	@ (8007574 <MIC_Print+0x214>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	b2da      	uxtb	r2, r3
 800738e:	4b79      	ldr	r3, [pc, #484]	@ (8007574 <MIC_Print+0x214>)
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	e013      	b.n	80073bc <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007394:	4b77      	ldr	r3, [pc, #476]	@ (8007574 <MIC_Print+0x214>)
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 800739a:	4b76      	ldr	r3, [pc, #472]	@ (8007574 <MIC_Print+0x214>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	001a      	movs	r2, r3
 80073a0:	4b73      	ldr	r3, [pc, #460]	@ (8007570 <MIC_Print+0x210>)
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	4b74      	ldr	r3, [pc, #464]	@ (8007578 <MIC_Print+0x218>)
 80073a6:	0092      	lsls	r2, r2, #2
 80073a8:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80073aa:	4b72      	ldr	r3, [pc, #456]	@ (8007574 <MIC_Print+0x214>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	4b70      	ldr	r3, [pc, #448]	@ (8007574 <MIC_Print+0x214>)
 80073b4:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 80073b6:	4b71      	ldr	r3, [pc, #452]	@ (800757c <MIC_Print+0x21c>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 80073bc:	4b6f      	ldr	r3, [pc, #444]	@ (800757c <MIC_Print+0x21c>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2201      	movs	r2, #1
 80073c2:	4053      	eors	r3, r2
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 80073ca:	4b69      	ldr	r3, [pc, #420]	@ (8007570 <MIC_Print+0x210>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1c18      	adds	r0, r3, #0
 80073d0:	f7fc fa8a 	bl	80038e8 <setMic>
 80073d4:	e02d      	b.n	8007432 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 80073d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007580 <MIC_Print+0x220>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 80073dc:	1dfb      	adds	r3, r7, #7
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e013      	b.n	800740c <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 80073e4:	1dfb      	adds	r3, r7, #7
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	4b63      	ldr	r3, [pc, #396]	@ (8007578 <MIC_Print+0x218>)
 80073ea:	0092      	lsls	r2, r2, #2
 80073ec:	58d2      	ldr	r2, [r2, r3]
 80073ee:	4b64      	ldr	r3, [pc, #400]	@ (8007580 <MIC_Print+0x220>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	1c19      	adds	r1, r3, #0
 80073f4:	1c10      	adds	r0, r2, #0
 80073f6:	f7f9 fa59 	bl	80008ac <__aeabi_fadd>
 80073fa:	1c03      	adds	r3, r0, #0
 80073fc:	1c1a      	adds	r2, r3, #0
 80073fe:	4b60      	ldr	r3, [pc, #384]	@ (8007580 <MIC_Print+0x220>)
 8007400:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007402:	1dfb      	adds	r3, r7, #7
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	1dfb      	adds	r3, r7, #7
 8007408:	3201      	adds	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	1dfb      	adds	r3, r7, #7
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b09      	cmp	r3, #9
 8007412:	d9e7      	bls.n	80073e4 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8007414:	4b5a      	ldr	r3, [pc, #360]	@ (8007580 <MIC_Print+0x220>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	495a      	ldr	r1, [pc, #360]	@ (8007584 <MIC_Print+0x224>)
 800741a:	1c18      	adds	r0, r3, #0
 800741c:	f7f9 fbd0 	bl	8000bc0 <__aeabi_fdiv>
 8007420:	1c03      	adds	r3, r0, #0
 8007422:	1c1a      	adds	r2, r3, #0
 8007424:	4b56      	ldr	r3, [pc, #344]	@ (8007580 <MIC_Print+0x220>)
 8007426:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007428:	4b55      	ldr	r3, [pc, #340]	@ (8007580 <MIC_Print+0x220>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	1c18      	adds	r0, r3, #0
 800742e:	f7fc fa5b 	bl	80038e8 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 90){ //white
 8007432:	4b4f      	ldr	r3, [pc, #316]	@ (8007570 <MIC_Print+0x210>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4954      	ldr	r1, [pc, #336]	@ (8007588 <MIC_Print+0x228>)
 8007438:	1c18      	adds	r0, r3, #0
 800743a:	f7f9 f883 	bl	8000544 <__aeabi_fcmpgt>
 800743e:	1e03      	subs	r3, r0, #0
 8007440:	d004      	beq.n	800744c <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8007442:	2201      	movs	r2, #1
 8007444:	2101      	movs	r1, #1
 8007446:	2001      	movs	r0, #1
 8007448:	f002 fd0a 	bl	8009e60 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 800744c:	4b48      	ldr	r3, [pc, #288]	@ (8007570 <MIC_Print+0x210>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	494d      	ldr	r1, [pc, #308]	@ (8007588 <MIC_Print+0x228>)
 8007452:	1c18      	adds	r0, r3, #0
 8007454:	f7f9 f862 	bl	800051c <__aeabi_fcmplt>
 8007458:	1e03      	subs	r3, r0, #0
 800745a:	d00c      	beq.n	8007476 <MIC_Print+0x116>
 800745c:	4b44      	ldr	r3, [pc, #272]	@ (8007570 <MIC_Print+0x210>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	494a      	ldr	r1, [pc, #296]	@ (800758c <MIC_Print+0x22c>)
 8007462:	1c18      	adds	r0, r3, #0
 8007464:	f7f9 f878 	bl	8000558 <__aeabi_fcmpge>
 8007468:	1e03      	subs	r3, r0, #0
 800746a:	d004      	beq.n	8007476 <MIC_Print+0x116>
    SetDBLED(true, false, false);
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	2001      	movs	r0, #1
 8007472:	f002 fcf5 	bl	8009e60 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//purple
 8007476:	4b3e      	ldr	r3, [pc, #248]	@ (8007570 <MIC_Print+0x210>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4944      	ldr	r1, [pc, #272]	@ (800758c <MIC_Print+0x22c>)
 800747c:	1c18      	adds	r0, r3, #0
 800747e:	f7f9 f84d 	bl	800051c <__aeabi_fcmplt>
 8007482:	1e03      	subs	r3, r0, #0
 8007484:	d00c      	beq.n	80074a0 <MIC_Print+0x140>
 8007486:	4b3a      	ldr	r3, [pc, #232]	@ (8007570 <MIC_Print+0x210>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4941      	ldr	r1, [pc, #260]	@ (8007590 <MIC_Print+0x230>)
 800748c:	1c18      	adds	r0, r3, #0
 800748e:	f7f9 f863 	bl	8000558 <__aeabi_fcmpge>
 8007492:	1e03      	subs	r3, r0, #0
 8007494:	d004      	beq.n	80074a0 <MIC_Print+0x140>
    SetDBLED(true, false, true);
 8007496:	2201      	movs	r2, #1
 8007498:	2100      	movs	r1, #0
 800749a:	2001      	movs	r0, #1
 800749c:	f002 fce0 	bl	8009e60 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//yellow
 80074a0:	4b33      	ldr	r3, [pc, #204]	@ (8007570 <MIC_Print+0x210>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	493a      	ldr	r1, [pc, #232]	@ (8007590 <MIC_Print+0x230>)
 80074a6:	1c18      	adds	r0, r3, #0
 80074a8:	f7f9 f838 	bl	800051c <__aeabi_fcmplt>
 80074ac:	1e03      	subs	r3, r0, #0
 80074ae:	d00c      	beq.n	80074ca <MIC_Print+0x16a>
 80074b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007570 <MIC_Print+0x210>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4937      	ldr	r1, [pc, #220]	@ (8007594 <MIC_Print+0x234>)
 80074b6:	1c18      	adds	r0, r3, #0
 80074b8:	f7f9 f84e 	bl	8000558 <__aeabi_fcmpge>
 80074bc:	1e03      	subs	r3, r0, #0
 80074be:	d004      	beq.n	80074ca <MIC_Print+0x16a>
    SetDBLED(true, true, false);
 80074c0:	2200      	movs	r2, #0
 80074c2:	2101      	movs	r1, #1
 80074c4:	2001      	movs	r0, #1
 80074c6:	f002 fccb 	bl	8009e60 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//Green
 80074ca:	4b29      	ldr	r3, [pc, #164]	@ (8007570 <MIC_Print+0x210>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4931      	ldr	r1, [pc, #196]	@ (8007594 <MIC_Print+0x234>)
 80074d0:	1c18      	adds	r0, r3, #0
 80074d2:	f7f9 f823 	bl	800051c <__aeabi_fcmplt>
 80074d6:	1e03      	subs	r3, r0, #0
 80074d8:	d00c      	beq.n	80074f4 <MIC_Print+0x194>
 80074da:	4b25      	ldr	r3, [pc, #148]	@ (8007570 <MIC_Print+0x210>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	492e      	ldr	r1, [pc, #184]	@ (8007598 <MIC_Print+0x238>)
 80074e0:	1c18      	adds	r0, r3, #0
 80074e2:	f7f9 f839 	bl	8000558 <__aeabi_fcmpge>
 80074e6:	1e03      	subs	r3, r0, #0
 80074e8:	d004      	beq.n	80074f4 <MIC_Print+0x194>
    SetDBLED(false, true, false);
 80074ea:	2200      	movs	r2, #0
 80074ec:	2101      	movs	r1, #1
 80074ee:	2000      	movs	r0, #0
 80074f0:	f002 fcb6 	bl	8009e60 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//blue
 80074f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007570 <MIC_Print+0x210>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4927      	ldr	r1, [pc, #156]	@ (8007598 <MIC_Print+0x238>)
 80074fa:	1c18      	adds	r0, r3, #0
 80074fc:	f7f9 f80e 	bl	800051c <__aeabi_fcmplt>
 8007500:	1e03      	subs	r3, r0, #0
 8007502:	d00c      	beq.n	800751e <MIC_Print+0x1be>
 8007504:	4b1a      	ldr	r3, [pc, #104]	@ (8007570 <MIC_Print+0x210>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4924      	ldr	r1, [pc, #144]	@ (800759c <MIC_Print+0x23c>)
 800750a:	1c18      	adds	r0, r3, #0
 800750c:	f7f9 f824 	bl	8000558 <__aeabi_fcmpge>
 8007510:	1e03      	subs	r3, r0, #0
 8007512:	d004      	beq.n	800751e <MIC_Print+0x1be>
    SetDBLED(false, false, true);
 8007514:	2201      	movs	r2, #1
 8007516:	2100      	movs	r1, #0
 8007518:	2000      	movs	r0, #0
 800751a:	f002 fca1 	bl	8009e60 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//light blue
 800751e:	4b14      	ldr	r3, [pc, #80]	@ (8007570 <MIC_Print+0x210>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	491e      	ldr	r1, [pc, #120]	@ (800759c <MIC_Print+0x23c>)
 8007524:	1c18      	adds	r0, r3, #0
 8007526:	f7f8 fff9 	bl	800051c <__aeabi_fcmplt>
 800752a:	1e03      	subs	r3, r0, #0
 800752c:	d00c      	beq.n	8007548 <MIC_Print+0x1e8>
 800752e:	4b10      	ldr	r3, [pc, #64]	@ (8007570 <MIC_Print+0x210>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	491b      	ldr	r1, [pc, #108]	@ (80075a0 <MIC_Print+0x240>)
 8007534:	1c18      	adds	r0, r3, #0
 8007536:	f7f9 f80f 	bl	8000558 <__aeabi_fcmpge>
 800753a:	1e03      	subs	r3, r0, #0
 800753c:	d004      	beq.n	8007548 <MIC_Print+0x1e8>
    SetDBLED(false, true, true);
 800753e:	2201      	movs	r2, #1
 8007540:	2101      	movs	r1, #1
 8007542:	2000      	movs	r0, #0
 8007544:	f002 fc8c 	bl	8009e60 <SetDBLED>
  }
  if(dBc < 35){//off
 8007548:	4b09      	ldr	r3, [pc, #36]	@ (8007570 <MIC_Print+0x210>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4914      	ldr	r1, [pc, #80]	@ (80075a0 <MIC_Print+0x240>)
 800754e:	1c18      	adds	r0, r3, #0
 8007550:	f7f8 ffe4 	bl	800051c <__aeabi_fcmplt>
 8007554:	1e03      	subs	r3, r0, #0
 8007556:	d100      	bne.n	800755a <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }


  //FFT();
}
 8007558:	e004      	b.n	8007564 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	2000      	movs	r0, #0
 8007560:	f002 fc7e 	bl	8009e60 <SetDBLED>
}
 8007564:	46c0      	nop			@ (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	b002      	add	sp, #8
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20000f1c 	.word	0x20000f1c
 8007570:	20000eec 	.word	0x20000eec
 8007574:	20000f20 	.word	0x20000f20
 8007578:	20000ef0 	.word	0x20000ef0
 800757c:	20000f21 	.word	0x20000f21
 8007580:	20000f18 	.word	0x20000f18
 8007584:	41200000 	.word	0x41200000
 8007588:	42b40000 	.word	0x42b40000
 800758c:	42a00000 	.word	0x42a00000
 8007590:	428c0000 	.word	0x428c0000
 8007594:	42700000 	.word	0x42700000
 8007598:	42480000 	.word	0x42480000
 800759c:	42200000 	.word	0x42200000
 80075a0:	420c0000 	.word	0x420c0000

080075a4 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80075aa:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <MIC_TestMeasurementDone+0x4c>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	4a10      	ldr	r2, [pc, #64]	@ (80075f4 <MIC_TestMeasurementDone+0x50>)
 80075b2:	4911      	ldr	r1, [pc, #68]	@ (80075f8 <MIC_TestMeasurementDone+0x54>)
 80075b4:	2002      	movs	r0, #2
 80075b6:	f003 fba9 	bl	800ad0c <CreateLine>
  if(DataReady) {
 80075ba:	4b0d      	ldr	r3, [pc, #52]	@ (80075f0 <MIC_TestMeasurementDone+0x4c>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d010      	beq.n	80075e6 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 80075c4:	1dfb      	adds	r3, r7, #7
 80075c6:	4a0d      	ldr	r2, [pc, #52]	@ (80075fc <MIC_TestMeasurementDone+0x58>)
 80075c8:	7812      	ldrb	r2, [r2, #0]
 80075ca:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80075cc:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <MIC_TestMeasurementDone+0x58>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	4a0b      	ldr	r2, [pc, #44]	@ (8007600 <MIC_TestMeasurementDone+0x5c>)
 80075d4:	4908      	ldr	r1, [pc, #32]	@ (80075f8 <MIC_TestMeasurementDone+0x54>)
 80075d6:	2002      	movs	r0, #2
 80075d8:	f003 fb98 	bl	800ad0c <CreateLine>
    ResetMICIndicator();
 80075dc:	f002 fd04 	bl	8009fe8 <ResetMICIndicator>
    return Check;
 80075e0:	1dfb      	adds	r3, r7, #7
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	e000      	b.n	80075e8 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	0018      	movs	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b002      	add	sp, #8
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	2000120c 	.word	0x2000120c
 80075f4:	0801e9a4 	.word	0x0801e9a4
 80075f8:	0801e9d0 	.word	0x0801e9d0
 80075fc:	2000120d 	.word	0x2000120d
 8007600:	0801e9d4 	.word	0x0801e9d4

08007604 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8007604:	b40f      	push	{r0, r1, r2, r3}
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 800760c:	2314      	movs	r3, #20
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	2180      	movs	r1, #128	@ 0x80
 8007618:	0089      	lsls	r1, r1, #2
 800761a:	480a      	ldr	r0, [pc, #40]	@ (8007644 <print+0x40>)
 800761c:	f013 fd56 	bl	801b0cc <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8007620:	4b08      	ldr	r3, [pc, #32]	@ (8007644 <print+0x40>)
 8007622:	0018      	movs	r0, r3
 8007624:	f7f8 fd98 	bl	8000158 <strlen>
 8007628:	0003      	movs	r3, r0
 800762a:	b29a      	uxth	r2, r3
 800762c:	4b05      	ldr	r3, [pc, #20]	@ (8007644 <print+0x40>)
 800762e:	0011      	movs	r1, r2
 8007630:	0018      	movs	r0, r3
 8007632:	f7ff fa43 	bl	8006abc <printString>
}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	b002      	add	sp, #8
 800763c:	bc80      	pop	{r7}
 800763e:	bc08      	pop	{r3}
 8007640:	b004      	add	sp, #16
 8007642:	4718      	bx	r3
 8007644:	20000f24 	.word	0x20000f24

08007648 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800764c:	4b16      	ldr	r3, [pc, #88]	@ (80076a8 <MX_RTC_Init+0x60>)
 800764e:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <MX_RTC_Init+0x64>)
 8007650:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007652:	4b15      	ldr	r3, [pc, #84]	@ (80076a8 <MX_RTC_Init+0x60>)
 8007654:	2200      	movs	r2, #0
 8007656:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007658:	4b13      	ldr	r3, [pc, #76]	@ (80076a8 <MX_RTC_Init+0x60>)
 800765a:	227f      	movs	r2, #127	@ 0x7f
 800765c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800765e:	4b12      	ldr	r3, [pc, #72]	@ (80076a8 <MX_RTC_Init+0x60>)
 8007660:	22ff      	movs	r2, #255	@ 0xff
 8007662:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007664:	4b10      	ldr	r3, [pc, #64]	@ (80076a8 <MX_RTC_Init+0x60>)
 8007666:	2200      	movs	r2, #0
 8007668:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800766a:	4b0f      	ldr	r3, [pc, #60]	@ (80076a8 <MX_RTC_Init+0x60>)
 800766c:	2200      	movs	r2, #0
 800766e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007670:	4b0d      	ldr	r3, [pc, #52]	@ (80076a8 <MX_RTC_Init+0x60>)
 8007672:	2200      	movs	r2, #0
 8007674:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007676:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <MX_RTC_Init+0x60>)
 8007678:	2200      	movs	r2, #0
 800767a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800767c:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <MX_RTC_Init+0x60>)
 800767e:	0018      	movs	r0, r3
 8007680:	f00a fa38 	bl	8011af4 <HAL_RTC_Init>
 8007684:	1e03      	subs	r3, r0, #0
 8007686:	d001      	beq.n	800768c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007688:	f7ff fa30 	bl	8006aec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800768c:	4b06      	ldr	r3, [pc, #24]	@ (80076a8 <MX_RTC_Init+0x60>)
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	0018      	movs	r0, r3
 8007694:	f00a fc2c 	bl	8011ef0 <HAL_RTCEx_SetWakeUpTimer>
 8007698:	1e03      	subs	r3, r0, #0
 800769a:	d001      	beq.n	80076a0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800769c:	f7ff fa26 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80076a0:	46c0      	nop			@ (mov r8, r8)
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	20001124 	.word	0x20001124
 80076ac:	40002800 	.word	0x40002800

080076b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a06      	ldr	r2, [pc, #24]	@ (80076d8 <HAL_RTC_MspInit+0x28>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d106      	bne.n	80076d0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80076c2:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <HAL_RTC_MspInit+0x2c>)
 80076c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076c6:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <HAL_RTC_MspInit+0x2c>)
 80076c8:	2180      	movs	r1, #128	@ 0x80
 80076ca:	02c9      	lsls	r1, r1, #11
 80076cc:	430a      	orrs	r2, r1
 80076ce:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80076d0:	46c0      	nop			@ (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40002800 	.word	0x40002800
 80076dc:	40021000 	.word	0x40021000

080076e0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d113      	bne.n	8007726 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	22fe      	movs	r2, #254	@ 0xfe
 8007702:	0592      	lsls	r2, r2, #22
 8007704:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a1a      	ldr	r2, [pc, #104]	@ (8007774 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800770a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a1a      	ldr	r2, [pc, #104]	@ (8007778 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007710:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a19      	ldr	r2, [pc, #100]	@ (800777c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8007716:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4a19      	ldr	r2, [pc, #100]	@ (8007780 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800771c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a18      	ldr	r2, [pc, #96]	@ (8007784 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8007722:	61da      	str	r2, [r3, #28]
 8007724:	e011      	b.n	800774a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a17      	ldr	r2, [pc, #92]	@ (8007788 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800772a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4a17      	ldr	r2, [pc, #92]	@ (800778c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8007730:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a16      	ldr	r2, [pc, #88]	@ (8007790 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8007736:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a16      	ldr	r2, [pc, #88]	@ (8007794 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800773c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8007742:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4a15      	ldr	r2, [pc, #84]	@ (800779c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007748:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4a14      	ldr	r2, [pc, #80]	@ (80077a0 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800774e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a14      	ldr	r2, [pc, #80]	@ (80077a4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007754:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4a12      	ldr	r2, [pc, #72]	@ (80077a4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800775a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a12      	ldr	r2, [pc, #72]	@ (80077a8 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8007760:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	0018      	movs	r0, r3
 8007766:	f000 f831 	bl	80077cc <GasIndexAlgorithm_reset>
}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b004      	add	sp, #16
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	00002710 	.word	0x00002710
 8007778:	44340000 	.word	0x44340000
 800777c:	46859800 	.word	0x46859800
 8007780:	46a05000 	.word	0x46a05000
 8007784:	41f00000 	.word	0x41f00000
 8007788:	42c80000 	.word	0x42c80000
 800778c:	00004e20 	.word	0x00004e20
 8007790:	43340000 	.word	0x43340000
 8007794:	4528c000 	.word	0x4528c000
 8007798:	45a32000 	.word	0x45a32000
 800779c:	43aa0000 	.word	0x43aa0000
 80077a0:	43660000 	.word	0x43660000
 80077a4:	41400000 	.word	0x41400000
 80077a8:	42480000 	.word	0x42480000

080077ac <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80077b6:	22fe      	movs	r2, #254	@ 0xfe
 80077b8:	0592      	lsls	r2, r2, #22
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	0018      	movs	r0, r3
 80077c0:	f7ff ff8e 	bl	80076e0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80077c4:	46c0      	nop			@ (mov r8, r8)
 80077c6:	46bd      	mov	sp, r7
 80077c8:	b002      	add	sp, #8
 80077ca:	bd80      	pop	{r7, pc}

080077cc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	0018      	movs	r0, r3
 80077ea:	f000 f805 	bl	80077f8 <GasIndexAlgorithm__init_instances>
}
 80077ee:	46c0      	nop			@ (mov r8, r8)
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b002      	add	sp, #8
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	0018      	movs	r0, r3
 8007804:	f000 f8e8 	bl	80079d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	0018      	movs	r0, r3
 800780c:	f000 f9a6 	bl	8007b5c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007810:	1c04      	adds	r4, r0, #0
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	0018      	movs	r0, r3
 8007816:	f000 f9ab 	bl	8007b70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800781a:	1c02      	adds	r2, r0, #0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	1c21      	adds	r1, r4, #0
 8007820:	0018      	movs	r0, r3
 8007822:	f000 fc3b 	bl	800809c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d107      	bne.n	800783e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800782e:	23fe      	movs	r3, #254	@ 0xfe
 8007830:	059b      	lsls	r3, r3, #22
 8007832:	4a0a      	ldr	r2, [pc, #40]	@ (800785c <GasIndexAlgorithm__init_instances+0x64>)
 8007834:	490a      	ldr	r1, [pc, #40]	@ (8007860 <GasIndexAlgorithm__init_instances+0x68>)
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fc86 	bl	8008148 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800783c:	e005      	b.n	800784a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800783e:	4b09      	ldr	r3, [pc, #36]	@ (8007864 <GasIndexAlgorithm__init_instances+0x6c>)
 8007840:	4a09      	ldr	r2, [pc, #36]	@ (8007868 <GasIndexAlgorithm__init_instances+0x70>)
 8007842:	490a      	ldr	r1, [pc, #40]	@ (800786c <GasIndexAlgorithm__init_instances+0x74>)
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc7f 	bl	8008148 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	0018      	movs	r0, r3
 800784e:	f000 fd35 	bl	80082bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8007852:	46c0      	nop			@ (mov r8, r8)
 8007854:	46bd      	mov	sp, r7
 8007856:	b003      	add	sp, #12
 8007858:	bd90      	pop	{r4, r7, pc}
 800785a:	46c0      	nop			@ (mov r8, r8)
 800785c:	bc257a78 	.word	0xbc257a78
 8007860:	44198000 	.word	0x44198000
 8007864:	42c80000 	.word	0x42c80000
 8007868:	bbd4fdf4 	.word	0xbbd4fdf4
 800786c:	43550000 	.word	0x43550000

08007870 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8007870:	b590      	push	{r4, r7, lr}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007880:	4952      	ldr	r1, [pc, #328]	@ (80079cc <GasIndexAlgorithm_process+0x15c>)
 8007882:	1c18      	adds	r0, r3, #0
 8007884:	f7f8 fe54 	bl	8000530 <__aeabi_fcmple>
 8007888:	1e03      	subs	r3, r0, #0
 800788a:	d00c      	beq.n	80078a6 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	1c19      	adds	r1, r3, #0
 8007896:	1c10      	adds	r0, r2, #0
 8007898:	f7f9 f808 	bl	80008ac <__aeabi_fadd>
 800789c:	1c03      	adds	r3, r0, #0
 800789e:	1c1a      	adds	r2, r3, #0
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80078a4:	e080      	b.n	80079a8 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dd25      	ble.n	80078f8 <GasIndexAlgorithm_process+0x88>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4a48      	ldr	r2, [pc, #288]	@ (80079d0 <GasIndexAlgorithm_process+0x160>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	dc21      	bgt.n	80078f8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	dc04      	bgt.n	80078c8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	3301      	adds	r3, #1
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	e00d      	b.n	80078e4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4a41      	ldr	r2, [pc, #260]	@ (80079d4 <GasIndexAlgorithm_process+0x164>)
 80078ce:	4694      	mov	ip, r2
 80078d0:	4463      	add	r3, ip
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	dd05      	ble.n	80078e4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	4a3d      	ldr	r2, [pc, #244]	@ (80079d4 <GasIndexAlgorithm_process+0x164>)
 80078de:	4694      	mov	ip, r2
 80078e0:	4463      	add	r3, ip
 80078e2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	0018      	movs	r0, r3
 80078ee:	f7f9 fe65 	bl	80015bc <__aeabi_i2f>
 80078f2:	1c02      	adds	r2, r0, #0
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	0018      	movs	r0, r3
 8007904:	f000 f945 	bl	8007b92 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8007908:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800790a:	d014      	beq.n	8007936 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	1c11      	adds	r1, r2, #0
 8007914:	0018      	movs	r0, r3
 8007916:	f000 fbd1 	bl	80080bc <GasIndexAlgorithm__mox_model__process>
 800791a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	1c11      	adds	r1, r2, #0
 8007928:	0018      	movs	r0, r3
 800792a:	f000 fc25 	bl	8008178 <GasIndexAlgorithm__sigmoid_scaled__process>
 800792e:	1c02      	adds	r2, r0, #0
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
 8007934:	e003      	b.n	800793e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	1c11      	adds	r1, r2, #0
 8007946:	0018      	movs	r0, r3
 8007948:	f000 fcec 	bl	8008324 <GasIndexAlgorithm__adaptive_lowpass__process>
 800794c:	1c02      	adds	r2, r0, #0
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007956:	21fc      	movs	r1, #252	@ 0xfc
 8007958:	0589      	lsls	r1, r1, #22
 800795a:	1c18      	adds	r0, r3, #0
 800795c:	f7f8 fdde 	bl	800051c <__aeabi_fcmplt>
 8007960:	1e03      	subs	r3, r0, #0
 8007962:	d003      	beq.n	800796c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	22fc      	movs	r2, #252	@ 0xfc
 8007968:	0592      	lsls	r2, r2, #22
 800796a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007970:	2100      	movs	r1, #0
 8007972:	1c18      	adds	r0, r3, #0
 8007974:	f7f8 fde6 	bl	8000544 <__aeabi_fcmpgt>
 8007978:	1e03      	subs	r3, r0, #0
 800797a:	d015      	beq.n	80079a8 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	1c11      	adds	r1, r2, #0
 8007984:	0018      	movs	r0, r3
 8007986:	f000 fa4f 	bl	8007e28 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	0018      	movs	r0, r3
 800798e:	f000 f8e5 	bl	8007b5c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007992:	1c04      	adds	r4, r0, #0
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	0018      	movs	r0, r3
 8007998:	f000 f8ea 	bl	8007b70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800799c:	1c02      	adds	r2, r0, #0
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	1c21      	adds	r1, r4, #0
 80079a2:	0018      	movs	r0, r3
 80079a4:	f000 fb7a 	bl	800809c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ac:	21fc      	movs	r1, #252	@ 0xfc
 80079ae:	0589      	lsls	r1, r1, #22
 80079b0:	1c18      	adds	r0, r3, #0
 80079b2:	f7f8 ff7b 	bl	80008ac <__aeabi_fadd>
 80079b6:	1c03      	adds	r3, r0, #0
 80079b8:	1c18      	adds	r0, r3, #0
 80079ba:	f7f9 fddf 	bl	800157c <__aeabi_f2iz>
 80079be:	0002      	movs	r2, r0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
    return;
 80079c4:	46c0      	nop			@ (mov r8, r8)
}
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b005      	add	sp, #20
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	42340000 	.word	0x42340000
 80079d0:	0000fde7 	.word	0x0000fde7
 80079d4:	00007fff 	.word	0x00007fff

080079d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80079d8:	b5b0      	push	{r4, r5, r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	223c      	movs	r2, #60	@ 0x3c
 80079e4:	2100      	movs	r1, #0
 80079e6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4952      	ldr	r1, [pc, #328]	@ (8007b4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a02:	1c18      	adds	r0, r3, #0
 8007a04:	f7f9 f8dc 	bl	8000bc0 <__aeabi_fdiv>
 8007a08:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007a0a:	2188      	movs	r1, #136	@ 0x88
 8007a0c:	05c9      	lsls	r1, r1, #23
 8007a0e:	1c18      	adds	r0, r3, #0
 8007a10:	f7f9 fabc 	bl	8000f8c <__aeabi_fmul>
 8007a14:	1c03      	adds	r3, r0, #0
 8007a16:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	494a      	ldr	r1, [pc, #296]	@ (8007b4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a22:	1c18      	adds	r0, r3, #0
 8007a24:	f7f9 f8cc 	bl	8000bc0 <__aeabi_fdiv>
 8007a28:	1c03      	adds	r3, r0, #0
 8007a2a:	1c19      	adds	r1, r3, #0
 8007a2c:	1c20      	adds	r0, r4, #0
 8007a2e:	f7f8 ff3d 	bl	80008ac <__aeabi_fadd>
 8007a32:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007a34:	1c19      	adds	r1, r3, #0
 8007a36:	1c28      	adds	r0, r5, #0
 8007a38:	f7f9 f8c2 	bl	8000bc0 <__aeabi_fdiv>
 8007a3c:	1c03      	adds	r3, r0, #0
 8007a3e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	4940      	ldr	r1, [pc, #256]	@ (8007b4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a4a:	1c18      	adds	r0, r3, #0
 8007a4c:	f7f9 f8b8 	bl	8000bc0 <__aeabi_fdiv>
 8007a50:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007a52:	2185      	movs	r1, #133	@ 0x85
 8007a54:	05c9      	lsls	r1, r1, #23
 8007a56:	1c18      	adds	r0, r3, #0
 8007a58:	f7f9 fa98 	bl	8000f8c <__aeabi_fmul>
 8007a5c:	1c03      	adds	r3, r0, #0
 8007a5e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4938      	ldr	r1, [pc, #224]	@ (8007b4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007a6a:	1c18      	adds	r0, r3, #0
 8007a6c:	f7f9 f8a8 	bl	8000bc0 <__aeabi_fdiv>
 8007a70:	1c03      	adds	r3, r0, #0
 8007a72:	1c19      	adds	r1, r3, #0
 8007a74:	1c20      	adds	r0, r4, #0
 8007a76:	f7f8 ff19 	bl	80008ac <__aeabi_fadd>
 8007a7a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007a7c:	1c19      	adds	r1, r3, #0
 8007a7e:	1c28      	adds	r0, r5, #0
 8007a80:	f7f9 f89e 	bl	8000bc0 <__aeabi_fdiv>
 8007a84:	1c03      	adds	r3, r0, #0
 8007a86:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d118      	bne.n	8007ac6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007a98:	2188      	movs	r1, #136	@ 0x88
 8007a9a:	05c9      	lsls	r1, r1, #23
 8007a9c:	1c18      	adds	r0, r3, #0
 8007a9e:	f7f9 fa75 	bl	8000f8c <__aeabi_fmul>
 8007aa2:	1c03      	adds	r3, r0, #0
 8007aa4:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8007aaa:	4929      	ldr	r1, [pc, #164]	@ (8007b50 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8007aac:	1c18      	adds	r0, r3, #0
 8007aae:	f7f8 fefd 	bl	80008ac <__aeabi_fadd>
 8007ab2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007ab4:	1c19      	adds	r1, r3, #0
 8007ab6:	1c20      	adds	r0, r4, #0
 8007ab8:	f7f9 f882 	bl	8000bc0 <__aeabi_fdiv>
 8007abc:	1c03      	adds	r3, r0, #0
 8007abe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54
 8007ac4:	e017      	b.n	8007af6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007aca:	2188      	movs	r1, #136	@ 0x88
 8007acc:	05c9      	lsls	r1, r1, #23
 8007ace:	1c18      	adds	r0, r3, #0
 8007ad0:	f7f9 fa5c 	bl	8000f8c <__aeabi_fmul>
 8007ad4:	1c03      	adds	r3, r0, #0
 8007ad6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007adc:	491d      	ldr	r1, [pc, #116]	@ (8007b54 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8007ade:	1c18      	adds	r0, r3, #0
 8007ae0:	f7f8 fee4 	bl	80008ac <__aeabi_fadd>
 8007ae4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007ae6:	1c19      	adds	r1, r3, #0
 8007ae8:	1c20      	adds	r0, r4, #0
 8007aea:	f7f9 f869 	bl	8000bc0 <__aeabi_fdiv>
 8007aee:	1c03      	adds	r3, r0, #0
 8007af0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007afa:	2185      	movs	r1, #133	@ 0x85
 8007afc:	05c9      	lsls	r1, r1, #23
 8007afe:	1c18      	adds	r0, r3, #0
 8007b00:	f7f9 fa44 	bl	8000f8c <__aeabi_fmul>
 8007b04:	1c03      	adds	r3, r0, #0
 8007b06:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4912      	ldr	r1, [pc, #72]	@ (8007b58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8007b0e:	1c18      	adds	r0, r3, #0
 8007b10:	f7f8 fecc 	bl	80008ac <__aeabi_fadd>
 8007b14:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8007b16:	1c19      	adds	r1, r3, #0
 8007b18:	1c20      	adds	r0, r4, #0
 8007b1a:	f7f9 f851 	bl	8000bc0 <__aeabi_fdiv>
 8007b1e:	1c03      	adds	r3, r0, #0
 8007b20:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007b44:	46c0      	nop			@ (mov r8, r8)
 8007b46:	46bd      	mov	sp, r7
 8007b48:	b002      	add	sp, #8
 8007b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b4c:	45610000 	.word	0x45610000
 8007b50:	44960000 	.word	0x44960000
 8007b54:	41a00000 	.word	0x41a00000
 8007b58:	451c4000 	.word	0x451c4000

08007b5c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007b68:	1c18      	adds	r0, r3, #0
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8007b80:	1c19      	adds	r1, r3, #0
 8007b82:	1c10      	adds	r0, r2, #0
 8007b84:	f7f8 fe92 	bl	80008ac <__aeabi_fadd>
 8007b88:	1c03      	adds	r3, r0, #0
}
 8007b8a:	1c18      	adds	r0, r3, #0
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	b002      	add	sp, #8
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	223c      	movs	r2, #60	@ 0x3c
 8007b9e:	5c9b      	ldrb	r3, [r3, r2]
}
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	b002      	add	sp, #8
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007ba8:	b5b0      	push	{r4, r5, r7, lr}
 8007baa:	b08c      	sub	sp, #48	@ 0x30
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8007bb4:	1c19      	adds	r1, r3, #0
 8007bb6:	4895      	ldr	r0, [pc, #596]	@ (8007e0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007bb8:	f7f9 fb26 	bl	8001208 <__aeabi_fsub>
 8007bbc:	1c03      	adds	r3, r0, #0
 8007bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bc4:	1c19      	adds	r1, r3, #0
 8007bc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bc8:	f7f8 fcbc 	bl	8000544 <__aeabi_fcmpgt>
 8007bcc:	1e03      	subs	r3, r0, #0
 8007bce:	d00b      	beq.n	8007be8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007bd8:	1c19      	adds	r1, r3, #0
 8007bda:	1c10      	adds	r0, r2, #0
 8007bdc:	f7f8 fe66 	bl	80008ac <__aeabi_fadd>
 8007be0:	1c03      	adds	r3, r0, #0
 8007be2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bec:	1c19      	adds	r1, r3, #0
 8007bee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bf0:	f7f8 fca8 	bl	8000544 <__aeabi_fcmpgt>
 8007bf4:	1e03      	subs	r3, r0, #0
 8007bf6:	d00b      	beq.n	8007c10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007c00:	1c19      	adds	r1, r3, #0
 8007c02:	1c10      	adds	r0, r2, #0
 8007c04:	f7f8 fe52 	bl	80008ac <__aeabi_fadd>
 8007c08:	1c03      	adds	r3, r0, #0
 8007c0a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6959      	ldr	r1, [r3, #20]
 8007c14:	4a7e      	ldr	r2, [pc, #504]	@ (8007e10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f000 f9f1 	bl	8008000 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	1c11      	adds	r1, r2, #0
 8007c26:	0018      	movs	r0, r3
 8007c28:	f000 f9fa 	bl	8008020 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007c2c:	1c03      	adds	r3, r0, #0
 8007c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007c3c:	1c19      	adds	r1, r3, #0
 8007c3e:	1c10      	adds	r0, r2, #0
 8007c40:	f7f9 fae2 	bl	8001208 <__aeabi_fsub>
 8007c44:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c48:	1c18      	adds	r0, r3, #0
 8007c4a:	f7f9 f99f 	bl	8000f8c <__aeabi_fmul>
 8007c4e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007c50:	1c19      	adds	r1, r3, #0
 8007c52:	1c20      	adds	r0, r4, #0
 8007c54:	f7f8 fe2a 	bl	80008ac <__aeabi_fadd>
 8007c58:	1c03      	adds	r3, r0, #0
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007c64:	1c19      	adds	r1, r3, #0
 8007c66:	486b      	ldr	r0, [pc, #428]	@ (8007e14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007c68:	f7f9 face 	bl	8001208 <__aeabi_fsub>
 8007c6c:	1c03      	adds	r3, r0, #0
 8007c6e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	1c11      	adds	r1, r2, #0
 8007c78:	0018      	movs	r0, r3
 8007c7a:	f000 f9d1 	bl	8008020 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007c7e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007c80:	1c19      	adds	r1, r3, #0
 8007c82:	1c28      	adds	r0, r5, #0
 8007c84:	f7f9 f982 	bl	8000f8c <__aeabi_fmul>
 8007c88:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007c8a:	1c19      	adds	r1, r3, #0
 8007c8c:	1c20      	adds	r0, r4, #0
 8007c8e:	f7f8 fe0d 	bl	80008ac <__aeabi_fadd>
 8007c92:	1c03      	adds	r3, r0, #0
 8007c94:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007c96:	4a60      	ldr	r2, [pc, #384]	@ (8007e18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007c98:	6a39      	ldr	r1, [r7, #32]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f000 f9af 	bl	8008000 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	1c11      	adds	r1, r2, #0
 8007caa:	0018      	movs	r0, r3
 8007cac:	f000 f9b8 	bl	8008020 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007cb0:	1c03      	adds	r3, r0, #0
 8007cb2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cb6:	69f8      	ldr	r0, [r7, #28]
 8007cb8:	f7f9 f968 	bl	8000f8c <__aeabi_fmul>
 8007cbc:	1c03      	adds	r3, r0, #0
 8007cbe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6999      	ldr	r1, [r3, #24]
 8007cc8:	4a51      	ldr	r2, [pc, #324]	@ (8007e10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f000 f997 	bl	8008000 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	1c11      	adds	r1, r2, #0
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f000 f9a0 	bl	8008020 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007ce0:	1c03      	adds	r3, r0, #0
 8007ce2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007cf0:	1c19      	adds	r1, r3, #0
 8007cf2:	1c10      	adds	r0, r2, #0
 8007cf4:	f7f9 fa88 	bl	8001208 <__aeabi_fsub>
 8007cf8:	1c03      	adds	r3, r0, #0
 8007cfa:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cfe:	69b8      	ldr	r0, [r7, #24]
 8007d00:	f7f9 fa82 	bl	8001208 <__aeabi_fsub>
 8007d04:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007d06:	1c19      	adds	r1, r3, #0
 8007d08:	1c28      	adds	r0, r5, #0
 8007d0a:	f7f9 f93f 	bl	8000f8c <__aeabi_fmul>
 8007d0e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007d10:	1c19      	adds	r1, r3, #0
 8007d12:	1c20      	adds	r0, r4, #0
 8007d14:	f7f8 fdca 	bl	80008ac <__aeabi_fadd>
 8007d18:	1c03      	adds	r3, r0, #0
 8007d1a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007d24:	1c19      	adds	r1, r3, #0
 8007d26:	483b      	ldr	r0, [pc, #236]	@ (8007e14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007d28:	f7f9 fa6e 	bl	8001208 <__aeabi_fsub>
 8007d2c:	1c03      	adds	r3, r0, #0
 8007d2e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	1c11      	adds	r1, r2, #0
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f000 f971 	bl	8008020 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007d3e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007d40:	1c19      	adds	r1, r3, #0
 8007d42:	1c28      	adds	r0, r5, #0
 8007d44:	f7f9 f922 	bl	8000f8c <__aeabi_fmul>
 8007d48:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007d4a:	1c19      	adds	r1, r3, #0
 8007d4c:	1c20      	adds	r0, r4, #0
 8007d4e:	f7f8 fdad 	bl	80008ac <__aeabi_fadd>
 8007d52:	1c03      	adds	r3, r0, #0
 8007d54:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007d56:	4a30      	ldr	r2, [pc, #192]	@ (8007e18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007d58:	6939      	ldr	r1, [r7, #16]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f000 f94f 	bl	8008000 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	1c11      	adds	r1, r2, #0
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f000 f958 	bl	8008020 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007d70:	1c03      	adds	r3, r0, #0
 8007d72:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007d74:	6979      	ldr	r1, [r7, #20]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7f9 f908 	bl	8000f8c <__aeabi_fmul>
 8007d7c:	1c03      	adds	r3, r0, #0
 8007d7e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	4923      	ldr	r1, [pc, #140]	@ (8007e1c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007d8e:	1c18      	adds	r0, r3, #0
 8007d90:	f7f8 ff16 	bl	8000bc0 <__aeabi_fdiv>
 8007d94:	1c03      	adds	r3, r0, #0
 8007d96:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007d98:	69f9      	ldr	r1, [r7, #28]
 8007d9a:	20fe      	movs	r0, #254	@ 0xfe
 8007d9c:	0580      	lsls	r0, r0, #22
 8007d9e:	f7f9 fa33 	bl	8001208 <__aeabi_fsub>
 8007da2:	1c03      	adds	r3, r0, #0
 8007da4:	491e      	ldr	r1, [pc, #120]	@ (8007e20 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007da6:	1c18      	adds	r0, r3, #0
 8007da8:	f7f9 f8f0 	bl	8000f8c <__aeabi_fmul>
 8007dac:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007dae:	491d      	ldr	r1, [pc, #116]	@ (8007e24 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007db0:	1c18      	adds	r0, r3, #0
 8007db2:	f7f9 fa29 	bl	8001208 <__aeabi_fsub>
 8007db6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007db8:	1c19      	adds	r1, r3, #0
 8007dba:	1c28      	adds	r0, r5, #0
 8007dbc:	f7f9 f8e6 	bl	8000f8c <__aeabi_fmul>
 8007dc0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007dc2:	1c19      	adds	r1, r3, #0
 8007dc4:	1c20      	adds	r0, r4, #0
 8007dc6:	f7f8 fd71 	bl	80008ac <__aeabi_fadd>
 8007dca:	1c03      	adds	r3, r0, #0
 8007dcc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	1c18      	adds	r0, r3, #0
 8007dda:	f7f8 fb9f 	bl	800051c <__aeabi_fcmplt>
 8007dde:	1e03      	subs	r3, r0, #0
 8007de0:	d002      	beq.n	8007de8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007df0:	1c19      	adds	r1, r3, #0
 8007df2:	1c10      	adds	r0, r2, #0
 8007df4:	f7f8 fba6 	bl	8000544 <__aeabi_fcmpgt>
 8007df8:	1e03      	subs	r3, r0, #0
 8007dfa:	d100      	bne.n	8007dfe <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007dfc:	e002      	b.n	8007e04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e04:	46c0      	nop			@ (mov r8, r8)
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b00c      	add	sp, #48	@ 0x30
 8007e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e0c:	46fffe00 	.word	0x46fffe00
 8007e10:	3c23d70a 	.word	0x3c23d70a
 8007e14:	43ff0000 	.word	0x43ff0000
 8007e18:	3db851ec 	.word	0x3db851ec
 8007e1c:	42700000 	.word	0x42700000
 8007e20:	3fa66666 	.word	0x3fa66666
 8007e24:	3e99999a 	.word	0x3e99999a

08007e28 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	223c      	movs	r2, #60	@ 0x3c
 8007e36:	5c9b      	ldrb	r3, [r3, r2]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4053      	eors	r3, r2
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	223c      	movs	r2, #60	@ 0x3c
 8007e46:	2101      	movs	r1, #1
 8007e48:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007e56:	e0c8      	b.n	8007fea <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5c:	4965      	ldr	r1, [pc, #404]	@ (8007ff4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007e5e:	1c18      	adds	r0, r3, #0
 8007e60:	f7f8 fb7a 	bl	8000558 <__aeabi_fcmpge>
 8007e64:	1e03      	subs	r3, r0, #0
 8007e66:	d107      	bne.n	8007e78 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007e6c:	4962      	ldr	r1, [pc, #392]	@ (8007ff8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007e6e:	1c18      	adds	r0, r3, #0
 8007e70:	f7f8 fb5e 	bl	8000530 <__aeabi_fcmple>
 8007e74:	1e03      	subs	r3, r0, #0
 8007e76:	d00e      	beq.n	8007e96 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007e80:	1c19      	adds	r1, r3, #0
 8007e82:	1c10      	adds	r0, r2, #0
 8007e84:	f7f8 fd12 	bl	80008ac <__aeabi_fadd>
 8007e88:	1c03      	adds	r3, r0, #0
 8007e8a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9a:	1c19      	adds	r1, r3, #0
 8007e9c:	6838      	ldr	r0, [r7, #0]
 8007e9e:	f7f9 f9b3 	bl	8001208 <__aeabi_fsub>
 8007ea2:	1c03      	adds	r3, r0, #0
 8007ea4:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f7ff fe7d 	bl	8007ba8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb2:	1c19      	adds	r1, r3, #0
 8007eb4:	6838      	ldr	r0, [r7, #0]
 8007eb6:	f7f9 f9a7 	bl	8001208 <__aeabi_fsub>
 8007eba:	1c03      	adds	r3, r0, #0
 8007ebc:	2185      	movs	r1, #133	@ 0x85
 8007ebe:	05c9      	lsls	r1, r1, #23
 8007ec0:	1c18      	adds	r0, r3, #0
 8007ec2:	f7f8 fe7d 	bl	8000bc0 <__aeabi_fdiv>
 8007ec6:	1c03      	adds	r3, r0, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007eca:	2100      	movs	r1, #0
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7f8 fb25 	bl	800051c <__aeabi_fcmplt>
 8007ed2:	1e03      	subs	r3, r0, #0
 8007ed4:	d008      	beq.n	8007ee8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	1c18      	adds	r0, r3, #0
 8007ede:	f7f9 f993 	bl	8001208 <__aeabi_fsub>
 8007ee2:	1c03      	adds	r3, r0, #0
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	e007      	b.n	8007ef8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eec:	1c19      	adds	r1, r3, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7f8 fcdc 	bl	80008ac <__aeabi_fadd>
 8007ef4:	1c03      	adds	r3, r0, #0
 8007ef6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007ef8:	23fe      	movs	r3, #254	@ 0xfe
 8007efa:	059b      	lsls	r3, r3, #22
 8007efc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007efe:	493f      	ldr	r1, [pc, #252]	@ (8007ffc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007f00:	6978      	ldr	r0, [r7, #20]
 8007f02:	f7f8 fb1f 	bl	8000544 <__aeabi_fcmpgt>
 8007f06:	1e03      	subs	r3, r0, #0
 8007f08:	d010      	beq.n	8007f2c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007f0a:	493c      	ldr	r1, [pc, #240]	@ (8007ffc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007f0c:	6978      	ldr	r0, [r7, #20]
 8007f0e:	f7f8 fe57 	bl	8000bc0 <__aeabi_fdiv>
 8007f12:	1c03      	adds	r3, r0, #0
 8007f14:	1c1c      	adds	r4, r3, #0
 8007f16:	4939      	ldr	r1, [pc, #228]	@ (8007ffc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007f18:	6978      	ldr	r0, [r7, #20]
 8007f1a:	f7f8 fe51 	bl	8000bc0 <__aeabi_fdiv>
 8007f1e:	1c03      	adds	r3, r0, #0
 8007f20:	1c19      	adds	r1, r3, #0
 8007f22:	1c20      	adds	r0, r4, #0
 8007f24:	f7f9 f832 	bl	8000f8c <__aeabi_fmul>
 8007f28:	1c03      	adds	r3, r0, #0
 8007f2a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007f30:	1c19      	adds	r1, r3, #0
 8007f32:	2085      	movs	r0, #133	@ 0x85
 8007f34:	05c0      	lsls	r0, r0, #23
 8007f36:	f7f9 f967 	bl	8001208 <__aeabi_fsub>
 8007f3a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007f3c:	6939      	ldr	r1, [r7, #16]
 8007f3e:	1c18      	adds	r0, r3, #0
 8007f40:	f7f9 f824 	bl	8000f8c <__aeabi_fmul>
 8007f44:	1c03      	adds	r3, r0, #0
 8007f46:	1c18      	adds	r0, r3, #0
 8007f48:	f015 ff38 	bl	801ddbc <sqrtf>
 8007f4c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007f56:	2185      	movs	r1, #133	@ 0x85
 8007f58:	05c9      	lsls	r1, r1, #23
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f7f9 f816 	bl	8000f8c <__aeabi_fmul>
 8007f60:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007f62:	1c19      	adds	r1, r3, #0
 8007f64:	1c28      	adds	r0, r5, #0
 8007f66:	f7f8 fe2b 	bl	8000bc0 <__aeabi_fdiv>
 8007f6a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007f6c:	1c19      	adds	r1, r3, #0
 8007f6e:	1c20      	adds	r0, r4, #0
 8007f70:	f7f9 f80c 	bl	8000f8c <__aeabi_fmul>
 8007f74:	1c03      	adds	r3, r0, #0
 8007f76:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f7c:	68f9      	ldr	r1, [r7, #12]
 8007f7e:	1c18      	adds	r0, r3, #0
 8007f80:	f7f9 f804 	bl	8000f8c <__aeabi_fmul>
 8007f84:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007f86:	6939      	ldr	r1, [r7, #16]
 8007f88:	1c18      	adds	r0, r3, #0
 8007f8a:	f7f8 fe19 	bl	8000bc0 <__aeabi_fdiv>
 8007f8e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007f90:	68f9      	ldr	r1, [r7, #12]
 8007f92:	1c18      	adds	r0, r3, #0
 8007f94:	f7f8 fffa 	bl	8000f8c <__aeabi_fmul>
 8007f98:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007f9a:	1c19      	adds	r1, r3, #0
 8007f9c:	1c20      	adds	r0, r4, #0
 8007f9e:	f7f8 fc85 	bl	80008ac <__aeabi_fadd>
 8007fa2:	1c03      	adds	r3, r0, #0
 8007fa4:	1c18      	adds	r0, r3, #0
 8007fa6:	f015 ff09 	bl	801ddbc <sqrtf>
 8007faa:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007fac:	1c19      	adds	r1, r3, #0
 8007fae:	1c30      	adds	r0, r6, #0
 8007fb0:	f7f8 ffec 	bl	8000f8c <__aeabi_fmul>
 8007fb4:	1c03      	adds	r3, r0, #0
 8007fb6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fc4:	68f9      	ldr	r1, [r7, #12]
 8007fc6:	1c18      	adds	r0, r3, #0
 8007fc8:	f7f8 ffe0 	bl	8000f8c <__aeabi_fmul>
 8007fcc:	1c03      	adds	r3, r0, #0
 8007fce:	2182      	movs	r1, #130	@ 0x82
 8007fd0:	05c9      	lsls	r1, r1, #23
 8007fd2:	1c18      	adds	r0, r3, #0
 8007fd4:	f7f8 fdf4 	bl	8000bc0 <__aeabi_fdiv>
 8007fd8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007fda:	1c19      	adds	r1, r3, #0
 8007fdc:	1c20      	adds	r0, r4, #0
 8007fde:	f7f8 fc65 	bl	80008ac <__aeabi_fadd>
 8007fe2:	1c03      	adds	r3, r0, #0
 8007fe4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007fea:	46c0      	nop			@ (mov r8, r8)
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b007      	add	sp, #28
 8007ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	42c80000 	.word	0x42c80000
 8007ff8:	c2c80000 	.word	0xc2c80000
 8007ffc:	44b40000 	.word	0x44b40000

08008000 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008018:	46c0      	nop			@ (mov r8, r8)
 800801a:	46bd      	mov	sp, r7
 800801c:	b004      	add	sp, #16
 800801e:	bd80      	pop	{r7, pc}

08008020 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8008020:	b590      	push	{r4, r7, lr}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008032:	1c19      	adds	r1, r3, #0
 8008034:	6838      	ldr	r0, [r7, #0]
 8008036:	f7f9 f8e7 	bl	8001208 <__aeabi_fsub>
 800803a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800803c:	1c19      	adds	r1, r3, #0
 800803e:	1c20      	adds	r0, r4, #0
 8008040:	f7f8 ffa4 	bl	8000f8c <__aeabi_fmul>
 8008044:	1c03      	adds	r3, r0, #0
 8008046:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8008048:	4912      	ldr	r1, [pc, #72]	@ (8008094 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7f8 fa66 	bl	800051c <__aeabi_fcmplt>
 8008050:	1e03      	subs	r3, r0, #0
 8008052:	d002      	beq.n	800805a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8008054:	23fe      	movs	r3, #254	@ 0xfe
 8008056:	059b      	lsls	r3, r3, #22
 8008058:	e018      	b.n	800808c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800805a:	490f      	ldr	r1, [pc, #60]	@ (8008098 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7f8 fa71 	bl	8000544 <__aeabi_fcmpgt>
 8008062:	1e03      	subs	r3, r0, #0
 8008064:	d001      	beq.n	800806a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8008066:	2300      	movs	r3, #0
 8008068:	e010      	b.n	800808c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1c18      	adds	r0, r3, #0
 800806e:	f015 fe7d 	bl	801dd6c <expf>
 8008072:	1c03      	adds	r3, r0, #0
 8008074:	21fe      	movs	r1, #254	@ 0xfe
 8008076:	0589      	lsls	r1, r1, #22
 8008078:	1c18      	adds	r0, r3, #0
 800807a:	f7f8 fc17 	bl	80008ac <__aeabi_fadd>
 800807e:	1c03      	adds	r3, r0, #0
 8008080:	1c19      	adds	r1, r3, #0
 8008082:	20fe      	movs	r0, #254	@ 0xfe
 8008084:	0580      	lsls	r0, r0, #22
 8008086:	f7f8 fd9b 	bl	8000bc0 <__aeabi_fdiv>
 800808a:	1c03      	adds	r3, r0, #0
    }
}
 800808c:	1c18      	adds	r0, r3, #0
 800808e:	46bd      	mov	sp, r7
 8008090:	b005      	add	sp, #20
 8008092:	bd90      	pop	{r4, r7, pc}
 8008094:	c2480000 	.word	0xc2480000
 8008098:	42480000 	.word	0x42480000

0800809c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80080b4:	46c0      	nop			@ (mov r8, r8)
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b004      	add	sp, #16
 80080ba:	bd80      	pop	{r7, pc}

080080bc <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80080bc:	b590      	push	{r4, r7, lr}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d114      	bne.n	80080f8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080d2:	1c19      	adds	r1, r3, #0
 80080d4:	6838      	ldr	r0, [r7, #0]
 80080d6:	f7f9 f897 	bl	8001208 <__aeabi_fsub>
 80080da:	1c03      	adds	r3, r0, #0
 80080dc:	4918      	ldr	r1, [pc, #96]	@ (8008140 <GasIndexAlgorithm__mox_model__process+0x84>)
 80080de:	1c18      	adds	r0, r3, #0
 80080e0:	f7f8 fd6e 	bl	8000bc0 <__aeabi_fdiv>
 80080e4:	1c03      	adds	r3, r0, #0
 80080e6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80080ec:	1c19      	adds	r1, r3, #0
 80080ee:	1c10      	adds	r0, r2, #0
 80080f0:	f7f8 ff4c 	bl	8000f8c <__aeabi_fmul>
 80080f4:	1c03      	adds	r3, r0, #0
 80080f6:	e01f      	b.n	8008138 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080fc:	1c19      	adds	r1, r3, #0
 80080fe:	6838      	ldr	r0, [r7, #0]
 8008100:	f7f9 f882 	bl	8001208 <__aeabi_fsub>
 8008104:	1c03      	adds	r3, r0, #0
 8008106:	1c1a      	adds	r2, r3, #0
 8008108:	2380      	movs	r3, #128	@ 0x80
 800810a:	061b      	lsls	r3, r3, #24
 800810c:	4053      	eors	r3, r2
 800810e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008114:	490b      	ldr	r1, [pc, #44]	@ (8008144 <GasIndexAlgorithm__mox_model__process+0x88>)
 8008116:	1c18      	adds	r0, r3, #0
 8008118:	f7f8 fbc8 	bl	80008ac <__aeabi_fadd>
 800811c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800811e:	1c19      	adds	r1, r3, #0
 8008120:	1c20      	adds	r0, r4, #0
 8008122:	f7f8 fd4d 	bl	8000bc0 <__aeabi_fdiv>
 8008126:	1c03      	adds	r3, r0, #0
 8008128:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800812e:	1c19      	adds	r1, r3, #0
 8008130:	1c10      	adds	r0, r2, #0
 8008132:	f7f8 ff2b 	bl	8000f8c <__aeabi_fmul>
 8008136:	1c03      	adds	r3, r0, #0
    }
}
 8008138:	1c18      	adds	r0, r3, #0
 800813a:	46bd      	mov	sp, r7
 800813c:	b003      	add	sp, #12
 800813e:	bd90      	pop	{r4, r7, pc}
 8008140:	44fa0000 	.word	0x44fa0000
 8008144:	435c0000 	.word	0x435c0000

08008148 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2180      	movs	r1, #128	@ 0x80
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2184      	movs	r1, #132	@ 0x84
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2188      	movs	r1, #136	@ 0x88
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	505a      	str	r2, [r3, r1]
}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	46bd      	mov	sp, r7
 8008172:	b004      	add	sp, #16
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8008178:	b590      	push	{r4, r7, lr}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2280      	movs	r2, #128	@ 0x80
 8008186:	589c      	ldr	r4, [r3, r2]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2284      	movs	r2, #132	@ 0x84
 800818c:	589b      	ldr	r3, [r3, r2]
 800818e:	1c19      	adds	r1, r3, #0
 8008190:	6838      	ldr	r0, [r7, #0]
 8008192:	f7f9 f839 	bl	8001208 <__aeabi_fsub>
 8008196:	1c03      	adds	r3, r0, #0
 8008198:	1c19      	adds	r1, r3, #0
 800819a:	1c20      	adds	r0, r4, #0
 800819c:	f7f8 fef6 	bl	8000f8c <__aeabi_fmul>
 80081a0:	1c03      	adds	r3, r0, #0
 80081a2:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80081a4:	4940      	ldr	r1, [pc, #256]	@ (80082a8 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80081a6:	68b8      	ldr	r0, [r7, #8]
 80081a8:	f7f8 f9b8 	bl	800051c <__aeabi_fcmplt>
 80081ac:	1e03      	subs	r3, r0, #0
 80081ae:	d001      	beq.n	80081b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80081b0:	4b3e      	ldr	r3, [pc, #248]	@ (80082ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80081b2:	e075      	b.n	80082a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80081b4:	493e      	ldr	r1, [pc, #248]	@ (80082b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80081b6:	68b8      	ldr	r0, [r7, #8]
 80081b8:	f7f8 f9c4 	bl	8000544 <__aeabi_fcmpgt>
 80081bc:	1e03      	subs	r3, r0, #0
 80081be:	d001      	beq.n	80081c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e06d      	b.n	80082a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80081c4:	2100      	movs	r1, #0
 80081c6:	6838      	ldr	r0, [r7, #0]
 80081c8:	f7f8 f9c6 	bl	8000558 <__aeabi_fcmpge>
 80081cc:	1e03      	subs	r3, r0, #0
 80081ce:	d047      	beq.n	8008260 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2288      	movs	r2, #136	@ 0x88
 80081d4:	589b      	ldr	r3, [r3, r2]
 80081d6:	21fe      	movs	r1, #254	@ 0xfe
 80081d8:	0589      	lsls	r1, r1, #22
 80081da:	1c18      	adds	r0, r3, #0
 80081dc:	f7f8 f998 	bl	8000510 <__aeabi_fcmpeq>
 80081e0:	1e03      	subs	r3, r0, #0
 80081e2:	d00e      	beq.n	8008202 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	1c19      	adds	r1, r3, #0
 80081ea:	20fe      	movs	r0, #254	@ 0xfe
 80081ec:	0580      	lsls	r0, r0, #22
 80081ee:	f7f9 f80b 	bl	8001208 <__aeabi_fsub>
 80081f2:	1c03      	adds	r3, r0, #0
 80081f4:	492f      	ldr	r1, [pc, #188]	@ (80082b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80081f6:	1c18      	adds	r0, r3, #0
 80081f8:	f7f8 fec8 	bl	8000f8c <__aeabi_fmul>
 80081fc:	1c03      	adds	r3, r0, #0
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	e012      	b.n	8008228 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	492c      	ldr	r1, [pc, #176]	@ (80082b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8008208:	1c18      	adds	r0, r3, #0
 800820a:	f7f8 febf 	bl	8000f8c <__aeabi_fmul>
 800820e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008210:	1c19      	adds	r1, r3, #0
 8008212:	4826      	ldr	r0, [pc, #152]	@ (80082ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008214:	f7f8 fff8 	bl	8001208 <__aeabi_fsub>
 8008218:	1c03      	adds	r3, r0, #0
 800821a:	2181      	movs	r1, #129	@ 0x81
 800821c:	05c9      	lsls	r1, r1, #23
 800821e:	1c18      	adds	r0, r3, #0
 8008220:	f7f8 fcce 	bl	8000bc0 <__aeabi_fdiv>
 8008224:	1c03      	adds	r3, r0, #0
 8008226:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008228:	4920      	ldr	r1, [pc, #128]	@ (80082ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7f8 fb3e 	bl	80008ac <__aeabi_fadd>
 8008230:	1c03      	adds	r3, r0, #0
 8008232:	1c1c      	adds	r4, r3, #0
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	1c18      	adds	r0, r3, #0
 8008238:	f015 fd98 	bl	801dd6c <expf>
 800823c:	1c03      	adds	r3, r0, #0
 800823e:	21fe      	movs	r1, #254	@ 0xfe
 8008240:	0589      	lsls	r1, r1, #22
 8008242:	1c18      	adds	r0, r3, #0
 8008244:	f7f8 fb32 	bl	80008ac <__aeabi_fadd>
 8008248:	1c03      	adds	r3, r0, #0
 800824a:	1c19      	adds	r1, r3, #0
 800824c:	1c20      	adds	r0, r4, #0
 800824e:	f7f8 fcb7 	bl	8000bc0 <__aeabi_fdiv>
 8008252:	1c03      	adds	r3, r0, #0
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	1c18      	adds	r0, r3, #0
 8008258:	f7f8 ffd6 	bl	8001208 <__aeabi_fsub>
 800825c:	1c03      	adds	r3, r0, #0
 800825e:	e01f      	b.n	80082a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2188      	movs	r1, #136	@ 0x88
 8008268:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800826a:	1c19      	adds	r1, r3, #0
 800826c:	1c10      	adds	r0, r2, #0
 800826e:	f7f8 fca7 	bl	8000bc0 <__aeabi_fdiv>
 8008272:	1c03      	adds	r3, r0, #0
 8008274:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	1c18      	adds	r0, r3, #0
 800827a:	f015 fd77 	bl	801dd6c <expf>
 800827e:	1c03      	adds	r3, r0, #0
 8008280:	21fe      	movs	r1, #254	@ 0xfe
 8008282:	0589      	lsls	r1, r1, #22
 8008284:	1c18      	adds	r0, r3, #0
 8008286:	f7f8 fb11 	bl	80008ac <__aeabi_fadd>
 800828a:	1c03      	adds	r3, r0, #0
 800828c:	1c19      	adds	r1, r3, #0
 800828e:	4807      	ldr	r0, [pc, #28]	@ (80082ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008290:	f7f8 fc96 	bl	8000bc0 <__aeabi_fdiv>
 8008294:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008296:	1c19      	adds	r1, r3, #0
 8008298:	1c20      	adds	r0, r4, #0
 800829a:	f7f8 fe77 	bl	8000f8c <__aeabi_fmul>
 800829e:	1c03      	adds	r3, r0, #0
        }
    }
}
 80082a0:	1c18      	adds	r0, r3, #0
 80082a2:	46bd      	mov	sp, r7
 80082a4:	b005      	add	sp, #20
 80082a6:	bd90      	pop	{r4, r7, pc}
 80082a8:	c2480000 	.word	0xc2480000
 80082ac:	43fa0000 	.word	0x43fa0000
 80082b0:	42480000 	.word	0x42480000
 80082b4:	3f8041ab 	.word	0x3f8041ab
 80082b8:	40a00000 	.word	0x40a00000

080082bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	4913      	ldr	r1, [pc, #76]	@ (800831c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80082ce:	1c18      	adds	r0, r3, #0
 80082d0:	f7f8 faec 	bl	80008ac <__aeabi_fadd>
 80082d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80082d6:	1c19      	adds	r1, r3, #0
 80082d8:	1c20      	adds	r0, r4, #0
 80082da:	f7f8 fc71 	bl	8000bc0 <__aeabi_fdiv>
 80082de:	1c03      	adds	r3, r0, #0
 80082e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	228c      	movs	r2, #140	@ 0x8c
 80082e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	490b      	ldr	r1, [pc, #44]	@ (8008320 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80082f2:	1c18      	adds	r0, r3, #0
 80082f4:	f7f8 fada 	bl	80008ac <__aeabi_fadd>
 80082f8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80082fa:	1c19      	adds	r1, r3, #0
 80082fc:	1c20      	adds	r0, r4, #0
 80082fe:	f7f8 fc5f 	bl	8000bc0 <__aeabi_fdiv>
 8008302:	1c03      	adds	r3, r0, #0
 8008304:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2290      	movs	r2, #144	@ 0x90
 800830a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2294      	movs	r2, #148	@ 0x94
 8008310:	2100      	movs	r1, #0
 8008312:	5499      	strb	r1, [r3, r2]
}
 8008314:	46c0      	nop			@ (mov r8, r8)
 8008316:	46bd      	mov	sp, r7
 8008318:	b003      	add	sp, #12
 800831a:	bd90      	pop	{r4, r7, pc}
 800831c:	41a00000 	.word	0x41a00000
 8008320:	43fa0000 	.word	0x43fa0000

08008324 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2294      	movs	r2, #148	@ 0x94
 8008332:	5c9b      	ldrb	r3, [r3, r2]
 8008334:	2201      	movs	r2, #1
 8008336:	4053      	eors	r3, r2
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00f      	beq.n	800835e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2198      	movs	r1, #152	@ 0x98
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	219c      	movs	r1, #156	@ 0x9c
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	21a0      	movs	r1, #160	@ 0xa0
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2294      	movs	r2, #148	@ 0x94
 800835a:	2101      	movs	r1, #1
 800835c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	228c      	movs	r2, #140	@ 0x8c
 8008362:	589b      	ldr	r3, [r3, r2]
 8008364:	1c19      	adds	r1, r3, #0
 8008366:	20fe      	movs	r0, #254	@ 0xfe
 8008368:	0580      	lsls	r0, r0, #22
 800836a:	f7f8 ff4d 	bl	8001208 <__aeabi_fsub>
 800836e:	1c03      	adds	r3, r0, #0
 8008370:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2298      	movs	r2, #152	@ 0x98
 8008376:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008378:	1c19      	adds	r1, r3, #0
 800837a:	f7f8 fe07 	bl	8000f8c <__aeabi_fmul>
 800837e:	1c03      	adds	r3, r0, #0
 8008380:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	228c      	movs	r2, #140	@ 0x8c
 8008386:	589b      	ldr	r3, [r3, r2]
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	1c18      	adds	r0, r3, #0
 800838c:	f7f8 fdfe 	bl	8000f8c <__aeabi_fmul>
 8008390:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8008392:	1c19      	adds	r1, r3, #0
 8008394:	1c20      	adds	r0, r4, #0
 8008396:	f7f8 fa89 	bl	80008ac <__aeabi_fadd>
 800839a:	1c03      	adds	r3, r0, #0
 800839c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2298      	movs	r2, #152	@ 0x98
 80083a2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2290      	movs	r2, #144	@ 0x90
 80083a8:	589b      	ldr	r3, [r3, r2]
 80083aa:	1c19      	adds	r1, r3, #0
 80083ac:	20fe      	movs	r0, #254	@ 0xfe
 80083ae:	0580      	lsls	r0, r0, #22
 80083b0:	f7f8 ff2a 	bl	8001208 <__aeabi_fsub>
 80083b4:	1c03      	adds	r3, r0, #0
 80083b6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	229c      	movs	r2, #156	@ 0x9c
 80083bc:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80083be:	1c19      	adds	r1, r3, #0
 80083c0:	f7f8 fde4 	bl	8000f8c <__aeabi_fmul>
 80083c4:	1c03      	adds	r3, r0, #0
 80083c6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2290      	movs	r2, #144	@ 0x90
 80083cc:	589b      	ldr	r3, [r3, r2]
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	1c18      	adds	r0, r3, #0
 80083d2:	f7f8 fddb 	bl	8000f8c <__aeabi_fmul>
 80083d6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80083d8:	1c19      	adds	r1, r3, #0
 80083da:	1c20      	adds	r0, r4, #0
 80083dc:	f7f8 fa66 	bl	80008ac <__aeabi_fadd>
 80083e0:	1c03      	adds	r3, r0, #0
 80083e2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	229c      	movs	r2, #156	@ 0x9c
 80083e8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2298      	movs	r2, #152	@ 0x98
 80083ee:	589a      	ldr	r2, [r3, r2]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	219c      	movs	r1, #156	@ 0x9c
 80083f4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80083f6:	1c19      	adds	r1, r3, #0
 80083f8:	1c10      	adds	r0, r2, #0
 80083fa:	f7f8 ff05 	bl	8001208 <__aeabi_fsub>
 80083fe:	1c03      	adds	r3, r0, #0
 8008400:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8008402:	2100      	movs	r1, #0
 8008404:	6978      	ldr	r0, [r7, #20]
 8008406:	f7f8 f889 	bl	800051c <__aeabi_fcmplt>
 800840a:	1e03      	subs	r3, r0, #0
 800840c:	d004      	beq.n	8008418 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2280      	movs	r2, #128	@ 0x80
 8008412:	0612      	lsls	r2, r2, #24
 8008414:	4053      	eors	r3, r2
 8008416:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008418:	4923      	ldr	r1, [pc, #140]	@ (80084a8 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800841a:	6978      	ldr	r0, [r7, #20]
 800841c:	f7f8 fdb6 	bl	8000f8c <__aeabi_fmul>
 8008420:	1c03      	adds	r3, r0, #0
 8008422:	1c18      	adds	r0, r3, #0
 8008424:	f015 fca2 	bl	801dd6c <expf>
 8008428:	1c03      	adds	r3, r0, #0
 800842a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800842c:	491f      	ldr	r1, [pc, #124]	@ (80084ac <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800842e:	6938      	ldr	r0, [r7, #16]
 8008430:	f7f8 fdac 	bl	8000f8c <__aeabi_fmul>
 8008434:	1c03      	adds	r3, r0, #0
 8008436:	491e      	ldr	r1, [pc, #120]	@ (80084b0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008438:	1c18      	adds	r0, r3, #0
 800843a:	f7f8 fa37 	bl	80008ac <__aeabi_fadd>
 800843e:	1c03      	adds	r3, r0, #0
 8008440:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685c      	ldr	r4, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	1c18      	adds	r0, r3, #0
 800844e:	f7f8 fa2d 	bl	80008ac <__aeabi_fadd>
 8008452:	1c03      	adds	r3, r0, #0
 8008454:	1c19      	adds	r1, r3, #0
 8008456:	1c20      	adds	r0, r4, #0
 8008458:	f7f8 fbb2 	bl	8000bc0 <__aeabi_fdiv>
 800845c:	1c03      	adds	r3, r0, #0
 800845e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	20fe      	movs	r0, #254	@ 0xfe
 8008464:	0580      	lsls	r0, r0, #22
 8008466:	f7f8 fecf 	bl	8001208 <__aeabi_fsub>
 800846a:	1c03      	adds	r3, r0, #0
 800846c:	1c18      	adds	r0, r3, #0
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	22a0      	movs	r2, #160	@ 0xa0
 8008472:	589b      	ldr	r3, [r3, r2]
 8008474:	1c19      	adds	r1, r3, #0
 8008476:	f7f8 fd89 	bl	8000f8c <__aeabi_fmul>
 800847a:	1c03      	adds	r3, r0, #0
 800847c:	1c1c      	adds	r4, r3, #0
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	68b8      	ldr	r0, [r7, #8]
 8008482:	f7f8 fd83 	bl	8000f8c <__aeabi_fmul>
 8008486:	1c03      	adds	r3, r0, #0
 8008488:	1c19      	adds	r1, r3, #0
 800848a:	1c20      	adds	r0, r4, #0
 800848c:	f7f8 fa0e 	bl	80008ac <__aeabi_fadd>
 8008490:	1c03      	adds	r3, r0, #0
 8008492:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	22a0      	movs	r2, #160	@ 0xa0
 8008498:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	22a0      	movs	r2, #160	@ 0xa0
 800849e:	589b      	ldr	r3, [r3, r2]
}
 80084a0:	1c18      	adds	r0, r3, #0
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b007      	add	sp, #28
 80084a6:	bd90      	pop	{r4, r7, pc}
 80084a8:	be4ccccd 	.word	0xbe4ccccd
 80084ac:	43f00000 	.word	0x43f00000
 80084b0:	41a00000 	.word	0x41a00000

080084b4 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6039      	str	r1, [r7, #0]
 80084bc:	0011      	movs	r1, r2
 80084be:	1dfb      	adds	r3, r7, #7
 80084c0:	1c02      	adds	r2, r0, #0
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	1dbb      	adds	r3, r7, #6
 80084c6:	1c0a      	adds	r2, r1, #0
 80084c8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80084ca:	4b08      	ldr	r3, [pc, #32]	@ (80084ec <ReadRegister+0x38>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80084d2:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <ReadRegister+0x38>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	1dba      	adds	r2, r7, #6
 80084d8:	7814      	ldrb	r4, [r2, #0]
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	1dfa      	adds	r2, r7, #7
 80084de:	7810      	ldrb	r0, [r2, #0]
 80084e0:	0022      	movs	r2, r4
 80084e2:	4798      	blx	r3
  }
}
 80084e4:	46c0      	nop			@ (mov r8, r8)
 80084e6:	46bd      	mov	sp, r7
 80084e8:	b003      	add	sp, #12
 80084ea:	bd90      	pop	{r4, r7, pc}
 80084ec:	20001148 	.word	0x20001148

080084f0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80084f0:	b590      	push	{r4, r7, lr}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6039      	str	r1, [r7, #0]
 80084f8:	0011      	movs	r1, r2
 80084fa:	1dfb      	adds	r3, r7, #7
 80084fc:	1c02      	adds	r2, r0, #0
 80084fe:	701a      	strb	r2, [r3, #0]
 8008500:	1dbb      	adds	r3, r7, #6
 8008502:	1c0a      	adds	r2, r1, #0
 8008504:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008506:	4b08      	ldr	r3, [pc, #32]	@ (8008528 <WriteRegister+0x38>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d008      	beq.n	8008520 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800850e:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <WriteRegister+0x38>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	1dba      	adds	r2, r7, #6
 8008514:	7814      	ldrb	r4, [r2, #0]
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	1dfa      	adds	r2, r7, #7
 800851a:	7810      	ldrb	r0, [r2, #0]
 800851c:	0022      	movs	r2, r4
 800851e:	4798      	blx	r3
  }
}
 8008520:	46c0      	nop			@ (mov r8, r8)
 8008522:	46bd      	mov	sp, r7
 8008524:	b003      	add	sp, #12
 8008526:	bd90      	pop	{r4, r7, pc}
 8008528:	2000114c 	.word	0x2000114c

0800852c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008536:	4b07      	ldr	r3, [pc, #28]	@ (8008554 <SGP_Init+0x28>)
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800853c:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <SGP_Init+0x2c>)
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8008542:	4b06      	ldr	r3, [pc, #24]	@ (800855c <SGP_Init+0x30>)
 8008544:	2100      	movs	r1, #0
 8008546:	0018      	movs	r0, r3
 8008548:	f7ff f930 	bl	80077ac <GasIndexAlgorithm_init>
}
 800854c:	46c0      	nop			@ (mov r8, r8)
 800854e:	46bd      	mov	sp, r7
 8008550:	b002      	add	sp, #8
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20001148 	.word	0x20001148
 8008558:	2000114c 	.word	0x2000114c
 800855c:	2000115c 	.word	0x2000115c

08008560 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008564:	4b13      	ldr	r3, [pc, #76]	@ (80085b4 <SGP_StartMeasurement+0x54>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00d      	beq.n	8008588 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800856c:	4b12      	ldr	r3, [pc, #72]	@ (80085b8 <SGP_StartMeasurement+0x58>)
 800856e:	2208      	movs	r2, #8
 8008570:	0019      	movs	r1, r3
 8008572:	2059      	movs	r0, #89	@ 0x59
 8008574:	f7ff ffbc 	bl	80084f0 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008578:	f002 fc3a 	bl	800adf0 <GetCurrentHalTicks>
 800857c:	0003      	movs	r3, r0
 800857e:	331e      	adds	r3, #30
 8008580:	001a      	movs	r2, r3
 8008582:	4b0e      	ldr	r3, [pc, #56]	@ (80085bc <SGP_StartMeasurement+0x5c>)
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	e00c      	b.n	80085a2 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008588:	4b0d      	ldr	r3, [pc, #52]	@ (80085c0 <SGP_StartMeasurement+0x60>)
 800858a:	2208      	movs	r2, #8
 800858c:	0019      	movs	r1, r3
 800858e:	2059      	movs	r0, #89	@ 0x59
 8008590:	f7ff ffae 	bl	80084f0 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008594:	f002 fc2c 	bl	800adf0 <GetCurrentHalTicks>
 8008598:	0003      	movs	r3, r0
 800859a:	33aa      	adds	r3, #170	@ 0xaa
 800859c:	001a      	movs	r2, r3
 800859e:	4b09      	ldr	r3, [pc, #36]	@ (80085c4 <SGP_StartMeasurement+0x64>)
 80085a0:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80085a2:	4b09      	ldr	r3, [pc, #36]	@ (80085c8 <SGP_StartMeasurement+0x68>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80085a8:	4b08      	ldr	r3, [pc, #32]	@ (80085cc <SGP_StartMeasurement+0x6c>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
}
 80085ae:	46c0      	nop			@ (mov r8, r8)
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20001204 	.word	0x20001204
 80085b8:	2000003c 	.word	0x2000003c
 80085bc:	20000050 	.word	0x20000050
 80085c0:	20000034 	.word	0x20000034
 80085c4:	20000048 	.word	0x20000048
 80085c8:	2000115a 	.word	0x2000115a
 80085cc:	2000115b 	.word	0x2000115b

080085d0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	4b04      	ldr	r3, [pc, #16]	@ (80085e8 <SGP_HeatedUp+0x18>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	0018      	movs	r0, r3
 80085da:	f002 fb41 	bl	800ac60 <TimestampIsReached>
 80085de:	0003      	movs	r3, r0
 80085e0:	0018      	movs	r0, r3
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	46c0      	nop			@ (mov r8, r8)
 80085e8:	20000048 	.word	0x20000048

080085ec <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80085f0:	4b04      	ldr	r3, [pc, #16]	@ (8008604 <SGP_MeasurementReady+0x18>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	0018      	movs	r0, r3
 80085f6:	f002 fb33 	bl	800ac60 <TimestampIsReached>
 80085fa:	0003      	movs	r3, r0
}
 80085fc:	0018      	movs	r0, r3
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	46c0      	nop			@ (mov r8, r8)
 8008604:	20000050 	.word	0x20000050

08008608 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800860c:	4b04      	ldr	r3, [pc, #16]	@ (8008620 <SGP_MeasurementDone+0x18>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	0018      	movs	r0, r3
 8008612:	f002 fb25 	bl	800ac60 <TimestampIsReached>
 8008616:	0003      	movs	r3, r0
}
 8008618:	0018      	movs	r0, r3
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	46c0      	nop			@ (mov r8, r8)
 8008620:	2000004c 	.word	0x2000004c

08008624 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008628:	4b04      	ldr	r3, [pc, #16]	@ (800863c <SGP_TurnHeaterOff+0x18>)
 800862a:	2202      	movs	r2, #2
 800862c:	0019      	movs	r1, r3
 800862e:	2059      	movs	r0, #89	@ 0x59
 8008630:	f7ff ff5e 	bl	80084f0 <WriteRegister>
}
 8008634:	46c0      	nop			@ (mov r8, r8)
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	2000002c 	.word	0x2000002c

08008640 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8008640:	b5b0      	push	{r4, r5, r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af02      	add	r7, sp, #8
 8008646:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008648:	f7ff ffc2 	bl	80085d0 <SGP_HeatedUp>
 800864c:	1e03      	subs	r3, r0, #0
 800864e:	d038      	beq.n	80086c2 <SGP_GetMeasurementValues+0x82>
 8008650:	4bd5      	ldr	r3, [pc, #852]	@ (80089a8 <SGP_GetMeasurementValues+0x368>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2201      	movs	r2, #1
 8008656:	4053      	eors	r3, r2
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d031      	beq.n	80086c2 <SGP_GetMeasurementValues+0x82>
 800865e:	4bd3      	ldr	r3, [pc, #844]	@ (80089ac <SGP_GetMeasurementValues+0x36c>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2201      	movs	r2, #1
 8008664:	4053      	eors	r3, r2
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d02a      	beq.n	80086c2 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 800866c:	4ad0      	ldr	r2, [pc, #832]	@ (80089b0 <SGP_GetMeasurementValues+0x370>)
 800866e:	4bd1      	ldr	r3, [pc, #836]	@ (80089b4 <SGP_GetMeasurementValues+0x374>)
 8008670:	0019      	movs	r1, r3
 8008672:	2003      	movs	r0, #3
 8008674:	f002 fb4a 	bl	800ad0c <CreateLine>
    HeatUpIsDone = true;
 8008678:	4bcb      	ldr	r3, [pc, #812]	@ (80089a8 <SGP_GetMeasurementValues+0x368>)
 800867a:	2201      	movs	r2, #1
 800867c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800867e:	4bce      	ldr	r3, [pc, #824]	@ (80089b8 <SGP_GetMeasurementValues+0x378>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00d      	beq.n	80086a2 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008686:	4bcd      	ldr	r3, [pc, #820]	@ (80089bc <SGP_GetMeasurementValues+0x37c>)
 8008688:	2208      	movs	r2, #8
 800868a:	0019      	movs	r1, r3
 800868c:	2059      	movs	r0, #89	@ 0x59
 800868e:	f7ff ff2f 	bl	80084f0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008692:	f002 fbad 	bl	800adf0 <GetCurrentHalTicks>
 8008696:	0003      	movs	r3, r0
 8008698:	331e      	adds	r3, #30
 800869a:	001a      	movs	r2, r3
 800869c:	4bc8      	ldr	r3, [pc, #800]	@ (80089c0 <SGP_GetMeasurementValues+0x380>)
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e00c      	b.n	80086bc <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80086a2:	4bc8      	ldr	r3, [pc, #800]	@ (80089c4 <SGP_GetMeasurementValues+0x384>)
 80086a4:	2208      	movs	r2, #8
 80086a6:	0019      	movs	r1, r3
 80086a8:	2059      	movs	r0, #89	@ 0x59
 80086aa:	f7ff ff21 	bl	80084f0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80086ae:	f002 fb9f 	bl	800adf0 <GetCurrentHalTicks>
 80086b2:	0003      	movs	r3, r0
 80086b4:	331e      	adds	r3, #30
 80086b6:	001a      	movs	r2, r3
 80086b8:	4bc1      	ldr	r3, [pc, #772]	@ (80089c0 <SGP_GetMeasurementValues+0x380>)
 80086ba:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80086bc:	4bbb      	ldr	r3, [pc, #748]	@ (80089ac <SGP_GetMeasurementValues+0x36c>)
 80086be:	2201      	movs	r2, #1
 80086c0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80086c2:	4bb9      	ldr	r3, [pc, #740]	@ (80089a8 <SGP_GetMeasurementValues+0x368>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d100      	bne.n	80086cc <SGP_GetMeasurementValues+0x8c>
 80086ca:	e1a9      	b.n	8008a20 <SGP_GetMeasurementValues+0x3e0>
 80086cc:	f7ff ff8e 	bl	80085ec <SGP_MeasurementReady>
 80086d0:	1e03      	subs	r3, r0, #0
 80086d2:	d100      	bne.n	80086d6 <SGP_GetMeasurementValues+0x96>
 80086d4:	e1a4      	b.n	8008a20 <SGP_GetMeasurementValues+0x3e0>
 80086d6:	4bbc      	ldr	r3, [pc, #752]	@ (80089c8 <SGP_GetMeasurementValues+0x388>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2201      	movs	r2, #1
 80086dc:	4053      	eors	r3, r2
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d100      	bne.n	80086e6 <SGP_GetMeasurementValues+0xa6>
 80086e4:	e19c      	b.n	8008a20 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 80086e6:	4bb9      	ldr	r3, [pc, #740]	@ (80089cc <SGP_GetMeasurementValues+0x38c>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	3301      	adds	r3, #1
 80086ec:	4ab8      	ldr	r2, [pc, #736]	@ (80089d0 <SGP_GetMeasurementValues+0x390>)
 80086ee:	49b1      	ldr	r1, [pc, #708]	@ (80089b4 <SGP_GetMeasurementValues+0x374>)
 80086f0:	2003      	movs	r0, #3
 80086f2:	f002 fb0b 	bl	800ad0c <CreateLine>
    MeasurementIsReady = true;
 80086f6:	4bb4      	ldr	r3, [pc, #720]	@ (80089c8 <SGP_GetMeasurementValues+0x388>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80086fc:	4bb5      	ldr	r3, [pc, #724]	@ (80089d4 <SGP_GetMeasurementValues+0x394>)
 80086fe:	2203      	movs	r2, #3
 8008700:	0019      	movs	r1, r3
 8008702:	2059      	movs	r0, #89	@ 0x59
 8008704:	f7ff fed6 	bl	80084b4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8008708:	4bb2      	ldr	r3, [pc, #712]	@ (80089d4 <SGP_GetMeasurementValues+0x394>)
 800870a:	2203      	movs	r2, #3
 800870c:	2103      	movs	r1, #3
 800870e:	0018      	movs	r0, r3
 8008710:	f000 f9ec 	bl	8008aec <CheckCRC>
 8008714:	0003      	movs	r3, r0
 8008716:	001a      	movs	r2, r3
 8008718:	2301      	movs	r3, #1
 800871a:	4053      	eors	r3, r2
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d02a      	beq.n	8008778 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8008722:	4aad      	ldr	r2, [pc, #692]	@ (80089d8 <SGP_GetMeasurementValues+0x398>)
 8008724:	4bad      	ldr	r3, [pc, #692]	@ (80089dc <SGP_GetMeasurementValues+0x39c>)
 8008726:	0019      	movs	r1, r3
 8008728:	2001      	movs	r0, #1
 800872a:	f002 faef 	bl	800ad0c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800872e:	4aac      	ldr	r2, [pc, #688]	@ (80089e0 <SGP_GetMeasurementValues+0x3a0>)
 8008730:	4bac      	ldr	r3, [pc, #688]	@ (80089e4 <SGP_GetMeasurementValues+0x3a4>)
 8008732:	0019      	movs	r1, r3
 8008734:	2002      	movs	r0, #2
 8008736:	f002 fae9 	bl	800ad0c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800873a:	230f      	movs	r3, #15
 800873c:	18fb      	adds	r3, r7, r3
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	e012      	b.n	800876a <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8008744:	240f      	movs	r4, #15
 8008746:	193b      	adds	r3, r7, r4
 8008748:	7818      	ldrb	r0, [r3, #0]
 800874a:	193b      	adds	r3, r7, r4
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	4aa1      	ldr	r2, [pc, #644]	@ (80089d4 <SGP_GetMeasurementValues+0x394>)
 8008750:	5cd3      	ldrb	r3, [r2, r3]
 8008752:	4aa5      	ldr	r2, [pc, #660]	@ (80089e8 <SGP_GetMeasurementValues+0x3a8>)
 8008754:	4997      	ldr	r1, [pc, #604]	@ (80089b4 <SGP_GetMeasurementValues+0x374>)
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	0003      	movs	r3, r0
 800875a:	2003      	movs	r0, #3
 800875c:	f002 fad6 	bl	800ad0c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008760:	193b      	adds	r3, r7, r4
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	193b      	adds	r3, r7, r4
 8008766:	3201      	adds	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	230f      	movs	r3, #15
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d9e7      	bls.n	8008744 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8008774:	2300      	movs	r3, #0
 8008776:	e16b      	b.n	8008a50 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8008778:	f002 fb3a 	bl	800adf0 <GetCurrentHalTicks>
 800877c:	0003      	movs	r3, r0
 800877e:	22fa      	movs	r2, #250	@ 0xfa
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	189a      	adds	r2, r3, r2
 8008784:	4b99      	ldr	r3, [pc, #612]	@ (80089ec <SGP_GetMeasurementValues+0x3ac>)
 8008786:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8008788:	f7ff ff4c 	bl	8008624 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 800878c:	4b8f      	ldr	r3, [pc, #572]	@ (80089cc <SGP_GetMeasurementValues+0x38c>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	3301      	adds	r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	4b8d      	ldr	r3, [pc, #564]	@ (80089cc <SGP_GetMeasurementValues+0x38c>)
 8008796:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8008798:	4b8c      	ldr	r3, [pc, #560]	@ (80089cc <SGP_GetMeasurementValues+0x38c>)
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	4b94      	ldr	r3, [pc, #592]	@ (80089f0 <SGP_GetMeasurementValues+0x3b0>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d200      	bcs.n	80087a6 <SGP_GetMeasurementValues+0x166>
 80087a4:	e13c      	b.n	8008a20 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80087a6:	4b8b      	ldr	r3, [pc, #556]	@ (80089d4 <SGP_GetMeasurementValues+0x394>)
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	b21a      	sxth	r2, r3
 80087ae:	4b89      	ldr	r3, [pc, #548]	@ (80089d4 <SGP_GetMeasurementValues+0x394>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	b21b      	sxth	r3, r3
 80087b4:	4313      	orrs	r3, r2
 80087b6:	b21a      	sxth	r2, r3
 80087b8:	240c      	movs	r4, #12
 80087ba:	193b      	adds	r3, r7, r4
 80087bc:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80087be:	193b      	adds	r3, r7, r4
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	4a8c      	ldr	r2, [pc, #560]	@ (80089f4 <SGP_GetMeasurementValues+0x3b4>)
 80087c4:	497b      	ldr	r1, [pc, #492]	@ (80089b4 <SGP_GetMeasurementValues+0x374>)
 80087c6:	2003      	movs	r0, #3
 80087c8:	f002 faa0 	bl	800ad0c <CreateLine>
      int32_t tempVocIndex = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80087d0:	193b      	adds	r3, r7, r4
 80087d2:	8819      	ldrh	r1, [r3, #0]
 80087d4:	2308      	movs	r3, #8
 80087d6:	18fa      	adds	r2, r7, r3
 80087d8:	4b87      	ldr	r3, [pc, #540]	@ (80089f8 <SGP_GetMeasurementValues+0x3b8>)
 80087da:	0018      	movs	r0, r3
 80087dc:	f7ff f848 	bl	8007870 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4a86      	ldr	r2, [pc, #536]	@ (80089fc <SGP_GetMeasurementValues+0x3bc>)
 80087e4:	4973      	ldr	r1, [pc, #460]	@ (80089b4 <SGP_GetMeasurementValues+0x374>)
 80087e6:	2003      	movs	r0, #3
 80087e8:	f002 fa90 	bl	800ad0c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	dd5a      	ble.n	80088b0 <SGP_GetMeasurementValues+0x270>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b64      	cmp	r3, #100	@ 0x64
 8008800:	dc56      	bgt.n	80088b0 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	0018      	movs	r0, r3
 8008808:	f7fa fdd0 	bl	80033ac <__aeabi_i2d>
 800880c:	2200      	movs	r2, #0
 800880e:	4b7c      	ldr	r3, [pc, #496]	@ (8008a00 <SGP_GetMeasurementValues+0x3c0>)
 8008810:	f7f9 fac6 	bl	8001da0 <__aeabi_ddiv>
 8008814:	0002      	movs	r2, r0
 8008816:	000b      	movs	r3, r1
 8008818:	2000      	movs	r0, #0
 800881a:	497a      	ldr	r1, [pc, #488]	@ (8008a04 <SGP_GetMeasurementValues+0x3c4>)
 800881c:	f7fa f9cc 	bl	8002bb8 <__aeabi_dsub>
 8008820:	0002      	movs	r2, r0
 8008822:	000b      	movs	r3, r1
 8008824:	0014      	movs	r4, r2
 8008826:	001d      	movs	r5, r3
 8008828:	4b77      	ldr	r3, [pc, #476]	@ (8008a08 <SGP_GetMeasurementValues+0x3c8>)
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	0018      	movs	r0, r3
 800882e:	f7fa fdbd 	bl	80033ac <__aeabi_i2d>
 8008832:	0002      	movs	r2, r0
 8008834:	000b      	movs	r3, r1
 8008836:	0020      	movs	r0, r4
 8008838:	0029      	movs	r1, r5
 800883a:	f7f9 fef5 	bl	8002628 <__aeabi_dmul>
 800883e:	0002      	movs	r2, r0
 8008840:	000b      	movs	r3, r1
 8008842:	0010      	movs	r0, r2
 8008844:	0019      	movs	r1, r3
 8008846:	f7f7 fef7 	bl	8000638 <__aeabi_d2uiz>
 800884a:	0003      	movs	r3, r0
 800884c:	b29a      	uxth	r2, r3
 800884e:	4b6f      	ldr	r3, [pc, #444]	@ (8008a0c <SGP_GetMeasurementValues+0x3cc>)
 8008850:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	0018      	movs	r0, r3
 8008858:	f7fa fda8 	bl	80033ac <__aeabi_i2d>
 800885c:	2200      	movs	r2, #0
 800885e:	4b68      	ldr	r3, [pc, #416]	@ (8008a00 <SGP_GetMeasurementValues+0x3c0>)
 8008860:	f7f9 fa9e 	bl	8001da0 <__aeabi_ddiv>
 8008864:	0002      	movs	r2, r0
 8008866:	000b      	movs	r3, r1
 8008868:	0014      	movs	r4, r2
 800886a:	001d      	movs	r5, r3
 800886c:	4b66      	ldr	r3, [pc, #408]	@ (8008a08 <SGP_GetMeasurementValues+0x3c8>)
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	0018      	movs	r0, r3
 8008872:	f7fa fd9b 	bl	80033ac <__aeabi_i2d>
 8008876:	0002      	movs	r2, r0
 8008878:	000b      	movs	r3, r1
 800887a:	0020      	movs	r0, r4
 800887c:	0029      	movs	r1, r5
 800887e:	f7f9 fed3 	bl	8002628 <__aeabi_dmul>
 8008882:	0002      	movs	r2, r0
 8008884:	000b      	movs	r3, r1
 8008886:	0010      	movs	r0, r2
 8008888:	0019      	movs	r1, r3
 800888a:	f7f7 fed5 	bl	8000638 <__aeabi_d2uiz>
 800888e:	0003      	movs	r3, r0
 8008890:	b29a      	uxth	r2, r3
 8008892:	4b5f      	ldr	r3, [pc, #380]	@ (8008a10 <SGP_GetMeasurementValues+0x3d0>)
 8008894:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8008896:	4b5c      	ldr	r3, [pc, #368]	@ (8008a08 <SGP_GetMeasurementValues+0x3c8>)
 8008898:	881a      	ldrh	r2, [r3, #0]
 800889a:	4b5e      	ldr	r3, [pc, #376]	@ (8008a14 <SGP_GetMeasurementValues+0x3d4>)
 800889c:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800889e:	4b5d      	ldr	r3, [pc, #372]	@ (8008a14 <SGP_GetMeasurementValues+0x3d4>)
 80088a0:	8818      	ldrh	r0, [r3, #0]
 80088a2:	4b5a      	ldr	r3, [pc, #360]	@ (8008a0c <SGP_GetMeasurementValues+0x3cc>)
 80088a4:	8819      	ldrh	r1, [r3, #0]
 80088a6:	4b5a      	ldr	r3, [pc, #360]	@ (8008a10 <SGP_GetMeasurementValues+0x3d0>)
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	001a      	movs	r2, r3
 80088ac:	f001 fb22 	bl	8009ef4 <SetVocLED>
      }
      if(*vocIndex > 100){
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b64      	cmp	r3, #100	@ 0x64
 80088b6:	dd66      	ble.n	8008986 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	0018      	movs	r0, r3
 80088be:	f7fa fd75 	bl	80033ac <__aeabi_i2d>
 80088c2:	2200      	movs	r2, #0
 80088c4:	4b4e      	ldr	r3, [pc, #312]	@ (8008a00 <SGP_GetMeasurementValues+0x3c0>)
 80088c6:	f7fa f977 	bl	8002bb8 <__aeabi_dsub>
 80088ca:	0002      	movs	r2, r0
 80088cc:	000b      	movs	r3, r1
 80088ce:	0010      	movs	r0, r2
 80088d0:	0019      	movs	r1, r3
 80088d2:	2200      	movs	r2, #0
 80088d4:	4b50      	ldr	r3, [pc, #320]	@ (8008a18 <SGP_GetMeasurementValues+0x3d8>)
 80088d6:	f7f9 fa63 	bl	8001da0 <__aeabi_ddiv>
 80088da:	0002      	movs	r2, r0
 80088dc:	000b      	movs	r3, r1
 80088de:	0014      	movs	r4, r2
 80088e0:	001d      	movs	r5, r3
 80088e2:	4b49      	ldr	r3, [pc, #292]	@ (8008a08 <SGP_GetMeasurementValues+0x3c8>)
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7fa fd60 	bl	80033ac <__aeabi_i2d>
 80088ec:	0002      	movs	r2, r0
 80088ee:	000b      	movs	r3, r1
 80088f0:	0020      	movs	r0, r4
 80088f2:	0029      	movs	r1, r5
 80088f4:	f7f9 fe98 	bl	8002628 <__aeabi_dmul>
 80088f8:	0002      	movs	r2, r0
 80088fa:	000b      	movs	r3, r1
 80088fc:	0010      	movs	r0, r2
 80088fe:	0019      	movs	r1, r3
 8008900:	f7f7 fe9a 	bl	8000638 <__aeabi_d2uiz>
 8008904:	0003      	movs	r3, r0
 8008906:	b29a      	uxth	r2, r3
 8008908:	4b40      	ldr	r3, [pc, #256]	@ (8008a0c <SGP_GetMeasurementValues+0x3cc>)
 800890a:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	0018      	movs	r0, r3
 8008912:	f7fa fd4b 	bl	80033ac <__aeabi_i2d>
 8008916:	2200      	movs	r2, #0
 8008918:	4b39      	ldr	r3, [pc, #228]	@ (8008a00 <SGP_GetMeasurementValues+0x3c0>)
 800891a:	f7fa f94d 	bl	8002bb8 <__aeabi_dsub>
 800891e:	0002      	movs	r2, r0
 8008920:	000b      	movs	r3, r1
 8008922:	0010      	movs	r0, r2
 8008924:	0019      	movs	r1, r3
 8008926:	2200      	movs	r2, #0
 8008928:	4b3b      	ldr	r3, [pc, #236]	@ (8008a18 <SGP_GetMeasurementValues+0x3d8>)
 800892a:	f7f9 fa39 	bl	8001da0 <__aeabi_ddiv>
 800892e:	0002      	movs	r2, r0
 8008930:	000b      	movs	r3, r1
 8008932:	2000      	movs	r0, #0
 8008934:	4933      	ldr	r1, [pc, #204]	@ (8008a04 <SGP_GetMeasurementValues+0x3c4>)
 8008936:	f7fa f93f 	bl	8002bb8 <__aeabi_dsub>
 800893a:	0002      	movs	r2, r0
 800893c:	000b      	movs	r3, r1
 800893e:	0014      	movs	r4, r2
 8008940:	001d      	movs	r5, r3
 8008942:	4b31      	ldr	r3, [pc, #196]	@ (8008a08 <SGP_GetMeasurementValues+0x3c8>)
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	0018      	movs	r0, r3
 8008948:	f7fa fd30 	bl	80033ac <__aeabi_i2d>
 800894c:	0002      	movs	r2, r0
 800894e:	000b      	movs	r3, r1
 8008950:	0020      	movs	r0, r4
 8008952:	0029      	movs	r1, r5
 8008954:	f7f9 fe68 	bl	8002628 <__aeabi_dmul>
 8008958:	0002      	movs	r2, r0
 800895a:	000b      	movs	r3, r1
 800895c:	0010      	movs	r0, r2
 800895e:	0019      	movs	r1, r3
 8008960:	f7f7 fe6a 	bl	8000638 <__aeabi_d2uiz>
 8008964:	0003      	movs	r3, r0
 8008966:	b29a      	uxth	r2, r3
 8008968:	4b2a      	ldr	r3, [pc, #168]	@ (8008a14 <SGP_GetMeasurementValues+0x3d4>)
 800896a:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800896c:	4b26      	ldr	r3, [pc, #152]	@ (8008a08 <SGP_GetMeasurementValues+0x3c8>)
 800896e:	881a      	ldrh	r2, [r3, #0]
 8008970:	4b27      	ldr	r3, [pc, #156]	@ (8008a10 <SGP_GetMeasurementValues+0x3d0>)
 8008972:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 8008974:	4b27      	ldr	r3, [pc, #156]	@ (8008a14 <SGP_GetMeasurementValues+0x3d4>)
 8008976:	8818      	ldrh	r0, [r3, #0]
 8008978:	4b24      	ldr	r3, [pc, #144]	@ (8008a0c <SGP_GetMeasurementValues+0x3cc>)
 800897a:	8819      	ldrh	r1, [r3, #0]
 800897c:	4b24      	ldr	r3, [pc, #144]	@ (8008a10 <SGP_GetMeasurementValues+0x3d0>)
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	001a      	movs	r2, r3
 8008982:	f001 fab7 	bl	8009ef4 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 8008986:	4b11      	ldr	r3, [pc, #68]	@ (80089cc <SGP_GetMeasurementValues+0x38c>)
 8008988:	2200      	movs	r2, #0
 800898a:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 800898c:	4a23      	ldr	r2, [pc, #140]	@ (8008a1c <SGP_GetMeasurementValues+0x3dc>)
 800898e:	4b09      	ldr	r3, [pc, #36]	@ (80089b4 <SGP_GetMeasurementValues+0x374>)
 8008990:	0019      	movs	r1, r3
 8008992:	2003      	movs	r0, #3
 8008994:	f002 f9ba 	bl	800ad0c <CreateLine>
      HT_MeasurementReceived = false;
 8008998:	4b07      	ldr	r3, [pc, #28]	@ (80089b8 <SGP_GetMeasurementValues+0x378>)
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800899e:	4b03      	ldr	r3, [pc, #12]	@ (80089ac <SGP_GetMeasurementValues+0x36c>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e053      	b.n	8008a50 <SGP_GetMeasurementValues+0x410>
 80089a8:	2000115a 	.word	0x2000115a
 80089ac:	20001205 	.word	0x20001205
 80089b0:	0801e9ec 	.word	0x0801e9ec
 80089b4:	0801ea18 	.word	0x0801ea18
 80089b8:	20001204 	.word	0x20001204
 80089bc:	2000003c 	.word	0x2000003c
 80089c0:	20000050 	.word	0x20000050
 80089c4:	20000034 	.word	0x20000034
 80089c8:	2000115b 	.word	0x2000115b
 80089cc:	20001159 	.word	0x20001159
 80089d0:	0801ea1c 	.word	0x0801ea1c
 80089d4:	20001150 	.word	0x20001150
 80089d8:	0801ea4c 	.word	0x0801ea4c
 80089dc:	0801ea70 	.word	0x0801ea70
 80089e0:	0801ea74 	.word	0x0801ea74
 80089e4:	0801ea94 	.word	0x0801ea94
 80089e8:	0801ea98 	.word	0x0801ea98
 80089ec:	2000004c 	.word	0x2000004c
 80089f0:	20000044 	.word	0x20000044
 80089f4:	0801eab8 	.word	0x0801eab8
 80089f8:	2000115c 	.word	0x2000115c
 80089fc:	0801eacc 	.word	0x0801eacc
 8008a00:	40590000 	.word	0x40590000
 8008a04:	3ff00000 	.word	0x3ff00000
 8008a08:	20000054 	.word	0x20000054
 8008a0c:	2000120a 	.word	0x2000120a
 8008a10:	20001208 	.word	0x20001208
 8008a14:	20001206 	.word	0x20001206
 8008a18:	40790000 	.word	0x40790000
 8008a1c:	0801eae0 	.word	0x0801eae0
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8008a20:	f7ff fdf2 	bl	8008608 <SGP_MeasurementDone>
 8008a24:	1e03      	subs	r3, r0, #0
 8008a26:	d012      	beq.n	8008a4e <SGP_GetMeasurementValues+0x40e>
 8008a28:	4b0b      	ldr	r3, [pc, #44]	@ (8008a58 <SGP_GetMeasurementValues+0x418>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00e      	beq.n	8008a4e <SGP_GetMeasurementValues+0x40e>
 8008a30:	4b0a      	ldr	r3, [pc, #40]	@ (8008a5c <SGP_GetMeasurementValues+0x41c>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00a      	beq.n	8008a4e <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8008a38:	4a09      	ldr	r2, [pc, #36]	@ (8008a60 <SGP_GetMeasurementValues+0x420>)
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <SGP_GetMeasurementValues+0x424>)
 8008a3c:	0019      	movs	r1, r3
 8008a3e:	2003      	movs	r0, #3
 8008a40:	f002 f964 	bl	800ad0c <CreateLine>
    SGP_StartMeasurement();
 8008a44:	f7ff fd8c 	bl	8008560 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008a48:	4b07      	ldr	r3, [pc, #28]	@ (8008a68 <SGP_GetMeasurementValues+0x428>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	0018      	movs	r0, r3
 8008a52:	46bd      	mov	sp, r7
 8008a54:	b004      	add	sp, #16
 8008a56:	bdb0      	pop	{r4, r5, r7, pc}
 8008a58:	2000115a 	.word	0x2000115a
 8008a5c:	2000115b 	.word	0x2000115b
 8008a60:	0801eb04 	.word	0x0801eb04
 8008a64:	0801ea18 	.word	0x0801ea18
 8008a68:	20001205 	.word	0x20001205

08008a6c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008a72:	4b1a      	ldr	r3, [pc, #104]	@ (8008adc <SGP_DeviceConnected+0x70>)
 8008a74:	2202      	movs	r2, #2
 8008a76:	0019      	movs	r1, r3
 8008a78:	2059      	movs	r0, #89	@ 0x59
 8008a7a:	f7ff fd39 	bl	80084f0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8008a7e:	2001      	movs	r0, #1
 8008a80:	f002 fcf0 	bl	800b464 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8008a84:	4b16      	ldr	r3, [pc, #88]	@ (8008ae0 <SGP_DeviceConnected+0x74>)
 8008a86:	2209      	movs	r2, #9
 8008a88:	0019      	movs	r1, r3
 8008a8a:	2059      	movs	r0, #89	@ 0x59
 8008a8c:	f7ff fd12 	bl	80084b4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008a90:	1dfb      	adds	r3, r7, #7
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	e011      	b.n	8008abc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8008a98:	1dfb      	adds	r3, r7, #7
 8008a9a:	7818      	ldrb	r0, [r3, #0]
 8008a9c:	1dfb      	adds	r3, r7, #7
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8008ae0 <SGP_DeviceConnected+0x74>)
 8008aa2:	5cd3      	ldrb	r3, [r2, r3]
 8008aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8008ae4 <SGP_DeviceConnected+0x78>)
 8008aa6:	4910      	ldr	r1, [pc, #64]	@ (8008ae8 <SGP_DeviceConnected+0x7c>)
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	0003      	movs	r3, r0
 8008aac:	2002      	movs	r0, #2
 8008aae:	f002 f92d 	bl	800ad0c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008ab2:	1dfb      	adds	r3, r7, #7
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	1dfb      	adds	r3, r7, #7
 8008ab8:	3201      	adds	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	1dfb      	adds	r3, r7, #7
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d9e9      	bls.n	8008a98 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8008ac4:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <SGP_DeviceConnected+0x74>)
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	2109      	movs	r1, #9
 8008aca:	0018      	movs	r0, r3
 8008acc:	f000 f80e 	bl	8008aec <CheckCRC>
 8008ad0:	0003      	movs	r3, r0
}
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	b002      	add	sp, #8
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	46c0      	nop			@ (mov r8, r8)
 8008adc:	20000030 	.word	0x20000030
 8008ae0:	20001150 	.word	0x20001150
 8008ae4:	0801eb24 	.word	0x0801eb24
 8008ae8:	0801ea94 	.word	0x0801ea94

08008aec <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	b08f      	sub	sp, #60	@ 0x3c
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6278      	str	r0, [r7, #36]	@ 0x24
 8008af4:	0008      	movs	r0, r1
 8008af6:	0011      	movs	r1, r2
 8008af8:	2323      	movs	r3, #35	@ 0x23
 8008afa:	18fb      	adds	r3, r7, r3
 8008afc:	1c02      	adds	r2, r0, #0
 8008afe:	701a      	strb	r2, [r3, #0]
 8008b00:	2322      	movs	r3, #34	@ 0x22
 8008b02:	18fb      	adds	r3, r7, r3
 8008b04:	1c0a      	adds	r2, r1, #0
 8008b06:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008b08:	2317      	movs	r3, #23
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	189b      	adds	r3, r3, r2
 8008b0e:	19db      	adds	r3, r3, r7
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e09f      	b.n	8008c56 <CheckCRC+0x16a>
 8008b16:	466b      	mov	r3, sp
 8008b18:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8008b1a:	2322      	movs	r3, #34	@ 0x22
 8008b1c:	18fb      	adds	r3, r7, r3
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	001a      	movs	r2, r3
 8008b22:	3a01      	subs	r2, #1
 8008b24:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b26:	60bb      	str	r3, [r7, #8]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	60fa      	str	r2, [r7, #12]
 8008b2c:	68b8      	ldr	r0, [r7, #8]
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	0002      	movs	r2, r0
 8008b32:	0f52      	lsrs	r2, r2, #29
 8008b34:	000c      	movs	r4, r1
 8008b36:	00e4      	lsls	r4, r4, #3
 8008b38:	61fc      	str	r4, [r7, #28]
 8008b3a:	69fc      	ldr	r4, [r7, #28]
 8008b3c:	4314      	orrs	r4, r2
 8008b3e:	61fc      	str	r4, [r7, #28]
 8008b40:	0002      	movs	r2, r0
 8008b42:	00d2      	lsls	r2, r2, #3
 8008b44:	61ba      	str	r2, [r7, #24]
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	6838      	ldr	r0, [r7, #0]
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	0002      	movs	r2, r0
 8008b52:	0f52      	lsrs	r2, r2, #29
 8008b54:	000c      	movs	r4, r1
 8008b56:	00e4      	lsls	r4, r4, #3
 8008b58:	617c      	str	r4, [r7, #20]
 8008b5a:	697c      	ldr	r4, [r7, #20]
 8008b5c:	4314      	orrs	r4, r2
 8008b5e:	617c      	str	r4, [r7, #20]
 8008b60:	0002      	movs	r2, r0
 8008b62:	00d2      	lsls	r2, r2, #3
 8008b64:	613a      	str	r2, [r7, #16]
 8008b66:	3307      	adds	r3, #7
 8008b68:	08db      	lsrs	r3, r3, #3
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	466a      	mov	r2, sp
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	469d      	mov	sp, r3
 8008b72:	466b      	mov	r3, sp
 8008b74:	3300      	adds	r3, #0
 8008b76:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8008b78:	2316      	movs	r3, #22
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	189b      	adds	r3, r3, r2
 8008b7e:	19db      	adds	r3, r3, r7
 8008b80:	2200      	movs	r2, #0
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	e01e      	b.n	8008bc4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8008b86:	2317      	movs	r3, #23
 8008b88:	2220      	movs	r2, #32
 8008b8a:	189b      	adds	r3, r3, r2
 8008b8c:	19db      	adds	r3, r3, r7
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	2116      	movs	r1, #22
 8008b92:	2320      	movs	r3, #32
 8008b94:	18cb      	adds	r3, r1, r3
 8008b96:	19db      	adds	r3, r3, r7
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	18d3      	adds	r3, r2, r3
 8008b9c:	001a      	movs	r2, r3
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	189a      	adds	r2, r3, r2
 8008ba2:	0008      	movs	r0, r1
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	18cb      	adds	r3, r1, r3
 8008ba8:	19db      	adds	r3, r3, r7
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	7811      	ldrb	r1, [r2, #0]
 8008bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bb0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8008bb2:	2320      	movs	r3, #32
 8008bb4:	18c3      	adds	r3, r0, r3
 8008bb6:	19db      	adds	r3, r3, r7
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	2320      	movs	r3, #32
 8008bbc:	18c3      	adds	r3, r0, r3
 8008bbe:	19db      	adds	r3, r3, r7
 8008bc0:	3201      	adds	r2, #1
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	2316      	movs	r3, #22
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	189b      	adds	r3, r3, r2
 8008bca:	19da      	adds	r2, r3, r7
 8008bcc:	2322      	movs	r3, #34	@ 0x22
 8008bce:	18fb      	adds	r3, r7, r3
 8008bd0:	7812      	ldrb	r2, [r2, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d3d6      	bcc.n	8008b86 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8008bd8:	2417      	movs	r4, #23
 8008bda:	2320      	movs	r3, #32
 8008bdc:	18e3      	adds	r3, r4, r3
 8008bde:	19db      	adds	r3, r3, r7
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	2322      	movs	r3, #34	@ 0x22
 8008be4:	18fb      	adds	r3, r7, r3
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	18d3      	adds	r3, r2, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bee:	18d2      	adds	r2, r2, r3
 8008bf0:	250b      	movs	r5, #11
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	18eb      	adds	r3, r5, r3
 8008bf6:	19db      	adds	r3, r3, r7
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008bfc:	2322      	movs	r3, #34	@ 0x22
 8008bfe:	18fb      	adds	r3, r7, r3
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c08:	0011      	movs	r1, r2
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f000 f838 	bl	8008c80 <CalculateCRC>
 8008c10:	0003      	movs	r3, r0
 8008c12:	001a      	movs	r2, r3
 8008c14:	2320      	movs	r3, #32
 8008c16:	18eb      	adds	r3, r5, r3
 8008c18:	19db      	adds	r3, r3, r7
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00c      	beq.n	8008c3a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008c20:	2320      	movs	r3, #32
 8008c22:	18e3      	adds	r3, r4, r3
 8008c24:	19db      	adds	r3, r3, r7
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	4a13      	ldr	r2, [pc, #76]	@ (8008c78 <CheckCRC+0x18c>)
 8008c2c:	4913      	ldr	r1, [pc, #76]	@ (8008c7c <CheckCRC+0x190>)
 8008c2e:	2001      	movs	r0, #1
 8008c30:	f002 f86c 	bl	800ad0c <CreateLine>
      return false;
 8008c34:	2300      	movs	r3, #0
 8008c36:	46b5      	mov	sp, r6
 8008c38:	e019      	b.n	8008c6e <CheckCRC+0x182>
 8008c3a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008c3c:	2217      	movs	r2, #23
 8008c3e:	2320      	movs	r3, #32
 8008c40:	18d3      	adds	r3, r2, r3
 8008c42:	19db      	adds	r3, r3, r7
 8008c44:	2120      	movs	r1, #32
 8008c46:	1852      	adds	r2, r2, r1
 8008c48:	19d1      	adds	r1, r2, r7
 8008c4a:	2222      	movs	r2, #34	@ 0x22
 8008c4c:	18ba      	adds	r2, r7, r2
 8008c4e:	7809      	ldrb	r1, [r1, #0]
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	188a      	adds	r2, r1, r2
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	2317      	movs	r3, #23
 8008c58:	2220      	movs	r2, #32
 8008c5a:	189b      	adds	r3, r3, r2
 8008c5c:	19da      	adds	r2, r3, r7
 8008c5e:	2323      	movs	r3, #35	@ 0x23
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d200      	bcs.n	8008c6c <CheckCRC+0x180>
 8008c6a:	e754      	b.n	8008b16 <CheckCRC+0x2a>
    }
  }
  return true;
 8008c6c:	2301      	movs	r3, #1
}
 8008c6e:	0018      	movs	r0, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b00f      	add	sp, #60	@ 0x3c
 8008c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	0801eb44 	.word	0x0801eb44
 8008c7c:	0801ea70 	.word	0x0801ea70

08008c80 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	000a      	movs	r2, r1
 8008c8a:	1cfb      	adds	r3, r7, #3
 8008c8c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008c8e:	230f      	movs	r3, #15
 8008c90:	18fb      	adds	r3, r7, r3
 8008c92:	22ff      	movs	r2, #255	@ 0xff
 8008c94:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008c96:	230e      	movs	r3, #14
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e037      	b.n	8008d10 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008ca0:	230e      	movs	r3, #14
 8008ca2:	18fb      	adds	r3, r7, r3
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	18d3      	adds	r3, r2, r3
 8008caa:	7819      	ldrb	r1, [r3, #0]
 8008cac:	220f      	movs	r2, #15
 8008cae:	18bb      	adds	r3, r7, r2
 8008cb0:	18ba      	adds	r2, r7, r2
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	404a      	eors	r2, r1
 8008cb6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008cb8:	230d      	movs	r3, #13
 8008cba:	18fb      	adds	r3, r7, r3
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	e01b      	b.n	8008cfa <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008cc2:	210f      	movs	r1, #15
 8008cc4:	187b      	adds	r3, r7, r1
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	da09      	bge.n	8008ce2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008cce:	187b      	adds	r3, r7, r1
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	2231      	movs	r2, #49	@ 0x31
 8008cd8:	4053      	eors	r3, r2
 8008cda:	b25a      	sxtb	r2, r3
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	701a      	strb	r2, [r3, #0]
 8008ce0:	e005      	b.n	8008cee <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008ce2:	230f      	movs	r3, #15
 8008ce4:	18fa      	adds	r2, r7, r3
 8008ce6:	18fb      	adds	r3, r7, r3
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	18db      	adds	r3, r3, r3
 8008cec:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008cee:	210d      	movs	r1, #13
 8008cf0:	187b      	adds	r3, r7, r1
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	187b      	adds	r3, r7, r1
 8008cf6:	3201      	adds	r2, #1
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	230d      	movs	r3, #13
 8008cfc:	18fb      	adds	r3, r7, r3
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	d9de      	bls.n	8008cc2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d04:	210e      	movs	r1, #14
 8008d06:	187b      	adds	r3, r7, r1
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	187b      	adds	r3, r7, r1
 8008d0c:	3201      	adds	r2, #1
 8008d0e:	701a      	strb	r2, [r3, #0]
 8008d10:	230e      	movs	r3, #14
 8008d12:	18fa      	adds	r2, r7, r3
 8008d14:	1cfb      	adds	r3, r7, #3
 8008d16:	7812      	ldrb	r2, [r2, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d3c0      	bcc.n	8008ca0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008d1e:	230f      	movs	r3, #15
 8008d20:	18fb      	adds	r3, r7, r3
 8008d22:	781b      	ldrb	r3, [r3, #0]
}
 8008d24:	0018      	movs	r0, r3
 8008d26:	46bd      	mov	sp, r7
 8008d28:	b004      	add	sp, #16
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4936      	ldr	r1, [pc, #216]	@ (8008e14 <SGP_GetHT+0xe8>)
 8008d3c:	1c18      	adds	r0, r3, #0
 8008d3e:	f7f7 fdb5 	bl	80008ac <__aeabi_fadd>
 8008d42:	1c03      	adds	r3, r0, #0
 8008d44:	4934      	ldr	r1, [pc, #208]	@ (8008e18 <SGP_GetHT+0xec>)
 8008d46:	1c18      	adds	r0, r3, #0
 8008d48:	f7f7 ff3a 	bl	8000bc0 <__aeabi_fdiv>
 8008d4c:	1c03      	adds	r3, r0, #0
 8008d4e:	4933      	ldr	r1, [pc, #204]	@ (8008e1c <SGP_GetHT+0xf0>)
 8008d50:	1c18      	adds	r0, r3, #0
 8008d52:	f7f8 f91b 	bl	8000f8c <__aeabi_fmul>
 8008d56:	1c03      	adds	r3, r0, #0
 8008d58:	1c18      	adds	r0, r3, #0
 8008d5a:	f7f7 fc55 	bl	8000608 <__aeabi_f2uiz>
 8008d5e:	0003      	movs	r3, r0
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	4b2f      	ldr	r3, [pc, #188]	@ (8008e20 <SGP_GetHT+0xf4>)
 8008d64:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	492e      	ldr	r1, [pc, #184]	@ (8008e24 <SGP_GetHT+0xf8>)
 8008d6c:	1c18      	adds	r0, r3, #0
 8008d6e:	f7f7 ff27 	bl	8000bc0 <__aeabi_fdiv>
 8008d72:	1c03      	adds	r3, r0, #0
 8008d74:	4929      	ldr	r1, [pc, #164]	@ (8008e1c <SGP_GetHT+0xf0>)
 8008d76:	1c18      	adds	r0, r3, #0
 8008d78:	f7f8 f908 	bl	8000f8c <__aeabi_fmul>
 8008d7c:	1c03      	adds	r3, r0, #0
 8008d7e:	1c18      	adds	r0, r3, #0
 8008d80:	f7f7 fc42 	bl	8000608 <__aeabi_f2uiz>
 8008d84:	0003      	movs	r3, r0
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	4b27      	ldr	r3, [pc, #156]	@ (8008e28 <SGP_GetHT+0xfc>)
 8008d8a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008d8c:	4b26      	ldr	r3, [pc, #152]	@ (8008e28 <SGP_GetHT+0xfc>)
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	4b25      	ldr	r3, [pc, #148]	@ (8008e2c <SGP_GetHT+0x100>)
 8008d98:	709a      	strb	r2, [r3, #2]
 8008d9a:	4b24      	ldr	r3, [pc, #144]	@ (8008e2c <SGP_GetHT+0x100>)
 8008d9c:	789a      	ldrb	r2, [r3, #2]
 8008d9e:	210c      	movs	r1, #12
 8008da0:	187b      	adds	r3, r7, r1
 8008da2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008da4:	4b20      	ldr	r3, [pc, #128]	@ (8008e28 <SGP_GetHT+0xfc>)
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	4b20      	ldr	r3, [pc, #128]	@ (8008e2c <SGP_GetHT+0x100>)
 8008dac:	70da      	strb	r2, [r3, #3]
 8008dae:	4b1f      	ldr	r3, [pc, #124]	@ (8008e2c <SGP_GetHT+0x100>)
 8008db0:	78da      	ldrb	r2, [r3, #3]
 8008db2:	187b      	adds	r3, r7, r1
 8008db4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008db6:	187b      	adds	r3, r7, r1
 8008db8:	2102      	movs	r1, #2
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f7ff ff60 	bl	8008c80 <CalculateCRC>
 8008dc0:	0003      	movs	r3, r0
 8008dc2:	001a      	movs	r2, r3
 8008dc4:	4b19      	ldr	r3, [pc, #100]	@ (8008e2c <SGP_GetHT+0x100>)
 8008dc6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008dc8:	4b15      	ldr	r3, [pc, #84]	@ (8008e20 <SGP_GetHT+0xf4>)
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	0a1b      	lsrs	r3, r3, #8
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	4b16      	ldr	r3, [pc, #88]	@ (8008e2c <SGP_GetHT+0x100>)
 8008dd4:	715a      	strb	r2, [r3, #5]
 8008dd6:	4b15      	ldr	r3, [pc, #84]	@ (8008e2c <SGP_GetHT+0x100>)
 8008dd8:	795a      	ldrb	r2, [r3, #5]
 8008dda:	2108      	movs	r1, #8
 8008ddc:	187b      	adds	r3, r7, r1
 8008dde:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008de0:	4b0f      	ldr	r3, [pc, #60]	@ (8008e20 <SGP_GetHT+0xf4>)
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	4b11      	ldr	r3, [pc, #68]	@ (8008e2c <SGP_GetHT+0x100>)
 8008de8:	719a      	strb	r2, [r3, #6]
 8008dea:	4b10      	ldr	r3, [pc, #64]	@ (8008e2c <SGP_GetHT+0x100>)
 8008dec:	799a      	ldrb	r2, [r3, #6]
 8008dee:	187b      	adds	r3, r7, r1
 8008df0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008df2:	187b      	adds	r3, r7, r1
 8008df4:	2102      	movs	r1, #2
 8008df6:	0018      	movs	r0, r3
 8008df8:	f7ff ff42 	bl	8008c80 <CalculateCRC>
 8008dfc:	0003      	movs	r3, r0
 8008dfe:	001a      	movs	r2, r3
 8008e00:	4b0a      	ldr	r3, [pc, #40]	@ (8008e2c <SGP_GetHT+0x100>)
 8008e02:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008e04:	4b0a      	ldr	r3, [pc, #40]	@ (8008e30 <SGP_GetHT+0x104>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
}
 8008e0a:	46c0      	nop			@ (mov r8, r8)
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	b004      	add	sp, #16
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	46c0      	nop			@ (mov r8, r8)
 8008e14:	42340000 	.word	0x42340000
 8008e18:	432f0000 	.word	0x432f0000
 8008e1c:	477fff00 	.word	0x477fff00
 8008e20:	20001202 	.word	0x20001202
 8008e24:	42c80000 	.word	0x42c80000
 8008e28:	20001200 	.word	0x20001200
 8008e2c:	2000003c 	.word	0x2000003c
 8008e30:	20001204 	.word	0x20001204

08008e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	0002      	movs	r2, r0
 8008e3c:	1dfb      	adds	r3, r7, #7
 8008e3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008e40:	1dfb      	adds	r3, r7, #7
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e46:	d809      	bhi.n	8008e5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e48:	1dfb      	adds	r3, r7, #7
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	001a      	movs	r2, r3
 8008e4e:	231f      	movs	r3, #31
 8008e50:	401a      	ands	r2, r3
 8008e52:	4b04      	ldr	r3, [pc, #16]	@ (8008e64 <__NVIC_EnableIRQ+0x30>)
 8008e54:	2101      	movs	r1, #1
 8008e56:	4091      	lsls	r1, r2
 8008e58:	000a      	movs	r2, r1
 8008e5a:	601a      	str	r2, [r3, #0]
  }
}
 8008e5c:	46c0      	nop			@ (mov r8, r8)
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	b002      	add	sp, #8
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	e000e100 	.word	0xe000e100

08008e68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	0002      	movs	r2, r0
 8008e70:	1dfb      	adds	r3, r7, #7
 8008e72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008e74:	1dfb      	adds	r3, r7, #7
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e7a:	d810      	bhi.n	8008e9e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e7c:	1dfb      	adds	r3, r7, #7
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	001a      	movs	r2, r3
 8008e82:	231f      	movs	r3, #31
 8008e84:	4013      	ands	r3, r2
 8008e86:	4908      	ldr	r1, [pc, #32]	@ (8008ea8 <__NVIC_DisableIRQ+0x40>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	409a      	lsls	r2, r3
 8008e8c:	0013      	movs	r3, r2
 8008e8e:	2280      	movs	r2, #128	@ 0x80
 8008e90:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008e92:	f3bf 8f4f 	dsb	sy
}
 8008e96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8008e98:	f3bf 8f6f 	isb	sy
}
 8008e9c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8008e9e:	46c0      	nop			@ (mov r8, r8)
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	b002      	add	sp, #8
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	46c0      	nop			@ (mov r8, r8)
 8008ea8:	e000e100 	.word	0xe000e100

08008eac <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8008eac:	b5b0      	push	{r4, r5, r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	0008      	movs	r0, r1
 8008eb6:	0011      	movs	r1, r2
 8008eb8:	1cfb      	adds	r3, r7, #3
 8008eba:	1c02      	adds	r2, r0, #0
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	1cbb      	adds	r3, r7, #2
 8008ec0:	1c0a      	adds	r2, r1, #0
 8008ec2:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8008ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8009034 <getSoundData+0x188>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2201      	movs	r2, #1
 8008ecc:	4053      	eors	r3, r2
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d107      	bne.n	8008ee4 <getSoundData+0x38>
 8008ed4:	4b58      	ldr	r3, [pc, #352]	@ (8009038 <getSoundData+0x18c>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2201      	movs	r2, #1
 8008edc:	4053      	eors	r3, r2
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <getSoundData+0x3c>
    {
        return false;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	e0a0      	b.n	800902a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8008ee8:	4b54      	ldr	r3, [pc, #336]	@ (800903c <getSoundData+0x190>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d005      	beq.n	8008efe <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8008ef2:	4b53      	ldr	r3, [pc, #332]	@ (8009040 <getSoundData+0x194>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	b25b      	sxtb	r3, r3
 8008ef8:	0018      	movs	r0, r3
 8008efa:	f7ff ffb5 	bl	8008e68 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8008efe:	f3bf 8f4f 	dsb	sy
}
 8008f02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8008f04:	f3bf 8f6f 	isb	sy
}
 8008f08:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8008f0a:	1cfb      	adds	r3, r7, #3
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d04c      	beq.n	8008fac <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8008f12:	4b4c      	ldr	r3, [pc, #304]	@ (8009044 <getSoundData+0x198>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d11b      	bne.n	8008f52 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	e00e      	b.n	8008f4a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	18d3      	adds	r3, r2, r3
 8008f32:	3302      	adds	r3, #2
 8008f34:	2200      	movs	r2, #0
 8008f36:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	18d3      	adds	r3, r2, r3
 8008f3e:	3308      	adds	r3, #8
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	3301      	adds	r3, #1
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b05      	cmp	r3, #5
 8008f4e:	d9ed      	bls.n	8008f2c <getSoundData+0x80>
 8008f50:	e02c      	b.n	8008fac <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	1c59      	adds	r1, r3, #1
 8008f58:	4b3b      	ldr	r3, [pc, #236]	@ (8009048 <getSoundData+0x19c>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800904c <getSoundData+0x1a0>)
 8008f5e:	681c      	ldr	r4, [r3, #0]
 8008f60:	4b38      	ldr	r3, [pc, #224]	@ (8009044 <getSoundData+0x198>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	0023      	movs	r3, r4
 8008f68:	f000 fdd4 	bl	8009b14 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e019      	b.n	8008fa6 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	18d3      	adds	r3, r2, r3
 8008f78:	1c98      	adds	r0, r3, #2
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8008f82:	4b33      	ldr	r3, [pc, #204]	@ (8009050 <getSoundData+0x1a4>)
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8008f8a:	4b32      	ldr	r3, [pc, #200]	@ (8009054 <getSoundData+0x1a8>)
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	0092      	lsls	r2, r2, #2
 8008f90:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8008f92:	4b2c      	ldr	r3, [pc, #176]	@ (8009044 <getSoundData+0x198>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	0013      	movs	r3, r2
 8008f9a:	0022      	movs	r2, r4
 8008f9c:	f000 fdba 	bl	8009b14 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b05      	cmp	r3, #5
 8008faa:	d9e2      	bls.n	8008f72 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8008fac:	1cbb      	adds	r3, r7, #2
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d028      	beq.n	8009006 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8008fb4:	240e      	movs	r4, #14
 8008fb6:	193b      	adds	r3, r7, r4
 8008fb8:	2200      	movs	r2, #0
 8008fba:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8008fbc:	250d      	movs	r5, #13
 8008fbe:	197b      	adds	r3, r7, r5
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8008fc4:	4b24      	ldr	r3, [pc, #144]	@ (8009058 <getSoundData+0x1ac>)
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	4924      	ldr	r1, [pc, #144]	@ (800905c <getSoundData+0x1b0>)
 8008fca:	197b      	adds	r3, r7, r5
 8008fcc:	193a      	adds	r2, r7, r4
 8008fce:	f000 fe45 	bl	8009c5c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8008fd2:	193b      	adds	r3, r7, r4
 8008fd4:	881a      	ldrh	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	21ff      	movs	r1, #255	@ 0xff
 8008fda:	4011      	ands	r1, r2
 8008fdc:	000c      	movs	r4, r1
 8008fde:	7b99      	ldrb	r1, [r3, #14]
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	4001      	ands	r1, r0
 8008fe4:	1c08      	adds	r0, r1, #0
 8008fe6:	1c21      	adds	r1, r4, #0
 8008fe8:	4301      	orrs	r1, r0
 8008fea:	7399      	strb	r1, [r3, #14]
 8008fec:	0a12      	lsrs	r2, r2, #8
 8008fee:	b290      	uxth	r0, r2
 8008ff0:	7bda      	ldrb	r2, [r3, #15]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	400a      	ands	r2, r1
 8008ff6:	1c11      	adds	r1, r2, #0
 8008ff8:	1c02      	adds	r2, r0, #0
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8008ffe:	197b      	adds	r3, r7, r5
 8009000:	781a      	ldrb	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8009006:	f000 f86f 	bl	80090e8 <micSettlingComplete>
 800900a:	0003      	movs	r3, r0
 800900c:	001a      	movs	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <getSoundData+0x190>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800901c:	4b08      	ldr	r3, [pc, #32]	@ (8009040 <getSoundData+0x194>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	b25b      	sxtb	r3, r3
 8009022:	0018      	movs	r0, r3
 8009024:	f7ff ff06 	bl	8008e34 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8009028:	2301      	movs	r3, #1
}
 800902a:	0018      	movs	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	b006      	add	sp, #24
 8009030:	bdb0      	pop	{r4, r5, r7, pc}
 8009032:	46c0      	nop			@ (mov r8, r8)
 8009034:	2000120d 	.word	0x2000120d
 8009038:	20001210 	.word	0x20001210
 800903c:	2000120f 	.word	0x2000120f
 8009040:	20001c60 	.word	0x20001c60
 8009044:	20001c9c 	.word	0x20001c9c
 8009048:	20001c64 	.word	0x20001c64
 800904c:	20001c68 	.word	0x20001c68
 8009050:	20001c6c 	.word	0x20001c6c
 8009054:	20001c84 	.word	0x20001c84
 8009058:	20001218 	.word	0x20001218
 800905c:	3b5c7333 	.word	0x3b5c7333

08009060 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	001a      	movs	r2, r3
 800906e:	1cfb      	adds	r3, r7, #3
 8009070:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8009072:	4b09      	ldr	r3, [pc, #36]	@ (8009098 <soundInit+0x38>)
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8009078:	4b08      	ldr	r3, [pc, #32]	@ (800909c <soundInit+0x3c>)
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800907e:	4b08      	ldr	r3, [pc, #32]	@ (80090a0 <soundInit+0x40>)
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8009084:	4b07      	ldr	r3, [pc, #28]	@ (80090a4 <soundInit+0x44>)
 8009086:	2200      	movs	r2, #0
 8009088:	569a      	ldrsb	r2, [r3, r2]
 800908a:	4b06      	ldr	r3, [pc, #24]	@ (80090a4 <soundInit+0x44>)
 800908c:	701a      	strb	r2, [r3, #0]

    return true;
 800908e:	2301      	movs	r3, #1
}
 8009090:	0018      	movs	r0, r3
 8009092:	46bd      	mov	sp, r7
 8009094:	b004      	add	sp, #16
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20001c58 	.word	0x20001c58
 800909c:	20001c54 	.word	0x20001c54
 80090a0:	20001c5c 	.word	0x20001c5c
 80090a4:	20001c60 	.word	0x20001c60

080090a8 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 80090ac:	4b02      	ldr	r3, [pc, #8]	@ (80090b8 <clearMaximumAmplitude+0x10>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
}
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20001218 	.word	0x20001218

080090bc <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 80090c0:	4b08      	ldr	r3, [pc, #32]	@ (80090e4 <startMicSettlingPeriod+0x28>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2200      	movs	r2, #0
 80090c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 80090ca:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <startMicSettlingPeriod+0x28>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	0018      	movs	r0, r3
 80090d0:	f008 fffc 	bl	80120cc <HAL_TIM_Base_Start>
 80090d4:	1e03      	subs	r3, r0, #0
 80090d6:	d001      	beq.n	80090dc <startMicSettlingPeriod+0x20>
    {
        return false;
 80090d8:	2300      	movs	r3, #0
 80090da:	e000      	b.n	80090de <startMicSettlingPeriod+0x22>
    }
    return true;
 80090dc:	2301      	movs	r3, #1
}
 80090de:	0018      	movs	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20001c54 	.word	0x20001c54

080090e8 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 80090ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009128 <micSettlingComplete+0x40>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2201      	movs	r2, #1
 80090f8:	401a      	ands	r2, r3
 80090fa:	1dfb      	adds	r3, r7, #7
 80090fc:	3a01      	subs	r2, #1
 80090fe:	4251      	negs	r1, r2
 8009100:	414a      	adcs	r2, r1
 8009102:	701a      	strb	r2, [r3, #0]
    if (complete)
 8009104:	1dfb      	adds	r3, r7, #7
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800910c:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <micSettlingComplete+0x40>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	0018      	movs	r0, r3
 8009112:	f009 f825 	bl	8012160 <HAL_TIM_Base_Stop>
      DataReady = true;
 8009116:	4b05      	ldr	r3, [pc, #20]	@ (800912c <micSettlingComplete+0x44>)
 8009118:	2201      	movs	r2, #1
 800911a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800911c:	1dfb      	adds	r3, r7, #7
 800911e:	781b      	ldrb	r3, [r3, #0]
}
 8009120:	0018      	movs	r0, r3
 8009122:	46bd      	mov	sp, r7
 8009124:	b002      	add	sp, #8
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20001c54 	.word	0x20001c54
 800912c:	2000120c 	.word	0x2000120c

08009130 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	0002      	movs	r2, r0
 8009138:	1dfb      	adds	r3, r7, #7
 800913a:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800913c:	4b29      	ldr	r3, [pc, #164]	@ (80091e4 <enableMicrophone+0xb4>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	1dfa      	adds	r2, r7, #7
 8009144:	7812      	ldrb	r2, [r2, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d101      	bne.n	800914e <enableMicrophone+0x1e>
    {
        return true;
 800914a:	2301      	movs	r3, #1
 800914c:	e045      	b.n	80091da <enableMicrophone+0xaa>
    }
    if (bEnable)
 800914e:	1dfb      	adds	r3, r7, #7
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d025      	beq.n	80091a2 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8009156:	f7ff ffb1 	bl	80090bc <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800915a:	4b23      	ldr	r3, [pc, #140]	@ (80091e8 <enableMicrophone+0xb8>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2280      	movs	r2, #128	@ 0x80
 8009160:	0092      	lsls	r2, r2, #2
 8009162:	4922      	ldr	r1, [pc, #136]	@ (80091ec <enableMicrophone+0xbc>)
 8009164:	0018      	movs	r0, r3
 8009166:	f005 fcf1 	bl	800eb4c <HAL_I2S_Receive_DMA>
 800916a:	1e03      	subs	r3, r0, #0
 800916c:	d001      	beq.n	8009172 <enableMicrophone+0x42>
        {
            return false;
 800916e:	2300      	movs	r3, #0
 8009170:	e033      	b.n	80091da <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8009172:	f7ff ff99 	bl	80090a8 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8009176:	4b1e      	ldr	r3, [pc, #120]	@ (80091f0 <enableMicrophone+0xc0>)
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800917c:	4b1d      	ldr	r3, [pc, #116]	@ (80091f4 <enableMicrophone+0xc4>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	b25b      	sxtb	r3, r3
 8009182:	0018      	movs	r0, r3
 8009184:	f7ff fe56 	bl	8008e34 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8009188:	4b1b      	ldr	r3, [pc, #108]	@ (80091f8 <enableMicrophone+0xc8>)
 800918a:	2201      	movs	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800918e:	4b15      	ldr	r3, [pc, #84]	@ (80091e4 <enableMicrophone+0xb4>)
 8009190:	2201      	movs	r2, #1
 8009192:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009194:	4b19      	ldr	r3, [pc, #100]	@ (80091fc <enableMicrophone+0xcc>)
 8009196:	2200      	movs	r2, #0
 8009198:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800919a:	4b19      	ldr	r3, [pc, #100]	@ (8009200 <enableMicrophone+0xd0>)
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
 80091a0:	e01a      	b.n	80091d8 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80091a2:	4b14      	ldr	r3, [pc, #80]	@ (80091f4 <enableMicrophone+0xc4>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	b25b      	sxtb	r3, r3
 80091a8:	0018      	movs	r0, r3
 80091aa:	f7ff fe5d 	bl	8008e68 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 80091ae:	4b12      	ldr	r3, [pc, #72]	@ (80091f8 <enableMicrophone+0xc8>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80091b4:	4b11      	ldr	r3, [pc, #68]	@ (80091fc <enableMicrophone+0xcc>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80091ba:	4b11      	ldr	r3, [pc, #68]	@ (8009200 <enableMicrophone+0xd0>)
 80091bc:	2200      	movs	r2, #0
 80091be:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 80091c0:	4b09      	ldr	r3, [pc, #36]	@ (80091e8 <enableMicrophone+0xb8>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	0018      	movs	r0, r3
 80091c6:	f005 fd83 	bl	800ecd0 <HAL_I2S_DMAStop>
 80091ca:	1e03      	subs	r3, r0, #0
 80091cc:	d001      	beq.n	80091d2 <enableMicrophone+0xa2>
        {
            return false;
 80091ce:	2300      	movs	r3, #0
 80091d0:	e003      	b.n	80091da <enableMicrophone+0xaa>
        }
        micEnabled = false;
 80091d2:	4b04      	ldr	r3, [pc, #16]	@ (80091e4 <enableMicrophone+0xb4>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
    }
    return true;
 80091d8:	2301      	movs	r3, #1
}
 80091da:	0018      	movs	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	b002      	add	sp, #8
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	46c0      	nop			@ (mov r8, r8)
 80091e4:	2000120d 	.word	0x2000120d
 80091e8:	20001c58 	.word	0x20001c58
 80091ec:	20001254 	.word	0x20001254
 80091f0:	20001214 	.word	0x20001214
 80091f4:	20001c60 	.word	0x20001c60
 80091f8:	2000120f 	.word	0x2000120f
 80091fc:	2000120e 	.word	0x2000120e
 8009200:	20001210 	.word	0x20001210

08009204 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8009208:	4b0c      	ldr	r3, [pc, #48]	@ (800923c <startSPLcalculation+0x38>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2201      	movs	r2, #1
 8009210:	4053      	eors	r3, r2
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <startSPLcalculation+0x18>
    {
        return false;
 8009218:	2300      	movs	r3, #0
 800921a:	e00c      	b.n	8009236 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800921c:	4b08      	ldr	r3, [pc, #32]	@ (8009240 <startSPLcalculation+0x3c>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <startSPLcalculation+0x26>
    {
        return true;
 8009226:	2301      	movs	r3, #1
 8009228:	e005      	b.n	8009236 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800922a:	f000 fb4f 	bl	80098cc <resetSPLstate>
    SPLcalcEnabled = true;
 800922e:	4b04      	ldr	r3, [pc, #16]	@ (8009240 <startSPLcalculation+0x3c>)
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
    return true;
 8009234:	2301      	movs	r3, #1
}
 8009236:	0018      	movs	r0, r3
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	2000120d 	.word	0x2000120d
 8009240:	2000120e 	.word	0x2000120e

08009244 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800924c:	2000      	movs	r0, #0
 800924e:	f000 f811 	bl	8009274 <processHalfDMAbuffer>
}
 8009252:	46c0      	nop			@ (mov r8, r8)
 8009254:	46bd      	mov	sp, r7
 8009256:	b002      	add	sp, #8
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8009262:	2380      	movs	r3, #128	@ 0x80
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	0018      	movs	r0, r3
 8009268:	f000 f804 	bl	8009274 <processHalfDMAbuffer>
}
 800926c:	46c0      	nop			@ (mov r8, r8)
 800926e:	46bd      	mov	sp, r7
 8009270:	b002      	add	sp, #8
 8009272:	bd80      	pop	{r7, pc}

08009274 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	005a      	lsls	r2, r3, #1
 8009280:	4b15      	ldr	r3, [pc, #84]	@ (80092d8 <processHalfDMAbuffer+0x64>)
 8009282:	18d3      	adds	r3, r2, r3
 8009284:	4a15      	ldr	r2, [pc, #84]	@ (80092dc <processHalfDMAbuffer+0x68>)
 8009286:	2180      	movs	r1, #128	@ 0x80
 8009288:	0089      	lsls	r1, r1, #2
 800928a:	0018      	movs	r0, r3
 800928c:	f000 fd2f 	bl	8009cee <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8009290:	4b13      	ldr	r3, [pc, #76]	@ (80092e0 <processHalfDMAbuffer+0x6c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	425a      	negs	r2, r3
 8009296:	4153      	adcs	r3, r2
 8009298:	b2da      	uxtb	r2, r3
 800929a:	4b11      	ldr	r3, [pc, #68]	@ (80092e0 <processHalfDMAbuffer+0x6c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2109      	movs	r1, #9
 80092a0:	4299      	cmp	r1, r3
 80092a2:	419b      	sbcs	r3, r3
 80092a4:	425b      	negs	r3, r3
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	480c      	ldr	r0, [pc, #48]	@ (80092dc <processHalfDMAbuffer+0x68>)
 80092aa:	2180      	movs	r1, #128	@ 0x80
 80092ac:	f000 fb40 	bl	8009930 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 80092b0:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <processHalfDMAbuffer+0x6c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d804      	bhi.n	80092c2 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 80092b8:	4b09      	ldr	r3, [pc, #36]	@ (80092e0 <processHalfDMAbuffer+0x6c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	4b08      	ldr	r3, [pc, #32]	@ (80092e0 <processHalfDMAbuffer+0x6c>)
 80092c0:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 80092c2:	4b08      	ldr	r3, [pc, #32]	@ (80092e4 <processHalfDMAbuffer+0x70>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 80092cc:	f000 f820 	bl	8009310 <calculateSPLQ31>
    }
}
 80092d0:	46c0      	nop			@ (mov r8, r8)
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b002      	add	sp, #8
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20001254 	.word	0x20001254
 80092dc:	20001a54 	.word	0x20001a54
 80092e0:	20001214 	.word	0x20001214
 80092e4:	2000120e 	.word	0x2000120e

080092e8 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 80092f0:	4a05      	ldr	r2, [pc, #20]	@ (8009308 <HAL_I2S_ErrorCallback+0x20>)
 80092f2:	233a      	movs	r3, #58	@ 0x3a
 80092f4:	33ff      	adds	r3, #255	@ 0xff
 80092f6:	0019      	movs	r1, r3
 80092f8:	4b04      	ldr	r3, [pc, #16]	@ (800930c <HAL_I2S_ErrorCallback+0x24>)
 80092fa:	0018      	movs	r0, r3
 80092fc:	f001 fdb2 	bl	800ae64 <errorHandler>
}
 8009300:	46c0      	nop			@ (mov r8, r8)
 8009302:	46bd      	mov	sp, r7
 8009304:	b002      	add	sp, #8
 8009306:	bd80      	pop	{r7, pc}
 8009308:	0801ebec 	.word	0x0801ebec
 800930c:	0801f208 	.word	0x0801f208

08009310 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8009310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009312:	b0b3      	sub	sp, #204	@ 0xcc
 8009314:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8009316:	4ae2      	ldr	r2, [pc, #904]	@ (80096a0 <calculateSPLQ31+0x390>)
 8009318:	2338      	movs	r3, #56	@ 0x38
 800931a:	2030      	movs	r0, #48	@ 0x30
 800931c:	181b      	adds	r3, r3, r0
 800931e:	19d9      	adds	r1, r3, r7
 8009320:	2334      	movs	r3, #52	@ 0x34
 8009322:	181b      	adds	r3, r3, r0
 8009324:	19d8      	adds	r0, r3, r7
 8009326:	2380      	movs	r3, #128	@ 0x80
 8009328:	f000 fc36 	bl	8009b98 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800932c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800932e:	2b00      	cmp	r3, #0
 8009330:	da00      	bge.n	8009334 <calculateSPLQ31+0x24>
 8009332:	3301      	adds	r3, #1
 8009334:	105b      	asrs	r3, r3, #1
 8009336:	001a      	movs	r2, r3
 8009338:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800933a:	2b00      	cmp	r3, #0
 800933c:	da00      	bge.n	8009340 <calculateSPLQ31+0x30>
 800933e:	3301      	adds	r3, #1
 8009340:	105b      	asrs	r3, r3, #1
 8009342:	18d3      	adds	r3, r2, r3
 8009344:	2188      	movs	r1, #136	@ 0x88
 8009346:	187a      	adds	r2, r7, r1
 8009348:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800934a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800934c:	187b      	adds	r3, r7, r1
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	3304      	adds	r3, #4
 8009354:	2284      	movs	r2, #132	@ 0x84
 8009356:	18b9      	adds	r1, r7, r2
 8009358:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800935a:	18bb      	adds	r3, r7, r2
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4ad1      	ldr	r2, [pc, #836]	@ (80096a4 <calculateSPLQ31+0x394>)
 8009360:	0019      	movs	r1, r3
 8009362:	0010      	movs	r0, r2
 8009364:	f000 fc58 	bl	8009c18 <getPo2factor>
 8009368:	0003      	movs	r3, r0
 800936a:	2280      	movs	r2, #128	@ 0x80
 800936c:	18ba      	adds	r2, r7, r2
 800936e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	2284      	movs	r2, #132	@ 0x84
 8009374:	2130      	movs	r1, #48	@ 0x30
 8009376:	1852      	adds	r2, r2, r1
 8009378:	19d2      	adds	r2, r2, r7
 800937a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800937c:	2300      	movs	r3, #0
 800937e:	2280      	movs	r2, #128	@ 0x80
 8009380:	1852      	adds	r2, r2, r1
 8009382:	19d2      	adds	r2, r2, r7
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	e032      	b.n	80093ee <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8009388:	4ac5      	ldr	r2, [pc, #788]	@ (80096a0 <calculateSPLQ31+0x390>)
 800938a:	2680      	movs	r6, #128	@ 0x80
 800938c:	2330      	movs	r3, #48	@ 0x30
 800938e:	18f1      	adds	r1, r6, r3
 8009390:	19cb      	adds	r3, r1, r7
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	589a      	ldr	r2, [r3, r2]
 8009398:	2188      	movs	r1, #136	@ 0x88
 800939a:	1879      	adds	r1, r7, r1
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	2180      	movs	r1, #128	@ 0x80
 80093a2:	1879      	adds	r1, r7, r1
 80093a4:	680b      	ldr	r3, [r1, #0]
 80093a6:	409a      	lsls	r2, r3
 80093a8:	0011      	movs	r1, r2
 80093aa:	4abf      	ldr	r2, [pc, #764]	@ (80096a8 <calculateSPLQ31+0x398>)
 80093ac:	2084      	movs	r0, #132	@ 0x84
 80093ae:	2330      	movs	r3, #48	@ 0x30
 80093b0:	18c3      	adds	r3, r0, r3
 80093b2:	19db      	adds	r3, r3, r7
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 80093ba:	2230      	movs	r2, #48	@ 0x30
 80093bc:	1883      	adds	r3, r0, r2
 80093be:	19db      	adds	r3, r3, r7
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3301      	adds	r3, #1
 80093c4:	49b8      	ldr	r1, [pc, #736]	@ (80096a8 <calculateSPLQ31+0x398>)
 80093c6:	009a      	lsls	r2, r3, #2
 80093c8:	2300      	movs	r3, #0
 80093ca:	5053      	str	r3, [r2, r1]
        count += 2;
 80093cc:	2230      	movs	r2, #48	@ 0x30
 80093ce:	1883      	adds	r3, r0, r2
 80093d0:	19db      	adds	r3, r3, r7
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3302      	adds	r3, #2
 80093d6:	0011      	movs	r1, r2
 80093d8:	1882      	adds	r2, r0, r2
 80093da:	19d2      	adds	r2, r2, r7
 80093dc:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 80093de:	000a      	movs	r2, r1
 80093e0:	18b3      	adds	r3, r6, r2
 80093e2:	19db      	adds	r3, r3, r7
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3301      	adds	r3, #1
 80093e8:	18b2      	adds	r2, r6, r2
 80093ea:	19d2      	adds	r2, r2, r7
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	2380      	movs	r3, #128	@ 0x80
 80093f0:	2630      	movs	r6, #48	@ 0x30
 80093f2:	199b      	adds	r3, r3, r6
 80093f4:	19db      	adds	r3, r3, r7
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80093fa:	d9c5      	bls.n	8009388 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 80093fc:	4bab      	ldr	r3, [pc, #684]	@ (80096ac <calculateSPLQ31+0x39c>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	49a9      	ldr	r1, [pc, #676]	@ (80096a8 <calculateSPLQ31+0x398>)
 8009402:	2301      	movs	r3, #1
 8009404:	2200      	movs	r2, #0
 8009406:	f00f fc3b 	bl	8018c80 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800940a:	4aa9      	ldr	r2, [pc, #676]	@ (80096b0 <calculateSPLQ31+0x3a0>)
 800940c:	2338      	movs	r3, #56	@ 0x38
 800940e:	199b      	adds	r3, r3, r6
 8009410:	19d9      	adds	r1, r3, r7
 8009412:	2334      	movs	r3, #52	@ 0x34
 8009414:	199b      	adds	r3, r3, r6
 8009416:	19d8      	adds	r0, r3, r7
 8009418:	237e      	movs	r3, #126	@ 0x7e
 800941a:	f000 fbbd 	bl	8009b98 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800941e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009420:	2380      	movs	r3, #128	@ 0x80
 8009422:	061b      	lsls	r3, r3, #24
 8009424:	429a      	cmp	r2, r3
 8009426:	d101      	bne.n	800942c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8009428:	4b9e      	ldr	r3, [pc, #632]	@ (80096a4 <calculateSPLQ31+0x394>)
 800942a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800942c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800942e:	2380      	movs	r3, #128	@ 0x80
 8009430:	061b      	lsls	r3, r3, #24
 8009432:	429a      	cmp	r2, r3
 8009434:	d101      	bne.n	800943a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8009436:	4b9b      	ldr	r3, [pc, #620]	@ (80096a4 <calculateSPLQ31+0x394>)
 8009438:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800943a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800943c:	17da      	asrs	r2, r3, #31
 800943e:	189b      	adds	r3, r3, r2
 8009440:	4053      	eors	r3, r2
 8009442:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8009444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009446:	17da      	asrs	r2, r3, #31
 8009448:	189b      	adds	r3, r3, r2
 800944a:	4053      	eors	r3, r2
 800944c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800944e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009452:	429a      	cmp	r2, r3
 8009454:	dd01      	ble.n	800945a <calculateSPLQ31+0x14a>
    {
        max = min;
 8009456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009458:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800945a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800945c:	3304      	adds	r3, #4
 800945e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8009460:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009462:	4a90      	ldr	r2, [pc, #576]	@ (80096a4 <calculateSPLQ31+0x394>)
 8009464:	0019      	movs	r1, r3
 8009466:	0010      	movs	r0, r2
 8009468:	f000 fbd6 	bl	8009c18 <getPo2factor>
 800946c:	0003      	movs	r3, r0
 800946e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8009470:	2302      	movs	r3, #2
 8009472:	22ac      	movs	r2, #172	@ 0xac
 8009474:	18ba      	adds	r2, r7, r2
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	e012      	b.n	80094a0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800947a:	4a8b      	ldr	r2, [pc, #556]	@ (80096a8 <calculateSPLQ31+0x398>)
 800947c:	20ac      	movs	r0, #172	@ 0xac
 800947e:	183b      	adds	r3, r7, r0
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	589a      	ldr	r2, [r3, r2]
 8009486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009488:	409a      	lsls	r2, r3
 800948a:	0011      	movs	r1, r2
 800948c:	4a86      	ldr	r2, [pc, #536]	@ (80096a8 <calculateSPLQ31+0x398>)
 800948e:	183b      	adds	r3, r7, r0
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8009496:	183b      	adds	r3, r7, r0
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	183a      	adds	r2, r7, r0
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	23ac      	movs	r3, #172	@ 0xac
 80094a2:	18fb      	adds	r3, r7, r3
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80094a8:	d9e7      	bls.n	800947a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 80094aa:	4b7d      	ldr	r3, [pc, #500]	@ (80096a0 <calculateSPLQ31+0x390>)
 80094ac:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 80094ae:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80094b0:	4b7d      	ldr	r3, [pc, #500]	@ (80096a8 <calculateSPLQ31+0x398>)
 80094b2:	2240      	movs	r2, #64	@ 0x40
 80094b4:	0018      	movs	r0, r3
 80094b6:	f010 f98d 	bl	80197d4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 80094ba:	2330      	movs	r3, #48	@ 0x30
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	0018      	movs	r0, r3
 80094c0:	2330      	movs	r3, #48	@ 0x30
 80094c2:	001a      	movs	r2, r3
 80094c4:	2100      	movs	r1, #0
 80094c6:	f011 fe0d 	bl	801b0e4 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 80094ca:	2200      	movs	r2, #0
 80094cc:	2300      	movs	r3, #0
 80094ce:	21a0      	movs	r1, #160	@ 0xa0
 80094d0:	1879      	adds	r1, r7, r1
 80094d2:	600a      	str	r2, [r1, #0]
 80094d4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 80094d6:	2301      	movs	r3, #1
 80094d8:	229c      	movs	r2, #156	@ 0x9c
 80094da:	18ba      	adds	r2, r7, r2
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	e05b      	b.n	8009598 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 80094e0:	269c      	movs	r6, #156	@ 0x9c
 80094e2:	19bb      	adds	r3, r7, r6
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	009a      	lsls	r2, r3, #2
 80094e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094ea:	189b      	adds	r3, r3, r2
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	17db      	asrs	r3, r3, #31
 80094f2:	617b      	str	r3, [r7, #20]
 80094f4:	4b6f      	ldr	r3, [pc, #444]	@ (80096b4 <calculateSPLQ31+0x3a4>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	19bb      	adds	r3, r7, r6
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	18d3      	adds	r3, r2, r3
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	60bb      	str	r3, [r7, #8]
 8009504:	2300      	movs	r3, #0
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6938      	ldr	r0, [r7, #16]
 800950e:	6979      	ldr	r1, [r7, #20]
 8009510:	f7f7 f84c 	bl	80005ac <__aeabi_lmul>
 8009514:	0002      	movs	r2, r0
 8009516:	000b      	movs	r3, r1
 8009518:	0010      	movs	r0, r2
 800951a:	0019      	movs	r1, r3
 800951c:	23a0      	movs	r3, #160	@ 0xa0
 800951e:	18fa      	adds	r2, r7, r3
 8009520:	6853      	ldr	r3, [r2, #4]
 8009522:	6812      	ldr	r2, [r2, #0]
 8009524:	1812      	adds	r2, r2, r0
 8009526:	414b      	adcs	r3, r1
 8009528:	21a0      	movs	r1, #160	@ 0xa0
 800952a:	1879      	adds	r1, r7, r1
 800952c:	600a      	str	r2, [r1, #0]
 800952e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8009530:	4b61      	ldr	r3, [pc, #388]	@ (80096b8 <calculateSPLQ31+0x3a8>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	19bb      	adds	r3, r7, r6
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	18d3      	adds	r3, r2, r3
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b06      	cmp	r3, #6
 800953e:	d025      	beq.n	800958c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8009540:	4b5d      	ldr	r3, [pc, #372]	@ (80096b8 <calculateSPLQ31+0x3a8>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	19bb      	adds	r3, r7, r6
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	18d3      	adds	r3, r2, r3
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2230      	movs	r2, #48	@ 0x30
 800954e:	18ba      	adds	r2, r7, r2
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	18d3      	adds	r3, r2, r3
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	6859      	ldr	r1, [r3, #4]
 8009558:	19bb      	adds	r3, r7, r6
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	009a      	lsls	r2, r3, #2
 800955e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009560:	189b      	adds	r3, r3, r2
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	603b      	str	r3, [r7, #0]
 8009566:	17db      	asrs	r3, r3, #31
 8009568:	607b      	str	r3, [r7, #4]
 800956a:	4b53      	ldr	r3, [pc, #332]	@ (80096b8 <calculateSPLQ31+0x3a8>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	19be      	adds	r6, r7, r6
 8009570:	6833      	ldr	r3, [r6, #0]
 8009572:	18d3      	adds	r3, r2, r3
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	001e      	movs	r6, r3
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	1880      	adds	r0, r0, r2
 800957e:	4159      	adcs	r1, r3
 8009580:	2330      	movs	r3, #48	@ 0x30
 8009582:	18fa      	adds	r2, r7, r3
 8009584:	00f3      	lsls	r3, r6, #3
 8009586:	18d3      	adds	r3, r2, r3
 8009588:	6018      	str	r0, [r3, #0]
 800958a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800958c:	229c      	movs	r2, #156	@ 0x9c
 800958e:	18bb      	adds	r3, r7, r2
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3301      	adds	r3, #1
 8009594:	18ba      	adds	r2, r7, r2
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	239c      	movs	r3, #156	@ 0x9c
 800959a:	18fb      	adds	r3, r7, r3
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b3f      	cmp	r3, #63	@ 0x3f
 80095a0:	d99e      	bls.n	80094e0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 80095a2:	2380      	movs	r3, #128	@ 0x80
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	001a      	movs	r2, r3
 80095ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	18d3      	adds	r3, r2, r3
 80095b2:	3b22      	subs	r3, #34	@ 0x22
 80095b4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 80095b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095b8:	17da      	asrs	r2, r3, #31
 80095ba:	189b      	adds	r3, r3, r2
 80095bc:	4053      	eors	r3, r2
 80095be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 80095c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da62      	bge.n	800968c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 80095c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095c8:	3b20      	subs	r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	db05      	blt.n	80095da <calculateSPLQ31+0x2ca>
 80095ce:	22a0      	movs	r2, #160	@ 0xa0
 80095d0:	18ba      	adds	r2, r7, r2
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	409a      	lsls	r2, r3
 80095d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80095d8:	e010      	b.n	80095fc <calculateSPLQ31+0x2ec>
 80095da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095dc:	2220      	movs	r2, #32
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	22a0      	movs	r2, #160	@ 0xa0
 80095e2:	18ba      	adds	r2, r7, r2
 80095e4:	6812      	ldr	r2, [r2, #0]
 80095e6:	40da      	lsrs	r2, r3
 80095e8:	0013      	movs	r3, r2
 80095ea:	22a4      	movs	r2, #164	@ 0xa4
 80095ec:	18ba      	adds	r2, r7, r2
 80095ee:	6811      	ldr	r1, [r2, #0]
 80095f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095f2:	4091      	lsls	r1, r2
 80095f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80095f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f8:	431a      	orrs	r2, r3
 80095fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80095fc:	21a0      	movs	r1, #160	@ 0xa0
 80095fe:	187b      	adds	r3, r7, r1
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009604:	409a      	lsls	r2, r3
 8009606:	623a      	str	r2, [r7, #32]
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800960c:	187a      	adds	r2, r7, r1
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009612:	2300      	movs	r3, #0
 8009614:	2298      	movs	r2, #152	@ 0x98
 8009616:	18ba      	adds	r2, r7, r2
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	e031      	b.n	8009680 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800961c:	2330      	movs	r3, #48	@ 0x30
 800961e:	18fa      	adds	r2, r7, r3
 8009620:	2398      	movs	r3, #152	@ 0x98
 8009622:	18fb      	adds	r3, r7, r3
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	18d3      	adds	r3, r2, r3
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009630:	3920      	subs	r1, #32
 8009632:	2900      	cmp	r1, #0
 8009634:	db03      	blt.n	800963e <calculateSPLQ31+0x32e>
 8009636:	0010      	movs	r0, r2
 8009638:	4088      	lsls	r0, r1
 800963a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800963c:	e00c      	b.n	8009658 <calculateSPLQ31+0x348>
 800963e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009640:	2020      	movs	r0, #32
 8009642:	1a41      	subs	r1, r0, r1
 8009644:	0010      	movs	r0, r2
 8009646:	40c8      	lsrs	r0, r1
 8009648:	0001      	movs	r1, r0
 800964a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800964c:	001c      	movs	r4, r3
 800964e:	4084      	lsls	r4, r0
 8009650:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8009652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009654:	4308      	orrs	r0, r1
 8009656:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009658:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800965a:	0013      	movs	r3, r2
 800965c:	408b      	lsls	r3, r1
 800965e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009660:	2330      	movs	r3, #48	@ 0x30
 8009662:	18fa      	adds	r2, r7, r3
 8009664:	2098      	movs	r0, #152	@ 0x98
 8009666:	183b      	adds	r3, r7, r0
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	18d3      	adds	r3, r2, r3
 800966e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009672:	6019      	str	r1, [r3, #0]
 8009674:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009676:	183b      	adds	r3, r7, r0
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	183a      	adds	r2, r7, r0
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	2398      	movs	r3, #152	@ 0x98
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b05      	cmp	r3, #5
 8009688:	d9c8      	bls.n	800961c <calculateSPLQ31+0x30c>
 800968a:	e06b      	b.n	8009764 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800968c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800968e:	3b20      	subs	r3, #32
 8009690:	2b00      	cmp	r3, #0
 8009692:	db13      	blt.n	80096bc <calculateSPLQ31+0x3ac>
 8009694:	22a4      	movs	r2, #164	@ 0xa4
 8009696:	18ba      	adds	r2, r7, r2
 8009698:	6812      	ldr	r2, [r2, #0]
 800969a:	40da      	lsrs	r2, r3
 800969c:	61ba      	str	r2, [r7, #24]
 800969e:	e01e      	b.n	80096de <calculateSPLQ31+0x3ce>
 80096a0:	20001a54 	.word	0x20001a54
 80096a4:	7fffffff 	.word	0x7fffffff
 80096a8:	20001ca0 	.word	0x20001ca0
 80096ac:	20000058 	.word	0x20000058
 80096b0:	20001ca8 	.word	0x20001ca8
 80096b4:	2000005c 	.word	0x2000005c
 80096b8:	20000068 	.word	0x20000068
 80096bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096be:	2220      	movs	r2, #32
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	22a4      	movs	r2, #164	@ 0xa4
 80096c4:	18ba      	adds	r2, r7, r2
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	409a      	lsls	r2, r3
 80096ca:	0013      	movs	r3, r2
 80096cc:	22a0      	movs	r2, #160	@ 0xa0
 80096ce:	18ba      	adds	r2, r7, r2
 80096d0:	6811      	ldr	r1, [r2, #0]
 80096d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096d4:	40d1      	lsrs	r1, r2
 80096d6:	61b9      	str	r1, [r7, #24]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	431a      	orrs	r2, r3
 80096dc:	61ba      	str	r2, [r7, #24]
 80096de:	23a4      	movs	r3, #164	@ 0xa4
 80096e0:	18fb      	adds	r3, r7, r3
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096e6:	40da      	lsrs	r2, r3
 80096e8:	61fa      	str	r2, [r7, #28]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	21a0      	movs	r1, #160	@ 0xa0
 80096f0:	1879      	adds	r1, r7, r1
 80096f2:	600a      	str	r2, [r1, #0]
 80096f4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80096f6:	2300      	movs	r3, #0
 80096f8:	2294      	movs	r2, #148	@ 0x94
 80096fa:	18ba      	adds	r2, r7, r2
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	e02c      	b.n	800975a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8009700:	2330      	movs	r3, #48	@ 0x30
 8009702:	18fa      	adds	r2, r7, r3
 8009704:	2394      	movs	r3, #148	@ 0x94
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	18d3      	adds	r3, r2, r3
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009714:	3920      	subs	r1, #32
 8009716:	2900      	cmp	r1, #0
 8009718:	db03      	blt.n	8009722 <calculateSPLQ31+0x412>
 800971a:	0018      	movs	r0, r3
 800971c:	40c8      	lsrs	r0, r1
 800971e:	0004      	movs	r4, r0
 8009720:	e00a      	b.n	8009738 <calculateSPLQ31+0x428>
 8009722:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009724:	2020      	movs	r0, #32
 8009726:	1a41      	subs	r1, r0, r1
 8009728:	0018      	movs	r0, r3
 800972a:	4088      	lsls	r0, r1
 800972c:	0001      	movs	r1, r0
 800972e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009730:	0016      	movs	r6, r2
 8009732:	40c6      	lsrs	r6, r0
 8009734:	0034      	movs	r4, r6
 8009736:	430c      	orrs	r4, r1
 8009738:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800973a:	40cb      	lsrs	r3, r1
 800973c:	001d      	movs	r5, r3
 800973e:	2330      	movs	r3, #48	@ 0x30
 8009740:	18fa      	adds	r2, r7, r3
 8009742:	2194      	movs	r1, #148	@ 0x94
 8009744:	187b      	adds	r3, r7, r1
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	18d3      	adds	r3, r2, r3
 800974c:	601c      	str	r4, [r3, #0]
 800974e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009750:	187b      	adds	r3, r7, r1
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	187a      	adds	r2, r7, r1
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	2394      	movs	r3, #148	@ 0x94
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b05      	cmp	r3, #5
 8009762:	d9cd      	bls.n	8009700 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8009764:	230f      	movs	r3, #15
 8009766:	425d      	negs	r5, r3
 8009768:	2305      	movs	r3, #5
 800976a:	425e      	negs	r6, r3
 800976c:	4b4a      	ldr	r3, [pc, #296]	@ (8009898 <calculateSPLQ31+0x588>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4b4a      	ldr	r3, [pc, #296]	@ (800989c <calculateSPLQ31+0x58c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	21a0      	movs	r1, #160	@ 0xa0
 800977a:	1879      	adds	r1, r7, r1
 800977c:	6808      	ldr	r0, [r1, #0]
 800977e:	6849      	ldr	r1, [r1, #4]
 8009780:	4c47      	ldr	r4, [pc, #284]	@ (80098a0 <calculateSPLQ31+0x590>)
 8009782:	9403      	str	r4, [sp, #12]
 8009784:	4c47      	ldr	r4, [pc, #284]	@ (80098a4 <calculateSPLQ31+0x594>)
 8009786:	9402      	str	r4, [sp, #8]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	9200      	str	r2, [sp, #0]
 800978c:	0033      	movs	r3, r6
 800978e:	002a      	movs	r2, r5
 8009790:	f000 fa86 	bl	8009ca0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8009794:	2300      	movs	r3, #0
 8009796:	2290      	movs	r2, #144	@ 0x90
 8009798:	18ba      	adds	r2, r7, r2
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	e026      	b.n	80097ec <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800979e:	2330      	movs	r3, #48	@ 0x30
 80097a0:	18fa      	adds	r2, r7, r3
 80097a2:	2490      	movs	r4, #144	@ 0x90
 80097a4:	193b      	adds	r3, r7, r4
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	18d3      	adds	r3, r2, r3
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	6859      	ldr	r1, [r3, #4]
 80097b0:	230f      	movs	r3, #15
 80097b2:	425d      	negs	r5, r3
 80097b4:	2305      	movs	r3, #5
 80097b6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 80097b8:	193b      	adds	r3, r7, r4
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	009a      	lsls	r2, r3, #2
 80097be:	4b3a      	ldr	r3, [pc, #232]	@ (80098a8 <calculateSPLQ31+0x598>)
 80097c0:	18d3      	adds	r3, r2, r3
 80097c2:	193a      	adds	r2, r7, r4
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	0094      	lsls	r4, r2, #2
 80097c8:	4a38      	ldr	r2, [pc, #224]	@ (80098ac <calculateSPLQ31+0x59c>)
 80097ca:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 80097cc:	9203      	str	r2, [sp, #12]
 80097ce:	9302      	str	r3, [sp, #8]
 80097d0:	2300      	movs	r3, #0
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	2300      	movs	r3, #0
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	0033      	movs	r3, r6
 80097da:	002a      	movs	r2, r5
 80097dc:	f000 fa60 	bl	8009ca0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80097e0:	2490      	movs	r4, #144	@ 0x90
 80097e2:	193b      	adds	r3, r7, r4
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3301      	adds	r3, #1
 80097e8:	193a      	adds	r2, r7, r4
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	2390      	movs	r3, #144	@ 0x90
 80097ee:	18fb      	adds	r3, r7, r3
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d9d3      	bls.n	800979e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 80097f6:	4b2b      	ldr	r3, [pc, #172]	@ (80098a4 <calculateSPLQ31+0x594>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b2d      	ldr	r3, [pc, #180]	@ (80098b0 <calculateSPLQ31+0x5a0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	18d2      	adds	r2, r2, r3
 8009800:	4b2b      	ldr	r3, [pc, #172]	@ (80098b0 <calculateSPLQ31+0x5a0>)
 8009802:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8009804:	4b26      	ldr	r3, [pc, #152]	@ (80098a0 <calculateSPLQ31+0x590>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	4b2a      	ldr	r3, [pc, #168]	@ (80098b4 <calculateSPLQ31+0x5a4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	18d2      	adds	r2, r2, r3
 800980e:	4b29      	ldr	r3, [pc, #164]	@ (80098b4 <calculateSPLQ31+0x5a4>)
 8009810:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009812:	2300      	movs	r3, #0
 8009814:	228c      	movs	r2, #140	@ 0x8c
 8009816:	18ba      	adds	r2, r7, r2
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	e025      	b.n	8009868 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800981c:	4b22      	ldr	r3, [pc, #136]	@ (80098a8 <calculateSPLQ31+0x598>)
 800981e:	208c      	movs	r0, #140	@ 0x8c
 8009820:	183a      	adds	r2, r7, r0
 8009822:	6812      	ldr	r2, [r2, #0]
 8009824:	0092      	lsls	r2, r2, #2
 8009826:	58d2      	ldr	r2, [r2, r3]
 8009828:	4b23      	ldr	r3, [pc, #140]	@ (80098b8 <calculateSPLQ31+0x5a8>)
 800982a:	1839      	adds	r1, r7, r0
 800982c:	6809      	ldr	r1, [r1, #0]
 800982e:	0089      	lsls	r1, r1, #2
 8009830:	58cb      	ldr	r3, [r1, r3]
 8009832:	18d1      	adds	r1, r2, r3
 8009834:	4b20      	ldr	r3, [pc, #128]	@ (80098b8 <calculateSPLQ31+0x5a8>)
 8009836:	183a      	adds	r2, r7, r0
 8009838:	6812      	ldr	r2, [r2, #0]
 800983a:	0092      	lsls	r2, r2, #2
 800983c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800983e:	4b1b      	ldr	r3, [pc, #108]	@ (80098ac <calculateSPLQ31+0x59c>)
 8009840:	183a      	adds	r2, r7, r0
 8009842:	6812      	ldr	r2, [r2, #0]
 8009844:	0092      	lsls	r2, r2, #2
 8009846:	58d2      	ldr	r2, [r2, r3]
 8009848:	4b1c      	ldr	r3, [pc, #112]	@ (80098bc <calculateSPLQ31+0x5ac>)
 800984a:	1839      	adds	r1, r7, r0
 800984c:	6809      	ldr	r1, [r1, #0]
 800984e:	0089      	lsls	r1, r1, #2
 8009850:	58cb      	ldr	r3, [r1, r3]
 8009852:	18d1      	adds	r1, r2, r3
 8009854:	4b19      	ldr	r3, [pc, #100]	@ (80098bc <calculateSPLQ31+0x5ac>)
 8009856:	183a      	adds	r2, r7, r0
 8009858:	6812      	ldr	r2, [r2, #0]
 800985a:	0092      	lsls	r2, r2, #2
 800985c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800985e:	183b      	adds	r3, r7, r0
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	183a      	adds	r2, r7, r0
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	238c      	movs	r3, #140	@ 0x8c
 800986a:	18fb      	adds	r3, r7, r3
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b05      	cmp	r3, #5
 8009870:	d9d4      	bls.n	800981c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8009872:	4b13      	ldr	r3, [pc, #76]	@ (80098c0 <calculateSPLQ31+0x5b0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	4b11      	ldr	r3, [pc, #68]	@ (80098c0 <calculateSPLQ31+0x5b0>)
 800987a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800987c:	4b10      	ldr	r3, [pc, #64]	@ (80098c0 <calculateSPLQ31+0x5b0>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b0f      	cmp	r3, #15
 8009882:	d905      	bls.n	8009890 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8009884:	4b0f      	ldr	r3, [pc, #60]	@ (80098c4 <calculateSPLQ31+0x5b4>)
 8009886:	2201      	movs	r2, #1
 8009888:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800988a:	4b0f      	ldr	r3, [pc, #60]	@ (80098c8 <calculateSPLQ31+0x5b8>)
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
    }
}
 8009890:	46c0      	nop			@ (mov r8, r8)
 8009892:	46bd      	mov	sp, r7
 8009894:	b02f      	add	sp, #188	@ 0xbc
 8009896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009898:	20000060 	.word	0x20000060
 800989c:	20000064 	.word	0x20000064
 80098a0:	20001220 	.word	0x20001220
 80098a4:	2000121c 	.word	0x2000121c
 80098a8:	20001224 	.word	0x20001224
 80098ac:	2000123c 	.word	0x2000123c
 80098b0:	20001c64 	.word	0x20001c64
 80098b4:	20001c68 	.word	0x20001c68
 80098b8:	20001c6c 	.word	0x20001c6c
 80098bc:	20001c84 	.word	0x20001c84
 80098c0:	20001c9c 	.word	0x20001c9c
 80098c4:	20001210 	.word	0x20001210
 80098c8:	2000120e 	.word	0x2000120e

080098cc <resetSPLstate>:

static void resetSPLstate(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 80098d2:	4b11      	ldr	r3, [pc, #68]	@ (8009918 <resetSPLstate+0x4c>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 80098d8:	4b10      	ldr	r3, [pc, #64]	@ (800991c <resetSPLstate+0x50>)
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 80098de:	4b10      	ldr	r3, [pc, #64]	@ (8009920 <resetSPLstate+0x54>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80098e4:	2300      	movs	r3, #0
 80098e6:	607b      	str	r3, [r7, #4]
 80098e8:	e00c      	b.n	8009904 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 80098ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009924 <resetSPLstate+0x58>)
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	0092      	lsls	r2, r2, #2
 80098f0:	2100      	movs	r1, #0
 80098f2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80098f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009928 <resetSPLstate+0x5c>)
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	0092      	lsls	r2, r2, #2
 80098fa:	2100      	movs	r1, #0
 80098fc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3301      	adds	r3, #1
 8009902:	607b      	str	r3, [r7, #4]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b05      	cmp	r3, #5
 8009908:	d9ef      	bls.n	80098ea <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800990a:	4b08      	ldr	r3, [pc, #32]	@ (800992c <resetSPLstate+0x60>)
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
}
 8009910:	46c0      	nop			@ (mov r8, r8)
 8009912:	46bd      	mov	sp, r7
 8009914:	b002      	add	sp, #8
 8009916:	bd80      	pop	{r7, pc}
 8009918:	20001c64 	.word	0x20001c64
 800991c:	20001c68 	.word	0x20001c68
 8009920:	20001c9c 	.word	0x20001c9c
 8009924:	20001c6c 	.word	0x20001c6c
 8009928:	20001c84 	.word	0x20001c84
 800992c:	20001210 	.word	0x20001210

08009930 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8009930:	b5b0      	push	{r4, r5, r7, lr}
 8009932:	b090      	sub	sp, #64	@ 0x40
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	0019      	movs	r1, r3
 800993c:	1dfb      	adds	r3, r7, #7
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	1dbb      	adds	r3, r7, #6
 8009942:	1c0a      	adds	r2, r1, #0
 8009944:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8009946:	1dfb      	adds	r3, r7, #7
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800994e:	4b3b      	ldr	r3, [pc, #236]	@ (8009a3c <getFilteredMaxAmplitudeQ31+0x10c>)
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8009954:	4b3a      	ldr	r3, [pc, #232]	@ (8009a40 <getFilteredMaxAmplitudeQ31+0x110>)
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8009962:	2305      	movs	r3, #5
 8009964:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8009966:	2300      	movs	r3, #0
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
 800996a:	e040      	b.n	80099ee <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800996c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	18d3      	adds	r3, r2, r3
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	409a      	lsls	r2, r3
 800997a:	0013      	movs	r3, r2
 800997c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800997e:	4b30      	ldr	r3, [pc, #192]	@ (8009a40 <getFilteredMaxAmplitudeQ31+0x110>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	425a      	negs	r2, r3
 8009984:	4b2e      	ldr	r3, [pc, #184]	@ (8009a40 <getFilteredMaxAmplitudeQ31+0x110>)
 8009986:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8009988:	2418      	movs	r4, #24
 800998a:	193a      	adds	r2, r7, r4
 800998c:	492c      	ldr	r1, [pc, #176]	@ (8009a40 <getFilteredMaxAmplitudeQ31+0x110>)
 800998e:	231c      	movs	r3, #28
 8009990:	18f8      	adds	r0, r7, r3
 8009992:	2301      	movs	r3, #1
 8009994:	f00f ff76 	bl	8019884 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8009998:	2514      	movs	r5, #20
 800999a:	197a      	adds	r2, r7, r5
 800999c:	1939      	adds	r1, r7, r4
 800999e:	4829      	ldr	r0, [pc, #164]	@ (8009a44 <getFilteredMaxAmplitudeQ31+0x114>)
 80099a0:	2301      	movs	r3, #1
 80099a2:	f00f ff3d 	bl	8019820 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 80099a6:	2410      	movs	r4, #16
 80099a8:	193a      	adds	r2, r7, r4
 80099aa:	4924      	ldr	r1, [pc, #144]	@ (8009a3c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099ac:	4826      	ldr	r0, [pc, #152]	@ (8009a48 <getFilteredMaxAmplitudeQ31+0x118>)
 80099ae:	2301      	movs	r3, #1
 80099b0:	f00f ff36 	bl	8019820 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 80099b4:	4a21      	ldr	r2, [pc, #132]	@ (8009a3c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099b6:	1939      	adds	r1, r7, r4
 80099b8:	1978      	adds	r0, r7, r5
 80099ba:	2301      	movs	r3, #1
 80099bc:	f00f ff62 	bl	8019884 <arm_add_q31>

        lastData = fx;
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a40 <getFilteredMaxAmplitudeQ31+0x110>)
 80099c4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 80099c6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a3c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099cc:	429a      	cmp	r2, r3
 80099ce:	da03      	bge.n	80099d8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 80099d0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a3c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099d6:	e007      	b.n	80099e8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 80099d8:	4b18      	ldr	r3, [pc, #96]	@ (8009a3c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099de:	429a      	cmp	r2, r3
 80099e0:	dd02      	ble.n	80099e8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 80099e2:	4b16      	ldr	r3, [pc, #88]	@ (8009a3c <getFilteredMaxAmplitudeQ31+0x10c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 80099e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ea:	3301      	adds	r3, #1
 80099ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d3ba      	bcc.n	800996c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80099f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f8:	17da      	asrs	r2, r3, #31
 80099fa:	189b      	adds	r3, r3, r2
 80099fc:	4053      	eors	r3, r2
 80099fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8009a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8009a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d200      	bcs.n	8009a0e <getFilteredMaxAmplitudeQ31+0xde>
 8009a0c:	0013      	movs	r3, r2
 8009a0e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 8009a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	40da      	lsrs	r2, r3
 8009a16:	0013      	movs	r3, r2
 8009a18:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8009a1a:	1dbb      	adds	r3, r7, #6
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d007      	beq.n	8009a32 <getFilteredMaxAmplitudeQ31+0x102>
 8009a22:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <getFilteredMaxAmplitudeQ31+0x11c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6a3a      	ldr	r2, [r7, #32]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d902      	bls.n	8009a32 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8009a2c:	4b07      	ldr	r3, [pc, #28]	@ (8009a4c <getFilteredMaxAmplitudeQ31+0x11c>)
 8009a2e:	6a3a      	ldr	r2, [r7, #32]
 8009a30:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 8009a32:	6a3b      	ldr	r3, [r7, #32]
}
 8009a34:	0018      	movs	r0, r3
 8009a36:	46bd      	mov	sp, r7
 8009a38:	b010      	add	sp, #64	@ 0x40
 8009a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a3c:	200020a0 	.word	0x200020a0
 8009a40:	200020a4 	.word	0x200020a4
 8009a44:	0801f200 	.word	0x0801f200
 8009a48:	0801f204 	.word	0x0801f204
 8009a4c:	20001218 	.word	0x20001218

08009a50 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8009a5c:	4913      	ldr	r1, [pc, #76]	@ (8009aac <floatToIntAndFrac2dp+0x5c>)
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7f7 fa94 	bl	8000f8c <__aeabi_fmul>
 8009a64:	1c03      	adds	r3, r0, #0
 8009a66:	1c18      	adds	r0, r3, #0
 8009a68:	f014 fa46 	bl	801def8 <roundf>
 8009a6c:	1c03      	adds	r3, r0, #0
 8009a6e:	1c18      	adds	r0, r3, #0
 8009a70:	f7f6 fdca 	bl	8000608 <__aeabi_f2uiz>
 8009a74:	0003      	movs	r3, r0
 8009a76:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2164      	movs	r1, #100	@ 0x64
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f7f6 fb87 	bl	8000190 <__udivsi3>
 8009a82:	0003      	movs	r3, r0
 8009a84:	001a      	movs	r2, r3
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2164      	movs	r1, #100	@ 0x64
 8009a96:	434b      	muls	r3, r1
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	701a      	strb	r2, [r3, #0]
}
 8009aa2:	46c0      	nop			@ (mov r8, r8)
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	b006      	add	sp, #24
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	46c0      	nop			@ (mov r8, r8)
 8009aac:	42c80000 	.word	0x42c80000

08009ab0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8009abc:	4914      	ldr	r1, [pc, #80]	@ (8009b10 <floatToIntAndFrac1dp+0x60>)
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7f7 fa64 	bl	8000f8c <__aeabi_fmul>
 8009ac4:	1c03      	adds	r3, r0, #0
 8009ac6:	1c18      	adds	r0, r3, #0
 8009ac8:	f014 fa16 	bl	801def8 <roundf>
 8009acc:	1c03      	adds	r3, r0, #0
 8009ace:	1c18      	adds	r0, r3, #0
 8009ad0:	f7f6 fd9a 	bl	8000608 <__aeabi_f2uiz>
 8009ad4:	0003      	movs	r3, r0
 8009ad6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	210a      	movs	r1, #10
 8009adc:	0018      	movs	r0, r3
 8009ade:	f7f6 fb57 	bl	8000190 <__udivsi3>
 8009ae2:	0003      	movs	r3, r0
 8009ae4:	001a      	movs	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	1c19      	adds	r1, r3, #0
 8009af6:	0089      	lsls	r1, r1, #2
 8009af8:	18cb      	adds	r3, r1, r3
 8009afa:	18db      	adds	r3, r3, r3
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	701a      	strb	r2, [r3, #0]
}
 8009b06:	46c0      	nop			@ (mov r8, r8)
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	b006      	add	sp, #24
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	46c0      	nop			@ (mov r8, r8)
 8009b10:	41200000 	.word	0x41200000

08009b14 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8009b14:	b590      	push	{r4, r7, lr}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7f7 fd4a 	bl	80015bc <__aeabi_i2f>
 8009b28:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8009b2a:	6838      	ldr	r0, [r7, #0]
 8009b2c:	f7f7 fd46 	bl	80015bc <__aeabi_i2f>
 8009b30:	1c03      	adds	r3, r0, #0
 8009b32:	4918      	ldr	r1, [pc, #96]	@ (8009b94 <sumToIntAverage+0x80>)
 8009b34:	1c18      	adds	r0, r3, #0
 8009b36:	f7f7 f843 	bl	8000bc0 <__aeabi_fdiv>
 8009b3a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8009b3c:	1c19      	adds	r1, r3, #0
 8009b3e:	1c20      	adds	r0, r4, #0
 8009b40:	f7f6 feb4 	bl	80008ac <__aeabi_fadd>
 8009b44:	1c03      	adds	r3, r0, #0
 8009b46:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8009b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b4a:	f7f7 fd83 	bl	8001654 <__aeabi_ui2f>
 8009b4e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8009b50:	1c19      	adds	r1, r3, #0
 8009b52:	1c20      	adds	r0, r4, #0
 8009b54:	f7f7 f834 	bl	8000bc0 <__aeabi_fdiv>
 8009b58:	1c03      	adds	r3, r0, #0
 8009b5a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	2310      	movs	r3, #16
 8009b64:	18f9      	adds	r1, r7, r3
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	1c18      	adds	r0, r3, #0
 8009b6a:	f7ff ffa1 	bl	8009ab0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2bff      	cmp	r3, #255	@ 0xff
 8009b72:	d906      	bls.n	8009b82 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	22ff      	movs	r2, #255	@ 0xff
 8009b78:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2209      	movs	r2, #9
 8009b7e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8009b80:	e003      	b.n	8009b8a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	701a      	strb	r2, [r3, #0]
}
 8009b8a:	46c0      	nop			@ (mov r8, r8)
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	b007      	add	sp, #28
 8009b90:	bd90      	pop	{r4, r7, pc}
 8009b92:	46c0      	nop			@ (mov r8, r8)
 8009b94:	41200000 	.word	0x41200000

08009b98 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2280      	movs	r2, #128	@ 0x80
 8009baa:	0612      	lsls	r2, r2, #24
 8009bac:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	4a18      	ldr	r2, [pc, #96]	@ (8009c14 <findMinMax+0x7c>)
 8009bb2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e022      	b.n	8009c00 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	18d3      	adds	r3, r2, r3
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	da06      	bge.n	8009bda <findMinMax+0x42>
        {
            min[0] = array[i];
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	18d3      	adds	r3, r2, r3
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	18d3      	adds	r3, r2, r3
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	dd06      	ble.n	8009bfa <findMinMax+0x62>
        {
            max[0] = array[i];
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	18d3      	adds	r3, r2, r3
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d3d8      	bcc.n	8009bba <findMinMax+0x22>
        }
    }
}
 8009c08:	46c0      	nop			@ (mov r8, r8)
 8009c0a:	46c0      	nop			@ (mov r8, r8)
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b006      	add	sp, #24
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	46c0      	nop			@ (mov r8, r8)
 8009c14:	7fffffff 	.word	0x7fffffff

08009c18 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d302      	bcc.n	8009c34 <getPo2factor+0x1c>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d107      	bne.n	8009c44 <getPo2factor+0x2c>
    {
        return 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	e00d      	b.n	8009c54 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	085b      	lsrs	r3, r3, #1
 8009c3c:	607b      	str	r3, [r7, #4]
        bitShift++;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3301      	adds	r3, #1
 8009c42:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d2f5      	bcs.n	8009c38 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8009c52:	68fb      	ldr	r3, [r7, #12]
}
 8009c54:	0018      	movs	r0, r3
 8009c56:	46bd      	mov	sp, r7
 8009c58:	b004      	add	sp, #16
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7f7 fcf2 	bl	8001654 <__aeabi_ui2f>
 8009c70:	1c03      	adds	r3, r0, #0
 8009c72:	1c19      	adds	r1, r3, #0
 8009c74:	68b8      	ldr	r0, [r7, #8]
 8009c76:	f7f7 f989 	bl	8000f8c <__aeabi_fmul>
 8009c7a:	1c03      	adds	r3, r0, #0
 8009c7c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	2310      	movs	r3, #16
 8009c86:	18f9      	adds	r1, r7, r3
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	1c18      	adds	r0, r3, #0
 8009c8c:	f7ff fee0 	bl	8009a50 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	801a      	strh	r2, [r3, #0]
}
 8009c98:	46c0      	nop			@ (mov r8, r8)
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	b006      	add	sp, #24
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60b8      	str	r0, [r7, #8]
 8009ca8:	60f9      	str	r1, [r7, #12]
 8009caa:	607a      	str	r2, [r7, #4]
 8009cac:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	6a3a      	ldr	r2, [r7, #32]
 8009cb2:	68b8      	ldr	r0, [r7, #8]
 8009cb4:	68f9      	ldr	r1, [r7, #12]
 8009cb6:	f7fc f877 	bl	8005da8 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	18d2      	adds	r2, r2, r3
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	18d2      	adds	r2, r2, r3
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	18d2      	adds	r2, r2, r3
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	18d2      	adds	r2, r2, r3
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8009cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	0011      	movs	r1, r2
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f7fc f8f1 	bl	8005ec8 <correctIntFracNumber>
}
 8009ce6:	46c0      	nop			@ (mov r8, r8)
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	b004      	add	sp, #16
 8009cec:	bd80      	pop	{r7, pc}

08009cee <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b086      	sub	sp, #24
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8009cfe:	2300      	movs	r3, #0
 8009d00:	613b      	str	r3, [r7, #16]
 8009d02:	e019      	b.n	8009d38 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	18d3      	adds	r3, r2, r3
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	3201      	adds	r2, #1
 8009d14:	0052      	lsls	r2, r2, #1
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	188a      	adds	r2, r1, r2
 8009d1a:	8812      	ldrh	r2, [r2, #0]
 8009d1c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8009d1e:	0019      	movs	r1, r3
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8009d28:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8009d2a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	3304      	adds	r3, #4
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d3e1      	bcc.n	8009d04 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8009d40:	46c0      	nop			@ (mov r8, r8)
 8009d42:	46c0      	nop			@ (mov r8, r8)
 8009d44:	46bd      	mov	sp, r7
 8009d46:	b006      	add	sp, #24
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  init = false;
 8009d50:	4b02      	ldr	r3, [pc, #8]	@ (8009d5c <InitDone+0x10>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	701a      	strb	r2, [r3, #0]
}
 8009d56:	46c0      	nop			@ (mov r8, r8)
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	2000006c 	.word	0x2000006c

08009d60 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8009d66:	f7fb fdd5 	bl	8005914 <ReadBatteryVoltage>
 8009d6a:	1c03      	adds	r3, r0, #0
 8009d6c:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8009d6e:	491f      	ldr	r1, [pc, #124]	@ (8009dec <batteryChargeCheck+0x8c>)
 8009d70:	6838      	ldr	r0, [r7, #0]
 8009d72:	f7f6 fbd3 	bl	800051c <__aeabi_fcmplt>
 8009d76:	1e03      	subs	r3, r0, #0
 8009d78:	d002      	beq.n	8009d80 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8009d7a:	1dfb      	adds	r3, r7, #7
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8009d80:	6838      	ldr	r0, [r7, #0]
 8009d82:	f7f9 fb65 	bl	8003450 <__aeabi_f2d>
 8009d86:	4a1a      	ldr	r2, [pc, #104]	@ (8009df0 <batteryChargeCheck+0x90>)
 8009d88:	4b1a      	ldr	r3, [pc, #104]	@ (8009df4 <batteryChargeCheck+0x94>)
 8009d8a:	f7f6 fb8d 	bl	80004a8 <__aeabi_dcmplt>
 8009d8e:	1e03      	subs	r3, r0, #0
 8009d90:	d008      	beq.n	8009da4 <batteryChargeCheck+0x44>
 8009d92:	4916      	ldr	r1, [pc, #88]	@ (8009dec <batteryChargeCheck+0x8c>)
 8009d94:	6838      	ldr	r0, [r7, #0]
 8009d96:	f7f6 fbdf 	bl	8000558 <__aeabi_fcmpge>
 8009d9a:	1e03      	subs	r3, r0, #0
 8009d9c:	d002      	beq.n	8009da4 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8009d9e:	1dfb      	adds	r3, r7, #7
 8009da0:	2202      	movs	r2, #2
 8009da2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8009da4:	2181      	movs	r1, #129	@ 0x81
 8009da6:	05c9      	lsls	r1, r1, #23
 8009da8:	6838      	ldr	r0, [r7, #0]
 8009daa:	f7f6 fbb7 	bl	800051c <__aeabi_fcmplt>
 8009dae:	1e03      	subs	r3, r0, #0
 8009db0:	d00b      	beq.n	8009dca <batteryChargeCheck+0x6a>
 8009db2:	6838      	ldr	r0, [r7, #0]
 8009db4:	f7f9 fb4c 	bl	8003450 <__aeabi_f2d>
 8009db8:	4a0d      	ldr	r2, [pc, #52]	@ (8009df0 <batteryChargeCheck+0x90>)
 8009dba:	4b0e      	ldr	r3, [pc, #56]	@ (8009df4 <batteryChargeCheck+0x94>)
 8009dbc:	f7f6 fb92 	bl	80004e4 <__aeabi_dcmpge>
 8009dc0:	1e03      	subs	r3, r0, #0
 8009dc2:	d002      	beq.n	8009dca <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8009dc4:	1dfb      	adds	r3, r7, #7
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8009dca:	2181      	movs	r1, #129	@ 0x81
 8009dcc:	05c9      	lsls	r1, r1, #23
 8009dce:	6838      	ldr	r0, [r7, #0]
 8009dd0:	f7f6 fbc2 	bl	8000558 <__aeabi_fcmpge>
 8009dd4:	1e03      	subs	r3, r0, #0
 8009dd6:	d002      	beq.n	8009dde <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8009dd8:	1dfb      	adds	r3, r7, #7
 8009dda:	2204      	movs	r2, #4
 8009ddc:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8009dde:	1dfb      	adds	r3, r7, #7
 8009de0:	781b      	ldrb	r3, [r3, #0]
}
 8009de2:	0018      	movs	r0, r3
 8009de4:	46bd      	mov	sp, r7
 8009de6:	b002      	add	sp, #8
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	46c0      	nop			@ (mov r8, r8)
 8009dec:	40600000 	.word	0x40600000
 8009df0:	9999999a 	.word	0x9999999a
 8009df4:	400d9999 	.word	0x400d9999

08009df8 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8009df8:	b590      	push	{r4, r7, lr}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	0004      	movs	r4, r0
 8009e00:	0008      	movs	r0, r1
 8009e02:	0011      	movs	r1, r2
 8009e04:	1dbb      	adds	r3, r7, #6
 8009e06:	1c22      	adds	r2, r4, #0
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	1d3b      	adds	r3, r7, #4
 8009e0c:	1c02      	adds	r2, r0, #0
 8009e0e:	801a      	strh	r2, [r3, #0]
 8009e10:	1cbb      	adds	r3, r7, #2
 8009e12:	1c0a      	adds	r2, r1, #0
 8009e14:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8009e16:	4b0f      	ldr	r3, [pc, #60]	@ (8009e54 <SetStatusLED+0x5c>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d107      	bne.n	8009e2e <SetStatusLED+0x36>
 8009e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e58 <SetStatusLED+0x60>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <SetStatusLED+0x36>
 8009e26:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <SetStatusLED+0x64>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00e      	beq.n	8009e4c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8009e2e:	2380      	movs	r3, #128	@ 0x80
 8009e30:	05db      	lsls	r3, r3, #23
 8009e32:	1dba      	adds	r2, r7, #6
 8009e34:	8812      	ldrh	r2, [r2, #0]
 8009e36:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8009e38:	2380      	movs	r3, #128	@ 0x80
 8009e3a:	05db      	lsls	r3, r3, #23
 8009e3c:	1d3a      	adds	r2, r7, #4
 8009e3e:	8812      	ldrh	r2, [r2, #0]
 8009e40:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8009e42:	2380      	movs	r3, #128	@ 0x80
 8009e44:	05db      	lsls	r3, r3, #23
 8009e46:	1cba      	adds	r2, r7, #2
 8009e48:	8812      	ldrh	r2, [r2, #0]
 8009e4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8009e4c:	46c0      	nop			@ (mov r8, r8)
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	b003      	add	sp, #12
 8009e52:	bd90      	pop	{r4, r7, pc}
 8009e54:	200020a9 	.word	0x200020a9
 8009e58:	2000006c 	.word	0x2000006c
 8009e5c:	200020aa 	.word	0x200020aa

08009e60 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	0004      	movs	r4, r0
 8009e68:	0008      	movs	r0, r1
 8009e6a:	0011      	movs	r1, r2
 8009e6c:	1dfb      	adds	r3, r7, #7
 8009e6e:	1c22      	adds	r2, r4, #0
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	1dbb      	adds	r3, r7, #6
 8009e74:	1c02      	adds	r2, r0, #0
 8009e76:	701a      	strb	r2, [r3, #0]
 8009e78:	1d7b      	adds	r3, r7, #5
 8009e7a:	1c0a      	adds	r2, r1, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8009e7e:	4b19      	ldr	r3, [pc, #100]	@ (8009ee4 <SetDBLED+0x84>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d107      	bne.n	8009e96 <SetDBLED+0x36>
 8009e86:	4b18      	ldr	r3, [pc, #96]	@ (8009ee8 <SetDBLED+0x88>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d103      	bne.n	8009e96 <SetDBLED+0x36>
 8009e8e:	4b17      	ldr	r3, [pc, #92]	@ (8009eec <SetDBLED+0x8c>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d022      	beq.n	8009edc <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8009e96:	1dfb      	adds	r3, r7, #7
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	4053      	eors	r3, r2
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	001a      	movs	r2, r3
 8009ea2:	4b13      	ldr	r3, [pc, #76]	@ (8009ef0 <SetDBLED+0x90>)
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f002 fd31 	bl	800c90e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8009eac:	1dbb      	adds	r3, r7, #6
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	4053      	eors	r3, r2
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	001a      	movs	r2, r3
 8009eb8:	2380      	movs	r3, #128	@ 0x80
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	480c      	ldr	r0, [pc, #48]	@ (8009ef0 <SetDBLED+0x90>)
 8009ebe:	0019      	movs	r1, r3
 8009ec0:	f002 fd25 	bl	800c90e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8009ec4:	1d7b      	adds	r3, r7, #5
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	4053      	eors	r3, r2
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	001a      	movs	r2, r3
 8009ed0:	2380      	movs	r3, #128	@ 0x80
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4806      	ldr	r0, [pc, #24]	@ (8009ef0 <SetDBLED+0x90>)
 8009ed6:	0019      	movs	r1, r3
 8009ed8:	f002 fd19 	bl	800c90e <HAL_GPIO_WritePin>
  }
}
 8009edc:	46c0      	nop			@ (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b003      	add	sp, #12
 8009ee2:	bd90      	pop	{r4, r7, pc}
 8009ee4:	200020a9 	.word	0x200020a9
 8009ee8:	2000006c 	.word	0x2000006c
 8009eec:	200020aa 	.word	0x200020aa
 8009ef0:	50000400 	.word	0x50000400

08009ef4 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8009ef4:	b590      	push	{r4, r7, lr}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	0004      	movs	r4, r0
 8009efc:	0008      	movs	r0, r1
 8009efe:	0011      	movs	r1, r2
 8009f00:	1dbb      	adds	r3, r7, #6
 8009f02:	1c22      	adds	r2, r4, #0
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	1d3b      	adds	r3, r7, #4
 8009f08:	1c02      	adds	r2, r0, #0
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	1cbb      	adds	r3, r7, #2
 8009f0e:	1c0a      	adds	r2, r1, #0
 8009f10:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8009f12:	4b0e      	ldr	r3, [pc, #56]	@ (8009f4c <SetVocLED+0x58>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d107      	bne.n	8009f2a <SetVocLED+0x36>
 8009f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f50 <SetVocLED+0x5c>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d103      	bne.n	8009f2a <SetVocLED+0x36>
 8009f22:	4b0c      	ldr	r3, [pc, #48]	@ (8009f54 <SetVocLED+0x60>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f58 <SetVocLED+0x64>)
 8009f2c:	1dba      	adds	r2, r7, #6
 8009f2e:	8812      	ldrh	r2, [r2, #0]
 8009f30:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8009f32:	4b09      	ldr	r3, [pc, #36]	@ (8009f58 <SetVocLED+0x64>)
 8009f34:	1d3a      	adds	r2, r7, #4
 8009f36:	8812      	ldrh	r2, [r2, #0]
 8009f38:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8009f3a:	4b07      	ldr	r3, [pc, #28]	@ (8009f58 <SetVocLED+0x64>)
 8009f3c:	1cba      	adds	r2, r7, #2
 8009f3e:	8812      	ldrh	r2, [r2, #0]
 8009f40:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8009f42:	46c0      	nop			@ (mov r8, r8)
 8009f44:	46bd      	mov	sp, r7
 8009f46:	b003      	add	sp, #12
 8009f48:	bd90      	pop	{r4, r7, pc}
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	200020a9 	.word	0x200020a9
 8009f50:	2000006c 	.word	0x2000006c
 8009f54:	200020aa 	.word	0x200020aa
 8009f58:	40000400 	.word	0x40000400

08009f5c <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009f60:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <SetMeasurementIndicator+0x24>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <SetMeasurementIndicator+0x14>
 8009f68:	4b06      	ldr	r3, [pc, #24]	@ (8009f84 <SetMeasurementIndicator+0x28>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 8009f70:	2380      	movs	r3, #128	@ 0x80
 8009f72:	05db      	lsls	r3, r3, #23
 8009f74:	4a04      	ldr	r2, [pc, #16]	@ (8009f88 <SetMeasurementIndicator+0x2c>)
 8009f76:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8009f78:	46c0      	nop			@ (mov r8, r8)
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	46c0      	nop			@ (mov r8, r8)
 8009f80:	200020a9 	.word	0x200020a9
 8009f84:	200020aa 	.word	0x200020aa
 8009f88:	00000bb8 	.word	0x00000bb8

08009f8c <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009f90:	4b07      	ldr	r3, [pc, #28]	@ (8009fb0 <ResetMeasurementIndicator+0x24>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d103      	bne.n	8009fa0 <ResetMeasurementIndicator+0x14>
 8009f98:	4b06      	ldr	r3, [pc, #24]	@ (8009fb4 <ResetMeasurementIndicator+0x28>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d004      	beq.n	8009faa <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8009fa0:	2380      	movs	r3, #128	@ 0x80
 8009fa2:	05db      	lsls	r3, r3, #23
 8009fa4:	22fa      	movs	r2, #250	@ 0xfa
 8009fa6:	0112      	lsls	r2, r2, #4
 8009fa8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8009faa:	46c0      	nop			@ (mov r8, r8)
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	200020a9 	.word	0x200020a9
 8009fb4:	200020aa 	.word	0x200020aa

08009fb8 <SetMICIndicator>:
void SetMICIndicator(){
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009fbc:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <SetMICIndicator+0x24>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d103      	bne.n	8009fcc <SetMICIndicator+0x14>
 8009fc4:	4b06      	ldr	r3, [pc, #24]	@ (8009fe0 <SetMICIndicator+0x28>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 8009fcc:	2380      	movs	r3, #128	@ 0x80
 8009fce:	05db      	lsls	r3, r3, #23
 8009fd0:	4a04      	ldr	r2, [pc, #16]	@ (8009fe4 <SetMICIndicator+0x2c>)
 8009fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8009fd4:	46c0      	nop			@ (mov r8, r8)
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	46c0      	nop			@ (mov r8, r8)
 8009fdc:	200020a9 	.word	0x200020a9
 8009fe0:	200020aa 	.word	0x200020aa
 8009fe4:	00000bb8 	.word	0x00000bb8

08009fe8 <ResetMICIndicator>:
void ResetMICIndicator(){
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009fec:	4b07      	ldr	r3, [pc, #28]	@ (800a00c <ResetMICIndicator+0x24>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <ResetMICIndicator+0x14>
 8009ff4:	4b06      	ldr	r3, [pc, #24]	@ (800a010 <ResetMICIndicator+0x28>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 8009ffc:	2380      	movs	r3, #128	@ 0x80
 8009ffe:	05db      	lsls	r3, r3, #23
 800a000:	22fa      	movs	r2, #250	@ 0xfa
 800a002:	0112      	lsls	r2, r2, #4
 800a004:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200020a9 	.word	0x200020a9
 800a010:	200020aa 	.word	0x200020aa

0800a014 <SetESPIndicator>:
void SetESPIndicator(){
 800a014:	b580      	push	{r7, lr}
 800a016:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a018:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <SetESPIndicator+0x24>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d103      	bne.n	800a028 <SetESPIndicator+0x14>
 800a020:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <SetESPIndicator+0x28>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800a028:	2380      	movs	r3, #128	@ 0x80
 800a02a:	05db      	lsls	r3, r3, #23
 800a02c:	4a04      	ldr	r2, [pc, #16]	@ (800a040 <SetESPIndicator+0x2c>)
 800a02e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a030:	46c0      	nop			@ (mov r8, r8)
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	46c0      	nop			@ (mov r8, r8)
 800a038:	200020a9 	.word	0x200020a9
 800a03c:	200020aa 	.word	0x200020aa
 800a040:	00000bb8 	.word	0x00000bb8

0800a044 <ResetESPIndicator>:
void ResetESPIndicator(){
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a048:	4b07      	ldr	r3, [pc, #28]	@ (800a068 <ResetESPIndicator+0x24>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d103      	bne.n	800a058 <ResetESPIndicator+0x14>
 800a050:	4b06      	ldr	r3, [pc, #24]	@ (800a06c <ResetESPIndicator+0x28>)
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d004      	beq.n	800a062 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800a058:	2380      	movs	r3, #128	@ 0x80
 800a05a:	05db      	lsls	r3, r3, #23
 800a05c:	22fa      	movs	r2, #250	@ 0xfa
 800a05e:	0112      	lsls	r2, r2, #4
 800a060:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a062:	46c0      	nop			@ (mov r8, r8)
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	200020a9 	.word	0x200020a9
 800a06c:	200020aa 	.word	0x200020aa

0800a070 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800a074:	23fa      	movs	r3, #250	@ 0xfa
 800a076:	011a      	lsls	r2, r3, #4
 800a078:	23fa      	movs	r3, #250	@ 0xfa
 800a07a:	0119      	lsls	r1, r3, #4
 800a07c:	23fa      	movs	r3, #250	@ 0xfa
 800a07e:	011b      	lsls	r3, r3, #4
 800a080:	0018      	movs	r0, r3
 800a082:	f7ff feb9 	bl	8009df8 <SetStatusLED>
  SetDBLED(false,false,false);
 800a086:	2200      	movs	r2, #0
 800a088:	2100      	movs	r1, #0
 800a08a:	2000      	movs	r0, #0
 800a08c:	f7ff fee8 	bl	8009e60 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800a090:	23fa      	movs	r3, #250	@ 0xfa
 800a092:	011a      	lsls	r2, r3, #4
 800a094:	23fa      	movs	r3, #250	@ 0xfa
 800a096:	0119      	lsls	r1, r3, #4
 800a098:	23fa      	movs	r3, #250	@ 0xfa
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	0018      	movs	r0, r3
 800a09e:	f7ff ff29 	bl	8009ef4 <SetVocLED>
return;
 800a0a2:	46c0      	nop			@ (mov r8, r8)
}
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <powerCheck>:

Battery_Status powerCheck(){
 800a0a8:	b590      	push	{r4, r7, lr}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800a0ae:	f7fb fcf7 	bl	8005aa0 <Check_USB_PowerOn>
 800a0b2:	0003      	movs	r3, r0
 800a0b4:	001a      	movs	r2, r3
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4053      	eors	r3, r2
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <powerCheck+0x24>
    status = batteryChargeCheck();
 800a0c0:	1dfc      	adds	r4, r7, #7
 800a0c2:	f7ff fe4d 	bl	8009d60 <batteryChargeCheck>
 800a0c6:	0003      	movs	r3, r0
 800a0c8:	7023      	strb	r3, [r4, #0]
 800a0ca:	e002      	b.n	800a0d2 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800a0cc:	1dfb      	adds	r3, r7, #7
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a0d2:	1dfb      	adds	r3, r7, #7
 800a0d4:	781b      	ldrb	r3, [r3, #0]
}
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	b003      	add	sp, #12
 800a0dc:	bd90      	pop	{r4, r7, pc}
	...

0800a0e0 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	0002      	movs	r2, r0
 800a0e8:	1dfb      	adds	r3, r7, #7
 800a0ea:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800a0ec:	1dfb      	adds	r3, r7, #7
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d105      	bne.n	800a100 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800a0f4:	4a18      	ldr	r2, [pc, #96]	@ (800a158 <powerDisplay+0x78>)
 800a0f6:	4b19      	ldr	r3, [pc, #100]	@ (800a15c <powerDisplay+0x7c>)
 800a0f8:	0019      	movs	r1, r3
 800a0fa:	2003      	movs	r0, #3
 800a0fc:	f000 fe06 	bl	800ad0c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800a100:	1dfb      	adds	r3, r7, #7
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b04      	cmp	r3, #4
 800a106:	d105      	bne.n	800a114 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800a108:	4a15      	ldr	r2, [pc, #84]	@ (800a160 <powerDisplay+0x80>)
 800a10a:	4b14      	ldr	r3, [pc, #80]	@ (800a15c <powerDisplay+0x7c>)
 800a10c:	0019      	movs	r1, r3
 800a10e:	2003      	movs	r0, #3
 800a110:	f000 fdfc 	bl	800ad0c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800a114:	1dfb      	adds	r3, r7, #7
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d105      	bne.n	800a128 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800a11c:	4a11      	ldr	r2, [pc, #68]	@ (800a164 <powerDisplay+0x84>)
 800a11e:	4b0f      	ldr	r3, [pc, #60]	@ (800a15c <powerDisplay+0x7c>)
 800a120:	0019      	movs	r1, r3
 800a122:	2003      	movs	r0, #3
 800a124:	f000 fdf2 	bl	800ad0c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800a128:	1dfb      	adds	r3, r7, #7
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d105      	bne.n	800a13c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800a130:	4a0d      	ldr	r2, [pc, #52]	@ (800a168 <powerDisplay+0x88>)
 800a132:	4b0a      	ldr	r3, [pc, #40]	@ (800a15c <powerDisplay+0x7c>)
 800a134:	0019      	movs	r1, r3
 800a136:	2003      	movs	r0, #3
 800a138:	f000 fde8 	bl	800ad0c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800a13c:	1dfb      	adds	r3, r7, #7
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d105      	bne.n	800a150 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800a144:	4a09      	ldr	r2, [pc, #36]	@ (800a16c <powerDisplay+0x8c>)
 800a146:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <powerDisplay+0x7c>)
 800a148:	0019      	movs	r1, r3
 800a14a:	2003      	movs	r0, #3
 800a14c:	f000 fdde 	bl	800ad0c <CreateLine>
  }
}
 800a150:	46c0      	nop			@ (mov r8, r8)
 800a152:	46bd      	mov	sp, r7
 800a154:	b002      	add	sp, #8
 800a156:	bd80      	pop	{r7, pc}
 800a158:	0801ec0c 	.word	0x0801ec0c
 800a15c:	0801ec1c 	.word	0x0801ec1c
 800a160:	0801ec20 	.word	0x0801ec20
 800a164:	0801ec38 	.word	0x0801ec38
 800a168:	0801ec58 	.word	0x0801ec58
 800a16c:	0801ec70 	.word	0x0801ec70

0800a170 <configCheck>:

void configCheck(){
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800a174:	f7fb fca3 	bl	8005abe <BootButton_Pressed>
 800a178:	1e03      	subs	r3, r0, #0
 800a17a:	d007      	beq.n	800a18c <configCheck+0x1c>
 800a17c:	f7fb fcb0 	bl	8005ae0 <UserButton_Pressed>
 800a180:	1e03      	subs	r3, r0, #0
 800a182:	d003      	beq.n	800a18c <configCheck+0x1c>
    configSet = true;
 800a184:	4b3d      	ldr	r3, [pc, #244]	@ (800a27c <configCheck+0x10c>)
 800a186:	2201      	movs	r2, #1
 800a188:	701a      	strb	r2, [r3, #0]
 800a18a:	e00a      	b.n	800a1a2 <configCheck+0x32>
  }
  else{
    configSet = false;
 800a18c:	4b3b      	ldr	r3, [pc, #236]	@ (800a27c <configCheck+0x10c>)
 800a18e:	2200      	movs	r2, #0
 800a190:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800a192:	f001 f95d 	bl	800b450 <HAL_GetTick>
 800a196:	0003      	movs	r3, r0
 800a198:	22fa      	movs	r2, #250	@ 0xfa
 800a19a:	00d2      	lsls	r2, r2, #3
 800a19c:	189a      	adds	r2, r3, r2
 800a19e:	4b38      	ldr	r3, [pc, #224]	@ (800a280 <configCheck+0x110>)
 800a1a0:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800a1a2:	4b36      	ldr	r3, [pc, #216]	@ (800a27c <configCheck+0x10c>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00d      	beq.n	800a1c6 <configCheck+0x56>
 800a1aa:	4b35      	ldr	r3, [pc, #212]	@ (800a280 <configCheck+0x110>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 fd56 	bl	800ac60 <TimestampIsReached>
 800a1b4:	1e03      	subs	r3, r0, #0
 800a1b6:	d006      	beq.n	800a1c6 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800a1b8:	f7f9 fba4 	bl	8003904 <SetConfigMode>
    SetDBLED(true, true, true);
 800a1bc:	2201      	movs	r2, #1
 800a1be:	2101      	movs	r1, #1
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	f7ff fe4d 	bl	8009e60 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800a1c6:	f7fb fc7a 	bl	8005abe <BootButton_Pressed>
 800a1ca:	0003      	movs	r3, r0
 800a1cc:	001a      	movs	r2, r3
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4053      	eors	r3, r2
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01d      	beq.n	800a214 <configCheck+0xa4>
 800a1d8:	f7fb fc82 	bl	8005ae0 <UserButton_Pressed>
 800a1dc:	1e03      	subs	r3, r0, #0
 800a1de:	d019      	beq.n	800a214 <configCheck+0xa4>
 800a1e0:	4b28      	ldr	r3, [pc, #160]	@ (800a284 <configCheck+0x114>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	4053      	eors	r3, r2
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d012      	beq.n	800a214 <configCheck+0xa4>
    SetLEDsOff();
 800a1ee:	f7ff ff3f 	bl	800a070 <SetLEDsOff>
    userToggle = !userToggle;
 800a1f2:	4b25      	ldr	r3, [pc, #148]	@ (800a288 <configCheck+0x118>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	1e5a      	subs	r2, r3, #1
 800a1f8:	4193      	sbcs	r3, r2
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4053      	eors	r3, r2
 800a200:	b2db      	uxtb	r3, r3
 800a202:	1c1a      	adds	r2, r3, #0
 800a204:	2301      	movs	r3, #1
 800a206:	4013      	ands	r3, r2
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	4b1f      	ldr	r3, [pc, #124]	@ (800a288 <configCheck+0x118>)
 800a20c:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800a20e:	4b1d      	ldr	r3, [pc, #116]	@ (800a284 <configCheck+0x114>)
 800a210:	2201      	movs	r2, #1
 800a212:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800a214:	f7fb fc53 	bl	8005abe <BootButton_Pressed>
 800a218:	0003      	movs	r3, r0
 800a21a:	001a      	movs	r2, r3
 800a21c:	2301      	movs	r3, #1
 800a21e:	4053      	eors	r3, r2
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <configCheck+0xce>
 800a226:	f7fb fc5b 	bl	8005ae0 <UserButton_Pressed>
 800a22a:	0003      	movs	r3, r0
 800a22c:	001a      	movs	r2, r3
 800a22e:	2301      	movs	r3, #1
 800a230:	4053      	eors	r3, r2
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <configCheck+0xce>
    buttonHeld = false;
 800a238:	4b12      	ldr	r3, [pc, #72]	@ (800a284 <configCheck+0x114>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800a23e:	f7fb fc2f 	bl	8005aa0 <Check_USB_PowerOn>
 800a242:	1e03      	subs	r3, r0, #0
 800a244:	d003      	beq.n	800a24e <configCheck+0xde>
    usbPluggedIn = true;
 800a246:	4b11      	ldr	r3, [pc, #68]	@ (800a28c <configCheck+0x11c>)
 800a248:	2201      	movs	r2, #1
 800a24a:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800a24c:	e012      	b.n	800a274 <configCheck+0x104>
    if(!userToggle && !init){
 800a24e:	4b0e      	ldr	r3, [pc, #56]	@ (800a288 <configCheck+0x118>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2201      	movs	r2, #1
 800a254:	4053      	eors	r3, r2
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d008      	beq.n	800a26e <configCheck+0xfe>
 800a25c:	4b0c      	ldr	r3, [pc, #48]	@ (800a290 <configCheck+0x120>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2201      	movs	r2, #1
 800a262:	4053      	eors	r3, r2
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <configCheck+0xfe>
      SetLEDsOff();
 800a26a:	f7ff ff01 	bl	800a070 <SetLEDsOff>
    usbPluggedIn = false;
 800a26e:	4b07      	ldr	r3, [pc, #28]	@ (800a28c <configCheck+0x11c>)
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
}
 800a274:	46c0      	nop			@ (mov r8, r8)
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	46c0      	nop			@ (mov r8, r8)
 800a27c:	200020a8 	.word	0x200020a8
 800a280:	200020ac 	.word	0x200020ac
 800a284:	200020ab 	.word	0x200020ab
 800a288:	200020aa 	.word	0x200020aa
 800a28c:	200020a9 	.word	0x200020a9
 800a290:	2000006c 	.word	0x2000006c

0800a294 <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  configCheck();
 800a298:	f7ff ff6a 	bl	800a170 <configCheck>
}
 800a29c:	46c0      	nop			@ (mov r8, r8)
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800a2a2:	b590      	push	{r4, r7, lr}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800a2a8:	1dfc      	adds	r4, r7, #7
 800a2aa:	f7ff fefd 	bl	800a0a8 <powerCheck>
 800a2ae:	0003      	movs	r3, r0
 800a2b0:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);
 800a2b2:	1dfb      	adds	r3, r7, #7
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f7ff ff12 	bl	800a0e0 <powerDisplay>
  return status;
 800a2bc:	1dfb      	adds	r3, r7, #7
 800a2be:	781b      	ldrb	r3, [r3, #0]

}
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	b003      	add	sp, #12
 800a2c6:	bd90      	pop	{r4, r7, pc}

0800a2c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2cc:	4b07      	ldr	r3, [pc, #28]	@ (800a2ec <HAL_MspInit+0x24>)
 800a2ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2d0:	4b06      	ldr	r3, [pc, #24]	@ (800a2ec <HAL_MspInit+0x24>)
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800a2d8:	4b04      	ldr	r3, [pc, #16]	@ (800a2ec <HAL_MspInit+0x24>)
 800a2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2dc:	4b03      	ldr	r3, [pc, #12]	@ (800a2ec <HAL_MspInit+0x24>)
 800a2de:	2180      	movs	r1, #128	@ 0x80
 800a2e0:	0549      	lsls	r1, r1, #21
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2e6:	46c0      	nop			@ (mov r8, r8)
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40021000 	.word	0x40021000

0800a2f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a2f4:	46c0      	nop			@ (mov r8, r8)
 800a2f6:	e7fd      	b.n	800a2f4 <NMI_Handler+0x4>

0800a2f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a2fc:	46c0      	nop			@ (mov r8, r8)
 800a2fe:	e7fd      	b.n	800a2fc <HardFault_Handler+0x4>

0800a300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a304:	46c0      	nop			@ (mov r8, r8)
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a30e:	46c0      	nop			@ (mov r8, r8)
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a318:	f001 f888 	bl	800b42c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a31c:	46c0      	nop			@ (mov r8, r8)
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a328:	4b05      	ldr	r3, [pc, #20]	@ (800a340 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800a32a:	0018      	movs	r0, r3
 800a32c:	f001 fe9d 	bl	800c06a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a330:	4b04      	ldr	r3, [pc, #16]	@ (800a344 <DMA1_Channel2_3_IRQHandler+0x20>)
 800a332:	0018      	movs	r0, r3
 800a334:	f001 fe99 	bl	800c06a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800a338:	46c0      	nop			@ (mov r8, r8)
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	46c0      	nop			@ (mov r8, r8)
 800a340:	20000dac 	.word	0x20000dac
 800a344:	20000d64 	.word	0x20000d64

0800a348 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800a34c:	4b07      	ldr	r3, [pc, #28]	@ (800a36c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800a34e:	0018      	movs	r0, r3
 800a350:	f001 fe8b 	bl	800c06a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800a354:	4b06      	ldr	r3, [pc, #24]	@ (800a370 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800a356:	0018      	movs	r0, r3
 800a358:	f001 fe87 	bl	800c06a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800a35c:	4b05      	ldr	r3, [pc, #20]	@ (800a374 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800a35e:	0018      	movs	r0, r3
 800a360:	f001 fe83 	bl	800c06a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800a364:	46c0      	nop			@ (mov r8, r8)
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	46c0      	nop			@ (mov r8, r8)
 800a36c:	20000e30 	.word	0x20000e30
 800a370:	2000239c 	.word	0x2000239c
 800a374:	200023e4 	.word	0x200023e4

0800a378 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a37c:	4b03      	ldr	r3, [pc, #12]	@ (800a38c <USART4_5_IRQHandler+0x14>)
 800a37e:	0018      	movs	r0, r3
 800a380:	f008 fc9a 	bl	8012cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800a384:	46c0      	nop			@ (mov r8, r8)
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	46c0      	nop			@ (mov r8, r8)
 800a38c:	200022e4 	.word	0x200022e4

0800a390 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800a394:	4b09      	ldr	r3, [pc, #36]	@ (800a3bc <I2C1_IRQHandler+0x2c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	23e0      	movs	r3, #224	@ 0xe0
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4013      	ands	r3, r2
 800a3a0:	d004      	beq.n	800a3ac <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800a3a2:	4b06      	ldr	r3, [pc, #24]	@ (800a3bc <I2C1_IRQHandler+0x2c>)
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f002 fd8b 	bl	800cec0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800a3aa:	e003      	b.n	800a3b4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800a3ac:	4b03      	ldr	r3, [pc, #12]	@ (800a3bc <I2C1_IRQHandler+0x2c>)
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f002 fd6c 	bl	800ce8c <HAL_I2C_EV_IRQHandler>
}
 800a3b4:	46c0      	nop			@ (mov r8, r8)
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	46c0      	nop			@ (mov r8, r8)
 800a3bc:	20000cbc 	.word	0x20000cbc

0800a3c0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a3c4:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <USB_IRQHandler+0x14>)
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f004 ff06 	bl	800f1d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800a3cc:	46c0      	nop			@ (mov r8, r8)
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	46c0      	nop			@ (mov r8, r8)
 800a3d4:	200031ec 	.word	0x200031ec

0800a3d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
  return 1;
 800a3dc:	2301      	movs	r3, #1
}
 800a3de:	0018      	movs	r0, r3
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <_kill>:

int _kill(int pid, int sig)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a3ee:	f010 ff1d 	bl	801b22c <__errno>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	2216      	movs	r2, #22
 800a3f6:	601a      	str	r2, [r3, #0]
  return -1;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	425b      	negs	r3, r3
}
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	46bd      	mov	sp, r7
 800a400:	b002      	add	sp, #8
 800a402:	bd80      	pop	{r7, pc}

0800a404 <_exit>:

void _exit (int status)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a40c:	2301      	movs	r3, #1
 800a40e:	425a      	negs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	0011      	movs	r1, r2
 800a414:	0018      	movs	r0, r3
 800a416:	f7ff ffe5 	bl	800a3e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a41a:	46c0      	nop			@ (mov r8, r8)
 800a41c:	e7fd      	b.n	800a41a <_exit+0x16>

0800a41e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b086      	sub	sp, #24
 800a422:	af00      	add	r7, sp, #0
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	617b      	str	r3, [r7, #20]
 800a42e:	e00a      	b.n	800a446 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a430:	e000      	b.n	800a434 <_read+0x16>
 800a432:	bf00      	nop
 800a434:	0001      	movs	r1, r0
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	60ba      	str	r2, [r7, #8]
 800a43c:	b2ca      	uxtb	r2, r1
 800a43e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	3301      	adds	r3, #1
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	dbf0      	blt.n	800a430 <_read+0x12>
  }

  return len;
 800a44e:	687b      	ldr	r3, [r7, #4]
}
 800a450:	0018      	movs	r0, r3
 800a452:	46bd      	mov	sp, r7
 800a454:	b006      	add	sp, #24
 800a456:	bd80      	pop	{r7, pc}

0800a458 <_close>:
  }
  return len;
}

int _close(int file)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a460:	2301      	movs	r3, #1
 800a462:	425b      	negs	r3, r3
}
 800a464:	0018      	movs	r0, r3
 800a466:	46bd      	mov	sp, r7
 800a468:	b002      	add	sp, #8
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2280      	movs	r2, #128	@ 0x80
 800a47a:	0192      	lsls	r2, r2, #6
 800a47c:	605a      	str	r2, [r3, #4]
  return 0;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	0018      	movs	r0, r3
 800a482:	46bd      	mov	sp, r7
 800a484:	b002      	add	sp, #8
 800a486:	bd80      	pop	{r7, pc}

0800a488 <_isatty>:

int _isatty(int file)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a490:	2301      	movs	r3, #1
}
 800a492:	0018      	movs	r0, r3
 800a494:	46bd      	mov	sp, r7
 800a496:	b002      	add	sp, #8
 800a498:	bd80      	pop	{r7, pc}

0800a49a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	0018      	movs	r0, r3
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	b004      	add	sp, #16
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a4b8:	4a14      	ldr	r2, [pc, #80]	@ (800a50c <_sbrk+0x5c>)
 800a4ba:	4b15      	ldr	r3, [pc, #84]	@ (800a510 <_sbrk+0x60>)
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a4c4:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <_sbrk+0x64>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d102      	bne.n	800a4d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a4cc:	4b11      	ldr	r3, [pc, #68]	@ (800a514 <_sbrk+0x64>)
 800a4ce:	4a12      	ldr	r2, [pc, #72]	@ (800a518 <_sbrk+0x68>)
 800a4d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a4d2:	4b10      	ldr	r3, [pc, #64]	@ (800a514 <_sbrk+0x64>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	18d3      	adds	r3, r2, r3
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d207      	bcs.n	800a4f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a4e0:	f010 fea4 	bl	801b22c <__errno>
 800a4e4:	0003      	movs	r3, r0
 800a4e6:	220c      	movs	r2, #12
 800a4e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	e009      	b.n	800a504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a4f0:	4b08      	ldr	r3, [pc, #32]	@ (800a514 <_sbrk+0x64>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a4f6:	4b07      	ldr	r3, [pc, #28]	@ (800a514 <_sbrk+0x64>)
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	18d2      	adds	r2, r2, r3
 800a4fe:	4b05      	ldr	r3, [pc, #20]	@ (800a514 <_sbrk+0x64>)
 800a500:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800a502:	68fb      	ldr	r3, [r7, #12]
}
 800a504:	0018      	movs	r0, r3
 800a506:	46bd      	mov	sp, r7
 800a508:	b006      	add	sp, #24
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20005000 	.word	0x20005000
 800a510:	00000400 	.word	0x00000400
 800a514:	200020b0 	.word	0x200020b0
 800a518:	20003850 	.word	0x20003850

0800a51c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a520:	46c0      	nop			@ (mov r8, r8)
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a52e:	2310      	movs	r3, #16
 800a530:	18fb      	adds	r3, r7, r3
 800a532:	0018      	movs	r0, r3
 800a534:	2308      	movs	r3, #8
 800a536:	001a      	movs	r2, r3
 800a538:	2100      	movs	r1, #0
 800a53a:	f010 fdd3 	bl	801b0e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a53e:	003b      	movs	r3, r7
 800a540:	0018      	movs	r0, r3
 800a542:	2310      	movs	r3, #16
 800a544:	001a      	movs	r2, r3
 800a546:	2100      	movs	r1, #0
 800a548:	f010 fdcc 	bl	801b0e4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a54c:	4b2e      	ldr	r3, [pc, #184]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a54e:	2280      	movs	r2, #128	@ 0x80
 800a550:	05d2      	lsls	r2, r2, #23
 800a552:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a554:	4b2c      	ldr	r3, [pc, #176]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a556:	2200      	movs	r2, #0
 800a558:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a55a:	4b2b      	ldr	r3, [pc, #172]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800a560:	4b29      	ldr	r3, [pc, #164]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a562:	4a2a      	ldr	r2, [pc, #168]	@ (800a60c <MX_TIM2_Init+0xe4>)
 800a564:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a566:	4b28      	ldr	r3, [pc, #160]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a568:	2200      	movs	r2, #0
 800a56a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a56c:	4b26      	ldr	r3, [pc, #152]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a56e:	2200      	movs	r2, #0
 800a570:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a572:	4b25      	ldr	r3, [pc, #148]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a574:	0018      	movs	r0, r3
 800a576:	f007 fe11 	bl	801219c <HAL_TIM_PWM_Init>
 800a57a:	1e03      	subs	r3, r0, #0
 800a57c:	d001      	beq.n	800a582 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800a57e:	f7fc fab5 	bl	8006aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a582:	2110      	movs	r1, #16
 800a584:	187b      	adds	r3, r7, r1
 800a586:	2200      	movs	r2, #0
 800a588:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a58a:	187b      	adds	r3, r7, r1
 800a58c:	2200      	movs	r2, #0
 800a58e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a590:	187a      	adds	r2, r7, r1
 800a592:	4b1d      	ldr	r3, [pc, #116]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a594:	0011      	movs	r1, r2
 800a596:	0018      	movs	r0, r3
 800a598:	f008 f91e 	bl	80127d8 <HAL_TIMEx_MasterConfigSynchronization>
 800a59c:	1e03      	subs	r3, r0, #0
 800a59e:	d001      	beq.n	800a5a4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800a5a0:	f7fc faa4 	bl	8006aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a5a4:	003b      	movs	r3, r7
 800a5a6:	2260      	movs	r2, #96	@ 0x60
 800a5a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800a5aa:	003b      	movs	r3, r7
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a5b0:	003b      	movs	r3, r7
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a5b6:	003b      	movs	r3, r7
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a5bc:	0039      	movs	r1, r7
 800a5be:	4b12      	ldr	r3, [pc, #72]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f007 febc 	bl	8012340 <HAL_TIM_PWM_ConfigChannel>
 800a5c8:	1e03      	subs	r3, r0, #0
 800a5ca:	d001      	beq.n	800a5d0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800a5cc:	f7fc fa8e 	bl	8006aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a5d0:	0039      	movs	r1, r7
 800a5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	0018      	movs	r0, r3
 800a5d8:	f007 feb2 	bl	8012340 <HAL_TIM_PWM_ConfigChannel>
 800a5dc:	1e03      	subs	r3, r0, #0
 800a5de:	d001      	beq.n	800a5e4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800a5e0:	f7fc fa84 	bl	8006aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a5e4:	0039      	movs	r1, r7
 800a5e6:	4b08      	ldr	r3, [pc, #32]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a5e8:	220c      	movs	r2, #12
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	f007 fea8 	bl	8012340 <HAL_TIM_PWM_ConfigChannel>
 800a5f0:	1e03      	subs	r3, r0, #0
 800a5f2:	d001      	beq.n	800a5f8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800a5f4:	f7fc fa7a 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a5f8:	4b03      	ldr	r3, [pc, #12]	@ (800a608 <MX_TIM2_Init+0xe0>)
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f000 f8fe 	bl	800a7fc <HAL_TIM_MspPostInit>

}
 800a600:	46c0      	nop			@ (mov r8, r8)
 800a602:	46bd      	mov	sp, r7
 800a604:	b006      	add	sp, #24
 800a606:	bd80      	pop	{r7, pc}
 800a608:	200020b4 	.word	0x200020b4
 800a60c:	0000ffff 	.word	0x0000ffff

0800a610 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a616:	2310      	movs	r3, #16
 800a618:	18fb      	adds	r3, r7, r3
 800a61a:	0018      	movs	r0, r3
 800a61c:	2308      	movs	r3, #8
 800a61e:	001a      	movs	r2, r3
 800a620:	2100      	movs	r1, #0
 800a622:	f010 fd5f 	bl	801b0e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a626:	003b      	movs	r3, r7
 800a628:	0018      	movs	r0, r3
 800a62a:	2310      	movs	r3, #16
 800a62c:	001a      	movs	r2, r3
 800a62e:	2100      	movs	r1, #0
 800a630:	f010 fd58 	bl	801b0e4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a634:	4b32      	ldr	r3, [pc, #200]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a636:	4a33      	ldr	r2, [pc, #204]	@ (800a704 <MX_TIM3_Init+0xf4>)
 800a638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a63a:	4b31      	ldr	r3, [pc, #196]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a640:	4b2f      	ldr	r3, [pc, #188]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a642:	2200      	movs	r2, #0
 800a644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a646:	4b2e      	ldr	r3, [pc, #184]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a648:	4a2f      	ldr	r2, [pc, #188]	@ (800a708 <MX_TIM3_Init+0xf8>)
 800a64a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a64c:	4b2c      	ldr	r3, [pc, #176]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a64e:	2200      	movs	r2, #0
 800a650:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a652:	4b2b      	ldr	r3, [pc, #172]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a654:	2200      	movs	r2, #0
 800a656:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a658:	4b29      	ldr	r3, [pc, #164]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a65a:	0018      	movs	r0, r3
 800a65c:	f007 fd9e 	bl	801219c <HAL_TIM_PWM_Init>
 800a660:	1e03      	subs	r3, r0, #0
 800a662:	d001      	beq.n	800a668 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800a664:	f7fc fa42 	bl	8006aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a668:	2110      	movs	r1, #16
 800a66a:	187b      	adds	r3, r7, r1
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a670:	187b      	adds	r3, r7, r1
 800a672:	2200      	movs	r2, #0
 800a674:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a676:	187a      	adds	r2, r7, r1
 800a678:	4b21      	ldr	r3, [pc, #132]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a67a:	0011      	movs	r1, r2
 800a67c:	0018      	movs	r0, r3
 800a67e:	f008 f8ab 	bl	80127d8 <HAL_TIMEx_MasterConfigSynchronization>
 800a682:	1e03      	subs	r3, r0, #0
 800a684:	d001      	beq.n	800a68a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800a686:	f7fc fa31 	bl	8006aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a68a:	003b      	movs	r3, r7
 800a68c:	2260      	movs	r2, #96	@ 0x60
 800a68e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800a690:	003b      	movs	r3, r7
 800a692:	2200      	movs	r2, #0
 800a694:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a696:	003b      	movs	r3, r7
 800a698:	2200      	movs	r2, #0
 800a69a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a69c:	003b      	movs	r3, r7
 800a69e:	2200      	movs	r2, #0
 800a6a0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a6a2:	0039      	movs	r1, r7
 800a6a4:	4b16      	ldr	r3, [pc, #88]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f007 fe49 	bl	8012340 <HAL_TIM_PWM_ConfigChannel>
 800a6ae:	1e03      	subs	r3, r0, #0
 800a6b0:	d001      	beq.n	800a6b6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800a6b2:	f7fc fa1b 	bl	8006aec <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800a6b6:	4b12      	ldr	r3, [pc, #72]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a6b8:	2104      	movs	r1, #4
 800a6ba:	0018      	movs	r0, r3
 800a6bc:	f008 f8ea 	bl	8012894 <HAL_TIMEx_RemapConfig>
 800a6c0:	1e03      	subs	r3, r0, #0
 800a6c2:	d001      	beq.n	800a6c8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800a6c4:	f7fc fa12 	bl	8006aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a6c8:	0039      	movs	r1, r7
 800a6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a6cc:	2204      	movs	r2, #4
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f007 fe36 	bl	8012340 <HAL_TIM_PWM_ConfigChannel>
 800a6d4:	1e03      	subs	r3, r0, #0
 800a6d6:	d001      	beq.n	800a6dc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800a6d8:	f7fc fa08 	bl	8006aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a6dc:	0039      	movs	r1, r7
 800a6de:	4b08      	ldr	r3, [pc, #32]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a6e0:	2208      	movs	r2, #8
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	f007 fe2c 	bl	8012340 <HAL_TIM_PWM_ConfigChannel>
 800a6e8:	1e03      	subs	r3, r0, #0
 800a6ea:	d001      	beq.n	800a6f0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800a6ec:	f7fc f9fe 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a6f0:	4b03      	ldr	r3, [pc, #12]	@ (800a700 <MX_TIM3_Init+0xf0>)
 800a6f2:	0018      	movs	r0, r3
 800a6f4:	f000 f882 	bl	800a7fc <HAL_TIM_MspPostInit>

}
 800a6f8:	46c0      	nop			@ (mov r8, r8)
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	b006      	add	sp, #24
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	200020f4 	.word	0x200020f4
 800a704:	40000400 	.word	0x40000400
 800a708:	0000ffff 	.word	0x0000ffff

0800a70c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a712:	003b      	movs	r3, r7
 800a714:	0018      	movs	r0, r3
 800a716:	2308      	movs	r3, #8
 800a718:	001a      	movs	r2, r3
 800a71a:	2100      	movs	r1, #0
 800a71c:	f010 fce2 	bl	801b0e4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a720:	4b15      	ldr	r3, [pc, #84]	@ (800a778 <MX_TIM6_Init+0x6c>)
 800a722:	4a16      	ldr	r2, [pc, #88]	@ (800a77c <MX_TIM6_Init+0x70>)
 800a724:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800a726:	4b14      	ldr	r3, [pc, #80]	@ (800a778 <MX_TIM6_Init+0x6c>)
 800a728:	220a      	movs	r2, #10
 800a72a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a72c:	4b12      	ldr	r3, [pc, #72]	@ (800a778 <MX_TIM6_Init+0x6c>)
 800a72e:	2200      	movs	r2, #0
 800a730:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800a732:	4b11      	ldr	r3, [pc, #68]	@ (800a778 <MX_TIM6_Init+0x6c>)
 800a734:	4a12      	ldr	r2, [pc, #72]	@ (800a780 <MX_TIM6_Init+0x74>)
 800a736:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a738:	4b0f      	ldr	r3, [pc, #60]	@ (800a778 <MX_TIM6_Init+0x6c>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a73e:	4b0e      	ldr	r3, [pc, #56]	@ (800a778 <MX_TIM6_Init+0x6c>)
 800a740:	0018      	movs	r0, r3
 800a742:	f007 fc83 	bl	801204c <HAL_TIM_Base_Init>
 800a746:	1e03      	subs	r3, r0, #0
 800a748:	d001      	beq.n	800a74e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800a74a:	f7fc f9cf 	bl	8006aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a74e:	003b      	movs	r3, r7
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a754:	003b      	movs	r3, r7
 800a756:	2200      	movs	r2, #0
 800a758:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a75a:	003a      	movs	r2, r7
 800a75c:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <MX_TIM6_Init+0x6c>)
 800a75e:	0011      	movs	r1, r2
 800a760:	0018      	movs	r0, r3
 800a762:	f008 f839 	bl	80127d8 <HAL_TIMEx_MasterConfigSynchronization>
 800a766:	1e03      	subs	r3, r0, #0
 800a768:	d001      	beq.n	800a76e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800a76a:	f7fc f9bf 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a76e:	46c0      	nop			@ (mov r8, r8)
 800a770:	46bd      	mov	sp, r7
 800a772:	b002      	add	sp, #8
 800a774:	bd80      	pop	{r7, pc}
 800a776:	46c0      	nop			@ (mov r8, r8)
 800a778:	20002134 	.word	0x20002134
 800a77c:	40001000 	.word	0x40001000
 800a780:	0000ffff 	.word	0x0000ffff

0800a784 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	2380      	movs	r3, #128	@ 0x80
 800a792:	05db      	lsls	r3, r3, #23
 800a794:	429a      	cmp	r2, r3
 800a796:	d106      	bne.n	800a7a6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a798:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <HAL_TIM_PWM_MspInit+0x40>)
 800a79a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a79c:	4b09      	ldr	r3, [pc, #36]	@ (800a7c4 <HAL_TIM_PWM_MspInit+0x40>)
 800a79e:	2101      	movs	r1, #1
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a7a4:	e00a      	b.n	800a7bc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a07      	ldr	r2, [pc, #28]	@ (800a7c8 <HAL_TIM_PWM_MspInit+0x44>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d105      	bne.n	800a7bc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a7b0:	4b04      	ldr	r3, [pc, #16]	@ (800a7c4 <HAL_TIM_PWM_MspInit+0x40>)
 800a7b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7b4:	4b03      	ldr	r3, [pc, #12]	@ (800a7c4 <HAL_TIM_PWM_MspInit+0x40>)
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a7bc:	46c0      	nop			@ (mov r8, r8)
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b002      	add	sp, #8
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	40021000 	.word	0x40021000
 800a7c8:	40000400 	.word	0x40000400

0800a7cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a06      	ldr	r2, [pc, #24]	@ (800a7f4 <HAL_TIM_Base_MspInit+0x28>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d105      	bne.n	800a7ea <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a7de:	4b06      	ldr	r3, [pc, #24]	@ (800a7f8 <HAL_TIM_Base_MspInit+0x2c>)
 800a7e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7e2:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <HAL_TIM_Base_MspInit+0x2c>)
 800a7e4:	2110      	movs	r1, #16
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800a7ea:	46c0      	nop			@ (mov r8, r8)
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	b002      	add	sp, #8
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	46c0      	nop			@ (mov r8, r8)
 800a7f4:	40001000 	.word	0x40001000
 800a7f8:	40021000 	.word	0x40021000

0800a7fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a7fc:	b590      	push	{r4, r7, lr}
 800a7fe:	b08b      	sub	sp, #44	@ 0x2c
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a804:	2414      	movs	r4, #20
 800a806:	193b      	adds	r3, r7, r4
 800a808:	0018      	movs	r0, r3
 800a80a:	2314      	movs	r3, #20
 800a80c:	001a      	movs	r2, r3
 800a80e:	2100      	movs	r1, #0
 800a810:	f010 fc68 	bl	801b0e4 <memset>
  if(timHandle->Instance==TIM2)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	2380      	movs	r3, #128	@ 0x80
 800a81a:	05db      	lsls	r3, r3, #23
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d123      	bne.n	800a868 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a820:	4b27      	ldr	r3, [pc, #156]	@ (800a8c0 <HAL_TIM_MspPostInit+0xc4>)
 800a822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a824:	4b26      	ldr	r3, [pc, #152]	@ (800a8c0 <HAL_TIM_MspPostInit+0xc4>)
 800a826:	2101      	movs	r1, #1
 800a828:	430a      	orrs	r2, r1
 800a82a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a82c:	4b24      	ldr	r3, [pc, #144]	@ (800a8c0 <HAL_TIM_MspPostInit+0xc4>)
 800a82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a830:	2201      	movs	r2, #1
 800a832:	4013      	ands	r3, r2
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800a838:	0021      	movs	r1, r4
 800a83a:	187b      	adds	r3, r7, r1
 800a83c:	220d      	movs	r2, #13
 800a83e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a840:	187b      	adds	r3, r7, r1
 800a842:	2202      	movs	r2, #2
 800a844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a846:	187b      	adds	r3, r7, r1
 800a848:	2200      	movs	r2, #0
 800a84a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a84c:	187b      	adds	r3, r7, r1
 800a84e:	2200      	movs	r2, #0
 800a850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800a852:	187b      	adds	r3, r7, r1
 800a854:	2202      	movs	r2, #2
 800a856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a858:	187a      	adds	r2, r7, r1
 800a85a:	23a0      	movs	r3, #160	@ 0xa0
 800a85c:	05db      	lsls	r3, r3, #23
 800a85e:	0011      	movs	r1, r2
 800a860:	0018      	movs	r0, r3
 800a862:	f001 feb9 	bl	800c5d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a866:	e027      	b.n	800a8b8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a15      	ldr	r2, [pc, #84]	@ (800a8c4 <HAL_TIM_MspPostInit+0xc8>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d122      	bne.n	800a8b8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a872:	4b13      	ldr	r3, [pc, #76]	@ (800a8c0 <HAL_TIM_MspPostInit+0xc4>)
 800a874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a876:	4b12      	ldr	r3, [pc, #72]	@ (800a8c0 <HAL_TIM_MspPostInit+0xc4>)
 800a878:	2104      	movs	r1, #4
 800a87a:	430a      	orrs	r2, r1
 800a87c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a87e:	4b10      	ldr	r3, [pc, #64]	@ (800a8c0 <HAL_TIM_MspPostInit+0xc4>)
 800a880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a882:	2204      	movs	r2, #4
 800a884:	4013      	ands	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800a88a:	2114      	movs	r1, #20
 800a88c:	187b      	adds	r3, r7, r1
 800a88e:	22e0      	movs	r2, #224	@ 0xe0
 800a890:	0052      	lsls	r2, r2, #1
 800a892:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a894:	187b      	adds	r3, r7, r1
 800a896:	2202      	movs	r2, #2
 800a898:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a89a:	187b      	adds	r3, r7, r1
 800a89c:	2200      	movs	r2, #0
 800a89e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a0:	187b      	adds	r3, r7, r1
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a8a6:	187b      	adds	r3, r7, r1
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8ac:	187b      	adds	r3, r7, r1
 800a8ae:	4a06      	ldr	r2, [pc, #24]	@ (800a8c8 <HAL_TIM_MspPostInit+0xcc>)
 800a8b0:	0019      	movs	r1, r3
 800a8b2:	0010      	movs	r0, r2
 800a8b4:	f001 fe90 	bl	800c5d8 <HAL_GPIO_Init>
}
 800a8b8:	46c0      	nop			@ (mov r8, r8)
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	b00b      	add	sp, #44	@ 0x2c
 800a8be:	bd90      	pop	{r4, r7, pc}
 800a8c0:	40021000 	.word	0x40021000
 800a8c4:	40000400 	.word	0x40000400
 800a8c8:	50000800 	.word	0x50000800

0800a8cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800a8d0:	4b17      	ldr	r3, [pc, #92]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8d2:	4a18      	ldr	r2, [pc, #96]	@ (800a934 <MX_LPUART1_UART_Init+0x68>)
 800a8d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800a8d6:	4b16      	ldr	r3, [pc, #88]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8d8:	22e1      	movs	r2, #225	@ 0xe1
 800a8da:	0252      	lsls	r2, r2, #9
 800a8dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a8de:	4b14      	ldr	r3, [pc, #80]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a8e4:	4b12      	ldr	r3, [pc, #72]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a8ea:	4b11      	ldr	r3, [pc, #68]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8f2:	220c      	movs	r2, #12
 800a8f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800a902:	4b0b      	ldr	r3, [pc, #44]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a904:	2218      	movs	r2, #24
 800a906:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800a908:	4b09      	ldr	r3, [pc, #36]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a90a:	2280      	movs	r2, #128	@ 0x80
 800a90c:	0212      	lsls	r2, r2, #8
 800a90e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800a910:	4b07      	ldr	r3, [pc, #28]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a912:	2280      	movs	r2, #128	@ 0x80
 800a914:	0152      	lsls	r2, r2, #5
 800a916:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a918:	4b05      	ldr	r3, [pc, #20]	@ (800a930 <MX_LPUART1_UART_Init+0x64>)
 800a91a:	0018      	movs	r0, r3
 800a91c:	f007 ffd8 	bl	80128d0 <HAL_UART_Init>
 800a920:	1e03      	subs	r3, r0, #0
 800a922:	d001      	beq.n	800a928 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800a924:	f7fc f8e2 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a928:	46c0      	nop			@ (mov r8, r8)
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	46c0      	nop			@ (mov r8, r8)
 800a930:	20002174 	.word	0x20002174
 800a934:	40004800 	.word	0x40004800

0800a938 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a93c:	4b16      	ldr	r3, [pc, #88]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a93e:	4a17      	ldr	r2, [pc, #92]	@ (800a99c <MX_USART1_UART_Init+0x64>)
 800a940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a942:	4b15      	ldr	r3, [pc, #84]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a944:	22e1      	movs	r2, #225	@ 0xe1
 800a946:	0252      	lsls	r2, r2, #9
 800a948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a94a:	4b13      	ldr	r3, [pc, #76]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a950:	4b11      	ldr	r3, [pc, #68]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a952:	2200      	movs	r2, #0
 800a954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a956:	4b10      	ldr	r3, [pc, #64]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a958:	2200      	movs	r2, #0
 800a95a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a95c:	4b0e      	ldr	r3, [pc, #56]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a95e:	220c      	movs	r2, #12
 800a960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a962:	4b0d      	ldr	r3, [pc, #52]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a964:	2200      	movs	r2, #0
 800a966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a968:	4b0b      	ldr	r3, [pc, #44]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a96e:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a970:	2200      	movs	r2, #0
 800a972:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800a974:	4b08      	ldr	r3, [pc, #32]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a976:	2208      	movs	r2, #8
 800a978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800a97a:	4b07      	ldr	r3, [pc, #28]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a97c:	2280      	movs	r2, #128	@ 0x80
 800a97e:	0212      	lsls	r2, r2, #8
 800a980:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a982:	4b05      	ldr	r3, [pc, #20]	@ (800a998 <MX_USART1_UART_Init+0x60>)
 800a984:	0018      	movs	r0, r3
 800a986:	f007 ffa3 	bl	80128d0 <HAL_UART_Init>
 800a98a:	1e03      	subs	r3, r0, #0
 800a98c:	d001      	beq.n	800a992 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800a98e:	f7fc f8ad 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a992:	46c0      	nop			@ (mov r8, r8)
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	2000222c 	.word	0x2000222c
 800a99c:	40013800 	.word	0x40013800

0800a9a0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800a9a4:	4b14      	ldr	r3, [pc, #80]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9a6:	4a15      	ldr	r2, [pc, #84]	@ (800a9fc <MX_USART4_UART_Init+0x5c>)
 800a9a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a9aa:	4b13      	ldr	r3, [pc, #76]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9ac:	22e1      	movs	r2, #225	@ 0xe1
 800a9ae:	0252      	lsls	r2, r2, #9
 800a9b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a9b2:	4b11      	ldr	r3, [pc, #68]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a9be:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9c6:	220c      	movs	r2, #12
 800a9c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a9ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a9d0:	4b09      	ldr	r3, [pc, #36]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a9d6:	4b08      	ldr	r3, [pc, #32]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a9dc:	4b06      	ldr	r3, [pc, #24]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a9e2:	4b05      	ldr	r3, [pc, #20]	@ (800a9f8 <MX_USART4_UART_Init+0x58>)
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	f007 ff73 	bl	80128d0 <HAL_UART_Init>
 800a9ea:	1e03      	subs	r3, r0, #0
 800a9ec:	d001      	beq.n	800a9f2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800a9ee:	f7fc f87d 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	200022e4 	.word	0x200022e4
 800a9fc:	40004c00 	.word	0x40004c00

0800aa00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b08d      	sub	sp, #52	@ 0x34
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa08:	241c      	movs	r4, #28
 800aa0a:	193b      	adds	r3, r7, r4
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	2314      	movs	r3, #20
 800aa10:	001a      	movs	r2, r3
 800aa12:	2100      	movs	r1, #0
 800aa14:	f010 fb66 	bl	801b0e4 <memset>
  if(uartHandle->Instance==LPUART1)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a87      	ldr	r2, [pc, #540]	@ (800ac3c <HAL_UART_MspInit+0x23c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d129      	bne.n	800aa76 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800aa22:	4b87      	ldr	r3, [pc, #540]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa26:	4b86      	ldr	r3, [pc, #536]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa28:	2180      	movs	r1, #128	@ 0x80
 800aa2a:	02c9      	lsls	r1, r1, #11
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa30:	4b83      	ldr	r3, [pc, #524]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa34:	4b82      	ldr	r3, [pc, #520]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa36:	2104      	movs	r1, #4
 800aa38:	430a      	orrs	r2, r1
 800aa3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aa3c:	4b80      	ldr	r3, [pc, #512]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa40:	2204      	movs	r2, #4
 800aa42:	4013      	ands	r3, r2
 800aa44:	61bb      	str	r3, [r7, #24]
 800aa46:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800aa48:	0021      	movs	r1, r4
 800aa4a:	187b      	adds	r3, r7, r1
 800aa4c:	2203      	movs	r2, #3
 800aa4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa50:	187b      	adds	r3, r7, r1
 800aa52:	2202      	movs	r2, #2
 800aa54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa56:	187b      	adds	r3, r7, r1
 800aa58:	2200      	movs	r2, #0
 800aa5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa5c:	187b      	adds	r3, r7, r1
 800aa5e:	2203      	movs	r2, #3
 800aa60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800aa62:	187b      	adds	r3, r7, r1
 800aa64:	2206      	movs	r2, #6
 800aa66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa68:	187b      	adds	r3, r7, r1
 800aa6a:	4a76      	ldr	r2, [pc, #472]	@ (800ac44 <HAL_UART_MspInit+0x244>)
 800aa6c:	0019      	movs	r1, r3
 800aa6e:	0010      	movs	r0, r2
 800aa70:	f001 fdb2 	bl	800c5d8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800aa74:	e0dd      	b.n	800ac32 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a73      	ldr	r2, [pc, #460]	@ (800ac48 <HAL_UART_MspInit+0x248>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d12b      	bne.n	800aad8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800aa80:	4b6f      	ldr	r3, [pc, #444]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa84:	4b6e      	ldr	r3, [pc, #440]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa86:	2180      	movs	r1, #128	@ 0x80
 800aa88:	01c9      	lsls	r1, r1, #7
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa8e:	4b6c      	ldr	r3, [pc, #432]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa92:	4b6b      	ldr	r3, [pc, #428]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa94:	2101      	movs	r1, #1
 800aa96:	430a      	orrs	r2, r1
 800aa98:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aa9a:	4b69      	ldr	r3, [pc, #420]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aa9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	617b      	str	r3, [r7, #20]
 800aaa4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800aaa6:	211c      	movs	r1, #28
 800aaa8:	187b      	adds	r3, r7, r1
 800aaaa:	22c0      	movs	r2, #192	@ 0xc0
 800aaac:	00d2      	lsls	r2, r2, #3
 800aaae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab0:	187b      	adds	r3, r7, r1
 800aab2:	2202      	movs	r2, #2
 800aab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab6:	187b      	adds	r3, r7, r1
 800aab8:	2200      	movs	r2, #0
 800aaba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aabc:	187b      	adds	r3, r7, r1
 800aabe:	2203      	movs	r2, #3
 800aac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800aac2:	187b      	adds	r3, r7, r1
 800aac4:	2204      	movs	r2, #4
 800aac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aac8:	187a      	adds	r2, r7, r1
 800aaca:	23a0      	movs	r3, #160	@ 0xa0
 800aacc:	05db      	lsls	r3, r3, #23
 800aace:	0011      	movs	r1, r2
 800aad0:	0018      	movs	r0, r3
 800aad2:	f001 fd81 	bl	800c5d8 <HAL_GPIO_Init>
}
 800aad6:	e0ac      	b.n	800ac32 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a5b      	ldr	r2, [pc, #364]	@ (800ac4c <HAL_UART_MspInit+0x24c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d000      	beq.n	800aae4 <HAL_UART_MspInit+0xe4>
 800aae2:	e0a6      	b.n	800ac32 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 800aae4:	4b56      	ldr	r3, [pc, #344]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aae8:	4b55      	ldr	r3, [pc, #340]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aaea:	2180      	movs	r1, #128	@ 0x80
 800aaec:	0309      	lsls	r1, r1, #12
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaf2:	4b53      	ldr	r3, [pc, #332]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aaf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf6:	4b52      	ldr	r3, [pc, #328]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800aaf8:	2101      	movs	r1, #1
 800aafa:	430a      	orrs	r2, r1
 800aafc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aafe:	4b50      	ldr	r3, [pc, #320]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800ab00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab02:	2201      	movs	r2, #1
 800ab04:	4013      	ands	r3, r2
 800ab06:	613b      	str	r3, [r7, #16]
 800ab08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab0a:	4b4d      	ldr	r3, [pc, #308]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800ab0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0e:	4b4c      	ldr	r3, [pc, #304]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800ab10:	2104      	movs	r1, #4
 800ab12:	430a      	orrs	r2, r1
 800ab14:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ab16:	4b4a      	ldr	r3, [pc, #296]	@ (800ac40 <HAL_UART_MspInit+0x240>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1a:	2204      	movs	r2, #4
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ab22:	241c      	movs	r4, #28
 800ab24:	193b      	adds	r3, r7, r4
 800ab26:	2202      	movs	r2, #2
 800ab28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab2a:	193b      	adds	r3, r7, r4
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab30:	193b      	adds	r3, r7, r4
 800ab32:	2200      	movs	r2, #0
 800ab34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab36:	193b      	adds	r3, r7, r4
 800ab38:	2203      	movs	r2, #3
 800ab3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ab3c:	193b      	adds	r3, r7, r4
 800ab3e:	2206      	movs	r2, #6
 800ab40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab42:	193a      	adds	r2, r7, r4
 800ab44:	23a0      	movs	r3, #160	@ 0xa0
 800ab46:	05db      	lsls	r3, r3, #23
 800ab48:	0011      	movs	r1, r2
 800ab4a:	0018      	movs	r0, r3
 800ab4c:	f001 fd44 	bl	800c5d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ab50:	0021      	movs	r1, r4
 800ab52:	187b      	adds	r3, r7, r1
 800ab54:	2280      	movs	r2, #128	@ 0x80
 800ab56:	00d2      	lsls	r2, r2, #3
 800ab58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab5a:	187b      	adds	r3, r7, r1
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab60:	187b      	adds	r3, r7, r1
 800ab62:	2200      	movs	r2, #0
 800ab64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab66:	187b      	adds	r3, r7, r1
 800ab68:	2203      	movs	r2, #3
 800ab6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ab6c:	187b      	adds	r3, r7, r1
 800ab6e:	2206      	movs	r2, #6
 800ab70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab72:	187b      	adds	r3, r7, r1
 800ab74:	4a33      	ldr	r2, [pc, #204]	@ (800ac44 <HAL_UART_MspInit+0x244>)
 800ab76:	0019      	movs	r1, r3
 800ab78:	0010      	movs	r0, r2
 800ab7a:	f001 fd2d 	bl	800c5d8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800ab7e:	4b34      	ldr	r3, [pc, #208]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800ab80:	4a34      	ldr	r2, [pc, #208]	@ (800ac54 <HAL_UART_MspInit+0x254>)
 800ab82:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800ab84:	4b32      	ldr	r3, [pc, #200]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800ab86:	220c      	movs	r2, #12
 800ab88:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab8a:	4b31      	ldr	r3, [pc, #196]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab90:	4b2f      	ldr	r3, [pc, #188]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab96:	4b2e      	ldr	r3, [pc, #184]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800ab98:	2280      	movs	r2, #128	@ 0x80
 800ab9a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab9c:	4b2c      	ldr	r3, [pc, #176]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aba2:	4b2b      	ldr	r3, [pc, #172]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800aba8:	4b29      	ldr	r3, [pc, #164]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800abaa:	2220      	movs	r2, #32
 800abac:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800abae:	4b28      	ldr	r3, [pc, #160]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800abb4:	4b26      	ldr	r3, [pc, #152]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800abb6:	0018      	movs	r0, r3
 800abb8:	f001 f8f2 	bl	800bda0 <HAL_DMA_Init>
 800abbc:	1e03      	subs	r3, r0, #0
 800abbe:	d001      	beq.n	800abc4 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 800abc0:	f7fb ff94 	bl	8006aec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a22      	ldr	r2, [pc, #136]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800abc8:	675a      	str	r2, [r3, #116]	@ 0x74
 800abca:	4b21      	ldr	r3, [pc, #132]	@ (800ac50 <HAL_UART_MspInit+0x250>)
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800abd0:	4b21      	ldr	r3, [pc, #132]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abd2:	4a22      	ldr	r2, [pc, #136]	@ (800ac5c <HAL_UART_MspInit+0x25c>)
 800abd4:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800abd6:	4b20      	ldr	r3, [pc, #128]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abd8:	220c      	movs	r2, #12
 800abda:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800abdc:	4b1e      	ldr	r3, [pc, #120]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abde:	2210      	movs	r2, #16
 800abe0:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800abe2:	4b1d      	ldr	r3, [pc, #116]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800abe8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abea:	2280      	movs	r2, #128	@ 0x80
 800abec:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abee:	4b1a      	ldr	r3, [pc, #104]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abf4:	4b18      	ldr	r3, [pc, #96]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800abfa:	4b17      	ldr	r3, [pc, #92]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ac00:	4b15      	ldr	r3, [pc, #84]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800ac06:	4b14      	ldr	r3, [pc, #80]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f001 f8c9 	bl	800bda0 <HAL_DMA_Init>
 800ac0e:	1e03      	subs	r3, r0, #0
 800ac10:	d001      	beq.n	800ac16 <HAL_UART_MspInit+0x216>
      Error_Handler();
 800ac12:	f7fb ff6b 	bl	8006aec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a0f      	ldr	r2, [pc, #60]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800ac1a:	671a      	str	r2, [r3, #112]	@ 0x70
 800ac1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ac58 <HAL_UART_MspInit+0x258>)
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	200e      	movs	r0, #14
 800ac28:	f001 f888 	bl	800bd3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800ac2c:	200e      	movs	r0, #14
 800ac2e:	f001 f89a 	bl	800bd66 <HAL_NVIC_EnableIRQ>
}
 800ac32:	46c0      	nop			@ (mov r8, r8)
 800ac34:	46bd      	mov	sp, r7
 800ac36:	b00d      	add	sp, #52	@ 0x34
 800ac38:	bd90      	pop	{r4, r7, pc}
 800ac3a:	46c0      	nop			@ (mov r8, r8)
 800ac3c:	40004800 	.word	0x40004800
 800ac40:	40021000 	.word	0x40021000
 800ac44:	50000800 	.word	0x50000800
 800ac48:	40013800 	.word	0x40013800
 800ac4c:	40004c00 	.word	0x40004c00
 800ac50:	2000239c 	.word	0x2000239c
 800ac54:	4002006c 	.word	0x4002006c
 800ac58:	200023e4 	.word	0x200023e4
 800ac5c:	40020080 	.word	0x40020080

0800ac60 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 80

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800ac68:	f000 fbf2 	bl	800b450 <HAL_GetTick>
 800ac6c:	0003      	movs	r3, r0
 800ac6e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800ac70:	4b1c      	ldr	r3, [pc, #112]	@ (800ace4 <TimestampIsReached+0x84>)
 800ac72:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d307      	bcc.n	800ac8c <TimestampIsReached+0x2c>
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d901      	bls.n	800ac8c <TimestampIsReached+0x2c>
 800ac88:	2201      	movs	r2, #1
 800ac8a:	e000      	b.n	800ac8e <TimestampIsReached+0x2e>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	230f      	movs	r3, #15
 800ac90:	18fb      	adds	r3, r7, r3
 800ac92:	701a      	strb	r2, [r3, #0]
 800ac94:	781a      	ldrb	r2, [r3, #0]
 800ac96:	2101      	movs	r1, #1
 800ac98:	400a      	ands	r2, r1
 800ac9a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d207      	bcs.n	800acb4 <TimestampIsReached+0x54>
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	429a      	cmp	r2, r3
 800acae:	d201      	bcs.n	800acb4 <TimestampIsReached+0x54>
 800acb0:	2201      	movs	r2, #1
 800acb2:	e000      	b.n	800acb6 <TimestampIsReached+0x56>
 800acb4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800acb6:	200e      	movs	r0, #14
 800acb8:	183b      	adds	r3, r7, r0
 800acba:	701a      	strb	r2, [r3, #0]
 800acbc:	781a      	ldrb	r2, [r3, #0]
 800acbe:	2101      	movs	r1, #1
 800acc0:	400a      	ands	r2, r1
 800acc2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800acc4:	230f      	movs	r3, #15
 800acc6:	18fb      	adds	r3, r7, r3
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d103      	bne.n	800acd6 <TimestampIsReached+0x76>
 800acce:	183b      	adds	r3, r7, r0
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e000      	b.n	800acdc <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	0018      	movs	r0, r3
 800acde:	46bd      	mov	sp, r7
 800ace0:	b006      	add	sp, #24
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	7fffffff 	.word	0x7fffffff

0800ace8 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800acf0:	f000 fbae 	bl	800b450 <HAL_GetTick>
 800acf4:	0002      	movs	r2, r0
 800acf6:	4904      	ldr	r1, [pc, #16]	@ (800ad08 <AddTimestamp+0x20>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	0018      	movs	r0, r3
 800acfc:	f010 f94e 	bl	801af9c <siprintf>
}
 800ad00:	46c0      	nop			@ (mov r8, r8)
 800ad02:	46bd      	mov	sp, r7
 800ad04:	b002      	add	sp, #8
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	0801ec94 	.word	0x0801ec94

0800ad0c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800ad0c:	b40c      	push	{r2, r3}
 800ad0e:	b590      	push	{r4, r7, lr}
 800ad10:	b099      	sub	sp, #100	@ 0x64
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	0002      	movs	r2, r0
 800ad16:	6039      	str	r1, [r7, #0]
 800ad18:	1dfb      	adds	r3, r7, #7
 800ad1a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800ad1c:	4b1f      	ldr	r3, [pc, #124]	@ (800ad9c <CreateLine+0x90>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	1dfa      	adds	r2, r7, #7
 800ad22:	7812      	ldrb	r2, [r2, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d832      	bhi.n	800ad8e <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	491d      	ldr	r1, [pc, #116]	@ (800ada0 <CreateLine+0x94>)
 800ad2c:	240c      	movs	r4, #12
 800ad2e:	193b      	adds	r3, r7, r4
 800ad30:	0018      	movs	r0, r3
 800ad32:	f010 f933 	bl	801af9c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800ad36:	4b19      	ldr	r3, [pc, #100]	@ (800ad9c <CreateLine+0x90>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d909      	bls.n	800ad52 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800ad3e:	193b      	adds	r3, r7, r4
 800ad40:	0018      	movs	r0, r3
 800ad42:	f7f5 fa09 	bl	8000158 <strlen>
 800ad46:	0002      	movs	r2, r0
 800ad48:	193b      	adds	r3, r7, r4
 800ad4a:	189b      	adds	r3, r3, r2
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f7ff ffcb 	bl	800ace8 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800ad52:	240c      	movs	r4, #12
 800ad54:	193b      	adds	r3, r7, r4
 800ad56:	0018      	movs	r0, r3
 800ad58:	f7f5 f9fe 	bl	8000158 <strlen>
 800ad5c:	0003      	movs	r3, r0
 800ad5e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800ad60:	236c      	movs	r3, #108	@ 0x6c
 800ad62:	2208      	movs	r2, #8
 800ad64:	189b      	adds	r3, r3, r2
 800ad66:	19db      	adds	r3, r3, r7
 800ad68:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800ad6a:	193a      	adds	r2, r7, r4
 800ad6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad6e:	18d0      	adds	r0, r2, r3
 800ad70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad72:	2250      	movs	r2, #80	@ 0x50
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	0019      	movs	r1, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad7c:	f010 f9a6 	bl	801b0cc <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800ad80:	193a      	adds	r2, r7, r4
 800ad82:	4b08      	ldr	r3, [pc, #32]	@ (800ada4 <CreateLine+0x98>)
 800ad84:	0011      	movs	r1, r2
 800ad86:	0018      	movs	r0, r3
 800ad88:	f010 f8f8 	bl	801af7c <iprintf>
 800ad8c:	e000      	b.n	800ad90 <CreateLine+0x84>
    return;
 800ad8e:	46c0      	nop			@ (mov r8, r8)
}
 800ad90:	46bd      	mov	sp, r7
 800ad92:	b019      	add	sp, #100	@ 0x64
 800ad94:	bc90      	pop	{r4, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	b002      	add	sp, #8
 800ad9a:	4718      	bx	r3
 800ad9c:	20000074 	.word	0x20000074
 800ada0:	0801eca0 	.word	0x0801eca0
 800ada4:	0801eca4 	.word	0x0801eca4

0800ada8 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	68b9      	ldr	r1, [r7, #8]
 800adba:	4804      	ldr	r0, [pc, #16]	@ (800adcc <_write+0x24>)
 800adbc:	2364      	movs	r3, #100	@ 0x64
 800adbe:	f007 fded 	bl	801299c <HAL_UART_Transmit>
  return count;
 800adc2:	687b      	ldr	r3, [r7, #4]
}
 800adc4:	0018      	movs	r0, r3
 800adc6:	46bd      	mov	sp, r7
 800adc8:	b004      	add	sp, #16
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	2000222c 	.word	0x2000222c

0800add0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	0002      	movs	r2, r0
 800add8:	1dfb      	adds	r3, r7, #7
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	4b03      	ldr	r3, [pc, #12]	@ (800adec <SetVerboseLevel+0x1c>)
 800adde:	1dfa      	adds	r2, r7, #7
 800ade0:	7812      	ldrb	r2, [r2, #0]
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	46c0      	nop			@ (mov r8, r8)
 800ade6:	46bd      	mov	sp, r7
 800ade8:	b002      	add	sp, #8
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20000074 	.word	0x20000074

0800adf0 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800adf4:	f000 fb2c 	bl	800b450 <HAL_GetTick>
 800adf8:	0003      	movs	r3, r0
}
 800adfa:	0018      	movs	r0, r3
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800ae06:	4a0f      	ldr	r2, [pc, #60]	@ (800ae44 <BinaryReleaseInfo+0x44>)
 800ae08:	4b0f      	ldr	r3, [pc, #60]	@ (800ae48 <BinaryReleaseInfo+0x48>)
 800ae0a:	0019      	movs	r1, r3
 800ae0c:	2002      	movs	r0, #2
 800ae0e:	f7ff ff7d 	bl	800ad0c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800ae12:	480e      	ldr	r0, [pc, #56]	@ (800ae4c <BinaryReleaseInfo+0x4c>)
 800ae14:	4a0e      	ldr	r2, [pc, #56]	@ (800ae50 <BinaryReleaseInfo+0x50>)
 800ae16:	490c      	ldr	r1, [pc, #48]	@ (800ae48 <BinaryReleaseInfo+0x48>)
 800ae18:	4b0e      	ldr	r3, [pc, #56]	@ (800ae54 <BinaryReleaseInfo+0x54>)
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	0003      	movs	r3, r0
 800ae1e:	2002      	movs	r0, #2
 800ae20:	f7ff ff74 	bl	800ad0c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w46a");
 800ae24:	4a0c      	ldr	r2, [pc, #48]	@ (800ae58 <BinaryReleaseInfo+0x58>)
 800ae26:	4b08      	ldr	r3, [pc, #32]	@ (800ae48 <BinaryReleaseInfo+0x48>)
 800ae28:	0019      	movs	r1, r3
 800ae2a:	2002      	movs	r0, #2
 800ae2c:	f7ff ff6e 	bl	800ad0c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800ae30:	4b0a      	ldr	r3, [pc, #40]	@ (800ae5c <BinaryReleaseInfo+0x5c>)
 800ae32:	4a0b      	ldr	r2, [pc, #44]	@ (800ae60 <BinaryReleaseInfo+0x60>)
 800ae34:	4904      	ldr	r1, [pc, #16]	@ (800ae48 <BinaryReleaseInfo+0x48>)
 800ae36:	2002      	movs	r0, #2
 800ae38:	f7ff ff68 	bl	800ad0c <CreateLine>
}
 800ae3c:	46c0      	nop			@ (mov r8, r8)
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	46c0      	nop			@ (mov r8, r8)
 800ae44:	0801ecac 	.word	0x0801ecac
 800ae48:	0801ecd8 	.word	0x0801ecd8
 800ae4c:	0801ecdc 	.word	0x0801ecdc
 800ae50:	0801ece8 	.word	0x0801ece8
 800ae54:	0801ecfc 	.word	0x0801ecfc
 800ae58:	0801ed08 	.word	0x0801ed08
 800ae5c:	0801ed14 	.word	0x0801ed14
 800ae60:	0801ed1c 	.word	0x0801ed1c

0800ae64 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	68f9      	ldr	r1, [r7, #12]
 800ae76:	4803      	ldr	r0, [pc, #12]	@ (800ae84 <errorHandler+0x20>)
 800ae78:	f010 f880 	bl	801af7c <iprintf>
//    while (true)
//    {
//    }
}
 800ae7c:	46c0      	nop			@ (mov r8, r8)
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	b004      	add	sp, #16
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	0801ed34 	.word	0x0801ed34

0800ae88 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ae88:	b590      	push	{r4, r7, lr}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6039      	str	r1, [r7, #0]
 800ae90:	0011      	movs	r1, r2
 800ae92:	1dfb      	adds	r3, r7, #7
 800ae94:	1c02      	adds	r2, r0, #0
 800ae96:	701a      	strb	r2, [r3, #0]
 800ae98:	1dbb      	adds	r3, r7, #6
 800ae9a:	1c0a      	adds	r2, r1, #0
 800ae9c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800ae9e:	4b0a      	ldr	r3, [pc, #40]	@ (800aec8 <ReadRegister+0x40>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800aea6:	4b08      	ldr	r3, [pc, #32]	@ (800aec8 <ReadRegister+0x40>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	1dba      	adds	r2, r7, #6
 800aeac:	7814      	ldrb	r4, [r2, #0]
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	1dfa      	adds	r2, r7, #7
 800aeb2:	7810      	ldrb	r0, [r2, #0]
 800aeb4:	0022      	movs	r2, r4
 800aeb6:	4798      	blx	r3
 800aeb8:	0003      	movs	r3, r0
 800aeba:	e000      	b.n	800aebe <ReadRegister+0x36>
	}
	return false;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	0018      	movs	r0, r3
 800aec0:	46bd      	mov	sp, r7
 800aec2:	b003      	add	sp, #12
 800aec4:	bd90      	pop	{r4, r7, pc}
 800aec6:	46c0      	nop			@ (mov r8, r8)
 800aec8:	2000242c 	.word	0x2000242c

0800aecc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6039      	str	r1, [r7, #0]
 800aed4:	0011      	movs	r1, r2
 800aed6:	1dfb      	adds	r3, r7, #7
 800aed8:	1c02      	adds	r2, r0, #0
 800aeda:	701a      	strb	r2, [r3, #0]
 800aedc:	1dbb      	adds	r3, r7, #6
 800aede:	1c0a      	adds	r2, r1, #0
 800aee0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800aee2:	4b0a      	ldr	r3, [pc, #40]	@ (800af0c <WriteRegister+0x40>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800aeea:	4b08      	ldr	r3, [pc, #32]	@ (800af0c <WriteRegister+0x40>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	1dba      	adds	r2, r7, #6
 800aef0:	7814      	ldrb	r4, [r2, #0]
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	1dfa      	adds	r2, r7, #7
 800aef6:	7810      	ldrb	r0, [r2, #0]
 800aef8:	0022      	movs	r2, r4
 800aefa:	4798      	blx	r3
 800aefc:	0003      	movs	r3, r0
 800aefe:	e000      	b.n	800af02 <WriteRegister+0x36>
  }
  return false;
 800af00:	2300      	movs	r3, #0
}
 800af02:	0018      	movs	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	b003      	add	sp, #12
 800af08:	bd90      	pop	{r4, r7, pc}
 800af0a:	46c0      	nop			@ (mov r8, r8)
 800af0c:	20002430 	.word	0x20002430

0800af10 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	000a      	movs	r2, r1
 800af1a:	1cfb      	adds	r3, r7, #3
 800af1c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800af1e:	230f      	movs	r3, #15
 800af20:	18fb      	adds	r3, r7, r3
 800af22:	22ff      	movs	r2, #255	@ 0xff
 800af24:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800af26:	230e      	movs	r3, #14
 800af28:	18fb      	adds	r3, r7, r3
 800af2a:	2200      	movs	r2, #0
 800af2c:	701a      	strb	r2, [r3, #0]
 800af2e:	e037      	b.n	800afa0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800af30:	230e      	movs	r3, #14
 800af32:	18fb      	adds	r3, r7, r3
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	18d3      	adds	r3, r2, r3
 800af3a:	7819      	ldrb	r1, [r3, #0]
 800af3c:	220f      	movs	r2, #15
 800af3e:	18bb      	adds	r3, r7, r2
 800af40:	18ba      	adds	r2, r7, r2
 800af42:	7812      	ldrb	r2, [r2, #0]
 800af44:	404a      	eors	r2, r1
 800af46:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800af48:	230d      	movs	r3, #13
 800af4a:	18fb      	adds	r3, r7, r3
 800af4c:	2200      	movs	r2, #0
 800af4e:	701a      	strb	r2, [r3, #0]
 800af50:	e01b      	b.n	800af8a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800af52:	210f      	movs	r1, #15
 800af54:	187b      	adds	r3, r7, r1
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	b25b      	sxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	da09      	bge.n	800af72 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800af5e:	187b      	adds	r3, r7, r1
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	b25b      	sxtb	r3, r3
 800af66:	2231      	movs	r2, #49	@ 0x31
 800af68:	4053      	eors	r3, r2
 800af6a:	b25a      	sxtb	r2, r3
 800af6c:	187b      	adds	r3, r7, r1
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e005      	b.n	800af7e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800af72:	230f      	movs	r3, #15
 800af74:	18fa      	adds	r2, r7, r3
 800af76:	18fb      	adds	r3, r7, r3
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	18db      	adds	r3, r3, r3
 800af7c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800af7e:	210d      	movs	r1, #13
 800af80:	187b      	adds	r3, r7, r1
 800af82:	781a      	ldrb	r2, [r3, #0]
 800af84:	187b      	adds	r3, r7, r1
 800af86:	3201      	adds	r2, #1
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	230d      	movs	r3, #13
 800af8c:	18fb      	adds	r3, r7, r3
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	2b07      	cmp	r3, #7
 800af92:	d9de      	bls.n	800af52 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800af94:	210e      	movs	r1, #14
 800af96:	187b      	adds	r3, r7, r1
 800af98:	781a      	ldrb	r2, [r3, #0]
 800af9a:	187b      	adds	r3, r7, r1
 800af9c:	3201      	adds	r2, #1
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	230e      	movs	r3, #14
 800afa2:	18fa      	adds	r2, r7, r3
 800afa4:	1cfb      	adds	r3, r7, #3
 800afa6:	7812      	ldrb	r2, [r2, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d3c0      	bcc.n	800af30 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800afae:	230f      	movs	r3, #15
 800afb0:	18fb      	adds	r3, r7, r3
 800afb2:	781b      	ldrb	r3, [r3, #0]
}
 800afb4:	0018      	movs	r0, r3
 800afb6:	46bd      	mov	sp, r7
 800afb8:	b004      	add	sp, #16
 800afba:	bd80      	pop	{r7, pc}

0800afbc <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800afc6:	4b0a      	ldr	r3, [pc, #40]	@ (800aff0 <HIDS_Init+0x34>)
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800afcc:	4b09      	ldr	r3, [pc, #36]	@ (800aff4 <HIDS_Init+0x38>)
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800afd2:	4b09      	ldr	r3, [pc, #36]	@ (800aff8 <HIDS_Init+0x3c>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	0018      	movs	r0, r3
 800afd8:	f000 f8da 	bl	800b190 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800afdc:	4b07      	ldr	r3, [pc, #28]	@ (800affc <HIDS_Init+0x40>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	0018      	movs	r0, r3
 800afe2:	f000 f82b 	bl	800b03c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800afe6:	46c0      	nop			@ (mov r8, r8)
 800afe8:	46bd      	mov	sp, r7
 800afea:	b002      	add	sp, #8
 800afec:	bd80      	pop	{r7, pc}
 800afee:	46c0      	nop			@ (mov r8, r8)
 800aff0:	2000242c 	.word	0x2000242c
 800aff4:	20002430 	.word	0x20002430
 800aff8:	20000076 	.word	0x20000076
 800affc:	20000075 	.word	0x20000075

0800b000 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800b004:	f7ff fef4 	bl	800adf0 <GetCurrentHalTicks>
 800b008:	0002      	movs	r2, r0
 800b00a:	4b08      	ldr	r3, [pc, #32]	@ (800b02c <HIDS_StartMeasurement+0x2c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	18d2      	adds	r2, r2, r3
 800b010:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <HIDS_StartMeasurement+0x30>)
 800b012:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800b014:	4b07      	ldr	r3, [pc, #28]	@ (800b034 <HIDS_StartMeasurement+0x34>)
 800b016:	2201      	movs	r2, #1
 800b018:	0019      	movs	r1, r3
 800b01a:	2044      	movs	r0, #68	@ 0x44
 800b01c:	f7ff ff56 	bl	800aecc <WriteRegister>
  MeasurementDone = false;
 800b020:	4b05      	ldr	r3, [pc, #20]	@ (800b038 <HIDS_StartMeasurement+0x38>)
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
}
 800b026:	46c0      	nop			@ (mov r8, r8)
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	2000007c 	.word	0x2000007c
 800b030:	20000078 	.word	0x20000078
 800b034:	20000076 	.word	0x20000076
 800b038:	20002442 	.word	0x20002442

0800b03c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	0002      	movs	r2, r0
 800b044:	1dfb      	adds	r3, r7, #7
 800b046:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800b048:	4b03      	ldr	r3, [pc, #12]	@ (800b058 <HIDS_SetHeaterMode+0x1c>)
 800b04a:	1dfa      	adds	r2, r7, #7
 800b04c:	7812      	ldrb	r2, [r2, #0]
 800b04e:	701a      	strb	r2, [r3, #0]
}
 800b050:	46c0      	nop			@ (mov r8, r8)
 800b052:	46bd      	mov	sp, r7
 800b054:	b002      	add	sp, #8
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20000075 	.word	0x20000075

0800b05c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800b05c:	b590      	push	{r4, r7, lr}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	210c      	movs	r1, #12
 800b06a:	187b      	adds	r3, r7, r1
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	785a      	ldrb	r2, [r3, #1]
 800b072:	187b      	adds	r3, r7, r1
 800b074:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800b076:	240f      	movs	r4, #15
 800b078:	193b      	adds	r3, r7, r4
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	7892      	ldrb	r2, [r2, #2]
 800b07e:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800b080:	187b      	adds	r3, r7, r1
 800b082:	2102      	movs	r1, #2
 800b084:	0018      	movs	r0, r3
 800b086:	f7ff ff43 	bl	800af10 <CalculateCRC>
 800b08a:	0003      	movs	r3, r0
 800b08c:	001a      	movs	r2, r3
 800b08e:	193b      	adds	r3, r7, r4
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	4293      	cmp	r3, r2
 800b094:	d007      	beq.n	800b0a6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800b096:	4a1a      	ldr	r2, [pc, #104]	@ (800b100 <CheckCRC+0xa4>)
 800b098:	4b1a      	ldr	r3, [pc, #104]	@ (800b104 <CheckCRC+0xa8>)
 800b09a:	0019      	movs	r1, r3
 800b09c:	2001      	movs	r0, #1
 800b09e:	f7ff fe35 	bl	800ad0c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e027      	b.n	800b0f6 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	78da      	ldrb	r2, [r3, #3]
 800b0aa:	2108      	movs	r1, #8
 800b0ac:	187b      	adds	r3, r7, r1
 800b0ae:	701a      	strb	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	791a      	ldrb	r2, [r3, #4]
 800b0b4:	187b      	adds	r3, r7, r1
 800b0b6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800b0b8:	240e      	movs	r4, #14
 800b0ba:	193b      	adds	r3, r7, r4
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	7952      	ldrb	r2, [r2, #5]
 800b0c0:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800b0c2:	187b      	adds	r3, r7, r1
 800b0c4:	2102      	movs	r1, #2
 800b0c6:	0018      	movs	r0, r3
 800b0c8:	f7ff ff22 	bl	800af10 <CalculateCRC>
 800b0cc:	0003      	movs	r3, r0
 800b0ce:	001a      	movs	r2, r3
 800b0d0:	193b      	adds	r3, r7, r4
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d00d      	beq.n	800b0f4 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800b0d8:	4a0b      	ldr	r2, [pc, #44]	@ (800b108 <CheckCRC+0xac>)
 800b0da:	4b0a      	ldr	r3, [pc, #40]	@ (800b104 <CheckCRC+0xa8>)
 800b0dc:	0019      	movs	r1, r3
 800b0de:	2001      	movs	r0, #1
 800b0e0:	f7ff fe14 	bl	800ad0c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800b0e4:	4a09      	ldr	r2, [pc, #36]	@ (800b10c <CheckCRC+0xb0>)
 800b0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <CheckCRC+0xb4>)
 800b0e8:	2170      	movs	r1, #112	@ 0x70
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	f7ff feba 	bl	800ae64 <errorHandler>
		return false;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e000      	b.n	800b0f6 <CheckCRC+0x9a>
	}
	return true;
 800b0f4:	2301      	movs	r3, #1
}
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	b005      	add	sp, #20
 800b0fc:	bd90      	pop	{r4, r7, pc}
 800b0fe:	46c0      	nop			@ (mov r8, r8)
 800b100:	0801ed80 	.word	0x0801ed80
 800b104:	0801eda8 	.word	0x0801eda8
 800b108:	0801edac 	.word	0x0801edac
 800b10c:	0801edd8 	.word	0x0801edd8
 800b110:	0801f244 	.word	0x0801f244

0800b114 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800b11a:	1dbb      	adds	r3, r7, #6
 800b11c:	2289      	movs	r2, #137	@ 0x89
 800b11e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800b120:	1dbb      	adds	r3, r7, #6
 800b122:	2201      	movs	r2, #1
 800b124:	0019      	movs	r1, r3
 800b126:	2044      	movs	r0, #68	@ 0x44
 800b128:	f7ff fed0 	bl	800aecc <WriteRegister>
	HAL_Delay(30);
 800b12c:	201e      	movs	r0, #30
 800b12e:	f000 f999 	bl	800b464 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800b132:	4b14      	ldr	r3, [pc, #80]	@ (800b184 <HIDS_DeviceConnected+0x70>)
 800b134:	2206      	movs	r2, #6
 800b136:	0019      	movs	r1, r3
 800b138:	2044      	movs	r0, #68	@ 0x44
 800b13a:	f7ff fea5 	bl	800ae88 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800b13e:	1dfb      	adds	r3, r7, #7
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	e011      	b.n	800b16a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800b146:	1dfb      	adds	r3, r7, #7
 800b148:	7818      	ldrb	r0, [r3, #0]
 800b14a:	1dfb      	adds	r3, r7, #7
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	4a0d      	ldr	r2, [pc, #52]	@ (800b184 <HIDS_DeviceConnected+0x70>)
 800b150:	5cd3      	ldrb	r3, [r2, r3]
 800b152:	4a0d      	ldr	r2, [pc, #52]	@ (800b188 <HIDS_DeviceConnected+0x74>)
 800b154:	490d      	ldr	r1, [pc, #52]	@ (800b18c <HIDS_DeviceConnected+0x78>)
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	0003      	movs	r3, r0
 800b15a:	2002      	movs	r0, #2
 800b15c:	f7ff fdd6 	bl	800ad0c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800b160:	1dfb      	adds	r3, r7, #7
 800b162:	781a      	ldrb	r2, [r3, #0]
 800b164:	1dfb      	adds	r3, r7, #7
 800b166:	3201      	adds	r2, #1
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	1dfb      	adds	r3, r7, #7
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b05      	cmp	r3, #5
 800b170:	d9e9      	bls.n	800b146 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800b172:	4b04      	ldr	r3, [pc, #16]	@ (800b184 <HIDS_DeviceConnected+0x70>)
 800b174:	0018      	movs	r0, r3
 800b176:	f7ff ff71 	bl	800b05c <CheckCRC>
 800b17a:	0003      	movs	r3, r0
}
 800b17c:	0018      	movs	r0, r3
 800b17e:	46bd      	mov	sp, r7
 800b180:	b002      	add	sp, #8
 800b182:	bd80      	pop	{r7, pc}
 800b184:	20002434 	.word	0x20002434
 800b188:	0801edf0 	.word	0x0801edf0
 800b18c:	0801ed7c 	.word	0x0801ed7c

0800b190 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	0002      	movs	r2, r0
 800b198:	1dfb      	adds	r3, r7, #7
 800b19a:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800b19c:	4b03      	ldr	r3, [pc, #12]	@ (800b1ac <HIDS_SetMeasurementMode+0x1c>)
 800b19e:	1dfa      	adds	r2, r7, #7
 800b1a0:	7812      	ldrb	r2, [r2, #0]
 800b1a2:	701a      	strb	r2, [r3, #0]
}
 800b1a4:	46c0      	nop			@ (mov r8, r8)
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	b002      	add	sp, #8
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20000076 	.word	0x20000076

0800b1b0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800b1b4:	4b04      	ldr	r3, [pc, #16]	@ (800b1c8 <HIDS_MeasurementReady+0x18>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f7ff fd51 	bl	800ac60 <TimestampIsReached>
 800b1be:	0003      	movs	r3, r0
}
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	46c0      	nop			@ (mov r8, r8)
 800b1c8:	20000078 	.word	0x20000078

0800b1cc <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b089      	sub	sp, #36	@ 0x24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800b1d6:	4b4e      	ldr	r3, [pc, #312]	@ (800b310 <HIDS_GetMeasurementValues+0x144>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <HIDS_GetMeasurementValues+0x16>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e091      	b.n	800b306 <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 800b1e2:	f7ff ffe5 	bl	800b1b0 <HIDS_MeasurementReady>
 800b1e6:	0003      	movs	r3, r0
 800b1e8:	001a      	movs	r2, r3
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	4053      	eors	r3, r2
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <HIDS_GetMeasurementValues+0x2c>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	e086      	b.n	800b306 <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800b1f8:	4b46      	ldr	r3, [pc, #280]	@ (800b314 <HIDS_GetMeasurementValues+0x148>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	4b46      	ldr	r3, [pc, #280]	@ (800b318 <HIDS_GetMeasurementValues+0x14c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	0019      	movs	r1, r3
 800b202:	0010      	movs	r0, r2
 800b204:	f7f4 ffc4 	bl	8000190 <__udivsi3>
 800b208:	0003      	movs	r3, r0
 800b20a:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800b20c:	2317      	movs	r3, #23
 800b20e:	18fc      	adds	r4, r7, r3
 800b210:	4b42      	ldr	r3, [pc, #264]	@ (800b31c <HIDS_GetMeasurementValues+0x150>)
 800b212:	2206      	movs	r2, #6
 800b214:	0019      	movs	r1, r3
 800b216:	2044      	movs	r0, #68	@ 0x44
 800b218:	f7ff fe36 	bl	800ae88 <ReadRegister>
 800b21c:	0003      	movs	r3, r0
 800b21e:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800b220:	4b3e      	ldr	r3, [pc, #248]	@ (800b31c <HIDS_GetMeasurementValues+0x150>)
 800b222:	0018      	movs	r0, r3
 800b224:	f7ff ff1a 	bl	800b05c <CheckCRC>
 800b228:	0003      	movs	r3, r0
 800b22a:	001a      	movs	r2, r3
 800b22c:	2301      	movs	r3, #1
 800b22e:	4053      	eors	r3, r2
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d011      	beq.n	800b25a <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800b236:	231f      	movs	r3, #31
 800b238:	18fb      	adds	r3, r7, r3
 800b23a:	2200      	movs	r2, #0
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	e005      	b.n	800b24c <HIDS_GetMeasurementValues+0x80>
 800b240:	211f      	movs	r1, #31
 800b242:	187b      	adds	r3, r7, r1
 800b244:	781a      	ldrb	r2, [r3, #0]
 800b246:	187b      	adds	r3, r7, r1
 800b248:	3201      	adds	r2, #1
 800b24a:	701a      	strb	r2, [r3, #0]
 800b24c:	231f      	movs	r3, #31
 800b24e:	18fb      	adds	r3, r7, r3
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2b05      	cmp	r3, #5
 800b254:	d9f4      	bls.n	800b240 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800b256:	2300      	movs	r3, #0
 800b258:	e055      	b.n	800b306 <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800b25a:	4b30      	ldr	r3, [pc, #192]	@ (800b31c <HIDS_GetMeasurementValues+0x150>)
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	021b      	lsls	r3, r3, #8
 800b260:	4a2e      	ldr	r2, [pc, #184]	@ (800b31c <HIDS_GetMeasurementValues+0x150>)
 800b262:	7852      	ldrb	r2, [r2, #1]
 800b264:	4313      	orrs	r3, r2
 800b266:	22af      	movs	r2, #175	@ 0xaf
 800b268:	4353      	muls	r3, r2
 800b26a:	0018      	movs	r0, r3
 800b26c:	f7f8 f89e 	bl	80033ac <__aeabi_i2d>
 800b270:	2200      	movs	r2, #0
 800b272:	4b2b      	ldr	r3, [pc, #172]	@ (800b320 <HIDS_GetMeasurementValues+0x154>)
 800b274:	f7f6 fd94 	bl	8001da0 <__aeabi_ddiv>
 800b278:	0002      	movs	r2, r0
 800b27a:	000b      	movs	r3, r1
 800b27c:	0010      	movs	r0, r2
 800b27e:	0019      	movs	r1, r3
 800b280:	f7f8 f92e 	bl	80034e0 <__aeabi_d2f>
 800b284:	1c03      	adds	r3, r0, #0
 800b286:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800b288:	4926      	ldr	r1, [pc, #152]	@ (800b324 <HIDS_GetMeasurementValues+0x158>)
 800b28a:	6938      	ldr	r0, [r7, #16]
 800b28c:	f7f5 ffbc 	bl	8001208 <__aeabi_fsub>
 800b290:	1c03      	adds	r3, r0, #0
 800b292:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800b294:	4b21      	ldr	r3, [pc, #132]	@ (800b31c <HIDS_GetMeasurementValues+0x150>)
 800b296:	78db      	ldrb	r3, [r3, #3]
 800b298:	021b      	lsls	r3, r3, #8
 800b29a:	4a20      	ldr	r2, [pc, #128]	@ (800b31c <HIDS_GetMeasurementValues+0x150>)
 800b29c:	7912      	ldrb	r2, [r2, #4]
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	0013      	movs	r3, r2
 800b2a2:	015b      	lsls	r3, r3, #5
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	189b      	adds	r3, r3, r2
 800b2aa:	0018      	movs	r0, r3
 800b2ac:	f7f8 f87e 	bl	80033ac <__aeabi_i2d>
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	4b1b      	ldr	r3, [pc, #108]	@ (800b320 <HIDS_GetMeasurementValues+0x154>)
 800b2b4:	f7f6 fd74 	bl	8001da0 <__aeabi_ddiv>
 800b2b8:	0002      	movs	r2, r0
 800b2ba:	000b      	movs	r3, r1
 800b2bc:	0010      	movs	r0, r2
 800b2be:	0019      	movs	r1, r3
 800b2c0:	f7f8 f90e 	bl	80034e0 <__aeabi_d2f>
 800b2c4:	1c03      	adds	r3, r0, #0
 800b2c6:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800b2c8:	4917      	ldr	r1, [pc, #92]	@ (800b328 <HIDS_GetMeasurementValues+0x15c>)
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f7f5 ff9c 	bl	8001208 <__aeabi_fsub>
 800b2d0:	1c03      	adds	r3, r0, #0
 800b2d2:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	0011      	movs	r1, r2
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	f7fd fd20 	bl	8008d2c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	1c11      	adds	r1, r2, #0
 800b2f2:	1c18      	adds	r0, r3, #0
 800b2f4:	f7f8 fac8 	bl	8003888 <ESP_GetHT>

   measurements = 0;
 800b2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b32c <HIDS_GetMeasurementValues+0x160>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800b2fe:	4b04      	ldr	r3, [pc, #16]	@ (800b310 <HIDS_GetMeasurementValues+0x144>)
 800b300:	2201      	movs	r2, #1
 800b302:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800b304:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800b306:	0018      	movs	r0, r3
 800b308:	46bd      	mov	sp, r7
 800b30a:	b009      	add	sp, #36	@ 0x24
 800b30c:	bd90      	pop	{r4, r7, pc}
 800b30e:	46c0      	nop			@ (mov r8, r8)
 800b310:	20002442 	.word	0x20002442
 800b314:	20000080 	.word	0x20000080
 800b318:	2000007c 	.word	0x2000007c
 800b31c:	2000243c 	.word	0x2000243c
 800b320:	40efffe0 	.word	0x40efffe0
 800b324:	42340000 	.word	0x42340000
 800b328:	40c00000 	.word	0x40c00000
 800b32c:	20002444 	.word	0x20002444

0800b330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800b330:	480d      	ldr	r0, [pc, #52]	@ (800b368 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800b332:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800b334:	f7ff f8f2 	bl	800a51c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b338:	480c      	ldr	r0, [pc, #48]	@ (800b36c <LoopForever+0x6>)
  ldr r1, =_edata
 800b33a:	490d      	ldr	r1, [pc, #52]	@ (800b370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b33c:	4a0d      	ldr	r2, [pc, #52]	@ (800b374 <LoopForever+0xe>)
  movs r3, #0
 800b33e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b340:	e002      	b.n	800b348 <LoopCopyDataInit>

0800b342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b346:	3304      	adds	r3, #4

0800b348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b34a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b34c:	d3f9      	bcc.n	800b342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b34e:	4a0a      	ldr	r2, [pc, #40]	@ (800b378 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b350:	4c0a      	ldr	r4, [pc, #40]	@ (800b37c <LoopForever+0x16>)
  movs r3, #0
 800b352:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b354:	e001      	b.n	800b35a <LoopFillZerobss>

0800b356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b358:	3204      	adds	r2, #4

0800b35a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b35a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b35c:	d3fb      	bcc.n	800b356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b35e:	f00f ff6b 	bl	801b238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b362:	f7fb fa51 	bl	8006808 <main>

0800b366 <LoopForever>:

LoopForever:
    b LoopForever
 800b366:	e7fe      	b.n	800b366 <LoopForever>
   ldr   r0, =_estack
 800b368:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800b36c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b370:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 800b374:	0801fbc8 	.word	0x0801fbc8
  ldr r2, =_sbss
 800b378:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 800b37c:	2000384c 	.word	0x2000384c

0800b380 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b380:	e7fe      	b.n	800b380 <ADC1_COMP_IRQHandler>
	...

0800b384 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b38a:	1dfb      	adds	r3, r7, #7
 800b38c:	2200      	movs	r2, #0
 800b38e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800b390:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c0 <HAL_Init+0x3c>)
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c0 <HAL_Init+0x3c>)
 800b396:	2140      	movs	r1, #64	@ 0x40
 800b398:	430a      	orrs	r2, r1
 800b39a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b39c:	2003      	movs	r0, #3
 800b39e:	f000 f811 	bl	800b3c4 <HAL_InitTick>
 800b3a2:	1e03      	subs	r3, r0, #0
 800b3a4:	d003      	beq.n	800b3ae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800b3a6:	1dfb      	adds	r3, r7, #7
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e001      	b.n	800b3b2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b3ae:	f7fe ff8b 	bl	800a2c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b3b2:	1dfb      	adds	r3, r7, #7
 800b3b4:	781b      	ldrb	r3, [r3, #0]
}
 800b3b6:	0018      	movs	r0, r3
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	b002      	add	sp, #8
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	46c0      	nop			@ (mov r8, r8)
 800b3c0:	40022000 	.word	0x40022000

0800b3c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b3c4:	b590      	push	{r4, r7, lr}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b3cc:	4b14      	ldr	r3, [pc, #80]	@ (800b420 <HAL_InitTick+0x5c>)
 800b3ce:	681c      	ldr	r4, [r3, #0]
 800b3d0:	4b14      	ldr	r3, [pc, #80]	@ (800b424 <HAL_InitTick+0x60>)
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	0019      	movs	r1, r3
 800b3d6:	23fa      	movs	r3, #250	@ 0xfa
 800b3d8:	0098      	lsls	r0, r3, #2
 800b3da:	f7f4 fed9 	bl	8000190 <__udivsi3>
 800b3de:	0003      	movs	r3, r0
 800b3e0:	0019      	movs	r1, r3
 800b3e2:	0020      	movs	r0, r4
 800b3e4:	f7f4 fed4 	bl	8000190 <__udivsi3>
 800b3e8:	0003      	movs	r3, r0
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f000 fccb 	bl	800bd86 <HAL_SYSTICK_Config>
 800b3f0:	1e03      	subs	r3, r0, #0
 800b3f2:	d001      	beq.n	800b3f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e00f      	b.n	800b418 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	d80b      	bhi.n	800b416 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	2301      	movs	r3, #1
 800b402:	425b      	negs	r3, r3
 800b404:	2200      	movs	r2, #0
 800b406:	0018      	movs	r0, r3
 800b408:	f000 fc98 	bl	800bd3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b40c:	4b06      	ldr	r3, [pc, #24]	@ (800b428 <HAL_InitTick+0x64>)
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	e000      	b.n	800b418 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
}
 800b418:	0018      	movs	r0, r3
 800b41a:	46bd      	mov	sp, r7
 800b41c:	b003      	add	sp, #12
 800b41e:	bd90      	pop	{r4, r7, pc}
 800b420:	20000070 	.word	0x20000070
 800b424:	20000088 	.word	0x20000088
 800b428:	20000084 	.word	0x20000084

0800b42c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b430:	4b05      	ldr	r3, [pc, #20]	@ (800b448 <HAL_IncTick+0x1c>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	001a      	movs	r2, r3
 800b436:	4b05      	ldr	r3, [pc, #20]	@ (800b44c <HAL_IncTick+0x20>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	18d2      	adds	r2, r2, r3
 800b43c:	4b03      	ldr	r3, [pc, #12]	@ (800b44c <HAL_IncTick+0x20>)
 800b43e:	601a      	str	r2, [r3, #0]
}
 800b440:	46c0      	nop			@ (mov r8, r8)
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	46c0      	nop			@ (mov r8, r8)
 800b448:	20000088 	.word	0x20000088
 800b44c:	20002448 	.word	0x20002448

0800b450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  return uwTick;
 800b454:	4b02      	ldr	r3, [pc, #8]	@ (800b460 <HAL_GetTick+0x10>)
 800b456:	681b      	ldr	r3, [r3, #0]
}
 800b458:	0018      	movs	r0, r3
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	46c0      	nop			@ (mov r8, r8)
 800b460:	20002448 	.word	0x20002448

0800b464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b46c:	f7ff fff0 	bl	800b450 <HAL_GetTick>
 800b470:	0003      	movs	r3, r0
 800b472:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3301      	adds	r3, #1
 800b47c:	d005      	beq.n	800b48a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b47e:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a8 <HAL_Delay+0x44>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	001a      	movs	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	189b      	adds	r3, r3, r2
 800b488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b48a:	46c0      	nop			@ (mov r8, r8)
 800b48c:	f7ff ffe0 	bl	800b450 <HAL_GetTick>
 800b490:	0002      	movs	r2, r0
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d8f7      	bhi.n	800b48c <HAL_Delay+0x28>
  {
  }
}
 800b49c:	46c0      	nop			@ (mov r8, r8)
 800b49e:	46c0      	nop			@ (mov r8, r8)
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	b004      	add	sp, #16
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	46c0      	nop			@ (mov r8, r8)
 800b4a8:	20000088 	.word	0x20000088

0800b4ac <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800b4b0:	4b02      	ldr	r3, [pc, #8]	@ (800b4bc <HAL_GetUIDw0+0x10>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
}
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	46c0      	nop			@ (mov r8, r8)
 800b4bc:	1ff80050 	.word	0x1ff80050

0800b4c0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800b4c4:	4b02      	ldr	r3, [pc, #8]	@ (800b4d0 <HAL_GetUIDw1+0x10>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
}
 800b4c8:	0018      	movs	r0, r3
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	46c0      	nop			@ (mov r8, r8)
 800b4d0:	1ff80054 	.word	0x1ff80054

0800b4d4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800b4d8:	4b02      	ldr	r3, [pc, #8]	@ (800b4e4 <HAL_GetUIDw2+0x10>)
 800b4da:	681b      	ldr	r3, [r3, #0]
}
 800b4dc:	0018      	movs	r0, r3
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	46c0      	nop			@ (mov r8, r8)
 800b4e4:	1ff80064 	.word	0x1ff80064

0800b4e8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e159      	b.n	800b7ae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10a      	bne.n	800b518 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2250      	movs	r2, #80	@ 0x50
 800b50c:	2100      	movs	r1, #0
 800b50e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	0018      	movs	r0, r3
 800b514:	f7fa fbba 	bl	8005c8c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b51c:	2210      	movs	r2, #16
 800b51e:	4013      	ands	r3, r2
 800b520:	2b10      	cmp	r3, #16
 800b522:	d005      	beq.n	800b530 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	2204      	movs	r2, #4
 800b52c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800b52e:	d00b      	beq.n	800b548 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b534:	2210      	movs	r2, #16
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2250      	movs	r2, #80	@ 0x50
 800b540:	2100      	movs	r1, #0
 800b542:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e132      	b.n	800b7ae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b54c:	4a9a      	ldr	r2, [pc, #616]	@ (800b7b8 <HAL_ADC_Init+0x2d0>)
 800b54e:	4013      	ands	r3, r2
 800b550:	2202      	movs	r2, #2
 800b552:	431a      	orrs	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	2203      	movs	r2, #3
 800b560:	4013      	ands	r3, r2
 800b562:	2b01      	cmp	r3, #1
 800b564:	d108      	bne.n	800b578 <HAL_ADC_Init+0x90>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2201      	movs	r2, #1
 800b56e:	4013      	ands	r3, r2
 800b570:	2b01      	cmp	r3, #1
 800b572:	d101      	bne.n	800b578 <HAL_ADC_Init+0x90>
 800b574:	2301      	movs	r3, #1
 800b576:	e000      	b.n	800b57a <HAL_ADC_Init+0x92>
 800b578:	2300      	movs	r3, #0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d149      	bne.n	800b612 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	23c0      	movs	r3, #192	@ 0xc0
 800b584:	061b      	lsls	r3, r3, #24
 800b586:	429a      	cmp	r2, r3
 800b588:	d00b      	beq.n	800b5a2 <HAL_ADC_Init+0xba>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	2380      	movs	r3, #128	@ 0x80
 800b590:	05db      	lsls	r3, r3, #23
 800b592:	429a      	cmp	r2, r3
 800b594:	d005      	beq.n	800b5a2 <HAL_ADC_Init+0xba>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	2380      	movs	r3, #128	@ 0x80
 800b59c:	061b      	lsls	r3, r3, #24
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d111      	bne.n	800b5c6 <HAL_ADC_Init+0xde>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	691a      	ldr	r2, [r3, #16]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	0092      	lsls	r2, r2, #2
 800b5ae:	0892      	lsrs	r2, r2, #2
 800b5b0:	611a      	str	r2, [r3, #16]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6919      	ldr	r1, [r3, #16]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	611a      	str	r2, [r3, #16]
 800b5c4:	e014      	b.n	800b5f0 <HAL_ADC_Init+0x108>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	691a      	ldr	r2, [r3, #16]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	0092      	lsls	r2, r2, #2
 800b5d2:	0892      	lsrs	r2, r2, #2
 800b5d4:	611a      	str	r2, [r3, #16]
 800b5d6:	4b79      	ldr	r3, [pc, #484]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b78      	ldr	r3, [pc, #480]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b5dc:	4978      	ldr	r1, [pc, #480]	@ (800b7c0 <HAL_ADC_Init+0x2d8>)
 800b5de:	400a      	ands	r2, r1
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	4b76      	ldr	r3, [pc, #472]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b5e4:	6819      	ldr	r1, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	4b74      	ldr	r3, [pc, #464]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2118      	movs	r1, #24
 800b5fc:	438a      	bics	r2, r1
 800b5fe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68d9      	ldr	r1, [r3, #12]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	430a      	orrs	r2, r1
 800b610:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800b612:	4b6a      	ldr	r3, [pc, #424]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	4b69      	ldr	r3, [pc, #420]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b618:	496a      	ldr	r1, [pc, #424]	@ (800b7c4 <HAL_ADC_Init+0x2dc>)
 800b61a:	400a      	ands	r2, r1
 800b61c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800b61e:	4b67      	ldr	r3, [pc, #412]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b620:	6819      	ldr	r1, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b626:	065a      	lsls	r2, r3, #25
 800b628:	4b64      	ldr	r3, [pc, #400]	@ (800b7bc <HAL_ADC_Init+0x2d4>)
 800b62a:	430a      	orrs	r2, r1
 800b62c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	2380      	movs	r3, #128	@ 0x80
 800b636:	055b      	lsls	r3, r3, #21
 800b638:	4013      	ands	r3, r2
 800b63a:	d108      	bne.n	800b64e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2180      	movs	r1, #128	@ 0x80
 800b648:	0549      	lsls	r1, r1, #21
 800b64a:	430a      	orrs	r2, r1
 800b64c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	495b      	ldr	r1, [pc, #364]	@ (800b7c8 <HAL_ADC_Init+0x2e0>)
 800b65a:	400a      	ands	r2, r1
 800b65c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68d9      	ldr	r1, [r3, #12]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d101      	bne.n	800b674 <HAL_ADC_Init+0x18c>
 800b670:	2304      	movs	r3, #4
 800b672:	e000      	b.n	800b676 <HAL_ADC_Init+0x18e>
 800b674:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b676:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2020      	movs	r0, #32
 800b67c:	5c1b      	ldrb	r3, [r3, r0]
 800b67e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800b680:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	202c      	movs	r0, #44	@ 0x2c
 800b686:	5c1b      	ldrb	r3, [r3, r0]
 800b688:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800b68a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800b690:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800b698:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800b6a0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6ae:	23c2      	movs	r3, #194	@ 0xc2
 800b6b0:	33ff      	adds	r3, #255	@ 0xff
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d00b      	beq.n	800b6ce <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68d9      	ldr	r1, [r3, #12]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800b6c4:	431a      	orrs	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2221      	movs	r2, #33	@ 0x21
 800b6d2:	5c9b      	ldrb	r3, [r3, r2]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d11a      	bne.n	800b70e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	5c9b      	ldrb	r3, [r3, r2]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d109      	bne.n	800b6f6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68da      	ldr	r2, [r3, #12]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2180      	movs	r1, #128	@ 0x80
 800b6ee:	0249      	lsls	r1, r1, #9
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	60da      	str	r2, [r3, #12]
 800b6f4:	e00b      	b.n	800b70e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b706:	2201      	movs	r2, #1
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b712:	2b01      	cmp	r3, #1
 800b714:	d11f      	bne.n	800b756 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	691a      	ldr	r2, [r3, #16]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	492a      	ldr	r1, [pc, #168]	@ (800b7cc <HAL_ADC_Init+0x2e4>)
 800b722:	400a      	ands	r2, r1
 800b724:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6919      	ldr	r1, [r3, #16]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800b734:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800b73a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	430a      	orrs	r2, r1
 800b742:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	691a      	ldr	r2, [r3, #16]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2101      	movs	r1, #1
 800b750:	430a      	orrs	r2, r1
 800b752:	611a      	str	r2, [r3, #16]
 800b754:	e00e      	b.n	800b774 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	2201      	movs	r2, #1
 800b75e:	4013      	ands	r3, r2
 800b760:	2b01      	cmp	r3, #1
 800b762:	d107      	bne.n	800b774 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	691a      	ldr	r2, [r3, #16]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2101      	movs	r1, #1
 800b770:	438a      	bics	r2, r1
 800b772:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	695a      	ldr	r2, [r3, #20]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2107      	movs	r1, #7
 800b780:	438a      	bics	r2, r1
 800b782:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6959      	ldr	r1, [r3, #20]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	430a      	orrs	r2, r1
 800b794:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7a0:	2203      	movs	r2, #3
 800b7a2:	4393      	bics	r3, r2
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	0018      	movs	r0, r3
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b002      	add	sp, #8
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	fffffefd 	.word	0xfffffefd
 800b7bc:	40012708 	.word	0x40012708
 800b7c0:	ffc3ffff 	.word	0xffc3ffff
 800b7c4:	fdffffff 	.word	0xfdffffff
 800b7c8:	fffe0219 	.word	0xfffe0219
 800b7cc:	fffffc03 	.word	0xfffffc03

0800b7d0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b7d8:	230f      	movs	r3, #15
 800b7da:	18fb      	adds	r3, r7, r3
 800b7dc:	2200      	movs	r2, #0
 800b7de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	2204      	movs	r2, #4
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	d138      	bne.n	800b85e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2250      	movs	r2, #80	@ 0x50
 800b7f0:	5c9b      	ldrb	r3, [r3, r2]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d101      	bne.n	800b7fa <HAL_ADC_Start+0x2a>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e038      	b.n	800b86c <HAL_ADC_Start+0x9c>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2250      	movs	r2, #80	@ 0x50
 800b7fe:	2101      	movs	r1, #1
 800b800:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d007      	beq.n	800b81a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800b80a:	230f      	movs	r3, #15
 800b80c:	18fc      	adds	r4, r7, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	0018      	movs	r0, r3
 800b812:	f000 f95f 	bl	800bad4 <ADC_Enable>
 800b816:	0003      	movs	r3, r0
 800b818:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800b81a:	230f      	movs	r3, #15
 800b81c:	18fb      	adds	r3, r7, r3
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d120      	bne.n	800b866 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b828:	4a12      	ldr	r2, [pc, #72]	@ (800b874 <HAL_ADC_Start+0xa4>)
 800b82a:	4013      	ands	r3, r2
 800b82c:	2280      	movs	r2, #128	@ 0x80
 800b82e:	0052      	lsls	r2, r2, #1
 800b830:	431a      	orrs	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2250      	movs	r2, #80	@ 0x50
 800b840:	2100      	movs	r1, #0
 800b842:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	221c      	movs	r2, #28
 800b84a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	689a      	ldr	r2, [r3, #8]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2104      	movs	r1, #4
 800b858:	430a      	orrs	r2, r1
 800b85a:	609a      	str	r2, [r3, #8]
 800b85c:	e003      	b.n	800b866 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b85e:	230f      	movs	r3, #15
 800b860:	18fb      	adds	r3, r7, r3
 800b862:	2202      	movs	r2, #2
 800b864:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800b866:	230f      	movs	r3, #15
 800b868:	18fb      	adds	r3, r7, r3
 800b86a:	781b      	ldrb	r3, [r3, #0]
}
 800b86c:	0018      	movs	r0, r3
 800b86e:	46bd      	mov	sp, r7
 800b870:	b005      	add	sp, #20
 800b872:	bd90      	pop	{r4, r7, pc}
 800b874:	fffff0fe 	.word	0xfffff0fe

0800b878 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800b886:	2300      	movs	r3, #0
 800b888:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	2b08      	cmp	r3, #8
 800b890:	d102      	bne.n	800b898 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800b892:	2308      	movs	r3, #8
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	e014      	b.n	800b8c2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d10b      	bne.n	800b8be <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8aa:	2220      	movs	r2, #32
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2250      	movs	r2, #80	@ 0x50
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e072      	b.n	800b9a4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800b8be:	230c      	movs	r3, #12
 800b8c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800b8c2:	f7ff fdc5 	bl	800b450 <HAL_GetTick>
 800b8c6:	0003      	movs	r3, r0
 800b8c8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800b8ca:	e01f      	b.n	800b90c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	d01c      	beq.n	800b90c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <HAL_ADC_PollForConversion+0x70>
 800b8d8:	f7ff fdba 	bl	800b450 <HAL_GetTick>
 800b8dc:	0002      	movs	r2, r0
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d211      	bcs.n	800b90c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	d10b      	bne.n	800b90c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f8:	2204      	movs	r2, #4
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2250      	movs	r2, #80	@ 0x50
 800b904:	2100      	movs	r1, #0
 800b906:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b908:	2303      	movs	r3, #3
 800b90a:	e04b      	b.n	800b9a4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	4013      	ands	r3, r2
 800b916:	d0d9      	beq.n	800b8cc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b91c:	2280      	movs	r2, #128	@ 0x80
 800b91e:	0092      	lsls	r2, r2, #2
 800b920:	431a      	orrs	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68da      	ldr	r2, [r3, #12]
 800b92c:	23c0      	movs	r3, #192	@ 0xc0
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	4013      	ands	r3, r2
 800b932:	d12e      	bne.n	800b992 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2220      	movs	r2, #32
 800b938:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d129      	bne.n	800b992 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2208      	movs	r2, #8
 800b946:	4013      	ands	r3, r2
 800b948:	2b08      	cmp	r3, #8
 800b94a:	d122      	bne.n	800b992 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	2204      	movs	r2, #4
 800b954:	4013      	ands	r3, r2
 800b956:	d110      	bne.n	800b97a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	210c      	movs	r1, #12
 800b964:	438a      	bics	r2, r1
 800b966:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b96c:	4a0f      	ldr	r2, [pc, #60]	@ (800b9ac <HAL_ADC_PollForConversion+0x134>)
 800b96e:	4013      	ands	r3, r2
 800b970:	2201      	movs	r2, #1
 800b972:	431a      	orrs	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	655a      	str	r2, [r3, #84]	@ 0x54
 800b978:	e00b      	b.n	800b992 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b97e:	2220      	movs	r2, #32
 800b980:	431a      	orrs	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b98a:	2201      	movs	r2, #1
 800b98c:	431a      	orrs	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d103      	bne.n	800b9a2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	220c      	movs	r2, #12
 800b9a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b004      	add	sp, #16
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	fffffefe 	.word	0xfffffefe

0800b9b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b9be:	0018      	movs	r0, r3
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	b002      	add	sp, #8
 800b9c4:	bd80      	pop	{r7, pc}
	...

0800b9c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2250      	movs	r2, #80	@ 0x50
 800b9d6:	5c9b      	ldrb	r3, [r3, r2]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d101      	bne.n	800b9e0 <HAL_ADC_ConfigChannel+0x18>
 800b9dc:	2302      	movs	r3, #2
 800b9de:	e06c      	b.n	800baba <HAL_ADC_ConfigChannel+0xf2>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2250      	movs	r2, #80	@ 0x50
 800b9e4:	2101      	movs	r1, #1
 800b9e6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	2204      	movs	r2, #4
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	d00b      	beq.n	800ba0c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2250      	movs	r2, #80	@ 0x50
 800ba04:	2100      	movs	r1, #0
 800ba06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e056      	b.n	800baba <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	4a2c      	ldr	r2, [pc, #176]	@ (800bac4 <HAL_ADC_ConfigChannel+0xfc>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d028      	beq.n	800ba68 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	035b      	lsls	r3, r3, #13
 800ba22:	0b5a      	lsrs	r2, r3, #13
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	2380      	movs	r3, #128	@ 0x80
 800ba32:	02db      	lsls	r3, r3, #11
 800ba34:	4013      	ands	r3, r2
 800ba36:	d009      	beq.n	800ba4c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800ba38:	4b23      	ldr	r3, [pc, #140]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	4b22      	ldr	r3, [pc, #136]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800ba3e:	2180      	movs	r1, #128	@ 0x80
 800ba40:	0409      	lsls	r1, r1, #16
 800ba42:	430a      	orrs	r2, r1
 800ba44:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800ba46:	200a      	movs	r0, #10
 800ba48:	f000 f8ac 	bl	800bba4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	2380      	movs	r3, #128	@ 0x80
 800ba52:	029b      	lsls	r3, r3, #10
 800ba54:	4013      	ands	r3, r2
 800ba56:	d02b      	beq.n	800bab0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800ba58:	4b1b      	ldr	r3, [pc, #108]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	4b1a      	ldr	r3, [pc, #104]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800ba5e:	2180      	movs	r1, #128	@ 0x80
 800ba60:	03c9      	lsls	r1, r1, #15
 800ba62:	430a      	orrs	r2, r1
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	e023      	b.n	800bab0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	035b      	lsls	r3, r3, #13
 800ba74:	0b5b      	lsrs	r3, r3, #13
 800ba76:	43d9      	mvns	r1, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	400a      	ands	r2, r1
 800ba7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	2380      	movs	r3, #128	@ 0x80
 800ba86:	02db      	lsls	r3, r3, #11
 800ba88:	4013      	ands	r3, r2
 800ba8a:	d005      	beq.n	800ba98 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800ba8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	4b0d      	ldr	r3, [pc, #52]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800ba92:	490e      	ldr	r1, [pc, #56]	@ (800bacc <HAL_ADC_ConfigChannel+0x104>)
 800ba94:	400a      	ands	r2, r1
 800ba96:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	2380      	movs	r3, #128	@ 0x80
 800ba9e:	029b      	lsls	r3, r3, #10
 800baa0:	4013      	ands	r3, r2
 800baa2:	d005      	beq.n	800bab0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800baa4:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	4b07      	ldr	r3, [pc, #28]	@ (800bac8 <HAL_ADC_ConfigChannel+0x100>)
 800baaa:	4909      	ldr	r1, [pc, #36]	@ (800bad0 <HAL_ADC_ConfigChannel+0x108>)
 800baac:	400a      	ands	r2, r1
 800baae:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2250      	movs	r2, #80	@ 0x50
 800bab4:	2100      	movs	r1, #0
 800bab6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	0018      	movs	r0, r3
 800babc:	46bd      	mov	sp, r7
 800babe:	b002      	add	sp, #8
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	00001001 	.word	0x00001001
 800bac8:	40012708 	.word	0x40012708
 800bacc:	ff7fffff 	.word	0xff7fffff
 800bad0:	ffbfffff 	.word	0xffbfffff

0800bad4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	2203      	movs	r2, #3
 800bae8:	4013      	ands	r3, r2
 800baea:	2b01      	cmp	r3, #1
 800baec:	d108      	bne.n	800bb00 <ADC_Enable+0x2c>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2201      	movs	r2, #1
 800baf6:	4013      	ands	r3, r2
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <ADC_Enable+0x2c>
 800bafc:	2301      	movs	r3, #1
 800bafe:	e000      	b.n	800bb02 <ADC_Enable+0x2e>
 800bb00:	2300      	movs	r3, #0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d146      	bne.n	800bb94 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	4a24      	ldr	r2, [pc, #144]	@ (800bba0 <ADC_Enable+0xcc>)
 800bb0e:	4013      	ands	r3, r2
 800bb10:	d00d      	beq.n	800bb2e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb16:	2210      	movs	r2, #16
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb22:	2201      	movs	r2, #1
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e033      	b.n	800bb96 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2101      	movs	r1, #1
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800bb3e:	2001      	movs	r0, #1
 800bb40:	f000 f830 	bl	800bba4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800bb44:	f7ff fc84 	bl	800b450 <HAL_GetTick>
 800bb48:	0003      	movs	r3, r0
 800bb4a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800bb4c:	e01b      	b.n	800bb86 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bb4e:	f7ff fc7f 	bl	800b450 <HAL_GetTick>
 800bb52:	0002      	movs	r2, r0
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	2b0a      	cmp	r3, #10
 800bb5a:	d914      	bls.n	800bb86 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2201      	movs	r2, #1
 800bb64:	4013      	ands	r3, r2
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d00d      	beq.n	800bb86 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb6e:	2210      	movs	r2, #16
 800bb70:	431a      	orrs	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e007      	b.n	800bb96 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	4013      	ands	r3, r2
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d1dc      	bne.n	800bb4e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	0018      	movs	r0, r3
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	b004      	add	sp, #16
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	46c0      	nop			@ (mov r8, r8)
 800bba0:	80000017 	.word	0x80000017

0800bba4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800bbac:	4b0b      	ldr	r3, [pc, #44]	@ (800bbdc <ADC_DelayMicroSecond+0x38>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	490b      	ldr	r1, [pc, #44]	@ (800bbe0 <ADC_DelayMicroSecond+0x3c>)
 800bbb2:	0018      	movs	r0, r3
 800bbb4:	f7f4 faec 	bl	8000190 <__udivsi3>
 800bbb8:	0003      	movs	r3, r0
 800bbba:	001a      	movs	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4353      	muls	r3, r2
 800bbc0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800bbc2:	e002      	b.n	800bbca <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1f9      	bne.n	800bbc4 <ADC_DelayMicroSecond+0x20>
  }
}
 800bbd0:	46c0      	nop			@ (mov r8, r8)
 800bbd2:	46c0      	nop			@ (mov r8, r8)
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	b004      	add	sp, #16
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	46c0      	nop			@ (mov r8, r8)
 800bbdc:	20000070 	.word	0x20000070
 800bbe0:	000f4240 	.word	0x000f4240

0800bbe4 <__NVIC_EnableIRQ>:
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	0002      	movs	r2, r0
 800bbec:	1dfb      	adds	r3, r7, #7
 800bbee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bbf0:	1dfb      	adds	r3, r7, #7
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbf6:	d809      	bhi.n	800bc0c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bbf8:	1dfb      	adds	r3, r7, #7
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	001a      	movs	r2, r3
 800bbfe:	231f      	movs	r3, #31
 800bc00:	401a      	ands	r2, r3
 800bc02:	4b04      	ldr	r3, [pc, #16]	@ (800bc14 <__NVIC_EnableIRQ+0x30>)
 800bc04:	2101      	movs	r1, #1
 800bc06:	4091      	lsls	r1, r2
 800bc08:	000a      	movs	r2, r1
 800bc0a:	601a      	str	r2, [r3, #0]
}
 800bc0c:	46c0      	nop			@ (mov r8, r8)
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	b002      	add	sp, #8
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	e000e100 	.word	0xe000e100

0800bc18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	0002      	movs	r2, r0
 800bc20:	6039      	str	r1, [r7, #0]
 800bc22:	1dfb      	adds	r3, r7, #7
 800bc24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bc26:	1dfb      	adds	r3, r7, #7
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc2c:	d828      	bhi.n	800bc80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bc2e:	4a2f      	ldr	r2, [pc, #188]	@ (800bcec <__NVIC_SetPriority+0xd4>)
 800bc30:	1dfb      	adds	r3, r7, #7
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	b25b      	sxtb	r3, r3
 800bc36:	089b      	lsrs	r3, r3, #2
 800bc38:	33c0      	adds	r3, #192	@ 0xc0
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	589b      	ldr	r3, [r3, r2]
 800bc3e:	1dfa      	adds	r2, r7, #7
 800bc40:	7812      	ldrb	r2, [r2, #0]
 800bc42:	0011      	movs	r1, r2
 800bc44:	2203      	movs	r2, #3
 800bc46:	400a      	ands	r2, r1
 800bc48:	00d2      	lsls	r2, r2, #3
 800bc4a:	21ff      	movs	r1, #255	@ 0xff
 800bc4c:	4091      	lsls	r1, r2
 800bc4e:	000a      	movs	r2, r1
 800bc50:	43d2      	mvns	r2, r2
 800bc52:	401a      	ands	r2, r3
 800bc54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	019b      	lsls	r3, r3, #6
 800bc5a:	22ff      	movs	r2, #255	@ 0xff
 800bc5c:	401a      	ands	r2, r3
 800bc5e:	1dfb      	adds	r3, r7, #7
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	0018      	movs	r0, r3
 800bc64:	2303      	movs	r3, #3
 800bc66:	4003      	ands	r3, r0
 800bc68:	00db      	lsls	r3, r3, #3
 800bc6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bc6c:	481f      	ldr	r0, [pc, #124]	@ (800bcec <__NVIC_SetPriority+0xd4>)
 800bc6e:	1dfb      	adds	r3, r7, #7
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b25b      	sxtb	r3, r3
 800bc74:	089b      	lsrs	r3, r3, #2
 800bc76:	430a      	orrs	r2, r1
 800bc78:	33c0      	adds	r3, #192	@ 0xc0
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800bc7e:	e031      	b.n	800bce4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bc80:	4a1b      	ldr	r2, [pc, #108]	@ (800bcf0 <__NVIC_SetPriority+0xd8>)
 800bc82:	1dfb      	adds	r3, r7, #7
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	0019      	movs	r1, r3
 800bc88:	230f      	movs	r3, #15
 800bc8a:	400b      	ands	r3, r1
 800bc8c:	3b08      	subs	r3, #8
 800bc8e:	089b      	lsrs	r3, r3, #2
 800bc90:	3306      	adds	r3, #6
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	18d3      	adds	r3, r2, r3
 800bc96:	3304      	adds	r3, #4
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	1dfa      	adds	r2, r7, #7
 800bc9c:	7812      	ldrb	r2, [r2, #0]
 800bc9e:	0011      	movs	r1, r2
 800bca0:	2203      	movs	r2, #3
 800bca2:	400a      	ands	r2, r1
 800bca4:	00d2      	lsls	r2, r2, #3
 800bca6:	21ff      	movs	r1, #255	@ 0xff
 800bca8:	4091      	lsls	r1, r2
 800bcaa:	000a      	movs	r2, r1
 800bcac:	43d2      	mvns	r2, r2
 800bcae:	401a      	ands	r2, r3
 800bcb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	019b      	lsls	r3, r3, #6
 800bcb6:	22ff      	movs	r2, #255	@ 0xff
 800bcb8:	401a      	ands	r2, r3
 800bcba:	1dfb      	adds	r3, r7, #7
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	0018      	movs	r0, r3
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	4003      	ands	r3, r0
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bcc8:	4809      	ldr	r0, [pc, #36]	@ (800bcf0 <__NVIC_SetPriority+0xd8>)
 800bcca:	1dfb      	adds	r3, r7, #7
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	001c      	movs	r4, r3
 800bcd0:	230f      	movs	r3, #15
 800bcd2:	4023      	ands	r3, r4
 800bcd4:	3b08      	subs	r3, #8
 800bcd6:	089b      	lsrs	r3, r3, #2
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	3306      	adds	r3, #6
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	18c3      	adds	r3, r0, r3
 800bce0:	3304      	adds	r3, #4
 800bce2:	601a      	str	r2, [r3, #0]
}
 800bce4:	46c0      	nop			@ (mov r8, r8)
 800bce6:	46bd      	mov	sp, r7
 800bce8:	b003      	add	sp, #12
 800bcea:	bd90      	pop	{r4, r7, pc}
 800bcec:	e000e100 	.word	0xe000e100
 800bcf0:	e000ed00 	.word	0xe000ed00

0800bcf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	1e5a      	subs	r2, r3, #1
 800bd00:	2380      	movs	r3, #128	@ 0x80
 800bd02:	045b      	lsls	r3, r3, #17
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d301      	bcc.n	800bd0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e010      	b.n	800bd2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bd0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd38 <SysTick_Config+0x44>)
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	3a01      	subs	r2, #1
 800bd12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bd14:	2301      	movs	r3, #1
 800bd16:	425b      	negs	r3, r3
 800bd18:	2103      	movs	r1, #3
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f7ff ff7c 	bl	800bc18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bd20:	4b05      	ldr	r3, [pc, #20]	@ (800bd38 <SysTick_Config+0x44>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bd26:	4b04      	ldr	r3, [pc, #16]	@ (800bd38 <SysTick_Config+0x44>)
 800bd28:	2207      	movs	r2, #7
 800bd2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	0018      	movs	r0, r3
 800bd30:	46bd      	mov	sp, r7
 800bd32:	b002      	add	sp, #8
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	46c0      	nop			@ (mov r8, r8)
 800bd38:	e000e010 	.word	0xe000e010

0800bd3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	607a      	str	r2, [r7, #4]
 800bd46:	210f      	movs	r1, #15
 800bd48:	187b      	adds	r3, r7, r1
 800bd4a:	1c02      	adds	r2, r0, #0
 800bd4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	187b      	adds	r3, r7, r1
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b25b      	sxtb	r3, r3
 800bd56:	0011      	movs	r1, r2
 800bd58:	0018      	movs	r0, r3
 800bd5a:	f7ff ff5d 	bl	800bc18 <__NVIC_SetPriority>
}
 800bd5e:	46c0      	nop			@ (mov r8, r8)
 800bd60:	46bd      	mov	sp, r7
 800bd62:	b004      	add	sp, #16
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b082      	sub	sp, #8
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	0002      	movs	r2, r0
 800bd6e:	1dfb      	adds	r3, r7, #7
 800bd70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bd72:	1dfb      	adds	r3, r7, #7
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	b25b      	sxtb	r3, r3
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f7ff ff33 	bl	800bbe4 <__NVIC_EnableIRQ>
}
 800bd7e:	46c0      	nop			@ (mov r8, r8)
 800bd80:	46bd      	mov	sp, r7
 800bd82:	b002      	add	sp, #8
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	0018      	movs	r0, r3
 800bd92:	f7ff ffaf 	bl	800bcf4 <SysTick_Config>
 800bd96:	0003      	movs	r3, r0
}
 800bd98:	0018      	movs	r0, r3
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	b002      	add	sp, #8
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e061      	b.n	800be76 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a32      	ldr	r2, [pc, #200]	@ (800be80 <HAL_DMA_Init+0xe0>)
 800bdb8:	4694      	mov	ip, r2
 800bdba:	4463      	add	r3, ip
 800bdbc:	2114      	movs	r1, #20
 800bdbe:	0018      	movs	r0, r3
 800bdc0:	f7f4 f9e6 	bl	8000190 <__udivsi3>
 800bdc4:	0003      	movs	r3, r0
 800bdc6:	009a      	lsls	r2, r3, #2
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a2d      	ldr	r2, [pc, #180]	@ (800be84 <HAL_DMA_Init+0xe4>)
 800bdd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2225      	movs	r2, #37	@ 0x25
 800bdd6:	2102      	movs	r1, #2
 800bdd8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4a28      	ldr	r2, [pc, #160]	@ (800be88 <HAL_DMA_Init+0xe8>)
 800bde6:	4013      	ands	r3, r2
 800bde8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bdf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	4313      	orrs	r3, r2
 800be16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	689a      	ldr	r2, [r3, #8]
 800be24:	2380      	movs	r3, #128	@ 0x80
 800be26:	01db      	lsls	r3, r3, #7
 800be28:	429a      	cmp	r2, r3
 800be2a:	d018      	beq.n	800be5e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800be2c:	4b17      	ldr	r3, [pc, #92]	@ (800be8c <HAL_DMA_Init+0xec>)
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be34:	211c      	movs	r1, #28
 800be36:	400b      	ands	r3, r1
 800be38:	210f      	movs	r1, #15
 800be3a:	4099      	lsls	r1, r3
 800be3c:	000b      	movs	r3, r1
 800be3e:	43d9      	mvns	r1, r3
 800be40:	4b12      	ldr	r3, [pc, #72]	@ (800be8c <HAL_DMA_Init+0xec>)
 800be42:	400a      	ands	r2, r1
 800be44:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800be46:	4b11      	ldr	r3, [pc, #68]	@ (800be8c <HAL_DMA_Init+0xec>)
 800be48:	6819      	ldr	r1, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be52:	201c      	movs	r0, #28
 800be54:	4003      	ands	r3, r0
 800be56:	409a      	lsls	r2, r3
 800be58:	4b0c      	ldr	r3, [pc, #48]	@ (800be8c <HAL_DMA_Init+0xec>)
 800be5a:	430a      	orrs	r2, r1
 800be5c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2225      	movs	r2, #37	@ 0x25
 800be68:	2101      	movs	r1, #1
 800be6a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2224      	movs	r2, #36	@ 0x24
 800be70:	2100      	movs	r1, #0
 800be72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	0018      	movs	r0, r3
 800be78:	46bd      	mov	sp, r7
 800be7a:	b004      	add	sp, #16
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	46c0      	nop			@ (mov r8, r8)
 800be80:	bffdfff8 	.word	0xbffdfff8
 800be84:	40020000 	.word	0x40020000
 800be88:	ffff800f 	.word	0xffff800f
 800be8c:	400200a8 	.word	0x400200a8

0800be90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be9e:	2317      	movs	r3, #23
 800bea0:	18fb      	adds	r3, r7, r3
 800bea2:	2200      	movs	r2, #0
 800bea4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2224      	movs	r2, #36	@ 0x24
 800beaa:	5c9b      	ldrb	r3, [r3, r2]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d101      	bne.n	800beb4 <HAL_DMA_Start_IT+0x24>
 800beb0:	2302      	movs	r3, #2
 800beb2:	e04f      	b.n	800bf54 <HAL_DMA_Start_IT+0xc4>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2224      	movs	r2, #36	@ 0x24
 800beb8:	2101      	movs	r1, #1
 800beba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2225      	movs	r2, #37	@ 0x25
 800bec0:	5c9b      	ldrb	r3, [r3, r2]
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d13a      	bne.n	800bf3e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2225      	movs	r2, #37	@ 0x25
 800becc:	2102      	movs	r1, #2
 800bece:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2101      	movs	r1, #1
 800bee2:	438a      	bics	r2, r1
 800bee4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	68b9      	ldr	r1, [r7, #8]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 f976 	bl	800c1de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d008      	beq.n	800bf0c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	210e      	movs	r1, #14
 800bf06:	430a      	orrs	r2, r1
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	e00f      	b.n	800bf2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2104      	movs	r1, #4
 800bf18:	438a      	bics	r2, r1
 800bf1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	210a      	movs	r1, #10
 800bf28:	430a      	orrs	r2, r1
 800bf2a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2101      	movs	r1, #1
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	e007      	b.n	800bf4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2224      	movs	r2, #36	@ 0x24
 800bf42:	2100      	movs	r1, #0
 800bf44:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800bf46:	2317      	movs	r3, #23
 800bf48:	18fb      	adds	r3, r7, r3
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800bf4e:	2317      	movs	r3, #23
 800bf50:	18fb      	adds	r3, r7, r3
 800bf52:	781b      	ldrb	r3, [r3, #0]
}
 800bf54:	0018      	movs	r0, r3
 800bf56:	46bd      	mov	sp, r7
 800bf58:	b006      	add	sp, #24
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf64:	230f      	movs	r3, #15
 800bf66:	18fb      	adds	r3, r7, r3
 800bf68:	2200      	movs	r2, #0
 800bf6a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2225      	movs	r2, #37	@ 0x25
 800bf70:	5c9b      	ldrb	r3, [r3, r2]
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d008      	beq.n	800bf8a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2204      	movs	r2, #4
 800bf7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2224      	movs	r2, #36	@ 0x24
 800bf82:	2100      	movs	r1, #0
 800bf84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e024      	b.n	800bfd4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	210e      	movs	r1, #14
 800bf96:	438a      	bics	r2, r1
 800bf98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	438a      	bics	r2, r1
 800bfa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfae:	221c      	movs	r2, #28
 800bfb0:	401a      	ands	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	4091      	lsls	r1, r2
 800bfba:	000a      	movs	r2, r1
 800bfbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2225      	movs	r2, #37	@ 0x25
 800bfc2:	2101      	movs	r1, #1
 800bfc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2224      	movs	r2, #36	@ 0x24
 800bfca:	2100      	movs	r1, #0
 800bfcc:	5499      	strb	r1, [r3, r2]

    return status;
 800bfce:	230f      	movs	r3, #15
 800bfd0:	18fb      	adds	r3, r7, r3
 800bfd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	b004      	add	sp, #16
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfe4:	210f      	movs	r1, #15
 800bfe6:	187b      	adds	r3, r7, r1
 800bfe8:	2200      	movs	r2, #0
 800bfea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2225      	movs	r2, #37	@ 0x25
 800bff0:	5c9b      	ldrb	r3, [r3, r2]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d006      	beq.n	800c006 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2204      	movs	r2, #4
 800bffc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800bffe:	187b      	adds	r3, r7, r1
 800c000:	2201      	movs	r2, #1
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	e02a      	b.n	800c05c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	210e      	movs	r1, #14
 800c012:	438a      	bics	r2, r1
 800c014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2101      	movs	r1, #1
 800c022:	438a      	bics	r2, r1
 800c024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c02a:	221c      	movs	r2, #28
 800c02c:	401a      	ands	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c032:	2101      	movs	r1, #1
 800c034:	4091      	lsls	r1, r2
 800c036:	000a      	movs	r2, r1
 800c038:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2225      	movs	r2, #37	@ 0x25
 800c03e:	2101      	movs	r1, #1
 800c040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2224      	movs	r2, #36	@ 0x24
 800c046:	2100      	movs	r1, #0
 800c048:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d004      	beq.n	800c05c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	0010      	movs	r0, r2
 800c05a:	4798      	blx	r3
    }
  }
  return status;
 800c05c:	230f      	movs	r3, #15
 800c05e:	18fb      	adds	r3, r7, r3
 800c060:	781b      	ldrb	r3, [r3, #0]
}
 800c062:	0018      	movs	r0, r3
 800c064:	46bd      	mov	sp, r7
 800c066:	b004      	add	sp, #16
 800c068:	bd80      	pop	{r7, pc}

0800c06a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c086:	221c      	movs	r2, #28
 800c088:	4013      	ands	r3, r2
 800c08a:	2204      	movs	r2, #4
 800c08c:	409a      	lsls	r2, r3
 800c08e:	0013      	movs	r3, r2
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	4013      	ands	r3, r2
 800c094:	d026      	beq.n	800c0e4 <HAL_DMA_IRQHandler+0x7a>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2204      	movs	r2, #4
 800c09a:	4013      	ands	r3, r2
 800c09c:	d022      	beq.n	800c0e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	d107      	bne.n	800c0ba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2104      	movs	r1, #4
 800c0b6:	438a      	bics	r2, r1
 800c0b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0be:	221c      	movs	r2, #28
 800c0c0:	401a      	ands	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c6:	2104      	movs	r1, #4
 800c0c8:	4091      	lsls	r1, r2
 800c0ca:	000a      	movs	r2, r1
 800c0cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d100      	bne.n	800c0d8 <HAL_DMA_IRQHandler+0x6e>
 800c0d6:	e071      	b.n	800c1bc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	0010      	movs	r0, r2
 800c0e0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800c0e2:	e06b      	b.n	800c1bc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0e8:	221c      	movs	r2, #28
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	409a      	lsls	r2, r3
 800c0f0:	0013      	movs	r3, r2
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	d02d      	beq.n	800c154 <HAL_DMA_IRQHandler+0xea>
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	d029      	beq.n	800c154 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2220      	movs	r2, #32
 800c108:	4013      	ands	r3, r2
 800c10a:	d10b      	bne.n	800c124 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	210a      	movs	r1, #10
 800c118:	438a      	bics	r2, r1
 800c11a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2225      	movs	r2, #37	@ 0x25
 800c120:	2101      	movs	r1, #1
 800c122:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c128:	221c      	movs	r2, #28
 800c12a:	401a      	ands	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c130:	2102      	movs	r1, #2
 800c132:	4091      	lsls	r1, r2
 800c134:	000a      	movs	r2, r1
 800c136:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2224      	movs	r2, #36	@ 0x24
 800c13c:	2100      	movs	r1, #0
 800c13e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d039      	beq.n	800c1bc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	0010      	movs	r0, r2
 800c150:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800c152:	e033      	b.n	800c1bc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c158:	221c      	movs	r2, #28
 800c15a:	4013      	ands	r3, r2
 800c15c:	2208      	movs	r2, #8
 800c15e:	409a      	lsls	r2, r3
 800c160:	0013      	movs	r3, r2
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	4013      	ands	r3, r2
 800c166:	d02a      	beq.n	800c1be <HAL_DMA_IRQHandler+0x154>
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2208      	movs	r2, #8
 800c16c:	4013      	ands	r3, r2
 800c16e:	d026      	beq.n	800c1be <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	210e      	movs	r1, #14
 800c17c:	438a      	bics	r2, r1
 800c17e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c184:	221c      	movs	r2, #28
 800c186:	401a      	ands	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18c:	2101      	movs	r1, #1
 800c18e:	4091      	lsls	r1, r2
 800c190:	000a      	movs	r2, r1
 800c192:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2225      	movs	r2, #37	@ 0x25
 800c19e:	2101      	movs	r1, #1
 800c1a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2224      	movs	r2, #36	@ 0x24
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d005      	beq.n	800c1be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	0010      	movs	r0, r2
 800c1ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c1bc:	46c0      	nop			@ (mov r8, r8)
 800c1be:	46c0      	nop			@ (mov r8, r8)
}
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	b004      	add	sp, #16
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b082      	sub	sp, #8
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2225      	movs	r2, #37	@ 0x25
 800c1d2:	5c9b      	ldrb	r3, [r3, r2]
 800c1d4:	b2db      	uxtb	r3, r3
}
 800c1d6:	0018      	movs	r0, r3
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	b002      	add	sp, #8
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	60f8      	str	r0, [r7, #12]
 800c1e6:	60b9      	str	r1, [r7, #8]
 800c1e8:	607a      	str	r2, [r7, #4]
 800c1ea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1f0:	221c      	movs	r2, #28
 800c1f2:	401a      	ands	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	4091      	lsls	r1, r2
 800c1fc:	000a      	movs	r2, r1
 800c1fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	2b10      	cmp	r3, #16
 800c20e:	d108      	bne.n	800c222 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c220:	e007      	b.n	800c232 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	60da      	str	r2, [r3, #12]
}
 800c232:	46c0      	nop			@ (mov r8, r8)
 800c234:	46bd      	mov	sp, r7
 800c236:	b004      	add	sp, #16
 800c238:	bd80      	pop	{r7, pc}
	...

0800c23c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800c244:	f7ff f904 	bl	800b450 <HAL_GetTick>
 800c248:	0003      	movs	r3, r0
 800c24a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c24c:	e00f      	b.n	800c26e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3301      	adds	r3, #1
 800c252:	d00c      	beq.n	800c26e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d007      	beq.n	800c26a <FLASH_WaitForLastOperation+0x2e>
 800c25a:	f7ff f8f9 	bl	800b450 <HAL_GetTick>
 800c25e:	0002      	movs	r2, r0
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	429a      	cmp	r2, r3
 800c268:	d201      	bcs.n	800c26e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e052      	b.n	800c314 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c26e:	4b2b      	ldr	r3, [pc, #172]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	2201      	movs	r2, #1
 800c274:	4013      	ands	r3, r2
 800c276:	2b01      	cmp	r3, #1
 800c278:	d0e9      	beq.n	800c24e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c27a:	4b28      	ldr	r3, [pc, #160]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	2202      	movs	r2, #2
 800c280:	4013      	ands	r3, r2
 800c282:	2b02      	cmp	r3, #2
 800c284:	d102      	bne.n	800c28c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c286:	4b25      	ldr	r3, [pc, #148]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c288:	2202      	movs	r2, #2
 800c28a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800c28c:	4b23      	ldr	r3, [pc, #140]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c28e:	699a      	ldr	r2, [r3, #24]
 800c290:	2380      	movs	r3, #128	@ 0x80
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	401a      	ands	r2, r3
 800c296:	2380      	movs	r3, #128	@ 0x80
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d035      	beq.n	800c30a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800c29e:	4b1f      	ldr	r3, [pc, #124]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c2a0:	699a      	ldr	r2, [r3, #24]
 800c2a2:	2380      	movs	r3, #128	@ 0x80
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800c2a8:	2380      	movs	r3, #128	@ 0x80
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d02c      	beq.n	800c30a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800c2b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c2b2:	699a      	ldr	r2, [r3, #24]
 800c2b4:	2380      	movs	r3, #128	@ 0x80
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800c2ba:	2380      	movs	r3, #128	@ 0x80
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d023      	beq.n	800c30a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800c2c2:	4b16      	ldr	r3, [pc, #88]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c2c4:	699a      	ldr	r2, [r3, #24]
 800c2c6:	2380      	movs	r3, #128	@ 0x80
 800c2c8:	011b      	lsls	r3, r3, #4
 800c2ca:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800c2cc:	2380      	movs	r3, #128	@ 0x80
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d01a      	beq.n	800c30a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800c2d4:	4b11      	ldr	r3, [pc, #68]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c2d6:	699a      	ldr	r2, [r3, #24]
 800c2d8:	2380      	movs	r3, #128	@ 0x80
 800c2da:	019b      	lsls	r3, r3, #6
 800c2dc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800c2de:	2380      	movs	r3, #128	@ 0x80
 800c2e0:	019b      	lsls	r3, r3, #6
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d011      	beq.n	800c30a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800c2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c2e8:	699a      	ldr	r2, [r3, #24]
 800c2ea:	2380      	movs	r3, #128	@ 0x80
 800c2ec:	029b      	lsls	r3, r3, #10
 800c2ee:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800c2f0:	2380      	movs	r3, #128	@ 0x80
 800c2f2:	029b      	lsls	r3, r3, #10
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d008      	beq.n	800c30a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800c2f8:	4b08      	ldr	r3, [pc, #32]	@ (800c31c <FLASH_WaitForLastOperation+0xe0>)
 800c2fa:	699a      	ldr	r2, [r3, #24]
 800c2fc:	2380      	movs	r3, #128	@ 0x80
 800c2fe:	025b      	lsls	r3, r3, #9
 800c300:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800c302:	2380      	movs	r3, #128	@ 0x80
 800c304:	025b      	lsls	r3, r3, #9
 800c306:	429a      	cmp	r2, r3
 800c308:	d103      	bne.n	800c312 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800c30a:	f000 f809 	bl	800c320 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e000      	b.n	800c314 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	0018      	movs	r0, r3
 800c316:	46bd      	mov	sp, r7
 800c318:	b004      	add	sp, #16
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	40022000 	.word	0x40022000

0800c320 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800c32a:	4b49      	ldr	r3, [pc, #292]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c32c:	699a      	ldr	r2, [r3, #24]
 800c32e:	2380      	movs	r3, #128	@ 0x80
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	401a      	ands	r2, r3
 800c334:	2380      	movs	r3, #128	@ 0x80
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	429a      	cmp	r2, r3
 800c33a:	d10a      	bne.n	800c352 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c33c:	4b45      	ldr	r3, [pc, #276]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	2202      	movs	r2, #2
 800c342:	431a      	orrs	r2, r3
 800c344:	4b43      	ldr	r3, [pc, #268]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c346:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2280      	movs	r2, #128	@ 0x80
 800c34c:	0052      	lsls	r2, r2, #1
 800c34e:	4313      	orrs	r3, r2
 800c350:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800c352:	4b3f      	ldr	r3, [pc, #252]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c354:	699a      	ldr	r2, [r3, #24]
 800c356:	2380      	movs	r3, #128	@ 0x80
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	401a      	ands	r2, r3
 800c35c:	2380      	movs	r3, #128	@ 0x80
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	429a      	cmp	r2, r3
 800c362:	d10a      	bne.n	800c37a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c364:	4b3b      	ldr	r3, [pc, #236]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	2201      	movs	r2, #1
 800c36a:	431a      	orrs	r2, r3
 800c36c:	4b39      	ldr	r3, [pc, #228]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c36e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2280      	movs	r2, #128	@ 0x80
 800c374:	0092      	lsls	r2, r2, #2
 800c376:	4313      	orrs	r3, r2
 800c378:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800c37a:	4b35      	ldr	r3, [pc, #212]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c37c:	699a      	ldr	r2, [r3, #24]
 800c37e:	2380      	movs	r3, #128	@ 0x80
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	401a      	ands	r2, r3
 800c384:	2380      	movs	r3, #128	@ 0x80
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	429a      	cmp	r2, r3
 800c38a:	d10a      	bne.n	800c3a2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800c38c:	4b31      	ldr	r3, [pc, #196]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	2208      	movs	r2, #8
 800c392:	431a      	orrs	r2, r3
 800c394:	4b2f      	ldr	r3, [pc, #188]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c396:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2280      	movs	r2, #128	@ 0x80
 800c39c:	00d2      	lsls	r2, r2, #3
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800c3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	2380      	movs	r3, #128	@ 0x80
 800c3a8:	011b      	lsls	r3, r3, #4
 800c3aa:	401a      	ands	r2, r3
 800c3ac:	2380      	movs	r3, #128	@ 0x80
 800c3ae:	011b      	lsls	r3, r3, #4
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d10a      	bne.n	800c3ca <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800c3b4:	4b27      	ldr	r3, [pc, #156]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	431a      	orrs	r2, r3
 800c3bc:	4b25      	ldr	r3, [pc, #148]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c3be:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2280      	movs	r2, #128	@ 0x80
 800c3c4:	0112      	lsls	r2, r2, #4
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800c3ca:	4b21      	ldr	r3, [pc, #132]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c3cc:	699a      	ldr	r2, [r3, #24]
 800c3ce:	2380      	movs	r3, #128	@ 0x80
 800c3d0:	019b      	lsls	r3, r3, #6
 800c3d2:	401a      	ands	r2, r3
 800c3d4:	2380      	movs	r3, #128	@ 0x80
 800c3d6:	019b      	lsls	r3, r3, #6
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d10a      	bne.n	800c3f2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800c3dc:	4b1d      	ldr	r3, [pc, #116]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	2210      	movs	r2, #16
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	4b1b      	ldr	r3, [pc, #108]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c3e6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2280      	movs	r2, #128	@ 0x80
 800c3ec:	0192      	lsls	r2, r2, #6
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800c3f2:	4b17      	ldr	r3, [pc, #92]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c3f4:	699a      	ldr	r2, [r3, #24]
 800c3f6:	2380      	movs	r3, #128	@ 0x80
 800c3f8:	029b      	lsls	r3, r3, #10
 800c3fa:	401a      	ands	r2, r3
 800c3fc:	2380      	movs	r3, #128	@ 0x80
 800c3fe:	029b      	lsls	r3, r3, #10
 800c400:	429a      	cmp	r2, r3
 800c402:	d109      	bne.n	800c418 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800c404:	4b13      	ldr	r3, [pc, #76]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	2220      	movs	r2, #32
 800c40a:	431a      	orrs	r2, r3
 800c40c:	4b11      	ldr	r3, [pc, #68]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c40e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2220      	movs	r2, #32
 800c414:	4313      	orrs	r3, r2
 800c416:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800c418:	4b0d      	ldr	r3, [pc, #52]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c41a:	699a      	ldr	r2, [r3, #24]
 800c41c:	2380      	movs	r3, #128	@ 0x80
 800c41e:	025b      	lsls	r3, r3, #9
 800c420:	401a      	ands	r2, r3
 800c422:	2380      	movs	r3, #128	@ 0x80
 800c424:	025b      	lsls	r3, r3, #9
 800c426:	429a      	cmp	r2, r3
 800c428:	d10a      	bne.n	800c440 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800c42a:	4b0a      	ldr	r3, [pc, #40]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c42c:	695b      	ldr	r3, [r3, #20]
 800c42e:	2240      	movs	r2, #64	@ 0x40
 800c430:	431a      	orrs	r2, r3
 800c432:	4b08      	ldr	r3, [pc, #32]	@ (800c454 <FLASH_SetErrorCode+0x134>)
 800c434:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2280      	movs	r2, #128	@ 0x80
 800c43a:	0252      	lsls	r2, r2, #9
 800c43c:	4313      	orrs	r3, r2
 800c43e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800c440:	4b03      	ldr	r3, [pc, #12]	@ (800c450 <FLASH_SetErrorCode+0x130>)
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	619a      	str	r2, [r3, #24]
}  
 800c446:	46c0      	nop			@ (mov r8, r8)
 800c448:	46bd      	mov	sp, r7
 800c44a:	b002      	add	sp, #8
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	46c0      	nop			@ (mov r8, r8)
 800c450:	40022000 	.word	0x40022000
 800c454:	2000244c 	.word	0x2000244c

0800c458 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800c45e:	4b12      	ldr	r3, [pc, #72]	@ (800c4a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	4013      	ands	r3, r2
 800c466:	d019      	beq.n	800c49c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c468:	f3ef 8310 	mrs	r3, PRIMASK
 800c46c:	607b      	str	r3, [r7, #4]
  return(result);
 800c46e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800c470:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c472:	b672      	cpsid	i
}
 800c474:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800c476:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c478:	4a0c      	ldr	r2, [pc, #48]	@ (800c4ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800c47a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800c47c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c47e:	4a0c      	ldr	r2, [pc, #48]	@ (800c4b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800c480:	60da      	str	r2, [r3, #12]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f383 8810 	msr	PRIMASK, r3
}
 800c48c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800c48e:	4b06      	ldr	r3, [pc, #24]	@ (800c4a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	4013      	ands	r3, r2
 800c496:	d001      	beq.n	800c49c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	e000      	b.n	800c49e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	0018      	movs	r0, r3
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	b004      	add	sp, #16
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	46c0      	nop			@ (mov r8, r8)
 800c4a8:	40022000 	.word	0x40022000
 800c4ac:	89abcdef 	.word	0x89abcdef
 800c4b0:	02030405 	.word	0x02030405

0800c4b4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800c4b8:	4b04      	ldr	r3, [pc, #16]	@ (800c4cc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	4b03      	ldr	r3, [pc, #12]	@ (800c4cc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800c4be:	2101      	movs	r1, #1
 800c4c0:	430a      	orrs	r2, r1
 800c4c2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	40022000 	.word	0x40022000

0800c4d0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800c4d0:	b5b0      	push	{r4, r5, r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4d8:	250f      	movs	r5, #15
 800c4da:	197b      	adds	r3, r7, r5
 800c4dc:	2200      	movs	r2, #0
 800c4de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c4e0:	197c      	adds	r4, r7, r5
 800c4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c520 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	f7ff fea9 	bl	800c23c <FLASH_WaitForLastOperation>
 800c4ea:	0003      	movs	r3, r0
 800c4ec:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800c4ee:	0029      	movs	r1, r5
 800c4f0:	187b      	adds	r3, r7, r1
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10c      	bne.n	800c512 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c524 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c504:	187c      	adds	r4, r7, r1
 800c506:	4b06      	ldr	r3, [pc, #24]	@ (800c520 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800c508:	0018      	movs	r0, r3
 800c50a:	f7ff fe97 	bl	800c23c <FLASH_WaitForLastOperation>
 800c50e:	0003      	movs	r3, r0
 800c510:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800c512:	230f      	movs	r3, #15
 800c514:	18fb      	adds	r3, r7, r3
 800c516:	781b      	ldrb	r3, [r3, #0]
}  
 800c518:	0018      	movs	r0, r3
 800c51a:	46bd      	mov	sp, r7
 800c51c:	b004      	add	sp, #16
 800c51e:	bdb0      	pop	{r4, r5, r7, pc}
 800c520:	0000c350 	.word	0x0000c350
 800c524:	2000244c 	.word	0x2000244c

0800c528 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800c528:	b5b0      	push	{r4, r5, r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c534:	2317      	movs	r3, #23
 800c536:	18fb      	adds	r3, r7, r3
 800c538:	2201      	movs	r2, #1
 800c53a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c53c:	4b24      	ldr	r3, [pc, #144]	@ (800c5d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c53e:	7c1b      	ldrb	r3, [r3, #16]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d101      	bne.n	800c548 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800c544:	2302      	movs	r3, #2
 800c546:	e03e      	b.n	800c5c6 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800c548:	4b21      	ldr	r3, [pc, #132]	@ (800c5d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c54a:	2201      	movs	r2, #1
 800c54c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c54e:	2517      	movs	r5, #23
 800c550:	197c      	adds	r4, r7, r5
 800c552:	4b20      	ldr	r3, [pc, #128]	@ (800c5d4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800c554:	0018      	movs	r0, r3
 800c556:	f7ff fe71 	bl	800c23c <FLASH_WaitForLastOperation>
 800c55a:	0003      	movs	r3, r0
 800c55c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800c55e:	197b      	adds	r3, r7, r5
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d129      	bne.n	800c5ba <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c566:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c568:	2200      	movs	r2, #0
 800c56a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d103      	bne.n	800c57a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	e013      	b.n	800c5a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d104      	bne.n	800c58a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	b292      	uxth	r2, r2
 800c586:	801a      	strh	r2, [r3, #0]
 800c588:	e00b      	b.n	800c5a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d104      	bne.n	800c59a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	b2d2      	uxtb	r2, r2
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	e003      	b.n	800c5a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800c59a:	2317      	movs	r3, #23
 800c59c:	18fb      	adds	r3, r7, r3
 800c59e:	2201      	movs	r2, #1
 800c5a0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800c5a2:	2217      	movs	r2, #23
 800c5a4:	18bb      	adds	r3, r7, r2
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d106      	bne.n	800c5ba <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c5ac:	18bc      	adds	r4, r7, r2
 800c5ae:	4b09      	ldr	r3, [pc, #36]	@ (800c5d4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	f7ff fe43 	bl	800c23c <FLASH_WaitForLastOperation>
 800c5b6:	0003      	movs	r3, r0
 800c5b8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c5ba:	4b05      	ldr	r3, [pc, #20]	@ (800c5d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	741a      	strb	r2, [r3, #16]

  return status;
 800c5c0:	2317      	movs	r3, #23
 800c5c2:	18fb      	adds	r3, r7, r3
 800c5c4:	781b      	ldrb	r3, [r3, #0]
}
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	b006      	add	sp, #24
 800c5cc:	bdb0      	pop	{r4, r5, r7, pc}
 800c5ce:	46c0      	nop			@ (mov r8, r8)
 800c5d0:	2000244c 	.word	0x2000244c
 800c5d4:	0000c350 	.word	0x0000c350

0800c5d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800c5ee:	e155      	b.n	800c89c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2101      	movs	r1, #1
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	4091      	lsls	r1, r2
 800c5fa:	000a      	movs	r2, r1
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d100      	bne.n	800c608 <HAL_GPIO_Init+0x30>
 800c606:	e146      	b.n	800c896 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	2203      	movs	r2, #3
 800c60e:	4013      	ands	r3, r2
 800c610:	2b01      	cmp	r3, #1
 800c612:	d005      	beq.n	800c620 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	2203      	movs	r2, #3
 800c61a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d130      	bne.n	800c682 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	2203      	movs	r2, #3
 800c62c:	409a      	lsls	r2, r3
 800c62e:	0013      	movs	r3, r2
 800c630:	43da      	mvns	r2, r3
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	4013      	ands	r3, r2
 800c636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	68da      	ldr	r2, [r3, #12]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	005b      	lsls	r3, r3, #1
 800c640:	409a      	lsls	r2, r3
 800c642:	0013      	movs	r3, r2
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	4313      	orrs	r3, r2
 800c648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c656:	2201      	movs	r2, #1
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	409a      	lsls	r2, r3
 800c65c:	0013      	movs	r3, r2
 800c65e:	43da      	mvns	r2, r3
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	4013      	ands	r3, r2
 800c664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	091b      	lsrs	r3, r3, #4
 800c66c:	2201      	movs	r2, #1
 800c66e:	401a      	ands	r2, r3
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	409a      	lsls	r2, r3
 800c674:	0013      	movs	r3, r2
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	2203      	movs	r2, #3
 800c688:	4013      	ands	r3, r2
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d017      	beq.n	800c6be <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	2203      	movs	r2, #3
 800c69a:	409a      	lsls	r2, r3
 800c69c:	0013      	movs	r3, r2
 800c69e:	43da      	mvns	r2, r3
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	689a      	ldr	r2, [r3, #8]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	409a      	lsls	r2, r3
 800c6b0:	0013      	movs	r3, r2
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	693a      	ldr	r2, [r7, #16]
 800c6bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	2203      	movs	r2, #3
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d123      	bne.n	800c712 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	08da      	lsrs	r2, r3, #3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3208      	adds	r2, #8
 800c6d2:	0092      	lsls	r2, r2, #2
 800c6d4:	58d3      	ldr	r3, [r2, r3]
 800c6d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2207      	movs	r2, #7
 800c6dc:	4013      	ands	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	220f      	movs	r2, #15
 800c6e2:	409a      	lsls	r2, r3
 800c6e4:	0013      	movs	r3, r2
 800c6e6:	43da      	mvns	r2, r3
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	691a      	ldr	r2, [r3, #16]
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2107      	movs	r1, #7
 800c6f6:	400b      	ands	r3, r1
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	409a      	lsls	r2, r3
 800c6fc:	0013      	movs	r3, r2
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	4313      	orrs	r3, r2
 800c702:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	08da      	lsrs	r2, r3, #3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3208      	adds	r2, #8
 800c70c:	0092      	lsls	r2, r2, #2
 800c70e:	6939      	ldr	r1, [r7, #16]
 800c710:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	2203      	movs	r2, #3
 800c71e:	409a      	lsls	r2, r3
 800c720:	0013      	movs	r3, r2
 800c722:	43da      	mvns	r2, r3
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	4013      	ands	r3, r2
 800c728:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	2203      	movs	r2, #3
 800c730:	401a      	ands	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	409a      	lsls	r2, r3
 800c738:	0013      	movs	r3, r2
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	685a      	ldr	r2, [r3, #4]
 800c74a:	23c0      	movs	r3, #192	@ 0xc0
 800c74c:	029b      	lsls	r3, r3, #10
 800c74e:	4013      	ands	r3, r2
 800c750:	d100      	bne.n	800c754 <HAL_GPIO_Init+0x17c>
 800c752:	e0a0      	b.n	800c896 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c754:	4b57      	ldr	r3, [pc, #348]	@ (800c8b4 <HAL_GPIO_Init+0x2dc>)
 800c756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c758:	4b56      	ldr	r3, [pc, #344]	@ (800c8b4 <HAL_GPIO_Init+0x2dc>)
 800c75a:	2101      	movs	r1, #1
 800c75c:	430a      	orrs	r2, r1
 800c75e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800c760:	4a55      	ldr	r2, [pc, #340]	@ (800c8b8 <HAL_GPIO_Init+0x2e0>)
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	089b      	lsrs	r3, r3, #2
 800c766:	3302      	adds	r3, #2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	589b      	ldr	r3, [r3, r2]
 800c76c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2203      	movs	r2, #3
 800c772:	4013      	ands	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	220f      	movs	r2, #15
 800c778:	409a      	lsls	r2, r3
 800c77a:	0013      	movs	r3, r2
 800c77c:	43da      	mvns	r2, r3
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	4013      	ands	r3, r2
 800c782:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	23a0      	movs	r3, #160	@ 0xa0
 800c788:	05db      	lsls	r3, r3, #23
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d01f      	beq.n	800c7ce <HAL_GPIO_Init+0x1f6>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a4a      	ldr	r2, [pc, #296]	@ (800c8bc <HAL_GPIO_Init+0x2e4>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d019      	beq.n	800c7ca <HAL_GPIO_Init+0x1f2>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a49      	ldr	r2, [pc, #292]	@ (800c8c0 <HAL_GPIO_Init+0x2e8>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d013      	beq.n	800c7c6 <HAL_GPIO_Init+0x1ee>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a48      	ldr	r2, [pc, #288]	@ (800c8c4 <HAL_GPIO_Init+0x2ec>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d00d      	beq.n	800c7c2 <HAL_GPIO_Init+0x1ea>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a47      	ldr	r2, [pc, #284]	@ (800c8c8 <HAL_GPIO_Init+0x2f0>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d007      	beq.n	800c7be <HAL_GPIO_Init+0x1e6>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a46      	ldr	r2, [pc, #280]	@ (800c8cc <HAL_GPIO_Init+0x2f4>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d101      	bne.n	800c7ba <HAL_GPIO_Init+0x1e2>
 800c7b6:	2305      	movs	r3, #5
 800c7b8:	e00a      	b.n	800c7d0 <HAL_GPIO_Init+0x1f8>
 800c7ba:	2306      	movs	r3, #6
 800c7bc:	e008      	b.n	800c7d0 <HAL_GPIO_Init+0x1f8>
 800c7be:	2304      	movs	r3, #4
 800c7c0:	e006      	b.n	800c7d0 <HAL_GPIO_Init+0x1f8>
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e004      	b.n	800c7d0 <HAL_GPIO_Init+0x1f8>
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	e002      	b.n	800c7d0 <HAL_GPIO_Init+0x1f8>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e000      	b.n	800c7d0 <HAL_GPIO_Init+0x1f8>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	2103      	movs	r1, #3
 800c7d4:	400a      	ands	r2, r1
 800c7d6:	0092      	lsls	r2, r2, #2
 800c7d8:	4093      	lsls	r3, r2
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c7e0:	4935      	ldr	r1, [pc, #212]	@ (800c8b8 <HAL_GPIO_Init+0x2e0>)
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	089b      	lsrs	r3, r3, #2
 800c7e6:	3302      	adds	r3, #2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c7ee:	4b38      	ldr	r3, [pc, #224]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	43da      	mvns	r2, r3
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	2380      	movs	r3, #128	@ 0x80
 800c804:	035b      	lsls	r3, r3, #13
 800c806:	4013      	ands	r3, r2
 800c808:	d003      	beq.n	800c812 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800c80a:	693a      	ldr	r2, [r7, #16]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4313      	orrs	r3, r2
 800c810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800c812:	4b2f      	ldr	r3, [pc, #188]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c814:	693a      	ldr	r2, [r7, #16]
 800c816:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800c818:	4b2d      	ldr	r3, [pc, #180]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	43da      	mvns	r2, r3
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	4013      	ands	r3, r2
 800c826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	2380      	movs	r3, #128	@ 0x80
 800c82e:	039b      	lsls	r3, r3, #14
 800c830:	4013      	ands	r3, r2
 800c832:	d003      	beq.n	800c83c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	4313      	orrs	r3, r2
 800c83a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800c83c:	4b24      	ldr	r3, [pc, #144]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800c842:	4b23      	ldr	r3, [pc, #140]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	43da      	mvns	r2, r3
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	4013      	ands	r3, r2
 800c850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	2380      	movs	r3, #128	@ 0x80
 800c858:	029b      	lsls	r3, r3, #10
 800c85a:	4013      	ands	r3, r2
 800c85c:	d003      	beq.n	800c866 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4313      	orrs	r3, r2
 800c864:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800c866:	4b1a      	ldr	r3, [pc, #104]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c868:	693a      	ldr	r2, [r7, #16]
 800c86a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c86c:	4b18      	ldr	r3, [pc, #96]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	43da      	mvns	r2, r3
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	4013      	ands	r3, r2
 800c87a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	2380      	movs	r3, #128	@ 0x80
 800c882:	025b      	lsls	r3, r3, #9
 800c884:	4013      	ands	r3, r2
 800c886:	d003      	beq.n	800c890 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800c890:	4b0f      	ldr	r3, [pc, #60]	@ (800c8d0 <HAL_GPIO_Init+0x2f8>)
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	3301      	adds	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	40da      	lsrs	r2, r3
 800c8a4:	1e13      	subs	r3, r2, #0
 800c8a6:	d000      	beq.n	800c8aa <HAL_GPIO_Init+0x2d2>
 800c8a8:	e6a2      	b.n	800c5f0 <HAL_GPIO_Init+0x18>
  }
}
 800c8aa:	46c0      	nop			@ (mov r8, r8)
 800c8ac:	46c0      	nop			@ (mov r8, r8)
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	b006      	add	sp, #24
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	40021000 	.word	0x40021000
 800c8b8:	40010000 	.word	0x40010000
 800c8bc:	50000400 	.word	0x50000400
 800c8c0:	50000800 	.word	0x50000800
 800c8c4:	50000c00 	.word	0x50000c00
 800c8c8:	50001000 	.word	0x50001000
 800c8cc:	50001c00 	.word	0x50001c00
 800c8d0:	40010400 	.word	0x40010400

0800c8d4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	000a      	movs	r2, r1
 800c8de:	1cbb      	adds	r3, r7, #2
 800c8e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	1cba      	adds	r2, r7, #2
 800c8e8:	8812      	ldrh	r2, [r2, #0]
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	d004      	beq.n	800c8f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800c8ee:	230f      	movs	r3, #15
 800c8f0:	18fb      	adds	r3, r7, r3
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	701a      	strb	r2, [r3, #0]
 800c8f6:	e003      	b.n	800c900 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c8f8:	230f      	movs	r3, #15
 800c8fa:	18fb      	adds	r3, r7, r3
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800c900:	230f      	movs	r3, #15
 800c902:	18fb      	adds	r3, r7, r3
 800c904:	781b      	ldrb	r3, [r3, #0]
}
 800c906:	0018      	movs	r0, r3
 800c908:	46bd      	mov	sp, r7
 800c90a:	b004      	add	sp, #16
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b082      	sub	sp, #8
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	0008      	movs	r0, r1
 800c918:	0011      	movs	r1, r2
 800c91a:	1cbb      	adds	r3, r7, #2
 800c91c:	1c02      	adds	r2, r0, #0
 800c91e:	801a      	strh	r2, [r3, #0]
 800c920:	1c7b      	adds	r3, r7, #1
 800c922:	1c0a      	adds	r2, r1, #0
 800c924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c926:	1c7b      	adds	r3, r7, #1
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d004      	beq.n	800c938 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c92e:	1cbb      	adds	r3, r7, #2
 800c930:	881a      	ldrh	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800c936:	e003      	b.n	800c940 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800c938:	1cbb      	adds	r3, r7, #2
 800c93a:	881a      	ldrh	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c940:	46c0      	nop			@ (mov r8, r8)
 800c942:	46bd      	mov	sp, r7
 800c944:	b002      	add	sp, #8
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d101      	bne.n	800c95a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	e082      	b.n	800ca60 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2241      	movs	r2, #65	@ 0x41
 800c95e:	5c9b      	ldrb	r3, [r3, r2]
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	d107      	bne.n	800c976 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2240      	movs	r2, #64	@ 0x40
 800c96a:	2100      	movs	r1, #0
 800c96c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	0018      	movs	r0, r3
 800c972:	f7f9 fd8f 	bl	8006494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2241      	movs	r2, #65	@ 0x41
 800c97a:	2124      	movs	r1, #36	@ 0x24
 800c97c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2101      	movs	r1, #1
 800c98a:	438a      	bics	r2, r1
 800c98c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4934      	ldr	r1, [pc, #208]	@ (800ca68 <HAL_I2C_Init+0x120>)
 800c998:	400a      	ands	r2, r1
 800c99a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689a      	ldr	r2, [r3, #8]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4931      	ldr	r1, [pc, #196]	@ (800ca6c <HAL_I2C_Init+0x124>)
 800c9a8:	400a      	ands	r2, r1
 800c9aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d108      	bne.n	800c9c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	689a      	ldr	r2, [r3, #8]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2180      	movs	r1, #128	@ 0x80
 800c9be:	0209      	lsls	r1, r1, #8
 800c9c0:	430a      	orrs	r2, r1
 800c9c2:	609a      	str	r2, [r3, #8]
 800c9c4:	e007      	b.n	800c9d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	689a      	ldr	r2, [r3, #8]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2184      	movs	r1, #132	@ 0x84
 800c9d0:	0209      	lsls	r1, r1, #8
 800c9d2:	430a      	orrs	r2, r1
 800c9d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d104      	bne.n	800c9e8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2280      	movs	r2, #128	@ 0x80
 800c9e4:	0112      	lsls	r2, r2, #4
 800c9e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	491f      	ldr	r1, [pc, #124]	@ (800ca70 <HAL_I2C_Init+0x128>)
 800c9f4:	430a      	orrs	r2, r1
 800c9f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	491a      	ldr	r1, [pc, #104]	@ (800ca6c <HAL_I2C_Init+0x124>)
 800ca04:	400a      	ands	r2, r1
 800ca06:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	691a      	ldr	r2, [r3, #16]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	695b      	ldr	r3, [r3, #20]
 800ca10:	431a      	orrs	r2, r3
 800ca12:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	69d9      	ldr	r1, [r3, #28]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a1a      	ldr	r2, [r3, #32]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	430a      	orrs	r2, r1
 800ca40:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2241      	movs	r2, #65	@ 0x41
 800ca4c:	2120      	movs	r1, #32
 800ca4e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2242      	movs	r2, #66	@ 0x42
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	0018      	movs	r0, r3
 800ca62:	46bd      	mov	sp, r7
 800ca64:	b002      	add	sp, #8
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	f0ffffff 	.word	0xf0ffffff
 800ca6c:	ffff7fff 	.word	0xffff7fff
 800ca70:	02008000 	.word	0x02008000

0800ca74 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800ca74:	b5b0      	push	{r4, r5, r7, lr}
 800ca76:	b088      	sub	sp, #32
 800ca78:	af02      	add	r7, sp, #8
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	0008      	movs	r0, r1
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	0019      	movs	r1, r3
 800ca82:	230a      	movs	r3, #10
 800ca84:	18fb      	adds	r3, r7, r3
 800ca86:	1c02      	adds	r2, r0, #0
 800ca88:	801a      	strh	r2, [r3, #0]
 800ca8a:	2308      	movs	r3, #8
 800ca8c:	18fb      	adds	r3, r7, r3
 800ca8e:	1c0a      	adds	r2, r1, #0
 800ca90:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2241      	movs	r2, #65	@ 0x41
 800ca96:	5c9b      	ldrb	r3, [r3, r2]
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b20      	cmp	r3, #32
 800ca9c:	d000      	beq.n	800caa0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800ca9e:	e0dd      	b.n	800cc5c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	699a      	ldr	r2, [r3, #24]
 800caa6:	2380      	movs	r3, #128	@ 0x80
 800caa8:	021b      	lsls	r3, r3, #8
 800caaa:	401a      	ands	r2, r3
 800caac:	2380      	movs	r3, #128	@ 0x80
 800caae:	021b      	lsls	r3, r3, #8
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d101      	bne.n	800cab8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800cab4:	2302      	movs	r3, #2
 800cab6:	e0d2      	b.n	800cc5e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2240      	movs	r2, #64	@ 0x40
 800cabc:	5c9b      	ldrb	r3, [r3, r2]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d101      	bne.n	800cac6 <HAL_I2C_Master_Transmit_DMA+0x52>
 800cac2:	2302      	movs	r3, #2
 800cac4:	e0cb      	b.n	800cc5e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2240      	movs	r2, #64	@ 0x40
 800caca:	2101      	movs	r1, #1
 800cacc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2241      	movs	r2, #65	@ 0x41
 800cad2:	2121      	movs	r1, #33	@ 0x21
 800cad4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2242      	movs	r2, #66	@ 0x42
 800cada:	2110      	movs	r1, #16
 800cadc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2200      	movs	r2, #0
 800cae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2208      	movs	r2, #8
 800caee:	18ba      	adds	r2, r7, r2
 800caf0:	8812      	ldrh	r2, [r2, #0]
 800caf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	4a5c      	ldr	r2, [pc, #368]	@ (800cc68 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800caf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	4a5b      	ldr	r2, [pc, #364]	@ (800cc6c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800cafe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	2bff      	cmp	r3, #255	@ 0xff
 800cb08:	d906      	bls.n	800cb18 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	22ff      	movs	r2, #255	@ 0xff
 800cb0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800cb10:	2380      	movs	r3, #128	@ 0x80
 800cb12:	045b      	lsls	r3, r3, #17
 800cb14:	617b      	str	r3, [r7, #20]
 800cb16:	e007      	b.n	800cb28 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cb22:	2380      	movs	r3, #128	@ 0x80
 800cb24:	049b      	lsls	r3, r3, #18
 800cb26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d100      	bne.n	800cb32 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800cb30:	e078      	b.n	800cc24 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d023      	beq.n	800cb82 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb3e:	4a4c      	ldr	r2, [pc, #304]	@ (800cc70 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800cb40:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb46:	4a4b      	ldr	r2, [pc, #300]	@ (800cc74 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800cb48:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb4e:	2200      	movs	r2, #0
 800cb50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb56:	2200      	movs	r2, #0
 800cb58:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	3328      	adds	r3, #40	@ 0x28
 800cb66:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800cb6c:	2513      	movs	r5, #19
 800cb6e:	197c      	adds	r4, r7, r5
 800cb70:	f7ff f98e 	bl	800be90 <HAL_DMA_Start_IT>
 800cb74:	0003      	movs	r3, r0
 800cb76:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cb78:	197b      	adds	r3, r7, r5
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d13d      	bne.n	800cbfc <HAL_I2C_Master_Transmit_DMA+0x188>
 800cb80:	e013      	b.n	800cbaa <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2241      	movs	r2, #65	@ 0x41
 800cb86:	2120      	movs	r1, #32
 800cb88:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2242      	movs	r2, #66	@ 0x42
 800cb8e:	2100      	movs	r1, #0
 800cb90:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb96:	2280      	movs	r2, #128	@ 0x80
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2240      	movs	r2, #64	@ 0x40
 800cba2:	2100      	movs	r1, #0
 800cba4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e059      	b.n	800cc5e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	697c      	ldr	r4, [r7, #20]
 800cbb2:	230a      	movs	r3, #10
 800cbb4:	18fb      	adds	r3, r7, r3
 800cbb6:	8819      	ldrh	r1, [r3, #0]
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	4b2f      	ldr	r3, [pc, #188]	@ (800cc78 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	0023      	movs	r3, r4
 800cbc0:	f001 fd0e 	bl	800e5e0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2240      	movs	r2, #64	@ 0x40
 800cbda:	2100      	movs	r1, #0
 800cbdc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2110      	movs	r1, #16
 800cbe2:	0018      	movs	r0, r3
 800cbe4:	f001 fd36 	bl	800e654 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2180      	movs	r1, #128	@ 0x80
 800cbf4:	01c9      	lsls	r1, r1, #7
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	e02d      	b.n	800cc58 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2241      	movs	r2, #65	@ 0x41
 800cc00:	2120      	movs	r1, #32
 800cc02:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2242      	movs	r2, #66	@ 0x42
 800cc08:	2100      	movs	r1, #0
 800cc0a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc10:	2210      	movs	r2, #16
 800cc12:	431a      	orrs	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2240      	movs	r2, #64	@ 0x40
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e01c      	b.n	800cc5e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	4a15      	ldr	r2, [pc, #84]	@ (800cc7c <HAL_I2C_Master_Transmit_DMA+0x208>)
 800cc28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	2380      	movs	r3, #128	@ 0x80
 800cc32:	049c      	lsls	r4, r3, #18
 800cc34:	230a      	movs	r3, #10
 800cc36:	18fb      	adds	r3, r7, r3
 800cc38:	8819      	ldrh	r1, [r3, #0]
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	4b0e      	ldr	r3, [pc, #56]	@ (800cc78 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	0023      	movs	r3, r4
 800cc42:	f001 fccd 	bl	800e5e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2240      	movs	r2, #64	@ 0x40
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2101      	movs	r1, #1
 800cc52:	0018      	movs	r0, r3
 800cc54:	f001 fcfe 	bl	800e654 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e000      	b.n	800cc5e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800cc5c:	2302      	movs	r3, #2
  }
}
 800cc5e:	0018      	movs	r0, r3
 800cc60:	46bd      	mov	sp, r7
 800cc62:	b006      	add	sp, #24
 800cc64:	bdb0      	pop	{r4, r5, r7, pc}
 800cc66:	46c0      	nop			@ (mov r8, r8)
 800cc68:	ffff0000 	.word	0xffff0000
 800cc6c:	0800d479 	.word	0x0800d479
 800cc70:	0800e431 	.word	0x0800e431
 800cc74:	0800e571 	.word	0x0800e571
 800cc78:	80002000 	.word	0x80002000
 800cc7c:	0800d025 	.word	0x0800d025

0800cc80 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800cc80:	b5b0      	push	{r4, r5, r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af02      	add	r7, sp, #8
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	0008      	movs	r0, r1
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	0019      	movs	r1, r3
 800cc8e:	230a      	movs	r3, #10
 800cc90:	18fb      	adds	r3, r7, r3
 800cc92:	1c02      	adds	r2, r0, #0
 800cc94:	801a      	strh	r2, [r3, #0]
 800cc96:	2308      	movs	r3, #8
 800cc98:	18fb      	adds	r3, r7, r3
 800cc9a:	1c0a      	adds	r2, r1, #0
 800cc9c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2241      	movs	r2, #65	@ 0x41
 800cca2:	5c9b      	ldrb	r3, [r3, r2]
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b20      	cmp	r3, #32
 800cca8:	d000      	beq.n	800ccac <HAL_I2C_Master_Receive_DMA+0x2c>
 800ccaa:	e0dd      	b.n	800ce68 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	699a      	ldr	r2, [r3, #24]
 800ccb2:	2380      	movs	r3, #128	@ 0x80
 800ccb4:	021b      	lsls	r3, r3, #8
 800ccb6:	401a      	ands	r2, r3
 800ccb8:	2380      	movs	r3, #128	@ 0x80
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d101      	bne.n	800ccc4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	e0d2      	b.n	800ce6a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2240      	movs	r2, #64	@ 0x40
 800ccc8:	5c9b      	ldrb	r3, [r3, r2]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d101      	bne.n	800ccd2 <HAL_I2C_Master_Receive_DMA+0x52>
 800ccce:	2302      	movs	r3, #2
 800ccd0:	e0cb      	b.n	800ce6a <HAL_I2C_Master_Receive_DMA+0x1ea>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2240      	movs	r2, #64	@ 0x40
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2241      	movs	r2, #65	@ 0x41
 800ccde:	2122      	movs	r1, #34	@ 0x22
 800cce0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2242      	movs	r2, #66	@ 0x42
 800cce6:	2110      	movs	r1, #16
 800cce8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2208      	movs	r2, #8
 800ccfa:	18ba      	adds	r2, r7, r2
 800ccfc:	8812      	ldrh	r2, [r2, #0]
 800ccfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	4a5c      	ldr	r2, [pc, #368]	@ (800ce74 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800cd04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	4a5b      	ldr	r2, [pc, #364]	@ (800ce78 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800cd0a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	2bff      	cmp	r3, #255	@ 0xff
 800cd14:	d906      	bls.n	800cd24 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	22ff      	movs	r2, #255	@ 0xff
 800cd1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800cd1c:	2380      	movs	r3, #128	@ 0x80
 800cd1e:	045b      	lsls	r3, r3, #17
 800cd20:	617b      	str	r3, [r7, #20]
 800cd22:	e007      	b.n	800cd34 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cd2e:	2380      	movs	r3, #128	@ 0x80
 800cd30:	049b      	lsls	r3, r3, #18
 800cd32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d100      	bne.n	800cd3e <HAL_I2C_Master_Receive_DMA+0xbe>
 800cd3c:	e078      	b.n	800ce30 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d023      	beq.n	800cd8e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd4a:	4a4c      	ldr	r2, [pc, #304]	@ (800ce7c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800cd4c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd52:	4a4b      	ldr	r2, [pc, #300]	@ (800ce80 <HAL_I2C_Master_Receive_DMA+0x200>)
 800cd54:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd62:	2200      	movs	r2, #0
 800cd64:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3324      	adds	r3, #36	@ 0x24
 800cd70:	0019      	movs	r1, r3
 800cd72:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800cd78:	2513      	movs	r5, #19
 800cd7a:	197c      	adds	r4, r7, r5
 800cd7c:	f7ff f888 	bl	800be90 <HAL_DMA_Start_IT>
 800cd80:	0003      	movs	r3, r0
 800cd82:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cd84:	197b      	adds	r3, r7, r5
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d13d      	bne.n	800ce08 <HAL_I2C_Master_Receive_DMA+0x188>
 800cd8c:	e013      	b.n	800cdb6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2241      	movs	r2, #65	@ 0x41
 800cd92:	2120      	movs	r1, #32
 800cd94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2242      	movs	r2, #66	@ 0x42
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cda2:	2280      	movs	r2, #128	@ 0x80
 800cda4:	431a      	orrs	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2240      	movs	r2, #64	@ 0x40
 800cdae:	2100      	movs	r1, #0
 800cdb0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e059      	b.n	800ce6a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdba:	b2da      	uxtb	r2, r3
 800cdbc:	697c      	ldr	r4, [r7, #20]
 800cdbe:	230a      	movs	r3, #10
 800cdc0:	18fb      	adds	r3, r7, r3
 800cdc2:	8819      	ldrh	r1, [r3, #0]
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	4b2f      	ldr	r3, [pc, #188]	@ (800ce84 <HAL_I2C_Master_Receive_DMA+0x204>)
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	0023      	movs	r3, r4
 800cdcc:	f001 fc08 	bl	800e5e0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2240      	movs	r2, #64	@ 0x40
 800cde6:	2100      	movs	r1, #0
 800cde8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2110      	movs	r1, #16
 800cdee:	0018      	movs	r0, r3
 800cdf0:	f001 fc30 	bl	800e654 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2180      	movs	r1, #128	@ 0x80
 800ce00:	0209      	lsls	r1, r1, #8
 800ce02:	430a      	orrs	r2, r1
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	e02d      	b.n	800ce64 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2241      	movs	r2, #65	@ 0x41
 800ce0c:	2120      	movs	r1, #32
 800ce0e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2242      	movs	r2, #66	@ 0x42
 800ce14:	2100      	movs	r1, #0
 800ce16:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce1c:	2210      	movs	r2, #16
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2240      	movs	r2, #64	@ 0x40
 800ce28:	2100      	movs	r1, #0
 800ce2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e01c      	b.n	800ce6a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4a15      	ldr	r2, [pc, #84]	@ (800ce88 <HAL_I2C_Master_Receive_DMA+0x208>)
 800ce34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	2380      	movs	r3, #128	@ 0x80
 800ce3e:	049c      	lsls	r4, r3, #18
 800ce40:	230a      	movs	r3, #10
 800ce42:	18fb      	adds	r3, r7, r3
 800ce44:	8819      	ldrh	r1, [r3, #0]
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	4b0e      	ldr	r3, [pc, #56]	@ (800ce84 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	0023      	movs	r3, r4
 800ce4e:	f001 fbc7 	bl	800e5e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2240      	movs	r2, #64	@ 0x40
 800ce56:	2100      	movs	r1, #0
 800ce58:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	0018      	movs	r0, r3
 800ce60:	f001 fbf8 	bl	800e654 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	e000      	b.n	800ce6a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ce68:	2302      	movs	r3, #2
  }
}
 800ce6a:	0018      	movs	r0, r3
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	b006      	add	sp, #24
 800ce70:	bdb0      	pop	{r4, r5, r7, pc}
 800ce72:	46c0      	nop			@ (mov r8, r8)
 800ce74:	ffff0000 	.word	0xffff0000
 800ce78:	0800d479 	.word	0x0800d479
 800ce7c:	0800e4d1 	.word	0x0800e4d1
 800ce80:	0800e571 	.word	0x0800e571
 800ce84:	80002400 	.word	0x80002400
 800ce88:	0800d025 	.word	0x0800d025

0800ce8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	699b      	ldr	r3, [r3, #24]
 800ce9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d005      	beq.n	800ceb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	68f9      	ldr	r1, [r7, #12]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	4798      	blx	r3
  }
}
 800ceb8:	46c0      	nop			@ (mov r8, r8)
 800ceba:	46bd      	mov	sp, r7
 800cebc:	b004      	add	sp, #16
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	2380      	movs	r3, #128	@ 0x80
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	4013      	ands	r3, r2
 800cee0:	d00e      	beq.n	800cf00 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	2280      	movs	r2, #128	@ 0x80
 800cee6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cee8:	d00a      	beq.n	800cf00 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceee:	2201      	movs	r2, #1
 800cef0:	431a      	orrs	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2280      	movs	r2, #128	@ 0x80
 800cefc:	0052      	lsls	r2, r2, #1
 800cefe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	2380      	movs	r3, #128	@ 0x80
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	4013      	ands	r3, r2
 800cf08:	d00e      	beq.n	800cf28 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	2280      	movs	r2, #128	@ 0x80
 800cf0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cf10:	d00a      	beq.n	800cf28 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf16:	2208      	movs	r2, #8
 800cf18:	431a      	orrs	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2280      	movs	r2, #128	@ 0x80
 800cf24:	00d2      	lsls	r2, r2, #3
 800cf26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	2380      	movs	r3, #128	@ 0x80
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4013      	ands	r3, r2
 800cf30:	d00e      	beq.n	800cf50 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2280      	movs	r2, #128	@ 0x80
 800cf36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cf38:	d00a      	beq.n	800cf50 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf3e:	2202      	movs	r2, #2
 800cf40:	431a      	orrs	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2280      	movs	r2, #128	@ 0x80
 800cf4c:	0092      	lsls	r2, r2, #2
 800cf4e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf54:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	220b      	movs	r2, #11
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	d005      	beq.n	800cf6a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	0011      	movs	r1, r2
 800cf64:	0018      	movs	r0, r3
 800cf66:	f001 f915 	bl	800e194 <I2C_ITError>
  }
}
 800cf6a:	46c0      	nop			@ (mov r8, r8)
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	b006      	add	sp, #24
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800cf7a:	46c0      	nop			@ (mov r8, r8)
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	b002      	add	sp, #8
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800cf8a:	46c0      	nop			@ (mov r8, r8)
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	b002      	add	sp, #8
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b082      	sub	sp, #8
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800cf9a:	46c0      	nop			@ (mov r8, r8)
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	b002      	add	sp, #8
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cfaa:	46c0      	nop			@ (mov r8, r8)
 800cfac:	46bd      	mov	sp, r7
 800cfae:	b002      	add	sp, #8
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	0008      	movs	r0, r1
 800cfbc:	0011      	movs	r1, r2
 800cfbe:	1cfb      	adds	r3, r7, #3
 800cfc0:	1c02      	adds	r2, r0, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
 800cfc4:	003b      	movs	r3, r7
 800cfc6:	1c0a      	adds	r2, r1, #0
 800cfc8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800cfca:	46c0      	nop			@ (mov r8, r8)
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b002      	add	sp, #8
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800cfda:	46c0      	nop			@ (mov r8, r8)
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	b002      	add	sp, #8
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800cfea:	46c0      	nop			@ (mov r8, r8)
 800cfec:	46bd      	mov	sp, r7
 800cfee:	b002      	add	sp, #8
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800cffa:	46c0      	nop			@ (mov r8, r8)
 800cffc:	46bd      	mov	sp, r7
 800cffe:	b002      	add	sp, #8
 800d000:	bd80      	pop	{r7, pc}

0800d002 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d00a:	46c0      	nop			@ (mov r8, r8)
 800d00c:	46bd      	mov	sp, r7
 800d00e:	b002      	add	sp, #8
 800d010:	bd80      	pop	{r7, pc}

0800d012 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b082      	sub	sp, #8
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d01a:	46c0      	nop			@ (mov r8, r8)
 800d01c:	46bd      	mov	sp, r7
 800d01e:	b002      	add	sp, #8
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d024:	b590      	push	{r4, r7, lr}
 800d026:	b089      	sub	sp, #36	@ 0x24
 800d028:	af02      	add	r7, sp, #8
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2240      	movs	r2, #64	@ 0x40
 800d038:	5c9b      	ldrb	r3, [r3, r2]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d101      	bne.n	800d042 <I2C_Master_ISR_IT+0x1e>
 800d03e:	2302      	movs	r3, #2
 800d040:	e113      	b.n	800d26a <I2C_Master_ISR_IT+0x246>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2240      	movs	r2, #64	@ 0x40
 800d046:	2101      	movs	r1, #1
 800d048:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	2210      	movs	r2, #16
 800d04e:	4013      	ands	r3, r2
 800d050:	d012      	beq.n	800d078 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2210      	movs	r2, #16
 800d056:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d058:	d00e      	beq.n	800d078 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2210      	movs	r2, #16
 800d060:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d066:	2204      	movs	r2, #4
 800d068:	431a      	orrs	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	0018      	movs	r0, r3
 800d072:	f001 f9ba 	bl	800e3ea <I2C_Flush_TXDR>
 800d076:	e0e5      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	2204      	movs	r2, #4
 800d07c:	4013      	ands	r3, r2
 800d07e:	d021      	beq.n	800d0c4 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2204      	movs	r2, #4
 800d084:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d086:	d01d      	beq.n	800d0c4 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	2204      	movs	r2, #4
 800d08c:	4393      	bics	r3, r2
 800d08e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d09a:	b2d2      	uxtb	r2, r2
 800d09c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a2:	1c5a      	adds	r2, r3, #1
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d0c2:	e0bf      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	d01c      	beq.n	800d106 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d0d2:	d018      	beq.n	800d106 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d8:	781a      	ldrb	r2, [r3, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d104:	e09e      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2280      	movs	r2, #128	@ 0x80
 800d10a:	4013      	ands	r3, r2
 800d10c:	d100      	bne.n	800d110 <I2C_Master_ISR_IT+0xec>
 800d10e:	e069      	b.n	800d1e4 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2240      	movs	r2, #64	@ 0x40
 800d114:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d116:	d065      	beq.n	800d1e4 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d04a      	beq.n	800d1b8 <I2C_Master_ISR_IT+0x194>
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d126:	2b00      	cmp	r3, #0
 800d128:	d146      	bne.n	800d1b8 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	b29a      	uxth	r2, r3
 800d132:	2112      	movs	r1, #18
 800d134:	187b      	adds	r3, r7, r1
 800d136:	0592      	lsls	r2, r2, #22
 800d138:	0d92      	lsrs	r2, r2, #22
 800d13a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d140:	b29b      	uxth	r3, r3
 800d142:	2bff      	cmp	r3, #255	@ 0xff
 800d144:	d910      	bls.n	800d168 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	22ff      	movs	r2, #255	@ 0xff
 800d14a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d150:	b2da      	uxtb	r2, r3
 800d152:	2380      	movs	r3, #128	@ 0x80
 800d154:	045c      	lsls	r4, r3, #17
 800d156:	187b      	adds	r3, r7, r1
 800d158:	8819      	ldrh	r1, [r3, #0]
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	2300      	movs	r3, #0
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	0023      	movs	r3, r4
 800d162:	f001 fa3d 	bl	800e5e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d166:	e03c      	b.n	800d1e2 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d16c:	b29a      	uxth	r2, r3
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d176:	4a3f      	ldr	r2, [pc, #252]	@ (800d274 <I2C_Master_ISR_IT+0x250>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d00e      	beq.n	800d19a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d180:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d186:	2312      	movs	r3, #18
 800d188:	18fb      	adds	r3, r7, r3
 800d18a:	8819      	ldrh	r1, [r3, #0]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	2300      	movs	r3, #0
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	0023      	movs	r3, r4
 800d194:	f001 fa24 	bl	800e5e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d198:	e023      	b.n	800d1e2 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	2380      	movs	r3, #128	@ 0x80
 800d1a2:	049c      	lsls	r4, r3, #18
 800d1a4:	2312      	movs	r3, #18
 800d1a6:	18fb      	adds	r3, r7, r3
 800d1a8:	8819      	ldrh	r1, [r3, #0]
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	0023      	movs	r3, r4
 800d1b2:	f001 fa15 	bl	800e5e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1b6:	e014      	b.n	800d1e2 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	2380      	movs	r3, #128	@ 0x80
 800d1c0:	049b      	lsls	r3, r3, #18
 800d1c2:	401a      	ands	r2, r3
 800d1c4:	2380      	movs	r3, #128	@ 0x80
 800d1c6:	049b      	lsls	r3, r3, #18
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d004      	beq.n	800d1d6 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	f000 fcf4 	bl	800dbbc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d1d4:	e036      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2140      	movs	r1, #64	@ 0x40
 800d1da:	0018      	movs	r0, r3
 800d1dc:	f000 ffda 	bl	800e194 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d1e0:	e030      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
 800d1e2:	e02f      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2240      	movs	r2, #64	@ 0x40
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	d02b      	beq.n	800d244 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2240      	movs	r2, #64	@ 0x40
 800d1f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d1f2:	d027      	beq.n	800d244 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d11d      	bne.n	800d23a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	2380      	movs	r3, #128	@ 0x80
 800d206:	049b      	lsls	r3, r3, #18
 800d208:	401a      	ands	r2, r3
 800d20a:	2380      	movs	r3, #128	@ 0x80
 800d20c:	049b      	lsls	r3, r3, #18
 800d20e:	429a      	cmp	r2, r3
 800d210:	d018      	beq.n	800d244 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d216:	4a17      	ldr	r2, [pc, #92]	@ (800d274 <I2C_Master_ISR_IT+0x250>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d109      	bne.n	800d230 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2180      	movs	r1, #128	@ 0x80
 800d228:	01c9      	lsls	r1, r1, #7
 800d22a:	430a      	orrs	r2, r1
 800d22c:	605a      	str	r2, [r3, #4]
 800d22e:	e009      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	0018      	movs	r0, r3
 800d234:	f000 fcc2 	bl	800dbbc <I2C_ITMasterSeqCplt>
 800d238:	e004      	b.n	800d244 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2140      	movs	r1, #64	@ 0x40
 800d23e:	0018      	movs	r0, r3
 800d240:	f000 ffa8 	bl	800e194 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2220      	movs	r2, #32
 800d248:	4013      	ands	r3, r2
 800d24a:	d009      	beq.n	800d260 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2220      	movs	r2, #32
 800d250:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d252:	d005      	beq.n	800d260 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	0011      	movs	r1, r2
 800d25a:	0018      	movs	r0, r3
 800d25c:	f000 fd54 	bl	800dd08 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2240      	movs	r2, #64	@ 0x40
 800d264:	2100      	movs	r1, #0
 800d266:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d268:	2300      	movs	r3, #0
}
 800d26a:	0018      	movs	r0, r3
 800d26c:	46bd      	mov	sp, r7
 800d26e:	b007      	add	sp, #28
 800d270:	bd90      	pop	{r4, r7, pc}
 800d272:	46c0      	nop			@ (mov r8, r8)
 800d274:	ffff0000 	.word	0xffff0000

0800d278 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d288:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2240      	movs	r2, #64	@ 0x40
 800d292:	5c9b      	ldrb	r3, [r3, r2]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d101      	bne.n	800d29c <I2C_Slave_ISR_IT+0x24>
 800d298:	2302      	movs	r3, #2
 800d29a:	e0e6      	b.n	800d46a <I2C_Slave_ISR_IT+0x1f2>
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2240      	movs	r2, #64	@ 0x40
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	d009      	beq.n	800d2c0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d2b2:	d005      	beq.n	800d2c0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d2b4:	693a      	ldr	r2, [r7, #16]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	0011      	movs	r1, r2
 800d2ba:	0018      	movs	r0, r3
 800d2bc:	f000 fdf2 	bl	800dea4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	2210      	movs	r2, #16
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	d052      	beq.n	800d36e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2210      	movs	r2, #16
 800d2cc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2ce:	d04e      	beq.n	800d36e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d12d      	bne.n	800d336 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2241      	movs	r2, #65	@ 0x41
 800d2de:	5c9b      	ldrb	r3, [r3, r2]
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b28      	cmp	r3, #40	@ 0x28
 800d2e4:	d10b      	bne.n	800d2fe <I2C_Slave_ISR_IT+0x86>
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	2380      	movs	r3, #128	@ 0x80
 800d2ea:	049b      	lsls	r3, r3, #18
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d106      	bne.n	800d2fe <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d2f0:	693a      	ldr	r2, [r7, #16]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	0011      	movs	r1, r2
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	f000 fef4 	bl	800e0e4 <I2C_ITListenCplt>
 800d2fc:	e036      	b.n	800d36c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2241      	movs	r2, #65	@ 0x41
 800d302:	5c9b      	ldrb	r3, [r3, r2]
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b29      	cmp	r3, #41	@ 0x29
 800d308:	d110      	bne.n	800d32c <I2C_Slave_ISR_IT+0xb4>
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	4a59      	ldr	r2, [pc, #356]	@ (800d474 <I2C_Slave_ISR_IT+0x1fc>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d00c      	beq.n	800d32c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2210      	movs	r2, #16
 800d318:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	0018      	movs	r0, r3
 800d31e:	f001 f864 	bl	800e3ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	0018      	movs	r0, r3
 800d326:	f000 fc8b 	bl	800dc40 <I2C_ITSlaveSeqCplt>
 800d32a:	e01f      	b.n	800d36c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2210      	movs	r2, #16
 800d332:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d334:	e091      	b.n	800d45a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2210      	movs	r2, #16
 800d33c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d342:	2204      	movs	r2, #4
 800d344:	431a      	orrs	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d005      	beq.n	800d35c <I2C_Slave_ISR_IT+0xe4>
 800d350:	697a      	ldr	r2, [r7, #20]
 800d352:	2380      	movs	r3, #128	@ 0x80
 800d354:	045b      	lsls	r3, r3, #17
 800d356:	429a      	cmp	r2, r3
 800d358:	d000      	beq.n	800d35c <I2C_Slave_ISR_IT+0xe4>
 800d35a:	e07e      	b.n	800d45a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	0011      	movs	r1, r2
 800d364:	0018      	movs	r0, r3
 800d366:	f000 ff15 	bl	800e194 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d36a:	e076      	b.n	800d45a <I2C_Slave_ISR_IT+0x1e2>
 800d36c:	e075      	b.n	800d45a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	2204      	movs	r2, #4
 800d372:	4013      	ands	r3, r2
 800d374:	d02f      	beq.n	800d3d6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2204      	movs	r2, #4
 800d37a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d37c:	d02b      	beq.n	800d3d6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d382:	b29b      	uxth	r3, r3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d018      	beq.n	800d3ba <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d392:	b2d2      	uxtb	r2, r2
 800d394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39a:	1c5a      	adds	r2, r3, #1
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	3b01      	subs	r3, #1
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d14c      	bne.n	800d45e <I2C_Slave_ISR_IT+0x1e6>
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	4a2b      	ldr	r2, [pc, #172]	@ (800d474 <I2C_Slave_ISR_IT+0x1fc>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d048      	beq.n	800d45e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	f000 fc36 	bl	800dc40 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d3d4:	e043      	b.n	800d45e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	2208      	movs	r2, #8
 800d3da:	4013      	ands	r3, r2
 800d3dc:	d00a      	beq.n	800d3f4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2208      	movs	r2, #8
 800d3e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d3e4:	d006      	beq.n	800d3f4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	0011      	movs	r1, r2
 800d3ec:	0018      	movs	r0, r3
 800d3ee:	f000 fb41 	bl	800da74 <I2C_ITAddrCplt>
 800d3f2:	e035      	b.n	800d460 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	d031      	beq.n	800d460 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2202      	movs	r2, #2
 800d400:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d402:	d02d      	beq.n	800d460 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d408:	b29b      	uxth	r3, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d018      	beq.n	800d440 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d412:	781a      	ldrb	r2, [r3, #0]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d41e:	1c5a      	adds	r2, r3, #1
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d428:	b29b      	uxth	r3, r3
 800d42a:	3b01      	subs	r3, #1
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d436:	3b01      	subs	r3, #1
 800d438:	b29a      	uxth	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d43e:	e00f      	b.n	800d460 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	2380      	movs	r3, #128	@ 0x80
 800d444:	045b      	lsls	r3, r3, #17
 800d446:	429a      	cmp	r2, r3
 800d448:	d002      	beq.n	800d450 <I2C_Slave_ISR_IT+0x1d8>
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d107      	bne.n	800d460 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	0018      	movs	r0, r3
 800d454:	f000 fbf4 	bl	800dc40 <I2C_ITSlaveSeqCplt>
 800d458:	e002      	b.n	800d460 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800d45a:	46c0      	nop			@ (mov r8, r8)
 800d45c:	e000      	b.n	800d460 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800d45e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2240      	movs	r2, #64	@ 0x40
 800d464:	2100      	movs	r1, #0
 800d466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	0018      	movs	r0, r3
 800d46c:	46bd      	mov	sp, r7
 800d46e:	b006      	add	sp, #24
 800d470:	bd80      	pop	{r7, pc}
 800d472:	46c0      	nop			@ (mov r8, r8)
 800d474:	ffff0000 	.word	0xffff0000

0800d478 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800d478:	b590      	push	{r4, r7, lr}
 800d47a:	b089      	sub	sp, #36	@ 0x24
 800d47c:	af02      	add	r7, sp, #8
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2240      	movs	r2, #64	@ 0x40
 800d488:	5c9b      	ldrb	r3, [r3, r2]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d101      	bne.n	800d492 <I2C_Master_ISR_DMA+0x1a>
 800d48e:	2302      	movs	r3, #2
 800d490:	e0e7      	b.n	800d662 <I2C_Master_ISR_DMA+0x1ea>
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2240      	movs	r2, #64	@ 0x40
 800d496:	2101      	movs	r1, #1
 800d498:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2210      	movs	r2, #16
 800d49e:	4013      	ands	r3, r2
 800d4a0:	d017      	beq.n	800d4d2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2210      	movs	r2, #16
 800d4a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d4a8:	d013      	beq.n	800d4d2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2210      	movs	r2, #16
 800d4b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4b6:	2204      	movs	r2, #4
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2120      	movs	r1, #32
 800d4c2:	0018      	movs	r0, r3
 800d4c4:	f001 f8c6 	bl	800e654 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	f000 ff8d 	bl	800e3ea <I2C_Flush_TXDR>
 800d4d0:	e0c2      	b.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2280      	movs	r2, #128	@ 0x80
 800d4d6:	4013      	ands	r3, r2
 800d4d8:	d100      	bne.n	800d4dc <I2C_Master_ISR_DMA+0x64>
 800d4da:	e07c      	b.n	800d5d6 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2240      	movs	r2, #64	@ 0x40
 800d4e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d4e2:	d100      	bne.n	800d4e6 <I2C_Master_ISR_DMA+0x6e>
 800d4e4:	e077      	b.n	800d5d6 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2140      	movs	r1, #64	@ 0x40
 800d4f2:	438a      	bics	r2, r1
 800d4f4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d055      	beq.n	800d5ac <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	b29a      	uxth	r2, r3
 800d508:	2312      	movs	r3, #18
 800d50a:	18fb      	adds	r3, r7, r3
 800d50c:	0592      	lsls	r2, r2, #22
 800d50e:	0d92      	lsrs	r2, r2, #22
 800d510:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d516:	b29b      	uxth	r3, r3
 800d518:	2bff      	cmp	r3, #255	@ 0xff
 800d51a:	d906      	bls.n	800d52a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	22ff      	movs	r2, #255	@ 0xff
 800d520:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800d522:	2380      	movs	r3, #128	@ 0x80
 800d524:	045b      	lsls	r3, r3, #17
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	e010      	b.n	800d54c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d52e:	b29a      	uxth	r2, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d538:	4a4c      	ldr	r2, [pc, #304]	@ (800d66c <I2C_Master_ISR_DMA+0x1f4>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d003      	beq.n	800d546 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d542:	617b      	str	r3, [r7, #20]
 800d544:	e002      	b.n	800d54c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800d546:	2380      	movs	r3, #128	@ 0x80
 800d548:	049b      	lsls	r3, r3, #18
 800d54a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d550:	b2da      	uxtb	r2, r3
 800d552:	697c      	ldr	r4, [r7, #20]
 800d554:	2312      	movs	r3, #18
 800d556:	18fb      	adds	r3, r7, r3
 800d558:	8819      	ldrh	r1, [r3, #0]
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	2300      	movs	r3, #0
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	0023      	movs	r3, r4
 800d562:	f001 f83d 	bl	800e5e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	b29a      	uxth	r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2241      	movs	r2, #65	@ 0x41
 800d57c:	5c9b      	ldrb	r3, [r3, r2]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b22      	cmp	r3, #34	@ 0x22
 800d582:	d109      	bne.n	800d598 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2180      	movs	r1, #128	@ 0x80
 800d590:	0209      	lsls	r1, r1, #8
 800d592:	430a      	orrs	r2, r1
 800d594:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d596:	e05f      	b.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2180      	movs	r1, #128	@ 0x80
 800d5a4:	01c9      	lsls	r1, r1, #7
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d5aa:	e055      	b.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	2380      	movs	r3, #128	@ 0x80
 800d5b4:	049b      	lsls	r3, r3, #18
 800d5b6:	401a      	ands	r2, r3
 800d5b8:	2380      	movs	r3, #128	@ 0x80
 800d5ba:	049b      	lsls	r3, r3, #18
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d004      	beq.n	800d5ca <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	0018      	movs	r0, r3
 800d5c4:	f000 fafa 	bl	800dbbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800d5c8:	e046      	b.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2140      	movs	r1, #64	@ 0x40
 800d5ce:	0018      	movs	r0, r3
 800d5d0:	f000 fde0 	bl	800e194 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d5d4:	e040      	b.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	2240      	movs	r2, #64	@ 0x40
 800d5da:	4013      	ands	r3, r2
 800d5dc:	d02c      	beq.n	800d638 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2240      	movs	r2, #64	@ 0x40
 800d5e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d5e4:	d028      	beq.n	800d638 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d11d      	bne.n	800d62c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	2380      	movs	r3, #128	@ 0x80
 800d5f8:	049b      	lsls	r3, r3, #18
 800d5fa:	401a      	ands	r2, r3
 800d5fc:	2380      	movs	r3, #128	@ 0x80
 800d5fe:	049b      	lsls	r3, r3, #18
 800d600:	429a      	cmp	r2, r3
 800d602:	d028      	beq.n	800d656 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d608:	4a18      	ldr	r2, [pc, #96]	@ (800d66c <I2C_Master_ISR_DMA+0x1f4>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d109      	bne.n	800d622 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2180      	movs	r1, #128	@ 0x80
 800d61a:	01c9      	lsls	r1, r1, #7
 800d61c:	430a      	orrs	r2, r1
 800d61e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800d620:	e019      	b.n	800d656 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	0018      	movs	r0, r3
 800d626:	f000 fac9 	bl	800dbbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800d62a:	e014      	b.n	800d656 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2140      	movs	r1, #64	@ 0x40
 800d630:	0018      	movs	r0, r3
 800d632:	f000 fdaf 	bl	800e194 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d636:	e00e      	b.n	800d656 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2220      	movs	r2, #32
 800d63c:	4013      	ands	r3, r2
 800d63e:	d00b      	beq.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2220      	movs	r2, #32
 800d644:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d646:	d007      	beq.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	0011      	movs	r1, r2
 800d64e:	0018      	movs	r0, r3
 800d650:	f000 fb5a 	bl	800dd08 <I2C_ITMasterCplt>
 800d654:	e000      	b.n	800d658 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800d656:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2240      	movs	r2, #64	@ 0x40
 800d65c:	2100      	movs	r1, #0
 800d65e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	0018      	movs	r0, r3
 800d664:	46bd      	mov	sp, r7
 800d666:	b007      	add	sp, #28
 800d668:	bd90      	pop	{r4, r7, pc}
 800d66a:	46c0      	nop			@ (mov r8, r8)
 800d66c:	ffff0000 	.word	0xffff0000

0800d670 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800d670:	b590      	push	{r4, r7, lr}
 800d672:	b089      	sub	sp, #36	@ 0x24
 800d674:	af02      	add	r7, sp, #8
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800d67c:	4b88      	ldr	r3, [pc, #544]	@ (800d8a0 <I2C_Mem_ISR_DMA+0x230>)
 800d67e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2240      	movs	r2, #64	@ 0x40
 800d684:	5c9b      	ldrb	r3, [r3, r2]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d101      	bne.n	800d68e <I2C_Mem_ISR_DMA+0x1e>
 800d68a:	2302      	movs	r3, #2
 800d68c:	e104      	b.n	800d898 <I2C_Mem_ISR_DMA+0x228>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2240      	movs	r2, #64	@ 0x40
 800d692:	2101      	movs	r1, #1
 800d694:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2210      	movs	r2, #16
 800d69a:	4013      	ands	r3, r2
 800d69c:	d017      	beq.n	800d6ce <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2210      	movs	r2, #16
 800d6a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d6a4:	d013      	beq.n	800d6ce <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2210      	movs	r2, #16
 800d6ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6b2:	2204      	movs	r2, #4
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2120      	movs	r1, #32
 800d6be:	0018      	movs	r0, r3
 800d6c0:	f000 ffc8 	bl	800e654 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	0018      	movs	r0, r3
 800d6c8:	f000 fe8f 	bl	800e3ea <I2C_Flush_TXDR>
 800d6cc:	e0df      	b.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	d00d      	beq.n	800d6f2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2202      	movs	r2, #2
 800d6da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d6dc:	d009      	beq.n	800d6f2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d6e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	4252      	negs	r2, r2
 800d6ee:	651a      	str	r2, [r3, #80]	@ 0x50
 800d6f0:	e0cd      	b.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	2280      	movs	r2, #128	@ 0x80
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	d05e      	beq.n	800d7b8 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2240      	movs	r2, #64	@ 0x40
 800d6fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d700:	d05a      	beq.n	800d7b8 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2110      	movs	r1, #16
 800d706:	0018      	movs	r0, r3
 800d708:	f000 ffa4 	bl	800e654 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d710:	b29b      	uxth	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d04a      	beq.n	800d7ac <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	2bff      	cmp	r3, #255	@ 0xff
 800d71e:	d910      	bls.n	800d742 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	22ff      	movs	r2, #255	@ 0xff
 800d724:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d72a:	b299      	uxth	r1, r3
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d730:	b2da      	uxtb	r2, r3
 800d732:	2380      	movs	r3, #128	@ 0x80
 800d734:	045b      	lsls	r3, r3, #17
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	2400      	movs	r4, #0
 800d73a:	9400      	str	r4, [sp, #0]
 800d73c:	f000 ff50 	bl	800e5e0 <I2C_TransferConfig>
 800d740:	e011      	b.n	800d766 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d750:	b299      	uxth	r1, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d756:	b2da      	uxtb	r2, r3
 800d758:	2380      	movs	r3, #128	@ 0x80
 800d75a:	049b      	lsls	r3, r3, #18
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	2400      	movs	r4, #0
 800d760:	9400      	str	r4, [sp, #0]
 800d762:	f000 ff3d 	bl	800e5e0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	b29a      	uxth	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2241      	movs	r2, #65	@ 0x41
 800d77c:	5c9b      	ldrb	r3, [r3, r2]
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b22      	cmp	r3, #34	@ 0x22
 800d782:	d109      	bne.n	800d798 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2180      	movs	r1, #128	@ 0x80
 800d790:	0209      	lsls	r1, r1, #8
 800d792:	430a      	orrs	r2, r1
 800d794:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d796:	e07a      	b.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2180      	movs	r1, #128	@ 0x80
 800d7a4:	01c9      	lsls	r1, r1, #7
 800d7a6:	430a      	orrs	r2, r1
 800d7a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d7aa:	e070      	b.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2140      	movs	r1, #64	@ 0x40
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	f000 fcef 	bl	800e194 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d7b6:	e06a      	b.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2240      	movs	r2, #64	@ 0x40
 800d7bc:	4013      	ands	r3, r2
 800d7be:	d058      	beq.n	800d872 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2240      	movs	r2, #64	@ 0x40
 800d7c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d7c6:	d054      	beq.n	800d872 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2241      	movs	r2, #65	@ 0x41
 800d7cc:	5c9b      	ldrb	r3, [r3, r2]
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b22      	cmp	r3, #34	@ 0x22
 800d7d2:	d101      	bne.n	800d7d8 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800d7d4:	4b33      	ldr	r3, [pc, #204]	@ (800d8a4 <I2C_Mem_ISR_DMA+0x234>)
 800d7d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	2bff      	cmp	r3, #255	@ 0xff
 800d7e0:	d911      	bls.n	800d806 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	22ff      	movs	r2, #255	@ 0xff
 800d7e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7ec:	b299      	uxth	r1, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	2380      	movs	r3, #128	@ 0x80
 800d7f6:	045c      	lsls	r4, r3, #17
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	0023      	movs	r3, r4
 800d800:	f000 feee 	bl	800e5e0 <I2C_TransferConfig>
 800d804:	e012      	b.n	800d82c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d814:	b299      	uxth	r1, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	2380      	movs	r3, #128	@ 0x80
 800d81e:	049c      	lsls	r4, r3, #18
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	0023      	movs	r3, r4
 800d828:	f000 feda 	bl	800e5e0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d830:	b29a      	uxth	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	b29a      	uxth	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2241      	movs	r2, #65	@ 0x41
 800d842:	5c9b      	ldrb	r3, [r3, r2]
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b22      	cmp	r3, #34	@ 0x22
 800d848:	d109      	bne.n	800d85e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2180      	movs	r1, #128	@ 0x80
 800d856:	0209      	lsls	r1, r1, #8
 800d858:	430a      	orrs	r2, r1
 800d85a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d85c:	e017      	b.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2180      	movs	r1, #128	@ 0x80
 800d86a:	01c9      	lsls	r1, r1, #7
 800d86c:	430a      	orrs	r2, r1
 800d86e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d870:	e00d      	b.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2220      	movs	r2, #32
 800d876:	4013      	ands	r3, r2
 800d878:	d009      	beq.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2220      	movs	r2, #32
 800d87e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d880:	d005      	beq.n	800d88e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d882:	68ba      	ldr	r2, [r7, #8]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	0011      	movs	r1, r2
 800d888:	0018      	movs	r0, r3
 800d88a:	f000 fa3d 	bl	800dd08 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2240      	movs	r2, #64	@ 0x40
 800d892:	2100      	movs	r1, #0
 800d894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d896:	2300      	movs	r3, #0
}
 800d898:	0018      	movs	r0, r3
 800d89a:	46bd      	mov	sp, r7
 800d89c:	b007      	add	sp, #28
 800d89e:	bd90      	pop	{r4, r7, pc}
 800d8a0:	80002000 	.word	0x80002000
 800d8a4:	80002400 	.word	0x80002400

0800d8a8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2240      	movs	r2, #64	@ 0x40
 800d8c2:	5c9b      	ldrb	r3, [r3, r2]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d101      	bne.n	800d8cc <I2C_Slave_ISR_DMA+0x24>
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	e0cd      	b.n	800da68 <I2C_Slave_ISR_DMA+0x1c0>
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2240      	movs	r2, #64	@ 0x40
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	2220      	movs	r2, #32
 800d8d8:	4013      	ands	r3, r2
 800d8da:	d009      	beq.n	800d8f0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2220      	movs	r2, #32
 800d8e0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d8e2:	d005      	beq.n	800d8f0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	0011      	movs	r1, r2
 800d8ea:	0018      	movs	r0, r3
 800d8ec:	f000 fada 	bl	800dea4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2210      	movs	r2, #16
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	d100      	bne.n	800d8fa <I2C_Slave_ISR_DMA+0x52>
 800d8f8:	e0a3      	b.n	800da42 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2210      	movs	r2, #16
 800d8fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d900:	d100      	bne.n	800d904 <I2C_Slave_ISR_DMA+0x5c>
 800d902:	e09e      	b.n	800da42 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	2380      	movs	r3, #128	@ 0x80
 800d908:	01db      	lsls	r3, r3, #7
 800d90a:	4013      	ands	r3, r2
 800d90c:	d105      	bne.n	800d91a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	2380      	movs	r3, #128	@ 0x80
 800d912:	021b      	lsls	r3, r3, #8
 800d914:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d916:	d100      	bne.n	800d91a <I2C_Slave_ISR_DMA+0x72>
 800d918:	e08c      	b.n	800da34 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00c      	beq.n	800d93c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	2380      	movs	r3, #128	@ 0x80
 800d926:	021b      	lsls	r3, r3, #8
 800d928:	4013      	ands	r3, r2
 800d92a:	d007      	beq.n	800d93c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d101      	bne.n	800d93c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800d938:	2301      	movs	r3, #1
 800d93a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00c      	beq.n	800d95e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	2380      	movs	r3, #128	@ 0x80
 800d948:	01db      	lsls	r3, r3, #7
 800d94a:	4013      	ands	r3, r2
 800d94c:	d007      	beq.n	800d95e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800d95a:	2301      	movs	r3, #1
 800d95c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d12d      	bne.n	800d9c0 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2241      	movs	r2, #65	@ 0x41
 800d968:	5c9b      	ldrb	r3, [r3, r2]
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	2b28      	cmp	r3, #40	@ 0x28
 800d96e:	d10b      	bne.n	800d988 <I2C_Slave_ISR_DMA+0xe0>
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	2380      	movs	r3, #128	@ 0x80
 800d974:	049b      	lsls	r3, r3, #18
 800d976:	429a      	cmp	r2, r3
 800d978:	d106      	bne.n	800d988 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	0011      	movs	r1, r2
 800d980:	0018      	movs	r0, r3
 800d982:	f000 fbaf 	bl	800e0e4 <I2C_ITListenCplt>
 800d986:	e054      	b.n	800da32 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2241      	movs	r2, #65	@ 0x41
 800d98c:	5c9b      	ldrb	r3, [r3, r2]
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b29      	cmp	r3, #41	@ 0x29
 800d992:	d110      	bne.n	800d9b6 <I2C_Slave_ISR_DMA+0x10e>
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	4a36      	ldr	r2, [pc, #216]	@ (800da70 <I2C_Slave_ISR_DMA+0x1c8>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d00c      	beq.n	800d9b6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2210      	movs	r2, #16
 800d9a2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	0018      	movs	r0, r3
 800d9a8:	f000 fd1f 	bl	800e3ea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f000 f946 	bl	800dc40 <I2C_ITSlaveSeqCplt>
 800d9b4:	e03d      	b.n	800da32 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2210      	movs	r2, #16
 800d9bc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800d9be:	e03e      	b.n	800da3e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2210      	movs	r2, #16
 800d9c6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9cc:	2204      	movs	r2, #4
 800d9ce:	431a      	orrs	r2, r3
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800d9d4:	2317      	movs	r3, #23
 800d9d6:	18fb      	adds	r3, r7, r3
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	2141      	movs	r1, #65	@ 0x41
 800d9dc:	5c52      	ldrb	r2, [r2, r1]
 800d9de:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d004      	beq.n	800d9f0 <I2C_Slave_ISR_DMA+0x148>
 800d9e6:	69ba      	ldr	r2, [r7, #24]
 800d9e8:	2380      	movs	r3, #128	@ 0x80
 800d9ea:	045b      	lsls	r3, r3, #17
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d126      	bne.n	800da3e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d9f0:	2217      	movs	r2, #23
 800d9f2:	18bb      	adds	r3, r7, r2
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	2b21      	cmp	r3, #33	@ 0x21
 800d9f8:	d003      	beq.n	800da02 <I2C_Slave_ISR_DMA+0x15a>
 800d9fa:	18bb      	adds	r3, r7, r2
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	2b29      	cmp	r3, #41	@ 0x29
 800da00:	d103      	bne.n	800da0a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2221      	movs	r2, #33	@ 0x21
 800da06:	631a      	str	r2, [r3, #48]	@ 0x30
 800da08:	e00b      	b.n	800da22 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800da0a:	2217      	movs	r2, #23
 800da0c:	18bb      	adds	r3, r7, r2
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b22      	cmp	r3, #34	@ 0x22
 800da12:	d003      	beq.n	800da1c <I2C_Slave_ISR_DMA+0x174>
 800da14:	18bb      	adds	r3, r7, r2
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	2b2a      	cmp	r3, #42	@ 0x2a
 800da1a:	d102      	bne.n	800da22 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2222      	movs	r2, #34	@ 0x22
 800da20:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	0011      	movs	r1, r2
 800da2a:	0018      	movs	r0, r3
 800da2c:	f000 fbb2 	bl	800e194 <I2C_ITError>
      if (treatdmanack == 1U)
 800da30:	e005      	b.n	800da3e <I2C_Slave_ISR_DMA+0x196>
 800da32:	e004      	b.n	800da3e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2210      	movs	r2, #16
 800da3a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800da3c:	e00f      	b.n	800da5e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800da3e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800da40:	e00d      	b.n	800da5e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	2208      	movs	r2, #8
 800da46:	4013      	ands	r3, r2
 800da48:	d009      	beq.n	800da5e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2208      	movs	r2, #8
 800da4e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800da50:	d005      	beq.n	800da5e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	0011      	movs	r1, r2
 800da58:	0018      	movs	r0, r3
 800da5a:	f000 f80b 	bl	800da74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2240      	movs	r2, #64	@ 0x40
 800da62:	2100      	movs	r1, #0
 800da64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	0018      	movs	r0, r3
 800da6a:	46bd      	mov	sp, r7
 800da6c:	b008      	add	sp, #32
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	ffff0000 	.word	0xffff0000

0800da74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800da74:	b5b0      	push	{r4, r5, r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2241      	movs	r2, #65	@ 0x41
 800da82:	5c9b      	ldrb	r3, [r3, r2]
 800da84:	b2db      	uxtb	r3, r3
 800da86:	001a      	movs	r2, r3
 800da88:	2328      	movs	r3, #40	@ 0x28
 800da8a:	4013      	ands	r3, r2
 800da8c:	2b28      	cmp	r3, #40	@ 0x28
 800da8e:	d000      	beq.n	800da92 <I2C_ITAddrCplt+0x1e>
 800da90:	e088      	b.n	800dba4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	0c1b      	lsrs	r3, r3, #16
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	250f      	movs	r5, #15
 800da9e:	197b      	adds	r3, r7, r5
 800daa0:	2101      	movs	r1, #1
 800daa2:	400a      	ands	r2, r1
 800daa4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	0c1b      	lsrs	r3, r3, #16
 800daae:	b29a      	uxth	r2, r3
 800dab0:	200c      	movs	r0, #12
 800dab2:	183b      	adds	r3, r7, r0
 800dab4:	21fe      	movs	r1, #254	@ 0xfe
 800dab6:	400a      	ands	r2, r1
 800dab8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	240a      	movs	r4, #10
 800dac4:	193b      	adds	r3, r7, r4
 800dac6:	0592      	lsls	r2, r2, #22
 800dac8:	0d92      	lsrs	r2, r2, #22
 800daca:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	2308      	movs	r3, #8
 800dad6:	18fb      	adds	r3, r7, r3
 800dad8:	21fe      	movs	r1, #254	@ 0xfe
 800dada:	400a      	ands	r2, r1
 800dadc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d148      	bne.n	800db78 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800dae6:	0021      	movs	r1, r4
 800dae8:	187b      	adds	r3, r7, r1
 800daea:	881b      	ldrh	r3, [r3, #0]
 800daec:	09db      	lsrs	r3, r3, #7
 800daee:	b29a      	uxth	r2, r3
 800daf0:	183b      	adds	r3, r7, r0
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	4053      	eors	r3, r2
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	001a      	movs	r2, r3
 800dafa:	2306      	movs	r3, #6
 800dafc:	4013      	ands	r3, r2
 800dafe:	d120      	bne.n	800db42 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800db00:	183b      	adds	r3, r7, r0
 800db02:	187a      	adds	r2, r7, r1
 800db04:	8812      	ldrh	r2, [r2, #0]
 800db06:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db0c:	1c5a      	adds	r2, r3, #1
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db16:	2b02      	cmp	r3, #2
 800db18:	d14c      	bne.n	800dbb4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2208      	movs	r2, #8
 800db26:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2240      	movs	r2, #64	@ 0x40
 800db2c:	2100      	movs	r1, #0
 800db2e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800db30:	183b      	adds	r3, r7, r0
 800db32:	881a      	ldrh	r2, [r3, #0]
 800db34:	197b      	adds	r3, r7, r5
 800db36:	7819      	ldrb	r1, [r3, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	0018      	movs	r0, r3
 800db3c:	f7ff fa39 	bl	800cfb2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800db40:	e038      	b.n	800dbb4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800db42:	240c      	movs	r4, #12
 800db44:	193b      	adds	r3, r7, r4
 800db46:	2208      	movs	r2, #8
 800db48:	18ba      	adds	r2, r7, r2
 800db4a:	8812      	ldrh	r2, [r2, #0]
 800db4c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800db4e:	2380      	movs	r3, #128	@ 0x80
 800db50:	021a      	lsls	r2, r3, #8
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	0011      	movs	r1, r2
 800db56:	0018      	movs	r0, r3
 800db58:	f000 fe0a 	bl	800e770 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2240      	movs	r2, #64	@ 0x40
 800db60:	2100      	movs	r1, #0
 800db62:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800db64:	193b      	adds	r3, r7, r4
 800db66:	881a      	ldrh	r2, [r3, #0]
 800db68:	230f      	movs	r3, #15
 800db6a:	18fb      	adds	r3, r7, r3
 800db6c:	7819      	ldrb	r1, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	0018      	movs	r0, r3
 800db72:	f7ff fa1e 	bl	800cfb2 <HAL_I2C_AddrCallback>
}
 800db76:	e01d      	b.n	800dbb4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800db78:	2380      	movs	r3, #128	@ 0x80
 800db7a:	021a      	lsls	r2, r3, #8
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	0011      	movs	r1, r2
 800db80:	0018      	movs	r0, r3
 800db82:	f000 fdf5 	bl	800e770 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2240      	movs	r2, #64	@ 0x40
 800db8a:	2100      	movs	r1, #0
 800db8c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800db8e:	230c      	movs	r3, #12
 800db90:	18fb      	adds	r3, r7, r3
 800db92:	881a      	ldrh	r2, [r3, #0]
 800db94:	230f      	movs	r3, #15
 800db96:	18fb      	adds	r3, r7, r3
 800db98:	7819      	ldrb	r1, [r3, #0]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	0018      	movs	r0, r3
 800db9e:	f7ff fa08 	bl	800cfb2 <HAL_I2C_AddrCallback>
}
 800dba2:	e007      	b.n	800dbb4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2208      	movs	r2, #8
 800dbaa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2240      	movs	r2, #64	@ 0x40
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	5499      	strb	r1, [r3, r2]
}
 800dbb4:	46c0      	nop			@ (mov r8, r8)
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	b004      	add	sp, #16
 800dbba:	bdb0      	pop	{r4, r5, r7, pc}

0800dbbc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2242      	movs	r2, #66	@ 0x42
 800dbc8:	2100      	movs	r1, #0
 800dbca:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2241      	movs	r2, #65	@ 0x41
 800dbd0:	5c9b      	ldrb	r3, [r3, r2]
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	2b21      	cmp	r3, #33	@ 0x21
 800dbd6:	d117      	bne.n	800dc08 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2241      	movs	r2, #65	@ 0x41
 800dbdc:	2120      	movs	r1, #32
 800dbde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2211      	movs	r2, #17
 800dbe4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2101      	movs	r1, #1
 800dbf0:	0018      	movs	r0, r3
 800dbf2:	f000 fdbd 	bl	800e770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2240      	movs	r2, #64	@ 0x40
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	0018      	movs	r0, r3
 800dc02:	f7ff f9b6 	bl	800cf72 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dc06:	e016      	b.n	800dc36 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2241      	movs	r2, #65	@ 0x41
 800dc0c:	2120      	movs	r1, #32
 800dc0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2212      	movs	r2, #18
 800dc14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2102      	movs	r1, #2
 800dc20:	0018      	movs	r0, r3
 800dc22:	f000 fda5 	bl	800e770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2240      	movs	r2, #64	@ 0x40
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	0018      	movs	r0, r3
 800dc32:	f7ff f9a6 	bl	800cf82 <HAL_I2C_MasterRxCpltCallback>
}
 800dc36:	46c0      	nop			@ (mov r8, r8)
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	b002      	add	sp, #8
 800dc3c:	bd80      	pop	{r7, pc}
	...

0800dc40 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2242      	movs	r2, #66	@ 0x42
 800dc54:	2100      	movs	r1, #0
 800dc56:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	2380      	movs	r3, #128	@ 0x80
 800dc5c:	01db      	lsls	r3, r3, #7
 800dc5e:	4013      	ands	r3, r2
 800dc60:	d008      	beq.n	800dc74 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4924      	ldr	r1, [pc, #144]	@ (800dd00 <I2C_ITSlaveSeqCplt+0xc0>)
 800dc6e:	400a      	ands	r2, r1
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e00c      	b.n	800dc8e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	2380      	movs	r3, #128	@ 0x80
 800dc78:	021b      	lsls	r3, r3, #8
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	d007      	beq.n	800dc8e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	491e      	ldr	r1, [pc, #120]	@ (800dd04 <I2C_ITSlaveSeqCplt+0xc4>)
 800dc8a:	400a      	ands	r2, r1
 800dc8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2241      	movs	r2, #65	@ 0x41
 800dc92:	5c9b      	ldrb	r3, [r3, r2]
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	2b29      	cmp	r3, #41	@ 0x29
 800dc98:	d114      	bne.n	800dcc4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2241      	movs	r2, #65	@ 0x41
 800dc9e:	2128      	movs	r1, #40	@ 0x28
 800dca0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2221      	movs	r2, #33	@ 0x21
 800dca6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2101      	movs	r1, #1
 800dcac:	0018      	movs	r0, r3
 800dcae:	f000 fd5f 	bl	800e770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2240      	movs	r2, #64	@ 0x40
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	0018      	movs	r0, r3
 800dcbe:	f7ff f968 	bl	800cf92 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dcc2:	e019      	b.n	800dcf8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2241      	movs	r2, #65	@ 0x41
 800dcc8:	5c9b      	ldrb	r3, [r3, r2]
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcce:	d113      	bne.n	800dcf8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2241      	movs	r2, #65	@ 0x41
 800dcd4:	2128      	movs	r1, #40	@ 0x28
 800dcd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2222      	movs	r2, #34	@ 0x22
 800dcdc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2102      	movs	r1, #2
 800dce2:	0018      	movs	r0, r3
 800dce4:	f000 fd44 	bl	800e770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2240      	movs	r2, #64	@ 0x40
 800dcec:	2100      	movs	r1, #0
 800dcee:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	f7ff f955 	bl	800cfa2 <HAL_I2C_SlaveRxCpltCallback>
}
 800dcf8:	46c0      	nop			@ (mov r8, r8)
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	b004      	add	sp, #16
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	ffffbfff 	.word	0xffffbfff
 800dd04:	ffff7fff 	.word	0xffff7fff

0800dd08 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2220      	movs	r2, #32
 800dd1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2241      	movs	r2, #65	@ 0x41
 800dd22:	5c9b      	ldrb	r3, [r3, r2]
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	2b21      	cmp	r3, #33	@ 0x21
 800dd28:	d108      	bne.n	800dd3c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2101      	movs	r1, #1
 800dd2e:	0018      	movs	r0, r3
 800dd30:	f000 fd1e 	bl	800e770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2211      	movs	r2, #17
 800dd38:	631a      	str	r2, [r3, #48]	@ 0x30
 800dd3a:	e00d      	b.n	800dd58 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2241      	movs	r2, #65	@ 0x41
 800dd40:	5c9b      	ldrb	r3, [r3, r2]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	2b22      	cmp	r3, #34	@ 0x22
 800dd46:	d107      	bne.n	800dd58 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2102      	movs	r1, #2
 800dd4c:	0018      	movs	r0, r3
 800dd4e:	f000 fd0f 	bl	800e770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2212      	movs	r2, #18
 800dd56:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	685a      	ldr	r2, [r3, #4]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	494e      	ldr	r1, [pc, #312]	@ (800de9c <I2C_ITMasterCplt+0x194>)
 800dd64:	400a      	ands	r2, r1
 800dd66:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a4b      	ldr	r2, [pc, #300]	@ (800dea0 <I2C_ITMasterCplt+0x198>)
 800dd72:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2210      	movs	r2, #16
 800dd78:	4013      	ands	r3, r2
 800dd7a:	d009      	beq.n	800dd90 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2210      	movs	r2, #16
 800dd82:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd88:	2204      	movs	r2, #4
 800dd8a:	431a      	orrs	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2241      	movs	r2, #65	@ 0x41
 800dd94:	5c9b      	ldrb	r3, [r3, r2]
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	2b60      	cmp	r3, #96	@ 0x60
 800dd9a:	d109      	bne.n	800ddb0 <I2C_ITMasterCplt+0xa8>
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2204      	movs	r2, #4
 800dda0:	4013      	ands	r3, r2
 800dda2:	d005      	beq.n	800ddb0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ddae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	0018      	movs	r0, r3
 800ddb4:	f000 fb19 	bl	800e3ea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddbc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2241      	movs	r2, #65	@ 0x41
 800ddc2:	5c9b      	ldrb	r3, [r3, r2]
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b60      	cmp	r3, #96	@ 0x60
 800ddc8:	d002      	beq.n	800ddd0 <I2C_ITMasterCplt+0xc8>
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d007      	beq.n	800dde0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	0011      	movs	r1, r2
 800ddd8:	0018      	movs	r0, r3
 800ddda:	f000 f9db 	bl	800e194 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ddde:	e058      	b.n	800de92 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2241      	movs	r2, #65	@ 0x41
 800dde4:	5c9b      	ldrb	r3, [r3, r2]
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b21      	cmp	r3, #33	@ 0x21
 800ddea:	d126      	bne.n	800de3a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2241      	movs	r2, #65	@ 0x41
 800ddf0:	2120      	movs	r1, #32
 800ddf2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2242      	movs	r2, #66	@ 0x42
 800ddfe:	5c9b      	ldrb	r3, [r3, r2]
 800de00:	b2db      	uxtb	r3, r3
 800de02:	2b40      	cmp	r3, #64	@ 0x40
 800de04:	d10c      	bne.n	800de20 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2242      	movs	r2, #66	@ 0x42
 800de0a:	2100      	movs	r1, #0
 800de0c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2240      	movs	r2, #64	@ 0x40
 800de12:	2100      	movs	r1, #0
 800de14:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	0018      	movs	r0, r3
 800de1a:	f7ff f8e2 	bl	800cfe2 <HAL_I2C_MemTxCpltCallback>
}
 800de1e:	e038      	b.n	800de92 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2242      	movs	r2, #66	@ 0x42
 800de24:	2100      	movs	r1, #0
 800de26:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2240      	movs	r2, #64	@ 0x40
 800de2c:	2100      	movs	r1, #0
 800de2e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	0018      	movs	r0, r3
 800de34:	f7ff f89d 	bl	800cf72 <HAL_I2C_MasterTxCpltCallback>
}
 800de38:	e02b      	b.n	800de92 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2241      	movs	r2, #65	@ 0x41
 800de3e:	5c9b      	ldrb	r3, [r3, r2]
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b22      	cmp	r3, #34	@ 0x22
 800de44:	d125      	bne.n	800de92 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2241      	movs	r2, #65	@ 0x41
 800de4a:	2120      	movs	r1, #32
 800de4c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2242      	movs	r2, #66	@ 0x42
 800de58:	5c9b      	ldrb	r3, [r3, r2]
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b40      	cmp	r3, #64	@ 0x40
 800de5e:	d10c      	bne.n	800de7a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2242      	movs	r2, #66	@ 0x42
 800de64:	2100      	movs	r1, #0
 800de66:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2240      	movs	r2, #64	@ 0x40
 800de6c:	2100      	movs	r1, #0
 800de6e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	0018      	movs	r0, r3
 800de74:	f7ff f8bd 	bl	800cff2 <HAL_I2C_MemRxCpltCallback>
}
 800de78:	e00b      	b.n	800de92 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2242      	movs	r2, #66	@ 0x42
 800de7e:	2100      	movs	r1, #0
 800de80:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2240      	movs	r2, #64	@ 0x40
 800de86:	2100      	movs	r1, #0
 800de88:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	0018      	movs	r0, r3
 800de8e:	f7ff f878 	bl	800cf82 <HAL_I2C_MasterRxCpltCallback>
}
 800de92:	46c0      	nop			@ (mov r8, r8)
 800de94:	46bd      	mov	sp, r7
 800de96:	b006      	add	sp, #24
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	46c0      	nop			@ (mov r8, r8)
 800de9c:	fe00e800 	.word	0xfe00e800
 800dea0:	ffff0000 	.word	0xffff0000

0800dea4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800deba:	200f      	movs	r0, #15
 800debc:	183b      	adds	r3, r7, r0
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	2141      	movs	r1, #65	@ 0x41
 800dec2:	5c52      	ldrb	r2, [r2, r1]
 800dec4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2220      	movs	r2, #32
 800decc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800dece:	183b      	adds	r3, r7, r0
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b21      	cmp	r3, #33	@ 0x21
 800ded4:	d003      	beq.n	800dede <I2C_ITSlaveCplt+0x3a>
 800ded6:	183b      	adds	r3, r7, r0
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	2b29      	cmp	r3, #41	@ 0x29
 800dedc:	d109      	bne.n	800def2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800dede:	4a7b      	ldr	r2, [pc, #492]	@ (800e0cc <I2C_ITSlaveCplt+0x228>)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	0011      	movs	r1, r2
 800dee4:	0018      	movs	r0, r3
 800dee6:	f000 fc43 	bl	800e770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2221      	movs	r2, #33	@ 0x21
 800deee:	631a      	str	r2, [r3, #48]	@ 0x30
 800def0:	e011      	b.n	800df16 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800def2:	220f      	movs	r2, #15
 800def4:	18bb      	adds	r3, r7, r2
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b22      	cmp	r3, #34	@ 0x22
 800defa:	d003      	beq.n	800df04 <I2C_ITSlaveCplt+0x60>
 800defc:	18bb      	adds	r3, r7, r2
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	2b2a      	cmp	r3, #42	@ 0x2a
 800df02:	d108      	bne.n	800df16 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800df04:	4a72      	ldr	r2, [pc, #456]	@ (800e0d0 <I2C_ITSlaveCplt+0x22c>)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	0011      	movs	r1, r2
 800df0a:	0018      	movs	r0, r3
 800df0c:	f000 fc30 	bl	800e770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2222      	movs	r2, #34	@ 0x22
 800df14:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2180      	movs	r1, #128	@ 0x80
 800df22:	0209      	lsls	r1, r1, #8
 800df24:	430a      	orrs	r2, r1
 800df26:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	685a      	ldr	r2, [r3, #4]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4968      	ldr	r1, [pc, #416]	@ (800e0d4 <I2C_ITSlaveCplt+0x230>)
 800df34:	400a      	ands	r2, r1
 800df36:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	0018      	movs	r0, r3
 800df3c:	f000 fa55 	bl	800e3ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	2380      	movs	r3, #128	@ 0x80
 800df44:	01db      	lsls	r3, r3, #7
 800df46:	4013      	ands	r3, r2
 800df48:	d013      	beq.n	800df72 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4960      	ldr	r1, [pc, #384]	@ (800e0d8 <I2C_ITSlaveCplt+0x234>)
 800df56:	400a      	ands	r2, r1
 800df58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d01f      	beq.n	800dfa2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800df70:	e017      	b.n	800dfa2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	2380      	movs	r3, #128	@ 0x80
 800df76:	021b      	lsls	r3, r3, #8
 800df78:	4013      	ands	r3, r2
 800df7a:	d012      	beq.n	800dfa2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4955      	ldr	r1, [pc, #340]	@ (800e0dc <I2C_ITSlaveCplt+0x238>)
 800df88:	400a      	ands	r2, r1
 800df8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df90:	2b00      	cmp	r3, #0
 800df92:	d006      	beq.n	800dfa2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	2204      	movs	r2, #4
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	d020      	beq.n	800dfec <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2204      	movs	r2, #4
 800dfae:	4393      	bics	r3, r2
 800dfb0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfbc:	b2d2      	uxtb	r2, r2
 800dfbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc4:	1c5a      	adds	r2, r3, #1
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00c      	beq.n	800dfec <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d005      	beq.n	800e002 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dffa:	2204      	movs	r2, #4
 800dffc:	431a      	orrs	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2242      	movs	r2, #66	@ 0x42
 800e006:	2100      	movs	r1, #0
 800e008:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e014:	2b00      	cmp	r3, #0
 800e016:	d013      	beq.n	800e040 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	0011      	movs	r1, r2
 800e020:	0018      	movs	r0, r3
 800e022:	f000 f8b7 	bl	800e194 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2241      	movs	r2, #65	@ 0x41
 800e02a:	5c9b      	ldrb	r3, [r3, r2]
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b28      	cmp	r3, #40	@ 0x28
 800e030:	d147      	bne.n	800e0c2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	0011      	movs	r1, r2
 800e038:	0018      	movs	r0, r3
 800e03a:	f000 f853 	bl	800e0e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e03e:	e040      	b.n	800e0c2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e044:	4a26      	ldr	r2, [pc, #152]	@ (800e0e0 <I2C_ITSlaveCplt+0x23c>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d016      	beq.n	800e078 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	0018      	movs	r0, r3
 800e04e:	f7ff fdf7 	bl	800dc40 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a22      	ldr	r2, [pc, #136]	@ (800e0e0 <I2C_ITSlaveCplt+0x23c>)
 800e056:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2241      	movs	r2, #65	@ 0x41
 800e05c:	2120      	movs	r1, #32
 800e05e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2240      	movs	r2, #64	@ 0x40
 800e06a:	2100      	movs	r1, #0
 800e06c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	0018      	movs	r0, r3
 800e072:	f7fe ffae 	bl	800cfd2 <HAL_I2C_ListenCpltCallback>
}
 800e076:	e024      	b.n	800e0c2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2241      	movs	r2, #65	@ 0x41
 800e07c:	5c9b      	ldrb	r3, [r3, r2]
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b22      	cmp	r3, #34	@ 0x22
 800e082:	d10f      	bne.n	800e0a4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2241      	movs	r2, #65	@ 0x41
 800e088:	2120      	movs	r1, #32
 800e08a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2240      	movs	r2, #64	@ 0x40
 800e096:	2100      	movs	r1, #0
 800e098:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	0018      	movs	r0, r3
 800e09e:	f7fe ff80 	bl	800cfa2 <HAL_I2C_SlaveRxCpltCallback>
}
 800e0a2:	e00e      	b.n	800e0c2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2241      	movs	r2, #65	@ 0x41
 800e0a8:	2120      	movs	r1, #32
 800e0aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2240      	movs	r2, #64	@ 0x40
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	0018      	movs	r0, r3
 800e0be:	f7fe ff68 	bl	800cf92 <HAL_I2C_SlaveTxCpltCallback>
}
 800e0c2:	46c0      	nop			@ (mov r8, r8)
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	b006      	add	sp, #24
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	46c0      	nop			@ (mov r8, r8)
 800e0cc:	00008001 	.word	0x00008001
 800e0d0:	00008002 	.word	0x00008002
 800e0d4:	fe00e800 	.word	0xfe00e800
 800e0d8:	ffffbfff 	.word	0xffffbfff
 800e0dc:	ffff7fff 	.word	0xffff7fff
 800e0e0:	ffff0000 	.word	0xffff0000

0800e0e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a26      	ldr	r2, [pc, #152]	@ (800e18c <I2C_ITListenCplt+0xa8>)
 800e0f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2241      	movs	r2, #65	@ 0x41
 800e0fe:	2120      	movs	r1, #32
 800e100:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2242      	movs	r2, #66	@ 0x42
 800e106:	2100      	movs	r1, #0
 800e108:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	2204      	movs	r2, #4
 800e114:	4013      	ands	r3, r2
 800e116:	d022      	beq.n	800e15e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e122:	b2d2      	uxtb	r2, r2
 800e124:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e134:	2b00      	cmp	r3, #0
 800e136:	d012      	beq.n	800e15e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e13c:	3b01      	subs	r3, #1
 800e13e:	b29a      	uxth	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e148:	b29b      	uxth	r3, r3
 800e14a:	3b01      	subs	r3, #1
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e156:	2204      	movs	r2, #4
 800e158:	431a      	orrs	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e15e:	4a0c      	ldr	r2, [pc, #48]	@ (800e190 <I2C_ITListenCplt+0xac>)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	0011      	movs	r1, r2
 800e164:	0018      	movs	r0, r3
 800e166:	f000 fb03 	bl	800e770 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2210      	movs	r2, #16
 800e170:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2240      	movs	r2, #64	@ 0x40
 800e176:	2100      	movs	r1, #0
 800e178:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	0018      	movs	r0, r3
 800e17e:	f7fe ff28 	bl	800cfd2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e182:	46c0      	nop			@ (mov r8, r8)
 800e184:	46bd      	mov	sp, r7
 800e186:	b002      	add	sp, #8
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	46c0      	nop			@ (mov r8, r8)
 800e18c:	ffff0000 	.word	0xffff0000
 800e190:	00008003 	.word	0x00008003

0800e194 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e19e:	200f      	movs	r0, #15
 800e1a0:	183b      	adds	r3, r7, r0
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	2141      	movs	r1, #65	@ 0x41
 800e1a6:	5c52      	ldrb	r2, [r2, r1]
 800e1a8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2242      	movs	r2, #66	@ 0x42
 800e1ae:	2100      	movs	r1, #0
 800e1b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4a72      	ldr	r2, [pc, #456]	@ (800e380 <I2C_ITError+0x1ec>)
 800e1b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e1ca:	183b      	adds	r3, r7, r0
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	2b28      	cmp	r3, #40	@ 0x28
 800e1d0:	d007      	beq.n	800e1e2 <I2C_ITError+0x4e>
 800e1d2:	183b      	adds	r3, r7, r0
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	2b29      	cmp	r3, #41	@ 0x29
 800e1d8:	d003      	beq.n	800e1e2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e1da:	183b      	adds	r3, r7, r0
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1e0:	d10c      	bne.n	800e1fc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2103      	movs	r1, #3
 800e1e6:	0018      	movs	r0, r3
 800e1e8:	f000 fac2 	bl	800e770 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2241      	movs	r2, #65	@ 0x41
 800e1f0:	2128      	movs	r1, #40	@ 0x28
 800e1f2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a63      	ldr	r2, [pc, #396]	@ (800e384 <I2C_ITError+0x1f0>)
 800e1f8:	635a      	str	r2, [r3, #52]	@ 0x34
 800e1fa:	e032      	b.n	800e262 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e1fc:	4a62      	ldr	r2, [pc, #392]	@ (800e388 <I2C_ITError+0x1f4>)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	0011      	movs	r1, r2
 800e202:	0018      	movs	r0, r3
 800e204:	f000 fab4 	bl	800e770 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	0018      	movs	r0, r3
 800e20c:	f000 f8ed 	bl	800e3ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2241      	movs	r2, #65	@ 0x41
 800e214:	5c9b      	ldrb	r3, [r3, r2]
 800e216:	b2db      	uxtb	r3, r3
 800e218:	2b60      	cmp	r3, #96	@ 0x60
 800e21a:	d01f      	beq.n	800e25c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2241      	movs	r2, #65	@ 0x41
 800e220:	2120      	movs	r1, #32
 800e222:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	2220      	movs	r2, #32
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b20      	cmp	r3, #32
 800e230:	d114      	bne.n	800e25c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	2210      	movs	r2, #16
 800e23a:	4013      	ands	r3, r2
 800e23c:	2b10      	cmp	r3, #16
 800e23e:	d109      	bne.n	800e254 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2210      	movs	r2, #16
 800e246:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e24c:	2204      	movs	r2, #4
 800e24e:	431a      	orrs	r2, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2220      	movs	r2, #32
 800e25a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e266:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d03b      	beq.n	800e2e8 <I2C_ITError+0x154>
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	2b11      	cmp	r3, #17
 800e274:	d002      	beq.n	800e27c <I2C_ITError+0xe8>
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2b21      	cmp	r3, #33	@ 0x21
 800e27a:	d135      	bne.n	800e2e8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	2380      	movs	r3, #128	@ 0x80
 800e284:	01db      	lsls	r3, r3, #7
 800e286:	401a      	ands	r2, r3
 800e288:	2380      	movs	r3, #128	@ 0x80
 800e28a:	01db      	lsls	r3, r3, #7
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d107      	bne.n	800e2a0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	493c      	ldr	r1, [pc, #240]	@ (800e38c <I2C_ITError+0x1f8>)
 800e29c:	400a      	ands	r2, r1
 800e29e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2a4:	0018      	movs	r0, r3
 800e2a6:	f7fd ff8e 	bl	800c1c6 <HAL_DMA_GetState>
 800e2aa:	0003      	movs	r3, r0
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d016      	beq.n	800e2de <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2b4:	4a36      	ldr	r2, [pc, #216]	@ (800e390 <I2C_ITError+0x1fc>)
 800e2b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2240      	movs	r2, #64	@ 0x40
 800e2bc:	2100      	movs	r1, #0
 800e2be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2c4:	0018      	movs	r0, r3
 800e2c6:	f7fd fe89 	bl	800bfdc <HAL_DMA_Abort_IT>
 800e2ca:	1e03      	subs	r3, r0, #0
 800e2cc:	d051      	beq.n	800e372 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2d8:	0018      	movs	r0, r3
 800e2da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e2dc:	e049      	b.n	800e372 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	0018      	movs	r0, r3
 800e2e2:	f000 f859 	bl	800e398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e2e6:	e044      	b.n	800e372 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d03b      	beq.n	800e368 <I2C_ITError+0x1d4>
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2b12      	cmp	r3, #18
 800e2f4:	d002      	beq.n	800e2fc <I2C_ITError+0x168>
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2b22      	cmp	r3, #34	@ 0x22
 800e2fa:	d135      	bne.n	800e368 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	2380      	movs	r3, #128	@ 0x80
 800e304:	021b      	lsls	r3, r3, #8
 800e306:	401a      	ands	r2, r3
 800e308:	2380      	movs	r3, #128	@ 0x80
 800e30a:	021b      	lsls	r3, r3, #8
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d107      	bne.n	800e320 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	491e      	ldr	r1, [pc, #120]	@ (800e394 <I2C_ITError+0x200>)
 800e31c:	400a      	ands	r2, r1
 800e31e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e324:	0018      	movs	r0, r3
 800e326:	f7fd ff4e 	bl	800c1c6 <HAL_DMA_GetState>
 800e32a:	0003      	movs	r3, r0
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d016      	beq.n	800e35e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e334:	4a16      	ldr	r2, [pc, #88]	@ (800e390 <I2C_ITError+0x1fc>)
 800e336:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2240      	movs	r2, #64	@ 0x40
 800e33c:	2100      	movs	r1, #0
 800e33e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e344:	0018      	movs	r0, r3
 800e346:	f7fd fe49 	bl	800bfdc <HAL_DMA_Abort_IT>
 800e34a:	1e03      	subs	r3, r0, #0
 800e34c:	d013      	beq.n	800e376 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e358:	0018      	movs	r0, r3
 800e35a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e35c:	e00b      	b.n	800e376 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	0018      	movs	r0, r3
 800e362:	f000 f819 	bl	800e398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e366:	e006      	b.n	800e376 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	0018      	movs	r0, r3
 800e36c:	f000 f814 	bl	800e398 <I2C_TreatErrorCallback>
  }
}
 800e370:	e002      	b.n	800e378 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e372:	46c0      	nop			@ (mov r8, r8)
 800e374:	e000      	b.n	800e378 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e376:	46c0      	nop			@ (mov r8, r8)
}
 800e378:	46c0      	nop			@ (mov r8, r8)
 800e37a:	46bd      	mov	sp, r7
 800e37c:	b004      	add	sp, #16
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	ffff0000 	.word	0xffff0000
 800e384:	0800d279 	.word	0x0800d279
 800e388:	00008003 	.word	0x00008003
 800e38c:	ffffbfff 	.word	0xffffbfff
 800e390:	0800e5a3 	.word	0x0800e5a3
 800e394:	ffff7fff 	.word	0xffff7fff

0800e398 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2241      	movs	r2, #65	@ 0x41
 800e3a4:	5c9b      	ldrb	r3, [r3, r2]
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b60      	cmp	r3, #96	@ 0x60
 800e3aa:	d10f      	bne.n	800e3cc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2241      	movs	r2, #65	@ 0x41
 800e3b0:	2120      	movs	r1, #32
 800e3b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2240      	movs	r2, #64	@ 0x40
 800e3be:	2100      	movs	r1, #0
 800e3c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	0018      	movs	r0, r3
 800e3c6:	f7fe fe24 	bl	800d012 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e3ca:	e00a      	b.n	800e3e2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2240      	movs	r2, #64	@ 0x40
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	0018      	movs	r0, r3
 800e3de:	f7fe fe10 	bl	800d002 <HAL_I2C_ErrorCallback>
}
 800e3e2:	46c0      	nop			@ (mov r8, r8)
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	b002      	add	sp, #8
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b082      	sub	sp, #8
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	2202      	movs	r2, #2
 800e3fa:	4013      	ands	r3, r2
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d103      	bne.n	800e408 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2200      	movs	r2, #0
 800e406:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	699b      	ldr	r3, [r3, #24]
 800e40e:	2201      	movs	r2, #1
 800e410:	4013      	ands	r3, r2
 800e412:	2b01      	cmp	r3, #1
 800e414:	d007      	beq.n	800e426 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	699a      	ldr	r2, [r3, #24]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2101      	movs	r1, #1
 800e422:	430a      	orrs	r2, r1
 800e424:	619a      	str	r2, [r3, #24]
  }
}
 800e426:	46c0      	nop			@ (mov r8, r8)
 800e428:	46bd      	mov	sp, r7
 800e42a:	b002      	add	sp, #8
 800e42c:	bd80      	pop	{r7, pc}
	...

0800e430 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e43c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4920      	ldr	r1, [pc, #128]	@ (800e4cc <I2C_DMAMasterTransmitCplt+0x9c>)
 800e44a:	400a      	ands	r2, r1
 800e44c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e452:	b29b      	uxth	r3, r3
 800e454:	2b00      	cmp	r3, #0
 800e456:	d105      	bne.n	800e464 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2120      	movs	r1, #32
 800e45c:	0018      	movs	r0, r3
 800e45e:	f000 f8f9 	bl	800e654 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e462:	e02e      	b.n	800e4c2 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e46c:	189a      	adds	r2, r3, r2
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e476:	b29b      	uxth	r3, r3
 800e478:	2bff      	cmp	r3, #255	@ 0xff
 800e47a:	d903      	bls.n	800e484 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	22ff      	movs	r2, #255	@ 0xff
 800e480:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e482:	e004      	b.n	800e48e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e488:	b29a      	uxth	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e496:	0019      	movs	r1, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3328      	adds	r3, #40	@ 0x28
 800e49e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e4a4:	f7fd fcf4 	bl	800be90 <HAL_DMA_Start_IT>
 800e4a8:	1e03      	subs	r3, r0, #0
 800e4aa:	d005      	beq.n	800e4b8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2110      	movs	r1, #16
 800e4b0:	0018      	movs	r0, r3
 800e4b2:	f7ff fe6f 	bl	800e194 <I2C_ITError>
}
 800e4b6:	e004      	b.n	800e4c2 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2140      	movs	r1, #64	@ 0x40
 800e4bc:	0018      	movs	r0, r3
 800e4be:	f000 f8c9 	bl	800e654 <I2C_Enable_IRQ>
}
 800e4c2:	46c0      	nop			@ (mov r8, r8)
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	b004      	add	sp, #16
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	46c0      	nop			@ (mov r8, r8)
 800e4cc:	ffffbfff 	.word	0xffffbfff

0800e4d0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4dc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4920      	ldr	r1, [pc, #128]	@ (800e56c <I2C_DMAMasterReceiveCplt+0x9c>)
 800e4ea:	400a      	ands	r2, r1
 800e4ec:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d105      	bne.n	800e504 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2120      	movs	r1, #32
 800e4fc:	0018      	movs	r0, r3
 800e4fe:	f000 f8a9 	bl	800e654 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e502:	e02e      	b.n	800e562 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e50c:	189a      	adds	r2, r3, r2
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e516:	b29b      	uxth	r3, r3
 800e518:	2bff      	cmp	r3, #255	@ 0xff
 800e51a:	d903      	bls.n	800e524 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	22ff      	movs	r2, #255	@ 0xff
 800e520:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e522:	e004      	b.n	800e52e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e528:	b29a      	uxth	r2, r3
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3324      	adds	r3, #36	@ 0x24
 800e538:	0019      	movs	r1, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e53e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e544:	f7fd fca4 	bl	800be90 <HAL_DMA_Start_IT>
 800e548:	1e03      	subs	r3, r0, #0
 800e54a:	d005      	beq.n	800e558 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2110      	movs	r1, #16
 800e550:	0018      	movs	r0, r3
 800e552:	f7ff fe1f 	bl	800e194 <I2C_ITError>
}
 800e556:	e004      	b.n	800e562 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2140      	movs	r1, #64	@ 0x40
 800e55c:	0018      	movs	r0, r3
 800e55e:	f000 f879 	bl	800e654 <I2C_Enable_IRQ>
}
 800e562:	46c0      	nop			@ (mov r8, r8)
 800e564:	46bd      	mov	sp, r7
 800e566:	b004      	add	sp, #16
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	46c0      	nop			@ (mov r8, r8)
 800e56c:	ffff7fff 	.word	0xffff7fff

0800e570 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e57c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2180      	movs	r1, #128	@ 0x80
 800e58a:	0209      	lsls	r1, r1, #8
 800e58c:	430a      	orrs	r2, r1
 800e58e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2110      	movs	r1, #16
 800e594:	0018      	movs	r0, r3
 800e596:	f7ff fdfd 	bl	800e194 <I2C_ITError>
}
 800e59a:	46c0      	nop			@ (mov r8, r8)
 800e59c:	46bd      	mov	sp, r7
 800e59e:	b004      	add	sp, #16
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b084      	sub	sp, #16
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5bc:	2200      	movs	r2, #0
 800e5be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d003      	beq.n	800e5d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	0018      	movs	r0, r3
 800e5d4:	f7ff fee0 	bl	800e398 <I2C_TreatErrorCallback>
}
 800e5d8:	46c0      	nop			@ (mov r8, r8)
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	b004      	add	sp, #16
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e5e0:	b590      	push	{r4, r7, lr}
 800e5e2:	b087      	sub	sp, #28
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	0008      	movs	r0, r1
 800e5ea:	0011      	movs	r1, r2
 800e5ec:	607b      	str	r3, [r7, #4]
 800e5ee:	240a      	movs	r4, #10
 800e5f0:	193b      	adds	r3, r7, r4
 800e5f2:	1c02      	adds	r2, r0, #0
 800e5f4:	801a      	strh	r2, [r3, #0]
 800e5f6:	2009      	movs	r0, #9
 800e5f8:	183b      	adds	r3, r7, r0
 800e5fa:	1c0a      	adds	r2, r1, #0
 800e5fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e5fe:	193b      	adds	r3, r7, r4
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	059b      	lsls	r3, r3, #22
 800e604:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e606:	183b      	adds	r3, r7, r0
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	0419      	lsls	r1, r3, #16
 800e60c:	23ff      	movs	r3, #255	@ 0xff
 800e60e:	041b      	lsls	r3, r3, #16
 800e610:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e612:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e61a:	4313      	orrs	r3, r2
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	085b      	lsrs	r3, r3, #1
 800e620:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e62a:	0d51      	lsrs	r1, r2, #21
 800e62c:	2280      	movs	r2, #128	@ 0x80
 800e62e:	00d2      	lsls	r2, r2, #3
 800e630:	400a      	ands	r2, r1
 800e632:	4907      	ldr	r1, [pc, #28]	@ (800e650 <I2C_TransferConfig+0x70>)
 800e634:	430a      	orrs	r2, r1
 800e636:	43d2      	mvns	r2, r2
 800e638:	401a      	ands	r2, r3
 800e63a:	0011      	movs	r1, r2
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	697a      	ldr	r2, [r7, #20]
 800e642:	430a      	orrs	r2, r1
 800e644:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e646:	46c0      	nop			@ (mov r8, r8)
 800e648:	46bd      	mov	sp, r7
 800e64a:	b007      	add	sp, #28
 800e64c:	bd90      	pop	{r4, r7, pc}
 800e64e:	46c0      	nop			@ (mov r8, r8)
 800e650:	03ff63ff 	.word	0x03ff63ff

0800e654 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	000a      	movs	r2, r1
 800e65e:	1cbb      	adds	r3, r7, #2
 800e660:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800e662:	2300      	movs	r3, #0
 800e664:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e66a:	4b3e      	ldr	r3, [pc, #248]	@ (800e764 <I2C_Enable_IRQ+0x110>)
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d035      	beq.n	800e6dc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800e674:	4b3c      	ldr	r3, [pc, #240]	@ (800e768 <I2C_Enable_IRQ+0x114>)
 800e676:	429a      	cmp	r2, r3
 800e678:	d030      	beq.n	800e6dc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800e67e:	4b3b      	ldr	r3, [pc, #236]	@ (800e76c <I2C_Enable_IRQ+0x118>)
 800e680:	429a      	cmp	r2, r3
 800e682:	d02b      	beq.n	800e6dc <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e684:	1cbb      	adds	r3, r7, #2
 800e686:	2200      	movs	r2, #0
 800e688:	5e9b      	ldrsh	r3, [r3, r2]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	da03      	bge.n	800e696 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	22b8      	movs	r2, #184	@ 0xb8
 800e692:	4313      	orrs	r3, r2
 800e694:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e696:	1cbb      	adds	r3, r7, #2
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	2201      	movs	r2, #1
 800e69c:	4013      	ands	r3, r2
 800e69e:	d003      	beq.n	800e6a8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	22f2      	movs	r2, #242	@ 0xf2
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e6a8:	1cbb      	adds	r3, r7, #2
 800e6aa:	881b      	ldrh	r3, [r3, #0]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	d003      	beq.n	800e6ba <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	22f4      	movs	r2, #244	@ 0xf4
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e6ba:	1cbb      	adds	r3, r7, #2
 800e6bc:	881b      	ldrh	r3, [r3, #0]
 800e6be:	2b10      	cmp	r3, #16
 800e6c0:	d103      	bne.n	800e6ca <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2290      	movs	r2, #144	@ 0x90
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e6ca:	1cbb      	adds	r3, r7, #2
 800e6cc:	881b      	ldrh	r3, [r3, #0]
 800e6ce:	2b20      	cmp	r3, #32
 800e6d0:	d13c      	bne.n	800e74c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e6da:	e037      	b.n	800e74c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e6dc:	1cbb      	adds	r3, r7, #2
 800e6de:	2200      	movs	r2, #0
 800e6e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	da03      	bge.n	800e6ee <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	22b8      	movs	r2, #184	@ 0xb8
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e6ee:	1cbb      	adds	r3, r7, #2
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	d003      	beq.n	800e700 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	22f2      	movs	r2, #242	@ 0xf2
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e700:	1cbb      	adds	r3, r7, #2
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	2202      	movs	r2, #2
 800e706:	4013      	ands	r3, r2
 800e708:	d003      	beq.n	800e712 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	22f4      	movs	r2, #244	@ 0xf4
 800e70e:	4313      	orrs	r3, r2
 800e710:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e712:	1cbb      	adds	r3, r7, #2
 800e714:	881b      	ldrh	r3, [r3, #0]
 800e716:	2b10      	cmp	r3, #16
 800e718:	d103      	bne.n	800e722 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2290      	movs	r2, #144	@ 0x90
 800e71e:	4313      	orrs	r3, r2
 800e720:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e722:	1cbb      	adds	r3, r7, #2
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	2b20      	cmp	r3, #32
 800e728:	d103      	bne.n	800e732 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2260      	movs	r2, #96	@ 0x60
 800e72e:	4313      	orrs	r3, r2
 800e730:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e736:	4b0d      	ldr	r3, [pc, #52]	@ (800e76c <I2C_Enable_IRQ+0x118>)
 800e738:	429a      	cmp	r2, r3
 800e73a:	d007      	beq.n	800e74c <I2C_Enable_IRQ+0xf8>
 800e73c:	1cbb      	adds	r3, r7, #2
 800e73e:	881b      	ldrh	r3, [r3, #0]
 800e740:	2b40      	cmp	r3, #64	@ 0x40
 800e742:	d103      	bne.n	800e74c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2240      	movs	r2, #64	@ 0x40
 800e748:	4313      	orrs	r3, r2
 800e74a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6819      	ldr	r1, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	430a      	orrs	r2, r1
 800e75a:	601a      	str	r2, [r3, #0]
}
 800e75c:	46c0      	nop			@ (mov r8, r8)
 800e75e:	46bd      	mov	sp, r7
 800e760:	b004      	add	sp, #16
 800e762:	bd80      	pop	{r7, pc}
 800e764:	0800d479 	.word	0x0800d479
 800e768:	0800d8a9 	.word	0x0800d8a9
 800e76c:	0800d671 	.word	0x0800d671

0800e770 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	000a      	movs	r2, r1
 800e77a:	1cbb      	adds	r3, r7, #2
 800e77c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800e77e:	2300      	movs	r3, #0
 800e780:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e782:	1cbb      	adds	r3, r7, #2
 800e784:	881b      	ldrh	r3, [r3, #0]
 800e786:	2201      	movs	r2, #1
 800e788:	4013      	ands	r3, r2
 800e78a:	d010      	beq.n	800e7ae <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2242      	movs	r2, #66	@ 0x42
 800e790:	4313      	orrs	r3, r2
 800e792:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2241      	movs	r2, #65	@ 0x41
 800e798:	5c9b      	ldrb	r3, [r3, r2]
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	001a      	movs	r2, r3
 800e79e:	2328      	movs	r3, #40	@ 0x28
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	2b28      	cmp	r3, #40	@ 0x28
 800e7a4:	d003      	beq.n	800e7ae <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	22b0      	movs	r2, #176	@ 0xb0
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e7ae:	1cbb      	adds	r3, r7, #2
 800e7b0:	881b      	ldrh	r3, [r3, #0]
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	d010      	beq.n	800e7da <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2244      	movs	r2, #68	@ 0x44
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2241      	movs	r2, #65	@ 0x41
 800e7c4:	5c9b      	ldrb	r3, [r3, r2]
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	001a      	movs	r2, r3
 800e7ca:	2328      	movs	r3, #40	@ 0x28
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	2b28      	cmp	r3, #40	@ 0x28
 800e7d0:	d003      	beq.n	800e7da <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	22b0      	movs	r2, #176	@ 0xb0
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e7da:	1cbb      	adds	r3, r7, #2
 800e7dc:	2200      	movs	r2, #0
 800e7de:	5e9b      	ldrsh	r3, [r3, r2]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	da03      	bge.n	800e7ec <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	22b8      	movs	r2, #184	@ 0xb8
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e7ec:	1cbb      	adds	r3, r7, #2
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	2b10      	cmp	r3, #16
 800e7f2:	d103      	bne.n	800e7fc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2290      	movs	r2, #144	@ 0x90
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e7fc:	1cbb      	adds	r3, r7, #2
 800e7fe:	881b      	ldrh	r3, [r3, #0]
 800e800:	2b20      	cmp	r3, #32
 800e802:	d103      	bne.n	800e80c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2220      	movs	r2, #32
 800e808:	4313      	orrs	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e80c:	1cbb      	adds	r3, r7, #2
 800e80e:	881b      	ldrh	r3, [r3, #0]
 800e810:	2b40      	cmp	r3, #64	@ 0x40
 800e812:	d103      	bne.n	800e81c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2240      	movs	r2, #64	@ 0x40
 800e818:	4313      	orrs	r3, r2
 800e81a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	43d9      	mvns	r1, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	400a      	ands	r2, r1
 800e82c:	601a      	str	r2, [r3, #0]
}
 800e82e:	46c0      	nop			@ (mov r8, r8)
 800e830:	46bd      	mov	sp, r7
 800e832:	b004      	add	sp, #16
 800e834:	bd80      	pop	{r7, pc}
	...

0800e838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2241      	movs	r2, #65	@ 0x41
 800e846:	5c9b      	ldrb	r3, [r3, r2]
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	2b20      	cmp	r3, #32
 800e84c:	d138      	bne.n	800e8c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2240      	movs	r2, #64	@ 0x40
 800e852:	5c9b      	ldrb	r3, [r3, r2]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d101      	bne.n	800e85c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e858:	2302      	movs	r3, #2
 800e85a:	e032      	b.n	800e8c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2240      	movs	r2, #64	@ 0x40
 800e860:	2101      	movs	r1, #1
 800e862:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2241      	movs	r2, #65	@ 0x41
 800e868:	2124      	movs	r1, #36	@ 0x24
 800e86a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2101      	movs	r1, #1
 800e878:	438a      	bics	r2, r1
 800e87a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4911      	ldr	r1, [pc, #68]	@ (800e8cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800e888:	400a      	ands	r2, r1
 800e88a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6819      	ldr	r1, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	430a      	orrs	r2, r1
 800e89a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	430a      	orrs	r2, r1
 800e8aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2241      	movs	r2, #65	@ 0x41
 800e8b0:	2120      	movs	r1, #32
 800e8b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2240      	movs	r2, #64	@ 0x40
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	e000      	b.n	800e8c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e8c0:	2302      	movs	r3, #2
  }
}
 800e8c2:	0018      	movs	r0, r3
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	b002      	add	sp, #8
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	46c0      	nop			@ (mov r8, r8)
 800e8cc:	ffffefff 	.word	0xffffefff

0800e8d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2241      	movs	r2, #65	@ 0x41
 800e8de:	5c9b      	ldrb	r3, [r3, r2]
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	2b20      	cmp	r3, #32
 800e8e4:	d139      	bne.n	800e95a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2240      	movs	r2, #64	@ 0x40
 800e8ea:	5c9b      	ldrb	r3, [r3, r2]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d101      	bne.n	800e8f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e8f0:	2302      	movs	r3, #2
 800e8f2:	e033      	b.n	800e95c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2240      	movs	r2, #64	@ 0x40
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2241      	movs	r2, #65	@ 0x41
 800e900:	2124      	movs	r1, #36	@ 0x24
 800e902:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2101      	movs	r1, #1
 800e910:	438a      	bics	r2, r1
 800e912:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	4a11      	ldr	r2, [pc, #68]	@ (800e964 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800e920:	4013      	ands	r3, r2
 800e922:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	021b      	lsls	r3, r3, #8
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	68fa      	ldr	r2, [r7, #12]
 800e934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2101      	movs	r1, #1
 800e942:	430a      	orrs	r2, r1
 800e944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2241      	movs	r2, #65	@ 0x41
 800e94a:	2120      	movs	r1, #32
 800e94c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2240      	movs	r2, #64	@ 0x40
 800e952:	2100      	movs	r1, #0
 800e954:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	e000      	b.n	800e95c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e95a:	2302      	movs	r3, #2
  }
}
 800e95c:	0018      	movs	r0, r3
 800e95e:	46bd      	mov	sp, r7
 800e960:	b004      	add	sp, #16
 800e962:	bd80      	pop	{r7, pc}
 800e964:	fffff0ff 	.word	0xfffff0ff

0800e968 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b088      	sub	sp, #32
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d101      	bne.n	800e97a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	e0e1      	b.n	800eb3e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2235      	movs	r2, #53	@ 0x35
 800e97e:	5c9b      	ldrb	r3, [r3, r2]
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d107      	bne.n	800e996 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2234      	movs	r2, #52	@ 0x34
 800e98a:	2100      	movs	r1, #0
 800e98c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	0018      	movs	r0, r3
 800e992:	f7f7 fe81 	bl	8006698 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2235      	movs	r2, #53	@ 0x35
 800e99a:	2102      	movs	r1, #2
 800e99c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	69da      	ldr	r2, [r3, #28]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4967      	ldr	r1, [pc, #412]	@ (800eb48 <HAL_I2S_Init+0x1e0>)
 800e9aa:	400a      	ands	r2, r1
 800e9ac:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	695b      	ldr	r3, [r3, #20]
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d073      	beq.n	800eaa6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d102      	bne.n	800e9cc <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800e9c6:	2310      	movs	r3, #16
 800e9c8:	617b      	str	r3, [r7, #20]
 800e9ca:	e001      	b.n	800e9d0 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800e9cc:	2320      	movs	r3, #32
 800e9ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	2b20      	cmp	r3, #32
 800e9d6:	d802      	bhi.n	800e9de <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	005b      	lsls	r3, r3, #1
 800e9dc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800e9de:	f002 fe51 	bl	8011684 <HAL_RCC_GetSysClockFreq>
 800e9e2:	0003      	movs	r3, r0
 800e9e4:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	691a      	ldr	r2, [r3, #16]
 800e9ea:	2380      	movs	r3, #128	@ 0x80
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d131      	bne.n	800ea56 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d016      	beq.n	800ea28 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	0019      	movs	r1, r3
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7f1 fbc5 	bl	8000190 <__udivsi3>
 800ea06:	0003      	movs	r3, r0
 800ea08:	001a      	movs	r2, r3
 800ea0a:	0013      	movs	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	189b      	adds	r3, r3, r2
 800ea10:	005b      	lsls	r3, r3, #1
 800ea12:	001a      	movs	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	695b      	ldr	r3, [r3, #20]
 800ea18:	0019      	movs	r1, r3
 800ea1a:	0010      	movs	r0, r2
 800ea1c:	f7f1 fbb8 	bl	8000190 <__udivsi3>
 800ea20:	0003      	movs	r3, r0
 800ea22:	3305      	adds	r3, #5
 800ea24:	613b      	str	r3, [r7, #16]
 800ea26:	e02a      	b.n	800ea7e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	0019      	movs	r1, r3
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f7f1 fbae 	bl	8000190 <__udivsi3>
 800ea34:	0003      	movs	r3, r0
 800ea36:	001a      	movs	r2, r3
 800ea38:	0013      	movs	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	189b      	adds	r3, r3, r2
 800ea3e:	005b      	lsls	r3, r3, #1
 800ea40:	001a      	movs	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	695b      	ldr	r3, [r3, #20]
 800ea46:	0019      	movs	r1, r3
 800ea48:	0010      	movs	r0, r2
 800ea4a:	f7f1 fba1 	bl	8000190 <__udivsi3>
 800ea4e:	0003      	movs	r3, r0
 800ea50:	3305      	adds	r3, #5
 800ea52:	613b      	str	r3, [r7, #16]
 800ea54:	e013      	b.n	800ea7e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800ea56:	6979      	ldr	r1, [r7, #20]
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7f1 fb99 	bl	8000190 <__udivsi3>
 800ea5e:	0003      	movs	r3, r0
 800ea60:	001a      	movs	r2, r3
 800ea62:	0013      	movs	r3, r2
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	189b      	adds	r3, r3, r2
 800ea68:	005b      	lsls	r3, r3, #1
 800ea6a:	001a      	movs	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	695b      	ldr	r3, [r3, #20]
 800ea70:	0019      	movs	r1, r3
 800ea72:	0010      	movs	r0, r2
 800ea74:	f7f1 fb8c 	bl	8000190 <__udivsi3>
 800ea78:	0003      	movs	r3, r0
 800ea7a:	3305      	adds	r3, #5
 800ea7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	210a      	movs	r1, #10
 800ea82:	0018      	movs	r0, r3
 800ea84:	f7f1 fb84 	bl	8000190 <__udivsi3>
 800ea88:	0003      	movs	r3, r0
 800ea8a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	4013      	ands	r3, r2
 800ea92:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	085b      	lsrs	r3, r3, #1
 800ea9c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	021b      	lsls	r3, r3, #8
 800eaa2:	61bb      	str	r3, [r7, #24]
 800eaa4:	e003      	b.n	800eaae <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800eaa6:	2302      	movs	r3, #2
 800eaa8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d902      	bls.n	800eaba <HAL_I2S_Init+0x152>
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	2bff      	cmp	r3, #255	@ 0xff
 800eab8:	d907      	bls.n	800eaca <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eabe:	2210      	movs	r2, #16
 800eac0:	431a      	orrs	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800eac6:	2301      	movs	r3, #1
 800eac8:	e039      	b.n	800eb3e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	691a      	ldr	r2, [r3, #16]
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	431a      	orrs	r2, r3
 800ead2:	0011      	movs	r1, r2
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	69fa      	ldr	r2, [r7, #28]
 800eada:	430a      	orrs	r2, r1
 800eadc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	69db      	ldr	r3, [r3, #28]
 800eae4:	4a18      	ldr	r2, [pc, #96]	@ (800eb48 <HAL_I2S_Init+0x1e0>)
 800eae6:	401a      	ands	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6859      	ldr	r1, [r3, #4]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	4319      	orrs	r1, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	4319      	orrs	r1, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	430b      	orrs	r3, r1
 800eafe:	431a      	orrs	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2180      	movs	r1, #128	@ 0x80
 800eb06:	0109      	lsls	r1, r1, #4
 800eb08:	430a      	orrs	r2, r1
 800eb0a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	2b30      	cmp	r3, #48	@ 0x30
 800eb12:	d003      	beq.n	800eb1c <HAL_I2S_Init+0x1b4>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	2bb0      	cmp	r3, #176	@ 0xb0
 800eb1a:	d108      	bne.n	800eb2e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	69da      	ldr	r2, [r3, #28]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2180      	movs	r1, #128	@ 0x80
 800eb28:	0149      	lsls	r1, r1, #5
 800eb2a:	430a      	orrs	r2, r1
 800eb2c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2235      	movs	r2, #53	@ 0x35
 800eb38:	2101      	movs	r1, #1
 800eb3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	0018      	movs	r0, r3
 800eb40:	46bd      	mov	sp, r7
 800eb42:	b008      	add	sp, #32
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	46c0      	nop			@ (mov r8, r8)
 800eb48:	fffff040 	.word	0xfffff040

0800eb4c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	1dbb      	adds	r3, r7, #6
 800eb58:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d003      	beq.n	800eb68 <HAL_I2S_Receive_DMA+0x1c>
 800eb60:	1dbb      	adds	r3, r7, #6
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d101      	bne.n	800eb6c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e0a6      	b.n	800ecba <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2234      	movs	r2, #52	@ 0x34
 800eb70:	5c9b      	ldrb	r3, [r3, r2]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d101      	bne.n	800eb7c <HAL_I2S_Receive_DMA+0x30>
 800eb78:	2302      	movs	r3, #2
 800eb7a:	e09e      	b.n	800ecba <HAL_I2S_Receive_DMA+0x16e>
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2234      	movs	r2, #52	@ 0x34
 800eb80:	2101      	movs	r1, #1
 800eb82:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2235      	movs	r2, #53	@ 0x35
 800eb88:	5c9b      	ldrb	r3, [r3, r2]
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d005      	beq.n	800eb9c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2234      	movs	r2, #52	@ 0x34
 800eb94:	2100      	movs	r1, #0
 800eb96:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e08e      	b.n	800ecba <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2235      	movs	r2, #53	@ 0x35
 800eba0:	2104      	movs	r1, #4
 800eba2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	69db      	ldr	r3, [r3, #28]
 800ebb6:	2207      	movs	r2, #7
 800ebb8:	4013      	ands	r3, r2
 800ebba:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	2b03      	cmp	r3, #3
 800ebc0:	d002      	beq.n	800ebc8 <HAL_I2S_Receive_DMA+0x7c>
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b05      	cmp	r3, #5
 800ebc6:	d10c      	bne.n	800ebe2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800ebc8:	1dbb      	adds	r3, r7, #6
 800ebca:	881b      	ldrh	r3, [r3, #0]
 800ebcc:	18db      	adds	r3, r3, r3
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800ebd4:	1dbb      	adds	r3, r7, #6
 800ebd6:	881b      	ldrh	r3, [r3, #0]
 800ebd8:	18db      	adds	r3, r3, r3
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ebe0:	e007      	b.n	800ebf2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	1dba      	adds	r2, r7, #6
 800ebe6:	8812      	ldrh	r2, [r2, #0]
 800ebe8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	1dba      	adds	r2, r7, #6
 800ebee:	8812      	ldrh	r2, [r2, #0]
 800ebf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebf6:	4a33      	ldr	r2, [pc, #204]	@ (800ecc4 <HAL_I2S_Receive_DMA+0x178>)
 800ebf8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebfe:	4a32      	ldr	r2, [pc, #200]	@ (800ecc8 <HAL_I2S_Receive_DMA+0x17c>)
 800ec00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec06:	4a31      	ldr	r2, [pc, #196]	@ (800eccc <HAL_I2S_Receive_DMA+0x180>)
 800ec08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	69da      	ldr	r2, [r3, #28]
 800ec10:	23c0      	movs	r3, #192	@ 0xc0
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	401a      	ands	r2, r3
 800ec16:	23c0      	movs	r3, #192	@ 0xc0
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d10a      	bne.n	800ec34 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800ec1e:	2300      	movs	r3, #0
 800ec20:	613b      	str	r3, [r7, #16]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	613b      	str	r3, [r7, #16]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	613b      	str	r3, [r7, #16]
 800ec32:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	330c      	adds	r3, #12
 800ec3e:	0019      	movs	r1, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec44:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800ec4c:	f7fd f920 	bl	800be90 <HAL_DMA_Start_IT>
 800ec50:	1e03      	subs	r3, r0, #0
 800ec52:	d00f      	beq.n	800ec74 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec58:	2208      	movs	r2, #8
 800ec5a:	431a      	orrs	r2, r3
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2235      	movs	r2, #53	@ 0x35
 800ec64:	2101      	movs	r1, #1
 800ec66:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2234      	movs	r2, #52	@ 0x34
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ec70:	2301      	movs	r3, #1
 800ec72:	e022      	b.n	800ecba <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	69da      	ldr	r2, [r3, #28]
 800ec7a:	2380      	movs	r3, #128	@ 0x80
 800ec7c:	00db      	lsls	r3, r3, #3
 800ec7e:	4013      	ands	r3, r2
 800ec80:	d108      	bne.n	800ec94 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	69da      	ldr	r2, [r3, #28]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2180      	movs	r1, #128	@ 0x80
 800ec8e:	00c9      	lsls	r1, r1, #3
 800ec90:	430a      	orrs	r2, r1
 800ec92:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	d107      	bne.n	800ecb0 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	685a      	ldr	r2, [r3, #4]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2101      	movs	r1, #1
 800ecac:	430a      	orrs	r2, r1
 800ecae:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2234      	movs	r2, #52	@ 0x34
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	0018      	movs	r0, r3
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	b006      	add	sp, #24
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	46c0      	nop			@ (mov r8, r8)
 800ecc4:	0800eead 	.word	0x0800eead
 800ecc8:	0800ee69 	.word	0x0800ee69
 800eccc:	0800eecb 	.word	0x0800eecb

0800ecd0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ecd8:	2317      	movs	r3, #23
 800ecda:	18fb      	adds	r3, r7, r3
 800ecdc:	2200      	movs	r2, #0
 800ecde:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	685a      	ldr	r2, [r3, #4]
 800ece4:	2380      	movs	r3, #128	@ 0x80
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d003      	beq.n	800ecf4 <HAL_I2S_DMAStop+0x24>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d158      	bne.n	800eda6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d010      	beq.n	800ed1e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed00:	0018      	movs	r0, r3
 800ed02:	f7fd f92b 	bl	800bf5c <HAL_DMA_Abort>
 800ed06:	1e03      	subs	r3, r0, #0
 800ed08:	d009      	beq.n	800ed1e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed0e:	2208      	movs	r2, #8
 800ed10:	431a      	orrs	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ed16:	2317      	movs	r3, #23
 800ed18:	18fb      	adds	r3, r7, r3
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	2364      	movs	r3, #100	@ 0x64
 800ed22:	2201      	movs	r2, #1
 800ed24:	2102      	movs	r1, #2
 800ed26:	f000 f8f7 	bl	800ef18 <I2S_WaitFlagStateUntilTimeout>
 800ed2a:	1e03      	subs	r3, r0, #0
 800ed2c:	d00d      	beq.n	800ed4a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed32:	2201      	movs	r2, #1
 800ed34:	431a      	orrs	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2235      	movs	r2, #53	@ 0x35
 800ed3e:	2101      	movs	r1, #1
 800ed40:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800ed42:	2317      	movs	r3, #23
 800ed44:	18fb      	adds	r3, r7, r3
 800ed46:	2201      	movs	r2, #1
 800ed48:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	2364      	movs	r3, #100	@ 0x64
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2180      	movs	r1, #128	@ 0x80
 800ed52:	f000 f8e1 	bl	800ef18 <I2S_WaitFlagStateUntilTimeout>
 800ed56:	1e03      	subs	r3, r0, #0
 800ed58:	d00d      	beq.n	800ed76 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed5e:	2201      	movs	r2, #1
 800ed60:	431a      	orrs	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2235      	movs	r2, #53	@ 0x35
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800ed6e:	2317      	movs	r3, #23
 800ed70:	18fb      	adds	r3, r7, r3
 800ed72:	2201      	movs	r2, #1
 800ed74:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	69da      	ldr	r2, [r3, #28]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4938      	ldr	r1, [pc, #224]	@ (800ee64 <HAL_I2S_DMAStop+0x194>)
 800ed82:	400a      	ands	r2, r1
 800ed84:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800ed86:	2300      	movs	r3, #0
 800ed88:	613b      	str	r3, [r7, #16]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	613b      	str	r3, [r7, #16]
 800ed92:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2102      	movs	r1, #2
 800eda0:	438a      	bics	r2, r1
 800eda2:	605a      	str	r2, [r3, #4]
 800eda4:	e053      	b.n	800ee4e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	685a      	ldr	r2, [r3, #4]
 800edaa:	23c0      	movs	r3, #192	@ 0xc0
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	429a      	cmp	r2, r3
 800edb0:	d005      	beq.n	800edbe <HAL_I2S_DMAStop+0xee>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	685a      	ldr	r2, [r3, #4]
 800edb6:	2380      	movs	r3, #128	@ 0x80
 800edb8:	005b      	lsls	r3, r3, #1
 800edba:	429a      	cmp	r2, r3
 800edbc:	d147      	bne.n	800ee4e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d010      	beq.n	800ede8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edca:	0018      	movs	r0, r3
 800edcc:	f7fd f8c6 	bl	800bf5c <HAL_DMA_Abort>
 800edd0:	1e03      	subs	r3, r0, #0
 800edd2:	d009      	beq.n	800ede8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edd8:	2208      	movs	r2, #8
 800edda:	431a      	orrs	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ede0:	2317      	movs	r3, #23
 800ede2:	18fb      	adds	r3, r7, r3
 800ede4:	2201      	movs	r2, #1
 800ede6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	69da      	ldr	r2, [r3, #28]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	491c      	ldr	r1, [pc, #112]	@ (800ee64 <HAL_I2S_DMAStop+0x194>)
 800edf4:	400a      	ands	r2, r1
 800edf6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800edf8:	2300      	movs	r3, #0
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	60fb      	str	r3, [r7, #12]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	685a      	ldr	r2, [r3, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2101      	movs	r1, #1
 800ee1a:	438a      	bics	r2, r1
 800ee1c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	2380      	movs	r3, #128	@ 0x80
 800ee24:	005b      	lsls	r3, r3, #1
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d10e      	bne.n	800ee48 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee2e:	2240      	movs	r2, #64	@ 0x40
 800ee30:	431a      	orrs	r2, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2235      	movs	r2, #53	@ 0x35
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800ee3e:	2317      	movs	r3, #23
 800ee40:	18fb      	adds	r3, r7, r3
 800ee42:	2201      	movs	r2, #1
 800ee44:	701a      	strb	r2, [r3, #0]
 800ee46:	e002      	b.n	800ee4e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2235      	movs	r2, #53	@ 0x35
 800ee52:	2101      	movs	r1, #1
 800ee54:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800ee56:	2317      	movs	r3, #23
 800ee58:	18fb      	adds	r3, r7, r3
 800ee5a:	781b      	ldrb	r3, [r3, #0]
}
 800ee5c:	0018      	movs	r0, r3
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	b006      	add	sp, #24
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	fffffbff 	.word	0xfffffbff

0800ee68 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee74:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	69db      	ldr	r3, [r3, #28]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d10e      	bne.n	800ee9c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	685a      	ldr	r2, [r3, #4]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2101      	movs	r1, #1
 800ee8a:	438a      	bics	r2, r1
 800ee8c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2235      	movs	r2, #53	@ 0x35
 800ee98:	2101      	movs	r1, #1
 800ee9a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	0018      	movs	r0, r3
 800eea0:	f7fa f9db 	bl	800925a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800eea4:	46c0      	nop			@ (mov r8, r8)
 800eea6:	46bd      	mov	sp, r7
 800eea8:	b004      	add	sp, #16
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeb8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	0018      	movs	r0, r3
 800eebe:	f7fa f9c1 	bl	8009244 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800eec2:	46c0      	nop			@ (mov r8, r8)
 800eec4:	46bd      	mov	sp, r7
 800eec6:	b004      	add	sp, #16
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eed6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2103      	movs	r1, #3
 800eee4:	438a      	bics	r2, r1
 800eee6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2200      	movs	r2, #0
 800eeec:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2200      	movs	r2, #0
 800eef2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2235      	movs	r2, #53	@ 0x35
 800eef8:	2101      	movs	r1, #1
 800eefa:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef00:	2208      	movs	r2, #8
 800ef02:	431a      	orrs	r2, r3
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	0018      	movs	r0, r3
 800ef0c:	f7fa f9ec 	bl	80092e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ef10:	46c0      	nop			@ (mov r8, r8)
 800ef12:	46bd      	mov	sp, r7
 800ef14:	b004      	add	sp, #16
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	603b      	str	r3, [r7, #0]
 800ef24:	1dfb      	adds	r3, r7, #7
 800ef26:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ef28:	f7fc fa92 	bl	800b450 <HAL_GetTick>
 800ef2c:	0003      	movs	r3, r0
 800ef2e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ef30:	e017      	b.n	800ef62 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	3301      	adds	r3, #1
 800ef36:	d014      	beq.n	800ef62 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800ef38:	f7fc fa8a 	bl	800b450 <HAL_GetTick>
 800ef3c:	0002      	movs	r2, r0
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d902      	bls.n	800ef4e <I2S_WaitFlagStateUntilTimeout+0x36>
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d109      	bne.n	800ef62 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2235      	movs	r2, #53	@ 0x35
 800ef52:	2101      	movs	r1, #1
 800ef54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2234      	movs	r2, #52	@ 0x34
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e00f      	b.n	800ef82 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	425a      	negs	r2, r3
 800ef72:	4153      	adcs	r3, r2
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	001a      	movs	r2, r3
 800ef78:	1dfb      	adds	r3, r7, #7
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d1d8      	bne.n	800ef32 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	0018      	movs	r0, r3
 800ef84:	46bd      	mov	sp, r7
 800ef86:	b006      	add	sp, #24
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ef8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef8e:	b08b      	sub	sp, #44	@ 0x2c
 800ef90:	af06      	add	r7, sp, #24
 800ef92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d101      	bne.n	800ef9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e0f0      	b.n	800f180 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a79      	ldr	r2, [pc, #484]	@ (800f188 <HAL_PCD_Init+0x1fc>)
 800efa2:	5c9b      	ldrb	r3, [r3, r2]
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d108      	bne.n	800efbc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	23aa      	movs	r3, #170	@ 0xaa
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	2100      	movs	r1, #0
 800efb2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	0018      	movs	r0, r3
 800efb8:	f009 f988 	bl	80182cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a72      	ldr	r2, [pc, #456]	@ (800f188 <HAL_PCD_Init+0x1fc>)
 800efc0:	2103      	movs	r1, #3
 800efc2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	0018      	movs	r0, r3
 800efca:	f005 f93b 	bl	8014244 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800efce:	230f      	movs	r3, #15
 800efd0:	18fb      	adds	r3, r7, r3
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
 800efd6:	e049      	b.n	800f06c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800efd8:	200f      	movs	r0, #15
 800efda:	183b      	adds	r3, r7, r0
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	6879      	ldr	r1, [r7, #4]
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	0013      	movs	r3, r2
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	189b      	adds	r3, r3, r2
 800efe8:	00db      	lsls	r3, r3, #3
 800efea:	18cb      	adds	r3, r1, r3
 800efec:	3301      	adds	r3, #1
 800efee:	2201      	movs	r2, #1
 800eff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800eff2:	183b      	adds	r3, r7, r0
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	6879      	ldr	r1, [r7, #4]
 800eff8:	1c5a      	adds	r2, r3, #1
 800effa:	0013      	movs	r3, r2
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	189b      	adds	r3, r3, r2
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	183a      	adds	r2, r7, r0
 800f004:	7812      	ldrb	r2, [r2, #0]
 800f006:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f008:	183b      	adds	r3, r7, r0
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	6879      	ldr	r1, [r7, #4]
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	0013      	movs	r3, r2
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	189b      	adds	r3, r3, r2
 800f016:	00db      	lsls	r3, r3, #3
 800f018:	18cb      	adds	r3, r1, r3
 800f01a:	3303      	adds	r3, #3
 800f01c:	2200      	movs	r2, #0
 800f01e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f020:	183b      	adds	r3, r7, r0
 800f022:	781a      	ldrb	r2, [r3, #0]
 800f024:	6879      	ldr	r1, [r7, #4]
 800f026:	0013      	movs	r3, r2
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	189b      	adds	r3, r3, r2
 800f02c:	00db      	lsls	r3, r3, #3
 800f02e:	18cb      	adds	r3, r1, r3
 800f030:	3338      	adds	r3, #56	@ 0x38
 800f032:	2200      	movs	r2, #0
 800f034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f036:	183b      	adds	r3, r7, r0
 800f038:	781a      	ldrb	r2, [r3, #0]
 800f03a:	6879      	ldr	r1, [r7, #4]
 800f03c:	0013      	movs	r3, r2
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	189b      	adds	r3, r3, r2
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	18cb      	adds	r3, r1, r3
 800f046:	333c      	adds	r3, #60	@ 0x3c
 800f048:	2200      	movs	r2, #0
 800f04a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f04c:	183b      	adds	r3, r7, r0
 800f04e:	781a      	ldrb	r2, [r3, #0]
 800f050:	6879      	ldr	r1, [r7, #4]
 800f052:	0013      	movs	r3, r2
 800f054:	009b      	lsls	r3, r3, #2
 800f056:	189b      	adds	r3, r3, r2
 800f058:	00db      	lsls	r3, r3, #3
 800f05a:	18cb      	adds	r3, r1, r3
 800f05c:	3340      	adds	r3, #64	@ 0x40
 800f05e:	2200      	movs	r2, #0
 800f060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f062:	183b      	adds	r3, r7, r0
 800f064:	781a      	ldrb	r2, [r3, #0]
 800f066:	183b      	adds	r3, r7, r0
 800f068:	3201      	adds	r2, #1
 800f06a:	701a      	strb	r2, [r3, #0]
 800f06c:	210f      	movs	r1, #15
 800f06e:	187b      	adds	r3, r7, r1
 800f070:	781a      	ldrb	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	429a      	cmp	r2, r3
 800f078:	d3ae      	bcc.n	800efd8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f07a:	187b      	adds	r3, r7, r1
 800f07c:	2200      	movs	r2, #0
 800f07e:	701a      	strb	r2, [r3, #0]
 800f080:	e056      	b.n	800f130 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f082:	240f      	movs	r4, #15
 800f084:	193b      	adds	r3, r7, r4
 800f086:	781a      	ldrb	r2, [r3, #0]
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	236a      	movs	r3, #106	@ 0x6a
 800f08c:	33ff      	adds	r3, #255	@ 0xff
 800f08e:	0019      	movs	r1, r3
 800f090:	0013      	movs	r3, r2
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	189b      	adds	r3, r3, r2
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	18c3      	adds	r3, r0, r3
 800f09a:	185b      	adds	r3, r3, r1
 800f09c:	2200      	movs	r2, #0
 800f09e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f0a0:	193b      	adds	r3, r7, r4
 800f0a2:	781a      	ldrb	r2, [r3, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	23b4      	movs	r3, #180	@ 0xb4
 800f0a8:	0059      	lsls	r1, r3, #1
 800f0aa:	0013      	movs	r3, r2
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	189b      	adds	r3, r3, r2
 800f0b0:	00db      	lsls	r3, r3, #3
 800f0b2:	18c3      	adds	r3, r0, r3
 800f0b4:	185b      	adds	r3, r3, r1
 800f0b6:	193a      	adds	r2, r7, r4
 800f0b8:	7812      	ldrb	r2, [r2, #0]
 800f0ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f0bc:	193b      	adds	r3, r7, r4
 800f0be:	781a      	ldrb	r2, [r3, #0]
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	236c      	movs	r3, #108	@ 0x6c
 800f0c4:	33ff      	adds	r3, #255	@ 0xff
 800f0c6:	0019      	movs	r1, r3
 800f0c8:	0013      	movs	r3, r2
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	189b      	adds	r3, r3, r2
 800f0ce:	00db      	lsls	r3, r3, #3
 800f0d0:	18c3      	adds	r3, r0, r3
 800f0d2:	185b      	adds	r3, r3, r1
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f0d8:	193b      	adds	r3, r7, r4
 800f0da:	781a      	ldrb	r2, [r3, #0]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	23bc      	movs	r3, #188	@ 0xbc
 800f0e0:	0059      	lsls	r1, r3, #1
 800f0e2:	0013      	movs	r3, r2
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	189b      	adds	r3, r3, r2
 800f0e8:	00db      	lsls	r3, r3, #3
 800f0ea:	18c3      	adds	r3, r0, r3
 800f0ec:	185b      	adds	r3, r3, r1
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f0f2:	193b      	adds	r3, r7, r4
 800f0f4:	781a      	ldrb	r2, [r3, #0]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	23be      	movs	r3, #190	@ 0xbe
 800f0fa:	0059      	lsls	r1, r3, #1
 800f0fc:	0013      	movs	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	189b      	adds	r3, r3, r2
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	18c3      	adds	r3, r0, r3
 800f106:	185b      	adds	r3, r3, r1
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f10c:	193b      	adds	r3, r7, r4
 800f10e:	781a      	ldrb	r2, [r3, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	23c0      	movs	r3, #192	@ 0xc0
 800f114:	0059      	lsls	r1, r3, #1
 800f116:	0013      	movs	r3, r2
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	189b      	adds	r3, r3, r2
 800f11c:	00db      	lsls	r3, r3, #3
 800f11e:	18c3      	adds	r3, r0, r3
 800f120:	185b      	adds	r3, r3, r1
 800f122:	2200      	movs	r2, #0
 800f124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f126:	193b      	adds	r3, r7, r4
 800f128:	781a      	ldrb	r2, [r3, #0]
 800f12a:	193b      	adds	r3, r7, r4
 800f12c:	3201      	adds	r2, #1
 800f12e:	701a      	strb	r2, [r3, #0]
 800f130:	230f      	movs	r3, #15
 800f132:	18fb      	adds	r3, r7, r3
 800f134:	781a      	ldrb	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d3a1      	bcc.n	800f082 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6818      	ldr	r0, [r3, #0]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	466a      	mov	r2, sp
 800f146:	0011      	movs	r1, r2
 800f148:	001a      	movs	r2, r3
 800f14a:	3210      	adds	r2, #16
 800f14c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800f14e:	c170      	stmia	r1!, {r4, r5, r6}
 800f150:	ca30      	ldmia	r2!, {r4, r5}
 800f152:	c130      	stmia	r1!, {r4, r5}
 800f154:	6859      	ldr	r1, [r3, #4]
 800f156:	689a      	ldr	r2, [r3, #8]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	f005 f88d 	bl	8014278 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2224      	movs	r2, #36	@ 0x24
 800f162:	2100      	movs	r1, #0
 800f164:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a07      	ldr	r2, [pc, #28]	@ (800f188 <HAL_PCD_Init+0x1fc>)
 800f16a:	2101      	movs	r1, #1
 800f16c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	69db      	ldr	r3, [r3, #28]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d103      	bne.n	800f17e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	0018      	movs	r0, r3
 800f17a:	f001 fd23 	bl	8010bc4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800f17e:	2300      	movs	r3, #0
}
 800f180:	0018      	movs	r0, r3
 800f182:	46bd      	mov	sp, r7
 800f184:	b005      	add	sp, #20
 800f186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f188:	000002a9 	.word	0x000002a9

0800f18c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	23aa      	movs	r3, #170	@ 0xaa
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	5cd3      	ldrb	r3, [r2, r3]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d101      	bne.n	800f1a4 <HAL_PCD_Start+0x18>
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	e014      	b.n	800f1ce <HAL_PCD_Start+0x42>
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	23aa      	movs	r3, #170	@ 0xaa
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	0018      	movs	r0, r3
 800f1b4:	f005 f830 	bl	8014218 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	0018      	movs	r0, r3
 800f1be:	f007 f833 	bl	8016228 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	23aa      	movs	r3, #170	@ 0xaa
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	0018      	movs	r0, r3
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	b002      	add	sp, #8
 800f1d4:	bd80      	pop	{r7, pc}
	...

0800f1d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	0018      	movs	r0, r3
 800f1e6:	f007 f835 	bl	8016254 <USB_ReadInterrupts>
 800f1ea:	0003      	movs	r3, r0
 800f1ec:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	2380      	movs	r3, #128	@ 0x80
 800f1f2:	021b      	lsls	r3, r3, #8
 800f1f4:	4013      	ands	r3, r2
 800f1f6:	d004      	beq.n	800f202 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	0018      	movs	r0, r3
 800f1fc:	f000 fb62 	bl	800f8c4 <PCD_EP_ISR_Handler>

    return;
 800f200:	e11d      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	2380      	movs	r3, #128	@ 0x80
 800f206:	00db      	lsls	r3, r3, #3
 800f208:	4013      	ands	r3, r2
 800f20a:	d015      	beq.n	800f238 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2244      	movs	r2, #68	@ 0x44
 800f212:	5a9b      	ldrh	r3, [r3, r2]
 800f214:	b29a      	uxth	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	498a      	ldr	r1, [pc, #552]	@ (800f444 <HAL_PCD_IRQHandler+0x26c>)
 800f21c:	400a      	ands	r2, r1
 800f21e:	b291      	uxth	r1, r2
 800f220:	2244      	movs	r2, #68	@ 0x44
 800f222:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	0018      	movs	r0, r3
 800f228:	f009 f8d3 	bl	80183d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2100      	movs	r1, #0
 800f230:	0018      	movs	r0, r3
 800f232:	f000 f915 	bl	800f460 <HAL_PCD_SetAddress>

    return;
 800f236:	e102      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	2380      	movs	r3, #128	@ 0x80
 800f23c:	01db      	lsls	r3, r3, #7
 800f23e:	4013      	ands	r3, r2
 800f240:	d00c      	beq.n	800f25c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2244      	movs	r2, #68	@ 0x44
 800f248:	5a9b      	ldrh	r3, [r3, r2]
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	497d      	ldr	r1, [pc, #500]	@ (800f448 <HAL_PCD_IRQHandler+0x270>)
 800f252:	400a      	ands	r2, r1
 800f254:	b291      	uxth	r1, r2
 800f256:	2244      	movs	r2, #68	@ 0x44
 800f258:	5299      	strh	r1, [r3, r2]

    return;
 800f25a:	e0f0      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800f25c:	68fa      	ldr	r2, [r7, #12]
 800f25e:	2380      	movs	r3, #128	@ 0x80
 800f260:	019b      	lsls	r3, r3, #6
 800f262:	4013      	ands	r3, r2
 800f264:	d00c      	beq.n	800f280 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2244      	movs	r2, #68	@ 0x44
 800f26c:	5a9b      	ldrh	r3, [r3, r2]
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4975      	ldr	r1, [pc, #468]	@ (800f44c <HAL_PCD_IRQHandler+0x274>)
 800f276:	400a      	ands	r2, r1
 800f278:	b291      	uxth	r1, r2
 800f27a:	2244      	movs	r2, #68	@ 0x44
 800f27c:	5299      	strh	r1, [r3, r2]

    return;
 800f27e:	e0de      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	2380      	movs	r3, #128	@ 0x80
 800f284:	015b      	lsls	r3, r3, #5
 800f286:	4013      	ands	r3, r2
 800f288:	d038      	beq.n	800f2fc <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2240      	movs	r2, #64	@ 0x40
 800f290:	5a9b      	ldrh	r3, [r3, r2]
 800f292:	b29a      	uxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2104      	movs	r1, #4
 800f29a:	438a      	bics	r2, r1
 800f29c:	b291      	uxth	r1, r2
 800f29e:	2240      	movs	r2, #64	@ 0x40
 800f2a0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2240      	movs	r2, #64	@ 0x40
 800f2a8:	5a9b      	ldrh	r3, [r3, r2]
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2108      	movs	r1, #8
 800f2b2:	438a      	bics	r2, r1
 800f2b4:	b291      	uxth	r1, r2
 800f2b6:	2240      	movs	r2, #64	@ 0x40
 800f2b8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	23b8      	movs	r3, #184	@ 0xb8
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	5cd3      	ldrb	r3, [r2, r3]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d109      	bne.n	800f2da <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	23b8      	movs	r3, #184	@ 0xb8
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	0018      	movs	r0, r3
 800f2d6:	f001 fc9f 	bl	8010c18 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	0018      	movs	r0, r3
 800f2de:	f009 f8b9 	bl	8018454 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2244      	movs	r2, #68	@ 0x44
 800f2e8:	5a9b      	ldrh	r3, [r3, r2]
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4957      	ldr	r1, [pc, #348]	@ (800f450 <HAL_PCD_IRQHandler+0x278>)
 800f2f2:	400a      	ands	r2, r1
 800f2f4:	b291      	uxth	r1, r2
 800f2f6:	2244      	movs	r2, #68	@ 0x44
 800f2f8:	5299      	strh	r1, [r3, r2]

    return;
 800f2fa:	e0a0      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	2380      	movs	r3, #128	@ 0x80
 800f300:	011b      	lsls	r3, r3, #4
 800f302:	4013      	ands	r3, r2
 800f304:	d028      	beq.n	800f358 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2240      	movs	r2, #64	@ 0x40
 800f30c:	5a9b      	ldrh	r3, [r3, r2]
 800f30e:	b29a      	uxth	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2108      	movs	r1, #8
 800f316:	430a      	orrs	r2, r1
 800f318:	b291      	uxth	r1, r2
 800f31a:	2240      	movs	r2, #64	@ 0x40
 800f31c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2244      	movs	r2, #68	@ 0x44
 800f324:	5a9b      	ldrh	r3, [r3, r2]
 800f326:	b29a      	uxth	r2, r3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4949      	ldr	r1, [pc, #292]	@ (800f454 <HAL_PCD_IRQHandler+0x27c>)
 800f32e:	400a      	ands	r2, r1
 800f330:	b291      	uxth	r1, r2
 800f332:	2244      	movs	r2, #68	@ 0x44
 800f334:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2240      	movs	r2, #64	@ 0x40
 800f33c:	5a9b      	ldrh	r3, [r3, r2]
 800f33e:	b29a      	uxth	r2, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2104      	movs	r1, #4
 800f346:	430a      	orrs	r2, r1
 800f348:	b291      	uxth	r1, r2
 800f34a:	2240      	movs	r2, #64	@ 0x40
 800f34c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	0018      	movs	r0, r3
 800f352:	f009 f863 	bl	801841c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800f356:	e072      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2280      	movs	r2, #128	@ 0x80
 800f35c:	4013      	ands	r3, r2
 800f35e:	d046      	beq.n	800f3ee <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2244      	movs	r2, #68	@ 0x44
 800f366:	5a9b      	ldrh	r3, [r3, r2]
 800f368:	b29a      	uxth	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2180      	movs	r1, #128	@ 0x80
 800f370:	438a      	bics	r2, r1
 800f372:	b291      	uxth	r1, r2
 800f374:	2244      	movs	r2, #68	@ 0x44
 800f376:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	23b8      	movs	r3, #184	@ 0xb8
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	5cd3      	ldrb	r3, [r2, r3]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d12f      	bne.n	800f3e4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2240      	movs	r2, #64	@ 0x40
 800f38a:	5a9b      	ldrh	r3, [r3, r2]
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2104      	movs	r1, #4
 800f394:	430a      	orrs	r2, r1
 800f396:	b291      	uxth	r1, r2
 800f398:	2240      	movs	r2, #64	@ 0x40
 800f39a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2240      	movs	r2, #64	@ 0x40
 800f3a2:	5a9b      	ldrh	r3, [r3, r2]
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2108      	movs	r1, #8
 800f3ac:	430a      	orrs	r2, r1
 800f3ae:	b291      	uxth	r1, r2
 800f3b0:	2240      	movs	r2, #64	@ 0x40
 800f3b2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	23b8      	movs	r3, #184	@ 0xb8
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2254      	movs	r2, #84	@ 0x54
 800f3c4:	5a9b      	ldrh	r3, [r3, r2]
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	089b      	lsrs	r3, r3, #2
 800f3ca:	223c      	movs	r2, #60	@ 0x3c
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	0019      	movs	r1, r3
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	23b9      	movs	r3, #185	@ 0xb9
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2101      	movs	r1, #1
 800f3dc:	0018      	movs	r0, r3
 800f3de:	f001 fc1b 	bl	8010c18 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800f3e2:	e02c      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	0018      	movs	r0, r3
 800f3e8:	f009 f818 	bl	801841c <HAL_PCD_SuspendCallback>
    return;
 800f3ec:	e027      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	2380      	movs	r3, #128	@ 0x80
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	4013      	ands	r3, r2
 800f3f6:	d010      	beq.n	800f41a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2244      	movs	r2, #68	@ 0x44
 800f3fe:	5a9b      	ldrh	r3, [r3, r2]
 800f400:	b29a      	uxth	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4914      	ldr	r1, [pc, #80]	@ (800f458 <HAL_PCD_IRQHandler+0x280>)
 800f408:	400a      	ands	r2, r1
 800f40a:	b291      	uxth	r1, r2
 800f40c:	2244      	movs	r2, #68	@ 0x44
 800f40e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	0018      	movs	r0, r3
 800f414:	f008 ffce 	bl	80183b4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800f418:	e011      	b.n	800f43e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	2380      	movs	r3, #128	@ 0x80
 800f41e:	005b      	lsls	r3, r3, #1
 800f420:	4013      	ands	r3, r2
 800f422:	d00c      	beq.n	800f43e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2244      	movs	r2, #68	@ 0x44
 800f42a:	5a9b      	ldrh	r3, [r3, r2]
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	490a      	ldr	r1, [pc, #40]	@ (800f45c <HAL_PCD_IRQHandler+0x284>)
 800f434:	400a      	ands	r2, r1
 800f436:	b291      	uxth	r1, r2
 800f438:	2244      	movs	r2, #68	@ 0x44
 800f43a:	5299      	strh	r1, [r3, r2]

    return;
 800f43c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800f43e:	46bd      	mov	sp, r7
 800f440:	b004      	add	sp, #16
 800f442:	bd80      	pop	{r7, pc}
 800f444:	fffffbff 	.word	0xfffffbff
 800f448:	ffffbfff 	.word	0xffffbfff
 800f44c:	ffffdfff 	.word	0xffffdfff
 800f450:	ffffefff 	.word	0xffffefff
 800f454:	fffff7ff 	.word	0xfffff7ff
 800f458:	fffffdff 	.word	0xfffffdff
 800f45c:	fffffeff 	.word	0xfffffeff

0800f460 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	000a      	movs	r2, r1
 800f46a:	1cfb      	adds	r3, r7, #3
 800f46c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	23aa      	movs	r3, #170	@ 0xaa
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	5cd3      	ldrb	r3, [r2, r3]
 800f476:	2b01      	cmp	r3, #1
 800f478:	d101      	bne.n	800f47e <HAL_PCD_SetAddress+0x1e>
 800f47a:	2302      	movs	r3, #2
 800f47c:	e017      	b.n	800f4ae <HAL_PCD_SetAddress+0x4e>
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	23aa      	movs	r3, #170	@ 0xaa
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	2101      	movs	r1, #1
 800f486:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	1cfa      	adds	r2, r7, #3
 800f48c:	2124      	movs	r1, #36	@ 0x24
 800f48e:	7812      	ldrb	r2, [r2, #0]
 800f490:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681a      	ldr	r2, [r3, #0]
 800f496:	1cfb      	adds	r3, r7, #3
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	0019      	movs	r1, r3
 800f49c:	0010      	movs	r0, r2
 800f49e:	f006 feaf 	bl	8016200 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	23aa      	movs	r3, #170	@ 0xaa
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	0018      	movs	r0, r3
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	b002      	add	sp, #8
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f4b6:	b590      	push	{r4, r7, lr}
 800f4b8:	b085      	sub	sp, #20
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
 800f4be:	000c      	movs	r4, r1
 800f4c0:	0010      	movs	r0, r2
 800f4c2:	0019      	movs	r1, r3
 800f4c4:	1cfb      	adds	r3, r7, #3
 800f4c6:	1c22      	adds	r2, r4, #0
 800f4c8:	701a      	strb	r2, [r3, #0]
 800f4ca:	003b      	movs	r3, r7
 800f4cc:	1c02      	adds	r2, r0, #0
 800f4ce:	801a      	strh	r2, [r3, #0]
 800f4d0:	1cbb      	adds	r3, r7, #2
 800f4d2:	1c0a      	adds	r2, r1, #0
 800f4d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f4d6:	230b      	movs	r3, #11
 800f4d8:	18fb      	adds	r3, r7, r3
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f4de:	1cfb      	adds	r3, r7, #3
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	b25b      	sxtb	r3, r3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	da0f      	bge.n	800f508 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f4e8:	1cfb      	adds	r3, r7, #3
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	2207      	movs	r2, #7
 800f4ee:	4013      	ands	r3, r2
 800f4f0:	1c5a      	adds	r2, r3, #1
 800f4f2:	0013      	movs	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	189b      	adds	r3, r3, r2
 800f4f8:	00db      	lsls	r3, r3, #3
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	18d3      	adds	r3, r2, r3
 800f4fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2201      	movs	r2, #1
 800f504:	705a      	strb	r2, [r3, #1]
 800f506:	e00f      	b.n	800f528 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f508:	1cfb      	adds	r3, r7, #3
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2207      	movs	r2, #7
 800f50e:	401a      	ands	r2, r3
 800f510:	0013      	movs	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	189b      	adds	r3, r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	3369      	adds	r3, #105	@ 0x69
 800f51a:	33ff      	adds	r3, #255	@ 0xff
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	18d3      	adds	r3, r2, r3
 800f520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f528:	1cfb      	adds	r3, r7, #3
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	2207      	movs	r2, #7
 800f52e:	4013      	ands	r3, r2
 800f530:	b2da      	uxtb	r2, r3
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f536:	003b      	movs	r3, r7
 800f538:	881a      	ldrh	r2, [r3, #0]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	1cba      	adds	r2, r7, #2
 800f542:	7812      	ldrb	r2, [r2, #0]
 800f544:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f546:	1cbb      	adds	r3, r7, #2
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d102      	bne.n	800f554 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	23aa      	movs	r3, #170	@ 0xaa
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	5cd3      	ldrb	r3, [r2, r3]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d101      	bne.n	800f564 <HAL_PCD_EP_Open+0xae>
 800f560:	2302      	movs	r3, #2
 800f562:	e013      	b.n	800f58c <HAL_PCD_EP_Open+0xd6>
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	23aa      	movs	r3, #170	@ 0xaa
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	2101      	movs	r1, #1
 800f56c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	0011      	movs	r1, r2
 800f576:	0018      	movs	r0, r3
 800f578:	f004 fea6 	bl	80142c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	23aa      	movs	r3, #170	@ 0xaa
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	2100      	movs	r1, #0
 800f584:	54d1      	strb	r1, [r2, r3]

  return ret;
 800f586:	230b      	movs	r3, #11
 800f588:	18fb      	adds	r3, r7, r3
 800f58a:	781b      	ldrb	r3, [r3, #0]
}
 800f58c:	0018      	movs	r0, r3
 800f58e:	46bd      	mov	sp, r7
 800f590:	b005      	add	sp, #20
 800f592:	bd90      	pop	{r4, r7, pc}

0800f594 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	000a      	movs	r2, r1
 800f59e:	1cfb      	adds	r3, r7, #3
 800f5a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f5a2:	1cfb      	adds	r3, r7, #3
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	b25b      	sxtb	r3, r3
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	da0f      	bge.n	800f5cc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f5ac:	1cfb      	adds	r3, r7, #3
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	2207      	movs	r2, #7
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	1c5a      	adds	r2, r3, #1
 800f5b6:	0013      	movs	r3, r2
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	189b      	adds	r3, r3, r2
 800f5bc:	00db      	lsls	r3, r3, #3
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	18d3      	adds	r3, r2, r3
 800f5c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	705a      	strb	r2, [r3, #1]
 800f5ca:	e00f      	b.n	800f5ec <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f5cc:	1cfb      	adds	r3, r7, #3
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	2207      	movs	r2, #7
 800f5d2:	401a      	ands	r2, r3
 800f5d4:	0013      	movs	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	189b      	adds	r3, r3, r2
 800f5da:	00db      	lsls	r3, r3, #3
 800f5dc:	3369      	adds	r3, #105	@ 0x69
 800f5de:	33ff      	adds	r3, #255	@ 0xff
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	18d3      	adds	r3, r2, r3
 800f5e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800f5ec:	1cfb      	adds	r3, r7, #3
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	2207      	movs	r2, #7
 800f5f2:	4013      	ands	r3, r2
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	23aa      	movs	r3, #170	@ 0xaa
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	5cd3      	ldrb	r3, [r2, r3]
 800f602:	2b01      	cmp	r3, #1
 800f604:	d101      	bne.n	800f60a <HAL_PCD_EP_Close+0x76>
 800f606:	2302      	movs	r3, #2
 800f608:	e011      	b.n	800f62e <HAL_PCD_EP_Close+0x9a>
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	23aa      	movs	r3, #170	@ 0xaa
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	2101      	movs	r1, #1
 800f612:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	0011      	movs	r1, r2
 800f61c:	0018      	movs	r0, r3
 800f61e:	f005 f9f5 	bl	8014a0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	23aa      	movs	r3, #170	@ 0xaa
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	2100      	movs	r1, #0
 800f62a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	0018      	movs	r0, r3
 800f630:	46bd      	mov	sp, r7
 800f632:	b004      	add	sp, #16
 800f634:	bd80      	pop	{r7, pc}

0800f636 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f636:	b580      	push	{r7, lr}
 800f638:	b086      	sub	sp, #24
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	60f8      	str	r0, [r7, #12]
 800f63e:	607a      	str	r2, [r7, #4]
 800f640:	603b      	str	r3, [r7, #0]
 800f642:	200b      	movs	r0, #11
 800f644:	183b      	adds	r3, r7, r0
 800f646:	1c0a      	adds	r2, r1, #0
 800f648:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f64a:	0001      	movs	r1, r0
 800f64c:	187b      	adds	r3, r7, r1
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2207      	movs	r2, #7
 800f652:	401a      	ands	r2, r3
 800f654:	0013      	movs	r3, r2
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	189b      	adds	r3, r3, r2
 800f65a:	00db      	lsls	r3, r3, #3
 800f65c:	3369      	adds	r3, #105	@ 0x69
 800f65e:	33ff      	adds	r3, #255	@ 0xff
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	18d3      	adds	r3, r2, r3
 800f664:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	683a      	ldr	r2, [r7, #0]
 800f670:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	2200      	movs	r2, #0
 800f676:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	2200      	movs	r2, #0
 800f67c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f67e:	187b      	adds	r3, r7, r1
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2207      	movs	r2, #7
 800f684:	4013      	ands	r3, r2
 800f686:	b2da      	uxtb	r2, r3
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	0011      	movs	r1, r2
 800f694:	0018      	movs	r0, r3
 800f696:	f005 fb79 	bl	8014d8c <USB_EPStartXfer>

  return HAL_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	0018      	movs	r0, r3
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	b006      	add	sp, #24
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	000a      	movs	r2, r1
 800f6ae:	1cfb      	adds	r3, r7, #3
 800f6b0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f6b2:	1cfb      	adds	r3, r7, #3
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	2207      	movs	r2, #7
 800f6b8:	401a      	ands	r2, r3
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	23c2      	movs	r3, #194	@ 0xc2
 800f6be:	0059      	lsls	r1, r3, #1
 800f6c0:	0013      	movs	r3, r2
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	189b      	adds	r3, r3, r2
 800f6c6:	00db      	lsls	r3, r3, #3
 800f6c8:	18c3      	adds	r3, r0, r3
 800f6ca:	185b      	adds	r3, r3, r1
 800f6cc:	681b      	ldr	r3, [r3, #0]
}
 800f6ce:	0018      	movs	r0, r3
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	b002      	add	sp, #8
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b086      	sub	sp, #24
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	607a      	str	r2, [r7, #4]
 800f6e0:	603b      	str	r3, [r7, #0]
 800f6e2:	200b      	movs	r0, #11
 800f6e4:	183b      	adds	r3, r7, r0
 800f6e6:	1c0a      	adds	r2, r1, #0
 800f6e8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f6ea:	183b      	adds	r3, r7, r0
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	2207      	movs	r2, #7
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	1c5a      	adds	r2, r3, #1
 800f6f4:	0013      	movs	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	189b      	adds	r3, r3, r2
 800f6fa:	00db      	lsls	r3, r3, #3
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	18d3      	adds	r3, r2, r3
 800f700:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	2224      	movs	r2, #36	@ 0x24
 800f712:	2101      	movs	r1, #1
 800f714:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	683a      	ldr	r2, [r7, #0]
 800f71a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	2200      	movs	r2, #0
 800f720:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	2201      	movs	r2, #1
 800f726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f728:	183b      	adds	r3, r7, r0
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	2207      	movs	r2, #7
 800f72e:	4013      	ands	r3, r2
 800f730:	b2da      	uxtb	r2, r3
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	0011      	movs	r1, r2
 800f73e:	0018      	movs	r0, r3
 800f740:	f005 fb24 	bl	8014d8c <USB_EPStartXfer>

  return HAL_OK;
 800f744:	2300      	movs	r3, #0
}
 800f746:	0018      	movs	r0, r3
 800f748:	46bd      	mov	sp, r7
 800f74a:	b006      	add	sp, #24
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b084      	sub	sp, #16
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
 800f756:	000a      	movs	r2, r1
 800f758:	1cfb      	adds	r3, r7, #3
 800f75a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800f75c:	1cfb      	adds	r3, r7, #3
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2207      	movs	r2, #7
 800f762:	401a      	ands	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d901      	bls.n	800f770 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e046      	b.n	800f7fe <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f770:	1cfb      	adds	r3, r7, #3
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	b25b      	sxtb	r3, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	da0f      	bge.n	800f79a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f77a:	1cfb      	adds	r3, r7, #3
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2207      	movs	r2, #7
 800f780:	4013      	ands	r3, r2
 800f782:	1c5a      	adds	r2, r3, #1
 800f784:	0013      	movs	r3, r2
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	189b      	adds	r3, r3, r2
 800f78a:	00db      	lsls	r3, r3, #3
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	18d3      	adds	r3, r2, r3
 800f790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2201      	movs	r2, #1
 800f796:	705a      	strb	r2, [r3, #1]
 800f798:	e00d      	b.n	800f7b6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f79a:	1cfb      	adds	r3, r7, #3
 800f79c:	781a      	ldrb	r2, [r3, #0]
 800f79e:	0013      	movs	r3, r2
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	189b      	adds	r3, r3, r2
 800f7a4:	00db      	lsls	r3, r3, #3
 800f7a6:	3369      	adds	r3, #105	@ 0x69
 800f7a8:	33ff      	adds	r3, #255	@ 0xff
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	18d3      	adds	r3, r2, r3
 800f7ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f7bc:	1cfb      	adds	r3, r7, #3
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2207      	movs	r2, #7
 800f7c2:	4013      	ands	r3, r2
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	23aa      	movs	r3, #170	@ 0xaa
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	5cd3      	ldrb	r3, [r2, r3]
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d101      	bne.n	800f7da <HAL_PCD_EP_SetStall+0x8c>
 800f7d6:	2302      	movs	r3, #2
 800f7d8:	e011      	b.n	800f7fe <HAL_PCD_EP_SetStall+0xb0>
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	23aa      	movs	r3, #170	@ 0xaa
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	2101      	movs	r1, #1
 800f7e2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	0011      	movs	r1, r2
 800f7ec:	0018      	movs	r0, r3
 800f7ee:	f006 fc05 	bl	8015ffc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	23aa      	movs	r3, #170	@ 0xaa
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	0018      	movs	r0, r3
 800f800:	46bd      	mov	sp, r7
 800f802:	b004      	add	sp, #16
 800f804:	bd80      	pop	{r7, pc}

0800f806 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b084      	sub	sp, #16
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	000a      	movs	r2, r1
 800f810:	1cfb      	adds	r3, r7, #3
 800f812:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f814:	1cfb      	adds	r3, r7, #3
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	220f      	movs	r2, #15
 800f81a:	401a      	ands	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d901      	bls.n	800f828 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800f824:	2301      	movs	r3, #1
 800f826:	e048      	b.n	800f8ba <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f828:	1cfb      	adds	r3, r7, #3
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	b25b      	sxtb	r3, r3
 800f82e:	2b00      	cmp	r3, #0
 800f830:	da0f      	bge.n	800f852 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f832:	1cfb      	adds	r3, r7, #3
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	2207      	movs	r2, #7
 800f838:	4013      	ands	r3, r2
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	0013      	movs	r3, r2
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	189b      	adds	r3, r3, r2
 800f842:	00db      	lsls	r3, r3, #3
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	18d3      	adds	r3, r2, r3
 800f848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2201      	movs	r2, #1
 800f84e:	705a      	strb	r2, [r3, #1]
 800f850:	e00f      	b.n	800f872 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f852:	1cfb      	adds	r3, r7, #3
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	2207      	movs	r2, #7
 800f858:	401a      	ands	r2, r3
 800f85a:	0013      	movs	r3, r2
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	189b      	adds	r3, r3, r2
 800f860:	00db      	lsls	r3, r3, #3
 800f862:	3369      	adds	r3, #105	@ 0x69
 800f864:	33ff      	adds	r3, #255	@ 0xff
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	18d3      	adds	r3, r2, r3
 800f86a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f878:	1cfb      	adds	r3, r7, #3
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	2207      	movs	r2, #7
 800f87e:	4013      	ands	r3, r2
 800f880:	b2da      	uxtb	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	23aa      	movs	r3, #170	@ 0xaa
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	5cd3      	ldrb	r3, [r2, r3]
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d101      	bne.n	800f896 <HAL_PCD_EP_ClrStall+0x90>
 800f892:	2302      	movs	r3, #2
 800f894:	e011      	b.n	800f8ba <HAL_PCD_EP_ClrStall+0xb4>
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	23aa      	movs	r3, #170	@ 0xaa
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	2101      	movs	r1, #1
 800f89e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	0011      	movs	r1, r2
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	f006 fbf7 	bl	801609c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	23aa      	movs	r3, #170	@ 0xaa
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	0018      	movs	r0, r3
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	b004      	add	sp, #16
 800f8c0:	bd80      	pop	{r7, pc}
	...

0800f8c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800f8c4:	b5b0      	push	{r4, r5, r7, lr}
 800f8c6:	b096      	sub	sp, #88	@ 0x58
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f8cc:	f000 fbec 	bl	80100a8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	204e      	movs	r0, #78	@ 0x4e
 800f8d6:	183b      	adds	r3, r7, r0
 800f8d8:	2144      	movs	r1, #68	@ 0x44
 800f8da:	5a52      	ldrh	r2, [r2, r1]
 800f8dc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800f8de:	183b      	adds	r3, r7, r0
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	244d      	movs	r4, #77	@ 0x4d
 800f8e6:	193b      	adds	r3, r7, r4
 800f8e8:	210f      	movs	r1, #15
 800f8ea:	400a      	ands	r2, r1
 800f8ec:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800f8ee:	193b      	adds	r3, r7, r4
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d000      	beq.n	800f8f8 <PCD_EP_ISR_Handler+0x34>
 800f8f6:	e18f      	b.n	800fc18 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800f8f8:	183b      	adds	r3, r7, r0
 800f8fa:	881b      	ldrh	r3, [r3, #0]
 800f8fc:	2210      	movs	r2, #16
 800f8fe:	4013      	ands	r3, r2
 800f900:	d155      	bne.n	800f9ae <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	881b      	ldrh	r3, [r3, #0]
 800f908:	b29a      	uxth	r2, r3
 800f90a:	200e      	movs	r0, #14
 800f90c:	183b      	adds	r3, r7, r0
 800f90e:	49bb      	ldr	r1, [pc, #748]	@ (800fbfc <PCD_EP_ISR_Handler+0x338>)
 800f910:	400a      	ands	r2, r1
 800f912:	801a      	strh	r2, [r3, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	183a      	adds	r2, r7, r0
 800f91a:	8812      	ldrh	r2, [r2, #0]
 800f91c:	49b8      	ldr	r1, [pc, #736]	@ (800fc00 <PCD_EP_ISR_Handler+0x33c>)
 800f91e:	430a      	orrs	r2, r1
 800f920:	b292      	uxth	r2, r2
 800f922:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	3328      	adds	r3, #40	@ 0x28
 800f928:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2250      	movs	r2, #80	@ 0x50
 800f930:	5a9b      	ldrh	r3, [r3, r2]
 800f932:	b29b      	uxth	r3, r3
 800f934:	001a      	movs	r2, r3
 800f936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	00db      	lsls	r3, r3, #3
 800f93c:	18d2      	adds	r2, r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	18d3      	adds	r3, r2, r3
 800f944:	4aaf      	ldr	r2, [pc, #700]	@ (800fc04 <PCD_EP_ISR_Handler+0x340>)
 800f946:	4694      	mov	ip, r2
 800f948:	4463      	add	r3, ip
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	059b      	lsls	r3, r3, #22
 800f94e:	0d9a      	lsrs	r2, r3, #22
 800f950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f952:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800f954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f956:	695a      	ldr	r2, [r3, #20]
 800f958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f95a:	69db      	ldr	r3, [r3, #28]
 800f95c:	18d2      	adds	r2, r2, r3
 800f95e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f960:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2100      	movs	r1, #0
 800f966:	0018      	movs	r0, r3
 800f968:	f008 fd06 	bl	8018378 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2224      	movs	r2, #36	@ 0x24
 800f970:	5c9b      	ldrb	r3, [r3, r2]
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	d101      	bne.n	800f97c <PCD_EP_ISR_Handler+0xb8>
 800f978:	f000 fb96 	bl	80100a8 <PCD_EP_ISR_Handler+0x7e4>
 800f97c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d001      	beq.n	800f988 <PCD_EP_ISR_Handler+0xc4>
 800f984:	f000 fb90 	bl	80100a8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2224      	movs	r2, #36	@ 0x24
 800f98c:	5c9b      	ldrb	r3, [r3, r2]
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	2280      	movs	r2, #128	@ 0x80
 800f992:	4252      	negs	r2, r2
 800f994:	4313      	orrs	r3, r2
 800f996:	b2da      	uxtb	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	0011      	movs	r1, r2
 800f99e:	224c      	movs	r2, #76	@ 0x4c
 800f9a0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2224      	movs	r2, #36	@ 0x24
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	5499      	strb	r1, [r3, r2]
 800f9aa:	f000 fb7d 	bl	80100a8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	3369      	adds	r3, #105	@ 0x69
 800f9b2:	33ff      	adds	r3, #255	@ 0xff
 800f9b4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	214a      	movs	r1, #74	@ 0x4a
 800f9bc:	187b      	adds	r3, r7, r1
 800f9be:	8812      	ldrh	r2, [r2, #0]
 800f9c0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800f9c2:	187b      	adds	r3, r7, r1
 800f9c4:	881a      	ldrh	r2, [r3, #0]
 800f9c6:	2380      	movs	r3, #128	@ 0x80
 800f9c8:	011b      	lsls	r3, r3, #4
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	d037      	beq.n	800fa3e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2250      	movs	r2, #80	@ 0x50
 800f9d4:	5a9b      	ldrh	r3, [r3, r2]
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	001a      	movs	r2, r3
 800f9da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	00db      	lsls	r3, r3, #3
 800f9e0:	18d2      	adds	r2, r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	18d3      	adds	r3, r2, r3
 800f9e8:	4a87      	ldr	r2, [pc, #540]	@ (800fc08 <PCD_EP_ISR_Handler+0x344>)
 800f9ea:	4694      	mov	ip, r2
 800f9ec:	4463      	add	r3, ip
 800f9ee:	881b      	ldrh	r3, [r3, #0]
 800f9f0:	059b      	lsls	r3, r3, #22
 800f9f2:	0d9a      	lsrs	r2, r3, #22
 800f9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6818      	ldr	r0, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	22ac      	movs	r2, #172	@ 0xac
 800fa00:	0092      	lsls	r2, r2, #2
 800fa02:	1899      	adds	r1, r3, r2
 800fa04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800fa08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	f006 fc78 	bl	8016302 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	881b      	ldrh	r3, [r3, #0]
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	2010      	movs	r0, #16
 800fa1c:	183b      	adds	r3, r7, r0
 800fa1e:	497b      	ldr	r1, [pc, #492]	@ (800fc0c <PCD_EP_ISR_Handler+0x348>)
 800fa20:	400a      	ands	r2, r1
 800fa22:	801a      	strh	r2, [r3, #0]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	183a      	adds	r2, r7, r0
 800fa2a:	8812      	ldrh	r2, [r2, #0]
 800fa2c:	2180      	movs	r1, #128	@ 0x80
 800fa2e:	430a      	orrs	r2, r1
 800fa30:	b292      	uxth	r2, r2
 800fa32:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	0018      	movs	r0, r3
 800fa38:	f008 fc68 	bl	801830c <HAL_PCD_SetupStageCallback>
 800fa3c:	e334      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800fa3e:	234a      	movs	r3, #74	@ 0x4a
 800fa40:	18fb      	adds	r3, r7, r3
 800fa42:	2200      	movs	r2, #0
 800fa44:	5e9b      	ldrsh	r3, [r3, r2]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	db00      	blt.n	800fa4c <PCD_EP_ISR_Handler+0x188>
 800fa4a:	e32d      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	201e      	movs	r0, #30
 800fa56:	183b      	adds	r3, r7, r0
 800fa58:	496c      	ldr	r1, [pc, #432]	@ (800fc0c <PCD_EP_ISR_Handler+0x348>)
 800fa5a:	400a      	ands	r2, r1
 800fa5c:	801a      	strh	r2, [r3, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	183a      	adds	r2, r7, r0
 800fa64:	8812      	ldrh	r2, [r2, #0]
 800fa66:	2180      	movs	r1, #128	@ 0x80
 800fa68:	430a      	orrs	r2, r1
 800fa6a:	b292      	uxth	r2, r2
 800fa6c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2250      	movs	r2, #80	@ 0x50
 800fa74:	5a9b      	ldrh	r3, [r3, r2]
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	001a      	movs	r2, r3
 800fa7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	00db      	lsls	r3, r3, #3
 800fa80:	18d2      	adds	r2, r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	18d3      	adds	r3, r2, r3
 800fa88:	4a5f      	ldr	r2, [pc, #380]	@ (800fc08 <PCD_EP_ISR_Handler+0x344>)
 800fa8a:	4694      	mov	ip, r2
 800fa8c:	4463      	add	r3, ip
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	059b      	lsls	r3, r3, #22
 800fa92:	0d9a      	lsrs	r2, r3, #22
 800fa94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800fa98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa9a:	69db      	ldr	r3, [r3, #28]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d01a      	beq.n	800fad6 <PCD_EP_ISR_Handler+0x212>
 800faa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faa2:	695b      	ldr	r3, [r3, #20]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d016      	beq.n	800fad6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6818      	ldr	r0, [r3, #0]
 800faac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faae:	6959      	ldr	r1, [r3, #20]
 800fab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fab2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800fab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fab6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800fab8:	b29b      	uxth	r3, r3
 800faba:	f006 fc22 	bl	8016302 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800fabe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fac0:	695a      	ldr	r2, [r3, #20]
 800fac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fac4:	69db      	ldr	r3, [r3, #28]
 800fac6:	18d2      	adds	r2, r2, r3
 800fac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2100      	movs	r1, #0
 800fad0:	0018      	movs	r0, r3
 800fad2:	f008 fc30 	bl	8018336 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	214a      	movs	r1, #74	@ 0x4a
 800fadc:	187b      	adds	r3, r7, r1
 800fade:	8812      	ldrh	r2, [r2, #0]
 800fae0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800fae2:	187b      	adds	r3, r7, r1
 800fae4:	881a      	ldrh	r2, [r3, #0]
 800fae6:	2380      	movs	r3, #128	@ 0x80
 800fae8:	011b      	lsls	r3, r3, #4
 800faea:	4013      	ands	r3, r2
 800faec:	d000      	beq.n	800faf0 <PCD_EP_ISR_Handler+0x22c>
 800faee:	e2db      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
 800faf0:	187b      	adds	r3, r7, r1
 800faf2:	881a      	ldrh	r2, [r3, #0]
 800faf4:	23c0      	movs	r3, #192	@ 0xc0
 800faf6:	019b      	lsls	r3, r3, #6
 800faf8:	401a      	ands	r2, r3
 800fafa:	23c0      	movs	r3, #192	@ 0xc0
 800fafc:	019b      	lsls	r3, r3, #6
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d100      	bne.n	800fb04 <PCD_EP_ISR_Handler+0x240>
 800fb02:	e2d1      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	61bb      	str	r3, [r7, #24]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2250      	movs	r2, #80	@ 0x50
 800fb10:	5a9b      	ldrh	r3, [r3, r2]
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	001a      	movs	r2, r3
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	189b      	adds	r3, r3, r2
 800fb1a:	61bb      	str	r3, [r7, #24]
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	4a3a      	ldr	r2, [pc, #232]	@ (800fc08 <PCD_EP_ISR_Handler+0x344>)
 800fb20:	4694      	mov	ip, r2
 800fb22:	4463      	add	r3, ip
 800fb24:	617b      	str	r3, [r7, #20]
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	059b      	lsls	r3, r3, #22
 800fb2e:	0d9b      	lsrs	r3, r3, #22
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	801a      	strh	r2, [r3, #0]
 800fb36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb38:	691b      	ldr	r3, [r3, #16]
 800fb3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800fb3c:	d91a      	bls.n	800fb74 <PCD_EP_ISR_Handler+0x2b0>
 800fb3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb40:	691b      	ldr	r3, [r3, #16]
 800fb42:	095b      	lsrs	r3, r3, #5
 800fb44:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	221f      	movs	r2, #31
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	d102      	bne.n	800fb56 <PCD_EP_ISR_Handler+0x292>
 800fb50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb52:	3b01      	subs	r3, #1
 800fb54:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	881b      	ldrh	r3, [r3, #0]
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	029b      	lsls	r3, r3, #10
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	4313      	orrs	r3, r2
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	4a25      	ldr	r2, [pc, #148]	@ (800fc00 <PCD_EP_ISR_Handler+0x33c>)
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	801a      	strh	r2, [r3, #0]
 800fb72:	e023      	b.n	800fbbc <PCD_EP_ISR_Handler+0x2f8>
 800fb74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb76:	691b      	ldr	r3, [r3, #16]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d108      	bne.n	800fb8e <PCD_EP_ISR_Handler+0x2ca>
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	4a1f      	ldr	r2, [pc, #124]	@ (800fc00 <PCD_EP_ISR_Handler+0x33c>)
 800fb84:	4313      	orrs	r3, r2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	801a      	strh	r2, [r3, #0]
 800fb8c:	e016      	b.n	800fbbc <PCD_EP_ISR_Handler+0x2f8>
 800fb8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb90:	691b      	ldr	r3, [r3, #16]
 800fb92:	085b      	lsrs	r3, r3, #1
 800fb94:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	d002      	beq.n	800fba6 <PCD_EP_ISR_Handler+0x2e2>
 800fba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fba2:	3301      	adds	r3, #1
 800fba4:	647b      	str	r3, [r7, #68]	@ 0x44
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	029b      	lsls	r3, r3, #10
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	2012      	movs	r0, #18
 800fbc6:	183b      	adds	r3, r7, r0
 800fbc8:	4911      	ldr	r1, [pc, #68]	@ (800fc10 <PCD_EP_ISR_Handler+0x34c>)
 800fbca:	400a      	ands	r2, r1
 800fbcc:	801a      	strh	r2, [r3, #0]
 800fbce:	183b      	adds	r3, r7, r0
 800fbd0:	183a      	adds	r2, r7, r0
 800fbd2:	8812      	ldrh	r2, [r2, #0]
 800fbd4:	2180      	movs	r1, #128	@ 0x80
 800fbd6:	0149      	lsls	r1, r1, #5
 800fbd8:	404a      	eors	r2, r1
 800fbda:	801a      	strh	r2, [r3, #0]
 800fbdc:	183b      	adds	r3, r7, r0
 800fbde:	183a      	adds	r2, r7, r0
 800fbe0:	8812      	ldrh	r2, [r2, #0]
 800fbe2:	2180      	movs	r1, #128	@ 0x80
 800fbe4:	0189      	lsls	r1, r1, #6
 800fbe6:	404a      	eors	r2, r1
 800fbe8:	801a      	strh	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	183a      	adds	r2, r7, r0
 800fbf0:	8812      	ldrh	r2, [r2, #0]
 800fbf2:	4908      	ldr	r1, [pc, #32]	@ (800fc14 <PCD_EP_ISR_Handler+0x350>)
 800fbf4:	430a      	orrs	r2, r1
 800fbf6:	b292      	uxth	r2, r2
 800fbf8:	801a      	strh	r2, [r3, #0]
 800fbfa:	e255      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
 800fbfc:	ffff8f0f 	.word	0xffff8f0f
 800fc00:	ffff8000 	.word	0xffff8000
 800fc04:	00000402 	.word	0x00000402
 800fc08:	00000406 	.word	0x00000406
 800fc0c:	00000f8f 	.word	0x00000f8f
 800fc10:	ffffbf8f 	.word	0xffffbf8f
 800fc14:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	001a      	movs	r2, r3
 800fc1e:	204d      	movs	r0, #77	@ 0x4d
 800fc20:	183b      	adds	r3, r7, r0
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	18d2      	adds	r2, r2, r3
 800fc28:	214a      	movs	r1, #74	@ 0x4a
 800fc2a:	187b      	adds	r3, r7, r1
 800fc2c:	8812      	ldrh	r2, [r2, #0]
 800fc2e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800fc30:	187b      	adds	r3, r7, r1
 800fc32:	2200      	movs	r2, #0
 800fc34:	5e9b      	ldrsh	r3, [r3, r2]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	db00      	blt.n	800fc3c <PCD_EP_ISR_Handler+0x378>
 800fc3a:	e0fa      	b.n	800fe32 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	001a      	movs	r2, r3
 800fc42:	183b      	adds	r3, r7, r0
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	18d3      	adds	r3, r2, r3
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	2448      	movs	r4, #72	@ 0x48
 800fc50:	193b      	adds	r3, r7, r4
 800fc52:	49d1      	ldr	r1, [pc, #836]	@ (800ff98 <PCD_EP_ISR_Handler+0x6d4>)
 800fc54:	400a      	ands	r2, r1
 800fc56:	801a      	strh	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	001a      	movs	r2, r3
 800fc5e:	183b      	adds	r3, r7, r0
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	009b      	lsls	r3, r3, #2
 800fc64:	18d3      	adds	r3, r2, r3
 800fc66:	193a      	adds	r2, r7, r4
 800fc68:	8812      	ldrh	r2, [r2, #0]
 800fc6a:	2180      	movs	r1, #128	@ 0x80
 800fc6c:	430a      	orrs	r2, r1
 800fc6e:	b292      	uxth	r2, r2
 800fc70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800fc72:	183b      	adds	r3, r7, r0
 800fc74:	781a      	ldrb	r2, [r3, #0]
 800fc76:	0013      	movs	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	189b      	adds	r3, r3, r2
 800fc7c:	00db      	lsls	r3, r3, #3
 800fc7e:	3369      	adds	r3, #105	@ 0x69
 800fc80:	33ff      	adds	r3, #255	@ 0xff
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	18d3      	adds	r3, r2, r3
 800fc86:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800fc88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc8a:	7b1b      	ldrb	r3, [r3, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d125      	bne.n	800fcdc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2250      	movs	r2, #80	@ 0x50
 800fc96:	5a9b      	ldrh	r3, [r3, r2]
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	001a      	movs	r2, r3
 800fc9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	18d2      	adds	r2, r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	18d3      	adds	r3, r2, r3
 800fcaa:	4abc      	ldr	r2, [pc, #752]	@ (800ff9c <PCD_EP_ISR_Handler+0x6d8>)
 800fcac:	4694      	mov	ip, r2
 800fcae:	4463      	add	r3, ip
 800fcb0:	881a      	ldrh	r2, [r3, #0]
 800fcb2:	2450      	movs	r4, #80	@ 0x50
 800fcb4:	193b      	adds	r3, r7, r4
 800fcb6:	0592      	lsls	r2, r2, #22
 800fcb8:	0d92      	lsrs	r2, r2, #22
 800fcba:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800fcbc:	193b      	adds	r3, r7, r4
 800fcbe:	881b      	ldrh	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d100      	bne.n	800fcc6 <PCD_EP_ISR_Handler+0x402>
 800fcc4:	e08d      	b.n	800fde2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6818      	ldr	r0, [r3, #0]
 800fcca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fccc:	6959      	ldr	r1, [r3, #20]
 800fcce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcd0:	88da      	ldrh	r2, [r3, #6]
 800fcd2:	193b      	adds	r3, r7, r4
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	f006 fb14 	bl	8016302 <USB_ReadPMA>
 800fcda:	e082      	b.n	800fde2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800fcdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcde:	78db      	ldrb	r3, [r3, #3]
 800fce0:	2b02      	cmp	r3, #2
 800fce2:	d10c      	bne.n	800fcfe <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800fce4:	2350      	movs	r3, #80	@ 0x50
 800fce6:	18fc      	adds	r4, r7, r3
 800fce8:	234a      	movs	r3, #74	@ 0x4a
 800fcea:	18fb      	adds	r3, r7, r3
 800fcec:	881a      	ldrh	r2, [r3, #0]
 800fcee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	0018      	movs	r0, r3
 800fcf4:	f000 f9ec 	bl	80100d0 <HAL_PCD_EP_DB_Receive>
 800fcf8:	0003      	movs	r3, r0
 800fcfa:	8023      	strh	r3, [r4, #0]
 800fcfc:	e071      	b.n	800fde2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	001a      	movs	r2, r3
 800fd04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	18d3      	adds	r3, r2, r3
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	2052      	movs	r0, #82	@ 0x52
 800fd12:	183b      	adds	r3, r7, r0
 800fd14:	49a2      	ldr	r1, [pc, #648]	@ (800ffa0 <PCD_EP_ISR_Handler+0x6dc>)
 800fd16:	400a      	ands	r2, r1
 800fd18:	801a      	strh	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	001a      	movs	r2, r3
 800fd20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	18d3      	adds	r3, r2, r3
 800fd28:	183a      	adds	r2, r7, r0
 800fd2a:	8812      	ldrh	r2, [r2, #0]
 800fd2c:	499d      	ldr	r1, [pc, #628]	@ (800ffa4 <PCD_EP_ISR_Handler+0x6e0>)
 800fd2e:	430a      	orrs	r2, r1
 800fd30:	b292      	uxth	r2, r2
 800fd32:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	001a      	movs	r2, r3
 800fd3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	18d3      	adds	r3, r2, r3
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	001a      	movs	r2, r3
 800fd48:	2380      	movs	r3, #128	@ 0x80
 800fd4a:	01db      	lsls	r3, r3, #7
 800fd4c:	4013      	ands	r3, r2
 800fd4e:	d024      	beq.n	800fd9a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2250      	movs	r2, #80	@ 0x50
 800fd56:	5a9b      	ldrh	r3, [r3, r2]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	001a      	movs	r2, r3
 800fd5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	00db      	lsls	r3, r3, #3
 800fd62:	18d2      	adds	r2, r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	18d3      	adds	r3, r2, r3
 800fd6a:	4a8f      	ldr	r2, [pc, #572]	@ (800ffa8 <PCD_EP_ISR_Handler+0x6e4>)
 800fd6c:	4694      	mov	ip, r2
 800fd6e:	4463      	add	r3, ip
 800fd70:	881a      	ldrh	r2, [r3, #0]
 800fd72:	2450      	movs	r4, #80	@ 0x50
 800fd74:	193b      	adds	r3, r7, r4
 800fd76:	0592      	lsls	r2, r2, #22
 800fd78:	0d92      	lsrs	r2, r2, #22
 800fd7a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800fd7c:	193b      	adds	r3, r7, r4
 800fd7e:	881b      	ldrh	r3, [r3, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d02e      	beq.n	800fde2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6818      	ldr	r0, [r3, #0]
 800fd88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd8a:	6959      	ldr	r1, [r3, #20]
 800fd8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd8e:	891a      	ldrh	r2, [r3, #8]
 800fd90:	193b      	adds	r3, r7, r4
 800fd92:	881b      	ldrh	r3, [r3, #0]
 800fd94:	f006 fab5 	bl	8016302 <USB_ReadPMA>
 800fd98:	e023      	b.n	800fde2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2250      	movs	r2, #80	@ 0x50
 800fda0:	5a9b      	ldrh	r3, [r3, r2]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	001a      	movs	r2, r3
 800fda6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	18d2      	adds	r2, r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	18d3      	adds	r3, r2, r3
 800fdb4:	4a79      	ldr	r2, [pc, #484]	@ (800ff9c <PCD_EP_ISR_Handler+0x6d8>)
 800fdb6:	4694      	mov	ip, r2
 800fdb8:	4463      	add	r3, ip
 800fdba:	881a      	ldrh	r2, [r3, #0]
 800fdbc:	2450      	movs	r4, #80	@ 0x50
 800fdbe:	193b      	adds	r3, r7, r4
 800fdc0:	0592      	lsls	r2, r2, #22
 800fdc2:	0d92      	lsrs	r2, r2, #22
 800fdc4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800fdc6:	193b      	adds	r3, r7, r4
 800fdc8:	881b      	ldrh	r3, [r3, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d009      	beq.n	800fde2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6818      	ldr	r0, [r3, #0]
 800fdd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdd4:	6959      	ldr	r1, [r3, #20]
 800fdd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdd8:	895a      	ldrh	r2, [r3, #10]
 800fdda:	193b      	adds	r3, r7, r4
 800fddc:	881b      	ldrh	r3, [r3, #0]
 800fdde:	f006 fa90 	bl	8016302 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800fde2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fde4:	69da      	ldr	r2, [r3, #28]
 800fde6:	2150      	movs	r1, #80	@ 0x50
 800fde8:	187b      	adds	r3, r7, r1
 800fdea:	881b      	ldrh	r3, [r3, #0]
 800fdec:	18d2      	adds	r2, r2, r3
 800fdee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800fdf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdf4:	695a      	ldr	r2, [r3, #20]
 800fdf6:	187b      	adds	r3, r7, r1
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	18d2      	adds	r2, r2, r3
 800fdfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdfe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800fe00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe02:	699b      	ldr	r3, [r3, #24]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d005      	beq.n	800fe14 <PCD_EP_ISR_Handler+0x550>
 800fe08:	187b      	adds	r3, r7, r1
 800fe0a:	881a      	ldrh	r2, [r3, #0]
 800fe0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d207      	bcs.n	800fe24 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800fe14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe16:	781a      	ldrb	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	0011      	movs	r1, r2
 800fe1c:	0018      	movs	r0, r3
 800fe1e:	f008 fa8a 	bl	8018336 <HAL_PCD_DataOutStageCallback>
 800fe22:	e006      	b.n	800fe32 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe2a:	0011      	movs	r1, r2
 800fe2c:	0018      	movs	r0, r3
 800fe2e:	f004 ffad 	bl	8014d8c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800fe32:	244a      	movs	r4, #74	@ 0x4a
 800fe34:	193b      	adds	r3, r7, r4
 800fe36:	881b      	ldrh	r3, [r3, #0]
 800fe38:	2280      	movs	r2, #128	@ 0x80
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	d100      	bne.n	800fe40 <PCD_EP_ISR_Handler+0x57c>
 800fe3e:	e133      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800fe40:	204d      	movs	r0, #77	@ 0x4d
 800fe42:	183b      	adds	r3, r7, r0
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	1c5a      	adds	r2, r3, #1
 800fe48:	0013      	movs	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	189b      	adds	r3, r3, r2
 800fe4e:	00db      	lsls	r3, r3, #3
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	18d3      	adds	r3, r2, r3
 800fe54:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	001a      	movs	r2, r3
 800fe5c:	183b      	adds	r3, r7, r0
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	18d3      	adds	r3, r2, r3
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	2542      	movs	r5, #66	@ 0x42
 800fe6a:	197b      	adds	r3, r7, r5
 800fe6c:	494f      	ldr	r1, [pc, #316]	@ (800ffac <PCD_EP_ISR_Handler+0x6e8>)
 800fe6e:	400a      	ands	r2, r1
 800fe70:	801a      	strh	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	001a      	movs	r2, r3
 800fe78:	183b      	adds	r3, r7, r0
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	18d3      	adds	r3, r2, r3
 800fe80:	197a      	adds	r2, r7, r5
 800fe82:	8812      	ldrh	r2, [r2, #0]
 800fe84:	494a      	ldr	r1, [pc, #296]	@ (800ffb0 <PCD_EP_ISR_Handler+0x6ec>)
 800fe86:	430a      	orrs	r2, r1
 800fe88:	b292      	uxth	r2, r2
 800fe8a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800fe8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe8e:	78db      	ldrb	r3, [r3, #3]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d000      	beq.n	800fe96 <PCD_EP_ISR_Handler+0x5d2>
 800fe94:	e0af      	b.n	800fff6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800fe96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe98:	2200      	movs	r2, #0
 800fe9a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800fe9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe9e:	7b1b      	ldrb	r3, [r3, #12]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d100      	bne.n	800fea6 <PCD_EP_ISR_Handler+0x5e2>
 800fea4:	e09f      	b.n	800ffe6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800fea6:	193b      	adds	r3, r7, r4
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	2240      	movs	r2, #64	@ 0x40
 800feac:	4013      	ands	r3, r2
 800feae:	d046      	beq.n	800ff3e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800feb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800feb2:	785b      	ldrb	r3, [r3, #1]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d125      	bne.n	800ff04 <PCD_EP_ISR_Handler+0x640>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	627b      	str	r3, [r7, #36]	@ 0x24
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2250      	movs	r2, #80	@ 0x50
 800fec4:	5a9b      	ldrh	r3, [r3, r2]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	001a      	movs	r2, r3
 800feca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fecc:	189b      	adds	r3, r3, r2
 800fece:	627b      	str	r3, [r7, #36]	@ 0x24
 800fed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	00da      	lsls	r2, r3, #3
 800fed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed8:	18d3      	adds	r3, r2, r3
 800feda:	4a33      	ldr	r2, [pc, #204]	@ (800ffa8 <PCD_EP_ISR_Handler+0x6e4>)
 800fedc:	4694      	mov	ip, r2
 800fede:	4463      	add	r3, ip
 800fee0:	623b      	str	r3, [r7, #32]
 800fee2:	6a3b      	ldr	r3, [r7, #32]
 800fee4:	881b      	ldrh	r3, [r3, #0]
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	059b      	lsls	r3, r3, #22
 800feea:	0d9b      	lsrs	r3, r3, #22
 800feec:	b29a      	uxth	r2, r3
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	801a      	strh	r2, [r3, #0]
 800fef2:	6a3b      	ldr	r3, [r7, #32]
 800fef4:	881b      	ldrh	r3, [r3, #0]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	4a2d      	ldr	r2, [pc, #180]	@ (800ffb0 <PCD_EP_ISR_Handler+0x6ec>)
 800fefa:	4313      	orrs	r3, r2
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	6a3b      	ldr	r3, [r7, #32]
 800ff00:	801a      	strh	r2, [r3, #0]
 800ff02:	e070      	b.n	800ffe6 <PCD_EP_ISR_Handler+0x722>
 800ff04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff06:	785b      	ldrb	r3, [r3, #1]
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d16c      	bne.n	800ffe6 <PCD_EP_ISR_Handler+0x722>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2250      	movs	r2, #80	@ 0x50
 800ff18:	5a9b      	ldrh	r3, [r3, r2]
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	001a      	movs	r2, r3
 800ff1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff20:	189b      	adds	r3, r3, r2
 800ff22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	00da      	lsls	r2, r3, #3
 800ff2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff2c:	18d3      	adds	r3, r2, r3
 800ff2e:	4a1e      	ldr	r2, [pc, #120]	@ (800ffa8 <PCD_EP_ISR_Handler+0x6e4>)
 800ff30:	4694      	mov	ip, r2
 800ff32:	4463      	add	r3, ip
 800ff34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff38:	2200      	movs	r2, #0
 800ff3a:	801a      	strh	r2, [r3, #0]
 800ff3c:	e053      	b.n	800ffe6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff46:	785b      	ldrb	r3, [r3, #1]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d133      	bne.n	800ffb4 <PCD_EP_ISR_Handler+0x6f0>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2250      	movs	r2, #80	@ 0x50
 800ff58:	5a9b      	ldrh	r3, [r3, r2]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	001a      	movs	r2, r3
 800ff5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff60:	189b      	adds	r3, r3, r2
 800ff62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	00da      	lsls	r2, r3, #3
 800ff6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff6c:	18d3      	adds	r3, r2, r3
 800ff6e:	4a0b      	ldr	r2, [pc, #44]	@ (800ff9c <PCD_EP_ISR_Handler+0x6d8>)
 800ff70:	4694      	mov	ip, r2
 800ff72:	4463      	add	r3, ip
 800ff74:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	059b      	lsls	r3, r3, #22
 800ff7e:	0d9b      	lsrs	r3, r3, #22
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff84:	801a      	strh	r2, [r3, #0]
 800ff86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff88:	881b      	ldrh	r3, [r3, #0]
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4a08      	ldr	r2, [pc, #32]	@ (800ffb0 <PCD_EP_ISR_Handler+0x6ec>)
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff94:	801a      	strh	r2, [r3, #0]
 800ff96:	e026      	b.n	800ffe6 <PCD_EP_ISR_Handler+0x722>
 800ff98:	00000f8f 	.word	0x00000f8f
 800ff9c:	00000406 	.word	0x00000406
 800ffa0:	ffff8f8f 	.word	0xffff8f8f
 800ffa4:	ffff80c0 	.word	0xffff80c0
 800ffa8:	00000402 	.word	0x00000402
 800ffac:	ffff8f0f 	.word	0xffff8f0f
 800ffb0:	ffff8000 	.word	0xffff8000
 800ffb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffb6:	785b      	ldrb	r3, [r3, #1]
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d114      	bne.n	800ffe6 <PCD_EP_ISR_Handler+0x722>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2250      	movs	r2, #80	@ 0x50
 800ffc2:	5a9b      	ldrh	r3, [r3, r2]
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	001a      	movs	r2, r3
 800ffc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffca:	189b      	adds	r3, r3, r2
 800ffcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	00da      	lsls	r2, r3, #3
 800ffd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffd6:	18d3      	adds	r3, r2, r3
 800ffd8:	4a3b      	ldr	r2, [pc, #236]	@ (80100c8 <PCD_EP_ISR_Handler+0x804>)
 800ffda:	4694      	mov	ip, r2
 800ffdc:	4463      	add	r3, ip
 800ffde:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ffe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffe8:	781a      	ldrb	r2, [r3, #0]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	0011      	movs	r1, r2
 800ffee:	0018      	movs	r0, r3
 800fff0:	f008 f9c2 	bl	8018378 <HAL_PCD_DataInStageCallback>
 800fff4:	e058      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800fff6:	234a      	movs	r3, #74	@ 0x4a
 800fff8:	18fb      	adds	r3, r7, r3
 800fffa:	881a      	ldrh	r2, [r3, #0]
 800fffc:	2380      	movs	r3, #128	@ 0x80
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	4013      	ands	r3, r2
 8010002:	d149      	bne.n	8010098 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2250      	movs	r2, #80	@ 0x50
 801000a:	5a9b      	ldrh	r3, [r3, r2]
 801000c:	b29b      	uxth	r3, r3
 801000e:	001a      	movs	r2, r3
 8010010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	18d2      	adds	r2, r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	18d3      	adds	r3, r2, r3
 801001e:	4a2b      	ldr	r2, [pc, #172]	@ (80100cc <PCD_EP_ISR_Handler+0x808>)
 8010020:	4694      	mov	ip, r2
 8010022:	4463      	add	r3, ip
 8010024:	881a      	ldrh	r2, [r3, #0]
 8010026:	2140      	movs	r1, #64	@ 0x40
 8010028:	187b      	adds	r3, r7, r1
 801002a:	0592      	lsls	r2, r2, #22
 801002c:	0d92      	lsrs	r2, r2, #22
 801002e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8010030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010032:	699a      	ldr	r2, [r3, #24]
 8010034:	187b      	adds	r3, r7, r1
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	429a      	cmp	r2, r3
 801003a:	d907      	bls.n	801004c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801003c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801003e:	699a      	ldr	r2, [r3, #24]
 8010040:	187b      	adds	r3, r7, r1
 8010042:	881b      	ldrh	r3, [r3, #0]
 8010044:	1ad2      	subs	r2, r2, r3
 8010046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010048:	619a      	str	r2, [r3, #24]
 801004a:	e002      	b.n	8010052 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801004c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801004e:	2200      	movs	r2, #0
 8010050:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8010052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010054:	699b      	ldr	r3, [r3, #24]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d107      	bne.n	801006a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801005a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801005c:	781a      	ldrb	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	0011      	movs	r1, r2
 8010062:	0018      	movs	r0, r3
 8010064:	f008 f988 	bl	8018378 <HAL_PCD_DataInStageCallback>
 8010068:	e01e      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801006a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801006c:	695a      	ldr	r2, [r3, #20]
 801006e:	2140      	movs	r1, #64	@ 0x40
 8010070:	187b      	adds	r3, r7, r1
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	18d2      	adds	r2, r2, r3
 8010076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010078:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801007a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801007c:	69da      	ldr	r2, [r3, #28]
 801007e:	187b      	adds	r3, r7, r1
 8010080:	881b      	ldrh	r3, [r3, #0]
 8010082:	18d2      	adds	r2, r2, r3
 8010084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010086:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801008e:	0011      	movs	r1, r2
 8010090:	0018      	movs	r0, r3
 8010092:	f004 fe7b 	bl	8014d8c <USB_EPStartXfer>
 8010096:	e007      	b.n	80100a8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8010098:	234a      	movs	r3, #74	@ 0x4a
 801009a:	18fb      	adds	r3, r7, r3
 801009c:	881a      	ldrh	r2, [r3, #0]
 801009e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	0018      	movs	r0, r3
 80100a4:	f000 f930 	bl	8010308 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2244      	movs	r2, #68	@ 0x44
 80100ae:	5a9b      	ldrh	r3, [r3, r2]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	b21b      	sxth	r3, r3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	da01      	bge.n	80100bc <PCD_EP_ISR_Handler+0x7f8>
 80100b8:	f7ff fc0a 	bl	800f8d0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	0018      	movs	r0, r3
 80100c0:	46bd      	mov	sp, r7
 80100c2:	b016      	add	sp, #88	@ 0x58
 80100c4:	bdb0      	pop	{r4, r5, r7, pc}
 80100c6:	46c0      	nop			@ (mov r8, r8)
 80100c8:	00000406 	.word	0x00000406
 80100cc:	00000402 	.word	0x00000402

080100d0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80100d0:	b590      	push	{r4, r7, lr}
 80100d2:	b089      	sub	sp, #36	@ 0x24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	1dbb      	adds	r3, r7, #6
 80100dc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80100de:	1dbb      	adds	r3, r7, #6
 80100e0:	881a      	ldrh	r2, [r3, #0]
 80100e2:	2380      	movs	r3, #128	@ 0x80
 80100e4:	01db      	lsls	r3, r3, #7
 80100e6:	4013      	ands	r3, r2
 80100e8:	d100      	bne.n	80100ec <HAL_PCD_EP_DB_Receive+0x1c>
 80100ea:	e07d      	b.n	80101e8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2250      	movs	r2, #80	@ 0x50
 80100f2:	5a9b      	ldrh	r3, [r3, r2]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	001a      	movs	r2, r3
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	00db      	lsls	r3, r3, #3
 80100fe:	18d2      	adds	r2, r2, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	18d3      	adds	r3, r2, r3
 8010106:	4a7a      	ldr	r2, [pc, #488]	@ (80102f0 <HAL_PCD_EP_DB_Receive+0x220>)
 8010108:	4694      	mov	ip, r2
 801010a:	4463      	add	r3, ip
 801010c:	881a      	ldrh	r2, [r3, #0]
 801010e:	211a      	movs	r1, #26
 8010110:	187b      	adds	r3, r7, r1
 8010112:	0592      	lsls	r2, r2, #22
 8010114:	0d92      	lsrs	r2, r2, #22
 8010116:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	699a      	ldr	r2, [r3, #24]
 801011c:	187b      	adds	r3, r7, r1
 801011e:	881b      	ldrh	r3, [r3, #0]
 8010120:	429a      	cmp	r2, r3
 8010122:	d307      	bcc.n	8010134 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	699a      	ldr	r2, [r3, #24]
 8010128:	187b      	adds	r3, r7, r1
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	1ad2      	subs	r2, r2, r3
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	619a      	str	r2, [r3, #24]
 8010132:	e002      	b.n	801013a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	2200      	movs	r2, #0
 8010138:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	699b      	ldr	r3, [r3, #24]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d121      	bne.n	8010186 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	001a      	movs	r2, r3
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	18d3      	adds	r3, r2, r3
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	b29a      	uxth	r2, r3
 8010154:	2018      	movs	r0, #24
 8010156:	183b      	adds	r3, r7, r0
 8010158:	4966      	ldr	r1, [pc, #408]	@ (80102f4 <HAL_PCD_EP_DB_Receive+0x224>)
 801015a:	400a      	ands	r2, r1
 801015c:	801a      	strh	r2, [r3, #0]
 801015e:	183b      	adds	r3, r7, r0
 8010160:	183a      	adds	r2, r7, r0
 8010162:	8812      	ldrh	r2, [r2, #0]
 8010164:	2180      	movs	r1, #128	@ 0x80
 8010166:	0189      	lsls	r1, r1, #6
 8010168:	404a      	eors	r2, r1
 801016a:	801a      	strh	r2, [r3, #0]
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	001a      	movs	r2, r3
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	18d3      	adds	r3, r2, r3
 801017a:	183a      	adds	r2, r7, r0
 801017c:	8812      	ldrh	r2, [r2, #0]
 801017e:	495e      	ldr	r1, [pc, #376]	@ (80102f8 <HAL_PCD_EP_DB_Receive+0x228>)
 8010180:	430a      	orrs	r2, r1
 8010182:	b292      	uxth	r2, r2
 8010184:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010186:	1dbb      	adds	r3, r7, #6
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	2240      	movs	r2, #64	@ 0x40
 801018c:	4013      	ands	r3, r2
 801018e:	d01a      	beq.n	80101c6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	001a      	movs	r2, r3
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	18d3      	adds	r3, r2, r3
 801019e:	881b      	ldrh	r3, [r3, #0]
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	2016      	movs	r0, #22
 80101a4:	183b      	adds	r3, r7, r0
 80101a6:	4955      	ldr	r1, [pc, #340]	@ (80102fc <HAL_PCD_EP_DB_Receive+0x22c>)
 80101a8:	400a      	ands	r2, r1
 80101aa:	801a      	strh	r2, [r3, #0]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	001a      	movs	r2, r3
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	18d3      	adds	r3, r2, r3
 80101ba:	183a      	adds	r2, r7, r0
 80101bc:	8812      	ldrh	r2, [r2, #0]
 80101be:	4950      	ldr	r1, [pc, #320]	@ (8010300 <HAL_PCD_EP_DB_Receive+0x230>)
 80101c0:	430a      	orrs	r2, r1
 80101c2:	b292      	uxth	r2, r2
 80101c4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80101c6:	241a      	movs	r4, #26
 80101c8:	193b      	adds	r3, r7, r4
 80101ca:	881b      	ldrh	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d100      	bne.n	80101d2 <HAL_PCD_EP_DB_Receive+0x102>
 80101d0:	e086      	b.n	80102e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6818      	ldr	r0, [r3, #0]
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	6959      	ldr	r1, [r3, #20]
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	891a      	ldrh	r2, [r3, #8]
 80101de:	193b      	adds	r3, r7, r4
 80101e0:	881b      	ldrh	r3, [r3, #0]
 80101e2:	f006 f88e 	bl	8016302 <USB_ReadPMA>
 80101e6:	e07b      	b.n	80102e0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2250      	movs	r2, #80	@ 0x50
 80101ee:	5a9b      	ldrh	r3, [r3, r2]
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	001a      	movs	r2, r3
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	00db      	lsls	r3, r3, #3
 80101fa:	18d2      	adds	r2, r2, r3
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	18d3      	adds	r3, r2, r3
 8010202:	4a40      	ldr	r2, [pc, #256]	@ (8010304 <HAL_PCD_EP_DB_Receive+0x234>)
 8010204:	4694      	mov	ip, r2
 8010206:	4463      	add	r3, ip
 8010208:	881a      	ldrh	r2, [r3, #0]
 801020a:	211a      	movs	r1, #26
 801020c:	187b      	adds	r3, r7, r1
 801020e:	0592      	lsls	r2, r2, #22
 8010210:	0d92      	lsrs	r2, r2, #22
 8010212:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	699a      	ldr	r2, [r3, #24]
 8010218:	187b      	adds	r3, r7, r1
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	429a      	cmp	r2, r3
 801021e:	d307      	bcc.n	8010230 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	699a      	ldr	r2, [r3, #24]
 8010224:	187b      	adds	r3, r7, r1
 8010226:	881b      	ldrh	r3, [r3, #0]
 8010228:	1ad2      	subs	r2, r2, r3
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	619a      	str	r2, [r3, #24]
 801022e:	e002      	b.n	8010236 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	2200      	movs	r2, #0
 8010234:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d121      	bne.n	8010282 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	001a      	movs	r2, r3
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	18d3      	adds	r3, r2, r3
 801024c:	881b      	ldrh	r3, [r3, #0]
 801024e:	b29a      	uxth	r2, r3
 8010250:	201e      	movs	r0, #30
 8010252:	183b      	adds	r3, r7, r0
 8010254:	4927      	ldr	r1, [pc, #156]	@ (80102f4 <HAL_PCD_EP_DB_Receive+0x224>)
 8010256:	400a      	ands	r2, r1
 8010258:	801a      	strh	r2, [r3, #0]
 801025a:	183b      	adds	r3, r7, r0
 801025c:	183a      	adds	r2, r7, r0
 801025e:	8812      	ldrh	r2, [r2, #0]
 8010260:	2180      	movs	r1, #128	@ 0x80
 8010262:	0189      	lsls	r1, r1, #6
 8010264:	404a      	eors	r2, r1
 8010266:	801a      	strh	r2, [r3, #0]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	001a      	movs	r2, r3
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	18d3      	adds	r3, r2, r3
 8010276:	183a      	adds	r2, r7, r0
 8010278:	8812      	ldrh	r2, [r2, #0]
 801027a:	491f      	ldr	r1, [pc, #124]	@ (80102f8 <HAL_PCD_EP_DB_Receive+0x228>)
 801027c:	430a      	orrs	r2, r1
 801027e:	b292      	uxth	r2, r2
 8010280:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8010282:	1dbb      	adds	r3, r7, #6
 8010284:	881b      	ldrh	r3, [r3, #0]
 8010286:	2240      	movs	r2, #64	@ 0x40
 8010288:	4013      	ands	r3, r2
 801028a:	d11a      	bne.n	80102c2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	001a      	movs	r2, r3
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	18d3      	adds	r3, r2, r3
 801029a:	881b      	ldrh	r3, [r3, #0]
 801029c:	b29a      	uxth	r2, r3
 801029e:	201c      	movs	r0, #28
 80102a0:	183b      	adds	r3, r7, r0
 80102a2:	4916      	ldr	r1, [pc, #88]	@ (80102fc <HAL_PCD_EP_DB_Receive+0x22c>)
 80102a4:	400a      	ands	r2, r1
 80102a6:	801a      	strh	r2, [r3, #0]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	001a      	movs	r2, r3
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	18d3      	adds	r3, r2, r3
 80102b6:	183a      	adds	r2, r7, r0
 80102b8:	8812      	ldrh	r2, [r2, #0]
 80102ba:	4911      	ldr	r1, [pc, #68]	@ (8010300 <HAL_PCD_EP_DB_Receive+0x230>)
 80102bc:	430a      	orrs	r2, r1
 80102be:	b292      	uxth	r2, r2
 80102c0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80102c2:	241a      	movs	r4, #26
 80102c4:	193b      	adds	r3, r7, r4
 80102c6:	881b      	ldrh	r3, [r3, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d009      	beq.n	80102e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6818      	ldr	r0, [r3, #0]
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	6959      	ldr	r1, [r3, #20]
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	895a      	ldrh	r2, [r3, #10]
 80102d8:	193b      	adds	r3, r7, r4
 80102da:	881b      	ldrh	r3, [r3, #0]
 80102dc:	f006 f811 	bl	8016302 <USB_ReadPMA>
    }
  }

  return count;
 80102e0:	231a      	movs	r3, #26
 80102e2:	18fb      	adds	r3, r7, r3
 80102e4:	881b      	ldrh	r3, [r3, #0]
}
 80102e6:	0018      	movs	r0, r3
 80102e8:	46bd      	mov	sp, r7
 80102ea:	b009      	add	sp, #36	@ 0x24
 80102ec:	bd90      	pop	{r4, r7, pc}
 80102ee:	46c0      	nop			@ (mov r8, r8)
 80102f0:	00000402 	.word	0x00000402
 80102f4:	ffffbf8f 	.word	0xffffbf8f
 80102f8:	ffff8080 	.word	0xffff8080
 80102fc:	ffff8f8f 	.word	0xffff8f8f
 8010300:	ffff80c0 	.word	0xffff80c0
 8010304:	00000406 	.word	0x00000406

08010308 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b0a4      	sub	sp, #144	@ 0x90
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	1dbb      	adds	r3, r7, #6
 8010314:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010316:	1dbb      	adds	r3, r7, #6
 8010318:	881b      	ldrh	r3, [r3, #0]
 801031a:	2240      	movs	r2, #64	@ 0x40
 801031c:	4013      	ands	r3, r2
 801031e:	d100      	bne.n	8010322 <HAL_PCD_EP_DB_Transmit+0x1a>
 8010320:	e1e4      	b.n	80106ec <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2250      	movs	r2, #80	@ 0x50
 8010328:	5a9b      	ldrh	r3, [r3, r2]
 801032a:	b29b      	uxth	r3, r3
 801032c:	001a      	movs	r2, r3
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	18d2      	adds	r2, r2, r3
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	18d3      	adds	r3, r2, r3
 801033c:	4ad0      	ldr	r2, [pc, #832]	@ (8010680 <HAL_PCD_EP_DB_Transmit+0x378>)
 801033e:	4694      	mov	ip, r2
 8010340:	4463      	add	r3, ip
 8010342:	881a      	ldrh	r2, [r3, #0]
 8010344:	2186      	movs	r1, #134	@ 0x86
 8010346:	187b      	adds	r3, r7, r1
 8010348:	0592      	lsls	r2, r2, #22
 801034a:	0d92      	lsrs	r2, r2, #22
 801034c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	699a      	ldr	r2, [r3, #24]
 8010352:	187b      	adds	r3, r7, r1
 8010354:	881b      	ldrh	r3, [r3, #0]
 8010356:	429a      	cmp	r2, r3
 8010358:	d907      	bls.n	801036a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	699a      	ldr	r2, [r3, #24]
 801035e:	187b      	adds	r3, r7, r1
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	1ad2      	subs	r2, r2, r3
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	619a      	str	r2, [r3, #24]
 8010368:	e002      	b.n	8010370 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	2200      	movs	r2, #0
 801036e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	699b      	ldr	r3, [r3, #24]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d000      	beq.n	801037a <HAL_PCD_EP_DB_Transmit+0x72>
 8010378:	e0b5      	b.n	80104e6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	785b      	ldrb	r3, [r3, #1]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d125      	bne.n	80103ce <HAL_PCD_EP_DB_Transmit+0xc6>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2250      	movs	r2, #80	@ 0x50
 801038e:	5a9b      	ldrh	r3, [r3, r2]
 8010390:	b29b      	uxth	r3, r3
 8010392:	001a      	movs	r2, r3
 8010394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010396:	189b      	adds	r3, r3, r2
 8010398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	00da      	lsls	r2, r3, #3
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a2:	18d3      	adds	r3, r2, r3
 80103a4:	4ab6      	ldr	r2, [pc, #728]	@ (8010680 <HAL_PCD_EP_DB_Transmit+0x378>)
 80103a6:	4694      	mov	ip, r2
 80103a8:	4463      	add	r3, ip
 80103aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	059b      	lsls	r3, r3, #22
 80103b4:	0d9b      	lsrs	r3, r3, #22
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ba:	801a      	strh	r2, [r3, #0]
 80103bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	4ab0      	ldr	r2, [pc, #704]	@ (8010684 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80103c4:	4313      	orrs	r3, r2
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ca:	801a      	strh	r2, [r3, #0]
 80103cc:	e01b      	b.n	8010406 <HAL_PCD_EP_DB_Transmit+0xfe>
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	785b      	ldrb	r3, [r3, #1]
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d117      	bne.n	8010406 <HAL_PCD_EP_DB_Transmit+0xfe>
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	637b      	str	r3, [r7, #52]	@ 0x34
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2250      	movs	r2, #80	@ 0x50
 80103e2:	5a9b      	ldrh	r3, [r3, r2]
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	001a      	movs	r2, r3
 80103e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ea:	189b      	adds	r3, r3, r2
 80103ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	00da      	lsls	r2, r3, #3
 80103f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f6:	18d3      	adds	r3, r2, r3
 80103f8:	4aa1      	ldr	r2, [pc, #644]	@ (8010680 <HAL_PCD_EP_DB_Transmit+0x378>)
 80103fa:	4694      	mov	ip, r2
 80103fc:	4463      	add	r3, ip
 80103fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8010400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010402:	2200      	movs	r2, #0
 8010404:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	627b      	str	r3, [r7, #36]	@ 0x24
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	785b      	ldrb	r3, [r3, #1]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d125      	bne.n	8010460 <HAL_PCD_EP_DB_Transmit+0x158>
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	61fb      	str	r3, [r7, #28]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2250      	movs	r2, #80	@ 0x50
 8010420:	5a9b      	ldrh	r3, [r3, r2]
 8010422:	b29b      	uxth	r3, r3
 8010424:	001a      	movs	r2, r3
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	189b      	adds	r3, r3, r2
 801042a:	61fb      	str	r3, [r7, #28]
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	00da      	lsls	r2, r3, #3
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	18d3      	adds	r3, r2, r3
 8010436:	4a94      	ldr	r2, [pc, #592]	@ (8010688 <HAL_PCD_EP_DB_Transmit+0x380>)
 8010438:	4694      	mov	ip, r2
 801043a:	4463      	add	r3, ip
 801043c:	61bb      	str	r3, [r7, #24]
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	881b      	ldrh	r3, [r3, #0]
 8010442:	b29b      	uxth	r3, r3
 8010444:	059b      	lsls	r3, r3, #22
 8010446:	0d9b      	lsrs	r3, r3, #22
 8010448:	b29a      	uxth	r2, r3
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	801a      	strh	r2, [r3, #0]
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	b29b      	uxth	r3, r3
 8010454:	4a8b      	ldr	r2, [pc, #556]	@ (8010684 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010456:	4313      	orrs	r3, r2
 8010458:	b29a      	uxth	r2, r3
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	801a      	strh	r2, [r3, #0]
 801045e:	e018      	b.n	8010492 <HAL_PCD_EP_DB_Transmit+0x18a>
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	785b      	ldrb	r3, [r3, #1]
 8010464:	2b01      	cmp	r3, #1
 8010466:	d114      	bne.n	8010492 <HAL_PCD_EP_DB_Transmit+0x18a>
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2250      	movs	r2, #80	@ 0x50
 801046e:	5a9b      	ldrh	r3, [r3, r2]
 8010470:	b29b      	uxth	r3, r3
 8010472:	001a      	movs	r2, r3
 8010474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010476:	189b      	adds	r3, r3, r2
 8010478:	627b      	str	r3, [r7, #36]	@ 0x24
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	00da      	lsls	r2, r3, #3
 8010480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010482:	18d3      	adds	r3, r2, r3
 8010484:	4a80      	ldr	r2, [pc, #512]	@ (8010688 <HAL_PCD_EP_DB_Transmit+0x380>)
 8010486:	4694      	mov	ip, r2
 8010488:	4463      	add	r3, ip
 801048a:	623b      	str	r3, [r7, #32]
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	2200      	movs	r2, #0
 8010490:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	781a      	ldrb	r2, [r3, #0]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	0011      	movs	r1, r2
 801049a:	0018      	movs	r0, r3
 801049c:	f007 ff6c 	bl	8018378 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80104a0:	1dbb      	adds	r3, r7, #6
 80104a2:	881a      	ldrh	r2, [r3, #0]
 80104a4:	2380      	movs	r3, #128	@ 0x80
 80104a6:	01db      	lsls	r3, r3, #7
 80104a8:	4013      	ands	r3, r2
 80104aa:	d100      	bne.n	80104ae <HAL_PCD_EP_DB_Transmit+0x1a6>
 80104ac:	e309      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	001a      	movs	r2, r3
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	18d3      	adds	r3, r2, r3
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	b29a      	uxth	r2, r3
 80104c0:	2016      	movs	r0, #22
 80104c2:	183b      	adds	r3, r7, r0
 80104c4:	4971      	ldr	r1, [pc, #452]	@ (801068c <HAL_PCD_EP_DB_Transmit+0x384>)
 80104c6:	400a      	ands	r2, r1
 80104c8:	801a      	strh	r2, [r3, #0]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	001a      	movs	r2, r3
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	18d3      	adds	r3, r2, r3
 80104d8:	183a      	adds	r2, r7, r0
 80104da:	8812      	ldrh	r2, [r2, #0]
 80104dc:	496c      	ldr	r1, [pc, #432]	@ (8010690 <HAL_PCD_EP_DB_Transmit+0x388>)
 80104de:	430a      	orrs	r2, r1
 80104e0:	b292      	uxth	r2, r2
 80104e2:	801a      	strh	r2, [r3, #0]
 80104e4:	e2ed      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80104e6:	1dbb      	adds	r3, r7, #6
 80104e8:	881a      	ldrh	r2, [r3, #0]
 80104ea:	2380      	movs	r3, #128	@ 0x80
 80104ec:	01db      	lsls	r3, r3, #7
 80104ee:	4013      	ands	r3, r2
 80104f0:	d01a      	beq.n	8010528 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	001a      	movs	r2, r3
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	18d3      	adds	r3, r2, r3
 8010500:	881b      	ldrh	r3, [r3, #0]
 8010502:	b29a      	uxth	r2, r3
 8010504:	208a      	movs	r0, #138	@ 0x8a
 8010506:	183b      	adds	r3, r7, r0
 8010508:	4960      	ldr	r1, [pc, #384]	@ (801068c <HAL_PCD_EP_DB_Transmit+0x384>)
 801050a:	400a      	ands	r2, r1
 801050c:	801a      	strh	r2, [r3, #0]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	001a      	movs	r2, r3
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	18d3      	adds	r3, r2, r3
 801051c:	183a      	adds	r2, r7, r0
 801051e:	8812      	ldrh	r2, [r2, #0]
 8010520:	495b      	ldr	r1, [pc, #364]	@ (8010690 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010522:	430a      	orrs	r2, r1
 8010524:	b292      	uxth	r2, r2
 8010526:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	2224      	movs	r2, #36	@ 0x24
 801052c:	5c9b      	ldrb	r3, [r3, r2]
 801052e:	2b01      	cmp	r3, #1
 8010530:	d000      	beq.n	8010534 <HAL_PCD_EP_DB_Transmit+0x22c>
 8010532:	e2c6      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	695a      	ldr	r2, [r3, #20]
 8010538:	2186      	movs	r1, #134	@ 0x86
 801053a:	187b      	adds	r3, r7, r1
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	18d2      	adds	r2, r2, r3
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	69da      	ldr	r2, [r3, #28]
 8010548:	187b      	adds	r3, r7, r1
 801054a:	881b      	ldrh	r3, [r3, #0]
 801054c:	18d2      	adds	r2, r2, r3
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	6a1a      	ldr	r2, [r3, #32]
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	691b      	ldr	r3, [r3, #16]
 801055a:	429a      	cmp	r2, r3
 801055c:	d30c      	bcc.n	8010578 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	691b      	ldr	r3, [r3, #16]
 8010562:	218c      	movs	r1, #140	@ 0x8c
 8010564:	187a      	adds	r2, r7, r1
 8010566:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	6a1a      	ldr	r2, [r3, #32]
 801056c:	187b      	adds	r3, r7, r1
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	1ad2      	subs	r2, r2, r3
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	621a      	str	r2, [r3, #32]
 8010576:	e01a      	b.n	80105ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	6a1b      	ldr	r3, [r3, #32]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d10a      	bne.n	8010596 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8010580:	2386      	movs	r3, #134	@ 0x86
 8010582:	18fb      	adds	r3, r7, r3
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	228c      	movs	r2, #140	@ 0x8c
 8010588:	18ba      	adds	r2, r7, r2
 801058a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2224      	movs	r2, #36	@ 0x24
 8010590:	2100      	movs	r1, #0
 8010592:	5499      	strb	r1, [r3, r2]
 8010594:	e00b      	b.n	80105ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	2224      	movs	r2, #36	@ 0x24
 801059a:	2100      	movs	r1, #0
 801059c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	6a1b      	ldr	r3, [r3, #32]
 80105a2:	228c      	movs	r2, #140	@ 0x8c
 80105a4:	18ba      	adds	r2, r7, r2
 80105a6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	2200      	movs	r2, #0
 80105ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	785b      	ldrb	r3, [r3, #1]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d000      	beq.n	80105b8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80105b6:	e06d      	b.n	8010694 <HAL_PCD_EP_DB_Transmit+0x38c>
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2250      	movs	r2, #80	@ 0x50
 80105c4:	5a9b      	ldrh	r3, [r3, r2]
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	001a      	movs	r2, r3
 80105ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105cc:	189b      	adds	r3, r3, r2
 80105ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	00da      	lsls	r2, r3, #3
 80105d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105d8:	18d3      	adds	r3, r2, r3
 80105da:	4a29      	ldr	r2, [pc, #164]	@ (8010680 <HAL_PCD_EP_DB_Transmit+0x378>)
 80105dc:	4694      	mov	ip, r2
 80105de:	4463      	add	r3, ip
 80105e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80105e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e4:	881b      	ldrh	r3, [r3, #0]
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	059b      	lsls	r3, r3, #22
 80105ea:	0d9b      	lsrs	r3, r3, #22
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105f0:	801a      	strh	r2, [r3, #0]
 80105f2:	228c      	movs	r2, #140	@ 0x8c
 80105f4:	18bb      	adds	r3, r7, r2
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80105fa:	d91a      	bls.n	8010632 <HAL_PCD_EP_DB_Transmit+0x32a>
 80105fc:	18bb      	adds	r3, r7, r2
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	095b      	lsrs	r3, r3, #5
 8010602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010604:	18bb      	adds	r3, r7, r2
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	221f      	movs	r2, #31
 801060a:	4013      	ands	r3, r2
 801060c:	d102      	bne.n	8010614 <HAL_PCD_EP_DB_Transmit+0x30c>
 801060e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010610:	3b01      	subs	r3, #1
 8010612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010616:	881b      	ldrh	r3, [r3, #0]
 8010618:	b29a      	uxth	r2, r3
 801061a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801061c:	b29b      	uxth	r3, r3
 801061e:	029b      	lsls	r3, r3, #10
 8010620:	b29b      	uxth	r3, r3
 8010622:	4313      	orrs	r3, r2
 8010624:	b29b      	uxth	r3, r3
 8010626:	4a17      	ldr	r2, [pc, #92]	@ (8010684 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010628:	4313      	orrs	r3, r2
 801062a:	b29a      	uxth	r2, r3
 801062c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801062e:	801a      	strh	r2, [r3, #0]
 8010630:	e04f      	b.n	80106d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010632:	238c      	movs	r3, #140	@ 0x8c
 8010634:	18fb      	adds	r3, r7, r3
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d108      	bne.n	801064e <HAL_PCD_EP_DB_Transmit+0x346>
 801063c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	b29b      	uxth	r3, r3
 8010642:	4a10      	ldr	r2, [pc, #64]	@ (8010684 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010644:	4313      	orrs	r3, r2
 8010646:	b29a      	uxth	r2, r3
 8010648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801064a:	801a      	strh	r2, [r3, #0]
 801064c:	e041      	b.n	80106d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801064e:	228c      	movs	r2, #140	@ 0x8c
 8010650:	18bb      	adds	r3, r7, r2
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	085b      	lsrs	r3, r3, #1
 8010656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010658:	18bb      	adds	r3, r7, r2
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2201      	movs	r2, #1
 801065e:	4013      	ands	r3, r2
 8010660:	d002      	beq.n	8010668 <HAL_PCD_EP_DB_Transmit+0x360>
 8010662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010664:	3301      	adds	r3, #1
 8010666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801066a:	881b      	ldrh	r3, [r3, #0]
 801066c:	b29a      	uxth	r2, r3
 801066e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010670:	b29b      	uxth	r3, r3
 8010672:	029b      	lsls	r3, r3, #10
 8010674:	b29b      	uxth	r3, r3
 8010676:	4313      	orrs	r3, r2
 8010678:	b29a      	uxth	r2, r3
 801067a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067c:	801a      	strh	r2, [r3, #0]
 801067e:	e028      	b.n	80106d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010680:	00000402 	.word	0x00000402
 8010684:	ffff8000 	.word	0xffff8000
 8010688:	00000406 	.word	0x00000406
 801068c:	ffff8f8f 	.word	0xffff8f8f
 8010690:	ffffc080 	.word	0xffffc080
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	785b      	ldrb	r3, [r3, #1]
 8010698:	2b01      	cmp	r3, #1
 801069a:	d11a      	bne.n	80106d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2250      	movs	r2, #80	@ 0x50
 80106a8:	5a9b      	ldrh	r3, [r3, r2]
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	001a      	movs	r2, r3
 80106ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106b0:	189b      	adds	r3, r3, r2
 80106b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	00da      	lsls	r2, r3, #3
 80106ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106bc:	18d3      	adds	r3, r2, r3
 80106be:	4adb      	ldr	r2, [pc, #876]	@ (8010a2c <HAL_PCD_EP_DB_Transmit+0x724>)
 80106c0:	4694      	mov	ip, r2
 80106c2:	4463      	add	r3, ip
 80106c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80106c6:	238c      	movs	r3, #140	@ 0x8c
 80106c8:	18fb      	adds	r3, r7, r3
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6818      	ldr	r0, [r3, #0]
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	6959      	ldr	r1, [r3, #20]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	891a      	ldrh	r2, [r3, #8]
 80106de:	238c      	movs	r3, #140	@ 0x8c
 80106e0:	18fb      	adds	r3, r7, r3
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	f005 fdc3 	bl	8016270 <USB_WritePMA>
 80106ea:	e1ea      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2250      	movs	r2, #80	@ 0x50
 80106f2:	5a9b      	ldrh	r3, [r3, r2]
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	001a      	movs	r2, r3
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	00db      	lsls	r3, r3, #3
 80106fe:	18d2      	adds	r2, r2, r3
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	18d3      	adds	r3, r2, r3
 8010706:	4aca      	ldr	r2, [pc, #808]	@ (8010a30 <HAL_PCD_EP_DB_Transmit+0x728>)
 8010708:	4694      	mov	ip, r2
 801070a:	4463      	add	r3, ip
 801070c:	881a      	ldrh	r2, [r3, #0]
 801070e:	2186      	movs	r1, #134	@ 0x86
 8010710:	187b      	adds	r3, r7, r1
 8010712:	0592      	lsls	r2, r2, #22
 8010714:	0d92      	lsrs	r2, r2, #22
 8010716:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	699a      	ldr	r2, [r3, #24]
 801071c:	187b      	adds	r3, r7, r1
 801071e:	881b      	ldrh	r3, [r3, #0]
 8010720:	429a      	cmp	r2, r3
 8010722:	d307      	bcc.n	8010734 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	699a      	ldr	r2, [r3, #24]
 8010728:	187b      	adds	r3, r7, r1
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	1ad2      	subs	r2, r2, r3
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	619a      	str	r2, [r3, #24]
 8010732:	e002      	b.n	801073a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	2200      	movs	r2, #0
 8010738:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d000      	beq.n	8010744 <HAL_PCD_EP_DB_Transmit+0x43c>
 8010742:	e0bb      	b.n	80108bc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	785b      	ldrb	r3, [r3, #1]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d125      	bne.n	8010798 <HAL_PCD_EP_DB_Transmit+0x490>
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	2250      	movs	r2, #80	@ 0x50
 8010758:	5a9b      	ldrh	r3, [r3, r2]
 801075a:	b29b      	uxth	r3, r3
 801075c:	001a      	movs	r2, r3
 801075e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010760:	189b      	adds	r3, r3, r2
 8010762:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	00da      	lsls	r2, r3, #3
 801076a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801076c:	18d3      	adds	r3, r2, r3
 801076e:	4aaf      	ldr	r2, [pc, #700]	@ (8010a2c <HAL_PCD_EP_DB_Transmit+0x724>)
 8010770:	4694      	mov	ip, r2
 8010772:	4463      	add	r3, ip
 8010774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	b29b      	uxth	r3, r3
 801077c:	059b      	lsls	r3, r3, #22
 801077e:	0d9b      	lsrs	r3, r3, #22
 8010780:	b29a      	uxth	r2, r3
 8010782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010784:	801a      	strh	r2, [r3, #0]
 8010786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010788:	881b      	ldrh	r3, [r3, #0]
 801078a:	b29b      	uxth	r3, r3
 801078c:	4aa9      	ldr	r2, [pc, #676]	@ (8010a34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801078e:	4313      	orrs	r3, r2
 8010790:	b29a      	uxth	r2, r3
 8010792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010794:	801a      	strh	r2, [r3, #0]
 8010796:	e01b      	b.n	80107d0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	785b      	ldrb	r3, [r3, #1]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d117      	bne.n	80107d0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2250      	movs	r2, #80	@ 0x50
 80107ac:	5a9b      	ldrh	r3, [r3, r2]
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	001a      	movs	r2, r3
 80107b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80107b4:	189b      	adds	r3, r3, r2
 80107b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	00da      	lsls	r2, r3, #3
 80107be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80107c0:	18d3      	adds	r3, r2, r3
 80107c2:	4a9a      	ldr	r2, [pc, #616]	@ (8010a2c <HAL_PCD_EP_DB_Transmit+0x724>)
 80107c4:	4694      	mov	ip, r2
 80107c6:	4463      	add	r3, ip
 80107c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80107ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107cc:	2200      	movs	r2, #0
 80107ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	785b      	ldrb	r3, [r3, #1]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d12b      	bne.n	8010836 <HAL_PCD_EP_DB_Transmit+0x52e>
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2250      	movs	r2, #80	@ 0x50
 80107ea:	5a9b      	ldrh	r3, [r3, r2]
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	001a      	movs	r2, r3
 80107f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107f2:	189b      	adds	r3, r3, r2
 80107f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	00da      	lsls	r2, r3, #3
 80107fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107fe:	18d3      	adds	r3, r2, r3
 8010800:	4a8b      	ldr	r2, [pc, #556]	@ (8010a30 <HAL_PCD_EP_DB_Transmit+0x728>)
 8010802:	4694      	mov	ip, r2
 8010804:	4463      	add	r3, ip
 8010806:	2180      	movs	r1, #128	@ 0x80
 8010808:	187a      	adds	r2, r7, r1
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	187b      	adds	r3, r7, r1
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	881b      	ldrh	r3, [r3, #0]
 8010812:	b29b      	uxth	r3, r3
 8010814:	059b      	lsls	r3, r3, #22
 8010816:	0d9b      	lsrs	r3, r3, #22
 8010818:	b29a      	uxth	r2, r3
 801081a:	187b      	adds	r3, r7, r1
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	801a      	strh	r2, [r3, #0]
 8010820:	187b      	adds	r3, r7, r1
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	881b      	ldrh	r3, [r3, #0]
 8010826:	b29b      	uxth	r3, r3
 8010828:	4a82      	ldr	r2, [pc, #520]	@ (8010a34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801082a:	4313      	orrs	r3, r2
 801082c:	b29a      	uxth	r2, r3
 801082e:	187b      	adds	r3, r7, r1
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	801a      	strh	r2, [r3, #0]
 8010834:	e018      	b.n	8010868 <HAL_PCD_EP_DB_Transmit+0x560>
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	785b      	ldrb	r3, [r3, #1]
 801083a:	2b01      	cmp	r3, #1
 801083c:	d114      	bne.n	8010868 <HAL_PCD_EP_DB_Transmit+0x560>
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2250      	movs	r2, #80	@ 0x50
 8010844:	5a9b      	ldrh	r3, [r3, r2]
 8010846:	b29b      	uxth	r3, r3
 8010848:	001a      	movs	r2, r3
 801084a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801084c:	189b      	adds	r3, r3, r2
 801084e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	00da      	lsls	r2, r3, #3
 8010856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010858:	18d3      	adds	r3, r2, r3
 801085a:	4a75      	ldr	r2, [pc, #468]	@ (8010a30 <HAL_PCD_EP_DB_Transmit+0x728>)
 801085c:	4694      	mov	ip, r2
 801085e:	4463      	add	r3, ip
 8010860:	673b      	str	r3, [r7, #112]	@ 0x70
 8010862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010864:	2200      	movs	r2, #0
 8010866:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	781a      	ldrb	r2, [r3, #0]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	0011      	movs	r1, r2
 8010870:	0018      	movs	r0, r3
 8010872:	f007 fd81 	bl	8018378 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8010876:	1dbb      	adds	r3, r7, #6
 8010878:	881a      	ldrh	r2, [r3, #0]
 801087a:	2380      	movs	r3, #128	@ 0x80
 801087c:	01db      	lsls	r3, r3, #7
 801087e:	4013      	ands	r3, r2
 8010880:	d000      	beq.n	8010884 <HAL_PCD_EP_DB_Transmit+0x57c>
 8010882:	e11e      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	001a      	movs	r2, r3
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	18d3      	adds	r3, r2, r3
 8010892:	881b      	ldrh	r3, [r3, #0]
 8010894:	b29a      	uxth	r2, r3
 8010896:	2088      	movs	r0, #136	@ 0x88
 8010898:	183b      	adds	r3, r7, r0
 801089a:	4967      	ldr	r1, [pc, #412]	@ (8010a38 <HAL_PCD_EP_DB_Transmit+0x730>)
 801089c:	400a      	ands	r2, r1
 801089e:	801a      	strh	r2, [r3, #0]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	001a      	movs	r2, r3
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	009b      	lsls	r3, r3, #2
 80108ac:	18d3      	adds	r3, r2, r3
 80108ae:	183a      	adds	r2, r7, r0
 80108b0:	8812      	ldrh	r2, [r2, #0]
 80108b2:	4962      	ldr	r1, [pc, #392]	@ (8010a3c <HAL_PCD_EP_DB_Transmit+0x734>)
 80108b4:	430a      	orrs	r2, r1
 80108b6:	b292      	uxth	r2, r2
 80108b8:	801a      	strh	r2, [r3, #0]
 80108ba:	e102      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80108bc:	1dbb      	adds	r3, r7, #6
 80108be:	881a      	ldrh	r2, [r3, #0]
 80108c0:	2380      	movs	r3, #128	@ 0x80
 80108c2:	01db      	lsls	r3, r3, #7
 80108c4:	4013      	ands	r3, r2
 80108c6:	d11a      	bne.n	80108fe <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	001a      	movs	r2, r3
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	18d3      	adds	r3, r2, r3
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	b29a      	uxth	r2, r3
 80108da:	204e      	movs	r0, #78	@ 0x4e
 80108dc:	183b      	adds	r3, r7, r0
 80108de:	4956      	ldr	r1, [pc, #344]	@ (8010a38 <HAL_PCD_EP_DB_Transmit+0x730>)
 80108e0:	400a      	ands	r2, r1
 80108e2:	801a      	strh	r2, [r3, #0]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	001a      	movs	r2, r3
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	18d3      	adds	r3, r2, r3
 80108f2:	183a      	adds	r2, r7, r0
 80108f4:	8812      	ldrh	r2, [r2, #0]
 80108f6:	4951      	ldr	r1, [pc, #324]	@ (8010a3c <HAL_PCD_EP_DB_Transmit+0x734>)
 80108f8:	430a      	orrs	r2, r1
 80108fa:	b292      	uxth	r2, r2
 80108fc:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2224      	movs	r2, #36	@ 0x24
 8010902:	5c9b      	ldrb	r3, [r3, r2]
 8010904:	2b01      	cmp	r3, #1
 8010906:	d000      	beq.n	801090a <HAL_PCD_EP_DB_Transmit+0x602>
 8010908:	e0db      	b.n	8010ac2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	695a      	ldr	r2, [r3, #20]
 801090e:	2186      	movs	r1, #134	@ 0x86
 8010910:	187b      	adds	r3, r7, r1
 8010912:	881b      	ldrh	r3, [r3, #0]
 8010914:	18d2      	adds	r2, r2, r3
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	69da      	ldr	r2, [r3, #28]
 801091e:	187b      	adds	r3, r7, r1
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	18d2      	adds	r2, r2, r3
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	6a1a      	ldr	r2, [r3, #32]
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	691b      	ldr	r3, [r3, #16]
 8010930:	429a      	cmp	r2, r3
 8010932:	d30c      	bcc.n	801094e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	691b      	ldr	r3, [r3, #16]
 8010938:	218c      	movs	r1, #140	@ 0x8c
 801093a:	187a      	adds	r2, r7, r1
 801093c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	6a1a      	ldr	r2, [r3, #32]
 8010942:	187b      	adds	r3, r7, r1
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	1ad2      	subs	r2, r2, r3
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	621a      	str	r2, [r3, #32]
 801094c:	e01a      	b.n	8010984 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	6a1b      	ldr	r3, [r3, #32]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d10a      	bne.n	801096c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8010956:	2386      	movs	r3, #134	@ 0x86
 8010958:	18fb      	adds	r3, r7, r3
 801095a:	881b      	ldrh	r3, [r3, #0]
 801095c:	228c      	movs	r2, #140	@ 0x8c
 801095e:	18ba      	adds	r2, r7, r2
 8010960:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	2224      	movs	r2, #36	@ 0x24
 8010966:	2100      	movs	r1, #0
 8010968:	5499      	strb	r1, [r3, r2]
 801096a:	e00b      	b.n	8010984 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	6a1b      	ldr	r3, [r3, #32]
 8010970:	228c      	movs	r2, #140	@ 0x8c
 8010972:	18ba      	adds	r2, r7, r2
 8010974:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	2200      	movs	r2, #0
 801097a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	2224      	movs	r2, #36	@ 0x24
 8010980:	2100      	movs	r1, #0
 8010982:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	657b      	str	r3, [r7, #84]	@ 0x54
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	785b      	ldrb	r3, [r3, #1]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d000      	beq.n	8010994 <HAL_PCD_EP_DB_Transmit+0x68c>
 8010992:	e06e      	b.n	8010a72 <HAL_PCD_EP_DB_Transmit+0x76a>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2250      	movs	r2, #80	@ 0x50
 80109a0:	5a9b      	ldrh	r3, [r3, r2]
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	001a      	movs	r2, r3
 80109a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109a8:	189b      	adds	r3, r3, r2
 80109aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	00da      	lsls	r2, r3, #3
 80109b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109b4:	18d3      	adds	r3, r2, r3
 80109b6:	4a1e      	ldr	r2, [pc, #120]	@ (8010a30 <HAL_PCD_EP_DB_Transmit+0x728>)
 80109b8:	4694      	mov	ip, r2
 80109ba:	4463      	add	r3, ip
 80109bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80109be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80109c0:	881b      	ldrh	r3, [r3, #0]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	059b      	lsls	r3, r3, #22
 80109c6:	0d9b      	lsrs	r3, r3, #22
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80109cc:	801a      	strh	r2, [r3, #0]
 80109ce:	228c      	movs	r2, #140	@ 0x8c
 80109d0:	18bb      	adds	r3, r7, r2
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80109d6:	d91a      	bls.n	8010a0e <HAL_PCD_EP_DB_Transmit+0x706>
 80109d8:	18bb      	adds	r3, r7, r2
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	095b      	lsrs	r3, r3, #5
 80109de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109e0:	18bb      	adds	r3, r7, r2
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	221f      	movs	r2, #31
 80109e6:	4013      	ands	r3, r2
 80109e8:	d102      	bne.n	80109f0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80109ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80109ec:	3b01      	subs	r3, #1
 80109ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	029b      	lsls	r3, r3, #10
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	4313      	orrs	r3, r2
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	4a0c      	ldr	r2, [pc, #48]	@ (8010a34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8010a04:	4313      	orrs	r3, r2
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a0a:	801a      	strh	r2, [r3, #0]
 8010a0c:	e04d      	b.n	8010aaa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010a0e:	238c      	movs	r3, #140	@ 0x8c
 8010a10:	18fb      	adds	r3, r7, r3
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d113      	bne.n	8010a40 <HAL_PCD_EP_DB_Transmit+0x738>
 8010a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a1a:	881b      	ldrh	r3, [r3, #0]
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	4a05      	ldr	r2, [pc, #20]	@ (8010a34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8010a20:	4313      	orrs	r3, r2
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a26:	801a      	strh	r2, [r3, #0]
 8010a28:	e03f      	b.n	8010aaa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010a2a:	46c0      	nop			@ (mov r8, r8)
 8010a2c:	00000402 	.word	0x00000402
 8010a30:	00000406 	.word	0x00000406
 8010a34:	ffff8000 	.word	0xffff8000
 8010a38:	ffff8f8f 	.word	0xffff8f8f
 8010a3c:	ffffc080 	.word	0xffffc080
 8010a40:	228c      	movs	r2, #140	@ 0x8c
 8010a42:	18bb      	adds	r3, r7, r2
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	085b      	lsrs	r3, r3, #1
 8010a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a4a:	18bb      	adds	r3, r7, r2
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	4013      	ands	r3, r2
 8010a52:	d002      	beq.n	8010a5a <HAL_PCD_EP_DB_Transmit+0x752>
 8010a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a56:	3301      	adds	r3, #1
 8010a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	029b      	lsls	r3, r3, #10
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a6e:	801a      	strh	r2, [r3, #0]
 8010a70:	e01b      	b.n	8010aaa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	785b      	ldrb	r3, [r3, #1]
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	d117      	bne.n	8010aaa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2250      	movs	r2, #80	@ 0x50
 8010a80:	5a9b      	ldrh	r3, [r3, r2]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	001a      	movs	r2, r3
 8010a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a88:	189b      	adds	r3, r3, r2
 8010a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	00da      	lsls	r2, r3, #3
 8010a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a94:	18d3      	adds	r3, r2, r3
 8010a96:	4a21      	ldr	r2, [pc, #132]	@ (8010b1c <HAL_PCD_EP_DB_Transmit+0x814>)
 8010a98:	4694      	mov	ip, r2
 8010a9a:	4463      	add	r3, ip
 8010a9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a9e:	238c      	movs	r3, #140	@ 0x8c
 8010aa0:	18fb      	adds	r3, r7, r3
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010aa8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6818      	ldr	r0, [r3, #0]
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	6959      	ldr	r1, [r3, #20]
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	895a      	ldrh	r2, [r3, #10]
 8010ab6:	238c      	movs	r3, #140	@ 0x8c
 8010ab8:	18fb      	adds	r3, r7, r3
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	f005 fbd7 	bl	8016270 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	001a      	movs	r2, r3
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	18d3      	adds	r3, r2, r3
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	2014      	movs	r0, #20
 8010ad6:	183b      	adds	r3, r7, r0
 8010ad8:	4911      	ldr	r1, [pc, #68]	@ (8010b20 <HAL_PCD_EP_DB_Transmit+0x818>)
 8010ada:	400a      	ands	r2, r1
 8010adc:	801a      	strh	r2, [r3, #0]
 8010ade:	183b      	adds	r3, r7, r0
 8010ae0:	183a      	adds	r2, r7, r0
 8010ae2:	8812      	ldrh	r2, [r2, #0]
 8010ae4:	2110      	movs	r1, #16
 8010ae6:	404a      	eors	r2, r1
 8010ae8:	801a      	strh	r2, [r3, #0]
 8010aea:	183b      	adds	r3, r7, r0
 8010aec:	183a      	adds	r2, r7, r0
 8010aee:	8812      	ldrh	r2, [r2, #0]
 8010af0:	2120      	movs	r1, #32
 8010af2:	404a      	eors	r2, r1
 8010af4:	801a      	strh	r2, [r3, #0]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	001a      	movs	r2, r3
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	18d3      	adds	r3, r2, r3
 8010b04:	183a      	adds	r2, r7, r0
 8010b06:	8812      	ldrh	r2, [r2, #0]
 8010b08:	4906      	ldr	r1, [pc, #24]	@ (8010b24 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8010b0a:	430a      	orrs	r2, r1
 8010b0c:	b292      	uxth	r2, r2
 8010b0e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	0018      	movs	r0, r3
 8010b14:	46bd      	mov	sp, r7
 8010b16:	b024      	add	sp, #144	@ 0x90
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	46c0      	nop			@ (mov r8, r8)
 8010b1c:	00000406 	.word	0x00000406
 8010b20:	ffff8fbf 	.word	0xffff8fbf
 8010b24:	ffff8080 	.word	0xffff8080

08010b28 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8010b28:	b590      	push	{r4, r7, lr}
 8010b2a:	b087      	sub	sp, #28
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	0008      	movs	r0, r1
 8010b32:	0011      	movs	r1, r2
 8010b34:	607b      	str	r3, [r7, #4]
 8010b36:	240a      	movs	r4, #10
 8010b38:	193b      	adds	r3, r7, r4
 8010b3a:	1c02      	adds	r2, r0, #0
 8010b3c:	801a      	strh	r2, [r3, #0]
 8010b3e:	2308      	movs	r3, #8
 8010b40:	18fb      	adds	r3, r7, r3
 8010b42:	1c0a      	adds	r2, r1, #0
 8010b44:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8010b46:	0021      	movs	r1, r4
 8010b48:	187b      	adds	r3, r7, r1
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	2280      	movs	r2, #128	@ 0x80
 8010b4e:	4013      	ands	r3, r2
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00c      	beq.n	8010b70 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010b56:	187b      	adds	r3, r7, r1
 8010b58:	881b      	ldrh	r3, [r3, #0]
 8010b5a:	2207      	movs	r2, #7
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	1c5a      	adds	r2, r3, #1
 8010b60:	0013      	movs	r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	189b      	adds	r3, r3, r2
 8010b66:	00db      	lsls	r3, r3, #3
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	18d3      	adds	r3, r2, r3
 8010b6c:	617b      	str	r3, [r7, #20]
 8010b6e:	e00b      	b.n	8010b88 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010b70:	230a      	movs	r3, #10
 8010b72:	18fb      	adds	r3, r7, r3
 8010b74:	881a      	ldrh	r2, [r3, #0]
 8010b76:	0013      	movs	r3, r2
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	189b      	adds	r3, r3, r2
 8010b7c:	00db      	lsls	r3, r3, #3
 8010b7e:	3369      	adds	r3, #105	@ 0x69
 8010b80:	33ff      	adds	r3, #255	@ 0xff
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	18d3      	adds	r3, r2, r3
 8010b86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8010b88:	2308      	movs	r3, #8
 8010b8a:	18fb      	adds	r3, r7, r3
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d107      	bne.n	8010ba2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	2200      	movs	r2, #0
 8010b96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	80da      	strh	r2, [r3, #6]
 8010ba0:	e00b      	b.n	8010bba <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	0c1b      	lsrs	r3, r3, #16
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010bba:	2300      	movs	r3, #0
}
 8010bbc:	0018      	movs	r0, r3
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	b007      	add	sp, #28
 8010bc2:	bd90      	pop	{r4, r7, pc}

08010bc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	23ba      	movs	r3, #186	@ 0xba
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	2101      	movs	r1, #1
 8010bda:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	23b8      	movs	r3, #184	@ 0xb8
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	2100      	movs	r1, #0
 8010be4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2254      	movs	r2, #84	@ 0x54
 8010bea:	5a9b      	ldrh	r3, [r3, r2]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	2201      	movs	r2, #1
 8010bf0:	4313      	orrs	r3, r2
 8010bf2:	b299      	uxth	r1, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2254      	movs	r2, #84	@ 0x54
 8010bf8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2254      	movs	r2, #84	@ 0x54
 8010bfe:	5a9b      	ldrh	r3, [r3, r2]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	2202      	movs	r2, #2
 8010c04:	4313      	orrs	r3, r2
 8010c06:	b299      	uxth	r1, r3
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2254      	movs	r2, #84	@ 0x54
 8010c0c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8010c0e:	2300      	movs	r3, #0
}
 8010c10:	0018      	movs	r0, r3
 8010c12:	46bd      	mov	sp, r7
 8010c14:	b004      	add	sp, #16
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	000a      	movs	r2, r1
 8010c22:	1cfb      	adds	r3, r7, #3
 8010c24:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8010c26:	46c0      	nop			@ (mov r8, r8)
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	b002      	add	sp, #8
 8010c2c:	bd80      	pop	{r7, pc}
	...

08010c30 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8010c34:	4b04      	ldr	r3, [pc, #16]	@ (8010c48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	4b03      	ldr	r3, [pc, #12]	@ (8010c48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8010c3a:	2180      	movs	r1, #128	@ 0x80
 8010c3c:	0049      	lsls	r1, r1, #1
 8010c3e:	430a      	orrs	r2, r1
 8010c40:	601a      	str	r2, [r3, #0]
}
 8010c42:	46c0      	nop			@ (mov r8, r8)
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	40007000 	.word	0x40007000

08010c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010c4c:	b5b0      	push	{r4, r5, r7, lr}
 8010c4e:	b08a      	sub	sp, #40	@ 0x28
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d102      	bne.n	8010c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	f000 fbbf 	bl	80113de <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010c60:	4bc9      	ldr	r3, [pc, #804]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	220c      	movs	r2, #12
 8010c66:	4013      	ands	r3, r2
 8010c68:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010c6a:	4bc7      	ldr	r3, [pc, #796]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010c6c:	68da      	ldr	r2, [r3, #12]
 8010c6e:	2380      	movs	r3, #128	@ 0x80
 8010c70:	025b      	lsls	r3, r3, #9
 8010c72:	4013      	ands	r3, r2
 8010c74:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	4013      	ands	r3, r2
 8010c7e:	d100      	bne.n	8010c82 <HAL_RCC_OscConfig+0x36>
 8010c80:	e07e      	b.n	8010d80 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	2b08      	cmp	r3, #8
 8010c86:	d007      	beq.n	8010c98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2b0c      	cmp	r3, #12
 8010c8c:	d112      	bne.n	8010cb4 <HAL_RCC_OscConfig+0x68>
 8010c8e:	69ba      	ldr	r2, [r7, #24]
 8010c90:	2380      	movs	r3, #128	@ 0x80
 8010c92:	025b      	lsls	r3, r3, #9
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d10d      	bne.n	8010cb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010c98:	4bbb      	ldr	r3, [pc, #748]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	2380      	movs	r3, #128	@ 0x80
 8010c9e:	029b      	lsls	r3, r3, #10
 8010ca0:	4013      	ands	r3, r2
 8010ca2:	d100      	bne.n	8010ca6 <HAL_RCC_OscConfig+0x5a>
 8010ca4:	e06b      	b.n	8010d7e <HAL_RCC_OscConfig+0x132>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d167      	bne.n	8010d7e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	f000 fb95 	bl	80113de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	685a      	ldr	r2, [r3, #4]
 8010cb8:	2380      	movs	r3, #128	@ 0x80
 8010cba:	025b      	lsls	r3, r3, #9
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d107      	bne.n	8010cd0 <HAL_RCC_OscConfig+0x84>
 8010cc0:	4bb1      	ldr	r3, [pc, #708]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	4bb0      	ldr	r3, [pc, #704]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010cc6:	2180      	movs	r1, #128	@ 0x80
 8010cc8:	0249      	lsls	r1, r1, #9
 8010cca:	430a      	orrs	r2, r1
 8010ccc:	601a      	str	r2, [r3, #0]
 8010cce:	e027      	b.n	8010d20 <HAL_RCC_OscConfig+0xd4>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	685a      	ldr	r2, [r3, #4]
 8010cd4:	23a0      	movs	r3, #160	@ 0xa0
 8010cd6:	02db      	lsls	r3, r3, #11
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d10e      	bne.n	8010cfa <HAL_RCC_OscConfig+0xae>
 8010cdc:	4baa      	ldr	r3, [pc, #680]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	4ba9      	ldr	r3, [pc, #676]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010ce2:	2180      	movs	r1, #128	@ 0x80
 8010ce4:	02c9      	lsls	r1, r1, #11
 8010ce6:	430a      	orrs	r2, r1
 8010ce8:	601a      	str	r2, [r3, #0]
 8010cea:	4ba7      	ldr	r3, [pc, #668]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	4ba6      	ldr	r3, [pc, #664]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010cf0:	2180      	movs	r1, #128	@ 0x80
 8010cf2:	0249      	lsls	r1, r1, #9
 8010cf4:	430a      	orrs	r2, r1
 8010cf6:	601a      	str	r2, [r3, #0]
 8010cf8:	e012      	b.n	8010d20 <HAL_RCC_OscConfig+0xd4>
 8010cfa:	4ba3      	ldr	r3, [pc, #652]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	4ba2      	ldr	r3, [pc, #648]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010d00:	49a2      	ldr	r1, [pc, #648]	@ (8010f8c <HAL_RCC_OscConfig+0x340>)
 8010d02:	400a      	ands	r2, r1
 8010d04:	601a      	str	r2, [r3, #0]
 8010d06:	4ba0      	ldr	r3, [pc, #640]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	2380      	movs	r3, #128	@ 0x80
 8010d0c:	025b      	lsls	r3, r3, #9
 8010d0e:	4013      	ands	r3, r2
 8010d10:	60fb      	str	r3, [r7, #12]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	4b9c      	ldr	r3, [pc, #624]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	4b9b      	ldr	r3, [pc, #620]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010d1a:	499d      	ldr	r1, [pc, #628]	@ (8010f90 <HAL_RCC_OscConfig+0x344>)
 8010d1c:	400a      	ands	r2, r1
 8010d1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d015      	beq.n	8010d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d28:	f7fa fb92 	bl	800b450 <HAL_GetTick>
 8010d2c:	0003      	movs	r3, r0
 8010d2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010d30:	e009      	b.n	8010d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010d32:	f7fa fb8d 	bl	800b450 <HAL_GetTick>
 8010d36:	0002      	movs	r2, r0
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	2b64      	cmp	r3, #100	@ 0x64
 8010d3e:	d902      	bls.n	8010d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010d40:	2303      	movs	r3, #3
 8010d42:	f000 fb4c 	bl	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010d46:	4b90      	ldr	r3, [pc, #576]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	2380      	movs	r3, #128	@ 0x80
 8010d4c:	029b      	lsls	r3, r3, #10
 8010d4e:	4013      	ands	r3, r2
 8010d50:	d0ef      	beq.n	8010d32 <HAL_RCC_OscConfig+0xe6>
 8010d52:	e015      	b.n	8010d80 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d54:	f7fa fb7c 	bl	800b450 <HAL_GetTick>
 8010d58:	0003      	movs	r3, r0
 8010d5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010d5c:	e008      	b.n	8010d70 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010d5e:	f7fa fb77 	bl	800b450 <HAL_GetTick>
 8010d62:	0002      	movs	r2, r0
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	2b64      	cmp	r3, #100	@ 0x64
 8010d6a:	d901      	bls.n	8010d70 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8010d6c:	2303      	movs	r3, #3
 8010d6e:	e336      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010d70:	4b85      	ldr	r3, [pc, #532]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	2380      	movs	r3, #128	@ 0x80
 8010d76:	029b      	lsls	r3, r3, #10
 8010d78:	4013      	ands	r3, r2
 8010d7a:	d1f0      	bne.n	8010d5e <HAL_RCC_OscConfig+0x112>
 8010d7c:	e000      	b.n	8010d80 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d7e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2202      	movs	r2, #2
 8010d86:	4013      	ands	r3, r2
 8010d88:	d100      	bne.n	8010d8c <HAL_RCC_OscConfig+0x140>
 8010d8a:	e099      	b.n	8010ec0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8010d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d94:	2220      	movs	r2, #32
 8010d96:	4013      	ands	r3, r2
 8010d98:	d009      	beq.n	8010dae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8010d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010da0:	2120      	movs	r1, #32
 8010da2:	430a      	orrs	r2, r1
 8010da4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8010da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da8:	2220      	movs	r2, #32
 8010daa:	4393      	bics	r3, r2
 8010dac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	2b04      	cmp	r3, #4
 8010db2:	d005      	beq.n	8010dc0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	2b0c      	cmp	r3, #12
 8010db8:	d13e      	bne.n	8010e38 <HAL_RCC_OscConfig+0x1ec>
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d13b      	bne.n	8010e38 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8010dc0:	4b71      	ldr	r3, [pc, #452]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	2204      	movs	r2, #4
 8010dc6:	4013      	ands	r3, r2
 8010dc8:	d004      	beq.n	8010dd4 <HAL_RCC_OscConfig+0x188>
 8010dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d101      	bne.n	8010dd4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	e304      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	4a6e      	ldr	r2, [pc, #440]	@ (8010f94 <HAL_RCC_OscConfig+0x348>)
 8010dda:	4013      	ands	r3, r2
 8010ddc:	0019      	movs	r1, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	021a      	lsls	r2, r3, #8
 8010de4:	4b68      	ldr	r3, [pc, #416]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010de6:	430a      	orrs	r2, r1
 8010de8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8010dea:	4b67      	ldr	r3, [pc, #412]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2209      	movs	r2, #9
 8010df0:	4393      	bics	r3, r2
 8010df2:	0019      	movs	r1, r3
 8010df4:	4b64      	ldr	r3, [pc, #400]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010df8:	430a      	orrs	r2, r1
 8010dfa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010dfc:	f000 fc42 	bl	8011684 <HAL_RCC_GetSysClockFreq>
 8010e00:	0001      	movs	r1, r0
 8010e02:	4b61      	ldr	r3, [pc, #388]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	091b      	lsrs	r3, r3, #4
 8010e08:	220f      	movs	r2, #15
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	4a62      	ldr	r2, [pc, #392]	@ (8010f98 <HAL_RCC_OscConfig+0x34c>)
 8010e0e:	5cd3      	ldrb	r3, [r2, r3]
 8010e10:	000a      	movs	r2, r1
 8010e12:	40da      	lsrs	r2, r3
 8010e14:	4b61      	ldr	r3, [pc, #388]	@ (8010f9c <HAL_RCC_OscConfig+0x350>)
 8010e16:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8010e18:	4b61      	ldr	r3, [pc, #388]	@ (8010fa0 <HAL_RCC_OscConfig+0x354>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2513      	movs	r5, #19
 8010e1e:	197c      	adds	r4, r7, r5
 8010e20:	0018      	movs	r0, r3
 8010e22:	f7fa facf 	bl	800b3c4 <HAL_InitTick>
 8010e26:	0003      	movs	r3, r0
 8010e28:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8010e2a:	197b      	adds	r3, r7, r5
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d046      	beq.n	8010ec0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8010e32:	197b      	adds	r3, r7, r5
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	e2d2      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8010e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d027      	beq.n	8010e8e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8010e3e:	4b52      	ldr	r3, [pc, #328]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2209      	movs	r2, #9
 8010e44:	4393      	bics	r3, r2
 8010e46:	0019      	movs	r1, r3
 8010e48:	4b4f      	ldr	r3, [pc, #316]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e4c:	430a      	orrs	r2, r1
 8010e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e50:	f7fa fafe 	bl	800b450 <HAL_GetTick>
 8010e54:	0003      	movs	r3, r0
 8010e56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010e58:	e008      	b.n	8010e6c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010e5a:	f7fa faf9 	bl	800b450 <HAL_GetTick>
 8010e5e:	0002      	movs	r2, r0
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	1ad3      	subs	r3, r2, r3
 8010e64:	2b02      	cmp	r3, #2
 8010e66:	d901      	bls.n	8010e6c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8010e68:	2303      	movs	r3, #3
 8010e6a:	e2b8      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010e6c:	4b46      	ldr	r3, [pc, #280]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2204      	movs	r2, #4
 8010e72:	4013      	ands	r3, r2
 8010e74:	d0f1      	beq.n	8010e5a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e76:	4b44      	ldr	r3, [pc, #272]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	4a46      	ldr	r2, [pc, #280]	@ (8010f94 <HAL_RCC_OscConfig+0x348>)
 8010e7c:	4013      	ands	r3, r2
 8010e7e:	0019      	movs	r1, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	691b      	ldr	r3, [r3, #16]
 8010e84:	021a      	lsls	r2, r3, #8
 8010e86:	4b40      	ldr	r3, [pc, #256]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e88:	430a      	orrs	r2, r1
 8010e8a:	605a      	str	r2, [r3, #4]
 8010e8c:	e018      	b.n	8010ec0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	4b3d      	ldr	r3, [pc, #244]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010e94:	2101      	movs	r1, #1
 8010e96:	438a      	bics	r2, r1
 8010e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e9a:	f7fa fad9 	bl	800b450 <HAL_GetTick>
 8010e9e:	0003      	movs	r3, r0
 8010ea0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010ea2:	e008      	b.n	8010eb6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010ea4:	f7fa fad4 	bl	800b450 <HAL_GetTick>
 8010ea8:	0002      	movs	r2, r0
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d901      	bls.n	8010eb6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	e293      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010eb6:	4b34      	ldr	r3, [pc, #208]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2204      	movs	r2, #4
 8010ebc:	4013      	ands	r3, r2
 8010ebe:	d1f1      	bne.n	8010ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	2210      	movs	r2, #16
 8010ec6:	4013      	ands	r3, r2
 8010ec8:	d100      	bne.n	8010ecc <HAL_RCC_OscConfig+0x280>
 8010eca:	e0a2      	b.n	8011012 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d140      	bne.n	8010f54 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	2380      	movs	r3, #128	@ 0x80
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	4013      	ands	r3, r2
 8010edc:	d005      	beq.n	8010eea <HAL_RCC_OscConfig+0x29e>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	69db      	ldr	r3, [r3, #28]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e279      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010eea:	4b27      	ldr	r3, [pc, #156]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	4a2d      	ldr	r2, [pc, #180]	@ (8010fa4 <HAL_RCC_OscConfig+0x358>)
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	0019      	movs	r1, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010ef8:	4b23      	ldr	r3, [pc, #140]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010efa:	430a      	orrs	r2, r1
 8010efc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010efe:	4b22      	ldr	r3, [pc, #136]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	021b      	lsls	r3, r3, #8
 8010f04:	0a19      	lsrs	r1, r3, #8
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6a1b      	ldr	r3, [r3, #32]
 8010f0a:	061a      	lsls	r2, r3, #24
 8010f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010f0e:	430a      	orrs	r2, r1
 8010f10:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f16:	0b5b      	lsrs	r3, r3, #13
 8010f18:	3301      	adds	r3, #1
 8010f1a:	2280      	movs	r2, #128	@ 0x80
 8010f1c:	0212      	lsls	r2, r2, #8
 8010f1e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8010f20:	4b19      	ldr	r3, [pc, #100]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	091b      	lsrs	r3, r3, #4
 8010f26:	210f      	movs	r1, #15
 8010f28:	400b      	ands	r3, r1
 8010f2a:	491b      	ldr	r1, [pc, #108]	@ (8010f98 <HAL_RCC_OscConfig+0x34c>)
 8010f2c:	5ccb      	ldrb	r3, [r1, r3]
 8010f2e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010f30:	4b1a      	ldr	r3, [pc, #104]	@ (8010f9c <HAL_RCC_OscConfig+0x350>)
 8010f32:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8010f34:	4b1a      	ldr	r3, [pc, #104]	@ (8010fa0 <HAL_RCC_OscConfig+0x354>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2513      	movs	r5, #19
 8010f3a:	197c      	adds	r4, r7, r5
 8010f3c:	0018      	movs	r0, r3
 8010f3e:	f7fa fa41 	bl	800b3c4 <HAL_InitTick>
 8010f42:	0003      	movs	r3, r0
 8010f44:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8010f46:	197b      	adds	r3, r7, r5
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d061      	beq.n	8011012 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8010f4e:	197b      	adds	r3, r7, r5
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	e244      	b.n	80113de <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	69db      	ldr	r3, [r3, #28]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d040      	beq.n	8010fde <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	4b09      	ldr	r3, [pc, #36]	@ (8010f88 <HAL_RCC_OscConfig+0x33c>)
 8010f62:	2180      	movs	r1, #128	@ 0x80
 8010f64:	0049      	lsls	r1, r1, #1
 8010f66:	430a      	orrs	r2, r1
 8010f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010f6a:	f7fa fa71 	bl	800b450 <HAL_GetTick>
 8010f6e:	0003      	movs	r3, r0
 8010f70:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010f72:	e019      	b.n	8010fa8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010f74:	f7fa fa6c 	bl	800b450 <HAL_GetTick>
 8010f78:	0002      	movs	r2, r0
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	1ad3      	subs	r3, r2, r3
 8010f7e:	2b02      	cmp	r3, #2
 8010f80:	d912      	bls.n	8010fa8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8010f82:	2303      	movs	r3, #3
 8010f84:	e22b      	b.n	80113de <HAL_RCC_OscConfig+0x792>
 8010f86:	46c0      	nop			@ (mov r8, r8)
 8010f88:	40021000 	.word	0x40021000
 8010f8c:	fffeffff 	.word	0xfffeffff
 8010f90:	fffbffff 	.word	0xfffbffff
 8010f94:	ffffe0ff 	.word	0xffffe0ff
 8010f98:	0801f220 	.word	0x0801f220
 8010f9c:	20000070 	.word	0x20000070
 8010fa0:	20000084 	.word	0x20000084
 8010fa4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010fa8:	4bca      	ldr	r3, [pc, #808]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	2380      	movs	r3, #128	@ 0x80
 8010fae:	009b      	lsls	r3, r3, #2
 8010fb0:	4013      	ands	r3, r2
 8010fb2:	d0df      	beq.n	8010f74 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010fb4:	4bc7      	ldr	r3, [pc, #796]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	4ac7      	ldr	r2, [pc, #796]	@ (80112d8 <HAL_RCC_OscConfig+0x68c>)
 8010fba:	4013      	ands	r3, r2
 8010fbc:	0019      	movs	r1, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fc2:	4bc4      	ldr	r3, [pc, #784]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8010fc4:	430a      	orrs	r2, r1
 8010fc6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010fc8:	4bc2      	ldr	r3, [pc, #776]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	021b      	lsls	r3, r3, #8
 8010fce:	0a19      	lsrs	r1, r3, #8
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6a1b      	ldr	r3, [r3, #32]
 8010fd4:	061a      	lsls	r2, r3, #24
 8010fd6:	4bbf      	ldr	r3, [pc, #764]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8010fd8:	430a      	orrs	r2, r1
 8010fda:	605a      	str	r2, [r3, #4]
 8010fdc:	e019      	b.n	8011012 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010fde:	4bbd      	ldr	r3, [pc, #756]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	4bbc      	ldr	r3, [pc, #752]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8010fe4:	49bd      	ldr	r1, [pc, #756]	@ (80112dc <HAL_RCC_OscConfig+0x690>)
 8010fe6:	400a      	ands	r2, r1
 8010fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010fea:	f7fa fa31 	bl	800b450 <HAL_GetTick>
 8010fee:	0003      	movs	r3, r0
 8010ff0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8010ff2:	e008      	b.n	8011006 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010ff4:	f7fa fa2c 	bl	800b450 <HAL_GetTick>
 8010ff8:	0002      	movs	r2, r0
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	2b02      	cmp	r3, #2
 8011000:	d901      	bls.n	8011006 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8011002:	2303      	movs	r3, #3
 8011004:	e1eb      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011006:	4bb3      	ldr	r3, [pc, #716]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	2380      	movs	r3, #128	@ 0x80
 801100c:	009b      	lsls	r3, r3, #2
 801100e:	4013      	ands	r3, r2
 8011010:	d1f0      	bne.n	8010ff4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2208      	movs	r2, #8
 8011018:	4013      	ands	r3, r2
 801101a:	d036      	beq.n	801108a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	695b      	ldr	r3, [r3, #20]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d019      	beq.n	8011058 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011024:	4bab      	ldr	r3, [pc, #684]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011026:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011028:	4baa      	ldr	r3, [pc, #680]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801102a:	2101      	movs	r1, #1
 801102c:	430a      	orrs	r2, r1
 801102e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011030:	f7fa fa0e 	bl	800b450 <HAL_GetTick>
 8011034:	0003      	movs	r3, r0
 8011036:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011038:	e008      	b.n	801104c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801103a:	f7fa fa09 	bl	800b450 <HAL_GetTick>
 801103e:	0002      	movs	r2, r0
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	2b02      	cmp	r3, #2
 8011046:	d901      	bls.n	801104c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8011048:	2303      	movs	r3, #3
 801104a:	e1c8      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801104c:	4ba1      	ldr	r3, [pc, #644]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801104e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011050:	2202      	movs	r2, #2
 8011052:	4013      	ands	r3, r2
 8011054:	d0f1      	beq.n	801103a <HAL_RCC_OscConfig+0x3ee>
 8011056:	e018      	b.n	801108a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011058:	4b9e      	ldr	r3, [pc, #632]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801105a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801105c:	4b9d      	ldr	r3, [pc, #628]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801105e:	2101      	movs	r1, #1
 8011060:	438a      	bics	r2, r1
 8011062:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011064:	f7fa f9f4 	bl	800b450 <HAL_GetTick>
 8011068:	0003      	movs	r3, r0
 801106a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801106c:	e008      	b.n	8011080 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801106e:	f7fa f9ef 	bl	800b450 <HAL_GetTick>
 8011072:	0002      	movs	r2, r0
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	2b02      	cmp	r3, #2
 801107a:	d901      	bls.n	8011080 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801107c:	2303      	movs	r3, #3
 801107e:	e1ae      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011080:	4b94      	ldr	r3, [pc, #592]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011084:	2202      	movs	r2, #2
 8011086:	4013      	ands	r3, r2
 8011088:	d1f1      	bne.n	801106e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2204      	movs	r2, #4
 8011090:	4013      	ands	r3, r2
 8011092:	d100      	bne.n	8011096 <HAL_RCC_OscConfig+0x44a>
 8011094:	e0ae      	b.n	80111f4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011096:	2023      	movs	r0, #35	@ 0x23
 8011098:	183b      	adds	r3, r7, r0
 801109a:	2200      	movs	r2, #0
 801109c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801109e:	4b8d      	ldr	r3, [pc, #564]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80110a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110a2:	2380      	movs	r3, #128	@ 0x80
 80110a4:	055b      	lsls	r3, r3, #21
 80110a6:	4013      	ands	r3, r2
 80110a8:	d109      	bne.n	80110be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80110aa:	4b8a      	ldr	r3, [pc, #552]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80110ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110ae:	4b89      	ldr	r3, [pc, #548]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80110b0:	2180      	movs	r1, #128	@ 0x80
 80110b2:	0549      	lsls	r1, r1, #21
 80110b4:	430a      	orrs	r2, r1
 80110b6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80110b8:	183b      	adds	r3, r7, r0
 80110ba:	2201      	movs	r2, #1
 80110bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80110be:	4b88      	ldr	r3, [pc, #544]	@ (80112e0 <HAL_RCC_OscConfig+0x694>)
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	2380      	movs	r3, #128	@ 0x80
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4013      	ands	r3, r2
 80110c8:	d11a      	bne.n	8011100 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80110ca:	4b85      	ldr	r3, [pc, #532]	@ (80112e0 <HAL_RCC_OscConfig+0x694>)
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	4b84      	ldr	r3, [pc, #528]	@ (80112e0 <HAL_RCC_OscConfig+0x694>)
 80110d0:	2180      	movs	r1, #128	@ 0x80
 80110d2:	0049      	lsls	r1, r1, #1
 80110d4:	430a      	orrs	r2, r1
 80110d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80110d8:	f7fa f9ba 	bl	800b450 <HAL_GetTick>
 80110dc:	0003      	movs	r3, r0
 80110de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80110e0:	e008      	b.n	80110f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80110e2:	f7fa f9b5 	bl	800b450 <HAL_GetTick>
 80110e6:	0002      	movs	r2, r0
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	2b64      	cmp	r3, #100	@ 0x64
 80110ee:	d901      	bls.n	80110f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80110f0:	2303      	movs	r3, #3
 80110f2:	e174      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80110f4:	4b7a      	ldr	r3, [pc, #488]	@ (80112e0 <HAL_RCC_OscConfig+0x694>)
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	2380      	movs	r3, #128	@ 0x80
 80110fa:	005b      	lsls	r3, r3, #1
 80110fc:	4013      	ands	r3, r2
 80110fe:	d0f0      	beq.n	80110e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	689a      	ldr	r2, [r3, #8]
 8011104:	2380      	movs	r3, #128	@ 0x80
 8011106:	005b      	lsls	r3, r3, #1
 8011108:	429a      	cmp	r2, r3
 801110a:	d107      	bne.n	801111c <HAL_RCC_OscConfig+0x4d0>
 801110c:	4b71      	ldr	r3, [pc, #452]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801110e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011110:	4b70      	ldr	r3, [pc, #448]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011112:	2180      	movs	r1, #128	@ 0x80
 8011114:	0049      	lsls	r1, r1, #1
 8011116:	430a      	orrs	r2, r1
 8011118:	651a      	str	r2, [r3, #80]	@ 0x50
 801111a:	e031      	b.n	8011180 <HAL_RCC_OscConfig+0x534>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	689b      	ldr	r3, [r3, #8]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d10c      	bne.n	801113e <HAL_RCC_OscConfig+0x4f2>
 8011124:	4b6b      	ldr	r3, [pc, #428]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011128:	4b6a      	ldr	r3, [pc, #424]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801112a:	496c      	ldr	r1, [pc, #432]	@ (80112dc <HAL_RCC_OscConfig+0x690>)
 801112c:	400a      	ands	r2, r1
 801112e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011130:	4b68      	ldr	r3, [pc, #416]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011132:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011134:	4b67      	ldr	r3, [pc, #412]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011136:	496b      	ldr	r1, [pc, #428]	@ (80112e4 <HAL_RCC_OscConfig+0x698>)
 8011138:	400a      	ands	r2, r1
 801113a:	651a      	str	r2, [r3, #80]	@ 0x50
 801113c:	e020      	b.n	8011180 <HAL_RCC_OscConfig+0x534>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	689a      	ldr	r2, [r3, #8]
 8011142:	23a0      	movs	r3, #160	@ 0xa0
 8011144:	00db      	lsls	r3, r3, #3
 8011146:	429a      	cmp	r2, r3
 8011148:	d10e      	bne.n	8011168 <HAL_RCC_OscConfig+0x51c>
 801114a:	4b62      	ldr	r3, [pc, #392]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801114c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801114e:	4b61      	ldr	r3, [pc, #388]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011150:	2180      	movs	r1, #128	@ 0x80
 8011152:	00c9      	lsls	r1, r1, #3
 8011154:	430a      	orrs	r2, r1
 8011156:	651a      	str	r2, [r3, #80]	@ 0x50
 8011158:	4b5e      	ldr	r3, [pc, #376]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801115a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801115c:	4b5d      	ldr	r3, [pc, #372]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801115e:	2180      	movs	r1, #128	@ 0x80
 8011160:	0049      	lsls	r1, r1, #1
 8011162:	430a      	orrs	r2, r1
 8011164:	651a      	str	r2, [r3, #80]	@ 0x50
 8011166:	e00b      	b.n	8011180 <HAL_RCC_OscConfig+0x534>
 8011168:	4b5a      	ldr	r3, [pc, #360]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801116a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801116c:	4b59      	ldr	r3, [pc, #356]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801116e:	495b      	ldr	r1, [pc, #364]	@ (80112dc <HAL_RCC_OscConfig+0x690>)
 8011170:	400a      	ands	r2, r1
 8011172:	651a      	str	r2, [r3, #80]	@ 0x50
 8011174:	4b57      	ldr	r3, [pc, #348]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011178:	4b56      	ldr	r3, [pc, #344]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801117a:	495a      	ldr	r1, [pc, #360]	@ (80112e4 <HAL_RCC_OscConfig+0x698>)
 801117c:	400a      	ands	r2, r1
 801117e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d015      	beq.n	80111b4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011188:	f7fa f962 	bl	800b450 <HAL_GetTick>
 801118c:	0003      	movs	r3, r0
 801118e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011190:	e009      	b.n	80111a6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011192:	f7fa f95d 	bl	800b450 <HAL_GetTick>
 8011196:	0002      	movs	r2, r0
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	1ad3      	subs	r3, r2, r3
 801119c:	4a52      	ldr	r2, [pc, #328]	@ (80112e8 <HAL_RCC_OscConfig+0x69c>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d901      	bls.n	80111a6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80111a2:	2303      	movs	r3, #3
 80111a4:	e11b      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80111a6:	4b4b      	ldr	r3, [pc, #300]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80111a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111aa:	2380      	movs	r3, #128	@ 0x80
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4013      	ands	r3, r2
 80111b0:	d0ef      	beq.n	8011192 <HAL_RCC_OscConfig+0x546>
 80111b2:	e014      	b.n	80111de <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80111b4:	f7fa f94c 	bl	800b450 <HAL_GetTick>
 80111b8:	0003      	movs	r3, r0
 80111ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80111bc:	e009      	b.n	80111d2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80111be:	f7fa f947 	bl	800b450 <HAL_GetTick>
 80111c2:	0002      	movs	r2, r0
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	4a47      	ldr	r2, [pc, #284]	@ (80112e8 <HAL_RCC_OscConfig+0x69c>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d901      	bls.n	80111d2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80111ce:	2303      	movs	r3, #3
 80111d0:	e105      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80111d2:	4b40      	ldr	r3, [pc, #256]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80111d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111d6:	2380      	movs	r3, #128	@ 0x80
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4013      	ands	r3, r2
 80111dc:	d1ef      	bne.n	80111be <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80111de:	2323      	movs	r3, #35	@ 0x23
 80111e0:	18fb      	adds	r3, r7, r3
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d105      	bne.n	80111f4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80111e8:	4b3a      	ldr	r3, [pc, #232]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80111ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80111ec:	4b39      	ldr	r3, [pc, #228]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80111ee:	493f      	ldr	r1, [pc, #252]	@ (80112ec <HAL_RCC_OscConfig+0x6a0>)
 80111f0:	400a      	ands	r2, r1
 80111f2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2220      	movs	r2, #32
 80111fa:	4013      	ands	r3, r2
 80111fc:	d049      	beq.n	8011292 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	699b      	ldr	r3, [r3, #24]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d026      	beq.n	8011254 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011206:	4b33      	ldr	r3, [pc, #204]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011208:	689a      	ldr	r2, [r3, #8]
 801120a:	4b32      	ldr	r3, [pc, #200]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801120c:	2101      	movs	r1, #1
 801120e:	430a      	orrs	r2, r1
 8011210:	609a      	str	r2, [r3, #8]
 8011212:	4b30      	ldr	r3, [pc, #192]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011216:	4b2f      	ldr	r3, [pc, #188]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011218:	2101      	movs	r1, #1
 801121a:	430a      	orrs	r2, r1
 801121c:	635a      	str	r2, [r3, #52]	@ 0x34
 801121e:	4b34      	ldr	r3, [pc, #208]	@ (80112f0 <HAL_RCC_OscConfig+0x6a4>)
 8011220:	6a1a      	ldr	r2, [r3, #32]
 8011222:	4b33      	ldr	r3, [pc, #204]	@ (80112f0 <HAL_RCC_OscConfig+0x6a4>)
 8011224:	2180      	movs	r1, #128	@ 0x80
 8011226:	0189      	lsls	r1, r1, #6
 8011228:	430a      	orrs	r2, r1
 801122a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801122c:	f7fa f910 	bl	800b450 <HAL_GetTick>
 8011230:	0003      	movs	r3, r0
 8011232:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011234:	e008      	b.n	8011248 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011236:	f7fa f90b 	bl	800b450 <HAL_GetTick>
 801123a:	0002      	movs	r2, r0
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	2b02      	cmp	r3, #2
 8011242:	d901      	bls.n	8011248 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8011244:	2303      	movs	r3, #3
 8011246:	e0ca      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011248:	4b22      	ldr	r3, [pc, #136]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801124a:	689b      	ldr	r3, [r3, #8]
 801124c:	2202      	movs	r2, #2
 801124e:	4013      	ands	r3, r2
 8011250:	d0f1      	beq.n	8011236 <HAL_RCC_OscConfig+0x5ea>
 8011252:	e01e      	b.n	8011292 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8011254:	4b1f      	ldr	r3, [pc, #124]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 8011256:	689a      	ldr	r2, [r3, #8]
 8011258:	4b1e      	ldr	r3, [pc, #120]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801125a:	2101      	movs	r1, #1
 801125c:	438a      	bics	r2, r1
 801125e:	609a      	str	r2, [r3, #8]
 8011260:	4b23      	ldr	r3, [pc, #140]	@ (80112f0 <HAL_RCC_OscConfig+0x6a4>)
 8011262:	6a1a      	ldr	r2, [r3, #32]
 8011264:	4b22      	ldr	r3, [pc, #136]	@ (80112f0 <HAL_RCC_OscConfig+0x6a4>)
 8011266:	4923      	ldr	r1, [pc, #140]	@ (80112f4 <HAL_RCC_OscConfig+0x6a8>)
 8011268:	400a      	ands	r2, r1
 801126a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801126c:	f7fa f8f0 	bl	800b450 <HAL_GetTick>
 8011270:	0003      	movs	r3, r0
 8011272:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011274:	e008      	b.n	8011288 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011276:	f7fa f8eb 	bl	800b450 <HAL_GetTick>
 801127a:	0002      	movs	r2, r0
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	1ad3      	subs	r3, r2, r3
 8011280:	2b02      	cmp	r3, #2
 8011282:	d901      	bls.n	8011288 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8011284:	2303      	movs	r3, #3
 8011286:	e0aa      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011288:	4b12      	ldr	r3, [pc, #72]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	2202      	movs	r2, #2
 801128e:	4013      	ands	r3, r2
 8011290:	d1f1      	bne.n	8011276 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011296:	2b00      	cmp	r3, #0
 8011298:	d100      	bne.n	801129c <HAL_RCC_OscConfig+0x650>
 801129a:	e09f      	b.n	80113dc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	2b0c      	cmp	r3, #12
 80112a0:	d100      	bne.n	80112a4 <HAL_RCC_OscConfig+0x658>
 80112a2:	e078      	b.n	8011396 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d159      	bne.n	8011360 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112ac:	4b09      	ldr	r3, [pc, #36]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	4b08      	ldr	r3, [pc, #32]	@ (80112d4 <HAL_RCC_OscConfig+0x688>)
 80112b2:	4911      	ldr	r1, [pc, #68]	@ (80112f8 <HAL_RCC_OscConfig+0x6ac>)
 80112b4:	400a      	ands	r2, r1
 80112b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80112b8:	f7fa f8ca 	bl	800b450 <HAL_GetTick>
 80112bc:	0003      	movs	r3, r0
 80112be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80112c0:	e01c      	b.n	80112fc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80112c2:	f7fa f8c5 	bl	800b450 <HAL_GetTick>
 80112c6:	0002      	movs	r2, r0
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	2b02      	cmp	r3, #2
 80112ce:	d915      	bls.n	80112fc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80112d0:	2303      	movs	r3, #3
 80112d2:	e084      	b.n	80113de <HAL_RCC_OscConfig+0x792>
 80112d4:	40021000 	.word	0x40021000
 80112d8:	ffff1fff 	.word	0xffff1fff
 80112dc:	fffffeff 	.word	0xfffffeff
 80112e0:	40007000 	.word	0x40007000
 80112e4:	fffffbff 	.word	0xfffffbff
 80112e8:	00001388 	.word	0x00001388
 80112ec:	efffffff 	.word	0xefffffff
 80112f0:	40010000 	.word	0x40010000
 80112f4:	ffffdfff 	.word	0xffffdfff
 80112f8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80112fc:	4b3a      	ldr	r3, [pc, #232]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	2380      	movs	r3, #128	@ 0x80
 8011302:	049b      	lsls	r3, r3, #18
 8011304:	4013      	ands	r3, r2
 8011306:	d1dc      	bne.n	80112c2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011308:	4b37      	ldr	r3, [pc, #220]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	4a37      	ldr	r2, [pc, #220]	@ (80113ec <HAL_RCC_OscConfig+0x7a0>)
 801130e:	4013      	ands	r3, r2
 8011310:	0019      	movs	r1, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801131a:	431a      	orrs	r2, r3
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011320:	431a      	orrs	r2, r3
 8011322:	4b31      	ldr	r3, [pc, #196]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 8011324:	430a      	orrs	r2, r1
 8011326:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011328:	4b2f      	ldr	r3, [pc, #188]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	4b2e      	ldr	r3, [pc, #184]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 801132e:	2180      	movs	r1, #128	@ 0x80
 8011330:	0449      	lsls	r1, r1, #17
 8011332:	430a      	orrs	r2, r1
 8011334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011336:	f7fa f88b 	bl	800b450 <HAL_GetTick>
 801133a:	0003      	movs	r3, r0
 801133c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801133e:	e008      	b.n	8011352 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011340:	f7fa f886 	bl	800b450 <HAL_GetTick>
 8011344:	0002      	movs	r2, r0
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	2b02      	cmp	r3, #2
 801134c:	d901      	bls.n	8011352 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801134e:	2303      	movs	r3, #3
 8011350:	e045      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011352:	4b25      	ldr	r3, [pc, #148]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	2380      	movs	r3, #128	@ 0x80
 8011358:	049b      	lsls	r3, r3, #18
 801135a:	4013      	ands	r3, r2
 801135c:	d0f0      	beq.n	8011340 <HAL_RCC_OscConfig+0x6f4>
 801135e:	e03d      	b.n	80113dc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011360:	4b21      	ldr	r3, [pc, #132]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	4b20      	ldr	r3, [pc, #128]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 8011366:	4922      	ldr	r1, [pc, #136]	@ (80113f0 <HAL_RCC_OscConfig+0x7a4>)
 8011368:	400a      	ands	r2, r1
 801136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801136c:	f7fa f870 	bl	800b450 <HAL_GetTick>
 8011370:	0003      	movs	r3, r0
 8011372:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011374:	e008      	b.n	8011388 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011376:	f7fa f86b 	bl	800b450 <HAL_GetTick>
 801137a:	0002      	movs	r2, r0
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	1ad3      	subs	r3, r2, r3
 8011380:	2b02      	cmp	r3, #2
 8011382:	d901      	bls.n	8011388 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8011384:	2303      	movs	r3, #3
 8011386:	e02a      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011388:	4b17      	ldr	r3, [pc, #92]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	2380      	movs	r3, #128	@ 0x80
 801138e:	049b      	lsls	r3, r3, #18
 8011390:	4013      	ands	r3, r2
 8011392:	d1f0      	bne.n	8011376 <HAL_RCC_OscConfig+0x72a>
 8011394:	e022      	b.n	80113dc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801139a:	2b01      	cmp	r3, #1
 801139c:	d101      	bne.n	80113a2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801139e:	2301      	movs	r3, #1
 80113a0:	e01d      	b.n	80113de <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80113a2:	4b11      	ldr	r3, [pc, #68]	@ (80113e8 <HAL_RCC_OscConfig+0x79c>)
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80113a8:	69ba      	ldr	r2, [r7, #24]
 80113aa:	2380      	movs	r3, #128	@ 0x80
 80113ac:	025b      	lsls	r3, r3, #9
 80113ae:	401a      	ands	r2, r3
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d10f      	bne.n	80113d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80113b8:	69ba      	ldr	r2, [r7, #24]
 80113ba:	23f0      	movs	r3, #240	@ 0xf0
 80113bc:	039b      	lsls	r3, r3, #14
 80113be:	401a      	ands	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d107      	bne.n	80113d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80113c8:	69ba      	ldr	r2, [r7, #24]
 80113ca:	23c0      	movs	r3, #192	@ 0xc0
 80113cc:	041b      	lsls	r3, r3, #16
 80113ce:	401a      	ands	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d001      	beq.n	80113dc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80113d8:	2301      	movs	r3, #1
 80113da:	e000      	b.n	80113de <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80113dc:	2300      	movs	r3, #0
}
 80113de:	0018      	movs	r0, r3
 80113e0:	46bd      	mov	sp, r7
 80113e2:	b00a      	add	sp, #40	@ 0x28
 80113e4:	bdb0      	pop	{r4, r5, r7, pc}
 80113e6:	46c0      	nop			@ (mov r8, r8)
 80113e8:	40021000 	.word	0x40021000
 80113ec:	ff02ffff 	.word	0xff02ffff
 80113f0:	feffffff 	.word	0xfeffffff

080113f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113f4:	b5b0      	push	{r4, r5, r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d101      	bne.n	8011408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011404:	2301      	movs	r3, #1
 8011406:	e128      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011408:	4b96      	ldr	r3, [pc, #600]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2201      	movs	r2, #1
 801140e:	4013      	ands	r3, r2
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	429a      	cmp	r2, r3
 8011414:	d91e      	bls.n	8011454 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011416:	4b93      	ldr	r3, [pc, #588]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	2201      	movs	r2, #1
 801141c:	4393      	bics	r3, r2
 801141e:	0019      	movs	r1, r3
 8011420:	4b90      	ldr	r3, [pc, #576]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	430a      	orrs	r2, r1
 8011426:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011428:	f7fa f812 	bl	800b450 <HAL_GetTick>
 801142c:	0003      	movs	r3, r0
 801142e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011430:	e009      	b.n	8011446 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011432:	f7fa f80d 	bl	800b450 <HAL_GetTick>
 8011436:	0002      	movs	r2, r0
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	4a8a      	ldr	r2, [pc, #552]	@ (8011668 <HAL_RCC_ClockConfig+0x274>)
 801143e:	4293      	cmp	r3, r2
 8011440:	d901      	bls.n	8011446 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8011442:	2303      	movs	r3, #3
 8011444:	e109      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011446:	4b87      	ldr	r3, [pc, #540]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2201      	movs	r2, #1
 801144c:	4013      	ands	r3, r2
 801144e:	683a      	ldr	r2, [r7, #0]
 8011450:	429a      	cmp	r2, r3
 8011452:	d1ee      	bne.n	8011432 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2202      	movs	r2, #2
 801145a:	4013      	ands	r3, r2
 801145c:	d009      	beq.n	8011472 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801145e:	4b83      	ldr	r3, [pc, #524]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	22f0      	movs	r2, #240	@ 0xf0
 8011464:	4393      	bics	r3, r2
 8011466:	0019      	movs	r1, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	689a      	ldr	r2, [r3, #8]
 801146c:	4b7f      	ldr	r3, [pc, #508]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 801146e:	430a      	orrs	r2, r1
 8011470:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2201      	movs	r2, #1
 8011478:	4013      	ands	r3, r2
 801147a:	d100      	bne.n	801147e <HAL_RCC_ClockConfig+0x8a>
 801147c:	e089      	b.n	8011592 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	2b02      	cmp	r3, #2
 8011484:	d107      	bne.n	8011496 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011486:	4b79      	ldr	r3, [pc, #484]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	2380      	movs	r3, #128	@ 0x80
 801148c:	029b      	lsls	r3, r3, #10
 801148e:	4013      	ands	r3, r2
 8011490:	d120      	bne.n	80114d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011492:	2301      	movs	r3, #1
 8011494:	e0e1      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	2b03      	cmp	r3, #3
 801149c:	d107      	bne.n	80114ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801149e:	4b73      	ldr	r3, [pc, #460]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	2380      	movs	r3, #128	@ 0x80
 80114a4:	049b      	lsls	r3, r3, #18
 80114a6:	4013      	ands	r3, r2
 80114a8:	d114      	bne.n	80114d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80114aa:	2301      	movs	r3, #1
 80114ac:	e0d5      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d106      	bne.n	80114c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80114b6:	4b6d      	ldr	r3, [pc, #436]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2204      	movs	r2, #4
 80114bc:	4013      	ands	r3, r2
 80114be:	d109      	bne.n	80114d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80114c0:	2301      	movs	r3, #1
 80114c2:	e0ca      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80114c4:	4b69      	ldr	r3, [pc, #420]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	2380      	movs	r3, #128	@ 0x80
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	4013      	ands	r3, r2
 80114ce:	d101      	bne.n	80114d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80114d0:	2301      	movs	r3, #1
 80114d2:	e0c2      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80114d4:	4b65      	ldr	r3, [pc, #404]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	2203      	movs	r2, #3
 80114da:	4393      	bics	r3, r2
 80114dc:	0019      	movs	r1, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	4b62      	ldr	r3, [pc, #392]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 80114e4:	430a      	orrs	r2, r1
 80114e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80114e8:	f7f9 ffb2 	bl	800b450 <HAL_GetTick>
 80114ec:	0003      	movs	r3, r0
 80114ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	d111      	bne.n	801151c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80114f8:	e009      	b.n	801150e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114fa:	f7f9 ffa9 	bl	800b450 <HAL_GetTick>
 80114fe:	0002      	movs	r2, r0
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	4a58      	ldr	r2, [pc, #352]	@ (8011668 <HAL_RCC_ClockConfig+0x274>)
 8011506:	4293      	cmp	r3, r2
 8011508:	d901      	bls.n	801150e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801150a:	2303      	movs	r3, #3
 801150c:	e0a5      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801150e:	4b57      	ldr	r3, [pc, #348]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	220c      	movs	r2, #12
 8011514:	4013      	ands	r3, r2
 8011516:	2b08      	cmp	r3, #8
 8011518:	d1ef      	bne.n	80114fa <HAL_RCC_ClockConfig+0x106>
 801151a:	e03a      	b.n	8011592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	2b03      	cmp	r3, #3
 8011522:	d111      	bne.n	8011548 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011524:	e009      	b.n	801153a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011526:	f7f9 ff93 	bl	800b450 <HAL_GetTick>
 801152a:	0002      	movs	r2, r0
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	4a4d      	ldr	r2, [pc, #308]	@ (8011668 <HAL_RCC_ClockConfig+0x274>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d901      	bls.n	801153a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8011536:	2303      	movs	r3, #3
 8011538:	e08f      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801153a:	4b4c      	ldr	r3, [pc, #304]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	220c      	movs	r2, #12
 8011540:	4013      	ands	r3, r2
 8011542:	2b0c      	cmp	r3, #12
 8011544:	d1ef      	bne.n	8011526 <HAL_RCC_ClockConfig+0x132>
 8011546:	e024      	b.n	8011592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	2b01      	cmp	r3, #1
 801154e:	d11b      	bne.n	8011588 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011550:	e009      	b.n	8011566 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011552:	f7f9 ff7d 	bl	800b450 <HAL_GetTick>
 8011556:	0002      	movs	r2, r0
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	1ad3      	subs	r3, r2, r3
 801155c:	4a42      	ldr	r2, [pc, #264]	@ (8011668 <HAL_RCC_ClockConfig+0x274>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d901      	bls.n	8011566 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8011562:	2303      	movs	r3, #3
 8011564:	e079      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011566:	4b41      	ldr	r3, [pc, #260]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	220c      	movs	r2, #12
 801156c:	4013      	ands	r3, r2
 801156e:	2b04      	cmp	r3, #4
 8011570:	d1ef      	bne.n	8011552 <HAL_RCC_ClockConfig+0x15e>
 8011572:	e00e      	b.n	8011592 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011574:	f7f9 ff6c 	bl	800b450 <HAL_GetTick>
 8011578:	0002      	movs	r2, r0
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	4a3a      	ldr	r2, [pc, #232]	@ (8011668 <HAL_RCC_ClockConfig+0x274>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d901      	bls.n	8011588 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8011584:	2303      	movs	r3, #3
 8011586:	e068      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8011588:	4b38      	ldr	r3, [pc, #224]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	220c      	movs	r2, #12
 801158e:	4013      	ands	r3, r2
 8011590:	d1f0      	bne.n	8011574 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011592:	4b34      	ldr	r3, [pc, #208]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2201      	movs	r2, #1
 8011598:	4013      	ands	r3, r2
 801159a:	683a      	ldr	r2, [r7, #0]
 801159c:	429a      	cmp	r2, r3
 801159e:	d21e      	bcs.n	80115de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80115a0:	4b30      	ldr	r3, [pc, #192]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2201      	movs	r2, #1
 80115a6:	4393      	bics	r3, r2
 80115a8:	0019      	movs	r1, r3
 80115aa:	4b2e      	ldr	r3, [pc, #184]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	430a      	orrs	r2, r1
 80115b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80115b2:	f7f9 ff4d 	bl	800b450 <HAL_GetTick>
 80115b6:	0003      	movs	r3, r0
 80115b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80115ba:	e009      	b.n	80115d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115bc:	f7f9 ff48 	bl	800b450 <HAL_GetTick>
 80115c0:	0002      	movs	r2, r0
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	4a28      	ldr	r2, [pc, #160]	@ (8011668 <HAL_RCC_ClockConfig+0x274>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d901      	bls.n	80115d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80115cc:	2303      	movs	r3, #3
 80115ce:	e044      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80115d0:	4b24      	ldr	r3, [pc, #144]	@ (8011664 <HAL_RCC_ClockConfig+0x270>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2201      	movs	r2, #1
 80115d6:	4013      	ands	r3, r2
 80115d8:	683a      	ldr	r2, [r7, #0]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d1ee      	bne.n	80115bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2204      	movs	r2, #4
 80115e4:	4013      	ands	r3, r2
 80115e6:	d009      	beq.n	80115fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80115e8:	4b20      	ldr	r3, [pc, #128]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	4a20      	ldr	r2, [pc, #128]	@ (8011670 <HAL_RCC_ClockConfig+0x27c>)
 80115ee:	4013      	ands	r3, r2
 80115f0:	0019      	movs	r1, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	68da      	ldr	r2, [r3, #12]
 80115f6:	4b1d      	ldr	r3, [pc, #116]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 80115f8:	430a      	orrs	r2, r1
 80115fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2208      	movs	r2, #8
 8011602:	4013      	ands	r3, r2
 8011604:	d00a      	beq.n	801161c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8011606:	4b19      	ldr	r3, [pc, #100]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 8011608:	68db      	ldr	r3, [r3, #12]
 801160a:	4a1a      	ldr	r2, [pc, #104]	@ (8011674 <HAL_RCC_ClockConfig+0x280>)
 801160c:	4013      	ands	r3, r2
 801160e:	0019      	movs	r1, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	691b      	ldr	r3, [r3, #16]
 8011614:	00da      	lsls	r2, r3, #3
 8011616:	4b15      	ldr	r3, [pc, #84]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 8011618:	430a      	orrs	r2, r1
 801161a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801161c:	f000 f832 	bl	8011684 <HAL_RCC_GetSysClockFreq>
 8011620:	0001      	movs	r1, r0
 8011622:	4b12      	ldr	r3, [pc, #72]	@ (801166c <HAL_RCC_ClockConfig+0x278>)
 8011624:	68db      	ldr	r3, [r3, #12]
 8011626:	091b      	lsrs	r3, r3, #4
 8011628:	220f      	movs	r2, #15
 801162a:	4013      	ands	r3, r2
 801162c:	4a12      	ldr	r2, [pc, #72]	@ (8011678 <HAL_RCC_ClockConfig+0x284>)
 801162e:	5cd3      	ldrb	r3, [r2, r3]
 8011630:	000a      	movs	r2, r1
 8011632:	40da      	lsrs	r2, r3
 8011634:	4b11      	ldr	r3, [pc, #68]	@ (801167c <HAL_RCC_ClockConfig+0x288>)
 8011636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011638:	4b11      	ldr	r3, [pc, #68]	@ (8011680 <HAL_RCC_ClockConfig+0x28c>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	250b      	movs	r5, #11
 801163e:	197c      	adds	r4, r7, r5
 8011640:	0018      	movs	r0, r3
 8011642:	f7f9 febf 	bl	800b3c4 <HAL_InitTick>
 8011646:	0003      	movs	r3, r0
 8011648:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801164a:	197b      	adds	r3, r7, r5
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d002      	beq.n	8011658 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8011652:	197b      	adds	r3, r7, r5
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	e000      	b.n	801165a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8011658:	2300      	movs	r3, #0
}
 801165a:	0018      	movs	r0, r3
 801165c:	46bd      	mov	sp, r7
 801165e:	b004      	add	sp, #16
 8011660:	bdb0      	pop	{r4, r5, r7, pc}
 8011662:	46c0      	nop			@ (mov r8, r8)
 8011664:	40022000 	.word	0x40022000
 8011668:	00001388 	.word	0x00001388
 801166c:	40021000 	.word	0x40021000
 8011670:	fffff8ff 	.word	0xfffff8ff
 8011674:	ffffc7ff 	.word	0xffffc7ff
 8011678:	0801f220 	.word	0x0801f220
 801167c:	20000070 	.word	0x20000070
 8011680:	20000084 	.word	0x20000084

08011684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011684:	b5b0      	push	{r4, r5, r7, lr}
 8011686:	b08e      	sub	sp, #56	@ 0x38
 8011688:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801168a:	4b4c      	ldr	r3, [pc, #304]	@ (80117bc <HAL_RCC_GetSysClockFreq+0x138>)
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011692:	230c      	movs	r3, #12
 8011694:	4013      	ands	r3, r2
 8011696:	2b0c      	cmp	r3, #12
 8011698:	d014      	beq.n	80116c4 <HAL_RCC_GetSysClockFreq+0x40>
 801169a:	d900      	bls.n	801169e <HAL_RCC_GetSysClockFreq+0x1a>
 801169c:	e07b      	b.n	8011796 <HAL_RCC_GetSysClockFreq+0x112>
 801169e:	2b04      	cmp	r3, #4
 80116a0:	d002      	beq.n	80116a8 <HAL_RCC_GetSysClockFreq+0x24>
 80116a2:	2b08      	cmp	r3, #8
 80116a4:	d00b      	beq.n	80116be <HAL_RCC_GetSysClockFreq+0x3a>
 80116a6:	e076      	b.n	8011796 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80116a8:	4b44      	ldr	r3, [pc, #272]	@ (80117bc <HAL_RCC_GetSysClockFreq+0x138>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2210      	movs	r2, #16
 80116ae:	4013      	ands	r3, r2
 80116b0:	d002      	beq.n	80116b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80116b2:	4b43      	ldr	r3, [pc, #268]	@ (80117c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80116b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80116b6:	e07c      	b.n	80117b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80116b8:	4b42      	ldr	r3, [pc, #264]	@ (80117c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80116ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80116bc:	e079      	b.n	80117b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80116be:	4b42      	ldr	r3, [pc, #264]	@ (80117c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80116c0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80116c2:	e076      	b.n	80117b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80116c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c6:	0c9a      	lsrs	r2, r3, #18
 80116c8:	230f      	movs	r3, #15
 80116ca:	401a      	ands	r2, r3
 80116cc:	4b3f      	ldr	r3, [pc, #252]	@ (80117cc <HAL_RCC_GetSysClockFreq+0x148>)
 80116ce:	5c9b      	ldrb	r3, [r3, r2]
 80116d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80116d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d4:	0d9a      	lsrs	r2, r3, #22
 80116d6:	2303      	movs	r3, #3
 80116d8:	4013      	ands	r3, r2
 80116da:	3301      	adds	r3, #1
 80116dc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80116de:	4b37      	ldr	r3, [pc, #220]	@ (80117bc <HAL_RCC_GetSysClockFreq+0x138>)
 80116e0:	68da      	ldr	r2, [r3, #12]
 80116e2:	2380      	movs	r3, #128	@ 0x80
 80116e4:	025b      	lsls	r3, r3, #9
 80116e6:	4013      	ands	r3, r2
 80116e8:	d01a      	beq.n	8011720 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80116ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ec:	61bb      	str	r3, [r7, #24]
 80116ee:	2300      	movs	r3, #0
 80116f0:	61fb      	str	r3, [r7, #28]
 80116f2:	4a35      	ldr	r2, [pc, #212]	@ (80117c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80116f4:	2300      	movs	r3, #0
 80116f6:	69b8      	ldr	r0, [r7, #24]
 80116f8:	69f9      	ldr	r1, [r7, #28]
 80116fa:	f7ee ff57 	bl	80005ac <__aeabi_lmul>
 80116fe:	0002      	movs	r2, r0
 8011700:	000b      	movs	r3, r1
 8011702:	0010      	movs	r0, r2
 8011704:	0019      	movs	r1, r3
 8011706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011708:	613b      	str	r3, [r7, #16]
 801170a:	2300      	movs	r3, #0
 801170c:	617b      	str	r3, [r7, #20]
 801170e:	693a      	ldr	r2, [r7, #16]
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	f7ee ff2b 	bl	800056c <__aeabi_uldivmod>
 8011716:	0002      	movs	r2, r0
 8011718:	000b      	movs	r3, r1
 801171a:	0013      	movs	r3, r2
 801171c:	637b      	str	r3, [r7, #52]	@ 0x34
 801171e:	e037      	b.n	8011790 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8011720:	4b26      	ldr	r3, [pc, #152]	@ (80117bc <HAL_RCC_GetSysClockFreq+0x138>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	2210      	movs	r2, #16
 8011726:	4013      	ands	r3, r2
 8011728:	d01a      	beq.n	8011760 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801172c:	60bb      	str	r3, [r7, #8]
 801172e:	2300      	movs	r3, #0
 8011730:	60fb      	str	r3, [r7, #12]
 8011732:	4a23      	ldr	r2, [pc, #140]	@ (80117c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8011734:	2300      	movs	r3, #0
 8011736:	68b8      	ldr	r0, [r7, #8]
 8011738:	68f9      	ldr	r1, [r7, #12]
 801173a:	f7ee ff37 	bl	80005ac <__aeabi_lmul>
 801173e:	0002      	movs	r2, r0
 8011740:	000b      	movs	r3, r1
 8011742:	0010      	movs	r0, r2
 8011744:	0019      	movs	r1, r3
 8011746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011748:	603b      	str	r3, [r7, #0]
 801174a:	2300      	movs	r3, #0
 801174c:	607b      	str	r3, [r7, #4]
 801174e:	683a      	ldr	r2, [r7, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f7ee ff0b 	bl	800056c <__aeabi_uldivmod>
 8011756:	0002      	movs	r2, r0
 8011758:	000b      	movs	r3, r1
 801175a:	0013      	movs	r3, r2
 801175c:	637b      	str	r3, [r7, #52]	@ 0x34
 801175e:	e017      	b.n	8011790 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8011760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011762:	0018      	movs	r0, r3
 8011764:	2300      	movs	r3, #0
 8011766:	0019      	movs	r1, r3
 8011768:	4a16      	ldr	r2, [pc, #88]	@ (80117c4 <HAL_RCC_GetSysClockFreq+0x140>)
 801176a:	2300      	movs	r3, #0
 801176c:	f7ee ff1e 	bl	80005ac <__aeabi_lmul>
 8011770:	0002      	movs	r2, r0
 8011772:	000b      	movs	r3, r1
 8011774:	0010      	movs	r0, r2
 8011776:	0019      	movs	r1, r3
 8011778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177a:	001c      	movs	r4, r3
 801177c:	2300      	movs	r3, #0
 801177e:	001d      	movs	r5, r3
 8011780:	0022      	movs	r2, r4
 8011782:	002b      	movs	r3, r5
 8011784:	f7ee fef2 	bl	800056c <__aeabi_uldivmod>
 8011788:	0002      	movs	r2, r0
 801178a:	000b      	movs	r3, r1
 801178c:	0013      	movs	r3, r2
 801178e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8011790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011792:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011794:	e00d      	b.n	80117b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8011796:	4b09      	ldr	r3, [pc, #36]	@ (80117bc <HAL_RCC_GetSysClockFreq+0x138>)
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	0b5b      	lsrs	r3, r3, #13
 801179c:	2207      	movs	r2, #7
 801179e:	4013      	ands	r3, r2
 80117a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80117a2:	6a3b      	ldr	r3, [r7, #32]
 80117a4:	3301      	adds	r3, #1
 80117a6:	2280      	movs	r2, #128	@ 0x80
 80117a8:	0212      	lsls	r2, r2, #8
 80117aa:	409a      	lsls	r2, r3
 80117ac:	0013      	movs	r3, r2
 80117ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80117b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80117b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80117b4:	0018      	movs	r0, r3
 80117b6:	46bd      	mov	sp, r7
 80117b8:	b00e      	add	sp, #56	@ 0x38
 80117ba:	bdb0      	pop	{r4, r5, r7, pc}
 80117bc:	40021000 	.word	0x40021000
 80117c0:	003d0900 	.word	0x003d0900
 80117c4:	00f42400 	.word	0x00f42400
 80117c8:	007a1200 	.word	0x007a1200
 80117cc:	0801f238 	.word	0x0801f238

080117d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80117d4:	4b02      	ldr	r3, [pc, #8]	@ (80117e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80117d6:	681b      	ldr	r3, [r3, #0]
}
 80117d8:	0018      	movs	r0, r3
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	46c0      	nop			@ (mov r8, r8)
 80117e0:	20000070 	.word	0x20000070

080117e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80117e8:	f7ff fff2 	bl	80117d0 <HAL_RCC_GetHCLKFreq>
 80117ec:	0001      	movs	r1, r0
 80117ee:	4b06      	ldr	r3, [pc, #24]	@ (8011808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	0a1b      	lsrs	r3, r3, #8
 80117f4:	2207      	movs	r2, #7
 80117f6:	4013      	ands	r3, r2
 80117f8:	4a04      	ldr	r2, [pc, #16]	@ (801180c <HAL_RCC_GetPCLK1Freq+0x28>)
 80117fa:	5cd3      	ldrb	r3, [r2, r3]
 80117fc:	40d9      	lsrs	r1, r3
 80117fe:	000b      	movs	r3, r1
}
 8011800:	0018      	movs	r0, r3
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	46c0      	nop			@ (mov r8, r8)
 8011808:	40021000 	.word	0x40021000
 801180c:	0801f230 	.word	0x0801f230

08011810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011814:	f7ff ffdc 	bl	80117d0 <HAL_RCC_GetHCLKFreq>
 8011818:	0001      	movs	r1, r0
 801181a:	4b06      	ldr	r3, [pc, #24]	@ (8011834 <HAL_RCC_GetPCLK2Freq+0x24>)
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	0adb      	lsrs	r3, r3, #11
 8011820:	2207      	movs	r2, #7
 8011822:	4013      	ands	r3, r2
 8011824:	4a04      	ldr	r2, [pc, #16]	@ (8011838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011826:	5cd3      	ldrb	r3, [r2, r3]
 8011828:	40d9      	lsrs	r1, r3
 801182a:	000b      	movs	r3, r1
}
 801182c:	0018      	movs	r0, r3
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	46c0      	nop			@ (mov r8, r8)
 8011834:	40021000 	.word	0x40021000
 8011838:	0801f230 	.word	0x0801f230

0801183c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b086      	sub	sp, #24
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8011844:	2017      	movs	r0, #23
 8011846:	183b      	adds	r3, r7, r0
 8011848:	2200      	movs	r2, #0
 801184a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2220      	movs	r2, #32
 8011852:	4013      	ands	r3, r2
 8011854:	d100      	bne.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8011856:	e0c7      	b.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011858:	4b9b      	ldr	r3, [pc, #620]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801185a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801185c:	2380      	movs	r3, #128	@ 0x80
 801185e:	055b      	lsls	r3, r3, #21
 8011860:	4013      	ands	r3, r2
 8011862:	d109      	bne.n	8011878 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011864:	4b98      	ldr	r3, [pc, #608]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011868:	4b97      	ldr	r3, [pc, #604]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801186a:	2180      	movs	r1, #128	@ 0x80
 801186c:	0549      	lsls	r1, r1, #21
 801186e:	430a      	orrs	r2, r1
 8011870:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8011872:	183b      	adds	r3, r7, r0
 8011874:	2201      	movs	r2, #1
 8011876:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011878:	4b94      	ldr	r3, [pc, #592]	@ (8011acc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	2380      	movs	r3, #128	@ 0x80
 801187e:	005b      	lsls	r3, r3, #1
 8011880:	4013      	ands	r3, r2
 8011882:	d11a      	bne.n	80118ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011884:	4b91      	ldr	r3, [pc, #580]	@ (8011acc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	4b90      	ldr	r3, [pc, #576]	@ (8011acc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801188a:	2180      	movs	r1, #128	@ 0x80
 801188c:	0049      	lsls	r1, r1, #1
 801188e:	430a      	orrs	r2, r1
 8011890:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011892:	f7f9 fddd 	bl	800b450 <HAL_GetTick>
 8011896:	0003      	movs	r3, r0
 8011898:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801189a:	e008      	b.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801189c:	f7f9 fdd8 	bl	800b450 <HAL_GetTick>
 80118a0:	0002      	movs	r2, r0
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	2b64      	cmp	r3, #100	@ 0x64
 80118a8:	d901      	bls.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80118aa:	2303      	movs	r3, #3
 80118ac:	e107      	b.n	8011abe <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118ae:	4b87      	ldr	r3, [pc, #540]	@ (8011acc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	2380      	movs	r3, #128	@ 0x80
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	4013      	ands	r3, r2
 80118b8:	d0f0      	beq.n	801189c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80118ba:	4b83      	ldr	r3, [pc, #524]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	23c0      	movs	r3, #192	@ 0xc0
 80118c0:	039b      	lsls	r3, r3, #14
 80118c2:	4013      	ands	r3, r2
 80118c4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	685a      	ldr	r2, [r3, #4]
 80118ca:	23c0      	movs	r3, #192	@ 0xc0
 80118cc:	039b      	lsls	r3, r3, #14
 80118ce:	4013      	ands	r3, r2
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d013      	beq.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	685a      	ldr	r2, [r3, #4]
 80118da:	23c0      	movs	r3, #192	@ 0xc0
 80118dc:	029b      	lsls	r3, r3, #10
 80118de:	401a      	ands	r2, r3
 80118e0:	23c0      	movs	r3, #192	@ 0xc0
 80118e2:	029b      	lsls	r3, r3, #10
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d10a      	bne.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80118e8:	4b77      	ldr	r3, [pc, #476]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	2380      	movs	r3, #128	@ 0x80
 80118ee:	029b      	lsls	r3, r3, #10
 80118f0:	401a      	ands	r2, r3
 80118f2:	2380      	movs	r3, #128	@ 0x80
 80118f4:	029b      	lsls	r3, r3, #10
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d101      	bne.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80118fa:	2301      	movs	r3, #1
 80118fc:	e0df      	b.n	8011abe <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80118fe:	4b72      	ldr	r3, [pc, #456]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011902:	23c0      	movs	r3, #192	@ 0xc0
 8011904:	029b      	lsls	r3, r3, #10
 8011906:	4013      	ands	r3, r2
 8011908:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d03b      	beq.n	8011988 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	685a      	ldr	r2, [r3, #4]
 8011914:	23c0      	movs	r3, #192	@ 0xc0
 8011916:	029b      	lsls	r3, r3, #10
 8011918:	4013      	ands	r3, r2
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	429a      	cmp	r2, r3
 801191e:	d033      	beq.n	8011988 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2220      	movs	r2, #32
 8011926:	4013      	ands	r3, r2
 8011928:	d02e      	beq.n	8011988 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801192a:	4b67      	ldr	r3, [pc, #412]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801192c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801192e:	4a68      	ldr	r2, [pc, #416]	@ (8011ad0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8011930:	4013      	ands	r3, r2
 8011932:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8011934:	4b64      	ldr	r3, [pc, #400]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011938:	4b63      	ldr	r3, [pc, #396]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801193a:	2180      	movs	r1, #128	@ 0x80
 801193c:	0309      	lsls	r1, r1, #12
 801193e:	430a      	orrs	r2, r1
 8011940:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011942:	4b61      	ldr	r3, [pc, #388]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011944:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011946:	4b60      	ldr	r3, [pc, #384]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011948:	4962      	ldr	r1, [pc, #392]	@ (8011ad4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801194a:	400a      	ands	r2, r1
 801194c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801194e:	4b5e      	ldr	r3, [pc, #376]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8011954:	68fa      	ldr	r2, [r7, #12]
 8011956:	2380      	movs	r3, #128	@ 0x80
 8011958:	005b      	lsls	r3, r3, #1
 801195a:	4013      	ands	r3, r2
 801195c:	d014      	beq.n	8011988 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801195e:	f7f9 fd77 	bl	800b450 <HAL_GetTick>
 8011962:	0003      	movs	r3, r0
 8011964:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011966:	e009      	b.n	801197c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011968:	f7f9 fd72 	bl	800b450 <HAL_GetTick>
 801196c:	0002      	movs	r2, r0
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	4a59      	ldr	r2, [pc, #356]	@ (8011ad8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8011974:	4293      	cmp	r3, r2
 8011976:	d901      	bls.n	801197c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8011978:	2303      	movs	r3, #3
 801197a:	e0a0      	b.n	8011abe <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801197c:	4b52      	ldr	r3, [pc, #328]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801197e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011980:	2380      	movs	r3, #128	@ 0x80
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	4013      	ands	r3, r2
 8011986:	d0ef      	beq.n	8011968 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2220      	movs	r2, #32
 801198e:	4013      	ands	r3, r2
 8011990:	d01f      	beq.n	80119d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	685a      	ldr	r2, [r3, #4]
 8011996:	23c0      	movs	r3, #192	@ 0xc0
 8011998:	029b      	lsls	r3, r3, #10
 801199a:	401a      	ands	r2, r3
 801199c:	23c0      	movs	r3, #192	@ 0xc0
 801199e:	029b      	lsls	r3, r3, #10
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d10c      	bne.n	80119be <HAL_RCCEx_PeriphCLKConfig+0x182>
 80119a4:	4b48      	ldr	r3, [pc, #288]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a4c      	ldr	r2, [pc, #304]	@ (8011adc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80119aa:	4013      	ands	r3, r2
 80119ac:	0019      	movs	r1, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	685a      	ldr	r2, [r3, #4]
 80119b2:	23c0      	movs	r3, #192	@ 0xc0
 80119b4:	039b      	lsls	r3, r3, #14
 80119b6:	401a      	ands	r2, r3
 80119b8:	4b43      	ldr	r3, [pc, #268]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119ba:	430a      	orrs	r2, r1
 80119bc:	601a      	str	r2, [r3, #0]
 80119be:	4b42      	ldr	r3, [pc, #264]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685a      	ldr	r2, [r3, #4]
 80119c6:	23c0      	movs	r3, #192	@ 0xc0
 80119c8:	029b      	lsls	r3, r3, #10
 80119ca:	401a      	ands	r2, r3
 80119cc:	4b3e      	ldr	r3, [pc, #248]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119ce:	430a      	orrs	r2, r1
 80119d0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80119d2:	2317      	movs	r3, #23
 80119d4:	18fb      	adds	r3, r7, r3
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d105      	bne.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80119dc:	4b3a      	ldr	r3, [pc, #232]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119e0:	4b39      	ldr	r3, [pc, #228]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119e2:	493f      	ldr	r1, [pc, #252]	@ (8011ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80119e4:	400a      	ands	r2, r1
 80119e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	2201      	movs	r2, #1
 80119ee:	4013      	ands	r3, r2
 80119f0:	d009      	beq.n	8011a06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80119f2:	4b35      	ldr	r3, [pc, #212]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80119f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119f6:	2203      	movs	r2, #3
 80119f8:	4393      	bics	r3, r2
 80119fa:	0019      	movs	r1, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	689a      	ldr	r2, [r3, #8]
 8011a00:	4b31      	ldr	r3, [pc, #196]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a02:	430a      	orrs	r2, r1
 8011a04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2202      	movs	r2, #2
 8011a0c:	4013      	ands	r3, r2
 8011a0e:	d009      	beq.n	8011a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011a10:	4b2d      	ldr	r3, [pc, #180]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a14:	220c      	movs	r2, #12
 8011a16:	4393      	bics	r3, r2
 8011a18:	0019      	movs	r1, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	68da      	ldr	r2, [r3, #12]
 8011a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a20:	430a      	orrs	r2, r1
 8011a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2204      	movs	r2, #4
 8011a2a:	4013      	ands	r3, r2
 8011a2c:	d009      	beq.n	8011a42 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011a2e:	4b26      	ldr	r3, [pc, #152]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a32:	4a2c      	ldr	r2, [pc, #176]	@ (8011ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8011a34:	4013      	ands	r3, r2
 8011a36:	0019      	movs	r1, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	691a      	ldr	r2, [r3, #16]
 8011a3c:	4b22      	ldr	r3, [pc, #136]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a3e:	430a      	orrs	r2, r1
 8011a40:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2208      	movs	r2, #8
 8011a48:	4013      	ands	r3, r2
 8011a4a:	d009      	beq.n	8011a60 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a50:	4a25      	ldr	r2, [pc, #148]	@ (8011ae8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8011a52:	4013      	ands	r3, r2
 8011a54:	0019      	movs	r1, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	695a      	ldr	r2, [r3, #20]
 8011a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a5c:	430a      	orrs	r2, r1
 8011a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	2380      	movs	r3, #128	@ 0x80
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	4013      	ands	r3, r2
 8011a6a:	d009      	beq.n	8011a80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011a6c:	4b16      	ldr	r3, [pc, #88]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a70:	4a17      	ldr	r2, [pc, #92]	@ (8011ad0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8011a72:	4013      	ands	r3, r2
 8011a74:	0019      	movs	r1, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	699a      	ldr	r2, [r3, #24]
 8011a7a:	4b13      	ldr	r3, [pc, #76]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a7c:	430a      	orrs	r2, r1
 8011a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2240      	movs	r2, #64	@ 0x40
 8011a86:	4013      	ands	r3, r2
 8011a88:	d009      	beq.n	8011a9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a8e:	4a17      	ldr	r2, [pc, #92]	@ (8011aec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8011a90:	4013      	ands	r3, r2
 8011a92:	0019      	movs	r1, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6a1a      	ldr	r2, [r3, #32]
 8011a98:	4b0b      	ldr	r3, [pc, #44]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011a9a:	430a      	orrs	r2, r1
 8011a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2280      	movs	r2, #128	@ 0x80
 8011aa4:	4013      	ands	r3, r2
 8011aa6:	d009      	beq.n	8011abc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8011aa8:	4b07      	ldr	r3, [pc, #28]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011aac:	4a10      	ldr	r2, [pc, #64]	@ (8011af0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8011aae:	4013      	ands	r3, r2
 8011ab0:	0019      	movs	r1, r3
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	69da      	ldr	r2, [r3, #28]
 8011ab6:	4b04      	ldr	r3, [pc, #16]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8011ab8:	430a      	orrs	r2, r1
 8011aba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	0018      	movs	r0, r3
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	b006      	add	sp, #24
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	46c0      	nop			@ (mov r8, r8)
 8011ac8:	40021000 	.word	0x40021000
 8011acc:	40007000 	.word	0x40007000
 8011ad0:	fffcffff 	.word	0xfffcffff
 8011ad4:	fff7ffff 	.word	0xfff7ffff
 8011ad8:	00001388 	.word	0x00001388
 8011adc:	ffcfffff 	.word	0xffcfffff
 8011ae0:	efffffff 	.word	0xefffffff
 8011ae4:	fffff3ff 	.word	0xfffff3ff
 8011ae8:	ffffcfff 	.word	0xffffcfff
 8011aec:	fbffffff 	.word	0xfbffffff
 8011af0:	fff3ffff 	.word	0xfff3ffff

08011af4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011af4:	b5b0      	push	{r4, r5, r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011afc:	230f      	movs	r3, #15
 8011afe:	18fb      	adds	r3, r7, r3
 8011b00:	2201      	movs	r2, #1
 8011b02:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d101      	bne.n	8011b0e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e088      	b.n	8011c20 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2221      	movs	r2, #33	@ 0x21
 8011b12:	5c9b      	ldrb	r3, [r3, r2]
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d107      	bne.n	8011b2a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2220      	movs	r2, #32
 8011b1e:	2100      	movs	r1, #0
 8011b20:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	0018      	movs	r0, r3
 8011b26:	f7f5 fdc3 	bl	80076b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2221      	movs	r2, #33	@ 0x21
 8011b2e:	2102      	movs	r1, #2
 8011b30:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	2210      	movs	r2, #16
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	2b10      	cmp	r3, #16
 8011b3e:	d05f      	beq.n	8011c00 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	22ca      	movs	r2, #202	@ 0xca
 8011b46:	625a      	str	r2, [r3, #36]	@ 0x24
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2253      	movs	r2, #83	@ 0x53
 8011b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8011b50:	250f      	movs	r5, #15
 8011b52:	197c      	adds	r4, r7, r5
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	0018      	movs	r0, r3
 8011b58:	f000 f93a 	bl	8011dd0 <RTC_EnterInitMode>
 8011b5c:	0003      	movs	r3, r0
 8011b5e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8011b60:	0028      	movs	r0, r5
 8011b62:	183b      	adds	r3, r7, r0
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d12c      	bne.n	8011bc4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	689a      	ldr	r2, [r3, #8]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	492c      	ldr	r1, [pc, #176]	@ (8011c28 <HAL_RTC_Init+0x134>)
 8011b76:	400a      	ands	r2, r1
 8011b78:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	6899      	ldr	r1, [r3, #8]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	685a      	ldr	r2, [r3, #4]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	691b      	ldr	r3, [r3, #16]
 8011b88:	431a      	orrs	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	699b      	ldr	r3, [r3, #24]
 8011b8e:	431a      	orrs	r2, r3
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	430a      	orrs	r2, r1
 8011b96:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	68d2      	ldr	r2, [r2, #12]
 8011ba0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6919      	ldr	r1, [r3, #16]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	689b      	ldr	r3, [r3, #8]
 8011bac:	041a      	lsls	r2, r3, #16
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	430a      	orrs	r2, r1
 8011bb4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8011bb6:	183c      	adds	r4, r7, r0
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	0018      	movs	r0, r3
 8011bbc:	f000 f94c 	bl	8011e58 <RTC_ExitInitMode>
 8011bc0:	0003      	movs	r3, r0
 8011bc2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8011bc4:	230f      	movs	r3, #15
 8011bc6:	18fb      	adds	r3, r7, r3
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d113      	bne.n	8011bf6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2103      	movs	r1, #3
 8011bda:	438a      	bics	r2, r1
 8011bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	69da      	ldr	r2, [r3, #28]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	695b      	ldr	r3, [r3, #20]
 8011bec:	431a      	orrs	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	430a      	orrs	r2, r1
 8011bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	22ff      	movs	r2, #255	@ 0xff
 8011bfc:	625a      	str	r2, [r3, #36]	@ 0x24
 8011bfe:	e003      	b.n	8011c08 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8011c00:	230f      	movs	r3, #15
 8011c02:	18fb      	adds	r3, r7, r3
 8011c04:	2200      	movs	r2, #0
 8011c06:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8011c08:	230f      	movs	r3, #15
 8011c0a:	18fb      	adds	r3, r7, r3
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d103      	bne.n	8011c1a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2221      	movs	r2, #33	@ 0x21
 8011c16:	2101      	movs	r1, #1
 8011c18:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011c1a:	230f      	movs	r3, #15
 8011c1c:	18fb      	adds	r3, r7, r3
 8011c1e:	781b      	ldrb	r3, [r3, #0]
}
 8011c20:	0018      	movs	r0, r3
 8011c22:	46bd      	mov	sp, r7
 8011c24:	b004      	add	sp, #16
 8011c26:	bdb0      	pop	{r4, r5, r7, pc}
 8011c28:	ff8fffbf 	.word	0xff8fffbf

08011c2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011c2c:	b5b0      	push	{r4, r5, r7, lr}
 8011c2e:	b086      	sub	sp, #24
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2220      	movs	r2, #32
 8011c40:	5c9b      	ldrb	r3, [r3, r2]
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d101      	bne.n	8011c4a <HAL_RTC_SetTime+0x1e>
 8011c46:	2302      	movs	r3, #2
 8011c48:	e092      	b.n	8011d70 <HAL_RTC_SetTime+0x144>
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2220      	movs	r2, #32
 8011c4e:	2101      	movs	r1, #1
 8011c50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2221      	movs	r2, #33	@ 0x21
 8011c56:	2102      	movs	r1, #2
 8011c58:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d125      	bne.n	8011cac <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	689b      	ldr	r3, [r3, #8]
 8011c66:	2240      	movs	r2, #64	@ 0x40
 8011c68:	4013      	ands	r3, r2
 8011c6a:	d102      	bne.n	8011c72 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	0018      	movs	r0, r3
 8011c78:	f000 f918 	bl	8011eac <RTC_ByteToBcd2>
 8011c7c:	0003      	movs	r3, r0
 8011c7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	785b      	ldrb	r3, [r3, #1]
 8011c84:	0018      	movs	r0, r3
 8011c86:	f000 f911 	bl	8011eac <RTC_ByteToBcd2>
 8011c8a:	0003      	movs	r3, r0
 8011c8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011c8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	789b      	ldrb	r3, [r3, #2]
 8011c94:	0018      	movs	r0, r3
 8011c96:	f000 f909 	bl	8011eac <RTC_ByteToBcd2>
 8011c9a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c9c:	0022      	movs	r2, r4
 8011c9e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	78db      	ldrb	r3, [r3, #3]
 8011ca4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	617b      	str	r3, [r7, #20]
 8011caa:	e017      	b.n	8011cdc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	689b      	ldr	r3, [r3, #8]
 8011cb2:	2240      	movs	r2, #64	@ 0x40
 8011cb4:	4013      	ands	r3, r2
 8011cb6:	d102      	bne.n	8011cbe <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	785b      	ldrb	r3, [r3, #1]
 8011cc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8011cca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8011ccc:	68ba      	ldr	r2, [r7, #8]
 8011cce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8011cd0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	78db      	ldrb	r3, [r3, #3]
 8011cd6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	22ca      	movs	r2, #202	@ 0xca
 8011ce2:	625a      	str	r2, [r3, #36]	@ 0x24
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2253      	movs	r2, #83	@ 0x53
 8011cea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011cec:	2513      	movs	r5, #19
 8011cee:	197c      	adds	r4, r7, r5
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	0018      	movs	r0, r3
 8011cf4:	f000 f86c 	bl	8011dd0 <RTC_EnterInitMode>
 8011cf8:	0003      	movs	r3, r0
 8011cfa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8011cfc:	0028      	movs	r0, r5
 8011cfe:	183b      	adds	r3, r7, r0
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d120      	bne.n	8011d48 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	697a      	ldr	r2, [r7, #20]
 8011d0c:	491a      	ldr	r1, [pc, #104]	@ (8011d78 <HAL_RTC_SetTime+0x14c>)
 8011d0e:	400a      	ands	r2, r1
 8011d10:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	689a      	ldr	r2, [r3, #8]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4917      	ldr	r1, [pc, #92]	@ (8011d7c <HAL_RTC_SetTime+0x150>)
 8011d1e:	400a      	ands	r2, r1
 8011d20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6899      	ldr	r1, [r3, #8]
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	68da      	ldr	r2, [r3, #12]
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	691b      	ldr	r3, [r3, #16]
 8011d30:	431a      	orrs	r2, r3
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	430a      	orrs	r2, r1
 8011d38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011d3a:	183c      	adds	r4, r7, r0
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	0018      	movs	r0, r3
 8011d40:	f000 f88a 	bl	8011e58 <RTC_ExitInitMode>
 8011d44:	0003      	movs	r3, r0
 8011d46:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8011d48:	2313      	movs	r3, #19
 8011d4a:	18fb      	adds	r3, r7, r3
 8011d4c:	781b      	ldrb	r3, [r3, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d103      	bne.n	8011d5a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2221      	movs	r2, #33	@ 0x21
 8011d56:	2101      	movs	r1, #1
 8011d58:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	22ff      	movs	r2, #255	@ 0xff
 8011d60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	2220      	movs	r2, #32
 8011d66:	2100      	movs	r1, #0
 8011d68:	5499      	strb	r1, [r3, r2]

  return status;
 8011d6a:	2313      	movs	r3, #19
 8011d6c:	18fb      	adds	r3, r7, r3
 8011d6e:	781b      	ldrb	r3, [r3, #0]
}
 8011d70:	0018      	movs	r0, r3
 8011d72:	46bd      	mov	sp, r7
 8011d74:	b006      	add	sp, #24
 8011d76:	bdb0      	pop	{r4, r5, r7, pc}
 8011d78:	007f7f7f 	.word	0x007f7f7f
 8011d7c:	fffbffff 	.word	0xfffbffff

08011d80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	4a0e      	ldr	r2, [pc, #56]	@ (8011dcc <HAL_RTC_WaitForSynchro+0x4c>)
 8011d92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011d94:	f7f9 fb5c 	bl	800b450 <HAL_GetTick>
 8011d98:	0003      	movs	r3, r0
 8011d9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011d9c:	e00a      	b.n	8011db4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011d9e:	f7f9 fb57 	bl	800b450 <HAL_GetTick>
 8011da2:	0002      	movs	r2, r0
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	1ad2      	subs	r2, r2, r3
 8011da8:	23fa      	movs	r3, #250	@ 0xfa
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d901      	bls.n	8011db4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8011db0:	2303      	movs	r3, #3
 8011db2:	e006      	b.n	8011dc2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	2220      	movs	r2, #32
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	d0ee      	beq.n	8011d9e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	0018      	movs	r0, r3
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	b004      	add	sp, #16
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	46c0      	nop			@ (mov r8, r8)
 8011dcc:	0001ff5f 	.word	0x0001ff5f

08011dd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8011ddc:	230f      	movs	r3, #15
 8011dde:	18fb      	adds	r3, r7, r3
 8011de0:	2200      	movs	r2, #0
 8011de2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	2240      	movs	r2, #64	@ 0x40
 8011dec:	4013      	ands	r3, r2
 8011dee:	d12c      	bne.n	8011e4a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68da      	ldr	r2, [r3, #12]
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2180      	movs	r1, #128	@ 0x80
 8011dfc:	430a      	orrs	r2, r1
 8011dfe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011e00:	f7f9 fb26 	bl	800b450 <HAL_GetTick>
 8011e04:	0003      	movs	r3, r0
 8011e06:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8011e08:	e014      	b.n	8011e34 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011e0a:	f7f9 fb21 	bl	800b450 <HAL_GetTick>
 8011e0e:	0002      	movs	r2, r0
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	1ad2      	subs	r2, r2, r3
 8011e14:	200f      	movs	r0, #15
 8011e16:	183b      	adds	r3, r7, r0
 8011e18:	1839      	adds	r1, r7, r0
 8011e1a:	7809      	ldrb	r1, [r1, #0]
 8011e1c:	7019      	strb	r1, [r3, #0]
 8011e1e:	23fa      	movs	r3, #250	@ 0xfa
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d906      	bls.n	8011e34 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2221      	movs	r2, #33	@ 0x21
 8011e2a:	2104      	movs	r1, #4
 8011e2c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8011e2e:	183b      	adds	r3, r7, r0
 8011e30:	2201      	movs	r2, #1
 8011e32:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	2240      	movs	r2, #64	@ 0x40
 8011e3c:	4013      	ands	r3, r2
 8011e3e:	d104      	bne.n	8011e4a <RTC_EnterInitMode+0x7a>
 8011e40:	230f      	movs	r3, #15
 8011e42:	18fb      	adds	r3, r7, r3
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	d1df      	bne.n	8011e0a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8011e4a:	230f      	movs	r3, #15
 8011e4c:	18fb      	adds	r3, r7, r3
 8011e4e:	781b      	ldrb	r3, [r3, #0]
}
 8011e50:	0018      	movs	r0, r3
 8011e52:	46bd      	mov	sp, r7
 8011e54:	b004      	add	sp, #16
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011e58:	b590      	push	{r4, r7, lr}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e60:	240f      	movs	r4, #15
 8011e62:	193b      	adds	r3, r7, r4
 8011e64:	2200      	movs	r2, #0
 8011e66:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	68da      	ldr	r2, [r3, #12]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2180      	movs	r1, #128	@ 0x80
 8011e74:	438a      	bics	r2, r1
 8011e76:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	2220      	movs	r2, #32
 8011e80:	4013      	ands	r3, r2
 8011e82:	d10c      	bne.n	8011e9e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	0018      	movs	r0, r3
 8011e88:	f7ff ff7a 	bl	8011d80 <HAL_RTC_WaitForSynchro>
 8011e8c:	1e03      	subs	r3, r0, #0
 8011e8e:	d006      	beq.n	8011e9e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2221      	movs	r2, #33	@ 0x21
 8011e94:	2104      	movs	r1, #4
 8011e96:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8011e98:	193b      	adds	r3, r7, r4
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8011e9e:	230f      	movs	r3, #15
 8011ea0:	18fb      	adds	r3, r7, r3
 8011ea2:	781b      	ldrb	r3, [r3, #0]
}
 8011ea4:	0018      	movs	r0, r3
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	b005      	add	sp, #20
 8011eaa:	bd90      	pop	{r4, r7, pc}

08011eac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	0002      	movs	r2, r0
 8011eb4:	1dfb      	adds	r3, r7, #7
 8011eb6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8011ebc:	e007      	b.n	8011ece <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8011ec4:	1dfb      	adds	r3, r7, #7
 8011ec6:	1dfa      	adds	r2, r7, #7
 8011ec8:	7812      	ldrb	r2, [r2, #0]
 8011eca:	3a0a      	subs	r2, #10
 8011ecc:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8011ece:	1dfb      	adds	r3, r7, #7
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	2b09      	cmp	r3, #9
 8011ed4:	d8f3      	bhi.n	8011ebe <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	011b      	lsls	r3, r3, #4
 8011edc:	b2da      	uxtb	r2, r3
 8011ede:	1dfb      	adds	r3, r7, #7
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	b2db      	uxtb	r3, r3
}
 8011ee6:	0018      	movs	r0, r3
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	b004      	add	sp, #16
 8011eec:	bd80      	pop	{r7, pc}
	...

08011ef0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b086      	sub	sp, #24
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8011efc:	2300      	movs	r3, #0
 8011efe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2220      	movs	r2, #32
 8011f04:	5c9b      	ldrb	r3, [r3, r2]
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d101      	bne.n	8011f0e <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8011f0a:	2302      	movs	r3, #2
 8011f0c:	e096      	b.n	801203c <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	2220      	movs	r2, #32
 8011f12:	2101      	movs	r1, #1
 8011f14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2221      	movs	r2, #33	@ 0x21
 8011f1a:	2102      	movs	r1, #2
 8011f1c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	22ca      	movs	r2, #202	@ 0xca
 8011f24:	625a      	str	r2, [r3, #36]	@ 0x24
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	2253      	movs	r2, #83	@ 0x53
 8011f2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	689a      	ldr	r2, [r3, #8]
 8011f34:	2380      	movs	r3, #128	@ 0x80
 8011f36:	00db      	lsls	r3, r3, #3
 8011f38:	4013      	ands	r3, r2
 8011f3a:	d021      	beq.n	8011f80 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8011f3c:	f7f9 fa88 	bl	800b450 <HAL_GetTick>
 8011f40:	0003      	movs	r3, r0
 8011f42:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011f44:	e016      	b.n	8011f74 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011f46:	f7f9 fa83 	bl	800b450 <HAL_GetTick>
 8011f4a:	0002      	movs	r2, r0
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	1ad2      	subs	r2, r2, r3
 8011f50:	23fa      	movs	r3, #250	@ 0xfa
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d90d      	bls.n	8011f74 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	22ff      	movs	r2, #255	@ 0xff
 8011f5e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2221      	movs	r2, #33	@ 0x21
 8011f64:	2103      	movs	r1, #3
 8011f66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2220      	movs	r2, #32
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011f70:	2303      	movs	r3, #3
 8011f72:	e063      	b.n	801203c <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	2204      	movs	r2, #4
 8011f7c:	4013      	ands	r3, r2
 8011f7e:	d1e2      	bne.n	8011f46 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	689a      	ldr	r2, [r3, #8]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	492e      	ldr	r1, [pc, #184]	@ (8012044 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8011f8c:	400a      	ands	r2, r1
 8011f8e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	22ff      	movs	r2, #255	@ 0xff
 8011f98:	401a      	ands	r2, r3
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	492a      	ldr	r1, [pc, #168]	@ (8012048 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8011fa0:	430a      	orrs	r2, r1
 8011fa2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011fa4:	f7f9 fa54 	bl	800b450 <HAL_GetTick>
 8011fa8:	0003      	movs	r3, r0
 8011faa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8011fac:	e016      	b.n	8011fdc <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011fae:	f7f9 fa4f 	bl	800b450 <HAL_GetTick>
 8011fb2:	0002      	movs	r2, r0
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	1ad2      	subs	r2, r2, r3
 8011fb8:	23fa      	movs	r3, #250	@ 0xfa
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d90d      	bls.n	8011fdc <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	22ff      	movs	r2, #255	@ 0xff
 8011fc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	2221      	movs	r2, #33	@ 0x21
 8011fcc:	2103      	movs	r1, #3
 8011fce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2220      	movs	r2, #32
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8011fd8:	2303      	movs	r3, #3
 8011fda:	e02f      	b.n	801203c <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	2204      	movs	r2, #4
 8011fe4:	4013      	ands	r3, r2
 8011fe6:	d0e2      	beq.n	8011fae <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	689a      	ldr	r2, [r3, #8]
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2107      	movs	r1, #7
 8011ff4:	438a      	bics	r2, r1
 8011ff6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	6899      	ldr	r1, [r3, #8]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	430a      	orrs	r2, r1
 8012006:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	68ba      	ldr	r2, [r7, #8]
 801200e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	689a      	ldr	r2, [r3, #8]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2180      	movs	r1, #128	@ 0x80
 801201c:	00c9      	lsls	r1, r1, #3
 801201e:	430a      	orrs	r2, r1
 8012020:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	22ff      	movs	r2, #255	@ 0xff
 8012028:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2221      	movs	r2, #33	@ 0x21
 801202e:	2101      	movs	r1, #1
 8012030:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2220      	movs	r2, #32
 8012036:	2100      	movs	r1, #0
 8012038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	0018      	movs	r0, r3
 801203e:	46bd      	mov	sp, r7
 8012040:	b006      	add	sp, #24
 8012042:	bd80      	pop	{r7, pc}
 8012044:	fffffbff 	.word	0xfffffbff
 8012048:	fffffb7f 	.word	0xfffffb7f

0801204c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d101      	bne.n	801205e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801205a:	2301      	movs	r3, #1
 801205c:	e032      	b.n	80120c4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2239      	movs	r2, #57	@ 0x39
 8012062:	5c9b      	ldrb	r3, [r3, r2]
 8012064:	b2db      	uxtb	r3, r3
 8012066:	2b00      	cmp	r3, #0
 8012068:	d107      	bne.n	801207a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2238      	movs	r2, #56	@ 0x38
 801206e:	2100      	movs	r1, #0
 8012070:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	0018      	movs	r0, r3
 8012076:	f7f8 fba9 	bl	800a7cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2239      	movs	r2, #57	@ 0x39
 801207e:	2102      	movs	r1, #2
 8012080:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	3304      	adds	r3, #4
 801208a:	0019      	movs	r1, r3
 801208c:	0010      	movs	r0, r2
 801208e:	f000 fa1d 	bl	80124cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	223e      	movs	r2, #62	@ 0x3e
 8012096:	2101      	movs	r1, #1
 8012098:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	223a      	movs	r2, #58	@ 0x3a
 801209e:	2101      	movs	r1, #1
 80120a0:	5499      	strb	r1, [r3, r2]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	223b      	movs	r2, #59	@ 0x3b
 80120a6:	2101      	movs	r1, #1
 80120a8:	5499      	strb	r1, [r3, r2]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	223c      	movs	r2, #60	@ 0x3c
 80120ae:	2101      	movs	r1, #1
 80120b0:	5499      	strb	r1, [r3, r2]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	223d      	movs	r2, #61	@ 0x3d
 80120b6:	2101      	movs	r1, #1
 80120b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2239      	movs	r2, #57	@ 0x39
 80120be:	2101      	movs	r1, #1
 80120c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80120c2:	2300      	movs	r3, #0
}
 80120c4:	0018      	movs	r0, r3
 80120c6:	46bd      	mov	sp, r7
 80120c8:	b002      	add	sp, #8
 80120ca:	bd80      	pop	{r7, pc}

080120cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2239      	movs	r2, #57	@ 0x39
 80120d8:	5c9b      	ldrb	r3, [r3, r2]
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d001      	beq.n	80120e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80120e0:	2301      	movs	r3, #1
 80120e2:	e033      	b.n	801214c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2239      	movs	r2, #57	@ 0x39
 80120e8:	2102      	movs	r1, #2
 80120ea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	2380      	movs	r3, #128	@ 0x80
 80120f2:	05db      	lsls	r3, r3, #23
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d00e      	beq.n	8012116 <HAL_TIM_Base_Start+0x4a>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a15      	ldr	r2, [pc, #84]	@ (8012154 <HAL_TIM_Base_Start+0x88>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d009      	beq.n	8012116 <HAL_TIM_Base_Start+0x4a>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a14      	ldr	r2, [pc, #80]	@ (8012158 <HAL_TIM_Base_Start+0x8c>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d004      	beq.n	8012116 <HAL_TIM_Base_Start+0x4a>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a12      	ldr	r2, [pc, #72]	@ (801215c <HAL_TIM_Base_Start+0x90>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d111      	bne.n	801213a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	2207      	movs	r2, #7
 801211e:	4013      	ands	r3, r2
 8012120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2b06      	cmp	r3, #6
 8012126:	d010      	beq.n	801214a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	2101      	movs	r1, #1
 8012134:	430a      	orrs	r2, r1
 8012136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012138:	e007      	b.n	801214a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2101      	movs	r1, #1
 8012146:	430a      	orrs	r2, r1
 8012148:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801214a:	2300      	movs	r3, #0
}
 801214c:	0018      	movs	r0, r3
 801214e:	46bd      	mov	sp, r7
 8012150:	b004      	add	sp, #16
 8012152:	bd80      	pop	{r7, pc}
 8012154:	40000400 	.word	0x40000400
 8012158:	40010800 	.word	0x40010800
 801215c:	40011400 	.word	0x40011400

08012160 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	6a1b      	ldr	r3, [r3, #32]
 801216e:	4a0a      	ldr	r2, [pc, #40]	@ (8012198 <HAL_TIM_Base_Stop+0x38>)
 8012170:	4013      	ands	r3, r2
 8012172:	d107      	bne.n	8012184 <HAL_TIM_Base_Stop+0x24>
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2101      	movs	r1, #1
 8012180:	438a      	bics	r2, r1
 8012182:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2239      	movs	r2, #57	@ 0x39
 8012188:	2101      	movs	r1, #1
 801218a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801218c:	2300      	movs	r3, #0
}
 801218e:	0018      	movs	r0, r3
 8012190:	46bd      	mov	sp, r7
 8012192:	b002      	add	sp, #8
 8012194:	bd80      	pop	{r7, pc}
 8012196:	46c0      	nop			@ (mov r8, r8)
 8012198:	00001111 	.word	0x00001111

0801219c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d101      	bne.n	80121ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80121aa:	2301      	movs	r3, #1
 80121ac:	e032      	b.n	8012214 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2239      	movs	r2, #57	@ 0x39
 80121b2:	5c9b      	ldrb	r3, [r3, r2]
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d107      	bne.n	80121ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2238      	movs	r2, #56	@ 0x38
 80121be:	2100      	movs	r1, #0
 80121c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	0018      	movs	r0, r3
 80121c6:	f7f8 fadd 	bl	800a784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2239      	movs	r2, #57	@ 0x39
 80121ce:	2102      	movs	r1, #2
 80121d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	3304      	adds	r3, #4
 80121da:	0019      	movs	r1, r3
 80121dc:	0010      	movs	r0, r2
 80121de:	f000 f975 	bl	80124cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	223e      	movs	r2, #62	@ 0x3e
 80121e6:	2101      	movs	r1, #1
 80121e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	223a      	movs	r2, #58	@ 0x3a
 80121ee:	2101      	movs	r1, #1
 80121f0:	5499      	strb	r1, [r3, r2]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	223b      	movs	r2, #59	@ 0x3b
 80121f6:	2101      	movs	r1, #1
 80121f8:	5499      	strb	r1, [r3, r2]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	223c      	movs	r2, #60	@ 0x3c
 80121fe:	2101      	movs	r1, #1
 8012200:	5499      	strb	r1, [r3, r2]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	223d      	movs	r2, #61	@ 0x3d
 8012206:	2101      	movs	r1, #1
 8012208:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2239      	movs	r2, #57	@ 0x39
 801220e:	2101      	movs	r1, #1
 8012210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	0018      	movs	r0, r3
 8012216:	46bd      	mov	sp, r7
 8012218:	b002      	add	sp, #8
 801221a:	bd80      	pop	{r7, pc}

0801221c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d108      	bne.n	801223e <HAL_TIM_PWM_Start+0x22>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	223a      	movs	r2, #58	@ 0x3a
 8012230:	5c9b      	ldrb	r3, [r3, r2]
 8012232:	b2db      	uxtb	r3, r3
 8012234:	3b01      	subs	r3, #1
 8012236:	1e5a      	subs	r2, r3, #1
 8012238:	4193      	sbcs	r3, r2
 801223a:	b2db      	uxtb	r3, r3
 801223c:	e01f      	b.n	801227e <HAL_TIM_PWM_Start+0x62>
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	2b04      	cmp	r3, #4
 8012242:	d108      	bne.n	8012256 <HAL_TIM_PWM_Start+0x3a>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	223b      	movs	r2, #59	@ 0x3b
 8012248:	5c9b      	ldrb	r3, [r3, r2]
 801224a:	b2db      	uxtb	r3, r3
 801224c:	3b01      	subs	r3, #1
 801224e:	1e5a      	subs	r2, r3, #1
 8012250:	4193      	sbcs	r3, r2
 8012252:	b2db      	uxtb	r3, r3
 8012254:	e013      	b.n	801227e <HAL_TIM_PWM_Start+0x62>
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	2b08      	cmp	r3, #8
 801225a:	d108      	bne.n	801226e <HAL_TIM_PWM_Start+0x52>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	223c      	movs	r2, #60	@ 0x3c
 8012260:	5c9b      	ldrb	r3, [r3, r2]
 8012262:	b2db      	uxtb	r3, r3
 8012264:	3b01      	subs	r3, #1
 8012266:	1e5a      	subs	r2, r3, #1
 8012268:	4193      	sbcs	r3, r2
 801226a:	b2db      	uxtb	r3, r3
 801226c:	e007      	b.n	801227e <HAL_TIM_PWM_Start+0x62>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	223d      	movs	r2, #61	@ 0x3d
 8012272:	5c9b      	ldrb	r3, [r3, r2]
 8012274:	b2db      	uxtb	r3, r3
 8012276:	3b01      	subs	r3, #1
 8012278:	1e5a      	subs	r2, r3, #1
 801227a:	4193      	sbcs	r3, r2
 801227c:	b2db      	uxtb	r3, r3
 801227e:	2b00      	cmp	r3, #0
 8012280:	d001      	beq.n	8012286 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8012282:	2301      	movs	r3, #1
 8012284:	e052      	b.n	801232c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d104      	bne.n	8012296 <HAL_TIM_PWM_Start+0x7a>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	223a      	movs	r2, #58	@ 0x3a
 8012290:	2102      	movs	r1, #2
 8012292:	5499      	strb	r1, [r3, r2]
 8012294:	e013      	b.n	80122be <HAL_TIM_PWM_Start+0xa2>
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	2b04      	cmp	r3, #4
 801229a:	d104      	bne.n	80122a6 <HAL_TIM_PWM_Start+0x8a>
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	223b      	movs	r2, #59	@ 0x3b
 80122a0:	2102      	movs	r1, #2
 80122a2:	5499      	strb	r1, [r3, r2]
 80122a4:	e00b      	b.n	80122be <HAL_TIM_PWM_Start+0xa2>
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	2b08      	cmp	r3, #8
 80122aa:	d104      	bne.n	80122b6 <HAL_TIM_PWM_Start+0x9a>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	223c      	movs	r2, #60	@ 0x3c
 80122b0:	2102      	movs	r1, #2
 80122b2:	5499      	strb	r1, [r3, r2]
 80122b4:	e003      	b.n	80122be <HAL_TIM_PWM_Start+0xa2>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	223d      	movs	r2, #61	@ 0x3d
 80122ba:	2102      	movs	r1, #2
 80122bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	6839      	ldr	r1, [r7, #0]
 80122c4:	2201      	movs	r2, #1
 80122c6:	0018      	movs	r0, r3
 80122c8:	f000 fa62 	bl	8012790 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	2380      	movs	r3, #128	@ 0x80
 80122d2:	05db      	lsls	r3, r3, #23
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d00e      	beq.n	80122f6 <HAL_TIM_PWM_Start+0xda>
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a15      	ldr	r2, [pc, #84]	@ (8012334 <HAL_TIM_PWM_Start+0x118>)
 80122de:	4293      	cmp	r3, r2
 80122e0:	d009      	beq.n	80122f6 <HAL_TIM_PWM_Start+0xda>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4a14      	ldr	r2, [pc, #80]	@ (8012338 <HAL_TIM_PWM_Start+0x11c>)
 80122e8:	4293      	cmp	r3, r2
 80122ea:	d004      	beq.n	80122f6 <HAL_TIM_PWM_Start+0xda>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4a12      	ldr	r2, [pc, #72]	@ (801233c <HAL_TIM_PWM_Start+0x120>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d111      	bne.n	801231a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	2207      	movs	r2, #7
 80122fe:	4013      	ands	r3, r2
 8012300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2b06      	cmp	r3, #6
 8012306:	d010      	beq.n	801232a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	2101      	movs	r1, #1
 8012314:	430a      	orrs	r2, r1
 8012316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012318:	e007      	b.n	801232a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2101      	movs	r1, #1
 8012326:	430a      	orrs	r2, r1
 8012328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801232a:	2300      	movs	r3, #0
}
 801232c:	0018      	movs	r0, r3
 801232e:	46bd      	mov	sp, r7
 8012330:	b004      	add	sp, #16
 8012332:	bd80      	pop	{r7, pc}
 8012334:	40000400 	.word	0x40000400
 8012338:	40010800 	.word	0x40010800
 801233c:	40011400 	.word	0x40011400

08012340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801234c:	2317      	movs	r3, #23
 801234e:	18fb      	adds	r3, r7, r3
 8012350:	2200      	movs	r2, #0
 8012352:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2238      	movs	r2, #56	@ 0x38
 8012358:	5c9b      	ldrb	r3, [r3, r2]
 801235a:	2b01      	cmp	r3, #1
 801235c:	d101      	bne.n	8012362 <HAL_TIM_PWM_ConfigChannel+0x22>
 801235e:	2302      	movs	r3, #2
 8012360:	e0ad      	b.n	80124be <HAL_TIM_PWM_ConfigChannel+0x17e>
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2238      	movs	r2, #56	@ 0x38
 8012366:	2101      	movs	r1, #1
 8012368:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b0c      	cmp	r3, #12
 801236e:	d100      	bne.n	8012372 <HAL_TIM_PWM_ConfigChannel+0x32>
 8012370:	e076      	b.n	8012460 <HAL_TIM_PWM_ConfigChannel+0x120>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2b0c      	cmp	r3, #12
 8012376:	d900      	bls.n	801237a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8012378:	e095      	b.n	80124a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2b08      	cmp	r3, #8
 801237e:	d04e      	beq.n	801241e <HAL_TIM_PWM_ConfigChannel+0xde>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2b08      	cmp	r3, #8
 8012384:	d900      	bls.n	8012388 <HAL_TIM_PWM_ConfigChannel+0x48>
 8012386:	e08e      	b.n	80124a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d003      	beq.n	8012396 <HAL_TIM_PWM_ConfigChannel+0x56>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2b04      	cmp	r3, #4
 8012392:	d021      	beq.n	80123d8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8012394:	e087      	b.n	80124a6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	68ba      	ldr	r2, [r7, #8]
 801239c:	0011      	movs	r1, r2
 801239e:	0018      	movs	r0, r3
 80123a0:	f000 f8f2 	bl	8012588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	699a      	ldr	r2, [r3, #24]
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	2108      	movs	r1, #8
 80123b0:	430a      	orrs	r2, r1
 80123b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	699a      	ldr	r2, [r3, #24]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2104      	movs	r1, #4
 80123c0:	438a      	bics	r2, r1
 80123c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	6999      	ldr	r1, [r3, #24]
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	68da      	ldr	r2, [r3, #12]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	430a      	orrs	r2, r1
 80123d4:	619a      	str	r2, [r3, #24]
      break;
 80123d6:	e06b      	b.n	80124b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	0011      	movs	r1, r2
 80123e0:	0018      	movs	r0, r3
 80123e2:	f000 f90d 	bl	8012600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	699a      	ldr	r2, [r3, #24]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2180      	movs	r1, #128	@ 0x80
 80123f2:	0109      	lsls	r1, r1, #4
 80123f4:	430a      	orrs	r2, r1
 80123f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	699a      	ldr	r2, [r3, #24]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4931      	ldr	r1, [pc, #196]	@ (80124c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8012404:	400a      	ands	r2, r1
 8012406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	6999      	ldr	r1, [r3, #24]
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	021a      	lsls	r2, r3, #8
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	430a      	orrs	r2, r1
 801241a:	619a      	str	r2, [r3, #24]
      break;
 801241c:	e048      	b.n	80124b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	68ba      	ldr	r2, [r7, #8]
 8012424:	0011      	movs	r1, r2
 8012426:	0018      	movs	r0, r3
 8012428:	f000 f92c 	bl	8012684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	69da      	ldr	r2, [r3, #28]
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2108      	movs	r1, #8
 8012438:	430a      	orrs	r2, r1
 801243a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	69da      	ldr	r2, [r3, #28]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2104      	movs	r1, #4
 8012448:	438a      	bics	r2, r1
 801244a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	69d9      	ldr	r1, [r3, #28]
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	68da      	ldr	r2, [r3, #12]
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	430a      	orrs	r2, r1
 801245c:	61da      	str	r2, [r3, #28]
      break;
 801245e:	e027      	b.n	80124b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	68ba      	ldr	r2, [r7, #8]
 8012466:	0011      	movs	r1, r2
 8012468:	0018      	movs	r0, r3
 801246a:	f000 f94b 	bl	8012704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	69da      	ldr	r2, [r3, #28]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2180      	movs	r1, #128	@ 0x80
 801247a:	0109      	lsls	r1, r1, #4
 801247c:	430a      	orrs	r2, r1
 801247e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	69da      	ldr	r2, [r3, #28]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	490f      	ldr	r1, [pc, #60]	@ (80124c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801248c:	400a      	ands	r2, r1
 801248e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	69d9      	ldr	r1, [r3, #28]
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	021a      	lsls	r2, r3, #8
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	430a      	orrs	r2, r1
 80124a2:	61da      	str	r2, [r3, #28]
      break;
 80124a4:	e004      	b.n	80124b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80124a6:	2317      	movs	r3, #23
 80124a8:	18fb      	adds	r3, r7, r3
 80124aa:	2201      	movs	r2, #1
 80124ac:	701a      	strb	r2, [r3, #0]
      break;
 80124ae:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2238      	movs	r2, #56	@ 0x38
 80124b4:	2100      	movs	r1, #0
 80124b6:	5499      	strb	r1, [r3, r2]

  return status;
 80124b8:	2317      	movs	r3, #23
 80124ba:	18fb      	adds	r3, r7, r3
 80124bc:	781b      	ldrb	r3, [r3, #0]
}
 80124be:	0018      	movs	r0, r3
 80124c0:	46bd      	mov	sp, r7
 80124c2:	b006      	add	sp, #24
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	46c0      	nop			@ (mov r8, r8)
 80124c8:	fffffbff 	.word	0xfffffbff

080124cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	2380      	movs	r3, #128	@ 0x80
 80124e0:	05db      	lsls	r3, r3, #23
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d00b      	beq.n	80124fe <TIM_Base_SetConfig+0x32>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	4a23      	ldr	r2, [pc, #140]	@ (8012578 <TIM_Base_SetConfig+0xac>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d007      	beq.n	80124fe <TIM_Base_SetConfig+0x32>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4a22      	ldr	r2, [pc, #136]	@ (801257c <TIM_Base_SetConfig+0xb0>)
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d003      	beq.n	80124fe <TIM_Base_SetConfig+0x32>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4a21      	ldr	r2, [pc, #132]	@ (8012580 <TIM_Base_SetConfig+0xb4>)
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d108      	bne.n	8012510 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2270      	movs	r2, #112	@ 0x70
 8012502:	4393      	bics	r3, r2
 8012504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	4313      	orrs	r3, r2
 801250e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	2380      	movs	r3, #128	@ 0x80
 8012514:	05db      	lsls	r3, r3, #23
 8012516:	429a      	cmp	r2, r3
 8012518:	d00b      	beq.n	8012532 <TIM_Base_SetConfig+0x66>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4a16      	ldr	r2, [pc, #88]	@ (8012578 <TIM_Base_SetConfig+0xac>)
 801251e:	4293      	cmp	r3, r2
 8012520:	d007      	beq.n	8012532 <TIM_Base_SetConfig+0x66>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4a15      	ldr	r2, [pc, #84]	@ (801257c <TIM_Base_SetConfig+0xb0>)
 8012526:	4293      	cmp	r3, r2
 8012528:	d003      	beq.n	8012532 <TIM_Base_SetConfig+0x66>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	4a14      	ldr	r2, [pc, #80]	@ (8012580 <TIM_Base_SetConfig+0xb4>)
 801252e:	4293      	cmp	r3, r2
 8012530:	d108      	bne.n	8012544 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	4a13      	ldr	r2, [pc, #76]	@ (8012584 <TIM_Base_SetConfig+0xb8>)
 8012536:	4013      	ands	r3, r2
 8012538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	4313      	orrs	r3, r2
 8012542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2280      	movs	r2, #128	@ 0x80
 8012548:	4393      	bics	r3, r2
 801254a:	001a      	movs	r2, r3
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	691b      	ldr	r3, [r3, #16]
 8012550:	4313      	orrs	r3, r2
 8012552:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	68fa      	ldr	r2, [r7, #12]
 8012558:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	689a      	ldr	r2, [r3, #8]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2201      	movs	r2, #1
 801256e:	615a      	str	r2, [r3, #20]
}
 8012570:	46c0      	nop			@ (mov r8, r8)
 8012572:	46bd      	mov	sp, r7
 8012574:	b004      	add	sp, #16
 8012576:	bd80      	pop	{r7, pc}
 8012578:	40000400 	.word	0x40000400
 801257c:	40010800 	.word	0x40010800
 8012580:	40011400 	.word	0x40011400
 8012584:	fffffcff 	.word	0xfffffcff

08012588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b086      	sub	sp, #24
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6a1b      	ldr	r3, [r3, #32]
 8012596:	2201      	movs	r2, #1
 8012598:	4393      	bics	r3, r2
 801259a:	001a      	movs	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6a1b      	ldr	r3, [r3, #32]
 80125a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	699b      	ldr	r3, [r3, #24]
 80125b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2270      	movs	r2, #112	@ 0x70
 80125b6:	4393      	bics	r3, r2
 80125b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2203      	movs	r2, #3
 80125be:	4393      	bics	r3, r2
 80125c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	68fa      	ldr	r2, [r7, #12]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	2202      	movs	r2, #2
 80125d0:	4393      	bics	r3, r2
 80125d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	697a      	ldr	r2, [r7, #20]
 80125da:	4313      	orrs	r3, r2
 80125dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	693a      	ldr	r2, [r7, #16]
 80125e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	68fa      	ldr	r2, [r7, #12]
 80125e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	685a      	ldr	r2, [r3, #4]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	697a      	ldr	r2, [r7, #20]
 80125f6:	621a      	str	r2, [r3, #32]
}
 80125f8:	46c0      	nop			@ (mov r8, r8)
 80125fa:	46bd      	mov	sp, r7
 80125fc:	b006      	add	sp, #24
 80125fe:	bd80      	pop	{r7, pc}

08012600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b086      	sub	sp, #24
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6a1b      	ldr	r3, [r3, #32]
 801260e:	2210      	movs	r2, #16
 8012610:	4393      	bics	r3, r2
 8012612:	001a      	movs	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a1b      	ldr	r3, [r3, #32]
 801261c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	699b      	ldr	r3, [r3, #24]
 8012628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	4a13      	ldr	r2, [pc, #76]	@ (801267c <TIM_OC2_SetConfig+0x7c>)
 801262e:	4013      	ands	r3, r2
 8012630:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	4a12      	ldr	r2, [pc, #72]	@ (8012680 <TIM_OC2_SetConfig+0x80>)
 8012636:	4013      	ands	r3, r2
 8012638:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	021b      	lsls	r3, r3, #8
 8012640:	68fa      	ldr	r2, [r7, #12]
 8012642:	4313      	orrs	r3, r2
 8012644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	2220      	movs	r2, #32
 801264a:	4393      	bics	r3, r2
 801264c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	689b      	ldr	r3, [r3, #8]
 8012652:	011b      	lsls	r3, r3, #4
 8012654:	697a      	ldr	r2, [r7, #20]
 8012656:	4313      	orrs	r3, r2
 8012658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	693a      	ldr	r2, [r7, #16]
 801265e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	685a      	ldr	r2, [r3, #4]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	697a      	ldr	r2, [r7, #20]
 8012672:	621a      	str	r2, [r3, #32]
}
 8012674:	46c0      	nop			@ (mov r8, r8)
 8012676:	46bd      	mov	sp, r7
 8012678:	b006      	add	sp, #24
 801267a:	bd80      	pop	{r7, pc}
 801267c:	ffff8fff 	.word	0xffff8fff
 8012680:	fffffcff 	.word	0xfffffcff

08012684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b086      	sub	sp, #24
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6a1b      	ldr	r3, [r3, #32]
 8012692:	4a1a      	ldr	r2, [pc, #104]	@ (80126fc <TIM_OC3_SetConfig+0x78>)
 8012694:	401a      	ands	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6a1b      	ldr	r3, [r3, #32]
 801269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	69db      	ldr	r3, [r3, #28]
 80126aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2270      	movs	r2, #112	@ 0x70
 80126b0:	4393      	bics	r3, r2
 80126b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2203      	movs	r2, #3
 80126b8:	4393      	bics	r3, r2
 80126ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	68fa      	ldr	r2, [r7, #12]
 80126c2:	4313      	orrs	r3, r2
 80126c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	4a0d      	ldr	r2, [pc, #52]	@ (8012700 <TIM_OC3_SetConfig+0x7c>)
 80126ca:	4013      	ands	r3, r2
 80126cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	021b      	lsls	r3, r3, #8
 80126d4:	697a      	ldr	r2, [r7, #20]
 80126d6:	4313      	orrs	r3, r2
 80126d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	693a      	ldr	r2, [r7, #16]
 80126de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	68fa      	ldr	r2, [r7, #12]
 80126e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	685a      	ldr	r2, [r3, #4]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	697a      	ldr	r2, [r7, #20]
 80126f2:	621a      	str	r2, [r3, #32]
}
 80126f4:	46c0      	nop			@ (mov r8, r8)
 80126f6:	46bd      	mov	sp, r7
 80126f8:	b006      	add	sp, #24
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	fffffeff 	.word	0xfffffeff
 8012700:	fffffdff 	.word	0xfffffdff

08012704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b086      	sub	sp, #24
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6a1b      	ldr	r3, [r3, #32]
 8012712:	4a1b      	ldr	r2, [pc, #108]	@ (8012780 <TIM_OC4_SetConfig+0x7c>)
 8012714:	401a      	ands	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6a1b      	ldr	r3, [r3, #32]
 801271e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	69db      	ldr	r3, [r3, #28]
 801272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	4a15      	ldr	r2, [pc, #84]	@ (8012784 <TIM_OC4_SetConfig+0x80>)
 8012730:	4013      	ands	r3, r2
 8012732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	4a14      	ldr	r2, [pc, #80]	@ (8012788 <TIM_OC4_SetConfig+0x84>)
 8012738:	4013      	ands	r3, r2
 801273a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	021b      	lsls	r3, r3, #8
 8012742:	68fa      	ldr	r2, [r7, #12]
 8012744:	4313      	orrs	r3, r2
 8012746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	4a10      	ldr	r2, [pc, #64]	@ (801278c <TIM_OC4_SetConfig+0x88>)
 801274c:	4013      	ands	r3, r2
 801274e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	031b      	lsls	r3, r3, #12
 8012756:	697a      	ldr	r2, [r7, #20]
 8012758:	4313      	orrs	r3, r2
 801275a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	693a      	ldr	r2, [r7, #16]
 8012760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	68fa      	ldr	r2, [r7, #12]
 8012766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	685a      	ldr	r2, [r3, #4]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	697a      	ldr	r2, [r7, #20]
 8012774:	621a      	str	r2, [r3, #32]
}
 8012776:	46c0      	nop			@ (mov r8, r8)
 8012778:	46bd      	mov	sp, r7
 801277a:	b006      	add	sp, #24
 801277c:	bd80      	pop	{r7, pc}
 801277e:	46c0      	nop			@ (mov r8, r8)
 8012780:	ffffefff 	.word	0xffffefff
 8012784:	ffff8fff 	.word	0xffff8fff
 8012788:	fffffcff 	.word	0xfffffcff
 801278c:	ffffdfff 	.word	0xffffdfff

08012790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b086      	sub	sp, #24
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	221f      	movs	r2, #31
 80127a0:	4013      	ands	r3, r2
 80127a2:	2201      	movs	r2, #1
 80127a4:	409a      	lsls	r2, r3
 80127a6:	0013      	movs	r3, r2
 80127a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	697a      	ldr	r2, [r7, #20]
 80127b0:	43d2      	mvns	r2, r2
 80127b2:	401a      	ands	r2, r3
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	6a1a      	ldr	r2, [r3, #32]
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	211f      	movs	r1, #31
 80127c0:	400b      	ands	r3, r1
 80127c2:	6879      	ldr	r1, [r7, #4]
 80127c4:	4099      	lsls	r1, r3
 80127c6:	000b      	movs	r3, r1
 80127c8:	431a      	orrs	r2, r3
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	621a      	str	r2, [r3, #32]
}
 80127ce:	46c0      	nop			@ (mov r8, r8)
 80127d0:	46bd      	mov	sp, r7
 80127d2:	b006      	add	sp, #24
 80127d4:	bd80      	pop	{r7, pc}
	...

080127d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2238      	movs	r2, #56	@ 0x38
 80127e6:	5c9b      	ldrb	r3, [r3, r2]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d101      	bne.n	80127f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80127ec:	2302      	movs	r3, #2
 80127ee:	e047      	b.n	8012880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2238      	movs	r2, #56	@ 0x38
 80127f4:	2101      	movs	r1, #1
 80127f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2239      	movs	r2, #57	@ 0x39
 80127fc:	2102      	movs	r1, #2
 80127fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	689b      	ldr	r3, [r3, #8]
 801280e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2270      	movs	r2, #112	@ 0x70
 8012814:	4393      	bics	r3, r2
 8012816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	4313      	orrs	r3, r2
 8012820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	2380      	movs	r3, #128	@ 0x80
 8012830:	05db      	lsls	r3, r3, #23
 8012832:	429a      	cmp	r2, r3
 8012834:	d00e      	beq.n	8012854 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a13      	ldr	r2, [pc, #76]	@ (8012888 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801283c:	4293      	cmp	r3, r2
 801283e:	d009      	beq.n	8012854 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4a11      	ldr	r2, [pc, #68]	@ (801288c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d004      	beq.n	8012854 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	4a10      	ldr	r2, [pc, #64]	@ (8012890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8012850:	4293      	cmp	r3, r2
 8012852:	d10c      	bne.n	801286e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	2280      	movs	r2, #128	@ 0x80
 8012858:	4393      	bics	r3, r2
 801285a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	4313      	orrs	r3, r2
 8012864:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2239      	movs	r2, #57	@ 0x39
 8012872:	2101      	movs	r1, #1
 8012874:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2238      	movs	r2, #56	@ 0x38
 801287a:	2100      	movs	r1, #0
 801287c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801287e:	2300      	movs	r3, #0
}
 8012880:	0018      	movs	r0, r3
 8012882:	46bd      	mov	sp, r7
 8012884:	b004      	add	sp, #16
 8012886:	bd80      	pop	{r7, pc}
 8012888:	40000400 	.word	0x40000400
 801288c:	40010800 	.word	0x40010800
 8012890:	40011400 	.word	0x40011400

08012894 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2238      	movs	r2, #56	@ 0x38
 80128a2:	5c9b      	ldrb	r3, [r3, r2]
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d101      	bne.n	80128ac <HAL_TIMEx_RemapConfig+0x18>
 80128a8:	2302      	movs	r3, #2
 80128aa:	e00c      	b.n	80128c6 <HAL_TIMEx_RemapConfig+0x32>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2238      	movs	r2, #56	@ 0x38
 80128b0:	2101      	movs	r1, #1
 80128b2:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	683a      	ldr	r2, [r7, #0]
 80128ba:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2238      	movs	r2, #56	@ 0x38
 80128c0:	2100      	movs	r1, #0
 80128c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	0018      	movs	r0, r3
 80128c8:	46bd      	mov	sp, r7
 80128ca:	b002      	add	sp, #8
 80128cc:	bd80      	pop	{r7, pc}
	...

080128d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d101      	bne.n	80128e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80128de:	2301      	movs	r3, #1
 80128e0:	e053      	b.n	801298a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d116      	bne.n	8012918 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2278      	movs	r2, #120	@ 0x78
 80128ee:	2100      	movs	r1, #0
 80128f0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	0018      	movs	r0, r3
 80128f6:	f000 fd0f 	bl	8013318 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	22b0      	movs	r2, #176	@ 0xb0
 80128fe:	589b      	ldr	r3, [r3, r2]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d103      	bne.n	801290c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	21b0      	movs	r1, #176	@ 0xb0
 8012908:	4a22      	ldr	r2, [pc, #136]	@ (8012994 <HAL_UART_Init+0xc4>)
 801290a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	22b0      	movs	r2, #176	@ 0xb0
 8012910:	589b      	ldr	r3, [r3, r2]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	0010      	movs	r0, r2
 8012916:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2224      	movs	r2, #36	@ 0x24
 801291c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2101      	movs	r1, #1
 801292a:	438a      	bics	r2, r1
 801292c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	0018      	movs	r0, r3
 8012932:	f000 fd35 	bl	80133a0 <UART_SetConfig>
 8012936:	0003      	movs	r3, r0
 8012938:	2b01      	cmp	r3, #1
 801293a:	d101      	bne.n	8012940 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801293c:	2301      	movs	r3, #1
 801293e:	e024      	b.n	801298a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012944:	2b00      	cmp	r3, #0
 8012946:	d003      	beq.n	8012950 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	0018      	movs	r0, r3
 801294c:	f000 ffc6 	bl	80138dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	685a      	ldr	r2, [r3, #4]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	490f      	ldr	r1, [pc, #60]	@ (8012998 <HAL_UART_Init+0xc8>)
 801295c:	400a      	ands	r2, r1
 801295e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	689a      	ldr	r2, [r3, #8]
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	212a      	movs	r1, #42	@ 0x2a
 801296c:	438a      	bics	r2, r1
 801296e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2101      	movs	r1, #1
 801297c:	430a      	orrs	r2, r1
 801297e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	0018      	movs	r0, r3
 8012984:	f001 f85e 	bl	8013a44 <UART_CheckIdleState>
 8012988:	0003      	movs	r3, r0
}
 801298a:	0018      	movs	r0, r3
 801298c:	46bd      	mov	sp, r7
 801298e:	b002      	add	sp, #8
 8012990:	bd80      	pop	{r7, pc}
 8012992:	46c0      	nop			@ (mov r8, r8)
 8012994:	0800aa01 	.word	0x0800aa01
 8012998:	ffffb7ff 	.word	0xffffb7ff

0801299c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b08a      	sub	sp, #40	@ 0x28
 80129a0:	af02      	add	r7, sp, #8
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	603b      	str	r3, [r7, #0]
 80129a8:	1dbb      	adds	r3, r7, #6
 80129aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80129b0:	2b20      	cmp	r3, #32
 80129b2:	d000      	beq.n	80129b6 <HAL_UART_Transmit+0x1a>
 80129b4:	e08c      	b.n	8012ad0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d003      	beq.n	80129c4 <HAL_UART_Transmit+0x28>
 80129bc:	1dbb      	adds	r3, r7, #6
 80129be:	881b      	ldrh	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80129c4:	2301      	movs	r3, #1
 80129c6:	e084      	b.n	8012ad2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	689a      	ldr	r2, [r3, #8]
 80129cc:	2380      	movs	r3, #128	@ 0x80
 80129ce:	015b      	lsls	r3, r3, #5
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d109      	bne.n	80129e8 <HAL_UART_Transmit+0x4c>
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	691b      	ldr	r3, [r3, #16]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d105      	bne.n	80129e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	2201      	movs	r2, #1
 80129e0:	4013      	ands	r3, r2
 80129e2:	d001      	beq.n	80129e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80129e4:	2301      	movs	r3, #1
 80129e6:	e074      	b.n	8012ad2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2284      	movs	r2, #132	@ 0x84
 80129ec:	2100      	movs	r1, #0
 80129ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2221      	movs	r2, #33	@ 0x21
 80129f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80129f6:	f7f8 fd2b 	bl	800b450 <HAL_GetTick>
 80129fa:	0003      	movs	r3, r0
 80129fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	1dba      	adds	r2, r7, #6
 8012a02:	2150      	movs	r1, #80	@ 0x50
 8012a04:	8812      	ldrh	r2, [r2, #0]
 8012a06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	1dba      	adds	r2, r7, #6
 8012a0c:	2152      	movs	r1, #82	@ 0x52
 8012a0e:	8812      	ldrh	r2, [r2, #0]
 8012a10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	689a      	ldr	r2, [r3, #8]
 8012a16:	2380      	movs	r3, #128	@ 0x80
 8012a18:	015b      	lsls	r3, r3, #5
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d108      	bne.n	8012a30 <HAL_UART_Transmit+0x94>
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	691b      	ldr	r3, [r3, #16]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d104      	bne.n	8012a30 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8012a26:	2300      	movs	r3, #0
 8012a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	61bb      	str	r3, [r7, #24]
 8012a2e:	e003      	b.n	8012a38 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012a34:	2300      	movs	r3, #0
 8012a36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012a38:	e02f      	b.n	8012a9a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012a3a:	697a      	ldr	r2, [r7, #20]
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	0013      	movs	r3, r2
 8012a44:	2200      	movs	r2, #0
 8012a46:	2180      	movs	r1, #128	@ 0x80
 8012a48:	f001 f8a4 	bl	8013b94 <UART_WaitOnFlagUntilTimeout>
 8012a4c:	1e03      	subs	r3, r0, #0
 8012a4e:	d004      	beq.n	8012a5a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2220      	movs	r2, #32
 8012a54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8012a56:	2303      	movs	r3, #3
 8012a58:	e03b      	b.n	8012ad2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d10b      	bne.n	8012a78 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	881b      	ldrh	r3, [r3, #0]
 8012a64:	001a      	movs	r2, r3
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	05d2      	lsls	r2, r2, #23
 8012a6c:	0dd2      	lsrs	r2, r2, #23
 8012a6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	3302      	adds	r3, #2
 8012a74:	61bb      	str	r3, [r7, #24]
 8012a76:	e007      	b.n	8012a88 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	781a      	ldrb	r2, [r3, #0]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	3301      	adds	r3, #1
 8012a86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2252      	movs	r2, #82	@ 0x52
 8012a8c:	5a9b      	ldrh	r3, [r3, r2]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	3b01      	subs	r3, #1
 8012a92:	b299      	uxth	r1, r3
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2252      	movs	r2, #82	@ 0x52
 8012a98:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2252      	movs	r2, #82	@ 0x52
 8012a9e:	5a9b      	ldrh	r3, [r3, r2]
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d1c9      	bne.n	8012a3a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012aa6:	697a      	ldr	r2, [r7, #20]
 8012aa8:	68f8      	ldr	r0, [r7, #12]
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	0013      	movs	r3, r2
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	2140      	movs	r1, #64	@ 0x40
 8012ab4:	f001 f86e 	bl	8013b94 <UART_WaitOnFlagUntilTimeout>
 8012ab8:	1e03      	subs	r3, r0, #0
 8012aba:	d004      	beq.n	8012ac6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2220      	movs	r2, #32
 8012ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8012ac2:	2303      	movs	r3, #3
 8012ac4:	e005      	b.n	8012ad2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2220      	movs	r2, #32
 8012aca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8012acc:	2300      	movs	r3, #0
 8012ace:	e000      	b.n	8012ad2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8012ad0:	2302      	movs	r3, #2
  }
}
 8012ad2:	0018      	movs	r0, r3
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	b008      	add	sp, #32
 8012ad8:	bd80      	pop	{r7, pc}
	...

08012adc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b088      	sub	sp, #32
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	60f8      	str	r0, [r7, #12]
 8012ae4:	60b9      	str	r1, [r7, #8]
 8012ae6:	1dbb      	adds	r3, r7, #6
 8012ae8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012aee:	2b20      	cmp	r3, #32
 8012af0:	d000      	beq.n	8012af4 <HAL_UART_Transmit_DMA+0x18>
 8012af2:	e077      	b.n	8012be4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d003      	beq.n	8012b02 <HAL_UART_Transmit_DMA+0x26>
 8012afa:	1dbb      	adds	r3, r7, #6
 8012afc:	881b      	ldrh	r3, [r3, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d101      	bne.n	8012b06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8012b02:	2301      	movs	r3, #1
 8012b04:	e06f      	b.n	8012be6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	689a      	ldr	r2, [r3, #8]
 8012b0a:	2380      	movs	r3, #128	@ 0x80
 8012b0c:	015b      	lsls	r3, r3, #5
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d109      	bne.n	8012b26 <HAL_UART_Transmit_DMA+0x4a>
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d105      	bne.n	8012b26 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	4013      	ands	r3, r2
 8012b20:	d001      	beq.n	8012b26 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8012b22:	2301      	movs	r3, #1
 8012b24:	e05f      	b.n	8012be6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	68ba      	ldr	r2, [r7, #8]
 8012b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	1dba      	adds	r2, r7, #6
 8012b30:	2150      	movs	r1, #80	@ 0x50
 8012b32:	8812      	ldrh	r2, [r2, #0]
 8012b34:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	1dba      	adds	r2, r7, #6
 8012b3a:	2152      	movs	r1, #82	@ 0x52
 8012b3c:	8812      	ldrh	r2, [r2, #0]
 8012b3e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2284      	movs	r2, #132	@ 0x84
 8012b44:	2100      	movs	r1, #0
 8012b46:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2221      	movs	r2, #33	@ 0x21
 8012b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d027      	beq.n	8012ba6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b5a:	4a25      	ldr	r2, [pc, #148]	@ (8012bf0 <HAL_UART_Transmit_DMA+0x114>)
 8012b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b62:	4a24      	ldr	r2, [pc, #144]	@ (8012bf4 <HAL_UART_Transmit_DMA+0x118>)
 8012b64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b6a:	4a23      	ldr	r2, [pc, #140]	@ (8012bf8 <HAL_UART_Transmit_DMA+0x11c>)
 8012b6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b72:	2200      	movs	r2, #0
 8012b74:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b7e:	0019      	movs	r1, r3
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	3328      	adds	r3, #40	@ 0x28
 8012b86:	001a      	movs	r2, r3
 8012b88:	1dbb      	adds	r3, r7, #6
 8012b8a:	881b      	ldrh	r3, [r3, #0]
 8012b8c:	f7f9 f980 	bl	800be90 <HAL_DMA_Start_IT>
 8012b90:	1e03      	subs	r3, r0, #0
 8012b92:	d008      	beq.n	8012ba6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2284      	movs	r2, #132	@ 0x84
 8012b98:	2110      	movs	r1, #16
 8012b9a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2220      	movs	r2, #32
 8012ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	e01f      	b.n	8012be6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	2240      	movs	r2, #64	@ 0x40
 8012bac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bae:	f3ef 8310 	mrs	r3, PRIMASK
 8012bb2:	613b      	str	r3, [r7, #16]
  return(result);
 8012bb4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012bb6:	61fb      	str	r3, [r7, #28]
 8012bb8:	2301      	movs	r3, #1
 8012bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	f383 8810 	msr	PRIMASK, r3
}
 8012bc2:	46c0      	nop			@ (mov r8, r8)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	689a      	ldr	r2, [r3, #8]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2180      	movs	r1, #128	@ 0x80
 8012bd0:	430a      	orrs	r2, r1
 8012bd2:	609a      	str	r2, [r3, #8]
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	f383 8810 	msr	PRIMASK, r3
}
 8012bde:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8012be0:	2300      	movs	r3, #0
 8012be2:	e000      	b.n	8012be6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8012be4:	2302      	movs	r3, #2
  }
}
 8012be6:	0018      	movs	r0, r3
 8012be8:	46bd      	mov	sp, r7
 8012bea:	b008      	add	sp, #32
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	46c0      	nop			@ (mov r8, r8)
 8012bf0:	08013eb9 	.word	0x08013eb9
 8012bf4:	08013f55 	.word	0x08013f55
 8012bf8:	080140f5 	.word	0x080140f5

08012bfc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b088      	sub	sp, #32
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	1dbb      	adds	r3, r7, #6
 8012c08:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2280      	movs	r2, #128	@ 0x80
 8012c0e:	589b      	ldr	r3, [r3, r2]
 8012c10:	2b20      	cmp	r3, #32
 8012c12:	d14a      	bne.n	8012caa <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d003      	beq.n	8012c22 <HAL_UART_Receive_DMA+0x26>
 8012c1a:	1dbb      	adds	r3, r7, #6
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d101      	bne.n	8012c26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8012c22:	2301      	movs	r3, #1
 8012c24:	e042      	b.n	8012cac <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	689a      	ldr	r2, [r3, #8]
 8012c2a:	2380      	movs	r3, #128	@ 0x80
 8012c2c:	015b      	lsls	r3, r3, #5
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d109      	bne.n	8012c46 <HAL_UART_Receive_DMA+0x4a>
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	691b      	ldr	r3, [r3, #16]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d105      	bne.n	8012c46 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	4013      	ands	r3, r2
 8012c40:	d001      	beq.n	8012c46 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8012c42:	2301      	movs	r3, #1
 8012c44:	e032      	b.n	8012cac <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	4a18      	ldr	r2, [pc, #96]	@ (8012cb4 <HAL_UART_Receive_DMA+0xb8>)
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d020      	beq.n	8012c98 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	685a      	ldr	r2, [r3, #4]
 8012c5c:	2380      	movs	r3, #128	@ 0x80
 8012c5e:	041b      	lsls	r3, r3, #16
 8012c60:	4013      	ands	r3, r2
 8012c62:	d019      	beq.n	8012c98 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c64:	f3ef 8310 	mrs	r3, PRIMASK
 8012c68:	613b      	str	r3, [r7, #16]
  return(result);
 8012c6a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012c6c:	61fb      	str	r3, [r7, #28]
 8012c6e:	2301      	movs	r3, #1
 8012c70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	f383 8810 	msr	PRIMASK, r3
}
 8012c78:	46c0      	nop			@ (mov r8, r8)
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2180      	movs	r1, #128	@ 0x80
 8012c86:	04c9      	lsls	r1, r1, #19
 8012c88:	430a      	orrs	r2, r1
 8012c8a:	601a      	str	r2, [r3, #0]
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	f383 8810 	msr	PRIMASK, r3
}
 8012c96:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012c98:	1dbb      	adds	r3, r7, #6
 8012c9a:	881a      	ldrh	r2, [r3, #0]
 8012c9c:	68b9      	ldr	r1, [r7, #8]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	0018      	movs	r0, r3
 8012ca2:	f000 ffe1 	bl	8013c68 <UART_Start_Receive_DMA>
 8012ca6:	0003      	movs	r3, r0
 8012ca8:	e000      	b.n	8012cac <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8012caa:	2302      	movs	r3, #2
  }
}
 8012cac:	0018      	movs	r0, r3
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	b008      	add	sp, #32
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	40004800 	.word	0x40004800

08012cb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012cb8:	b590      	push	{r4, r7, lr}
 8012cba:	b0ab      	sub	sp, #172	@ 0xac
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	69db      	ldr	r3, [r3, #28]
 8012cc6:	22a4      	movs	r2, #164	@ 0xa4
 8012cc8:	18b9      	adds	r1, r7, r2
 8012cca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	20a0      	movs	r0, #160	@ 0xa0
 8012cd4:	1839      	adds	r1, r7, r0
 8012cd6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	219c      	movs	r1, #156	@ 0x9c
 8012ce0:	1879      	adds	r1, r7, r1
 8012ce2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012ce4:	0011      	movs	r1, r2
 8012ce6:	18bb      	adds	r3, r7, r2
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4a9c      	ldr	r2, [pc, #624]	@ (8012f5c <HAL_UART_IRQHandler+0x2a4>)
 8012cec:	4013      	ands	r3, r2
 8012cee:	2298      	movs	r2, #152	@ 0x98
 8012cf0:	18bc      	adds	r4, r7, r2
 8012cf2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8012cf4:	18bb      	adds	r3, r7, r2
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d114      	bne.n	8012d26 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012cfc:	187b      	adds	r3, r7, r1
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2220      	movs	r2, #32
 8012d02:	4013      	ands	r3, r2
 8012d04:	d00f      	beq.n	8012d26 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012d06:	183b      	adds	r3, r7, r0
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2220      	movs	r2, #32
 8012d0c:	4013      	ands	r3, r2
 8012d0e:	d00a      	beq.n	8012d26 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d100      	bne.n	8012d1a <HAL_UART_IRQHandler+0x62>
 8012d18:	e2aa      	b.n	8013270 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	0010      	movs	r0, r2
 8012d22:	4798      	blx	r3
      }
      return;
 8012d24:	e2a4      	b.n	8013270 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012d26:	2398      	movs	r3, #152	@ 0x98
 8012d28:	18fb      	adds	r3, r7, r3
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d100      	bne.n	8012d32 <HAL_UART_IRQHandler+0x7a>
 8012d30:	e11a      	b.n	8012f68 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012d32:	239c      	movs	r3, #156	@ 0x9c
 8012d34:	18fb      	adds	r3, r7, r3
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2201      	movs	r2, #1
 8012d3a:	4013      	ands	r3, r2
 8012d3c:	d106      	bne.n	8012d4c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8012d3e:	23a0      	movs	r3, #160	@ 0xa0
 8012d40:	18fb      	adds	r3, r7, r3
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4a86      	ldr	r2, [pc, #536]	@ (8012f60 <HAL_UART_IRQHandler+0x2a8>)
 8012d46:	4013      	ands	r3, r2
 8012d48:	d100      	bne.n	8012d4c <HAL_UART_IRQHandler+0x94>
 8012d4a:	e10d      	b.n	8012f68 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012d4c:	23a4      	movs	r3, #164	@ 0xa4
 8012d4e:	18fb      	adds	r3, r7, r3
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	2201      	movs	r2, #1
 8012d54:	4013      	ands	r3, r2
 8012d56:	d012      	beq.n	8012d7e <HAL_UART_IRQHandler+0xc6>
 8012d58:	23a0      	movs	r3, #160	@ 0xa0
 8012d5a:	18fb      	adds	r3, r7, r3
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	2380      	movs	r3, #128	@ 0x80
 8012d60:	005b      	lsls	r3, r3, #1
 8012d62:	4013      	ands	r3, r2
 8012d64:	d00b      	beq.n	8012d7e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2284      	movs	r2, #132	@ 0x84
 8012d72:	589b      	ldr	r3, [r3, r2]
 8012d74:	2201      	movs	r2, #1
 8012d76:	431a      	orrs	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2184      	movs	r1, #132	@ 0x84
 8012d7c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d7e:	23a4      	movs	r3, #164	@ 0xa4
 8012d80:	18fb      	adds	r3, r7, r3
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	2202      	movs	r2, #2
 8012d86:	4013      	ands	r3, r2
 8012d88:	d011      	beq.n	8012dae <HAL_UART_IRQHandler+0xf6>
 8012d8a:	239c      	movs	r3, #156	@ 0x9c
 8012d8c:	18fb      	adds	r3, r7, r3
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2201      	movs	r2, #1
 8012d92:	4013      	ands	r3, r2
 8012d94:	d00b      	beq.n	8012dae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2202      	movs	r2, #2
 8012d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2284      	movs	r2, #132	@ 0x84
 8012da2:	589b      	ldr	r3, [r3, r2]
 8012da4:	2204      	movs	r2, #4
 8012da6:	431a      	orrs	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2184      	movs	r1, #132	@ 0x84
 8012dac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012dae:	23a4      	movs	r3, #164	@ 0xa4
 8012db0:	18fb      	adds	r3, r7, r3
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2204      	movs	r2, #4
 8012db6:	4013      	ands	r3, r2
 8012db8:	d011      	beq.n	8012dde <HAL_UART_IRQHandler+0x126>
 8012dba:	239c      	movs	r3, #156	@ 0x9c
 8012dbc:	18fb      	adds	r3, r7, r3
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	4013      	ands	r3, r2
 8012dc4:	d00b      	beq.n	8012dde <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2204      	movs	r2, #4
 8012dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2284      	movs	r2, #132	@ 0x84
 8012dd2:	589b      	ldr	r3, [r3, r2]
 8012dd4:	2202      	movs	r2, #2
 8012dd6:	431a      	orrs	r2, r3
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2184      	movs	r1, #132	@ 0x84
 8012ddc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012dde:	23a4      	movs	r3, #164	@ 0xa4
 8012de0:	18fb      	adds	r3, r7, r3
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2208      	movs	r2, #8
 8012de6:	4013      	ands	r3, r2
 8012de8:	d017      	beq.n	8012e1a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012dea:	23a0      	movs	r3, #160	@ 0xa0
 8012dec:	18fb      	adds	r3, r7, r3
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	2220      	movs	r2, #32
 8012df2:	4013      	ands	r3, r2
 8012df4:	d105      	bne.n	8012e02 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012df6:	239c      	movs	r3, #156	@ 0x9c
 8012df8:	18fb      	adds	r3, r7, r3
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012e00:	d00b      	beq.n	8012e1a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	2208      	movs	r2, #8
 8012e08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2284      	movs	r2, #132	@ 0x84
 8012e0e:	589b      	ldr	r3, [r3, r2]
 8012e10:	2208      	movs	r2, #8
 8012e12:	431a      	orrs	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2184      	movs	r1, #132	@ 0x84
 8012e18:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012e1a:	23a4      	movs	r3, #164	@ 0xa4
 8012e1c:	18fb      	adds	r3, r7, r3
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	2380      	movs	r3, #128	@ 0x80
 8012e22:	011b      	lsls	r3, r3, #4
 8012e24:	4013      	ands	r3, r2
 8012e26:	d013      	beq.n	8012e50 <HAL_UART_IRQHandler+0x198>
 8012e28:	23a0      	movs	r3, #160	@ 0xa0
 8012e2a:	18fb      	adds	r3, r7, r3
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	2380      	movs	r3, #128	@ 0x80
 8012e30:	04db      	lsls	r3, r3, #19
 8012e32:	4013      	ands	r3, r2
 8012e34:	d00c      	beq.n	8012e50 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	2280      	movs	r2, #128	@ 0x80
 8012e3c:	0112      	lsls	r2, r2, #4
 8012e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2284      	movs	r2, #132	@ 0x84
 8012e44:	589b      	ldr	r3, [r3, r2]
 8012e46:	2220      	movs	r2, #32
 8012e48:	431a      	orrs	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2184      	movs	r1, #132	@ 0x84
 8012e4e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2284      	movs	r2, #132	@ 0x84
 8012e54:	589b      	ldr	r3, [r3, r2]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d100      	bne.n	8012e5c <HAL_UART_IRQHandler+0x1a4>
 8012e5a:	e20b      	b.n	8013274 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012e5c:	23a4      	movs	r3, #164	@ 0xa4
 8012e5e:	18fb      	adds	r3, r7, r3
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2220      	movs	r2, #32
 8012e64:	4013      	ands	r3, r2
 8012e66:	d00e      	beq.n	8012e86 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012e68:	23a0      	movs	r3, #160	@ 0xa0
 8012e6a:	18fb      	adds	r3, r7, r3
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2220      	movs	r2, #32
 8012e70:	4013      	ands	r3, r2
 8012e72:	d008      	beq.n	8012e86 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d004      	beq.n	8012e86 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e80:	687a      	ldr	r2, [r7, #4]
 8012e82:	0010      	movs	r0, r2
 8012e84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2284      	movs	r2, #132	@ 0x84
 8012e8a:	589b      	ldr	r3, [r3, r2]
 8012e8c:	2194      	movs	r1, #148	@ 0x94
 8012e8e:	187a      	adds	r2, r7, r1
 8012e90:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	689b      	ldr	r3, [r3, #8]
 8012e98:	2240      	movs	r2, #64	@ 0x40
 8012e9a:	4013      	ands	r3, r2
 8012e9c:	2b40      	cmp	r3, #64	@ 0x40
 8012e9e:	d004      	beq.n	8012eaa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012ea0:	187b      	adds	r3, r7, r1
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	2228      	movs	r2, #40	@ 0x28
 8012ea6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012ea8:	d04b      	beq.n	8012f42 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	0018      	movs	r0, r3
 8012eae:	f000 ff9f 	bl	8013df0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	2240      	movs	r2, #64	@ 0x40
 8012eba:	4013      	ands	r3, r2
 8012ebc:	2b40      	cmp	r3, #64	@ 0x40
 8012ebe:	d139      	bne.n	8012f34 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8012ec4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8012ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ec8:	2090      	movs	r0, #144	@ 0x90
 8012eca:	183a      	adds	r2, r7, r0
 8012ecc:	6013      	str	r3, [r2, #0]
 8012ece:	2301      	movs	r3, #1
 8012ed0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ed2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ed4:	f383 8810 	msr	PRIMASK, r3
}
 8012ed8:	46c0      	nop			@ (mov r8, r8)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	689a      	ldr	r2, [r3, #8]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	2140      	movs	r1, #64	@ 0x40
 8012ee6:	438a      	bics	r2, r1
 8012ee8:	609a      	str	r2, [r3, #8]
 8012eea:	183b      	adds	r3, r7, r0
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ef2:	f383 8810 	msr	PRIMASK, r3
}
 8012ef6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d012      	beq.n	8012f26 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f04:	4a17      	ldr	r2, [pc, #92]	@ (8012f64 <HAL_UART_IRQHandler+0x2ac>)
 8012f06:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f0c:	0018      	movs	r0, r3
 8012f0e:	f7f9 f865 	bl	800bfdc <HAL_DMA_Abort_IT>
 8012f12:	1e03      	subs	r3, r0, #0
 8012f14:	d020      	beq.n	8012f58 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f20:	0018      	movs	r0, r3
 8012f22:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f24:	e018      	b.n	8012f58 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2298      	movs	r2, #152	@ 0x98
 8012f2a:	589b      	ldr	r3, [r3, r2]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	0010      	movs	r0, r2
 8012f30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f32:	e011      	b.n	8012f58 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2298      	movs	r2, #152	@ 0x98
 8012f38:	589b      	ldr	r3, [r3, r2]
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	0010      	movs	r0, r2
 8012f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f40:	e00a      	b.n	8012f58 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2298      	movs	r2, #152	@ 0x98
 8012f46:	589b      	ldr	r3, [r3, r2]
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	0010      	movs	r0, r2
 8012f4c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2284      	movs	r2, #132	@ 0x84
 8012f52:	2100      	movs	r1, #0
 8012f54:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8012f56:	e18d      	b.n	8013274 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f58:	46c0      	nop			@ (mov r8, r8)
    return;
 8012f5a:	e18b      	b.n	8013274 <HAL_UART_IRQHandler+0x5bc>
 8012f5c:	0000080f 	.word	0x0000080f
 8012f60:	04000120 	.word	0x04000120
 8012f64:	0801417d 	.word	0x0801417d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d000      	beq.n	8012f72 <HAL_UART_IRQHandler+0x2ba>
 8012f70:	e13d      	b.n	80131ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012f72:	23a4      	movs	r3, #164	@ 0xa4
 8012f74:	18fb      	adds	r3, r7, r3
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2210      	movs	r2, #16
 8012f7a:	4013      	ands	r3, r2
 8012f7c:	d100      	bne.n	8012f80 <HAL_UART_IRQHandler+0x2c8>
 8012f7e:	e136      	b.n	80131ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012f80:	23a0      	movs	r3, #160	@ 0xa0
 8012f82:	18fb      	adds	r3, r7, r3
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2210      	movs	r2, #16
 8012f88:	4013      	ands	r3, r2
 8012f8a:	d100      	bne.n	8012f8e <HAL_UART_IRQHandler+0x2d6>
 8012f8c:	e12f      	b.n	80131ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2210      	movs	r2, #16
 8012f94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	2240      	movs	r2, #64	@ 0x40
 8012f9e:	4013      	ands	r3, r2
 8012fa0:	2b40      	cmp	r3, #64	@ 0x40
 8012fa2:	d000      	beq.n	8012fa6 <HAL_UART_IRQHandler+0x2ee>
 8012fa4:	e0a2      	b.n	80130ec <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	685a      	ldr	r2, [r3, #4]
 8012fae:	217e      	movs	r1, #126	@ 0x7e
 8012fb0:	187b      	adds	r3, r7, r1
 8012fb2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8012fb4:	187b      	adds	r3, r7, r1
 8012fb6:	881b      	ldrh	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d100      	bne.n	8012fbe <HAL_UART_IRQHandler+0x306>
 8012fbc:	e15c      	b.n	8013278 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2258      	movs	r2, #88	@ 0x58
 8012fc2:	5a9b      	ldrh	r3, [r3, r2]
 8012fc4:	187a      	adds	r2, r7, r1
 8012fc6:	8812      	ldrh	r2, [r2, #0]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d300      	bcc.n	8012fce <HAL_UART_IRQHandler+0x316>
 8012fcc:	e154      	b.n	8013278 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	187a      	adds	r2, r7, r1
 8012fd2:	215a      	movs	r1, #90	@ 0x5a
 8012fd4:	8812      	ldrh	r2, [r2, #0]
 8012fd6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	2220      	movs	r2, #32
 8012fe2:	4013      	ands	r3, r2
 8012fe4:	d16f      	bne.n	80130c6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8012fea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012fee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ff6:	f383 8810 	msr	PRIMASK, r3
}
 8012ffa:	46c0      	nop			@ (mov r8, r8)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	681a      	ldr	r2, [r3, #0]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	49a0      	ldr	r1, [pc, #640]	@ (8013288 <HAL_UART_IRQHandler+0x5d0>)
 8013008:	400a      	ands	r2, r1
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801300e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013012:	f383 8810 	msr	PRIMASK, r3
}
 8013016:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013018:	f3ef 8310 	mrs	r3, PRIMASK
 801301c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013020:	677b      	str	r3, [r7, #116]	@ 0x74
 8013022:	2301      	movs	r3, #1
 8013024:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013028:	f383 8810 	msr	PRIMASK, r3
}
 801302c:	46c0      	nop			@ (mov r8, r8)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	689a      	ldr	r2, [r3, #8]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2101      	movs	r1, #1
 801303a:	438a      	bics	r2, r1
 801303c:	609a      	str	r2, [r3, #8]
 801303e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013040:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013044:	f383 8810 	msr	PRIMASK, r3
}
 8013048:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801304a:	f3ef 8310 	mrs	r3, PRIMASK
 801304e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8013050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013052:	673b      	str	r3, [r7, #112]	@ 0x70
 8013054:	2301      	movs	r3, #1
 8013056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801305a:	f383 8810 	msr	PRIMASK, r3
}
 801305e:	46c0      	nop			@ (mov r8, r8)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	689a      	ldr	r2, [r3, #8]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2140      	movs	r1, #64	@ 0x40
 801306c:	438a      	bics	r2, r1
 801306e:	609a      	str	r2, [r3, #8]
 8013070:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013072:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013076:	f383 8810 	msr	PRIMASK, r3
}
 801307a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2280      	movs	r2, #128	@ 0x80
 8013080:	2120      	movs	r1, #32
 8013082:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801308a:	f3ef 8310 	mrs	r3, PRIMASK
 801308e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8013090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013094:	2301      	movs	r3, #1
 8013096:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801309a:	f383 8810 	msr	PRIMASK, r3
}
 801309e:	46c0      	nop			@ (mov r8, r8)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	681a      	ldr	r2, [r3, #0]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2110      	movs	r1, #16
 80130ac:	438a      	bics	r2, r1
 80130ae:	601a      	str	r2, [r3, #0]
 80130b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80130b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130b6:	f383 8810 	msr	PRIMASK, r3
}
 80130ba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80130c0:	0018      	movs	r0, r3
 80130c2:	f7f8 ff4b 	bl	800bf5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2202      	movs	r2, #2
 80130ca:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	22ac      	movs	r2, #172	@ 0xac
 80130d0:	589b      	ldr	r3, [r3, r2]
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	2158      	movs	r1, #88	@ 0x58
 80130d6:	5a51      	ldrh	r1, [r2, r1]
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	205a      	movs	r0, #90	@ 0x5a
 80130dc:	5a12      	ldrh	r2, [r2, r0]
 80130de:	b292      	uxth	r2, r2
 80130e0:	1a8a      	subs	r2, r1, r2
 80130e2:	b291      	uxth	r1, r2
 80130e4:	687a      	ldr	r2, [r7, #4]
 80130e6:	0010      	movs	r0, r2
 80130e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80130ea:	e0c5      	b.n	8013278 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2258      	movs	r2, #88	@ 0x58
 80130f0:	5a99      	ldrh	r1, [r3, r2]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	225a      	movs	r2, #90	@ 0x5a
 80130f6:	5a9b      	ldrh	r3, [r3, r2]
 80130f8:	b29a      	uxth	r2, r3
 80130fa:	208e      	movs	r0, #142	@ 0x8e
 80130fc:	183b      	adds	r3, r7, r0
 80130fe:	1a8a      	subs	r2, r1, r2
 8013100:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	225a      	movs	r2, #90	@ 0x5a
 8013106:	5a9b      	ldrh	r3, [r3, r2]
 8013108:	b29b      	uxth	r3, r3
 801310a:	2b00      	cmp	r3, #0
 801310c:	d100      	bne.n	8013110 <HAL_UART_IRQHandler+0x458>
 801310e:	e0b5      	b.n	801327c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8013110:	183b      	adds	r3, r7, r0
 8013112:	881b      	ldrh	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d100      	bne.n	801311a <HAL_UART_IRQHandler+0x462>
 8013118:	e0b0      	b.n	801327c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801311a:	f3ef 8310 	mrs	r3, PRIMASK
 801311e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013120:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013122:	2488      	movs	r4, #136	@ 0x88
 8013124:	193a      	adds	r2, r7, r4
 8013126:	6013      	str	r3, [r2, #0]
 8013128:	2301      	movs	r3, #1
 801312a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	f383 8810 	msr	PRIMASK, r3
}
 8013132:	46c0      	nop			@ (mov r8, r8)
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4953      	ldr	r1, [pc, #332]	@ (801328c <HAL_UART_IRQHandler+0x5d4>)
 8013140:	400a      	ands	r2, r1
 8013142:	601a      	str	r2, [r3, #0]
 8013144:	193b      	adds	r3, r7, r4
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	f383 8810 	msr	PRIMASK, r3
}
 8013150:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013152:	f3ef 8310 	mrs	r3, PRIMASK
 8013156:	61bb      	str	r3, [r7, #24]
  return(result);
 8013158:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801315a:	2484      	movs	r4, #132	@ 0x84
 801315c:	193a      	adds	r2, r7, r4
 801315e:	6013      	str	r3, [r2, #0]
 8013160:	2301      	movs	r3, #1
 8013162:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	f383 8810 	msr	PRIMASK, r3
}
 801316a:	46c0      	nop			@ (mov r8, r8)
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	689a      	ldr	r2, [r3, #8]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	2101      	movs	r1, #1
 8013178:	438a      	bics	r2, r1
 801317a:	609a      	str	r2, [r3, #8]
 801317c:	193b      	adds	r3, r7, r4
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013182:	6a3b      	ldr	r3, [r7, #32]
 8013184:	f383 8810 	msr	PRIMASK, r3
}
 8013188:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2280      	movs	r2, #128	@ 0x80
 801318e:	2120      	movs	r1, #32
 8013190:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801319e:	f3ef 8310 	mrs	r3, PRIMASK
 80131a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80131a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80131a6:	2480      	movs	r4, #128	@ 0x80
 80131a8:	193a      	adds	r2, r7, r4
 80131aa:	6013      	str	r3, [r2, #0]
 80131ac:	2301      	movs	r3, #1
 80131ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b2:	f383 8810 	msr	PRIMASK, r3
}
 80131b6:	46c0      	nop			@ (mov r8, r8)
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	2110      	movs	r1, #16
 80131c4:	438a      	bics	r2, r1
 80131c6:	601a      	str	r2, [r3, #0]
 80131c8:	193b      	adds	r3, r7, r4
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d0:	f383 8810 	msr	PRIMASK, r3
}
 80131d4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2202      	movs	r2, #2
 80131da:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	22ac      	movs	r2, #172	@ 0xac
 80131e0:	589b      	ldr	r3, [r3, r2]
 80131e2:	183a      	adds	r2, r7, r0
 80131e4:	8811      	ldrh	r1, [r2, #0]
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	0010      	movs	r0, r2
 80131ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80131ec:	e046      	b.n	801327c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80131ee:	23a4      	movs	r3, #164	@ 0xa4
 80131f0:	18fb      	adds	r3, r7, r3
 80131f2:	681a      	ldr	r2, [r3, #0]
 80131f4:	2380      	movs	r3, #128	@ 0x80
 80131f6:	035b      	lsls	r3, r3, #13
 80131f8:	4013      	ands	r3, r2
 80131fa:	d012      	beq.n	8013222 <HAL_UART_IRQHandler+0x56a>
 80131fc:	239c      	movs	r3, #156	@ 0x9c
 80131fe:	18fb      	adds	r3, r7, r3
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	2380      	movs	r3, #128	@ 0x80
 8013204:	03db      	lsls	r3, r3, #15
 8013206:	4013      	ands	r3, r2
 8013208:	d00b      	beq.n	8013222 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	2280      	movs	r2, #128	@ 0x80
 8013210:	0352      	lsls	r2, r2, #13
 8013212:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	22a8      	movs	r2, #168	@ 0xa8
 8013218:	589b      	ldr	r3, [r3, r2]
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	0010      	movs	r0, r2
 801321e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013220:	e02f      	b.n	8013282 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8013222:	23a4      	movs	r3, #164	@ 0xa4
 8013224:	18fb      	adds	r3, r7, r3
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	2280      	movs	r2, #128	@ 0x80
 801322a:	4013      	ands	r3, r2
 801322c:	d00f      	beq.n	801324e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801322e:	23a0      	movs	r3, #160	@ 0xa0
 8013230:	18fb      	adds	r3, r7, r3
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2280      	movs	r2, #128	@ 0x80
 8013236:	4013      	ands	r3, r2
 8013238:	d009      	beq.n	801324e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801323e:	2b00      	cmp	r3, #0
 8013240:	d01e      	beq.n	8013280 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	0010      	movs	r0, r2
 801324a:	4798      	blx	r3
    }
    return;
 801324c:	e018      	b.n	8013280 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801324e:	23a4      	movs	r3, #164	@ 0xa4
 8013250:	18fb      	adds	r3, r7, r3
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2240      	movs	r2, #64	@ 0x40
 8013256:	4013      	ands	r3, r2
 8013258:	d013      	beq.n	8013282 <HAL_UART_IRQHandler+0x5ca>
 801325a:	23a0      	movs	r3, #160	@ 0xa0
 801325c:	18fb      	adds	r3, r7, r3
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	2240      	movs	r2, #64	@ 0x40
 8013262:	4013      	ands	r3, r2
 8013264:	d00d      	beq.n	8013282 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	0018      	movs	r0, r3
 801326a:	f000 ffa0 	bl	80141ae <UART_EndTransmit_IT>
    return;
 801326e:	e008      	b.n	8013282 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013270:	46c0      	nop			@ (mov r8, r8)
 8013272:	e006      	b.n	8013282 <HAL_UART_IRQHandler+0x5ca>
    return;
 8013274:	46c0      	nop			@ (mov r8, r8)
 8013276:	e004      	b.n	8013282 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013278:	46c0      	nop			@ (mov r8, r8)
 801327a:	e002      	b.n	8013282 <HAL_UART_IRQHandler+0x5ca>
      return;
 801327c:	46c0      	nop			@ (mov r8, r8)
 801327e:	e000      	b.n	8013282 <HAL_UART_IRQHandler+0x5ca>
    return;
 8013280:	46c0      	nop			@ (mov r8, r8)
  }

}
 8013282:	46bd      	mov	sp, r7
 8013284:	b02b      	add	sp, #172	@ 0xac
 8013286:	bd90      	pop	{r4, r7, pc}
 8013288:	fffffeff 	.word	0xfffffeff
 801328c:	fffffedf 	.word	0xfffffedf

08013290 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013298:	46c0      	nop			@ (mov r8, r8)
 801329a:	46bd      	mov	sp, r7
 801329c:	b002      	add	sp, #8
 801329e:	bd80      	pop	{r7, pc}

080132a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80132a8:	46c0      	nop			@ (mov r8, r8)
 80132aa:	46bd      	mov	sp, r7
 80132ac:	b002      	add	sp, #8
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80132b8:	46c0      	nop			@ (mov r8, r8)
 80132ba:	46bd      	mov	sp, r7
 80132bc:	b002      	add	sp, #8
 80132be:	bd80      	pop	{r7, pc}

080132c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80132c8:	46c0      	nop			@ (mov r8, r8)
 80132ca:	46bd      	mov	sp, r7
 80132cc:	b002      	add	sp, #8
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80132d8:	46c0      	nop			@ (mov r8, r8)
 80132da:	46bd      	mov	sp, r7
 80132dc:	b002      	add	sp, #8
 80132de:	bd80      	pop	{r7, pc}

080132e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80132e8:	46c0      	nop			@ (mov r8, r8)
 80132ea:	46bd      	mov	sp, r7
 80132ec:	b002      	add	sp, #8
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80132f8:	46c0      	nop			@ (mov r8, r8)
 80132fa:	46bd      	mov	sp, r7
 80132fc:	b002      	add	sp, #8
 80132fe:	bd80      	pop	{r7, pc}

08013300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	000a      	movs	r2, r1
 801330a:	1cbb      	adds	r3, r7, #2
 801330c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801330e:	46c0      	nop			@ (mov r8, r8)
 8013310:	46bd      	mov	sp, r7
 8013312:	b002      	add	sp, #8
 8013314:	bd80      	pop	{r7, pc}
	...

08013318 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2188      	movs	r1, #136	@ 0x88
 8013324:	4a14      	ldr	r2, [pc, #80]	@ (8013378 <UART_InitCallbacksToDefault+0x60>)
 8013326:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	218c      	movs	r1, #140	@ 0x8c
 801332c:	4a13      	ldr	r2, [pc, #76]	@ (801337c <UART_InitCallbacksToDefault+0x64>)
 801332e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2190      	movs	r1, #144	@ 0x90
 8013334:	4a12      	ldr	r2, [pc, #72]	@ (8013380 <UART_InitCallbacksToDefault+0x68>)
 8013336:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2194      	movs	r1, #148	@ 0x94
 801333c:	4a11      	ldr	r2, [pc, #68]	@ (8013384 <UART_InitCallbacksToDefault+0x6c>)
 801333e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2198      	movs	r1, #152	@ 0x98
 8013344:	4a10      	ldr	r2, [pc, #64]	@ (8013388 <UART_InitCallbacksToDefault+0x70>)
 8013346:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	219c      	movs	r1, #156	@ 0x9c
 801334c:	4a0f      	ldr	r2, [pc, #60]	@ (801338c <UART_InitCallbacksToDefault+0x74>)
 801334e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	21a0      	movs	r1, #160	@ 0xa0
 8013354:	4a0e      	ldr	r2, [pc, #56]	@ (8013390 <UART_InitCallbacksToDefault+0x78>)
 8013356:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	21a4      	movs	r1, #164	@ 0xa4
 801335c:	4a0d      	ldr	r2, [pc, #52]	@ (8013394 <UART_InitCallbacksToDefault+0x7c>)
 801335e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	21a8      	movs	r1, #168	@ 0xa8
 8013364:	4a0c      	ldr	r2, [pc, #48]	@ (8013398 <UART_InitCallbacksToDefault+0x80>)
 8013366:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	21ac      	movs	r1, #172	@ 0xac
 801336c:	4a0b      	ldr	r2, [pc, #44]	@ (801339c <UART_InitCallbacksToDefault+0x84>)
 801336e:	505a      	str	r2, [r3, r1]

}
 8013370:	46c0      	nop			@ (mov r8, r8)
 8013372:	46bd      	mov	sp, r7
 8013374:	b002      	add	sp, #8
 8013376:	bd80      	pop	{r7, pc}
 8013378:	080132a1 	.word	0x080132a1
 801337c:	08013291 	.word	0x08013291
 8013380:	080132c1 	.word	0x080132c1
 8013384:	080132b1 	.word	0x080132b1
 8013388:	08003a39 	.word	0x08003a39
 801338c:	080132d1 	.word	0x080132d1
 8013390:	080132e1 	.word	0x080132e1
 8013394:	080132f1 	.word	0x080132f1
 8013398:	08014209 	.word	0x08014209
 801339c:	08013301 	.word	0x08013301

080133a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80133a0:	b5b0      	push	{r4, r5, r7, lr}
 80133a2:	b08e      	sub	sp, #56	@ 0x38
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80133a8:	231a      	movs	r3, #26
 80133aa:	2218      	movs	r2, #24
 80133ac:	189b      	adds	r3, r3, r2
 80133ae:	19db      	adds	r3, r3, r7
 80133b0:	2200      	movs	r2, #0
 80133b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80133b4:	69fb      	ldr	r3, [r7, #28]
 80133b6:	689a      	ldr	r2, [r3, #8]
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	691b      	ldr	r3, [r3, #16]
 80133bc:	431a      	orrs	r2, r3
 80133be:	69fb      	ldr	r3, [r7, #28]
 80133c0:	695b      	ldr	r3, [r3, #20]
 80133c2:	431a      	orrs	r2, r3
 80133c4:	69fb      	ldr	r3, [r7, #28]
 80133c6:	69db      	ldr	r3, [r3, #28]
 80133c8:	4313      	orrs	r3, r2
 80133ca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	4ac3      	ldr	r2, [pc, #780]	@ (80136e0 <UART_SetConfig+0x340>)
 80133d4:	4013      	ands	r3, r2
 80133d6:	0019      	movs	r1, r3
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80133de:	430a      	orrs	r2, r1
 80133e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80133e2:	69fb      	ldr	r3, [r7, #28]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	4abe      	ldr	r2, [pc, #760]	@ (80136e4 <UART_SetConfig+0x344>)
 80133ea:	4013      	ands	r3, r2
 80133ec:	0019      	movs	r1, r3
 80133ee:	69fb      	ldr	r3, [r7, #28]
 80133f0:	68da      	ldr	r2, [r3, #12]
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	430a      	orrs	r2, r1
 80133f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	699b      	ldr	r3, [r3, #24]
 80133fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4ab8      	ldr	r2, [pc, #736]	@ (80136e8 <UART_SetConfig+0x348>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d004      	beq.n	8013414 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	6a1b      	ldr	r3, [r3, #32]
 801340e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013410:	4313      	orrs	r3, r2
 8013412:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013414:	69fb      	ldr	r3, [r7, #28]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	689b      	ldr	r3, [r3, #8]
 801341a:	4ab4      	ldr	r2, [pc, #720]	@ (80136ec <UART_SetConfig+0x34c>)
 801341c:	4013      	ands	r3, r2
 801341e:	0019      	movs	r1, r3
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013426:	430a      	orrs	r2, r1
 8013428:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801342a:	69fb      	ldr	r3, [r7, #28]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	4ab0      	ldr	r2, [pc, #704]	@ (80136f0 <UART_SetConfig+0x350>)
 8013430:	4293      	cmp	r3, r2
 8013432:	d131      	bne.n	8013498 <UART_SetConfig+0xf8>
 8013434:	4baf      	ldr	r3, [pc, #700]	@ (80136f4 <UART_SetConfig+0x354>)
 8013436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013438:	2203      	movs	r2, #3
 801343a:	4013      	ands	r3, r2
 801343c:	2b03      	cmp	r3, #3
 801343e:	d01d      	beq.n	801347c <UART_SetConfig+0xdc>
 8013440:	d823      	bhi.n	801348a <UART_SetConfig+0xea>
 8013442:	2b02      	cmp	r3, #2
 8013444:	d00c      	beq.n	8013460 <UART_SetConfig+0xc0>
 8013446:	d820      	bhi.n	801348a <UART_SetConfig+0xea>
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <UART_SetConfig+0xb2>
 801344c:	2b01      	cmp	r3, #1
 801344e:	d00e      	beq.n	801346e <UART_SetConfig+0xce>
 8013450:	e01b      	b.n	801348a <UART_SetConfig+0xea>
 8013452:	231b      	movs	r3, #27
 8013454:	2218      	movs	r2, #24
 8013456:	189b      	adds	r3, r3, r2
 8013458:	19db      	adds	r3, r3, r7
 801345a:	2201      	movs	r2, #1
 801345c:	701a      	strb	r2, [r3, #0]
 801345e:	e0b4      	b.n	80135ca <UART_SetConfig+0x22a>
 8013460:	231b      	movs	r3, #27
 8013462:	2218      	movs	r2, #24
 8013464:	189b      	adds	r3, r3, r2
 8013466:	19db      	adds	r3, r3, r7
 8013468:	2202      	movs	r2, #2
 801346a:	701a      	strb	r2, [r3, #0]
 801346c:	e0ad      	b.n	80135ca <UART_SetConfig+0x22a>
 801346e:	231b      	movs	r3, #27
 8013470:	2218      	movs	r2, #24
 8013472:	189b      	adds	r3, r3, r2
 8013474:	19db      	adds	r3, r3, r7
 8013476:	2204      	movs	r2, #4
 8013478:	701a      	strb	r2, [r3, #0]
 801347a:	e0a6      	b.n	80135ca <UART_SetConfig+0x22a>
 801347c:	231b      	movs	r3, #27
 801347e:	2218      	movs	r2, #24
 8013480:	189b      	adds	r3, r3, r2
 8013482:	19db      	adds	r3, r3, r7
 8013484:	2208      	movs	r2, #8
 8013486:	701a      	strb	r2, [r3, #0]
 8013488:	e09f      	b.n	80135ca <UART_SetConfig+0x22a>
 801348a:	231b      	movs	r3, #27
 801348c:	2218      	movs	r2, #24
 801348e:	189b      	adds	r3, r3, r2
 8013490:	19db      	adds	r3, r3, r7
 8013492:	2210      	movs	r2, #16
 8013494:	701a      	strb	r2, [r3, #0]
 8013496:	e098      	b.n	80135ca <UART_SetConfig+0x22a>
 8013498:	69fb      	ldr	r3, [r7, #28]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4a96      	ldr	r2, [pc, #600]	@ (80136f8 <UART_SetConfig+0x358>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d131      	bne.n	8013506 <UART_SetConfig+0x166>
 80134a2:	4b94      	ldr	r3, [pc, #592]	@ (80136f4 <UART_SetConfig+0x354>)
 80134a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134a6:	220c      	movs	r2, #12
 80134a8:	4013      	ands	r3, r2
 80134aa:	2b0c      	cmp	r3, #12
 80134ac:	d01d      	beq.n	80134ea <UART_SetConfig+0x14a>
 80134ae:	d823      	bhi.n	80134f8 <UART_SetConfig+0x158>
 80134b0:	2b08      	cmp	r3, #8
 80134b2:	d00c      	beq.n	80134ce <UART_SetConfig+0x12e>
 80134b4:	d820      	bhi.n	80134f8 <UART_SetConfig+0x158>
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d002      	beq.n	80134c0 <UART_SetConfig+0x120>
 80134ba:	2b04      	cmp	r3, #4
 80134bc:	d00e      	beq.n	80134dc <UART_SetConfig+0x13c>
 80134be:	e01b      	b.n	80134f8 <UART_SetConfig+0x158>
 80134c0:	231b      	movs	r3, #27
 80134c2:	2218      	movs	r2, #24
 80134c4:	189b      	adds	r3, r3, r2
 80134c6:	19db      	adds	r3, r3, r7
 80134c8:	2200      	movs	r2, #0
 80134ca:	701a      	strb	r2, [r3, #0]
 80134cc:	e07d      	b.n	80135ca <UART_SetConfig+0x22a>
 80134ce:	231b      	movs	r3, #27
 80134d0:	2218      	movs	r2, #24
 80134d2:	189b      	adds	r3, r3, r2
 80134d4:	19db      	adds	r3, r3, r7
 80134d6:	2202      	movs	r2, #2
 80134d8:	701a      	strb	r2, [r3, #0]
 80134da:	e076      	b.n	80135ca <UART_SetConfig+0x22a>
 80134dc:	231b      	movs	r3, #27
 80134de:	2218      	movs	r2, #24
 80134e0:	189b      	adds	r3, r3, r2
 80134e2:	19db      	adds	r3, r3, r7
 80134e4:	2204      	movs	r2, #4
 80134e6:	701a      	strb	r2, [r3, #0]
 80134e8:	e06f      	b.n	80135ca <UART_SetConfig+0x22a>
 80134ea:	231b      	movs	r3, #27
 80134ec:	2218      	movs	r2, #24
 80134ee:	189b      	adds	r3, r3, r2
 80134f0:	19db      	adds	r3, r3, r7
 80134f2:	2208      	movs	r2, #8
 80134f4:	701a      	strb	r2, [r3, #0]
 80134f6:	e068      	b.n	80135ca <UART_SetConfig+0x22a>
 80134f8:	231b      	movs	r3, #27
 80134fa:	2218      	movs	r2, #24
 80134fc:	189b      	adds	r3, r3, r2
 80134fe:	19db      	adds	r3, r3, r7
 8013500:	2210      	movs	r2, #16
 8013502:	701a      	strb	r2, [r3, #0]
 8013504:	e061      	b.n	80135ca <UART_SetConfig+0x22a>
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4a7c      	ldr	r2, [pc, #496]	@ (80136fc <UART_SetConfig+0x35c>)
 801350c:	4293      	cmp	r3, r2
 801350e:	d106      	bne.n	801351e <UART_SetConfig+0x17e>
 8013510:	231b      	movs	r3, #27
 8013512:	2218      	movs	r2, #24
 8013514:	189b      	adds	r3, r3, r2
 8013516:	19db      	adds	r3, r3, r7
 8013518:	2200      	movs	r2, #0
 801351a:	701a      	strb	r2, [r3, #0]
 801351c:	e055      	b.n	80135ca <UART_SetConfig+0x22a>
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	4a77      	ldr	r2, [pc, #476]	@ (8013700 <UART_SetConfig+0x360>)
 8013524:	4293      	cmp	r3, r2
 8013526:	d106      	bne.n	8013536 <UART_SetConfig+0x196>
 8013528:	231b      	movs	r3, #27
 801352a:	2218      	movs	r2, #24
 801352c:	189b      	adds	r3, r3, r2
 801352e:	19db      	adds	r3, r3, r7
 8013530:	2200      	movs	r2, #0
 8013532:	701a      	strb	r2, [r3, #0]
 8013534:	e049      	b.n	80135ca <UART_SetConfig+0x22a>
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	4a6b      	ldr	r2, [pc, #428]	@ (80136e8 <UART_SetConfig+0x348>)
 801353c:	4293      	cmp	r3, r2
 801353e:	d13e      	bne.n	80135be <UART_SetConfig+0x21e>
 8013540:	4b6c      	ldr	r3, [pc, #432]	@ (80136f4 <UART_SetConfig+0x354>)
 8013542:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013544:	23c0      	movs	r3, #192	@ 0xc0
 8013546:	011b      	lsls	r3, r3, #4
 8013548:	4013      	ands	r3, r2
 801354a:	22c0      	movs	r2, #192	@ 0xc0
 801354c:	0112      	lsls	r2, r2, #4
 801354e:	4293      	cmp	r3, r2
 8013550:	d027      	beq.n	80135a2 <UART_SetConfig+0x202>
 8013552:	22c0      	movs	r2, #192	@ 0xc0
 8013554:	0112      	lsls	r2, r2, #4
 8013556:	4293      	cmp	r3, r2
 8013558:	d82a      	bhi.n	80135b0 <UART_SetConfig+0x210>
 801355a:	2280      	movs	r2, #128	@ 0x80
 801355c:	0112      	lsls	r2, r2, #4
 801355e:	4293      	cmp	r3, r2
 8013560:	d011      	beq.n	8013586 <UART_SetConfig+0x1e6>
 8013562:	2280      	movs	r2, #128	@ 0x80
 8013564:	0112      	lsls	r2, r2, #4
 8013566:	4293      	cmp	r3, r2
 8013568:	d822      	bhi.n	80135b0 <UART_SetConfig+0x210>
 801356a:	2b00      	cmp	r3, #0
 801356c:	d004      	beq.n	8013578 <UART_SetConfig+0x1d8>
 801356e:	2280      	movs	r2, #128	@ 0x80
 8013570:	00d2      	lsls	r2, r2, #3
 8013572:	4293      	cmp	r3, r2
 8013574:	d00e      	beq.n	8013594 <UART_SetConfig+0x1f4>
 8013576:	e01b      	b.n	80135b0 <UART_SetConfig+0x210>
 8013578:	231b      	movs	r3, #27
 801357a:	2218      	movs	r2, #24
 801357c:	189b      	adds	r3, r3, r2
 801357e:	19db      	adds	r3, r3, r7
 8013580:	2200      	movs	r2, #0
 8013582:	701a      	strb	r2, [r3, #0]
 8013584:	e021      	b.n	80135ca <UART_SetConfig+0x22a>
 8013586:	231b      	movs	r3, #27
 8013588:	2218      	movs	r2, #24
 801358a:	189b      	adds	r3, r3, r2
 801358c:	19db      	adds	r3, r3, r7
 801358e:	2202      	movs	r2, #2
 8013590:	701a      	strb	r2, [r3, #0]
 8013592:	e01a      	b.n	80135ca <UART_SetConfig+0x22a>
 8013594:	231b      	movs	r3, #27
 8013596:	2218      	movs	r2, #24
 8013598:	189b      	adds	r3, r3, r2
 801359a:	19db      	adds	r3, r3, r7
 801359c:	2204      	movs	r2, #4
 801359e:	701a      	strb	r2, [r3, #0]
 80135a0:	e013      	b.n	80135ca <UART_SetConfig+0x22a>
 80135a2:	231b      	movs	r3, #27
 80135a4:	2218      	movs	r2, #24
 80135a6:	189b      	adds	r3, r3, r2
 80135a8:	19db      	adds	r3, r3, r7
 80135aa:	2208      	movs	r2, #8
 80135ac:	701a      	strb	r2, [r3, #0]
 80135ae:	e00c      	b.n	80135ca <UART_SetConfig+0x22a>
 80135b0:	231b      	movs	r3, #27
 80135b2:	2218      	movs	r2, #24
 80135b4:	189b      	adds	r3, r3, r2
 80135b6:	19db      	adds	r3, r3, r7
 80135b8:	2210      	movs	r2, #16
 80135ba:	701a      	strb	r2, [r3, #0]
 80135bc:	e005      	b.n	80135ca <UART_SetConfig+0x22a>
 80135be:	231b      	movs	r3, #27
 80135c0:	2218      	movs	r2, #24
 80135c2:	189b      	adds	r3, r3, r2
 80135c4:	19db      	adds	r3, r3, r7
 80135c6:	2210      	movs	r2, #16
 80135c8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	4a46      	ldr	r2, [pc, #280]	@ (80136e8 <UART_SetConfig+0x348>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d000      	beq.n	80135d6 <UART_SetConfig+0x236>
 80135d4:	e09a      	b.n	801370c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80135d6:	231b      	movs	r3, #27
 80135d8:	2218      	movs	r2, #24
 80135da:	189b      	adds	r3, r3, r2
 80135dc:	19db      	adds	r3, r3, r7
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	2b08      	cmp	r3, #8
 80135e2:	d01d      	beq.n	8013620 <UART_SetConfig+0x280>
 80135e4:	dc20      	bgt.n	8013628 <UART_SetConfig+0x288>
 80135e6:	2b04      	cmp	r3, #4
 80135e8:	d015      	beq.n	8013616 <UART_SetConfig+0x276>
 80135ea:	dc1d      	bgt.n	8013628 <UART_SetConfig+0x288>
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d002      	beq.n	80135f6 <UART_SetConfig+0x256>
 80135f0:	2b02      	cmp	r3, #2
 80135f2:	d005      	beq.n	8013600 <UART_SetConfig+0x260>
 80135f4:	e018      	b.n	8013628 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80135f6:	f7fe f8f5 	bl	80117e4 <HAL_RCC_GetPCLK1Freq>
 80135fa:	0003      	movs	r3, r0
 80135fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80135fe:	e01c      	b.n	801363a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013600:	4b3c      	ldr	r3, [pc, #240]	@ (80136f4 <UART_SetConfig+0x354>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2210      	movs	r2, #16
 8013606:	4013      	ands	r3, r2
 8013608:	d002      	beq.n	8013610 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801360a:	4b3e      	ldr	r3, [pc, #248]	@ (8013704 <UART_SetConfig+0x364>)
 801360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801360e:	e014      	b.n	801363a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8013610:	4b3d      	ldr	r3, [pc, #244]	@ (8013708 <UART_SetConfig+0x368>)
 8013612:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013614:	e011      	b.n	801363a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013616:	f7fe f835 	bl	8011684 <HAL_RCC_GetSysClockFreq>
 801361a:	0003      	movs	r3, r0
 801361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801361e:	e00c      	b.n	801363a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013620:	2380      	movs	r3, #128	@ 0x80
 8013622:	021b      	lsls	r3, r3, #8
 8013624:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013626:	e008      	b.n	801363a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8013628:	2300      	movs	r3, #0
 801362a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801362c:	231a      	movs	r3, #26
 801362e:	2218      	movs	r2, #24
 8013630:	189b      	adds	r3, r3, r2
 8013632:	19db      	adds	r3, r3, r7
 8013634:	2201      	movs	r2, #1
 8013636:	701a      	strb	r2, [r3, #0]
        break;
 8013638:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801363c:	2b00      	cmp	r3, #0
 801363e:	d100      	bne.n	8013642 <UART_SetConfig+0x2a2>
 8013640:	e133      	b.n	80138aa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	685a      	ldr	r2, [r3, #4]
 8013646:	0013      	movs	r3, r2
 8013648:	005b      	lsls	r3, r3, #1
 801364a:	189b      	adds	r3, r3, r2
 801364c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801364e:	429a      	cmp	r2, r3
 8013650:	d305      	bcc.n	801365e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801365a:	429a      	cmp	r2, r3
 801365c:	d906      	bls.n	801366c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801365e:	231a      	movs	r3, #26
 8013660:	2218      	movs	r2, #24
 8013662:	189b      	adds	r3, r3, r2
 8013664:	19db      	adds	r3, r3, r7
 8013666:	2201      	movs	r2, #1
 8013668:	701a      	strb	r2, [r3, #0]
 801366a:	e11e      	b.n	80138aa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366e:	613b      	str	r3, [r7, #16]
 8013670:	2300      	movs	r3, #0
 8013672:	617b      	str	r3, [r7, #20]
 8013674:	6939      	ldr	r1, [r7, #16]
 8013676:	697a      	ldr	r2, [r7, #20]
 8013678:	000b      	movs	r3, r1
 801367a:	0e1b      	lsrs	r3, r3, #24
 801367c:	0010      	movs	r0, r2
 801367e:	0205      	lsls	r5, r0, #8
 8013680:	431d      	orrs	r5, r3
 8013682:	000b      	movs	r3, r1
 8013684:	021c      	lsls	r4, r3, #8
 8013686:	69fb      	ldr	r3, [r7, #28]
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	085b      	lsrs	r3, r3, #1
 801368c:	60bb      	str	r3, [r7, #8]
 801368e:	2300      	movs	r3, #0
 8013690:	60fb      	str	r3, [r7, #12]
 8013692:	68b8      	ldr	r0, [r7, #8]
 8013694:	68f9      	ldr	r1, [r7, #12]
 8013696:	1900      	adds	r0, r0, r4
 8013698:	4169      	adcs	r1, r5
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	603b      	str	r3, [r7, #0]
 80136a0:	2300      	movs	r3, #0
 80136a2:	607b      	str	r3, [r7, #4]
 80136a4:	683a      	ldr	r2, [r7, #0]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f7ec ff60 	bl	800056c <__aeabi_uldivmod>
 80136ac:	0002      	movs	r2, r0
 80136ae:	000b      	movs	r3, r1
 80136b0:	0013      	movs	r3, r2
 80136b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80136b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136b6:	23c0      	movs	r3, #192	@ 0xc0
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d309      	bcc.n	80136d2 <UART_SetConfig+0x332>
 80136be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136c0:	2380      	movs	r3, #128	@ 0x80
 80136c2:	035b      	lsls	r3, r3, #13
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d204      	bcs.n	80136d2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80136c8:	69fb      	ldr	r3, [r7, #28]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136ce:	60da      	str	r2, [r3, #12]
 80136d0:	e0eb      	b.n	80138aa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80136d2:	231a      	movs	r3, #26
 80136d4:	2218      	movs	r2, #24
 80136d6:	189b      	adds	r3, r3, r2
 80136d8:	19db      	adds	r3, r3, r7
 80136da:	2201      	movs	r2, #1
 80136dc:	701a      	strb	r2, [r3, #0]
 80136de:	e0e4      	b.n	80138aa <UART_SetConfig+0x50a>
 80136e0:	efff69f3 	.word	0xefff69f3
 80136e4:	ffffcfff 	.word	0xffffcfff
 80136e8:	40004800 	.word	0x40004800
 80136ec:	fffff4ff 	.word	0xfffff4ff
 80136f0:	40013800 	.word	0x40013800
 80136f4:	40021000 	.word	0x40021000
 80136f8:	40004400 	.word	0x40004400
 80136fc:	40004c00 	.word	0x40004c00
 8013700:	40005000 	.word	0x40005000
 8013704:	003d0900 	.word	0x003d0900
 8013708:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	69da      	ldr	r2, [r3, #28]
 8013710:	2380      	movs	r3, #128	@ 0x80
 8013712:	021b      	lsls	r3, r3, #8
 8013714:	429a      	cmp	r2, r3
 8013716:	d000      	beq.n	801371a <UART_SetConfig+0x37a>
 8013718:	e070      	b.n	80137fc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801371a:	231b      	movs	r3, #27
 801371c:	2218      	movs	r2, #24
 801371e:	189b      	adds	r3, r3, r2
 8013720:	19db      	adds	r3, r3, r7
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	2b08      	cmp	r3, #8
 8013726:	d822      	bhi.n	801376e <UART_SetConfig+0x3ce>
 8013728:	009a      	lsls	r2, r3, #2
 801372a:	4b67      	ldr	r3, [pc, #412]	@ (80138c8 <UART_SetConfig+0x528>)
 801372c:	18d3      	adds	r3, r2, r3
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013732:	f7fe f857 	bl	80117e4 <HAL_RCC_GetPCLK1Freq>
 8013736:	0003      	movs	r3, r0
 8013738:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801373a:	e021      	b.n	8013780 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801373c:	f7fe f868 	bl	8011810 <HAL_RCC_GetPCLK2Freq>
 8013740:	0003      	movs	r3, r0
 8013742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013744:	e01c      	b.n	8013780 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013746:	4b61      	ldr	r3, [pc, #388]	@ (80138cc <UART_SetConfig+0x52c>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2210      	movs	r2, #16
 801374c:	4013      	ands	r3, r2
 801374e:	d002      	beq.n	8013756 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8013750:	4b5f      	ldr	r3, [pc, #380]	@ (80138d0 <UART_SetConfig+0x530>)
 8013752:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013754:	e014      	b.n	8013780 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8013756:	4b5f      	ldr	r3, [pc, #380]	@ (80138d4 <UART_SetConfig+0x534>)
 8013758:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801375a:	e011      	b.n	8013780 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801375c:	f7fd ff92 	bl	8011684 <HAL_RCC_GetSysClockFreq>
 8013760:	0003      	movs	r3, r0
 8013762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013764:	e00c      	b.n	8013780 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013766:	2380      	movs	r3, #128	@ 0x80
 8013768:	021b      	lsls	r3, r3, #8
 801376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801376c:	e008      	b.n	8013780 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801376e:	2300      	movs	r3, #0
 8013770:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8013772:	231a      	movs	r3, #26
 8013774:	2218      	movs	r2, #24
 8013776:	189b      	adds	r3, r3, r2
 8013778:	19db      	adds	r3, r3, r7
 801377a:	2201      	movs	r2, #1
 801377c:	701a      	strb	r2, [r3, #0]
        break;
 801377e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013782:	2b00      	cmp	r3, #0
 8013784:	d100      	bne.n	8013788 <UART_SetConfig+0x3e8>
 8013786:	e090      	b.n	80138aa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378a:	005a      	lsls	r2, r3, #1
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	085b      	lsrs	r3, r3, #1
 8013792:	18d2      	adds	r2, r2, r3
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	0019      	movs	r1, r3
 801379a:	0010      	movs	r0, r2
 801379c:	f7ec fcf8 	bl	8000190 <__udivsi3>
 80137a0:	0003      	movs	r3, r0
 80137a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80137a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a6:	2b0f      	cmp	r3, #15
 80137a8:	d921      	bls.n	80137ee <UART_SetConfig+0x44e>
 80137aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137ac:	2380      	movs	r3, #128	@ 0x80
 80137ae:	025b      	lsls	r3, r3, #9
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d21c      	bcs.n	80137ee <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80137b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	200e      	movs	r0, #14
 80137ba:	2418      	movs	r4, #24
 80137bc:	1903      	adds	r3, r0, r4
 80137be:	19db      	adds	r3, r3, r7
 80137c0:	210f      	movs	r1, #15
 80137c2:	438a      	bics	r2, r1
 80137c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80137c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c8:	085b      	lsrs	r3, r3, #1
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	2207      	movs	r2, #7
 80137ce:	4013      	ands	r3, r2
 80137d0:	b299      	uxth	r1, r3
 80137d2:	1903      	adds	r3, r0, r4
 80137d4:	19db      	adds	r3, r3, r7
 80137d6:	1902      	adds	r2, r0, r4
 80137d8:	19d2      	adds	r2, r2, r7
 80137da:	8812      	ldrh	r2, [r2, #0]
 80137dc:	430a      	orrs	r2, r1
 80137de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	1902      	adds	r2, r0, r4
 80137e6:	19d2      	adds	r2, r2, r7
 80137e8:	8812      	ldrh	r2, [r2, #0]
 80137ea:	60da      	str	r2, [r3, #12]
 80137ec:	e05d      	b.n	80138aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80137ee:	231a      	movs	r3, #26
 80137f0:	2218      	movs	r2, #24
 80137f2:	189b      	adds	r3, r3, r2
 80137f4:	19db      	adds	r3, r3, r7
 80137f6:	2201      	movs	r2, #1
 80137f8:	701a      	strb	r2, [r3, #0]
 80137fa:	e056      	b.n	80138aa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80137fc:	231b      	movs	r3, #27
 80137fe:	2218      	movs	r2, #24
 8013800:	189b      	adds	r3, r3, r2
 8013802:	19db      	adds	r3, r3, r7
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	2b08      	cmp	r3, #8
 8013808:	d822      	bhi.n	8013850 <UART_SetConfig+0x4b0>
 801380a:	009a      	lsls	r2, r3, #2
 801380c:	4b32      	ldr	r3, [pc, #200]	@ (80138d8 <UART_SetConfig+0x538>)
 801380e:	18d3      	adds	r3, r2, r3
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013814:	f7fd ffe6 	bl	80117e4 <HAL_RCC_GetPCLK1Freq>
 8013818:	0003      	movs	r3, r0
 801381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801381c:	e021      	b.n	8013862 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801381e:	f7fd fff7 	bl	8011810 <HAL_RCC_GetPCLK2Freq>
 8013822:	0003      	movs	r3, r0
 8013824:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013826:	e01c      	b.n	8013862 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013828:	4b28      	ldr	r3, [pc, #160]	@ (80138cc <UART_SetConfig+0x52c>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2210      	movs	r2, #16
 801382e:	4013      	ands	r3, r2
 8013830:	d002      	beq.n	8013838 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8013832:	4b27      	ldr	r3, [pc, #156]	@ (80138d0 <UART_SetConfig+0x530>)
 8013834:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013836:	e014      	b.n	8013862 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8013838:	4b26      	ldr	r3, [pc, #152]	@ (80138d4 <UART_SetConfig+0x534>)
 801383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801383c:	e011      	b.n	8013862 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801383e:	f7fd ff21 	bl	8011684 <HAL_RCC_GetSysClockFreq>
 8013842:	0003      	movs	r3, r0
 8013844:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8013846:	e00c      	b.n	8013862 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013848:	2380      	movs	r3, #128	@ 0x80
 801384a:	021b      	lsls	r3, r3, #8
 801384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801384e:	e008      	b.n	8013862 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8013850:	2300      	movs	r3, #0
 8013852:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8013854:	231a      	movs	r3, #26
 8013856:	2218      	movs	r2, #24
 8013858:	189b      	adds	r3, r3, r2
 801385a:	19db      	adds	r3, r3, r7
 801385c:	2201      	movs	r2, #1
 801385e:	701a      	strb	r2, [r3, #0]
        break;
 8013860:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8013862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013864:	2b00      	cmp	r3, #0
 8013866:	d020      	beq.n	80138aa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013868:	69fb      	ldr	r3, [r7, #28]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	085a      	lsrs	r2, r3, #1
 801386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013870:	18d2      	adds	r2, r2, r3
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	0019      	movs	r1, r3
 8013878:	0010      	movs	r0, r2
 801387a:	f7ec fc89 	bl	8000190 <__udivsi3>
 801387e:	0003      	movs	r3, r0
 8013880:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013884:	2b0f      	cmp	r3, #15
 8013886:	d90a      	bls.n	801389e <UART_SetConfig+0x4fe>
 8013888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801388a:	2380      	movs	r3, #128	@ 0x80
 801388c:	025b      	lsls	r3, r3, #9
 801388e:	429a      	cmp	r2, r3
 8013890:	d205      	bcs.n	801389e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013894:	b29a      	uxth	r2, r3
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	60da      	str	r2, [r3, #12]
 801389c:	e005      	b.n	80138aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801389e:	231a      	movs	r3, #26
 80138a0:	2218      	movs	r2, #24
 80138a2:	189b      	adds	r3, r3, r2
 80138a4:	19db      	adds	r3, r3, r7
 80138a6:	2201      	movs	r2, #1
 80138a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80138aa:	69fb      	ldr	r3, [r7, #28]
 80138ac:	2200      	movs	r2, #0
 80138ae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	2200      	movs	r2, #0
 80138b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80138b6:	231a      	movs	r3, #26
 80138b8:	2218      	movs	r2, #24
 80138ba:	189b      	adds	r3, r3, r2
 80138bc:	19db      	adds	r3, r3, r7
 80138be:	781b      	ldrb	r3, [r3, #0]
}
 80138c0:	0018      	movs	r0, r3
 80138c2:	46bd      	mov	sp, r7
 80138c4:	b00e      	add	sp, #56	@ 0x38
 80138c6:	bdb0      	pop	{r4, r5, r7, pc}
 80138c8:	0801f250 	.word	0x0801f250
 80138cc:	40021000 	.word	0x40021000
 80138d0:	003d0900 	.word	0x003d0900
 80138d4:	00f42400 	.word	0x00f42400
 80138d8:	0801f274 	.word	0x0801f274

080138dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138e8:	2201      	movs	r2, #1
 80138ea:	4013      	ands	r3, r2
 80138ec:	d00b      	beq.n	8013906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	4a4a      	ldr	r2, [pc, #296]	@ (8013a20 <UART_AdvFeatureConfig+0x144>)
 80138f6:	4013      	ands	r3, r2
 80138f8:	0019      	movs	r1, r3
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	430a      	orrs	r2, r1
 8013904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801390a:	2202      	movs	r2, #2
 801390c:	4013      	ands	r3, r2
 801390e:	d00b      	beq.n	8013928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	4a43      	ldr	r2, [pc, #268]	@ (8013a24 <UART_AdvFeatureConfig+0x148>)
 8013918:	4013      	ands	r3, r2
 801391a:	0019      	movs	r1, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	430a      	orrs	r2, r1
 8013926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801392c:	2204      	movs	r2, #4
 801392e:	4013      	ands	r3, r2
 8013930:	d00b      	beq.n	801394a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	4a3b      	ldr	r2, [pc, #236]	@ (8013a28 <UART_AdvFeatureConfig+0x14c>)
 801393a:	4013      	ands	r3, r2
 801393c:	0019      	movs	r1, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	430a      	orrs	r2, r1
 8013948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801394e:	2208      	movs	r2, #8
 8013950:	4013      	ands	r3, r2
 8013952:	d00b      	beq.n	801396c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	4a34      	ldr	r2, [pc, #208]	@ (8013a2c <UART_AdvFeatureConfig+0x150>)
 801395c:	4013      	ands	r3, r2
 801395e:	0019      	movs	r1, r3
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	430a      	orrs	r2, r1
 801396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013970:	2210      	movs	r2, #16
 8013972:	4013      	ands	r3, r2
 8013974:	d00b      	beq.n	801398e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	689b      	ldr	r3, [r3, #8]
 801397c:	4a2c      	ldr	r2, [pc, #176]	@ (8013a30 <UART_AdvFeatureConfig+0x154>)
 801397e:	4013      	ands	r3, r2
 8013980:	0019      	movs	r1, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	430a      	orrs	r2, r1
 801398c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013992:	2220      	movs	r2, #32
 8013994:	4013      	ands	r3, r2
 8013996:	d00b      	beq.n	80139b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	689b      	ldr	r3, [r3, #8]
 801399e:	4a25      	ldr	r2, [pc, #148]	@ (8013a34 <UART_AdvFeatureConfig+0x158>)
 80139a0:	4013      	ands	r3, r2
 80139a2:	0019      	movs	r1, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	430a      	orrs	r2, r1
 80139ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139b4:	2240      	movs	r2, #64	@ 0x40
 80139b6:	4013      	ands	r3, r2
 80139b8:	d01d      	beq.n	80139f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	4a1d      	ldr	r2, [pc, #116]	@ (8013a38 <UART_AdvFeatureConfig+0x15c>)
 80139c2:	4013      	ands	r3, r2
 80139c4:	0019      	movs	r1, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	430a      	orrs	r2, r1
 80139d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80139d6:	2380      	movs	r3, #128	@ 0x80
 80139d8:	035b      	lsls	r3, r3, #13
 80139da:	429a      	cmp	r2, r3
 80139dc:	d10b      	bne.n	80139f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	4a15      	ldr	r2, [pc, #84]	@ (8013a3c <UART_AdvFeatureConfig+0x160>)
 80139e6:	4013      	ands	r3, r2
 80139e8:	0019      	movs	r1, r3
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	430a      	orrs	r2, r1
 80139f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139fa:	2280      	movs	r2, #128	@ 0x80
 80139fc:	4013      	ands	r3, r2
 80139fe:	d00b      	beq.n	8013a18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	685b      	ldr	r3, [r3, #4]
 8013a06:	4a0e      	ldr	r2, [pc, #56]	@ (8013a40 <UART_AdvFeatureConfig+0x164>)
 8013a08:	4013      	ands	r3, r2
 8013a0a:	0019      	movs	r1, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	430a      	orrs	r2, r1
 8013a16:	605a      	str	r2, [r3, #4]
  }
}
 8013a18:	46c0      	nop			@ (mov r8, r8)
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	b002      	add	sp, #8
 8013a1e:	bd80      	pop	{r7, pc}
 8013a20:	fffdffff 	.word	0xfffdffff
 8013a24:	fffeffff 	.word	0xfffeffff
 8013a28:	fffbffff 	.word	0xfffbffff
 8013a2c:	ffff7fff 	.word	0xffff7fff
 8013a30:	ffffefff 	.word	0xffffefff
 8013a34:	ffffdfff 	.word	0xffffdfff
 8013a38:	ffefffff 	.word	0xffefffff
 8013a3c:	ff9fffff 	.word	0xff9fffff
 8013a40:	fff7ffff 	.word	0xfff7ffff

08013a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b092      	sub	sp, #72	@ 0x48
 8013a48:	af02      	add	r7, sp, #8
 8013a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2284      	movs	r2, #132	@ 0x84
 8013a50:	2100      	movs	r1, #0
 8013a52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013a54:	f7f7 fcfc 	bl	800b450 <HAL_GetTick>
 8013a58:	0003      	movs	r3, r0
 8013a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2208      	movs	r2, #8
 8013a64:	4013      	ands	r3, r2
 8013a66:	2b08      	cmp	r3, #8
 8013a68:	d12c      	bne.n	8013ac4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a6c:	2280      	movs	r2, #128	@ 0x80
 8013a6e:	0391      	lsls	r1, r2, #14
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	4a46      	ldr	r2, [pc, #280]	@ (8013b8c <UART_CheckIdleState+0x148>)
 8013a74:	9200      	str	r2, [sp, #0]
 8013a76:	2200      	movs	r2, #0
 8013a78:	f000 f88c 	bl	8013b94 <UART_WaitOnFlagUntilTimeout>
 8013a7c:	1e03      	subs	r3, r0, #0
 8013a7e:	d021      	beq.n	8013ac4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a80:	f3ef 8310 	mrs	r3, PRIMASK
 8013a84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8013a88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a90:	f383 8810 	msr	PRIMASK, r3
}
 8013a94:	46c0      	nop			@ (mov r8, r8)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2180      	movs	r1, #128	@ 0x80
 8013aa2:	438a      	bics	r2, r1
 8013aa4:	601a      	str	r2, [r3, #0]
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aac:	f383 8810 	msr	PRIMASK, r3
}
 8013ab0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2220      	movs	r2, #32
 8013ab6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2278      	movs	r2, #120	@ 0x78
 8013abc:	2100      	movs	r1, #0
 8013abe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013ac0:	2303      	movs	r3, #3
 8013ac2:	e05f      	b.n	8013b84 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2204      	movs	r2, #4
 8013acc:	4013      	ands	r3, r2
 8013ace:	2b04      	cmp	r3, #4
 8013ad0:	d146      	bne.n	8013b60 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ad4:	2280      	movs	r2, #128	@ 0x80
 8013ad6:	03d1      	lsls	r1, r2, #15
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	4a2c      	ldr	r2, [pc, #176]	@ (8013b8c <UART_CheckIdleState+0x148>)
 8013adc:	9200      	str	r2, [sp, #0]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f000 f858 	bl	8013b94 <UART_WaitOnFlagUntilTimeout>
 8013ae4:	1e03      	subs	r3, r0, #0
 8013ae6:	d03b      	beq.n	8013b60 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8013aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8013aee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8013af2:	2301      	movs	r3, #1
 8013af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	f383 8810 	msr	PRIMASK, r3
}
 8013afc:	46c0      	nop			@ (mov r8, r8)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4921      	ldr	r1, [pc, #132]	@ (8013b90 <UART_CheckIdleState+0x14c>)
 8013b0a:	400a      	ands	r2, r1
 8013b0c:	601a      	str	r2, [r3, #0]
 8013b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	f383 8810 	msr	PRIMASK, r3
}
 8013b18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8013b1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8013b20:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b24:	2301      	movs	r3, #1
 8013b26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	f383 8810 	msr	PRIMASK, r3
}
 8013b2e:	46c0      	nop			@ (mov r8, r8)
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	689a      	ldr	r2, [r3, #8]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2101      	movs	r1, #1
 8013b3c:	438a      	bics	r2, r1
 8013b3e:	609a      	str	r2, [r3, #8]
 8013b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b44:	6a3b      	ldr	r3, [r7, #32]
 8013b46:	f383 8810 	msr	PRIMASK, r3
}
 8013b4a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2280      	movs	r2, #128	@ 0x80
 8013b50:	2120      	movs	r1, #32
 8013b52:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2278      	movs	r2, #120	@ 0x78
 8013b58:	2100      	movs	r1, #0
 8013b5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b5c:	2303      	movs	r3, #3
 8013b5e:	e011      	b.n	8013b84 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2220      	movs	r2, #32
 8013b64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2280      	movs	r2, #128	@ 0x80
 8013b6a:	2120      	movs	r1, #32
 8013b6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2200      	movs	r2, #0
 8013b72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2278      	movs	r2, #120	@ 0x78
 8013b7e:	2100      	movs	r1, #0
 8013b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013b82:	2300      	movs	r3, #0
}
 8013b84:	0018      	movs	r0, r3
 8013b86:	46bd      	mov	sp, r7
 8013b88:	b010      	add	sp, #64	@ 0x40
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	01ffffff 	.word	0x01ffffff
 8013b90:	fffffedf 	.word	0xfffffedf

08013b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b084      	sub	sp, #16
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	603b      	str	r3, [r7, #0]
 8013ba0:	1dfb      	adds	r3, r7, #7
 8013ba2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013ba4:	e04b      	b.n	8013c3e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013ba6:	69bb      	ldr	r3, [r7, #24]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	d048      	beq.n	8013c3e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013bac:	f7f7 fc50 	bl	800b450 <HAL_GetTick>
 8013bb0:	0002      	movs	r2, r0
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	1ad3      	subs	r3, r2, r3
 8013bb6:	69ba      	ldr	r2, [r7, #24]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d302      	bcc.n	8013bc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d101      	bne.n	8013bc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8013bc2:	2303      	movs	r3, #3
 8013bc4:	e04b      	b.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	2204      	movs	r2, #4
 8013bce:	4013      	ands	r3, r2
 8013bd0:	d035      	beq.n	8013c3e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	69db      	ldr	r3, [r3, #28]
 8013bd8:	2208      	movs	r2, #8
 8013bda:	4013      	ands	r3, r2
 8013bdc:	2b08      	cmp	r3, #8
 8013bde:	d111      	bne.n	8013c04 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2208      	movs	r2, #8
 8013be6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	0018      	movs	r0, r3
 8013bec:	f000 f900 	bl	8013df0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2284      	movs	r2, #132	@ 0x84
 8013bf4:	2108      	movs	r1, #8
 8013bf6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2278      	movs	r2, #120	@ 0x78
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8013c00:	2301      	movs	r3, #1
 8013c02:	e02c      	b.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	69da      	ldr	r2, [r3, #28]
 8013c0a:	2380      	movs	r3, #128	@ 0x80
 8013c0c:	011b      	lsls	r3, r3, #4
 8013c0e:	401a      	ands	r2, r3
 8013c10:	2380      	movs	r3, #128	@ 0x80
 8013c12:	011b      	lsls	r3, r3, #4
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d112      	bne.n	8013c3e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2280      	movs	r2, #128	@ 0x80
 8013c1e:	0112      	lsls	r2, r2, #4
 8013c20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	0018      	movs	r0, r3
 8013c26:	f000 f8e3 	bl	8013df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2284      	movs	r2, #132	@ 0x84
 8013c2e:	2120      	movs	r1, #32
 8013c30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	2278      	movs	r2, #120	@ 0x78
 8013c36:	2100      	movs	r1, #0
 8013c38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013c3a:	2303      	movs	r3, #3
 8013c3c:	e00f      	b.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	69db      	ldr	r3, [r3, #28]
 8013c44:	68ba      	ldr	r2, [r7, #8]
 8013c46:	4013      	ands	r3, r2
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	1ad3      	subs	r3, r2, r3
 8013c4c:	425a      	negs	r2, r3
 8013c4e:	4153      	adcs	r3, r2
 8013c50:	b2db      	uxtb	r3, r3
 8013c52:	001a      	movs	r2, r3
 8013c54:	1dfb      	adds	r3, r7, #7
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d0a4      	beq.n	8013ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013c5c:	2300      	movs	r3, #0
}
 8013c5e:	0018      	movs	r0, r3
 8013c60:	46bd      	mov	sp, r7
 8013c62:	b004      	add	sp, #16
 8013c64:	bd80      	pop	{r7, pc}
	...

08013c68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b090      	sub	sp, #64	@ 0x40
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	1dbb      	adds	r3, r7, #6
 8013c74:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	68ba      	ldr	r2, [r7, #8]
 8013c7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	1dba      	adds	r2, r7, #6
 8013c80:	2158      	movs	r1, #88	@ 0x58
 8013c82:	8812      	ldrh	r2, [r2, #0]
 8013c84:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2284      	movs	r2, #132	@ 0x84
 8013c8a:	2100      	movs	r1, #0
 8013c8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2280      	movs	r2, #128	@ 0x80
 8013c92:	2122      	movs	r1, #34	@ 0x22
 8013c94:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d028      	beq.n	8013cf0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8013d9c <UART_Start_Receive_DMA+0x134>)
 8013ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013caa:	4a3d      	ldr	r2, [pc, #244]	@ (8013da0 <UART_Start_Receive_DMA+0x138>)
 8013cac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8013da4 <UART_Start_Receive_DMA+0x13c>)
 8013cb4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013cba:	2200      	movs	r2, #0
 8013cbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	3324      	adds	r3, #36	@ 0x24
 8013cc8:	0019      	movs	r1, r3
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cce:	001a      	movs	r2, r3
 8013cd0:	1dbb      	adds	r3, r7, #6
 8013cd2:	881b      	ldrh	r3, [r3, #0]
 8013cd4:	f7f8 f8dc 	bl	800be90 <HAL_DMA_Start_IT>
 8013cd8:	1e03      	subs	r3, r0, #0
 8013cda:	d009      	beq.n	8013cf0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	2284      	movs	r2, #132	@ 0x84
 8013ce0:	2110      	movs	r1, #16
 8013ce2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	2280      	movs	r2, #128	@ 0x80
 8013ce8:	2120      	movs	r1, #32
 8013cea:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8013cec:	2301      	movs	r3, #1
 8013cee:	e050      	b.n	8013d92 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d019      	beq.n	8013d2c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8013cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8013cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d02:	2301      	movs	r3, #1
 8013d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d08:	f383 8810 	msr	PRIMASK, r3
}
 8013d0c:	46c0      	nop			@ (mov r8, r8)
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2180      	movs	r1, #128	@ 0x80
 8013d1a:	0049      	lsls	r1, r1, #1
 8013d1c:	430a      	orrs	r2, r1
 8013d1e:	601a      	str	r2, [r3, #0]
 8013d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d22:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d26:	f383 8810 	msr	PRIMASK, r3
}
 8013d2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d30:	613b      	str	r3, [r7, #16]
  return(result);
 8013d32:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013d36:	2301      	movs	r3, #1
 8013d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	f383 8810 	msr	PRIMASK, r3
}
 8013d40:	46c0      	nop			@ (mov r8, r8)
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	689a      	ldr	r2, [r3, #8]
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	2101      	movs	r1, #1
 8013d4e:	430a      	orrs	r2, r1
 8013d50:	609a      	str	r2, [r3, #8]
 8013d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d56:	69bb      	ldr	r3, [r7, #24]
 8013d58:	f383 8810 	msr	PRIMASK, r3
}
 8013d5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8013d62:	61fb      	str	r3, [r7, #28]
  return(result);
 8013d64:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d68:	2301      	movs	r3, #1
 8013d6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d6c:	6a3b      	ldr	r3, [r7, #32]
 8013d6e:	f383 8810 	msr	PRIMASK, r3
}
 8013d72:	46c0      	nop			@ (mov r8, r8)
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	689a      	ldr	r2, [r3, #8]
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2140      	movs	r1, #64	@ 0x40
 8013d80:	430a      	orrs	r2, r1
 8013d82:	609a      	str	r2, [r3, #8]
 8013d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d8a:	f383 8810 	msr	PRIMASK, r3
}
 8013d8e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8013d90:	2300      	movs	r3, #0
}
 8013d92:	0018      	movs	r0, r3
 8013d94:	46bd      	mov	sp, r7
 8013d96:	b010      	add	sp, #64	@ 0x40
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	46c0      	nop			@ (mov r8, r8)
 8013d9c:	08013f79 	.word	0x08013f79
 8013da0:	080140ad 	.word	0x080140ad
 8013da4:	080140f5 	.word	0x080140f5

08013da8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b086      	sub	sp, #24
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013db0:	f3ef 8310 	mrs	r3, PRIMASK
 8013db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8013db6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013db8:	617b      	str	r3, [r7, #20]
 8013dba:	2301      	movs	r3, #1
 8013dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f383 8810 	msr	PRIMASK, r3
}
 8013dc4:	46c0      	nop			@ (mov r8, r8)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	21c0      	movs	r1, #192	@ 0xc0
 8013dd2:	438a      	bics	r2, r1
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	f383 8810 	msr	PRIMASK, r3
}
 8013de0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2220      	movs	r2, #32
 8013de6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8013de8:	46c0      	nop			@ (mov r8, r8)
 8013dea:	46bd      	mov	sp, r7
 8013dec:	b006      	add	sp, #24
 8013dee:	bd80      	pop	{r7, pc}

08013df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b08e      	sub	sp, #56	@ 0x38
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013df8:	f3ef 8310 	mrs	r3, PRIMASK
 8013dfc:	617b      	str	r3, [r7, #20]
  return(result);
 8013dfe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8013e02:	2301      	movs	r3, #1
 8013e04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	f383 8810 	msr	PRIMASK, r3
}
 8013e0c:	46c0      	nop			@ (mov r8, r8)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	4926      	ldr	r1, [pc, #152]	@ (8013eb4 <UART_EndRxTransfer+0xc4>)
 8013e1a:	400a      	ands	r2, r1
 8013e1c:	601a      	str	r2, [r3, #0]
 8013e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	f383 8810 	msr	PRIMASK, r3
}
 8013e28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e2e:	623b      	str	r3, [r7, #32]
  return(result);
 8013e30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e32:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e34:	2301      	movs	r3, #1
 8013e36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3a:	f383 8810 	msr	PRIMASK, r3
}
 8013e3e:	46c0      	nop			@ (mov r8, r8)
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	689a      	ldr	r2, [r3, #8]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	2101      	movs	r1, #1
 8013e4c:	438a      	bics	r2, r1
 8013e4e:	609a      	str	r2, [r3, #8]
 8013e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e56:	f383 8810 	msr	PRIMASK, r3
}
 8013e5a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d118      	bne.n	8013e96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e64:	f3ef 8310 	mrs	r3, PRIMASK
 8013e68:	60bb      	str	r3, [r7, #8]
  return(result);
 8013e6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013e6e:	2301      	movs	r3, #1
 8013e70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f383 8810 	msr	PRIMASK, r3
}
 8013e78:	46c0      	nop			@ (mov r8, r8)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2110      	movs	r1, #16
 8013e86:	438a      	bics	r2, r1
 8013e88:	601a      	str	r2, [r3, #0]
 8013e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	f383 8810 	msr	PRIMASK, r3
}
 8013e94:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2280      	movs	r2, #128	@ 0x80
 8013e9a:	2120      	movs	r1, #32
 8013e9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8013eaa:	46c0      	nop			@ (mov r8, r8)
 8013eac:	46bd      	mov	sp, r7
 8013eae:	b00e      	add	sp, #56	@ 0x38
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	46c0      	nop			@ (mov r8, r8)
 8013eb4:	fffffedf 	.word	0xfffffedf

08013eb8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b08c      	sub	sp, #48	@ 0x30
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	2220      	movs	r2, #32
 8013ece:	4013      	ands	r3, r2
 8013ed0:	d135      	bne.n	8013f3e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8013ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ed4:	2252      	movs	r2, #82	@ 0x52
 8013ed6:	2100      	movs	r1, #0
 8013ed8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013eda:	f3ef 8310 	mrs	r3, PRIMASK
 8013ede:	60fb      	str	r3, [r7, #12]
  return(result);
 8013ee0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	f383 8810 	msr	PRIMASK, r3
}
 8013eee:	46c0      	nop			@ (mov r8, r8)
 8013ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	689a      	ldr	r2, [r3, #8]
 8013ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2180      	movs	r1, #128	@ 0x80
 8013efc:	438a      	bics	r2, r1
 8013efe:	609a      	str	r2, [r3, #8]
 8013f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	f383 8810 	msr	PRIMASK, r3
}
 8013f0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8013f10:	61bb      	str	r3, [r7, #24]
  return(result);
 8013f12:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f16:	2301      	movs	r3, #1
 8013f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	f383 8810 	msr	PRIMASK, r3
}
 8013f20:	46c0      	nop			@ (mov r8, r8)
 8013f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2140      	movs	r1, #64	@ 0x40
 8013f2e:	430a      	orrs	r2, r1
 8013f30:	601a      	str	r2, [r3, #0]
 8013f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f36:	6a3b      	ldr	r3, [r7, #32]
 8013f38:	f383 8810 	msr	PRIMASK, r3
}
 8013f3c:	e006      	b.n	8013f4c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8013f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f40:	228c      	movs	r2, #140	@ 0x8c
 8013f42:	589b      	ldr	r3, [r3, r2]
 8013f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013f46:	0010      	movs	r0, r2
 8013f48:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013f4a:	46c0      	nop			@ (mov r8, r8)
 8013f4c:	46c0      	nop			@ (mov r8, r8)
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	b00c      	add	sp, #48	@ 0x30
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2288      	movs	r2, #136	@ 0x88
 8013f66:	589b      	ldr	r3, [r3, r2]
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	0010      	movs	r0, r2
 8013f6c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013f6e:	46c0      	nop			@ (mov r8, r8)
 8013f70:	46bd      	mov	sp, r7
 8013f72:	b004      	add	sp, #16
 8013f74:	bd80      	pop	{r7, pc}
	...

08013f78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b094      	sub	sp, #80	@ 0x50
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f84:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	2220      	movs	r2, #32
 8013f8e:	4013      	ands	r3, r2
 8013f90:	d16f      	bne.n	8014072 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8013f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f94:	225a      	movs	r2, #90	@ 0x5a
 8013f96:	2100      	movs	r1, #0
 8013f98:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8013fa0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	f383 8810 	msr	PRIMASK, r3
}
 8013fae:	46c0      	nop			@ (mov r8, r8)
 8013fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	493b      	ldr	r1, [pc, #236]	@ (80140a8 <UART_DMAReceiveCplt+0x130>)
 8013fbc:	400a      	ands	r2, r1
 8013fbe:	601a      	str	r2, [r3, #0]
 8013fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013fc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fc4:	6a3b      	ldr	r3, [r7, #32]
 8013fc6:	f383 8810 	msr	PRIMASK, r3
}
 8013fca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8013fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fdc:	f383 8810 	msr	PRIMASK, r3
}
 8013fe0:	46c0      	nop			@ (mov r8, r8)
 8013fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	689a      	ldr	r2, [r3, #8]
 8013fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	2101      	movs	r1, #1
 8013fee:	438a      	bics	r2, r1
 8013ff0:	609a      	str	r2, [r3, #8]
 8013ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff8:	f383 8810 	msr	PRIMASK, r3
}
 8013ffc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8014002:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8014004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014006:	643b      	str	r3, [r7, #64]	@ 0x40
 8014008:	2301      	movs	r3, #1
 801400a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801400e:	f383 8810 	msr	PRIMASK, r3
}
 8014012:	46c0      	nop			@ (mov r8, r8)
 8014014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	689a      	ldr	r2, [r3, #8]
 801401a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2140      	movs	r1, #64	@ 0x40
 8014020:	438a      	bics	r2, r1
 8014022:	609a      	str	r2, [r3, #8]
 8014024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014026:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801402a:	f383 8810 	msr	PRIMASK, r3
}
 801402e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014032:	2280      	movs	r2, #128	@ 0x80
 8014034:	2120      	movs	r1, #32
 8014036:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801403a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801403c:	2b01      	cmp	r3, #1
 801403e:	d118      	bne.n	8014072 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014040:	f3ef 8310 	mrs	r3, PRIMASK
 8014044:	60fb      	str	r3, [r7, #12]
  return(result);
 8014046:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801404a:	2301      	movs	r3, #1
 801404c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	f383 8810 	msr	PRIMASK, r3
}
 8014054:	46c0      	nop			@ (mov r8, r8)
 8014056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	2110      	movs	r1, #16
 8014062:	438a      	bics	r2, r1
 8014064:	601a      	str	r2, [r3, #0]
 8014066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	f383 8810 	msr	PRIMASK, r3
}
 8014070:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014074:	2200      	movs	r2, #0
 8014076:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801407a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801407c:	2b01      	cmp	r3, #1
 801407e:	d109      	bne.n	8014094 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8014080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014082:	22ac      	movs	r2, #172	@ 0xac
 8014084:	589b      	ldr	r3, [r3, r2]
 8014086:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014088:	2158      	movs	r1, #88	@ 0x58
 801408a:	5a51      	ldrh	r1, [r2, r1]
 801408c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801408e:	0010      	movs	r0, r2
 8014090:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014092:	e005      	b.n	80140a0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8014094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014096:	2294      	movs	r2, #148	@ 0x94
 8014098:	589b      	ldr	r3, [r3, r2]
 801409a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801409c:	0010      	movs	r0, r2
 801409e:	4798      	blx	r3
}
 80140a0:	46c0      	nop			@ (mov r8, r8)
 80140a2:	46bd      	mov	sp, r7
 80140a4:	b014      	add	sp, #80	@ 0x50
 80140a6:	bd80      	pop	{r7, pc}
 80140a8:	fffffeff 	.word	0xfffffeff

080140ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b084      	sub	sp, #16
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2201      	movs	r2, #1
 80140be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d10b      	bne.n	80140e0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	22ac      	movs	r2, #172	@ 0xac
 80140cc:	589b      	ldr	r3, [r3, r2]
 80140ce:	68fa      	ldr	r2, [r7, #12]
 80140d0:	2158      	movs	r1, #88	@ 0x58
 80140d2:	5a52      	ldrh	r2, [r2, r1]
 80140d4:	0852      	lsrs	r2, r2, #1
 80140d6:	b291      	uxth	r1, r2
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	0010      	movs	r0, r2
 80140dc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80140de:	e005      	b.n	80140ec <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2290      	movs	r2, #144	@ 0x90
 80140e4:	589b      	ldr	r3, [r3, r2]
 80140e6:	68fa      	ldr	r2, [r7, #12]
 80140e8:	0010      	movs	r0, r2
 80140ea:	4798      	blx	r3
}
 80140ec:	46c0      	nop			@ (mov r8, r8)
 80140ee:	46bd      	mov	sp, r7
 80140f0:	b004      	add	sp, #16
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b086      	sub	sp, #24
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014100:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014106:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	2280      	movs	r2, #128	@ 0x80
 801410c:	589b      	ldr	r3, [r3, r2]
 801410e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	689b      	ldr	r3, [r3, #8]
 8014116:	2280      	movs	r2, #128	@ 0x80
 8014118:	4013      	ands	r3, r2
 801411a:	2b80      	cmp	r3, #128	@ 0x80
 801411c:	d10a      	bne.n	8014134 <UART_DMAError+0x40>
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	2b21      	cmp	r3, #33	@ 0x21
 8014122:	d107      	bne.n	8014134 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	2252      	movs	r2, #82	@ 0x52
 8014128:	2100      	movs	r1, #0
 801412a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	0018      	movs	r0, r3
 8014130:	f7ff fe3a 	bl	8013da8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	689b      	ldr	r3, [r3, #8]
 801413a:	2240      	movs	r2, #64	@ 0x40
 801413c:	4013      	ands	r3, r2
 801413e:	2b40      	cmp	r3, #64	@ 0x40
 8014140:	d10a      	bne.n	8014158 <UART_DMAError+0x64>
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	2b22      	cmp	r3, #34	@ 0x22
 8014146:	d107      	bne.n	8014158 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	225a      	movs	r2, #90	@ 0x5a
 801414c:	2100      	movs	r1, #0
 801414e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	0018      	movs	r0, r3
 8014154:	f7ff fe4c 	bl	8013df0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	2284      	movs	r2, #132	@ 0x84
 801415c:	589b      	ldr	r3, [r3, r2]
 801415e:	2210      	movs	r2, #16
 8014160:	431a      	orrs	r2, r3
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	2184      	movs	r1, #132	@ 0x84
 8014166:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	2298      	movs	r2, #152	@ 0x98
 801416c:	589b      	ldr	r3, [r3, r2]
 801416e:	697a      	ldr	r2, [r7, #20]
 8014170:	0010      	movs	r0, r2
 8014172:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014174:	46c0      	nop			@ (mov r8, r8)
 8014176:	46bd      	mov	sp, r7
 8014178:	b006      	add	sp, #24
 801417a:	bd80      	pop	{r7, pc}

0801417c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	225a      	movs	r2, #90	@ 0x5a
 801418e:	2100      	movs	r1, #0
 8014190:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2252      	movs	r2, #82	@ 0x52
 8014196:	2100      	movs	r1, #0
 8014198:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2298      	movs	r2, #152	@ 0x98
 801419e:	589b      	ldr	r3, [r3, r2]
 80141a0:	68fa      	ldr	r2, [r7, #12]
 80141a2:	0010      	movs	r0, r2
 80141a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80141a6:	46c0      	nop			@ (mov r8, r8)
 80141a8:	46bd      	mov	sp, r7
 80141aa:	b004      	add	sp, #16
 80141ac:	bd80      	pop	{r7, pc}

080141ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b086      	sub	sp, #24
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80141b6:	f3ef 8310 	mrs	r3, PRIMASK
 80141ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80141bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80141be:	617b      	str	r3, [r7, #20]
 80141c0:	2301      	movs	r3, #1
 80141c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	f383 8810 	msr	PRIMASK, r3
}
 80141ca:	46c0      	nop			@ (mov r8, r8)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2140      	movs	r1, #64	@ 0x40
 80141d8:	438a      	bics	r2, r1
 80141da:	601a      	str	r2, [r3, #0]
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	f383 8810 	msr	PRIMASK, r3
}
 80141e6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2220      	movs	r2, #32
 80141ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2200      	movs	r2, #0
 80141f2:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	228c      	movs	r2, #140	@ 0x8c
 80141f8:	589b      	ldr	r3, [r3, r2]
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	0010      	movs	r0, r2
 80141fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014200:	46c0      	nop			@ (mov r8, r8)
 8014202:	46bd      	mov	sp, r7
 8014204:	b006      	add	sp, #24
 8014206:	bd80      	pop	{r7, pc}

08014208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014210:	46c0      	nop			@ (mov r8, r8)
 8014212:	46bd      	mov	sp, r7
 8014214:	b002      	add	sp, #8
 8014216:	bd80      	pop	{r7, pc}

08014218 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2244      	movs	r2, #68	@ 0x44
 8014224:	2100      	movs	r1, #0
 8014226:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8014228:	4b05      	ldr	r3, [pc, #20]	@ (8014240 <USB_EnableGlobalInt+0x28>)
 801422a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	b299      	uxth	r1, r3
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2240      	movs	r2, #64	@ 0x40
 8014234:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014236:	2300      	movs	r3, #0
}
 8014238:	0018      	movs	r0, r3
 801423a:	46bd      	mov	sp, r7
 801423c:	b004      	add	sp, #16
 801423e:	bd80      	pop	{r7, pc}
 8014240:	0000bf80 	.word	0x0000bf80

08014244 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801424c:	4b09      	ldr	r3, [pc, #36]	@ (8014274 <USB_DisableGlobalInt+0x30>)
 801424e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2240      	movs	r2, #64	@ 0x40
 8014254:	5a9b      	ldrh	r3, [r3, r2]
 8014256:	b29b      	uxth	r3, r3
 8014258:	68fa      	ldr	r2, [r7, #12]
 801425a:	b292      	uxth	r2, r2
 801425c:	43d2      	mvns	r2, r2
 801425e:	b292      	uxth	r2, r2
 8014260:	4013      	ands	r3, r2
 8014262:	b299      	uxth	r1, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2240      	movs	r2, #64	@ 0x40
 8014268:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801426a:	2300      	movs	r3, #0
}
 801426c:	0018      	movs	r0, r3
 801426e:	46bd      	mov	sp, r7
 8014270:	b004      	add	sp, #16
 8014272:	bd80      	pop	{r7, pc}
 8014274:	0000bf80 	.word	0x0000bf80

08014278 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8014278:	b084      	sub	sp, #16
 801427a:	b590      	push	{r4, r7, lr}
 801427c:	b083      	sub	sp, #12
 801427e:	af00      	add	r7, sp, #0
 8014280:	6078      	str	r0, [r7, #4]
 8014282:	2004      	movs	r0, #4
 8014284:	2410      	movs	r4, #16
 8014286:	1900      	adds	r0, r0, r4
 8014288:	2408      	movs	r4, #8
 801428a:	46a4      	mov	ip, r4
 801428c:	44bc      	add	ip, r7
 801428e:	4460      	add	r0, ip
 8014290:	6001      	str	r1, [r0, #0]
 8014292:	6042      	str	r2, [r0, #4]
 8014294:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2240      	movs	r2, #64	@ 0x40
 801429a:	2101      	movs	r1, #1
 801429c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2240      	movs	r2, #64	@ 0x40
 80142a2:	2100      	movs	r1, #0
 80142a4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2244      	movs	r2, #68	@ 0x44
 80142aa:	2100      	movs	r1, #0
 80142ac:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2250      	movs	r2, #80	@ 0x50
 80142b2:	2100      	movs	r1, #0
 80142b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80142b6:	2300      	movs	r3, #0
}
 80142b8:	0018      	movs	r0, r3
 80142ba:	46bd      	mov	sp, r7
 80142bc:	b003      	add	sp, #12
 80142be:	bc90      	pop	{r4, r7}
 80142c0:	bc08      	pop	{r3}
 80142c2:	b004      	add	sp, #16
 80142c4:	4718      	bx	r3
	...

080142c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b09c      	sub	sp, #112	@ 0x70
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80142d2:	236f      	movs	r3, #111	@ 0x6f
 80142d4:	18fb      	adds	r3, r7, r3
 80142d6:	2200      	movs	r2, #0
 80142d8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	781b      	ldrb	r3, [r3, #0]
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	18d3      	adds	r3, r2, r3
 80142e4:	881b      	ldrh	r3, [r3, #0]
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	236c      	movs	r3, #108	@ 0x6c
 80142ea:	18fb      	adds	r3, r7, r3
 80142ec:	49a3      	ldr	r1, [pc, #652]	@ (801457c <USB_ActivateEndpoint+0x2b4>)
 80142ee:	400a      	ands	r2, r1
 80142f0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	78db      	ldrb	r3, [r3, #3]
 80142f6:	2b03      	cmp	r3, #3
 80142f8:	d017      	beq.n	801432a <USB_ActivateEndpoint+0x62>
 80142fa:	dc28      	bgt.n	801434e <USB_ActivateEndpoint+0x86>
 80142fc:	2b02      	cmp	r3, #2
 80142fe:	d00e      	beq.n	801431e <USB_ActivateEndpoint+0x56>
 8014300:	dc25      	bgt.n	801434e <USB_ActivateEndpoint+0x86>
 8014302:	2b00      	cmp	r3, #0
 8014304:	d002      	beq.n	801430c <USB_ActivateEndpoint+0x44>
 8014306:	2b01      	cmp	r3, #1
 8014308:	d018      	beq.n	801433c <USB_ActivateEndpoint+0x74>
 801430a:	e020      	b.n	801434e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801430c:	226c      	movs	r2, #108	@ 0x6c
 801430e:	18bb      	adds	r3, r7, r2
 8014310:	18ba      	adds	r2, r7, r2
 8014312:	8812      	ldrh	r2, [r2, #0]
 8014314:	2180      	movs	r1, #128	@ 0x80
 8014316:	0089      	lsls	r1, r1, #2
 8014318:	430a      	orrs	r2, r1
 801431a:	801a      	strh	r2, [r3, #0]
      break;
 801431c:	e01c      	b.n	8014358 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801431e:	226c      	movs	r2, #108	@ 0x6c
 8014320:	18bb      	adds	r3, r7, r2
 8014322:	18ba      	adds	r2, r7, r2
 8014324:	8812      	ldrh	r2, [r2, #0]
 8014326:	801a      	strh	r2, [r3, #0]
      break;
 8014328:	e016      	b.n	8014358 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801432a:	226c      	movs	r2, #108	@ 0x6c
 801432c:	18bb      	adds	r3, r7, r2
 801432e:	18ba      	adds	r2, r7, r2
 8014330:	8812      	ldrh	r2, [r2, #0]
 8014332:	21c0      	movs	r1, #192	@ 0xc0
 8014334:	00c9      	lsls	r1, r1, #3
 8014336:	430a      	orrs	r2, r1
 8014338:	801a      	strh	r2, [r3, #0]
      break;
 801433a:	e00d      	b.n	8014358 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801433c:	226c      	movs	r2, #108	@ 0x6c
 801433e:	18bb      	adds	r3, r7, r2
 8014340:	18ba      	adds	r2, r7, r2
 8014342:	8812      	ldrh	r2, [r2, #0]
 8014344:	2180      	movs	r1, #128	@ 0x80
 8014346:	00c9      	lsls	r1, r1, #3
 8014348:	430a      	orrs	r2, r1
 801434a:	801a      	strh	r2, [r3, #0]
      break;
 801434c:	e004      	b.n	8014358 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801434e:	236f      	movs	r3, #111	@ 0x6f
 8014350:	18fb      	adds	r3, r7, r3
 8014352:	2201      	movs	r2, #1
 8014354:	701a      	strb	r2, [r3, #0]
      break;
 8014356:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	18d3      	adds	r3, r2, r3
 8014362:	226c      	movs	r2, #108	@ 0x6c
 8014364:	18ba      	adds	r2, r7, r2
 8014366:	8812      	ldrh	r2, [r2, #0]
 8014368:	4985      	ldr	r1, [pc, #532]	@ (8014580 <USB_ActivateEndpoint+0x2b8>)
 801436a:	430a      	orrs	r2, r1
 801436c:	b292      	uxth	r2, r2
 801436e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	009b      	lsls	r3, r3, #2
 8014378:	18d3      	adds	r3, r2, r3
 801437a:	881b      	ldrh	r3, [r3, #0]
 801437c:	b29b      	uxth	r3, r3
 801437e:	b21b      	sxth	r3, r3
 8014380:	4a80      	ldr	r2, [pc, #512]	@ (8014584 <USB_ActivateEndpoint+0x2bc>)
 8014382:	4013      	ands	r3, r2
 8014384:	b21a      	sxth	r2, r3
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	b21b      	sxth	r3, r3
 801438c:	4313      	orrs	r3, r2
 801438e:	b21a      	sxth	r2, r3
 8014390:	2166      	movs	r1, #102	@ 0x66
 8014392:	187b      	adds	r3, r7, r1
 8014394:	801a      	strh	r2, [r3, #0]
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	781b      	ldrb	r3, [r3, #0]
 801439c:	009b      	lsls	r3, r3, #2
 801439e:	18d3      	adds	r3, r2, r3
 80143a0:	187a      	adds	r2, r7, r1
 80143a2:	8812      	ldrh	r2, [r2, #0]
 80143a4:	4976      	ldr	r1, [pc, #472]	@ (8014580 <USB_ActivateEndpoint+0x2b8>)
 80143a6:	430a      	orrs	r2, r1
 80143a8:	b292      	uxth	r2, r2
 80143aa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	7b1b      	ldrb	r3, [r3, #12]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d000      	beq.n	80143b6 <USB_ActivateEndpoint+0xee>
 80143b4:	e178      	b.n	80146a8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	785b      	ldrb	r3, [r3, #1]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d100      	bne.n	80143c0 <USB_ActivateEndpoint+0xf8>
 80143be:	e07a      	b.n	80144b6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	61bb      	str	r3, [r7, #24]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2250      	movs	r2, #80	@ 0x50
 80143c8:	5a9b      	ldrh	r3, [r3, r2]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	001a      	movs	r2, r3
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	189b      	adds	r3, r3, r2
 80143d2:	61bb      	str	r3, [r7, #24]
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	00da      	lsls	r2, r3, #3
 80143da:	69bb      	ldr	r3, [r7, #24]
 80143dc:	18d3      	adds	r3, r2, r3
 80143de:	2280      	movs	r2, #128	@ 0x80
 80143e0:	00d2      	lsls	r2, r2, #3
 80143e2:	4694      	mov	ip, r2
 80143e4:	4463      	add	r3, ip
 80143e6:	617b      	str	r3, [r7, #20]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	88db      	ldrh	r3, [r3, #6]
 80143ec:	085b      	lsrs	r3, r3, #1
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	18db      	adds	r3, r3, r3
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80143f8:	687a      	ldr	r2, [r7, #4]
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	18d2      	adds	r2, r2, r3
 8014402:	2112      	movs	r1, #18
 8014404:	187b      	adds	r3, r7, r1
 8014406:	8812      	ldrh	r2, [r2, #0]
 8014408:	801a      	strh	r2, [r3, #0]
 801440a:	187b      	adds	r3, r7, r1
 801440c:	881b      	ldrh	r3, [r3, #0]
 801440e:	2240      	movs	r2, #64	@ 0x40
 8014410:	4013      	ands	r3, r2
 8014412:	d016      	beq.n	8014442 <USB_ActivateEndpoint+0x17a>
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	009b      	lsls	r3, r3, #2
 801441c:	18d3      	adds	r3, r2, r3
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	b29a      	uxth	r2, r3
 8014422:	2010      	movs	r0, #16
 8014424:	183b      	adds	r3, r7, r0
 8014426:	4957      	ldr	r1, [pc, #348]	@ (8014584 <USB_ActivateEndpoint+0x2bc>)
 8014428:	400a      	ands	r2, r1
 801442a:	801a      	strh	r2, [r3, #0]
 801442c:	687a      	ldr	r2, [r7, #4]
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	18d3      	adds	r3, r2, r3
 8014436:	183a      	adds	r2, r7, r0
 8014438:	8812      	ldrh	r2, [r2, #0]
 801443a:	4953      	ldr	r1, [pc, #332]	@ (8014588 <USB_ActivateEndpoint+0x2c0>)
 801443c:	430a      	orrs	r2, r1
 801443e:	b292      	uxth	r2, r2
 8014440:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	78db      	ldrb	r3, [r3, #3]
 8014446:	2b01      	cmp	r3, #1
 8014448:	d01d      	beq.n	8014486 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801444a:	687a      	ldr	r2, [r7, #4]
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	009b      	lsls	r3, r3, #2
 8014452:	18d3      	adds	r3, r2, r3
 8014454:	881b      	ldrh	r3, [r3, #0]
 8014456:	b29a      	uxth	r2, r3
 8014458:	200c      	movs	r0, #12
 801445a:	183b      	adds	r3, r7, r0
 801445c:	494b      	ldr	r1, [pc, #300]	@ (801458c <USB_ActivateEndpoint+0x2c4>)
 801445e:	400a      	ands	r2, r1
 8014460:	801a      	strh	r2, [r3, #0]
 8014462:	183b      	adds	r3, r7, r0
 8014464:	183a      	adds	r2, r7, r0
 8014466:	8812      	ldrh	r2, [r2, #0]
 8014468:	2120      	movs	r1, #32
 801446a:	404a      	eors	r2, r1
 801446c:	801a      	strh	r2, [r3, #0]
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	18d3      	adds	r3, r2, r3
 8014478:	183a      	adds	r2, r7, r0
 801447a:	8812      	ldrh	r2, [r2, #0]
 801447c:	4940      	ldr	r1, [pc, #256]	@ (8014580 <USB_ActivateEndpoint+0x2b8>)
 801447e:	430a      	orrs	r2, r1
 8014480:	b292      	uxth	r2, r2
 8014482:	801a      	strh	r2, [r3, #0]
 8014484:	e2b4      	b.n	80149f0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014486:	687a      	ldr	r2, [r7, #4]
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	18d3      	adds	r3, r2, r3
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	b29a      	uxth	r2, r3
 8014494:	200e      	movs	r0, #14
 8014496:	183b      	adds	r3, r7, r0
 8014498:	493c      	ldr	r1, [pc, #240]	@ (801458c <USB_ActivateEndpoint+0x2c4>)
 801449a:	400a      	ands	r2, r1
 801449c:	801a      	strh	r2, [r3, #0]
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	781b      	ldrb	r3, [r3, #0]
 80144a4:	009b      	lsls	r3, r3, #2
 80144a6:	18d3      	adds	r3, r2, r3
 80144a8:	183a      	adds	r2, r7, r0
 80144aa:	8812      	ldrh	r2, [r2, #0]
 80144ac:	4934      	ldr	r1, [pc, #208]	@ (8014580 <USB_ActivateEndpoint+0x2b8>)
 80144ae:	430a      	orrs	r2, r1
 80144b0:	b292      	uxth	r2, r2
 80144b2:	801a      	strh	r2, [r3, #0]
 80144b4:	e29c      	b.n	80149f0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2250      	movs	r2, #80	@ 0x50
 80144be:	5a9b      	ldrh	r3, [r3, r2]
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	001a      	movs	r2, r3
 80144c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144c6:	189b      	adds	r3, r3, r2
 80144c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	00da      	lsls	r2, r3, #3
 80144d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144d2:	18d3      	adds	r3, r2, r3
 80144d4:	4a2e      	ldr	r2, [pc, #184]	@ (8014590 <USB_ActivateEndpoint+0x2c8>)
 80144d6:	4694      	mov	ip, r2
 80144d8:	4463      	add	r3, ip
 80144da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	88db      	ldrh	r3, [r3, #6]
 80144e0:	085b      	lsrs	r3, r3, #1
 80144e2:	b29b      	uxth	r3, r3
 80144e4:	18db      	adds	r3, r3, r3
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2250      	movs	r2, #80	@ 0x50
 80144f4:	5a9b      	ldrh	r3, [r3, r2]
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	001a      	movs	r2, r3
 80144fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144fc:	189b      	adds	r3, r3, r2
 80144fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	00da      	lsls	r2, r3, #3
 8014506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014508:	18d3      	adds	r3, r2, r3
 801450a:	4a22      	ldr	r2, [pc, #136]	@ (8014594 <USB_ActivateEndpoint+0x2cc>)
 801450c:	4694      	mov	ip, r2
 801450e:	4463      	add	r3, ip
 8014510:	627b      	str	r3, [r7, #36]	@ 0x24
 8014512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	b29b      	uxth	r3, r3
 8014518:	059b      	lsls	r3, r3, #22
 801451a:	0d9b      	lsrs	r3, r3, #22
 801451c:	b29a      	uxth	r2, r3
 801451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014520:	801a      	strh	r2, [r3, #0]
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	691b      	ldr	r3, [r3, #16]
 8014526:	2b3e      	cmp	r3, #62	@ 0x3e
 8014528:	d91a      	bls.n	8014560 <USB_ActivateEndpoint+0x298>
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	691b      	ldr	r3, [r3, #16]
 801452e:	095b      	lsrs	r3, r3, #5
 8014530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	691b      	ldr	r3, [r3, #16]
 8014536:	221f      	movs	r2, #31
 8014538:	4013      	ands	r3, r2
 801453a:	d102      	bne.n	8014542 <USB_ActivateEndpoint+0x27a>
 801453c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801453e:	3b01      	subs	r3, #1
 8014540:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014544:	881b      	ldrh	r3, [r3, #0]
 8014546:	b29a      	uxth	r2, r3
 8014548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801454a:	b29b      	uxth	r3, r3
 801454c:	029b      	lsls	r3, r3, #10
 801454e:	b29b      	uxth	r3, r3
 8014550:	4313      	orrs	r3, r2
 8014552:	b29b      	uxth	r3, r3
 8014554:	4a10      	ldr	r2, [pc, #64]	@ (8014598 <USB_ActivateEndpoint+0x2d0>)
 8014556:	4313      	orrs	r3, r2
 8014558:	b29a      	uxth	r2, r3
 801455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801455c:	801a      	strh	r2, [r3, #0]
 801455e:	e034      	b.n	80145ca <USB_ActivateEndpoint+0x302>
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	691b      	ldr	r3, [r3, #16]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d119      	bne.n	801459c <USB_ActivateEndpoint+0x2d4>
 8014568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801456a:	881b      	ldrh	r3, [r3, #0]
 801456c:	b29b      	uxth	r3, r3
 801456e:	4a0a      	ldr	r2, [pc, #40]	@ (8014598 <USB_ActivateEndpoint+0x2d0>)
 8014570:	4313      	orrs	r3, r2
 8014572:	b29a      	uxth	r2, r3
 8014574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014576:	801a      	strh	r2, [r3, #0]
 8014578:	e027      	b.n	80145ca <USB_ActivateEndpoint+0x302>
 801457a:	46c0      	nop			@ (mov r8, r8)
 801457c:	ffff898f 	.word	0xffff898f
 8014580:	ffff8080 	.word	0xffff8080
 8014584:	ffff8f8f 	.word	0xffff8f8f
 8014588:	ffff80c0 	.word	0xffff80c0
 801458c:	ffff8fbf 	.word	0xffff8fbf
 8014590:	00000404 	.word	0x00000404
 8014594:	00000406 	.word	0x00000406
 8014598:	ffff8000 	.word	0xffff8000
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	691b      	ldr	r3, [r3, #16]
 80145a0:	085b      	lsrs	r3, r3, #1
 80145a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	691b      	ldr	r3, [r3, #16]
 80145a8:	2201      	movs	r2, #1
 80145aa:	4013      	ands	r3, r2
 80145ac:	d002      	beq.n	80145b4 <USB_ActivateEndpoint+0x2ec>
 80145ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80145b0:	3301      	adds	r3, #1
 80145b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145b6:	881b      	ldrh	r3, [r3, #0]
 80145b8:	b29a      	uxth	r2, r3
 80145ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80145bc:	b29b      	uxth	r3, r3
 80145be:	029b      	lsls	r3, r3, #10
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	4313      	orrs	r3, r2
 80145c4:	b29a      	uxth	r2, r3
 80145c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	18d2      	adds	r2, r2, r3
 80145d4:	2122      	movs	r1, #34	@ 0x22
 80145d6:	187b      	adds	r3, r7, r1
 80145d8:	8812      	ldrh	r2, [r2, #0]
 80145da:	801a      	strh	r2, [r3, #0]
 80145dc:	187b      	adds	r3, r7, r1
 80145de:	881a      	ldrh	r2, [r3, #0]
 80145e0:	2380      	movs	r3, #128	@ 0x80
 80145e2:	01db      	lsls	r3, r3, #7
 80145e4:	4013      	ands	r3, r2
 80145e6:	d016      	beq.n	8014616 <USB_ActivateEndpoint+0x34e>
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	18d3      	adds	r3, r2, r3
 80145f2:	881b      	ldrh	r3, [r3, #0]
 80145f4:	b29a      	uxth	r2, r3
 80145f6:	2020      	movs	r0, #32
 80145f8:	183b      	adds	r3, r7, r0
 80145fa:	49dd      	ldr	r1, [pc, #884]	@ (8014970 <USB_ActivateEndpoint+0x6a8>)
 80145fc:	400a      	ands	r2, r1
 80145fe:	801a      	strh	r2, [r3, #0]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	18d3      	adds	r3, r2, r3
 801460a:	183a      	adds	r2, r7, r0
 801460c:	8812      	ldrh	r2, [r2, #0]
 801460e:	49d9      	ldr	r1, [pc, #868]	@ (8014974 <USB_ActivateEndpoint+0x6ac>)
 8014610:	430a      	orrs	r2, r1
 8014612:	b292      	uxth	r2, r2
 8014614:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d125      	bne.n	801466a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801461e:	687a      	ldr	r2, [r7, #4]
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	18d3      	adds	r3, r2, r3
 8014628:	881b      	ldrh	r3, [r3, #0]
 801462a:	b29a      	uxth	r2, r3
 801462c:	201c      	movs	r0, #28
 801462e:	183b      	adds	r3, r7, r0
 8014630:	49d1      	ldr	r1, [pc, #836]	@ (8014978 <USB_ActivateEndpoint+0x6b0>)
 8014632:	400a      	ands	r2, r1
 8014634:	801a      	strh	r2, [r3, #0]
 8014636:	183b      	adds	r3, r7, r0
 8014638:	183a      	adds	r2, r7, r0
 801463a:	8812      	ldrh	r2, [r2, #0]
 801463c:	2180      	movs	r1, #128	@ 0x80
 801463e:	0149      	lsls	r1, r1, #5
 8014640:	404a      	eors	r2, r1
 8014642:	801a      	strh	r2, [r3, #0]
 8014644:	183b      	adds	r3, r7, r0
 8014646:	183a      	adds	r2, r7, r0
 8014648:	8812      	ldrh	r2, [r2, #0]
 801464a:	2180      	movs	r1, #128	@ 0x80
 801464c:	0189      	lsls	r1, r1, #6
 801464e:	404a      	eors	r2, r1
 8014650:	801a      	strh	r2, [r3, #0]
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	009b      	lsls	r3, r3, #2
 801465a:	18d3      	adds	r3, r2, r3
 801465c:	183a      	adds	r2, r7, r0
 801465e:	8812      	ldrh	r2, [r2, #0]
 8014660:	49c6      	ldr	r1, [pc, #792]	@ (801497c <USB_ActivateEndpoint+0x6b4>)
 8014662:	430a      	orrs	r2, r1
 8014664:	b292      	uxth	r2, r2
 8014666:	801a      	strh	r2, [r3, #0]
 8014668:	e1c2      	b.n	80149f0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	18d3      	adds	r3, r2, r3
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	b29a      	uxth	r2, r3
 8014678:	201e      	movs	r0, #30
 801467a:	183b      	adds	r3, r7, r0
 801467c:	49be      	ldr	r1, [pc, #760]	@ (8014978 <USB_ActivateEndpoint+0x6b0>)
 801467e:	400a      	ands	r2, r1
 8014680:	801a      	strh	r2, [r3, #0]
 8014682:	183b      	adds	r3, r7, r0
 8014684:	183a      	adds	r2, r7, r0
 8014686:	8812      	ldrh	r2, [r2, #0]
 8014688:	2180      	movs	r1, #128	@ 0x80
 801468a:	0189      	lsls	r1, r1, #6
 801468c:	404a      	eors	r2, r1
 801468e:	801a      	strh	r2, [r3, #0]
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	18d3      	adds	r3, r2, r3
 801469a:	183a      	adds	r2, r7, r0
 801469c:	8812      	ldrh	r2, [r2, #0]
 801469e:	49b7      	ldr	r1, [pc, #732]	@ (801497c <USB_ActivateEndpoint+0x6b4>)
 80146a0:	430a      	orrs	r2, r1
 80146a2:	b292      	uxth	r2, r2
 80146a4:	801a      	strh	r2, [r3, #0]
 80146a6:	e1a3      	b.n	80149f0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	78db      	ldrb	r3, [r3, #3]
 80146ac:	2b02      	cmp	r3, #2
 80146ae:	d117      	bne.n	80146e0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80146b0:	687a      	ldr	r2, [r7, #4]
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	18d3      	adds	r3, r2, r3
 80146ba:	881b      	ldrh	r3, [r3, #0]
 80146bc:	b29a      	uxth	r2, r3
 80146be:	2062      	movs	r0, #98	@ 0x62
 80146c0:	183b      	adds	r3, r7, r0
 80146c2:	49ab      	ldr	r1, [pc, #684]	@ (8014970 <USB_ActivateEndpoint+0x6a8>)
 80146c4:	400a      	ands	r2, r1
 80146c6:	801a      	strh	r2, [r3, #0]
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	18d3      	adds	r3, r2, r3
 80146d2:	183a      	adds	r2, r7, r0
 80146d4:	8812      	ldrh	r2, [r2, #0]
 80146d6:	49aa      	ldr	r1, [pc, #680]	@ (8014980 <USB_ActivateEndpoint+0x6b8>)
 80146d8:	430a      	orrs	r2, r1
 80146da:	b292      	uxth	r2, r2
 80146dc:	801a      	strh	r2, [r3, #0]
 80146de:	e016      	b.n	801470e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	009b      	lsls	r3, r3, #2
 80146e8:	18d3      	adds	r3, r2, r3
 80146ea:	881b      	ldrh	r3, [r3, #0]
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	2064      	movs	r0, #100	@ 0x64
 80146f0:	183b      	adds	r3, r7, r0
 80146f2:	49a4      	ldr	r1, [pc, #656]	@ (8014984 <USB_ActivateEndpoint+0x6bc>)
 80146f4:	400a      	ands	r2, r1
 80146f6:	801a      	strh	r2, [r3, #0]
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	781b      	ldrb	r3, [r3, #0]
 80146fe:	009b      	lsls	r3, r3, #2
 8014700:	18d3      	adds	r3, r2, r3
 8014702:	183a      	adds	r2, r7, r0
 8014704:	8812      	ldrh	r2, [r2, #0]
 8014706:	499d      	ldr	r1, [pc, #628]	@ (801497c <USB_ActivateEndpoint+0x6b4>)
 8014708:	430a      	orrs	r2, r1
 801470a:	b292      	uxth	r2, r2
 801470c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2250      	movs	r2, #80	@ 0x50
 8014716:	5a9b      	ldrh	r3, [r3, r2]
 8014718:	b29b      	uxth	r3, r3
 801471a:	001a      	movs	r2, r3
 801471c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801471e:	189b      	adds	r3, r3, r2
 8014720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	00da      	lsls	r2, r3, #3
 8014728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801472a:	18d3      	adds	r3, r2, r3
 801472c:	2280      	movs	r2, #128	@ 0x80
 801472e:	00d2      	lsls	r2, r2, #3
 8014730:	4694      	mov	ip, r2
 8014732:	4463      	add	r3, ip
 8014734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	891b      	ldrh	r3, [r3, #8]
 801473a:	085b      	lsrs	r3, r3, #1
 801473c:	b29b      	uxth	r3, r3
 801473e:	18db      	adds	r3, r3, r3
 8014740:	b29a      	uxth	r2, r3
 8014742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014744:	801a      	strh	r2, [r3, #0]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	657b      	str	r3, [r7, #84]	@ 0x54
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2250      	movs	r2, #80	@ 0x50
 801474e:	5a9b      	ldrh	r3, [r3, r2]
 8014750:	b29b      	uxth	r3, r3
 8014752:	001a      	movs	r2, r3
 8014754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014756:	189b      	adds	r3, r3, r2
 8014758:	657b      	str	r3, [r7, #84]	@ 0x54
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	00da      	lsls	r2, r3, #3
 8014760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014762:	18d3      	adds	r3, r2, r3
 8014764:	4a88      	ldr	r2, [pc, #544]	@ (8014988 <USB_ActivateEndpoint+0x6c0>)
 8014766:	4694      	mov	ip, r2
 8014768:	4463      	add	r3, ip
 801476a:	653b      	str	r3, [r7, #80]	@ 0x50
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	895b      	ldrh	r3, [r3, #10]
 8014770:	085b      	lsrs	r3, r3, #1
 8014772:	b29b      	uxth	r3, r3
 8014774:	18db      	adds	r3, r3, r3
 8014776:	b29a      	uxth	r2, r3
 8014778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801477a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	785b      	ldrb	r3, [r3, #1]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d000      	beq.n	8014786 <USB_ActivateEndpoint+0x4be>
 8014784:	e087      	b.n	8014896 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	009b      	lsls	r3, r3, #2
 801478e:	18d2      	adds	r2, r2, r3
 8014790:	2140      	movs	r1, #64	@ 0x40
 8014792:	187b      	adds	r3, r7, r1
 8014794:	8812      	ldrh	r2, [r2, #0]
 8014796:	801a      	strh	r2, [r3, #0]
 8014798:	187b      	adds	r3, r7, r1
 801479a:	881a      	ldrh	r2, [r3, #0]
 801479c:	2380      	movs	r3, #128	@ 0x80
 801479e:	01db      	lsls	r3, r3, #7
 80147a0:	4013      	ands	r3, r2
 80147a2:	d016      	beq.n	80147d2 <USB_ActivateEndpoint+0x50a>
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	009b      	lsls	r3, r3, #2
 80147ac:	18d3      	adds	r3, r2, r3
 80147ae:	881b      	ldrh	r3, [r3, #0]
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	203e      	movs	r0, #62	@ 0x3e
 80147b4:	183b      	adds	r3, r7, r0
 80147b6:	496e      	ldr	r1, [pc, #440]	@ (8014970 <USB_ActivateEndpoint+0x6a8>)
 80147b8:	400a      	ands	r2, r1
 80147ba:	801a      	strh	r2, [r3, #0]
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	009b      	lsls	r3, r3, #2
 80147c4:	18d3      	adds	r3, r2, r3
 80147c6:	183a      	adds	r2, r7, r0
 80147c8:	8812      	ldrh	r2, [r2, #0]
 80147ca:	496a      	ldr	r1, [pc, #424]	@ (8014974 <USB_ActivateEndpoint+0x6ac>)
 80147cc:	430a      	orrs	r2, r1
 80147ce:	b292      	uxth	r2, r2
 80147d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80147d2:	687a      	ldr	r2, [r7, #4]
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	18d2      	adds	r2, r2, r3
 80147dc:	213c      	movs	r1, #60	@ 0x3c
 80147de:	187b      	adds	r3, r7, r1
 80147e0:	8812      	ldrh	r2, [r2, #0]
 80147e2:	801a      	strh	r2, [r3, #0]
 80147e4:	187b      	adds	r3, r7, r1
 80147e6:	881b      	ldrh	r3, [r3, #0]
 80147e8:	2240      	movs	r2, #64	@ 0x40
 80147ea:	4013      	ands	r3, r2
 80147ec:	d016      	beq.n	801481c <USB_ActivateEndpoint+0x554>
 80147ee:	687a      	ldr	r2, [r7, #4]
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	009b      	lsls	r3, r3, #2
 80147f6:	18d3      	adds	r3, r2, r3
 80147f8:	881b      	ldrh	r3, [r3, #0]
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	203a      	movs	r0, #58	@ 0x3a
 80147fe:	183b      	adds	r3, r7, r0
 8014800:	495b      	ldr	r1, [pc, #364]	@ (8014970 <USB_ActivateEndpoint+0x6a8>)
 8014802:	400a      	ands	r2, r1
 8014804:	801a      	strh	r2, [r3, #0]
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	18d3      	adds	r3, r2, r3
 8014810:	183a      	adds	r2, r7, r0
 8014812:	8812      	ldrh	r2, [r2, #0]
 8014814:	495d      	ldr	r1, [pc, #372]	@ (801498c <USB_ActivateEndpoint+0x6c4>)
 8014816:	430a      	orrs	r2, r1
 8014818:	b292      	uxth	r2, r2
 801481a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	18d3      	adds	r3, r2, r3
 8014826:	881b      	ldrh	r3, [r3, #0]
 8014828:	b29a      	uxth	r2, r3
 801482a:	2038      	movs	r0, #56	@ 0x38
 801482c:	183b      	adds	r3, r7, r0
 801482e:	4952      	ldr	r1, [pc, #328]	@ (8014978 <USB_ActivateEndpoint+0x6b0>)
 8014830:	400a      	ands	r2, r1
 8014832:	801a      	strh	r2, [r3, #0]
 8014834:	183b      	adds	r3, r7, r0
 8014836:	183a      	adds	r2, r7, r0
 8014838:	8812      	ldrh	r2, [r2, #0]
 801483a:	2180      	movs	r1, #128	@ 0x80
 801483c:	0149      	lsls	r1, r1, #5
 801483e:	404a      	eors	r2, r1
 8014840:	801a      	strh	r2, [r3, #0]
 8014842:	183b      	adds	r3, r7, r0
 8014844:	183a      	adds	r2, r7, r0
 8014846:	8812      	ldrh	r2, [r2, #0]
 8014848:	2180      	movs	r1, #128	@ 0x80
 801484a:	0189      	lsls	r1, r1, #6
 801484c:	404a      	eors	r2, r1
 801484e:	801a      	strh	r2, [r3, #0]
 8014850:	687a      	ldr	r2, [r7, #4]
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	18d3      	adds	r3, r2, r3
 801485a:	183a      	adds	r2, r7, r0
 801485c:	8812      	ldrh	r2, [r2, #0]
 801485e:	4947      	ldr	r1, [pc, #284]	@ (801497c <USB_ActivateEndpoint+0x6b4>)
 8014860:	430a      	orrs	r2, r1
 8014862:	b292      	uxth	r2, r2
 8014864:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	009b      	lsls	r3, r3, #2
 801486e:	18d3      	adds	r3, r2, r3
 8014870:	881b      	ldrh	r3, [r3, #0]
 8014872:	b29a      	uxth	r2, r3
 8014874:	2036      	movs	r0, #54	@ 0x36
 8014876:	183b      	adds	r3, r7, r0
 8014878:	4945      	ldr	r1, [pc, #276]	@ (8014990 <USB_ActivateEndpoint+0x6c8>)
 801487a:	400a      	ands	r2, r1
 801487c:	801a      	strh	r2, [r3, #0]
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	18d3      	adds	r3, r2, r3
 8014888:	183a      	adds	r2, r7, r0
 801488a:	8812      	ldrh	r2, [r2, #0]
 801488c:	493b      	ldr	r1, [pc, #236]	@ (801497c <USB_ActivateEndpoint+0x6b4>)
 801488e:	430a      	orrs	r2, r1
 8014890:	b292      	uxth	r2, r2
 8014892:	801a      	strh	r2, [r3, #0]
 8014894:	e0ac      	b.n	80149f0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	009b      	lsls	r3, r3, #2
 801489e:	18d2      	adds	r2, r2, r3
 80148a0:	214e      	movs	r1, #78	@ 0x4e
 80148a2:	187b      	adds	r3, r7, r1
 80148a4:	8812      	ldrh	r2, [r2, #0]
 80148a6:	801a      	strh	r2, [r3, #0]
 80148a8:	187b      	adds	r3, r7, r1
 80148aa:	881a      	ldrh	r2, [r3, #0]
 80148ac:	2380      	movs	r3, #128	@ 0x80
 80148ae:	01db      	lsls	r3, r3, #7
 80148b0:	4013      	ands	r3, r2
 80148b2:	d016      	beq.n	80148e2 <USB_ActivateEndpoint+0x61a>
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	18d3      	adds	r3, r2, r3
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	204c      	movs	r0, #76	@ 0x4c
 80148c4:	183b      	adds	r3, r7, r0
 80148c6:	492a      	ldr	r1, [pc, #168]	@ (8014970 <USB_ActivateEndpoint+0x6a8>)
 80148c8:	400a      	ands	r2, r1
 80148ca:	801a      	strh	r2, [r3, #0]
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	009b      	lsls	r3, r3, #2
 80148d4:	18d3      	adds	r3, r2, r3
 80148d6:	183a      	adds	r2, r7, r0
 80148d8:	8812      	ldrh	r2, [r2, #0]
 80148da:	4926      	ldr	r1, [pc, #152]	@ (8014974 <USB_ActivateEndpoint+0x6ac>)
 80148dc:	430a      	orrs	r2, r1
 80148de:	b292      	uxth	r2, r2
 80148e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80148e2:	687a      	ldr	r2, [r7, #4]
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	009b      	lsls	r3, r3, #2
 80148ea:	18d2      	adds	r2, r2, r3
 80148ec:	214a      	movs	r1, #74	@ 0x4a
 80148ee:	187b      	adds	r3, r7, r1
 80148f0:	8812      	ldrh	r2, [r2, #0]
 80148f2:	801a      	strh	r2, [r3, #0]
 80148f4:	187b      	adds	r3, r7, r1
 80148f6:	881b      	ldrh	r3, [r3, #0]
 80148f8:	2240      	movs	r2, #64	@ 0x40
 80148fa:	4013      	ands	r3, r2
 80148fc:	d016      	beq.n	801492c <USB_ActivateEndpoint+0x664>
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	009b      	lsls	r3, r3, #2
 8014906:	18d3      	adds	r3, r2, r3
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	b29a      	uxth	r2, r3
 801490c:	2048      	movs	r0, #72	@ 0x48
 801490e:	183b      	adds	r3, r7, r0
 8014910:	4917      	ldr	r1, [pc, #92]	@ (8014970 <USB_ActivateEndpoint+0x6a8>)
 8014912:	400a      	ands	r2, r1
 8014914:	801a      	strh	r2, [r3, #0]
 8014916:	687a      	ldr	r2, [r7, #4]
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	009b      	lsls	r3, r3, #2
 801491e:	18d3      	adds	r3, r2, r3
 8014920:	183a      	adds	r2, r7, r0
 8014922:	8812      	ldrh	r2, [r2, #0]
 8014924:	4919      	ldr	r1, [pc, #100]	@ (801498c <USB_ActivateEndpoint+0x6c4>)
 8014926:	430a      	orrs	r2, r1
 8014928:	b292      	uxth	r2, r2
 801492a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	78db      	ldrb	r3, [r3, #3]
 8014930:	2b01      	cmp	r3, #1
 8014932:	d02f      	beq.n	8014994 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	009b      	lsls	r3, r3, #2
 801493c:	18d3      	adds	r3, r2, r3
 801493e:	881b      	ldrh	r3, [r3, #0]
 8014940:	b29a      	uxth	r2, r3
 8014942:	2044      	movs	r0, #68	@ 0x44
 8014944:	183b      	adds	r3, r7, r0
 8014946:	4912      	ldr	r1, [pc, #72]	@ (8014990 <USB_ActivateEndpoint+0x6c8>)
 8014948:	400a      	ands	r2, r1
 801494a:	801a      	strh	r2, [r3, #0]
 801494c:	183b      	adds	r3, r7, r0
 801494e:	183a      	adds	r2, r7, r0
 8014950:	8812      	ldrh	r2, [r2, #0]
 8014952:	2120      	movs	r1, #32
 8014954:	404a      	eors	r2, r1
 8014956:	801a      	strh	r2, [r3, #0]
 8014958:	687a      	ldr	r2, [r7, #4]
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	18d3      	adds	r3, r2, r3
 8014962:	183a      	adds	r2, r7, r0
 8014964:	8812      	ldrh	r2, [r2, #0]
 8014966:	4905      	ldr	r1, [pc, #20]	@ (801497c <USB_ActivateEndpoint+0x6b4>)
 8014968:	430a      	orrs	r2, r1
 801496a:	b292      	uxth	r2, r2
 801496c:	801a      	strh	r2, [r3, #0]
 801496e:	e028      	b.n	80149c2 <USB_ActivateEndpoint+0x6fa>
 8014970:	ffff8f8f 	.word	0xffff8f8f
 8014974:	ffffc080 	.word	0xffffc080
 8014978:	ffffbf8f 	.word	0xffffbf8f
 801497c:	ffff8080 	.word	0xffff8080
 8014980:	ffff8180 	.word	0xffff8180
 8014984:	ffff8e8f 	.word	0xffff8e8f
 8014988:	00000404 	.word	0x00000404
 801498c:	ffff80c0 	.word	0xffff80c0
 8014990:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014994:	687a      	ldr	r2, [r7, #4]
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	009b      	lsls	r3, r3, #2
 801499c:	18d3      	adds	r3, r2, r3
 801499e:	881b      	ldrh	r3, [r3, #0]
 80149a0:	b29a      	uxth	r2, r3
 80149a2:	2046      	movs	r0, #70	@ 0x46
 80149a4:	183b      	adds	r3, r7, r0
 80149a6:	4916      	ldr	r1, [pc, #88]	@ (8014a00 <USB_ActivateEndpoint+0x738>)
 80149a8:	400a      	ands	r2, r1
 80149aa:	801a      	strh	r2, [r3, #0]
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	009b      	lsls	r3, r3, #2
 80149b4:	18d3      	adds	r3, r2, r3
 80149b6:	183a      	adds	r2, r7, r0
 80149b8:	8812      	ldrh	r2, [r2, #0]
 80149ba:	4912      	ldr	r1, [pc, #72]	@ (8014a04 <USB_ActivateEndpoint+0x73c>)
 80149bc:	430a      	orrs	r2, r1
 80149be:	b292      	uxth	r2, r2
 80149c0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80149c2:	687a      	ldr	r2, [r7, #4]
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	009b      	lsls	r3, r3, #2
 80149ca:	18d3      	adds	r3, r2, r3
 80149cc:	881b      	ldrh	r3, [r3, #0]
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	2042      	movs	r0, #66	@ 0x42
 80149d2:	183b      	adds	r3, r7, r0
 80149d4:	490c      	ldr	r1, [pc, #48]	@ (8014a08 <USB_ActivateEndpoint+0x740>)
 80149d6:	400a      	ands	r2, r1
 80149d8:	801a      	strh	r2, [r3, #0]
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	009b      	lsls	r3, r3, #2
 80149e2:	18d3      	adds	r3, r2, r3
 80149e4:	183a      	adds	r2, r7, r0
 80149e6:	8812      	ldrh	r2, [r2, #0]
 80149e8:	4906      	ldr	r1, [pc, #24]	@ (8014a04 <USB_ActivateEndpoint+0x73c>)
 80149ea:	430a      	orrs	r2, r1
 80149ec:	b292      	uxth	r2, r2
 80149ee:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80149f0:	236f      	movs	r3, #111	@ 0x6f
 80149f2:	18fb      	adds	r3, r7, r3
 80149f4:	781b      	ldrb	r3, [r3, #0]
}
 80149f6:	0018      	movs	r0, r3
 80149f8:	46bd      	mov	sp, r7
 80149fa:	b01c      	add	sp, #112	@ 0x70
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	46c0      	nop			@ (mov r8, r8)
 8014a00:	ffff8fbf 	.word	0xffff8fbf
 8014a04:	ffff8080 	.word	0xffff8080
 8014a08:	ffffbf8f 	.word	0xffffbf8f

08014a0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b08c      	sub	sp, #48	@ 0x30
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	7b1b      	ldrb	r3, [r3, #12]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d000      	beq.n	8014a20 <USB_DeactivateEndpoint+0x14>
 8014a1e:	e07e      	b.n	8014b1e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	785b      	ldrb	r3, [r3, #1]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d03c      	beq.n	8014aa2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014a28:	687a      	ldr	r2, [r7, #4]
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	18d2      	adds	r2, r2, r3
 8014a32:	210c      	movs	r1, #12
 8014a34:	187b      	adds	r3, r7, r1
 8014a36:	8812      	ldrh	r2, [r2, #0]
 8014a38:	801a      	strh	r2, [r3, #0]
 8014a3a:	187b      	adds	r3, r7, r1
 8014a3c:	881b      	ldrh	r3, [r3, #0]
 8014a3e:	2240      	movs	r2, #64	@ 0x40
 8014a40:	4013      	ands	r3, r2
 8014a42:	d016      	beq.n	8014a72 <USB_DeactivateEndpoint+0x66>
 8014a44:	687a      	ldr	r2, [r7, #4]
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	18d3      	adds	r3, r2, r3
 8014a4e:	881b      	ldrh	r3, [r3, #0]
 8014a50:	b29a      	uxth	r2, r3
 8014a52:	200a      	movs	r0, #10
 8014a54:	183b      	adds	r3, r7, r0
 8014a56:	49c7      	ldr	r1, [pc, #796]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014a58:	400a      	ands	r2, r1
 8014a5a:	801a      	strh	r2, [r3, #0]
 8014a5c:	687a      	ldr	r2, [r7, #4]
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	009b      	lsls	r3, r3, #2
 8014a64:	18d3      	adds	r3, r2, r3
 8014a66:	183a      	adds	r2, r7, r0
 8014a68:	8812      	ldrh	r2, [r2, #0]
 8014a6a:	49c3      	ldr	r1, [pc, #780]	@ (8014d78 <USB_DeactivateEndpoint+0x36c>)
 8014a6c:	430a      	orrs	r2, r1
 8014a6e:	b292      	uxth	r2, r2
 8014a70:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014a72:	687a      	ldr	r2, [r7, #4]
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	781b      	ldrb	r3, [r3, #0]
 8014a78:	009b      	lsls	r3, r3, #2
 8014a7a:	18d3      	adds	r3, r2, r3
 8014a7c:	881b      	ldrh	r3, [r3, #0]
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	2008      	movs	r0, #8
 8014a82:	183b      	adds	r3, r7, r0
 8014a84:	49bd      	ldr	r1, [pc, #756]	@ (8014d7c <USB_DeactivateEndpoint+0x370>)
 8014a86:	400a      	ands	r2, r1
 8014a88:	801a      	strh	r2, [r3, #0]
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	009b      	lsls	r3, r3, #2
 8014a92:	18d3      	adds	r3, r2, r3
 8014a94:	183a      	adds	r2, r7, r0
 8014a96:	8812      	ldrh	r2, [r2, #0]
 8014a98:	49b9      	ldr	r1, [pc, #740]	@ (8014d80 <USB_DeactivateEndpoint+0x374>)
 8014a9a:	430a      	orrs	r2, r1
 8014a9c:	b292      	uxth	r2, r2
 8014a9e:	801a      	strh	r2, [r3, #0]
 8014aa0:	e163      	b.n	8014d6a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	009b      	lsls	r3, r3, #2
 8014aaa:	18d2      	adds	r2, r2, r3
 8014aac:	2112      	movs	r1, #18
 8014aae:	187b      	adds	r3, r7, r1
 8014ab0:	8812      	ldrh	r2, [r2, #0]
 8014ab2:	801a      	strh	r2, [r3, #0]
 8014ab4:	187b      	adds	r3, r7, r1
 8014ab6:	881a      	ldrh	r2, [r3, #0]
 8014ab8:	2380      	movs	r3, #128	@ 0x80
 8014aba:	01db      	lsls	r3, r3, #7
 8014abc:	4013      	ands	r3, r2
 8014abe:	d016      	beq.n	8014aee <USB_DeactivateEndpoint+0xe2>
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	18d3      	adds	r3, r2, r3
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	b29a      	uxth	r2, r3
 8014ace:	2010      	movs	r0, #16
 8014ad0:	183b      	adds	r3, r7, r0
 8014ad2:	49a8      	ldr	r1, [pc, #672]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014ad4:	400a      	ands	r2, r1
 8014ad6:	801a      	strh	r2, [r3, #0]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	18d3      	adds	r3, r2, r3
 8014ae2:	183a      	adds	r2, r7, r0
 8014ae4:	8812      	ldrh	r2, [r2, #0]
 8014ae6:	49a7      	ldr	r1, [pc, #668]	@ (8014d84 <USB_DeactivateEndpoint+0x378>)
 8014ae8:	430a      	orrs	r2, r1
 8014aea:	b292      	uxth	r2, r2
 8014aec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014aee:	687a      	ldr	r2, [r7, #4]
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	009b      	lsls	r3, r3, #2
 8014af6:	18d3      	adds	r3, r2, r3
 8014af8:	881b      	ldrh	r3, [r3, #0]
 8014afa:	b29a      	uxth	r2, r3
 8014afc:	200e      	movs	r0, #14
 8014afe:	183b      	adds	r3, r7, r0
 8014b00:	49a1      	ldr	r1, [pc, #644]	@ (8014d88 <USB_DeactivateEndpoint+0x37c>)
 8014b02:	400a      	ands	r2, r1
 8014b04:	801a      	strh	r2, [r3, #0]
 8014b06:	687a      	ldr	r2, [r7, #4]
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	009b      	lsls	r3, r3, #2
 8014b0e:	18d3      	adds	r3, r2, r3
 8014b10:	183a      	adds	r2, r7, r0
 8014b12:	8812      	ldrh	r2, [r2, #0]
 8014b14:	499a      	ldr	r1, [pc, #616]	@ (8014d80 <USB_DeactivateEndpoint+0x374>)
 8014b16:	430a      	orrs	r2, r1
 8014b18:	b292      	uxth	r2, r2
 8014b1a:	801a      	strh	r2, [r3, #0]
 8014b1c:	e125      	b.n	8014d6a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	785b      	ldrb	r3, [r3, #1]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d000      	beq.n	8014b28 <USB_DeactivateEndpoint+0x11c>
 8014b26:	e090      	b.n	8014c4a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014b28:	687a      	ldr	r2, [r7, #4]
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	18d2      	adds	r2, r2, r3
 8014b32:	2120      	movs	r1, #32
 8014b34:	187b      	adds	r3, r7, r1
 8014b36:	8812      	ldrh	r2, [r2, #0]
 8014b38:	801a      	strh	r2, [r3, #0]
 8014b3a:	187b      	adds	r3, r7, r1
 8014b3c:	881a      	ldrh	r2, [r3, #0]
 8014b3e:	2380      	movs	r3, #128	@ 0x80
 8014b40:	01db      	lsls	r3, r3, #7
 8014b42:	4013      	ands	r3, r2
 8014b44:	d016      	beq.n	8014b74 <USB_DeactivateEndpoint+0x168>
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	009b      	lsls	r3, r3, #2
 8014b4e:	18d3      	adds	r3, r2, r3
 8014b50:	881b      	ldrh	r3, [r3, #0]
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	201e      	movs	r0, #30
 8014b56:	183b      	adds	r3, r7, r0
 8014b58:	4986      	ldr	r1, [pc, #536]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014b5a:	400a      	ands	r2, r1
 8014b5c:	801a      	strh	r2, [r3, #0]
 8014b5e:	687a      	ldr	r2, [r7, #4]
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	18d3      	adds	r3, r2, r3
 8014b68:	183a      	adds	r2, r7, r0
 8014b6a:	8812      	ldrh	r2, [r2, #0]
 8014b6c:	4985      	ldr	r1, [pc, #532]	@ (8014d84 <USB_DeactivateEndpoint+0x378>)
 8014b6e:	430a      	orrs	r2, r1
 8014b70:	b292      	uxth	r2, r2
 8014b72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	009b      	lsls	r3, r3, #2
 8014b7c:	18d2      	adds	r2, r2, r3
 8014b7e:	211c      	movs	r1, #28
 8014b80:	187b      	adds	r3, r7, r1
 8014b82:	8812      	ldrh	r2, [r2, #0]
 8014b84:	801a      	strh	r2, [r3, #0]
 8014b86:	187b      	adds	r3, r7, r1
 8014b88:	881b      	ldrh	r3, [r3, #0]
 8014b8a:	2240      	movs	r2, #64	@ 0x40
 8014b8c:	4013      	ands	r3, r2
 8014b8e:	d016      	beq.n	8014bbe <USB_DeactivateEndpoint+0x1b2>
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	781b      	ldrb	r3, [r3, #0]
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	18d3      	adds	r3, r2, r3
 8014b9a:	881b      	ldrh	r3, [r3, #0]
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	201a      	movs	r0, #26
 8014ba0:	183b      	adds	r3, r7, r0
 8014ba2:	4974      	ldr	r1, [pc, #464]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014ba4:	400a      	ands	r2, r1
 8014ba6:	801a      	strh	r2, [r3, #0]
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	009b      	lsls	r3, r3, #2
 8014bb0:	18d3      	adds	r3, r2, r3
 8014bb2:	183a      	adds	r2, r7, r0
 8014bb4:	8812      	ldrh	r2, [r2, #0]
 8014bb6:	4970      	ldr	r1, [pc, #448]	@ (8014d78 <USB_DeactivateEndpoint+0x36c>)
 8014bb8:	430a      	orrs	r2, r1
 8014bba:	b292      	uxth	r2, r2
 8014bbc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	18d3      	adds	r3, r2, r3
 8014bc8:	881b      	ldrh	r3, [r3, #0]
 8014bca:	b29a      	uxth	r2, r3
 8014bcc:	2018      	movs	r0, #24
 8014bce:	183b      	adds	r3, r7, r0
 8014bd0:	4968      	ldr	r1, [pc, #416]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014bd2:	400a      	ands	r2, r1
 8014bd4:	801a      	strh	r2, [r3, #0]
 8014bd6:	687a      	ldr	r2, [r7, #4]
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	009b      	lsls	r3, r3, #2
 8014bde:	18d3      	adds	r3, r2, r3
 8014be0:	183a      	adds	r2, r7, r0
 8014be2:	8812      	ldrh	r2, [r2, #0]
 8014be4:	4964      	ldr	r1, [pc, #400]	@ (8014d78 <USB_DeactivateEndpoint+0x36c>)
 8014be6:	430a      	orrs	r2, r1
 8014be8:	b292      	uxth	r2, r2
 8014bea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	009b      	lsls	r3, r3, #2
 8014bf4:	18d3      	adds	r3, r2, r3
 8014bf6:	881b      	ldrh	r3, [r3, #0]
 8014bf8:	b29a      	uxth	r2, r3
 8014bfa:	2016      	movs	r0, #22
 8014bfc:	183b      	adds	r3, r7, r0
 8014bfe:	4962      	ldr	r1, [pc, #392]	@ (8014d88 <USB_DeactivateEndpoint+0x37c>)
 8014c00:	400a      	ands	r2, r1
 8014c02:	801a      	strh	r2, [r3, #0]
 8014c04:	687a      	ldr	r2, [r7, #4]
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	781b      	ldrb	r3, [r3, #0]
 8014c0a:	009b      	lsls	r3, r3, #2
 8014c0c:	18d3      	adds	r3, r2, r3
 8014c0e:	183a      	adds	r2, r7, r0
 8014c10:	8812      	ldrh	r2, [r2, #0]
 8014c12:	495b      	ldr	r1, [pc, #364]	@ (8014d80 <USB_DeactivateEndpoint+0x374>)
 8014c14:	430a      	orrs	r2, r1
 8014c16:	b292      	uxth	r2, r2
 8014c18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014c1a:	687a      	ldr	r2, [r7, #4]
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	009b      	lsls	r3, r3, #2
 8014c22:	18d3      	adds	r3, r2, r3
 8014c24:	881b      	ldrh	r3, [r3, #0]
 8014c26:	b29a      	uxth	r2, r3
 8014c28:	2014      	movs	r0, #20
 8014c2a:	183b      	adds	r3, r7, r0
 8014c2c:	4953      	ldr	r1, [pc, #332]	@ (8014d7c <USB_DeactivateEndpoint+0x370>)
 8014c2e:	400a      	ands	r2, r1
 8014c30:	801a      	strh	r2, [r3, #0]
 8014c32:	687a      	ldr	r2, [r7, #4]
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	009b      	lsls	r3, r3, #2
 8014c3a:	18d3      	adds	r3, r2, r3
 8014c3c:	183a      	adds	r2, r7, r0
 8014c3e:	8812      	ldrh	r2, [r2, #0]
 8014c40:	494f      	ldr	r1, [pc, #316]	@ (8014d80 <USB_DeactivateEndpoint+0x374>)
 8014c42:	430a      	orrs	r2, r1
 8014c44:	b292      	uxth	r2, r2
 8014c46:	801a      	strh	r2, [r3, #0]
 8014c48:	e08f      	b.n	8014d6a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	781b      	ldrb	r3, [r3, #0]
 8014c50:	009b      	lsls	r3, r3, #2
 8014c52:	18d2      	adds	r2, r2, r3
 8014c54:	212e      	movs	r1, #46	@ 0x2e
 8014c56:	187b      	adds	r3, r7, r1
 8014c58:	8812      	ldrh	r2, [r2, #0]
 8014c5a:	801a      	strh	r2, [r3, #0]
 8014c5c:	187b      	adds	r3, r7, r1
 8014c5e:	881a      	ldrh	r2, [r3, #0]
 8014c60:	2380      	movs	r3, #128	@ 0x80
 8014c62:	01db      	lsls	r3, r3, #7
 8014c64:	4013      	ands	r3, r2
 8014c66:	d016      	beq.n	8014c96 <USB_DeactivateEndpoint+0x28a>
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	009b      	lsls	r3, r3, #2
 8014c70:	18d3      	adds	r3, r2, r3
 8014c72:	881b      	ldrh	r3, [r3, #0]
 8014c74:	b29a      	uxth	r2, r3
 8014c76:	202c      	movs	r0, #44	@ 0x2c
 8014c78:	183b      	adds	r3, r7, r0
 8014c7a:	493e      	ldr	r1, [pc, #248]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014c7c:	400a      	ands	r2, r1
 8014c7e:	801a      	strh	r2, [r3, #0]
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	009b      	lsls	r3, r3, #2
 8014c88:	18d3      	adds	r3, r2, r3
 8014c8a:	183a      	adds	r2, r7, r0
 8014c8c:	8812      	ldrh	r2, [r2, #0]
 8014c8e:	493d      	ldr	r1, [pc, #244]	@ (8014d84 <USB_DeactivateEndpoint+0x378>)
 8014c90:	430a      	orrs	r2, r1
 8014c92:	b292      	uxth	r2, r2
 8014c94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	009b      	lsls	r3, r3, #2
 8014c9e:	18d2      	adds	r2, r2, r3
 8014ca0:	212a      	movs	r1, #42	@ 0x2a
 8014ca2:	187b      	adds	r3, r7, r1
 8014ca4:	8812      	ldrh	r2, [r2, #0]
 8014ca6:	801a      	strh	r2, [r3, #0]
 8014ca8:	187b      	adds	r3, r7, r1
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	2240      	movs	r2, #64	@ 0x40
 8014cae:	4013      	ands	r3, r2
 8014cb0:	d016      	beq.n	8014ce0 <USB_DeactivateEndpoint+0x2d4>
 8014cb2:	687a      	ldr	r2, [r7, #4]
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	009b      	lsls	r3, r3, #2
 8014cba:	18d3      	adds	r3, r2, r3
 8014cbc:	881b      	ldrh	r3, [r3, #0]
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	2028      	movs	r0, #40	@ 0x28
 8014cc2:	183b      	adds	r3, r7, r0
 8014cc4:	492b      	ldr	r1, [pc, #172]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014cc6:	400a      	ands	r2, r1
 8014cc8:	801a      	strh	r2, [r3, #0]
 8014cca:	687a      	ldr	r2, [r7, #4]
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	009b      	lsls	r3, r3, #2
 8014cd2:	18d3      	adds	r3, r2, r3
 8014cd4:	183a      	adds	r2, r7, r0
 8014cd6:	8812      	ldrh	r2, [r2, #0]
 8014cd8:	4927      	ldr	r1, [pc, #156]	@ (8014d78 <USB_DeactivateEndpoint+0x36c>)
 8014cda:	430a      	orrs	r2, r1
 8014cdc:	b292      	uxth	r2, r2
 8014cde:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	781b      	ldrb	r3, [r3, #0]
 8014ce6:	009b      	lsls	r3, r3, #2
 8014ce8:	18d3      	adds	r3, r2, r3
 8014cea:	881b      	ldrh	r3, [r3, #0]
 8014cec:	b29a      	uxth	r2, r3
 8014cee:	2026      	movs	r0, #38	@ 0x26
 8014cf0:	183b      	adds	r3, r7, r0
 8014cf2:	4920      	ldr	r1, [pc, #128]	@ (8014d74 <USB_DeactivateEndpoint+0x368>)
 8014cf4:	400a      	ands	r2, r1
 8014cf6:	801a      	strh	r2, [r3, #0]
 8014cf8:	687a      	ldr	r2, [r7, #4]
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	18d3      	adds	r3, r2, r3
 8014d02:	183a      	adds	r2, r7, r0
 8014d04:	8812      	ldrh	r2, [r2, #0]
 8014d06:	491f      	ldr	r1, [pc, #124]	@ (8014d84 <USB_DeactivateEndpoint+0x378>)
 8014d08:	430a      	orrs	r2, r1
 8014d0a:	b292      	uxth	r2, r2
 8014d0c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	18d3      	adds	r3, r2, r3
 8014d18:	881b      	ldrh	r3, [r3, #0]
 8014d1a:	b29a      	uxth	r2, r3
 8014d1c:	2024      	movs	r0, #36	@ 0x24
 8014d1e:	183b      	adds	r3, r7, r0
 8014d20:	4916      	ldr	r1, [pc, #88]	@ (8014d7c <USB_DeactivateEndpoint+0x370>)
 8014d22:	400a      	ands	r2, r1
 8014d24:	801a      	strh	r2, [r3, #0]
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	18d3      	adds	r3, r2, r3
 8014d30:	183a      	adds	r2, r7, r0
 8014d32:	8812      	ldrh	r2, [r2, #0]
 8014d34:	4912      	ldr	r1, [pc, #72]	@ (8014d80 <USB_DeactivateEndpoint+0x374>)
 8014d36:	430a      	orrs	r2, r1
 8014d38:	b292      	uxth	r2, r2
 8014d3a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014d3c:	687a      	ldr	r2, [r7, #4]
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	781b      	ldrb	r3, [r3, #0]
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	18d3      	adds	r3, r2, r3
 8014d46:	881b      	ldrh	r3, [r3, #0]
 8014d48:	b29a      	uxth	r2, r3
 8014d4a:	2022      	movs	r0, #34	@ 0x22
 8014d4c:	183b      	adds	r3, r7, r0
 8014d4e:	490e      	ldr	r1, [pc, #56]	@ (8014d88 <USB_DeactivateEndpoint+0x37c>)
 8014d50:	400a      	ands	r2, r1
 8014d52:	801a      	strh	r2, [r3, #0]
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	781b      	ldrb	r3, [r3, #0]
 8014d5a:	009b      	lsls	r3, r3, #2
 8014d5c:	18d3      	adds	r3, r2, r3
 8014d5e:	183a      	adds	r2, r7, r0
 8014d60:	8812      	ldrh	r2, [r2, #0]
 8014d62:	4907      	ldr	r1, [pc, #28]	@ (8014d80 <USB_DeactivateEndpoint+0x374>)
 8014d64:	430a      	orrs	r2, r1
 8014d66:	b292      	uxth	r2, r2
 8014d68:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014d6a:	2300      	movs	r3, #0
}
 8014d6c:	0018      	movs	r0, r3
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	b00c      	add	sp, #48	@ 0x30
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	ffff8f8f 	.word	0xffff8f8f
 8014d78:	ffff80c0 	.word	0xffff80c0
 8014d7c:	ffff8fbf 	.word	0xffff8fbf
 8014d80:	ffff8080 	.word	0xffff8080
 8014d84:	ffffc080 	.word	0xffffc080
 8014d88:	ffffbf8f 	.word	0xffffbf8f

08014d8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014d8c:	b590      	push	{r4, r7, lr}
 8014d8e:	b0c3      	sub	sp, #268	@ 0x10c
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	785b      	ldrb	r3, [r3, #1]
 8014d9a:	2b01      	cmp	r3, #1
 8014d9c:	d001      	beq.n	8014da2 <USB_EPStartXfer+0x16>
 8014d9e:	f000 fd2d 	bl	80157fc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	699a      	ldr	r2, [r3, #24]
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	691b      	ldr	r3, [r3, #16]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d905      	bls.n	8014dba <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	691b      	ldr	r3, [r3, #16]
 8014db2:	1d7a      	adds	r2, r7, #5
 8014db4:	32ff      	adds	r2, #255	@ 0xff
 8014db6:	6013      	str	r3, [r2, #0]
 8014db8:	e004      	b.n	8014dc4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	699b      	ldr	r3, [r3, #24]
 8014dbe:	1d7a      	adds	r2, r7, #5
 8014dc0:	32ff      	adds	r2, #255	@ 0xff
 8014dc2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	7b1b      	ldrb	r3, [r3, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d125      	bne.n	8014e18 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	6959      	ldr	r1, [r3, #20]
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	88da      	ldrh	r2, [r3, #6]
 8014dd4:	1d7b      	adds	r3, r7, #5
 8014dd6:	33ff      	adds	r3, #255	@ 0xff
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f001 fa47 	bl	8016270 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	613b      	str	r3, [r7, #16]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2250      	movs	r2, #80	@ 0x50
 8014dea:	5a9b      	ldrh	r3, [r3, r2]
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	001a      	movs	r2, r3
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	189b      	adds	r3, r3, r2
 8014df4:	613b      	str	r3, [r7, #16]
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	00da      	lsls	r2, r3, #3
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	18d3      	adds	r3, r2, r3
 8014e00:	4ad7      	ldr	r2, [pc, #860]	@ (8015160 <USB_EPStartXfer+0x3d4>)
 8014e02:	4694      	mov	ip, r2
 8014e04:	4463      	add	r3, ip
 8014e06:	60fb      	str	r3, [r7, #12]
 8014e08:	1d7b      	adds	r3, r7, #5
 8014e0a:	33ff      	adds	r3, #255	@ 0xff
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	801a      	strh	r2, [r3, #0]
 8014e14:	f000 fccd 	bl	80157b2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	78db      	ldrb	r3, [r3, #3]
 8014e1c:	2b02      	cmp	r3, #2
 8014e1e:	d000      	beq.n	8014e22 <USB_EPStartXfer+0x96>
 8014e20:	e362      	b.n	80154e8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	6a1a      	ldr	r2, [r3, #32]
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	691b      	ldr	r3, [r3, #16]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d800      	bhi.n	8014e30 <USB_EPStartXfer+0xa4>
 8014e2e:	e309      	b.n	8015444 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	18d3      	adds	r3, r2, r3
 8014e3a:	881b      	ldrh	r3, [r3, #0]
 8014e3c:	b29a      	uxth	r2, r3
 8014e3e:	2056      	movs	r0, #86	@ 0x56
 8014e40:	183b      	adds	r3, r7, r0
 8014e42:	49c8      	ldr	r1, [pc, #800]	@ (8015164 <USB_EPStartXfer+0x3d8>)
 8014e44:	400a      	ands	r2, r1
 8014e46:	801a      	strh	r2, [r3, #0]
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	18d3      	adds	r3, r2, r3
 8014e52:	183a      	adds	r2, r7, r0
 8014e54:	8812      	ldrh	r2, [r2, #0]
 8014e56:	49c4      	ldr	r1, [pc, #784]	@ (8015168 <USB_EPStartXfer+0x3dc>)
 8014e58:	430a      	orrs	r2, r1
 8014e5a:	b292      	uxth	r2, r2
 8014e5c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	6a1a      	ldr	r2, [r3, #32]
 8014e62:	1d7b      	adds	r3, r7, #5
 8014e64:	33ff      	adds	r3, #255	@ 0xff
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	1ad2      	subs	r2, r2, r3
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	781b      	ldrb	r3, [r3, #0]
 8014e74:	009b      	lsls	r3, r3, #2
 8014e76:	18d3      	adds	r3, r2, r3
 8014e78:	881b      	ldrh	r3, [r3, #0]
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	001a      	movs	r2, r3
 8014e7e:	2340      	movs	r3, #64	@ 0x40
 8014e80:	4013      	ands	r3, r2
 8014e82:	d100      	bne.n	8014e86 <USB_EPStartXfer+0xfa>
 8014e84:	e176      	b.n	8015174 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	785b      	ldrb	r3, [r3, #1]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d000      	beq.n	8014e94 <USB_EPStartXfer+0x108>
 8014e92:	e074      	b.n	8014f7e <USB_EPStartXfer+0x1f2>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2250      	movs	r2, #80	@ 0x50
 8014e9c:	5a9b      	ldrh	r3, [r3, r2]
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	001a      	movs	r2, r3
 8014ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ea4:	189b      	adds	r3, r3, r2
 8014ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	00da      	lsls	r2, r3, #3
 8014eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eb0:	18d3      	adds	r3, r2, r3
 8014eb2:	4aae      	ldr	r2, [pc, #696]	@ (801516c <USB_EPStartXfer+0x3e0>)
 8014eb4:	4694      	mov	ip, r2
 8014eb6:	4463      	add	r3, ip
 8014eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ebc:	881b      	ldrh	r3, [r3, #0]
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	059b      	lsls	r3, r3, #22
 8014ec2:	0d9b      	lsrs	r3, r3, #22
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ec8:	801a      	strh	r2, [r3, #0]
 8014eca:	1d7b      	adds	r3, r7, #5
 8014ecc:	33ff      	adds	r3, #255	@ 0xff
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b3e      	cmp	r3, #62	@ 0x3e
 8014ed2:	d924      	bls.n	8014f1e <USB_EPStartXfer+0x192>
 8014ed4:	1d7b      	adds	r3, r7, #5
 8014ed6:	33ff      	adds	r3, #255	@ 0xff
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	095b      	lsrs	r3, r3, #5
 8014edc:	1c7a      	adds	r2, r7, #1
 8014ede:	32ff      	adds	r2, #255	@ 0xff
 8014ee0:	6013      	str	r3, [r2, #0]
 8014ee2:	1d7b      	adds	r3, r7, #5
 8014ee4:	33ff      	adds	r3, #255	@ 0xff
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	221f      	movs	r2, #31
 8014eea:	4013      	ands	r3, r2
 8014eec:	d106      	bne.n	8014efc <USB_EPStartXfer+0x170>
 8014eee:	1c7b      	adds	r3, r7, #1
 8014ef0:	33ff      	adds	r3, #255	@ 0xff
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	1c7a      	adds	r2, r7, #1
 8014ef8:	32ff      	adds	r2, #255	@ 0xff
 8014efa:	6013      	str	r3, [r2, #0]
 8014efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014efe:	881b      	ldrh	r3, [r3, #0]
 8014f00:	b29a      	uxth	r2, r3
 8014f02:	1c7b      	adds	r3, r7, #1
 8014f04:	33ff      	adds	r3, #255	@ 0xff
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	029b      	lsls	r3, r3, #10
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	4313      	orrs	r3, r2
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	4a97      	ldr	r2, [pc, #604]	@ (8015170 <USB_EPStartXfer+0x3e4>)
 8014f14:	4313      	orrs	r3, r2
 8014f16:	b29a      	uxth	r2, r3
 8014f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f1a:	801a      	strh	r2, [r3, #0]
 8014f1c:	e04a      	b.n	8014fb4 <USB_EPStartXfer+0x228>
 8014f1e:	1d7b      	adds	r3, r7, #5
 8014f20:	33ff      	adds	r3, #255	@ 0xff
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d108      	bne.n	8014f3a <USB_EPStartXfer+0x1ae>
 8014f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f2a:	881b      	ldrh	r3, [r3, #0]
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	4a90      	ldr	r2, [pc, #576]	@ (8015170 <USB_EPStartXfer+0x3e4>)
 8014f30:	4313      	orrs	r3, r2
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f36:	801a      	strh	r2, [r3, #0]
 8014f38:	e03c      	b.n	8014fb4 <USB_EPStartXfer+0x228>
 8014f3a:	1d7b      	adds	r3, r7, #5
 8014f3c:	33ff      	adds	r3, #255	@ 0xff
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	085b      	lsrs	r3, r3, #1
 8014f42:	1c7a      	adds	r2, r7, #1
 8014f44:	32ff      	adds	r2, #255	@ 0xff
 8014f46:	6013      	str	r3, [r2, #0]
 8014f48:	1d7b      	adds	r3, r7, #5
 8014f4a:	33ff      	adds	r3, #255	@ 0xff
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2201      	movs	r2, #1
 8014f50:	4013      	ands	r3, r2
 8014f52:	d006      	beq.n	8014f62 <USB_EPStartXfer+0x1d6>
 8014f54:	1c7b      	adds	r3, r7, #1
 8014f56:	33ff      	adds	r3, #255	@ 0xff
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	1c7a      	adds	r2, r7, #1
 8014f5e:	32ff      	adds	r2, #255	@ 0xff
 8014f60:	6013      	str	r3, [r2, #0]
 8014f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f64:	881b      	ldrh	r3, [r3, #0]
 8014f66:	b29a      	uxth	r2, r3
 8014f68:	1c7b      	adds	r3, r7, #1
 8014f6a:	33ff      	adds	r3, #255	@ 0xff
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	029b      	lsls	r3, r3, #10
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	4313      	orrs	r3, r2
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f7a:	801a      	strh	r2, [r3, #0]
 8014f7c:	e01a      	b.n	8014fb4 <USB_EPStartXfer+0x228>
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	785b      	ldrb	r3, [r3, #1]
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d116      	bne.n	8014fb4 <USB_EPStartXfer+0x228>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	2250      	movs	r2, #80	@ 0x50
 8014f8a:	5a9b      	ldrh	r3, [r3, r2]
 8014f8c:	b29b      	uxth	r3, r3
 8014f8e:	001a      	movs	r2, r3
 8014f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f92:	189b      	adds	r3, r3, r2
 8014f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	00da      	lsls	r2, r3, #3
 8014f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f9e:	18d3      	adds	r3, r2, r3
 8014fa0:	4a72      	ldr	r2, [pc, #456]	@ (801516c <USB_EPStartXfer+0x3e0>)
 8014fa2:	4694      	mov	ip, r2
 8014fa4:	4463      	add	r3, ip
 8014fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014fa8:	1d7b      	adds	r3, r7, #5
 8014faa:	33ff      	adds	r3, #255	@ 0xff
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	b29a      	uxth	r2, r3
 8014fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8014fb4:	2076      	movs	r0, #118	@ 0x76
 8014fb6:	183b      	adds	r3, r7, r0
 8014fb8:	683a      	ldr	r2, [r7, #0]
 8014fba:	8952      	ldrh	r2, [r2, #10]
 8014fbc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	6959      	ldr	r1, [r3, #20]
 8014fc2:	1d7b      	adds	r3, r7, #5
 8014fc4:	33ff      	adds	r3, #255	@ 0xff
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	b29c      	uxth	r4, r3
 8014fca:	183b      	adds	r3, r7, r0
 8014fcc:	881a      	ldrh	r2, [r3, #0]
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	0023      	movs	r3, r4
 8014fd2:	f001 f94d 	bl	8016270 <USB_WritePMA>
            ep->xfer_buff += len;
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	695a      	ldr	r2, [r3, #20]
 8014fda:	1d7b      	adds	r3, r7, #5
 8014fdc:	33ff      	adds	r3, #255	@ 0xff
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	18d2      	adds	r2, r2, r3
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	6a1a      	ldr	r2, [r3, #32]
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	691b      	ldr	r3, [r3, #16]
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d908      	bls.n	8015004 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	6a1a      	ldr	r2, [r3, #32]
 8014ff6:	1d7b      	adds	r3, r7, #5
 8014ff8:	33ff      	adds	r3, #255	@ 0xff
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	1ad2      	subs	r2, r2, r3
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	621a      	str	r2, [r3, #32]
 8015002:	e007      	b.n	8015014 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	6a1b      	ldr	r3, [r3, #32]
 8015008:	1d7a      	adds	r2, r7, #5
 801500a:	32ff      	adds	r2, #255	@ 0xff
 801500c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	2200      	movs	r2, #0
 8015012:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	785b      	ldrb	r3, [r3, #1]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d000      	beq.n	801501e <USB_EPStartXfer+0x292>
 801501c:	e070      	b.n	8015100 <USB_EPStartXfer+0x374>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	61bb      	str	r3, [r7, #24]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2250      	movs	r2, #80	@ 0x50
 8015026:	5a9b      	ldrh	r3, [r3, r2]
 8015028:	b29b      	uxth	r3, r3
 801502a:	001a      	movs	r2, r3
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	189b      	adds	r3, r3, r2
 8015030:	61bb      	str	r3, [r7, #24]
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	00da      	lsls	r2, r3, #3
 8015038:	69bb      	ldr	r3, [r7, #24]
 801503a:	18d3      	adds	r3, r2, r3
 801503c:	4a48      	ldr	r2, [pc, #288]	@ (8015160 <USB_EPStartXfer+0x3d4>)
 801503e:	4694      	mov	ip, r2
 8015040:	4463      	add	r3, ip
 8015042:	617b      	str	r3, [r7, #20]
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	881b      	ldrh	r3, [r3, #0]
 8015048:	b29b      	uxth	r3, r3
 801504a:	059b      	lsls	r3, r3, #22
 801504c:	0d9b      	lsrs	r3, r3, #22
 801504e:	b29a      	uxth	r2, r3
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	801a      	strh	r2, [r3, #0]
 8015054:	1d7b      	adds	r3, r7, #5
 8015056:	33ff      	adds	r3, #255	@ 0xff
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	2b3e      	cmp	r3, #62	@ 0x3e
 801505c:	d922      	bls.n	80150a4 <USB_EPStartXfer+0x318>
 801505e:	1d7b      	adds	r3, r7, #5
 8015060:	33ff      	adds	r3, #255	@ 0xff
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	095b      	lsrs	r3, r3, #5
 8015066:	21fc      	movs	r1, #252	@ 0xfc
 8015068:	187a      	adds	r2, r7, r1
 801506a:	6013      	str	r3, [r2, #0]
 801506c:	1d7b      	adds	r3, r7, #5
 801506e:	33ff      	adds	r3, #255	@ 0xff
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	221f      	movs	r2, #31
 8015074:	4013      	ands	r3, r2
 8015076:	d104      	bne.n	8015082 <USB_EPStartXfer+0x2f6>
 8015078:	187b      	adds	r3, r7, r1
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	3b01      	subs	r3, #1
 801507e:	187a      	adds	r2, r7, r1
 8015080:	6013      	str	r3, [r2, #0]
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	881b      	ldrh	r3, [r3, #0]
 8015086:	b29a      	uxth	r2, r3
 8015088:	23fc      	movs	r3, #252	@ 0xfc
 801508a:	18fb      	adds	r3, r7, r3
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	b29b      	uxth	r3, r3
 8015090:	029b      	lsls	r3, r3, #10
 8015092:	b29b      	uxth	r3, r3
 8015094:	4313      	orrs	r3, r2
 8015096:	b29b      	uxth	r3, r3
 8015098:	4a35      	ldr	r2, [pc, #212]	@ (8015170 <USB_EPStartXfer+0x3e4>)
 801509a:	4313      	orrs	r3, r2
 801509c:	b29a      	uxth	r2, r3
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	801a      	strh	r2, [r3, #0]
 80150a2:	e04a      	b.n	801513a <USB_EPStartXfer+0x3ae>
 80150a4:	1d7b      	adds	r3, r7, #5
 80150a6:	33ff      	adds	r3, #255	@ 0xff
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d108      	bne.n	80150c0 <USB_EPStartXfer+0x334>
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	4a2e      	ldr	r2, [pc, #184]	@ (8015170 <USB_EPStartXfer+0x3e4>)
 80150b6:	4313      	orrs	r3, r2
 80150b8:	b29a      	uxth	r2, r3
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	801a      	strh	r2, [r3, #0]
 80150be:	e03c      	b.n	801513a <USB_EPStartXfer+0x3ae>
 80150c0:	1d7b      	adds	r3, r7, #5
 80150c2:	33ff      	adds	r3, #255	@ 0xff
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	085b      	lsrs	r3, r3, #1
 80150c8:	21fc      	movs	r1, #252	@ 0xfc
 80150ca:	187a      	adds	r2, r7, r1
 80150cc:	6013      	str	r3, [r2, #0]
 80150ce:	1d7b      	adds	r3, r7, #5
 80150d0:	33ff      	adds	r3, #255	@ 0xff
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2201      	movs	r2, #1
 80150d6:	4013      	ands	r3, r2
 80150d8:	d004      	beq.n	80150e4 <USB_EPStartXfer+0x358>
 80150da:	187b      	adds	r3, r7, r1
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	3301      	adds	r3, #1
 80150e0:	187a      	adds	r2, r7, r1
 80150e2:	6013      	str	r3, [r2, #0]
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	23fc      	movs	r3, #252	@ 0xfc
 80150ec:	18fb      	adds	r3, r7, r3
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	029b      	lsls	r3, r3, #10
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	4313      	orrs	r3, r2
 80150f8:	b29a      	uxth	r2, r3
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	801a      	strh	r2, [r3, #0]
 80150fe:	e01c      	b.n	801513a <USB_EPStartXfer+0x3ae>
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	785b      	ldrb	r3, [r3, #1]
 8015104:	2b01      	cmp	r3, #1
 8015106:	d118      	bne.n	801513a <USB_EPStartXfer+0x3ae>
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	623b      	str	r3, [r7, #32]
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2250      	movs	r2, #80	@ 0x50
 8015110:	5a9b      	ldrh	r3, [r3, r2]
 8015112:	b29b      	uxth	r3, r3
 8015114:	001a      	movs	r2, r3
 8015116:	6a3b      	ldr	r3, [r7, #32]
 8015118:	189b      	adds	r3, r3, r2
 801511a:	623b      	str	r3, [r7, #32]
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	781b      	ldrb	r3, [r3, #0]
 8015120:	00da      	lsls	r2, r3, #3
 8015122:	6a3b      	ldr	r3, [r7, #32]
 8015124:	18d3      	adds	r3, r2, r3
 8015126:	4a0e      	ldr	r2, [pc, #56]	@ (8015160 <USB_EPStartXfer+0x3d4>)
 8015128:	4694      	mov	ip, r2
 801512a:	4463      	add	r3, ip
 801512c:	61fb      	str	r3, [r7, #28]
 801512e:	1d7b      	adds	r3, r7, #5
 8015130:	33ff      	adds	r3, #255	@ 0xff
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	b29a      	uxth	r2, r3
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801513a:	2076      	movs	r0, #118	@ 0x76
 801513c:	183b      	adds	r3, r7, r0
 801513e:	683a      	ldr	r2, [r7, #0]
 8015140:	8912      	ldrh	r2, [r2, #8]
 8015142:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	6959      	ldr	r1, [r3, #20]
 8015148:	1d7b      	adds	r3, r7, #5
 801514a:	33ff      	adds	r3, #255	@ 0xff
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	b29c      	uxth	r4, r3
 8015150:	183b      	adds	r3, r7, r0
 8015152:	881a      	ldrh	r2, [r3, #0]
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	0023      	movs	r3, r4
 8015158:	f001 f88a 	bl	8016270 <USB_WritePMA>
 801515c:	e329      	b.n	80157b2 <USB_EPStartXfer+0xa26>
 801515e:	46c0      	nop			@ (mov r8, r8)
 8015160:	00000402 	.word	0x00000402
 8015164:	ffff8f8f 	.word	0xffff8f8f
 8015168:	ffff8180 	.word	0xffff8180
 801516c:	00000406 	.word	0x00000406
 8015170:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	785b      	ldrb	r3, [r3, #1]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d000      	beq.n	801517e <USB_EPStartXfer+0x3f2>
 801517c:	e070      	b.n	8015260 <USB_EPStartXfer+0x4d4>
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2250      	movs	r2, #80	@ 0x50
 8015186:	5a9b      	ldrh	r3, [r3, r2]
 8015188:	b29b      	uxth	r3, r3
 801518a:	001a      	movs	r2, r3
 801518c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801518e:	189b      	adds	r3, r3, r2
 8015190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	00da      	lsls	r2, r3, #3
 8015198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801519a:	18d3      	adds	r3, r2, r3
 801519c:	4acd      	ldr	r2, [pc, #820]	@ (80154d4 <USB_EPStartXfer+0x748>)
 801519e:	4694      	mov	ip, r2
 80151a0:	4463      	add	r3, ip
 80151a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80151a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151a6:	881b      	ldrh	r3, [r3, #0]
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	059b      	lsls	r3, r3, #22
 80151ac:	0d9b      	lsrs	r3, r3, #22
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151b2:	801a      	strh	r2, [r3, #0]
 80151b4:	1d7b      	adds	r3, r7, #5
 80151b6:	33ff      	adds	r3, #255	@ 0xff
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80151bc:	d922      	bls.n	8015204 <USB_EPStartXfer+0x478>
 80151be:	1d7b      	adds	r3, r7, #5
 80151c0:	33ff      	adds	r3, #255	@ 0xff
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	095b      	lsrs	r3, r3, #5
 80151c6:	21f8      	movs	r1, #248	@ 0xf8
 80151c8:	187a      	adds	r2, r7, r1
 80151ca:	6013      	str	r3, [r2, #0]
 80151cc:	1d7b      	adds	r3, r7, #5
 80151ce:	33ff      	adds	r3, #255	@ 0xff
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	221f      	movs	r2, #31
 80151d4:	4013      	ands	r3, r2
 80151d6:	d104      	bne.n	80151e2 <USB_EPStartXfer+0x456>
 80151d8:	187b      	adds	r3, r7, r1
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	3b01      	subs	r3, #1
 80151de:	187a      	adds	r2, r7, r1
 80151e0:	6013      	str	r3, [r2, #0]
 80151e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151e4:	881b      	ldrh	r3, [r3, #0]
 80151e6:	b29a      	uxth	r2, r3
 80151e8:	23f8      	movs	r3, #248	@ 0xf8
 80151ea:	18fb      	adds	r3, r7, r3
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	029b      	lsls	r3, r3, #10
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	4313      	orrs	r3, r2
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	4ab7      	ldr	r2, [pc, #732]	@ (80154d8 <USB_EPStartXfer+0x74c>)
 80151fa:	4313      	orrs	r3, r2
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015200:	801a      	strh	r2, [r3, #0]
 8015202:	e04a      	b.n	801529a <USB_EPStartXfer+0x50e>
 8015204:	1d7b      	adds	r3, r7, #5
 8015206:	33ff      	adds	r3, #255	@ 0xff
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d108      	bne.n	8015220 <USB_EPStartXfer+0x494>
 801520e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015210:	881b      	ldrh	r3, [r3, #0]
 8015212:	b29b      	uxth	r3, r3
 8015214:	4ab0      	ldr	r2, [pc, #704]	@ (80154d8 <USB_EPStartXfer+0x74c>)
 8015216:	4313      	orrs	r3, r2
 8015218:	b29a      	uxth	r2, r3
 801521a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801521c:	801a      	strh	r2, [r3, #0]
 801521e:	e03c      	b.n	801529a <USB_EPStartXfer+0x50e>
 8015220:	1d7b      	adds	r3, r7, #5
 8015222:	33ff      	adds	r3, #255	@ 0xff
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	085b      	lsrs	r3, r3, #1
 8015228:	21f8      	movs	r1, #248	@ 0xf8
 801522a:	187a      	adds	r2, r7, r1
 801522c:	6013      	str	r3, [r2, #0]
 801522e:	1d7b      	adds	r3, r7, #5
 8015230:	33ff      	adds	r3, #255	@ 0xff
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	2201      	movs	r2, #1
 8015236:	4013      	ands	r3, r2
 8015238:	d004      	beq.n	8015244 <USB_EPStartXfer+0x4b8>
 801523a:	187b      	adds	r3, r7, r1
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	3301      	adds	r3, #1
 8015240:	187a      	adds	r2, r7, r1
 8015242:	6013      	str	r3, [r2, #0]
 8015244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015246:	881b      	ldrh	r3, [r3, #0]
 8015248:	b29a      	uxth	r2, r3
 801524a:	23f8      	movs	r3, #248	@ 0xf8
 801524c:	18fb      	adds	r3, r7, r3
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	b29b      	uxth	r3, r3
 8015252:	029b      	lsls	r3, r3, #10
 8015254:	b29b      	uxth	r3, r3
 8015256:	4313      	orrs	r3, r2
 8015258:	b29a      	uxth	r2, r3
 801525a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801525c:	801a      	strh	r2, [r3, #0]
 801525e:	e01c      	b.n	801529a <USB_EPStartXfer+0x50e>
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	785b      	ldrb	r3, [r3, #1]
 8015264:	2b01      	cmp	r3, #1
 8015266:	d118      	bne.n	801529a <USB_EPStartXfer+0x50e>
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	653b      	str	r3, [r7, #80]	@ 0x50
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	2250      	movs	r2, #80	@ 0x50
 8015270:	5a9b      	ldrh	r3, [r3, r2]
 8015272:	b29b      	uxth	r3, r3
 8015274:	001a      	movs	r2, r3
 8015276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015278:	189b      	adds	r3, r3, r2
 801527a:	653b      	str	r3, [r7, #80]	@ 0x50
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	00da      	lsls	r2, r3, #3
 8015282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015284:	18d3      	adds	r3, r2, r3
 8015286:	4a93      	ldr	r2, [pc, #588]	@ (80154d4 <USB_EPStartXfer+0x748>)
 8015288:	4694      	mov	ip, r2
 801528a:	4463      	add	r3, ip
 801528c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801528e:	1d7b      	adds	r3, r7, #5
 8015290:	33ff      	adds	r3, #255	@ 0xff
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	b29a      	uxth	r2, r3
 8015296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015298:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801529a:	2076      	movs	r0, #118	@ 0x76
 801529c:	183b      	adds	r3, r7, r0
 801529e:	683a      	ldr	r2, [r7, #0]
 80152a0:	8912      	ldrh	r2, [r2, #8]
 80152a2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	6959      	ldr	r1, [r3, #20]
 80152a8:	1d7b      	adds	r3, r7, #5
 80152aa:	33ff      	adds	r3, #255	@ 0xff
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	b29c      	uxth	r4, r3
 80152b0:	183b      	adds	r3, r7, r0
 80152b2:	881a      	ldrh	r2, [r3, #0]
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	0023      	movs	r3, r4
 80152b8:	f000 ffda 	bl	8016270 <USB_WritePMA>
            ep->xfer_buff += len;
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	695a      	ldr	r2, [r3, #20]
 80152c0:	1d7b      	adds	r3, r7, #5
 80152c2:	33ff      	adds	r3, #255	@ 0xff
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	18d2      	adds	r2, r2, r3
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	6a1a      	ldr	r2, [r3, #32]
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	691b      	ldr	r3, [r3, #16]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d908      	bls.n	80152ea <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	6a1a      	ldr	r2, [r3, #32]
 80152dc:	1d7b      	adds	r3, r7, #5
 80152de:	33ff      	adds	r3, #255	@ 0xff
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	1ad2      	subs	r2, r2, r3
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	621a      	str	r2, [r3, #32]
 80152e8:	e007      	b.n	80152fa <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	6a1b      	ldr	r3, [r3, #32]
 80152ee:	1d7a      	adds	r2, r7, #5
 80152f0:	32ff      	adds	r2, #255	@ 0xff
 80152f2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	2200      	movs	r2, #0
 80152f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	785b      	ldrb	r3, [r3, #1]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d000      	beq.n	8015308 <USB_EPStartXfer+0x57c>
 8015306:	e070      	b.n	80153ea <USB_EPStartXfer+0x65e>
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2250      	movs	r2, #80	@ 0x50
 8015310:	5a9b      	ldrh	r3, [r3, r2]
 8015312:	b29b      	uxth	r3, r3
 8015314:	001a      	movs	r2, r3
 8015316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015318:	189b      	adds	r3, r3, r2
 801531a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	00da      	lsls	r2, r3, #3
 8015322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015324:	18d3      	adds	r3, r2, r3
 8015326:	4a6d      	ldr	r2, [pc, #436]	@ (80154dc <USB_EPStartXfer+0x750>)
 8015328:	4694      	mov	ip, r2
 801532a:	4463      	add	r3, ip
 801532c:	637b      	str	r3, [r7, #52]	@ 0x34
 801532e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015330:	881b      	ldrh	r3, [r3, #0]
 8015332:	b29b      	uxth	r3, r3
 8015334:	059b      	lsls	r3, r3, #22
 8015336:	0d9b      	lsrs	r3, r3, #22
 8015338:	b29a      	uxth	r2, r3
 801533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801533c:	801a      	strh	r2, [r3, #0]
 801533e:	1d7b      	adds	r3, r7, #5
 8015340:	33ff      	adds	r3, #255	@ 0xff
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2b3e      	cmp	r3, #62	@ 0x3e
 8015346:	d922      	bls.n	801538e <USB_EPStartXfer+0x602>
 8015348:	1d7b      	adds	r3, r7, #5
 801534a:	33ff      	adds	r3, #255	@ 0xff
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	095b      	lsrs	r3, r3, #5
 8015350:	21f4      	movs	r1, #244	@ 0xf4
 8015352:	187a      	adds	r2, r7, r1
 8015354:	6013      	str	r3, [r2, #0]
 8015356:	1d7b      	adds	r3, r7, #5
 8015358:	33ff      	adds	r3, #255	@ 0xff
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	221f      	movs	r2, #31
 801535e:	4013      	ands	r3, r2
 8015360:	d104      	bne.n	801536c <USB_EPStartXfer+0x5e0>
 8015362:	187b      	adds	r3, r7, r1
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	3b01      	subs	r3, #1
 8015368:	187a      	adds	r2, r7, r1
 801536a:	6013      	str	r3, [r2, #0]
 801536c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801536e:	881b      	ldrh	r3, [r3, #0]
 8015370:	b29a      	uxth	r2, r3
 8015372:	23f4      	movs	r3, #244	@ 0xf4
 8015374:	18fb      	adds	r3, r7, r3
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	b29b      	uxth	r3, r3
 801537a:	029b      	lsls	r3, r3, #10
 801537c:	b29b      	uxth	r3, r3
 801537e:	4313      	orrs	r3, r2
 8015380:	b29b      	uxth	r3, r3
 8015382:	4a55      	ldr	r2, [pc, #340]	@ (80154d8 <USB_EPStartXfer+0x74c>)
 8015384:	4313      	orrs	r3, r2
 8015386:	b29a      	uxth	r2, r3
 8015388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801538a:	801a      	strh	r2, [r3, #0]
 801538c:	e048      	b.n	8015420 <USB_EPStartXfer+0x694>
 801538e:	1d7b      	adds	r3, r7, #5
 8015390:	33ff      	adds	r3, #255	@ 0xff
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d108      	bne.n	80153aa <USB_EPStartXfer+0x61e>
 8015398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801539a:	881b      	ldrh	r3, [r3, #0]
 801539c:	b29b      	uxth	r3, r3
 801539e:	4a4e      	ldr	r2, [pc, #312]	@ (80154d8 <USB_EPStartXfer+0x74c>)
 80153a0:	4313      	orrs	r3, r2
 80153a2:	b29a      	uxth	r2, r3
 80153a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153a6:	801a      	strh	r2, [r3, #0]
 80153a8:	e03a      	b.n	8015420 <USB_EPStartXfer+0x694>
 80153aa:	1d7b      	adds	r3, r7, #5
 80153ac:	33ff      	adds	r3, #255	@ 0xff
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	085b      	lsrs	r3, r3, #1
 80153b2:	21f4      	movs	r1, #244	@ 0xf4
 80153b4:	187a      	adds	r2, r7, r1
 80153b6:	6013      	str	r3, [r2, #0]
 80153b8:	1d7b      	adds	r3, r7, #5
 80153ba:	33ff      	adds	r3, #255	@ 0xff
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	2201      	movs	r2, #1
 80153c0:	4013      	ands	r3, r2
 80153c2:	d004      	beq.n	80153ce <USB_EPStartXfer+0x642>
 80153c4:	187b      	adds	r3, r7, r1
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	3301      	adds	r3, #1
 80153ca:	187a      	adds	r2, r7, r1
 80153cc:	6013      	str	r3, [r2, #0]
 80153ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153d0:	881b      	ldrh	r3, [r3, #0]
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	23f4      	movs	r3, #244	@ 0xf4
 80153d6:	18fb      	adds	r3, r7, r3
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	b29b      	uxth	r3, r3
 80153dc:	029b      	lsls	r3, r3, #10
 80153de:	b29b      	uxth	r3, r3
 80153e0:	4313      	orrs	r3, r2
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153e6:	801a      	strh	r2, [r3, #0]
 80153e8:	e01a      	b.n	8015420 <USB_EPStartXfer+0x694>
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	785b      	ldrb	r3, [r3, #1]
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d116      	bne.n	8015420 <USB_EPStartXfer+0x694>
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2250      	movs	r2, #80	@ 0x50
 80153f6:	5a9b      	ldrh	r3, [r3, r2]
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	001a      	movs	r2, r3
 80153fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80153fe:	189b      	adds	r3, r3, r2
 8015400:	643b      	str	r3, [r7, #64]	@ 0x40
 8015402:	683b      	ldr	r3, [r7, #0]
 8015404:	781b      	ldrb	r3, [r3, #0]
 8015406:	00da      	lsls	r2, r3, #3
 8015408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801540a:	18d3      	adds	r3, r2, r3
 801540c:	4a33      	ldr	r2, [pc, #204]	@ (80154dc <USB_EPStartXfer+0x750>)
 801540e:	4694      	mov	ip, r2
 8015410:	4463      	add	r3, ip
 8015412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015414:	1d7b      	adds	r3, r7, #5
 8015416:	33ff      	adds	r3, #255	@ 0xff
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	b29a      	uxth	r2, r3
 801541c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801541e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8015420:	2076      	movs	r0, #118	@ 0x76
 8015422:	183b      	adds	r3, r7, r0
 8015424:	683a      	ldr	r2, [r7, #0]
 8015426:	8952      	ldrh	r2, [r2, #10]
 8015428:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	6959      	ldr	r1, [r3, #20]
 801542e:	1d7b      	adds	r3, r7, #5
 8015430:	33ff      	adds	r3, #255	@ 0xff
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	b29c      	uxth	r4, r3
 8015436:	183b      	adds	r3, r7, r0
 8015438:	881a      	ldrh	r2, [r3, #0]
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	0023      	movs	r3, r4
 801543e:	f000 ff17 	bl	8016270 <USB_WritePMA>
 8015442:	e1b6      	b.n	80157b2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	6a1b      	ldr	r3, [r3, #32]
 8015448:	1d7a      	adds	r2, r7, #5
 801544a:	32ff      	adds	r2, #255	@ 0xff
 801544c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	009b      	lsls	r3, r3, #2
 8015456:	18d3      	adds	r3, r2, r3
 8015458:	881b      	ldrh	r3, [r3, #0]
 801545a:	b29a      	uxth	r2, r3
 801545c:	2062      	movs	r0, #98	@ 0x62
 801545e:	183b      	adds	r3, r7, r0
 8015460:	491f      	ldr	r1, [pc, #124]	@ (80154e0 <USB_EPStartXfer+0x754>)
 8015462:	400a      	ands	r2, r1
 8015464:	801a      	strh	r2, [r3, #0]
 8015466:	687a      	ldr	r2, [r7, #4]
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	009b      	lsls	r3, r3, #2
 801546e:	18d3      	adds	r3, r2, r3
 8015470:	183a      	adds	r2, r7, r0
 8015472:	8812      	ldrh	r2, [r2, #0]
 8015474:	491b      	ldr	r1, [pc, #108]	@ (80154e4 <USB_EPStartXfer+0x758>)
 8015476:	430a      	orrs	r2, r1
 8015478:	b292      	uxth	r2, r2
 801547a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2250      	movs	r2, #80	@ 0x50
 8015484:	5a9b      	ldrh	r3, [r3, r2]
 8015486:	b29b      	uxth	r3, r3
 8015488:	001a      	movs	r2, r3
 801548a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801548c:	189b      	adds	r3, r3, r2
 801548e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	00da      	lsls	r2, r3, #3
 8015496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015498:	18d3      	adds	r3, r2, r3
 801549a:	4a0e      	ldr	r2, [pc, #56]	@ (80154d4 <USB_EPStartXfer+0x748>)
 801549c:	4694      	mov	ip, r2
 801549e:	4463      	add	r3, ip
 80154a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80154a2:	1d7b      	adds	r3, r7, #5
 80154a4:	33ff      	adds	r3, #255	@ 0xff
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	b29a      	uxth	r2, r3
 80154aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80154ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80154ae:	2076      	movs	r0, #118	@ 0x76
 80154b0:	183b      	adds	r3, r7, r0
 80154b2:	683a      	ldr	r2, [r7, #0]
 80154b4:	8912      	ldrh	r2, [r2, #8]
 80154b6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	6959      	ldr	r1, [r3, #20]
 80154bc:	1d7b      	adds	r3, r7, #5
 80154be:	33ff      	adds	r3, #255	@ 0xff
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	b29c      	uxth	r4, r3
 80154c4:	183b      	adds	r3, r7, r0
 80154c6:	881a      	ldrh	r2, [r3, #0]
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	0023      	movs	r3, r4
 80154cc:	f000 fed0 	bl	8016270 <USB_WritePMA>
 80154d0:	e16f      	b.n	80157b2 <USB_EPStartXfer+0xa26>
 80154d2:	46c0      	nop			@ (mov r8, r8)
 80154d4:	00000402 	.word	0x00000402
 80154d8:	ffff8000 	.word	0xffff8000
 80154dc:	00000406 	.word	0x00000406
 80154e0:	ffff8e8f 	.word	0xffff8e8f
 80154e4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	6a1a      	ldr	r2, [r3, #32]
 80154ec:	1d7b      	adds	r3, r7, #5
 80154ee:	33ff      	adds	r3, #255	@ 0xff
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	1ad2      	subs	r2, r2, r3
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80154f8:	687a      	ldr	r2, [r7, #4]
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	18d3      	adds	r3, r2, r3
 8015502:	881b      	ldrh	r3, [r3, #0]
 8015504:	b29b      	uxth	r3, r3
 8015506:	001a      	movs	r2, r3
 8015508:	2340      	movs	r3, #64	@ 0x40
 801550a:	4013      	ands	r3, r2
 801550c:	d100      	bne.n	8015510 <USB_EPStartXfer+0x784>
 801550e:	e0a4      	b.n	801565a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	673b      	str	r3, [r7, #112]	@ 0x70
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	785b      	ldrb	r3, [r3, #1]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d000      	beq.n	801551e <USB_EPStartXfer+0x792>
 801551c:	e070      	b.n	8015600 <USB_EPStartXfer+0x874>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2250      	movs	r2, #80	@ 0x50
 8015526:	5a9b      	ldrh	r3, [r3, r2]
 8015528:	b29b      	uxth	r3, r3
 801552a:	001a      	movs	r2, r3
 801552c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801552e:	189b      	adds	r3, r3, r2
 8015530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	00da      	lsls	r2, r3, #3
 8015538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801553a:	18d3      	adds	r3, r2, r3
 801553c:	4abc      	ldr	r2, [pc, #752]	@ (8015830 <USB_EPStartXfer+0xaa4>)
 801553e:	4694      	mov	ip, r2
 8015540:	4463      	add	r3, ip
 8015542:	667b      	str	r3, [r7, #100]	@ 0x64
 8015544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	b29b      	uxth	r3, r3
 801554a:	059b      	lsls	r3, r3, #22
 801554c:	0d9b      	lsrs	r3, r3, #22
 801554e:	b29a      	uxth	r2, r3
 8015550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015552:	801a      	strh	r2, [r3, #0]
 8015554:	1d7b      	adds	r3, r7, #5
 8015556:	33ff      	adds	r3, #255	@ 0xff
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2b3e      	cmp	r3, #62	@ 0x3e
 801555c:	d922      	bls.n	80155a4 <USB_EPStartXfer+0x818>
 801555e:	1d7b      	adds	r3, r7, #5
 8015560:	33ff      	adds	r3, #255	@ 0xff
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	095b      	lsrs	r3, r3, #5
 8015566:	21f0      	movs	r1, #240	@ 0xf0
 8015568:	187a      	adds	r2, r7, r1
 801556a:	6013      	str	r3, [r2, #0]
 801556c:	1d7b      	adds	r3, r7, #5
 801556e:	33ff      	adds	r3, #255	@ 0xff
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	221f      	movs	r2, #31
 8015574:	4013      	ands	r3, r2
 8015576:	d104      	bne.n	8015582 <USB_EPStartXfer+0x7f6>
 8015578:	187b      	adds	r3, r7, r1
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	3b01      	subs	r3, #1
 801557e:	187a      	adds	r2, r7, r1
 8015580:	6013      	str	r3, [r2, #0]
 8015582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015584:	881b      	ldrh	r3, [r3, #0]
 8015586:	b29a      	uxth	r2, r3
 8015588:	23f0      	movs	r3, #240	@ 0xf0
 801558a:	18fb      	adds	r3, r7, r3
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	b29b      	uxth	r3, r3
 8015590:	029b      	lsls	r3, r3, #10
 8015592:	b29b      	uxth	r3, r3
 8015594:	4313      	orrs	r3, r2
 8015596:	b29b      	uxth	r3, r3
 8015598:	4aa6      	ldr	r2, [pc, #664]	@ (8015834 <USB_EPStartXfer+0xaa8>)
 801559a:	4313      	orrs	r3, r2
 801559c:	b29a      	uxth	r2, r3
 801559e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155a0:	801a      	strh	r2, [r3, #0]
 80155a2:	e048      	b.n	8015636 <USB_EPStartXfer+0x8aa>
 80155a4:	1d7b      	adds	r3, r7, #5
 80155a6:	33ff      	adds	r3, #255	@ 0xff
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d108      	bne.n	80155c0 <USB_EPStartXfer+0x834>
 80155ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155b0:	881b      	ldrh	r3, [r3, #0]
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	4a9f      	ldr	r2, [pc, #636]	@ (8015834 <USB_EPStartXfer+0xaa8>)
 80155b6:	4313      	orrs	r3, r2
 80155b8:	b29a      	uxth	r2, r3
 80155ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155bc:	801a      	strh	r2, [r3, #0]
 80155be:	e03a      	b.n	8015636 <USB_EPStartXfer+0x8aa>
 80155c0:	1d7b      	adds	r3, r7, #5
 80155c2:	33ff      	adds	r3, #255	@ 0xff
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	085b      	lsrs	r3, r3, #1
 80155c8:	21f0      	movs	r1, #240	@ 0xf0
 80155ca:	187a      	adds	r2, r7, r1
 80155cc:	6013      	str	r3, [r2, #0]
 80155ce:	1d7b      	adds	r3, r7, #5
 80155d0:	33ff      	adds	r3, #255	@ 0xff
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	2201      	movs	r2, #1
 80155d6:	4013      	ands	r3, r2
 80155d8:	d004      	beq.n	80155e4 <USB_EPStartXfer+0x858>
 80155da:	187b      	adds	r3, r7, r1
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	3301      	adds	r3, #1
 80155e0:	187a      	adds	r2, r7, r1
 80155e2:	6013      	str	r3, [r2, #0]
 80155e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155e6:	881b      	ldrh	r3, [r3, #0]
 80155e8:	b29a      	uxth	r2, r3
 80155ea:	23f0      	movs	r3, #240	@ 0xf0
 80155ec:	18fb      	adds	r3, r7, r3
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	029b      	lsls	r3, r3, #10
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	4313      	orrs	r3, r2
 80155f8:	b29a      	uxth	r2, r3
 80155fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155fc:	801a      	strh	r2, [r3, #0]
 80155fe:	e01a      	b.n	8015636 <USB_EPStartXfer+0x8aa>
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	785b      	ldrb	r3, [r3, #1]
 8015604:	2b01      	cmp	r3, #1
 8015606:	d116      	bne.n	8015636 <USB_EPStartXfer+0x8aa>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2250      	movs	r2, #80	@ 0x50
 801560c:	5a9b      	ldrh	r3, [r3, r2]
 801560e:	b29b      	uxth	r3, r3
 8015610:	001a      	movs	r2, r3
 8015612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015614:	189b      	adds	r3, r3, r2
 8015616:	673b      	str	r3, [r7, #112]	@ 0x70
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	00da      	lsls	r2, r3, #3
 801561e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015620:	18d3      	adds	r3, r2, r3
 8015622:	4a83      	ldr	r2, [pc, #524]	@ (8015830 <USB_EPStartXfer+0xaa4>)
 8015624:	4694      	mov	ip, r2
 8015626:	4463      	add	r3, ip
 8015628:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801562a:	1d7b      	adds	r3, r7, #5
 801562c:	33ff      	adds	r3, #255	@ 0xff
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	b29a      	uxth	r2, r3
 8015632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015634:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8015636:	2076      	movs	r0, #118	@ 0x76
 8015638:	183b      	adds	r3, r7, r0
 801563a:	683a      	ldr	r2, [r7, #0]
 801563c:	8952      	ldrh	r2, [r2, #10]
 801563e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	6959      	ldr	r1, [r3, #20]
 8015644:	1d7b      	adds	r3, r7, #5
 8015646:	33ff      	adds	r3, #255	@ 0xff
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	b29c      	uxth	r4, r3
 801564c:	183b      	adds	r3, r7, r0
 801564e:	881a      	ldrh	r2, [r3, #0]
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	0023      	movs	r3, r4
 8015654:	f000 fe0c 	bl	8016270 <USB_WritePMA>
 8015658:	e0ab      	b.n	80157b2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	785b      	ldrb	r3, [r3, #1]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d000      	beq.n	8015664 <USB_EPStartXfer+0x8d8>
 8015662:	e070      	b.n	8015746 <USB_EPStartXfer+0x9ba>
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2250      	movs	r2, #80	@ 0x50
 801566c:	5a9b      	ldrh	r3, [r3, r2]
 801566e:	b29b      	uxth	r3, r3
 8015670:	001a      	movs	r2, r3
 8015672:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015674:	189b      	adds	r3, r3, r2
 8015676:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	00da      	lsls	r2, r3, #3
 801567e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015680:	18d3      	adds	r3, r2, r3
 8015682:	4a6d      	ldr	r2, [pc, #436]	@ (8015838 <USB_EPStartXfer+0xaac>)
 8015684:	4694      	mov	ip, r2
 8015686:	4463      	add	r3, ip
 8015688:	67bb      	str	r3, [r7, #120]	@ 0x78
 801568a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	b29b      	uxth	r3, r3
 8015690:	059b      	lsls	r3, r3, #22
 8015692:	0d9b      	lsrs	r3, r3, #22
 8015694:	b29a      	uxth	r2, r3
 8015696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015698:	801a      	strh	r2, [r3, #0]
 801569a:	1d7b      	adds	r3, r7, #5
 801569c:	33ff      	adds	r3, #255	@ 0xff
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80156a2:	d922      	bls.n	80156ea <USB_EPStartXfer+0x95e>
 80156a4:	1d7b      	adds	r3, r7, #5
 80156a6:	33ff      	adds	r3, #255	@ 0xff
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	095b      	lsrs	r3, r3, #5
 80156ac:	21ec      	movs	r1, #236	@ 0xec
 80156ae:	187a      	adds	r2, r7, r1
 80156b0:	6013      	str	r3, [r2, #0]
 80156b2:	1d7b      	adds	r3, r7, #5
 80156b4:	33ff      	adds	r3, #255	@ 0xff
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	221f      	movs	r2, #31
 80156ba:	4013      	ands	r3, r2
 80156bc:	d104      	bne.n	80156c8 <USB_EPStartXfer+0x93c>
 80156be:	187b      	adds	r3, r7, r1
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	3b01      	subs	r3, #1
 80156c4:	187a      	adds	r2, r7, r1
 80156c6:	6013      	str	r3, [r2, #0]
 80156c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80156ca:	881b      	ldrh	r3, [r3, #0]
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	23ec      	movs	r3, #236	@ 0xec
 80156d0:	18fb      	adds	r3, r7, r3
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	b29b      	uxth	r3, r3
 80156d6:	029b      	lsls	r3, r3, #10
 80156d8:	b29b      	uxth	r3, r3
 80156da:	4313      	orrs	r3, r2
 80156dc:	b29b      	uxth	r3, r3
 80156de:	4a55      	ldr	r2, [pc, #340]	@ (8015834 <USB_EPStartXfer+0xaa8>)
 80156e0:	4313      	orrs	r3, r2
 80156e2:	b29a      	uxth	r2, r3
 80156e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80156e6:	801a      	strh	r2, [r3, #0]
 80156e8:	e052      	b.n	8015790 <USB_EPStartXfer+0xa04>
 80156ea:	1d7b      	adds	r3, r7, #5
 80156ec:	33ff      	adds	r3, #255	@ 0xff
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d108      	bne.n	8015706 <USB_EPStartXfer+0x97a>
 80156f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80156f6:	881b      	ldrh	r3, [r3, #0]
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	4a4e      	ldr	r2, [pc, #312]	@ (8015834 <USB_EPStartXfer+0xaa8>)
 80156fc:	4313      	orrs	r3, r2
 80156fe:	b29a      	uxth	r2, r3
 8015700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015702:	801a      	strh	r2, [r3, #0]
 8015704:	e044      	b.n	8015790 <USB_EPStartXfer+0xa04>
 8015706:	1d7b      	adds	r3, r7, #5
 8015708:	33ff      	adds	r3, #255	@ 0xff
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	085b      	lsrs	r3, r3, #1
 801570e:	21ec      	movs	r1, #236	@ 0xec
 8015710:	187a      	adds	r2, r7, r1
 8015712:	6013      	str	r3, [r2, #0]
 8015714:	1d7b      	adds	r3, r7, #5
 8015716:	33ff      	adds	r3, #255	@ 0xff
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	2201      	movs	r2, #1
 801571c:	4013      	ands	r3, r2
 801571e:	d004      	beq.n	801572a <USB_EPStartXfer+0x99e>
 8015720:	187b      	adds	r3, r7, r1
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	3301      	adds	r3, #1
 8015726:	187a      	adds	r2, r7, r1
 8015728:	6013      	str	r3, [r2, #0]
 801572a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801572c:	881b      	ldrh	r3, [r3, #0]
 801572e:	b29a      	uxth	r2, r3
 8015730:	23ec      	movs	r3, #236	@ 0xec
 8015732:	18fb      	adds	r3, r7, r3
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	b29b      	uxth	r3, r3
 8015738:	029b      	lsls	r3, r3, #10
 801573a:	b29b      	uxth	r3, r3
 801573c:	4313      	orrs	r3, r2
 801573e:	b29a      	uxth	r2, r3
 8015740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015742:	801a      	strh	r2, [r3, #0]
 8015744:	e024      	b.n	8015790 <USB_EPStartXfer+0xa04>
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	785b      	ldrb	r3, [r3, #1]
 801574a:	2b01      	cmp	r3, #1
 801574c:	d120      	bne.n	8015790 <USB_EPStartXfer+0xa04>
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2184      	movs	r1, #132	@ 0x84
 8015752:	187a      	adds	r2, r7, r1
 8015754:	6013      	str	r3, [r2, #0]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2250      	movs	r2, #80	@ 0x50
 801575a:	5a9b      	ldrh	r3, [r3, r2]
 801575c:	b29b      	uxth	r3, r3
 801575e:	001a      	movs	r2, r3
 8015760:	187b      	adds	r3, r7, r1
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	189b      	adds	r3, r3, r2
 8015766:	187a      	adds	r2, r7, r1
 8015768:	6013      	str	r3, [r2, #0]
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	00da      	lsls	r2, r3, #3
 8015770:	187b      	adds	r3, r7, r1
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	18d3      	adds	r3, r2, r3
 8015776:	4a30      	ldr	r2, [pc, #192]	@ (8015838 <USB_EPStartXfer+0xaac>)
 8015778:	4694      	mov	ip, r2
 801577a:	4463      	add	r3, ip
 801577c:	2180      	movs	r1, #128	@ 0x80
 801577e:	187a      	adds	r2, r7, r1
 8015780:	6013      	str	r3, [r2, #0]
 8015782:	1d7b      	adds	r3, r7, #5
 8015784:	33ff      	adds	r3, #255	@ 0xff
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	b29a      	uxth	r2, r3
 801578a:	187b      	adds	r3, r7, r1
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8015790:	2076      	movs	r0, #118	@ 0x76
 8015792:	183b      	adds	r3, r7, r0
 8015794:	683a      	ldr	r2, [r7, #0]
 8015796:	8912      	ldrh	r2, [r2, #8]
 8015798:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	6959      	ldr	r1, [r3, #20]
 801579e:	1d7b      	adds	r3, r7, #5
 80157a0:	33ff      	adds	r3, #255	@ 0xff
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	b29c      	uxth	r4, r3
 80157a6:	183b      	adds	r3, r7, r0
 80157a8:	881a      	ldrh	r2, [r3, #0]
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	0023      	movs	r3, r4
 80157ae:	f000 fd5f 	bl	8016270 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	18d3      	adds	r3, r2, r3
 80157bc:	881b      	ldrh	r3, [r3, #0]
 80157be:	b29a      	uxth	r2, r3
 80157c0:	200a      	movs	r0, #10
 80157c2:	183b      	adds	r3, r7, r0
 80157c4:	491d      	ldr	r1, [pc, #116]	@ (801583c <USB_EPStartXfer+0xab0>)
 80157c6:	400a      	ands	r2, r1
 80157c8:	801a      	strh	r2, [r3, #0]
 80157ca:	183b      	adds	r3, r7, r0
 80157cc:	183a      	adds	r2, r7, r0
 80157ce:	8812      	ldrh	r2, [r2, #0]
 80157d0:	2110      	movs	r1, #16
 80157d2:	404a      	eors	r2, r1
 80157d4:	801a      	strh	r2, [r3, #0]
 80157d6:	183b      	adds	r3, r7, r0
 80157d8:	183a      	adds	r2, r7, r0
 80157da:	8812      	ldrh	r2, [r2, #0]
 80157dc:	2120      	movs	r1, #32
 80157de:	404a      	eors	r2, r1
 80157e0:	801a      	strh	r2, [r3, #0]
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	009b      	lsls	r3, r3, #2
 80157ea:	18d3      	adds	r3, r2, r3
 80157ec:	183a      	adds	r2, r7, r0
 80157ee:	8812      	ldrh	r2, [r2, #0]
 80157f0:	4913      	ldr	r1, [pc, #76]	@ (8015840 <USB_EPStartXfer+0xab4>)
 80157f2:	430a      	orrs	r2, r1
 80157f4:	b292      	uxth	r2, r2
 80157f6:	801a      	strh	r2, [r3, #0]
 80157f8:	f000 fbf4 	bl	8015fe4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	7b1b      	ldrb	r3, [r3, #12]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d000      	beq.n	8015806 <USB_EPStartXfer+0xa7a>
 8015804:	e0a9      	b.n	801595a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	699a      	ldr	r2, [r3, #24]
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	691b      	ldr	r3, [r3, #16]
 801580e:	429a      	cmp	r2, r3
 8015810:	d918      	bls.n	8015844 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	691b      	ldr	r3, [r3, #16]
 8015816:	1d7a      	adds	r2, r7, #5
 8015818:	32ff      	adds	r2, #255	@ 0xff
 801581a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	699a      	ldr	r2, [r3, #24]
 8015820:	1d7b      	adds	r3, r7, #5
 8015822:	33ff      	adds	r3, #255	@ 0xff
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	1ad2      	subs	r2, r2, r3
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	619a      	str	r2, [r3, #24]
 801582c:	e012      	b.n	8015854 <USB_EPStartXfer+0xac8>
 801582e:	46c0      	nop			@ (mov r8, r8)
 8015830:	00000406 	.word	0x00000406
 8015834:	ffff8000 	.word	0xffff8000
 8015838:	00000402 	.word	0x00000402
 801583c:	ffff8fbf 	.word	0xffff8fbf
 8015840:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	699b      	ldr	r3, [r3, #24]
 8015848:	1d7a      	adds	r2, r7, #5
 801584a:	32ff      	adds	r2, #255	@ 0xff
 801584c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	2200      	movs	r2, #0
 8015852:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2190      	movs	r1, #144	@ 0x90
 8015858:	187a      	adds	r2, r7, r1
 801585a:	6013      	str	r3, [r2, #0]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2250      	movs	r2, #80	@ 0x50
 8015860:	5a9b      	ldrh	r3, [r3, r2]
 8015862:	b29b      	uxth	r3, r3
 8015864:	001a      	movs	r2, r3
 8015866:	187b      	adds	r3, r7, r1
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	189b      	adds	r3, r3, r2
 801586c:	187a      	adds	r2, r7, r1
 801586e:	6013      	str	r3, [r2, #0]
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	00da      	lsls	r2, r3, #3
 8015876:	187b      	adds	r3, r7, r1
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	18d3      	adds	r3, r2, r3
 801587c:	4acf      	ldr	r2, [pc, #828]	@ (8015bbc <USB_EPStartXfer+0xe30>)
 801587e:	4694      	mov	ip, r2
 8015880:	4463      	add	r3, ip
 8015882:	218c      	movs	r1, #140	@ 0x8c
 8015884:	187a      	adds	r2, r7, r1
 8015886:	6013      	str	r3, [r2, #0]
 8015888:	187b      	adds	r3, r7, r1
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	881b      	ldrh	r3, [r3, #0]
 801588e:	b29b      	uxth	r3, r3
 8015890:	059b      	lsls	r3, r3, #22
 8015892:	0d9b      	lsrs	r3, r3, #22
 8015894:	b29a      	uxth	r2, r3
 8015896:	187b      	adds	r3, r7, r1
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	801a      	strh	r2, [r3, #0]
 801589c:	1d7b      	adds	r3, r7, #5
 801589e:	33ff      	adds	r3, #255	@ 0xff
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80158a4:	d925      	bls.n	80158f2 <USB_EPStartXfer+0xb66>
 80158a6:	1d7b      	adds	r3, r7, #5
 80158a8:	33ff      	adds	r3, #255	@ 0xff
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	095b      	lsrs	r3, r3, #5
 80158ae:	21e8      	movs	r1, #232	@ 0xe8
 80158b0:	187a      	adds	r2, r7, r1
 80158b2:	6013      	str	r3, [r2, #0]
 80158b4:	1d7b      	adds	r3, r7, #5
 80158b6:	33ff      	adds	r3, #255	@ 0xff
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	221f      	movs	r2, #31
 80158bc:	4013      	ands	r3, r2
 80158be:	d104      	bne.n	80158ca <USB_EPStartXfer+0xb3e>
 80158c0:	187b      	adds	r3, r7, r1
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	3b01      	subs	r3, #1
 80158c6:	187a      	adds	r2, r7, r1
 80158c8:	6013      	str	r3, [r2, #0]
 80158ca:	218c      	movs	r1, #140	@ 0x8c
 80158cc:	187b      	adds	r3, r7, r1
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	881b      	ldrh	r3, [r3, #0]
 80158d2:	b29a      	uxth	r2, r3
 80158d4:	23e8      	movs	r3, #232	@ 0xe8
 80158d6:	18fb      	adds	r3, r7, r3
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	029b      	lsls	r3, r3, #10
 80158de:	b29b      	uxth	r3, r3
 80158e0:	4313      	orrs	r3, r2
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	4ab6      	ldr	r2, [pc, #728]	@ (8015bc0 <USB_EPStartXfer+0xe34>)
 80158e6:	4313      	orrs	r3, r2
 80158e8:	b29a      	uxth	r2, r3
 80158ea:	187b      	adds	r3, r7, r1
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	801a      	strh	r2, [r3, #0]
 80158f0:	e353      	b.n	8015f9a <USB_EPStartXfer+0x120e>
 80158f2:	1d7b      	adds	r3, r7, #5
 80158f4:	33ff      	adds	r3, #255	@ 0xff
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d10b      	bne.n	8015914 <USB_EPStartXfer+0xb88>
 80158fc:	218c      	movs	r1, #140	@ 0x8c
 80158fe:	187b      	adds	r3, r7, r1
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	881b      	ldrh	r3, [r3, #0]
 8015904:	b29b      	uxth	r3, r3
 8015906:	4aae      	ldr	r2, [pc, #696]	@ (8015bc0 <USB_EPStartXfer+0xe34>)
 8015908:	4313      	orrs	r3, r2
 801590a:	b29a      	uxth	r2, r3
 801590c:	187b      	adds	r3, r7, r1
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	801a      	strh	r2, [r3, #0]
 8015912:	e342      	b.n	8015f9a <USB_EPStartXfer+0x120e>
 8015914:	1d7b      	adds	r3, r7, #5
 8015916:	33ff      	adds	r3, #255	@ 0xff
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	085b      	lsrs	r3, r3, #1
 801591c:	21e8      	movs	r1, #232	@ 0xe8
 801591e:	187a      	adds	r2, r7, r1
 8015920:	6013      	str	r3, [r2, #0]
 8015922:	1d7b      	adds	r3, r7, #5
 8015924:	33ff      	adds	r3, #255	@ 0xff
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2201      	movs	r2, #1
 801592a:	4013      	ands	r3, r2
 801592c:	d004      	beq.n	8015938 <USB_EPStartXfer+0xbac>
 801592e:	187b      	adds	r3, r7, r1
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	3301      	adds	r3, #1
 8015934:	187a      	adds	r2, r7, r1
 8015936:	6013      	str	r3, [r2, #0]
 8015938:	218c      	movs	r1, #140	@ 0x8c
 801593a:	187b      	adds	r3, r7, r1
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	881b      	ldrh	r3, [r3, #0]
 8015940:	b29a      	uxth	r2, r3
 8015942:	23e8      	movs	r3, #232	@ 0xe8
 8015944:	18fb      	adds	r3, r7, r3
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	b29b      	uxth	r3, r3
 801594a:	029b      	lsls	r3, r3, #10
 801594c:	b29b      	uxth	r3, r3
 801594e:	4313      	orrs	r3, r2
 8015950:	b29a      	uxth	r2, r3
 8015952:	187b      	adds	r3, r7, r1
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	801a      	strh	r2, [r3, #0]
 8015958:	e31f      	b.n	8015f9a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	78db      	ldrb	r3, [r3, #3]
 801595e:	2b02      	cmp	r3, #2
 8015960:	d000      	beq.n	8015964 <USB_EPStartXfer+0xbd8>
 8015962:	e191      	b.n	8015c88 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	785b      	ldrb	r3, [r3, #1]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d000      	beq.n	801596e <USB_EPStartXfer+0xbe2>
 801596c:	e07c      	b.n	8015a68 <USB_EPStartXfer+0xcdc>
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	21ac      	movs	r1, #172	@ 0xac
 8015972:	187a      	adds	r2, r7, r1
 8015974:	6013      	str	r3, [r2, #0]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2250      	movs	r2, #80	@ 0x50
 801597a:	5a9b      	ldrh	r3, [r3, r2]
 801597c:	b29b      	uxth	r3, r3
 801597e:	001a      	movs	r2, r3
 8015980:	187b      	adds	r3, r7, r1
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	189b      	adds	r3, r3, r2
 8015986:	187a      	adds	r2, r7, r1
 8015988:	6013      	str	r3, [r2, #0]
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	00da      	lsls	r2, r3, #3
 8015990:	187b      	adds	r3, r7, r1
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	18d3      	adds	r3, r2, r3
 8015996:	4a8b      	ldr	r2, [pc, #556]	@ (8015bc4 <USB_EPStartXfer+0xe38>)
 8015998:	4694      	mov	ip, r2
 801599a:	4463      	add	r3, ip
 801599c:	21a8      	movs	r1, #168	@ 0xa8
 801599e:	187a      	adds	r2, r7, r1
 80159a0:	6013      	str	r3, [r2, #0]
 80159a2:	187b      	adds	r3, r7, r1
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	881b      	ldrh	r3, [r3, #0]
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	059b      	lsls	r3, r3, #22
 80159ac:	0d9b      	lsrs	r3, r3, #22
 80159ae:	b29a      	uxth	r2, r3
 80159b0:	187b      	adds	r3, r7, r1
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	801a      	strh	r2, [r3, #0]
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	691b      	ldr	r3, [r3, #16]
 80159ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80159bc:	d923      	bls.n	8015a06 <USB_EPStartXfer+0xc7a>
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	691b      	ldr	r3, [r3, #16]
 80159c2:	095b      	lsrs	r3, r3, #5
 80159c4:	21e4      	movs	r1, #228	@ 0xe4
 80159c6:	187a      	adds	r2, r7, r1
 80159c8:	6013      	str	r3, [r2, #0]
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	691b      	ldr	r3, [r3, #16]
 80159ce:	221f      	movs	r2, #31
 80159d0:	4013      	ands	r3, r2
 80159d2:	d104      	bne.n	80159de <USB_EPStartXfer+0xc52>
 80159d4:	187b      	adds	r3, r7, r1
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	3b01      	subs	r3, #1
 80159da:	187a      	adds	r2, r7, r1
 80159dc:	6013      	str	r3, [r2, #0]
 80159de:	21a8      	movs	r1, #168	@ 0xa8
 80159e0:	187b      	adds	r3, r7, r1
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	881b      	ldrh	r3, [r3, #0]
 80159e6:	b29a      	uxth	r2, r3
 80159e8:	23e4      	movs	r3, #228	@ 0xe4
 80159ea:	18fb      	adds	r3, r7, r3
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	029b      	lsls	r3, r3, #10
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	4313      	orrs	r3, r2
 80159f6:	b29b      	uxth	r3, r3
 80159f8:	4a71      	ldr	r2, [pc, #452]	@ (8015bc0 <USB_EPStartXfer+0xe34>)
 80159fa:	4313      	orrs	r3, r2
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	187b      	adds	r3, r7, r1
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	801a      	strh	r2, [r3, #0]
 8015a04:	e054      	b.n	8015ab0 <USB_EPStartXfer+0xd24>
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	691b      	ldr	r3, [r3, #16]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d10b      	bne.n	8015a26 <USB_EPStartXfer+0xc9a>
 8015a0e:	21a8      	movs	r1, #168	@ 0xa8
 8015a10:	187b      	adds	r3, r7, r1
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	881b      	ldrh	r3, [r3, #0]
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	4a69      	ldr	r2, [pc, #420]	@ (8015bc0 <USB_EPStartXfer+0xe34>)
 8015a1a:	4313      	orrs	r3, r2
 8015a1c:	b29a      	uxth	r2, r3
 8015a1e:	187b      	adds	r3, r7, r1
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	801a      	strh	r2, [r3, #0]
 8015a24:	e044      	b.n	8015ab0 <USB_EPStartXfer+0xd24>
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	691b      	ldr	r3, [r3, #16]
 8015a2a:	085b      	lsrs	r3, r3, #1
 8015a2c:	21e4      	movs	r1, #228	@ 0xe4
 8015a2e:	187a      	adds	r2, r7, r1
 8015a30:	6013      	str	r3, [r2, #0]
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	691b      	ldr	r3, [r3, #16]
 8015a36:	2201      	movs	r2, #1
 8015a38:	4013      	ands	r3, r2
 8015a3a:	d004      	beq.n	8015a46 <USB_EPStartXfer+0xcba>
 8015a3c:	187b      	adds	r3, r7, r1
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	3301      	adds	r3, #1
 8015a42:	187a      	adds	r2, r7, r1
 8015a44:	6013      	str	r3, [r2, #0]
 8015a46:	21a8      	movs	r1, #168	@ 0xa8
 8015a48:	187b      	adds	r3, r7, r1
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	881b      	ldrh	r3, [r3, #0]
 8015a4e:	b29a      	uxth	r2, r3
 8015a50:	23e4      	movs	r3, #228	@ 0xe4
 8015a52:	18fb      	adds	r3, r7, r3
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	029b      	lsls	r3, r3, #10
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	4313      	orrs	r3, r2
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	187b      	adds	r3, r7, r1
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	801a      	strh	r2, [r3, #0]
 8015a66:	e023      	b.n	8015ab0 <USB_EPStartXfer+0xd24>
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	785b      	ldrb	r3, [r3, #1]
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	d11f      	bne.n	8015ab0 <USB_EPStartXfer+0xd24>
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	21b4      	movs	r1, #180	@ 0xb4
 8015a74:	187a      	adds	r2, r7, r1
 8015a76:	6013      	str	r3, [r2, #0]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2250      	movs	r2, #80	@ 0x50
 8015a7c:	5a9b      	ldrh	r3, [r3, r2]
 8015a7e:	b29b      	uxth	r3, r3
 8015a80:	001a      	movs	r2, r3
 8015a82:	187b      	adds	r3, r7, r1
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	189b      	adds	r3, r3, r2
 8015a88:	187a      	adds	r2, r7, r1
 8015a8a:	6013      	str	r3, [r2, #0]
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	00da      	lsls	r2, r3, #3
 8015a92:	187b      	adds	r3, r7, r1
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	18d3      	adds	r3, r2, r3
 8015a98:	4a4a      	ldr	r2, [pc, #296]	@ (8015bc4 <USB_EPStartXfer+0xe38>)
 8015a9a:	4694      	mov	ip, r2
 8015a9c:	4463      	add	r3, ip
 8015a9e:	21b0      	movs	r1, #176	@ 0xb0
 8015aa0:	187a      	adds	r2, r7, r1
 8015aa2:	6013      	str	r3, [r2, #0]
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	691b      	ldr	r3, [r3, #16]
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	187b      	adds	r3, r7, r1
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	801a      	strh	r2, [r3, #0]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	22a4      	movs	r2, #164	@ 0xa4
 8015ab4:	18ba      	adds	r2, r7, r2
 8015ab6:	6013      	str	r3, [r2, #0]
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	785b      	ldrb	r3, [r3, #1]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d000      	beq.n	8015ac2 <USB_EPStartXfer+0xd36>
 8015ac0:	e082      	b.n	8015bc8 <USB_EPStartXfer+0xe3c>
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	219c      	movs	r1, #156	@ 0x9c
 8015ac6:	187a      	adds	r2, r7, r1
 8015ac8:	6013      	str	r3, [r2, #0]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2250      	movs	r2, #80	@ 0x50
 8015ace:	5a9b      	ldrh	r3, [r3, r2]
 8015ad0:	b29b      	uxth	r3, r3
 8015ad2:	001a      	movs	r2, r3
 8015ad4:	187b      	adds	r3, r7, r1
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	189b      	adds	r3, r3, r2
 8015ada:	187a      	adds	r2, r7, r1
 8015adc:	6013      	str	r3, [r2, #0]
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	781b      	ldrb	r3, [r3, #0]
 8015ae2:	00da      	lsls	r2, r3, #3
 8015ae4:	187b      	adds	r3, r7, r1
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	18d3      	adds	r3, r2, r3
 8015aea:	4a34      	ldr	r2, [pc, #208]	@ (8015bbc <USB_EPStartXfer+0xe30>)
 8015aec:	4694      	mov	ip, r2
 8015aee:	4463      	add	r3, ip
 8015af0:	2198      	movs	r1, #152	@ 0x98
 8015af2:	187a      	adds	r2, r7, r1
 8015af4:	6013      	str	r3, [r2, #0]
 8015af6:	187b      	adds	r3, r7, r1
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	881b      	ldrh	r3, [r3, #0]
 8015afc:	b29b      	uxth	r3, r3
 8015afe:	059b      	lsls	r3, r3, #22
 8015b00:	0d9b      	lsrs	r3, r3, #22
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	187b      	adds	r3, r7, r1
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	801a      	strh	r2, [r3, #0]
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	691b      	ldr	r3, [r3, #16]
 8015b0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8015b10:	d923      	bls.n	8015b5a <USB_EPStartXfer+0xdce>
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	691b      	ldr	r3, [r3, #16]
 8015b16:	095b      	lsrs	r3, r3, #5
 8015b18:	21e0      	movs	r1, #224	@ 0xe0
 8015b1a:	187a      	adds	r2, r7, r1
 8015b1c:	6013      	str	r3, [r2, #0]
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	691b      	ldr	r3, [r3, #16]
 8015b22:	221f      	movs	r2, #31
 8015b24:	4013      	ands	r3, r2
 8015b26:	d104      	bne.n	8015b32 <USB_EPStartXfer+0xda6>
 8015b28:	187b      	adds	r3, r7, r1
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	3b01      	subs	r3, #1
 8015b2e:	187a      	adds	r2, r7, r1
 8015b30:	6013      	str	r3, [r2, #0]
 8015b32:	2198      	movs	r1, #152	@ 0x98
 8015b34:	187b      	adds	r3, r7, r1
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	881b      	ldrh	r3, [r3, #0]
 8015b3a:	b29a      	uxth	r2, r3
 8015b3c:	23e0      	movs	r3, #224	@ 0xe0
 8015b3e:	18fb      	adds	r3, r7, r3
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	b29b      	uxth	r3, r3
 8015b44:	029b      	lsls	r3, r3, #10
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	4313      	orrs	r3, r2
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8015bc0 <USB_EPStartXfer+0xe34>)
 8015b4e:	4313      	orrs	r3, r2
 8015b50:	b29a      	uxth	r2, r3
 8015b52:	187b      	adds	r3, r7, r1
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	801a      	strh	r2, [r3, #0]
 8015b58:	e057      	b.n	8015c0a <USB_EPStartXfer+0xe7e>
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	691b      	ldr	r3, [r3, #16]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d10b      	bne.n	8015b7a <USB_EPStartXfer+0xdee>
 8015b62:	2198      	movs	r1, #152	@ 0x98
 8015b64:	187b      	adds	r3, r7, r1
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	881b      	ldrh	r3, [r3, #0]
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	4a14      	ldr	r2, [pc, #80]	@ (8015bc0 <USB_EPStartXfer+0xe34>)
 8015b6e:	4313      	orrs	r3, r2
 8015b70:	b29a      	uxth	r2, r3
 8015b72:	187b      	adds	r3, r7, r1
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	801a      	strh	r2, [r3, #0]
 8015b78:	e047      	b.n	8015c0a <USB_EPStartXfer+0xe7e>
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	691b      	ldr	r3, [r3, #16]
 8015b7e:	085b      	lsrs	r3, r3, #1
 8015b80:	21e0      	movs	r1, #224	@ 0xe0
 8015b82:	187a      	adds	r2, r7, r1
 8015b84:	6013      	str	r3, [r2, #0]
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	691b      	ldr	r3, [r3, #16]
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	4013      	ands	r3, r2
 8015b8e:	d004      	beq.n	8015b9a <USB_EPStartXfer+0xe0e>
 8015b90:	187b      	adds	r3, r7, r1
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	3301      	adds	r3, #1
 8015b96:	187a      	adds	r2, r7, r1
 8015b98:	6013      	str	r3, [r2, #0]
 8015b9a:	2198      	movs	r1, #152	@ 0x98
 8015b9c:	187b      	adds	r3, r7, r1
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	b29a      	uxth	r2, r3
 8015ba4:	23e0      	movs	r3, #224	@ 0xe0
 8015ba6:	18fb      	adds	r3, r7, r3
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	029b      	lsls	r3, r3, #10
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	4313      	orrs	r3, r2
 8015bb2:	b29a      	uxth	r2, r3
 8015bb4:	187b      	adds	r3, r7, r1
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	801a      	strh	r2, [r3, #0]
 8015bba:	e026      	b.n	8015c0a <USB_EPStartXfer+0xe7e>
 8015bbc:	00000406 	.word	0x00000406
 8015bc0:	ffff8000 	.word	0xffff8000
 8015bc4:	00000402 	.word	0x00000402
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	785b      	ldrb	r3, [r3, #1]
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d11c      	bne.n	8015c0a <USB_EPStartXfer+0xe7e>
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2250      	movs	r2, #80	@ 0x50
 8015bd4:	5a9b      	ldrh	r3, [r3, r2]
 8015bd6:	b29b      	uxth	r3, r3
 8015bd8:	001a      	movs	r2, r3
 8015bda:	21a4      	movs	r1, #164	@ 0xa4
 8015bdc:	187b      	adds	r3, r7, r1
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	189b      	adds	r3, r3, r2
 8015be2:	187a      	adds	r2, r7, r1
 8015be4:	6013      	str	r3, [r2, #0]
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	00da      	lsls	r2, r3, #3
 8015bec:	187b      	adds	r3, r7, r1
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	18d3      	adds	r3, r2, r3
 8015bf2:	4ad2      	ldr	r2, [pc, #840]	@ (8015f3c <USB_EPStartXfer+0x11b0>)
 8015bf4:	4694      	mov	ip, r2
 8015bf6:	4463      	add	r3, ip
 8015bf8:	21a0      	movs	r1, #160	@ 0xa0
 8015bfa:	187a      	adds	r2, r7, r1
 8015bfc:	6013      	str	r3, [r2, #0]
 8015bfe:	683b      	ldr	r3, [r7, #0]
 8015c00:	691b      	ldr	r3, [r3, #16]
 8015c02:	b29a      	uxth	r2, r3
 8015c04:	187b      	adds	r3, r7, r1
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	69db      	ldr	r3, [r3, #28]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d100      	bne.n	8015c14 <USB_EPStartXfer+0xe88>
 8015c12:	e1c2      	b.n	8015f9a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8015c14:	687a      	ldr	r2, [r7, #4]
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	781b      	ldrb	r3, [r3, #0]
 8015c1a:	009b      	lsls	r3, r3, #2
 8015c1c:	18d2      	adds	r2, r2, r3
 8015c1e:	2196      	movs	r1, #150	@ 0x96
 8015c20:	187b      	adds	r3, r7, r1
 8015c22:	8812      	ldrh	r2, [r2, #0]
 8015c24:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8015c26:	187b      	adds	r3, r7, r1
 8015c28:	881a      	ldrh	r2, [r3, #0]
 8015c2a:	2380      	movs	r3, #128	@ 0x80
 8015c2c:	01db      	lsls	r3, r3, #7
 8015c2e:	4013      	ands	r3, r2
 8015c30:	d004      	beq.n	8015c3c <USB_EPStartXfer+0xeb0>
 8015c32:	187b      	adds	r3, r7, r1
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	2240      	movs	r2, #64	@ 0x40
 8015c38:	4013      	ands	r3, r2
 8015c3a:	d10d      	bne.n	8015c58 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015c3c:	2196      	movs	r1, #150	@ 0x96
 8015c3e:	187b      	adds	r3, r7, r1
 8015c40:	881a      	ldrh	r2, [r3, #0]
 8015c42:	2380      	movs	r3, #128	@ 0x80
 8015c44:	01db      	lsls	r3, r3, #7
 8015c46:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8015c48:	d000      	beq.n	8015c4c <USB_EPStartXfer+0xec0>
 8015c4a:	e1a6      	b.n	8015f9a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015c4c:	187b      	adds	r3, r7, r1
 8015c4e:	881b      	ldrh	r3, [r3, #0]
 8015c50:	2240      	movs	r2, #64	@ 0x40
 8015c52:	4013      	ands	r3, r2
 8015c54:	d000      	beq.n	8015c58 <USB_EPStartXfer+0xecc>
 8015c56:	e1a0      	b.n	8015f9a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	18d3      	adds	r3, r2, r3
 8015c62:	881b      	ldrh	r3, [r3, #0]
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	2094      	movs	r0, #148	@ 0x94
 8015c68:	183b      	adds	r3, r7, r0
 8015c6a:	49b5      	ldr	r1, [pc, #724]	@ (8015f40 <USB_EPStartXfer+0x11b4>)
 8015c6c:	400a      	ands	r2, r1
 8015c6e:	801a      	strh	r2, [r3, #0]
 8015c70:	687a      	ldr	r2, [r7, #4]
 8015c72:	683b      	ldr	r3, [r7, #0]
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	009b      	lsls	r3, r3, #2
 8015c78:	18d3      	adds	r3, r2, r3
 8015c7a:	183a      	adds	r2, r7, r0
 8015c7c:	8812      	ldrh	r2, [r2, #0]
 8015c7e:	49b1      	ldr	r1, [pc, #708]	@ (8015f44 <USB_EPStartXfer+0x11b8>)
 8015c80:	430a      	orrs	r2, r1
 8015c82:	b292      	uxth	r2, r2
 8015c84:	801a      	strh	r2, [r3, #0]
 8015c86:	e188      	b.n	8015f9a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	78db      	ldrb	r3, [r3, #3]
 8015c8c:	2b01      	cmp	r3, #1
 8015c8e:	d000      	beq.n	8015c92 <USB_EPStartXfer+0xf06>
 8015c90:	e181      	b.n	8015f96 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	699a      	ldr	r2, [r3, #24]
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	691b      	ldr	r3, [r3, #16]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d90d      	bls.n	8015cba <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	691b      	ldr	r3, [r3, #16]
 8015ca2:	1d7a      	adds	r2, r7, #5
 8015ca4:	32ff      	adds	r2, #255	@ 0xff
 8015ca6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	699a      	ldr	r2, [r3, #24]
 8015cac:	1d7b      	adds	r3, r7, #5
 8015cae:	33ff      	adds	r3, #255	@ 0xff
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	1ad2      	subs	r2, r2, r3
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	619a      	str	r2, [r3, #24]
 8015cb8:	e007      	b.n	8015cca <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	699b      	ldr	r3, [r3, #24]
 8015cbe:	1d7a      	adds	r2, r7, #5
 8015cc0:	32ff      	adds	r2, #255	@ 0xff
 8015cc2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	785b      	ldrb	r3, [r3, #1]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d000      	beq.n	8015cd4 <USB_EPStartXfer+0xf48>
 8015cd2:	e082      	b.n	8015dda <USB_EPStartXfer+0x104e>
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	21cc      	movs	r1, #204	@ 0xcc
 8015cd8:	187a      	adds	r2, r7, r1
 8015cda:	6013      	str	r3, [r2, #0]
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2250      	movs	r2, #80	@ 0x50
 8015ce0:	5a9b      	ldrh	r3, [r3, r2]
 8015ce2:	b29b      	uxth	r3, r3
 8015ce4:	001a      	movs	r2, r3
 8015ce6:	187b      	adds	r3, r7, r1
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	189b      	adds	r3, r3, r2
 8015cec:	187a      	adds	r2, r7, r1
 8015cee:	6013      	str	r3, [r2, #0]
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	00da      	lsls	r2, r3, #3
 8015cf6:	187b      	adds	r3, r7, r1
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	18d3      	adds	r3, r2, r3
 8015cfc:	4a92      	ldr	r2, [pc, #584]	@ (8015f48 <USB_EPStartXfer+0x11bc>)
 8015cfe:	4694      	mov	ip, r2
 8015d00:	4463      	add	r3, ip
 8015d02:	21c8      	movs	r1, #200	@ 0xc8
 8015d04:	187a      	adds	r2, r7, r1
 8015d06:	6013      	str	r3, [r2, #0]
 8015d08:	187b      	adds	r3, r7, r1
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	881b      	ldrh	r3, [r3, #0]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	059b      	lsls	r3, r3, #22
 8015d12:	0d9b      	lsrs	r3, r3, #22
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	187b      	adds	r3, r7, r1
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	801a      	strh	r2, [r3, #0]
 8015d1c:	1d7b      	adds	r3, r7, #5
 8015d1e:	33ff      	adds	r3, #255	@ 0xff
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b3e      	cmp	r3, #62	@ 0x3e
 8015d24:	d925      	bls.n	8015d72 <USB_EPStartXfer+0xfe6>
 8015d26:	1d7b      	adds	r3, r7, #5
 8015d28:	33ff      	adds	r3, #255	@ 0xff
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	095b      	lsrs	r3, r3, #5
 8015d2e:	21dc      	movs	r1, #220	@ 0xdc
 8015d30:	187a      	adds	r2, r7, r1
 8015d32:	6013      	str	r3, [r2, #0]
 8015d34:	1d7b      	adds	r3, r7, #5
 8015d36:	33ff      	adds	r3, #255	@ 0xff
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	221f      	movs	r2, #31
 8015d3c:	4013      	ands	r3, r2
 8015d3e:	d104      	bne.n	8015d4a <USB_EPStartXfer+0xfbe>
 8015d40:	187b      	adds	r3, r7, r1
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	3b01      	subs	r3, #1
 8015d46:	187a      	adds	r2, r7, r1
 8015d48:	6013      	str	r3, [r2, #0]
 8015d4a:	21c8      	movs	r1, #200	@ 0xc8
 8015d4c:	187b      	adds	r3, r7, r1
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	881b      	ldrh	r3, [r3, #0]
 8015d52:	b29a      	uxth	r2, r3
 8015d54:	23dc      	movs	r3, #220	@ 0xdc
 8015d56:	18fb      	adds	r3, r7, r3
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	029b      	lsls	r3, r3, #10
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	4313      	orrs	r3, r2
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	4a79      	ldr	r2, [pc, #484]	@ (8015f4c <USB_EPStartXfer+0x11c0>)
 8015d66:	4313      	orrs	r3, r2
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	187b      	adds	r3, r7, r1
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	801a      	strh	r2, [r3, #0]
 8015d70:	e058      	b.n	8015e24 <USB_EPStartXfer+0x1098>
 8015d72:	1d7b      	adds	r3, r7, #5
 8015d74:	33ff      	adds	r3, #255	@ 0xff
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d10b      	bne.n	8015d94 <USB_EPStartXfer+0x1008>
 8015d7c:	21c8      	movs	r1, #200	@ 0xc8
 8015d7e:	187b      	adds	r3, r7, r1
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	881b      	ldrh	r3, [r3, #0]
 8015d84:	b29b      	uxth	r3, r3
 8015d86:	4a71      	ldr	r2, [pc, #452]	@ (8015f4c <USB_EPStartXfer+0x11c0>)
 8015d88:	4313      	orrs	r3, r2
 8015d8a:	b29a      	uxth	r2, r3
 8015d8c:	187b      	adds	r3, r7, r1
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	801a      	strh	r2, [r3, #0]
 8015d92:	e047      	b.n	8015e24 <USB_EPStartXfer+0x1098>
 8015d94:	1d7b      	adds	r3, r7, #5
 8015d96:	33ff      	adds	r3, #255	@ 0xff
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	085b      	lsrs	r3, r3, #1
 8015d9c:	21dc      	movs	r1, #220	@ 0xdc
 8015d9e:	187a      	adds	r2, r7, r1
 8015da0:	6013      	str	r3, [r2, #0]
 8015da2:	1d7b      	adds	r3, r7, #5
 8015da4:	33ff      	adds	r3, #255	@ 0xff
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	2201      	movs	r2, #1
 8015daa:	4013      	ands	r3, r2
 8015dac:	d004      	beq.n	8015db8 <USB_EPStartXfer+0x102c>
 8015dae:	187b      	adds	r3, r7, r1
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	3301      	adds	r3, #1
 8015db4:	187a      	adds	r2, r7, r1
 8015db6:	6013      	str	r3, [r2, #0]
 8015db8:	21c8      	movs	r1, #200	@ 0xc8
 8015dba:	187b      	adds	r3, r7, r1
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	881b      	ldrh	r3, [r3, #0]
 8015dc0:	b29a      	uxth	r2, r3
 8015dc2:	23dc      	movs	r3, #220	@ 0xdc
 8015dc4:	18fb      	adds	r3, r7, r3
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	b29b      	uxth	r3, r3
 8015dca:	029b      	lsls	r3, r3, #10
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	4313      	orrs	r3, r2
 8015dd0:	b29a      	uxth	r2, r3
 8015dd2:	187b      	adds	r3, r7, r1
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	801a      	strh	r2, [r3, #0]
 8015dd8:	e024      	b.n	8015e24 <USB_EPStartXfer+0x1098>
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	785b      	ldrb	r3, [r3, #1]
 8015dde:	2b01      	cmp	r3, #1
 8015de0:	d120      	bne.n	8015e24 <USB_EPStartXfer+0x1098>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	21d4      	movs	r1, #212	@ 0xd4
 8015de6:	187a      	adds	r2, r7, r1
 8015de8:	6013      	str	r3, [r2, #0]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2250      	movs	r2, #80	@ 0x50
 8015dee:	5a9b      	ldrh	r3, [r3, r2]
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	001a      	movs	r2, r3
 8015df4:	187b      	adds	r3, r7, r1
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	189b      	adds	r3, r3, r2
 8015dfa:	187a      	adds	r2, r7, r1
 8015dfc:	6013      	str	r3, [r2, #0]
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	00da      	lsls	r2, r3, #3
 8015e04:	187b      	adds	r3, r7, r1
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	18d3      	adds	r3, r2, r3
 8015e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8015f48 <USB_EPStartXfer+0x11bc>)
 8015e0c:	4694      	mov	ip, r2
 8015e0e:	4463      	add	r3, ip
 8015e10:	21d0      	movs	r1, #208	@ 0xd0
 8015e12:	187a      	adds	r2, r7, r1
 8015e14:	6013      	str	r3, [r2, #0]
 8015e16:	1d7b      	adds	r3, r7, #5
 8015e18:	33ff      	adds	r3, #255	@ 0xff
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	187b      	adds	r3, r7, r1
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	801a      	strh	r2, [r3, #0]
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	22c4      	movs	r2, #196	@ 0xc4
 8015e28:	18ba      	adds	r2, r7, r2
 8015e2a:	6013      	str	r3, [r2, #0]
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	785b      	ldrb	r3, [r3, #1]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d000      	beq.n	8015e36 <USB_EPStartXfer+0x10aa>
 8015e34:	e08c      	b.n	8015f50 <USB_EPStartXfer+0x11c4>
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	21bc      	movs	r1, #188	@ 0xbc
 8015e3a:	187a      	adds	r2, r7, r1
 8015e3c:	6013      	str	r3, [r2, #0]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2250      	movs	r2, #80	@ 0x50
 8015e42:	5a9b      	ldrh	r3, [r3, r2]
 8015e44:	b29b      	uxth	r3, r3
 8015e46:	001a      	movs	r2, r3
 8015e48:	187b      	adds	r3, r7, r1
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	189b      	adds	r3, r3, r2
 8015e4e:	187a      	adds	r2, r7, r1
 8015e50:	6013      	str	r3, [r2, #0]
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	00da      	lsls	r2, r3, #3
 8015e58:	187b      	adds	r3, r7, r1
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	18d3      	adds	r3, r2, r3
 8015e5e:	4a37      	ldr	r2, [pc, #220]	@ (8015f3c <USB_EPStartXfer+0x11b0>)
 8015e60:	4694      	mov	ip, r2
 8015e62:	4463      	add	r3, ip
 8015e64:	21b8      	movs	r1, #184	@ 0xb8
 8015e66:	187a      	adds	r2, r7, r1
 8015e68:	6013      	str	r3, [r2, #0]
 8015e6a:	187b      	adds	r3, r7, r1
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	881b      	ldrh	r3, [r3, #0]
 8015e70:	b29b      	uxth	r3, r3
 8015e72:	059b      	lsls	r3, r3, #22
 8015e74:	0d9b      	lsrs	r3, r3, #22
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	187b      	adds	r3, r7, r1
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	801a      	strh	r2, [r3, #0]
 8015e7e:	1d7b      	adds	r3, r7, #5
 8015e80:	33ff      	adds	r3, #255	@ 0xff
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	2b3e      	cmp	r3, #62	@ 0x3e
 8015e86:	d925      	bls.n	8015ed4 <USB_EPStartXfer+0x1148>
 8015e88:	1d7b      	adds	r3, r7, #5
 8015e8a:	33ff      	adds	r3, #255	@ 0xff
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	095b      	lsrs	r3, r3, #5
 8015e90:	21d8      	movs	r1, #216	@ 0xd8
 8015e92:	187a      	adds	r2, r7, r1
 8015e94:	6013      	str	r3, [r2, #0]
 8015e96:	1d7b      	adds	r3, r7, #5
 8015e98:	33ff      	adds	r3, #255	@ 0xff
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	221f      	movs	r2, #31
 8015e9e:	4013      	ands	r3, r2
 8015ea0:	d104      	bne.n	8015eac <USB_EPStartXfer+0x1120>
 8015ea2:	187b      	adds	r3, r7, r1
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	3b01      	subs	r3, #1
 8015ea8:	187a      	adds	r2, r7, r1
 8015eaa:	6013      	str	r3, [r2, #0]
 8015eac:	21b8      	movs	r1, #184	@ 0xb8
 8015eae:	187b      	adds	r3, r7, r1
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	881b      	ldrh	r3, [r3, #0]
 8015eb4:	b29a      	uxth	r2, r3
 8015eb6:	23d8      	movs	r3, #216	@ 0xd8
 8015eb8:	18fb      	adds	r3, r7, r3
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	029b      	lsls	r3, r3, #10
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	4313      	orrs	r3, r2
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	4a21      	ldr	r2, [pc, #132]	@ (8015f4c <USB_EPStartXfer+0x11c0>)
 8015ec8:	4313      	orrs	r3, r2
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	187b      	adds	r3, r7, r1
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	801a      	strh	r2, [r3, #0]
 8015ed2:	e062      	b.n	8015f9a <USB_EPStartXfer+0x120e>
 8015ed4:	1d7b      	adds	r3, r7, #5
 8015ed6:	33ff      	adds	r3, #255	@ 0xff
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d10b      	bne.n	8015ef6 <USB_EPStartXfer+0x116a>
 8015ede:	21b8      	movs	r1, #184	@ 0xb8
 8015ee0:	187b      	adds	r3, r7, r1
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	881b      	ldrh	r3, [r3, #0]
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	4a18      	ldr	r2, [pc, #96]	@ (8015f4c <USB_EPStartXfer+0x11c0>)
 8015eea:	4313      	orrs	r3, r2
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	187b      	adds	r3, r7, r1
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	801a      	strh	r2, [r3, #0]
 8015ef4:	e051      	b.n	8015f9a <USB_EPStartXfer+0x120e>
 8015ef6:	1d7b      	adds	r3, r7, #5
 8015ef8:	33ff      	adds	r3, #255	@ 0xff
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	085b      	lsrs	r3, r3, #1
 8015efe:	21d8      	movs	r1, #216	@ 0xd8
 8015f00:	187a      	adds	r2, r7, r1
 8015f02:	6013      	str	r3, [r2, #0]
 8015f04:	1d7b      	adds	r3, r7, #5
 8015f06:	33ff      	adds	r3, #255	@ 0xff
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2201      	movs	r2, #1
 8015f0c:	4013      	ands	r3, r2
 8015f0e:	d004      	beq.n	8015f1a <USB_EPStartXfer+0x118e>
 8015f10:	187b      	adds	r3, r7, r1
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	3301      	adds	r3, #1
 8015f16:	187a      	adds	r2, r7, r1
 8015f18:	6013      	str	r3, [r2, #0]
 8015f1a:	21b8      	movs	r1, #184	@ 0xb8
 8015f1c:	187b      	adds	r3, r7, r1
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	881b      	ldrh	r3, [r3, #0]
 8015f22:	b29a      	uxth	r2, r3
 8015f24:	23d8      	movs	r3, #216	@ 0xd8
 8015f26:	18fb      	adds	r3, r7, r3
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	b29b      	uxth	r3, r3
 8015f2c:	029b      	lsls	r3, r3, #10
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	4313      	orrs	r3, r2
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	187b      	adds	r3, r7, r1
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	801a      	strh	r2, [r3, #0]
 8015f3a:	e02e      	b.n	8015f9a <USB_EPStartXfer+0x120e>
 8015f3c:	00000406 	.word	0x00000406
 8015f40:	ffff8f8f 	.word	0xffff8f8f
 8015f44:	ffff80c0 	.word	0xffff80c0
 8015f48:	00000402 	.word	0x00000402
 8015f4c:	ffff8000 	.word	0xffff8000
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	785b      	ldrb	r3, [r3, #1]
 8015f54:	2b01      	cmp	r3, #1
 8015f56:	d120      	bne.n	8015f9a <USB_EPStartXfer+0x120e>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2250      	movs	r2, #80	@ 0x50
 8015f5c:	5a9b      	ldrh	r3, [r3, r2]
 8015f5e:	b29b      	uxth	r3, r3
 8015f60:	001a      	movs	r2, r3
 8015f62:	21c4      	movs	r1, #196	@ 0xc4
 8015f64:	187b      	adds	r3, r7, r1
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	189b      	adds	r3, r3, r2
 8015f6a:	187a      	adds	r2, r7, r1
 8015f6c:	6013      	str	r3, [r2, #0]
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	00da      	lsls	r2, r3, #3
 8015f74:	187b      	adds	r3, r7, r1
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	18d3      	adds	r3, r2, r3
 8015f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8015ff0 <USB_EPStartXfer+0x1264>)
 8015f7c:	4694      	mov	ip, r2
 8015f7e:	4463      	add	r3, ip
 8015f80:	21c0      	movs	r1, #192	@ 0xc0
 8015f82:	187a      	adds	r2, r7, r1
 8015f84:	6013      	str	r3, [r2, #0]
 8015f86:	1d7b      	adds	r3, r7, #5
 8015f88:	33ff      	adds	r3, #255	@ 0xff
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	b29a      	uxth	r2, r3
 8015f8e:	187b      	adds	r3, r7, r1
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	801a      	strh	r2, [r3, #0]
 8015f94:	e001      	b.n	8015f9a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8015f96:	2301      	movs	r3, #1
 8015f98:	e025      	b.n	8015fe6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	18d3      	adds	r3, r2, r3
 8015fa4:	881b      	ldrh	r3, [r3, #0]
 8015fa6:	b29a      	uxth	r2, r3
 8015fa8:	208a      	movs	r0, #138	@ 0x8a
 8015faa:	183b      	adds	r3, r7, r0
 8015fac:	4911      	ldr	r1, [pc, #68]	@ (8015ff4 <USB_EPStartXfer+0x1268>)
 8015fae:	400a      	ands	r2, r1
 8015fb0:	801a      	strh	r2, [r3, #0]
 8015fb2:	183b      	adds	r3, r7, r0
 8015fb4:	183a      	adds	r2, r7, r0
 8015fb6:	8812      	ldrh	r2, [r2, #0]
 8015fb8:	2180      	movs	r1, #128	@ 0x80
 8015fba:	0149      	lsls	r1, r1, #5
 8015fbc:	404a      	eors	r2, r1
 8015fbe:	801a      	strh	r2, [r3, #0]
 8015fc0:	183b      	adds	r3, r7, r0
 8015fc2:	183a      	adds	r2, r7, r0
 8015fc4:	8812      	ldrh	r2, [r2, #0]
 8015fc6:	2180      	movs	r1, #128	@ 0x80
 8015fc8:	0189      	lsls	r1, r1, #6
 8015fca:	404a      	eors	r2, r1
 8015fcc:	801a      	strh	r2, [r3, #0]
 8015fce:	687a      	ldr	r2, [r7, #4]
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	18d3      	adds	r3, r2, r3
 8015fd8:	183a      	adds	r2, r7, r0
 8015fda:	8812      	ldrh	r2, [r2, #0]
 8015fdc:	4906      	ldr	r1, [pc, #24]	@ (8015ff8 <USB_EPStartXfer+0x126c>)
 8015fde:	430a      	orrs	r2, r1
 8015fe0:	b292      	uxth	r2, r2
 8015fe2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8015fe4:	2300      	movs	r3, #0
}
 8015fe6:	0018      	movs	r0, r3
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	b043      	add	sp, #268	@ 0x10c
 8015fec:	bd90      	pop	{r4, r7, pc}
 8015fee:	46c0      	nop			@ (mov r8, r8)
 8015ff0:	00000406 	.word	0x00000406
 8015ff4:	ffffbf8f 	.word	0xffffbf8f
 8015ff8:	ffff8080 	.word	0xffff8080

08015ffc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b084      	sub	sp, #16
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
 8016004:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	785b      	ldrb	r3, [r3, #1]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d01d      	beq.n	801604a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	009b      	lsls	r3, r3, #2
 8016016:	18d3      	adds	r3, r2, r3
 8016018:	881b      	ldrh	r3, [r3, #0]
 801601a:	b29a      	uxth	r2, r3
 801601c:	200c      	movs	r0, #12
 801601e:	183b      	adds	r3, r7, r0
 8016020:	491b      	ldr	r1, [pc, #108]	@ (8016090 <USB_EPSetStall+0x94>)
 8016022:	400a      	ands	r2, r1
 8016024:	801a      	strh	r2, [r3, #0]
 8016026:	183b      	adds	r3, r7, r0
 8016028:	183a      	adds	r2, r7, r0
 801602a:	8812      	ldrh	r2, [r2, #0]
 801602c:	2110      	movs	r1, #16
 801602e:	404a      	eors	r2, r1
 8016030:	801a      	strh	r2, [r3, #0]
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	683b      	ldr	r3, [r7, #0]
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	009b      	lsls	r3, r3, #2
 801603a:	18d3      	adds	r3, r2, r3
 801603c:	183a      	adds	r2, r7, r0
 801603e:	8812      	ldrh	r2, [r2, #0]
 8016040:	4914      	ldr	r1, [pc, #80]	@ (8016094 <USB_EPSetStall+0x98>)
 8016042:	430a      	orrs	r2, r1
 8016044:	b292      	uxth	r2, r2
 8016046:	801a      	strh	r2, [r3, #0]
 8016048:	e01d      	b.n	8016086 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	18d3      	adds	r3, r2, r3
 8016054:	881b      	ldrh	r3, [r3, #0]
 8016056:	b29a      	uxth	r2, r3
 8016058:	200e      	movs	r0, #14
 801605a:	183b      	adds	r3, r7, r0
 801605c:	490e      	ldr	r1, [pc, #56]	@ (8016098 <USB_EPSetStall+0x9c>)
 801605e:	400a      	ands	r2, r1
 8016060:	801a      	strh	r2, [r3, #0]
 8016062:	183b      	adds	r3, r7, r0
 8016064:	183a      	adds	r2, r7, r0
 8016066:	8812      	ldrh	r2, [r2, #0]
 8016068:	2180      	movs	r1, #128	@ 0x80
 801606a:	0149      	lsls	r1, r1, #5
 801606c:	404a      	eors	r2, r1
 801606e:	801a      	strh	r2, [r3, #0]
 8016070:	687a      	ldr	r2, [r7, #4]
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	18d3      	adds	r3, r2, r3
 801607a:	183a      	adds	r2, r7, r0
 801607c:	8812      	ldrh	r2, [r2, #0]
 801607e:	4905      	ldr	r1, [pc, #20]	@ (8016094 <USB_EPSetStall+0x98>)
 8016080:	430a      	orrs	r2, r1
 8016082:	b292      	uxth	r2, r2
 8016084:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8016086:	2300      	movs	r3, #0
}
 8016088:	0018      	movs	r0, r3
 801608a:	46bd      	mov	sp, r7
 801608c:	b004      	add	sp, #16
 801608e:	bd80      	pop	{r7, pc}
 8016090:	ffff8fbf 	.word	0xffff8fbf
 8016094:	ffff8080 	.word	0xffff8080
 8016098:	ffffbf8f 	.word	0xffffbf8f

0801609c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b086      	sub	sp, #24
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	7b1b      	ldrb	r3, [r3, #12]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d000      	beq.n	80160b0 <USB_EPClearStall+0x14>
 80160ae:	e095      	b.n	80161dc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	785b      	ldrb	r3, [r3, #1]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d046      	beq.n	8016146 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	009b      	lsls	r3, r3, #2
 80160c0:	18d2      	adds	r2, r2, r3
 80160c2:	2110      	movs	r1, #16
 80160c4:	187b      	adds	r3, r7, r1
 80160c6:	8812      	ldrh	r2, [r2, #0]
 80160c8:	801a      	strh	r2, [r3, #0]
 80160ca:	187b      	adds	r3, r7, r1
 80160cc:	881b      	ldrh	r3, [r3, #0]
 80160ce:	2240      	movs	r2, #64	@ 0x40
 80160d0:	4013      	ands	r3, r2
 80160d2:	d016      	beq.n	8016102 <USB_EPClearStall+0x66>
 80160d4:	687a      	ldr	r2, [r7, #4]
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	781b      	ldrb	r3, [r3, #0]
 80160da:	009b      	lsls	r3, r3, #2
 80160dc:	18d3      	adds	r3, r2, r3
 80160de:	881b      	ldrh	r3, [r3, #0]
 80160e0:	b29a      	uxth	r2, r3
 80160e2:	200e      	movs	r0, #14
 80160e4:	183b      	adds	r3, r7, r0
 80160e6:	4940      	ldr	r1, [pc, #256]	@ (80161e8 <USB_EPClearStall+0x14c>)
 80160e8:	400a      	ands	r2, r1
 80160ea:	801a      	strh	r2, [r3, #0]
 80160ec:	687a      	ldr	r2, [r7, #4]
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	781b      	ldrb	r3, [r3, #0]
 80160f2:	009b      	lsls	r3, r3, #2
 80160f4:	18d3      	adds	r3, r2, r3
 80160f6:	183a      	adds	r2, r7, r0
 80160f8:	8812      	ldrh	r2, [r2, #0]
 80160fa:	493c      	ldr	r1, [pc, #240]	@ (80161ec <USB_EPClearStall+0x150>)
 80160fc:	430a      	orrs	r2, r1
 80160fe:	b292      	uxth	r2, r2
 8016100:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	78db      	ldrb	r3, [r3, #3]
 8016106:	2b01      	cmp	r3, #1
 8016108:	d068      	beq.n	80161dc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	009b      	lsls	r3, r3, #2
 8016112:	18d3      	adds	r3, r2, r3
 8016114:	881b      	ldrh	r3, [r3, #0]
 8016116:	b29a      	uxth	r2, r3
 8016118:	200c      	movs	r0, #12
 801611a:	183b      	adds	r3, r7, r0
 801611c:	4934      	ldr	r1, [pc, #208]	@ (80161f0 <USB_EPClearStall+0x154>)
 801611e:	400a      	ands	r2, r1
 8016120:	801a      	strh	r2, [r3, #0]
 8016122:	183b      	adds	r3, r7, r0
 8016124:	183a      	adds	r2, r7, r0
 8016126:	8812      	ldrh	r2, [r2, #0]
 8016128:	2120      	movs	r1, #32
 801612a:	404a      	eors	r2, r1
 801612c:	801a      	strh	r2, [r3, #0]
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	009b      	lsls	r3, r3, #2
 8016136:	18d3      	adds	r3, r2, r3
 8016138:	183a      	adds	r2, r7, r0
 801613a:	8812      	ldrh	r2, [r2, #0]
 801613c:	492d      	ldr	r1, [pc, #180]	@ (80161f4 <USB_EPClearStall+0x158>)
 801613e:	430a      	orrs	r2, r1
 8016140:	b292      	uxth	r2, r2
 8016142:	801a      	strh	r2, [r3, #0]
 8016144:	e04a      	b.n	80161dc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	781b      	ldrb	r3, [r3, #0]
 801614c:	009b      	lsls	r3, r3, #2
 801614e:	18d2      	adds	r2, r2, r3
 8016150:	2116      	movs	r1, #22
 8016152:	187b      	adds	r3, r7, r1
 8016154:	8812      	ldrh	r2, [r2, #0]
 8016156:	801a      	strh	r2, [r3, #0]
 8016158:	187b      	adds	r3, r7, r1
 801615a:	881a      	ldrh	r2, [r3, #0]
 801615c:	2380      	movs	r3, #128	@ 0x80
 801615e:	01db      	lsls	r3, r3, #7
 8016160:	4013      	ands	r3, r2
 8016162:	d016      	beq.n	8016192 <USB_EPClearStall+0xf6>
 8016164:	687a      	ldr	r2, [r7, #4]
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	009b      	lsls	r3, r3, #2
 801616c:	18d3      	adds	r3, r2, r3
 801616e:	881b      	ldrh	r3, [r3, #0]
 8016170:	b29a      	uxth	r2, r3
 8016172:	2014      	movs	r0, #20
 8016174:	183b      	adds	r3, r7, r0
 8016176:	491c      	ldr	r1, [pc, #112]	@ (80161e8 <USB_EPClearStall+0x14c>)
 8016178:	400a      	ands	r2, r1
 801617a:	801a      	strh	r2, [r3, #0]
 801617c:	687a      	ldr	r2, [r7, #4]
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	009b      	lsls	r3, r3, #2
 8016184:	18d3      	adds	r3, r2, r3
 8016186:	183a      	adds	r2, r7, r0
 8016188:	8812      	ldrh	r2, [r2, #0]
 801618a:	491b      	ldr	r1, [pc, #108]	@ (80161f8 <USB_EPClearStall+0x15c>)
 801618c:	430a      	orrs	r2, r1
 801618e:	b292      	uxth	r2, r2
 8016190:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8016192:	687a      	ldr	r2, [r7, #4]
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	009b      	lsls	r3, r3, #2
 801619a:	18d3      	adds	r3, r2, r3
 801619c:	881b      	ldrh	r3, [r3, #0]
 801619e:	b29a      	uxth	r2, r3
 80161a0:	2012      	movs	r0, #18
 80161a2:	183b      	adds	r3, r7, r0
 80161a4:	4915      	ldr	r1, [pc, #84]	@ (80161fc <USB_EPClearStall+0x160>)
 80161a6:	400a      	ands	r2, r1
 80161a8:	801a      	strh	r2, [r3, #0]
 80161aa:	183b      	adds	r3, r7, r0
 80161ac:	183a      	adds	r2, r7, r0
 80161ae:	8812      	ldrh	r2, [r2, #0]
 80161b0:	2180      	movs	r1, #128	@ 0x80
 80161b2:	0149      	lsls	r1, r1, #5
 80161b4:	404a      	eors	r2, r1
 80161b6:	801a      	strh	r2, [r3, #0]
 80161b8:	183b      	adds	r3, r7, r0
 80161ba:	183a      	adds	r2, r7, r0
 80161bc:	8812      	ldrh	r2, [r2, #0]
 80161be:	2180      	movs	r1, #128	@ 0x80
 80161c0:	0189      	lsls	r1, r1, #6
 80161c2:	404a      	eors	r2, r1
 80161c4:	801a      	strh	r2, [r3, #0]
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	18d3      	adds	r3, r2, r3
 80161d0:	183a      	adds	r2, r7, r0
 80161d2:	8812      	ldrh	r2, [r2, #0]
 80161d4:	4907      	ldr	r1, [pc, #28]	@ (80161f4 <USB_EPClearStall+0x158>)
 80161d6:	430a      	orrs	r2, r1
 80161d8:	b292      	uxth	r2, r2
 80161da:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80161dc:	2300      	movs	r3, #0
}
 80161de:	0018      	movs	r0, r3
 80161e0:	46bd      	mov	sp, r7
 80161e2:	b006      	add	sp, #24
 80161e4:	bd80      	pop	{r7, pc}
 80161e6:	46c0      	nop			@ (mov r8, r8)
 80161e8:	ffff8f8f 	.word	0xffff8f8f
 80161ec:	ffff80c0 	.word	0xffff80c0
 80161f0:	ffff8fbf 	.word	0xffff8fbf
 80161f4:	ffff8080 	.word	0xffff8080
 80161f8:	ffffc080 	.word	0xffffc080
 80161fc:	ffffbf8f 	.word	0xffffbf8f

08016200 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	000a      	movs	r2, r1
 801620a:	1cfb      	adds	r3, r7, #3
 801620c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801620e:	1cfb      	adds	r3, r7, #3
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d103      	bne.n	801621e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	224c      	movs	r2, #76	@ 0x4c
 801621a:	2180      	movs	r1, #128	@ 0x80
 801621c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801621e:	2300      	movs	r3, #0
}
 8016220:	0018      	movs	r0, r3
 8016222:	46bd      	mov	sp, r7
 8016224:	b002      	add	sp, #8
 8016226:	bd80      	pop	{r7, pc}

08016228 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2258      	movs	r2, #88	@ 0x58
 8016234:	5a9b      	ldrh	r3, [r3, r2]
 8016236:	b29b      	uxth	r3, r3
 8016238:	4a05      	ldr	r2, [pc, #20]	@ (8016250 <USB_DevConnect+0x28>)
 801623a:	4313      	orrs	r3, r2
 801623c:	b299      	uxth	r1, r3
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2258      	movs	r2, #88	@ 0x58
 8016242:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8016244:	2300      	movs	r3, #0
}
 8016246:	0018      	movs	r0, r3
 8016248:	46bd      	mov	sp, r7
 801624a:	b002      	add	sp, #8
 801624c:	bd80      	pop	{r7, pc}
 801624e:	46c0      	nop			@ (mov r8, r8)
 8016250:	ffff8000 	.word	0xffff8000

08016254 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b084      	sub	sp, #16
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2244      	movs	r2, #68	@ 0x44
 8016260:	5a9b      	ldrh	r3, [r3, r2]
 8016262:	b29b      	uxth	r3, r3
 8016264:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8016266:	68fb      	ldr	r3, [r7, #12]
}
 8016268:	0018      	movs	r0, r3
 801626a:	46bd      	mov	sp, r7
 801626c:	b004      	add	sp, #16
 801626e:	bd80      	pop	{r7, pc}

08016270 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b08a      	sub	sp, #40	@ 0x28
 8016274:	af00      	add	r7, sp, #0
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	0019      	movs	r1, r3
 801627c:	1dbb      	adds	r3, r7, #6
 801627e:	801a      	strh	r2, [r3, #0]
 8016280:	1d3b      	adds	r3, r7, #4
 8016282:	1c0a      	adds	r2, r1, #0
 8016284:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8016286:	1d3b      	adds	r3, r7, #4
 8016288:	881b      	ldrh	r3, [r3, #0]
 801628a:	3301      	adds	r3, #1
 801628c:	085b      	lsrs	r3, r3, #1
 801628e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8016298:	1dbb      	adds	r3, r7, #6
 801629a:	881a      	ldrh	r2, [r3, #0]
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	18d3      	adds	r3, r2, r3
 80162a0:	2280      	movs	r2, #128	@ 0x80
 80162a2:	00d2      	lsls	r2, r2, #3
 80162a4:	4694      	mov	ip, r2
 80162a6:	4463      	add	r3, ip
 80162a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80162aa:	69bb      	ldr	r3, [r7, #24]
 80162ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80162ae:	e020      	b.n	80162f2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80162b0:	69fb      	ldr	r3, [r7, #28]
 80162b2:	781a      	ldrb	r2, [r3, #0]
 80162b4:	2112      	movs	r1, #18
 80162b6:	187b      	adds	r3, r7, r1
 80162b8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	3301      	adds	r3, #1
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	021b      	lsls	r3, r3, #8
 80162c2:	b21a      	sxth	r2, r3
 80162c4:	187b      	adds	r3, r7, r1
 80162c6:	2000      	movs	r0, #0
 80162c8:	5e1b      	ldrsh	r3, [r3, r0]
 80162ca:	4313      	orrs	r3, r2
 80162cc:	b21a      	sxth	r2, r3
 80162ce:	187b      	adds	r3, r7, r1
 80162d0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80162d2:	6a3b      	ldr	r3, [r7, #32]
 80162d4:	187a      	adds	r2, r7, r1
 80162d6:	8812      	ldrh	r2, [r2, #0]
 80162d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80162da:	6a3b      	ldr	r3, [r7, #32]
 80162dc:	3302      	adds	r3, #2
 80162de:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	3301      	adds	r3, #1
 80162e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80162e6:	69fb      	ldr	r3, [r7, #28]
 80162e8:	3301      	adds	r3, #1
 80162ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80162ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ee:	3b01      	subs	r3, #1
 80162f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80162f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d1db      	bne.n	80162b0 <USB_WritePMA+0x40>
  }
}
 80162f8:	46c0      	nop			@ (mov r8, r8)
 80162fa:	46c0      	nop			@ (mov r8, r8)
 80162fc:	46bd      	mov	sp, r7
 80162fe:	b00a      	add	sp, #40	@ 0x28
 8016300:	bd80      	pop	{r7, pc}

08016302 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8016302:	b580      	push	{r7, lr}
 8016304:	b08a      	sub	sp, #40	@ 0x28
 8016306:	af00      	add	r7, sp, #0
 8016308:	60f8      	str	r0, [r7, #12]
 801630a:	60b9      	str	r1, [r7, #8]
 801630c:	0019      	movs	r1, r3
 801630e:	1dbb      	adds	r3, r7, #6
 8016310:	801a      	strh	r2, [r3, #0]
 8016312:	1d3b      	adds	r3, r7, #4
 8016314:	1c0a      	adds	r2, r1, #0
 8016316:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8016318:	1d3b      	adds	r3, r7, #4
 801631a:	881b      	ldrh	r3, [r3, #0]
 801631c:	085b      	lsrs	r3, r3, #1
 801631e:	b29b      	uxth	r3, r3
 8016320:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801632a:	1dbb      	adds	r3, r7, #6
 801632c:	881a      	ldrh	r2, [r3, #0]
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	18d3      	adds	r3, r2, r3
 8016332:	2280      	movs	r2, #128	@ 0x80
 8016334:	00d2      	lsls	r2, r2, #3
 8016336:	4694      	mov	ip, r2
 8016338:	4463      	add	r3, ip
 801633a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016340:	e018      	b.n	8016374 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8016342:	6a3b      	ldr	r3, [r7, #32]
 8016344:	881b      	ldrh	r3, [r3, #0]
 8016346:	b29b      	uxth	r3, r3
 8016348:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801634a:	6a3b      	ldr	r3, [r7, #32]
 801634c:	3302      	adds	r3, #2
 801634e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	b2da      	uxtb	r2, r3
 8016354:	69fb      	ldr	r3, [r7, #28]
 8016356:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8016358:	69fb      	ldr	r3, [r7, #28]
 801635a:	3301      	adds	r3, #1
 801635c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	0a1b      	lsrs	r3, r3, #8
 8016362:	b2da      	uxtb	r2, r3
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	3301      	adds	r3, #1
 801636c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016370:	3b01      	subs	r3, #1
 8016372:	627b      	str	r3, [r7, #36]	@ 0x24
 8016374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016376:	2b00      	cmp	r3, #0
 8016378:	d1e3      	bne.n	8016342 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801637a:	1d3b      	adds	r3, r7, #4
 801637c:	881b      	ldrh	r3, [r3, #0]
 801637e:	2201      	movs	r2, #1
 8016380:	4013      	ands	r3, r2
 8016382:	b29b      	uxth	r3, r3
 8016384:	2b00      	cmp	r3, #0
 8016386:	d007      	beq.n	8016398 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8016388:	6a3b      	ldr	r3, [r7, #32]
 801638a:	881b      	ldrh	r3, [r3, #0]
 801638c:	b29b      	uxth	r3, r3
 801638e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	b2da      	uxtb	r2, r3
 8016394:	69fb      	ldr	r3, [r7, #28]
 8016396:	701a      	strb	r2, [r3, #0]
  }
}
 8016398:	46c0      	nop			@ (mov r8, r8)
 801639a:	46bd      	mov	sp, r7
 801639c:	b00a      	add	sp, #40	@ 0x28
 801639e:	bd80      	pop	{r7, pc}

080163a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	000a      	movs	r2, r1
 80163aa:	1cfb      	adds	r3, r7, #3
 80163ac:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80163ae:	230f      	movs	r3, #15
 80163b0:	18fb      	adds	r3, r7, r3
 80163b2:	2200      	movs	r2, #0
 80163b4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	7c1b      	ldrb	r3, [r3, #16]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d116      	bne.n	80163ec <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80163be:	2380      	movs	r3, #128	@ 0x80
 80163c0:	009b      	lsls	r3, r3, #2
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	2202      	movs	r2, #2
 80163c6:	2181      	movs	r1, #129	@ 0x81
 80163c8:	f002 f8eb 	bl	80185a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2201      	movs	r2, #1
 80163d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80163d2:	2380      	movs	r3, #128	@ 0x80
 80163d4:	009b      	lsls	r3, r3, #2
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	2202      	movs	r2, #2
 80163da:	2101      	movs	r1, #1
 80163dc:	f002 f8e1 	bl	80185a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	23b6      	movs	r3, #182	@ 0xb6
 80163e4:	005b      	lsls	r3, r3, #1
 80163e6:	2101      	movs	r1, #1
 80163e8:	50d1      	str	r1, [r2, r3]
 80163ea:	e013      	b.n	8016414 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	2340      	movs	r3, #64	@ 0x40
 80163f0:	2202      	movs	r2, #2
 80163f2:	2181      	movs	r1, #129	@ 0x81
 80163f4:	f002 f8d5 	bl	80185a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2201      	movs	r2, #1
 80163fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	2340      	movs	r3, #64	@ 0x40
 8016402:	2202      	movs	r2, #2
 8016404:	2101      	movs	r1, #1
 8016406:	f002 f8cc 	bl	80185a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801640a:	687a      	ldr	r2, [r7, #4]
 801640c:	23b6      	movs	r3, #182	@ 0xb6
 801640e:	005b      	lsls	r3, r3, #1
 8016410:	2101      	movs	r1, #1
 8016412:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	2308      	movs	r3, #8
 8016418:	2203      	movs	r2, #3
 801641a:	2182      	movs	r1, #130	@ 0x82
 801641c:	f002 f8c1 	bl	80185a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2201      	movs	r2, #1
 8016424:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016426:	2387      	movs	r3, #135	@ 0x87
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	0018      	movs	r0, r3
 801642c:	f002 fa52 	bl	80188d4 <USBD_static_malloc>
 8016430:	0001      	movs	r1, r0
 8016432:	687a      	ldr	r2, [r7, #4]
 8016434:	23ae      	movs	r3, #174	@ 0xae
 8016436:	009b      	lsls	r3, r3, #2
 8016438:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801643a:	687a      	ldr	r2, [r7, #4]
 801643c:	23ae      	movs	r3, #174	@ 0xae
 801643e:	009b      	lsls	r3, r3, #2
 8016440:	58d3      	ldr	r3, [r2, r3]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d104      	bne.n	8016450 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8016446:	230f      	movs	r3, #15
 8016448:	18fb      	adds	r3, r7, r3
 801644a:	2201      	movs	r2, #1
 801644c:	701a      	strb	r2, [r3, #0]
 801644e:	e02c      	b.n	80164aa <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	23ae      	movs	r3, #174	@ 0xae
 8016454:	009b      	lsls	r3, r3, #2
 8016456:	58d3      	ldr	r3, [r2, r3]
 8016458:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	23af      	movs	r3, #175	@ 0xaf
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	58d3      	ldr	r3, [r2, r3]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8016466:	68ba      	ldr	r2, [r7, #8]
 8016468:	2385      	movs	r3, #133	@ 0x85
 801646a:	009b      	lsls	r3, r3, #2
 801646c:	2100      	movs	r1, #0
 801646e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8016470:	68ba      	ldr	r2, [r7, #8]
 8016472:	2386      	movs	r3, #134	@ 0x86
 8016474:	009b      	lsls	r3, r3, #2
 8016476:	2100      	movs	r1, #0
 8016478:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	7c1b      	ldrb	r3, [r3, #16]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d10a      	bne.n	8016498 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016482:	68ba      	ldr	r2, [r7, #8]
 8016484:	2381      	movs	r3, #129	@ 0x81
 8016486:	009b      	lsls	r3, r3, #2
 8016488:	58d2      	ldr	r2, [r2, r3]
 801648a:	2380      	movs	r3, #128	@ 0x80
 801648c:	009b      	lsls	r3, r3, #2
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	2101      	movs	r1, #1
 8016492:	f002 f9d1 	bl	8018838 <USBD_LL_PrepareReceive>
 8016496:	e008      	b.n	80164aa <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016498:	68ba      	ldr	r2, [r7, #8]
 801649a:	2381      	movs	r3, #129	@ 0x81
 801649c:	009b      	lsls	r3, r3, #2
 801649e:	58d2      	ldr	r2, [r2, r3]
 80164a0:	6878      	ldr	r0, [r7, #4]
 80164a2:	2340      	movs	r3, #64	@ 0x40
 80164a4:	2101      	movs	r1, #1
 80164a6:	f002 f9c7 	bl	8018838 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80164aa:	230f      	movs	r3, #15
 80164ac:	18fb      	adds	r3, r7, r3
 80164ae:	781b      	ldrb	r3, [r3, #0]
}
 80164b0:	0018      	movs	r0, r3
 80164b2:	46bd      	mov	sp, r7
 80164b4:	b004      	add	sp, #16
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	000a      	movs	r2, r1
 80164c2:	1cfb      	adds	r3, r7, #3
 80164c4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80164c6:	230f      	movs	r3, #15
 80164c8:	18fb      	adds	r3, r7, r3
 80164ca:	2200      	movs	r2, #0
 80164cc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2181      	movs	r1, #129	@ 0x81
 80164d2:	0018      	movs	r0, r3
 80164d4:	f002 f89c 	bl	8018610 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2200      	movs	r2, #0
 80164dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	2101      	movs	r1, #1
 80164e2:	0018      	movs	r0, r3
 80164e4:	f002 f894 	bl	8018610 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	23b6      	movs	r3, #182	@ 0xb6
 80164ec:	005b      	lsls	r3, r3, #1
 80164ee:	2100      	movs	r1, #0
 80164f0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2182      	movs	r1, #130	@ 0x82
 80164f6:	0018      	movs	r0, r3
 80164f8:	f002 f88a 	bl	8018610 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2200      	movs	r2, #0
 8016500:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016502:	687a      	ldr	r2, [r7, #4]
 8016504:	23ae      	movs	r3, #174	@ 0xae
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	58d3      	ldr	r3, [r2, r3]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d011      	beq.n	8016532 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	23af      	movs	r3, #175	@ 0xaf
 8016512:	009b      	lsls	r3, r3, #2
 8016514:	58d3      	ldr	r3, [r2, r3]
 8016516:	685b      	ldr	r3, [r3, #4]
 8016518:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	23ae      	movs	r3, #174	@ 0xae
 801651e:	009b      	lsls	r3, r3, #2
 8016520:	58d3      	ldr	r3, [r2, r3]
 8016522:	0018      	movs	r0, r3
 8016524:	f002 f9e2 	bl	80188ec <USBD_static_free>
    pdev->pClassData = NULL;
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	23ae      	movs	r3, #174	@ 0xae
 801652c:	009b      	lsls	r3, r3, #2
 801652e:	2100      	movs	r1, #0
 8016530:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8016532:	230f      	movs	r3, #15
 8016534:	18fb      	adds	r3, r7, r3
 8016536:	781b      	ldrb	r3, [r3, #0]
}
 8016538:	0018      	movs	r0, r3
 801653a:	46bd      	mov	sp, r7
 801653c:	b004      	add	sp, #16
 801653e:	bd80      	pop	{r7, pc}

08016540 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b086      	sub	sp, #24
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
 8016548:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801654a:	687a      	ldr	r2, [r7, #4]
 801654c:	23ae      	movs	r3, #174	@ 0xae
 801654e:	009b      	lsls	r3, r3, #2
 8016550:	58d3      	ldr	r3, [r2, r3]
 8016552:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8016554:	230f      	movs	r3, #15
 8016556:	18fb      	adds	r3, r7, r3
 8016558:	2200      	movs	r2, #0
 801655a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801655c:	230c      	movs	r3, #12
 801655e:	18fb      	adds	r3, r7, r3
 8016560:	2200      	movs	r2, #0
 8016562:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8016564:	2317      	movs	r3, #23
 8016566:	18fb      	adds	r3, r7, r3
 8016568:	2200      	movs	r2, #0
 801656a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	001a      	movs	r2, r3
 8016572:	2360      	movs	r3, #96	@ 0x60
 8016574:	4013      	ands	r3, r2
 8016576:	d03d      	beq.n	80165f4 <USBD_CDC_Setup+0xb4>
 8016578:	2b20      	cmp	r3, #32
 801657a:	d000      	beq.n	801657e <USBD_CDC_Setup+0x3e>
 801657c:	e094      	b.n	80166a8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	88db      	ldrh	r3, [r3, #6]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d02b      	beq.n	80165de <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	b25b      	sxtb	r3, r3
 801658c:	2b00      	cmp	r3, #0
 801658e:	da12      	bge.n	80165b6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016590:	687a      	ldr	r2, [r7, #4]
 8016592:	23af      	movs	r3, #175	@ 0xaf
 8016594:	009b      	lsls	r3, r3, #2
 8016596:	58d3      	ldr	r3, [r2, r3]
 8016598:	689b      	ldr	r3, [r3, #8]
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801659e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80165a0:	683a      	ldr	r2, [r7, #0]
 80165a2:	88d2      	ldrh	r2, [r2, #6]
 80165a4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80165a6:	6939      	ldr	r1, [r7, #16]
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	88da      	ldrh	r2, [r3, #6]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	0018      	movs	r0, r3
 80165b0:	f001 fbaf 	bl	8017d12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80165b4:	e083      	b.n	80166be <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	7859      	ldrb	r1, [r3, #1]
 80165ba:	693a      	ldr	r2, [r7, #16]
 80165bc:	2380      	movs	r3, #128	@ 0x80
 80165be:	009b      	lsls	r3, r3, #2
 80165c0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80165c2:	683b      	ldr	r3, [r7, #0]
 80165c4:	88db      	ldrh	r3, [r3, #6]
 80165c6:	b2d9      	uxtb	r1, r3
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	4a40      	ldr	r2, [pc, #256]	@ (80166cc <USBD_CDC_Setup+0x18c>)
 80165cc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80165ce:	6939      	ldr	r1, [r7, #16]
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	88da      	ldrh	r2, [r3, #6]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	0018      	movs	r0, r3
 80165d8:	f001 fbce 	bl	8017d78 <USBD_CtlPrepareRx>
      break;
 80165dc:	e06f      	b.n	80166be <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	23af      	movs	r3, #175	@ 0xaf
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	58d3      	ldr	r3, [r2, r3]
 80165e6:	689b      	ldr	r3, [r3, #8]
 80165e8:	683a      	ldr	r2, [r7, #0]
 80165ea:	7850      	ldrb	r0, [r2, #1]
 80165ec:	6839      	ldr	r1, [r7, #0]
 80165ee:	2200      	movs	r2, #0
 80165f0:	4798      	blx	r3
      break;
 80165f2:	e064      	b.n	80166be <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	785b      	ldrb	r3, [r3, #1]
 80165f8:	2b0b      	cmp	r3, #11
 80165fa:	d037      	beq.n	801666c <USBD_CDC_Setup+0x12c>
 80165fc:	dc47      	bgt.n	801668e <USBD_CDC_Setup+0x14e>
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d002      	beq.n	8016608 <USBD_CDC_Setup+0xc8>
 8016602:	2b0a      	cmp	r3, #10
 8016604:	d019      	beq.n	801663a <USBD_CDC_Setup+0xfa>
 8016606:	e042      	b.n	801668e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	23a7      	movs	r3, #167	@ 0xa7
 801660c:	009b      	lsls	r3, r3, #2
 801660e:	5cd3      	ldrb	r3, [r2, r3]
 8016610:	2b03      	cmp	r3, #3
 8016612:	d107      	bne.n	8016624 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8016614:	230c      	movs	r3, #12
 8016616:	18f9      	adds	r1, r7, r3
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2202      	movs	r2, #2
 801661c:	0018      	movs	r0, r3
 801661e:	f001 fb78 	bl	8017d12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016622:	e040      	b.n	80166a6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8016624:	683a      	ldr	r2, [r7, #0]
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	0011      	movs	r1, r2
 801662a:	0018      	movs	r0, r3
 801662c:	f001 faf3 	bl	8017c16 <USBD_CtlError>
            ret = USBD_FAIL;
 8016630:	2317      	movs	r3, #23
 8016632:	18fb      	adds	r3, r7, r3
 8016634:	2202      	movs	r2, #2
 8016636:	701a      	strb	r2, [r3, #0]
          break;
 8016638:	e035      	b.n	80166a6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	23a7      	movs	r3, #167	@ 0xa7
 801663e:	009b      	lsls	r3, r3, #2
 8016640:	5cd3      	ldrb	r3, [r2, r3]
 8016642:	2b03      	cmp	r3, #3
 8016644:	d107      	bne.n	8016656 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8016646:	230f      	movs	r3, #15
 8016648:	18f9      	adds	r1, r7, r3
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	2201      	movs	r2, #1
 801664e:	0018      	movs	r0, r3
 8016650:	f001 fb5f 	bl	8017d12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016654:	e027      	b.n	80166a6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8016656:	683a      	ldr	r2, [r7, #0]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	0011      	movs	r1, r2
 801665c:	0018      	movs	r0, r3
 801665e:	f001 fada 	bl	8017c16 <USBD_CtlError>
            ret = USBD_FAIL;
 8016662:	2317      	movs	r3, #23
 8016664:	18fb      	adds	r3, r7, r3
 8016666:	2202      	movs	r2, #2
 8016668:	701a      	strb	r2, [r3, #0]
          break;
 801666a:	e01c      	b.n	80166a6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	23a7      	movs	r3, #167	@ 0xa7
 8016670:	009b      	lsls	r3, r3, #2
 8016672:	5cd3      	ldrb	r3, [r2, r3]
 8016674:	2b03      	cmp	r3, #3
 8016676:	d015      	beq.n	80166a4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8016678:	683a      	ldr	r2, [r7, #0]
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	0011      	movs	r1, r2
 801667e:	0018      	movs	r0, r3
 8016680:	f001 fac9 	bl	8017c16 <USBD_CtlError>
            ret = USBD_FAIL;
 8016684:	2317      	movs	r3, #23
 8016686:	18fb      	adds	r3, r7, r3
 8016688:	2202      	movs	r2, #2
 801668a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801668c:	e00a      	b.n	80166a4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801668e:	683a      	ldr	r2, [r7, #0]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	0011      	movs	r1, r2
 8016694:	0018      	movs	r0, r3
 8016696:	f001 fabe 	bl	8017c16 <USBD_CtlError>
          ret = USBD_FAIL;
 801669a:	2317      	movs	r3, #23
 801669c:	18fb      	adds	r3, r7, r3
 801669e:	2202      	movs	r2, #2
 80166a0:	701a      	strb	r2, [r3, #0]
          break;
 80166a2:	e000      	b.n	80166a6 <USBD_CDC_Setup+0x166>
          break;
 80166a4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80166a6:	e00a      	b.n	80166be <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80166a8:	683a      	ldr	r2, [r7, #0]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	0011      	movs	r1, r2
 80166ae:	0018      	movs	r0, r3
 80166b0:	f001 fab1 	bl	8017c16 <USBD_CtlError>
      ret = USBD_FAIL;
 80166b4:	2317      	movs	r3, #23
 80166b6:	18fb      	adds	r3, r7, r3
 80166b8:	2202      	movs	r2, #2
 80166ba:	701a      	strb	r2, [r3, #0]
      break;
 80166bc:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80166be:	2317      	movs	r3, #23
 80166c0:	18fb      	adds	r3, r7, r3
 80166c2:	781b      	ldrb	r3, [r3, #0]
}
 80166c4:	0018      	movs	r0, r3
 80166c6:	46bd      	mov	sp, r7
 80166c8:	b006      	add	sp, #24
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	00000201 	.word	0x00000201

080166d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b084      	sub	sp, #16
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	000a      	movs	r2, r1
 80166da:	1cfb      	adds	r3, r7, #3
 80166dc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80166de:	687a      	ldr	r2, [r7, #4]
 80166e0:	23ae      	movs	r3, #174	@ 0xae
 80166e2:	009b      	lsls	r3, r3, #2
 80166e4:	58d3      	ldr	r3, [r2, r3]
 80166e6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80166e8:	687a      	ldr	r2, [r7, #4]
 80166ea:	23b0      	movs	r3, #176	@ 0xb0
 80166ec:	009b      	lsls	r3, r3, #2
 80166ee:	58d3      	ldr	r3, [r2, r3]
 80166f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80166f2:	687a      	ldr	r2, [r7, #4]
 80166f4:	23ae      	movs	r3, #174	@ 0xae
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	58d3      	ldr	r3, [r2, r3]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d03e      	beq.n	801677c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80166fe:	1cfb      	adds	r3, r7, #3
 8016700:	781a      	ldrb	r2, [r3, #0]
 8016702:	6879      	ldr	r1, [r7, #4]
 8016704:	0013      	movs	r3, r2
 8016706:	009b      	lsls	r3, r3, #2
 8016708:	189b      	adds	r3, r3, r2
 801670a:	009b      	lsls	r3, r3, #2
 801670c:	18cb      	adds	r3, r1, r3
 801670e:	331c      	adds	r3, #28
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d02b      	beq.n	801676e <USBD_CDC_DataIn+0x9e>
 8016716:	1cfb      	adds	r3, r7, #3
 8016718:	781a      	ldrb	r2, [r3, #0]
 801671a:	6879      	ldr	r1, [r7, #4]
 801671c:	0013      	movs	r3, r2
 801671e:	009b      	lsls	r3, r3, #2
 8016720:	189b      	adds	r3, r3, r2
 8016722:	009b      	lsls	r3, r3, #2
 8016724:	18cb      	adds	r3, r1, r3
 8016726:	331c      	adds	r3, #28
 8016728:	6818      	ldr	r0, [r3, #0]
 801672a:	1cfb      	adds	r3, r7, #3
 801672c:	781a      	ldrb	r2, [r3, #0]
 801672e:	68b9      	ldr	r1, [r7, #8]
 8016730:	0013      	movs	r3, r2
 8016732:	009b      	lsls	r3, r3, #2
 8016734:	189b      	adds	r3, r3, r2
 8016736:	00db      	lsls	r3, r3, #3
 8016738:	18cb      	adds	r3, r1, r3
 801673a:	3338      	adds	r3, #56	@ 0x38
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	0019      	movs	r1, r3
 8016740:	f7e9 fdac 	bl	800029c <__aeabi_uidivmod>
 8016744:	1e0b      	subs	r3, r1, #0
 8016746:	d112      	bne.n	801676e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8016748:	1cfb      	adds	r3, r7, #3
 801674a:	781a      	ldrb	r2, [r3, #0]
 801674c:	6879      	ldr	r1, [r7, #4]
 801674e:	0013      	movs	r3, r2
 8016750:	009b      	lsls	r3, r3, #2
 8016752:	189b      	adds	r3, r3, r2
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	18cb      	adds	r3, r1, r3
 8016758:	331c      	adds	r3, #28
 801675a:	2200      	movs	r2, #0
 801675c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801675e:	1cfb      	adds	r3, r7, #3
 8016760:	7819      	ldrb	r1, [r3, #0]
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	2300      	movs	r3, #0
 8016766:	2200      	movs	r2, #0
 8016768:	f002 f82f 	bl	80187ca <USBD_LL_Transmit>
 801676c:	e004      	b.n	8016778 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801676e:	68fa      	ldr	r2, [r7, #12]
 8016770:	2385      	movs	r3, #133	@ 0x85
 8016772:	009b      	lsls	r3, r3, #2
 8016774:	2100      	movs	r1, #0
 8016776:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8016778:	2300      	movs	r3, #0
 801677a:	e000      	b.n	801677e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801677c:	2302      	movs	r3, #2
  }
}
 801677e:	0018      	movs	r0, r3
 8016780:	46bd      	mov	sp, r7
 8016782:	b004      	add	sp, #16
 8016784:	bd80      	pop	{r7, pc}

08016786 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016786:	b580      	push	{r7, lr}
 8016788:	b084      	sub	sp, #16
 801678a:	af00      	add	r7, sp, #0
 801678c:	6078      	str	r0, [r7, #4]
 801678e:	000a      	movs	r2, r1
 8016790:	1cfb      	adds	r3, r7, #3
 8016792:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016794:	687a      	ldr	r2, [r7, #4]
 8016796:	23ae      	movs	r3, #174	@ 0xae
 8016798:	009b      	lsls	r3, r3, #2
 801679a:	58d3      	ldr	r3, [r2, r3]
 801679c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801679e:	1cfb      	adds	r3, r7, #3
 80167a0:	781a      	ldrb	r2, [r3, #0]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	0011      	movs	r1, r2
 80167a6:	0018      	movs	r0, r3
 80167a8:	f002 f87d 	bl	80188a6 <USBD_LL_GetRxDataSize>
 80167ac:	0001      	movs	r1, r0
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	2383      	movs	r3, #131	@ 0x83
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	23ae      	movs	r3, #174	@ 0xae
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	58d3      	ldr	r3, [r2, r3]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d011      	beq.n	80167e6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80167c2:	687a      	ldr	r2, [r7, #4]
 80167c4:	23af      	movs	r3, #175	@ 0xaf
 80167c6:	009b      	lsls	r3, r3, #2
 80167c8:	58d3      	ldr	r3, [r2, r3]
 80167ca:	68da      	ldr	r2, [r3, #12]
 80167cc:	68f9      	ldr	r1, [r7, #12]
 80167ce:	2381      	movs	r3, #129	@ 0x81
 80167d0:	009b      	lsls	r3, r3, #2
 80167d2:	58c8      	ldr	r0, [r1, r3]
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2183      	movs	r1, #131	@ 0x83
 80167d8:	0089      	lsls	r1, r1, #2
 80167da:	468c      	mov	ip, r1
 80167dc:	4463      	add	r3, ip
 80167de:	0019      	movs	r1, r3
 80167e0:	4790      	blx	r2

    return USBD_OK;
 80167e2:	2300      	movs	r3, #0
 80167e4:	e000      	b.n	80167e8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80167e6:	2302      	movs	r3, #2
  }
}
 80167e8:	0018      	movs	r0, r3
 80167ea:	46bd      	mov	sp, r7
 80167ec:	b004      	add	sp, #16
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80167f0:	b590      	push	{r4, r7, lr}
 80167f2:	b085      	sub	sp, #20
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80167f8:	687a      	ldr	r2, [r7, #4]
 80167fa:	23ae      	movs	r3, #174	@ 0xae
 80167fc:	009b      	lsls	r3, r3, #2
 80167fe:	58d3      	ldr	r3, [r2, r3]
 8016800:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	23af      	movs	r3, #175	@ 0xaf
 8016806:	009b      	lsls	r3, r3, #2
 8016808:	58d3      	ldr	r3, [r2, r3]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d018      	beq.n	8016840 <USBD_CDC_EP0_RxReady+0x50>
 801680e:	68fa      	ldr	r2, [r7, #12]
 8016810:	2380      	movs	r3, #128	@ 0x80
 8016812:	009b      	lsls	r3, r3, #2
 8016814:	5cd3      	ldrb	r3, [r2, r3]
 8016816:	2bff      	cmp	r3, #255	@ 0xff
 8016818:	d012      	beq.n	8016840 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801681a:	687a      	ldr	r2, [r7, #4]
 801681c:	23af      	movs	r3, #175	@ 0xaf
 801681e:	009b      	lsls	r3, r3, #2
 8016820:	58d3      	ldr	r3, [r2, r3]
 8016822:	689b      	ldr	r3, [r3, #8]
 8016824:	68f9      	ldr	r1, [r7, #12]
 8016826:	2280      	movs	r2, #128	@ 0x80
 8016828:	0092      	lsls	r2, r2, #2
 801682a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801682c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801682e:	68fa      	ldr	r2, [r7, #12]
 8016830:	4c06      	ldr	r4, [pc, #24]	@ (801684c <USBD_CDC_EP0_RxReady+0x5c>)
 8016832:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016834:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016836:	68fa      	ldr	r2, [r7, #12]
 8016838:	2380      	movs	r3, #128	@ 0x80
 801683a:	009b      	lsls	r3, r3, #2
 801683c:	21ff      	movs	r1, #255	@ 0xff
 801683e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8016840:	2300      	movs	r3, #0
}
 8016842:	0018      	movs	r0, r3
 8016844:	46bd      	mov	sp, r7
 8016846:	b005      	add	sp, #20
 8016848:	bd90      	pop	{r4, r7, pc}
 801684a:	46c0      	nop			@ (mov r8, r8)
 801684c:	00000201 	.word	0x00000201

08016850 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2243      	movs	r2, #67	@ 0x43
 801685c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801685e:	4b02      	ldr	r3, [pc, #8]	@ (8016868 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8016860:	0018      	movs	r0, r3
 8016862:	46bd      	mov	sp, r7
 8016864:	b002      	add	sp, #8
 8016866:	bd80      	pop	{r7, pc}
 8016868:	20000114 	.word	0x20000114

0801686c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2243      	movs	r2, #67	@ 0x43
 8016878:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801687a:	4b02      	ldr	r3, [pc, #8]	@ (8016884 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801687c:	0018      	movs	r0, r3
 801687e:	46bd      	mov	sp, r7
 8016880:	b002      	add	sp, #8
 8016882:	bd80      	pop	{r7, pc}
 8016884:	200000d0 	.word	0x200000d0

08016888 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2243      	movs	r2, #67	@ 0x43
 8016894:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8016896:	4b02      	ldr	r3, [pc, #8]	@ (80168a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8016898:	0018      	movs	r0, r3
 801689a:	46bd      	mov	sp, r7
 801689c:	b002      	add	sp, #8
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	20000158 	.word	0x20000158

080168a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	220a      	movs	r2, #10
 80168b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80168b2:	4b02      	ldr	r3, [pc, #8]	@ (80168bc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80168b4:	0018      	movs	r0, r3
 80168b6:	46bd      	mov	sp, r7
 80168b8:	b002      	add	sp, #8
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	2000008c 	.word	0x2000008c

080168c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b084      	sub	sp, #16
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
 80168c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80168ca:	200f      	movs	r0, #15
 80168cc:	183b      	adds	r3, r7, r0
 80168ce:	2202      	movs	r2, #2
 80168d0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d007      	beq.n	80168e8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	23af      	movs	r3, #175	@ 0xaf
 80168dc:	009b      	lsls	r3, r3, #2
 80168de:	6839      	ldr	r1, [r7, #0]
 80168e0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80168e2:	183b      	adds	r3, r7, r0
 80168e4:	2200      	movs	r2, #0
 80168e6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80168e8:	230f      	movs	r3, #15
 80168ea:	18fb      	adds	r3, r7, r3
 80168ec:	781b      	ldrb	r3, [r3, #0]
}
 80168ee:	0018      	movs	r0, r3
 80168f0:	46bd      	mov	sp, r7
 80168f2:	b004      	add	sp, #16
 80168f4:	bd80      	pop	{r7, pc}

080168f6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80168f6:	b580      	push	{r7, lr}
 80168f8:	b086      	sub	sp, #24
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	60f8      	str	r0, [r7, #12]
 80168fe:	60b9      	str	r1, [r7, #8]
 8016900:	1dbb      	adds	r3, r7, #6
 8016902:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016904:	68fa      	ldr	r2, [r7, #12]
 8016906:	23ae      	movs	r3, #174	@ 0xae
 8016908:	009b      	lsls	r3, r3, #2
 801690a:	58d3      	ldr	r3, [r2, r3]
 801690c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801690e:	697a      	ldr	r2, [r7, #20]
 8016910:	2382      	movs	r3, #130	@ 0x82
 8016912:	009b      	lsls	r3, r3, #2
 8016914:	68b9      	ldr	r1, [r7, #8]
 8016916:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8016918:	1dbb      	adds	r3, r7, #6
 801691a:	8819      	ldrh	r1, [r3, #0]
 801691c:	697a      	ldr	r2, [r7, #20]
 801691e:	2384      	movs	r3, #132	@ 0x84
 8016920:	009b      	lsls	r3, r3, #2
 8016922:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8016924:	2300      	movs	r3, #0
}
 8016926:	0018      	movs	r0, r3
 8016928:	46bd      	mov	sp, r7
 801692a:	b006      	add	sp, #24
 801692c:	bd80      	pop	{r7, pc}

0801692e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b084      	sub	sp, #16
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
 8016936:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	23ae      	movs	r3, #174	@ 0xae
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	58d3      	ldr	r3, [r2, r3]
 8016940:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8016942:	68fa      	ldr	r2, [r7, #12]
 8016944:	2381      	movs	r3, #129	@ 0x81
 8016946:	009b      	lsls	r3, r3, #2
 8016948:	6839      	ldr	r1, [r7, #0]
 801694a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801694c:	2300      	movs	r3, #0
}
 801694e:	0018      	movs	r0, r3
 8016950:	46bd      	mov	sp, r7
 8016952:	b004      	add	sp, #16
 8016954:	bd80      	pop	{r7, pc}

08016956 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016956:	b580      	push	{r7, lr}
 8016958:	b084      	sub	sp, #16
 801695a:	af00      	add	r7, sp, #0
 801695c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	23ae      	movs	r3, #174	@ 0xae
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	58d3      	ldr	r3, [r2, r3]
 8016966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8016968:	687a      	ldr	r2, [r7, #4]
 801696a:	23ae      	movs	r3, #174	@ 0xae
 801696c:	009b      	lsls	r3, r3, #2
 801696e:	58d3      	ldr	r3, [r2, r3]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d022      	beq.n	80169ba <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8016974:	68fa      	ldr	r2, [r7, #12]
 8016976:	2385      	movs	r3, #133	@ 0x85
 8016978:	009b      	lsls	r3, r3, #2
 801697a:	58d3      	ldr	r3, [r2, r3]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d11a      	bne.n	80169b6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8016980:	68fa      	ldr	r2, [r7, #12]
 8016982:	2385      	movs	r3, #133	@ 0x85
 8016984:	009b      	lsls	r3, r3, #2
 8016986:	2101      	movs	r1, #1
 8016988:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801698a:	68fa      	ldr	r2, [r7, #12]
 801698c:	2384      	movs	r3, #132	@ 0x84
 801698e:	009b      	lsls	r3, r3, #2
 8016990:	58d2      	ldr	r2, [r2, r3]
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8016996:	68fa      	ldr	r2, [r7, #12]
 8016998:	2382      	movs	r3, #130	@ 0x82
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801699e:	68fa      	ldr	r2, [r7, #12]
 80169a0:	2384      	movs	r3, #132	@ 0x84
 80169a2:	009b      	lsls	r3, r3, #2
 80169a4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	000a      	movs	r2, r1
 80169ac:	2181      	movs	r1, #129	@ 0x81
 80169ae:	f001 ff0c 	bl	80187ca <USBD_LL_Transmit>

      return USBD_OK;
 80169b2:	2300      	movs	r3, #0
 80169b4:	e002      	b.n	80169bc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80169b6:	2301      	movs	r3, #1
 80169b8:	e000      	b.n	80169bc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80169ba:	2302      	movs	r3, #2
  }
}
 80169bc:	0018      	movs	r0, r3
 80169be:	46bd      	mov	sp, r7
 80169c0:	b004      	add	sp, #16
 80169c2:	bd80      	pop	{r7, pc}

080169c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b084      	sub	sp, #16
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80169cc:	687a      	ldr	r2, [r7, #4]
 80169ce:	23ae      	movs	r3, #174	@ 0xae
 80169d0:	009b      	lsls	r3, r3, #2
 80169d2:	58d3      	ldr	r3, [r2, r3]
 80169d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80169d6:	687a      	ldr	r2, [r7, #4]
 80169d8:	23ae      	movs	r3, #174	@ 0xae
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	58d3      	ldr	r3, [r2, r3]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d019      	beq.n	8016a16 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	7c1b      	ldrb	r3, [r3, #16]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d10a      	bne.n	8016a00 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80169ea:	68fa      	ldr	r2, [r7, #12]
 80169ec:	2381      	movs	r3, #129	@ 0x81
 80169ee:	009b      	lsls	r3, r3, #2
 80169f0:	58d2      	ldr	r2, [r2, r3]
 80169f2:	2380      	movs	r3, #128	@ 0x80
 80169f4:	009b      	lsls	r3, r3, #2
 80169f6:	6878      	ldr	r0, [r7, #4]
 80169f8:	2101      	movs	r1, #1
 80169fa:	f001 ff1d 	bl	8018838 <USBD_LL_PrepareReceive>
 80169fe:	e008      	b.n	8016a12 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016a00:	68fa      	ldr	r2, [r7, #12]
 8016a02:	2381      	movs	r3, #129	@ 0x81
 8016a04:	009b      	lsls	r3, r3, #2
 8016a06:	58d2      	ldr	r2, [r2, r3]
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	2340      	movs	r3, #64	@ 0x40
 8016a0c:	2101      	movs	r1, #1
 8016a0e:	f001 ff13 	bl	8018838 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8016a12:	2300      	movs	r3, #0
 8016a14:	e000      	b.n	8016a18 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8016a16:	2302      	movs	r3, #2
  }
}
 8016a18:	0018      	movs	r0, r3
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	b004      	add	sp, #16
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b084      	sub	sp, #16
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	60f8      	str	r0, [r7, #12]
 8016a28:	60b9      	str	r1, [r7, #8]
 8016a2a:	1dfb      	adds	r3, r7, #7
 8016a2c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d101      	bne.n	8016a38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016a34:	2302      	movs	r3, #2
 8016a36:	e020      	b.n	8016a7a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8016a38:	68fa      	ldr	r2, [r7, #12]
 8016a3a:	23ad      	movs	r3, #173	@ 0xad
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	58d3      	ldr	r3, [r2, r3]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d004      	beq.n	8016a4e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8016a44:	68fa      	ldr	r2, [r7, #12]
 8016a46:	23ad      	movs	r3, #173	@ 0xad
 8016a48:	009b      	lsls	r3, r3, #2
 8016a4a:	2100      	movs	r1, #0
 8016a4c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d004      	beq.n	8016a5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016a54:	68fa      	ldr	r2, [r7, #12]
 8016a56:	23ac      	movs	r3, #172	@ 0xac
 8016a58:	009b      	lsls	r3, r3, #2
 8016a5a:	68b9      	ldr	r1, [r7, #8]
 8016a5c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016a5e:	68fa      	ldr	r2, [r7, #12]
 8016a60:	23a7      	movs	r3, #167	@ 0xa7
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	2101      	movs	r1, #1
 8016a66:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	1dfa      	adds	r2, r7, #7
 8016a6c:	7812      	ldrb	r2, [r2, #0]
 8016a6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	0018      	movs	r0, r3
 8016a74:	f001 fd0c 	bl	8018490 <USBD_LL_Init>

  return USBD_OK;
 8016a78:	2300      	movs	r3, #0
}
 8016a7a:	0018      	movs	r0, r3
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	b004      	add	sp, #16
 8016a80:	bd80      	pop	{r7, pc}

08016a82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016a82:	b580      	push	{r7, lr}
 8016a84:	b084      	sub	sp, #16
 8016a86:	af00      	add	r7, sp, #0
 8016a88:	6078      	str	r0, [r7, #4]
 8016a8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8016a8c:	200f      	movs	r0, #15
 8016a8e:	183b      	adds	r3, r7, r0
 8016a90:	2200      	movs	r2, #0
 8016a92:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d008      	beq.n	8016aac <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8016a9a:	687a      	ldr	r2, [r7, #4]
 8016a9c:	23ad      	movs	r3, #173	@ 0xad
 8016a9e:	009b      	lsls	r3, r3, #2
 8016aa0:	6839      	ldr	r1, [r7, #0]
 8016aa2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8016aa4:	183b      	adds	r3, r7, r0
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	701a      	strb	r2, [r3, #0]
 8016aaa:	e003      	b.n	8016ab4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8016aac:	230f      	movs	r3, #15
 8016aae:	18fb      	adds	r3, r7, r3
 8016ab0:	2202      	movs	r2, #2
 8016ab2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8016ab4:	230f      	movs	r3, #15
 8016ab6:	18fb      	adds	r3, r7, r3
 8016ab8:	781b      	ldrb	r3, [r3, #0]
}
 8016aba:	0018      	movs	r0, r3
 8016abc:	46bd      	mov	sp, r7
 8016abe:	b004      	add	sp, #16
 8016ac0:	bd80      	pop	{r7, pc}

08016ac2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016ac2:	b580      	push	{r7, lr}
 8016ac4:	b082      	sub	sp, #8
 8016ac6:	af00      	add	r7, sp, #0
 8016ac8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	0018      	movs	r0, r3
 8016ace:	f001 fd43 	bl	8018558 <USBD_LL_Start>

  return USBD_OK;
 8016ad2:	2300      	movs	r3, #0
}
 8016ad4:	0018      	movs	r0, r3
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	b002      	add	sp, #8
 8016ada:	bd80      	pop	{r7, pc}

08016adc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016ae4:	2300      	movs	r3, #0
}
 8016ae6:	0018      	movs	r0, r3
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	b002      	add	sp, #8
 8016aec:	bd80      	pop	{r7, pc}

08016aee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016aee:	b590      	push	{r4, r7, lr}
 8016af0:	b085      	sub	sp, #20
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
 8016af6:	000a      	movs	r2, r1
 8016af8:	1cfb      	adds	r3, r7, #3
 8016afa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016afc:	240f      	movs	r4, #15
 8016afe:	193b      	adds	r3, r7, r4
 8016b00:	2202      	movs	r2, #2
 8016b02:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8016b04:	687a      	ldr	r2, [r7, #4]
 8016b06:	23ad      	movs	r3, #173	@ 0xad
 8016b08:	009b      	lsls	r3, r3, #2
 8016b0a:	58d3      	ldr	r3, [r2, r3]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d00e      	beq.n	8016b2e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8016b10:	687a      	ldr	r2, [r7, #4]
 8016b12:	23ad      	movs	r3, #173	@ 0xad
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	58d3      	ldr	r3, [r2, r3]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	1cfa      	adds	r2, r7, #3
 8016b1c:	7811      	ldrb	r1, [r2, #0]
 8016b1e:	687a      	ldr	r2, [r7, #4]
 8016b20:	0010      	movs	r0, r2
 8016b22:	4798      	blx	r3
 8016b24:	1e03      	subs	r3, r0, #0
 8016b26:	d102      	bne.n	8016b2e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8016b28:	193b      	adds	r3, r7, r4
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8016b2e:	230f      	movs	r3, #15
 8016b30:	18fb      	adds	r3, r7, r3
 8016b32:	781b      	ldrb	r3, [r3, #0]
}
 8016b34:	0018      	movs	r0, r3
 8016b36:	46bd      	mov	sp, r7
 8016b38:	b005      	add	sp, #20
 8016b3a:	bd90      	pop	{r4, r7, pc}

08016b3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	000a      	movs	r2, r1
 8016b46:	1cfb      	adds	r3, r7, #3
 8016b48:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8016b4a:	687a      	ldr	r2, [r7, #4]
 8016b4c:	23ad      	movs	r3, #173	@ 0xad
 8016b4e:	009b      	lsls	r3, r3, #2
 8016b50:	58d3      	ldr	r3, [r2, r3]
 8016b52:	685b      	ldr	r3, [r3, #4]
 8016b54:	1cfa      	adds	r2, r7, #3
 8016b56:	7811      	ldrb	r1, [r2, #0]
 8016b58:	687a      	ldr	r2, [r7, #4]
 8016b5a:	0010      	movs	r0, r2
 8016b5c:	4798      	blx	r3

  return USBD_OK;
 8016b5e:	2300      	movs	r3, #0
}
 8016b60:	0018      	movs	r0, r3
 8016b62:	46bd      	mov	sp, r7
 8016b64:	b002      	add	sp, #8
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b082      	sub	sp, #8
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	22aa      	movs	r2, #170	@ 0xaa
 8016b76:	0092      	lsls	r2, r2, #2
 8016b78:	4694      	mov	ip, r2
 8016b7a:	4463      	add	r3, ip
 8016b7c:	683a      	ldr	r2, [r7, #0]
 8016b7e:	0011      	movs	r1, r2
 8016b80:	0018      	movs	r0, r3
 8016b82:	f001 f810 	bl	8017ba6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016b86:	687a      	ldr	r2, [r7, #4]
 8016b88:	23a5      	movs	r3, #165	@ 0xa5
 8016b8a:	009b      	lsls	r3, r3, #2
 8016b8c:	2101      	movs	r1, #1
 8016b8e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	4a23      	ldr	r2, [pc, #140]	@ (8016c20 <USBD_LL_SetupStage+0xb8>)
 8016b94:	5a9b      	ldrh	r3, [r3, r2]
 8016b96:	0019      	movs	r1, r3
 8016b98:	687a      	ldr	r2, [r7, #4]
 8016b9a:	23a6      	movs	r3, #166	@ 0xa6
 8016b9c:	009b      	lsls	r3, r3, #2
 8016b9e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8016ba0:	687a      	ldr	r2, [r7, #4]
 8016ba2:	23aa      	movs	r3, #170	@ 0xaa
 8016ba4:	009b      	lsls	r3, r3, #2
 8016ba6:	5cd3      	ldrb	r3, [r2, r3]
 8016ba8:	001a      	movs	r2, r3
 8016baa:	231f      	movs	r3, #31
 8016bac:	4013      	ands	r3, r2
 8016bae:	2b02      	cmp	r3, #2
 8016bb0:	d019      	beq.n	8016be6 <USBD_LL_SetupStage+0x7e>
 8016bb2:	d822      	bhi.n	8016bfa <USBD_LL_SetupStage+0x92>
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d002      	beq.n	8016bbe <USBD_LL_SetupStage+0x56>
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d00a      	beq.n	8016bd2 <USBD_LL_SetupStage+0x6a>
 8016bbc:	e01d      	b.n	8016bfa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	22aa      	movs	r2, #170	@ 0xaa
 8016bc2:	0092      	lsls	r2, r2, #2
 8016bc4:	189a      	adds	r2, r3, r2
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	0011      	movs	r1, r2
 8016bca:	0018      	movs	r0, r3
 8016bcc:	f000 fa10 	bl	8016ff0 <USBD_StdDevReq>
      break;
 8016bd0:	e020      	b.n	8016c14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	22aa      	movs	r2, #170	@ 0xaa
 8016bd6:	0092      	lsls	r2, r2, #2
 8016bd8:	189a      	adds	r2, r3, r2
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	0011      	movs	r1, r2
 8016bde:	0018      	movs	r0, r3
 8016be0:	f000 fa78 	bl	80170d4 <USBD_StdItfReq>
      break;
 8016be4:	e016      	b.n	8016c14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	22aa      	movs	r2, #170	@ 0xaa
 8016bea:	0092      	lsls	r2, r2, #2
 8016bec:	189a      	adds	r2, r3, r2
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	0011      	movs	r1, r2
 8016bf2:	0018      	movs	r0, r3
 8016bf4:	f000 fac5 	bl	8017182 <USBD_StdEPReq>
      break;
 8016bf8:	e00c      	b.n	8016c14 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	23aa      	movs	r3, #170	@ 0xaa
 8016bfe:	009b      	lsls	r3, r3, #2
 8016c00:	5cd3      	ldrb	r3, [r2, r3]
 8016c02:	227f      	movs	r2, #127	@ 0x7f
 8016c04:	4393      	bics	r3, r2
 8016c06:	b2da      	uxtb	r2, r3
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	0011      	movs	r1, r2
 8016c0c:	0018      	movs	r0, r3
 8016c0e:	f001 fd2a 	bl	8018666 <USBD_LL_StallEP>
      break;
 8016c12:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8016c14:	2300      	movs	r3, #0
}
 8016c16:	0018      	movs	r0, r3
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	b002      	add	sp, #8
 8016c1c:	bd80      	pop	{r7, pc}
 8016c1e:	46c0      	nop			@ (mov r8, r8)
 8016c20:	000002ae 	.word	0x000002ae

08016c24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b086      	sub	sp, #24
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	60f8      	str	r0, [r7, #12]
 8016c2c:	607a      	str	r2, [r7, #4]
 8016c2e:	200b      	movs	r0, #11
 8016c30:	183b      	adds	r3, r7, r0
 8016c32:	1c0a      	adds	r2, r1, #0
 8016c34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016c36:	183b      	adds	r3, r7, r0
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d154      	bne.n	8016ce8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	3355      	adds	r3, #85	@ 0x55
 8016c42:	33ff      	adds	r3, #255	@ 0xff
 8016c44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016c46:	68fa      	ldr	r2, [r7, #12]
 8016c48:	23a5      	movs	r3, #165	@ 0xa5
 8016c4a:	009b      	lsls	r3, r3, #2
 8016c4c:	58d3      	ldr	r3, [r2, r3]
 8016c4e:	2b03      	cmp	r3, #3
 8016c50:	d139      	bne.n	8016cc6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016c52:	697b      	ldr	r3, [r7, #20]
 8016c54:	68da      	ldr	r2, [r3, #12]
 8016c56:	697b      	ldr	r3, [r7, #20]
 8016c58:	691b      	ldr	r3, [r3, #16]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d919      	bls.n	8016c92 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	68da      	ldr	r2, [r3, #12]
 8016c62:	697b      	ldr	r3, [r7, #20]
 8016c64:	691b      	ldr	r3, [r3, #16]
 8016c66:	1ad2      	subs	r2, r2, r3
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	68da      	ldr	r2, [r3, #12]
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d203      	bcs.n	8016c80 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016c78:	697b      	ldr	r3, [r7, #20]
 8016c7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	e002      	b.n	8016c86 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016c84:	b29b      	uxth	r3, r3
 8016c86:	6879      	ldr	r1, [r7, #4]
 8016c88:	68f8      	ldr	r0, [r7, #12]
 8016c8a:	001a      	movs	r2, r3
 8016c8c:	f001 f898 	bl	8017dc0 <USBD_CtlContinueRx>
 8016c90:	e045      	b.n	8016d1e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016c92:	68fa      	ldr	r2, [r7, #12]
 8016c94:	23ad      	movs	r3, #173	@ 0xad
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	58d3      	ldr	r3, [r2, r3]
 8016c9a:	691b      	ldr	r3, [r3, #16]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d00d      	beq.n	8016cbc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016ca0:	68fa      	ldr	r2, [r7, #12]
 8016ca2:	23a7      	movs	r3, #167	@ 0xa7
 8016ca4:	009b      	lsls	r3, r3, #2
 8016ca6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016ca8:	2b03      	cmp	r3, #3
 8016caa:	d107      	bne.n	8016cbc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8016cac:	68fa      	ldr	r2, [r7, #12]
 8016cae:	23ad      	movs	r3, #173	@ 0xad
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	58d3      	ldr	r3, [r2, r3]
 8016cb4:	691b      	ldr	r3, [r3, #16]
 8016cb6:	68fa      	ldr	r2, [r7, #12]
 8016cb8:	0010      	movs	r0, r2
 8016cba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	0018      	movs	r0, r3
 8016cc0:	f001 f891 	bl	8017de6 <USBD_CtlSendStatus>
 8016cc4:	e02b      	b.n	8016d1e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8016cc6:	68fa      	ldr	r2, [r7, #12]
 8016cc8:	23a5      	movs	r3, #165	@ 0xa5
 8016cca:	009b      	lsls	r3, r3, #2
 8016ccc:	58d3      	ldr	r3, [r2, r3]
 8016cce:	2b05      	cmp	r3, #5
 8016cd0:	d125      	bne.n	8016d1e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8016cd2:	68fa      	ldr	r2, [r7, #12]
 8016cd4:	23a5      	movs	r3, #165	@ 0xa5
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	2100      	movs	r1, #0
 8016cda:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2100      	movs	r1, #0
 8016ce0:	0018      	movs	r0, r3
 8016ce2:	f001 fcc0 	bl	8018666 <USBD_LL_StallEP>
 8016ce6:	e01a      	b.n	8016d1e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8016ce8:	68fa      	ldr	r2, [r7, #12]
 8016cea:	23ad      	movs	r3, #173	@ 0xad
 8016cec:	009b      	lsls	r3, r3, #2
 8016cee:	58d3      	ldr	r3, [r2, r3]
 8016cf0:	699b      	ldr	r3, [r3, #24]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d011      	beq.n	8016d1a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016cf6:	68fa      	ldr	r2, [r7, #12]
 8016cf8:	23a7      	movs	r3, #167	@ 0xa7
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8016cfe:	2b03      	cmp	r3, #3
 8016d00:	d10b      	bne.n	8016d1a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8016d02:	68fa      	ldr	r2, [r7, #12]
 8016d04:	23ad      	movs	r3, #173	@ 0xad
 8016d06:	009b      	lsls	r3, r3, #2
 8016d08:	58d3      	ldr	r3, [r2, r3]
 8016d0a:	699b      	ldr	r3, [r3, #24]
 8016d0c:	220b      	movs	r2, #11
 8016d0e:	18ba      	adds	r2, r7, r2
 8016d10:	7811      	ldrb	r1, [r2, #0]
 8016d12:	68fa      	ldr	r2, [r7, #12]
 8016d14:	0010      	movs	r0, r2
 8016d16:	4798      	blx	r3
 8016d18:	e001      	b.n	8016d1e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016d1a:	2302      	movs	r3, #2
 8016d1c:	e000      	b.n	8016d20 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8016d1e:	2300      	movs	r3, #0
}
 8016d20:	0018      	movs	r0, r3
 8016d22:	46bd      	mov	sp, r7
 8016d24:	b006      	add	sp, #24
 8016d26:	bd80      	pop	{r7, pc}

08016d28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b086      	sub	sp, #24
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	60f8      	str	r0, [r7, #12]
 8016d30:	607a      	str	r2, [r7, #4]
 8016d32:	200b      	movs	r0, #11
 8016d34:	183b      	adds	r3, r7, r0
 8016d36:	1c0a      	adds	r2, r1, #0
 8016d38:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016d3a:	183b      	adds	r3, r7, r0
 8016d3c:	781b      	ldrb	r3, [r3, #0]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d000      	beq.n	8016d44 <USBD_LL_DataInStage+0x1c>
 8016d42:	e08e      	b.n	8016e62 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	3314      	adds	r3, #20
 8016d48:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016d4a:	68fa      	ldr	r2, [r7, #12]
 8016d4c:	23a5      	movs	r3, #165	@ 0xa5
 8016d4e:	009b      	lsls	r3, r3, #2
 8016d50:	58d3      	ldr	r3, [r2, r3]
 8016d52:	2b02      	cmp	r3, #2
 8016d54:	d164      	bne.n	8016e20 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	68da      	ldr	r2, [r3, #12]
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	691b      	ldr	r3, [r3, #16]
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d915      	bls.n	8016d8e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	68da      	ldr	r2, [r3, #12]
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	691b      	ldr	r3, [r3, #16]
 8016d6a:	1ad2      	subs	r2, r2, r3
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	68db      	ldr	r3, [r3, #12]
 8016d74:	b29a      	uxth	r2, r3
 8016d76:	6879      	ldr	r1, [r7, #4]
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	0018      	movs	r0, r3
 8016d7c:	f000 ffe9 	bl	8017d52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016d80:	68f8      	ldr	r0, [r7, #12]
 8016d82:	2300      	movs	r3, #0
 8016d84:	2200      	movs	r2, #0
 8016d86:	2100      	movs	r1, #0
 8016d88:	f001 fd56 	bl	8018838 <USBD_LL_PrepareReceive>
 8016d8c:	e059      	b.n	8016e42 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	689a      	ldr	r2, [r3, #8]
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	691b      	ldr	r3, [r3, #16]
 8016d96:	0019      	movs	r1, r3
 8016d98:	0010      	movs	r0, r2
 8016d9a:	f7e9 fa7f 	bl	800029c <__aeabi_uidivmod>
 8016d9e:	1e0b      	subs	r3, r1, #0
 8016da0:	d11f      	bne.n	8016de2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	689a      	ldr	r2, [r3, #8]
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d319      	bcc.n	8016de2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	689a      	ldr	r2, [r3, #8]
 8016db2:	68f9      	ldr	r1, [r7, #12]
 8016db4:	23a6      	movs	r3, #166	@ 0xa6
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d211      	bcs.n	8016de2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	2100      	movs	r1, #0
 8016dc4:	0018      	movs	r0, r3
 8016dc6:	f000 ffc4 	bl	8017d52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016dca:	68fa      	ldr	r2, [r7, #12]
 8016dcc:	23a6      	movs	r3, #166	@ 0xa6
 8016dce:	009b      	lsls	r3, r3, #2
 8016dd0:	2100      	movs	r1, #0
 8016dd2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016dd4:	68f8      	ldr	r0, [r7, #12]
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	2200      	movs	r2, #0
 8016dda:	2100      	movs	r1, #0
 8016ddc:	f001 fd2c 	bl	8018838 <USBD_LL_PrepareReceive>
 8016de0:	e02f      	b.n	8016e42 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016de2:	68fa      	ldr	r2, [r7, #12]
 8016de4:	23ad      	movs	r3, #173	@ 0xad
 8016de6:	009b      	lsls	r3, r3, #2
 8016de8:	58d3      	ldr	r3, [r2, r3]
 8016dea:	68db      	ldr	r3, [r3, #12]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d00d      	beq.n	8016e0c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016df0:	68fa      	ldr	r2, [r7, #12]
 8016df2:	23a7      	movs	r3, #167	@ 0xa7
 8016df4:	009b      	lsls	r3, r3, #2
 8016df6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016df8:	2b03      	cmp	r3, #3
 8016dfa:	d107      	bne.n	8016e0c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8016dfc:	68fa      	ldr	r2, [r7, #12]
 8016dfe:	23ad      	movs	r3, #173	@ 0xad
 8016e00:	009b      	lsls	r3, r3, #2
 8016e02:	58d3      	ldr	r3, [r2, r3]
 8016e04:	68db      	ldr	r3, [r3, #12]
 8016e06:	68fa      	ldr	r2, [r7, #12]
 8016e08:	0010      	movs	r0, r2
 8016e0a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2180      	movs	r1, #128	@ 0x80
 8016e10:	0018      	movs	r0, r3
 8016e12:	f001 fc28 	bl	8018666 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	0018      	movs	r0, r3
 8016e1a:	f000 fff8 	bl	8017e0e <USBD_CtlReceiveStatus>
 8016e1e:	e010      	b.n	8016e42 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e20:	68fa      	ldr	r2, [r7, #12]
 8016e22:	23a5      	movs	r3, #165	@ 0xa5
 8016e24:	009b      	lsls	r3, r3, #2
 8016e26:	58d3      	ldr	r3, [r2, r3]
 8016e28:	2b04      	cmp	r3, #4
 8016e2a:	d005      	beq.n	8016e38 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8016e2c:	68fa      	ldr	r2, [r7, #12]
 8016e2e:	23a5      	movs	r3, #165	@ 0xa5
 8016e30:	009b      	lsls	r3, r3, #2
 8016e32:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d104      	bne.n	8016e42 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	2180      	movs	r1, #128	@ 0x80
 8016e3c:	0018      	movs	r0, r3
 8016e3e:	f001 fc12 	bl	8018666 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	23a8      	movs	r3, #168	@ 0xa8
 8016e46:	009b      	lsls	r3, r3, #2
 8016e48:	5cd3      	ldrb	r3, [r2, r3]
 8016e4a:	2b01      	cmp	r3, #1
 8016e4c:	d124      	bne.n	8016e98 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	0018      	movs	r0, r3
 8016e52:	f7ff fe43 	bl	8016adc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016e56:	68fa      	ldr	r2, [r7, #12]
 8016e58:	23a8      	movs	r3, #168	@ 0xa8
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	2100      	movs	r1, #0
 8016e5e:	54d1      	strb	r1, [r2, r3]
 8016e60:	e01a      	b.n	8016e98 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8016e62:	68fa      	ldr	r2, [r7, #12]
 8016e64:	23ad      	movs	r3, #173	@ 0xad
 8016e66:	009b      	lsls	r3, r3, #2
 8016e68:	58d3      	ldr	r3, [r2, r3]
 8016e6a:	695b      	ldr	r3, [r3, #20]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d011      	beq.n	8016e94 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016e70:	68fa      	ldr	r2, [r7, #12]
 8016e72:	23a7      	movs	r3, #167	@ 0xa7
 8016e74:	009b      	lsls	r3, r3, #2
 8016e76:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8016e78:	2b03      	cmp	r3, #3
 8016e7a:	d10b      	bne.n	8016e94 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8016e7c:	68fa      	ldr	r2, [r7, #12]
 8016e7e:	23ad      	movs	r3, #173	@ 0xad
 8016e80:	009b      	lsls	r3, r3, #2
 8016e82:	58d3      	ldr	r3, [r2, r3]
 8016e84:	695b      	ldr	r3, [r3, #20]
 8016e86:	220b      	movs	r2, #11
 8016e88:	18ba      	adds	r2, r7, r2
 8016e8a:	7811      	ldrb	r1, [r2, #0]
 8016e8c:	68fa      	ldr	r2, [r7, #12]
 8016e8e:	0010      	movs	r0, r2
 8016e90:	4798      	blx	r3
 8016e92:	e001      	b.n	8016e98 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016e94:	2302      	movs	r3, #2
 8016e96:	e000      	b.n	8016e9a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8016e98:	2300      	movs	r3, #0
}
 8016e9a:	0018      	movs	r0, r3
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	b006      	add	sp, #24
 8016ea0:	bd80      	pop	{r7, pc}

08016ea2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016ea2:	b580      	push	{r7, lr}
 8016ea4:	b082      	sub	sp, #8
 8016ea6:	af00      	add	r7, sp, #0
 8016ea8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016eaa:	6878      	ldr	r0, [r7, #4]
 8016eac:	2340      	movs	r3, #64	@ 0x40
 8016eae:	2200      	movs	r2, #0
 8016eb0:	2100      	movs	r1, #0
 8016eb2:	f001 fb76 	bl	80185a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	23ac      	movs	r3, #172	@ 0xac
 8016eba:	005b      	lsls	r3, r3, #1
 8016ebc:	2101      	movs	r1, #1
 8016ebe:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016ec0:	687a      	ldr	r2, [r7, #4]
 8016ec2:	23b2      	movs	r3, #178	@ 0xb2
 8016ec4:	005b      	lsls	r3, r3, #1
 8016ec6:	2140      	movs	r1, #64	@ 0x40
 8016ec8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	2340      	movs	r3, #64	@ 0x40
 8016ece:	2200      	movs	r2, #0
 8016ed0:	2180      	movs	r1, #128	@ 0x80
 8016ed2:	f001 fb66 	bl	80185a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	2201      	movs	r2, #1
 8016eda:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	2240      	movs	r2, #64	@ 0x40
 8016ee0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	23a7      	movs	r3, #167	@ 0xa7
 8016ee6:	009b      	lsls	r3, r3, #2
 8016ee8:	2101      	movs	r1, #1
 8016eea:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8016eec:	687a      	ldr	r2, [r7, #4]
 8016eee:	23a5      	movs	r3, #165	@ 0xa5
 8016ef0:	009b      	lsls	r3, r3, #2
 8016ef2:	2100      	movs	r1, #0
 8016ef4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2200      	movs	r2, #0
 8016efa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	23a9      	movs	r3, #169	@ 0xa9
 8016f00:	009b      	lsls	r3, r3, #2
 8016f02:	2100      	movs	r1, #0
 8016f04:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8016f06:	687a      	ldr	r2, [r7, #4]
 8016f08:	23ae      	movs	r3, #174	@ 0xae
 8016f0a:	009b      	lsls	r3, r3, #2
 8016f0c:	58d3      	ldr	r3, [r2, r3]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d00a      	beq.n	8016f28 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	23ad      	movs	r3, #173	@ 0xad
 8016f16:	009b      	lsls	r3, r3, #2
 8016f18:	58d3      	ldr	r3, [r2, r3]
 8016f1a:	685a      	ldr	r2, [r3, #4]
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	b2d9      	uxtb	r1, r3
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	0018      	movs	r0, r3
 8016f26:	4790      	blx	r2
  }

  return USBD_OK;
 8016f28:	2300      	movs	r3, #0
}
 8016f2a:	0018      	movs	r0, r3
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	b002      	add	sp, #8
 8016f30:	bd80      	pop	{r7, pc}

08016f32 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016f32:	b580      	push	{r7, lr}
 8016f34:	b082      	sub	sp, #8
 8016f36:	af00      	add	r7, sp, #0
 8016f38:	6078      	str	r0, [r7, #4]
 8016f3a:	000a      	movs	r2, r1
 8016f3c:	1cfb      	adds	r3, r7, #3
 8016f3e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	1cfa      	adds	r2, r7, #3
 8016f44:	7812      	ldrb	r2, [r2, #0]
 8016f46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016f48:	2300      	movs	r3, #0
}
 8016f4a:	0018      	movs	r0, r3
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	b002      	add	sp, #8
 8016f50:	bd80      	pop	{r7, pc}
	...

08016f54 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8016f5c:	687a      	ldr	r2, [r7, #4]
 8016f5e:	23a7      	movs	r3, #167	@ 0xa7
 8016f60:	009b      	lsls	r3, r3, #2
 8016f62:	5cd1      	ldrb	r1, [r2, r3]
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	4a06      	ldr	r2, [pc, #24]	@ (8016f80 <USBD_LL_Suspend+0x2c>)
 8016f68:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8016f6a:	687a      	ldr	r2, [r7, #4]
 8016f6c:	23a7      	movs	r3, #167	@ 0xa7
 8016f6e:	009b      	lsls	r3, r3, #2
 8016f70:	2104      	movs	r1, #4
 8016f72:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8016f74:	2300      	movs	r3, #0
}
 8016f76:	0018      	movs	r0, r3
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	b002      	add	sp, #8
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	46c0      	nop			@ (mov r8, r8)
 8016f80:	0000029d 	.word	0x0000029d

08016f84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b082      	sub	sp, #8
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	23a7      	movs	r3, #167	@ 0xa7
 8016f90:	009b      	lsls	r3, r3, #2
 8016f92:	5cd3      	ldrb	r3, [r2, r3]
 8016f94:	2b04      	cmp	r3, #4
 8016f96:	d106      	bne.n	8016fa6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	4a05      	ldr	r2, [pc, #20]	@ (8016fb0 <USBD_LL_Resume+0x2c>)
 8016f9c:	5c99      	ldrb	r1, [r3, r2]
 8016f9e:	687a      	ldr	r2, [r7, #4]
 8016fa0:	23a7      	movs	r3, #167	@ 0xa7
 8016fa2:	009b      	lsls	r3, r3, #2
 8016fa4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8016fa6:	2300      	movs	r3, #0
}
 8016fa8:	0018      	movs	r0, r3
 8016faa:	46bd      	mov	sp, r7
 8016fac:	b002      	add	sp, #8
 8016fae:	bd80      	pop	{r7, pc}
 8016fb0:	0000029d 	.word	0x0000029d

08016fb4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b082      	sub	sp, #8
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fbc:	687a      	ldr	r2, [r7, #4]
 8016fbe:	23a7      	movs	r3, #167	@ 0xa7
 8016fc0:	009b      	lsls	r3, r3, #2
 8016fc2:	5cd3      	ldrb	r3, [r2, r3]
 8016fc4:	2b03      	cmp	r3, #3
 8016fc6:	d10e      	bne.n	8016fe6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	23ad      	movs	r3, #173	@ 0xad
 8016fcc:	009b      	lsls	r3, r3, #2
 8016fce:	58d3      	ldr	r3, [r2, r3]
 8016fd0:	69db      	ldr	r3, [r3, #28]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d007      	beq.n	8016fe6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	23ad      	movs	r3, #173	@ 0xad
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	58d3      	ldr	r3, [r2, r3]
 8016fde:	69db      	ldr	r3, [r3, #28]
 8016fe0:	687a      	ldr	r2, [r7, #4]
 8016fe2:	0010      	movs	r0, r2
 8016fe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016fe6:	2300      	movs	r3, #0
}
 8016fe8:	0018      	movs	r0, r3
 8016fea:	46bd      	mov	sp, r7
 8016fec:	b002      	add	sp, #8
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b084      	sub	sp, #16
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ffa:	230f      	movs	r3, #15
 8016ffc:	18fb      	adds	r3, r7, r3
 8016ffe:	2200      	movs	r2, #0
 8017000:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017002:	683b      	ldr	r3, [r7, #0]
 8017004:	781b      	ldrb	r3, [r3, #0]
 8017006:	001a      	movs	r2, r3
 8017008:	2360      	movs	r3, #96	@ 0x60
 801700a:	4013      	ands	r3, r2
 801700c:	2b40      	cmp	r3, #64	@ 0x40
 801700e:	d004      	beq.n	801701a <USBD_StdDevReq+0x2a>
 8017010:	d84f      	bhi.n	80170b2 <USBD_StdDevReq+0xc2>
 8017012:	2b00      	cmp	r3, #0
 8017014:	d00b      	beq.n	801702e <USBD_StdDevReq+0x3e>
 8017016:	2b20      	cmp	r3, #32
 8017018:	d14b      	bne.n	80170b2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801701a:	687a      	ldr	r2, [r7, #4]
 801701c:	23ad      	movs	r3, #173	@ 0xad
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	58d3      	ldr	r3, [r2, r3]
 8017022:	689b      	ldr	r3, [r3, #8]
 8017024:	6839      	ldr	r1, [r7, #0]
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	0010      	movs	r0, r2
 801702a:	4798      	blx	r3
      break;
 801702c:	e048      	b.n	80170c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	785b      	ldrb	r3, [r3, #1]
 8017032:	2b09      	cmp	r3, #9
 8017034:	d835      	bhi.n	80170a2 <USBD_StdDevReq+0xb2>
 8017036:	009a      	lsls	r2, r3, #2
 8017038:	4b25      	ldr	r3, [pc, #148]	@ (80170d0 <USBD_StdDevReq+0xe0>)
 801703a:	18d3      	adds	r3, r2, r3
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017040:	683a      	ldr	r2, [r7, #0]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	0011      	movs	r1, r2
 8017046:	0018      	movs	r0, r3
 8017048:	f000 fa52 	bl	80174f0 <USBD_GetDescriptor>
          break;
 801704c:	e030      	b.n	80170b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801704e:	683a      	ldr	r2, [r7, #0]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	0011      	movs	r1, r2
 8017054:	0018      	movs	r0, r3
 8017056:	f000 fbfd 	bl	8017854 <USBD_SetAddress>
          break;
 801705a:	e029      	b.n	80170b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801705c:	683a      	ldr	r2, [r7, #0]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	0011      	movs	r1, r2
 8017062:	0018      	movs	r0, r3
 8017064:	f000 fc4a 	bl	80178fc <USBD_SetConfig>
          break;
 8017068:	e022      	b.n	80170b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801706a:	683a      	ldr	r2, [r7, #0]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	0011      	movs	r1, r2
 8017070:	0018      	movs	r0, r3
 8017072:	f000 fce7 	bl	8017a44 <USBD_GetConfig>
          break;
 8017076:	e01b      	b.n	80170b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017078:	683a      	ldr	r2, [r7, #0]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	0011      	movs	r1, r2
 801707e:	0018      	movs	r0, r3
 8017080:	f000 fd1b 	bl	8017aba <USBD_GetStatus>
          break;
 8017084:	e014      	b.n	80170b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017086:	683a      	ldr	r2, [r7, #0]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	0011      	movs	r1, r2
 801708c:	0018      	movs	r0, r3
 801708e:	f000 fd4e 	bl	8017b2e <USBD_SetFeature>
          break;
 8017092:	e00d      	b.n	80170b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017094:	683a      	ldr	r2, [r7, #0]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	0011      	movs	r1, r2
 801709a:	0018      	movs	r0, r3
 801709c:	f000 fd5d 	bl	8017b5a <USBD_ClrFeature>
          break;
 80170a0:	e006      	b.n	80170b0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80170a2:	683a      	ldr	r2, [r7, #0]
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	0011      	movs	r1, r2
 80170a8:	0018      	movs	r0, r3
 80170aa:	f000 fdb4 	bl	8017c16 <USBD_CtlError>
          break;
 80170ae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80170b0:	e006      	b.n	80170c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80170b2:	683a      	ldr	r2, [r7, #0]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	0011      	movs	r1, r2
 80170b8:	0018      	movs	r0, r3
 80170ba:	f000 fdac 	bl	8017c16 <USBD_CtlError>
      break;
 80170be:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80170c0:	230f      	movs	r3, #15
 80170c2:	18fb      	adds	r3, r7, r3
 80170c4:	781b      	ldrb	r3, [r3, #0]
}
 80170c6:	0018      	movs	r0, r3
 80170c8:	46bd      	mov	sp, r7
 80170ca:	b004      	add	sp, #16
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	46c0      	nop			@ (mov r8, r8)
 80170d0:	0801f298 	.word	0x0801f298

080170d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80170d4:	b5b0      	push	{r4, r5, r7, lr}
 80170d6:	b084      	sub	sp, #16
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
 80170dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80170de:	230f      	movs	r3, #15
 80170e0:	18fb      	adds	r3, r7, r3
 80170e2:	2200      	movs	r2, #0
 80170e4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	781b      	ldrb	r3, [r3, #0]
 80170ea:	001a      	movs	r2, r3
 80170ec:	2360      	movs	r3, #96	@ 0x60
 80170ee:	4013      	ands	r3, r2
 80170f0:	2b40      	cmp	r3, #64	@ 0x40
 80170f2:	d004      	beq.n	80170fe <USBD_StdItfReq+0x2a>
 80170f4:	d839      	bhi.n	801716a <USBD_StdItfReq+0x96>
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d001      	beq.n	80170fe <USBD_StdItfReq+0x2a>
 80170fa:	2b20      	cmp	r3, #32
 80170fc:	d135      	bne.n	801716a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	23a7      	movs	r3, #167	@ 0xa7
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	5cd3      	ldrb	r3, [r2, r3]
 8017106:	3b01      	subs	r3, #1
 8017108:	2b02      	cmp	r3, #2
 801710a:	d825      	bhi.n	8017158 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	889b      	ldrh	r3, [r3, #4]
 8017110:	b2db      	uxtb	r3, r3
 8017112:	2b01      	cmp	r3, #1
 8017114:	d819      	bhi.n	801714a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017116:	687a      	ldr	r2, [r7, #4]
 8017118:	23ad      	movs	r3, #173	@ 0xad
 801711a:	009b      	lsls	r3, r3, #2
 801711c:	58d3      	ldr	r3, [r2, r3]
 801711e:	689b      	ldr	r3, [r3, #8]
 8017120:	250f      	movs	r5, #15
 8017122:	197c      	adds	r4, r7, r5
 8017124:	6839      	ldr	r1, [r7, #0]
 8017126:	687a      	ldr	r2, [r7, #4]
 8017128:	0010      	movs	r0, r2
 801712a:	4798      	blx	r3
 801712c:	0003      	movs	r3, r0
 801712e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	88db      	ldrh	r3, [r3, #6]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d116      	bne.n	8017166 <USBD_StdItfReq+0x92>
 8017138:	197b      	adds	r3, r7, r5
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d112      	bne.n	8017166 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	0018      	movs	r0, r3
 8017144:	f000 fe4f 	bl	8017de6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017148:	e00d      	b.n	8017166 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801714a:	683a      	ldr	r2, [r7, #0]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	0011      	movs	r1, r2
 8017150:	0018      	movs	r0, r3
 8017152:	f000 fd60 	bl	8017c16 <USBD_CtlError>
          break;
 8017156:	e006      	b.n	8017166 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8017158:	683a      	ldr	r2, [r7, #0]
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	0011      	movs	r1, r2
 801715e:	0018      	movs	r0, r3
 8017160:	f000 fd59 	bl	8017c16 <USBD_CtlError>
          break;
 8017164:	e000      	b.n	8017168 <USBD_StdItfReq+0x94>
          break;
 8017166:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017168:	e006      	b.n	8017178 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801716a:	683a      	ldr	r2, [r7, #0]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	0011      	movs	r1, r2
 8017170:	0018      	movs	r0, r3
 8017172:	f000 fd50 	bl	8017c16 <USBD_CtlError>
      break;
 8017176:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8017178:	2300      	movs	r3, #0
}
 801717a:	0018      	movs	r0, r3
 801717c:	46bd      	mov	sp, r7
 801717e:	b004      	add	sp, #16
 8017180:	bdb0      	pop	{r4, r5, r7, pc}

08017182 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8017182:	b5b0      	push	{r4, r5, r7, lr}
 8017184:	b084      	sub	sp, #16
 8017186:	af00      	add	r7, sp, #0
 8017188:	6078      	str	r0, [r7, #4]
 801718a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801718c:	230f      	movs	r3, #15
 801718e:	18fb      	adds	r3, r7, r3
 8017190:	2200      	movs	r2, #0
 8017192:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	889a      	ldrh	r2, [r3, #4]
 8017198:	230e      	movs	r3, #14
 801719a:	18fb      	adds	r3, r7, r3
 801719c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	781b      	ldrb	r3, [r3, #0]
 80171a2:	001a      	movs	r2, r3
 80171a4:	2360      	movs	r3, #96	@ 0x60
 80171a6:	4013      	ands	r3, r2
 80171a8:	2b40      	cmp	r3, #64	@ 0x40
 80171aa:	d006      	beq.n	80171ba <USBD_StdEPReq+0x38>
 80171ac:	d900      	bls.n	80171b0 <USBD_StdEPReq+0x2e>
 80171ae:	e190      	b.n	80174d2 <USBD_StdEPReq+0x350>
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d00c      	beq.n	80171ce <USBD_StdEPReq+0x4c>
 80171b4:	2b20      	cmp	r3, #32
 80171b6:	d000      	beq.n	80171ba <USBD_StdEPReq+0x38>
 80171b8:	e18b      	b.n	80174d2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80171ba:	687a      	ldr	r2, [r7, #4]
 80171bc:	23ad      	movs	r3, #173	@ 0xad
 80171be:	009b      	lsls	r3, r3, #2
 80171c0:	58d3      	ldr	r3, [r2, r3]
 80171c2:	689b      	ldr	r3, [r3, #8]
 80171c4:	6839      	ldr	r1, [r7, #0]
 80171c6:	687a      	ldr	r2, [r7, #4]
 80171c8:	0010      	movs	r0, r2
 80171ca:	4798      	blx	r3
      break;
 80171cc:	e188      	b.n	80174e0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	001a      	movs	r2, r3
 80171d4:	2360      	movs	r3, #96	@ 0x60
 80171d6:	4013      	ands	r3, r2
 80171d8:	2b20      	cmp	r3, #32
 80171da:	d10f      	bne.n	80171fc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80171dc:	687a      	ldr	r2, [r7, #4]
 80171de:	23ad      	movs	r3, #173	@ 0xad
 80171e0:	009b      	lsls	r3, r3, #2
 80171e2:	58d3      	ldr	r3, [r2, r3]
 80171e4:	689b      	ldr	r3, [r3, #8]
 80171e6:	250f      	movs	r5, #15
 80171e8:	197c      	adds	r4, r7, r5
 80171ea:	6839      	ldr	r1, [r7, #0]
 80171ec:	687a      	ldr	r2, [r7, #4]
 80171ee:	0010      	movs	r0, r2
 80171f0:	4798      	blx	r3
 80171f2:	0003      	movs	r3, r0
 80171f4:	7023      	strb	r3, [r4, #0]

        return ret;
 80171f6:	197b      	adds	r3, r7, r5
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	e174      	b.n	80174e6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	785b      	ldrb	r3, [r3, #1]
 8017200:	2b03      	cmp	r3, #3
 8017202:	d007      	beq.n	8017214 <USBD_StdEPReq+0x92>
 8017204:	dd00      	ble.n	8017208 <USBD_StdEPReq+0x86>
 8017206:	e15c      	b.n	80174c2 <USBD_StdEPReq+0x340>
 8017208:	2b00      	cmp	r3, #0
 801720a:	d100      	bne.n	801720e <USBD_StdEPReq+0x8c>
 801720c:	e092      	b.n	8017334 <USBD_StdEPReq+0x1b2>
 801720e:	2b01      	cmp	r3, #1
 8017210:	d04b      	beq.n	80172aa <USBD_StdEPReq+0x128>
 8017212:	e156      	b.n	80174c2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017214:	687a      	ldr	r2, [r7, #4]
 8017216:	23a7      	movs	r3, #167	@ 0xa7
 8017218:	009b      	lsls	r3, r3, #2
 801721a:	5cd3      	ldrb	r3, [r2, r3]
 801721c:	2b02      	cmp	r3, #2
 801721e:	d002      	beq.n	8017226 <USBD_StdEPReq+0xa4>
 8017220:	2b03      	cmp	r3, #3
 8017222:	d01d      	beq.n	8017260 <USBD_StdEPReq+0xde>
 8017224:	e039      	b.n	801729a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017226:	220e      	movs	r2, #14
 8017228:	18bb      	adds	r3, r7, r2
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d010      	beq.n	8017252 <USBD_StdEPReq+0xd0>
 8017230:	18bb      	adds	r3, r7, r2
 8017232:	781b      	ldrb	r3, [r3, #0]
 8017234:	2b80      	cmp	r3, #128	@ 0x80
 8017236:	d00c      	beq.n	8017252 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017238:	18bb      	adds	r3, r7, r2
 801723a:	781a      	ldrb	r2, [r3, #0]
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	0011      	movs	r1, r2
 8017240:	0018      	movs	r0, r3
 8017242:	f001 fa10 	bl	8018666 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2180      	movs	r1, #128	@ 0x80
 801724a:	0018      	movs	r0, r3
 801724c:	f001 fa0b 	bl	8018666 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017250:	e02a      	b.n	80172a8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8017252:	683a      	ldr	r2, [r7, #0]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	0011      	movs	r1, r2
 8017258:	0018      	movs	r0, r3
 801725a:	f000 fcdc 	bl	8017c16 <USBD_CtlError>
              break;
 801725e:	e023      	b.n	80172a8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	885b      	ldrh	r3, [r3, #2]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d113      	bne.n	8017290 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8017268:	220e      	movs	r2, #14
 801726a:	18bb      	adds	r3, r7, r2
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d00e      	beq.n	8017290 <USBD_StdEPReq+0x10e>
 8017272:	18bb      	adds	r3, r7, r2
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	2b80      	cmp	r3, #128	@ 0x80
 8017278:	d00a      	beq.n	8017290 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	88db      	ldrh	r3, [r3, #6]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d106      	bne.n	8017290 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8017282:	18bb      	adds	r3, r7, r2
 8017284:	781a      	ldrb	r2, [r3, #0]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	0011      	movs	r1, r2
 801728a:	0018      	movs	r0, r3
 801728c:	f001 f9eb 	bl	8018666 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	0018      	movs	r0, r3
 8017294:	f000 fda7 	bl	8017de6 <USBD_CtlSendStatus>

              break;
 8017298:	e006      	b.n	80172a8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801729a:	683a      	ldr	r2, [r7, #0]
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	0011      	movs	r1, r2
 80172a0:	0018      	movs	r0, r3
 80172a2:	f000 fcb8 	bl	8017c16 <USBD_CtlError>
              break;
 80172a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80172a8:	e112      	b.n	80174d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80172aa:	687a      	ldr	r2, [r7, #4]
 80172ac:	23a7      	movs	r3, #167	@ 0xa7
 80172ae:	009b      	lsls	r3, r3, #2
 80172b0:	5cd3      	ldrb	r3, [r2, r3]
 80172b2:	2b02      	cmp	r3, #2
 80172b4:	d002      	beq.n	80172bc <USBD_StdEPReq+0x13a>
 80172b6:	2b03      	cmp	r3, #3
 80172b8:	d01d      	beq.n	80172f6 <USBD_StdEPReq+0x174>
 80172ba:	e032      	b.n	8017322 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80172bc:	220e      	movs	r2, #14
 80172be:	18bb      	adds	r3, r7, r2
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d010      	beq.n	80172e8 <USBD_StdEPReq+0x166>
 80172c6:	18bb      	adds	r3, r7, r2
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	2b80      	cmp	r3, #128	@ 0x80
 80172cc:	d00c      	beq.n	80172e8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80172ce:	18bb      	adds	r3, r7, r2
 80172d0:	781a      	ldrb	r2, [r3, #0]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	0011      	movs	r1, r2
 80172d6:	0018      	movs	r0, r3
 80172d8:	f001 f9c5 	bl	8018666 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2180      	movs	r1, #128	@ 0x80
 80172e0:	0018      	movs	r0, r3
 80172e2:	f001 f9c0 	bl	8018666 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80172e6:	e024      	b.n	8017332 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80172e8:	683a      	ldr	r2, [r7, #0]
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	0011      	movs	r1, r2
 80172ee:	0018      	movs	r0, r3
 80172f0:	f000 fc91 	bl	8017c16 <USBD_CtlError>
              break;
 80172f4:	e01d      	b.n	8017332 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	885b      	ldrh	r3, [r3, #2]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d118      	bne.n	8017330 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80172fe:	210e      	movs	r1, #14
 8017300:	187b      	adds	r3, r7, r1
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	227f      	movs	r2, #127	@ 0x7f
 8017306:	4013      	ands	r3, r2
 8017308:	d006      	beq.n	8017318 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801730a:	187b      	adds	r3, r7, r1
 801730c:	781a      	ldrb	r2, [r3, #0]
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	0011      	movs	r1, r2
 8017312:	0018      	movs	r0, r3
 8017314:	f001 f9d2 	bl	80186bc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	0018      	movs	r0, r3
 801731c:	f000 fd63 	bl	8017de6 <USBD_CtlSendStatus>
              }
              break;
 8017320:	e006      	b.n	8017330 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8017322:	683a      	ldr	r2, [r7, #0]
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	0011      	movs	r1, r2
 8017328:	0018      	movs	r0, r3
 801732a:	f000 fc74 	bl	8017c16 <USBD_CtlError>
              break;
 801732e:	e000      	b.n	8017332 <USBD_StdEPReq+0x1b0>
              break;
 8017330:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8017332:	e0cd      	b.n	80174d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	23a7      	movs	r3, #167	@ 0xa7
 8017338:	009b      	lsls	r3, r3, #2
 801733a:	5cd3      	ldrb	r3, [r2, r3]
 801733c:	2b02      	cmp	r3, #2
 801733e:	d002      	beq.n	8017346 <USBD_StdEPReq+0x1c4>
 8017340:	2b03      	cmp	r3, #3
 8017342:	d03c      	beq.n	80173be <USBD_StdEPReq+0x23c>
 8017344:	e0b5      	b.n	80174b2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017346:	220e      	movs	r2, #14
 8017348:	18bb      	adds	r3, r7, r2
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d00a      	beq.n	8017366 <USBD_StdEPReq+0x1e4>
 8017350:	18bb      	adds	r3, r7, r2
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	2b80      	cmp	r3, #128	@ 0x80
 8017356:	d006      	beq.n	8017366 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8017358:	683a      	ldr	r2, [r7, #0]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	0011      	movs	r1, r2
 801735e:	0018      	movs	r0, r3
 8017360:	f000 fc59 	bl	8017c16 <USBD_CtlError>
                break;
 8017364:	e0ac      	b.n	80174c0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017366:	220e      	movs	r2, #14
 8017368:	18bb      	adds	r3, r7, r2
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	b25b      	sxtb	r3, r3
 801736e:	2b00      	cmp	r3, #0
 8017370:	da0c      	bge.n	801738c <USBD_StdEPReq+0x20a>
 8017372:	18bb      	adds	r3, r7, r2
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	227f      	movs	r2, #127	@ 0x7f
 8017378:	401a      	ands	r2, r3
 801737a:	0013      	movs	r3, r2
 801737c:	009b      	lsls	r3, r3, #2
 801737e:	189b      	adds	r3, r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	3310      	adds	r3, #16
 8017384:	687a      	ldr	r2, [r7, #4]
 8017386:	18d3      	adds	r3, r2, r3
 8017388:	3304      	adds	r3, #4
 801738a:	e00d      	b.n	80173a8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801738c:	230e      	movs	r3, #14
 801738e:	18fb      	adds	r3, r7, r3
 8017390:	781b      	ldrb	r3, [r3, #0]
 8017392:	227f      	movs	r2, #127	@ 0x7f
 8017394:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017396:	0013      	movs	r3, r2
 8017398:	009b      	lsls	r3, r3, #2
 801739a:	189b      	adds	r3, r3, r2
 801739c:	009b      	lsls	r3, r3, #2
 801739e:	3351      	adds	r3, #81	@ 0x51
 80173a0:	33ff      	adds	r3, #255	@ 0xff
 80173a2:	687a      	ldr	r2, [r7, #4]
 80173a4:	18d3      	adds	r3, r2, r3
 80173a6:	3304      	adds	r3, #4
 80173a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80173aa:	68bb      	ldr	r3, [r7, #8]
 80173ac:	2200      	movs	r2, #0
 80173ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80173b0:	68b9      	ldr	r1, [r7, #8]
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2202      	movs	r2, #2
 80173b6:	0018      	movs	r0, r3
 80173b8:	f000 fcab 	bl	8017d12 <USBD_CtlSendData>
              break;
 80173bc:	e080      	b.n	80174c0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80173be:	220e      	movs	r2, #14
 80173c0:	18bb      	adds	r3, r7, r2
 80173c2:	781b      	ldrb	r3, [r3, #0]
 80173c4:	b25b      	sxtb	r3, r3
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	da14      	bge.n	80173f4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80173ca:	18bb      	adds	r3, r7, r2
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	220f      	movs	r2, #15
 80173d0:	401a      	ands	r2, r3
 80173d2:	6879      	ldr	r1, [r7, #4]
 80173d4:	0013      	movs	r3, r2
 80173d6:	009b      	lsls	r3, r3, #2
 80173d8:	189b      	adds	r3, r3, r2
 80173da:	009b      	lsls	r3, r3, #2
 80173dc:	18cb      	adds	r3, r1, r3
 80173de:	3318      	adds	r3, #24
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d11e      	bne.n	8017424 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80173e6:	683a      	ldr	r2, [r7, #0]
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	0011      	movs	r1, r2
 80173ec:	0018      	movs	r0, r3
 80173ee:	f000 fc12 	bl	8017c16 <USBD_CtlError>
                  break;
 80173f2:	e065      	b.n	80174c0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80173f4:	230e      	movs	r3, #14
 80173f6:	18fb      	adds	r3, r7, r3
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	220f      	movs	r2, #15
 80173fc:	401a      	ands	r2, r3
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	23ac      	movs	r3, #172	@ 0xac
 8017402:	0059      	lsls	r1, r3, #1
 8017404:	0013      	movs	r3, r2
 8017406:	009b      	lsls	r3, r3, #2
 8017408:	189b      	adds	r3, r3, r2
 801740a:	009b      	lsls	r3, r3, #2
 801740c:	18c3      	adds	r3, r0, r3
 801740e:	185b      	adds	r3, r3, r1
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d106      	bne.n	8017424 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8017416:	683a      	ldr	r2, [r7, #0]
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	0011      	movs	r1, r2
 801741c:	0018      	movs	r0, r3
 801741e:	f000 fbfa 	bl	8017c16 <USBD_CtlError>
                  break;
 8017422:	e04d      	b.n	80174c0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017424:	220e      	movs	r2, #14
 8017426:	18bb      	adds	r3, r7, r2
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	b25b      	sxtb	r3, r3
 801742c:	2b00      	cmp	r3, #0
 801742e:	da0c      	bge.n	801744a <USBD_StdEPReq+0x2c8>
 8017430:	18bb      	adds	r3, r7, r2
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	227f      	movs	r2, #127	@ 0x7f
 8017436:	401a      	ands	r2, r3
 8017438:	0013      	movs	r3, r2
 801743a:	009b      	lsls	r3, r3, #2
 801743c:	189b      	adds	r3, r3, r2
 801743e:	009b      	lsls	r3, r3, #2
 8017440:	3310      	adds	r3, #16
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	18d3      	adds	r3, r2, r3
 8017446:	3304      	adds	r3, #4
 8017448:	e00d      	b.n	8017466 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801744a:	230e      	movs	r3, #14
 801744c:	18fb      	adds	r3, r7, r3
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	227f      	movs	r2, #127	@ 0x7f
 8017452:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017454:	0013      	movs	r3, r2
 8017456:	009b      	lsls	r3, r3, #2
 8017458:	189b      	adds	r3, r3, r2
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	3351      	adds	r3, #81	@ 0x51
 801745e:	33ff      	adds	r3, #255	@ 0xff
 8017460:	687a      	ldr	r2, [r7, #4]
 8017462:	18d3      	adds	r3, r2, r3
 8017464:	3304      	adds	r3, #4
 8017466:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017468:	220e      	movs	r2, #14
 801746a:	18bb      	adds	r3, r7, r2
 801746c:	781b      	ldrb	r3, [r3, #0]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d003      	beq.n	801747a <USBD_StdEPReq+0x2f8>
 8017472:	18bb      	adds	r3, r7, r2
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	2b80      	cmp	r3, #128	@ 0x80
 8017478:	d103      	bne.n	8017482 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	2200      	movs	r2, #0
 801747e:	601a      	str	r2, [r3, #0]
 8017480:	e010      	b.n	80174a4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8017482:	230e      	movs	r3, #14
 8017484:	18fb      	adds	r3, r7, r3
 8017486:	781a      	ldrb	r2, [r3, #0]
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	0011      	movs	r1, r2
 801748c:	0018      	movs	r0, r3
 801748e:	f001 f940 	bl	8018712 <USBD_LL_IsStallEP>
 8017492:	1e03      	subs	r3, r0, #0
 8017494:	d003      	beq.n	801749e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	2201      	movs	r2, #1
 801749a:	601a      	str	r2, [r3, #0]
 801749c:	e002      	b.n	80174a4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	2200      	movs	r2, #0
 80174a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80174a4:	68b9      	ldr	r1, [r7, #8]
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2202      	movs	r2, #2
 80174aa:	0018      	movs	r0, r3
 80174ac:	f000 fc31 	bl	8017d12 <USBD_CtlSendData>
              break;
 80174b0:	e006      	b.n	80174c0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80174b2:	683a      	ldr	r2, [r7, #0]
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	0011      	movs	r1, r2
 80174b8:	0018      	movs	r0, r3
 80174ba:	f000 fbac 	bl	8017c16 <USBD_CtlError>
              break;
 80174be:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80174c0:	e006      	b.n	80174d0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80174c2:	683a      	ldr	r2, [r7, #0]
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	0011      	movs	r1, r2
 80174c8:	0018      	movs	r0, r3
 80174ca:	f000 fba4 	bl	8017c16 <USBD_CtlError>
          break;
 80174ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80174d0:	e006      	b.n	80174e0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80174d2:	683a      	ldr	r2, [r7, #0]
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	0011      	movs	r1, r2
 80174d8:	0018      	movs	r0, r3
 80174da:	f000 fb9c 	bl	8017c16 <USBD_CtlError>
      break;
 80174de:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80174e0:	230f      	movs	r3, #15
 80174e2:	18fb      	adds	r3, r7, r3
 80174e4:	781b      	ldrb	r3, [r3, #0]
}
 80174e6:	0018      	movs	r0, r3
 80174e8:	46bd      	mov	sp, r7
 80174ea:	b004      	add	sp, #16
 80174ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080174f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80174fa:	2308      	movs	r3, #8
 80174fc:	18fb      	adds	r3, r7, r3
 80174fe:	2200      	movs	r2, #0
 8017500:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8017502:	2300      	movs	r3, #0
 8017504:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017506:	230b      	movs	r3, #11
 8017508:	18fb      	adds	r3, r7, r3
 801750a:	2200      	movs	r2, #0
 801750c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	885b      	ldrh	r3, [r3, #2]
 8017512:	0a1b      	lsrs	r3, r3, #8
 8017514:	b29b      	uxth	r3, r3
 8017516:	2b07      	cmp	r3, #7
 8017518:	d900      	bls.n	801751c <USBD_GetDescriptor+0x2c>
 801751a:	e159      	b.n	80177d0 <USBD_GetDescriptor+0x2e0>
 801751c:	009a      	lsls	r2, r3, #2
 801751e:	4bcb      	ldr	r3, [pc, #812]	@ (801784c <USBD_GetDescriptor+0x35c>)
 8017520:	18d3      	adds	r3, r2, r3
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017526:	687a      	ldr	r2, [r7, #4]
 8017528:	23ac      	movs	r3, #172	@ 0xac
 801752a:	009b      	lsls	r3, r3, #2
 801752c:	58d3      	ldr	r3, [r2, r3]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	7c12      	ldrb	r2, [r2, #16]
 8017534:	2108      	movs	r1, #8
 8017536:	1879      	adds	r1, r7, r1
 8017538:	0010      	movs	r0, r2
 801753a:	4798      	blx	r3
 801753c:	0003      	movs	r3, r0
 801753e:	60fb      	str	r3, [r7, #12]
      break;
 8017540:	e153      	b.n	80177ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	7c1b      	ldrb	r3, [r3, #16]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d10f      	bne.n	801756a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	23ad      	movs	r3, #173	@ 0xad
 801754e:	009b      	lsls	r3, r3, #2
 8017550:	58d3      	ldr	r3, [r2, r3]
 8017552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017554:	2208      	movs	r2, #8
 8017556:	18ba      	adds	r2, r7, r2
 8017558:	0010      	movs	r0, r2
 801755a:	4798      	blx	r3
 801755c:	0003      	movs	r3, r0
 801755e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	3301      	adds	r3, #1
 8017564:	2202      	movs	r2, #2
 8017566:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017568:	e13f      	b.n	80177ea <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801756a:	687a      	ldr	r2, [r7, #4]
 801756c:	23ad      	movs	r3, #173	@ 0xad
 801756e:	009b      	lsls	r3, r3, #2
 8017570:	58d3      	ldr	r3, [r2, r3]
 8017572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017574:	2208      	movs	r2, #8
 8017576:	18ba      	adds	r2, r7, r2
 8017578:	0010      	movs	r0, r2
 801757a:	4798      	blx	r3
 801757c:	0003      	movs	r3, r0
 801757e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	3301      	adds	r3, #1
 8017584:	2202      	movs	r2, #2
 8017586:	701a      	strb	r2, [r3, #0]
      break;
 8017588:	e12f      	b.n	80177ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	885b      	ldrh	r3, [r3, #2]
 801758e:	b2db      	uxtb	r3, r3
 8017590:	2b05      	cmp	r3, #5
 8017592:	d900      	bls.n	8017596 <USBD_GetDescriptor+0xa6>
 8017594:	e0d0      	b.n	8017738 <USBD_GetDescriptor+0x248>
 8017596:	009a      	lsls	r2, r3, #2
 8017598:	4bad      	ldr	r3, [pc, #692]	@ (8017850 <USBD_GetDescriptor+0x360>)
 801759a:	18d3      	adds	r3, r2, r3
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80175a0:	687a      	ldr	r2, [r7, #4]
 80175a2:	23ac      	movs	r3, #172	@ 0xac
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	58d3      	ldr	r3, [r2, r3]
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d00d      	beq.n	80175ca <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	23ac      	movs	r3, #172	@ 0xac
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	58d3      	ldr	r3, [r2, r3]
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	687a      	ldr	r2, [r7, #4]
 80175ba:	7c12      	ldrb	r2, [r2, #16]
 80175bc:	2108      	movs	r1, #8
 80175be:	1879      	adds	r1, r7, r1
 80175c0:	0010      	movs	r0, r2
 80175c2:	4798      	blx	r3
 80175c4:	0003      	movs	r3, r0
 80175c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175c8:	e0c3      	b.n	8017752 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80175ca:	683a      	ldr	r2, [r7, #0]
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	0011      	movs	r1, r2
 80175d0:	0018      	movs	r0, r3
 80175d2:	f000 fb20 	bl	8017c16 <USBD_CtlError>
            err++;
 80175d6:	210b      	movs	r1, #11
 80175d8:	187b      	adds	r3, r7, r1
 80175da:	781a      	ldrb	r2, [r3, #0]
 80175dc:	187b      	adds	r3, r7, r1
 80175de:	3201      	adds	r2, #1
 80175e0:	701a      	strb	r2, [r3, #0]
          break;
 80175e2:	e0b6      	b.n	8017752 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80175e4:	687a      	ldr	r2, [r7, #4]
 80175e6:	23ac      	movs	r3, #172	@ 0xac
 80175e8:	009b      	lsls	r3, r3, #2
 80175ea:	58d3      	ldr	r3, [r2, r3]
 80175ec:	689b      	ldr	r3, [r3, #8]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d00d      	beq.n	801760e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80175f2:	687a      	ldr	r2, [r7, #4]
 80175f4:	23ac      	movs	r3, #172	@ 0xac
 80175f6:	009b      	lsls	r3, r3, #2
 80175f8:	58d3      	ldr	r3, [r2, r3]
 80175fa:	689b      	ldr	r3, [r3, #8]
 80175fc:	687a      	ldr	r2, [r7, #4]
 80175fe:	7c12      	ldrb	r2, [r2, #16]
 8017600:	2108      	movs	r1, #8
 8017602:	1879      	adds	r1, r7, r1
 8017604:	0010      	movs	r0, r2
 8017606:	4798      	blx	r3
 8017608:	0003      	movs	r3, r0
 801760a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801760c:	e0a1      	b.n	8017752 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801760e:	683a      	ldr	r2, [r7, #0]
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	0011      	movs	r1, r2
 8017614:	0018      	movs	r0, r3
 8017616:	f000 fafe 	bl	8017c16 <USBD_CtlError>
            err++;
 801761a:	210b      	movs	r1, #11
 801761c:	187b      	adds	r3, r7, r1
 801761e:	781a      	ldrb	r2, [r3, #0]
 8017620:	187b      	adds	r3, r7, r1
 8017622:	3201      	adds	r2, #1
 8017624:	701a      	strb	r2, [r3, #0]
          break;
 8017626:	e094      	b.n	8017752 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017628:	687a      	ldr	r2, [r7, #4]
 801762a:	23ac      	movs	r3, #172	@ 0xac
 801762c:	009b      	lsls	r3, r3, #2
 801762e:	58d3      	ldr	r3, [r2, r3]
 8017630:	68db      	ldr	r3, [r3, #12]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d00d      	beq.n	8017652 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	23ac      	movs	r3, #172	@ 0xac
 801763a:	009b      	lsls	r3, r3, #2
 801763c:	58d3      	ldr	r3, [r2, r3]
 801763e:	68db      	ldr	r3, [r3, #12]
 8017640:	687a      	ldr	r2, [r7, #4]
 8017642:	7c12      	ldrb	r2, [r2, #16]
 8017644:	2108      	movs	r1, #8
 8017646:	1879      	adds	r1, r7, r1
 8017648:	0010      	movs	r0, r2
 801764a:	4798      	blx	r3
 801764c:	0003      	movs	r3, r0
 801764e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017650:	e07f      	b.n	8017752 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8017652:	683a      	ldr	r2, [r7, #0]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	0011      	movs	r1, r2
 8017658:	0018      	movs	r0, r3
 801765a:	f000 fadc 	bl	8017c16 <USBD_CtlError>
            err++;
 801765e:	210b      	movs	r1, #11
 8017660:	187b      	adds	r3, r7, r1
 8017662:	781a      	ldrb	r2, [r3, #0]
 8017664:	187b      	adds	r3, r7, r1
 8017666:	3201      	adds	r2, #1
 8017668:	701a      	strb	r2, [r3, #0]
          break;
 801766a:	e072      	b.n	8017752 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	23ac      	movs	r3, #172	@ 0xac
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	58d3      	ldr	r3, [r2, r3]
 8017674:	691b      	ldr	r3, [r3, #16]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d00d      	beq.n	8017696 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	23ac      	movs	r3, #172	@ 0xac
 801767e:	009b      	lsls	r3, r3, #2
 8017680:	58d3      	ldr	r3, [r2, r3]
 8017682:	691b      	ldr	r3, [r3, #16]
 8017684:	687a      	ldr	r2, [r7, #4]
 8017686:	7c12      	ldrb	r2, [r2, #16]
 8017688:	2108      	movs	r1, #8
 801768a:	1879      	adds	r1, r7, r1
 801768c:	0010      	movs	r0, r2
 801768e:	4798      	blx	r3
 8017690:	0003      	movs	r3, r0
 8017692:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017694:	e05d      	b.n	8017752 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8017696:	683a      	ldr	r2, [r7, #0]
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	0011      	movs	r1, r2
 801769c:	0018      	movs	r0, r3
 801769e:	f000 faba 	bl	8017c16 <USBD_CtlError>
            err++;
 80176a2:	210b      	movs	r1, #11
 80176a4:	187b      	adds	r3, r7, r1
 80176a6:	781a      	ldrb	r2, [r3, #0]
 80176a8:	187b      	adds	r3, r7, r1
 80176aa:	3201      	adds	r2, #1
 80176ac:	701a      	strb	r2, [r3, #0]
          break;
 80176ae:	e050      	b.n	8017752 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80176b0:	687a      	ldr	r2, [r7, #4]
 80176b2:	23ac      	movs	r3, #172	@ 0xac
 80176b4:	009b      	lsls	r3, r3, #2
 80176b6:	58d3      	ldr	r3, [r2, r3]
 80176b8:	695b      	ldr	r3, [r3, #20]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d00d      	beq.n	80176da <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80176be:	687a      	ldr	r2, [r7, #4]
 80176c0:	23ac      	movs	r3, #172	@ 0xac
 80176c2:	009b      	lsls	r3, r3, #2
 80176c4:	58d3      	ldr	r3, [r2, r3]
 80176c6:	695b      	ldr	r3, [r3, #20]
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	7c12      	ldrb	r2, [r2, #16]
 80176cc:	2108      	movs	r1, #8
 80176ce:	1879      	adds	r1, r7, r1
 80176d0:	0010      	movs	r0, r2
 80176d2:	4798      	blx	r3
 80176d4:	0003      	movs	r3, r0
 80176d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176d8:	e03b      	b.n	8017752 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80176da:	683a      	ldr	r2, [r7, #0]
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	0011      	movs	r1, r2
 80176e0:	0018      	movs	r0, r3
 80176e2:	f000 fa98 	bl	8017c16 <USBD_CtlError>
            err++;
 80176e6:	210b      	movs	r1, #11
 80176e8:	187b      	adds	r3, r7, r1
 80176ea:	781a      	ldrb	r2, [r3, #0]
 80176ec:	187b      	adds	r3, r7, r1
 80176ee:	3201      	adds	r2, #1
 80176f0:	701a      	strb	r2, [r3, #0]
          break;
 80176f2:	e02e      	b.n	8017752 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80176f4:	687a      	ldr	r2, [r7, #4]
 80176f6:	23ac      	movs	r3, #172	@ 0xac
 80176f8:	009b      	lsls	r3, r3, #2
 80176fa:	58d3      	ldr	r3, [r2, r3]
 80176fc:	699b      	ldr	r3, [r3, #24]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d00d      	beq.n	801771e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	23ac      	movs	r3, #172	@ 0xac
 8017706:	009b      	lsls	r3, r3, #2
 8017708:	58d3      	ldr	r3, [r2, r3]
 801770a:	699b      	ldr	r3, [r3, #24]
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	7c12      	ldrb	r2, [r2, #16]
 8017710:	2108      	movs	r1, #8
 8017712:	1879      	adds	r1, r7, r1
 8017714:	0010      	movs	r0, r2
 8017716:	4798      	blx	r3
 8017718:	0003      	movs	r3, r0
 801771a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801771c:	e019      	b.n	8017752 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801771e:	683a      	ldr	r2, [r7, #0]
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	0011      	movs	r1, r2
 8017724:	0018      	movs	r0, r3
 8017726:	f000 fa76 	bl	8017c16 <USBD_CtlError>
            err++;
 801772a:	210b      	movs	r1, #11
 801772c:	187b      	adds	r3, r7, r1
 801772e:	781a      	ldrb	r2, [r3, #0]
 8017730:	187b      	adds	r3, r7, r1
 8017732:	3201      	adds	r2, #1
 8017734:	701a      	strb	r2, [r3, #0]
          break;
 8017736:	e00c      	b.n	8017752 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8017738:	683a      	ldr	r2, [r7, #0]
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	0011      	movs	r1, r2
 801773e:	0018      	movs	r0, r3
 8017740:	f000 fa69 	bl	8017c16 <USBD_CtlError>
          err++;
 8017744:	210b      	movs	r1, #11
 8017746:	187b      	adds	r3, r7, r1
 8017748:	781a      	ldrb	r2, [r3, #0]
 801774a:	187b      	adds	r3, r7, r1
 801774c:	3201      	adds	r2, #1
 801774e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8017750:	e04b      	b.n	80177ea <USBD_GetDescriptor+0x2fa>
 8017752:	e04a      	b.n	80177ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	7c1b      	ldrb	r3, [r3, #16]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d10b      	bne.n	8017774 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	23ad      	movs	r3, #173	@ 0xad
 8017760:	009b      	lsls	r3, r3, #2
 8017762:	58d3      	ldr	r3, [r2, r3]
 8017764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017766:	2208      	movs	r2, #8
 8017768:	18ba      	adds	r2, r7, r2
 801776a:	0010      	movs	r0, r2
 801776c:	4798      	blx	r3
 801776e:	0003      	movs	r3, r0
 8017770:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017772:	e03a      	b.n	80177ea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8017774:	683a      	ldr	r2, [r7, #0]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	0011      	movs	r1, r2
 801777a:	0018      	movs	r0, r3
 801777c:	f000 fa4b 	bl	8017c16 <USBD_CtlError>
        err++;
 8017780:	210b      	movs	r1, #11
 8017782:	187b      	adds	r3, r7, r1
 8017784:	781a      	ldrb	r2, [r3, #0]
 8017786:	187b      	adds	r3, r7, r1
 8017788:	3201      	adds	r2, #1
 801778a:	701a      	strb	r2, [r3, #0]
      break;
 801778c:	e02d      	b.n	80177ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	7c1b      	ldrb	r3, [r3, #16]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d10f      	bne.n	80177b6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	23ad      	movs	r3, #173	@ 0xad
 801779a:	009b      	lsls	r3, r3, #2
 801779c:	58d3      	ldr	r3, [r2, r3]
 801779e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177a0:	2208      	movs	r2, #8
 80177a2:	18ba      	adds	r2, r7, r2
 80177a4:	0010      	movs	r0, r2
 80177a6:	4798      	blx	r3
 80177a8:	0003      	movs	r3, r0
 80177aa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	3301      	adds	r3, #1
 80177b0:	2207      	movs	r2, #7
 80177b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80177b4:	e019      	b.n	80177ea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80177b6:	683a      	ldr	r2, [r7, #0]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	0011      	movs	r1, r2
 80177bc:	0018      	movs	r0, r3
 80177be:	f000 fa2a 	bl	8017c16 <USBD_CtlError>
        err++;
 80177c2:	210b      	movs	r1, #11
 80177c4:	187b      	adds	r3, r7, r1
 80177c6:	781a      	ldrb	r2, [r3, #0]
 80177c8:	187b      	adds	r3, r7, r1
 80177ca:	3201      	adds	r2, #1
 80177cc:	701a      	strb	r2, [r3, #0]
      break;
 80177ce:	e00c      	b.n	80177ea <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80177d0:	683a      	ldr	r2, [r7, #0]
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	0011      	movs	r1, r2
 80177d6:	0018      	movs	r0, r3
 80177d8:	f000 fa1d 	bl	8017c16 <USBD_CtlError>
      err++;
 80177dc:	210b      	movs	r1, #11
 80177de:	187b      	adds	r3, r7, r1
 80177e0:	781a      	ldrb	r2, [r3, #0]
 80177e2:	187b      	adds	r3, r7, r1
 80177e4:	3201      	adds	r2, #1
 80177e6:	701a      	strb	r2, [r3, #0]
      break;
 80177e8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80177ea:	230b      	movs	r3, #11
 80177ec:	18fb      	adds	r3, r7, r3
 80177ee:	781b      	ldrb	r3, [r3, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d127      	bne.n	8017844 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80177f4:	2108      	movs	r1, #8
 80177f6:	187b      	adds	r3, r7, r1
 80177f8:	881b      	ldrh	r3, [r3, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d019      	beq.n	8017832 <USBD_GetDescriptor+0x342>
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	88db      	ldrh	r3, [r3, #6]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d015      	beq.n	8017832 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8017806:	683b      	ldr	r3, [r7, #0]
 8017808:	88da      	ldrh	r2, [r3, #6]
 801780a:	187b      	adds	r3, r7, r1
 801780c:	881b      	ldrh	r3, [r3, #0]
 801780e:	1c18      	adds	r0, r3, #0
 8017810:	1c11      	adds	r1, r2, #0
 8017812:	b28a      	uxth	r2, r1
 8017814:	b283      	uxth	r3, r0
 8017816:	429a      	cmp	r2, r3
 8017818:	d900      	bls.n	801781c <USBD_GetDescriptor+0x32c>
 801781a:	1c01      	adds	r1, r0, #0
 801781c:	b28a      	uxth	r2, r1
 801781e:	2108      	movs	r1, #8
 8017820:	187b      	adds	r3, r7, r1
 8017822:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017824:	187b      	adds	r3, r7, r1
 8017826:	881a      	ldrh	r2, [r3, #0]
 8017828:	68f9      	ldr	r1, [r7, #12]
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	0018      	movs	r0, r3
 801782e:	f000 fa70 	bl	8017d12 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	88db      	ldrh	r3, [r3, #6]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d105      	bne.n	8017846 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	0018      	movs	r0, r3
 801783e:	f000 fad2 	bl	8017de6 <USBD_CtlSendStatus>
 8017842:	e000      	b.n	8017846 <USBD_GetDescriptor+0x356>
    return;
 8017844:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8017846:	46bd      	mov	sp, r7
 8017848:	b004      	add	sp, #16
 801784a:	bd80      	pop	{r7, pc}
 801784c:	0801f2c0 	.word	0x0801f2c0
 8017850:	0801f2e0 	.word	0x0801f2e0

08017854 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017854:	b590      	push	{r4, r7, lr}
 8017856:	b085      	sub	sp, #20
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
 801785c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	889b      	ldrh	r3, [r3, #4]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d13d      	bne.n	80178e2 <USBD_SetAddress+0x8e>
 8017866:	683b      	ldr	r3, [r7, #0]
 8017868:	88db      	ldrh	r3, [r3, #6]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d139      	bne.n	80178e2 <USBD_SetAddress+0x8e>
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	885b      	ldrh	r3, [r3, #2]
 8017872:	2b7f      	cmp	r3, #127	@ 0x7f
 8017874:	d835      	bhi.n	80178e2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	885b      	ldrh	r3, [r3, #2]
 801787a:	b2da      	uxtb	r2, r3
 801787c:	230f      	movs	r3, #15
 801787e:	18fb      	adds	r3, r7, r3
 8017880:	217f      	movs	r1, #127	@ 0x7f
 8017882:	400a      	ands	r2, r1
 8017884:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017886:	687a      	ldr	r2, [r7, #4]
 8017888:	23a7      	movs	r3, #167	@ 0xa7
 801788a:	009b      	lsls	r3, r3, #2
 801788c:	5cd3      	ldrb	r3, [r2, r3]
 801788e:	2b03      	cmp	r3, #3
 8017890:	d106      	bne.n	80178a0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8017892:	683a      	ldr	r2, [r7, #0]
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	0011      	movs	r1, r2
 8017898:	0018      	movs	r0, r3
 801789a:	f000 f9bc 	bl	8017c16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801789e:	e027      	b.n	80178f0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	240f      	movs	r4, #15
 80178a4:	193a      	adds	r2, r7, r4
 80178a6:	4914      	ldr	r1, [pc, #80]	@ (80178f8 <USBD_SetAddress+0xa4>)
 80178a8:	7812      	ldrb	r2, [r2, #0]
 80178aa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80178ac:	193b      	adds	r3, r7, r4
 80178ae:	781a      	ldrb	r2, [r3, #0]
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	0011      	movs	r1, r2
 80178b4:	0018      	movs	r0, r3
 80178b6:	f000 ff5d 	bl	8018774 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	0018      	movs	r0, r3
 80178be:	f000 fa92 	bl	8017de6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80178c2:	193b      	adds	r3, r7, r4
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d005      	beq.n	80178d6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80178ca:	687a      	ldr	r2, [r7, #4]
 80178cc:	23a7      	movs	r3, #167	@ 0xa7
 80178ce:	009b      	lsls	r3, r3, #2
 80178d0:	2102      	movs	r1, #2
 80178d2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178d4:	e00c      	b.n	80178f0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80178d6:	687a      	ldr	r2, [r7, #4]
 80178d8:	23a7      	movs	r3, #167	@ 0xa7
 80178da:	009b      	lsls	r3, r3, #2
 80178dc:	2101      	movs	r1, #1
 80178de:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178e0:	e006      	b.n	80178f0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80178e2:	683a      	ldr	r2, [r7, #0]
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	0011      	movs	r1, r2
 80178e8:	0018      	movs	r0, r3
 80178ea:	f000 f994 	bl	8017c16 <USBD_CtlError>
  }
}
 80178ee:	46c0      	nop			@ (mov r8, r8)
 80178f0:	46c0      	nop			@ (mov r8, r8)
 80178f2:	46bd      	mov	sp, r7
 80178f4:	b005      	add	sp, #20
 80178f6:	bd90      	pop	{r4, r7, pc}
 80178f8:	0000029e 	.word	0x0000029e

080178fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017906:	683b      	ldr	r3, [r7, #0]
 8017908:	885b      	ldrh	r3, [r3, #2]
 801790a:	b2da      	uxtb	r2, r3
 801790c:	4b4c      	ldr	r3, [pc, #304]	@ (8017a40 <USBD_SetConfig+0x144>)
 801790e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017910:	4b4b      	ldr	r3, [pc, #300]	@ (8017a40 <USBD_SetConfig+0x144>)
 8017912:	781b      	ldrb	r3, [r3, #0]
 8017914:	2b01      	cmp	r3, #1
 8017916:	d906      	bls.n	8017926 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8017918:	683a      	ldr	r2, [r7, #0]
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	0011      	movs	r1, r2
 801791e:	0018      	movs	r0, r3
 8017920:	f000 f979 	bl	8017c16 <USBD_CtlError>
 8017924:	e088      	b.n	8017a38 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8017926:	687a      	ldr	r2, [r7, #4]
 8017928:	23a7      	movs	r3, #167	@ 0xa7
 801792a:	009b      	lsls	r3, r3, #2
 801792c:	5cd3      	ldrb	r3, [r2, r3]
 801792e:	2b02      	cmp	r3, #2
 8017930:	d002      	beq.n	8017938 <USBD_SetConfig+0x3c>
 8017932:	2b03      	cmp	r3, #3
 8017934:	d029      	beq.n	801798a <USBD_SetConfig+0x8e>
 8017936:	e071      	b.n	8017a1c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8017938:	4b41      	ldr	r3, [pc, #260]	@ (8017a40 <USBD_SetConfig+0x144>)
 801793a:	781b      	ldrb	r3, [r3, #0]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d01f      	beq.n	8017980 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8017940:	4b3f      	ldr	r3, [pc, #252]	@ (8017a40 <USBD_SetConfig+0x144>)
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	001a      	movs	r2, r3
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	23a7      	movs	r3, #167	@ 0xa7
 801794e:	009b      	lsls	r3, r3, #2
 8017950:	2103      	movs	r1, #3
 8017952:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017954:	4b3a      	ldr	r3, [pc, #232]	@ (8017a40 <USBD_SetConfig+0x144>)
 8017956:	781a      	ldrb	r2, [r3, #0]
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	0011      	movs	r1, r2
 801795c:	0018      	movs	r0, r3
 801795e:	f7ff f8c6 	bl	8016aee <USBD_SetClassConfig>
 8017962:	0003      	movs	r3, r0
 8017964:	2b02      	cmp	r3, #2
 8017966:	d106      	bne.n	8017976 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8017968:	683a      	ldr	r2, [r7, #0]
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	0011      	movs	r1, r2
 801796e:	0018      	movs	r0, r3
 8017970:	f000 f951 	bl	8017c16 <USBD_CtlError>
            return;
 8017974:	e060      	b.n	8017a38 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	0018      	movs	r0, r3
 801797a:	f000 fa34 	bl	8017de6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801797e:	e05b      	b.n	8017a38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	0018      	movs	r0, r3
 8017984:	f000 fa2f 	bl	8017de6 <USBD_CtlSendStatus>
        break;
 8017988:	e056      	b.n	8017a38 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801798a:	4b2d      	ldr	r3, [pc, #180]	@ (8017a40 <USBD_SetConfig+0x144>)
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d115      	bne.n	80179be <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017992:	687a      	ldr	r2, [r7, #4]
 8017994:	23a7      	movs	r3, #167	@ 0xa7
 8017996:	009b      	lsls	r3, r3, #2
 8017998:	2102      	movs	r1, #2
 801799a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801799c:	4b28      	ldr	r3, [pc, #160]	@ (8017a40 <USBD_SetConfig+0x144>)
 801799e:	781b      	ldrb	r3, [r3, #0]
 80179a0:	001a      	movs	r2, r3
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80179a6:	4b26      	ldr	r3, [pc, #152]	@ (8017a40 <USBD_SetConfig+0x144>)
 80179a8:	781a      	ldrb	r2, [r3, #0]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	0011      	movs	r1, r2
 80179ae:	0018      	movs	r0, r3
 80179b0:	f7ff f8c4 	bl	8016b3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	0018      	movs	r0, r3
 80179b8:	f000 fa15 	bl	8017de6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80179bc:	e03c      	b.n	8017a38 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80179be:	4b20      	ldr	r3, [pc, #128]	@ (8017a40 <USBD_SetConfig+0x144>)
 80179c0:	781b      	ldrb	r3, [r3, #0]
 80179c2:	001a      	movs	r2, r3
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d022      	beq.n	8017a12 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	685b      	ldr	r3, [r3, #4]
 80179d0:	b2da      	uxtb	r2, r3
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	0011      	movs	r1, r2
 80179d6:	0018      	movs	r0, r3
 80179d8:	f7ff f8b0 	bl	8016b3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80179dc:	4b18      	ldr	r3, [pc, #96]	@ (8017a40 <USBD_SetConfig+0x144>)
 80179de:	781b      	ldrb	r3, [r3, #0]
 80179e0:	001a      	movs	r2, r3
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80179e6:	4b16      	ldr	r3, [pc, #88]	@ (8017a40 <USBD_SetConfig+0x144>)
 80179e8:	781a      	ldrb	r2, [r3, #0]
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	0011      	movs	r1, r2
 80179ee:	0018      	movs	r0, r3
 80179f0:	f7ff f87d 	bl	8016aee <USBD_SetClassConfig>
 80179f4:	0003      	movs	r3, r0
 80179f6:	2b02      	cmp	r3, #2
 80179f8:	d106      	bne.n	8017a08 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80179fa:	683a      	ldr	r2, [r7, #0]
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	0011      	movs	r1, r2
 8017a00:	0018      	movs	r0, r3
 8017a02:	f000 f908 	bl	8017c16 <USBD_CtlError>
            return;
 8017a06:	e017      	b.n	8017a38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	0018      	movs	r0, r3
 8017a0c:	f000 f9eb 	bl	8017de6 <USBD_CtlSendStatus>
        break;
 8017a10:	e012      	b.n	8017a38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	0018      	movs	r0, r3
 8017a16:	f000 f9e6 	bl	8017de6 <USBD_CtlSendStatus>
        break;
 8017a1a:	e00d      	b.n	8017a38 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8017a1c:	683a      	ldr	r2, [r7, #0]
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	0011      	movs	r1, r2
 8017a22:	0018      	movs	r0, r3
 8017a24:	f000 f8f7 	bl	8017c16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8017a28:	4b05      	ldr	r3, [pc, #20]	@ (8017a40 <USBD_SetConfig+0x144>)
 8017a2a:	781a      	ldrb	r2, [r3, #0]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	0011      	movs	r1, r2
 8017a30:	0018      	movs	r0, r3
 8017a32:	f7ff f883 	bl	8016b3c <USBD_ClrClassConfig>
        break;
 8017a36:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	b002      	add	sp, #8
 8017a3c:	bd80      	pop	{r7, pc}
 8017a3e:	46c0      	nop			@ (mov r8, r8)
 8017a40:	20002464 	.word	0x20002464

08017a44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b082      	sub	sp, #8
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	88db      	ldrh	r3, [r3, #6]
 8017a52:	2b01      	cmp	r3, #1
 8017a54:	d006      	beq.n	8017a64 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8017a56:	683a      	ldr	r2, [r7, #0]
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	0011      	movs	r1, r2
 8017a5c:	0018      	movs	r0, r3
 8017a5e:	f000 f8da 	bl	8017c16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017a62:	e026      	b.n	8017ab2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	23a7      	movs	r3, #167	@ 0xa7
 8017a68:	009b      	lsls	r3, r3, #2
 8017a6a:	5cd3      	ldrb	r3, [r2, r3]
 8017a6c:	2b02      	cmp	r3, #2
 8017a6e:	dc02      	bgt.n	8017a76 <USBD_GetConfig+0x32>
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	dc03      	bgt.n	8017a7c <USBD_GetConfig+0x38>
 8017a74:	e016      	b.n	8017aa4 <USBD_GetConfig+0x60>
 8017a76:	2b03      	cmp	r3, #3
 8017a78:	d00c      	beq.n	8017a94 <USBD_GetConfig+0x50>
 8017a7a:	e013      	b.n	8017aa4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2200      	movs	r2, #0
 8017a80:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	3308      	adds	r3, #8
 8017a86:	0019      	movs	r1, r3
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	0018      	movs	r0, r3
 8017a8e:	f000 f940 	bl	8017d12 <USBD_CtlSendData>
        break;
 8017a92:	e00e      	b.n	8017ab2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	1d19      	adds	r1, r3, #4
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2201      	movs	r2, #1
 8017a9c:	0018      	movs	r0, r3
 8017a9e:	f000 f938 	bl	8017d12 <USBD_CtlSendData>
        break;
 8017aa2:	e006      	b.n	8017ab2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8017aa4:	683a      	ldr	r2, [r7, #0]
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	0011      	movs	r1, r2
 8017aaa:	0018      	movs	r0, r3
 8017aac:	f000 f8b3 	bl	8017c16 <USBD_CtlError>
        break;
 8017ab0:	46c0      	nop			@ (mov r8, r8)
}
 8017ab2:	46c0      	nop			@ (mov r8, r8)
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	b002      	add	sp, #8
 8017ab8:	bd80      	pop	{r7, pc}

08017aba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017aba:	b580      	push	{r7, lr}
 8017abc:	b082      	sub	sp, #8
 8017abe:	af00      	add	r7, sp, #0
 8017ac0:	6078      	str	r0, [r7, #4]
 8017ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017ac4:	687a      	ldr	r2, [r7, #4]
 8017ac6:	23a7      	movs	r3, #167	@ 0xa7
 8017ac8:	009b      	lsls	r3, r3, #2
 8017aca:	5cd3      	ldrb	r3, [r2, r3]
 8017acc:	3b01      	subs	r3, #1
 8017ace:	2b02      	cmp	r3, #2
 8017ad0:	d822      	bhi.n	8017b18 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	88db      	ldrh	r3, [r3, #6]
 8017ad6:	2b02      	cmp	r3, #2
 8017ad8:	d006      	beq.n	8017ae8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8017ada:	683a      	ldr	r2, [r7, #0]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	0011      	movs	r1, r2
 8017ae0:	0018      	movs	r0, r3
 8017ae2:	f000 f898 	bl	8017c16 <USBD_CtlError>
        break;
 8017ae6:	e01e      	b.n	8017b26 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	2201      	movs	r2, #1
 8017aec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	23a9      	movs	r3, #169	@ 0xa9
 8017af2:	009b      	lsls	r3, r3, #2
 8017af4:	58d3      	ldr	r3, [r2, r3]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d005      	beq.n	8017b06 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	68db      	ldr	r3, [r3, #12]
 8017afe:	2202      	movs	r2, #2
 8017b00:	431a      	orrs	r2, r3
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	330c      	adds	r3, #12
 8017b0a:	0019      	movs	r1, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	2202      	movs	r2, #2
 8017b10:	0018      	movs	r0, r3
 8017b12:	f000 f8fe 	bl	8017d12 <USBD_CtlSendData>
      break;
 8017b16:	e006      	b.n	8017b26 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8017b18:	683a      	ldr	r2, [r7, #0]
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	0011      	movs	r1, r2
 8017b1e:	0018      	movs	r0, r3
 8017b20:	f000 f879 	bl	8017c16 <USBD_CtlError>
      break;
 8017b24:	46c0      	nop			@ (mov r8, r8)
  }
}
 8017b26:	46c0      	nop			@ (mov r8, r8)
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	b002      	add	sp, #8
 8017b2c:	bd80      	pop	{r7, pc}

08017b2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017b2e:	b580      	push	{r7, lr}
 8017b30:	b082      	sub	sp, #8
 8017b32:	af00      	add	r7, sp, #0
 8017b34:	6078      	str	r0, [r7, #4]
 8017b36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017b38:	683b      	ldr	r3, [r7, #0]
 8017b3a:	885b      	ldrh	r3, [r3, #2]
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d108      	bne.n	8017b52 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8017b40:	687a      	ldr	r2, [r7, #4]
 8017b42:	23a9      	movs	r3, #169	@ 0xa9
 8017b44:	009b      	lsls	r3, r3, #2
 8017b46:	2101      	movs	r1, #1
 8017b48:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	0018      	movs	r0, r3
 8017b4e:	f000 f94a 	bl	8017de6 <USBD_CtlSendStatus>
  }
}
 8017b52:	46c0      	nop			@ (mov r8, r8)
 8017b54:	46bd      	mov	sp, r7
 8017b56:	b002      	add	sp, #8
 8017b58:	bd80      	pop	{r7, pc}

08017b5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017b5a:	b580      	push	{r7, lr}
 8017b5c:	b082      	sub	sp, #8
 8017b5e:	af00      	add	r7, sp, #0
 8017b60:	6078      	str	r0, [r7, #4]
 8017b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017b64:	687a      	ldr	r2, [r7, #4]
 8017b66:	23a7      	movs	r3, #167	@ 0xa7
 8017b68:	009b      	lsls	r3, r3, #2
 8017b6a:	5cd3      	ldrb	r3, [r2, r3]
 8017b6c:	3b01      	subs	r3, #1
 8017b6e:	2b02      	cmp	r3, #2
 8017b70:	d80d      	bhi.n	8017b8e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	885b      	ldrh	r3, [r3, #2]
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	d110      	bne.n	8017b9c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8017b7a:	687a      	ldr	r2, [r7, #4]
 8017b7c:	23a9      	movs	r3, #169	@ 0xa9
 8017b7e:	009b      	lsls	r3, r3, #2
 8017b80:	2100      	movs	r1, #0
 8017b82:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	0018      	movs	r0, r3
 8017b88:	f000 f92d 	bl	8017de6 <USBD_CtlSendStatus>
      }
      break;
 8017b8c:	e006      	b.n	8017b9c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8017b8e:	683a      	ldr	r2, [r7, #0]
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	0011      	movs	r1, r2
 8017b94:	0018      	movs	r0, r3
 8017b96:	f000 f83e 	bl	8017c16 <USBD_CtlError>
      break;
 8017b9a:	e000      	b.n	8017b9e <USBD_ClrFeature+0x44>
      break;
 8017b9c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8017b9e:	46c0      	nop			@ (mov r8, r8)
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	b002      	add	sp, #8
 8017ba4:	bd80      	pop	{r7, pc}

08017ba6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017ba6:	b580      	push	{r7, lr}
 8017ba8:	b082      	sub	sp, #8
 8017baa:	af00      	add	r7, sp, #0
 8017bac:	6078      	str	r0, [r7, #4]
 8017bae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	781a      	ldrb	r2, [r3, #0]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	785a      	ldrb	r2, [r3, #1]
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	3302      	adds	r3, #2
 8017bc4:	781b      	ldrb	r3, [r3, #0]
 8017bc6:	001a      	movs	r2, r3
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	3303      	adds	r3, #3
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	021b      	lsls	r3, r3, #8
 8017bd0:	b29b      	uxth	r3, r3
 8017bd2:	18d3      	adds	r3, r2, r3
 8017bd4:	b29a      	uxth	r2, r3
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	3304      	adds	r3, #4
 8017bde:	781b      	ldrb	r3, [r3, #0]
 8017be0:	001a      	movs	r2, r3
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	3305      	adds	r3, #5
 8017be6:	781b      	ldrb	r3, [r3, #0]
 8017be8:	021b      	lsls	r3, r3, #8
 8017bea:	b29b      	uxth	r3, r3
 8017bec:	18d3      	adds	r3, r2, r3
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	3306      	adds	r3, #6
 8017bf8:	781b      	ldrb	r3, [r3, #0]
 8017bfa:	001a      	movs	r2, r3
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	3307      	adds	r3, #7
 8017c00:	781b      	ldrb	r3, [r3, #0]
 8017c02:	021b      	lsls	r3, r3, #8
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	18d3      	adds	r3, r2, r3
 8017c08:	b29a      	uxth	r2, r3
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	80da      	strh	r2, [r3, #6]

}
 8017c0e:	46c0      	nop			@ (mov r8, r8)
 8017c10:	46bd      	mov	sp, r7
 8017c12:	b002      	add	sp, #8
 8017c14:	bd80      	pop	{r7, pc}

08017c16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8017c16:	b580      	push	{r7, lr}
 8017c18:	b082      	sub	sp, #8
 8017c1a:	af00      	add	r7, sp, #0
 8017c1c:	6078      	str	r0, [r7, #4]
 8017c1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2180      	movs	r1, #128	@ 0x80
 8017c24:	0018      	movs	r0, r3
 8017c26:	f000 fd1e 	bl	8018666 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	0018      	movs	r0, r3
 8017c30:	f000 fd19 	bl	8018666 <USBD_LL_StallEP>
}
 8017c34:	46c0      	nop			@ (mov r8, r8)
 8017c36:	46bd      	mov	sp, r7
 8017c38:	b002      	add	sp, #8
 8017c3a:	bd80      	pop	{r7, pc}

08017c3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017c3c:	b590      	push	{r4, r7, lr}
 8017c3e:	b087      	sub	sp, #28
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	60f8      	str	r0, [r7, #12]
 8017c44:	60b9      	str	r1, [r7, #8]
 8017c46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017c48:	2417      	movs	r4, #23
 8017c4a:	193b      	adds	r3, r7, r4
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d03c      	beq.n	8017cd0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	0018      	movs	r0, r3
 8017c5a:	f000 f83d 	bl	8017cd8 <USBD_GetLen>
 8017c5e:	0003      	movs	r3, r0
 8017c60:	3301      	adds	r3, #1
 8017c62:	b29b      	uxth	r3, r3
 8017c64:	18db      	adds	r3, r3, r3
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8017c6c:	193b      	adds	r3, r7, r4
 8017c6e:	781b      	ldrb	r3, [r3, #0]
 8017c70:	193a      	adds	r2, r7, r4
 8017c72:	1c59      	adds	r1, r3, #1
 8017c74:	7011      	strb	r1, [r2, #0]
 8017c76:	001a      	movs	r2, r3
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	189b      	adds	r3, r3, r2
 8017c7c:	687a      	ldr	r2, [r7, #4]
 8017c7e:	7812      	ldrb	r2, [r2, #0]
 8017c80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8017c82:	193b      	adds	r3, r7, r4
 8017c84:	781b      	ldrb	r3, [r3, #0]
 8017c86:	193a      	adds	r2, r7, r4
 8017c88:	1c59      	adds	r1, r3, #1
 8017c8a:	7011      	strb	r1, [r2, #0]
 8017c8c:	001a      	movs	r2, r3
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	189b      	adds	r3, r3, r2
 8017c92:	2203      	movs	r2, #3
 8017c94:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8017c96:	e017      	b.n	8017cc8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	1c5a      	adds	r2, r3, #1
 8017c9c:	60fa      	str	r2, [r7, #12]
 8017c9e:	2417      	movs	r4, #23
 8017ca0:	193a      	adds	r2, r7, r4
 8017ca2:	7812      	ldrb	r2, [r2, #0]
 8017ca4:	1939      	adds	r1, r7, r4
 8017ca6:	1c50      	adds	r0, r2, #1
 8017ca8:	7008      	strb	r0, [r1, #0]
 8017caa:	0011      	movs	r1, r2
 8017cac:	68ba      	ldr	r2, [r7, #8]
 8017cae:	1852      	adds	r2, r2, r1
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8017cb4:	193b      	adds	r3, r7, r4
 8017cb6:	781b      	ldrb	r3, [r3, #0]
 8017cb8:	193a      	adds	r2, r7, r4
 8017cba:	1c59      	adds	r1, r3, #1
 8017cbc:	7011      	strb	r1, [r2, #0]
 8017cbe:	001a      	movs	r2, r3
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	189b      	adds	r3, r3, r2
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	781b      	ldrb	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d1e3      	bne.n	8017c98 <USBD_GetString+0x5c>
    }
  }
}
 8017cd0:	46c0      	nop			@ (mov r8, r8)
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	b007      	add	sp, #28
 8017cd6:	bd90      	pop	{r4, r7, pc}

08017cd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017ce0:	230f      	movs	r3, #15
 8017ce2:	18fb      	adds	r3, r7, r3
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8017ce8:	e008      	b.n	8017cfc <USBD_GetLen+0x24>
  {
    len++;
 8017cea:	210f      	movs	r1, #15
 8017cec:	187b      	adds	r3, r7, r1
 8017cee:	781a      	ldrb	r2, [r3, #0]
 8017cf0:	187b      	adds	r3, r7, r1
 8017cf2:	3201      	adds	r2, #1
 8017cf4:	701a      	strb	r2, [r3, #0]
    buf++;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1f2      	bne.n	8017cea <USBD_GetLen+0x12>
  }

  return len;
 8017d04:	230f      	movs	r3, #15
 8017d06:	18fb      	adds	r3, r7, r3
 8017d08:	781b      	ldrb	r3, [r3, #0]
}
 8017d0a:	0018      	movs	r0, r3
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	b004      	add	sp, #16
 8017d10:	bd80      	pop	{r7, pc}

08017d12 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8017d12:	b580      	push	{r7, lr}
 8017d14:	b084      	sub	sp, #16
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	60f8      	str	r0, [r7, #12]
 8017d1a:	60b9      	str	r1, [r7, #8]
 8017d1c:	1dbb      	adds	r3, r7, #6
 8017d1e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017d20:	68fa      	ldr	r2, [r7, #12]
 8017d22:	23a5      	movs	r3, #165	@ 0xa5
 8017d24:	009b      	lsls	r3, r3, #2
 8017d26:	2102      	movs	r1, #2
 8017d28:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8017d2a:	1dbb      	adds	r3, r7, #6
 8017d2c:	881a      	ldrh	r2, [r3, #0]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8017d32:	1dbb      	adds	r3, r7, #6
 8017d34:	881a      	ldrh	r2, [r3, #0]
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017d3a:	1dbb      	adds	r3, r7, #6
 8017d3c:	881b      	ldrh	r3, [r3, #0]
 8017d3e:	68ba      	ldr	r2, [r7, #8]
 8017d40:	68f8      	ldr	r0, [r7, #12]
 8017d42:	2100      	movs	r1, #0
 8017d44:	f000 fd41 	bl	80187ca <USBD_LL_Transmit>

  return USBD_OK;
 8017d48:	2300      	movs	r3, #0
}
 8017d4a:	0018      	movs	r0, r3
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	b004      	add	sp, #16
 8017d50:	bd80      	pop	{r7, pc}

08017d52 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8017d52:	b580      	push	{r7, lr}
 8017d54:	b084      	sub	sp, #16
 8017d56:	af00      	add	r7, sp, #0
 8017d58:	60f8      	str	r0, [r7, #12]
 8017d5a:	60b9      	str	r1, [r7, #8]
 8017d5c:	1dbb      	adds	r3, r7, #6
 8017d5e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017d60:	1dbb      	adds	r3, r7, #6
 8017d62:	881b      	ldrh	r3, [r3, #0]
 8017d64:	68ba      	ldr	r2, [r7, #8]
 8017d66:	68f8      	ldr	r0, [r7, #12]
 8017d68:	2100      	movs	r1, #0
 8017d6a:	f000 fd2e 	bl	80187ca <USBD_LL_Transmit>

  return USBD_OK;
 8017d6e:	2300      	movs	r3, #0
}
 8017d70:	0018      	movs	r0, r3
 8017d72:	46bd      	mov	sp, r7
 8017d74:	b004      	add	sp, #16
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b084      	sub	sp, #16
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	1dbb      	adds	r3, r7, #6
 8017d84:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017d86:	68fa      	ldr	r2, [r7, #12]
 8017d88:	23a5      	movs	r3, #165	@ 0xa5
 8017d8a:	009b      	lsls	r3, r3, #2
 8017d8c:	2103      	movs	r1, #3
 8017d8e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8017d90:	1dbb      	adds	r3, r7, #6
 8017d92:	8819      	ldrh	r1, [r3, #0]
 8017d94:	68fa      	ldr	r2, [r7, #12]
 8017d96:	23ae      	movs	r3, #174	@ 0xae
 8017d98:	005b      	lsls	r3, r3, #1
 8017d9a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8017d9c:	1dbb      	adds	r3, r7, #6
 8017d9e:	8819      	ldrh	r1, [r3, #0]
 8017da0:	68fa      	ldr	r2, [r7, #12]
 8017da2:	23b0      	movs	r3, #176	@ 0xb0
 8017da4:	005b      	lsls	r3, r3, #1
 8017da6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017da8:	1dbb      	adds	r3, r7, #6
 8017daa:	881b      	ldrh	r3, [r3, #0]
 8017dac:	68ba      	ldr	r2, [r7, #8]
 8017dae:	68f8      	ldr	r0, [r7, #12]
 8017db0:	2100      	movs	r1, #0
 8017db2:	f000 fd41 	bl	8018838 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017db6:	2300      	movs	r3, #0
}
 8017db8:	0018      	movs	r0, r3
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	b004      	add	sp, #16
 8017dbe:	bd80      	pop	{r7, pc}

08017dc0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	60f8      	str	r0, [r7, #12]
 8017dc8:	60b9      	str	r1, [r7, #8]
 8017dca:	1dbb      	adds	r3, r7, #6
 8017dcc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017dce:	1dbb      	adds	r3, r7, #6
 8017dd0:	881b      	ldrh	r3, [r3, #0]
 8017dd2:	68ba      	ldr	r2, [r7, #8]
 8017dd4:	68f8      	ldr	r0, [r7, #12]
 8017dd6:	2100      	movs	r1, #0
 8017dd8:	f000 fd2e 	bl	8018838 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ddc:	2300      	movs	r3, #0
}
 8017dde:	0018      	movs	r0, r3
 8017de0:	46bd      	mov	sp, r7
 8017de2:	b004      	add	sp, #16
 8017de4:	bd80      	pop	{r7, pc}

08017de6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017de6:	b580      	push	{r7, lr}
 8017de8:	b082      	sub	sp, #8
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017dee:	687a      	ldr	r2, [r7, #4]
 8017df0:	23a5      	movs	r3, #165	@ 0xa5
 8017df2:	009b      	lsls	r3, r3, #2
 8017df4:	2104      	movs	r1, #4
 8017df6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017df8:	6878      	ldr	r0, [r7, #4]
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	2100      	movs	r1, #0
 8017e00:	f000 fce3 	bl	80187ca <USBD_LL_Transmit>

  return USBD_OK;
 8017e04:	2300      	movs	r3, #0
}
 8017e06:	0018      	movs	r0, r3
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	b002      	add	sp, #8
 8017e0c:	bd80      	pop	{r7, pc}

08017e0e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017e0e:	b580      	push	{r7, lr}
 8017e10:	b082      	sub	sp, #8
 8017e12:	af00      	add	r7, sp, #0
 8017e14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017e16:	687a      	ldr	r2, [r7, #4]
 8017e18:	23a5      	movs	r3, #165	@ 0xa5
 8017e1a:	009b      	lsls	r3, r3, #2
 8017e1c:	2105      	movs	r1, #5
 8017e1e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	2300      	movs	r3, #0
 8017e24:	2200      	movs	r2, #0
 8017e26:	2100      	movs	r1, #0
 8017e28:	f000 fd06 	bl	8018838 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017e2c:	2300      	movs	r3, #0
}
 8017e2e:	0018      	movs	r0, r3
 8017e30:	46bd      	mov	sp, r7
 8017e32:	b002      	add	sp, #8
 8017e34:	bd80      	pop	{r7, pc}
	...

08017e38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017e3c:	4914      	ldr	r1, [pc, #80]	@ (8017e90 <MX_USB_DEVICE_Init+0x58>)
 8017e3e:	4b15      	ldr	r3, [pc, #84]	@ (8017e94 <MX_USB_DEVICE_Init+0x5c>)
 8017e40:	2200      	movs	r2, #0
 8017e42:	0018      	movs	r0, r3
 8017e44:	f7fe fdec 	bl	8016a20 <USBD_Init>
 8017e48:	1e03      	subs	r3, r0, #0
 8017e4a:	d001      	beq.n	8017e50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017e4c:	f7ee fe4e 	bl	8006aec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017e50:	4a11      	ldr	r2, [pc, #68]	@ (8017e98 <MX_USB_DEVICE_Init+0x60>)
 8017e52:	4b10      	ldr	r3, [pc, #64]	@ (8017e94 <MX_USB_DEVICE_Init+0x5c>)
 8017e54:	0011      	movs	r1, r2
 8017e56:	0018      	movs	r0, r3
 8017e58:	f7fe fe13 	bl	8016a82 <USBD_RegisterClass>
 8017e5c:	1e03      	subs	r3, r0, #0
 8017e5e:	d001      	beq.n	8017e64 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8017e60:	f7ee fe44 	bl	8006aec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017e64:	4a0d      	ldr	r2, [pc, #52]	@ (8017e9c <MX_USB_DEVICE_Init+0x64>)
 8017e66:	4b0b      	ldr	r3, [pc, #44]	@ (8017e94 <MX_USB_DEVICE_Init+0x5c>)
 8017e68:	0011      	movs	r1, r2
 8017e6a:	0018      	movs	r0, r3
 8017e6c:	f7fe fd28 	bl	80168c0 <USBD_CDC_RegisterInterface>
 8017e70:	1e03      	subs	r3, r0, #0
 8017e72:	d001      	beq.n	8017e78 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8017e74:	f7ee fe3a 	bl	8006aec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017e78:	4b06      	ldr	r3, [pc, #24]	@ (8017e94 <MX_USB_DEVICE_Init+0x5c>)
 8017e7a:	0018      	movs	r0, r3
 8017e7c:	f7fe fe21 	bl	8016ac2 <USBD_Start>
 8017e80:	1e03      	subs	r3, r0, #0
 8017e82:	d001      	beq.n	8017e88 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8017e84:	f7ee fe32 	bl	8006aec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017e88:	46c0      	nop			@ (mov r8, r8)
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
 8017e8e:	46c0      	nop			@ (mov r8, r8)
 8017e90:	200001ac 	.word	0x200001ac
 8017e94:	20002468 	.word	0x20002468
 8017e98:	20000098 	.word	0x20000098
 8017e9c:	2000019c 	.word	0x2000019c

08017ea0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017ea4:	4907      	ldr	r1, [pc, #28]	@ (8017ec4 <CDC_Init_FS+0x24>)
 8017ea6:	4b08      	ldr	r3, [pc, #32]	@ (8017ec8 <CDC_Init_FS+0x28>)
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	0018      	movs	r0, r3
 8017eac:	f7fe fd23 	bl	80168f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017eb0:	4a06      	ldr	r2, [pc, #24]	@ (8017ecc <CDC_Init_FS+0x2c>)
 8017eb2:	4b05      	ldr	r3, [pc, #20]	@ (8017ec8 <CDC_Init_FS+0x28>)
 8017eb4:	0011      	movs	r1, r2
 8017eb6:	0018      	movs	r0, r3
 8017eb8:	f7fe fd39 	bl	801692e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017ebc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017ebe:	0018      	movs	r0, r3
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}
 8017ec4:	20002bec 	.word	0x20002bec
 8017ec8:	20002468 	.word	0x20002468
 8017ecc:	200027ec 	.word	0x200027ec

08017ed0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017ed4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017ed6:	0018      	movs	r0, r3
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	bd80      	pop	{r7, pc}

08017edc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6039      	str	r1, [r7, #0]
 8017ee4:	0011      	movs	r1, r2
 8017ee6:	1dfb      	adds	r3, r7, #7
 8017ee8:	1c02      	adds	r2, r0, #0
 8017eea:	701a      	strb	r2, [r3, #0]
 8017eec:	1d3b      	adds	r3, r7, #4
 8017eee:	1c0a      	adds	r2, r1, #0
 8017ef0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017ef2:	1dfb      	adds	r3, r7, #7
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	2b23      	cmp	r3, #35	@ 0x23
 8017ef8:	d804      	bhi.n	8017f04 <CDC_Control_FS+0x28>
 8017efa:	009a      	lsls	r2, r3, #2
 8017efc:	4b04      	ldr	r3, [pc, #16]	@ (8017f10 <CDC_Control_FS+0x34>)
 8017efe:	18d3      	adds	r3, r2, r3
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017f04:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8017f06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017f08:	0018      	movs	r0, r3
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	b002      	add	sp, #8
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	0801f2f8 	.word	0x0801f2f8

08017f14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b082      	sub	sp, #8
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
 8017f1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8017f1e:	4b12      	ldr	r3, [pc, #72]	@ (8017f68 <CDC_Receive_FS+0x54>)
 8017f20:	781b      	ldrb	r3, [r3, #0]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d013      	beq.n	8017f4e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	b29a      	uxth	r2, r3
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	425b      	negs	r3, r3
 8017f30:	6879      	ldr	r1, [r7, #4]
 8017f32:	480e      	ldr	r0, [pc, #56]	@ (8017f6c <CDC_Receive_FS+0x58>)
 8017f34:	f7fa fd32 	bl	801299c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017f38:	687a      	ldr	r2, [r7, #4]
 8017f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8017f70 <CDC_Receive_FS+0x5c>)
 8017f3c:	0011      	movs	r1, r2
 8017f3e:	0018      	movs	r0, r3
 8017f40:	f7fe fcf5 	bl	801692e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017f44:	4b0a      	ldr	r3, [pc, #40]	@ (8017f70 <CDC_Receive_FS+0x5c>)
 8017f46:	0018      	movs	r0, r3
 8017f48:	f7fe fd3c 	bl	80169c4 <USBD_CDC_ReceivePacket>
 8017f4c:	e006      	b.n	8017f5c <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8017f4e:	683b      	ldr	r3, [r7, #0]
 8017f50:	681a      	ldr	r2, [r3, #0]
 8017f52:	4b08      	ldr	r3, [pc, #32]	@ (8017f74 <CDC_Receive_FS+0x60>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	18d2      	adds	r2, r2, r3
 8017f58:	4b06      	ldr	r3, [pc, #24]	@ (8017f74 <CDC_Receive_FS+0x60>)
 8017f5a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8017f5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017f5e:	0018      	movs	r0, r3
 8017f60:	46bd      	mov	sp, r7
 8017f62:	b002      	add	sp, #8
 8017f64:	bd80      	pop	{r7, pc}
 8017f66:	46c0      	nop			@ (mov r8, r8)
 8017f68:	2000272c 	.word	0x2000272c
 8017f6c:	20002730 	.word	0x20002730
 8017f70:	20002468 	.word	0x20002468
 8017f74:	200027e8 	.word	0x200027e8

08017f78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017f78:	b5b0      	push	{r4, r5, r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	000a      	movs	r2, r1
 8017f82:	1cbb      	adds	r3, r7, #2
 8017f84:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8017f86:	230f      	movs	r3, #15
 8017f88:	18fb      	adds	r3, r7, r3
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017f8e:	4a11      	ldr	r2, [pc, #68]	@ (8017fd4 <CDC_Transmit_FS+0x5c>)
 8017f90:	23ae      	movs	r3, #174	@ 0xae
 8017f92:	009b      	lsls	r3, r3, #2
 8017f94:	58d3      	ldr	r3, [r2, r3]
 8017f96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017f98:	68ba      	ldr	r2, [r7, #8]
 8017f9a:	2385      	movs	r3, #133	@ 0x85
 8017f9c:	009b      	lsls	r3, r3, #2
 8017f9e:	58d3      	ldr	r3, [r2, r3]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d001      	beq.n	8017fa8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	e010      	b.n	8017fca <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017fa8:	1cbb      	adds	r3, r7, #2
 8017faa:	881a      	ldrh	r2, [r3, #0]
 8017fac:	6879      	ldr	r1, [r7, #4]
 8017fae:	4b09      	ldr	r3, [pc, #36]	@ (8017fd4 <CDC_Transmit_FS+0x5c>)
 8017fb0:	0018      	movs	r0, r3
 8017fb2:	f7fe fca0 	bl	80168f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017fb6:	250f      	movs	r5, #15
 8017fb8:	197c      	adds	r4, r7, r5
 8017fba:	4b06      	ldr	r3, [pc, #24]	@ (8017fd4 <CDC_Transmit_FS+0x5c>)
 8017fbc:	0018      	movs	r0, r3
 8017fbe:	f7fe fcca 	bl	8016956 <USBD_CDC_TransmitPacket>
 8017fc2:	0003      	movs	r3, r0
 8017fc4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8017fc6:	197b      	adds	r3, r7, r5
 8017fc8:	781b      	ldrb	r3, [r3, #0]
}
 8017fca:	0018      	movs	r0, r3
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	b004      	add	sp, #16
 8017fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8017fd2:	46c0      	nop			@ (mov r8, r8)
 8017fd4:	20002468 	.word	0x20002468

08017fd8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	af00      	add	r7, sp, #0
  ESPProg = true;
 8017fdc:	4b02      	ldr	r3, [pc, #8]	@ (8017fe8 <EnableESPProg+0x10>)
 8017fde:	2201      	movs	r2, #1
 8017fe0:	701a      	strb	r2, [r3, #0]
}
 8017fe2:	46c0      	nop			@ (mov r8, r8)
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}
 8017fe8:	2000272c 	.word	0x2000272c

08017fec <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8017ff0:	4b01      	ldr	r3, [pc, #4]	@ (8017ff8 <GetUsbRxPointer+0xc>)
}
 8017ff2:	0018      	movs	r0, r3
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	bd80      	pop	{r7, pc}
 8017ff8:	200027ec 	.word	0x200027ec

08017ffc <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8018000:	4b07      	ldr	r3, [pc, #28]	@ (8018020 <ResetUsbRxDataSize+0x24>)
 8018002:	2200      	movs	r2, #0
 8018004:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8018006:	4a07      	ldr	r2, [pc, #28]	@ (8018024 <ResetUsbRxDataSize+0x28>)
 8018008:	4b07      	ldr	r3, [pc, #28]	@ (8018028 <ResetUsbRxDataSize+0x2c>)
 801800a:	0011      	movs	r1, r2
 801800c:	0018      	movs	r0, r3
 801800e:	f7fe fc8e 	bl	801692e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018012:	4b05      	ldr	r3, [pc, #20]	@ (8018028 <ResetUsbRxDataSize+0x2c>)
 8018014:	0018      	movs	r0, r3
 8018016:	f7fe fcd5 	bl	80169c4 <USBD_CDC_ReceivePacket>
}
 801801a:	46c0      	nop			@ (mov r8, r8)
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}
 8018020:	200027e8 	.word	0x200027e8
 8018024:	200027ec 	.word	0x200027ec
 8018028:	20002468 	.word	0x20002468

0801802c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801802c:	b580      	push	{r7, lr}
 801802e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8018030:	4b02      	ldr	r3, [pc, #8]	@ (801803c <GetUsbRxDataSize+0x10>)
 8018032:	681b      	ldr	r3, [r3, #0]
}
 8018034:	0018      	movs	r0, r3
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	46c0      	nop			@ (mov r8, r8)
 801803c:	200027e8 	.word	0x200027e8

08018040 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8018048:	687a      	ldr	r2, [r7, #4]
 801804a:	4b07      	ldr	r3, [pc, #28]	@ (8018068 <GetUsbRxNextChunk+0x28>)
 801804c:	18d2      	adds	r2, r2, r3
 801804e:	4b07      	ldr	r3, [pc, #28]	@ (801806c <GetUsbRxNextChunk+0x2c>)
 8018050:	0011      	movs	r1, r2
 8018052:	0018      	movs	r0, r3
 8018054:	f7fe fc6b 	bl	801692e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018058:	4b04      	ldr	r3, [pc, #16]	@ (801806c <GetUsbRxNextChunk+0x2c>)
 801805a:	0018      	movs	r0, r3
 801805c:	f7fe fcb2 	bl	80169c4 <USBD_CDC_ReceivePacket>
}
 8018060:	46c0      	nop			@ (mov r8, r8)
 8018062:	46bd      	mov	sp, r7
 8018064:	b002      	add	sp, #8
 8018066:	bd80      	pop	{r7, pc}
 8018068:	200027ec 	.word	0x200027ec
 801806c:	20002468 	.word	0x20002468

08018070 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	0002      	movs	r2, r0
 8018078:	6039      	str	r1, [r7, #0]
 801807a:	1dfb      	adds	r3, r7, #7
 801807c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	2212      	movs	r2, #18
 8018082:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018084:	4b02      	ldr	r3, [pc, #8]	@ (8018090 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018086:	0018      	movs	r0, r3
 8018088:	46bd      	mov	sp, r7
 801808a:	b002      	add	sp, #8
 801808c:	bd80      	pop	{r7, pc}
 801808e:	46c0      	nop			@ (mov r8, r8)
 8018090:	200001c8 	.word	0x200001c8

08018094 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b082      	sub	sp, #8
 8018098:	af00      	add	r7, sp, #0
 801809a:	0002      	movs	r2, r0
 801809c:	6039      	str	r1, [r7, #0]
 801809e:	1dfb      	adds	r3, r7, #7
 80180a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	2204      	movs	r2, #4
 80180a6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80180a8:	4b02      	ldr	r3, [pc, #8]	@ (80180b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80180aa:	0018      	movs	r0, r3
 80180ac:	46bd      	mov	sp, r7
 80180ae:	b002      	add	sp, #8
 80180b0:	bd80      	pop	{r7, pc}
 80180b2:	46c0      	nop			@ (mov r8, r8)
 80180b4:	200001dc 	.word	0x200001dc

080180b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b082      	sub	sp, #8
 80180bc:	af00      	add	r7, sp, #0
 80180be:	0002      	movs	r2, r0
 80180c0:	6039      	str	r1, [r7, #0]
 80180c2:	1dfb      	adds	r3, r7, #7
 80180c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80180c6:	1dfb      	adds	r3, r7, #7
 80180c8:	781b      	ldrb	r3, [r3, #0]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d106      	bne.n	80180dc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80180ce:	683a      	ldr	r2, [r7, #0]
 80180d0:	4908      	ldr	r1, [pc, #32]	@ (80180f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80180d2:	4b09      	ldr	r3, [pc, #36]	@ (80180f8 <USBD_FS_ProductStrDescriptor+0x40>)
 80180d4:	0018      	movs	r0, r3
 80180d6:	f7ff fdb1 	bl	8017c3c <USBD_GetString>
 80180da:	e005      	b.n	80180e8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80180dc:	683a      	ldr	r2, [r7, #0]
 80180de:	4905      	ldr	r1, [pc, #20]	@ (80180f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80180e0:	4b05      	ldr	r3, [pc, #20]	@ (80180f8 <USBD_FS_ProductStrDescriptor+0x40>)
 80180e2:	0018      	movs	r0, r3
 80180e4:	f7ff fdaa 	bl	8017c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80180e8:	4b02      	ldr	r3, [pc, #8]	@ (80180f4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80180ea:	0018      	movs	r0, r3
 80180ec:	46bd      	mov	sp, r7
 80180ee:	b002      	add	sp, #8
 80180f0:	bd80      	pop	{r7, pc}
 80180f2:	46c0      	nop			@ (mov r8, r8)
 80180f4:	20002fec 	.word	0x20002fec
 80180f8:	0801ee10 	.word	0x0801ee10

080180fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b082      	sub	sp, #8
 8018100:	af00      	add	r7, sp, #0
 8018102:	0002      	movs	r2, r0
 8018104:	6039      	str	r1, [r7, #0]
 8018106:	1dfb      	adds	r3, r7, #7
 8018108:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801810a:	683a      	ldr	r2, [r7, #0]
 801810c:	4904      	ldr	r1, [pc, #16]	@ (8018120 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801810e:	4b05      	ldr	r3, [pc, #20]	@ (8018124 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8018110:	0018      	movs	r0, r3
 8018112:	f7ff fd93 	bl	8017c3c <USBD_GetString>
  return USBD_StrDesc;
 8018116:	4b02      	ldr	r3, [pc, #8]	@ (8018120 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8018118:	0018      	movs	r0, r3
 801811a:	46bd      	mov	sp, r7
 801811c:	b002      	add	sp, #8
 801811e:	bd80      	pop	{r7, pc}
 8018120:	20002fec 	.word	0x20002fec
 8018124:	0801ee28 	.word	0x0801ee28

08018128 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	0002      	movs	r2, r0
 8018130:	6039      	str	r1, [r7, #0]
 8018132:	1dfb      	adds	r3, r7, #7
 8018134:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	221a      	movs	r2, #26
 801813a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801813c:	f000 f84c 	bl	80181d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018140:	4b02      	ldr	r3, [pc, #8]	@ (801814c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8018142:	0018      	movs	r0, r3
 8018144:	46bd      	mov	sp, r7
 8018146:	b002      	add	sp, #8
 8018148:	bd80      	pop	{r7, pc}
 801814a:	46c0      	nop			@ (mov r8, r8)
 801814c:	200001e0 	.word	0x200001e0

08018150 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b082      	sub	sp, #8
 8018154:	af00      	add	r7, sp, #0
 8018156:	0002      	movs	r2, r0
 8018158:	6039      	str	r1, [r7, #0]
 801815a:	1dfb      	adds	r3, r7, #7
 801815c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801815e:	1dfb      	adds	r3, r7, #7
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d106      	bne.n	8018174 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018166:	683a      	ldr	r2, [r7, #0]
 8018168:	4908      	ldr	r1, [pc, #32]	@ (801818c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801816a:	4b09      	ldr	r3, [pc, #36]	@ (8018190 <USBD_FS_ConfigStrDescriptor+0x40>)
 801816c:	0018      	movs	r0, r3
 801816e:	f7ff fd65 	bl	8017c3c <USBD_GetString>
 8018172:	e005      	b.n	8018180 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018174:	683a      	ldr	r2, [r7, #0]
 8018176:	4905      	ldr	r1, [pc, #20]	@ (801818c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8018178:	4b05      	ldr	r3, [pc, #20]	@ (8018190 <USBD_FS_ConfigStrDescriptor+0x40>)
 801817a:	0018      	movs	r0, r3
 801817c:	f7ff fd5e 	bl	8017c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018180:	4b02      	ldr	r3, [pc, #8]	@ (801818c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8018182:	0018      	movs	r0, r3
 8018184:	46bd      	mov	sp, r7
 8018186:	b002      	add	sp, #8
 8018188:	bd80      	pop	{r7, pc}
 801818a:	46c0      	nop			@ (mov r8, r8)
 801818c:	20002fec 	.word	0x20002fec
 8018190:	0801ee3c 	.word	0x0801ee3c

08018194 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b082      	sub	sp, #8
 8018198:	af00      	add	r7, sp, #0
 801819a:	0002      	movs	r2, r0
 801819c:	6039      	str	r1, [r7, #0]
 801819e:	1dfb      	adds	r3, r7, #7
 80181a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80181a2:	1dfb      	adds	r3, r7, #7
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d106      	bne.n	80181b8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80181aa:	683a      	ldr	r2, [r7, #0]
 80181ac:	4908      	ldr	r1, [pc, #32]	@ (80181d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80181ae:	4b09      	ldr	r3, [pc, #36]	@ (80181d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80181b0:	0018      	movs	r0, r3
 80181b2:	f7ff fd43 	bl	8017c3c <USBD_GetString>
 80181b6:	e005      	b.n	80181c4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80181b8:	683a      	ldr	r2, [r7, #0]
 80181ba:	4905      	ldr	r1, [pc, #20]	@ (80181d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80181bc:	4b05      	ldr	r3, [pc, #20]	@ (80181d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80181be:	0018      	movs	r0, r3
 80181c0:	f7ff fd3c 	bl	8017c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80181c4:	4b02      	ldr	r3, [pc, #8]	@ (80181d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80181c6:	0018      	movs	r0, r3
 80181c8:	46bd      	mov	sp, r7
 80181ca:	b002      	add	sp, #8
 80181cc:	bd80      	pop	{r7, pc}
 80181ce:	46c0      	nop			@ (mov r8, r8)
 80181d0:	20002fec 	.word	0x20002fec
 80181d4:	0801ee48 	.word	0x0801ee48

080181d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b084      	sub	sp, #16
 80181dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80181de:	4b10      	ldr	r3, [pc, #64]	@ (8018220 <Get_SerialNum+0x48>)
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80181e4:	4b0f      	ldr	r3, [pc, #60]	@ (8018224 <Get_SerialNum+0x4c>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80181ea:	4b0f      	ldr	r3, [pc, #60]	@ (8018228 <Get_SerialNum+0x50>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80181f0:	68fa      	ldr	r2, [r7, #12]
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	18d3      	adds	r3, r2, r3
 80181f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d00b      	beq.n	8018216 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80181fe:	490b      	ldr	r1, [pc, #44]	@ (801822c <Get_SerialNum+0x54>)
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	2208      	movs	r2, #8
 8018204:	0018      	movs	r0, r3
 8018206:	f000 f815 	bl	8018234 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801820a:	4909      	ldr	r1, [pc, #36]	@ (8018230 <Get_SerialNum+0x58>)
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	2204      	movs	r2, #4
 8018210:	0018      	movs	r0, r3
 8018212:	f000 f80f 	bl	8018234 <IntToUnicode>
  }
}
 8018216:	46c0      	nop			@ (mov r8, r8)
 8018218:	46bd      	mov	sp, r7
 801821a:	b004      	add	sp, #16
 801821c:	bd80      	pop	{r7, pc}
 801821e:	46c0      	nop			@ (mov r8, r8)
 8018220:	1ff80050 	.word	0x1ff80050
 8018224:	1ff80054 	.word	0x1ff80054
 8018228:	1ff80058 	.word	0x1ff80058
 801822c:	200001e2 	.word	0x200001e2
 8018230:	200001f2 	.word	0x200001f2

08018234 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b086      	sub	sp, #24
 8018238:	af00      	add	r7, sp, #0
 801823a:	60f8      	str	r0, [r7, #12]
 801823c:	60b9      	str	r1, [r7, #8]
 801823e:	1dfb      	adds	r3, r7, #7
 8018240:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8018242:	2117      	movs	r1, #23
 8018244:	187b      	adds	r3, r7, r1
 8018246:	2200      	movs	r2, #0
 8018248:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801824a:	187b      	adds	r3, r7, r1
 801824c:	2200      	movs	r2, #0
 801824e:	701a      	strb	r2, [r3, #0]
 8018250:	e02f      	b.n	80182b2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	0f1b      	lsrs	r3, r3, #28
 8018256:	2b09      	cmp	r3, #9
 8018258:	d80d      	bhi.n	8018276 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	0f1b      	lsrs	r3, r3, #28
 801825e:	b2da      	uxtb	r2, r3
 8018260:	2317      	movs	r3, #23
 8018262:	18fb      	adds	r3, r7, r3
 8018264:	781b      	ldrb	r3, [r3, #0]
 8018266:	005b      	lsls	r3, r3, #1
 8018268:	0019      	movs	r1, r3
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	185b      	adds	r3, r3, r1
 801826e:	3230      	adds	r2, #48	@ 0x30
 8018270:	b2d2      	uxtb	r2, r2
 8018272:	701a      	strb	r2, [r3, #0]
 8018274:	e00c      	b.n	8018290 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	0f1b      	lsrs	r3, r3, #28
 801827a:	b2da      	uxtb	r2, r3
 801827c:	2317      	movs	r3, #23
 801827e:	18fb      	adds	r3, r7, r3
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	005b      	lsls	r3, r3, #1
 8018284:	0019      	movs	r1, r3
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	185b      	adds	r3, r3, r1
 801828a:	3237      	adds	r2, #55	@ 0x37
 801828c:	b2d2      	uxtb	r2, r2
 801828e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	011b      	lsls	r3, r3, #4
 8018294:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018296:	2117      	movs	r1, #23
 8018298:	187b      	adds	r3, r7, r1
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	005b      	lsls	r3, r3, #1
 801829e:	3301      	adds	r3, #1
 80182a0:	68ba      	ldr	r2, [r7, #8]
 80182a2:	18d3      	adds	r3, r2, r3
 80182a4:	2200      	movs	r2, #0
 80182a6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80182a8:	187b      	adds	r3, r7, r1
 80182aa:	781a      	ldrb	r2, [r3, #0]
 80182ac:	187b      	adds	r3, r7, r1
 80182ae:	3201      	adds	r2, #1
 80182b0:	701a      	strb	r2, [r3, #0]
 80182b2:	2317      	movs	r3, #23
 80182b4:	18fa      	adds	r2, r7, r3
 80182b6:	1dfb      	adds	r3, r7, #7
 80182b8:	7812      	ldrb	r2, [r2, #0]
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	429a      	cmp	r2, r3
 80182be:	d3c8      	bcc.n	8018252 <IntToUnicode+0x1e>
  }
}
 80182c0:	46c0      	nop			@ (mov r8, r8)
 80182c2:	46c0      	nop			@ (mov r8, r8)
 80182c4:	46bd      	mov	sp, r7
 80182c6:	b006      	add	sp, #24
 80182c8:	bd80      	pop	{r7, pc}
	...

080182cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b082      	sub	sp, #8
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4a0a      	ldr	r2, [pc, #40]	@ (8018304 <HAL_PCD_MspInit+0x38>)
 80182da:	4293      	cmp	r3, r2
 80182dc:	d10e      	bne.n	80182fc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80182de:	4b0a      	ldr	r3, [pc, #40]	@ (8018308 <HAL_PCD_MspInit+0x3c>)
 80182e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80182e2:	4b09      	ldr	r3, [pc, #36]	@ (8018308 <HAL_PCD_MspInit+0x3c>)
 80182e4:	2180      	movs	r1, #128	@ 0x80
 80182e6:	0409      	lsls	r1, r1, #16
 80182e8:	430a      	orrs	r2, r1
 80182ea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80182ec:	2200      	movs	r2, #0
 80182ee:	2100      	movs	r1, #0
 80182f0:	201f      	movs	r0, #31
 80182f2:	f7f3 fd23 	bl	800bd3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80182f6:	201f      	movs	r0, #31
 80182f8:	f7f3 fd35 	bl	800bd66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80182fc:	46c0      	nop			@ (mov r8, r8)
 80182fe:	46bd      	mov	sp, r7
 8018300:	b002      	add	sp, #8
 8018302:	bd80      	pop	{r7, pc}
 8018304:	40005c00 	.word	0x40005c00
 8018308:	40021000 	.word	0x40021000

0801830c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b082      	sub	sp, #8
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018314:	687a      	ldr	r2, [r7, #4]
 8018316:	23bc      	movs	r3, #188	@ 0xbc
 8018318:	009b      	lsls	r3, r3, #2
 801831a:	58d2      	ldr	r2, [r2, r3]
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	21ac      	movs	r1, #172	@ 0xac
 8018320:	0089      	lsls	r1, r1, #2
 8018322:	468c      	mov	ip, r1
 8018324:	4463      	add	r3, ip
 8018326:	0019      	movs	r1, r3
 8018328:	0010      	movs	r0, r2
 801832a:	f7fe fc1d 	bl	8016b68 <USBD_LL_SetupStage>
}
 801832e:	46c0      	nop			@ (mov r8, r8)
 8018330:	46bd      	mov	sp, r7
 8018332:	b002      	add	sp, #8
 8018334:	bd80      	pop	{r7, pc}

08018336 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018336:	b590      	push	{r4, r7, lr}
 8018338:	b083      	sub	sp, #12
 801833a:	af00      	add	r7, sp, #0
 801833c:	6078      	str	r0, [r7, #4]
 801833e:	000a      	movs	r2, r1
 8018340:	1cfb      	adds	r3, r7, #3
 8018342:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	23bc      	movs	r3, #188	@ 0xbc
 8018348:	009b      	lsls	r3, r3, #2
 801834a:	58d4      	ldr	r4, [r2, r3]
 801834c:	1cfb      	adds	r3, r7, #3
 801834e:	781a      	ldrb	r2, [r3, #0]
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	23be      	movs	r3, #190	@ 0xbe
 8018354:	0059      	lsls	r1, r3, #1
 8018356:	0013      	movs	r3, r2
 8018358:	009b      	lsls	r3, r3, #2
 801835a:	189b      	adds	r3, r3, r2
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	18c3      	adds	r3, r0, r3
 8018360:	185b      	adds	r3, r3, r1
 8018362:	681a      	ldr	r2, [r3, #0]
 8018364:	1cfb      	adds	r3, r7, #3
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	0019      	movs	r1, r3
 801836a:	0020      	movs	r0, r4
 801836c:	f7fe fc5a 	bl	8016c24 <USBD_LL_DataOutStage>
}
 8018370:	46c0      	nop			@ (mov r8, r8)
 8018372:	46bd      	mov	sp, r7
 8018374:	b003      	add	sp, #12
 8018376:	bd90      	pop	{r4, r7, pc}

08018378 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b082      	sub	sp, #8
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	000a      	movs	r2, r1
 8018382:	1cfb      	adds	r3, r7, #3
 8018384:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018386:	687a      	ldr	r2, [r7, #4]
 8018388:	23bc      	movs	r3, #188	@ 0xbc
 801838a:	009b      	lsls	r3, r3, #2
 801838c:	58d0      	ldr	r0, [r2, r3]
 801838e:	1cfb      	adds	r3, r7, #3
 8018390:	781a      	ldrb	r2, [r3, #0]
 8018392:	6879      	ldr	r1, [r7, #4]
 8018394:	0013      	movs	r3, r2
 8018396:	009b      	lsls	r3, r3, #2
 8018398:	189b      	adds	r3, r3, r2
 801839a:	00db      	lsls	r3, r3, #3
 801839c:	18cb      	adds	r3, r1, r3
 801839e:	333c      	adds	r3, #60	@ 0x3c
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	1cfb      	adds	r3, r7, #3
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	0019      	movs	r1, r3
 80183a8:	f7fe fcbe 	bl	8016d28 <USBD_LL_DataInStage>
}
 80183ac:	46c0      	nop			@ (mov r8, r8)
 80183ae:	46bd      	mov	sp, r7
 80183b0:	b002      	add	sp, #8
 80183b2:	bd80      	pop	{r7, pc}

080183b4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b082      	sub	sp, #8
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80183bc:	687a      	ldr	r2, [r7, #4]
 80183be:	23bc      	movs	r3, #188	@ 0xbc
 80183c0:	009b      	lsls	r3, r3, #2
 80183c2:	58d3      	ldr	r3, [r2, r3]
 80183c4:	0018      	movs	r0, r3
 80183c6:	f7fe fdf5 	bl	8016fb4 <USBD_LL_SOF>
}
 80183ca:	46c0      	nop			@ (mov r8, r8)
 80183cc:	46bd      	mov	sp, r7
 80183ce:	b002      	add	sp, #8
 80183d0:	bd80      	pop	{r7, pc}

080183d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183d2:	b580      	push	{r7, lr}
 80183d4:	b084      	sub	sp, #16
 80183d6:	af00      	add	r7, sp, #0
 80183d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80183da:	230f      	movs	r3, #15
 80183dc:	18fb      	adds	r3, r7, r3
 80183de:	2201      	movs	r2, #1
 80183e0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	689b      	ldr	r3, [r3, #8]
 80183e6:	2b02      	cmp	r3, #2
 80183e8:	d001      	beq.n	80183ee <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80183ea:	f7ee fb7f 	bl	8006aec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80183ee:	687a      	ldr	r2, [r7, #4]
 80183f0:	23bc      	movs	r3, #188	@ 0xbc
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	58d2      	ldr	r2, [r2, r3]
 80183f6:	230f      	movs	r3, #15
 80183f8:	18fb      	adds	r3, r7, r3
 80183fa:	781b      	ldrb	r3, [r3, #0]
 80183fc:	0019      	movs	r1, r3
 80183fe:	0010      	movs	r0, r2
 8018400:	f7fe fd97 	bl	8016f32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018404:	687a      	ldr	r2, [r7, #4]
 8018406:	23bc      	movs	r3, #188	@ 0xbc
 8018408:	009b      	lsls	r3, r3, #2
 801840a:	58d3      	ldr	r3, [r2, r3]
 801840c:	0018      	movs	r0, r3
 801840e:	f7fe fd48 	bl	8016ea2 <USBD_LL_Reset>
}
 8018412:	46c0      	nop			@ (mov r8, r8)
 8018414:	46bd      	mov	sp, r7
 8018416:	b004      	add	sp, #16
 8018418:	bd80      	pop	{r7, pc}
	...

0801841c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b082      	sub	sp, #8
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018424:	687a      	ldr	r2, [r7, #4]
 8018426:	23bc      	movs	r3, #188	@ 0xbc
 8018428:	009b      	lsls	r3, r3, #2
 801842a:	58d3      	ldr	r3, [r2, r3]
 801842c:	0018      	movs	r0, r3
 801842e:	f7fe fd91 	bl	8016f54 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	699b      	ldr	r3, [r3, #24]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d005      	beq.n	8018446 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801843a:	4b05      	ldr	r3, [pc, #20]	@ (8018450 <HAL_PCD_SuspendCallback+0x34>)
 801843c:	691a      	ldr	r2, [r3, #16]
 801843e:	4b04      	ldr	r3, [pc, #16]	@ (8018450 <HAL_PCD_SuspendCallback+0x34>)
 8018440:	2106      	movs	r1, #6
 8018442:	430a      	orrs	r2, r1
 8018444:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8018446:	46c0      	nop			@ (mov r8, r8)
 8018448:	46bd      	mov	sp, r7
 801844a:	b002      	add	sp, #8
 801844c:	bd80      	pop	{r7, pc}
 801844e:	46c0      	nop			@ (mov r8, r8)
 8018450:	e000ed00 	.word	0xe000ed00

08018454 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	699b      	ldr	r3, [r3, #24]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d007      	beq.n	8018474 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018464:	4b09      	ldr	r3, [pc, #36]	@ (801848c <HAL_PCD_ResumeCallback+0x38>)
 8018466:	691a      	ldr	r2, [r3, #16]
 8018468:	4b08      	ldr	r3, [pc, #32]	@ (801848c <HAL_PCD_ResumeCallback+0x38>)
 801846a:	2106      	movs	r1, #6
 801846c:	438a      	bics	r2, r1
 801846e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8018470:	f000 fa44 	bl	80188fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018474:	687a      	ldr	r2, [r7, #4]
 8018476:	23bc      	movs	r3, #188	@ 0xbc
 8018478:	009b      	lsls	r3, r3, #2
 801847a:	58d3      	ldr	r3, [r2, r3]
 801847c:	0018      	movs	r0, r3
 801847e:	f7fe fd81 	bl	8016f84 <USBD_LL_Resume>
}
 8018482:	46c0      	nop			@ (mov r8, r8)
 8018484:	46bd      	mov	sp, r7
 8018486:	b002      	add	sp, #8
 8018488:	bd80      	pop	{r7, pc}
 801848a:	46c0      	nop			@ (mov r8, r8)
 801848c:	e000ed00 	.word	0xe000ed00

08018490 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8018498:	4a2d      	ldr	r2, [pc, #180]	@ (8018550 <USBD_LL_Init+0xc0>)
 801849a:	23bc      	movs	r3, #188	@ 0xbc
 801849c:	009b      	lsls	r3, r3, #2
 801849e:	6879      	ldr	r1, [r7, #4]
 80184a0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80184a2:	687a      	ldr	r2, [r7, #4]
 80184a4:	23b0      	movs	r3, #176	@ 0xb0
 80184a6:	009b      	lsls	r3, r3, #2
 80184a8:	4929      	ldr	r1, [pc, #164]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184aa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80184ac:	4b28      	ldr	r3, [pc, #160]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184ae:	4a29      	ldr	r2, [pc, #164]	@ (8018554 <USBD_LL_Init+0xc4>)
 80184b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80184b2:	4b27      	ldr	r3, [pc, #156]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184b4:	2208      	movs	r2, #8
 80184b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80184b8:	4b25      	ldr	r3, [pc, #148]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184ba:	2202      	movs	r2, #2
 80184bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80184be:	4b24      	ldr	r3, [pc, #144]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184c0:	2202      	movs	r2, #2
 80184c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80184c4:	4b22      	ldr	r3, [pc, #136]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184c6:	2200      	movs	r2, #0
 80184c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80184ca:	4b21      	ldr	r3, [pc, #132]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184cc:	2200      	movs	r2, #0
 80184ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80184d0:	4b1f      	ldr	r3, [pc, #124]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184d2:	2200      	movs	r2, #0
 80184d4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80184d6:	4b1e      	ldr	r3, [pc, #120]	@ (8018550 <USBD_LL_Init+0xc0>)
 80184d8:	0018      	movs	r0, r3
 80184da:	f7f6 fd57 	bl	800ef8c <HAL_PCD_Init>
 80184de:	1e03      	subs	r3, r0, #0
 80184e0:	d001      	beq.n	80184e6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80184e2:	f7ee fb03 	bl	8006aec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80184e6:	687a      	ldr	r2, [r7, #4]
 80184e8:	23b0      	movs	r3, #176	@ 0xb0
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	58d0      	ldr	r0, [r2, r3]
 80184ee:	2318      	movs	r3, #24
 80184f0:	2200      	movs	r2, #0
 80184f2:	2100      	movs	r1, #0
 80184f4:	f7f8 fb18 	bl	8010b28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80184f8:	687a      	ldr	r2, [r7, #4]
 80184fa:	23b0      	movs	r3, #176	@ 0xb0
 80184fc:	009b      	lsls	r3, r3, #2
 80184fe:	58d0      	ldr	r0, [r2, r3]
 8018500:	2358      	movs	r3, #88	@ 0x58
 8018502:	2200      	movs	r2, #0
 8018504:	2180      	movs	r1, #128	@ 0x80
 8018506:	f7f8 fb0f 	bl	8010b28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801850a:	687a      	ldr	r2, [r7, #4]
 801850c:	23b0      	movs	r3, #176	@ 0xb0
 801850e:	009b      	lsls	r3, r3, #2
 8018510:	58d0      	ldr	r0, [r2, r3]
 8018512:	23c0      	movs	r3, #192	@ 0xc0
 8018514:	2200      	movs	r2, #0
 8018516:	2181      	movs	r1, #129	@ 0x81
 8018518:	f7f8 fb06 	bl	8010b28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801851c:	687a      	ldr	r2, [r7, #4]
 801851e:	23b0      	movs	r3, #176	@ 0xb0
 8018520:	009b      	lsls	r3, r3, #2
 8018522:	58d0      	ldr	r0, [r2, r3]
 8018524:	2388      	movs	r3, #136	@ 0x88
 8018526:	005b      	lsls	r3, r3, #1
 8018528:	2200      	movs	r2, #0
 801852a:	2101      	movs	r1, #1
 801852c:	f7f8 fafc 	bl	8010b28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	23b0      	movs	r3, #176	@ 0xb0
 8018534:	009b      	lsls	r3, r3, #2
 8018536:	58d0      	ldr	r0, [r2, r3]
 8018538:	2380      	movs	r3, #128	@ 0x80
 801853a:	005b      	lsls	r3, r3, #1
 801853c:	2200      	movs	r2, #0
 801853e:	2182      	movs	r1, #130	@ 0x82
 8018540:	f7f8 faf2 	bl	8010b28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018544:	2300      	movs	r3, #0
}
 8018546:	0018      	movs	r0, r3
 8018548:	46bd      	mov	sp, r7
 801854a:	b002      	add	sp, #8
 801854c:	bd80      	pop	{r7, pc}
 801854e:	46c0      	nop			@ (mov r8, r8)
 8018550:	200031ec 	.word	0x200031ec
 8018554:	40005c00 	.word	0x40005c00

08018558 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801855a:	b085      	sub	sp, #20
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018560:	210f      	movs	r1, #15
 8018562:	187b      	adds	r3, r7, r1
 8018564:	2200      	movs	r2, #0
 8018566:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018568:	260e      	movs	r6, #14
 801856a:	19bb      	adds	r3, r7, r6
 801856c:	2200      	movs	r2, #0
 801856e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	23b0      	movs	r3, #176	@ 0xb0
 8018574:	009b      	lsls	r3, r3, #2
 8018576:	58d3      	ldr	r3, [r2, r3]
 8018578:	000d      	movs	r5, r1
 801857a:	187c      	adds	r4, r7, r1
 801857c:	0018      	movs	r0, r3
 801857e:	f7f6 fe05 	bl	800f18c <HAL_PCD_Start>
 8018582:	0003      	movs	r3, r0
 8018584:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018586:	19bc      	adds	r4, r7, r6
 8018588:	197b      	adds	r3, r7, r5
 801858a:	781b      	ldrb	r3, [r3, #0]
 801858c:	0018      	movs	r0, r3
 801858e:	f000 f9bc 	bl	801890a <USBD_Get_USB_Status>
 8018592:	0003      	movs	r3, r0
 8018594:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018596:	19bb      	adds	r3, r7, r6
 8018598:	781b      	ldrb	r3, [r3, #0]
}
 801859a:	0018      	movs	r0, r3
 801859c:	46bd      	mov	sp, r7
 801859e:	b005      	add	sp, #20
 80185a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080185a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80185a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185a4:	b085      	sub	sp, #20
 80185a6:	af00      	add	r7, sp, #0
 80185a8:	6078      	str	r0, [r7, #4]
 80185aa:	000c      	movs	r4, r1
 80185ac:	0010      	movs	r0, r2
 80185ae:	0019      	movs	r1, r3
 80185b0:	1cfb      	adds	r3, r7, #3
 80185b2:	1c22      	adds	r2, r4, #0
 80185b4:	701a      	strb	r2, [r3, #0]
 80185b6:	1cbb      	adds	r3, r7, #2
 80185b8:	1c02      	adds	r2, r0, #0
 80185ba:	701a      	strb	r2, [r3, #0]
 80185bc:	003b      	movs	r3, r7
 80185be:	1c0a      	adds	r2, r1, #0
 80185c0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185c2:	260f      	movs	r6, #15
 80185c4:	19bb      	adds	r3, r7, r6
 80185c6:	2200      	movs	r2, #0
 80185c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185ca:	250e      	movs	r5, #14
 80185cc:	197b      	adds	r3, r7, r5
 80185ce:	2200      	movs	r2, #0
 80185d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80185d2:	687a      	ldr	r2, [r7, #4]
 80185d4:	23b0      	movs	r3, #176	@ 0xb0
 80185d6:	009b      	lsls	r3, r3, #2
 80185d8:	58d0      	ldr	r0, [r2, r3]
 80185da:	19bc      	adds	r4, r7, r6
 80185dc:	1cbb      	adds	r3, r7, #2
 80185de:	781d      	ldrb	r5, [r3, #0]
 80185e0:	003b      	movs	r3, r7
 80185e2:	881a      	ldrh	r2, [r3, #0]
 80185e4:	1cfb      	adds	r3, r7, #3
 80185e6:	7819      	ldrb	r1, [r3, #0]
 80185e8:	002b      	movs	r3, r5
 80185ea:	f7f6 ff64 	bl	800f4b6 <HAL_PCD_EP_Open>
 80185ee:	0003      	movs	r3, r0
 80185f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185f2:	250e      	movs	r5, #14
 80185f4:	197c      	adds	r4, r7, r5
 80185f6:	19bb      	adds	r3, r7, r6
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	0018      	movs	r0, r3
 80185fc:	f000 f985 	bl	801890a <USBD_Get_USB_Status>
 8018600:	0003      	movs	r3, r0
 8018602:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018604:	197b      	adds	r3, r7, r5
 8018606:	781b      	ldrb	r3, [r3, #0]
}
 8018608:	0018      	movs	r0, r3
 801860a:	46bd      	mov	sp, r7
 801860c:	b005      	add	sp, #20
 801860e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018610 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018612:	b085      	sub	sp, #20
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
 8018618:	000a      	movs	r2, r1
 801861a:	1cfb      	adds	r3, r7, #3
 801861c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801861e:	210f      	movs	r1, #15
 8018620:	187b      	adds	r3, r7, r1
 8018622:	2200      	movs	r2, #0
 8018624:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018626:	260e      	movs	r6, #14
 8018628:	19bb      	adds	r3, r7, r6
 801862a:	2200      	movs	r2, #0
 801862c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801862e:	687a      	ldr	r2, [r7, #4]
 8018630:	23b0      	movs	r3, #176	@ 0xb0
 8018632:	009b      	lsls	r3, r3, #2
 8018634:	58d2      	ldr	r2, [r2, r3]
 8018636:	000d      	movs	r5, r1
 8018638:	187c      	adds	r4, r7, r1
 801863a:	1cfb      	adds	r3, r7, #3
 801863c:	781b      	ldrb	r3, [r3, #0]
 801863e:	0019      	movs	r1, r3
 8018640:	0010      	movs	r0, r2
 8018642:	f7f6 ffa7 	bl	800f594 <HAL_PCD_EP_Close>
 8018646:	0003      	movs	r3, r0
 8018648:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801864a:	19bc      	adds	r4, r7, r6
 801864c:	197b      	adds	r3, r7, r5
 801864e:	781b      	ldrb	r3, [r3, #0]
 8018650:	0018      	movs	r0, r3
 8018652:	f000 f95a 	bl	801890a <USBD_Get_USB_Status>
 8018656:	0003      	movs	r3, r0
 8018658:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801865a:	19bb      	adds	r3, r7, r6
 801865c:	781b      	ldrb	r3, [r3, #0]
}
 801865e:	0018      	movs	r0, r3
 8018660:	46bd      	mov	sp, r7
 8018662:	b005      	add	sp, #20
 8018664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018666 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018668:	b085      	sub	sp, #20
 801866a:	af00      	add	r7, sp, #0
 801866c:	6078      	str	r0, [r7, #4]
 801866e:	000a      	movs	r2, r1
 8018670:	1cfb      	adds	r3, r7, #3
 8018672:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018674:	210f      	movs	r1, #15
 8018676:	187b      	adds	r3, r7, r1
 8018678:	2200      	movs	r2, #0
 801867a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801867c:	260e      	movs	r6, #14
 801867e:	19bb      	adds	r3, r7, r6
 8018680:	2200      	movs	r2, #0
 8018682:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	23b0      	movs	r3, #176	@ 0xb0
 8018688:	009b      	lsls	r3, r3, #2
 801868a:	58d2      	ldr	r2, [r2, r3]
 801868c:	000d      	movs	r5, r1
 801868e:	187c      	adds	r4, r7, r1
 8018690:	1cfb      	adds	r3, r7, #3
 8018692:	781b      	ldrb	r3, [r3, #0]
 8018694:	0019      	movs	r1, r3
 8018696:	0010      	movs	r0, r2
 8018698:	f7f7 f859 	bl	800f74e <HAL_PCD_EP_SetStall>
 801869c:	0003      	movs	r3, r0
 801869e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186a0:	19bc      	adds	r4, r7, r6
 80186a2:	197b      	adds	r3, r7, r5
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	0018      	movs	r0, r3
 80186a8:	f000 f92f 	bl	801890a <USBD_Get_USB_Status>
 80186ac:	0003      	movs	r3, r0
 80186ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80186b0:	19bb      	adds	r3, r7, r6
 80186b2:	781b      	ldrb	r3, [r3, #0]
}
 80186b4:	0018      	movs	r0, r3
 80186b6:	46bd      	mov	sp, r7
 80186b8:	b005      	add	sp, #20
 80186ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186be:	b085      	sub	sp, #20
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	6078      	str	r0, [r7, #4]
 80186c4:	000a      	movs	r2, r1
 80186c6:	1cfb      	adds	r3, r7, #3
 80186c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186ca:	210f      	movs	r1, #15
 80186cc:	187b      	adds	r3, r7, r1
 80186ce:	2200      	movs	r2, #0
 80186d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186d2:	260e      	movs	r6, #14
 80186d4:	19bb      	adds	r3, r7, r6
 80186d6:	2200      	movs	r2, #0
 80186d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80186da:	687a      	ldr	r2, [r7, #4]
 80186dc:	23b0      	movs	r3, #176	@ 0xb0
 80186de:	009b      	lsls	r3, r3, #2
 80186e0:	58d2      	ldr	r2, [r2, r3]
 80186e2:	000d      	movs	r5, r1
 80186e4:	187c      	adds	r4, r7, r1
 80186e6:	1cfb      	adds	r3, r7, #3
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	0019      	movs	r1, r3
 80186ec:	0010      	movs	r0, r2
 80186ee:	f7f7 f88a 	bl	800f806 <HAL_PCD_EP_ClrStall>
 80186f2:	0003      	movs	r3, r0
 80186f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186f6:	19bc      	adds	r4, r7, r6
 80186f8:	197b      	adds	r3, r7, r5
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	0018      	movs	r0, r3
 80186fe:	f000 f904 	bl	801890a <USBD_Get_USB_Status>
 8018702:	0003      	movs	r3, r0
 8018704:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018706:	19bb      	adds	r3, r7, r6
 8018708:	781b      	ldrb	r3, [r3, #0]
}
 801870a:	0018      	movs	r0, r3
 801870c:	46bd      	mov	sp, r7
 801870e:	b005      	add	sp, #20
 8018710:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018712 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018712:	b580      	push	{r7, lr}
 8018714:	b084      	sub	sp, #16
 8018716:	af00      	add	r7, sp, #0
 8018718:	6078      	str	r0, [r7, #4]
 801871a:	000a      	movs	r2, r1
 801871c:	1cfb      	adds	r3, r7, #3
 801871e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018720:	687a      	ldr	r2, [r7, #4]
 8018722:	23b0      	movs	r3, #176	@ 0xb0
 8018724:	009b      	lsls	r3, r3, #2
 8018726:	58d3      	ldr	r3, [r2, r3]
 8018728:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801872a:	1cfb      	adds	r3, r7, #3
 801872c:	781b      	ldrb	r3, [r3, #0]
 801872e:	b25b      	sxtb	r3, r3
 8018730:	2b00      	cmp	r3, #0
 8018732:	da0d      	bge.n	8018750 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018734:	1cfb      	adds	r3, r7, #3
 8018736:	781b      	ldrb	r3, [r3, #0]
 8018738:	227f      	movs	r2, #127	@ 0x7f
 801873a:	4013      	ands	r3, r2
 801873c:	68f9      	ldr	r1, [r7, #12]
 801873e:	1c5a      	adds	r2, r3, #1
 8018740:	0013      	movs	r3, r2
 8018742:	009b      	lsls	r3, r3, #2
 8018744:	189b      	adds	r3, r3, r2
 8018746:	00db      	lsls	r3, r3, #3
 8018748:	18cb      	adds	r3, r1, r3
 801874a:	3302      	adds	r3, #2
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	e00d      	b.n	801876c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018750:	1cfb      	adds	r3, r7, #3
 8018752:	781b      	ldrb	r3, [r3, #0]
 8018754:	227f      	movs	r2, #127	@ 0x7f
 8018756:	401a      	ands	r2, r3
 8018758:	68f8      	ldr	r0, [r7, #12]
 801875a:	23b5      	movs	r3, #181	@ 0xb5
 801875c:	0059      	lsls	r1, r3, #1
 801875e:	0013      	movs	r3, r2
 8018760:	009b      	lsls	r3, r3, #2
 8018762:	189b      	adds	r3, r3, r2
 8018764:	00db      	lsls	r3, r3, #3
 8018766:	18c3      	adds	r3, r0, r3
 8018768:	185b      	adds	r3, r3, r1
 801876a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801876c:	0018      	movs	r0, r3
 801876e:	46bd      	mov	sp, r7
 8018770:	b004      	add	sp, #16
 8018772:	bd80      	pop	{r7, pc}

08018774 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018776:	b085      	sub	sp, #20
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
 801877c:	000a      	movs	r2, r1
 801877e:	1cfb      	adds	r3, r7, #3
 8018780:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018782:	210f      	movs	r1, #15
 8018784:	187b      	adds	r3, r7, r1
 8018786:	2200      	movs	r2, #0
 8018788:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801878a:	260e      	movs	r6, #14
 801878c:	19bb      	adds	r3, r7, r6
 801878e:	2200      	movs	r2, #0
 8018790:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018792:	687a      	ldr	r2, [r7, #4]
 8018794:	23b0      	movs	r3, #176	@ 0xb0
 8018796:	009b      	lsls	r3, r3, #2
 8018798:	58d2      	ldr	r2, [r2, r3]
 801879a:	000d      	movs	r5, r1
 801879c:	187c      	adds	r4, r7, r1
 801879e:	1cfb      	adds	r3, r7, #3
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	0019      	movs	r1, r3
 80187a4:	0010      	movs	r0, r2
 80187a6:	f7f6 fe5b 	bl	800f460 <HAL_PCD_SetAddress>
 80187aa:	0003      	movs	r3, r0
 80187ac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187ae:	19bc      	adds	r4, r7, r6
 80187b0:	197b      	adds	r3, r7, r5
 80187b2:	781b      	ldrb	r3, [r3, #0]
 80187b4:	0018      	movs	r0, r3
 80187b6:	f000 f8a8 	bl	801890a <USBD_Get_USB_Status>
 80187ba:	0003      	movs	r3, r0
 80187bc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80187be:	19bb      	adds	r3, r7, r6
 80187c0:	781b      	ldrb	r3, [r3, #0]
}
 80187c2:	0018      	movs	r0, r3
 80187c4:	46bd      	mov	sp, r7
 80187c6:	b005      	add	sp, #20
 80187c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80187ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187cc:	b087      	sub	sp, #28
 80187ce:	af00      	add	r7, sp, #0
 80187d0:	60f8      	str	r0, [r7, #12]
 80187d2:	0008      	movs	r0, r1
 80187d4:	607a      	str	r2, [r7, #4]
 80187d6:	0019      	movs	r1, r3
 80187d8:	230b      	movs	r3, #11
 80187da:	18fb      	adds	r3, r7, r3
 80187dc:	1c02      	adds	r2, r0, #0
 80187de:	701a      	strb	r2, [r3, #0]
 80187e0:	2408      	movs	r4, #8
 80187e2:	193b      	adds	r3, r7, r4
 80187e4:	1c0a      	adds	r2, r1, #0
 80187e6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187e8:	2117      	movs	r1, #23
 80187ea:	187b      	adds	r3, r7, r1
 80187ec:	2200      	movs	r2, #0
 80187ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187f0:	2516      	movs	r5, #22
 80187f2:	197b      	adds	r3, r7, r5
 80187f4:	2200      	movs	r2, #0
 80187f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80187f8:	68fa      	ldr	r2, [r7, #12]
 80187fa:	23b0      	movs	r3, #176	@ 0xb0
 80187fc:	009b      	lsls	r3, r3, #2
 80187fe:	58d0      	ldr	r0, [r2, r3]
 8018800:	193b      	adds	r3, r7, r4
 8018802:	881d      	ldrh	r5, [r3, #0]
 8018804:	000e      	movs	r6, r1
 8018806:	187c      	adds	r4, r7, r1
 8018808:	687a      	ldr	r2, [r7, #4]
 801880a:	230b      	movs	r3, #11
 801880c:	18fb      	adds	r3, r7, r3
 801880e:	7819      	ldrb	r1, [r3, #0]
 8018810:	002b      	movs	r3, r5
 8018812:	f7f6 ff60 	bl	800f6d6 <HAL_PCD_EP_Transmit>
 8018816:	0003      	movs	r3, r0
 8018818:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801881a:	2516      	movs	r5, #22
 801881c:	197c      	adds	r4, r7, r5
 801881e:	19bb      	adds	r3, r7, r6
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	0018      	movs	r0, r3
 8018824:	f000 f871 	bl	801890a <USBD_Get_USB_Status>
 8018828:	0003      	movs	r3, r0
 801882a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801882c:	197b      	adds	r3, r7, r5
 801882e:	781b      	ldrb	r3, [r3, #0]
}
 8018830:	0018      	movs	r0, r3
 8018832:	46bd      	mov	sp, r7
 8018834:	b007      	add	sp, #28
 8018836:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018838 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801883a:	b087      	sub	sp, #28
 801883c:	af00      	add	r7, sp, #0
 801883e:	60f8      	str	r0, [r7, #12]
 8018840:	0008      	movs	r0, r1
 8018842:	607a      	str	r2, [r7, #4]
 8018844:	0019      	movs	r1, r3
 8018846:	230b      	movs	r3, #11
 8018848:	18fb      	adds	r3, r7, r3
 801884a:	1c02      	adds	r2, r0, #0
 801884c:	701a      	strb	r2, [r3, #0]
 801884e:	2408      	movs	r4, #8
 8018850:	193b      	adds	r3, r7, r4
 8018852:	1c0a      	adds	r2, r1, #0
 8018854:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018856:	2117      	movs	r1, #23
 8018858:	187b      	adds	r3, r7, r1
 801885a:	2200      	movs	r2, #0
 801885c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801885e:	2516      	movs	r5, #22
 8018860:	197b      	adds	r3, r7, r5
 8018862:	2200      	movs	r2, #0
 8018864:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018866:	68fa      	ldr	r2, [r7, #12]
 8018868:	23b0      	movs	r3, #176	@ 0xb0
 801886a:	009b      	lsls	r3, r3, #2
 801886c:	58d0      	ldr	r0, [r2, r3]
 801886e:	193b      	adds	r3, r7, r4
 8018870:	881d      	ldrh	r5, [r3, #0]
 8018872:	000e      	movs	r6, r1
 8018874:	187c      	adds	r4, r7, r1
 8018876:	687a      	ldr	r2, [r7, #4]
 8018878:	230b      	movs	r3, #11
 801887a:	18fb      	adds	r3, r7, r3
 801887c:	7819      	ldrb	r1, [r3, #0]
 801887e:	002b      	movs	r3, r5
 8018880:	f7f6 fed9 	bl	800f636 <HAL_PCD_EP_Receive>
 8018884:	0003      	movs	r3, r0
 8018886:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018888:	2516      	movs	r5, #22
 801888a:	197c      	adds	r4, r7, r5
 801888c:	19bb      	adds	r3, r7, r6
 801888e:	781b      	ldrb	r3, [r3, #0]
 8018890:	0018      	movs	r0, r3
 8018892:	f000 f83a 	bl	801890a <USBD_Get_USB_Status>
 8018896:	0003      	movs	r3, r0
 8018898:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801889a:	197b      	adds	r3, r7, r5
 801889c:	781b      	ldrb	r3, [r3, #0]
}
 801889e:	0018      	movs	r0, r3
 80188a0:	46bd      	mov	sp, r7
 80188a2:	b007      	add	sp, #28
 80188a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188a6:	b580      	push	{r7, lr}
 80188a8:	b082      	sub	sp, #8
 80188aa:	af00      	add	r7, sp, #0
 80188ac:	6078      	str	r0, [r7, #4]
 80188ae:	000a      	movs	r2, r1
 80188b0:	1cfb      	adds	r3, r7, #3
 80188b2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	23b0      	movs	r3, #176	@ 0xb0
 80188b8:	009b      	lsls	r3, r3, #2
 80188ba:	58d2      	ldr	r2, [r2, r3]
 80188bc:	1cfb      	adds	r3, r7, #3
 80188be:	781b      	ldrb	r3, [r3, #0]
 80188c0:	0019      	movs	r1, r3
 80188c2:	0010      	movs	r0, r2
 80188c4:	f7f6 feee 	bl	800f6a4 <HAL_PCD_EP_GetRxCount>
 80188c8:	0003      	movs	r3, r0
}
 80188ca:	0018      	movs	r0, r3
 80188cc:	46bd      	mov	sp, r7
 80188ce:	b002      	add	sp, #8
 80188d0:	bd80      	pop	{r7, pc}
	...

080188d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80188dc:	4b02      	ldr	r3, [pc, #8]	@ (80188e8 <USBD_static_malloc+0x14>)
}
 80188de:	0018      	movs	r0, r3
 80188e0:	46bd      	mov	sp, r7
 80188e2:	b002      	add	sp, #8
 80188e4:	bd80      	pop	{r7, pc}
 80188e6:	46c0      	nop			@ (mov r8, r8)
 80188e8:	200034e0 	.word	0x200034e0

080188ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]

}
 80188f4:	46c0      	nop			@ (mov r8, r8)
 80188f6:	46bd      	mov	sp, r7
 80188f8:	b002      	add	sp, #8
 80188fa:	bd80      	pop	{r7, pc}

080188fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018900:	f7ee f856 	bl	80069b0 <SystemClock_Config>
}
 8018904:	46c0      	nop			@ (mov r8, r8)
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}

0801890a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801890a:	b580      	push	{r7, lr}
 801890c:	b084      	sub	sp, #16
 801890e:	af00      	add	r7, sp, #0
 8018910:	0002      	movs	r2, r0
 8018912:	1dfb      	adds	r3, r7, #7
 8018914:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018916:	230f      	movs	r3, #15
 8018918:	18fb      	adds	r3, r7, r3
 801891a:	2200      	movs	r2, #0
 801891c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801891e:	1dfb      	adds	r3, r7, #7
 8018920:	781b      	ldrb	r3, [r3, #0]
 8018922:	2b03      	cmp	r3, #3
 8018924:	d017      	beq.n	8018956 <USBD_Get_USB_Status+0x4c>
 8018926:	dc1b      	bgt.n	8018960 <USBD_Get_USB_Status+0x56>
 8018928:	2b02      	cmp	r3, #2
 801892a:	d00f      	beq.n	801894c <USBD_Get_USB_Status+0x42>
 801892c:	dc18      	bgt.n	8018960 <USBD_Get_USB_Status+0x56>
 801892e:	2b00      	cmp	r3, #0
 8018930:	d002      	beq.n	8018938 <USBD_Get_USB_Status+0x2e>
 8018932:	2b01      	cmp	r3, #1
 8018934:	d005      	beq.n	8018942 <USBD_Get_USB_Status+0x38>
 8018936:	e013      	b.n	8018960 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018938:	230f      	movs	r3, #15
 801893a:	18fb      	adds	r3, r7, r3
 801893c:	2200      	movs	r2, #0
 801893e:	701a      	strb	r2, [r3, #0]
    break;
 8018940:	e013      	b.n	801896a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018942:	230f      	movs	r3, #15
 8018944:	18fb      	adds	r3, r7, r3
 8018946:	2202      	movs	r2, #2
 8018948:	701a      	strb	r2, [r3, #0]
    break;
 801894a:	e00e      	b.n	801896a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801894c:	230f      	movs	r3, #15
 801894e:	18fb      	adds	r3, r7, r3
 8018950:	2201      	movs	r2, #1
 8018952:	701a      	strb	r2, [r3, #0]
    break;
 8018954:	e009      	b.n	801896a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018956:	230f      	movs	r3, #15
 8018958:	18fb      	adds	r3, r7, r3
 801895a:	2202      	movs	r2, #2
 801895c:	701a      	strb	r2, [r3, #0]
    break;
 801895e:	e004      	b.n	801896a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8018960:	230f      	movs	r3, #15
 8018962:	18fb      	adds	r3, r7, r3
 8018964:	2202      	movs	r2, #2
 8018966:	701a      	strb	r2, [r3, #0]
    break;
 8018968:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801896a:	230f      	movs	r3, #15
 801896c:	18fb      	adds	r3, r7, r3
 801896e:	781b      	ldrb	r3, [r3, #0]
}
 8018970:	0018      	movs	r0, r3
 8018972:	46bd      	mov	sp, r7
 8018974:	b004      	add	sp, #16
 8018976:	bd80      	pop	{r7, pc}

08018978 <arm_cfft_radix4by2_q31>:
 8018978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801897a:	465f      	mov	r7, fp
 801897c:	4656      	mov	r6, sl
 801897e:	464d      	mov	r5, r9
 8018980:	4644      	mov	r4, r8
 8018982:	000b      	movs	r3, r1
 8018984:	b4f0      	push	{r4, r5, r6, r7}
 8018986:	085b      	lsrs	r3, r3, #1
 8018988:	b08f      	sub	sp, #60	@ 0x3c
 801898a:	910a      	str	r1, [sp, #40]	@ 0x28
 801898c:	0007      	movs	r7, r0
 801898e:	9009      	str	r0, [sp, #36]	@ 0x24
 8018990:	0011      	movs	r1, r2
 8018992:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018994:	930c      	str	r3, [sp, #48]	@ 0x30
 8018996:	2b00      	cmp	r3, #0
 8018998:	d100      	bne.n	801899c <arm_cfft_radix4by2_q31+0x24>
 801899a:	e0a0      	b.n	8018ade <arm_cfft_radix4by2_q31+0x166>
 801899c:	0002      	movs	r2, r0
 801899e:	00db      	lsls	r3, r3, #3
 80189a0:	3204      	adds	r2, #4
 80189a2:	4691      	mov	r9, r2
 80189a4:	4698      	mov	r8, r3
 80189a6:	000a      	movs	r2, r1
 80189a8:	464e      	mov	r6, r9
 80189aa:	4442      	add	r2, r8
 80189ac:	4699      	mov	r9, r3
 80189ae:	4688      	mov	r8, r1
 80189b0:	9208      	str	r2, [sp, #32]
 80189b2:	900d      	str	r0, [sp, #52]	@ 0x34
 80189b4:	4643      	mov	r3, r8
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	469b      	mov	fp, r3
 80189ba:	4643      	mov	r3, r8
 80189bc:	685b      	ldr	r3, [r3, #4]
 80189be:	469a      	mov	sl, r3
 80189c0:	683b      	ldr	r3, [r7, #0]
 80189c2:	109c      	asrs	r4, r3, #2
 80189c4:	464b      	mov	r3, r9
 80189c6:	58fb      	ldr	r3, [r7, r3]
 80189c8:	109a      	asrs	r2, r3, #2
 80189ca:	18a3      	adds	r3, r4, r2
 80189cc:	603b      	str	r3, [r7, #0]
 80189ce:	6833      	ldr	r3, [r6, #0]
 80189d0:	1aa4      	subs	r4, r4, r2
 80189d2:	109d      	asrs	r5, r3, #2
 80189d4:	464b      	mov	r3, r9
 80189d6:	58f3      	ldr	r3, [r6, r3]
 80189d8:	17e2      	asrs	r2, r4, #31
 80189da:	109b      	asrs	r3, r3, #2
 80189dc:	18e9      	adds	r1, r5, r3
 80189de:	6031      	str	r1, [r6, #0]
 80189e0:	0011      	movs	r1, r2
 80189e2:	465a      	mov	r2, fp
 80189e4:	17d2      	asrs	r2, r2, #31
 80189e6:	0010      	movs	r0, r2
 80189e8:	4652      	mov	r2, sl
 80189ea:	1aed      	subs	r5, r5, r3
 80189ec:	17eb      	asrs	r3, r5, #31
 80189ee:	17d2      	asrs	r2, r2, #31
 80189f0:	9307      	str	r3, [sp, #28]
 80189f2:	9204      	str	r2, [sp, #16]
 80189f4:	0003      	movs	r3, r0
 80189f6:	465a      	mov	r2, fp
 80189f8:	9006      	str	r0, [sp, #24]
 80189fa:	0020      	movs	r0, r4
 80189fc:	9105      	str	r1, [sp, #20]
 80189fe:	f7e7 fdd5 	bl	80005ac <__aeabi_lmul>
 8018a02:	2280      	movs	r2, #128	@ 0x80
 8018a04:	2300      	movs	r3, #0
 8018a06:	0612      	lsls	r2, r2, #24
 8018a08:	1880      	adds	r0, r0, r2
 8018a0a:	4159      	adcs	r1, r3
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	9101      	str	r1, [sp, #4]
 8018a10:	9300      	str	r3, [sp, #0]
 8018a12:	4652      	mov	r2, sl
 8018a14:	9b04      	ldr	r3, [sp, #16]
 8018a16:	0028      	movs	r0, r5
 8018a18:	17e9      	asrs	r1, r5, #31
 8018a1a:	f7e7 fdc7 	bl	80005ac <__aeabi_lmul>
 8018a1e:	9a00      	ldr	r2, [sp, #0]
 8018a20:	9b01      	ldr	r3, [sp, #4]
 8018a22:	1880      	adds	r0, r0, r2
 8018a24:	4159      	adcs	r1, r3
 8018a26:	2280      	movs	r2, #128	@ 0x80
 8018a28:	2300      	movs	r3, #0
 8018a2a:	0612      	lsls	r2, r2, #24
 8018a2c:	1880      	adds	r0, r0, r2
 8018a2e:	4159      	adcs	r1, r3
 8018a30:	464a      	mov	r2, r9
 8018a32:	004b      	lsls	r3, r1, #1
 8018a34:	50bb      	str	r3, [r7, r2]
 8018a36:	4658      	mov	r0, fp
 8018a38:	002a      	movs	r2, r5
 8018a3a:	9b07      	ldr	r3, [sp, #28]
 8018a3c:	9906      	ldr	r1, [sp, #24]
 8018a3e:	f7e7 fdb5 	bl	80005ac <__aeabi_lmul>
 8018a42:	2280      	movs	r2, #128	@ 0x80
 8018a44:	2300      	movs	r3, #0
 8018a46:	0612      	lsls	r2, r2, #24
 8018a48:	1880      	adds	r0, r0, r2
 8018a4a:	4159      	adcs	r1, r3
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	9103      	str	r1, [sp, #12]
 8018a50:	9002      	str	r0, [sp, #8]
 8018a52:	4652      	mov	r2, sl
 8018a54:	9b04      	ldr	r3, [sp, #16]
 8018a56:	0020      	movs	r0, r4
 8018a58:	9905      	ldr	r1, [sp, #20]
 8018a5a:	f7e7 fda7 	bl	80005ac <__aeabi_lmul>
 8018a5e:	9a02      	ldr	r2, [sp, #8]
 8018a60:	9b03      	ldr	r3, [sp, #12]
 8018a62:	1a12      	subs	r2, r2, r0
 8018a64:	418b      	sbcs	r3, r1
 8018a66:	2080      	movs	r0, #128	@ 0x80
 8018a68:	2100      	movs	r1, #0
 8018a6a:	0600      	lsls	r0, r0, #24
 8018a6c:	1812      	adds	r2, r2, r0
 8018a6e:	414b      	adcs	r3, r1
 8018a70:	464a      	mov	r2, r9
 8018a72:	005b      	lsls	r3, r3, #1
 8018a74:	50b3      	str	r3, [r6, r2]
 8018a76:	2308      	movs	r3, #8
 8018a78:	469c      	mov	ip, r3
 8018a7a:	9b08      	ldr	r3, [sp, #32]
 8018a7c:	44e0      	add	r8, ip
 8018a7e:	3708      	adds	r7, #8
 8018a80:	3608      	adds	r6, #8
 8018a82:	4598      	cmp	r8, r3
 8018a84:	d196      	bne.n	80189b4 <arm_cfft_radix4by2_q31+0x3c>
 8018a86:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8018a88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018a8a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018a8c:	2302      	movs	r3, #2
 8018a8e:	003a      	movs	r2, r7
 8018a90:	0029      	movs	r1, r5
 8018a92:	0020      	movs	r0, r4
 8018a94:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8018a96:	f000 f957 	bl	8018d48 <arm_radix4_butterfly_q31>
 8018a9a:	46a4      	mov	ip, r4
 8018a9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018a9e:	2302      	movs	r3, #2
 8018aa0:	0088      	lsls	r0, r1, #2
 8018aa2:	4460      	add	r0, ip
 8018aa4:	003a      	movs	r2, r7
 8018aa6:	0029      	movs	r1, r5
 8018aa8:	f000 f94e 	bl	8018d48 <arm_radix4_butterfly_q31>
 8018aac:	46a4      	mov	ip, r4
 8018aae:	0128      	lsls	r0, r5, #4
 8018ab0:	4460      	add	r0, ip
 8018ab2:	6833      	ldr	r3, [r6, #0]
 8018ab4:	005b      	lsls	r3, r3, #1
 8018ab6:	6033      	str	r3, [r6, #0]
 8018ab8:	6873      	ldr	r3, [r6, #4]
 8018aba:	005b      	lsls	r3, r3, #1
 8018abc:	6073      	str	r3, [r6, #4]
 8018abe:	68b3      	ldr	r3, [r6, #8]
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	60b3      	str	r3, [r6, #8]
 8018ac4:	68f3      	ldr	r3, [r6, #12]
 8018ac6:	005b      	lsls	r3, r3, #1
 8018ac8:	60f3      	str	r3, [r6, #12]
 8018aca:	3610      	adds	r6, #16
 8018acc:	42b0      	cmp	r0, r6
 8018ace:	d1f0      	bne.n	8018ab2 <arm_cfft_radix4by2_q31+0x13a>
 8018ad0:	b00f      	add	sp, #60	@ 0x3c
 8018ad2:	bc3c      	pop	{r2, r3, r4, r5}
 8018ad4:	4690      	mov	r8, r2
 8018ad6:	4699      	mov	r9, r3
 8018ad8:	46a2      	mov	sl, r4
 8018ada:	46ab      	mov	fp, r5
 8018adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ade:	2302      	movs	r3, #2
 8018ae0:	2100      	movs	r1, #0
 8018ae2:	0015      	movs	r5, r2
 8018ae4:	f000 f930 	bl	8018d48 <arm_radix4_butterfly_q31>
 8018ae8:	46bc      	mov	ip, r7
 8018aea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018aec:	002a      	movs	r2, r5
 8018aee:	0098      	lsls	r0, r3, #2
 8018af0:	4460      	add	r0, ip
 8018af2:	2302      	movs	r3, #2
 8018af4:	2100      	movs	r1, #0
 8018af6:	f000 f927 	bl	8018d48 <arm_radix4_butterfly_q31>
 8018afa:	e7e9      	b.n	8018ad0 <arm_cfft_radix4by2_q31+0x158>

08018afc <arm_cfft_radix4by2_inverse_q31>:
 8018afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018afe:	465f      	mov	r7, fp
 8018b00:	4656      	mov	r6, sl
 8018b02:	464d      	mov	r5, r9
 8018b04:	4644      	mov	r4, r8
 8018b06:	000b      	movs	r3, r1
 8018b08:	b4f0      	push	{r4, r5, r6, r7}
 8018b0a:	085b      	lsrs	r3, r3, #1
 8018b0c:	b08f      	sub	sp, #60	@ 0x3c
 8018b0e:	910a      	str	r1, [sp, #40]	@ 0x28
 8018b10:	0007      	movs	r7, r0
 8018b12:	9009      	str	r0, [sp, #36]	@ 0x24
 8018b14:	0011      	movs	r1, r2
 8018b16:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018b18:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d100      	bne.n	8018b20 <arm_cfft_radix4by2_inverse_q31+0x24>
 8018b1e:	e0a0      	b.n	8018c62 <arm_cfft_radix4by2_inverse_q31+0x166>
 8018b20:	0002      	movs	r2, r0
 8018b22:	00db      	lsls	r3, r3, #3
 8018b24:	3204      	adds	r2, #4
 8018b26:	4691      	mov	r9, r2
 8018b28:	4698      	mov	r8, r3
 8018b2a:	000a      	movs	r2, r1
 8018b2c:	464e      	mov	r6, r9
 8018b2e:	4442      	add	r2, r8
 8018b30:	4699      	mov	r9, r3
 8018b32:	4688      	mov	r8, r1
 8018b34:	9208      	str	r2, [sp, #32]
 8018b36:	900d      	str	r0, [sp, #52]	@ 0x34
 8018b38:	4643      	mov	r3, r8
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	469b      	mov	fp, r3
 8018b3e:	4643      	mov	r3, r8
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	469a      	mov	sl, r3
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	109c      	asrs	r4, r3, #2
 8018b48:	464b      	mov	r3, r9
 8018b4a:	58fb      	ldr	r3, [r7, r3]
 8018b4c:	109a      	asrs	r2, r3, #2
 8018b4e:	18a3      	adds	r3, r4, r2
 8018b50:	603b      	str	r3, [r7, #0]
 8018b52:	6833      	ldr	r3, [r6, #0]
 8018b54:	1aa4      	subs	r4, r4, r2
 8018b56:	109d      	asrs	r5, r3, #2
 8018b58:	464b      	mov	r3, r9
 8018b5a:	58f3      	ldr	r3, [r6, r3]
 8018b5c:	17e2      	asrs	r2, r4, #31
 8018b5e:	109b      	asrs	r3, r3, #2
 8018b60:	18e9      	adds	r1, r5, r3
 8018b62:	6031      	str	r1, [r6, #0]
 8018b64:	0011      	movs	r1, r2
 8018b66:	465a      	mov	r2, fp
 8018b68:	17d2      	asrs	r2, r2, #31
 8018b6a:	0010      	movs	r0, r2
 8018b6c:	4652      	mov	r2, sl
 8018b6e:	1aed      	subs	r5, r5, r3
 8018b70:	17eb      	asrs	r3, r5, #31
 8018b72:	17d2      	asrs	r2, r2, #31
 8018b74:	9307      	str	r3, [sp, #28]
 8018b76:	9204      	str	r2, [sp, #16]
 8018b78:	0003      	movs	r3, r0
 8018b7a:	465a      	mov	r2, fp
 8018b7c:	9006      	str	r0, [sp, #24]
 8018b7e:	0020      	movs	r0, r4
 8018b80:	9105      	str	r1, [sp, #20]
 8018b82:	f7e7 fd13 	bl	80005ac <__aeabi_lmul>
 8018b86:	2280      	movs	r2, #128	@ 0x80
 8018b88:	2300      	movs	r3, #0
 8018b8a:	0612      	lsls	r2, r2, #24
 8018b8c:	1880      	adds	r0, r0, r2
 8018b8e:	4159      	adcs	r1, r3
 8018b90:	2300      	movs	r3, #0
 8018b92:	9101      	str	r1, [sp, #4]
 8018b94:	9300      	str	r3, [sp, #0]
 8018b96:	4652      	mov	r2, sl
 8018b98:	9b04      	ldr	r3, [sp, #16]
 8018b9a:	0028      	movs	r0, r5
 8018b9c:	17e9      	asrs	r1, r5, #31
 8018b9e:	f7e7 fd05 	bl	80005ac <__aeabi_lmul>
 8018ba2:	9a00      	ldr	r2, [sp, #0]
 8018ba4:	9b01      	ldr	r3, [sp, #4]
 8018ba6:	1a12      	subs	r2, r2, r0
 8018ba8:	418b      	sbcs	r3, r1
 8018baa:	2080      	movs	r0, #128	@ 0x80
 8018bac:	2100      	movs	r1, #0
 8018bae:	0600      	lsls	r0, r0, #24
 8018bb0:	1812      	adds	r2, r2, r0
 8018bb2:	414b      	adcs	r3, r1
 8018bb4:	464a      	mov	r2, r9
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	50bb      	str	r3, [r7, r2]
 8018bba:	4658      	mov	r0, fp
 8018bbc:	002a      	movs	r2, r5
 8018bbe:	9b07      	ldr	r3, [sp, #28]
 8018bc0:	9906      	ldr	r1, [sp, #24]
 8018bc2:	f7e7 fcf3 	bl	80005ac <__aeabi_lmul>
 8018bc6:	2280      	movs	r2, #128	@ 0x80
 8018bc8:	2300      	movs	r3, #0
 8018bca:	0612      	lsls	r2, r2, #24
 8018bcc:	1880      	adds	r0, r0, r2
 8018bce:	4159      	adcs	r1, r3
 8018bd0:	2000      	movs	r0, #0
 8018bd2:	9103      	str	r1, [sp, #12]
 8018bd4:	9002      	str	r0, [sp, #8]
 8018bd6:	4652      	mov	r2, sl
 8018bd8:	9b04      	ldr	r3, [sp, #16]
 8018bda:	0020      	movs	r0, r4
 8018bdc:	9905      	ldr	r1, [sp, #20]
 8018bde:	f7e7 fce5 	bl	80005ac <__aeabi_lmul>
 8018be2:	9b02      	ldr	r3, [sp, #8]
 8018be4:	9c03      	ldr	r4, [sp, #12]
 8018be6:	18c0      	adds	r0, r0, r3
 8018be8:	4161      	adcs	r1, r4
 8018bea:	2380      	movs	r3, #128	@ 0x80
 8018bec:	2400      	movs	r4, #0
 8018bee:	061b      	lsls	r3, r3, #24
 8018bf0:	18c0      	adds	r0, r0, r3
 8018bf2:	4161      	adcs	r1, r4
 8018bf4:	464a      	mov	r2, r9
 8018bf6:	004b      	lsls	r3, r1, #1
 8018bf8:	50b3      	str	r3, [r6, r2]
 8018bfa:	2308      	movs	r3, #8
 8018bfc:	469c      	mov	ip, r3
 8018bfe:	9b08      	ldr	r3, [sp, #32]
 8018c00:	44e0      	add	r8, ip
 8018c02:	3708      	adds	r7, #8
 8018c04:	3608      	adds	r6, #8
 8018c06:	4598      	cmp	r8, r3
 8018c08:	d196      	bne.n	8018b38 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8018c0a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8018c0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018c0e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c10:	2302      	movs	r3, #2
 8018c12:	003a      	movs	r2, r7
 8018c14:	0029      	movs	r1, r5
 8018c16:	0020      	movs	r0, r4
 8018c18:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8018c1a:	f000 fb3b 	bl	8019294 <arm_radix4_butterfly_inverse_q31>
 8018c1e:	46a4      	mov	ip, r4
 8018c20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018c22:	2302      	movs	r3, #2
 8018c24:	0088      	lsls	r0, r1, #2
 8018c26:	4460      	add	r0, ip
 8018c28:	003a      	movs	r2, r7
 8018c2a:	0029      	movs	r1, r5
 8018c2c:	f000 fb32 	bl	8019294 <arm_radix4_butterfly_inverse_q31>
 8018c30:	46a4      	mov	ip, r4
 8018c32:	0128      	lsls	r0, r5, #4
 8018c34:	4460      	add	r0, ip
 8018c36:	6833      	ldr	r3, [r6, #0]
 8018c38:	005b      	lsls	r3, r3, #1
 8018c3a:	6033      	str	r3, [r6, #0]
 8018c3c:	6873      	ldr	r3, [r6, #4]
 8018c3e:	005b      	lsls	r3, r3, #1
 8018c40:	6073      	str	r3, [r6, #4]
 8018c42:	68b3      	ldr	r3, [r6, #8]
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	60b3      	str	r3, [r6, #8]
 8018c48:	68f3      	ldr	r3, [r6, #12]
 8018c4a:	005b      	lsls	r3, r3, #1
 8018c4c:	60f3      	str	r3, [r6, #12]
 8018c4e:	3610      	adds	r6, #16
 8018c50:	42b0      	cmp	r0, r6
 8018c52:	d1f0      	bne.n	8018c36 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8018c54:	b00f      	add	sp, #60	@ 0x3c
 8018c56:	bc3c      	pop	{r2, r3, r4, r5}
 8018c58:	4690      	mov	r8, r2
 8018c5a:	4699      	mov	r9, r3
 8018c5c:	46a2      	mov	sl, r4
 8018c5e:	46ab      	mov	fp, r5
 8018c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c62:	2302      	movs	r3, #2
 8018c64:	2100      	movs	r1, #0
 8018c66:	0015      	movs	r5, r2
 8018c68:	f000 fb14 	bl	8019294 <arm_radix4_butterfly_inverse_q31>
 8018c6c:	46bc      	mov	ip, r7
 8018c6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c70:	002a      	movs	r2, r5
 8018c72:	0098      	lsls	r0, r3, #2
 8018c74:	4460      	add	r0, ip
 8018c76:	2302      	movs	r3, #2
 8018c78:	2100      	movs	r1, #0
 8018c7a:	f000 fb0b 	bl	8019294 <arm_radix4_butterfly_inverse_q31>
 8018c7e:	e7e9      	b.n	8018c54 <arm_cfft_radix4by2_inverse_q31+0x158>

08018c80 <arm_cfft_q31>:
 8018c80:	b570      	push	{r4, r5, r6, lr}
 8018c82:	001e      	movs	r6, r3
 8018c84:	2380      	movs	r3, #128	@ 0x80
 8018c86:	000d      	movs	r5, r1
 8018c88:	0004      	movs	r4, r0
 8018c8a:	8801      	ldrh	r1, [r0, #0]
 8018c8c:	005b      	lsls	r3, r3, #1
 8018c8e:	2a01      	cmp	r2, #1
 8018c90:	d028      	beq.n	8018ce4 <arm_cfft_q31+0x64>
 8018c92:	4299      	cmp	r1, r3
 8018c94:	d020      	beq.n	8018cd8 <arm_cfft_q31+0x58>
 8018c96:	d812      	bhi.n	8018cbe <arm_cfft_q31+0x3e>
 8018c98:	2920      	cmp	r1, #32
 8018c9a:	d004      	beq.n	8018ca6 <arm_cfft_q31+0x26>
 8018c9c:	d949      	bls.n	8018d32 <arm_cfft_q31+0xb2>
 8018c9e:	2940      	cmp	r1, #64	@ 0x40
 8018ca0:	d01a      	beq.n	8018cd8 <arm_cfft_q31+0x58>
 8018ca2:	2980      	cmp	r1, #128	@ 0x80
 8018ca4:	d103      	bne.n	8018cae <arm_cfft_q31+0x2e>
 8018ca6:	6862      	ldr	r2, [r4, #4]
 8018ca8:	0028      	movs	r0, r5
 8018caa:	f7ff fe65 	bl	8018978 <arm_cfft_radix4by2_q31>
 8018cae:	2e00      	cmp	r6, #0
 8018cb0:	d004      	beq.n	8018cbc <arm_cfft_q31+0x3c>
 8018cb2:	68a2      	ldr	r2, [r4, #8]
 8018cb4:	89a1      	ldrh	r1, [r4, #12]
 8018cb6:	0028      	movs	r0, r5
 8018cb8:	f7e7 fa26 	bl	8000108 <arm_bitreversal_32>
 8018cbc:	bd70      	pop	{r4, r5, r6, pc}
 8018cbe:	2380      	movs	r3, #128	@ 0x80
 8018cc0:	00db      	lsls	r3, r3, #3
 8018cc2:	4299      	cmp	r1, r3
 8018cc4:	d008      	beq.n	8018cd8 <arm_cfft_q31+0x58>
 8018cc6:	d92f      	bls.n	8018d28 <arm_cfft_q31+0xa8>
 8018cc8:	2380      	movs	r3, #128	@ 0x80
 8018cca:	011b      	lsls	r3, r3, #4
 8018ccc:	4299      	cmp	r1, r3
 8018cce:	d0ea      	beq.n	8018ca6 <arm_cfft_q31+0x26>
 8018cd0:	2380      	movs	r3, #128	@ 0x80
 8018cd2:	015b      	lsls	r3, r3, #5
 8018cd4:	4299      	cmp	r1, r3
 8018cd6:	d1ea      	bne.n	8018cae <arm_cfft_q31+0x2e>
 8018cd8:	2301      	movs	r3, #1
 8018cda:	6862      	ldr	r2, [r4, #4]
 8018cdc:	0028      	movs	r0, r5
 8018cde:	f000 f833 	bl	8018d48 <arm_radix4_butterfly_q31>
 8018ce2:	e7e4      	b.n	8018cae <arm_cfft_q31+0x2e>
 8018ce4:	4299      	cmp	r1, r3
 8018ce6:	d019      	beq.n	8018d1c <arm_cfft_q31+0x9c>
 8018ce8:	d80b      	bhi.n	8018d02 <arm_cfft_q31+0x82>
 8018cea:	2920      	cmp	r1, #32
 8018cec:	d004      	beq.n	8018cf8 <arm_cfft_q31+0x78>
 8018cee:	d928      	bls.n	8018d42 <arm_cfft_q31+0xc2>
 8018cf0:	2940      	cmp	r1, #64	@ 0x40
 8018cf2:	d013      	beq.n	8018d1c <arm_cfft_q31+0x9c>
 8018cf4:	2980      	cmp	r1, #128	@ 0x80
 8018cf6:	d1da      	bne.n	8018cae <arm_cfft_q31+0x2e>
 8018cf8:	6862      	ldr	r2, [r4, #4]
 8018cfa:	0028      	movs	r0, r5
 8018cfc:	f7ff fefe 	bl	8018afc <arm_cfft_radix4by2_inverse_q31>
 8018d00:	e7d5      	b.n	8018cae <arm_cfft_q31+0x2e>
 8018d02:	2380      	movs	r3, #128	@ 0x80
 8018d04:	00db      	lsls	r3, r3, #3
 8018d06:	4299      	cmp	r1, r3
 8018d08:	d008      	beq.n	8018d1c <arm_cfft_q31+0x9c>
 8018d0a:	d915      	bls.n	8018d38 <arm_cfft_q31+0xb8>
 8018d0c:	2380      	movs	r3, #128	@ 0x80
 8018d0e:	011b      	lsls	r3, r3, #4
 8018d10:	4299      	cmp	r1, r3
 8018d12:	d0f1      	beq.n	8018cf8 <arm_cfft_q31+0x78>
 8018d14:	2380      	movs	r3, #128	@ 0x80
 8018d16:	015b      	lsls	r3, r3, #5
 8018d18:	4299      	cmp	r1, r3
 8018d1a:	d1c8      	bne.n	8018cae <arm_cfft_q31+0x2e>
 8018d1c:	2301      	movs	r3, #1
 8018d1e:	6862      	ldr	r2, [r4, #4]
 8018d20:	0028      	movs	r0, r5
 8018d22:	f000 fab7 	bl	8019294 <arm_radix4_butterfly_inverse_q31>
 8018d26:	e7c2      	b.n	8018cae <arm_cfft_q31+0x2e>
 8018d28:	2380      	movs	r3, #128	@ 0x80
 8018d2a:	009b      	lsls	r3, r3, #2
 8018d2c:	4299      	cmp	r1, r3
 8018d2e:	d0ba      	beq.n	8018ca6 <arm_cfft_q31+0x26>
 8018d30:	e7bd      	b.n	8018cae <arm_cfft_q31+0x2e>
 8018d32:	2910      	cmp	r1, #16
 8018d34:	d1bb      	bne.n	8018cae <arm_cfft_q31+0x2e>
 8018d36:	e7cf      	b.n	8018cd8 <arm_cfft_q31+0x58>
 8018d38:	2380      	movs	r3, #128	@ 0x80
 8018d3a:	009b      	lsls	r3, r3, #2
 8018d3c:	4299      	cmp	r1, r3
 8018d3e:	d0db      	beq.n	8018cf8 <arm_cfft_q31+0x78>
 8018d40:	e7b5      	b.n	8018cae <arm_cfft_q31+0x2e>
 8018d42:	2910      	cmp	r1, #16
 8018d44:	d1b3      	bne.n	8018cae <arm_cfft_q31+0x2e>
 8018d46:	e7e9      	b.n	8018d1c <arm_cfft_q31+0x9c>

08018d48 <arm_radix4_butterfly_q31>:
 8018d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d4a:	464d      	mov	r5, r9
 8018d4c:	4644      	mov	r4, r8
 8018d4e:	465f      	mov	r7, fp
 8018d50:	4656      	mov	r6, sl
 8018d52:	469c      	mov	ip, r3
 8018d54:	b4f0      	push	{r4, r5, r6, r7}
 8018d56:	b0a7      	sub	sp, #156	@ 0x9c
 8018d58:	9114      	str	r1, [sp, #80]	@ 0x50
 8018d5a:	0889      	lsrs	r1, r1, #2
 8018d5c:	9310      	str	r3, [sp, #64]	@ 0x40
 8018d5e:	00cb      	lsls	r3, r1, #3
 8018d60:	0015      	movs	r5, r2
 8018d62:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018d64:	18c2      	adds	r2, r0, r3
 8018d66:	000c      	movs	r4, r1
 8018d68:	469a      	mov	sl, r3
 8018d6a:	9124      	str	r1, [sp, #144]	@ 0x90
 8018d6c:	18d1      	adds	r1, r2, r3
 8018d6e:	4663      	mov	r3, ip
 8018d70:	468b      	mov	fp, r1
 8018d72:	0119      	lsls	r1, r3, #4
 8018d74:	910d      	str	r1, [sp, #52]	@ 0x34
 8018d76:	00d9      	lsls	r1, r3, #3
 8018d78:	005b      	lsls	r3, r3, #1
 8018d7a:	4463      	add	r3, ip
 8018d7c:	910e      	str	r1, [sp, #56]	@ 0x38
 8018d7e:	00d9      	lsls	r1, r3, #3
 8018d80:	465b      	mov	r3, fp
 8018d82:	44da      	add	sl, fp
 8018d84:	4690      	mov	r8, r2
 8018d86:	4683      	mov	fp, r0
 8018d88:	4699      	mov	r9, r3
 8018d8a:	9022      	str	r0, [sp, #136]	@ 0x88
 8018d8c:	9025      	str	r0, [sp, #148]	@ 0x94
 8018d8e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8018d90:	9502      	str	r5, [sp, #8]
 8018d92:	9500      	str	r5, [sp, #0]
 8018d94:	9501      	str	r5, [sp, #4]
 8018d96:	9407      	str	r4, [sp, #28]
 8018d98:	465b      	mov	r3, fp
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	4642      	mov	r2, r8
 8018d9e:	111c      	asrs	r4, r3, #4
 8018da0:	464b      	mov	r3, r9
 8018da2:	4658      	mov	r0, fp
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	6812      	ldr	r2, [r2, #0]
 8018da8:	111b      	asrs	r3, r3, #4
 8018daa:	18e7      	adds	r7, r4, r3
 8018dac:	1ae3      	subs	r3, r4, r3
 8018dae:	1114      	asrs	r4, r2, #4
 8018db0:	4652      	mov	r2, sl
 8018db2:	6840      	ldr	r0, [r0, #4]
 8018db4:	6812      	ldr	r2, [r2, #0]
 8018db6:	1105      	asrs	r5, r0, #4
 8018db8:	4648      	mov	r0, r9
 8018dba:	9303      	str	r3, [sp, #12]
 8018dbc:	1113      	asrs	r3, r2, #4
 8018dbe:	18e2      	adds	r2, r4, r3
 8018dc0:	465c      	mov	r4, fp
 8018dc2:	6840      	ldr	r0, [r0, #4]
 8018dc4:	1103      	asrs	r3, r0, #4
 8018dc6:	18ee      	adds	r6, r5, r3
 8018dc8:	1ae8      	subs	r0, r5, r3
 8018dca:	18bb      	adds	r3, r7, r2
 8018dcc:	6023      	str	r3, [r4, #0]
 8018dce:	4644      	mov	r4, r8
 8018dd0:	6864      	ldr	r4, [r4, #4]
 8018dd2:	9004      	str	r0, [sp, #16]
 8018dd4:	1125      	asrs	r5, r4, #4
 8018dd6:	4654      	mov	r4, sl
 8018dd8:	6864      	ldr	r4, [r4, #4]
 8018dda:	1123      	asrs	r3, r4, #4
 8018ddc:	465c      	mov	r4, fp
 8018dde:	18eb      	adds	r3, r5, r3
 8018de0:	18f1      	adds	r1, r6, r3
 8018de2:	6061      	str	r1, [r4, #4]
 8018de4:	4655      	mov	r5, sl
 8018de6:	4644      	mov	r4, r8
 8018de8:	686d      	ldr	r5, [r5, #4]
 8018dea:	6864      	ldr	r4, [r4, #4]
 8018dec:	1129      	asrs	r1, r5, #4
 8018dee:	1124      	asrs	r4, r4, #4
 8018df0:	1a64      	subs	r4, r4, r1
 8018df2:	4641      	mov	r1, r8
 8018df4:	6809      	ldr	r1, [r1, #0]
 8018df6:	9405      	str	r4, [sp, #20]
 8018df8:	1108      	asrs	r0, r1, #4
 8018dfa:	4651      	mov	r1, sl
 8018dfc:	6809      	ldr	r1, [r1, #0]
 8018dfe:	1abc      	subs	r4, r7, r2
 8018e00:	1109      	asrs	r1, r1, #4
 8018e02:	1a41      	subs	r1, r0, r1
 8018e04:	17e2      	asrs	r2, r4, #31
 8018e06:	9106      	str	r1, [sp, #24]
 8018e08:	0011      	movs	r1, r2
 8018e0a:	9a01      	ldr	r2, [sp, #4]
 8018e0c:	9108      	str	r1, [sp, #32]
 8018e0e:	6817      	ldr	r7, [r2, #0]
 8018e10:	17fd      	asrs	r5, r7, #31
 8018e12:	0028      	movs	r0, r5
 8018e14:	1af5      	subs	r5, r6, r3
 8018e16:	17ee      	asrs	r6, r5, #31
 8018e18:	960a      	str	r6, [sp, #40]	@ 0x28
 8018e1a:	6856      	ldr	r6, [r2, #4]
 8018e1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8018e1e:	17f3      	asrs	r3, r6, #31
 8018e20:	003a      	movs	r2, r7
 8018e22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018e24:	0003      	movs	r3, r0
 8018e26:	0020      	movs	r0, r4
 8018e28:	f7e7 fbc0 	bl	80005ac <__aeabi_lmul>
 8018e2c:	0032      	movs	r2, r6
 8018e2e:	17f3      	asrs	r3, r6, #31
 8018e30:	910c      	str	r1, [sp, #48]	@ 0x30
 8018e32:	0028      	movs	r0, r5
 8018e34:	17e9      	asrs	r1, r5, #31
 8018e36:	f7e7 fbb9 	bl	80005ac <__aeabi_lmul>
 8018e3a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018e3c:	002a      	movs	r2, r5
 8018e3e:	4684      	mov	ip, r0
 8018e40:	4640      	mov	r0, r8
 8018e42:	4461      	add	r1, ip
 8018e44:	0049      	lsls	r1, r1, #1
 8018e46:	6001      	str	r1, [r0, #0]
 8018e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018e4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e4c:	0038      	movs	r0, r7
 8018e4e:	f7e7 fbad 	bl	80005ac <__aeabi_lmul>
 8018e52:	0032      	movs	r2, r6
 8018e54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e56:	000d      	movs	r5, r1
 8018e58:	0020      	movs	r0, r4
 8018e5a:	9908      	ldr	r1, [sp, #32]
 8018e5c:	f7e7 fba6 	bl	80005ac <__aeabi_lmul>
 8018e60:	4646      	mov	r6, r8
 8018e62:	1a6d      	subs	r5, r5, r1
 8018e64:	006d      	lsls	r5, r5, #1
 8018e66:	6075      	str	r5, [r6, #4]
 8018e68:	9903      	ldr	r1, [sp, #12]
 8018e6a:	9d05      	ldr	r5, [sp, #20]
 8018e6c:	000c      	movs	r4, r1
 8018e6e:	46ac      	mov	ip, r5
 8018e70:	4464      	add	r4, ip
 8018e72:	17e6      	asrs	r6, r4, #31
 8018e74:	0031      	movs	r1, r6
 8018e76:	9b00      	ldr	r3, [sp, #0]
 8018e78:	9804      	ldr	r0, [sp, #16]
 8018e7a:	681e      	ldr	r6, [r3, #0]
 8018e7c:	17f7      	asrs	r7, r6, #31
 8018e7e:	9709      	str	r7, [sp, #36]	@ 0x24
 8018e80:	9f06      	ldr	r7, [sp, #24]
 8018e82:	0032      	movs	r2, r6
 8018e84:	1bc7      	subs	r7, r0, r7
 8018e86:	17fd      	asrs	r5, r7, #31
 8018e88:	950a      	str	r5, [sp, #40]	@ 0x28
 8018e8a:	685d      	ldr	r5, [r3, #4]
 8018e8c:	17f3      	asrs	r3, r6, #31
 8018e8e:	17e8      	asrs	r0, r5, #31
 8018e90:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018e92:	0020      	movs	r0, r4
 8018e94:	9108      	str	r1, [sp, #32]
 8018e96:	f7e7 fb89 	bl	80005ac <__aeabi_lmul>
 8018e9a:	002a      	movs	r2, r5
 8018e9c:	17eb      	asrs	r3, r5, #31
 8018e9e:	910c      	str	r1, [sp, #48]	@ 0x30
 8018ea0:	0038      	movs	r0, r7
 8018ea2:	17f9      	asrs	r1, r7, #31
 8018ea4:	f7e7 fb82 	bl	80005ac <__aeabi_lmul>
 8018ea8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018eaa:	003a      	movs	r2, r7
 8018eac:	4684      	mov	ip, r0
 8018eae:	4648      	mov	r0, r9
 8018eb0:	4461      	add	r1, ip
 8018eb2:	0049      	lsls	r1, r1, #1
 8018eb4:	6001      	str	r1, [r0, #0]
 8018eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018eb8:	0030      	movs	r0, r6
 8018eba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018ebc:	f7e7 fb76 	bl	80005ac <__aeabi_lmul>
 8018ec0:	002a      	movs	r2, r5
 8018ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ec4:	000e      	movs	r6, r1
 8018ec6:	0020      	movs	r0, r4
 8018ec8:	9908      	ldr	r1, [sp, #32]
 8018eca:	f7e7 fb6f 	bl	80005ac <__aeabi_lmul>
 8018ece:	464c      	mov	r4, r9
 8018ed0:	9d05      	ldr	r5, [sp, #20]
 8018ed2:	1a76      	subs	r6, r6, r1
 8018ed4:	9903      	ldr	r1, [sp, #12]
 8018ed6:	0076      	lsls	r6, r6, #1
 8018ed8:	6066      	str	r6, [r4, #4]
 8018eda:	1b4c      	subs	r4, r1, r5
 8018edc:	9e06      	ldr	r6, [sp, #24]
 8018ede:	17e1      	asrs	r1, r4, #31
 8018ee0:	9103      	str	r1, [sp, #12]
 8018ee2:	9902      	ldr	r1, [sp, #8]
 8018ee4:	46b4      	mov	ip, r6
 8018ee6:	680f      	ldr	r7, [r1, #0]
 8018ee8:	9804      	ldr	r0, [sp, #16]
 8018eea:	17fd      	asrs	r5, r7, #31
 8018eec:	002b      	movs	r3, r5
 8018eee:	684e      	ldr	r6, [r1, #4]
 8018ef0:	4460      	add	r0, ip
 8018ef2:	0005      	movs	r5, r0
 8018ef4:	17c0      	asrs	r0, r0, #31
 8018ef6:	9005      	str	r0, [sp, #20]
 8018ef8:	17f0      	asrs	r0, r6, #31
 8018efa:	9006      	str	r0, [sp, #24]
 8018efc:	003a      	movs	r2, r7
 8018efe:	0020      	movs	r0, r4
 8018f00:	17e1      	asrs	r1, r4, #31
 8018f02:	9304      	str	r3, [sp, #16]
 8018f04:	f7e7 fb52 	bl	80005ac <__aeabi_lmul>
 8018f08:	0032      	movs	r2, r6
 8018f0a:	9108      	str	r1, [sp, #32]
 8018f0c:	17f3      	asrs	r3, r6, #31
 8018f0e:	0028      	movs	r0, r5
 8018f10:	17e9      	asrs	r1, r5, #31
 8018f12:	f7e7 fb4b 	bl	80005ac <__aeabi_lmul>
 8018f16:	9808      	ldr	r0, [sp, #32]
 8018f18:	002a      	movs	r2, r5
 8018f1a:	4684      	mov	ip, r0
 8018f1c:	4650      	mov	r0, sl
 8018f1e:	4461      	add	r1, ip
 8018f20:	0049      	lsls	r1, r1, #1
 8018f22:	6001      	str	r1, [r0, #0]
 8018f24:	9b05      	ldr	r3, [sp, #20]
 8018f26:	9904      	ldr	r1, [sp, #16]
 8018f28:	0038      	movs	r0, r7
 8018f2a:	f7e7 fb3f 	bl	80005ac <__aeabi_lmul>
 8018f2e:	0020      	movs	r0, r4
 8018f30:	2408      	movs	r4, #8
 8018f32:	000d      	movs	r5, r1
 8018f34:	0032      	movs	r2, r6
 8018f36:	9b06      	ldr	r3, [sp, #24]
 8018f38:	9903      	ldr	r1, [sp, #12]
 8018f3a:	f7e7 fb37 	bl	80005ac <__aeabi_lmul>
 8018f3e:	46a4      	mov	ip, r4
 8018f40:	4650      	mov	r0, sl
 8018f42:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8018f44:	44e3      	add	fp, ip
 8018f46:	44e0      	add	r8, ip
 8018f48:	44e1      	add	r9, ip
 8018f4a:	44e2      	add	sl, ip
 8018f4c:	46a4      	mov	ip, r4
 8018f4e:	1a6d      	subs	r5, r5, r1
 8018f50:	006d      	lsls	r5, r5, #1
 8018f52:	9a01      	ldr	r2, [sp, #4]
 8018f54:	6045      	str	r5, [r0, #4]
 8018f56:	9807      	ldr	r0, [sp, #28]
 8018f58:	4462      	add	r2, ip
 8018f5a:	3801      	subs	r0, #1
 8018f5c:	9201      	str	r2, [sp, #4]
 8018f5e:	9007      	str	r0, [sp, #28]
 8018f60:	9b00      	ldr	r3, [sp, #0]
 8018f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018f64:	9902      	ldr	r1, [sp, #8]
 8018f66:	4694      	mov	ip, r2
 8018f68:	4463      	add	r3, ip
 8018f6a:	9300      	str	r3, [sp, #0]
 8018f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f6e:	469c      	mov	ip, r3
 8018f70:	4461      	add	r1, ip
 8018f72:	9102      	str	r1, [sp, #8]
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d000      	beq.n	8018f7a <arm_radix4_butterfly_q31+0x232>
 8018f78:	e70e      	b.n	8018d98 <arm_radix4_butterfly_q31+0x50>
 8018f7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018f7c:	009b      	lsls	r3, r3, #2
 8018f7e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8018f80:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018f82:	9320      	str	r3, [sp, #128]	@ 0x80
 8018f84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018f86:	2b04      	cmp	r3, #4
 8018f88:	d800      	bhi.n	8018f8c <arm_radix4_butterfly_q31+0x244>
 8018f8a:	e180      	b.n	801928e <arm_radix4_butterfly_q31+0x546>
 8018f8c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018f8e:	0893      	lsrs	r3, r2, #2
 8018f90:	1e59      	subs	r1, r3, #1
 8018f92:	9321      	str	r3, [sp, #132]	@ 0x84
 8018f94:	00db      	lsls	r3, r3, #3
 8018f96:	931b      	str	r3, [sp, #108]	@ 0x6c
 8018f98:	00d3      	lsls	r3, r2, #3
 8018f9a:	9300      	str	r3, [sp, #0]
 8018f9c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8018f9e:	911a      	str	r1, [sp, #104]	@ 0x68
 8018fa0:	00da      	lsls	r2, r3, #3
 8018fa2:	921e      	str	r2, [sp, #120]	@ 0x78
 8018fa4:	011a      	lsls	r2, r3, #4
 8018fa6:	921d      	str	r2, [sp, #116]	@ 0x74
 8018fa8:	001a      	movs	r2, r3
 8018faa:	4694      	mov	ip, r2
 8018fac:	005b      	lsls	r3, r3, #1
 8018fae:	4463      	add	r3, ip
 8018fb0:	00db      	lsls	r3, r3, #3
 8018fb2:	931c      	str	r3, [sp, #112]	@ 0x70
 8018fb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018fb6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018fb8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018fba:	9318      	str	r3, [sp, #96]	@ 0x60
 8018fbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8018fbe:	9316      	str	r3, [sp, #88]	@ 0x58
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	9315      	str	r3, [sp, #84]	@ 0x54
 8018fc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018fc6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018fc8:	681a      	ldr	r2, [r3, #0]
 8018fca:	685b      	ldr	r3, [r3, #4]
 8018fcc:	9205      	str	r2, [sp, #20]
 8018fce:	9306      	str	r3, [sp, #24]
 8018fd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018fd2:	468c      	mov	ip, r1
 8018fd4:	681a      	ldr	r2, [r3, #0]
 8018fd6:	685b      	ldr	r3, [r3, #4]
 8018fd8:	9207      	str	r2, [sp, #28]
 8018fda:	9308      	str	r3, [sp, #32]
 8018fdc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018fde:	681a      	ldr	r2, [r3, #0]
 8018fe0:	685b      	ldr	r3, [r3, #4]
 8018fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8018fe4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fe8:	0013      	movs	r3, r2
 8018fea:	4463      	add	r3, ip
 8018fec:	4698      	mov	r8, r3
 8018fee:	0013      	movs	r3, r2
 8018ff0:	4442      	add	r2, r8
 8018ff2:	4691      	mov	r9, r2
 8018ff4:	001a      	movs	r2, r3
 8018ff6:	444a      	add	r2, r9
 8018ff8:	4692      	mov	sl, r2
 8018ffa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018ffc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018ffe:	4293      	cmp	r3, r2
 8019000:	d800      	bhi.n	8019004 <arm_radix4_butterfly_q31+0x2bc>
 8019002:	e0dd      	b.n	80191c0 <arm_radix4_butterfly_q31+0x478>
 8019004:	4694      	mov	ip, r2
 8019006:	468b      	mov	fp, r1
 8019008:	4644      	mov	r4, r8
 801900a:	4655      	mov	r5, sl
 801900c:	9b07      	ldr	r3, [sp, #28]
 801900e:	17db      	asrs	r3, r3, #31
 8019010:	930c      	str	r3, [sp, #48]	@ 0x30
 8019012:	9b08      	ldr	r3, [sp, #32]
 8019014:	17db      	asrs	r3, r3, #31
 8019016:	930d      	str	r3, [sp, #52]	@ 0x34
 8019018:	9b05      	ldr	r3, [sp, #20]
 801901a:	17db      	asrs	r3, r3, #31
 801901c:	930e      	str	r3, [sp, #56]	@ 0x38
 801901e:	9b06      	ldr	r3, [sp, #24]
 8019020:	17db      	asrs	r3, r3, #31
 8019022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019026:	17db      	asrs	r3, r3, #31
 8019028:	9310      	str	r3, [sp, #64]	@ 0x40
 801902a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801902c:	17db      	asrs	r3, r3, #31
 801902e:	9311      	str	r3, [sp, #68]	@ 0x44
 8019030:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019032:	4463      	add	r3, ip
 8019034:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019036:	465b      	mov	r3, fp
 8019038:	4659      	mov	r1, fp
 801903a:	681a      	ldr	r2, [r3, #0]
 801903c:	464b      	mov	r3, r9
 801903e:	684f      	ldr	r7, [r1, #4]
 8019040:	4649      	mov	r1, r9
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	18d6      	adds	r6, r2, r3
 8019046:	1ad3      	subs	r3, r2, r3
 8019048:	9301      	str	r3, [sp, #4]
 801904a:	684b      	ldr	r3, [r1, #4]
 801904c:	18f8      	adds	r0, r7, r3
 801904e:	1af9      	subs	r1, r7, r3
 8019050:	6827      	ldr	r7, [r4, #0]
 8019052:	9102      	str	r1, [sp, #8]
 8019054:	003a      	movs	r2, r7
 8019056:	682f      	ldr	r7, [r5, #0]
 8019058:	46bc      	mov	ip, r7
 801905a:	465f      	mov	r7, fp
 801905c:	4462      	add	r2, ip
 801905e:	18b3      	adds	r3, r6, r2
 8019060:	109b      	asrs	r3, r3, #2
 8019062:	603b      	str	r3, [r7, #0]
 8019064:	6867      	ldr	r7, [r4, #4]
 8019066:	1ab6      	subs	r6, r6, r2
 8019068:	46b8      	mov	r8, r7
 801906a:	686f      	ldr	r7, [r5, #4]
 801906c:	17f2      	asrs	r2, r6, #31
 801906e:	46bc      	mov	ip, r7
 8019070:	44e0      	add	r8, ip
 8019072:	4643      	mov	r3, r8
 8019074:	465f      	mov	r7, fp
 8019076:	18c1      	adds	r1, r0, r3
 8019078:	1089      	asrs	r1, r1, #2
 801907a:	6079      	str	r1, [r7, #4]
 801907c:	9900      	ldr	r1, [sp, #0]
 801907e:	4690      	mov	r8, r2
 8019080:	468c      	mov	ip, r1
 8019082:	6867      	ldr	r7, [r4, #4]
 8019084:	6869      	ldr	r1, [r5, #4]
 8019086:	44e3      	add	fp, ip
 8019088:	1a7f      	subs	r7, r7, r1
 801908a:	9703      	str	r7, [sp, #12]
 801908c:	6829      	ldr	r1, [r5, #0]
 801908e:	6827      	ldr	r7, [r4, #0]
 8019090:	1a7f      	subs	r7, r7, r1
 8019092:	9704      	str	r7, [sp, #16]
 8019094:	1ac7      	subs	r7, r0, r3
 8019096:	17fa      	asrs	r2, r7, #31
 8019098:	4692      	mov	sl, r2
 801909a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801909c:	9a07      	ldr	r2, [sp, #28]
 801909e:	0030      	movs	r0, r6
 80190a0:	4641      	mov	r1, r8
 80190a2:	f7e7 fa83 	bl	80005ac <__aeabi_lmul>
 80190a6:	9a08      	ldr	r2, [sp, #32]
 80190a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190aa:	9112      	str	r1, [sp, #72]	@ 0x48
 80190ac:	0038      	movs	r0, r7
 80190ae:	4651      	mov	r1, sl
 80190b0:	f7e7 fa7c 	bl	80005ac <__aeabi_lmul>
 80190b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80190b6:	9a07      	ldr	r2, [sp, #28]
 80190b8:	4684      	mov	ip, r0
 80190ba:	4461      	add	r1, ip
 80190bc:	1049      	asrs	r1, r1, #1
 80190be:	6021      	str	r1, [r4, #0]
 80190c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190c2:	0038      	movs	r0, r7
 80190c4:	4651      	mov	r1, sl
 80190c6:	f7e7 fa71 	bl	80005ac <__aeabi_lmul>
 80190ca:	9a08      	ldr	r2, [sp, #32]
 80190cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190ce:	000f      	movs	r7, r1
 80190d0:	0030      	movs	r0, r6
 80190d2:	4641      	mov	r1, r8
 80190d4:	f7e7 fa6a 	bl	80005ac <__aeabi_lmul>
 80190d8:	9b00      	ldr	r3, [sp, #0]
 80190da:	9a01      	ldr	r2, [sp, #4]
 80190dc:	469c      	mov	ip, r3
 80190de:	9803      	ldr	r0, [sp, #12]
 80190e0:	1a7f      	subs	r7, r7, r1
 80190e2:	107f      	asrs	r7, r7, #1
 80190e4:	6067      	str	r7, [r4, #4]
 80190e6:	0016      	movs	r6, r2
 80190e8:	4464      	add	r4, ip
 80190ea:	4684      	mov	ip, r0
 80190ec:	4466      	add	r6, ip
 80190ee:	17f2      	asrs	r2, r6, #31
 80190f0:	4690      	mov	r8, r2
 80190f2:	9902      	ldr	r1, [sp, #8]
 80190f4:	9f04      	ldr	r7, [sp, #16]
 80190f6:	0030      	movs	r0, r6
 80190f8:	1bcf      	subs	r7, r1, r7
 80190fa:	17fa      	asrs	r2, r7, #31
 80190fc:	4692      	mov	sl, r2
 80190fe:	4641      	mov	r1, r8
 8019100:	9a05      	ldr	r2, [sp, #20]
 8019102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019104:	f7e7 fa52 	bl	80005ac <__aeabi_lmul>
 8019108:	9a06      	ldr	r2, [sp, #24]
 801910a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801910c:	9112      	str	r1, [sp, #72]	@ 0x48
 801910e:	0038      	movs	r0, r7
 8019110:	4651      	mov	r1, sl
 8019112:	f7e7 fa4b 	bl	80005ac <__aeabi_lmul>
 8019116:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019118:	9a05      	ldr	r2, [sp, #20]
 801911a:	4684      	mov	ip, r0
 801911c:	4648      	mov	r0, r9
 801911e:	4461      	add	r1, ip
 8019120:	1049      	asrs	r1, r1, #1
 8019122:	6001      	str	r1, [r0, #0]
 8019124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019126:	0038      	movs	r0, r7
 8019128:	4651      	mov	r1, sl
 801912a:	f7e7 fa3f 	bl	80005ac <__aeabi_lmul>
 801912e:	9a06      	ldr	r2, [sp, #24]
 8019130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019132:	000f      	movs	r7, r1
 8019134:	0030      	movs	r0, r6
 8019136:	4641      	mov	r1, r8
 8019138:	f7e7 fa38 	bl	80005ac <__aeabi_lmul>
 801913c:	464e      	mov	r6, r9
 801913e:	9a00      	ldr	r2, [sp, #0]
 8019140:	9b01      	ldr	r3, [sp, #4]
 8019142:	4694      	mov	ip, r2
 8019144:	9803      	ldr	r0, [sp, #12]
 8019146:	1a7f      	subs	r7, r7, r1
 8019148:	107f      	asrs	r7, r7, #1
 801914a:	6077      	str	r7, [r6, #4]
 801914c:	1a1e      	subs	r6, r3, r0
 801914e:	9b04      	ldr	r3, [sp, #16]
 8019150:	44e1      	add	r9, ip
 8019152:	469c      	mov	ip, r3
 8019154:	17f0      	asrs	r0, r6, #31
 8019156:	4680      	mov	r8, r0
 8019158:	9902      	ldr	r1, [sp, #8]
 801915a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801915c:	4461      	add	r1, ip
 801915e:	17cb      	asrs	r3, r1, #31
 8019160:	000f      	movs	r7, r1
 8019162:	469a      	mov	sl, r3
 8019164:	0030      	movs	r0, r6
 8019166:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019168:	4641      	mov	r1, r8
 801916a:	f7e7 fa1f 	bl	80005ac <__aeabi_lmul>
 801916e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019170:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019172:	9101      	str	r1, [sp, #4]
 8019174:	0038      	movs	r0, r7
 8019176:	4651      	mov	r1, sl
 8019178:	f7e7 fa18 	bl	80005ac <__aeabi_lmul>
 801917c:	9801      	ldr	r0, [sp, #4]
 801917e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019180:	4684      	mov	ip, r0
 8019182:	4461      	add	r1, ip
 8019184:	1049      	asrs	r1, r1, #1
 8019186:	6029      	str	r1, [r5, #0]
 8019188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801918a:	0038      	movs	r0, r7
 801918c:	4651      	mov	r1, sl
 801918e:	f7e7 fa0d 	bl	80005ac <__aeabi_lmul>
 8019192:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019194:	000f      	movs	r7, r1
 8019196:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019198:	0030      	movs	r0, r6
 801919a:	4641      	mov	r1, r8
 801919c:	f7e7 fa06 	bl	80005ac <__aeabi_lmul>
 80191a0:	1a7f      	subs	r7, r7, r1
 80191a2:	107f      	asrs	r7, r7, #1
 80191a4:	606f      	str	r7, [r5, #4]
 80191a6:	9a00      	ldr	r2, [sp, #0]
 80191a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80191aa:	4694      	mov	ip, r2
 80191ac:	4465      	add	r5, ip
 80191ae:	468c      	mov	ip, r1
 80191b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80191b2:	0013      	movs	r3, r2
 80191b4:	4462      	add	r2, ip
 80191b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80191b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d900      	bls.n	80191c0 <arm_radix4_butterfly_q31+0x478>
 80191be:	e73a      	b.n	8019036 <arm_radix4_butterfly_q31+0x2ee>
 80191c0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80191c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80191c4:	468c      	mov	ip, r1
 80191c6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80191c8:	4462      	add	r2, ip
 80191ca:	468c      	mov	ip, r1
 80191cc:	9216      	str	r2, [sp, #88]	@ 0x58
 80191ce:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80191d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80191d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80191d4:	4462      	add	r2, ip
 80191d6:	468c      	mov	ip, r1
 80191d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80191da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80191dc:	3301      	adds	r3, #1
 80191de:	4462      	add	r2, ip
 80191e0:	9218      	str	r2, [sp, #96]	@ 0x60
 80191e2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80191e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80191e6:	3208      	adds	r2, #8
 80191e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80191ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80191ec:	4293      	cmp	r3, r2
 80191ee:	d800      	bhi.n	80191f2 <arm_radix4_butterfly_q31+0x4aa>
 80191f0:	e6e8      	b.n	8018fc4 <arm_radix4_butterfly_q31+0x27c>
 80191f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80191f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80191f6:	009b      	lsls	r3, r3, #2
 80191f8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80191fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80191fc:	9213      	str	r2, [sp, #76]	@ 0x4c
 80191fe:	089b      	lsrs	r3, r3, #2
 8019200:	9320      	str	r3, [sp, #128]	@ 0x80
 8019202:	2b04      	cmp	r3, #4
 8019204:	d900      	bls.n	8019208 <arm_radix4_butterfly_q31+0x4c0>
 8019206:	e6c1      	b.n	8018f8c <arm_radix4_butterfly_q31+0x244>
 8019208:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801920a:	469a      	mov	sl, r3
 801920c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801920e:	691c      	ldr	r4, [r3, #16]
 8019210:	685a      	ldr	r2, [r3, #4]
 8019212:	46a1      	mov	r9, r4
 8019214:	4690      	mov	r8, r2
 8019216:	6819      	ldr	r1, [r3, #0]
 8019218:	689a      	ldr	r2, [r3, #8]
 801921a:	699f      	ldr	r7, [r3, #24]
 801921c:	188d      	adds	r5, r1, r2
 801921e:	444d      	add	r5, r9
 8019220:	19ed      	adds	r5, r5, r7
 8019222:	69de      	ldr	r6, [r3, #28]
 8019224:	601d      	str	r5, [r3, #0]
 8019226:	4645      	mov	r5, r8
 8019228:	46b4      	mov	ip, r6
 801922a:	68d8      	ldr	r0, [r3, #12]
 801922c:	695c      	ldr	r4, [r3, #20]
 801922e:	182d      	adds	r5, r5, r0
 8019230:	192d      	adds	r5, r5, r4
 8019232:	4465      	add	r5, ip
 8019234:	605d      	str	r5, [r3, #4]
 8019236:	1a8d      	subs	r5, r1, r2
 8019238:	444d      	add	r5, r9
 801923a:	1bed      	subs	r5, r5, r7
 801923c:	609d      	str	r5, [r3, #8]
 801923e:	4645      	mov	r5, r8
 8019240:	1a2d      	subs	r5, r5, r0
 8019242:	192d      	adds	r5, r5, r4
 8019244:	1bad      	subs	r5, r5, r6
 8019246:	464e      	mov	r6, r9
 8019248:	60dd      	str	r5, [r3, #12]
 801924a:	180d      	adds	r5, r1, r0
 801924c:	1bad      	subs	r5, r5, r6
 801924e:	4666      	mov	r6, ip
 8019250:	1bad      	subs	r5, r5, r6
 8019252:	611d      	str	r5, [r3, #16]
 8019254:	4645      	mov	r5, r8
 8019256:	1aad      	subs	r5, r5, r2
 8019258:	4442      	add	r2, r8
 801925a:	1b12      	subs	r2, r2, r4
 801925c:	1bd2      	subs	r2, r2, r7
 801925e:	1a08      	subs	r0, r1, r0
 8019260:	61da      	str	r2, [r3, #28]
 8019262:	4649      	mov	r1, r9
 8019264:	2201      	movs	r2, #1
 8019266:	1a41      	subs	r1, r0, r1
 8019268:	4252      	negs	r2, r2
 801926a:	4461      	add	r1, ip
 801926c:	4694      	mov	ip, r2
 801926e:	44e2      	add	sl, ip
 8019270:	4652      	mov	r2, sl
 8019272:	1b2d      	subs	r5, r5, r4
 8019274:	19ed      	adds	r5, r5, r7
 8019276:	615d      	str	r5, [r3, #20]
 8019278:	6199      	str	r1, [r3, #24]
 801927a:	3320      	adds	r3, #32
 801927c:	2a00      	cmp	r2, #0
 801927e:	d1c6      	bne.n	801920e <arm_radix4_butterfly_q31+0x4c6>
 8019280:	b027      	add	sp, #156	@ 0x9c
 8019282:	bc3c      	pop	{r2, r3, r4, r5}
 8019284:	4690      	mov	r8, r2
 8019286:	4699      	mov	r9, r3
 8019288:	46a2      	mov	sl, r4
 801928a:	46ab      	mov	fp, r5
 801928c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801928e:	469a      	mov	sl, r3
 8019290:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8019292:	e7bc      	b.n	801920e <arm_radix4_butterfly_q31+0x4c6>

08019294 <arm_radix4_butterfly_inverse_q31>:
 8019294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019296:	464d      	mov	r5, r9
 8019298:	4644      	mov	r4, r8
 801929a:	465f      	mov	r7, fp
 801929c:	4656      	mov	r6, sl
 801929e:	b4f0      	push	{r4, r5, r6, r7}
 80192a0:	b0a7      	sub	sp, #156	@ 0x9c
 80192a2:	469c      	mov	ip, r3
 80192a4:	9114      	str	r1, [sp, #80]	@ 0x50
 80192a6:	0889      	lsrs	r1, r1, #2
 80192a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80192aa:	00cb      	lsls	r3, r1, #3
 80192ac:	0015      	movs	r5, r2
 80192ae:	9223      	str	r2, [sp, #140]	@ 0x8c
 80192b0:	18c2      	adds	r2, r0, r3
 80192b2:	000c      	movs	r4, r1
 80192b4:	9124      	str	r1, [sp, #144]	@ 0x90
 80192b6:	18d1      	adds	r1, r2, r3
 80192b8:	468b      	mov	fp, r1
 80192ba:	469a      	mov	sl, r3
 80192bc:	4663      	mov	r3, ip
 80192be:	44da      	add	sl, fp
 80192c0:	46d0      	mov	r8, sl
 80192c2:	4681      	mov	r9, r0
 80192c4:	4692      	mov	sl, r2
 80192c6:	0119      	lsls	r1, r3, #4
 80192c8:	910d      	str	r1, [sp, #52]	@ 0x34
 80192ca:	00d9      	lsls	r1, r3, #3
 80192cc:	005b      	lsls	r3, r3, #1
 80192ce:	4463      	add	r3, ip
 80192d0:	910e      	str	r1, [sp, #56]	@ 0x38
 80192d2:	00d9      	lsls	r1, r3, #3
 80192d4:	9022      	str	r0, [sp, #136]	@ 0x88
 80192d6:	9025      	str	r0, [sp, #148]	@ 0x94
 80192d8:	910f      	str	r1, [sp, #60]	@ 0x3c
 80192da:	9502      	str	r5, [sp, #8]
 80192dc:	9500      	str	r5, [sp, #0]
 80192de:	9501      	str	r5, [sp, #4]
 80192e0:	9409      	str	r4, [sp, #36]	@ 0x24
 80192e2:	464b      	mov	r3, r9
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	4652      	mov	r2, sl
 80192e8:	111c      	asrs	r4, r3, #4
 80192ea:	465b      	mov	r3, fp
 80192ec:	4648      	mov	r0, r9
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	6812      	ldr	r2, [r2, #0]
 80192f2:	6840      	ldr	r0, [r0, #4]
 80192f4:	111b      	asrs	r3, r3, #4
 80192f6:	18e7      	adds	r7, r4, r3
 80192f8:	1ae3      	subs	r3, r4, r3
 80192fa:	1114      	asrs	r4, r2, #4
 80192fc:	4642      	mov	r2, r8
 80192fe:	1105      	asrs	r5, r0, #4
 8019300:	4658      	mov	r0, fp
 8019302:	6812      	ldr	r2, [r2, #0]
 8019304:	6840      	ldr	r0, [r0, #4]
 8019306:	9303      	str	r3, [sp, #12]
 8019308:	1113      	asrs	r3, r2, #4
 801930a:	18e2      	adds	r2, r4, r3
 801930c:	1103      	asrs	r3, r0, #4
 801930e:	18ee      	adds	r6, r5, r3
 8019310:	1ae8      	subs	r0, r5, r3
 8019312:	464d      	mov	r5, r9
 8019314:	18bb      	adds	r3, r7, r2
 8019316:	602b      	str	r3, [r5, #0]
 8019318:	4641      	mov	r1, r8
 801931a:	4655      	mov	r5, sl
 801931c:	6849      	ldr	r1, [r1, #4]
 801931e:	686d      	ldr	r5, [r5, #4]
 8019320:	110b      	asrs	r3, r1, #4
 8019322:	112d      	asrs	r5, r5, #4
 8019324:	18eb      	adds	r3, r5, r3
 8019326:	464d      	mov	r5, r9
 8019328:	18f1      	adds	r1, r6, r3
 801932a:	6069      	str	r1, [r5, #4]
 801932c:	4655      	mov	r5, sl
 801932e:	686d      	ldr	r5, [r5, #4]
 8019330:	9004      	str	r0, [sp, #16]
 8019332:	112c      	asrs	r4, r5, #4
 8019334:	4645      	mov	r5, r8
 8019336:	686d      	ldr	r5, [r5, #4]
 8019338:	1129      	asrs	r1, r5, #4
 801933a:	1a65      	subs	r5, r4, r1
 801933c:	4651      	mov	r1, sl
 801933e:	6809      	ldr	r1, [r1, #0]
 8019340:	1abc      	subs	r4, r7, r2
 8019342:	1108      	asrs	r0, r1, #4
 8019344:	4641      	mov	r1, r8
 8019346:	17e2      	asrs	r2, r4, #31
 8019348:	6809      	ldr	r1, [r1, #0]
 801934a:	9207      	str	r2, [sp, #28]
 801934c:	9a01      	ldr	r2, [sp, #4]
 801934e:	1109      	asrs	r1, r1, #4
 8019350:	6817      	ldr	r7, [r2, #0]
 8019352:	1a41      	subs	r1, r0, r1
 8019354:	9106      	str	r1, [sp, #24]
 8019356:	0039      	movs	r1, r7
 8019358:	17ff      	asrs	r7, r7, #31
 801935a:	0038      	movs	r0, r7
 801935c:	9505      	str	r5, [sp, #20]
 801935e:	1af5      	subs	r5, r6, r3
 8019360:	17ef      	asrs	r7, r5, #31
 8019362:	970b      	str	r7, [sp, #44]	@ 0x2c
 8019364:	6857      	ldr	r7, [r2, #4]
 8019366:	0003      	movs	r3, r0
 8019368:	17fe      	asrs	r6, r7, #31
 801936a:	000a      	movs	r2, r1
 801936c:	9108      	str	r1, [sp, #32]
 801936e:	900a      	str	r0, [sp, #40]	@ 0x28
 8019370:	17e1      	asrs	r1, r4, #31
 8019372:	0020      	movs	r0, r4
 8019374:	960c      	str	r6, [sp, #48]	@ 0x30
 8019376:	f7e7 f919 	bl	80005ac <__aeabi_lmul>
 801937a:	003a      	movs	r2, r7
 801937c:	17fb      	asrs	r3, r7, #31
 801937e:	000e      	movs	r6, r1
 8019380:	0028      	movs	r0, r5
 8019382:	17e9      	asrs	r1, r5, #31
 8019384:	f7e7 f912 	bl	80005ac <__aeabi_lmul>
 8019388:	4653      	mov	r3, sl
 801938a:	1a76      	subs	r6, r6, r1
 801938c:	0076      	lsls	r6, r6, #1
 801938e:	601e      	str	r6, [r3, #0]
 8019390:	002a      	movs	r2, r5
 8019392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019394:	9808      	ldr	r0, [sp, #32]
 8019396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019398:	f7e7 f908 	bl	80005ac <__aeabi_lmul>
 801939c:	003a      	movs	r2, r7
 801939e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193a0:	000d      	movs	r5, r1
 80193a2:	0020      	movs	r0, r4
 80193a4:	9907      	ldr	r1, [sp, #28]
 80193a6:	f7e7 f901 	bl	80005ac <__aeabi_lmul>
 80193aa:	4657      	mov	r7, sl
 80193ac:	186d      	adds	r5, r5, r1
 80193ae:	006d      	lsls	r5, r5, #1
 80193b0:	607d      	str	r5, [r7, #4]
 80193b2:	9b03      	ldr	r3, [sp, #12]
 80193b4:	9e06      	ldr	r6, [sp, #24]
 80193b6:	9d05      	ldr	r5, [sp, #20]
 80193b8:	46b4      	mov	ip, r6
 80193ba:	1b5d      	subs	r5, r3, r5
 80193bc:	9b00      	ldr	r3, [sp, #0]
 80193be:	17ef      	asrs	r7, r5, #31
 80193c0:	0039      	movs	r1, r7
 80193c2:	681f      	ldr	r7, [r3, #0]
 80193c4:	17fc      	asrs	r4, r7, #31
 80193c6:	0020      	movs	r0, r4
 80193c8:	9c04      	ldr	r4, [sp, #16]
 80193ca:	4464      	add	r4, ip
 80193cc:	17e6      	asrs	r6, r4, #31
 80193ce:	9407      	str	r4, [sp, #28]
 80193d0:	9608      	str	r6, [sp, #32]
 80193d2:	685e      	ldr	r6, [r3, #4]
 80193d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80193d6:	17f2      	asrs	r2, r6, #31
 80193d8:	0003      	movs	r3, r0
 80193da:	920c      	str	r2, [sp, #48]	@ 0x30
 80193dc:	0028      	movs	r0, r5
 80193de:	003a      	movs	r2, r7
 80193e0:	910a      	str	r1, [sp, #40]	@ 0x28
 80193e2:	f7e7 f8e3 	bl	80005ac <__aeabi_lmul>
 80193e6:	0032      	movs	r2, r6
 80193e8:	17f3      	asrs	r3, r6, #31
 80193ea:	9807      	ldr	r0, [sp, #28]
 80193ec:	000c      	movs	r4, r1
 80193ee:	9908      	ldr	r1, [sp, #32]
 80193f0:	f7e7 f8dc 	bl	80005ac <__aeabi_lmul>
 80193f4:	4658      	mov	r0, fp
 80193f6:	1a64      	subs	r4, r4, r1
 80193f8:	0064      	lsls	r4, r4, #1
 80193fa:	9a07      	ldr	r2, [sp, #28]
 80193fc:	6004      	str	r4, [r0, #0]
 80193fe:	9b08      	ldr	r3, [sp, #32]
 8019400:	0038      	movs	r0, r7
 8019402:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019404:	f7e7 f8d2 	bl	80005ac <__aeabi_lmul>
 8019408:	0032      	movs	r2, r6
 801940a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801940c:	000c      	movs	r4, r1
 801940e:	0028      	movs	r0, r5
 8019410:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019412:	f7e7 f8cb 	bl	80005ac <__aeabi_lmul>
 8019416:	9d05      	ldr	r5, [sp, #20]
 8019418:	465f      	mov	r7, fp
 801941a:	46ac      	mov	ip, r5
 801941c:	1864      	adds	r4, r4, r1
 801941e:	9903      	ldr	r1, [sp, #12]
 8019420:	0064      	lsls	r4, r4, #1
 8019422:	4461      	add	r1, ip
 8019424:	607c      	str	r4, [r7, #4]
 8019426:	000c      	movs	r4, r1
 8019428:	17c9      	asrs	r1, r1, #31
 801942a:	9105      	str	r1, [sp, #20]
 801942c:	9902      	ldr	r1, [sp, #8]
 801942e:	9804      	ldr	r0, [sp, #16]
 8019430:	680d      	ldr	r5, [r1, #0]
 8019432:	9e06      	ldr	r6, [sp, #24]
 8019434:	002b      	movs	r3, r5
 8019436:	17ed      	asrs	r5, r5, #31
 8019438:	684f      	ldr	r7, [r1, #4]
 801943a:	9503      	str	r5, [sp, #12]
 801943c:	1b85      	subs	r5, r0, r6
 801943e:	17e8      	asrs	r0, r5, #31
 8019440:	001a      	movs	r2, r3
 8019442:	9006      	str	r0, [sp, #24]
 8019444:	17fe      	asrs	r6, r7, #31
 8019446:	9304      	str	r3, [sp, #16]
 8019448:	0020      	movs	r0, r4
 801944a:	9b03      	ldr	r3, [sp, #12]
 801944c:	17e1      	asrs	r1, r4, #31
 801944e:	9607      	str	r6, [sp, #28]
 8019450:	f7e7 f8ac 	bl	80005ac <__aeabi_lmul>
 8019454:	003a      	movs	r2, r7
 8019456:	000e      	movs	r6, r1
 8019458:	17fb      	asrs	r3, r7, #31
 801945a:	0028      	movs	r0, r5
 801945c:	17e9      	asrs	r1, r5, #31
 801945e:	f7e7 f8a5 	bl	80005ac <__aeabi_lmul>
 8019462:	4640      	mov	r0, r8
 8019464:	1a76      	subs	r6, r6, r1
 8019466:	0076      	lsls	r6, r6, #1
 8019468:	002a      	movs	r2, r5
 801946a:	9b06      	ldr	r3, [sp, #24]
 801946c:	6006      	str	r6, [r0, #0]
 801946e:	9903      	ldr	r1, [sp, #12]
 8019470:	9804      	ldr	r0, [sp, #16]
 8019472:	f7e7 f89b 	bl	80005ac <__aeabi_lmul>
 8019476:	0020      	movs	r0, r4
 8019478:	2408      	movs	r4, #8
 801947a:	9b07      	ldr	r3, [sp, #28]
 801947c:	000d      	movs	r5, r1
 801947e:	003a      	movs	r2, r7
 8019480:	9905      	ldr	r1, [sp, #20]
 8019482:	f7e7 f893 	bl	80005ac <__aeabi_lmul>
 8019486:	4640      	mov	r0, r8
 8019488:	46a4      	mov	ip, r4
 801948a:	186d      	adds	r5, r5, r1
 801948c:	006d      	lsls	r5, r5, #1
 801948e:	6045      	str	r5, [r0, #4]
 8019490:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019492:	44e1      	add	r9, ip
 8019494:	3801      	subs	r0, #1
 8019496:	9009      	str	r0, [sp, #36]	@ 0x24
 8019498:	9a01      	ldr	r2, [sp, #4]
 801949a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801949c:	44e2      	add	sl, ip
 801949e:	44e3      	add	fp, ip
 80194a0:	44e0      	add	r8, ip
 80194a2:	46a4      	mov	ip, r4
 80194a4:	4462      	add	r2, ip
 80194a6:	9201      	str	r2, [sp, #4]
 80194a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194aa:	9b00      	ldr	r3, [sp, #0]
 80194ac:	4694      	mov	ip, r2
 80194ae:	4463      	add	r3, ip
 80194b0:	9300      	str	r3, [sp, #0]
 80194b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80194b4:	9902      	ldr	r1, [sp, #8]
 80194b6:	469c      	mov	ip, r3
 80194b8:	4461      	add	r1, ip
 80194ba:	9102      	str	r1, [sp, #8]
 80194bc:	2800      	cmp	r0, #0
 80194be:	d000      	beq.n	80194c2 <arm_radix4_butterfly_inverse_q31+0x22e>
 80194c0:	e70f      	b.n	80192e2 <arm_radix4_butterfly_inverse_q31+0x4e>
 80194c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80194c4:	009b      	lsls	r3, r3, #2
 80194c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80194c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80194ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80194cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80194ce:	2b04      	cmp	r3, #4
 80194d0:	d800      	bhi.n	80194d4 <arm_radix4_butterfly_inverse_q31+0x240>
 80194d2:	e17c      	b.n	80197ce <arm_radix4_butterfly_inverse_q31+0x53a>
 80194d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80194d6:	0893      	lsrs	r3, r2, #2
 80194d8:	1e59      	subs	r1, r3, #1
 80194da:	9321      	str	r3, [sp, #132]	@ 0x84
 80194dc:	00db      	lsls	r3, r3, #3
 80194de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80194e0:	00d3      	lsls	r3, r2, #3
 80194e2:	9300      	str	r3, [sp, #0]
 80194e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80194e6:	911a      	str	r1, [sp, #104]	@ 0x68
 80194e8:	00da      	lsls	r2, r3, #3
 80194ea:	921e      	str	r2, [sp, #120]	@ 0x78
 80194ec:	011a      	lsls	r2, r3, #4
 80194ee:	921d      	str	r2, [sp, #116]	@ 0x74
 80194f0:	001a      	movs	r2, r3
 80194f2:	4694      	mov	ip, r2
 80194f4:	005b      	lsls	r3, r3, #1
 80194f6:	4463      	add	r3, ip
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80194fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80194fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019500:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019502:	9318      	str	r3, [sp, #96]	@ 0x60
 8019504:	9319      	str	r3, [sp, #100]	@ 0x64
 8019506:	9316      	str	r3, [sp, #88]	@ 0x58
 8019508:	2300      	movs	r3, #0
 801950a:	9315      	str	r3, [sp, #84]	@ 0x54
 801950c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801950e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8019510:	681a      	ldr	r2, [r3, #0]
 8019512:	685b      	ldr	r3, [r3, #4]
 8019514:	9205      	str	r2, [sp, #20]
 8019516:	9306      	str	r3, [sp, #24]
 8019518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801951a:	468c      	mov	ip, r1
 801951c:	681a      	ldr	r2, [r3, #0]
 801951e:	685b      	ldr	r3, [r3, #4]
 8019520:	9207      	str	r2, [sp, #28]
 8019522:	9308      	str	r3, [sp, #32]
 8019524:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019526:	681a      	ldr	r2, [r3, #0]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	9209      	str	r2, [sp, #36]	@ 0x24
 801952c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801952e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019530:	0013      	movs	r3, r2
 8019532:	4463      	add	r3, ip
 8019534:	4698      	mov	r8, r3
 8019536:	0013      	movs	r3, r2
 8019538:	4442      	add	r2, r8
 801953a:	4691      	mov	r9, r2
 801953c:	001a      	movs	r2, r3
 801953e:	444a      	add	r2, r9
 8019540:	4692      	mov	sl, r2
 8019542:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019544:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019546:	4293      	cmp	r3, r2
 8019548:	d800      	bhi.n	801954c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801954a:	e0d9      	b.n	8019700 <arm_radix4_butterfly_inverse_q31+0x46c>
 801954c:	4694      	mov	ip, r2
 801954e:	4644      	mov	r4, r8
 8019550:	4655      	mov	r5, sl
 8019552:	4688      	mov	r8, r1
 8019554:	9b07      	ldr	r3, [sp, #28]
 8019556:	17db      	asrs	r3, r3, #31
 8019558:	930c      	str	r3, [sp, #48]	@ 0x30
 801955a:	9b08      	ldr	r3, [sp, #32]
 801955c:	17db      	asrs	r3, r3, #31
 801955e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019560:	9b05      	ldr	r3, [sp, #20]
 8019562:	17db      	asrs	r3, r3, #31
 8019564:	930e      	str	r3, [sp, #56]	@ 0x38
 8019566:	9b06      	ldr	r3, [sp, #24]
 8019568:	17db      	asrs	r3, r3, #31
 801956a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801956c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801956e:	17db      	asrs	r3, r3, #31
 8019570:	9310      	str	r3, [sp, #64]	@ 0x40
 8019572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019574:	17db      	asrs	r3, r3, #31
 8019576:	9311      	str	r3, [sp, #68]	@ 0x44
 8019578:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801957a:	4463      	add	r3, ip
 801957c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801957e:	4643      	mov	r3, r8
 8019580:	4641      	mov	r1, r8
 8019582:	681a      	ldr	r2, [r3, #0]
 8019584:	464b      	mov	r3, r9
 8019586:	684f      	ldr	r7, [r1, #4]
 8019588:	4649      	mov	r1, r9
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	18d6      	adds	r6, r2, r3
 801958e:	1ad3      	subs	r3, r2, r3
 8019590:	9301      	str	r3, [sp, #4]
 8019592:	684b      	ldr	r3, [r1, #4]
 8019594:	1af9      	subs	r1, r7, r3
 8019596:	9102      	str	r1, [sp, #8]
 8019598:	6829      	ldr	r1, [r5, #0]
 801959a:	18f8      	adds	r0, r7, r3
 801959c:	468c      	mov	ip, r1
 801959e:	6827      	ldr	r7, [r4, #0]
 80195a0:	4467      	add	r7, ip
 80195a2:	003a      	movs	r2, r7
 80195a4:	19f3      	adds	r3, r6, r7
 80195a6:	4647      	mov	r7, r8
 80195a8:	109b      	asrs	r3, r3, #2
 80195aa:	603b      	str	r3, [r7, #0]
 80195ac:	6869      	ldr	r1, [r5, #4]
 80195ae:	6867      	ldr	r7, [r4, #4]
 80195b0:	468c      	mov	ip, r1
 80195b2:	4467      	add	r7, ip
 80195b4:	003b      	movs	r3, r7
 80195b6:	19c1      	adds	r1, r0, r7
 80195b8:	4647      	mov	r7, r8
 80195ba:	1ab6      	subs	r6, r6, r2
 80195bc:	1089      	asrs	r1, r1, #2
 80195be:	6079      	str	r1, [r7, #4]
 80195c0:	17f2      	asrs	r2, r6, #31
 80195c2:	9900      	ldr	r1, [sp, #0]
 80195c4:	4692      	mov	sl, r2
 80195c6:	468c      	mov	ip, r1
 80195c8:	6867      	ldr	r7, [r4, #4]
 80195ca:	6869      	ldr	r1, [r5, #4]
 80195cc:	44e0      	add	r8, ip
 80195ce:	1a7f      	subs	r7, r7, r1
 80195d0:	9703      	str	r7, [sp, #12]
 80195d2:	6821      	ldr	r1, [r4, #0]
 80195d4:	682f      	ldr	r7, [r5, #0]
 80195d6:	1bc9      	subs	r1, r1, r7
 80195d8:	1ac7      	subs	r7, r0, r3
 80195da:	17fa      	asrs	r2, r7, #31
 80195dc:	4693      	mov	fp, r2
 80195de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80195e0:	9a07      	ldr	r2, [sp, #28]
 80195e2:	9104      	str	r1, [sp, #16]
 80195e4:	0030      	movs	r0, r6
 80195e6:	4651      	mov	r1, sl
 80195e8:	f7e6 ffe0 	bl	80005ac <__aeabi_lmul>
 80195ec:	9a08      	ldr	r2, [sp, #32]
 80195ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80195f0:	9112      	str	r1, [sp, #72]	@ 0x48
 80195f2:	0038      	movs	r0, r7
 80195f4:	4659      	mov	r1, fp
 80195f6:	f7e6 ffd9 	bl	80005ac <__aeabi_lmul>
 80195fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80195fc:	9a07      	ldr	r2, [sp, #28]
 80195fe:	1a41      	subs	r1, r0, r1
 8019600:	1049      	asrs	r1, r1, #1
 8019602:	6021      	str	r1, [r4, #0]
 8019604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019606:	0038      	movs	r0, r7
 8019608:	4659      	mov	r1, fp
 801960a:	f7e6 ffcf 	bl	80005ac <__aeabi_lmul>
 801960e:	9a08      	ldr	r2, [sp, #32]
 8019610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019612:	000f      	movs	r7, r1
 8019614:	0030      	movs	r0, r6
 8019616:	4651      	mov	r1, sl
 8019618:	f7e6 ffc8 	bl	80005ac <__aeabi_lmul>
 801961c:	9b00      	ldr	r3, [sp, #0]
 801961e:	187f      	adds	r7, r7, r1
 8019620:	469c      	mov	ip, r3
 8019622:	107f      	asrs	r7, r7, #1
 8019624:	6067      	str	r7, [r4, #4]
 8019626:	9a01      	ldr	r2, [sp, #4]
 8019628:	9f03      	ldr	r7, [sp, #12]
 801962a:	9802      	ldr	r0, [sp, #8]
 801962c:	1bd7      	subs	r7, r2, r7
 801962e:	17fe      	asrs	r6, r7, #31
 8019630:	0031      	movs	r1, r6
 8019632:	9e04      	ldr	r6, [sp, #16]
 8019634:	4682      	mov	sl, r0
 8019636:	4464      	add	r4, ip
 8019638:	46b4      	mov	ip, r6
 801963a:	44e2      	add	sl, ip
 801963c:	4652      	mov	r2, sl
 801963e:	17d2      	asrs	r2, r2, #31
 8019640:	4693      	mov	fp, r2
 8019642:	0038      	movs	r0, r7
 8019644:	9a05      	ldr	r2, [sp, #20]
 8019646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019648:	9112      	str	r1, [sp, #72]	@ 0x48
 801964a:	f7e6 ffaf 	bl	80005ac <__aeabi_lmul>
 801964e:	9a06      	ldr	r2, [sp, #24]
 8019650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019652:	000e      	movs	r6, r1
 8019654:	4650      	mov	r0, sl
 8019656:	4659      	mov	r1, fp
 8019658:	f7e6 ffa8 	bl	80005ac <__aeabi_lmul>
 801965c:	4648      	mov	r0, r9
 801965e:	1a76      	subs	r6, r6, r1
 8019660:	1076      	asrs	r6, r6, #1
 8019662:	6006      	str	r6, [r0, #0]
 8019664:	9a05      	ldr	r2, [sp, #20]
 8019666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019668:	4650      	mov	r0, sl
 801966a:	4659      	mov	r1, fp
 801966c:	f7e6 ff9e 	bl	80005ac <__aeabi_lmul>
 8019670:	9a06      	ldr	r2, [sp, #24]
 8019672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019674:	000e      	movs	r6, r1
 8019676:	0038      	movs	r0, r7
 8019678:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801967a:	f7e6 ff97 	bl	80005ac <__aeabi_lmul>
 801967e:	9a00      	ldr	r2, [sp, #0]
 8019680:	9f03      	ldr	r7, [sp, #12]
 8019682:	4694      	mov	ip, r2
 8019684:	1876      	adds	r6, r6, r1
 8019686:	4649      	mov	r1, r9
 8019688:	44e1      	add	r9, ip
 801968a:	46bc      	mov	ip, r7
 801968c:	9b01      	ldr	r3, [sp, #4]
 801968e:	1076      	asrs	r6, r6, #1
 8019690:	4463      	add	r3, ip
 8019692:	17df      	asrs	r7, r3, #31
 8019694:	604e      	str	r6, [r1, #4]
 8019696:	46ba      	mov	sl, r7
 8019698:	001e      	movs	r6, r3
 801969a:	9802      	ldr	r0, [sp, #8]
 801969c:	9b04      	ldr	r3, [sp, #16]
 801969e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196a0:	1ac7      	subs	r7, r0, r3
 80196a2:	17fb      	asrs	r3, r7, #31
 80196a4:	469b      	mov	fp, r3
 80196a6:	0030      	movs	r0, r6
 80196a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80196aa:	4651      	mov	r1, sl
 80196ac:	f7e6 ff7e 	bl	80005ac <__aeabi_lmul>
 80196b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80196b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80196b4:	9101      	str	r1, [sp, #4]
 80196b6:	0038      	movs	r0, r7
 80196b8:	4659      	mov	r1, fp
 80196ba:	f7e6 ff77 	bl	80005ac <__aeabi_lmul>
 80196be:	9801      	ldr	r0, [sp, #4]
 80196c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196c2:	1a41      	subs	r1, r0, r1
 80196c4:	1049      	asrs	r1, r1, #1
 80196c6:	6029      	str	r1, [r5, #0]
 80196c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80196ca:	0038      	movs	r0, r7
 80196cc:	4659      	mov	r1, fp
 80196ce:	f7e6 ff6d 	bl	80005ac <__aeabi_lmul>
 80196d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80196d4:	000f      	movs	r7, r1
 80196d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80196d8:	0030      	movs	r0, r6
 80196da:	4651      	mov	r1, sl
 80196dc:	f7e6 ff66 	bl	80005ac <__aeabi_lmul>
 80196e0:	187f      	adds	r7, r7, r1
 80196e2:	107f      	asrs	r7, r7, #1
 80196e4:	606f      	str	r7, [r5, #4]
 80196e6:	9a00      	ldr	r2, [sp, #0]
 80196e8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80196ea:	4694      	mov	ip, r2
 80196ec:	4465      	add	r5, ip
 80196ee:	468c      	mov	ip, r1
 80196f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80196f2:	0013      	movs	r3, r2
 80196f4:	4462      	add	r2, ip
 80196f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80196f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80196fa:	429a      	cmp	r2, r3
 80196fc:	d900      	bls.n	8019700 <arm_radix4_butterfly_inverse_q31+0x46c>
 80196fe:	e73e      	b.n	801957e <arm_radix4_butterfly_inverse_q31+0x2ea>
 8019700:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019702:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019704:	468c      	mov	ip, r1
 8019706:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8019708:	4462      	add	r2, ip
 801970a:	468c      	mov	ip, r1
 801970c:	9216      	str	r2, [sp, #88]	@ 0x58
 801970e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8019710:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019712:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019714:	4462      	add	r2, ip
 8019716:	468c      	mov	ip, r1
 8019718:	9219      	str	r2, [sp, #100]	@ 0x64
 801971a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801971c:	3301      	adds	r3, #1
 801971e:	4462      	add	r2, ip
 8019720:	9218      	str	r2, [sp, #96]	@ 0x60
 8019722:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019724:	9315      	str	r3, [sp, #84]	@ 0x54
 8019726:	3208      	adds	r2, #8
 8019728:	9217      	str	r2, [sp, #92]	@ 0x5c
 801972a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801972c:	4293      	cmp	r3, r2
 801972e:	d800      	bhi.n	8019732 <arm_radix4_butterfly_inverse_q31+0x49e>
 8019730:	e6ec      	b.n	801950c <arm_radix4_butterfly_inverse_q31+0x278>
 8019732:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019734:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	931f      	str	r3, [sp, #124]	@ 0x7c
 801973a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801973c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801973e:	089b      	lsrs	r3, r3, #2
 8019740:	9320      	str	r3, [sp, #128]	@ 0x80
 8019742:	2b04      	cmp	r3, #4
 8019744:	d900      	bls.n	8019748 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8019746:	e6c5      	b.n	80194d4 <arm_radix4_butterfly_inverse_q31+0x240>
 8019748:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801974a:	469a      	mov	sl, r3
 801974c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801974e:	681a      	ldr	r2, [r3, #0]
 8019750:	6918      	ldr	r0, [r3, #16]
 8019752:	4691      	mov	r9, r2
 8019754:	464c      	mov	r4, r9
 8019756:	4680      	mov	r8, r0
 8019758:	69de      	ldr	r6, [r3, #28]
 801975a:	689d      	ldr	r5, [r3, #8]
 801975c:	46b4      	mov	ip, r6
 801975e:	6998      	ldr	r0, [r3, #24]
 8019760:	1964      	adds	r4, r4, r5
 8019762:	6859      	ldr	r1, [r3, #4]
 8019764:	68da      	ldr	r2, [r3, #12]
 8019766:	4444      	add	r4, r8
 8019768:	695f      	ldr	r7, [r3, #20]
 801976a:	1824      	adds	r4, r4, r0
 801976c:	601c      	str	r4, [r3, #0]
 801976e:	188c      	adds	r4, r1, r2
 8019770:	19e4      	adds	r4, r4, r7
 8019772:	4464      	add	r4, ip
 8019774:	605c      	str	r4, [r3, #4]
 8019776:	464c      	mov	r4, r9
 8019778:	1b64      	subs	r4, r4, r5
 801977a:	4444      	add	r4, r8
 801977c:	1a24      	subs	r4, r4, r0
 801977e:	609c      	str	r4, [r3, #8]
 8019780:	1a8c      	subs	r4, r1, r2
 8019782:	19e4      	adds	r4, r4, r7
 8019784:	1ba4      	subs	r4, r4, r6
 8019786:	60dc      	str	r4, [r3, #12]
 8019788:	464c      	mov	r4, r9
 801978a:	4646      	mov	r6, r8
 801978c:	1aa4      	subs	r4, r4, r2
 801978e:	1ba4      	subs	r4, r4, r6
 8019790:	4464      	add	r4, ip
 8019792:	611c      	str	r4, [r3, #16]
 8019794:	194c      	adds	r4, r1, r5
 8019796:	1be4      	subs	r4, r4, r7
 8019798:	1a24      	subs	r4, r4, r0
 801979a:	615c      	str	r4, [r3, #20]
 801979c:	4644      	mov	r4, r8
 801979e:	4666      	mov	r6, ip
 80197a0:	444a      	add	r2, r9
 80197a2:	1b12      	subs	r2, r2, r4
 80197a4:	1b92      	subs	r2, r2, r6
 80197a6:	619a      	str	r2, [r3, #24]
 80197a8:	1b4a      	subs	r2, r1, r5
 80197aa:	1bd1      	subs	r1, r2, r7
 80197ac:	2201      	movs	r2, #1
 80197ae:	4252      	negs	r2, r2
 80197b0:	4694      	mov	ip, r2
 80197b2:	44e2      	add	sl, ip
 80197b4:	4652      	mov	r2, sl
 80197b6:	1809      	adds	r1, r1, r0
 80197b8:	61d9      	str	r1, [r3, #28]
 80197ba:	3320      	adds	r3, #32
 80197bc:	2a00      	cmp	r2, #0
 80197be:	d1c6      	bne.n	801974e <arm_radix4_butterfly_inverse_q31+0x4ba>
 80197c0:	b027      	add	sp, #156	@ 0x9c
 80197c2:	bc3c      	pop	{r2, r3, r4, r5}
 80197c4:	4690      	mov	r8, r2
 80197c6:	4699      	mov	r9, r3
 80197c8:	46a2      	mov	sl, r4
 80197ca:	46ab      	mov	fp, r5
 80197cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197ce:	469a      	mov	sl, r3
 80197d0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80197d2:	e7bc      	b.n	801974e <arm_radix4_butterfly_inverse_q31+0x4ba>

080197d4 <arm_cmplx_mag_squared_q31>:
 80197d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197d6:	464f      	mov	r7, r9
 80197d8:	4646      	mov	r6, r8
 80197da:	0004      	movs	r4, r0
 80197dc:	b4c0      	push	{r6, r7}
 80197de:	0016      	movs	r6, r2
 80197e0:	000f      	movs	r7, r1
 80197e2:	2a00      	cmp	r2, #0
 80197e4:	d018      	beq.n	8019818 <arm_cmplx_mag_squared_q31+0x44>
 80197e6:	6823      	ldr	r3, [r4, #0]
 80197e8:	6822      	ldr	r2, [r4, #0]
 80197ea:	17d9      	asrs	r1, r3, #31
 80197ec:	6863      	ldr	r3, [r4, #4]
 80197ee:	0010      	movs	r0, r2
 80197f0:	4698      	mov	r8, r3
 80197f2:	17db      	asrs	r3, r3, #31
 80197f4:	4699      	mov	r9, r3
 80197f6:	000b      	movs	r3, r1
 80197f8:	f7e6 fed8 	bl	80005ac <__aeabi_lmul>
 80197fc:	4642      	mov	r2, r8
 80197fe:	104d      	asrs	r5, r1, #1
 8019800:	464b      	mov	r3, r9
 8019802:	4640      	mov	r0, r8
 8019804:	4649      	mov	r1, r9
 8019806:	f7e6 fed1 	bl	80005ac <__aeabi_lmul>
 801980a:	1049      	asrs	r1, r1, #1
 801980c:	1869      	adds	r1, r5, r1
 801980e:	3e01      	subs	r6, #1
 8019810:	c702      	stmia	r7!, {r1}
 8019812:	3408      	adds	r4, #8
 8019814:	2e00      	cmp	r6, #0
 8019816:	d1e6      	bne.n	80197e6 <arm_cmplx_mag_squared_q31+0x12>
 8019818:	bc0c      	pop	{r2, r3}
 801981a:	4690      	mov	r8, r2
 801981c:	4699      	mov	r9, r3
 801981e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019820 <arm_mult_q31>:
 8019820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019822:	4646      	mov	r6, r8
 8019824:	464f      	mov	r7, r9
 8019826:	4690      	mov	r8, r2
 8019828:	b4c0      	push	{r6, r7}
 801982a:	001d      	movs	r5, r3
 801982c:	0006      	movs	r6, r0
 801982e:	000f      	movs	r7, r1
 8019830:	2400      	movs	r4, #0
 8019832:	2b00      	cmp	r3, #0
 8019834:	d020      	beq.n	8019878 <arm_mult_q31+0x58>
 8019836:	4b12      	ldr	r3, [pc, #72]	@ (8019880 <arm_mult_q31+0x60>)
 8019838:	4699      	mov	r9, r3
 801983a:	e007      	b.n	801984c <arm_mult_q31+0x2c>
 801983c:	464b      	mov	r3, r9
 801983e:	4059      	eors	r1, r3
 8019840:	4643      	mov	r3, r8
 8019842:	3d01      	subs	r5, #1
 8019844:	5119      	str	r1, [r3, r4]
 8019846:	3404      	adds	r4, #4
 8019848:	2d00      	cmp	r5, #0
 801984a:	d015      	beq.n	8019878 <arm_mult_q31+0x58>
 801984c:	5933      	ldr	r3, [r6, r4]
 801984e:	593a      	ldr	r2, [r7, r4]
 8019850:	17d9      	asrs	r1, r3, #31
 8019852:	593b      	ldr	r3, [r7, r4]
 8019854:	5930      	ldr	r0, [r6, r4]
 8019856:	17db      	asrs	r3, r3, #31
 8019858:	f7e6 fea8 	bl	80005ac <__aeabi_lmul>
 801985c:	004b      	lsls	r3, r1, #1
 801985e:	0fc0      	lsrs	r0, r0, #31
 8019860:	4318      	orrs	r0, r3
 8019862:	17c9      	asrs	r1, r1, #31
 8019864:	17c3      	asrs	r3, r0, #31
 8019866:	428b      	cmp	r3, r1
 8019868:	d1e8      	bne.n	801983c <arm_mult_q31+0x1c>
 801986a:	0001      	movs	r1, r0
 801986c:	4643      	mov	r3, r8
 801986e:	3d01      	subs	r5, #1
 8019870:	5119      	str	r1, [r3, r4]
 8019872:	3404      	adds	r4, #4
 8019874:	2d00      	cmp	r5, #0
 8019876:	d1e9      	bne.n	801984c <arm_mult_q31+0x2c>
 8019878:	bc0c      	pop	{r2, r3}
 801987a:	4690      	mov	r8, r2
 801987c:	4699      	mov	r9, r3
 801987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019880:	7fffffff 	.word	0x7fffffff

08019884 <arm_add_q31>:
 8019884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019886:	465f      	mov	r7, fp
 8019888:	4656      	mov	r6, sl
 801988a:	464d      	mov	r5, r9
 801988c:	4644      	mov	r4, r8
 801988e:	b4f0      	push	{r4, r5, r6, r7}
 8019890:	4693      	mov	fp, r2
 8019892:	b083      	sub	sp, #12
 8019894:	4681      	mov	r9, r0
 8019896:	468a      	mov	sl, r1
 8019898:	4698      	mov	r8, r3
 801989a:	2200      	movs	r2, #0
 801989c:	2b00      	cmp	r3, #0
 801989e:	d020      	beq.n	80198e2 <arm_add_q31+0x5e>
 80198a0:	4649      	mov	r1, r9
 80198a2:	4653      	mov	r3, sl
 80198a4:	588e      	ldr	r6, [r1, r2]
 80198a6:	589b      	ldr	r3, [r3, r2]
 80198a8:	17f7      	asrs	r7, r6, #31
 80198aa:	001c      	movs	r4, r3
 80198ac:	0030      	movs	r0, r6
 80198ae:	0039      	movs	r1, r7
 80198b0:	17dd      	asrs	r5, r3, #31
 80198b2:	46b4      	mov	ip, r6
 80198b4:	1900      	adds	r0, r0, r4
 80198b6:	4169      	adcs	r1, r5
 80198b8:	4463      	add	r3, ip
 80198ba:	9000      	str	r0, [sp, #0]
 80198bc:	9101      	str	r1, [sp, #4]
 80198be:	17d9      	asrs	r1, r3, #31
 80198c0:	468c      	mov	ip, r1
 80198c2:	9901      	ldr	r1, [sp, #4]
 80198c4:	458c      	cmp	ip, r1
 80198c6:	d002      	beq.n	80198ce <arm_add_q31+0x4a>
 80198c8:	17cb      	asrs	r3, r1, #31
 80198ca:	4909      	ldr	r1, [pc, #36]	@ (80198f0 <arm_add_q31+0x6c>)
 80198cc:	404b      	eors	r3, r1
 80198ce:	4659      	mov	r1, fp
 80198d0:	508b      	str	r3, [r1, r2]
 80198d2:	2301      	movs	r3, #1
 80198d4:	425b      	negs	r3, r3
 80198d6:	469c      	mov	ip, r3
 80198d8:	44e0      	add	r8, ip
 80198da:	4643      	mov	r3, r8
 80198dc:	3204      	adds	r2, #4
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d1de      	bne.n	80198a0 <arm_add_q31+0x1c>
 80198e2:	b003      	add	sp, #12
 80198e4:	bc3c      	pop	{r2, r3, r4, r5}
 80198e6:	4690      	mov	r8, r2
 80198e8:	4699      	mov	r9, r3
 80198ea:	46a2      	mov	sl, r4
 80198ec:	46ab      	mov	fp, r5
 80198ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198f0:	7fffffff 	.word	0x7fffffff

080198f4 <atof>:
 80198f4:	b510      	push	{r4, lr}
 80198f6:	2100      	movs	r1, #0
 80198f8:	f000 fe0c 	bl	801a514 <strtod>
 80198fc:	bd10      	pop	{r4, pc}
	...

08019900 <sulp>:
 8019900:	b570      	push	{r4, r5, r6, lr}
 8019902:	0016      	movs	r6, r2
 8019904:	000d      	movs	r5, r1
 8019906:	f003 fb5d 	bl	801cfc4 <__ulp>
 801990a:	2e00      	cmp	r6, #0
 801990c:	d00d      	beq.n	801992a <sulp+0x2a>
 801990e:	236b      	movs	r3, #107	@ 0x6b
 8019910:	006a      	lsls	r2, r5, #1
 8019912:	0d52      	lsrs	r2, r2, #21
 8019914:	1a9b      	subs	r3, r3, r2
 8019916:	2b00      	cmp	r3, #0
 8019918:	dd07      	ble.n	801992a <sulp+0x2a>
 801991a:	2400      	movs	r4, #0
 801991c:	4a03      	ldr	r2, [pc, #12]	@ (801992c <sulp+0x2c>)
 801991e:	051b      	lsls	r3, r3, #20
 8019920:	189d      	adds	r5, r3, r2
 8019922:	002b      	movs	r3, r5
 8019924:	0022      	movs	r2, r4
 8019926:	f7e8 fe7f 	bl	8002628 <__aeabi_dmul>
 801992a:	bd70      	pop	{r4, r5, r6, pc}
 801992c:	3ff00000 	.word	0x3ff00000

08019930 <_strtod_l>:
 8019930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019932:	b0a3      	sub	sp, #140	@ 0x8c
 8019934:	921b      	str	r2, [sp, #108]	@ 0x6c
 8019936:	2200      	movs	r2, #0
 8019938:	2600      	movs	r6, #0
 801993a:	2700      	movs	r7, #0
 801993c:	9005      	str	r0, [sp, #20]
 801993e:	9109      	str	r1, [sp, #36]	@ 0x24
 8019940:	921e      	str	r2, [sp, #120]	@ 0x78
 8019942:	911d      	str	r1, [sp, #116]	@ 0x74
 8019944:	780a      	ldrb	r2, [r1, #0]
 8019946:	2a2b      	cmp	r2, #43	@ 0x2b
 8019948:	d053      	beq.n	80199f2 <_strtod_l+0xc2>
 801994a:	d83f      	bhi.n	80199cc <_strtod_l+0x9c>
 801994c:	2a0d      	cmp	r2, #13
 801994e:	d839      	bhi.n	80199c4 <_strtod_l+0x94>
 8019950:	2a08      	cmp	r2, #8
 8019952:	d839      	bhi.n	80199c8 <_strtod_l+0x98>
 8019954:	2a00      	cmp	r2, #0
 8019956:	d042      	beq.n	80199de <_strtod_l+0xae>
 8019958:	2200      	movs	r2, #0
 801995a:	9212      	str	r2, [sp, #72]	@ 0x48
 801995c:	2100      	movs	r1, #0
 801995e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8019960:	910c      	str	r1, [sp, #48]	@ 0x30
 8019962:	782a      	ldrb	r2, [r5, #0]
 8019964:	2a30      	cmp	r2, #48	@ 0x30
 8019966:	d000      	beq.n	801996a <_strtod_l+0x3a>
 8019968:	e083      	b.n	8019a72 <_strtod_l+0x142>
 801996a:	786a      	ldrb	r2, [r5, #1]
 801996c:	3120      	adds	r1, #32
 801996e:	438a      	bics	r2, r1
 8019970:	2a58      	cmp	r2, #88	@ 0x58
 8019972:	d000      	beq.n	8019976 <_strtod_l+0x46>
 8019974:	e073      	b.n	8019a5e <_strtod_l+0x12e>
 8019976:	9302      	str	r3, [sp, #8]
 8019978:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801997a:	4a95      	ldr	r2, [pc, #596]	@ (8019bd0 <_strtod_l+0x2a0>)
 801997c:	9301      	str	r3, [sp, #4]
 801997e:	ab1e      	add	r3, sp, #120	@ 0x78
 8019980:	9300      	str	r3, [sp, #0]
 8019982:	9805      	ldr	r0, [sp, #20]
 8019984:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019986:	a91d      	add	r1, sp, #116	@ 0x74
 8019988:	f002 fbcc 	bl	801c124 <__gethex>
 801998c:	230f      	movs	r3, #15
 801998e:	0002      	movs	r2, r0
 8019990:	401a      	ands	r2, r3
 8019992:	0004      	movs	r4, r0
 8019994:	9206      	str	r2, [sp, #24]
 8019996:	4218      	tst	r0, r3
 8019998:	d005      	beq.n	80199a6 <_strtod_l+0x76>
 801999a:	2a06      	cmp	r2, #6
 801999c:	d12b      	bne.n	80199f6 <_strtod_l+0xc6>
 801999e:	2300      	movs	r3, #0
 80199a0:	3501      	adds	r5, #1
 80199a2:	951d      	str	r5, [sp, #116]	@ 0x74
 80199a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80199a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d002      	beq.n	80199b2 <_strtod_l+0x82>
 80199ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80199ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80199b0:	6013      	str	r3, [r2, #0]
 80199b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d019      	beq.n	80199ec <_strtod_l+0xbc>
 80199b8:	2380      	movs	r3, #128	@ 0x80
 80199ba:	0030      	movs	r0, r6
 80199bc:	061b      	lsls	r3, r3, #24
 80199be:	18f9      	adds	r1, r7, r3
 80199c0:	b023      	add	sp, #140	@ 0x8c
 80199c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199c4:	2a20      	cmp	r2, #32
 80199c6:	d1c7      	bne.n	8019958 <_strtod_l+0x28>
 80199c8:	3101      	adds	r1, #1
 80199ca:	e7ba      	b.n	8019942 <_strtod_l+0x12>
 80199cc:	2a2d      	cmp	r2, #45	@ 0x2d
 80199ce:	d1c3      	bne.n	8019958 <_strtod_l+0x28>
 80199d0:	3a2c      	subs	r2, #44	@ 0x2c
 80199d2:	9212      	str	r2, [sp, #72]	@ 0x48
 80199d4:	1c4a      	adds	r2, r1, #1
 80199d6:	921d      	str	r2, [sp, #116]	@ 0x74
 80199d8:	784a      	ldrb	r2, [r1, #1]
 80199da:	2a00      	cmp	r2, #0
 80199dc:	d1be      	bne.n	801995c <_strtod_l+0x2c>
 80199de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199e0:	931d      	str	r3, [sp, #116]	@ 0x74
 80199e2:	2300      	movs	r3, #0
 80199e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80199e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d1df      	bne.n	80199ac <_strtod_l+0x7c>
 80199ec:	0030      	movs	r0, r6
 80199ee:	0039      	movs	r1, r7
 80199f0:	e7e6      	b.n	80199c0 <_strtod_l+0x90>
 80199f2:	2200      	movs	r2, #0
 80199f4:	e7ed      	b.n	80199d2 <_strtod_l+0xa2>
 80199f6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80199f8:	2a00      	cmp	r2, #0
 80199fa:	d007      	beq.n	8019a0c <_strtod_l+0xdc>
 80199fc:	2135      	movs	r1, #53	@ 0x35
 80199fe:	a820      	add	r0, sp, #128	@ 0x80
 8019a00:	f003 fbd6 	bl	801d1b0 <__copybits>
 8019a04:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019a06:	9805      	ldr	r0, [sp, #20]
 8019a08:	f002 ff90 	bl	801c92c <_Bfree>
 8019a0c:	9806      	ldr	r0, [sp, #24]
 8019a0e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019a10:	3801      	subs	r0, #1
 8019a12:	2804      	cmp	r0, #4
 8019a14:	d806      	bhi.n	8019a24 <_strtod_l+0xf4>
 8019a16:	f7e6 fba7 	bl	8000168 <__gnu_thumb1_case_uqi>
 8019a1a:	0312      	.short	0x0312
 8019a1c:	1e1c      	.short	0x1e1c
 8019a1e:	12          	.byte	0x12
 8019a1f:	00          	.byte	0x00
 8019a20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019a22:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8019a24:	05e4      	lsls	r4, r4, #23
 8019a26:	d502      	bpl.n	8019a2e <_strtod_l+0xfe>
 8019a28:	2380      	movs	r3, #128	@ 0x80
 8019a2a:	061b      	lsls	r3, r3, #24
 8019a2c:	431f      	orrs	r7, r3
 8019a2e:	4b69      	ldr	r3, [pc, #420]	@ (8019bd4 <_strtod_l+0x2a4>)
 8019a30:	423b      	tst	r3, r7
 8019a32:	d1b8      	bne.n	80199a6 <_strtod_l+0x76>
 8019a34:	f001 fbfa 	bl	801b22c <__errno>
 8019a38:	2322      	movs	r3, #34	@ 0x22
 8019a3a:	6003      	str	r3, [r0, #0]
 8019a3c:	e7b3      	b.n	80199a6 <_strtod_l+0x76>
 8019a3e:	4966      	ldr	r1, [pc, #408]	@ (8019bd8 <_strtod_l+0x2a8>)
 8019a40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019a42:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019a44:	400a      	ands	r2, r1
 8019a46:	4965      	ldr	r1, [pc, #404]	@ (8019bdc <_strtod_l+0x2ac>)
 8019a48:	185b      	adds	r3, r3, r1
 8019a4a:	051b      	lsls	r3, r3, #20
 8019a4c:	431a      	orrs	r2, r3
 8019a4e:	0017      	movs	r7, r2
 8019a50:	e7e8      	b.n	8019a24 <_strtod_l+0xf4>
 8019a52:	4f60      	ldr	r7, [pc, #384]	@ (8019bd4 <_strtod_l+0x2a4>)
 8019a54:	e7e6      	b.n	8019a24 <_strtod_l+0xf4>
 8019a56:	2601      	movs	r6, #1
 8019a58:	4f61      	ldr	r7, [pc, #388]	@ (8019be0 <_strtod_l+0x2b0>)
 8019a5a:	4276      	negs	r6, r6
 8019a5c:	e7e2      	b.n	8019a24 <_strtod_l+0xf4>
 8019a5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a60:	1c5a      	adds	r2, r3, #1
 8019a62:	921d      	str	r2, [sp, #116]	@ 0x74
 8019a64:	785b      	ldrb	r3, [r3, #1]
 8019a66:	2b30      	cmp	r3, #48	@ 0x30
 8019a68:	d0f9      	beq.n	8019a5e <_strtod_l+0x12e>
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d09b      	beq.n	80199a6 <_strtod_l+0x76>
 8019a6e:	2301      	movs	r3, #1
 8019a70:	930c      	str	r3, [sp, #48]	@ 0x30
 8019a72:	2500      	movs	r5, #0
 8019a74:	220a      	movs	r2, #10
 8019a76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a78:	950d      	str	r5, [sp, #52]	@ 0x34
 8019a7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019a7c:	9508      	str	r5, [sp, #32]
 8019a7e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8019a80:	7804      	ldrb	r4, [r0, #0]
 8019a82:	0023      	movs	r3, r4
 8019a84:	3b30      	subs	r3, #48	@ 0x30
 8019a86:	b2d9      	uxtb	r1, r3
 8019a88:	2909      	cmp	r1, #9
 8019a8a:	d927      	bls.n	8019adc <_strtod_l+0x1ac>
 8019a8c:	2201      	movs	r2, #1
 8019a8e:	4955      	ldr	r1, [pc, #340]	@ (8019be4 <_strtod_l+0x2b4>)
 8019a90:	f001 fb3e 	bl	801b110 <strncmp>
 8019a94:	2800      	cmp	r0, #0
 8019a96:	d031      	beq.n	8019afc <_strtod_l+0x1cc>
 8019a98:	2000      	movs	r0, #0
 8019a9a:	0023      	movs	r3, r4
 8019a9c:	4684      	mov	ip, r0
 8019a9e:	9a08      	ldr	r2, [sp, #32]
 8019aa0:	900e      	str	r0, [sp, #56]	@ 0x38
 8019aa2:	9206      	str	r2, [sp, #24]
 8019aa4:	2220      	movs	r2, #32
 8019aa6:	0019      	movs	r1, r3
 8019aa8:	4391      	bics	r1, r2
 8019aaa:	000a      	movs	r2, r1
 8019aac:	2100      	movs	r1, #0
 8019aae:	9107      	str	r1, [sp, #28]
 8019ab0:	2a45      	cmp	r2, #69	@ 0x45
 8019ab2:	d000      	beq.n	8019ab6 <_strtod_l+0x186>
 8019ab4:	e0c0      	b.n	8019c38 <_strtod_l+0x308>
 8019ab6:	9b06      	ldr	r3, [sp, #24]
 8019ab8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019aba:	4303      	orrs	r3, r0
 8019abc:	4313      	orrs	r3, r2
 8019abe:	428b      	cmp	r3, r1
 8019ac0:	d08d      	beq.n	80199de <_strtod_l+0xae>
 8019ac2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	931d      	str	r3, [sp, #116]	@ 0x74
 8019aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019acc:	785b      	ldrb	r3, [r3, #1]
 8019ace:	2b2b      	cmp	r3, #43	@ 0x2b
 8019ad0:	d070      	beq.n	8019bb4 <_strtod_l+0x284>
 8019ad2:	000c      	movs	r4, r1
 8019ad4:	2b2d      	cmp	r3, #45	@ 0x2d
 8019ad6:	d173      	bne.n	8019bc0 <_strtod_l+0x290>
 8019ad8:	2401      	movs	r4, #1
 8019ada:	e06c      	b.n	8019bb6 <_strtod_l+0x286>
 8019adc:	9908      	ldr	r1, [sp, #32]
 8019ade:	2908      	cmp	r1, #8
 8019ae0:	dc09      	bgt.n	8019af6 <_strtod_l+0x1c6>
 8019ae2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019ae4:	4351      	muls	r1, r2
 8019ae6:	185b      	adds	r3, r3, r1
 8019ae8:	930d      	str	r3, [sp, #52]	@ 0x34
 8019aea:	9b08      	ldr	r3, [sp, #32]
 8019aec:	3001      	adds	r0, #1
 8019aee:	3301      	adds	r3, #1
 8019af0:	9308      	str	r3, [sp, #32]
 8019af2:	901d      	str	r0, [sp, #116]	@ 0x74
 8019af4:	e7c3      	b.n	8019a7e <_strtod_l+0x14e>
 8019af6:	4355      	muls	r5, r2
 8019af8:	195d      	adds	r5, r3, r5
 8019afa:	e7f6      	b.n	8019aea <_strtod_l+0x1ba>
 8019afc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019afe:	1c5a      	adds	r2, r3, #1
 8019b00:	921d      	str	r2, [sp, #116]	@ 0x74
 8019b02:	9a08      	ldr	r2, [sp, #32]
 8019b04:	785b      	ldrb	r3, [r3, #1]
 8019b06:	2a00      	cmp	r2, #0
 8019b08:	d03a      	beq.n	8019b80 <_strtod_l+0x250>
 8019b0a:	900e      	str	r0, [sp, #56]	@ 0x38
 8019b0c:	9206      	str	r2, [sp, #24]
 8019b0e:	001a      	movs	r2, r3
 8019b10:	3a30      	subs	r2, #48	@ 0x30
 8019b12:	2a09      	cmp	r2, #9
 8019b14:	d912      	bls.n	8019b3c <_strtod_l+0x20c>
 8019b16:	2201      	movs	r2, #1
 8019b18:	4694      	mov	ip, r2
 8019b1a:	e7c3      	b.n	8019aa4 <_strtod_l+0x174>
 8019b1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019b1e:	3001      	adds	r0, #1
 8019b20:	1c5a      	adds	r2, r3, #1
 8019b22:	921d      	str	r2, [sp, #116]	@ 0x74
 8019b24:	785b      	ldrb	r3, [r3, #1]
 8019b26:	2b30      	cmp	r3, #48	@ 0x30
 8019b28:	d0f8      	beq.n	8019b1c <_strtod_l+0x1ec>
 8019b2a:	001a      	movs	r2, r3
 8019b2c:	3a31      	subs	r2, #49	@ 0x31
 8019b2e:	2a08      	cmp	r2, #8
 8019b30:	d83b      	bhi.n	8019baa <_strtod_l+0x27a>
 8019b32:	900e      	str	r0, [sp, #56]	@ 0x38
 8019b34:	2000      	movs	r0, #0
 8019b36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019b38:	9006      	str	r0, [sp, #24]
 8019b3a:	9213      	str	r2, [sp, #76]	@ 0x4c
 8019b3c:	001a      	movs	r2, r3
 8019b3e:	1c41      	adds	r1, r0, #1
 8019b40:	3a30      	subs	r2, #48	@ 0x30
 8019b42:	2b30      	cmp	r3, #48	@ 0x30
 8019b44:	d016      	beq.n	8019b74 <_strtod_l+0x244>
 8019b46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b48:	185b      	adds	r3, r3, r1
 8019b4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8019b4c:	9b06      	ldr	r3, [sp, #24]
 8019b4e:	210a      	movs	r1, #10
 8019b50:	469c      	mov	ip, r3
 8019b52:	4484      	add	ip, r0
 8019b54:	459c      	cmp	ip, r3
 8019b56:	d115      	bne.n	8019b84 <_strtod_l+0x254>
 8019b58:	9906      	ldr	r1, [sp, #24]
 8019b5a:	9b06      	ldr	r3, [sp, #24]
 8019b5c:	3101      	adds	r1, #1
 8019b5e:	1809      	adds	r1, r1, r0
 8019b60:	181b      	adds	r3, r3, r0
 8019b62:	9106      	str	r1, [sp, #24]
 8019b64:	2b08      	cmp	r3, #8
 8019b66:	dc19      	bgt.n	8019b9c <_strtod_l+0x26c>
 8019b68:	230a      	movs	r3, #10
 8019b6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019b6c:	434b      	muls	r3, r1
 8019b6e:	2100      	movs	r1, #0
 8019b70:	18d3      	adds	r3, r2, r3
 8019b72:	930d      	str	r3, [sp, #52]	@ 0x34
 8019b74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019b76:	0008      	movs	r0, r1
 8019b78:	1c5a      	adds	r2, r3, #1
 8019b7a:	921d      	str	r2, [sp, #116]	@ 0x74
 8019b7c:	785b      	ldrb	r3, [r3, #1]
 8019b7e:	e7c6      	b.n	8019b0e <_strtod_l+0x1de>
 8019b80:	9808      	ldr	r0, [sp, #32]
 8019b82:	e7d0      	b.n	8019b26 <_strtod_l+0x1f6>
 8019b84:	1c5c      	adds	r4, r3, #1
 8019b86:	2b08      	cmp	r3, #8
 8019b88:	dc04      	bgt.n	8019b94 <_strtod_l+0x264>
 8019b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b8c:	434b      	muls	r3, r1
 8019b8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019b90:	0023      	movs	r3, r4
 8019b92:	e7df      	b.n	8019b54 <_strtod_l+0x224>
 8019b94:	2c10      	cmp	r4, #16
 8019b96:	dcfb      	bgt.n	8019b90 <_strtod_l+0x260>
 8019b98:	434d      	muls	r5, r1
 8019b9a:	e7f9      	b.n	8019b90 <_strtod_l+0x260>
 8019b9c:	2100      	movs	r1, #0
 8019b9e:	2b0f      	cmp	r3, #15
 8019ba0:	dce8      	bgt.n	8019b74 <_strtod_l+0x244>
 8019ba2:	230a      	movs	r3, #10
 8019ba4:	435d      	muls	r5, r3
 8019ba6:	1955      	adds	r5, r2, r5
 8019ba8:	e7e4      	b.n	8019b74 <_strtod_l+0x244>
 8019baa:	2200      	movs	r2, #0
 8019bac:	920e      	str	r2, [sp, #56]	@ 0x38
 8019bae:	9206      	str	r2, [sp, #24]
 8019bb0:	3201      	adds	r2, #1
 8019bb2:	e7b1      	b.n	8019b18 <_strtod_l+0x1e8>
 8019bb4:	2400      	movs	r4, #0
 8019bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bb8:	3302      	adds	r3, #2
 8019bba:	931d      	str	r3, [sp, #116]	@ 0x74
 8019bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bbe:	789b      	ldrb	r3, [r3, #2]
 8019bc0:	001a      	movs	r2, r3
 8019bc2:	3a30      	subs	r2, #48	@ 0x30
 8019bc4:	2a09      	cmp	r2, #9
 8019bc6:	d913      	bls.n	8019bf0 <_strtod_l+0x2c0>
 8019bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019bca:	921d      	str	r2, [sp, #116]	@ 0x74
 8019bcc:	2200      	movs	r2, #0
 8019bce:	e032      	b.n	8019c36 <_strtod_l+0x306>
 8019bd0:	0801f790 	.word	0x0801f790
 8019bd4:	7ff00000 	.word	0x7ff00000
 8019bd8:	ffefffff 	.word	0xffefffff
 8019bdc:	00000433 	.word	0x00000433
 8019be0:	7fffffff 	.word	0x7fffffff
 8019be4:	0801f778 	.word	0x0801f778
 8019be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019bea:	1c5a      	adds	r2, r3, #1
 8019bec:	921d      	str	r2, [sp, #116]	@ 0x74
 8019bee:	785b      	ldrb	r3, [r3, #1]
 8019bf0:	2b30      	cmp	r3, #48	@ 0x30
 8019bf2:	d0f9      	beq.n	8019be8 <_strtod_l+0x2b8>
 8019bf4:	2200      	movs	r2, #0
 8019bf6:	9207      	str	r2, [sp, #28]
 8019bf8:	001a      	movs	r2, r3
 8019bfa:	3a31      	subs	r2, #49	@ 0x31
 8019bfc:	2a08      	cmp	r2, #8
 8019bfe:	d81b      	bhi.n	8019c38 <_strtod_l+0x308>
 8019c00:	3b30      	subs	r3, #48	@ 0x30
 8019c02:	9310      	str	r3, [sp, #64]	@ 0x40
 8019c04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c06:	9307      	str	r3, [sp, #28]
 8019c08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c0a:	1c59      	adds	r1, r3, #1
 8019c0c:	911d      	str	r1, [sp, #116]	@ 0x74
 8019c0e:	785b      	ldrb	r3, [r3, #1]
 8019c10:	001a      	movs	r2, r3
 8019c12:	3a30      	subs	r2, #48	@ 0x30
 8019c14:	2a09      	cmp	r2, #9
 8019c16:	d93a      	bls.n	8019c8e <_strtod_l+0x35e>
 8019c18:	9a07      	ldr	r2, [sp, #28]
 8019c1a:	1a8a      	subs	r2, r1, r2
 8019c1c:	49b4      	ldr	r1, [pc, #720]	@ (8019ef0 <_strtod_l+0x5c0>)
 8019c1e:	9107      	str	r1, [sp, #28]
 8019c20:	2a08      	cmp	r2, #8
 8019c22:	dc04      	bgt.n	8019c2e <_strtod_l+0x2fe>
 8019c24:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019c26:	9207      	str	r2, [sp, #28]
 8019c28:	428a      	cmp	r2, r1
 8019c2a:	dd00      	ble.n	8019c2e <_strtod_l+0x2fe>
 8019c2c:	9107      	str	r1, [sp, #28]
 8019c2e:	2c00      	cmp	r4, #0
 8019c30:	d002      	beq.n	8019c38 <_strtod_l+0x308>
 8019c32:	9a07      	ldr	r2, [sp, #28]
 8019c34:	4252      	negs	r2, r2
 8019c36:	9207      	str	r2, [sp, #28]
 8019c38:	9a06      	ldr	r2, [sp, #24]
 8019c3a:	2a00      	cmp	r2, #0
 8019c3c:	d14d      	bne.n	8019cda <_strtod_l+0x3aa>
 8019c3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019c40:	4310      	orrs	r0, r2
 8019c42:	d000      	beq.n	8019c46 <_strtod_l+0x316>
 8019c44:	e6af      	b.n	80199a6 <_strtod_l+0x76>
 8019c46:	4662      	mov	r2, ip
 8019c48:	2a00      	cmp	r2, #0
 8019c4a:	d000      	beq.n	8019c4e <_strtod_l+0x31e>
 8019c4c:	e6c7      	b.n	80199de <_strtod_l+0xae>
 8019c4e:	2b69      	cmp	r3, #105	@ 0x69
 8019c50:	d027      	beq.n	8019ca2 <_strtod_l+0x372>
 8019c52:	dc23      	bgt.n	8019c9c <_strtod_l+0x36c>
 8019c54:	2b49      	cmp	r3, #73	@ 0x49
 8019c56:	d024      	beq.n	8019ca2 <_strtod_l+0x372>
 8019c58:	2b4e      	cmp	r3, #78	@ 0x4e
 8019c5a:	d000      	beq.n	8019c5e <_strtod_l+0x32e>
 8019c5c:	e6bf      	b.n	80199de <_strtod_l+0xae>
 8019c5e:	49a5      	ldr	r1, [pc, #660]	@ (8019ef4 <_strtod_l+0x5c4>)
 8019c60:	a81d      	add	r0, sp, #116	@ 0x74
 8019c62:	f002 fc95 	bl	801c590 <__match>
 8019c66:	2800      	cmp	r0, #0
 8019c68:	d100      	bne.n	8019c6c <_strtod_l+0x33c>
 8019c6a:	e6b8      	b.n	80199de <_strtod_l+0xae>
 8019c6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c6e:	781b      	ldrb	r3, [r3, #0]
 8019c70:	2b28      	cmp	r3, #40	@ 0x28
 8019c72:	d12c      	bne.n	8019cce <_strtod_l+0x39e>
 8019c74:	49a0      	ldr	r1, [pc, #640]	@ (8019ef8 <_strtod_l+0x5c8>)
 8019c76:	aa20      	add	r2, sp, #128	@ 0x80
 8019c78:	a81d      	add	r0, sp, #116	@ 0x74
 8019c7a:	f002 fc9d 	bl	801c5b8 <__hexnan>
 8019c7e:	2805      	cmp	r0, #5
 8019c80:	d125      	bne.n	8019cce <_strtod_l+0x39e>
 8019c82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019c84:	4a9d      	ldr	r2, [pc, #628]	@ (8019efc <_strtod_l+0x5cc>)
 8019c86:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019c88:	431a      	orrs	r2, r3
 8019c8a:	0017      	movs	r7, r2
 8019c8c:	e68b      	b.n	80199a6 <_strtod_l+0x76>
 8019c8e:	220a      	movs	r2, #10
 8019c90:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019c92:	434a      	muls	r2, r1
 8019c94:	18d2      	adds	r2, r2, r3
 8019c96:	3a30      	subs	r2, #48	@ 0x30
 8019c98:	9210      	str	r2, [sp, #64]	@ 0x40
 8019c9a:	e7b5      	b.n	8019c08 <_strtod_l+0x2d8>
 8019c9c:	2b6e      	cmp	r3, #110	@ 0x6e
 8019c9e:	d0de      	beq.n	8019c5e <_strtod_l+0x32e>
 8019ca0:	e69d      	b.n	80199de <_strtod_l+0xae>
 8019ca2:	4997      	ldr	r1, [pc, #604]	@ (8019f00 <_strtod_l+0x5d0>)
 8019ca4:	a81d      	add	r0, sp, #116	@ 0x74
 8019ca6:	f002 fc73 	bl	801c590 <__match>
 8019caa:	2800      	cmp	r0, #0
 8019cac:	d100      	bne.n	8019cb0 <_strtod_l+0x380>
 8019cae:	e696      	b.n	80199de <_strtod_l+0xae>
 8019cb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019cb2:	4994      	ldr	r1, [pc, #592]	@ (8019f04 <_strtod_l+0x5d4>)
 8019cb4:	3b01      	subs	r3, #1
 8019cb6:	a81d      	add	r0, sp, #116	@ 0x74
 8019cb8:	931d      	str	r3, [sp, #116]	@ 0x74
 8019cba:	f002 fc69 	bl	801c590 <__match>
 8019cbe:	2800      	cmp	r0, #0
 8019cc0:	d102      	bne.n	8019cc8 <_strtod_l+0x398>
 8019cc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	931d      	str	r3, [sp, #116]	@ 0x74
 8019cc8:	2600      	movs	r6, #0
 8019cca:	4f8c      	ldr	r7, [pc, #560]	@ (8019efc <_strtod_l+0x5cc>)
 8019ccc:	e66b      	b.n	80199a6 <_strtod_l+0x76>
 8019cce:	488e      	ldr	r0, [pc, #568]	@ (8019f08 <_strtod_l+0x5d8>)
 8019cd0:	f001 faee 	bl	801b2b0 <nan>
 8019cd4:	0006      	movs	r6, r0
 8019cd6:	000f      	movs	r7, r1
 8019cd8:	e665      	b.n	80199a6 <_strtod_l+0x76>
 8019cda:	9b07      	ldr	r3, [sp, #28]
 8019cdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019cde:	1a9b      	subs	r3, r3, r2
 8019ce0:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ce2:	9b08      	ldr	r3, [sp, #32]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d101      	bne.n	8019cec <_strtod_l+0x3bc>
 8019ce8:	9b06      	ldr	r3, [sp, #24]
 8019cea:	9308      	str	r3, [sp, #32]
 8019cec:	9c06      	ldr	r4, [sp, #24]
 8019cee:	2c10      	cmp	r4, #16
 8019cf0:	dd00      	ble.n	8019cf4 <_strtod_l+0x3c4>
 8019cf2:	2410      	movs	r4, #16
 8019cf4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019cf6:	f7e9 fb87 	bl	8003408 <__aeabi_ui2d>
 8019cfa:	9b06      	ldr	r3, [sp, #24]
 8019cfc:	0006      	movs	r6, r0
 8019cfe:	000f      	movs	r7, r1
 8019d00:	2b09      	cmp	r3, #9
 8019d02:	dc13      	bgt.n	8019d2c <_strtod_l+0x3fc>
 8019d04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d100      	bne.n	8019d0c <_strtod_l+0x3dc>
 8019d0a:	e64c      	b.n	80199a6 <_strtod_l+0x76>
 8019d0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	dc00      	bgt.n	8019d14 <_strtod_l+0x3e4>
 8019d12:	e07e      	b.n	8019e12 <_strtod_l+0x4e2>
 8019d14:	2b16      	cmp	r3, #22
 8019d16:	dc63      	bgt.n	8019de0 <_strtod_l+0x4b0>
 8019d18:	497c      	ldr	r1, [pc, #496]	@ (8019f0c <_strtod_l+0x5dc>)
 8019d1a:	00db      	lsls	r3, r3, #3
 8019d1c:	18c9      	adds	r1, r1, r3
 8019d1e:	0032      	movs	r2, r6
 8019d20:	6808      	ldr	r0, [r1, #0]
 8019d22:	6849      	ldr	r1, [r1, #4]
 8019d24:	003b      	movs	r3, r7
 8019d26:	f7e8 fc7f 	bl	8002628 <__aeabi_dmul>
 8019d2a:	e7d3      	b.n	8019cd4 <_strtod_l+0x3a4>
 8019d2c:	0022      	movs	r2, r4
 8019d2e:	4b77      	ldr	r3, [pc, #476]	@ (8019f0c <_strtod_l+0x5dc>)
 8019d30:	3a09      	subs	r2, #9
 8019d32:	00d2      	lsls	r2, r2, #3
 8019d34:	189b      	adds	r3, r3, r2
 8019d36:	681a      	ldr	r2, [r3, #0]
 8019d38:	685b      	ldr	r3, [r3, #4]
 8019d3a:	f7e8 fc75 	bl	8002628 <__aeabi_dmul>
 8019d3e:	0006      	movs	r6, r0
 8019d40:	0028      	movs	r0, r5
 8019d42:	000f      	movs	r7, r1
 8019d44:	f7e9 fb60 	bl	8003408 <__aeabi_ui2d>
 8019d48:	000b      	movs	r3, r1
 8019d4a:	0002      	movs	r2, r0
 8019d4c:	0039      	movs	r1, r7
 8019d4e:	0030      	movs	r0, r6
 8019d50:	f7e7 fcc2 	bl	80016d8 <__aeabi_dadd>
 8019d54:	9b06      	ldr	r3, [sp, #24]
 8019d56:	0006      	movs	r6, r0
 8019d58:	000f      	movs	r7, r1
 8019d5a:	2b0f      	cmp	r3, #15
 8019d5c:	ddd2      	ble.n	8019d04 <_strtod_l+0x3d4>
 8019d5e:	9b06      	ldr	r3, [sp, #24]
 8019d60:	1b1c      	subs	r4, r3, r4
 8019d62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d64:	18e4      	adds	r4, r4, r3
 8019d66:	2c00      	cmp	r4, #0
 8019d68:	dc00      	bgt.n	8019d6c <_strtod_l+0x43c>
 8019d6a:	e09b      	b.n	8019ea4 <_strtod_l+0x574>
 8019d6c:	220f      	movs	r2, #15
 8019d6e:	0023      	movs	r3, r4
 8019d70:	4013      	ands	r3, r2
 8019d72:	4214      	tst	r4, r2
 8019d74:	d00a      	beq.n	8019d8c <_strtod_l+0x45c>
 8019d76:	4965      	ldr	r1, [pc, #404]	@ (8019f0c <_strtod_l+0x5dc>)
 8019d78:	00db      	lsls	r3, r3, #3
 8019d7a:	18c9      	adds	r1, r1, r3
 8019d7c:	0032      	movs	r2, r6
 8019d7e:	6808      	ldr	r0, [r1, #0]
 8019d80:	6849      	ldr	r1, [r1, #4]
 8019d82:	003b      	movs	r3, r7
 8019d84:	f7e8 fc50 	bl	8002628 <__aeabi_dmul>
 8019d88:	0006      	movs	r6, r0
 8019d8a:	000f      	movs	r7, r1
 8019d8c:	230f      	movs	r3, #15
 8019d8e:	439c      	bics	r4, r3
 8019d90:	d073      	beq.n	8019e7a <_strtod_l+0x54a>
 8019d92:	3326      	adds	r3, #38	@ 0x26
 8019d94:	33ff      	adds	r3, #255	@ 0xff
 8019d96:	429c      	cmp	r4, r3
 8019d98:	dd4b      	ble.n	8019e32 <_strtod_l+0x502>
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	9306      	str	r3, [sp, #24]
 8019d9e:	9307      	str	r3, [sp, #28]
 8019da0:	930d      	str	r3, [sp, #52]	@ 0x34
 8019da2:	9308      	str	r3, [sp, #32]
 8019da4:	2322      	movs	r3, #34	@ 0x22
 8019da6:	2600      	movs	r6, #0
 8019da8:	9a05      	ldr	r2, [sp, #20]
 8019daa:	4f54      	ldr	r7, [pc, #336]	@ (8019efc <_strtod_l+0x5cc>)
 8019dac:	6013      	str	r3, [r2, #0]
 8019dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019db0:	42b3      	cmp	r3, r6
 8019db2:	d100      	bne.n	8019db6 <_strtod_l+0x486>
 8019db4:	e5f7      	b.n	80199a6 <_strtod_l+0x76>
 8019db6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8019db8:	9805      	ldr	r0, [sp, #20]
 8019dba:	f002 fdb7 	bl	801c92c <_Bfree>
 8019dbe:	9908      	ldr	r1, [sp, #32]
 8019dc0:	9805      	ldr	r0, [sp, #20]
 8019dc2:	f002 fdb3 	bl	801c92c <_Bfree>
 8019dc6:	9907      	ldr	r1, [sp, #28]
 8019dc8:	9805      	ldr	r0, [sp, #20]
 8019dca:	f002 fdaf 	bl	801c92c <_Bfree>
 8019dce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019dd0:	9805      	ldr	r0, [sp, #20]
 8019dd2:	f002 fdab 	bl	801c92c <_Bfree>
 8019dd6:	9906      	ldr	r1, [sp, #24]
 8019dd8:	9805      	ldr	r0, [sp, #20]
 8019dda:	f002 fda7 	bl	801c92c <_Bfree>
 8019dde:	e5e2      	b.n	80199a6 <_strtod_l+0x76>
 8019de0:	2325      	movs	r3, #37	@ 0x25
 8019de2:	9a06      	ldr	r2, [sp, #24]
 8019de4:	1a9b      	subs	r3, r3, r2
 8019de6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019de8:	4293      	cmp	r3, r2
 8019dea:	dbb8      	blt.n	8019d5e <_strtod_l+0x42e>
 8019dec:	240f      	movs	r4, #15
 8019dee:	9b06      	ldr	r3, [sp, #24]
 8019df0:	4d46      	ldr	r5, [pc, #280]	@ (8019f0c <_strtod_l+0x5dc>)
 8019df2:	1ae4      	subs	r4, r4, r3
 8019df4:	00e1      	lsls	r1, r4, #3
 8019df6:	1869      	adds	r1, r5, r1
 8019df8:	0032      	movs	r2, r6
 8019dfa:	6808      	ldr	r0, [r1, #0]
 8019dfc:	6849      	ldr	r1, [r1, #4]
 8019dfe:	003b      	movs	r3, r7
 8019e00:	f7e8 fc12 	bl	8002628 <__aeabi_dmul>
 8019e04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e06:	1b1c      	subs	r4, r3, r4
 8019e08:	00e4      	lsls	r4, r4, #3
 8019e0a:	192d      	adds	r5, r5, r4
 8019e0c:	682a      	ldr	r2, [r5, #0]
 8019e0e:	686b      	ldr	r3, [r5, #4]
 8019e10:	e789      	b.n	8019d26 <_strtod_l+0x3f6>
 8019e12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e14:	3316      	adds	r3, #22
 8019e16:	dba2      	blt.n	8019d5e <_strtod_l+0x42e>
 8019e18:	9907      	ldr	r1, [sp, #28]
 8019e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8019f0c <_strtod_l+0x5dc>)
 8019e1e:	1a52      	subs	r2, r2, r1
 8019e20:	00d2      	lsls	r2, r2, #3
 8019e22:	189b      	adds	r3, r3, r2
 8019e24:	0030      	movs	r0, r6
 8019e26:	681a      	ldr	r2, [r3, #0]
 8019e28:	685b      	ldr	r3, [r3, #4]
 8019e2a:	0039      	movs	r1, r7
 8019e2c:	f7e7 ffb8 	bl	8001da0 <__aeabi_ddiv>
 8019e30:	e750      	b.n	8019cd4 <_strtod_l+0x3a4>
 8019e32:	2300      	movs	r3, #0
 8019e34:	0030      	movs	r0, r6
 8019e36:	0039      	movs	r1, r7
 8019e38:	4d35      	ldr	r5, [pc, #212]	@ (8019f10 <_strtod_l+0x5e0>)
 8019e3a:	1124      	asrs	r4, r4, #4
 8019e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e3e:	2c01      	cmp	r4, #1
 8019e40:	dc1e      	bgt.n	8019e80 <_strtod_l+0x550>
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d001      	beq.n	8019e4a <_strtod_l+0x51a>
 8019e46:	0006      	movs	r6, r0
 8019e48:	000f      	movs	r7, r1
 8019e4a:	4b32      	ldr	r3, [pc, #200]	@ (8019f14 <_strtod_l+0x5e4>)
 8019e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e4e:	18ff      	adds	r7, r7, r3
 8019e50:	4b2f      	ldr	r3, [pc, #188]	@ (8019f10 <_strtod_l+0x5e0>)
 8019e52:	00d5      	lsls	r5, r2, #3
 8019e54:	195d      	adds	r5, r3, r5
 8019e56:	0032      	movs	r2, r6
 8019e58:	6828      	ldr	r0, [r5, #0]
 8019e5a:	6869      	ldr	r1, [r5, #4]
 8019e5c:	003b      	movs	r3, r7
 8019e5e:	f7e8 fbe3 	bl	8002628 <__aeabi_dmul>
 8019e62:	4b26      	ldr	r3, [pc, #152]	@ (8019efc <_strtod_l+0x5cc>)
 8019e64:	4a2c      	ldr	r2, [pc, #176]	@ (8019f18 <_strtod_l+0x5e8>)
 8019e66:	0006      	movs	r6, r0
 8019e68:	400b      	ands	r3, r1
 8019e6a:	4293      	cmp	r3, r2
 8019e6c:	d895      	bhi.n	8019d9a <_strtod_l+0x46a>
 8019e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8019f1c <_strtod_l+0x5ec>)
 8019e70:	4293      	cmp	r3, r2
 8019e72:	d913      	bls.n	8019e9c <_strtod_l+0x56c>
 8019e74:	2601      	movs	r6, #1
 8019e76:	4f2a      	ldr	r7, [pc, #168]	@ (8019f20 <_strtod_l+0x5f0>)
 8019e78:	4276      	negs	r6, r6
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e7e:	e086      	b.n	8019f8e <_strtod_l+0x65e>
 8019e80:	2201      	movs	r2, #1
 8019e82:	4214      	tst	r4, r2
 8019e84:	d004      	beq.n	8019e90 <_strtod_l+0x560>
 8019e86:	682a      	ldr	r2, [r5, #0]
 8019e88:	686b      	ldr	r3, [r5, #4]
 8019e8a:	f7e8 fbcd 	bl	8002628 <__aeabi_dmul>
 8019e8e:	2301      	movs	r3, #1
 8019e90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e92:	1064      	asrs	r4, r4, #1
 8019e94:	3201      	adds	r2, #1
 8019e96:	9209      	str	r2, [sp, #36]	@ 0x24
 8019e98:	3508      	adds	r5, #8
 8019e9a:	e7d0      	b.n	8019e3e <_strtod_l+0x50e>
 8019e9c:	23d4      	movs	r3, #212	@ 0xd4
 8019e9e:	049b      	lsls	r3, r3, #18
 8019ea0:	18cf      	adds	r7, r1, r3
 8019ea2:	e7ea      	b.n	8019e7a <_strtod_l+0x54a>
 8019ea4:	2c00      	cmp	r4, #0
 8019ea6:	d0e8      	beq.n	8019e7a <_strtod_l+0x54a>
 8019ea8:	4264      	negs	r4, r4
 8019eaa:	230f      	movs	r3, #15
 8019eac:	0022      	movs	r2, r4
 8019eae:	401a      	ands	r2, r3
 8019eb0:	421c      	tst	r4, r3
 8019eb2:	d00a      	beq.n	8019eca <_strtod_l+0x59a>
 8019eb4:	4b15      	ldr	r3, [pc, #84]	@ (8019f0c <_strtod_l+0x5dc>)
 8019eb6:	00d2      	lsls	r2, r2, #3
 8019eb8:	189b      	adds	r3, r3, r2
 8019eba:	0030      	movs	r0, r6
 8019ebc:	681a      	ldr	r2, [r3, #0]
 8019ebe:	685b      	ldr	r3, [r3, #4]
 8019ec0:	0039      	movs	r1, r7
 8019ec2:	f7e7 ff6d 	bl	8001da0 <__aeabi_ddiv>
 8019ec6:	0006      	movs	r6, r0
 8019ec8:	000f      	movs	r7, r1
 8019eca:	1124      	asrs	r4, r4, #4
 8019ecc:	d0d5      	beq.n	8019e7a <_strtod_l+0x54a>
 8019ece:	2c1f      	cmp	r4, #31
 8019ed0:	dd28      	ble.n	8019f24 <_strtod_l+0x5f4>
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	9306      	str	r3, [sp, #24]
 8019ed6:	9307      	str	r3, [sp, #28]
 8019ed8:	930d      	str	r3, [sp, #52]	@ 0x34
 8019eda:	9308      	str	r3, [sp, #32]
 8019edc:	2322      	movs	r3, #34	@ 0x22
 8019ede:	9a05      	ldr	r2, [sp, #20]
 8019ee0:	2600      	movs	r6, #0
 8019ee2:	6013      	str	r3, [r2, #0]
 8019ee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019ee6:	2700      	movs	r7, #0
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d000      	beq.n	8019eee <_strtod_l+0x5be>
 8019eec:	e763      	b.n	8019db6 <_strtod_l+0x486>
 8019eee:	e55a      	b.n	80199a6 <_strtod_l+0x76>
 8019ef0:	00004e1f 	.word	0x00004e1f
 8019ef4:	0801f7dd 	.word	0x0801f7dd
 8019ef8:	0801f77c 	.word	0x0801f77c
 8019efc:	7ff00000 	.word	0x7ff00000
 8019f00:	0801f7d5 	.word	0x0801f7d5
 8019f04:	0801f80f 	.word	0x0801f80f
 8019f08:	0801fb9d 	.word	0x0801fb9d
 8019f0c:	0801f988 	.word	0x0801f988
 8019f10:	0801f960 	.word	0x0801f960
 8019f14:	fcb00000 	.word	0xfcb00000
 8019f18:	7ca00000 	.word	0x7ca00000
 8019f1c:	7c900000 	.word	0x7c900000
 8019f20:	7fefffff 	.word	0x7fefffff
 8019f24:	2310      	movs	r3, #16
 8019f26:	0022      	movs	r2, r4
 8019f28:	401a      	ands	r2, r3
 8019f2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8019f2c:	421c      	tst	r4, r3
 8019f2e:	d001      	beq.n	8019f34 <_strtod_l+0x604>
 8019f30:	335a      	adds	r3, #90	@ 0x5a
 8019f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f34:	0030      	movs	r0, r6
 8019f36:	0039      	movs	r1, r7
 8019f38:	2300      	movs	r3, #0
 8019f3a:	4dbf      	ldr	r5, [pc, #764]	@ (801a238 <_strtod_l+0x908>)
 8019f3c:	2201      	movs	r2, #1
 8019f3e:	4214      	tst	r4, r2
 8019f40:	d004      	beq.n	8019f4c <_strtod_l+0x61c>
 8019f42:	682a      	ldr	r2, [r5, #0]
 8019f44:	686b      	ldr	r3, [r5, #4]
 8019f46:	f7e8 fb6f 	bl	8002628 <__aeabi_dmul>
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	1064      	asrs	r4, r4, #1
 8019f4e:	3508      	adds	r5, #8
 8019f50:	2c00      	cmp	r4, #0
 8019f52:	d1f3      	bne.n	8019f3c <_strtod_l+0x60c>
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d001      	beq.n	8019f5c <_strtod_l+0x62c>
 8019f58:	0006      	movs	r6, r0
 8019f5a:	000f      	movs	r7, r1
 8019f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d00d      	beq.n	8019f7e <_strtod_l+0x64e>
 8019f62:	236b      	movs	r3, #107	@ 0x6b
 8019f64:	007a      	lsls	r2, r7, #1
 8019f66:	0d52      	lsrs	r2, r2, #21
 8019f68:	0039      	movs	r1, r7
 8019f6a:	1a9b      	subs	r3, r3, r2
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	dd06      	ble.n	8019f7e <_strtod_l+0x64e>
 8019f70:	2b1f      	cmp	r3, #31
 8019f72:	dd5a      	ble.n	801a02a <_strtod_l+0x6fa>
 8019f74:	2600      	movs	r6, #0
 8019f76:	2b34      	cmp	r3, #52	@ 0x34
 8019f78:	dd50      	ble.n	801a01c <_strtod_l+0x6ec>
 8019f7a:	27dc      	movs	r7, #220	@ 0xdc
 8019f7c:	04bf      	lsls	r7, r7, #18
 8019f7e:	2200      	movs	r2, #0
 8019f80:	2300      	movs	r3, #0
 8019f82:	0030      	movs	r0, r6
 8019f84:	0039      	movs	r1, r7
 8019f86:	f7e6 fa89 	bl	800049c <__aeabi_dcmpeq>
 8019f8a:	2800      	cmp	r0, #0
 8019f8c:	d1a1      	bne.n	8019ed2 <_strtod_l+0x5a2>
 8019f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f90:	9a08      	ldr	r2, [sp, #32]
 8019f92:	9300      	str	r3, [sp, #0]
 8019f94:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019f96:	9b06      	ldr	r3, [sp, #24]
 8019f98:	9805      	ldr	r0, [sp, #20]
 8019f9a:	f002 fd2f 	bl	801c9fc <__s2b>
 8019f9e:	900d      	str	r0, [sp, #52]	@ 0x34
 8019fa0:	2800      	cmp	r0, #0
 8019fa2:	d100      	bne.n	8019fa6 <_strtod_l+0x676>
 8019fa4:	e6f9      	b.n	8019d9a <_strtod_l+0x46a>
 8019fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019fa8:	9907      	ldr	r1, [sp, #28]
 8019faa:	17da      	asrs	r2, r3, #31
 8019fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fae:	1a5b      	subs	r3, r3, r1
 8019fb0:	401a      	ands	r2, r3
 8019fb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019fb4:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019fb6:	43db      	mvns	r3, r3
 8019fb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019fba:	17db      	asrs	r3, r3, #31
 8019fbc:	401a      	ands	r2, r3
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	921a      	str	r2, [sp, #104]	@ 0x68
 8019fc2:	9306      	str	r3, [sp, #24]
 8019fc4:	9307      	str	r3, [sp, #28]
 8019fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019fc8:	9805      	ldr	r0, [sp, #20]
 8019fca:	6859      	ldr	r1, [r3, #4]
 8019fcc:	f002 fc6a 	bl	801c8a4 <_Balloc>
 8019fd0:	9008      	str	r0, [sp, #32]
 8019fd2:	2800      	cmp	r0, #0
 8019fd4:	d100      	bne.n	8019fd8 <_strtod_l+0x6a8>
 8019fd6:	e6e5      	b.n	8019da4 <_strtod_l+0x474>
 8019fd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019fda:	300c      	adds	r0, #12
 8019fdc:	0019      	movs	r1, r3
 8019fde:	691a      	ldr	r2, [r3, #16]
 8019fe0:	310c      	adds	r1, #12
 8019fe2:	3202      	adds	r2, #2
 8019fe4:	0092      	lsls	r2, r2, #2
 8019fe6:	f001 f959 	bl	801b29c <memcpy>
 8019fea:	ab20      	add	r3, sp, #128	@ 0x80
 8019fec:	9301      	str	r3, [sp, #4]
 8019fee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019ff0:	9300      	str	r3, [sp, #0]
 8019ff2:	0032      	movs	r2, r6
 8019ff4:	003b      	movs	r3, r7
 8019ff6:	9805      	ldr	r0, [sp, #20]
 8019ff8:	9610      	str	r6, [sp, #64]	@ 0x40
 8019ffa:	9711      	str	r7, [sp, #68]	@ 0x44
 8019ffc:	f003 f84e 	bl	801d09c <__d2b>
 801a000:	901e      	str	r0, [sp, #120]	@ 0x78
 801a002:	2800      	cmp	r0, #0
 801a004:	d100      	bne.n	801a008 <_strtod_l+0x6d8>
 801a006:	e6cd      	b.n	8019da4 <_strtod_l+0x474>
 801a008:	2101      	movs	r1, #1
 801a00a:	9805      	ldr	r0, [sp, #20]
 801a00c:	f002 fd92 	bl	801cb34 <__i2b>
 801a010:	9007      	str	r0, [sp, #28]
 801a012:	2800      	cmp	r0, #0
 801a014:	d10e      	bne.n	801a034 <_strtod_l+0x704>
 801a016:	2300      	movs	r3, #0
 801a018:	9307      	str	r3, [sp, #28]
 801a01a:	e6c3      	b.n	8019da4 <_strtod_l+0x474>
 801a01c:	234b      	movs	r3, #75	@ 0x4b
 801a01e:	1a9a      	subs	r2, r3, r2
 801a020:	3b4c      	subs	r3, #76	@ 0x4c
 801a022:	4093      	lsls	r3, r2
 801a024:	4019      	ands	r1, r3
 801a026:	000f      	movs	r7, r1
 801a028:	e7a9      	b.n	8019f7e <_strtod_l+0x64e>
 801a02a:	2201      	movs	r2, #1
 801a02c:	4252      	negs	r2, r2
 801a02e:	409a      	lsls	r2, r3
 801a030:	4016      	ands	r6, r2
 801a032:	e7a4      	b.n	8019f7e <_strtod_l+0x64e>
 801a034:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a036:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a038:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801a03a:	1ad4      	subs	r4, r2, r3
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	db01      	blt.n	801a044 <_strtod_l+0x714>
 801a040:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801a042:	195d      	adds	r5, r3, r5
 801a044:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a046:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a048:	1a5b      	subs	r3, r3, r1
 801a04a:	2136      	movs	r1, #54	@ 0x36
 801a04c:	189b      	adds	r3, r3, r2
 801a04e:	1a8a      	subs	r2, r1, r2
 801a050:	497a      	ldr	r1, [pc, #488]	@ (801a23c <_strtod_l+0x90c>)
 801a052:	2001      	movs	r0, #1
 801a054:	468c      	mov	ip, r1
 801a056:	2100      	movs	r1, #0
 801a058:	3b01      	subs	r3, #1
 801a05a:	9116      	str	r1, [sp, #88]	@ 0x58
 801a05c:	9014      	str	r0, [sp, #80]	@ 0x50
 801a05e:	4563      	cmp	r3, ip
 801a060:	da06      	bge.n	801a070 <_strtod_l+0x740>
 801a062:	4661      	mov	r1, ip
 801a064:	1ac9      	subs	r1, r1, r3
 801a066:	1a52      	subs	r2, r2, r1
 801a068:	291f      	cmp	r1, #31
 801a06a:	dc3f      	bgt.n	801a0ec <_strtod_l+0x7bc>
 801a06c:	4088      	lsls	r0, r1
 801a06e:	9014      	str	r0, [sp, #80]	@ 0x50
 801a070:	18ab      	adds	r3, r5, r2
 801a072:	930e      	str	r3, [sp, #56]	@ 0x38
 801a074:	18a4      	adds	r4, r4, r2
 801a076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a07a:	191c      	adds	r4, r3, r4
 801a07c:	002b      	movs	r3, r5
 801a07e:	4295      	cmp	r5, r2
 801a080:	dd00      	ble.n	801a084 <_strtod_l+0x754>
 801a082:	0013      	movs	r3, r2
 801a084:	42a3      	cmp	r3, r4
 801a086:	dd00      	ble.n	801a08a <_strtod_l+0x75a>
 801a088:	0023      	movs	r3, r4
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	dd04      	ble.n	801a098 <_strtod_l+0x768>
 801a08e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a090:	1ae4      	subs	r4, r4, r3
 801a092:	1ad2      	subs	r2, r2, r3
 801a094:	920e      	str	r2, [sp, #56]	@ 0x38
 801a096:	1aed      	subs	r5, r5, r3
 801a098:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	dd16      	ble.n	801a0cc <_strtod_l+0x79c>
 801a09e:	001a      	movs	r2, r3
 801a0a0:	9907      	ldr	r1, [sp, #28]
 801a0a2:	9805      	ldr	r0, [sp, #20]
 801a0a4:	f002 fe10 	bl	801ccc8 <__pow5mult>
 801a0a8:	9007      	str	r0, [sp, #28]
 801a0aa:	2800      	cmp	r0, #0
 801a0ac:	d0b3      	beq.n	801a016 <_strtod_l+0x6e6>
 801a0ae:	0001      	movs	r1, r0
 801a0b0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a0b2:	9805      	ldr	r0, [sp, #20]
 801a0b4:	f002 fd56 	bl	801cb64 <__multiply>
 801a0b8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a0ba:	2800      	cmp	r0, #0
 801a0bc:	d100      	bne.n	801a0c0 <_strtod_l+0x790>
 801a0be:	e671      	b.n	8019da4 <_strtod_l+0x474>
 801a0c0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a0c2:	9805      	ldr	r0, [sp, #20]
 801a0c4:	f002 fc32 	bl	801c92c <_Bfree>
 801a0c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a0ca:	931e      	str	r3, [sp, #120]	@ 0x78
 801a0cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	dc12      	bgt.n	801a0f8 <_strtod_l+0x7c8>
 801a0d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	dd18      	ble.n	801a10a <_strtod_l+0x7da>
 801a0d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a0da:	9908      	ldr	r1, [sp, #32]
 801a0dc:	9805      	ldr	r0, [sp, #20]
 801a0de:	f002 fdf3 	bl	801ccc8 <__pow5mult>
 801a0e2:	9008      	str	r0, [sp, #32]
 801a0e4:	2800      	cmp	r0, #0
 801a0e6:	d110      	bne.n	801a10a <_strtod_l+0x7da>
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	e65a      	b.n	8019da2 <_strtod_l+0x472>
 801a0ec:	4954      	ldr	r1, [pc, #336]	@ (801a240 <_strtod_l+0x910>)
 801a0ee:	1acb      	subs	r3, r1, r3
 801a0f0:	0001      	movs	r1, r0
 801a0f2:	4099      	lsls	r1, r3
 801a0f4:	9116      	str	r1, [sp, #88]	@ 0x58
 801a0f6:	e7ba      	b.n	801a06e <_strtod_l+0x73e>
 801a0f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a0fa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a0fc:	9805      	ldr	r0, [sp, #20]
 801a0fe:	f002 fe3f 	bl	801cd80 <__lshift>
 801a102:	901e      	str	r0, [sp, #120]	@ 0x78
 801a104:	2800      	cmp	r0, #0
 801a106:	d1e4      	bne.n	801a0d2 <_strtod_l+0x7a2>
 801a108:	e64c      	b.n	8019da4 <_strtod_l+0x474>
 801a10a:	2c00      	cmp	r4, #0
 801a10c:	dd07      	ble.n	801a11e <_strtod_l+0x7ee>
 801a10e:	0022      	movs	r2, r4
 801a110:	9908      	ldr	r1, [sp, #32]
 801a112:	9805      	ldr	r0, [sp, #20]
 801a114:	f002 fe34 	bl	801cd80 <__lshift>
 801a118:	9008      	str	r0, [sp, #32]
 801a11a:	2800      	cmp	r0, #0
 801a11c:	d0e4      	beq.n	801a0e8 <_strtod_l+0x7b8>
 801a11e:	2d00      	cmp	r5, #0
 801a120:	dd08      	ble.n	801a134 <_strtod_l+0x804>
 801a122:	002a      	movs	r2, r5
 801a124:	9907      	ldr	r1, [sp, #28]
 801a126:	9805      	ldr	r0, [sp, #20]
 801a128:	f002 fe2a 	bl	801cd80 <__lshift>
 801a12c:	9007      	str	r0, [sp, #28]
 801a12e:	2800      	cmp	r0, #0
 801a130:	d100      	bne.n	801a134 <_strtod_l+0x804>
 801a132:	e637      	b.n	8019da4 <_strtod_l+0x474>
 801a134:	9a08      	ldr	r2, [sp, #32]
 801a136:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a138:	9805      	ldr	r0, [sp, #20]
 801a13a:	f002 fea9 	bl	801ce90 <__mdiff>
 801a13e:	9006      	str	r0, [sp, #24]
 801a140:	2800      	cmp	r0, #0
 801a142:	d100      	bne.n	801a146 <_strtod_l+0x816>
 801a144:	e62e      	b.n	8019da4 <_strtod_l+0x474>
 801a146:	68c3      	ldr	r3, [r0, #12]
 801a148:	9907      	ldr	r1, [sp, #28]
 801a14a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a14c:	2300      	movs	r3, #0
 801a14e:	60c3      	str	r3, [r0, #12]
 801a150:	f002 fe82 	bl	801ce58 <__mcmp>
 801a154:	2800      	cmp	r0, #0
 801a156:	da3b      	bge.n	801a1d0 <_strtod_l+0x8a0>
 801a158:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a15a:	4333      	orrs	r3, r6
 801a15c:	d167      	bne.n	801a22e <_strtod_l+0x8fe>
 801a15e:	033b      	lsls	r3, r7, #12
 801a160:	d165      	bne.n	801a22e <_strtod_l+0x8fe>
 801a162:	22d6      	movs	r2, #214	@ 0xd6
 801a164:	4b37      	ldr	r3, [pc, #220]	@ (801a244 <_strtod_l+0x914>)
 801a166:	04d2      	lsls	r2, r2, #19
 801a168:	403b      	ands	r3, r7
 801a16a:	4293      	cmp	r3, r2
 801a16c:	d95f      	bls.n	801a22e <_strtod_l+0x8fe>
 801a16e:	9b06      	ldr	r3, [sp, #24]
 801a170:	695b      	ldr	r3, [r3, #20]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d103      	bne.n	801a17e <_strtod_l+0x84e>
 801a176:	9b06      	ldr	r3, [sp, #24]
 801a178:	691b      	ldr	r3, [r3, #16]
 801a17a:	2b01      	cmp	r3, #1
 801a17c:	dd57      	ble.n	801a22e <_strtod_l+0x8fe>
 801a17e:	9906      	ldr	r1, [sp, #24]
 801a180:	2201      	movs	r2, #1
 801a182:	9805      	ldr	r0, [sp, #20]
 801a184:	f002 fdfc 	bl	801cd80 <__lshift>
 801a188:	9907      	ldr	r1, [sp, #28]
 801a18a:	9006      	str	r0, [sp, #24]
 801a18c:	f002 fe64 	bl	801ce58 <__mcmp>
 801a190:	2800      	cmp	r0, #0
 801a192:	dd4c      	ble.n	801a22e <_strtod_l+0x8fe>
 801a194:	4b2b      	ldr	r3, [pc, #172]	@ (801a244 <_strtod_l+0x914>)
 801a196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a198:	403b      	ands	r3, r7
 801a19a:	2a00      	cmp	r2, #0
 801a19c:	d074      	beq.n	801a288 <_strtod_l+0x958>
 801a19e:	22d6      	movs	r2, #214	@ 0xd6
 801a1a0:	04d2      	lsls	r2, r2, #19
 801a1a2:	4293      	cmp	r3, r2
 801a1a4:	d870      	bhi.n	801a288 <_strtod_l+0x958>
 801a1a6:	22dc      	movs	r2, #220	@ 0xdc
 801a1a8:	0492      	lsls	r2, r2, #18
 801a1aa:	4293      	cmp	r3, r2
 801a1ac:	d800      	bhi.n	801a1b0 <_strtod_l+0x880>
 801a1ae:	e695      	b.n	8019edc <_strtod_l+0x5ac>
 801a1b0:	0030      	movs	r0, r6
 801a1b2:	0039      	movs	r1, r7
 801a1b4:	4b24      	ldr	r3, [pc, #144]	@ (801a248 <_strtod_l+0x918>)
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	f7e8 fa36 	bl	8002628 <__aeabi_dmul>
 801a1bc:	4b21      	ldr	r3, [pc, #132]	@ (801a244 <_strtod_l+0x914>)
 801a1be:	0006      	movs	r6, r0
 801a1c0:	000f      	movs	r7, r1
 801a1c2:	420b      	tst	r3, r1
 801a1c4:	d000      	beq.n	801a1c8 <_strtod_l+0x898>
 801a1c6:	e5f6      	b.n	8019db6 <_strtod_l+0x486>
 801a1c8:	2322      	movs	r3, #34	@ 0x22
 801a1ca:	9a05      	ldr	r2, [sp, #20]
 801a1cc:	6013      	str	r3, [r2, #0]
 801a1ce:	e5f2      	b.n	8019db6 <_strtod_l+0x486>
 801a1d0:	970e      	str	r7, [sp, #56]	@ 0x38
 801a1d2:	2800      	cmp	r0, #0
 801a1d4:	d175      	bne.n	801a2c2 <_strtod_l+0x992>
 801a1d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a1d8:	033b      	lsls	r3, r7, #12
 801a1da:	0b1b      	lsrs	r3, r3, #12
 801a1dc:	2a00      	cmp	r2, #0
 801a1de:	d039      	beq.n	801a254 <_strtod_l+0x924>
 801a1e0:	4a1a      	ldr	r2, [pc, #104]	@ (801a24c <_strtod_l+0x91c>)
 801a1e2:	4293      	cmp	r3, r2
 801a1e4:	d138      	bne.n	801a258 <_strtod_l+0x928>
 801a1e6:	2101      	movs	r1, #1
 801a1e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1ea:	4249      	negs	r1, r1
 801a1ec:	0032      	movs	r2, r6
 801a1ee:	0008      	movs	r0, r1
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d00b      	beq.n	801a20c <_strtod_l+0x8dc>
 801a1f4:	24d4      	movs	r4, #212	@ 0xd4
 801a1f6:	4b13      	ldr	r3, [pc, #76]	@ (801a244 <_strtod_l+0x914>)
 801a1f8:	0008      	movs	r0, r1
 801a1fa:	403b      	ands	r3, r7
 801a1fc:	04e4      	lsls	r4, r4, #19
 801a1fe:	42a3      	cmp	r3, r4
 801a200:	d804      	bhi.n	801a20c <_strtod_l+0x8dc>
 801a202:	306c      	adds	r0, #108	@ 0x6c
 801a204:	0d1b      	lsrs	r3, r3, #20
 801a206:	1ac3      	subs	r3, r0, r3
 801a208:	4099      	lsls	r1, r3
 801a20a:	0008      	movs	r0, r1
 801a20c:	4282      	cmp	r2, r0
 801a20e:	d123      	bne.n	801a258 <_strtod_l+0x928>
 801a210:	4b0f      	ldr	r3, [pc, #60]	@ (801a250 <_strtod_l+0x920>)
 801a212:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a214:	4299      	cmp	r1, r3
 801a216:	d102      	bne.n	801a21e <_strtod_l+0x8ee>
 801a218:	3201      	adds	r2, #1
 801a21a:	d100      	bne.n	801a21e <_strtod_l+0x8ee>
 801a21c:	e5c2      	b.n	8019da4 <_strtod_l+0x474>
 801a21e:	4b09      	ldr	r3, [pc, #36]	@ (801a244 <_strtod_l+0x914>)
 801a220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a222:	2600      	movs	r6, #0
 801a224:	401a      	ands	r2, r3
 801a226:	0013      	movs	r3, r2
 801a228:	2280      	movs	r2, #128	@ 0x80
 801a22a:	0352      	lsls	r2, r2, #13
 801a22c:	189f      	adds	r7, r3, r2
 801a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a230:	2b00      	cmp	r3, #0
 801a232:	d1bd      	bne.n	801a1b0 <_strtod_l+0x880>
 801a234:	e5bf      	b.n	8019db6 <_strtod_l+0x486>
 801a236:	46c0      	nop			@ (mov r8, r8)
 801a238:	0801f7a8 	.word	0x0801f7a8
 801a23c:	fffffc02 	.word	0xfffffc02
 801a240:	fffffbe2 	.word	0xfffffbe2
 801a244:	7ff00000 	.word	0x7ff00000
 801a248:	39500000 	.word	0x39500000
 801a24c:	000fffff 	.word	0x000fffff
 801a250:	7fefffff 	.word	0x7fefffff
 801a254:	4333      	orrs	r3, r6
 801a256:	d09d      	beq.n	801a194 <_strtod_l+0x864>
 801a258:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d01c      	beq.n	801a298 <_strtod_l+0x968>
 801a25e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a260:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a262:	4213      	tst	r3, r2
 801a264:	d0e3      	beq.n	801a22e <_strtod_l+0x8fe>
 801a266:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a268:	0030      	movs	r0, r6
 801a26a:	0039      	movs	r1, r7
 801a26c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d016      	beq.n	801a2a0 <_strtod_l+0x970>
 801a272:	f7ff fb45 	bl	8019900 <sulp>
 801a276:	0002      	movs	r2, r0
 801a278:	000b      	movs	r3, r1
 801a27a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a27c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a27e:	f7e7 fa2b 	bl	80016d8 <__aeabi_dadd>
 801a282:	0006      	movs	r6, r0
 801a284:	000f      	movs	r7, r1
 801a286:	e7d2      	b.n	801a22e <_strtod_l+0x8fe>
 801a288:	2601      	movs	r6, #1
 801a28a:	4a92      	ldr	r2, [pc, #584]	@ (801a4d4 <_strtod_l+0xba4>)
 801a28c:	4276      	negs	r6, r6
 801a28e:	189b      	adds	r3, r3, r2
 801a290:	4a91      	ldr	r2, [pc, #580]	@ (801a4d8 <_strtod_l+0xba8>)
 801a292:	431a      	orrs	r2, r3
 801a294:	0017      	movs	r7, r2
 801a296:	e7ca      	b.n	801a22e <_strtod_l+0x8fe>
 801a298:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a29a:	4233      	tst	r3, r6
 801a29c:	d0c7      	beq.n	801a22e <_strtod_l+0x8fe>
 801a29e:	e7e2      	b.n	801a266 <_strtod_l+0x936>
 801a2a0:	f7ff fb2e 	bl	8019900 <sulp>
 801a2a4:	0002      	movs	r2, r0
 801a2a6:	000b      	movs	r3, r1
 801a2a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a2aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a2ac:	f7e8 fc84 	bl	8002bb8 <__aeabi_dsub>
 801a2b0:	2200      	movs	r2, #0
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	0006      	movs	r6, r0
 801a2b6:	000f      	movs	r7, r1
 801a2b8:	f7e6 f8f0 	bl	800049c <__aeabi_dcmpeq>
 801a2bc:	2800      	cmp	r0, #0
 801a2be:	d0b6      	beq.n	801a22e <_strtod_l+0x8fe>
 801a2c0:	e60c      	b.n	8019edc <_strtod_l+0x5ac>
 801a2c2:	9907      	ldr	r1, [sp, #28]
 801a2c4:	9806      	ldr	r0, [sp, #24]
 801a2c6:	f002 ff49 	bl	801d15c <__ratio>
 801a2ca:	2380      	movs	r3, #128	@ 0x80
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	05db      	lsls	r3, r3, #23
 801a2d0:	0004      	movs	r4, r0
 801a2d2:	000d      	movs	r5, r1
 801a2d4:	f7e6 f8f2 	bl	80004bc <__aeabi_dcmple>
 801a2d8:	2800      	cmp	r0, #0
 801a2da:	d06c      	beq.n	801a3b6 <_strtod_l+0xa86>
 801a2dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d177      	bne.n	801a3d2 <_strtod_l+0xaa2>
 801a2e2:	2e00      	cmp	r6, #0
 801a2e4:	d157      	bne.n	801a396 <_strtod_l+0xa66>
 801a2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2e8:	031b      	lsls	r3, r3, #12
 801a2ea:	d15a      	bne.n	801a3a2 <_strtod_l+0xa72>
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	0020      	movs	r0, r4
 801a2f0:	0029      	movs	r1, r5
 801a2f2:	4b7a      	ldr	r3, [pc, #488]	@ (801a4dc <_strtod_l+0xbac>)
 801a2f4:	f7e6 f8d8 	bl	80004a8 <__aeabi_dcmplt>
 801a2f8:	2800      	cmp	r0, #0
 801a2fa:	d159      	bne.n	801a3b0 <_strtod_l+0xa80>
 801a2fc:	0020      	movs	r0, r4
 801a2fe:	0029      	movs	r1, r5
 801a300:	2200      	movs	r2, #0
 801a302:	4b77      	ldr	r3, [pc, #476]	@ (801a4e0 <_strtod_l+0xbb0>)
 801a304:	f7e8 f990 	bl	8002628 <__aeabi_dmul>
 801a308:	0004      	movs	r4, r0
 801a30a:	000d      	movs	r5, r1
 801a30c:	2380      	movs	r3, #128	@ 0x80
 801a30e:	061b      	lsls	r3, r3, #24
 801a310:	18eb      	adds	r3, r5, r3
 801a312:	940a      	str	r4, [sp, #40]	@ 0x28
 801a314:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a318:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a31a:	9214      	str	r2, [sp, #80]	@ 0x50
 801a31c:	9315      	str	r3, [sp, #84]	@ 0x54
 801a31e:	4a71      	ldr	r2, [pc, #452]	@ (801a4e4 <_strtod_l+0xbb4>)
 801a320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a322:	4013      	ands	r3, r2
 801a324:	9316      	str	r3, [sp, #88]	@ 0x58
 801a326:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a328:	4b6f      	ldr	r3, [pc, #444]	@ (801a4e8 <_strtod_l+0xbb8>)
 801a32a:	429a      	cmp	r2, r3
 801a32c:	d000      	beq.n	801a330 <_strtod_l+0xa00>
 801a32e:	e087      	b.n	801a440 <_strtod_l+0xb10>
 801a330:	4a6e      	ldr	r2, [pc, #440]	@ (801a4ec <_strtod_l+0xbbc>)
 801a332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a334:	4694      	mov	ip, r2
 801a336:	4463      	add	r3, ip
 801a338:	001f      	movs	r7, r3
 801a33a:	0030      	movs	r0, r6
 801a33c:	0019      	movs	r1, r3
 801a33e:	f002 fe41 	bl	801cfc4 <__ulp>
 801a342:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a346:	f7e8 f96f 	bl	8002628 <__aeabi_dmul>
 801a34a:	0032      	movs	r2, r6
 801a34c:	003b      	movs	r3, r7
 801a34e:	f7e7 f9c3 	bl	80016d8 <__aeabi_dadd>
 801a352:	4a64      	ldr	r2, [pc, #400]	@ (801a4e4 <_strtod_l+0xbb4>)
 801a354:	4b66      	ldr	r3, [pc, #408]	@ (801a4f0 <_strtod_l+0xbc0>)
 801a356:	0006      	movs	r6, r0
 801a358:	400a      	ands	r2, r1
 801a35a:	429a      	cmp	r2, r3
 801a35c:	d940      	bls.n	801a3e0 <_strtod_l+0xab0>
 801a35e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a360:	4a64      	ldr	r2, [pc, #400]	@ (801a4f4 <_strtod_l+0xbc4>)
 801a362:	4293      	cmp	r3, r2
 801a364:	d103      	bne.n	801a36e <_strtod_l+0xa3e>
 801a366:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a368:	3301      	adds	r3, #1
 801a36a:	d100      	bne.n	801a36e <_strtod_l+0xa3e>
 801a36c:	e51a      	b.n	8019da4 <_strtod_l+0x474>
 801a36e:	2601      	movs	r6, #1
 801a370:	4f60      	ldr	r7, [pc, #384]	@ (801a4f4 <_strtod_l+0xbc4>)
 801a372:	4276      	negs	r6, r6
 801a374:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a376:	9805      	ldr	r0, [sp, #20]
 801a378:	f002 fad8 	bl	801c92c <_Bfree>
 801a37c:	9908      	ldr	r1, [sp, #32]
 801a37e:	9805      	ldr	r0, [sp, #20]
 801a380:	f002 fad4 	bl	801c92c <_Bfree>
 801a384:	9907      	ldr	r1, [sp, #28]
 801a386:	9805      	ldr	r0, [sp, #20]
 801a388:	f002 fad0 	bl	801c92c <_Bfree>
 801a38c:	9906      	ldr	r1, [sp, #24]
 801a38e:	9805      	ldr	r0, [sp, #20]
 801a390:	f002 facc 	bl	801c92c <_Bfree>
 801a394:	e617      	b.n	8019fc6 <_strtod_l+0x696>
 801a396:	2e01      	cmp	r6, #1
 801a398:	d103      	bne.n	801a3a2 <_strtod_l+0xa72>
 801a39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d100      	bne.n	801a3a2 <_strtod_l+0xa72>
 801a3a0:	e59c      	b.n	8019edc <_strtod_l+0x5ac>
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	4c54      	ldr	r4, [pc, #336]	@ (801a4f8 <_strtod_l+0xbc8>)
 801a3a6:	4d4d      	ldr	r5, [pc, #308]	@ (801a4dc <_strtod_l+0xbac>)
 801a3a8:	930a      	str	r3, [sp, #40]	@ 0x28
 801a3aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a3ac:	2400      	movs	r4, #0
 801a3ae:	e7b2      	b.n	801a316 <_strtod_l+0x9e6>
 801a3b0:	2400      	movs	r4, #0
 801a3b2:	4d4b      	ldr	r5, [pc, #300]	@ (801a4e0 <_strtod_l+0xbb0>)
 801a3b4:	e7aa      	b.n	801a30c <_strtod_l+0x9dc>
 801a3b6:	0020      	movs	r0, r4
 801a3b8:	0029      	movs	r1, r5
 801a3ba:	4b49      	ldr	r3, [pc, #292]	@ (801a4e0 <_strtod_l+0xbb0>)
 801a3bc:	2200      	movs	r2, #0
 801a3be:	f7e8 f933 	bl	8002628 <__aeabi_dmul>
 801a3c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a3c4:	0004      	movs	r4, r0
 801a3c6:	000d      	movs	r5, r1
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d09f      	beq.n	801a30c <_strtod_l+0x9dc>
 801a3cc:	940a      	str	r4, [sp, #40]	@ 0x28
 801a3ce:	950b      	str	r5, [sp, #44]	@ 0x2c
 801a3d0:	e7a1      	b.n	801a316 <_strtod_l+0x9e6>
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	4c41      	ldr	r4, [pc, #260]	@ (801a4dc <_strtod_l+0xbac>)
 801a3d6:	0025      	movs	r5, r4
 801a3d8:	930a      	str	r3, [sp, #40]	@ 0x28
 801a3da:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a3dc:	001c      	movs	r4, r3
 801a3de:	e79a      	b.n	801a316 <_strtod_l+0x9e6>
 801a3e0:	23d4      	movs	r3, #212	@ 0xd4
 801a3e2:	049b      	lsls	r3, r3, #18
 801a3e4:	18cf      	adds	r7, r1, r3
 801a3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3e8:	9710      	str	r7, [sp, #64]	@ 0x40
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d1c2      	bne.n	801a374 <_strtod_l+0xa44>
 801a3ee:	4b3d      	ldr	r3, [pc, #244]	@ (801a4e4 <_strtod_l+0xbb4>)
 801a3f0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a3f2:	403b      	ands	r3, r7
 801a3f4:	429a      	cmp	r2, r3
 801a3f6:	d1bd      	bne.n	801a374 <_strtod_l+0xa44>
 801a3f8:	0020      	movs	r0, r4
 801a3fa:	0029      	movs	r1, r5
 801a3fc:	f7e6 f93a 	bl	8000674 <__aeabi_d2lz>
 801a400:	f7e6 f972 	bl	80006e8 <__aeabi_l2d>
 801a404:	0002      	movs	r2, r0
 801a406:	000b      	movs	r3, r1
 801a408:	0020      	movs	r0, r4
 801a40a:	0029      	movs	r1, r5
 801a40c:	f7e8 fbd4 	bl	8002bb8 <__aeabi_dsub>
 801a410:	033c      	lsls	r4, r7, #12
 801a412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a414:	0b24      	lsrs	r4, r4, #12
 801a416:	4334      	orrs	r4, r6
 801a418:	900e      	str	r0, [sp, #56]	@ 0x38
 801a41a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a41c:	4a37      	ldr	r2, [pc, #220]	@ (801a4fc <_strtod_l+0xbcc>)
 801a41e:	431c      	orrs	r4, r3
 801a420:	d052      	beq.n	801a4c8 <_strtod_l+0xb98>
 801a422:	4b37      	ldr	r3, [pc, #220]	@ (801a500 <_strtod_l+0xbd0>)
 801a424:	f7e6 f840 	bl	80004a8 <__aeabi_dcmplt>
 801a428:	2800      	cmp	r0, #0
 801a42a:	d000      	beq.n	801a42e <_strtod_l+0xafe>
 801a42c:	e4c3      	b.n	8019db6 <_strtod_l+0x486>
 801a42e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a430:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a432:	4a34      	ldr	r2, [pc, #208]	@ (801a504 <_strtod_l+0xbd4>)
 801a434:	4b2a      	ldr	r3, [pc, #168]	@ (801a4e0 <_strtod_l+0xbb0>)
 801a436:	f7e6 f84b 	bl	80004d0 <__aeabi_dcmpgt>
 801a43a:	2800      	cmp	r0, #0
 801a43c:	d09a      	beq.n	801a374 <_strtod_l+0xa44>
 801a43e:	e4ba      	b.n	8019db6 <_strtod_l+0x486>
 801a440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a442:	2b00      	cmp	r3, #0
 801a444:	d02a      	beq.n	801a49c <_strtod_l+0xb6c>
 801a446:	23d4      	movs	r3, #212	@ 0xd4
 801a448:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a44a:	04db      	lsls	r3, r3, #19
 801a44c:	429a      	cmp	r2, r3
 801a44e:	d825      	bhi.n	801a49c <_strtod_l+0xb6c>
 801a450:	0020      	movs	r0, r4
 801a452:	0029      	movs	r1, r5
 801a454:	4a2c      	ldr	r2, [pc, #176]	@ (801a508 <_strtod_l+0xbd8>)
 801a456:	4b2d      	ldr	r3, [pc, #180]	@ (801a50c <_strtod_l+0xbdc>)
 801a458:	f7e6 f830 	bl	80004bc <__aeabi_dcmple>
 801a45c:	2800      	cmp	r0, #0
 801a45e:	d016      	beq.n	801a48e <_strtod_l+0xb5e>
 801a460:	0020      	movs	r0, r4
 801a462:	0029      	movs	r1, r5
 801a464:	f7e6 f8e8 	bl	8000638 <__aeabi_d2uiz>
 801a468:	2800      	cmp	r0, #0
 801a46a:	d100      	bne.n	801a46e <_strtod_l+0xb3e>
 801a46c:	3001      	adds	r0, #1
 801a46e:	f7e8 ffcb 	bl	8003408 <__aeabi_ui2d>
 801a472:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a474:	0004      	movs	r4, r0
 801a476:	000d      	movs	r5, r1
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d122      	bne.n	801a4c2 <_strtod_l+0xb92>
 801a47c:	2380      	movs	r3, #128	@ 0x80
 801a47e:	061b      	lsls	r3, r3, #24
 801a480:	18cb      	adds	r3, r1, r3
 801a482:	9018      	str	r0, [sp, #96]	@ 0x60
 801a484:	9319      	str	r3, [sp, #100]	@ 0x64
 801a486:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a48a:	9214      	str	r2, [sp, #80]	@ 0x50
 801a48c:	9315      	str	r3, [sp, #84]	@ 0x54
 801a48e:	22d6      	movs	r2, #214	@ 0xd6
 801a490:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a492:	04d2      	lsls	r2, r2, #19
 801a494:	189b      	adds	r3, r3, r2
 801a496:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a498:	1a9b      	subs	r3, r3, r2
 801a49a:	9315      	str	r3, [sp, #84]	@ 0x54
 801a49c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a49e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a4a0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a4a2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801a4a4:	f002 fd8e 	bl	801cfc4 <__ulp>
 801a4a8:	0002      	movs	r2, r0
 801a4aa:	000b      	movs	r3, r1
 801a4ac:	0030      	movs	r0, r6
 801a4ae:	0039      	movs	r1, r7
 801a4b0:	f7e8 f8ba 	bl	8002628 <__aeabi_dmul>
 801a4b4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a4b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a4b8:	f7e7 f90e 	bl	80016d8 <__aeabi_dadd>
 801a4bc:	0006      	movs	r6, r0
 801a4be:	000f      	movs	r7, r1
 801a4c0:	e791      	b.n	801a3e6 <_strtod_l+0xab6>
 801a4c2:	9418      	str	r4, [sp, #96]	@ 0x60
 801a4c4:	9519      	str	r5, [sp, #100]	@ 0x64
 801a4c6:	e7de      	b.n	801a486 <_strtod_l+0xb56>
 801a4c8:	4b11      	ldr	r3, [pc, #68]	@ (801a510 <_strtod_l+0xbe0>)
 801a4ca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a4cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a4ce:	f7e5 ffeb 	bl	80004a8 <__aeabi_dcmplt>
 801a4d2:	e7b2      	b.n	801a43a <_strtod_l+0xb0a>
 801a4d4:	fff00000 	.word	0xfff00000
 801a4d8:	000fffff 	.word	0x000fffff
 801a4dc:	3ff00000 	.word	0x3ff00000
 801a4e0:	3fe00000 	.word	0x3fe00000
 801a4e4:	7ff00000 	.word	0x7ff00000
 801a4e8:	7fe00000 	.word	0x7fe00000
 801a4ec:	fcb00000 	.word	0xfcb00000
 801a4f0:	7c9fffff 	.word	0x7c9fffff
 801a4f4:	7fefffff 	.word	0x7fefffff
 801a4f8:	bff00000 	.word	0xbff00000
 801a4fc:	94a03595 	.word	0x94a03595
 801a500:	3fdfffff 	.word	0x3fdfffff
 801a504:	35afe535 	.word	0x35afe535
 801a508:	ffc00000 	.word	0xffc00000
 801a50c:	41dfffff 	.word	0x41dfffff
 801a510:	3fcfffff 	.word	0x3fcfffff

0801a514 <strtod>:
 801a514:	b510      	push	{r4, lr}
 801a516:	4c04      	ldr	r4, [pc, #16]	@ (801a528 <strtod+0x14>)
 801a518:	000a      	movs	r2, r1
 801a51a:	0001      	movs	r1, r0
 801a51c:	4b03      	ldr	r3, [pc, #12]	@ (801a52c <strtod+0x18>)
 801a51e:	6820      	ldr	r0, [r4, #0]
 801a520:	f7ff fa06 	bl	8019930 <_strtod_l>
 801a524:	bd10      	pop	{r4, pc}
 801a526:	46c0      	nop			@ (mov r8, r8)
 801a528:	20000374 	.word	0x20000374
 801a52c:	20000208 	.word	0x20000208

0801a530 <__cvt>:
 801a530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a532:	001f      	movs	r7, r3
 801a534:	2300      	movs	r3, #0
 801a536:	0016      	movs	r6, r2
 801a538:	b08b      	sub	sp, #44	@ 0x2c
 801a53a:	429f      	cmp	r7, r3
 801a53c:	da04      	bge.n	801a548 <__cvt+0x18>
 801a53e:	2180      	movs	r1, #128	@ 0x80
 801a540:	0609      	lsls	r1, r1, #24
 801a542:	187b      	adds	r3, r7, r1
 801a544:	001f      	movs	r7, r3
 801a546:	232d      	movs	r3, #45	@ 0x2d
 801a548:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a54a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801a54c:	7013      	strb	r3, [r2, #0]
 801a54e:	2320      	movs	r3, #32
 801a550:	2203      	movs	r2, #3
 801a552:	439d      	bics	r5, r3
 801a554:	2d46      	cmp	r5, #70	@ 0x46
 801a556:	d007      	beq.n	801a568 <__cvt+0x38>
 801a558:	002b      	movs	r3, r5
 801a55a:	3b45      	subs	r3, #69	@ 0x45
 801a55c:	4259      	negs	r1, r3
 801a55e:	414b      	adcs	r3, r1
 801a560:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a562:	3a01      	subs	r2, #1
 801a564:	18cb      	adds	r3, r1, r3
 801a566:	9310      	str	r3, [sp, #64]	@ 0x40
 801a568:	ab09      	add	r3, sp, #36	@ 0x24
 801a56a:	9304      	str	r3, [sp, #16]
 801a56c:	ab08      	add	r3, sp, #32
 801a56e:	9303      	str	r3, [sp, #12]
 801a570:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a572:	9200      	str	r2, [sp, #0]
 801a574:	9302      	str	r3, [sp, #8]
 801a576:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a578:	0032      	movs	r2, r6
 801a57a:	9301      	str	r3, [sp, #4]
 801a57c:	003b      	movs	r3, r7
 801a57e:	f000 ff2b 	bl	801b3d8 <_dtoa_r>
 801a582:	0004      	movs	r4, r0
 801a584:	2d47      	cmp	r5, #71	@ 0x47
 801a586:	d11b      	bne.n	801a5c0 <__cvt+0x90>
 801a588:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a58a:	07db      	lsls	r3, r3, #31
 801a58c:	d511      	bpl.n	801a5b2 <__cvt+0x82>
 801a58e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a590:	18c3      	adds	r3, r0, r3
 801a592:	9307      	str	r3, [sp, #28]
 801a594:	2200      	movs	r2, #0
 801a596:	2300      	movs	r3, #0
 801a598:	0030      	movs	r0, r6
 801a59a:	0039      	movs	r1, r7
 801a59c:	f7e5 ff7e 	bl	800049c <__aeabi_dcmpeq>
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	d001      	beq.n	801a5a8 <__cvt+0x78>
 801a5a4:	9b07      	ldr	r3, [sp, #28]
 801a5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5a8:	2230      	movs	r2, #48	@ 0x30
 801a5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5ac:	9907      	ldr	r1, [sp, #28]
 801a5ae:	428b      	cmp	r3, r1
 801a5b0:	d320      	bcc.n	801a5f4 <__cvt+0xc4>
 801a5b2:	0020      	movs	r0, r4
 801a5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a5b8:	1b1b      	subs	r3, r3, r4
 801a5ba:	6013      	str	r3, [r2, #0]
 801a5bc:	b00b      	add	sp, #44	@ 0x2c
 801a5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a5c2:	18c3      	adds	r3, r0, r3
 801a5c4:	9307      	str	r3, [sp, #28]
 801a5c6:	2d46      	cmp	r5, #70	@ 0x46
 801a5c8:	d1e4      	bne.n	801a594 <__cvt+0x64>
 801a5ca:	7803      	ldrb	r3, [r0, #0]
 801a5cc:	2b30      	cmp	r3, #48	@ 0x30
 801a5ce:	d10c      	bne.n	801a5ea <__cvt+0xba>
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	0030      	movs	r0, r6
 801a5d6:	0039      	movs	r1, r7
 801a5d8:	f7e5 ff60 	bl	800049c <__aeabi_dcmpeq>
 801a5dc:	2800      	cmp	r0, #0
 801a5de:	d104      	bne.n	801a5ea <__cvt+0xba>
 801a5e0:	2301      	movs	r3, #1
 801a5e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a5e4:	1a9b      	subs	r3, r3, r2
 801a5e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a5e8:	6013      	str	r3, [r2, #0]
 801a5ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a5ec:	9a07      	ldr	r2, [sp, #28]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	18d3      	adds	r3, r2, r3
 801a5f2:	e7ce      	b.n	801a592 <__cvt+0x62>
 801a5f4:	1c59      	adds	r1, r3, #1
 801a5f6:	9109      	str	r1, [sp, #36]	@ 0x24
 801a5f8:	701a      	strb	r2, [r3, #0]
 801a5fa:	e7d6      	b.n	801a5aa <__cvt+0x7a>

0801a5fc <__exponent>:
 801a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5fe:	232b      	movs	r3, #43	@ 0x2b
 801a600:	0005      	movs	r5, r0
 801a602:	000c      	movs	r4, r1
 801a604:	b085      	sub	sp, #20
 801a606:	7002      	strb	r2, [r0, #0]
 801a608:	2900      	cmp	r1, #0
 801a60a:	da01      	bge.n	801a610 <__exponent+0x14>
 801a60c:	424c      	negs	r4, r1
 801a60e:	3302      	adds	r3, #2
 801a610:	706b      	strb	r3, [r5, #1]
 801a612:	2c09      	cmp	r4, #9
 801a614:	dd2c      	ble.n	801a670 <__exponent+0x74>
 801a616:	ab02      	add	r3, sp, #8
 801a618:	1dde      	adds	r6, r3, #7
 801a61a:	0020      	movs	r0, r4
 801a61c:	210a      	movs	r1, #10
 801a61e:	f7e5 ff27 	bl	8000470 <__aeabi_idivmod>
 801a622:	0037      	movs	r7, r6
 801a624:	3130      	adds	r1, #48	@ 0x30
 801a626:	3e01      	subs	r6, #1
 801a628:	0020      	movs	r0, r4
 801a62a:	7031      	strb	r1, [r6, #0]
 801a62c:	210a      	movs	r1, #10
 801a62e:	9401      	str	r4, [sp, #4]
 801a630:	f7e5 fe38 	bl	80002a4 <__divsi3>
 801a634:	9b01      	ldr	r3, [sp, #4]
 801a636:	0004      	movs	r4, r0
 801a638:	2b63      	cmp	r3, #99	@ 0x63
 801a63a:	dcee      	bgt.n	801a61a <__exponent+0x1e>
 801a63c:	1eba      	subs	r2, r7, #2
 801a63e:	1ca8      	adds	r0, r5, #2
 801a640:	0001      	movs	r1, r0
 801a642:	0013      	movs	r3, r2
 801a644:	3430      	adds	r4, #48	@ 0x30
 801a646:	7014      	strb	r4, [r2, #0]
 801a648:	ac02      	add	r4, sp, #8
 801a64a:	3407      	adds	r4, #7
 801a64c:	429c      	cmp	r4, r3
 801a64e:	d80a      	bhi.n	801a666 <__exponent+0x6a>
 801a650:	2300      	movs	r3, #0
 801a652:	42a2      	cmp	r2, r4
 801a654:	d803      	bhi.n	801a65e <__exponent+0x62>
 801a656:	3309      	adds	r3, #9
 801a658:	aa02      	add	r2, sp, #8
 801a65a:	189b      	adds	r3, r3, r2
 801a65c:	1bdb      	subs	r3, r3, r7
 801a65e:	18c0      	adds	r0, r0, r3
 801a660:	1b40      	subs	r0, r0, r5
 801a662:	b005      	add	sp, #20
 801a664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a666:	781c      	ldrb	r4, [r3, #0]
 801a668:	3301      	adds	r3, #1
 801a66a:	700c      	strb	r4, [r1, #0]
 801a66c:	3101      	adds	r1, #1
 801a66e:	e7eb      	b.n	801a648 <__exponent+0x4c>
 801a670:	2330      	movs	r3, #48	@ 0x30
 801a672:	18e4      	adds	r4, r4, r3
 801a674:	70ab      	strb	r3, [r5, #2]
 801a676:	1d28      	adds	r0, r5, #4
 801a678:	70ec      	strb	r4, [r5, #3]
 801a67a:	e7f1      	b.n	801a660 <__exponent+0x64>

0801a67c <_printf_float>:
 801a67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a67e:	b097      	sub	sp, #92	@ 0x5c
 801a680:	000d      	movs	r5, r1
 801a682:	920a      	str	r2, [sp, #40]	@ 0x28
 801a684:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801a686:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a688:	9009      	str	r0, [sp, #36]	@ 0x24
 801a68a:	f000 fd7d 	bl	801b188 <_localeconv_r>
 801a68e:	6803      	ldr	r3, [r0, #0]
 801a690:	0018      	movs	r0, r3
 801a692:	930d      	str	r3, [sp, #52]	@ 0x34
 801a694:	f7e5 fd60 	bl	8000158 <strlen>
 801a698:	2300      	movs	r3, #0
 801a69a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801a69c:	9314      	str	r3, [sp, #80]	@ 0x50
 801a69e:	7e2b      	ldrb	r3, [r5, #24]
 801a6a0:	2207      	movs	r2, #7
 801a6a2:	930c      	str	r3, [sp, #48]	@ 0x30
 801a6a4:	682b      	ldr	r3, [r5, #0]
 801a6a6:	930e      	str	r3, [sp, #56]	@ 0x38
 801a6a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a6aa:	6823      	ldr	r3, [r4, #0]
 801a6ac:	05c9      	lsls	r1, r1, #23
 801a6ae:	d545      	bpl.n	801a73c <_printf_float+0xc0>
 801a6b0:	189b      	adds	r3, r3, r2
 801a6b2:	4393      	bics	r3, r2
 801a6b4:	001a      	movs	r2, r3
 801a6b6:	3208      	adds	r2, #8
 801a6b8:	6022      	str	r2, [r4, #0]
 801a6ba:	2201      	movs	r2, #1
 801a6bc:	681e      	ldr	r6, [r3, #0]
 801a6be:	685f      	ldr	r7, [r3, #4]
 801a6c0:	007b      	lsls	r3, r7, #1
 801a6c2:	085b      	lsrs	r3, r3, #1
 801a6c4:	9311      	str	r3, [sp, #68]	@ 0x44
 801a6c6:	9610      	str	r6, [sp, #64]	@ 0x40
 801a6c8:	64ae      	str	r6, [r5, #72]	@ 0x48
 801a6ca:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801a6cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a6ce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a6d0:	4ba7      	ldr	r3, [pc, #668]	@ (801a970 <_printf_float+0x2f4>)
 801a6d2:	4252      	negs	r2, r2
 801a6d4:	f7e8 fe0c 	bl	80032f0 <__aeabi_dcmpun>
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	d131      	bne.n	801a740 <_printf_float+0xc4>
 801a6dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a6de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a6e0:	2201      	movs	r2, #1
 801a6e2:	4ba3      	ldr	r3, [pc, #652]	@ (801a970 <_printf_float+0x2f4>)
 801a6e4:	4252      	negs	r2, r2
 801a6e6:	f7e5 fee9 	bl	80004bc <__aeabi_dcmple>
 801a6ea:	2800      	cmp	r0, #0
 801a6ec:	d128      	bne.n	801a740 <_printf_float+0xc4>
 801a6ee:	2200      	movs	r2, #0
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	0030      	movs	r0, r6
 801a6f4:	0039      	movs	r1, r7
 801a6f6:	f7e5 fed7 	bl	80004a8 <__aeabi_dcmplt>
 801a6fa:	2800      	cmp	r0, #0
 801a6fc:	d003      	beq.n	801a706 <_printf_float+0x8a>
 801a6fe:	002b      	movs	r3, r5
 801a700:	222d      	movs	r2, #45	@ 0x2d
 801a702:	3343      	adds	r3, #67	@ 0x43
 801a704:	701a      	strb	r2, [r3, #0]
 801a706:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a708:	4f9a      	ldr	r7, [pc, #616]	@ (801a974 <_printf_float+0x2f8>)
 801a70a:	2b47      	cmp	r3, #71	@ 0x47
 801a70c:	d900      	bls.n	801a710 <_printf_float+0x94>
 801a70e:	4f9a      	ldr	r7, [pc, #616]	@ (801a978 <_printf_float+0x2fc>)
 801a710:	2303      	movs	r3, #3
 801a712:	2400      	movs	r4, #0
 801a714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a716:	612b      	str	r3, [r5, #16]
 801a718:	3301      	adds	r3, #1
 801a71a:	439a      	bics	r2, r3
 801a71c:	602a      	str	r2, [r5, #0]
 801a71e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a720:	0029      	movs	r1, r5
 801a722:	9300      	str	r3, [sp, #0]
 801a724:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a728:	aa15      	add	r2, sp, #84	@ 0x54
 801a72a:	f000 f9e5 	bl	801aaf8 <_printf_common>
 801a72e:	3001      	adds	r0, #1
 801a730:	d000      	beq.n	801a734 <_printf_float+0xb8>
 801a732:	e09f      	b.n	801a874 <_printf_float+0x1f8>
 801a734:	2001      	movs	r0, #1
 801a736:	4240      	negs	r0, r0
 801a738:	b017      	add	sp, #92	@ 0x5c
 801a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a73c:	3307      	adds	r3, #7
 801a73e:	e7b8      	b.n	801a6b2 <_printf_float+0x36>
 801a740:	0032      	movs	r2, r6
 801a742:	003b      	movs	r3, r7
 801a744:	0030      	movs	r0, r6
 801a746:	0039      	movs	r1, r7
 801a748:	f7e8 fdd2 	bl	80032f0 <__aeabi_dcmpun>
 801a74c:	2800      	cmp	r0, #0
 801a74e:	d00b      	beq.n	801a768 <_printf_float+0xec>
 801a750:	2f00      	cmp	r7, #0
 801a752:	da03      	bge.n	801a75c <_printf_float+0xe0>
 801a754:	002b      	movs	r3, r5
 801a756:	222d      	movs	r2, #45	@ 0x2d
 801a758:	3343      	adds	r3, #67	@ 0x43
 801a75a:	701a      	strb	r2, [r3, #0]
 801a75c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a75e:	4f87      	ldr	r7, [pc, #540]	@ (801a97c <_printf_float+0x300>)
 801a760:	2b47      	cmp	r3, #71	@ 0x47
 801a762:	d9d5      	bls.n	801a710 <_printf_float+0x94>
 801a764:	4f86      	ldr	r7, [pc, #536]	@ (801a980 <_printf_float+0x304>)
 801a766:	e7d3      	b.n	801a710 <_printf_float+0x94>
 801a768:	2220      	movs	r2, #32
 801a76a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801a76c:	686b      	ldr	r3, [r5, #4]
 801a76e:	4394      	bics	r4, r2
 801a770:	1c5a      	adds	r2, r3, #1
 801a772:	d146      	bne.n	801a802 <_printf_float+0x186>
 801a774:	3307      	adds	r3, #7
 801a776:	606b      	str	r3, [r5, #4]
 801a778:	2380      	movs	r3, #128	@ 0x80
 801a77a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a77c:	00db      	lsls	r3, r3, #3
 801a77e:	4313      	orrs	r3, r2
 801a780:	2200      	movs	r2, #0
 801a782:	602b      	str	r3, [r5, #0]
 801a784:	9206      	str	r2, [sp, #24]
 801a786:	aa14      	add	r2, sp, #80	@ 0x50
 801a788:	9205      	str	r2, [sp, #20]
 801a78a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a78c:	a90a      	add	r1, sp, #40	@ 0x28
 801a78e:	9204      	str	r2, [sp, #16]
 801a790:	aa13      	add	r2, sp, #76	@ 0x4c
 801a792:	9203      	str	r2, [sp, #12]
 801a794:	2223      	movs	r2, #35	@ 0x23
 801a796:	1852      	adds	r2, r2, r1
 801a798:	9202      	str	r2, [sp, #8]
 801a79a:	9301      	str	r3, [sp, #4]
 801a79c:	686b      	ldr	r3, [r5, #4]
 801a79e:	0032      	movs	r2, r6
 801a7a0:	9300      	str	r3, [sp, #0]
 801a7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a7a4:	003b      	movs	r3, r7
 801a7a6:	f7ff fec3 	bl	801a530 <__cvt>
 801a7aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a7ac:	0007      	movs	r7, r0
 801a7ae:	2c47      	cmp	r4, #71	@ 0x47
 801a7b0:	d12d      	bne.n	801a80e <_printf_float+0x192>
 801a7b2:	1cd3      	adds	r3, r2, #3
 801a7b4:	db02      	blt.n	801a7bc <_printf_float+0x140>
 801a7b6:	686b      	ldr	r3, [r5, #4]
 801a7b8:	429a      	cmp	r2, r3
 801a7ba:	dd48      	ble.n	801a84e <_printf_float+0x1d2>
 801a7bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a7c0:	3b02      	subs	r3, #2
 801a7c2:	b2db      	uxtb	r3, r3
 801a7c4:	930c      	str	r3, [sp, #48]	@ 0x30
 801a7c6:	0028      	movs	r0, r5
 801a7c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a7ca:	3901      	subs	r1, #1
 801a7cc:	3050      	adds	r0, #80	@ 0x50
 801a7ce:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a7d0:	f7ff ff14 	bl	801a5fc <__exponent>
 801a7d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a7d6:	0004      	movs	r4, r0
 801a7d8:	1813      	adds	r3, r2, r0
 801a7da:	612b      	str	r3, [r5, #16]
 801a7dc:	2a01      	cmp	r2, #1
 801a7de:	dc02      	bgt.n	801a7e6 <_printf_float+0x16a>
 801a7e0:	682a      	ldr	r2, [r5, #0]
 801a7e2:	07d2      	lsls	r2, r2, #31
 801a7e4:	d501      	bpl.n	801a7ea <_printf_float+0x16e>
 801a7e6:	3301      	adds	r3, #1
 801a7e8:	612b      	str	r3, [r5, #16]
 801a7ea:	2323      	movs	r3, #35	@ 0x23
 801a7ec:	aa0a      	add	r2, sp, #40	@ 0x28
 801a7ee:	189b      	adds	r3, r3, r2
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d100      	bne.n	801a7f8 <_printf_float+0x17c>
 801a7f6:	e792      	b.n	801a71e <_printf_float+0xa2>
 801a7f8:	002b      	movs	r3, r5
 801a7fa:	222d      	movs	r2, #45	@ 0x2d
 801a7fc:	3343      	adds	r3, #67	@ 0x43
 801a7fe:	701a      	strb	r2, [r3, #0]
 801a800:	e78d      	b.n	801a71e <_printf_float+0xa2>
 801a802:	2c47      	cmp	r4, #71	@ 0x47
 801a804:	d1b8      	bne.n	801a778 <_printf_float+0xfc>
 801a806:	2b00      	cmp	r3, #0
 801a808:	d1b6      	bne.n	801a778 <_printf_float+0xfc>
 801a80a:	3301      	adds	r3, #1
 801a80c:	e7b3      	b.n	801a776 <_printf_float+0xfa>
 801a80e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a810:	0011      	movs	r1, r2
 801a812:	2b65      	cmp	r3, #101	@ 0x65
 801a814:	d9d7      	bls.n	801a7c6 <_printf_float+0x14a>
 801a816:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a818:	2b66      	cmp	r3, #102	@ 0x66
 801a81a:	d11a      	bne.n	801a852 <_printf_float+0x1d6>
 801a81c:	686b      	ldr	r3, [r5, #4]
 801a81e:	2a00      	cmp	r2, #0
 801a820:	dd09      	ble.n	801a836 <_printf_float+0x1ba>
 801a822:	612a      	str	r2, [r5, #16]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d102      	bne.n	801a82e <_printf_float+0x1b2>
 801a828:	6829      	ldr	r1, [r5, #0]
 801a82a:	07c9      	lsls	r1, r1, #31
 801a82c:	d50b      	bpl.n	801a846 <_printf_float+0x1ca>
 801a82e:	3301      	adds	r3, #1
 801a830:	189b      	adds	r3, r3, r2
 801a832:	612b      	str	r3, [r5, #16]
 801a834:	e007      	b.n	801a846 <_printf_float+0x1ca>
 801a836:	2b00      	cmp	r3, #0
 801a838:	d103      	bne.n	801a842 <_printf_float+0x1c6>
 801a83a:	2201      	movs	r2, #1
 801a83c:	6829      	ldr	r1, [r5, #0]
 801a83e:	4211      	tst	r1, r2
 801a840:	d000      	beq.n	801a844 <_printf_float+0x1c8>
 801a842:	1c9a      	adds	r2, r3, #2
 801a844:	612a      	str	r2, [r5, #16]
 801a846:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a848:	2400      	movs	r4, #0
 801a84a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801a84c:	e7cd      	b.n	801a7ea <_printf_float+0x16e>
 801a84e:	2367      	movs	r3, #103	@ 0x67
 801a850:	930c      	str	r3, [sp, #48]	@ 0x30
 801a852:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a854:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a856:	4299      	cmp	r1, r3
 801a858:	db06      	blt.n	801a868 <_printf_float+0x1ec>
 801a85a:	682b      	ldr	r3, [r5, #0]
 801a85c:	6129      	str	r1, [r5, #16]
 801a85e:	07db      	lsls	r3, r3, #31
 801a860:	d5f1      	bpl.n	801a846 <_printf_float+0x1ca>
 801a862:	3101      	adds	r1, #1
 801a864:	6129      	str	r1, [r5, #16]
 801a866:	e7ee      	b.n	801a846 <_printf_float+0x1ca>
 801a868:	2201      	movs	r2, #1
 801a86a:	2900      	cmp	r1, #0
 801a86c:	dce0      	bgt.n	801a830 <_printf_float+0x1b4>
 801a86e:	1892      	adds	r2, r2, r2
 801a870:	1a52      	subs	r2, r2, r1
 801a872:	e7dd      	b.n	801a830 <_printf_float+0x1b4>
 801a874:	682a      	ldr	r2, [r5, #0]
 801a876:	0553      	lsls	r3, r2, #21
 801a878:	d408      	bmi.n	801a88c <_printf_float+0x210>
 801a87a:	692b      	ldr	r3, [r5, #16]
 801a87c:	003a      	movs	r2, r7
 801a87e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a880:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a882:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a884:	47a0      	blx	r4
 801a886:	3001      	adds	r0, #1
 801a888:	d129      	bne.n	801a8de <_printf_float+0x262>
 801a88a:	e753      	b.n	801a734 <_printf_float+0xb8>
 801a88c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a88e:	2b65      	cmp	r3, #101	@ 0x65
 801a890:	d800      	bhi.n	801a894 <_printf_float+0x218>
 801a892:	e0da      	b.n	801aa4a <_printf_float+0x3ce>
 801a894:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801a896:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801a898:	2200      	movs	r2, #0
 801a89a:	2300      	movs	r3, #0
 801a89c:	f7e5 fdfe 	bl	800049c <__aeabi_dcmpeq>
 801a8a0:	2800      	cmp	r0, #0
 801a8a2:	d033      	beq.n	801a90c <_printf_float+0x290>
 801a8a4:	2301      	movs	r3, #1
 801a8a6:	4a37      	ldr	r2, [pc, #220]	@ (801a984 <_printf_float+0x308>)
 801a8a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a8aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a8ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a8ae:	47a0      	blx	r4
 801a8b0:	3001      	adds	r0, #1
 801a8b2:	d100      	bne.n	801a8b6 <_printf_float+0x23a>
 801a8b4:	e73e      	b.n	801a734 <_printf_float+0xb8>
 801a8b6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a8b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a8ba:	42b3      	cmp	r3, r6
 801a8bc:	db02      	blt.n	801a8c4 <_printf_float+0x248>
 801a8be:	682b      	ldr	r3, [r5, #0]
 801a8c0:	07db      	lsls	r3, r3, #31
 801a8c2:	d50c      	bpl.n	801a8de <_printf_float+0x262>
 801a8c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a8c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a8c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a8ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a8cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a8ce:	47a0      	blx	r4
 801a8d0:	2400      	movs	r4, #0
 801a8d2:	3001      	adds	r0, #1
 801a8d4:	d100      	bne.n	801a8d8 <_printf_float+0x25c>
 801a8d6:	e72d      	b.n	801a734 <_printf_float+0xb8>
 801a8d8:	1e73      	subs	r3, r6, #1
 801a8da:	42a3      	cmp	r3, r4
 801a8dc:	dc0a      	bgt.n	801a8f4 <_printf_float+0x278>
 801a8de:	682b      	ldr	r3, [r5, #0]
 801a8e0:	079b      	lsls	r3, r3, #30
 801a8e2:	d500      	bpl.n	801a8e6 <_printf_float+0x26a>
 801a8e4:	e105      	b.n	801aaf2 <_printf_float+0x476>
 801a8e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a8e8:	68e8      	ldr	r0, [r5, #12]
 801a8ea:	4298      	cmp	r0, r3
 801a8ec:	db00      	blt.n	801a8f0 <_printf_float+0x274>
 801a8ee:	e723      	b.n	801a738 <_printf_float+0xbc>
 801a8f0:	0018      	movs	r0, r3
 801a8f2:	e721      	b.n	801a738 <_printf_float+0xbc>
 801a8f4:	002a      	movs	r2, r5
 801a8f6:	2301      	movs	r3, #1
 801a8f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a8fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a8fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a8fe:	321a      	adds	r2, #26
 801a900:	47b8      	blx	r7
 801a902:	3001      	adds	r0, #1
 801a904:	d100      	bne.n	801a908 <_printf_float+0x28c>
 801a906:	e715      	b.n	801a734 <_printf_float+0xb8>
 801a908:	3401      	adds	r4, #1
 801a90a:	e7e5      	b.n	801a8d8 <_printf_float+0x25c>
 801a90c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a90e:	2b00      	cmp	r3, #0
 801a910:	dc3a      	bgt.n	801a988 <_printf_float+0x30c>
 801a912:	2301      	movs	r3, #1
 801a914:	4a1b      	ldr	r2, [pc, #108]	@ (801a984 <_printf_float+0x308>)
 801a916:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a918:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a91a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a91c:	47a0      	blx	r4
 801a91e:	3001      	adds	r0, #1
 801a920:	d100      	bne.n	801a924 <_printf_float+0x2a8>
 801a922:	e707      	b.n	801a734 <_printf_float+0xb8>
 801a924:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a926:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a928:	4333      	orrs	r3, r6
 801a92a:	d102      	bne.n	801a932 <_printf_float+0x2b6>
 801a92c:	682b      	ldr	r3, [r5, #0]
 801a92e:	07db      	lsls	r3, r3, #31
 801a930:	d5d5      	bpl.n	801a8de <_printf_float+0x262>
 801a932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a934:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a936:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a938:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a93a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a93c:	47a0      	blx	r4
 801a93e:	2300      	movs	r3, #0
 801a940:	3001      	adds	r0, #1
 801a942:	d100      	bne.n	801a946 <_printf_float+0x2ca>
 801a944:	e6f6      	b.n	801a734 <_printf_float+0xb8>
 801a946:	930c      	str	r3, [sp, #48]	@ 0x30
 801a948:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a94a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a94c:	425b      	negs	r3, r3
 801a94e:	4293      	cmp	r3, r2
 801a950:	dc01      	bgt.n	801a956 <_printf_float+0x2da>
 801a952:	0033      	movs	r3, r6
 801a954:	e792      	b.n	801a87c <_printf_float+0x200>
 801a956:	002a      	movs	r2, r5
 801a958:	2301      	movs	r3, #1
 801a95a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a95c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a95e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a960:	321a      	adds	r2, #26
 801a962:	47a0      	blx	r4
 801a964:	3001      	adds	r0, #1
 801a966:	d100      	bne.n	801a96a <_printf_float+0x2ee>
 801a968:	e6e4      	b.n	801a734 <_printf_float+0xb8>
 801a96a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a96c:	3301      	adds	r3, #1
 801a96e:	e7ea      	b.n	801a946 <_printf_float+0x2ca>
 801a970:	7fefffff 	.word	0x7fefffff
 801a974:	0801f7d0 	.word	0x0801f7d0
 801a978:	0801f7d4 	.word	0x0801f7d4
 801a97c:	0801f7d8 	.word	0x0801f7d8
 801a980:	0801f7dc 	.word	0x0801f7dc
 801a984:	0801f7e0 	.word	0x0801f7e0
 801a988:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a98a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801a98c:	930c      	str	r3, [sp, #48]	@ 0x30
 801a98e:	429e      	cmp	r6, r3
 801a990:	dd00      	ble.n	801a994 <_printf_float+0x318>
 801a992:	001e      	movs	r6, r3
 801a994:	2e00      	cmp	r6, #0
 801a996:	dc31      	bgt.n	801a9fc <_printf_float+0x380>
 801a998:	43f3      	mvns	r3, r6
 801a99a:	2400      	movs	r4, #0
 801a99c:	17db      	asrs	r3, r3, #31
 801a99e:	4033      	ands	r3, r6
 801a9a0:	930e      	str	r3, [sp, #56]	@ 0x38
 801a9a2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801a9a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a9a6:	1af3      	subs	r3, r6, r3
 801a9a8:	42a3      	cmp	r3, r4
 801a9aa:	dc30      	bgt.n	801aa0e <_printf_float+0x392>
 801a9ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a9ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	dc38      	bgt.n	801aa26 <_printf_float+0x3aa>
 801a9b4:	682b      	ldr	r3, [r5, #0]
 801a9b6:	07db      	lsls	r3, r3, #31
 801a9b8:	d435      	bmi.n	801aa26 <_printf_float+0x3aa>
 801a9ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801a9bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a9be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9c0:	1b9b      	subs	r3, r3, r6
 801a9c2:	1b14      	subs	r4, r2, r4
 801a9c4:	429c      	cmp	r4, r3
 801a9c6:	dd00      	ble.n	801a9ca <_printf_float+0x34e>
 801a9c8:	001c      	movs	r4, r3
 801a9ca:	2c00      	cmp	r4, #0
 801a9cc:	dc34      	bgt.n	801aa38 <_printf_float+0x3bc>
 801a9ce:	43e3      	mvns	r3, r4
 801a9d0:	2600      	movs	r6, #0
 801a9d2:	17db      	asrs	r3, r3, #31
 801a9d4:	401c      	ands	r4, r3
 801a9d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a9d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9da:	1ad3      	subs	r3, r2, r3
 801a9dc:	1b1b      	subs	r3, r3, r4
 801a9de:	42b3      	cmp	r3, r6
 801a9e0:	dc00      	bgt.n	801a9e4 <_printf_float+0x368>
 801a9e2:	e77c      	b.n	801a8de <_printf_float+0x262>
 801a9e4:	002a      	movs	r2, r5
 801a9e6:	2301      	movs	r3, #1
 801a9e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a9ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a9ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a9ee:	321a      	adds	r2, #26
 801a9f0:	47b8      	blx	r7
 801a9f2:	3001      	adds	r0, #1
 801a9f4:	d100      	bne.n	801a9f8 <_printf_float+0x37c>
 801a9f6:	e69d      	b.n	801a734 <_printf_float+0xb8>
 801a9f8:	3601      	adds	r6, #1
 801a9fa:	e7ec      	b.n	801a9d6 <_printf_float+0x35a>
 801a9fc:	0033      	movs	r3, r6
 801a9fe:	003a      	movs	r2, r7
 801aa00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801aa06:	47a0      	blx	r4
 801aa08:	3001      	adds	r0, #1
 801aa0a:	d1c5      	bne.n	801a998 <_printf_float+0x31c>
 801aa0c:	e692      	b.n	801a734 <_printf_float+0xb8>
 801aa0e:	002a      	movs	r2, r5
 801aa10:	2301      	movs	r3, #1
 801aa12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa16:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aa18:	321a      	adds	r2, #26
 801aa1a:	47b0      	blx	r6
 801aa1c:	3001      	adds	r0, #1
 801aa1e:	d100      	bne.n	801aa22 <_printf_float+0x3a6>
 801aa20:	e688      	b.n	801a734 <_printf_float+0xb8>
 801aa22:	3401      	adds	r4, #1
 801aa24:	e7bd      	b.n	801a9a2 <_printf_float+0x326>
 801aa26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aa2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801aa30:	47a0      	blx	r4
 801aa32:	3001      	adds	r0, #1
 801aa34:	d1c1      	bne.n	801a9ba <_printf_float+0x33e>
 801aa36:	e67d      	b.n	801a734 <_printf_float+0xb8>
 801aa38:	19ba      	adds	r2, r7, r6
 801aa3a:	0023      	movs	r3, r4
 801aa3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa40:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aa42:	47b0      	blx	r6
 801aa44:	3001      	adds	r0, #1
 801aa46:	d1c2      	bne.n	801a9ce <_printf_float+0x352>
 801aa48:	e674      	b.n	801a734 <_printf_float+0xb8>
 801aa4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801aa4c:	930c      	str	r3, [sp, #48]	@ 0x30
 801aa4e:	2b01      	cmp	r3, #1
 801aa50:	dc02      	bgt.n	801aa58 <_printf_float+0x3dc>
 801aa52:	2301      	movs	r3, #1
 801aa54:	421a      	tst	r2, r3
 801aa56:	d039      	beq.n	801aacc <_printf_float+0x450>
 801aa58:	2301      	movs	r3, #1
 801aa5a:	003a      	movs	r2, r7
 801aa5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa60:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aa62:	47b0      	blx	r6
 801aa64:	3001      	adds	r0, #1
 801aa66:	d100      	bne.n	801aa6a <_printf_float+0x3ee>
 801aa68:	e664      	b.n	801a734 <_printf_float+0xb8>
 801aa6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aa6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa72:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aa74:	47b0      	blx	r6
 801aa76:	3001      	adds	r0, #1
 801aa78:	d100      	bne.n	801aa7c <_printf_float+0x400>
 801aa7a:	e65b      	b.n	801a734 <_printf_float+0xb8>
 801aa7c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801aa7e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801aa80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa82:	2200      	movs	r2, #0
 801aa84:	3b01      	subs	r3, #1
 801aa86:	930c      	str	r3, [sp, #48]	@ 0x30
 801aa88:	2300      	movs	r3, #0
 801aa8a:	f7e5 fd07 	bl	800049c <__aeabi_dcmpeq>
 801aa8e:	2800      	cmp	r0, #0
 801aa90:	d11a      	bne.n	801aac8 <_printf_float+0x44c>
 801aa92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa94:	1c7a      	adds	r2, r7, #1
 801aa96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aa98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aa9c:	47b0      	blx	r6
 801aa9e:	3001      	adds	r0, #1
 801aaa0:	d10e      	bne.n	801aac0 <_printf_float+0x444>
 801aaa2:	e647      	b.n	801a734 <_printf_float+0xb8>
 801aaa4:	002a      	movs	r2, r5
 801aaa6:	2301      	movs	r3, #1
 801aaa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aaaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aaac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801aaae:	321a      	adds	r2, #26
 801aab0:	47b8      	blx	r7
 801aab2:	3001      	adds	r0, #1
 801aab4:	d100      	bne.n	801aab8 <_printf_float+0x43c>
 801aab6:	e63d      	b.n	801a734 <_printf_float+0xb8>
 801aab8:	3601      	adds	r6, #1
 801aaba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aabc:	429e      	cmp	r6, r3
 801aabe:	dbf1      	blt.n	801aaa4 <_printf_float+0x428>
 801aac0:	002a      	movs	r2, r5
 801aac2:	0023      	movs	r3, r4
 801aac4:	3250      	adds	r2, #80	@ 0x50
 801aac6:	e6da      	b.n	801a87e <_printf_float+0x202>
 801aac8:	2600      	movs	r6, #0
 801aaca:	e7f6      	b.n	801aaba <_printf_float+0x43e>
 801aacc:	003a      	movs	r2, r7
 801aace:	e7e2      	b.n	801aa96 <_printf_float+0x41a>
 801aad0:	002a      	movs	r2, r5
 801aad2:	2301      	movs	r3, #1
 801aad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aad8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801aada:	3219      	adds	r2, #25
 801aadc:	47b0      	blx	r6
 801aade:	3001      	adds	r0, #1
 801aae0:	d100      	bne.n	801aae4 <_printf_float+0x468>
 801aae2:	e627      	b.n	801a734 <_printf_float+0xb8>
 801aae4:	3401      	adds	r4, #1
 801aae6:	68eb      	ldr	r3, [r5, #12]
 801aae8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801aaea:	1a9b      	subs	r3, r3, r2
 801aaec:	42a3      	cmp	r3, r4
 801aaee:	dcef      	bgt.n	801aad0 <_printf_float+0x454>
 801aaf0:	e6f9      	b.n	801a8e6 <_printf_float+0x26a>
 801aaf2:	2400      	movs	r4, #0
 801aaf4:	e7f7      	b.n	801aae6 <_printf_float+0x46a>
 801aaf6:	46c0      	nop			@ (mov r8, r8)

0801aaf8 <_printf_common>:
 801aaf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aafa:	0016      	movs	r6, r2
 801aafc:	9301      	str	r3, [sp, #4]
 801aafe:	688a      	ldr	r2, [r1, #8]
 801ab00:	690b      	ldr	r3, [r1, #16]
 801ab02:	000c      	movs	r4, r1
 801ab04:	9000      	str	r0, [sp, #0]
 801ab06:	4293      	cmp	r3, r2
 801ab08:	da00      	bge.n	801ab0c <_printf_common+0x14>
 801ab0a:	0013      	movs	r3, r2
 801ab0c:	0022      	movs	r2, r4
 801ab0e:	6033      	str	r3, [r6, #0]
 801ab10:	3243      	adds	r2, #67	@ 0x43
 801ab12:	7812      	ldrb	r2, [r2, #0]
 801ab14:	2a00      	cmp	r2, #0
 801ab16:	d001      	beq.n	801ab1c <_printf_common+0x24>
 801ab18:	3301      	adds	r3, #1
 801ab1a:	6033      	str	r3, [r6, #0]
 801ab1c:	6823      	ldr	r3, [r4, #0]
 801ab1e:	069b      	lsls	r3, r3, #26
 801ab20:	d502      	bpl.n	801ab28 <_printf_common+0x30>
 801ab22:	6833      	ldr	r3, [r6, #0]
 801ab24:	3302      	adds	r3, #2
 801ab26:	6033      	str	r3, [r6, #0]
 801ab28:	6822      	ldr	r2, [r4, #0]
 801ab2a:	2306      	movs	r3, #6
 801ab2c:	0015      	movs	r5, r2
 801ab2e:	401d      	ands	r5, r3
 801ab30:	421a      	tst	r2, r3
 801ab32:	d027      	beq.n	801ab84 <_printf_common+0x8c>
 801ab34:	0023      	movs	r3, r4
 801ab36:	3343      	adds	r3, #67	@ 0x43
 801ab38:	781b      	ldrb	r3, [r3, #0]
 801ab3a:	1e5a      	subs	r2, r3, #1
 801ab3c:	4193      	sbcs	r3, r2
 801ab3e:	6822      	ldr	r2, [r4, #0]
 801ab40:	0692      	lsls	r2, r2, #26
 801ab42:	d430      	bmi.n	801aba6 <_printf_common+0xae>
 801ab44:	0022      	movs	r2, r4
 801ab46:	9901      	ldr	r1, [sp, #4]
 801ab48:	9800      	ldr	r0, [sp, #0]
 801ab4a:	9d08      	ldr	r5, [sp, #32]
 801ab4c:	3243      	adds	r2, #67	@ 0x43
 801ab4e:	47a8      	blx	r5
 801ab50:	3001      	adds	r0, #1
 801ab52:	d025      	beq.n	801aba0 <_printf_common+0xa8>
 801ab54:	2206      	movs	r2, #6
 801ab56:	6823      	ldr	r3, [r4, #0]
 801ab58:	2500      	movs	r5, #0
 801ab5a:	4013      	ands	r3, r2
 801ab5c:	2b04      	cmp	r3, #4
 801ab5e:	d105      	bne.n	801ab6c <_printf_common+0x74>
 801ab60:	6833      	ldr	r3, [r6, #0]
 801ab62:	68e5      	ldr	r5, [r4, #12]
 801ab64:	1aed      	subs	r5, r5, r3
 801ab66:	43eb      	mvns	r3, r5
 801ab68:	17db      	asrs	r3, r3, #31
 801ab6a:	401d      	ands	r5, r3
 801ab6c:	68a3      	ldr	r3, [r4, #8]
 801ab6e:	6922      	ldr	r2, [r4, #16]
 801ab70:	4293      	cmp	r3, r2
 801ab72:	dd01      	ble.n	801ab78 <_printf_common+0x80>
 801ab74:	1a9b      	subs	r3, r3, r2
 801ab76:	18ed      	adds	r5, r5, r3
 801ab78:	2600      	movs	r6, #0
 801ab7a:	42b5      	cmp	r5, r6
 801ab7c:	d120      	bne.n	801abc0 <_printf_common+0xc8>
 801ab7e:	2000      	movs	r0, #0
 801ab80:	e010      	b.n	801aba4 <_printf_common+0xac>
 801ab82:	3501      	adds	r5, #1
 801ab84:	68e3      	ldr	r3, [r4, #12]
 801ab86:	6832      	ldr	r2, [r6, #0]
 801ab88:	1a9b      	subs	r3, r3, r2
 801ab8a:	42ab      	cmp	r3, r5
 801ab8c:	ddd2      	ble.n	801ab34 <_printf_common+0x3c>
 801ab8e:	0022      	movs	r2, r4
 801ab90:	2301      	movs	r3, #1
 801ab92:	9901      	ldr	r1, [sp, #4]
 801ab94:	9800      	ldr	r0, [sp, #0]
 801ab96:	9f08      	ldr	r7, [sp, #32]
 801ab98:	3219      	adds	r2, #25
 801ab9a:	47b8      	blx	r7
 801ab9c:	3001      	adds	r0, #1
 801ab9e:	d1f0      	bne.n	801ab82 <_printf_common+0x8a>
 801aba0:	2001      	movs	r0, #1
 801aba2:	4240      	negs	r0, r0
 801aba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801aba6:	2030      	movs	r0, #48	@ 0x30
 801aba8:	18e1      	adds	r1, r4, r3
 801abaa:	3143      	adds	r1, #67	@ 0x43
 801abac:	7008      	strb	r0, [r1, #0]
 801abae:	0021      	movs	r1, r4
 801abb0:	1c5a      	adds	r2, r3, #1
 801abb2:	3145      	adds	r1, #69	@ 0x45
 801abb4:	7809      	ldrb	r1, [r1, #0]
 801abb6:	18a2      	adds	r2, r4, r2
 801abb8:	3243      	adds	r2, #67	@ 0x43
 801abba:	3302      	adds	r3, #2
 801abbc:	7011      	strb	r1, [r2, #0]
 801abbe:	e7c1      	b.n	801ab44 <_printf_common+0x4c>
 801abc0:	0022      	movs	r2, r4
 801abc2:	2301      	movs	r3, #1
 801abc4:	9901      	ldr	r1, [sp, #4]
 801abc6:	9800      	ldr	r0, [sp, #0]
 801abc8:	9f08      	ldr	r7, [sp, #32]
 801abca:	321a      	adds	r2, #26
 801abcc:	47b8      	blx	r7
 801abce:	3001      	adds	r0, #1
 801abd0:	d0e6      	beq.n	801aba0 <_printf_common+0xa8>
 801abd2:	3601      	adds	r6, #1
 801abd4:	e7d1      	b.n	801ab7a <_printf_common+0x82>
	...

0801abd8 <_printf_i>:
 801abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abda:	b08b      	sub	sp, #44	@ 0x2c
 801abdc:	9206      	str	r2, [sp, #24]
 801abde:	000a      	movs	r2, r1
 801abe0:	3243      	adds	r2, #67	@ 0x43
 801abe2:	9307      	str	r3, [sp, #28]
 801abe4:	9005      	str	r0, [sp, #20]
 801abe6:	9203      	str	r2, [sp, #12]
 801abe8:	7e0a      	ldrb	r2, [r1, #24]
 801abea:	000c      	movs	r4, r1
 801abec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801abee:	2a78      	cmp	r2, #120	@ 0x78
 801abf0:	d809      	bhi.n	801ac06 <_printf_i+0x2e>
 801abf2:	2a62      	cmp	r2, #98	@ 0x62
 801abf4:	d80b      	bhi.n	801ac0e <_printf_i+0x36>
 801abf6:	2a00      	cmp	r2, #0
 801abf8:	d100      	bne.n	801abfc <_printf_i+0x24>
 801abfa:	e0bc      	b.n	801ad76 <_printf_i+0x19e>
 801abfc:	497b      	ldr	r1, [pc, #492]	@ (801adec <_printf_i+0x214>)
 801abfe:	9104      	str	r1, [sp, #16]
 801ac00:	2a58      	cmp	r2, #88	@ 0x58
 801ac02:	d100      	bne.n	801ac06 <_printf_i+0x2e>
 801ac04:	e090      	b.n	801ad28 <_printf_i+0x150>
 801ac06:	0025      	movs	r5, r4
 801ac08:	3542      	adds	r5, #66	@ 0x42
 801ac0a:	702a      	strb	r2, [r5, #0]
 801ac0c:	e022      	b.n	801ac54 <_printf_i+0x7c>
 801ac0e:	0010      	movs	r0, r2
 801ac10:	3863      	subs	r0, #99	@ 0x63
 801ac12:	2815      	cmp	r0, #21
 801ac14:	d8f7      	bhi.n	801ac06 <_printf_i+0x2e>
 801ac16:	f7e5 fab1 	bl	800017c <__gnu_thumb1_case_shi>
 801ac1a:	0016      	.short	0x0016
 801ac1c:	fff6001f 	.word	0xfff6001f
 801ac20:	fff6fff6 	.word	0xfff6fff6
 801ac24:	001ffff6 	.word	0x001ffff6
 801ac28:	fff6fff6 	.word	0xfff6fff6
 801ac2c:	fff6fff6 	.word	0xfff6fff6
 801ac30:	003600a1 	.word	0x003600a1
 801ac34:	fff60080 	.word	0xfff60080
 801ac38:	00b2fff6 	.word	0x00b2fff6
 801ac3c:	0036fff6 	.word	0x0036fff6
 801ac40:	fff6fff6 	.word	0xfff6fff6
 801ac44:	0084      	.short	0x0084
 801ac46:	0025      	movs	r5, r4
 801ac48:	681a      	ldr	r2, [r3, #0]
 801ac4a:	3542      	adds	r5, #66	@ 0x42
 801ac4c:	1d11      	adds	r1, r2, #4
 801ac4e:	6019      	str	r1, [r3, #0]
 801ac50:	6813      	ldr	r3, [r2, #0]
 801ac52:	702b      	strb	r3, [r5, #0]
 801ac54:	2301      	movs	r3, #1
 801ac56:	e0a0      	b.n	801ad9a <_printf_i+0x1c2>
 801ac58:	6818      	ldr	r0, [r3, #0]
 801ac5a:	6809      	ldr	r1, [r1, #0]
 801ac5c:	1d02      	adds	r2, r0, #4
 801ac5e:	060d      	lsls	r5, r1, #24
 801ac60:	d50b      	bpl.n	801ac7a <_printf_i+0xa2>
 801ac62:	6806      	ldr	r6, [r0, #0]
 801ac64:	601a      	str	r2, [r3, #0]
 801ac66:	2e00      	cmp	r6, #0
 801ac68:	da03      	bge.n	801ac72 <_printf_i+0x9a>
 801ac6a:	232d      	movs	r3, #45	@ 0x2d
 801ac6c:	9a03      	ldr	r2, [sp, #12]
 801ac6e:	4276      	negs	r6, r6
 801ac70:	7013      	strb	r3, [r2, #0]
 801ac72:	4b5e      	ldr	r3, [pc, #376]	@ (801adec <_printf_i+0x214>)
 801ac74:	270a      	movs	r7, #10
 801ac76:	9304      	str	r3, [sp, #16]
 801ac78:	e018      	b.n	801acac <_printf_i+0xd4>
 801ac7a:	6806      	ldr	r6, [r0, #0]
 801ac7c:	601a      	str	r2, [r3, #0]
 801ac7e:	0649      	lsls	r1, r1, #25
 801ac80:	d5f1      	bpl.n	801ac66 <_printf_i+0x8e>
 801ac82:	b236      	sxth	r6, r6
 801ac84:	e7ef      	b.n	801ac66 <_printf_i+0x8e>
 801ac86:	6808      	ldr	r0, [r1, #0]
 801ac88:	6819      	ldr	r1, [r3, #0]
 801ac8a:	c940      	ldmia	r1!, {r6}
 801ac8c:	0605      	lsls	r5, r0, #24
 801ac8e:	d402      	bmi.n	801ac96 <_printf_i+0xbe>
 801ac90:	0640      	lsls	r0, r0, #25
 801ac92:	d500      	bpl.n	801ac96 <_printf_i+0xbe>
 801ac94:	b2b6      	uxth	r6, r6
 801ac96:	6019      	str	r1, [r3, #0]
 801ac98:	4b54      	ldr	r3, [pc, #336]	@ (801adec <_printf_i+0x214>)
 801ac9a:	270a      	movs	r7, #10
 801ac9c:	9304      	str	r3, [sp, #16]
 801ac9e:	2a6f      	cmp	r2, #111	@ 0x6f
 801aca0:	d100      	bne.n	801aca4 <_printf_i+0xcc>
 801aca2:	3f02      	subs	r7, #2
 801aca4:	0023      	movs	r3, r4
 801aca6:	2200      	movs	r2, #0
 801aca8:	3343      	adds	r3, #67	@ 0x43
 801acaa:	701a      	strb	r2, [r3, #0]
 801acac:	6863      	ldr	r3, [r4, #4]
 801acae:	60a3      	str	r3, [r4, #8]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	db03      	blt.n	801acbc <_printf_i+0xe4>
 801acb4:	2104      	movs	r1, #4
 801acb6:	6822      	ldr	r2, [r4, #0]
 801acb8:	438a      	bics	r2, r1
 801acba:	6022      	str	r2, [r4, #0]
 801acbc:	2e00      	cmp	r6, #0
 801acbe:	d102      	bne.n	801acc6 <_printf_i+0xee>
 801acc0:	9d03      	ldr	r5, [sp, #12]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d00c      	beq.n	801ace0 <_printf_i+0x108>
 801acc6:	9d03      	ldr	r5, [sp, #12]
 801acc8:	0030      	movs	r0, r6
 801acca:	0039      	movs	r1, r7
 801accc:	f7e5 fae6 	bl	800029c <__aeabi_uidivmod>
 801acd0:	9b04      	ldr	r3, [sp, #16]
 801acd2:	3d01      	subs	r5, #1
 801acd4:	5c5b      	ldrb	r3, [r3, r1]
 801acd6:	702b      	strb	r3, [r5, #0]
 801acd8:	0033      	movs	r3, r6
 801acda:	0006      	movs	r6, r0
 801acdc:	429f      	cmp	r7, r3
 801acde:	d9f3      	bls.n	801acc8 <_printf_i+0xf0>
 801ace0:	2f08      	cmp	r7, #8
 801ace2:	d109      	bne.n	801acf8 <_printf_i+0x120>
 801ace4:	6823      	ldr	r3, [r4, #0]
 801ace6:	07db      	lsls	r3, r3, #31
 801ace8:	d506      	bpl.n	801acf8 <_printf_i+0x120>
 801acea:	6862      	ldr	r2, [r4, #4]
 801acec:	6923      	ldr	r3, [r4, #16]
 801acee:	429a      	cmp	r2, r3
 801acf0:	dc02      	bgt.n	801acf8 <_printf_i+0x120>
 801acf2:	2330      	movs	r3, #48	@ 0x30
 801acf4:	3d01      	subs	r5, #1
 801acf6:	702b      	strb	r3, [r5, #0]
 801acf8:	9b03      	ldr	r3, [sp, #12]
 801acfa:	1b5b      	subs	r3, r3, r5
 801acfc:	6123      	str	r3, [r4, #16]
 801acfe:	9b07      	ldr	r3, [sp, #28]
 801ad00:	0021      	movs	r1, r4
 801ad02:	9300      	str	r3, [sp, #0]
 801ad04:	9805      	ldr	r0, [sp, #20]
 801ad06:	9b06      	ldr	r3, [sp, #24]
 801ad08:	aa09      	add	r2, sp, #36	@ 0x24
 801ad0a:	f7ff fef5 	bl	801aaf8 <_printf_common>
 801ad0e:	3001      	adds	r0, #1
 801ad10:	d148      	bne.n	801ada4 <_printf_i+0x1cc>
 801ad12:	2001      	movs	r0, #1
 801ad14:	4240      	negs	r0, r0
 801ad16:	b00b      	add	sp, #44	@ 0x2c
 801ad18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad1a:	2220      	movs	r2, #32
 801ad1c:	6809      	ldr	r1, [r1, #0]
 801ad1e:	430a      	orrs	r2, r1
 801ad20:	6022      	str	r2, [r4, #0]
 801ad22:	2278      	movs	r2, #120	@ 0x78
 801ad24:	4932      	ldr	r1, [pc, #200]	@ (801adf0 <_printf_i+0x218>)
 801ad26:	9104      	str	r1, [sp, #16]
 801ad28:	0021      	movs	r1, r4
 801ad2a:	3145      	adds	r1, #69	@ 0x45
 801ad2c:	700a      	strb	r2, [r1, #0]
 801ad2e:	6819      	ldr	r1, [r3, #0]
 801ad30:	6822      	ldr	r2, [r4, #0]
 801ad32:	c940      	ldmia	r1!, {r6}
 801ad34:	0610      	lsls	r0, r2, #24
 801ad36:	d402      	bmi.n	801ad3e <_printf_i+0x166>
 801ad38:	0650      	lsls	r0, r2, #25
 801ad3a:	d500      	bpl.n	801ad3e <_printf_i+0x166>
 801ad3c:	b2b6      	uxth	r6, r6
 801ad3e:	6019      	str	r1, [r3, #0]
 801ad40:	07d3      	lsls	r3, r2, #31
 801ad42:	d502      	bpl.n	801ad4a <_printf_i+0x172>
 801ad44:	2320      	movs	r3, #32
 801ad46:	4313      	orrs	r3, r2
 801ad48:	6023      	str	r3, [r4, #0]
 801ad4a:	2e00      	cmp	r6, #0
 801ad4c:	d001      	beq.n	801ad52 <_printf_i+0x17a>
 801ad4e:	2710      	movs	r7, #16
 801ad50:	e7a8      	b.n	801aca4 <_printf_i+0xcc>
 801ad52:	2220      	movs	r2, #32
 801ad54:	6823      	ldr	r3, [r4, #0]
 801ad56:	4393      	bics	r3, r2
 801ad58:	6023      	str	r3, [r4, #0]
 801ad5a:	e7f8      	b.n	801ad4e <_printf_i+0x176>
 801ad5c:	681a      	ldr	r2, [r3, #0]
 801ad5e:	680d      	ldr	r5, [r1, #0]
 801ad60:	1d10      	adds	r0, r2, #4
 801ad62:	6949      	ldr	r1, [r1, #20]
 801ad64:	6018      	str	r0, [r3, #0]
 801ad66:	6813      	ldr	r3, [r2, #0]
 801ad68:	062e      	lsls	r6, r5, #24
 801ad6a:	d501      	bpl.n	801ad70 <_printf_i+0x198>
 801ad6c:	6019      	str	r1, [r3, #0]
 801ad6e:	e002      	b.n	801ad76 <_printf_i+0x19e>
 801ad70:	066d      	lsls	r5, r5, #25
 801ad72:	d5fb      	bpl.n	801ad6c <_printf_i+0x194>
 801ad74:	8019      	strh	r1, [r3, #0]
 801ad76:	2300      	movs	r3, #0
 801ad78:	9d03      	ldr	r5, [sp, #12]
 801ad7a:	6123      	str	r3, [r4, #16]
 801ad7c:	e7bf      	b.n	801acfe <_printf_i+0x126>
 801ad7e:	681a      	ldr	r2, [r3, #0]
 801ad80:	1d11      	adds	r1, r2, #4
 801ad82:	6019      	str	r1, [r3, #0]
 801ad84:	6815      	ldr	r5, [r2, #0]
 801ad86:	2100      	movs	r1, #0
 801ad88:	0028      	movs	r0, r5
 801ad8a:	6862      	ldr	r2, [r4, #4]
 801ad8c:	f000 fa7b 	bl	801b286 <memchr>
 801ad90:	2800      	cmp	r0, #0
 801ad92:	d001      	beq.n	801ad98 <_printf_i+0x1c0>
 801ad94:	1b40      	subs	r0, r0, r5
 801ad96:	6060      	str	r0, [r4, #4]
 801ad98:	6863      	ldr	r3, [r4, #4]
 801ad9a:	6123      	str	r3, [r4, #16]
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	9a03      	ldr	r2, [sp, #12]
 801ada0:	7013      	strb	r3, [r2, #0]
 801ada2:	e7ac      	b.n	801acfe <_printf_i+0x126>
 801ada4:	002a      	movs	r2, r5
 801ada6:	6923      	ldr	r3, [r4, #16]
 801ada8:	9906      	ldr	r1, [sp, #24]
 801adaa:	9805      	ldr	r0, [sp, #20]
 801adac:	9d07      	ldr	r5, [sp, #28]
 801adae:	47a8      	blx	r5
 801adb0:	3001      	adds	r0, #1
 801adb2:	d0ae      	beq.n	801ad12 <_printf_i+0x13a>
 801adb4:	6823      	ldr	r3, [r4, #0]
 801adb6:	079b      	lsls	r3, r3, #30
 801adb8:	d415      	bmi.n	801ade6 <_printf_i+0x20e>
 801adba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adbc:	68e0      	ldr	r0, [r4, #12]
 801adbe:	4298      	cmp	r0, r3
 801adc0:	daa9      	bge.n	801ad16 <_printf_i+0x13e>
 801adc2:	0018      	movs	r0, r3
 801adc4:	e7a7      	b.n	801ad16 <_printf_i+0x13e>
 801adc6:	0022      	movs	r2, r4
 801adc8:	2301      	movs	r3, #1
 801adca:	9906      	ldr	r1, [sp, #24]
 801adcc:	9805      	ldr	r0, [sp, #20]
 801adce:	9e07      	ldr	r6, [sp, #28]
 801add0:	3219      	adds	r2, #25
 801add2:	47b0      	blx	r6
 801add4:	3001      	adds	r0, #1
 801add6:	d09c      	beq.n	801ad12 <_printf_i+0x13a>
 801add8:	3501      	adds	r5, #1
 801adda:	68e3      	ldr	r3, [r4, #12]
 801addc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801adde:	1a9b      	subs	r3, r3, r2
 801ade0:	42ab      	cmp	r3, r5
 801ade2:	dcf0      	bgt.n	801adc6 <_printf_i+0x1ee>
 801ade4:	e7e9      	b.n	801adba <_printf_i+0x1e2>
 801ade6:	2500      	movs	r5, #0
 801ade8:	e7f7      	b.n	801adda <_printf_i+0x202>
 801adea:	46c0      	nop			@ (mov r8, r8)
 801adec:	0801f7e2 	.word	0x0801f7e2
 801adf0:	0801f7f3 	.word	0x0801f7f3

0801adf4 <std>:
 801adf4:	2300      	movs	r3, #0
 801adf6:	b510      	push	{r4, lr}
 801adf8:	0004      	movs	r4, r0
 801adfa:	6003      	str	r3, [r0, #0]
 801adfc:	6043      	str	r3, [r0, #4]
 801adfe:	6083      	str	r3, [r0, #8]
 801ae00:	8181      	strh	r1, [r0, #12]
 801ae02:	6643      	str	r3, [r0, #100]	@ 0x64
 801ae04:	81c2      	strh	r2, [r0, #14]
 801ae06:	6103      	str	r3, [r0, #16]
 801ae08:	6143      	str	r3, [r0, #20]
 801ae0a:	6183      	str	r3, [r0, #24]
 801ae0c:	0019      	movs	r1, r3
 801ae0e:	2208      	movs	r2, #8
 801ae10:	305c      	adds	r0, #92	@ 0x5c
 801ae12:	f000 f967 	bl	801b0e4 <memset>
 801ae16:	4b0b      	ldr	r3, [pc, #44]	@ (801ae44 <std+0x50>)
 801ae18:	6224      	str	r4, [r4, #32]
 801ae1a:	6263      	str	r3, [r4, #36]	@ 0x24
 801ae1c:	4b0a      	ldr	r3, [pc, #40]	@ (801ae48 <std+0x54>)
 801ae1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae20:	4b0a      	ldr	r3, [pc, #40]	@ (801ae4c <std+0x58>)
 801ae22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ae24:	4b0a      	ldr	r3, [pc, #40]	@ (801ae50 <std+0x5c>)
 801ae26:	6323      	str	r3, [r4, #48]	@ 0x30
 801ae28:	4b0a      	ldr	r3, [pc, #40]	@ (801ae54 <std+0x60>)
 801ae2a:	429c      	cmp	r4, r3
 801ae2c:	d005      	beq.n	801ae3a <std+0x46>
 801ae2e:	4b0a      	ldr	r3, [pc, #40]	@ (801ae58 <std+0x64>)
 801ae30:	429c      	cmp	r4, r3
 801ae32:	d002      	beq.n	801ae3a <std+0x46>
 801ae34:	4b09      	ldr	r3, [pc, #36]	@ (801ae5c <std+0x68>)
 801ae36:	429c      	cmp	r4, r3
 801ae38:	d103      	bne.n	801ae42 <std+0x4e>
 801ae3a:	0020      	movs	r0, r4
 801ae3c:	3058      	adds	r0, #88	@ 0x58
 801ae3e:	f000 fa1f 	bl	801b280 <__retarget_lock_init_recursive>
 801ae42:	bd10      	pop	{r4, pc}
 801ae44:	0801afdd 	.word	0x0801afdd
 801ae48:	0801b005 	.word	0x0801b005
 801ae4c:	0801b03d 	.word	0x0801b03d
 801ae50:	0801b069 	.word	0x0801b069
 801ae54:	20003700 	.word	0x20003700
 801ae58:	20003768 	.word	0x20003768
 801ae5c:	200037d0 	.word	0x200037d0

0801ae60 <stdio_exit_handler>:
 801ae60:	b510      	push	{r4, lr}
 801ae62:	4a03      	ldr	r2, [pc, #12]	@ (801ae70 <stdio_exit_handler+0x10>)
 801ae64:	4903      	ldr	r1, [pc, #12]	@ (801ae74 <stdio_exit_handler+0x14>)
 801ae66:	4804      	ldr	r0, [pc, #16]	@ (801ae78 <stdio_exit_handler+0x18>)
 801ae68:	f000 f86c 	bl	801af44 <_fwalk_sglue>
 801ae6c:	bd10      	pop	{r4, pc}
 801ae6e:	46c0      	nop			@ (mov r8, r8)
 801ae70:	200001fc 	.word	0x200001fc
 801ae74:	0801d8a5 	.word	0x0801d8a5
 801ae78:	20000378 	.word	0x20000378

0801ae7c <cleanup_stdio>:
 801ae7c:	6841      	ldr	r1, [r0, #4]
 801ae7e:	4b0b      	ldr	r3, [pc, #44]	@ (801aeac <cleanup_stdio+0x30>)
 801ae80:	b510      	push	{r4, lr}
 801ae82:	0004      	movs	r4, r0
 801ae84:	4299      	cmp	r1, r3
 801ae86:	d001      	beq.n	801ae8c <cleanup_stdio+0x10>
 801ae88:	f002 fd0c 	bl	801d8a4 <_fflush_r>
 801ae8c:	68a1      	ldr	r1, [r4, #8]
 801ae8e:	4b08      	ldr	r3, [pc, #32]	@ (801aeb0 <cleanup_stdio+0x34>)
 801ae90:	4299      	cmp	r1, r3
 801ae92:	d002      	beq.n	801ae9a <cleanup_stdio+0x1e>
 801ae94:	0020      	movs	r0, r4
 801ae96:	f002 fd05 	bl	801d8a4 <_fflush_r>
 801ae9a:	68e1      	ldr	r1, [r4, #12]
 801ae9c:	4b05      	ldr	r3, [pc, #20]	@ (801aeb4 <cleanup_stdio+0x38>)
 801ae9e:	4299      	cmp	r1, r3
 801aea0:	d002      	beq.n	801aea8 <cleanup_stdio+0x2c>
 801aea2:	0020      	movs	r0, r4
 801aea4:	f002 fcfe 	bl	801d8a4 <_fflush_r>
 801aea8:	bd10      	pop	{r4, pc}
 801aeaa:	46c0      	nop			@ (mov r8, r8)
 801aeac:	20003700 	.word	0x20003700
 801aeb0:	20003768 	.word	0x20003768
 801aeb4:	200037d0 	.word	0x200037d0

0801aeb8 <global_stdio_init.part.0>:
 801aeb8:	b510      	push	{r4, lr}
 801aeba:	4b09      	ldr	r3, [pc, #36]	@ (801aee0 <global_stdio_init.part.0+0x28>)
 801aebc:	4a09      	ldr	r2, [pc, #36]	@ (801aee4 <global_stdio_init.part.0+0x2c>)
 801aebe:	2104      	movs	r1, #4
 801aec0:	601a      	str	r2, [r3, #0]
 801aec2:	4809      	ldr	r0, [pc, #36]	@ (801aee8 <global_stdio_init.part.0+0x30>)
 801aec4:	2200      	movs	r2, #0
 801aec6:	f7ff ff95 	bl	801adf4 <std>
 801aeca:	2201      	movs	r2, #1
 801aecc:	2109      	movs	r1, #9
 801aece:	4807      	ldr	r0, [pc, #28]	@ (801aeec <global_stdio_init.part.0+0x34>)
 801aed0:	f7ff ff90 	bl	801adf4 <std>
 801aed4:	2202      	movs	r2, #2
 801aed6:	2112      	movs	r1, #18
 801aed8:	4805      	ldr	r0, [pc, #20]	@ (801aef0 <global_stdio_init.part.0+0x38>)
 801aeda:	f7ff ff8b 	bl	801adf4 <std>
 801aede:	bd10      	pop	{r4, pc}
 801aee0:	20003838 	.word	0x20003838
 801aee4:	0801ae61 	.word	0x0801ae61
 801aee8:	20003700 	.word	0x20003700
 801aeec:	20003768 	.word	0x20003768
 801aef0:	200037d0 	.word	0x200037d0

0801aef4 <__sfp_lock_acquire>:
 801aef4:	b510      	push	{r4, lr}
 801aef6:	4802      	ldr	r0, [pc, #8]	@ (801af00 <__sfp_lock_acquire+0xc>)
 801aef8:	f000 f9c3 	bl	801b282 <__retarget_lock_acquire_recursive>
 801aefc:	bd10      	pop	{r4, pc}
 801aefe:	46c0      	nop			@ (mov r8, r8)
 801af00:	20003841 	.word	0x20003841

0801af04 <__sfp_lock_release>:
 801af04:	b510      	push	{r4, lr}
 801af06:	4802      	ldr	r0, [pc, #8]	@ (801af10 <__sfp_lock_release+0xc>)
 801af08:	f000 f9bc 	bl	801b284 <__retarget_lock_release_recursive>
 801af0c:	bd10      	pop	{r4, pc}
 801af0e:	46c0      	nop			@ (mov r8, r8)
 801af10:	20003841 	.word	0x20003841

0801af14 <__sinit>:
 801af14:	b510      	push	{r4, lr}
 801af16:	0004      	movs	r4, r0
 801af18:	f7ff ffec 	bl	801aef4 <__sfp_lock_acquire>
 801af1c:	6a23      	ldr	r3, [r4, #32]
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d002      	beq.n	801af28 <__sinit+0x14>
 801af22:	f7ff ffef 	bl	801af04 <__sfp_lock_release>
 801af26:	bd10      	pop	{r4, pc}
 801af28:	4b04      	ldr	r3, [pc, #16]	@ (801af3c <__sinit+0x28>)
 801af2a:	6223      	str	r3, [r4, #32]
 801af2c:	4b04      	ldr	r3, [pc, #16]	@ (801af40 <__sinit+0x2c>)
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	2b00      	cmp	r3, #0
 801af32:	d1f6      	bne.n	801af22 <__sinit+0xe>
 801af34:	f7ff ffc0 	bl	801aeb8 <global_stdio_init.part.0>
 801af38:	e7f3      	b.n	801af22 <__sinit+0xe>
 801af3a:	46c0      	nop			@ (mov r8, r8)
 801af3c:	0801ae7d 	.word	0x0801ae7d
 801af40:	20003838 	.word	0x20003838

0801af44 <_fwalk_sglue>:
 801af44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af46:	0014      	movs	r4, r2
 801af48:	2600      	movs	r6, #0
 801af4a:	9000      	str	r0, [sp, #0]
 801af4c:	9101      	str	r1, [sp, #4]
 801af4e:	68a5      	ldr	r5, [r4, #8]
 801af50:	6867      	ldr	r7, [r4, #4]
 801af52:	3f01      	subs	r7, #1
 801af54:	d504      	bpl.n	801af60 <_fwalk_sglue+0x1c>
 801af56:	6824      	ldr	r4, [r4, #0]
 801af58:	2c00      	cmp	r4, #0
 801af5a:	d1f8      	bne.n	801af4e <_fwalk_sglue+0xa>
 801af5c:	0030      	movs	r0, r6
 801af5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801af60:	89ab      	ldrh	r3, [r5, #12]
 801af62:	2b01      	cmp	r3, #1
 801af64:	d908      	bls.n	801af78 <_fwalk_sglue+0x34>
 801af66:	220e      	movs	r2, #14
 801af68:	5eab      	ldrsh	r3, [r5, r2]
 801af6a:	3301      	adds	r3, #1
 801af6c:	d004      	beq.n	801af78 <_fwalk_sglue+0x34>
 801af6e:	0029      	movs	r1, r5
 801af70:	9800      	ldr	r0, [sp, #0]
 801af72:	9b01      	ldr	r3, [sp, #4]
 801af74:	4798      	blx	r3
 801af76:	4306      	orrs	r6, r0
 801af78:	3568      	adds	r5, #104	@ 0x68
 801af7a:	e7ea      	b.n	801af52 <_fwalk_sglue+0xe>

0801af7c <iprintf>:
 801af7c:	b40f      	push	{r0, r1, r2, r3}
 801af7e:	b507      	push	{r0, r1, r2, lr}
 801af80:	4905      	ldr	r1, [pc, #20]	@ (801af98 <iprintf+0x1c>)
 801af82:	ab04      	add	r3, sp, #16
 801af84:	6808      	ldr	r0, [r1, #0]
 801af86:	cb04      	ldmia	r3!, {r2}
 801af88:	6881      	ldr	r1, [r0, #8]
 801af8a:	9301      	str	r3, [sp, #4]
 801af8c:	f002 fae8 	bl	801d560 <_vfiprintf_r>
 801af90:	b003      	add	sp, #12
 801af92:	bc08      	pop	{r3}
 801af94:	b004      	add	sp, #16
 801af96:	4718      	bx	r3
 801af98:	20000374 	.word	0x20000374

0801af9c <siprintf>:
 801af9c:	b40e      	push	{r1, r2, r3}
 801af9e:	b500      	push	{lr}
 801afa0:	490b      	ldr	r1, [pc, #44]	@ (801afd0 <siprintf+0x34>)
 801afa2:	b09c      	sub	sp, #112	@ 0x70
 801afa4:	ab1d      	add	r3, sp, #116	@ 0x74
 801afa6:	9002      	str	r0, [sp, #8]
 801afa8:	9006      	str	r0, [sp, #24]
 801afaa:	9107      	str	r1, [sp, #28]
 801afac:	9104      	str	r1, [sp, #16]
 801afae:	4809      	ldr	r0, [pc, #36]	@ (801afd4 <siprintf+0x38>)
 801afb0:	4909      	ldr	r1, [pc, #36]	@ (801afd8 <siprintf+0x3c>)
 801afb2:	cb04      	ldmia	r3!, {r2}
 801afb4:	9105      	str	r1, [sp, #20]
 801afb6:	6800      	ldr	r0, [r0, #0]
 801afb8:	a902      	add	r1, sp, #8
 801afba:	9301      	str	r3, [sp, #4]
 801afbc:	f002 f9aa 	bl	801d314 <_svfiprintf_r>
 801afc0:	2200      	movs	r2, #0
 801afc2:	9b02      	ldr	r3, [sp, #8]
 801afc4:	701a      	strb	r2, [r3, #0]
 801afc6:	b01c      	add	sp, #112	@ 0x70
 801afc8:	bc08      	pop	{r3}
 801afca:	b003      	add	sp, #12
 801afcc:	4718      	bx	r3
 801afce:	46c0      	nop			@ (mov r8, r8)
 801afd0:	7fffffff 	.word	0x7fffffff
 801afd4:	20000374 	.word	0x20000374
 801afd8:	ffff0208 	.word	0xffff0208

0801afdc <__sread>:
 801afdc:	b570      	push	{r4, r5, r6, lr}
 801afde:	000c      	movs	r4, r1
 801afe0:	250e      	movs	r5, #14
 801afe2:	5f49      	ldrsh	r1, [r1, r5]
 801afe4:	f000 f8fa 	bl	801b1dc <_read_r>
 801afe8:	2800      	cmp	r0, #0
 801afea:	db03      	blt.n	801aff4 <__sread+0x18>
 801afec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801afee:	181b      	adds	r3, r3, r0
 801aff0:	6563      	str	r3, [r4, #84]	@ 0x54
 801aff2:	bd70      	pop	{r4, r5, r6, pc}
 801aff4:	89a3      	ldrh	r3, [r4, #12]
 801aff6:	4a02      	ldr	r2, [pc, #8]	@ (801b000 <__sread+0x24>)
 801aff8:	4013      	ands	r3, r2
 801affa:	81a3      	strh	r3, [r4, #12]
 801affc:	e7f9      	b.n	801aff2 <__sread+0x16>
 801affe:	46c0      	nop			@ (mov r8, r8)
 801b000:	ffffefff 	.word	0xffffefff

0801b004 <__swrite>:
 801b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b006:	001f      	movs	r7, r3
 801b008:	898b      	ldrh	r3, [r1, #12]
 801b00a:	0005      	movs	r5, r0
 801b00c:	000c      	movs	r4, r1
 801b00e:	0016      	movs	r6, r2
 801b010:	05db      	lsls	r3, r3, #23
 801b012:	d505      	bpl.n	801b020 <__swrite+0x1c>
 801b014:	230e      	movs	r3, #14
 801b016:	5ec9      	ldrsh	r1, [r1, r3]
 801b018:	2200      	movs	r2, #0
 801b01a:	2302      	movs	r3, #2
 801b01c:	f000 f8ca 	bl	801b1b4 <_lseek_r>
 801b020:	89a3      	ldrh	r3, [r4, #12]
 801b022:	4a05      	ldr	r2, [pc, #20]	@ (801b038 <__swrite+0x34>)
 801b024:	0028      	movs	r0, r5
 801b026:	4013      	ands	r3, r2
 801b028:	81a3      	strh	r3, [r4, #12]
 801b02a:	0032      	movs	r2, r6
 801b02c:	230e      	movs	r3, #14
 801b02e:	5ee1      	ldrsh	r1, [r4, r3]
 801b030:	003b      	movs	r3, r7
 801b032:	f000 f8e7 	bl	801b204 <_write_r>
 801b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b038:	ffffefff 	.word	0xffffefff

0801b03c <__sseek>:
 801b03c:	b570      	push	{r4, r5, r6, lr}
 801b03e:	000c      	movs	r4, r1
 801b040:	250e      	movs	r5, #14
 801b042:	5f49      	ldrsh	r1, [r1, r5]
 801b044:	f000 f8b6 	bl	801b1b4 <_lseek_r>
 801b048:	89a3      	ldrh	r3, [r4, #12]
 801b04a:	1c42      	adds	r2, r0, #1
 801b04c:	d103      	bne.n	801b056 <__sseek+0x1a>
 801b04e:	4a05      	ldr	r2, [pc, #20]	@ (801b064 <__sseek+0x28>)
 801b050:	4013      	ands	r3, r2
 801b052:	81a3      	strh	r3, [r4, #12]
 801b054:	bd70      	pop	{r4, r5, r6, pc}
 801b056:	2280      	movs	r2, #128	@ 0x80
 801b058:	0152      	lsls	r2, r2, #5
 801b05a:	4313      	orrs	r3, r2
 801b05c:	81a3      	strh	r3, [r4, #12]
 801b05e:	6560      	str	r0, [r4, #84]	@ 0x54
 801b060:	e7f8      	b.n	801b054 <__sseek+0x18>
 801b062:	46c0      	nop			@ (mov r8, r8)
 801b064:	ffffefff 	.word	0xffffefff

0801b068 <__sclose>:
 801b068:	b510      	push	{r4, lr}
 801b06a:	230e      	movs	r3, #14
 801b06c:	5ec9      	ldrsh	r1, [r1, r3]
 801b06e:	f000 f88f 	bl	801b190 <_close_r>
 801b072:	bd10      	pop	{r4, pc}

0801b074 <_vsniprintf_r>:
 801b074:	b530      	push	{r4, r5, lr}
 801b076:	0014      	movs	r4, r2
 801b078:	0005      	movs	r5, r0
 801b07a:	001a      	movs	r2, r3
 801b07c:	b09b      	sub	sp, #108	@ 0x6c
 801b07e:	2c00      	cmp	r4, #0
 801b080:	da05      	bge.n	801b08e <_vsniprintf_r+0x1a>
 801b082:	238b      	movs	r3, #139	@ 0x8b
 801b084:	6003      	str	r3, [r0, #0]
 801b086:	2001      	movs	r0, #1
 801b088:	4240      	negs	r0, r0
 801b08a:	b01b      	add	sp, #108	@ 0x6c
 801b08c:	bd30      	pop	{r4, r5, pc}
 801b08e:	2382      	movs	r3, #130	@ 0x82
 801b090:	4668      	mov	r0, sp
 801b092:	009b      	lsls	r3, r3, #2
 801b094:	8183      	strh	r3, [r0, #12]
 801b096:	2300      	movs	r3, #0
 801b098:	9100      	str	r1, [sp, #0]
 801b09a:	9104      	str	r1, [sp, #16]
 801b09c:	429c      	cmp	r4, r3
 801b09e:	d000      	beq.n	801b0a2 <_vsniprintf_r+0x2e>
 801b0a0:	1e63      	subs	r3, r4, #1
 801b0a2:	9302      	str	r3, [sp, #8]
 801b0a4:	9305      	str	r3, [sp, #20]
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	4669      	mov	r1, sp
 801b0aa:	425b      	negs	r3, r3
 801b0ac:	81cb      	strh	r3, [r1, #14]
 801b0ae:	0028      	movs	r0, r5
 801b0b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b0b2:	f002 f92f 	bl	801d314 <_svfiprintf_r>
 801b0b6:	1c43      	adds	r3, r0, #1
 801b0b8:	da01      	bge.n	801b0be <_vsniprintf_r+0x4a>
 801b0ba:	238b      	movs	r3, #139	@ 0x8b
 801b0bc:	602b      	str	r3, [r5, #0]
 801b0be:	2c00      	cmp	r4, #0
 801b0c0:	d0e3      	beq.n	801b08a <_vsniprintf_r+0x16>
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	9b00      	ldr	r3, [sp, #0]
 801b0c6:	701a      	strb	r2, [r3, #0]
 801b0c8:	e7df      	b.n	801b08a <_vsniprintf_r+0x16>
	...

0801b0cc <vsniprintf>:
 801b0cc:	b513      	push	{r0, r1, r4, lr}
 801b0ce:	4c04      	ldr	r4, [pc, #16]	@ (801b0e0 <vsniprintf+0x14>)
 801b0d0:	9300      	str	r3, [sp, #0]
 801b0d2:	0013      	movs	r3, r2
 801b0d4:	000a      	movs	r2, r1
 801b0d6:	0001      	movs	r1, r0
 801b0d8:	6820      	ldr	r0, [r4, #0]
 801b0da:	f7ff ffcb 	bl	801b074 <_vsniprintf_r>
 801b0de:	bd16      	pop	{r1, r2, r4, pc}
 801b0e0:	20000374 	.word	0x20000374

0801b0e4 <memset>:
 801b0e4:	0003      	movs	r3, r0
 801b0e6:	1882      	adds	r2, r0, r2
 801b0e8:	4293      	cmp	r3, r2
 801b0ea:	d100      	bne.n	801b0ee <memset+0xa>
 801b0ec:	4770      	bx	lr
 801b0ee:	7019      	strb	r1, [r3, #0]
 801b0f0:	3301      	adds	r3, #1
 801b0f2:	e7f9      	b.n	801b0e8 <memset+0x4>

0801b0f4 <strchr>:
 801b0f4:	b2c9      	uxtb	r1, r1
 801b0f6:	7803      	ldrb	r3, [r0, #0]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d004      	beq.n	801b106 <strchr+0x12>
 801b0fc:	428b      	cmp	r3, r1
 801b0fe:	d100      	bne.n	801b102 <strchr+0xe>
 801b100:	4770      	bx	lr
 801b102:	3001      	adds	r0, #1
 801b104:	e7f7      	b.n	801b0f6 <strchr+0x2>
 801b106:	424b      	negs	r3, r1
 801b108:	4159      	adcs	r1, r3
 801b10a:	4249      	negs	r1, r1
 801b10c:	4008      	ands	r0, r1
 801b10e:	e7f7      	b.n	801b100 <strchr+0xc>

0801b110 <strncmp>:
 801b110:	b530      	push	{r4, r5, lr}
 801b112:	0005      	movs	r5, r0
 801b114:	1e10      	subs	r0, r2, #0
 801b116:	d00b      	beq.n	801b130 <strncmp+0x20>
 801b118:	2400      	movs	r4, #0
 801b11a:	3a01      	subs	r2, #1
 801b11c:	5d2b      	ldrb	r3, [r5, r4]
 801b11e:	5d08      	ldrb	r0, [r1, r4]
 801b120:	4283      	cmp	r3, r0
 801b122:	d104      	bne.n	801b12e <strncmp+0x1e>
 801b124:	42a2      	cmp	r2, r4
 801b126:	d002      	beq.n	801b12e <strncmp+0x1e>
 801b128:	3401      	adds	r4, #1
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d1f6      	bne.n	801b11c <strncmp+0xc>
 801b12e:	1a18      	subs	r0, r3, r0
 801b130:	bd30      	pop	{r4, r5, pc}

0801b132 <strncpy>:
 801b132:	0003      	movs	r3, r0
 801b134:	b530      	push	{r4, r5, lr}
 801b136:	001d      	movs	r5, r3
 801b138:	2a00      	cmp	r2, #0
 801b13a:	d006      	beq.n	801b14a <strncpy+0x18>
 801b13c:	780c      	ldrb	r4, [r1, #0]
 801b13e:	3a01      	subs	r2, #1
 801b140:	3301      	adds	r3, #1
 801b142:	702c      	strb	r4, [r5, #0]
 801b144:	3101      	adds	r1, #1
 801b146:	2c00      	cmp	r4, #0
 801b148:	d1f5      	bne.n	801b136 <strncpy+0x4>
 801b14a:	2100      	movs	r1, #0
 801b14c:	189a      	adds	r2, r3, r2
 801b14e:	4293      	cmp	r3, r2
 801b150:	d100      	bne.n	801b154 <strncpy+0x22>
 801b152:	bd30      	pop	{r4, r5, pc}
 801b154:	7019      	strb	r1, [r3, #0]
 801b156:	3301      	adds	r3, #1
 801b158:	e7f9      	b.n	801b14e <strncpy+0x1c>

0801b15a <strstr>:
 801b15a:	780a      	ldrb	r2, [r1, #0]
 801b15c:	b530      	push	{r4, r5, lr}
 801b15e:	2a00      	cmp	r2, #0
 801b160:	d10c      	bne.n	801b17c <strstr+0x22>
 801b162:	bd30      	pop	{r4, r5, pc}
 801b164:	429a      	cmp	r2, r3
 801b166:	d108      	bne.n	801b17a <strstr+0x20>
 801b168:	2301      	movs	r3, #1
 801b16a:	5ccc      	ldrb	r4, [r1, r3]
 801b16c:	2c00      	cmp	r4, #0
 801b16e:	d0f8      	beq.n	801b162 <strstr+0x8>
 801b170:	5cc5      	ldrb	r5, [r0, r3]
 801b172:	42a5      	cmp	r5, r4
 801b174:	d101      	bne.n	801b17a <strstr+0x20>
 801b176:	3301      	adds	r3, #1
 801b178:	e7f7      	b.n	801b16a <strstr+0x10>
 801b17a:	3001      	adds	r0, #1
 801b17c:	7803      	ldrb	r3, [r0, #0]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d1f0      	bne.n	801b164 <strstr+0xa>
 801b182:	0018      	movs	r0, r3
 801b184:	e7ed      	b.n	801b162 <strstr+0x8>
	...

0801b188 <_localeconv_r>:
 801b188:	4800      	ldr	r0, [pc, #0]	@ (801b18c <_localeconv_r+0x4>)
 801b18a:	4770      	bx	lr
 801b18c:	200002f8 	.word	0x200002f8

0801b190 <_close_r>:
 801b190:	2300      	movs	r3, #0
 801b192:	b570      	push	{r4, r5, r6, lr}
 801b194:	4d06      	ldr	r5, [pc, #24]	@ (801b1b0 <_close_r+0x20>)
 801b196:	0004      	movs	r4, r0
 801b198:	0008      	movs	r0, r1
 801b19a:	602b      	str	r3, [r5, #0]
 801b19c:	f7ef f95c 	bl	800a458 <_close>
 801b1a0:	1c43      	adds	r3, r0, #1
 801b1a2:	d103      	bne.n	801b1ac <_close_r+0x1c>
 801b1a4:	682b      	ldr	r3, [r5, #0]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d000      	beq.n	801b1ac <_close_r+0x1c>
 801b1aa:	6023      	str	r3, [r4, #0]
 801b1ac:	bd70      	pop	{r4, r5, r6, pc}
 801b1ae:	46c0      	nop			@ (mov r8, r8)
 801b1b0:	2000383c 	.word	0x2000383c

0801b1b4 <_lseek_r>:
 801b1b4:	b570      	push	{r4, r5, r6, lr}
 801b1b6:	0004      	movs	r4, r0
 801b1b8:	0008      	movs	r0, r1
 801b1ba:	0011      	movs	r1, r2
 801b1bc:	001a      	movs	r2, r3
 801b1be:	2300      	movs	r3, #0
 801b1c0:	4d05      	ldr	r5, [pc, #20]	@ (801b1d8 <_lseek_r+0x24>)
 801b1c2:	602b      	str	r3, [r5, #0]
 801b1c4:	f7ef f969 	bl	800a49a <_lseek>
 801b1c8:	1c43      	adds	r3, r0, #1
 801b1ca:	d103      	bne.n	801b1d4 <_lseek_r+0x20>
 801b1cc:	682b      	ldr	r3, [r5, #0]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d000      	beq.n	801b1d4 <_lseek_r+0x20>
 801b1d2:	6023      	str	r3, [r4, #0]
 801b1d4:	bd70      	pop	{r4, r5, r6, pc}
 801b1d6:	46c0      	nop			@ (mov r8, r8)
 801b1d8:	2000383c 	.word	0x2000383c

0801b1dc <_read_r>:
 801b1dc:	b570      	push	{r4, r5, r6, lr}
 801b1de:	0004      	movs	r4, r0
 801b1e0:	0008      	movs	r0, r1
 801b1e2:	0011      	movs	r1, r2
 801b1e4:	001a      	movs	r2, r3
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	4d05      	ldr	r5, [pc, #20]	@ (801b200 <_read_r+0x24>)
 801b1ea:	602b      	str	r3, [r5, #0]
 801b1ec:	f7ef f917 	bl	800a41e <_read>
 801b1f0:	1c43      	adds	r3, r0, #1
 801b1f2:	d103      	bne.n	801b1fc <_read_r+0x20>
 801b1f4:	682b      	ldr	r3, [r5, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d000      	beq.n	801b1fc <_read_r+0x20>
 801b1fa:	6023      	str	r3, [r4, #0]
 801b1fc:	bd70      	pop	{r4, r5, r6, pc}
 801b1fe:	46c0      	nop			@ (mov r8, r8)
 801b200:	2000383c 	.word	0x2000383c

0801b204 <_write_r>:
 801b204:	b570      	push	{r4, r5, r6, lr}
 801b206:	0004      	movs	r4, r0
 801b208:	0008      	movs	r0, r1
 801b20a:	0011      	movs	r1, r2
 801b20c:	001a      	movs	r2, r3
 801b20e:	2300      	movs	r3, #0
 801b210:	4d05      	ldr	r5, [pc, #20]	@ (801b228 <_write_r+0x24>)
 801b212:	602b      	str	r3, [r5, #0]
 801b214:	f7ef fdc8 	bl	800ada8 <_write>
 801b218:	1c43      	adds	r3, r0, #1
 801b21a:	d103      	bne.n	801b224 <_write_r+0x20>
 801b21c:	682b      	ldr	r3, [r5, #0]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d000      	beq.n	801b224 <_write_r+0x20>
 801b222:	6023      	str	r3, [r4, #0]
 801b224:	bd70      	pop	{r4, r5, r6, pc}
 801b226:	46c0      	nop			@ (mov r8, r8)
 801b228:	2000383c 	.word	0x2000383c

0801b22c <__errno>:
 801b22c:	4b01      	ldr	r3, [pc, #4]	@ (801b234 <__errno+0x8>)
 801b22e:	6818      	ldr	r0, [r3, #0]
 801b230:	4770      	bx	lr
 801b232:	46c0      	nop			@ (mov r8, r8)
 801b234:	20000374 	.word	0x20000374

0801b238 <__libc_init_array>:
 801b238:	b570      	push	{r4, r5, r6, lr}
 801b23a:	2600      	movs	r6, #0
 801b23c:	4c0c      	ldr	r4, [pc, #48]	@ (801b270 <__libc_init_array+0x38>)
 801b23e:	4d0d      	ldr	r5, [pc, #52]	@ (801b274 <__libc_init_array+0x3c>)
 801b240:	1b64      	subs	r4, r4, r5
 801b242:	10a4      	asrs	r4, r4, #2
 801b244:	42a6      	cmp	r6, r4
 801b246:	d109      	bne.n	801b25c <__libc_init_array+0x24>
 801b248:	2600      	movs	r6, #0
 801b24a:	f002 ff8b 	bl	801e164 <_init>
 801b24e:	4c0a      	ldr	r4, [pc, #40]	@ (801b278 <__libc_init_array+0x40>)
 801b250:	4d0a      	ldr	r5, [pc, #40]	@ (801b27c <__libc_init_array+0x44>)
 801b252:	1b64      	subs	r4, r4, r5
 801b254:	10a4      	asrs	r4, r4, #2
 801b256:	42a6      	cmp	r6, r4
 801b258:	d105      	bne.n	801b266 <__libc_init_array+0x2e>
 801b25a:	bd70      	pop	{r4, r5, r6, pc}
 801b25c:	00b3      	lsls	r3, r6, #2
 801b25e:	58eb      	ldr	r3, [r5, r3]
 801b260:	4798      	blx	r3
 801b262:	3601      	adds	r6, #1
 801b264:	e7ee      	b.n	801b244 <__libc_init_array+0xc>
 801b266:	00b3      	lsls	r3, r6, #2
 801b268:	58eb      	ldr	r3, [r5, r3]
 801b26a:	4798      	blx	r3
 801b26c:	3601      	adds	r6, #1
 801b26e:	e7f2      	b.n	801b256 <__libc_init_array+0x1e>
 801b270:	0801fbc0 	.word	0x0801fbc0
 801b274:	0801fbc0 	.word	0x0801fbc0
 801b278:	0801fbc4 	.word	0x0801fbc4
 801b27c:	0801fbc0 	.word	0x0801fbc0

0801b280 <__retarget_lock_init_recursive>:
 801b280:	4770      	bx	lr

0801b282 <__retarget_lock_acquire_recursive>:
 801b282:	4770      	bx	lr

0801b284 <__retarget_lock_release_recursive>:
 801b284:	4770      	bx	lr

0801b286 <memchr>:
 801b286:	b2c9      	uxtb	r1, r1
 801b288:	1882      	adds	r2, r0, r2
 801b28a:	4290      	cmp	r0, r2
 801b28c:	d101      	bne.n	801b292 <memchr+0xc>
 801b28e:	2000      	movs	r0, #0
 801b290:	4770      	bx	lr
 801b292:	7803      	ldrb	r3, [r0, #0]
 801b294:	428b      	cmp	r3, r1
 801b296:	d0fb      	beq.n	801b290 <memchr+0xa>
 801b298:	3001      	adds	r0, #1
 801b29a:	e7f6      	b.n	801b28a <memchr+0x4>

0801b29c <memcpy>:
 801b29c:	2300      	movs	r3, #0
 801b29e:	b510      	push	{r4, lr}
 801b2a0:	429a      	cmp	r2, r3
 801b2a2:	d100      	bne.n	801b2a6 <memcpy+0xa>
 801b2a4:	bd10      	pop	{r4, pc}
 801b2a6:	5ccc      	ldrb	r4, [r1, r3]
 801b2a8:	54c4      	strb	r4, [r0, r3]
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	e7f8      	b.n	801b2a0 <memcpy+0x4>
	...

0801b2b0 <nan>:
 801b2b0:	2000      	movs	r0, #0
 801b2b2:	4901      	ldr	r1, [pc, #4]	@ (801b2b8 <nan+0x8>)
 801b2b4:	4770      	bx	lr
 801b2b6:	46c0      	nop			@ (mov r8, r8)
 801b2b8:	7ff80000 	.word	0x7ff80000

0801b2bc <quorem>:
 801b2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2be:	6902      	ldr	r2, [r0, #16]
 801b2c0:	690f      	ldr	r7, [r1, #16]
 801b2c2:	b087      	sub	sp, #28
 801b2c4:	0006      	movs	r6, r0
 801b2c6:	000b      	movs	r3, r1
 801b2c8:	2000      	movs	r0, #0
 801b2ca:	9102      	str	r1, [sp, #8]
 801b2cc:	42ba      	cmp	r2, r7
 801b2ce:	db6d      	blt.n	801b3ac <quorem+0xf0>
 801b2d0:	3f01      	subs	r7, #1
 801b2d2:	00bc      	lsls	r4, r7, #2
 801b2d4:	3314      	adds	r3, #20
 801b2d6:	9305      	str	r3, [sp, #20]
 801b2d8:	191b      	adds	r3, r3, r4
 801b2da:	9303      	str	r3, [sp, #12]
 801b2dc:	0033      	movs	r3, r6
 801b2de:	3314      	adds	r3, #20
 801b2e0:	191c      	adds	r4, r3, r4
 801b2e2:	9301      	str	r3, [sp, #4]
 801b2e4:	6823      	ldr	r3, [r4, #0]
 801b2e6:	9304      	str	r3, [sp, #16]
 801b2e8:	9b03      	ldr	r3, [sp, #12]
 801b2ea:	9804      	ldr	r0, [sp, #16]
 801b2ec:	681d      	ldr	r5, [r3, #0]
 801b2ee:	3501      	adds	r5, #1
 801b2f0:	0029      	movs	r1, r5
 801b2f2:	f7e4 ff4d 	bl	8000190 <__udivsi3>
 801b2f6:	9b04      	ldr	r3, [sp, #16]
 801b2f8:	9000      	str	r0, [sp, #0]
 801b2fa:	42ab      	cmp	r3, r5
 801b2fc:	d32b      	bcc.n	801b356 <quorem+0x9a>
 801b2fe:	9b05      	ldr	r3, [sp, #20]
 801b300:	9d01      	ldr	r5, [sp, #4]
 801b302:	469c      	mov	ip, r3
 801b304:	2300      	movs	r3, #0
 801b306:	9305      	str	r3, [sp, #20]
 801b308:	9304      	str	r3, [sp, #16]
 801b30a:	4662      	mov	r2, ip
 801b30c:	ca08      	ldmia	r2!, {r3}
 801b30e:	6828      	ldr	r0, [r5, #0]
 801b310:	4694      	mov	ip, r2
 801b312:	9a00      	ldr	r2, [sp, #0]
 801b314:	b299      	uxth	r1, r3
 801b316:	4351      	muls	r1, r2
 801b318:	9a05      	ldr	r2, [sp, #20]
 801b31a:	0c1b      	lsrs	r3, r3, #16
 801b31c:	1889      	adds	r1, r1, r2
 801b31e:	9a00      	ldr	r2, [sp, #0]
 801b320:	4353      	muls	r3, r2
 801b322:	0c0a      	lsrs	r2, r1, #16
 801b324:	189b      	adds	r3, r3, r2
 801b326:	0c1a      	lsrs	r2, r3, #16
 801b328:	b289      	uxth	r1, r1
 801b32a:	9205      	str	r2, [sp, #20]
 801b32c:	b282      	uxth	r2, r0
 801b32e:	1a52      	subs	r2, r2, r1
 801b330:	9904      	ldr	r1, [sp, #16]
 801b332:	0c00      	lsrs	r0, r0, #16
 801b334:	1852      	adds	r2, r2, r1
 801b336:	b29b      	uxth	r3, r3
 801b338:	1411      	asrs	r1, r2, #16
 801b33a:	1ac3      	subs	r3, r0, r3
 801b33c:	185b      	adds	r3, r3, r1
 801b33e:	1419      	asrs	r1, r3, #16
 801b340:	b292      	uxth	r2, r2
 801b342:	041b      	lsls	r3, r3, #16
 801b344:	431a      	orrs	r2, r3
 801b346:	9b03      	ldr	r3, [sp, #12]
 801b348:	9104      	str	r1, [sp, #16]
 801b34a:	c504      	stmia	r5!, {r2}
 801b34c:	4563      	cmp	r3, ip
 801b34e:	d2dc      	bcs.n	801b30a <quorem+0x4e>
 801b350:	6823      	ldr	r3, [r4, #0]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d030      	beq.n	801b3b8 <quorem+0xfc>
 801b356:	0030      	movs	r0, r6
 801b358:	9902      	ldr	r1, [sp, #8]
 801b35a:	f001 fd7d 	bl	801ce58 <__mcmp>
 801b35e:	2800      	cmp	r0, #0
 801b360:	db23      	blt.n	801b3aa <quorem+0xee>
 801b362:	0034      	movs	r4, r6
 801b364:	2500      	movs	r5, #0
 801b366:	9902      	ldr	r1, [sp, #8]
 801b368:	3414      	adds	r4, #20
 801b36a:	3114      	adds	r1, #20
 801b36c:	6823      	ldr	r3, [r4, #0]
 801b36e:	c901      	ldmia	r1!, {r0}
 801b370:	9302      	str	r3, [sp, #8]
 801b372:	466b      	mov	r3, sp
 801b374:	891b      	ldrh	r3, [r3, #8]
 801b376:	b282      	uxth	r2, r0
 801b378:	1a9a      	subs	r2, r3, r2
 801b37a:	9b02      	ldr	r3, [sp, #8]
 801b37c:	1952      	adds	r2, r2, r5
 801b37e:	0c00      	lsrs	r0, r0, #16
 801b380:	0c1b      	lsrs	r3, r3, #16
 801b382:	1a1b      	subs	r3, r3, r0
 801b384:	1410      	asrs	r0, r2, #16
 801b386:	181b      	adds	r3, r3, r0
 801b388:	141d      	asrs	r5, r3, #16
 801b38a:	b292      	uxth	r2, r2
 801b38c:	041b      	lsls	r3, r3, #16
 801b38e:	431a      	orrs	r2, r3
 801b390:	9b03      	ldr	r3, [sp, #12]
 801b392:	c404      	stmia	r4!, {r2}
 801b394:	428b      	cmp	r3, r1
 801b396:	d2e9      	bcs.n	801b36c <quorem+0xb0>
 801b398:	9a01      	ldr	r2, [sp, #4]
 801b39a:	00bb      	lsls	r3, r7, #2
 801b39c:	18d3      	adds	r3, r2, r3
 801b39e:	681a      	ldr	r2, [r3, #0]
 801b3a0:	2a00      	cmp	r2, #0
 801b3a2:	d013      	beq.n	801b3cc <quorem+0x110>
 801b3a4:	9b00      	ldr	r3, [sp, #0]
 801b3a6:	3301      	adds	r3, #1
 801b3a8:	9300      	str	r3, [sp, #0]
 801b3aa:	9800      	ldr	r0, [sp, #0]
 801b3ac:	b007      	add	sp, #28
 801b3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3b0:	6823      	ldr	r3, [r4, #0]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d104      	bne.n	801b3c0 <quorem+0x104>
 801b3b6:	3f01      	subs	r7, #1
 801b3b8:	9b01      	ldr	r3, [sp, #4]
 801b3ba:	3c04      	subs	r4, #4
 801b3bc:	42a3      	cmp	r3, r4
 801b3be:	d3f7      	bcc.n	801b3b0 <quorem+0xf4>
 801b3c0:	6137      	str	r7, [r6, #16]
 801b3c2:	e7c8      	b.n	801b356 <quorem+0x9a>
 801b3c4:	681a      	ldr	r2, [r3, #0]
 801b3c6:	2a00      	cmp	r2, #0
 801b3c8:	d104      	bne.n	801b3d4 <quorem+0x118>
 801b3ca:	3f01      	subs	r7, #1
 801b3cc:	9a01      	ldr	r2, [sp, #4]
 801b3ce:	3b04      	subs	r3, #4
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d3f7      	bcc.n	801b3c4 <quorem+0x108>
 801b3d4:	6137      	str	r7, [r6, #16]
 801b3d6:	e7e5      	b.n	801b3a4 <quorem+0xe8>

0801b3d8 <_dtoa_r>:
 801b3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3da:	0014      	movs	r4, r2
 801b3dc:	001d      	movs	r5, r3
 801b3de:	69c6      	ldr	r6, [r0, #28]
 801b3e0:	b09d      	sub	sp, #116	@ 0x74
 801b3e2:	940a      	str	r4, [sp, #40]	@ 0x28
 801b3e4:	950b      	str	r5, [sp, #44]	@ 0x2c
 801b3e6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801b3e8:	9003      	str	r0, [sp, #12]
 801b3ea:	2e00      	cmp	r6, #0
 801b3ec:	d10f      	bne.n	801b40e <_dtoa_r+0x36>
 801b3ee:	2010      	movs	r0, #16
 801b3f0:	f001 f98a 	bl	801c708 <malloc>
 801b3f4:	9b03      	ldr	r3, [sp, #12]
 801b3f6:	1e02      	subs	r2, r0, #0
 801b3f8:	61d8      	str	r0, [r3, #28]
 801b3fa:	d104      	bne.n	801b406 <_dtoa_r+0x2e>
 801b3fc:	21ef      	movs	r1, #239	@ 0xef
 801b3fe:	4bc7      	ldr	r3, [pc, #796]	@ (801b71c <_dtoa_r+0x344>)
 801b400:	48c7      	ldr	r0, [pc, #796]	@ (801b720 <_dtoa_r+0x348>)
 801b402:	f002 fb41 	bl	801da88 <__assert_func>
 801b406:	6046      	str	r6, [r0, #4]
 801b408:	6086      	str	r6, [r0, #8]
 801b40a:	6006      	str	r6, [r0, #0]
 801b40c:	60c6      	str	r6, [r0, #12]
 801b40e:	9b03      	ldr	r3, [sp, #12]
 801b410:	69db      	ldr	r3, [r3, #28]
 801b412:	6819      	ldr	r1, [r3, #0]
 801b414:	2900      	cmp	r1, #0
 801b416:	d00b      	beq.n	801b430 <_dtoa_r+0x58>
 801b418:	685a      	ldr	r2, [r3, #4]
 801b41a:	2301      	movs	r3, #1
 801b41c:	4093      	lsls	r3, r2
 801b41e:	604a      	str	r2, [r1, #4]
 801b420:	608b      	str	r3, [r1, #8]
 801b422:	9803      	ldr	r0, [sp, #12]
 801b424:	f001 fa82 	bl	801c92c <_Bfree>
 801b428:	2200      	movs	r2, #0
 801b42a:	9b03      	ldr	r3, [sp, #12]
 801b42c:	69db      	ldr	r3, [r3, #28]
 801b42e:	601a      	str	r2, [r3, #0]
 801b430:	2d00      	cmp	r5, #0
 801b432:	da1e      	bge.n	801b472 <_dtoa_r+0x9a>
 801b434:	2301      	movs	r3, #1
 801b436:	603b      	str	r3, [r7, #0]
 801b438:	006b      	lsls	r3, r5, #1
 801b43a:	085b      	lsrs	r3, r3, #1
 801b43c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b43e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b440:	4bb8      	ldr	r3, [pc, #736]	@ (801b724 <_dtoa_r+0x34c>)
 801b442:	4ab8      	ldr	r2, [pc, #736]	@ (801b724 <_dtoa_r+0x34c>)
 801b444:	403b      	ands	r3, r7
 801b446:	4293      	cmp	r3, r2
 801b448:	d116      	bne.n	801b478 <_dtoa_r+0xa0>
 801b44a:	4bb7      	ldr	r3, [pc, #732]	@ (801b728 <_dtoa_r+0x350>)
 801b44c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b44e:	6013      	str	r3, [r2, #0]
 801b450:	033b      	lsls	r3, r7, #12
 801b452:	0b1b      	lsrs	r3, r3, #12
 801b454:	4323      	orrs	r3, r4
 801b456:	d101      	bne.n	801b45c <_dtoa_r+0x84>
 801b458:	f000 fd83 	bl	801bf62 <_dtoa_r+0xb8a>
 801b45c:	4bb3      	ldr	r3, [pc, #716]	@ (801b72c <_dtoa_r+0x354>)
 801b45e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b460:	9308      	str	r3, [sp, #32]
 801b462:	2a00      	cmp	r2, #0
 801b464:	d002      	beq.n	801b46c <_dtoa_r+0x94>
 801b466:	4bb2      	ldr	r3, [pc, #712]	@ (801b730 <_dtoa_r+0x358>)
 801b468:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b46a:	6013      	str	r3, [r2, #0]
 801b46c:	9808      	ldr	r0, [sp, #32]
 801b46e:	b01d      	add	sp, #116	@ 0x74
 801b470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b472:	2300      	movs	r3, #0
 801b474:	603b      	str	r3, [r7, #0]
 801b476:	e7e2      	b.n	801b43e <_dtoa_r+0x66>
 801b478:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b47a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b47c:	9212      	str	r2, [sp, #72]	@ 0x48
 801b47e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b480:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b482:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b484:	2200      	movs	r2, #0
 801b486:	2300      	movs	r3, #0
 801b488:	f7e5 f808 	bl	800049c <__aeabi_dcmpeq>
 801b48c:	1e06      	subs	r6, r0, #0
 801b48e:	d00b      	beq.n	801b4a8 <_dtoa_r+0xd0>
 801b490:	2301      	movs	r3, #1
 801b492:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b494:	6013      	str	r3, [r2, #0]
 801b496:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d002      	beq.n	801b4a2 <_dtoa_r+0xca>
 801b49c:	4ba5      	ldr	r3, [pc, #660]	@ (801b734 <_dtoa_r+0x35c>)
 801b49e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b4a0:	6013      	str	r3, [r2, #0]
 801b4a2:	4ba5      	ldr	r3, [pc, #660]	@ (801b738 <_dtoa_r+0x360>)
 801b4a4:	9308      	str	r3, [sp, #32]
 801b4a6:	e7e1      	b.n	801b46c <_dtoa_r+0x94>
 801b4a8:	ab1a      	add	r3, sp, #104	@ 0x68
 801b4aa:	9301      	str	r3, [sp, #4]
 801b4ac:	ab1b      	add	r3, sp, #108	@ 0x6c
 801b4ae:	9300      	str	r3, [sp, #0]
 801b4b0:	9803      	ldr	r0, [sp, #12]
 801b4b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b4b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b4b6:	f001 fdf1 	bl	801d09c <__d2b>
 801b4ba:	007a      	lsls	r2, r7, #1
 801b4bc:	9005      	str	r0, [sp, #20]
 801b4be:	0d52      	lsrs	r2, r2, #21
 801b4c0:	d100      	bne.n	801b4c4 <_dtoa_r+0xec>
 801b4c2:	e07b      	b.n	801b5bc <_dtoa_r+0x1e4>
 801b4c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b4c6:	9618      	str	r6, [sp, #96]	@ 0x60
 801b4c8:	0319      	lsls	r1, r3, #12
 801b4ca:	4b9c      	ldr	r3, [pc, #624]	@ (801b73c <_dtoa_r+0x364>)
 801b4cc:	0b09      	lsrs	r1, r1, #12
 801b4ce:	430b      	orrs	r3, r1
 801b4d0:	499b      	ldr	r1, [pc, #620]	@ (801b740 <_dtoa_r+0x368>)
 801b4d2:	1857      	adds	r7, r2, r1
 801b4d4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b4d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b4d8:	0019      	movs	r1, r3
 801b4da:	2200      	movs	r2, #0
 801b4dc:	4b99      	ldr	r3, [pc, #612]	@ (801b744 <_dtoa_r+0x36c>)
 801b4de:	f7e7 fb6b 	bl	8002bb8 <__aeabi_dsub>
 801b4e2:	4a99      	ldr	r2, [pc, #612]	@ (801b748 <_dtoa_r+0x370>)
 801b4e4:	4b99      	ldr	r3, [pc, #612]	@ (801b74c <_dtoa_r+0x374>)
 801b4e6:	f7e7 f89f 	bl	8002628 <__aeabi_dmul>
 801b4ea:	4a99      	ldr	r2, [pc, #612]	@ (801b750 <_dtoa_r+0x378>)
 801b4ec:	4b99      	ldr	r3, [pc, #612]	@ (801b754 <_dtoa_r+0x37c>)
 801b4ee:	f7e6 f8f3 	bl	80016d8 <__aeabi_dadd>
 801b4f2:	0004      	movs	r4, r0
 801b4f4:	0038      	movs	r0, r7
 801b4f6:	000d      	movs	r5, r1
 801b4f8:	f7e7 ff58 	bl	80033ac <__aeabi_i2d>
 801b4fc:	4a96      	ldr	r2, [pc, #600]	@ (801b758 <_dtoa_r+0x380>)
 801b4fe:	4b97      	ldr	r3, [pc, #604]	@ (801b75c <_dtoa_r+0x384>)
 801b500:	f7e7 f892 	bl	8002628 <__aeabi_dmul>
 801b504:	0002      	movs	r2, r0
 801b506:	000b      	movs	r3, r1
 801b508:	0020      	movs	r0, r4
 801b50a:	0029      	movs	r1, r5
 801b50c:	f7e6 f8e4 	bl	80016d8 <__aeabi_dadd>
 801b510:	0004      	movs	r4, r0
 801b512:	000d      	movs	r5, r1
 801b514:	f7e7 ff0e 	bl	8003334 <__aeabi_d2iz>
 801b518:	2200      	movs	r2, #0
 801b51a:	9004      	str	r0, [sp, #16]
 801b51c:	2300      	movs	r3, #0
 801b51e:	0020      	movs	r0, r4
 801b520:	0029      	movs	r1, r5
 801b522:	f7e4 ffc1 	bl	80004a8 <__aeabi_dcmplt>
 801b526:	2800      	cmp	r0, #0
 801b528:	d00b      	beq.n	801b542 <_dtoa_r+0x16a>
 801b52a:	9804      	ldr	r0, [sp, #16]
 801b52c:	f7e7 ff3e 	bl	80033ac <__aeabi_i2d>
 801b530:	002b      	movs	r3, r5
 801b532:	0022      	movs	r2, r4
 801b534:	f7e4 ffb2 	bl	800049c <__aeabi_dcmpeq>
 801b538:	4243      	negs	r3, r0
 801b53a:	4158      	adcs	r0, r3
 801b53c:	9b04      	ldr	r3, [sp, #16]
 801b53e:	1a1b      	subs	r3, r3, r0
 801b540:	9304      	str	r3, [sp, #16]
 801b542:	2301      	movs	r3, #1
 801b544:	9315      	str	r3, [sp, #84]	@ 0x54
 801b546:	9b04      	ldr	r3, [sp, #16]
 801b548:	2b16      	cmp	r3, #22
 801b54a:	d810      	bhi.n	801b56e <_dtoa_r+0x196>
 801b54c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b54e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b550:	9a04      	ldr	r2, [sp, #16]
 801b552:	4b83      	ldr	r3, [pc, #524]	@ (801b760 <_dtoa_r+0x388>)
 801b554:	00d2      	lsls	r2, r2, #3
 801b556:	189b      	adds	r3, r3, r2
 801b558:	681a      	ldr	r2, [r3, #0]
 801b55a:	685b      	ldr	r3, [r3, #4]
 801b55c:	f7e4 ffa4 	bl	80004a8 <__aeabi_dcmplt>
 801b560:	2800      	cmp	r0, #0
 801b562:	d047      	beq.n	801b5f4 <_dtoa_r+0x21c>
 801b564:	9b04      	ldr	r3, [sp, #16]
 801b566:	3b01      	subs	r3, #1
 801b568:	9304      	str	r3, [sp, #16]
 801b56a:	2300      	movs	r3, #0
 801b56c:	9315      	str	r3, [sp, #84]	@ 0x54
 801b56e:	2200      	movs	r2, #0
 801b570:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b572:	9206      	str	r2, [sp, #24]
 801b574:	1bdb      	subs	r3, r3, r7
 801b576:	1e5a      	subs	r2, r3, #1
 801b578:	d53e      	bpl.n	801b5f8 <_dtoa_r+0x220>
 801b57a:	2201      	movs	r2, #1
 801b57c:	1ad3      	subs	r3, r2, r3
 801b57e:	9306      	str	r3, [sp, #24]
 801b580:	2300      	movs	r3, #0
 801b582:	930d      	str	r3, [sp, #52]	@ 0x34
 801b584:	9b04      	ldr	r3, [sp, #16]
 801b586:	2b00      	cmp	r3, #0
 801b588:	db38      	blt.n	801b5fc <_dtoa_r+0x224>
 801b58a:	9a04      	ldr	r2, [sp, #16]
 801b58c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b58e:	4694      	mov	ip, r2
 801b590:	4463      	add	r3, ip
 801b592:	930d      	str	r3, [sp, #52]	@ 0x34
 801b594:	2300      	movs	r3, #0
 801b596:	9214      	str	r2, [sp, #80]	@ 0x50
 801b598:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b59a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b59c:	2401      	movs	r4, #1
 801b59e:	2b09      	cmp	r3, #9
 801b5a0:	d867      	bhi.n	801b672 <_dtoa_r+0x29a>
 801b5a2:	2b05      	cmp	r3, #5
 801b5a4:	dd02      	ble.n	801b5ac <_dtoa_r+0x1d4>
 801b5a6:	2400      	movs	r4, #0
 801b5a8:	3b04      	subs	r3, #4
 801b5aa:	9322      	str	r3, [sp, #136]	@ 0x88
 801b5ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b5ae:	1e98      	subs	r0, r3, #2
 801b5b0:	2803      	cmp	r0, #3
 801b5b2:	d867      	bhi.n	801b684 <_dtoa_r+0x2ac>
 801b5b4:	f7e4 fdd8 	bl	8000168 <__gnu_thumb1_case_uqi>
 801b5b8:	5b383a2b 	.word	0x5b383a2b
 801b5bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b5be:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b5c0:	18f6      	adds	r6, r6, r3
 801b5c2:	4b68      	ldr	r3, [pc, #416]	@ (801b764 <_dtoa_r+0x38c>)
 801b5c4:	18f2      	adds	r2, r6, r3
 801b5c6:	2a20      	cmp	r2, #32
 801b5c8:	dd0f      	ble.n	801b5ea <_dtoa_r+0x212>
 801b5ca:	2340      	movs	r3, #64	@ 0x40
 801b5cc:	1a9b      	subs	r3, r3, r2
 801b5ce:	409f      	lsls	r7, r3
 801b5d0:	4b65      	ldr	r3, [pc, #404]	@ (801b768 <_dtoa_r+0x390>)
 801b5d2:	0038      	movs	r0, r7
 801b5d4:	18f3      	adds	r3, r6, r3
 801b5d6:	40dc      	lsrs	r4, r3
 801b5d8:	4320      	orrs	r0, r4
 801b5da:	f7e7 ff15 	bl	8003408 <__aeabi_ui2d>
 801b5de:	2201      	movs	r2, #1
 801b5e0:	4b62      	ldr	r3, [pc, #392]	@ (801b76c <_dtoa_r+0x394>)
 801b5e2:	1e77      	subs	r7, r6, #1
 801b5e4:	18cb      	adds	r3, r1, r3
 801b5e6:	9218      	str	r2, [sp, #96]	@ 0x60
 801b5e8:	e776      	b.n	801b4d8 <_dtoa_r+0x100>
 801b5ea:	2320      	movs	r3, #32
 801b5ec:	0020      	movs	r0, r4
 801b5ee:	1a9b      	subs	r3, r3, r2
 801b5f0:	4098      	lsls	r0, r3
 801b5f2:	e7f2      	b.n	801b5da <_dtoa_r+0x202>
 801b5f4:	9015      	str	r0, [sp, #84]	@ 0x54
 801b5f6:	e7ba      	b.n	801b56e <_dtoa_r+0x196>
 801b5f8:	920d      	str	r2, [sp, #52]	@ 0x34
 801b5fa:	e7c3      	b.n	801b584 <_dtoa_r+0x1ac>
 801b5fc:	9b06      	ldr	r3, [sp, #24]
 801b5fe:	9a04      	ldr	r2, [sp, #16]
 801b600:	1a9b      	subs	r3, r3, r2
 801b602:	9306      	str	r3, [sp, #24]
 801b604:	4253      	negs	r3, r2
 801b606:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b608:	2300      	movs	r3, #0
 801b60a:	9314      	str	r3, [sp, #80]	@ 0x50
 801b60c:	e7c5      	b.n	801b59a <_dtoa_r+0x1c2>
 801b60e:	2300      	movs	r3, #0
 801b610:	9310      	str	r3, [sp, #64]	@ 0x40
 801b612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b614:	930e      	str	r3, [sp, #56]	@ 0x38
 801b616:	9309      	str	r3, [sp, #36]	@ 0x24
 801b618:	2b00      	cmp	r3, #0
 801b61a:	dc13      	bgt.n	801b644 <_dtoa_r+0x26c>
 801b61c:	2301      	movs	r3, #1
 801b61e:	001a      	movs	r2, r3
 801b620:	930e      	str	r3, [sp, #56]	@ 0x38
 801b622:	9309      	str	r3, [sp, #36]	@ 0x24
 801b624:	9223      	str	r2, [sp, #140]	@ 0x8c
 801b626:	e00d      	b.n	801b644 <_dtoa_r+0x26c>
 801b628:	2301      	movs	r3, #1
 801b62a:	e7f1      	b.n	801b610 <_dtoa_r+0x238>
 801b62c:	2300      	movs	r3, #0
 801b62e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b630:	9310      	str	r3, [sp, #64]	@ 0x40
 801b632:	4694      	mov	ip, r2
 801b634:	9b04      	ldr	r3, [sp, #16]
 801b636:	4463      	add	r3, ip
 801b638:	930e      	str	r3, [sp, #56]	@ 0x38
 801b63a:	3301      	adds	r3, #1
 801b63c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b63e:	2b00      	cmp	r3, #0
 801b640:	dc00      	bgt.n	801b644 <_dtoa_r+0x26c>
 801b642:	2301      	movs	r3, #1
 801b644:	9a03      	ldr	r2, [sp, #12]
 801b646:	2100      	movs	r1, #0
 801b648:	69d0      	ldr	r0, [r2, #28]
 801b64a:	2204      	movs	r2, #4
 801b64c:	0015      	movs	r5, r2
 801b64e:	3514      	adds	r5, #20
 801b650:	429d      	cmp	r5, r3
 801b652:	d91b      	bls.n	801b68c <_dtoa_r+0x2b4>
 801b654:	6041      	str	r1, [r0, #4]
 801b656:	9803      	ldr	r0, [sp, #12]
 801b658:	f001 f924 	bl	801c8a4 <_Balloc>
 801b65c:	9008      	str	r0, [sp, #32]
 801b65e:	2800      	cmp	r0, #0
 801b660:	d117      	bne.n	801b692 <_dtoa_r+0x2ba>
 801b662:	21b0      	movs	r1, #176	@ 0xb0
 801b664:	4b42      	ldr	r3, [pc, #264]	@ (801b770 <_dtoa_r+0x398>)
 801b666:	482e      	ldr	r0, [pc, #184]	@ (801b720 <_dtoa_r+0x348>)
 801b668:	9a08      	ldr	r2, [sp, #32]
 801b66a:	31ff      	adds	r1, #255	@ 0xff
 801b66c:	e6c9      	b.n	801b402 <_dtoa_r+0x2a>
 801b66e:	2301      	movs	r3, #1
 801b670:	e7dd      	b.n	801b62e <_dtoa_r+0x256>
 801b672:	2300      	movs	r3, #0
 801b674:	9410      	str	r4, [sp, #64]	@ 0x40
 801b676:	9322      	str	r3, [sp, #136]	@ 0x88
 801b678:	3b01      	subs	r3, #1
 801b67a:	930e      	str	r3, [sp, #56]	@ 0x38
 801b67c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b67e:	2200      	movs	r2, #0
 801b680:	3313      	adds	r3, #19
 801b682:	e7cf      	b.n	801b624 <_dtoa_r+0x24c>
 801b684:	2301      	movs	r3, #1
 801b686:	9310      	str	r3, [sp, #64]	@ 0x40
 801b688:	3b02      	subs	r3, #2
 801b68a:	e7f6      	b.n	801b67a <_dtoa_r+0x2a2>
 801b68c:	3101      	adds	r1, #1
 801b68e:	0052      	lsls	r2, r2, #1
 801b690:	e7dc      	b.n	801b64c <_dtoa_r+0x274>
 801b692:	9b03      	ldr	r3, [sp, #12]
 801b694:	9a08      	ldr	r2, [sp, #32]
 801b696:	69db      	ldr	r3, [r3, #28]
 801b698:	601a      	str	r2, [r3, #0]
 801b69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b69c:	2b0e      	cmp	r3, #14
 801b69e:	d900      	bls.n	801b6a2 <_dtoa_r+0x2ca>
 801b6a0:	e0d9      	b.n	801b856 <_dtoa_r+0x47e>
 801b6a2:	2c00      	cmp	r4, #0
 801b6a4:	d100      	bne.n	801b6a8 <_dtoa_r+0x2d0>
 801b6a6:	e0d6      	b.n	801b856 <_dtoa_r+0x47e>
 801b6a8:	9b04      	ldr	r3, [sp, #16]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	dd64      	ble.n	801b778 <_dtoa_r+0x3a0>
 801b6ae:	210f      	movs	r1, #15
 801b6b0:	9a04      	ldr	r2, [sp, #16]
 801b6b2:	4b2b      	ldr	r3, [pc, #172]	@ (801b760 <_dtoa_r+0x388>)
 801b6b4:	400a      	ands	r2, r1
 801b6b6:	00d2      	lsls	r2, r2, #3
 801b6b8:	189b      	adds	r3, r3, r2
 801b6ba:	681e      	ldr	r6, [r3, #0]
 801b6bc:	685f      	ldr	r7, [r3, #4]
 801b6be:	9b04      	ldr	r3, [sp, #16]
 801b6c0:	2402      	movs	r4, #2
 801b6c2:	111d      	asrs	r5, r3, #4
 801b6c4:	05db      	lsls	r3, r3, #23
 801b6c6:	d50a      	bpl.n	801b6de <_dtoa_r+0x306>
 801b6c8:	4b2a      	ldr	r3, [pc, #168]	@ (801b774 <_dtoa_r+0x39c>)
 801b6ca:	400d      	ands	r5, r1
 801b6cc:	6a1a      	ldr	r2, [r3, #32]
 801b6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b6d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b6d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b6d4:	f7e6 fb64 	bl	8001da0 <__aeabi_ddiv>
 801b6d8:	900a      	str	r0, [sp, #40]	@ 0x28
 801b6da:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b6dc:	3401      	adds	r4, #1
 801b6de:	4b25      	ldr	r3, [pc, #148]	@ (801b774 <_dtoa_r+0x39c>)
 801b6e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801b6e2:	2d00      	cmp	r5, #0
 801b6e4:	d108      	bne.n	801b6f8 <_dtoa_r+0x320>
 801b6e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b6ea:	0032      	movs	r2, r6
 801b6ec:	003b      	movs	r3, r7
 801b6ee:	f7e6 fb57 	bl	8001da0 <__aeabi_ddiv>
 801b6f2:	900a      	str	r0, [sp, #40]	@ 0x28
 801b6f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b6f6:	e05a      	b.n	801b7ae <_dtoa_r+0x3d6>
 801b6f8:	2301      	movs	r3, #1
 801b6fa:	421d      	tst	r5, r3
 801b6fc:	d009      	beq.n	801b712 <_dtoa_r+0x33a>
 801b6fe:	18e4      	adds	r4, r4, r3
 801b700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b702:	0030      	movs	r0, r6
 801b704:	681a      	ldr	r2, [r3, #0]
 801b706:	685b      	ldr	r3, [r3, #4]
 801b708:	0039      	movs	r1, r7
 801b70a:	f7e6 ff8d 	bl	8002628 <__aeabi_dmul>
 801b70e:	0006      	movs	r6, r0
 801b710:	000f      	movs	r7, r1
 801b712:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b714:	106d      	asrs	r5, r5, #1
 801b716:	3308      	adds	r3, #8
 801b718:	e7e2      	b.n	801b6e0 <_dtoa_r+0x308>
 801b71a:	46c0      	nop			@ (mov r8, r8)
 801b71c:	0801f819 	.word	0x0801f819
 801b720:	0801f830 	.word	0x0801f830
 801b724:	7ff00000 	.word	0x7ff00000
 801b728:	0000270f 	.word	0x0000270f
 801b72c:	0801f815 	.word	0x0801f815
 801b730:	0801f818 	.word	0x0801f818
 801b734:	0801f7e1 	.word	0x0801f7e1
 801b738:	0801f7e0 	.word	0x0801f7e0
 801b73c:	3ff00000 	.word	0x3ff00000
 801b740:	fffffc01 	.word	0xfffffc01
 801b744:	3ff80000 	.word	0x3ff80000
 801b748:	636f4361 	.word	0x636f4361
 801b74c:	3fd287a7 	.word	0x3fd287a7
 801b750:	8b60c8b3 	.word	0x8b60c8b3
 801b754:	3fc68a28 	.word	0x3fc68a28
 801b758:	509f79fb 	.word	0x509f79fb
 801b75c:	3fd34413 	.word	0x3fd34413
 801b760:	0801f988 	.word	0x0801f988
 801b764:	00000432 	.word	0x00000432
 801b768:	00000412 	.word	0x00000412
 801b76c:	fe100000 	.word	0xfe100000
 801b770:	0801f888 	.word	0x0801f888
 801b774:	0801f960 	.word	0x0801f960
 801b778:	9b04      	ldr	r3, [sp, #16]
 801b77a:	2402      	movs	r4, #2
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d016      	beq.n	801b7ae <_dtoa_r+0x3d6>
 801b780:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b782:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b784:	220f      	movs	r2, #15
 801b786:	425d      	negs	r5, r3
 801b788:	402a      	ands	r2, r5
 801b78a:	4bd7      	ldr	r3, [pc, #860]	@ (801bae8 <_dtoa_r+0x710>)
 801b78c:	00d2      	lsls	r2, r2, #3
 801b78e:	189b      	adds	r3, r3, r2
 801b790:	681a      	ldr	r2, [r3, #0]
 801b792:	685b      	ldr	r3, [r3, #4]
 801b794:	f7e6 ff48 	bl	8002628 <__aeabi_dmul>
 801b798:	2701      	movs	r7, #1
 801b79a:	2300      	movs	r3, #0
 801b79c:	900a      	str	r0, [sp, #40]	@ 0x28
 801b79e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b7a0:	4ed2      	ldr	r6, [pc, #840]	@ (801baec <_dtoa_r+0x714>)
 801b7a2:	112d      	asrs	r5, r5, #4
 801b7a4:	2d00      	cmp	r5, #0
 801b7a6:	d000      	beq.n	801b7aa <_dtoa_r+0x3d2>
 801b7a8:	e0ba      	b.n	801b920 <_dtoa_r+0x548>
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d1a1      	bne.n	801b6f2 <_dtoa_r+0x31a>
 801b7ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801b7b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b7b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d100      	bne.n	801b7ba <_dtoa_r+0x3e2>
 801b7b8:	e0bd      	b.n	801b936 <_dtoa_r+0x55e>
 801b7ba:	2200      	movs	r2, #0
 801b7bc:	0030      	movs	r0, r6
 801b7be:	0039      	movs	r1, r7
 801b7c0:	4bcb      	ldr	r3, [pc, #812]	@ (801baf0 <_dtoa_r+0x718>)
 801b7c2:	f7e4 fe71 	bl	80004a8 <__aeabi_dcmplt>
 801b7c6:	2800      	cmp	r0, #0
 801b7c8:	d100      	bne.n	801b7cc <_dtoa_r+0x3f4>
 801b7ca:	e0b4      	b.n	801b936 <_dtoa_r+0x55e>
 801b7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d100      	bne.n	801b7d4 <_dtoa_r+0x3fc>
 801b7d2:	e0b0      	b.n	801b936 <_dtoa_r+0x55e>
 801b7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	dd39      	ble.n	801b84e <_dtoa_r+0x476>
 801b7da:	9b04      	ldr	r3, [sp, #16]
 801b7dc:	2200      	movs	r2, #0
 801b7de:	3b01      	subs	r3, #1
 801b7e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801b7e2:	0030      	movs	r0, r6
 801b7e4:	4bc3      	ldr	r3, [pc, #780]	@ (801baf4 <_dtoa_r+0x71c>)
 801b7e6:	0039      	movs	r1, r7
 801b7e8:	f7e6 ff1e 	bl	8002628 <__aeabi_dmul>
 801b7ec:	900a      	str	r0, [sp, #40]	@ 0x28
 801b7ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b7f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b7f2:	3401      	adds	r4, #1
 801b7f4:	0020      	movs	r0, r4
 801b7f6:	9311      	str	r3, [sp, #68]	@ 0x44
 801b7f8:	f7e7 fdd8 	bl	80033ac <__aeabi_i2d>
 801b7fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b800:	f7e6 ff12 	bl	8002628 <__aeabi_dmul>
 801b804:	4bbc      	ldr	r3, [pc, #752]	@ (801baf8 <_dtoa_r+0x720>)
 801b806:	2200      	movs	r2, #0
 801b808:	f7e5 ff66 	bl	80016d8 <__aeabi_dadd>
 801b80c:	4bbb      	ldr	r3, [pc, #748]	@ (801bafc <_dtoa_r+0x724>)
 801b80e:	0006      	movs	r6, r0
 801b810:	18cf      	adds	r7, r1, r3
 801b812:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b814:	2b00      	cmp	r3, #0
 801b816:	d000      	beq.n	801b81a <_dtoa_r+0x442>
 801b818:	e091      	b.n	801b93e <_dtoa_r+0x566>
 801b81a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b81c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b81e:	2200      	movs	r2, #0
 801b820:	4bb7      	ldr	r3, [pc, #732]	@ (801bb00 <_dtoa_r+0x728>)
 801b822:	f7e7 f9c9 	bl	8002bb8 <__aeabi_dsub>
 801b826:	0032      	movs	r2, r6
 801b828:	003b      	movs	r3, r7
 801b82a:	0004      	movs	r4, r0
 801b82c:	000d      	movs	r5, r1
 801b82e:	f7e4 fe4f 	bl	80004d0 <__aeabi_dcmpgt>
 801b832:	2800      	cmp	r0, #0
 801b834:	d000      	beq.n	801b838 <_dtoa_r+0x460>
 801b836:	e29d      	b.n	801bd74 <_dtoa_r+0x99c>
 801b838:	2180      	movs	r1, #128	@ 0x80
 801b83a:	0609      	lsls	r1, r1, #24
 801b83c:	187b      	adds	r3, r7, r1
 801b83e:	0032      	movs	r2, r6
 801b840:	0020      	movs	r0, r4
 801b842:	0029      	movs	r1, r5
 801b844:	f7e4 fe30 	bl	80004a8 <__aeabi_dcmplt>
 801b848:	2800      	cmp	r0, #0
 801b84a:	d000      	beq.n	801b84e <_dtoa_r+0x476>
 801b84c:	e130      	b.n	801bab0 <_dtoa_r+0x6d8>
 801b84e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b850:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b852:	930a      	str	r3, [sp, #40]	@ 0x28
 801b854:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b856:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b858:	2b00      	cmp	r3, #0
 801b85a:	da00      	bge.n	801b85e <_dtoa_r+0x486>
 801b85c:	e177      	b.n	801bb4e <_dtoa_r+0x776>
 801b85e:	9a04      	ldr	r2, [sp, #16]
 801b860:	2a0e      	cmp	r2, #14
 801b862:	dd00      	ble.n	801b866 <_dtoa_r+0x48e>
 801b864:	e173      	b.n	801bb4e <_dtoa_r+0x776>
 801b866:	4ba0      	ldr	r3, [pc, #640]	@ (801bae8 <_dtoa_r+0x710>)
 801b868:	00d2      	lsls	r2, r2, #3
 801b86a:	189b      	adds	r3, r3, r2
 801b86c:	685c      	ldr	r4, [r3, #4]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	9306      	str	r3, [sp, #24]
 801b872:	9407      	str	r4, [sp, #28]
 801b874:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b876:	2b00      	cmp	r3, #0
 801b878:	da03      	bge.n	801b882 <_dtoa_r+0x4aa>
 801b87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	dc00      	bgt.n	801b882 <_dtoa_r+0x4aa>
 801b880:	e106      	b.n	801ba90 <_dtoa_r+0x6b8>
 801b882:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801b884:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b888:	9d08      	ldr	r5, [sp, #32]
 801b88a:	3b01      	subs	r3, #1
 801b88c:	195b      	adds	r3, r3, r5
 801b88e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b890:	9a06      	ldr	r2, [sp, #24]
 801b892:	9b07      	ldr	r3, [sp, #28]
 801b894:	0030      	movs	r0, r6
 801b896:	0039      	movs	r1, r7
 801b898:	f7e6 fa82 	bl	8001da0 <__aeabi_ddiv>
 801b89c:	f7e7 fd4a 	bl	8003334 <__aeabi_d2iz>
 801b8a0:	9009      	str	r0, [sp, #36]	@ 0x24
 801b8a2:	f7e7 fd83 	bl	80033ac <__aeabi_i2d>
 801b8a6:	9a06      	ldr	r2, [sp, #24]
 801b8a8:	9b07      	ldr	r3, [sp, #28]
 801b8aa:	f7e6 febd 	bl	8002628 <__aeabi_dmul>
 801b8ae:	0002      	movs	r2, r0
 801b8b0:	000b      	movs	r3, r1
 801b8b2:	0030      	movs	r0, r6
 801b8b4:	0039      	movs	r1, r7
 801b8b6:	f7e7 f97f 	bl	8002bb8 <__aeabi_dsub>
 801b8ba:	002b      	movs	r3, r5
 801b8bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8be:	3501      	adds	r5, #1
 801b8c0:	3230      	adds	r2, #48	@ 0x30
 801b8c2:	701a      	strb	r2, [r3, #0]
 801b8c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b8c6:	002c      	movs	r4, r5
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d000      	beq.n	801b8ce <_dtoa_r+0x4f6>
 801b8cc:	e131      	b.n	801bb32 <_dtoa_r+0x75a>
 801b8ce:	0002      	movs	r2, r0
 801b8d0:	000b      	movs	r3, r1
 801b8d2:	f7e5 ff01 	bl	80016d8 <__aeabi_dadd>
 801b8d6:	9a06      	ldr	r2, [sp, #24]
 801b8d8:	9b07      	ldr	r3, [sp, #28]
 801b8da:	0006      	movs	r6, r0
 801b8dc:	000f      	movs	r7, r1
 801b8de:	f7e4 fdf7 	bl	80004d0 <__aeabi_dcmpgt>
 801b8e2:	2800      	cmp	r0, #0
 801b8e4:	d000      	beq.n	801b8e8 <_dtoa_r+0x510>
 801b8e6:	e10f      	b.n	801bb08 <_dtoa_r+0x730>
 801b8e8:	9a06      	ldr	r2, [sp, #24]
 801b8ea:	9b07      	ldr	r3, [sp, #28]
 801b8ec:	0030      	movs	r0, r6
 801b8ee:	0039      	movs	r1, r7
 801b8f0:	f7e4 fdd4 	bl	800049c <__aeabi_dcmpeq>
 801b8f4:	2800      	cmp	r0, #0
 801b8f6:	d003      	beq.n	801b900 <_dtoa_r+0x528>
 801b8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8fa:	07dd      	lsls	r5, r3, #31
 801b8fc:	d500      	bpl.n	801b900 <_dtoa_r+0x528>
 801b8fe:	e103      	b.n	801bb08 <_dtoa_r+0x730>
 801b900:	9905      	ldr	r1, [sp, #20]
 801b902:	9803      	ldr	r0, [sp, #12]
 801b904:	f001 f812 	bl	801c92c <_Bfree>
 801b908:	2300      	movs	r3, #0
 801b90a:	7023      	strb	r3, [r4, #0]
 801b90c:	9b04      	ldr	r3, [sp, #16]
 801b90e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b910:	3301      	adds	r3, #1
 801b912:	6013      	str	r3, [r2, #0]
 801b914:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b916:	2b00      	cmp	r3, #0
 801b918:	d100      	bne.n	801b91c <_dtoa_r+0x544>
 801b91a:	e5a7      	b.n	801b46c <_dtoa_r+0x94>
 801b91c:	601c      	str	r4, [r3, #0]
 801b91e:	e5a5      	b.n	801b46c <_dtoa_r+0x94>
 801b920:	423d      	tst	r5, r7
 801b922:	d005      	beq.n	801b930 <_dtoa_r+0x558>
 801b924:	6832      	ldr	r2, [r6, #0]
 801b926:	6873      	ldr	r3, [r6, #4]
 801b928:	f7e6 fe7e 	bl	8002628 <__aeabi_dmul>
 801b92c:	003b      	movs	r3, r7
 801b92e:	3401      	adds	r4, #1
 801b930:	106d      	asrs	r5, r5, #1
 801b932:	3608      	adds	r6, #8
 801b934:	e736      	b.n	801b7a4 <_dtoa_r+0x3cc>
 801b936:	9b04      	ldr	r3, [sp, #16]
 801b938:	930c      	str	r3, [sp, #48]	@ 0x30
 801b93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b93c:	e75a      	b.n	801b7f4 <_dtoa_r+0x41c>
 801b93e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b940:	4b69      	ldr	r3, [pc, #420]	@ (801bae8 <_dtoa_r+0x710>)
 801b942:	3a01      	subs	r2, #1
 801b944:	00d2      	lsls	r2, r2, #3
 801b946:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b948:	189b      	adds	r3, r3, r2
 801b94a:	681a      	ldr	r2, [r3, #0]
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	2900      	cmp	r1, #0
 801b950:	d04c      	beq.n	801b9ec <_dtoa_r+0x614>
 801b952:	2000      	movs	r0, #0
 801b954:	496b      	ldr	r1, [pc, #428]	@ (801bb04 <_dtoa_r+0x72c>)
 801b956:	f7e6 fa23 	bl	8001da0 <__aeabi_ddiv>
 801b95a:	0032      	movs	r2, r6
 801b95c:	003b      	movs	r3, r7
 801b95e:	f7e7 f92b 	bl	8002bb8 <__aeabi_dsub>
 801b962:	9a08      	ldr	r2, [sp, #32]
 801b964:	0006      	movs	r6, r0
 801b966:	4694      	mov	ip, r2
 801b968:	000f      	movs	r7, r1
 801b96a:	9b08      	ldr	r3, [sp, #32]
 801b96c:	9316      	str	r3, [sp, #88]	@ 0x58
 801b96e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b970:	4463      	add	r3, ip
 801b972:	9311      	str	r3, [sp, #68]	@ 0x44
 801b974:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b976:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b978:	f7e7 fcdc 	bl	8003334 <__aeabi_d2iz>
 801b97c:	0005      	movs	r5, r0
 801b97e:	f7e7 fd15 	bl	80033ac <__aeabi_i2d>
 801b982:	0002      	movs	r2, r0
 801b984:	000b      	movs	r3, r1
 801b986:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b98a:	f7e7 f915 	bl	8002bb8 <__aeabi_dsub>
 801b98e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b990:	3530      	adds	r5, #48	@ 0x30
 801b992:	1c5c      	adds	r4, r3, #1
 801b994:	701d      	strb	r5, [r3, #0]
 801b996:	0032      	movs	r2, r6
 801b998:	003b      	movs	r3, r7
 801b99a:	900a      	str	r0, [sp, #40]	@ 0x28
 801b99c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b99e:	f7e4 fd83 	bl	80004a8 <__aeabi_dcmplt>
 801b9a2:	2800      	cmp	r0, #0
 801b9a4:	d16a      	bne.n	801ba7c <_dtoa_r+0x6a4>
 801b9a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b9a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b9aa:	2000      	movs	r0, #0
 801b9ac:	4950      	ldr	r1, [pc, #320]	@ (801baf0 <_dtoa_r+0x718>)
 801b9ae:	f7e7 f903 	bl	8002bb8 <__aeabi_dsub>
 801b9b2:	0032      	movs	r2, r6
 801b9b4:	003b      	movs	r3, r7
 801b9b6:	f7e4 fd77 	bl	80004a8 <__aeabi_dcmplt>
 801b9ba:	2800      	cmp	r0, #0
 801b9bc:	d000      	beq.n	801b9c0 <_dtoa_r+0x5e8>
 801b9be:	e0a5      	b.n	801bb0c <_dtoa_r+0x734>
 801b9c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b9c2:	42a3      	cmp	r3, r4
 801b9c4:	d100      	bne.n	801b9c8 <_dtoa_r+0x5f0>
 801b9c6:	e742      	b.n	801b84e <_dtoa_r+0x476>
 801b9c8:	2200      	movs	r2, #0
 801b9ca:	0030      	movs	r0, r6
 801b9cc:	0039      	movs	r1, r7
 801b9ce:	4b49      	ldr	r3, [pc, #292]	@ (801baf4 <_dtoa_r+0x71c>)
 801b9d0:	f7e6 fe2a 	bl	8002628 <__aeabi_dmul>
 801b9d4:	2200      	movs	r2, #0
 801b9d6:	0006      	movs	r6, r0
 801b9d8:	000f      	movs	r7, r1
 801b9da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b9dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b9de:	4b45      	ldr	r3, [pc, #276]	@ (801baf4 <_dtoa_r+0x71c>)
 801b9e0:	f7e6 fe22 	bl	8002628 <__aeabi_dmul>
 801b9e4:	9416      	str	r4, [sp, #88]	@ 0x58
 801b9e6:	900a      	str	r0, [sp, #40]	@ 0x28
 801b9e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b9ea:	e7c3      	b.n	801b974 <_dtoa_r+0x59c>
 801b9ec:	0030      	movs	r0, r6
 801b9ee:	0039      	movs	r1, r7
 801b9f0:	f7e6 fe1a 	bl	8002628 <__aeabi_dmul>
 801b9f4:	9d08      	ldr	r5, [sp, #32]
 801b9f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b9f8:	002b      	movs	r3, r5
 801b9fa:	4694      	mov	ip, r2
 801b9fc:	9016      	str	r0, [sp, #88]	@ 0x58
 801b9fe:	9117      	str	r1, [sp, #92]	@ 0x5c
 801ba00:	4463      	add	r3, ip
 801ba02:	9319      	str	r3, [sp, #100]	@ 0x64
 801ba04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ba08:	f7e7 fc94 	bl	8003334 <__aeabi_d2iz>
 801ba0c:	0004      	movs	r4, r0
 801ba0e:	f7e7 fccd 	bl	80033ac <__aeabi_i2d>
 801ba12:	000b      	movs	r3, r1
 801ba14:	0002      	movs	r2, r0
 801ba16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ba1a:	f7e7 f8cd 	bl	8002bb8 <__aeabi_dsub>
 801ba1e:	3430      	adds	r4, #48	@ 0x30
 801ba20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ba22:	702c      	strb	r4, [r5, #0]
 801ba24:	3501      	adds	r5, #1
 801ba26:	0006      	movs	r6, r0
 801ba28:	000f      	movs	r7, r1
 801ba2a:	42ab      	cmp	r3, r5
 801ba2c:	d129      	bne.n	801ba82 <_dtoa_r+0x6aa>
 801ba2e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801ba30:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ba32:	9b08      	ldr	r3, [sp, #32]
 801ba34:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ba36:	469c      	mov	ip, r3
 801ba38:	2200      	movs	r2, #0
 801ba3a:	4b32      	ldr	r3, [pc, #200]	@ (801bb04 <_dtoa_r+0x72c>)
 801ba3c:	4464      	add	r4, ip
 801ba3e:	f7e5 fe4b 	bl	80016d8 <__aeabi_dadd>
 801ba42:	0002      	movs	r2, r0
 801ba44:	000b      	movs	r3, r1
 801ba46:	0030      	movs	r0, r6
 801ba48:	0039      	movs	r1, r7
 801ba4a:	f7e4 fd41 	bl	80004d0 <__aeabi_dcmpgt>
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d15c      	bne.n	801bb0c <_dtoa_r+0x734>
 801ba52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ba54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ba56:	2000      	movs	r0, #0
 801ba58:	492a      	ldr	r1, [pc, #168]	@ (801bb04 <_dtoa_r+0x72c>)
 801ba5a:	f7e7 f8ad 	bl	8002bb8 <__aeabi_dsub>
 801ba5e:	0002      	movs	r2, r0
 801ba60:	000b      	movs	r3, r1
 801ba62:	0030      	movs	r0, r6
 801ba64:	0039      	movs	r1, r7
 801ba66:	f7e4 fd1f 	bl	80004a8 <__aeabi_dcmplt>
 801ba6a:	2800      	cmp	r0, #0
 801ba6c:	d100      	bne.n	801ba70 <_dtoa_r+0x698>
 801ba6e:	e6ee      	b.n	801b84e <_dtoa_r+0x476>
 801ba70:	0023      	movs	r3, r4
 801ba72:	3c01      	subs	r4, #1
 801ba74:	7822      	ldrb	r2, [r4, #0]
 801ba76:	2a30      	cmp	r2, #48	@ 0x30
 801ba78:	d0fa      	beq.n	801ba70 <_dtoa_r+0x698>
 801ba7a:	001c      	movs	r4, r3
 801ba7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba7e:	9304      	str	r3, [sp, #16]
 801ba80:	e73e      	b.n	801b900 <_dtoa_r+0x528>
 801ba82:	2200      	movs	r2, #0
 801ba84:	4b1b      	ldr	r3, [pc, #108]	@ (801baf4 <_dtoa_r+0x71c>)
 801ba86:	f7e6 fdcf 	bl	8002628 <__aeabi_dmul>
 801ba8a:	900a      	str	r0, [sp, #40]	@ 0x28
 801ba8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ba8e:	e7b9      	b.n	801ba04 <_dtoa_r+0x62c>
 801ba90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d10c      	bne.n	801bab0 <_dtoa_r+0x6d8>
 801ba96:	9806      	ldr	r0, [sp, #24]
 801ba98:	9907      	ldr	r1, [sp, #28]
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	4b18      	ldr	r3, [pc, #96]	@ (801bb00 <_dtoa_r+0x728>)
 801ba9e:	f7e6 fdc3 	bl	8002628 <__aeabi_dmul>
 801baa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801baa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baa6:	f7e4 fd1d 	bl	80004e4 <__aeabi_dcmpge>
 801baaa:	2800      	cmp	r0, #0
 801baac:	d100      	bne.n	801bab0 <_dtoa_r+0x6d8>
 801baae:	e164      	b.n	801bd7a <_dtoa_r+0x9a2>
 801bab0:	2600      	movs	r6, #0
 801bab2:	0037      	movs	r7, r6
 801bab4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bab6:	9c08      	ldr	r4, [sp, #32]
 801bab8:	43db      	mvns	r3, r3
 801baba:	930c      	str	r3, [sp, #48]	@ 0x30
 801babc:	2300      	movs	r3, #0
 801babe:	9304      	str	r3, [sp, #16]
 801bac0:	0031      	movs	r1, r6
 801bac2:	9803      	ldr	r0, [sp, #12]
 801bac4:	f000 ff32 	bl	801c92c <_Bfree>
 801bac8:	2f00      	cmp	r7, #0
 801baca:	d0d7      	beq.n	801ba7c <_dtoa_r+0x6a4>
 801bacc:	9b04      	ldr	r3, [sp, #16]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d005      	beq.n	801bade <_dtoa_r+0x706>
 801bad2:	42bb      	cmp	r3, r7
 801bad4:	d003      	beq.n	801bade <_dtoa_r+0x706>
 801bad6:	0019      	movs	r1, r3
 801bad8:	9803      	ldr	r0, [sp, #12]
 801bada:	f000 ff27 	bl	801c92c <_Bfree>
 801bade:	0039      	movs	r1, r7
 801bae0:	9803      	ldr	r0, [sp, #12]
 801bae2:	f000 ff23 	bl	801c92c <_Bfree>
 801bae6:	e7c9      	b.n	801ba7c <_dtoa_r+0x6a4>
 801bae8:	0801f988 	.word	0x0801f988
 801baec:	0801f960 	.word	0x0801f960
 801baf0:	3ff00000 	.word	0x3ff00000
 801baf4:	40240000 	.word	0x40240000
 801baf8:	401c0000 	.word	0x401c0000
 801bafc:	fcc00000 	.word	0xfcc00000
 801bb00:	40140000 	.word	0x40140000
 801bb04:	3fe00000 	.word	0x3fe00000
 801bb08:	9b04      	ldr	r3, [sp, #16]
 801bb0a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bb0c:	0023      	movs	r3, r4
 801bb0e:	001c      	movs	r4, r3
 801bb10:	3b01      	subs	r3, #1
 801bb12:	781a      	ldrb	r2, [r3, #0]
 801bb14:	2a39      	cmp	r2, #57	@ 0x39
 801bb16:	d108      	bne.n	801bb2a <_dtoa_r+0x752>
 801bb18:	9a08      	ldr	r2, [sp, #32]
 801bb1a:	429a      	cmp	r2, r3
 801bb1c:	d1f7      	bne.n	801bb0e <_dtoa_r+0x736>
 801bb1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bb20:	9908      	ldr	r1, [sp, #32]
 801bb22:	3201      	adds	r2, #1
 801bb24:	920c      	str	r2, [sp, #48]	@ 0x30
 801bb26:	2230      	movs	r2, #48	@ 0x30
 801bb28:	700a      	strb	r2, [r1, #0]
 801bb2a:	781a      	ldrb	r2, [r3, #0]
 801bb2c:	3201      	adds	r2, #1
 801bb2e:	701a      	strb	r2, [r3, #0]
 801bb30:	e7a4      	b.n	801ba7c <_dtoa_r+0x6a4>
 801bb32:	2200      	movs	r2, #0
 801bb34:	4bc6      	ldr	r3, [pc, #792]	@ (801be50 <_dtoa_r+0xa78>)
 801bb36:	f7e6 fd77 	bl	8002628 <__aeabi_dmul>
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	2300      	movs	r3, #0
 801bb3e:	0006      	movs	r6, r0
 801bb40:	000f      	movs	r7, r1
 801bb42:	f7e4 fcab 	bl	800049c <__aeabi_dcmpeq>
 801bb46:	2800      	cmp	r0, #0
 801bb48:	d100      	bne.n	801bb4c <_dtoa_r+0x774>
 801bb4a:	e6a1      	b.n	801b890 <_dtoa_r+0x4b8>
 801bb4c:	e6d8      	b.n	801b900 <_dtoa_r+0x528>
 801bb4e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801bb50:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801bb52:	9c06      	ldr	r4, [sp, #24]
 801bb54:	2f00      	cmp	r7, #0
 801bb56:	d014      	beq.n	801bb82 <_dtoa_r+0x7aa>
 801bb58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801bb5a:	2a01      	cmp	r2, #1
 801bb5c:	dd00      	ble.n	801bb60 <_dtoa_r+0x788>
 801bb5e:	e0c8      	b.n	801bcf2 <_dtoa_r+0x91a>
 801bb60:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bb62:	2a00      	cmp	r2, #0
 801bb64:	d100      	bne.n	801bb68 <_dtoa_r+0x790>
 801bb66:	e0be      	b.n	801bce6 <_dtoa_r+0x90e>
 801bb68:	4aba      	ldr	r2, [pc, #744]	@ (801be54 <_dtoa_r+0xa7c>)
 801bb6a:	189b      	adds	r3, r3, r2
 801bb6c:	9a06      	ldr	r2, [sp, #24]
 801bb6e:	2101      	movs	r1, #1
 801bb70:	18d2      	adds	r2, r2, r3
 801bb72:	9206      	str	r2, [sp, #24]
 801bb74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bb76:	9803      	ldr	r0, [sp, #12]
 801bb78:	18d3      	adds	r3, r2, r3
 801bb7a:	930d      	str	r3, [sp, #52]	@ 0x34
 801bb7c:	f000 ffda 	bl	801cb34 <__i2b>
 801bb80:	0007      	movs	r7, r0
 801bb82:	2c00      	cmp	r4, #0
 801bb84:	d00e      	beq.n	801bba4 <_dtoa_r+0x7cc>
 801bb86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	dd0b      	ble.n	801bba4 <_dtoa_r+0x7cc>
 801bb8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bb8e:	0023      	movs	r3, r4
 801bb90:	4294      	cmp	r4, r2
 801bb92:	dd00      	ble.n	801bb96 <_dtoa_r+0x7be>
 801bb94:	0013      	movs	r3, r2
 801bb96:	9a06      	ldr	r2, [sp, #24]
 801bb98:	1ae4      	subs	r4, r4, r3
 801bb9a:	1ad2      	subs	r2, r2, r3
 801bb9c:	9206      	str	r2, [sp, #24]
 801bb9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bba0:	1ad3      	subs	r3, r2, r3
 801bba2:	930d      	str	r3, [sp, #52]	@ 0x34
 801bba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d01f      	beq.n	801bbea <_dtoa_r+0x812>
 801bbaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d100      	bne.n	801bbb2 <_dtoa_r+0x7da>
 801bbb0:	e0b5      	b.n	801bd1e <_dtoa_r+0x946>
 801bbb2:	2d00      	cmp	r5, #0
 801bbb4:	d010      	beq.n	801bbd8 <_dtoa_r+0x800>
 801bbb6:	0039      	movs	r1, r7
 801bbb8:	002a      	movs	r2, r5
 801bbba:	9803      	ldr	r0, [sp, #12]
 801bbbc:	f001 f884 	bl	801ccc8 <__pow5mult>
 801bbc0:	9a05      	ldr	r2, [sp, #20]
 801bbc2:	0001      	movs	r1, r0
 801bbc4:	0007      	movs	r7, r0
 801bbc6:	9803      	ldr	r0, [sp, #12]
 801bbc8:	f000 ffcc 	bl	801cb64 <__multiply>
 801bbcc:	0006      	movs	r6, r0
 801bbce:	9905      	ldr	r1, [sp, #20]
 801bbd0:	9803      	ldr	r0, [sp, #12]
 801bbd2:	f000 feab 	bl	801c92c <_Bfree>
 801bbd6:	9605      	str	r6, [sp, #20]
 801bbd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bbda:	1b5a      	subs	r2, r3, r5
 801bbdc:	42ab      	cmp	r3, r5
 801bbde:	d004      	beq.n	801bbea <_dtoa_r+0x812>
 801bbe0:	9905      	ldr	r1, [sp, #20]
 801bbe2:	9803      	ldr	r0, [sp, #12]
 801bbe4:	f001 f870 	bl	801ccc8 <__pow5mult>
 801bbe8:	9005      	str	r0, [sp, #20]
 801bbea:	2101      	movs	r1, #1
 801bbec:	9803      	ldr	r0, [sp, #12]
 801bbee:	f000 ffa1 	bl	801cb34 <__i2b>
 801bbf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bbf4:	0006      	movs	r6, r0
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d100      	bne.n	801bbfc <_dtoa_r+0x824>
 801bbfa:	e1bc      	b.n	801bf76 <_dtoa_r+0xb9e>
 801bbfc:	001a      	movs	r2, r3
 801bbfe:	0001      	movs	r1, r0
 801bc00:	9803      	ldr	r0, [sp, #12]
 801bc02:	f001 f861 	bl	801ccc8 <__pow5mult>
 801bc06:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bc08:	0006      	movs	r6, r0
 801bc0a:	2500      	movs	r5, #0
 801bc0c:	2b01      	cmp	r3, #1
 801bc0e:	dc16      	bgt.n	801bc3e <_dtoa_r+0x866>
 801bc10:	2500      	movs	r5, #0
 801bc12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bc14:	42ab      	cmp	r3, r5
 801bc16:	d10e      	bne.n	801bc36 <_dtoa_r+0x85e>
 801bc18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bc1a:	031b      	lsls	r3, r3, #12
 801bc1c:	42ab      	cmp	r3, r5
 801bc1e:	d10a      	bne.n	801bc36 <_dtoa_r+0x85e>
 801bc20:	4b8d      	ldr	r3, [pc, #564]	@ (801be58 <_dtoa_r+0xa80>)
 801bc22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bc24:	4213      	tst	r3, r2
 801bc26:	d006      	beq.n	801bc36 <_dtoa_r+0x85e>
 801bc28:	9b06      	ldr	r3, [sp, #24]
 801bc2a:	3501      	adds	r5, #1
 801bc2c:	3301      	adds	r3, #1
 801bc2e:	9306      	str	r3, [sp, #24]
 801bc30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc32:	3301      	adds	r3, #1
 801bc34:	930d      	str	r3, [sp, #52]	@ 0x34
 801bc36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc38:	2001      	movs	r0, #1
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d008      	beq.n	801bc50 <_dtoa_r+0x878>
 801bc3e:	6933      	ldr	r3, [r6, #16]
 801bc40:	3303      	adds	r3, #3
 801bc42:	009b      	lsls	r3, r3, #2
 801bc44:	18f3      	adds	r3, r6, r3
 801bc46:	6858      	ldr	r0, [r3, #4]
 801bc48:	f000 ff24 	bl	801ca94 <__hi0bits>
 801bc4c:	2320      	movs	r3, #32
 801bc4e:	1a18      	subs	r0, r3, r0
 801bc50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc52:	1818      	adds	r0, r3, r0
 801bc54:	0002      	movs	r2, r0
 801bc56:	231f      	movs	r3, #31
 801bc58:	401a      	ands	r2, r3
 801bc5a:	4218      	tst	r0, r3
 801bc5c:	d065      	beq.n	801bd2a <_dtoa_r+0x952>
 801bc5e:	3301      	adds	r3, #1
 801bc60:	1a9b      	subs	r3, r3, r2
 801bc62:	2b04      	cmp	r3, #4
 801bc64:	dd5d      	ble.n	801bd22 <_dtoa_r+0x94a>
 801bc66:	231c      	movs	r3, #28
 801bc68:	1a9b      	subs	r3, r3, r2
 801bc6a:	9a06      	ldr	r2, [sp, #24]
 801bc6c:	18e4      	adds	r4, r4, r3
 801bc6e:	18d2      	adds	r2, r2, r3
 801bc70:	9206      	str	r2, [sp, #24]
 801bc72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bc74:	18d3      	adds	r3, r2, r3
 801bc76:	930d      	str	r3, [sp, #52]	@ 0x34
 801bc78:	9b06      	ldr	r3, [sp, #24]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	dd05      	ble.n	801bc8a <_dtoa_r+0x8b2>
 801bc7e:	001a      	movs	r2, r3
 801bc80:	9905      	ldr	r1, [sp, #20]
 801bc82:	9803      	ldr	r0, [sp, #12]
 801bc84:	f001 f87c 	bl	801cd80 <__lshift>
 801bc88:	9005      	str	r0, [sp, #20]
 801bc8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	dd05      	ble.n	801bc9c <_dtoa_r+0x8c4>
 801bc90:	0031      	movs	r1, r6
 801bc92:	001a      	movs	r2, r3
 801bc94:	9803      	ldr	r0, [sp, #12]
 801bc96:	f001 f873 	bl	801cd80 <__lshift>
 801bc9a:	0006      	movs	r6, r0
 801bc9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d045      	beq.n	801bd2e <_dtoa_r+0x956>
 801bca2:	0031      	movs	r1, r6
 801bca4:	9805      	ldr	r0, [sp, #20]
 801bca6:	f001 f8d7 	bl	801ce58 <__mcmp>
 801bcaa:	2800      	cmp	r0, #0
 801bcac:	da3f      	bge.n	801bd2e <_dtoa_r+0x956>
 801bcae:	9b04      	ldr	r3, [sp, #16]
 801bcb0:	220a      	movs	r2, #10
 801bcb2:	3b01      	subs	r3, #1
 801bcb4:	930c      	str	r3, [sp, #48]	@ 0x30
 801bcb6:	9905      	ldr	r1, [sp, #20]
 801bcb8:	2300      	movs	r3, #0
 801bcba:	9803      	ldr	r0, [sp, #12]
 801bcbc:	f000 fe5a 	bl	801c974 <__multadd>
 801bcc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bcc2:	9005      	str	r0, [sp, #20]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d100      	bne.n	801bcca <_dtoa_r+0x8f2>
 801bcc8:	e15c      	b.n	801bf84 <_dtoa_r+0xbac>
 801bcca:	2300      	movs	r3, #0
 801bccc:	0039      	movs	r1, r7
 801bcce:	220a      	movs	r2, #10
 801bcd0:	9803      	ldr	r0, [sp, #12]
 801bcd2:	f000 fe4f 	bl	801c974 <__multadd>
 801bcd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bcd8:	0007      	movs	r7, r0
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	dc55      	bgt.n	801bd8a <_dtoa_r+0x9b2>
 801bcde:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bce0:	2b02      	cmp	r3, #2
 801bce2:	dc2d      	bgt.n	801bd40 <_dtoa_r+0x968>
 801bce4:	e051      	b.n	801bd8a <_dtoa_r+0x9b2>
 801bce6:	2336      	movs	r3, #54	@ 0x36
 801bce8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bcea:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801bcec:	9c06      	ldr	r4, [sp, #24]
 801bcee:	1a9b      	subs	r3, r3, r2
 801bcf0:	e73c      	b.n	801bb6c <_dtoa_r+0x794>
 801bcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcf4:	1e5d      	subs	r5, r3, #1
 801bcf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bcf8:	42ab      	cmp	r3, r5
 801bcfa:	db08      	blt.n	801bd0e <_dtoa_r+0x936>
 801bcfc:	1b5d      	subs	r5, r3, r5
 801bcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd00:	9c06      	ldr	r4, [sp, #24]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	db00      	blt.n	801bd08 <_dtoa_r+0x930>
 801bd06:	e731      	b.n	801bb6c <_dtoa_r+0x794>
 801bd08:	1ae4      	subs	r4, r4, r3
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	e72e      	b.n	801bb6c <_dtoa_r+0x794>
 801bd0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd10:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bd12:	1aeb      	subs	r3, r5, r3
 801bd14:	18d3      	adds	r3, r2, r3
 801bd16:	950f      	str	r5, [sp, #60]	@ 0x3c
 801bd18:	9314      	str	r3, [sp, #80]	@ 0x50
 801bd1a:	2500      	movs	r5, #0
 801bd1c:	e7ef      	b.n	801bcfe <_dtoa_r+0x926>
 801bd1e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bd20:	e75e      	b.n	801bbe0 <_dtoa_r+0x808>
 801bd22:	2b04      	cmp	r3, #4
 801bd24:	d0a8      	beq.n	801bc78 <_dtoa_r+0x8a0>
 801bd26:	331c      	adds	r3, #28
 801bd28:	e79f      	b.n	801bc6a <_dtoa_r+0x892>
 801bd2a:	0013      	movs	r3, r2
 801bd2c:	e7fb      	b.n	801bd26 <_dtoa_r+0x94e>
 801bd2e:	9b04      	ldr	r3, [sp, #16]
 801bd30:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd34:	930e      	str	r3, [sp, #56]	@ 0x38
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	dc23      	bgt.n	801bd82 <_dtoa_r+0x9aa>
 801bd3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bd3c:	2b02      	cmp	r3, #2
 801bd3e:	dd20      	ble.n	801bd82 <_dtoa_r+0x9aa>
 801bd40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d000      	beq.n	801bd48 <_dtoa_r+0x970>
 801bd46:	e6b5      	b.n	801bab4 <_dtoa_r+0x6dc>
 801bd48:	0031      	movs	r1, r6
 801bd4a:	2205      	movs	r2, #5
 801bd4c:	9803      	ldr	r0, [sp, #12]
 801bd4e:	f000 fe11 	bl	801c974 <__multadd>
 801bd52:	0006      	movs	r6, r0
 801bd54:	0001      	movs	r1, r0
 801bd56:	9805      	ldr	r0, [sp, #20]
 801bd58:	f001 f87e 	bl	801ce58 <__mcmp>
 801bd5c:	2800      	cmp	r0, #0
 801bd5e:	dc00      	bgt.n	801bd62 <_dtoa_r+0x98a>
 801bd60:	e6a8      	b.n	801bab4 <_dtoa_r+0x6dc>
 801bd62:	9b08      	ldr	r3, [sp, #32]
 801bd64:	9a08      	ldr	r2, [sp, #32]
 801bd66:	1c5c      	adds	r4, r3, #1
 801bd68:	2331      	movs	r3, #49	@ 0x31
 801bd6a:	7013      	strb	r3, [r2, #0]
 801bd6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bd6e:	3301      	adds	r3, #1
 801bd70:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd72:	e6a3      	b.n	801babc <_dtoa_r+0x6e4>
 801bd74:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801bd76:	0037      	movs	r7, r6
 801bd78:	e7f3      	b.n	801bd62 <_dtoa_r+0x98a>
 801bd7a:	9b04      	ldr	r3, [sp, #16]
 801bd7c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801bd7e:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd80:	e7f9      	b.n	801bd76 <_dtoa_r+0x99e>
 801bd82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d100      	bne.n	801bd8a <_dtoa_r+0x9b2>
 801bd88:	e100      	b.n	801bf8c <_dtoa_r+0xbb4>
 801bd8a:	2c00      	cmp	r4, #0
 801bd8c:	dd05      	ble.n	801bd9a <_dtoa_r+0x9c2>
 801bd8e:	0039      	movs	r1, r7
 801bd90:	0022      	movs	r2, r4
 801bd92:	9803      	ldr	r0, [sp, #12]
 801bd94:	f000 fff4 	bl	801cd80 <__lshift>
 801bd98:	0007      	movs	r7, r0
 801bd9a:	0038      	movs	r0, r7
 801bd9c:	2d00      	cmp	r5, #0
 801bd9e:	d018      	beq.n	801bdd2 <_dtoa_r+0x9fa>
 801bda0:	6879      	ldr	r1, [r7, #4]
 801bda2:	9803      	ldr	r0, [sp, #12]
 801bda4:	f000 fd7e 	bl	801c8a4 <_Balloc>
 801bda8:	1e04      	subs	r4, r0, #0
 801bdaa:	d105      	bne.n	801bdb8 <_dtoa_r+0x9e0>
 801bdac:	0022      	movs	r2, r4
 801bdae:	4b2b      	ldr	r3, [pc, #172]	@ (801be5c <_dtoa_r+0xa84>)
 801bdb0:	482b      	ldr	r0, [pc, #172]	@ (801be60 <_dtoa_r+0xa88>)
 801bdb2:	492c      	ldr	r1, [pc, #176]	@ (801be64 <_dtoa_r+0xa8c>)
 801bdb4:	f7ff fb25 	bl	801b402 <_dtoa_r+0x2a>
 801bdb8:	0039      	movs	r1, r7
 801bdba:	693a      	ldr	r2, [r7, #16]
 801bdbc:	310c      	adds	r1, #12
 801bdbe:	3202      	adds	r2, #2
 801bdc0:	0092      	lsls	r2, r2, #2
 801bdc2:	300c      	adds	r0, #12
 801bdc4:	f7ff fa6a 	bl	801b29c <memcpy>
 801bdc8:	2201      	movs	r2, #1
 801bdca:	0021      	movs	r1, r4
 801bdcc:	9803      	ldr	r0, [sp, #12]
 801bdce:	f000 ffd7 	bl	801cd80 <__lshift>
 801bdd2:	9b08      	ldr	r3, [sp, #32]
 801bdd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bdd6:	9306      	str	r3, [sp, #24]
 801bdd8:	3b01      	subs	r3, #1
 801bdda:	189b      	adds	r3, r3, r2
 801bddc:	2201      	movs	r2, #1
 801bdde:	9704      	str	r7, [sp, #16]
 801bde0:	0007      	movs	r7, r0
 801bde2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bde4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bde6:	4013      	ands	r3, r2
 801bde8:	930e      	str	r3, [sp, #56]	@ 0x38
 801bdea:	0031      	movs	r1, r6
 801bdec:	9805      	ldr	r0, [sp, #20]
 801bdee:	f7ff fa65 	bl	801b2bc <quorem>
 801bdf2:	9904      	ldr	r1, [sp, #16]
 801bdf4:	0005      	movs	r5, r0
 801bdf6:	900a      	str	r0, [sp, #40]	@ 0x28
 801bdf8:	9805      	ldr	r0, [sp, #20]
 801bdfa:	f001 f82d 	bl	801ce58 <__mcmp>
 801bdfe:	003a      	movs	r2, r7
 801be00:	900d      	str	r0, [sp, #52]	@ 0x34
 801be02:	0031      	movs	r1, r6
 801be04:	9803      	ldr	r0, [sp, #12]
 801be06:	f001 f843 	bl	801ce90 <__mdiff>
 801be0a:	2201      	movs	r2, #1
 801be0c:	68c3      	ldr	r3, [r0, #12]
 801be0e:	0004      	movs	r4, r0
 801be10:	3530      	adds	r5, #48	@ 0x30
 801be12:	9209      	str	r2, [sp, #36]	@ 0x24
 801be14:	2b00      	cmp	r3, #0
 801be16:	d104      	bne.n	801be22 <_dtoa_r+0xa4a>
 801be18:	0001      	movs	r1, r0
 801be1a:	9805      	ldr	r0, [sp, #20]
 801be1c:	f001 f81c 	bl	801ce58 <__mcmp>
 801be20:	9009      	str	r0, [sp, #36]	@ 0x24
 801be22:	0021      	movs	r1, r4
 801be24:	9803      	ldr	r0, [sp, #12]
 801be26:	f000 fd81 	bl	801c92c <_Bfree>
 801be2a:	9b06      	ldr	r3, [sp, #24]
 801be2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801be2e:	1c5c      	adds	r4, r3, #1
 801be30:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801be32:	4313      	orrs	r3, r2
 801be34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be36:	4313      	orrs	r3, r2
 801be38:	d116      	bne.n	801be68 <_dtoa_r+0xa90>
 801be3a:	2d39      	cmp	r5, #57	@ 0x39
 801be3c:	d02f      	beq.n	801be9e <_dtoa_r+0xac6>
 801be3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be40:	2b00      	cmp	r3, #0
 801be42:	dd01      	ble.n	801be48 <_dtoa_r+0xa70>
 801be44:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801be46:	3531      	adds	r5, #49	@ 0x31
 801be48:	9b06      	ldr	r3, [sp, #24]
 801be4a:	701d      	strb	r5, [r3, #0]
 801be4c:	e638      	b.n	801bac0 <_dtoa_r+0x6e8>
 801be4e:	46c0      	nop			@ (mov r8, r8)
 801be50:	40240000 	.word	0x40240000
 801be54:	00000433 	.word	0x00000433
 801be58:	7ff00000 	.word	0x7ff00000
 801be5c:	0801f888 	.word	0x0801f888
 801be60:	0801f830 	.word	0x0801f830
 801be64:	000002ef 	.word	0x000002ef
 801be68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	db04      	blt.n	801be78 <_dtoa_r+0xaa0>
 801be6e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801be70:	4313      	orrs	r3, r2
 801be72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be74:	4313      	orrs	r3, r2
 801be76:	d11e      	bne.n	801beb6 <_dtoa_r+0xade>
 801be78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	dde4      	ble.n	801be48 <_dtoa_r+0xa70>
 801be7e:	9905      	ldr	r1, [sp, #20]
 801be80:	2201      	movs	r2, #1
 801be82:	9803      	ldr	r0, [sp, #12]
 801be84:	f000 ff7c 	bl	801cd80 <__lshift>
 801be88:	0031      	movs	r1, r6
 801be8a:	9005      	str	r0, [sp, #20]
 801be8c:	f000 ffe4 	bl	801ce58 <__mcmp>
 801be90:	2800      	cmp	r0, #0
 801be92:	dc02      	bgt.n	801be9a <_dtoa_r+0xac2>
 801be94:	d1d8      	bne.n	801be48 <_dtoa_r+0xa70>
 801be96:	07eb      	lsls	r3, r5, #31
 801be98:	d5d6      	bpl.n	801be48 <_dtoa_r+0xa70>
 801be9a:	2d39      	cmp	r5, #57	@ 0x39
 801be9c:	d1d2      	bne.n	801be44 <_dtoa_r+0xa6c>
 801be9e:	2339      	movs	r3, #57	@ 0x39
 801bea0:	9a06      	ldr	r2, [sp, #24]
 801bea2:	7013      	strb	r3, [r2, #0]
 801bea4:	0023      	movs	r3, r4
 801bea6:	001c      	movs	r4, r3
 801bea8:	3b01      	subs	r3, #1
 801beaa:	781a      	ldrb	r2, [r3, #0]
 801beac:	2a39      	cmp	r2, #57	@ 0x39
 801beae:	d04f      	beq.n	801bf50 <_dtoa_r+0xb78>
 801beb0:	3201      	adds	r2, #1
 801beb2:	701a      	strb	r2, [r3, #0]
 801beb4:	e604      	b.n	801bac0 <_dtoa_r+0x6e8>
 801beb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801beb8:	2b00      	cmp	r3, #0
 801beba:	dd03      	ble.n	801bec4 <_dtoa_r+0xaec>
 801bebc:	2d39      	cmp	r5, #57	@ 0x39
 801bebe:	d0ee      	beq.n	801be9e <_dtoa_r+0xac6>
 801bec0:	3501      	adds	r5, #1
 801bec2:	e7c1      	b.n	801be48 <_dtoa_r+0xa70>
 801bec4:	9b06      	ldr	r3, [sp, #24]
 801bec6:	9a06      	ldr	r2, [sp, #24]
 801bec8:	701d      	strb	r5, [r3, #0]
 801beca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801becc:	4293      	cmp	r3, r2
 801bece:	d02a      	beq.n	801bf26 <_dtoa_r+0xb4e>
 801bed0:	2300      	movs	r3, #0
 801bed2:	220a      	movs	r2, #10
 801bed4:	9905      	ldr	r1, [sp, #20]
 801bed6:	9803      	ldr	r0, [sp, #12]
 801bed8:	f000 fd4c 	bl	801c974 <__multadd>
 801bedc:	9b04      	ldr	r3, [sp, #16]
 801bede:	9005      	str	r0, [sp, #20]
 801bee0:	42bb      	cmp	r3, r7
 801bee2:	d109      	bne.n	801bef8 <_dtoa_r+0xb20>
 801bee4:	2300      	movs	r3, #0
 801bee6:	220a      	movs	r2, #10
 801bee8:	9904      	ldr	r1, [sp, #16]
 801beea:	9803      	ldr	r0, [sp, #12]
 801beec:	f000 fd42 	bl	801c974 <__multadd>
 801bef0:	9004      	str	r0, [sp, #16]
 801bef2:	0007      	movs	r7, r0
 801bef4:	9406      	str	r4, [sp, #24]
 801bef6:	e778      	b.n	801bdea <_dtoa_r+0xa12>
 801bef8:	9904      	ldr	r1, [sp, #16]
 801befa:	2300      	movs	r3, #0
 801befc:	220a      	movs	r2, #10
 801befe:	9803      	ldr	r0, [sp, #12]
 801bf00:	f000 fd38 	bl	801c974 <__multadd>
 801bf04:	2300      	movs	r3, #0
 801bf06:	9004      	str	r0, [sp, #16]
 801bf08:	220a      	movs	r2, #10
 801bf0a:	0039      	movs	r1, r7
 801bf0c:	9803      	ldr	r0, [sp, #12]
 801bf0e:	f000 fd31 	bl	801c974 <__multadd>
 801bf12:	e7ee      	b.n	801bef2 <_dtoa_r+0xb1a>
 801bf14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf16:	2401      	movs	r4, #1
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	dd00      	ble.n	801bf1e <_dtoa_r+0xb46>
 801bf1c:	001c      	movs	r4, r3
 801bf1e:	9b08      	ldr	r3, [sp, #32]
 801bf20:	191c      	adds	r4, r3, r4
 801bf22:	2300      	movs	r3, #0
 801bf24:	9304      	str	r3, [sp, #16]
 801bf26:	9905      	ldr	r1, [sp, #20]
 801bf28:	2201      	movs	r2, #1
 801bf2a:	9803      	ldr	r0, [sp, #12]
 801bf2c:	f000 ff28 	bl	801cd80 <__lshift>
 801bf30:	0031      	movs	r1, r6
 801bf32:	9005      	str	r0, [sp, #20]
 801bf34:	f000 ff90 	bl	801ce58 <__mcmp>
 801bf38:	2800      	cmp	r0, #0
 801bf3a:	dcb3      	bgt.n	801bea4 <_dtoa_r+0xacc>
 801bf3c:	d101      	bne.n	801bf42 <_dtoa_r+0xb6a>
 801bf3e:	07ed      	lsls	r5, r5, #31
 801bf40:	d4b0      	bmi.n	801bea4 <_dtoa_r+0xacc>
 801bf42:	0023      	movs	r3, r4
 801bf44:	001c      	movs	r4, r3
 801bf46:	3b01      	subs	r3, #1
 801bf48:	781a      	ldrb	r2, [r3, #0]
 801bf4a:	2a30      	cmp	r2, #48	@ 0x30
 801bf4c:	d0fa      	beq.n	801bf44 <_dtoa_r+0xb6c>
 801bf4e:	e5b7      	b.n	801bac0 <_dtoa_r+0x6e8>
 801bf50:	9a08      	ldr	r2, [sp, #32]
 801bf52:	429a      	cmp	r2, r3
 801bf54:	d1a7      	bne.n	801bea6 <_dtoa_r+0xace>
 801bf56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf58:	3301      	adds	r3, #1
 801bf5a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bf5c:	2331      	movs	r3, #49	@ 0x31
 801bf5e:	7013      	strb	r3, [r2, #0]
 801bf60:	e5ae      	b.n	801bac0 <_dtoa_r+0x6e8>
 801bf62:	4b15      	ldr	r3, [pc, #84]	@ (801bfb8 <_dtoa_r+0xbe0>)
 801bf64:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801bf66:	9308      	str	r3, [sp, #32]
 801bf68:	4b14      	ldr	r3, [pc, #80]	@ (801bfbc <_dtoa_r+0xbe4>)
 801bf6a:	2a00      	cmp	r2, #0
 801bf6c:	d001      	beq.n	801bf72 <_dtoa_r+0xb9a>
 801bf6e:	f7ff fa7b 	bl	801b468 <_dtoa_r+0x90>
 801bf72:	f7ff fa7b 	bl	801b46c <_dtoa_r+0x94>
 801bf76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bf78:	2b01      	cmp	r3, #1
 801bf7a:	dc00      	bgt.n	801bf7e <_dtoa_r+0xba6>
 801bf7c:	e648      	b.n	801bc10 <_dtoa_r+0x838>
 801bf7e:	2001      	movs	r0, #1
 801bf80:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801bf82:	e665      	b.n	801bc50 <_dtoa_r+0x878>
 801bf84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	dc00      	bgt.n	801bf8c <_dtoa_r+0xbb4>
 801bf8a:	e6d6      	b.n	801bd3a <_dtoa_r+0x962>
 801bf8c:	2400      	movs	r4, #0
 801bf8e:	0031      	movs	r1, r6
 801bf90:	9805      	ldr	r0, [sp, #20]
 801bf92:	f7ff f993 	bl	801b2bc <quorem>
 801bf96:	9b08      	ldr	r3, [sp, #32]
 801bf98:	3030      	adds	r0, #48	@ 0x30
 801bf9a:	5518      	strb	r0, [r3, r4]
 801bf9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf9e:	3401      	adds	r4, #1
 801bfa0:	0005      	movs	r5, r0
 801bfa2:	429c      	cmp	r4, r3
 801bfa4:	dab6      	bge.n	801bf14 <_dtoa_r+0xb3c>
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	220a      	movs	r2, #10
 801bfaa:	9905      	ldr	r1, [sp, #20]
 801bfac:	9803      	ldr	r0, [sp, #12]
 801bfae:	f000 fce1 	bl	801c974 <__multadd>
 801bfb2:	9005      	str	r0, [sp, #20]
 801bfb4:	e7eb      	b.n	801bf8e <_dtoa_r+0xbb6>
 801bfb6:	46c0      	nop			@ (mov r8, r8)
 801bfb8:	0801f80c 	.word	0x0801f80c
 801bfbc:	0801f814 	.word	0x0801f814

0801bfc0 <_free_r>:
 801bfc0:	b570      	push	{r4, r5, r6, lr}
 801bfc2:	0005      	movs	r5, r0
 801bfc4:	1e0c      	subs	r4, r1, #0
 801bfc6:	d010      	beq.n	801bfea <_free_r+0x2a>
 801bfc8:	3c04      	subs	r4, #4
 801bfca:	6823      	ldr	r3, [r4, #0]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	da00      	bge.n	801bfd2 <_free_r+0x12>
 801bfd0:	18e4      	adds	r4, r4, r3
 801bfd2:	0028      	movs	r0, r5
 801bfd4:	f000 fc56 	bl	801c884 <__malloc_lock>
 801bfd8:	4a1d      	ldr	r2, [pc, #116]	@ (801c050 <_free_r+0x90>)
 801bfda:	6813      	ldr	r3, [r2, #0]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d105      	bne.n	801bfec <_free_r+0x2c>
 801bfe0:	6063      	str	r3, [r4, #4]
 801bfe2:	6014      	str	r4, [r2, #0]
 801bfe4:	0028      	movs	r0, r5
 801bfe6:	f000 fc55 	bl	801c894 <__malloc_unlock>
 801bfea:	bd70      	pop	{r4, r5, r6, pc}
 801bfec:	42a3      	cmp	r3, r4
 801bfee:	d908      	bls.n	801c002 <_free_r+0x42>
 801bff0:	6820      	ldr	r0, [r4, #0]
 801bff2:	1821      	adds	r1, r4, r0
 801bff4:	428b      	cmp	r3, r1
 801bff6:	d1f3      	bne.n	801bfe0 <_free_r+0x20>
 801bff8:	6819      	ldr	r1, [r3, #0]
 801bffa:	685b      	ldr	r3, [r3, #4]
 801bffc:	1809      	adds	r1, r1, r0
 801bffe:	6021      	str	r1, [r4, #0]
 801c000:	e7ee      	b.n	801bfe0 <_free_r+0x20>
 801c002:	001a      	movs	r2, r3
 801c004:	685b      	ldr	r3, [r3, #4]
 801c006:	2b00      	cmp	r3, #0
 801c008:	d001      	beq.n	801c00e <_free_r+0x4e>
 801c00a:	42a3      	cmp	r3, r4
 801c00c:	d9f9      	bls.n	801c002 <_free_r+0x42>
 801c00e:	6811      	ldr	r1, [r2, #0]
 801c010:	1850      	adds	r0, r2, r1
 801c012:	42a0      	cmp	r0, r4
 801c014:	d10b      	bne.n	801c02e <_free_r+0x6e>
 801c016:	6820      	ldr	r0, [r4, #0]
 801c018:	1809      	adds	r1, r1, r0
 801c01a:	1850      	adds	r0, r2, r1
 801c01c:	6011      	str	r1, [r2, #0]
 801c01e:	4283      	cmp	r3, r0
 801c020:	d1e0      	bne.n	801bfe4 <_free_r+0x24>
 801c022:	6818      	ldr	r0, [r3, #0]
 801c024:	685b      	ldr	r3, [r3, #4]
 801c026:	1841      	adds	r1, r0, r1
 801c028:	6011      	str	r1, [r2, #0]
 801c02a:	6053      	str	r3, [r2, #4]
 801c02c:	e7da      	b.n	801bfe4 <_free_r+0x24>
 801c02e:	42a0      	cmp	r0, r4
 801c030:	d902      	bls.n	801c038 <_free_r+0x78>
 801c032:	230c      	movs	r3, #12
 801c034:	602b      	str	r3, [r5, #0]
 801c036:	e7d5      	b.n	801bfe4 <_free_r+0x24>
 801c038:	6820      	ldr	r0, [r4, #0]
 801c03a:	1821      	adds	r1, r4, r0
 801c03c:	428b      	cmp	r3, r1
 801c03e:	d103      	bne.n	801c048 <_free_r+0x88>
 801c040:	6819      	ldr	r1, [r3, #0]
 801c042:	685b      	ldr	r3, [r3, #4]
 801c044:	1809      	adds	r1, r1, r0
 801c046:	6021      	str	r1, [r4, #0]
 801c048:	6063      	str	r3, [r4, #4]
 801c04a:	6054      	str	r4, [r2, #4]
 801c04c:	e7ca      	b.n	801bfe4 <_free_r+0x24>
 801c04e:	46c0      	nop			@ (mov r8, r8)
 801c050:	20003848 	.word	0x20003848

0801c054 <rshift>:
 801c054:	0002      	movs	r2, r0
 801c056:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c058:	6904      	ldr	r4, [r0, #16]
 801c05a:	b085      	sub	sp, #20
 801c05c:	3214      	adds	r2, #20
 801c05e:	114b      	asrs	r3, r1, #5
 801c060:	0016      	movs	r6, r2
 801c062:	9302      	str	r3, [sp, #8]
 801c064:	429c      	cmp	r4, r3
 801c066:	dd31      	ble.n	801c0cc <rshift+0x78>
 801c068:	261f      	movs	r6, #31
 801c06a:	000f      	movs	r7, r1
 801c06c:	009b      	lsls	r3, r3, #2
 801c06e:	00a5      	lsls	r5, r4, #2
 801c070:	18d3      	adds	r3, r2, r3
 801c072:	4037      	ands	r7, r6
 801c074:	1955      	adds	r5, r2, r5
 801c076:	9300      	str	r3, [sp, #0]
 801c078:	9701      	str	r7, [sp, #4]
 801c07a:	4231      	tst	r1, r6
 801c07c:	d10d      	bne.n	801c09a <rshift+0x46>
 801c07e:	0016      	movs	r6, r2
 801c080:	0019      	movs	r1, r3
 801c082:	428d      	cmp	r5, r1
 801c084:	d836      	bhi.n	801c0f4 <rshift+0xa0>
 801c086:	9b00      	ldr	r3, [sp, #0]
 801c088:	2600      	movs	r6, #0
 801c08a:	3b03      	subs	r3, #3
 801c08c:	429d      	cmp	r5, r3
 801c08e:	d302      	bcc.n	801c096 <rshift+0x42>
 801c090:	9b02      	ldr	r3, [sp, #8]
 801c092:	1ae4      	subs	r4, r4, r3
 801c094:	00a6      	lsls	r6, r4, #2
 801c096:	1996      	adds	r6, r2, r6
 801c098:	e018      	b.n	801c0cc <rshift+0x78>
 801c09a:	2120      	movs	r1, #32
 801c09c:	9e01      	ldr	r6, [sp, #4]
 801c09e:	9f01      	ldr	r7, [sp, #4]
 801c0a0:	1b89      	subs	r1, r1, r6
 801c0a2:	9e00      	ldr	r6, [sp, #0]
 801c0a4:	9103      	str	r1, [sp, #12]
 801c0a6:	ce02      	ldmia	r6!, {r1}
 801c0a8:	4694      	mov	ip, r2
 801c0aa:	40f9      	lsrs	r1, r7
 801c0ac:	42b5      	cmp	r5, r6
 801c0ae:	d816      	bhi.n	801c0de <rshift+0x8a>
 801c0b0:	9b00      	ldr	r3, [sp, #0]
 801c0b2:	2600      	movs	r6, #0
 801c0b4:	3301      	adds	r3, #1
 801c0b6:	429d      	cmp	r5, r3
 801c0b8:	d303      	bcc.n	801c0c2 <rshift+0x6e>
 801c0ba:	9b02      	ldr	r3, [sp, #8]
 801c0bc:	1ae4      	subs	r4, r4, r3
 801c0be:	00a6      	lsls	r6, r4, #2
 801c0c0:	3e04      	subs	r6, #4
 801c0c2:	1996      	adds	r6, r2, r6
 801c0c4:	6031      	str	r1, [r6, #0]
 801c0c6:	2900      	cmp	r1, #0
 801c0c8:	d000      	beq.n	801c0cc <rshift+0x78>
 801c0ca:	3604      	adds	r6, #4
 801c0cc:	1ab1      	subs	r1, r6, r2
 801c0ce:	1089      	asrs	r1, r1, #2
 801c0d0:	6101      	str	r1, [r0, #16]
 801c0d2:	4296      	cmp	r6, r2
 801c0d4:	d101      	bne.n	801c0da <rshift+0x86>
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	6143      	str	r3, [r0, #20]
 801c0da:	b005      	add	sp, #20
 801c0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0de:	6837      	ldr	r7, [r6, #0]
 801c0e0:	9b03      	ldr	r3, [sp, #12]
 801c0e2:	409f      	lsls	r7, r3
 801c0e4:	430f      	orrs	r7, r1
 801c0e6:	4661      	mov	r1, ip
 801c0e8:	c180      	stmia	r1!, {r7}
 801c0ea:	468c      	mov	ip, r1
 801c0ec:	9b01      	ldr	r3, [sp, #4]
 801c0ee:	ce02      	ldmia	r6!, {r1}
 801c0f0:	40d9      	lsrs	r1, r3
 801c0f2:	e7db      	b.n	801c0ac <rshift+0x58>
 801c0f4:	c980      	ldmia	r1!, {r7}
 801c0f6:	c680      	stmia	r6!, {r7}
 801c0f8:	e7c3      	b.n	801c082 <rshift+0x2e>

0801c0fa <__hexdig_fun>:
 801c0fa:	0002      	movs	r2, r0
 801c0fc:	3a30      	subs	r2, #48	@ 0x30
 801c0fe:	0003      	movs	r3, r0
 801c100:	2a09      	cmp	r2, #9
 801c102:	d802      	bhi.n	801c10a <__hexdig_fun+0x10>
 801c104:	3b20      	subs	r3, #32
 801c106:	b2d8      	uxtb	r0, r3
 801c108:	4770      	bx	lr
 801c10a:	0002      	movs	r2, r0
 801c10c:	3a61      	subs	r2, #97	@ 0x61
 801c10e:	2a05      	cmp	r2, #5
 801c110:	d801      	bhi.n	801c116 <__hexdig_fun+0x1c>
 801c112:	3b47      	subs	r3, #71	@ 0x47
 801c114:	e7f7      	b.n	801c106 <__hexdig_fun+0xc>
 801c116:	001a      	movs	r2, r3
 801c118:	3a41      	subs	r2, #65	@ 0x41
 801c11a:	2000      	movs	r0, #0
 801c11c:	2a05      	cmp	r2, #5
 801c11e:	d8f3      	bhi.n	801c108 <__hexdig_fun+0xe>
 801c120:	3b27      	subs	r3, #39	@ 0x27
 801c122:	e7f0      	b.n	801c106 <__hexdig_fun+0xc>

0801c124 <__gethex>:
 801c124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c126:	b089      	sub	sp, #36	@ 0x24
 801c128:	9307      	str	r3, [sp, #28]
 801c12a:	680b      	ldr	r3, [r1, #0]
 801c12c:	9201      	str	r2, [sp, #4]
 801c12e:	9003      	str	r0, [sp, #12]
 801c130:	9106      	str	r1, [sp, #24]
 801c132:	1c9a      	adds	r2, r3, #2
 801c134:	0011      	movs	r1, r2
 801c136:	3201      	adds	r2, #1
 801c138:	1e50      	subs	r0, r2, #1
 801c13a:	7800      	ldrb	r0, [r0, #0]
 801c13c:	2830      	cmp	r0, #48	@ 0x30
 801c13e:	d0f9      	beq.n	801c134 <__gethex+0x10>
 801c140:	1acb      	subs	r3, r1, r3
 801c142:	3b02      	subs	r3, #2
 801c144:	9305      	str	r3, [sp, #20]
 801c146:	9100      	str	r1, [sp, #0]
 801c148:	f7ff ffd7 	bl	801c0fa <__hexdig_fun>
 801c14c:	2300      	movs	r3, #0
 801c14e:	001d      	movs	r5, r3
 801c150:	9302      	str	r3, [sp, #8]
 801c152:	4298      	cmp	r0, r3
 801c154:	d11e      	bne.n	801c194 <__gethex+0x70>
 801c156:	2201      	movs	r2, #1
 801c158:	49a6      	ldr	r1, [pc, #664]	@ (801c3f4 <__gethex+0x2d0>)
 801c15a:	9800      	ldr	r0, [sp, #0]
 801c15c:	f7fe ffd8 	bl	801b110 <strncmp>
 801c160:	0007      	movs	r7, r0
 801c162:	42a8      	cmp	r0, r5
 801c164:	d000      	beq.n	801c168 <__gethex+0x44>
 801c166:	e06a      	b.n	801c23e <__gethex+0x11a>
 801c168:	9b00      	ldr	r3, [sp, #0]
 801c16a:	7858      	ldrb	r0, [r3, #1]
 801c16c:	1c5c      	adds	r4, r3, #1
 801c16e:	f7ff ffc4 	bl	801c0fa <__hexdig_fun>
 801c172:	2301      	movs	r3, #1
 801c174:	9302      	str	r3, [sp, #8]
 801c176:	42a8      	cmp	r0, r5
 801c178:	d02f      	beq.n	801c1da <__gethex+0xb6>
 801c17a:	9400      	str	r4, [sp, #0]
 801c17c:	9b00      	ldr	r3, [sp, #0]
 801c17e:	7818      	ldrb	r0, [r3, #0]
 801c180:	2830      	cmp	r0, #48	@ 0x30
 801c182:	d009      	beq.n	801c198 <__gethex+0x74>
 801c184:	f7ff ffb9 	bl	801c0fa <__hexdig_fun>
 801c188:	4242      	negs	r2, r0
 801c18a:	4142      	adcs	r2, r0
 801c18c:	2301      	movs	r3, #1
 801c18e:	0025      	movs	r5, r4
 801c190:	9202      	str	r2, [sp, #8]
 801c192:	9305      	str	r3, [sp, #20]
 801c194:	9c00      	ldr	r4, [sp, #0]
 801c196:	e004      	b.n	801c1a2 <__gethex+0x7e>
 801c198:	9b00      	ldr	r3, [sp, #0]
 801c19a:	3301      	adds	r3, #1
 801c19c:	9300      	str	r3, [sp, #0]
 801c19e:	e7ed      	b.n	801c17c <__gethex+0x58>
 801c1a0:	3401      	adds	r4, #1
 801c1a2:	7820      	ldrb	r0, [r4, #0]
 801c1a4:	f7ff ffa9 	bl	801c0fa <__hexdig_fun>
 801c1a8:	1e07      	subs	r7, r0, #0
 801c1aa:	d1f9      	bne.n	801c1a0 <__gethex+0x7c>
 801c1ac:	2201      	movs	r2, #1
 801c1ae:	0020      	movs	r0, r4
 801c1b0:	4990      	ldr	r1, [pc, #576]	@ (801c3f4 <__gethex+0x2d0>)
 801c1b2:	f7fe ffad 	bl	801b110 <strncmp>
 801c1b6:	2800      	cmp	r0, #0
 801c1b8:	d10d      	bne.n	801c1d6 <__gethex+0xb2>
 801c1ba:	2d00      	cmp	r5, #0
 801c1bc:	d106      	bne.n	801c1cc <__gethex+0xa8>
 801c1be:	3401      	adds	r4, #1
 801c1c0:	0025      	movs	r5, r4
 801c1c2:	7820      	ldrb	r0, [r4, #0]
 801c1c4:	f7ff ff99 	bl	801c0fa <__hexdig_fun>
 801c1c8:	2800      	cmp	r0, #0
 801c1ca:	d102      	bne.n	801c1d2 <__gethex+0xae>
 801c1cc:	1b2d      	subs	r5, r5, r4
 801c1ce:	00af      	lsls	r7, r5, #2
 801c1d0:	e003      	b.n	801c1da <__gethex+0xb6>
 801c1d2:	3401      	adds	r4, #1
 801c1d4:	e7f5      	b.n	801c1c2 <__gethex+0x9e>
 801c1d6:	2d00      	cmp	r5, #0
 801c1d8:	d1f8      	bne.n	801c1cc <__gethex+0xa8>
 801c1da:	2220      	movs	r2, #32
 801c1dc:	7823      	ldrb	r3, [r4, #0]
 801c1de:	0026      	movs	r6, r4
 801c1e0:	4393      	bics	r3, r2
 801c1e2:	2b50      	cmp	r3, #80	@ 0x50
 801c1e4:	d11d      	bne.n	801c222 <__gethex+0xfe>
 801c1e6:	7863      	ldrb	r3, [r4, #1]
 801c1e8:	2b2b      	cmp	r3, #43	@ 0x2b
 801c1ea:	d02d      	beq.n	801c248 <__gethex+0x124>
 801c1ec:	2b2d      	cmp	r3, #45	@ 0x2d
 801c1ee:	d02f      	beq.n	801c250 <__gethex+0x12c>
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	1c66      	adds	r6, r4, #1
 801c1f4:	9304      	str	r3, [sp, #16]
 801c1f6:	7830      	ldrb	r0, [r6, #0]
 801c1f8:	f7ff ff7f 	bl	801c0fa <__hexdig_fun>
 801c1fc:	1e43      	subs	r3, r0, #1
 801c1fe:	b2db      	uxtb	r3, r3
 801c200:	0005      	movs	r5, r0
 801c202:	2b18      	cmp	r3, #24
 801c204:	d82a      	bhi.n	801c25c <__gethex+0x138>
 801c206:	7870      	ldrb	r0, [r6, #1]
 801c208:	f7ff ff77 	bl	801c0fa <__hexdig_fun>
 801c20c:	1e43      	subs	r3, r0, #1
 801c20e:	b2db      	uxtb	r3, r3
 801c210:	3601      	adds	r6, #1
 801c212:	3d10      	subs	r5, #16
 801c214:	2b18      	cmp	r3, #24
 801c216:	d91d      	bls.n	801c254 <__gethex+0x130>
 801c218:	9b04      	ldr	r3, [sp, #16]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d000      	beq.n	801c220 <__gethex+0xfc>
 801c21e:	426d      	negs	r5, r5
 801c220:	197f      	adds	r7, r7, r5
 801c222:	9b06      	ldr	r3, [sp, #24]
 801c224:	601e      	str	r6, [r3, #0]
 801c226:	9b02      	ldr	r3, [sp, #8]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d019      	beq.n	801c260 <__gethex+0x13c>
 801c22c:	9b05      	ldr	r3, [sp, #20]
 801c22e:	2606      	movs	r6, #6
 801c230:	425a      	negs	r2, r3
 801c232:	4153      	adcs	r3, r2
 801c234:	425b      	negs	r3, r3
 801c236:	401e      	ands	r6, r3
 801c238:	0030      	movs	r0, r6
 801c23a:	b009      	add	sp, #36	@ 0x24
 801c23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c23e:	2301      	movs	r3, #1
 801c240:	2700      	movs	r7, #0
 801c242:	9c00      	ldr	r4, [sp, #0]
 801c244:	9302      	str	r3, [sp, #8]
 801c246:	e7c8      	b.n	801c1da <__gethex+0xb6>
 801c248:	2300      	movs	r3, #0
 801c24a:	9304      	str	r3, [sp, #16]
 801c24c:	1ca6      	adds	r6, r4, #2
 801c24e:	e7d2      	b.n	801c1f6 <__gethex+0xd2>
 801c250:	2301      	movs	r3, #1
 801c252:	e7fa      	b.n	801c24a <__gethex+0x126>
 801c254:	230a      	movs	r3, #10
 801c256:	435d      	muls	r5, r3
 801c258:	182d      	adds	r5, r5, r0
 801c25a:	e7d4      	b.n	801c206 <__gethex+0xe2>
 801c25c:	0026      	movs	r6, r4
 801c25e:	e7e0      	b.n	801c222 <__gethex+0xfe>
 801c260:	9b00      	ldr	r3, [sp, #0]
 801c262:	9902      	ldr	r1, [sp, #8]
 801c264:	1ae3      	subs	r3, r4, r3
 801c266:	3b01      	subs	r3, #1
 801c268:	2b07      	cmp	r3, #7
 801c26a:	dc0a      	bgt.n	801c282 <__gethex+0x15e>
 801c26c:	9803      	ldr	r0, [sp, #12]
 801c26e:	f000 fb19 	bl	801c8a4 <_Balloc>
 801c272:	1e05      	subs	r5, r0, #0
 801c274:	d108      	bne.n	801c288 <__gethex+0x164>
 801c276:	002a      	movs	r2, r5
 801c278:	21e4      	movs	r1, #228	@ 0xe4
 801c27a:	4b5f      	ldr	r3, [pc, #380]	@ (801c3f8 <__gethex+0x2d4>)
 801c27c:	485f      	ldr	r0, [pc, #380]	@ (801c3fc <__gethex+0x2d8>)
 801c27e:	f001 fc03 	bl	801da88 <__assert_func>
 801c282:	3101      	adds	r1, #1
 801c284:	105b      	asrs	r3, r3, #1
 801c286:	e7ef      	b.n	801c268 <__gethex+0x144>
 801c288:	0003      	movs	r3, r0
 801c28a:	3314      	adds	r3, #20
 801c28c:	9302      	str	r3, [sp, #8]
 801c28e:	9305      	str	r3, [sp, #20]
 801c290:	2300      	movs	r3, #0
 801c292:	001e      	movs	r6, r3
 801c294:	9304      	str	r3, [sp, #16]
 801c296:	9b00      	ldr	r3, [sp, #0]
 801c298:	42a3      	cmp	r3, r4
 801c29a:	d338      	bcc.n	801c30e <__gethex+0x1ea>
 801c29c:	9c05      	ldr	r4, [sp, #20]
 801c29e:	9b02      	ldr	r3, [sp, #8]
 801c2a0:	c440      	stmia	r4!, {r6}
 801c2a2:	1ae4      	subs	r4, r4, r3
 801c2a4:	10a4      	asrs	r4, r4, #2
 801c2a6:	0030      	movs	r0, r6
 801c2a8:	612c      	str	r4, [r5, #16]
 801c2aa:	f000 fbf3 	bl	801ca94 <__hi0bits>
 801c2ae:	9b01      	ldr	r3, [sp, #4]
 801c2b0:	0164      	lsls	r4, r4, #5
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	1a26      	subs	r6, r4, r0
 801c2b6:	9300      	str	r3, [sp, #0]
 801c2b8:	429e      	cmp	r6, r3
 801c2ba:	dd52      	ble.n	801c362 <__gethex+0x23e>
 801c2bc:	1af6      	subs	r6, r6, r3
 801c2be:	0031      	movs	r1, r6
 801c2c0:	0028      	movs	r0, r5
 801c2c2:	f000 ff96 	bl	801d1f2 <__any_on>
 801c2c6:	1e04      	subs	r4, r0, #0
 801c2c8:	d00f      	beq.n	801c2ea <__gethex+0x1c6>
 801c2ca:	2401      	movs	r4, #1
 801c2cc:	231f      	movs	r3, #31
 801c2ce:	0020      	movs	r0, r4
 801c2d0:	1e72      	subs	r2, r6, #1
 801c2d2:	4013      	ands	r3, r2
 801c2d4:	4098      	lsls	r0, r3
 801c2d6:	0003      	movs	r3, r0
 801c2d8:	1151      	asrs	r1, r2, #5
 801c2da:	9802      	ldr	r0, [sp, #8]
 801c2dc:	0089      	lsls	r1, r1, #2
 801c2de:	5809      	ldr	r1, [r1, r0]
 801c2e0:	4219      	tst	r1, r3
 801c2e2:	d002      	beq.n	801c2ea <__gethex+0x1c6>
 801c2e4:	42a2      	cmp	r2, r4
 801c2e6:	dc34      	bgt.n	801c352 <__gethex+0x22e>
 801c2e8:	2402      	movs	r4, #2
 801c2ea:	0031      	movs	r1, r6
 801c2ec:	0028      	movs	r0, r5
 801c2ee:	f7ff feb1 	bl	801c054 <rshift>
 801c2f2:	19bf      	adds	r7, r7, r6
 801c2f4:	9b01      	ldr	r3, [sp, #4]
 801c2f6:	689b      	ldr	r3, [r3, #8]
 801c2f8:	42bb      	cmp	r3, r7
 801c2fa:	da42      	bge.n	801c382 <__gethex+0x25e>
 801c2fc:	0029      	movs	r1, r5
 801c2fe:	9803      	ldr	r0, [sp, #12]
 801c300:	f000 fb14 	bl	801c92c <_Bfree>
 801c304:	2300      	movs	r3, #0
 801c306:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c308:	26a3      	movs	r6, #163	@ 0xa3
 801c30a:	6013      	str	r3, [r2, #0]
 801c30c:	e794      	b.n	801c238 <__gethex+0x114>
 801c30e:	3c01      	subs	r4, #1
 801c310:	7823      	ldrb	r3, [r4, #0]
 801c312:	2b2e      	cmp	r3, #46	@ 0x2e
 801c314:	d012      	beq.n	801c33c <__gethex+0x218>
 801c316:	9b04      	ldr	r3, [sp, #16]
 801c318:	2b20      	cmp	r3, #32
 801c31a:	d104      	bne.n	801c326 <__gethex+0x202>
 801c31c:	9b05      	ldr	r3, [sp, #20]
 801c31e:	c340      	stmia	r3!, {r6}
 801c320:	2600      	movs	r6, #0
 801c322:	9305      	str	r3, [sp, #20]
 801c324:	9604      	str	r6, [sp, #16]
 801c326:	7820      	ldrb	r0, [r4, #0]
 801c328:	f7ff fee7 	bl	801c0fa <__hexdig_fun>
 801c32c:	230f      	movs	r3, #15
 801c32e:	4018      	ands	r0, r3
 801c330:	9b04      	ldr	r3, [sp, #16]
 801c332:	4098      	lsls	r0, r3
 801c334:	3304      	adds	r3, #4
 801c336:	4306      	orrs	r6, r0
 801c338:	9304      	str	r3, [sp, #16]
 801c33a:	e7ac      	b.n	801c296 <__gethex+0x172>
 801c33c:	9b00      	ldr	r3, [sp, #0]
 801c33e:	42a3      	cmp	r3, r4
 801c340:	d8e9      	bhi.n	801c316 <__gethex+0x1f2>
 801c342:	2201      	movs	r2, #1
 801c344:	0020      	movs	r0, r4
 801c346:	492b      	ldr	r1, [pc, #172]	@ (801c3f4 <__gethex+0x2d0>)
 801c348:	f7fe fee2 	bl	801b110 <strncmp>
 801c34c:	2800      	cmp	r0, #0
 801c34e:	d1e2      	bne.n	801c316 <__gethex+0x1f2>
 801c350:	e7a1      	b.n	801c296 <__gethex+0x172>
 801c352:	0028      	movs	r0, r5
 801c354:	1eb1      	subs	r1, r6, #2
 801c356:	f000 ff4c 	bl	801d1f2 <__any_on>
 801c35a:	2800      	cmp	r0, #0
 801c35c:	d0c4      	beq.n	801c2e8 <__gethex+0x1c4>
 801c35e:	2403      	movs	r4, #3
 801c360:	e7c3      	b.n	801c2ea <__gethex+0x1c6>
 801c362:	9b00      	ldr	r3, [sp, #0]
 801c364:	2400      	movs	r4, #0
 801c366:	429e      	cmp	r6, r3
 801c368:	dac4      	bge.n	801c2f4 <__gethex+0x1d0>
 801c36a:	1b9e      	subs	r6, r3, r6
 801c36c:	0029      	movs	r1, r5
 801c36e:	0032      	movs	r2, r6
 801c370:	9803      	ldr	r0, [sp, #12]
 801c372:	f000 fd05 	bl	801cd80 <__lshift>
 801c376:	0003      	movs	r3, r0
 801c378:	3314      	adds	r3, #20
 801c37a:	0005      	movs	r5, r0
 801c37c:	1bbf      	subs	r7, r7, r6
 801c37e:	9302      	str	r3, [sp, #8]
 801c380:	e7b8      	b.n	801c2f4 <__gethex+0x1d0>
 801c382:	9b01      	ldr	r3, [sp, #4]
 801c384:	685e      	ldr	r6, [r3, #4]
 801c386:	42be      	cmp	r6, r7
 801c388:	dd6f      	ble.n	801c46a <__gethex+0x346>
 801c38a:	9b00      	ldr	r3, [sp, #0]
 801c38c:	1bf6      	subs	r6, r6, r7
 801c38e:	42b3      	cmp	r3, r6
 801c390:	dc36      	bgt.n	801c400 <__gethex+0x2dc>
 801c392:	9b01      	ldr	r3, [sp, #4]
 801c394:	68db      	ldr	r3, [r3, #12]
 801c396:	2b02      	cmp	r3, #2
 801c398:	d024      	beq.n	801c3e4 <__gethex+0x2c0>
 801c39a:	2b03      	cmp	r3, #3
 801c39c:	d026      	beq.n	801c3ec <__gethex+0x2c8>
 801c39e:	2b01      	cmp	r3, #1
 801c3a0:	d117      	bne.n	801c3d2 <__gethex+0x2ae>
 801c3a2:	9b00      	ldr	r3, [sp, #0]
 801c3a4:	42b3      	cmp	r3, r6
 801c3a6:	d114      	bne.n	801c3d2 <__gethex+0x2ae>
 801c3a8:	2b01      	cmp	r3, #1
 801c3aa:	d10b      	bne.n	801c3c4 <__gethex+0x2a0>
 801c3ac:	9b01      	ldr	r3, [sp, #4]
 801c3ae:	9a07      	ldr	r2, [sp, #28]
 801c3b0:	685b      	ldr	r3, [r3, #4]
 801c3b2:	2662      	movs	r6, #98	@ 0x62
 801c3b4:	6013      	str	r3, [r2, #0]
 801c3b6:	2301      	movs	r3, #1
 801c3b8:	9a02      	ldr	r2, [sp, #8]
 801c3ba:	612b      	str	r3, [r5, #16]
 801c3bc:	6013      	str	r3, [r2, #0]
 801c3be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3c0:	601d      	str	r5, [r3, #0]
 801c3c2:	e739      	b.n	801c238 <__gethex+0x114>
 801c3c4:	9900      	ldr	r1, [sp, #0]
 801c3c6:	0028      	movs	r0, r5
 801c3c8:	3901      	subs	r1, #1
 801c3ca:	f000 ff12 	bl	801d1f2 <__any_on>
 801c3ce:	2800      	cmp	r0, #0
 801c3d0:	d1ec      	bne.n	801c3ac <__gethex+0x288>
 801c3d2:	0029      	movs	r1, r5
 801c3d4:	9803      	ldr	r0, [sp, #12]
 801c3d6:	f000 faa9 	bl	801c92c <_Bfree>
 801c3da:	2300      	movs	r3, #0
 801c3dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c3de:	2650      	movs	r6, #80	@ 0x50
 801c3e0:	6013      	str	r3, [r2, #0]
 801c3e2:	e729      	b.n	801c238 <__gethex+0x114>
 801c3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d1f3      	bne.n	801c3d2 <__gethex+0x2ae>
 801c3ea:	e7df      	b.n	801c3ac <__gethex+0x288>
 801c3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d1dc      	bne.n	801c3ac <__gethex+0x288>
 801c3f2:	e7ee      	b.n	801c3d2 <__gethex+0x2ae>
 801c3f4:	0801f778 	.word	0x0801f778
 801c3f8:	0801f888 	.word	0x0801f888
 801c3fc:	0801f899 	.word	0x0801f899
 801c400:	1e77      	subs	r7, r6, #1
 801c402:	2c00      	cmp	r4, #0
 801c404:	d12f      	bne.n	801c466 <__gethex+0x342>
 801c406:	2f00      	cmp	r7, #0
 801c408:	d004      	beq.n	801c414 <__gethex+0x2f0>
 801c40a:	0039      	movs	r1, r7
 801c40c:	0028      	movs	r0, r5
 801c40e:	f000 fef0 	bl	801d1f2 <__any_on>
 801c412:	0004      	movs	r4, r0
 801c414:	231f      	movs	r3, #31
 801c416:	117a      	asrs	r2, r7, #5
 801c418:	401f      	ands	r7, r3
 801c41a:	3b1e      	subs	r3, #30
 801c41c:	40bb      	lsls	r3, r7
 801c41e:	9902      	ldr	r1, [sp, #8]
 801c420:	0092      	lsls	r2, r2, #2
 801c422:	5852      	ldr	r2, [r2, r1]
 801c424:	421a      	tst	r2, r3
 801c426:	d001      	beq.n	801c42c <__gethex+0x308>
 801c428:	2302      	movs	r3, #2
 801c42a:	431c      	orrs	r4, r3
 801c42c:	9b00      	ldr	r3, [sp, #0]
 801c42e:	0031      	movs	r1, r6
 801c430:	1b9b      	subs	r3, r3, r6
 801c432:	2602      	movs	r6, #2
 801c434:	0028      	movs	r0, r5
 801c436:	9300      	str	r3, [sp, #0]
 801c438:	f7ff fe0c 	bl	801c054 <rshift>
 801c43c:	9b01      	ldr	r3, [sp, #4]
 801c43e:	685f      	ldr	r7, [r3, #4]
 801c440:	2c00      	cmp	r4, #0
 801c442:	d03f      	beq.n	801c4c4 <__gethex+0x3a0>
 801c444:	9b01      	ldr	r3, [sp, #4]
 801c446:	68db      	ldr	r3, [r3, #12]
 801c448:	2b02      	cmp	r3, #2
 801c44a:	d010      	beq.n	801c46e <__gethex+0x34a>
 801c44c:	2b03      	cmp	r3, #3
 801c44e:	d012      	beq.n	801c476 <__gethex+0x352>
 801c450:	2b01      	cmp	r3, #1
 801c452:	d106      	bne.n	801c462 <__gethex+0x33e>
 801c454:	07a2      	lsls	r2, r4, #30
 801c456:	d504      	bpl.n	801c462 <__gethex+0x33e>
 801c458:	9a02      	ldr	r2, [sp, #8]
 801c45a:	6812      	ldr	r2, [r2, #0]
 801c45c:	4314      	orrs	r4, r2
 801c45e:	421c      	tst	r4, r3
 801c460:	d10c      	bne.n	801c47c <__gethex+0x358>
 801c462:	2310      	movs	r3, #16
 801c464:	e02d      	b.n	801c4c2 <__gethex+0x39e>
 801c466:	2401      	movs	r4, #1
 801c468:	e7d4      	b.n	801c414 <__gethex+0x2f0>
 801c46a:	2601      	movs	r6, #1
 801c46c:	e7e8      	b.n	801c440 <__gethex+0x31c>
 801c46e:	2301      	movs	r3, #1
 801c470:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c472:	1a9b      	subs	r3, r3, r2
 801c474:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d0f2      	beq.n	801c462 <__gethex+0x33e>
 801c47c:	692b      	ldr	r3, [r5, #16]
 801c47e:	2000      	movs	r0, #0
 801c480:	9302      	str	r3, [sp, #8]
 801c482:	009b      	lsls	r3, r3, #2
 801c484:	9304      	str	r3, [sp, #16]
 801c486:	002b      	movs	r3, r5
 801c488:	9a04      	ldr	r2, [sp, #16]
 801c48a:	3314      	adds	r3, #20
 801c48c:	1899      	adds	r1, r3, r2
 801c48e:	681a      	ldr	r2, [r3, #0]
 801c490:	1c54      	adds	r4, r2, #1
 801c492:	d01c      	beq.n	801c4ce <__gethex+0x3aa>
 801c494:	3201      	adds	r2, #1
 801c496:	601a      	str	r2, [r3, #0]
 801c498:	002b      	movs	r3, r5
 801c49a:	3314      	adds	r3, #20
 801c49c:	2e02      	cmp	r6, #2
 801c49e:	d13f      	bne.n	801c520 <__gethex+0x3fc>
 801c4a0:	9a01      	ldr	r2, [sp, #4]
 801c4a2:	9900      	ldr	r1, [sp, #0]
 801c4a4:	6812      	ldr	r2, [r2, #0]
 801c4a6:	3a01      	subs	r2, #1
 801c4a8:	428a      	cmp	r2, r1
 801c4aa:	d109      	bne.n	801c4c0 <__gethex+0x39c>
 801c4ac:	000a      	movs	r2, r1
 801c4ae:	201f      	movs	r0, #31
 801c4b0:	4010      	ands	r0, r2
 801c4b2:	2201      	movs	r2, #1
 801c4b4:	4082      	lsls	r2, r0
 801c4b6:	1149      	asrs	r1, r1, #5
 801c4b8:	0089      	lsls	r1, r1, #2
 801c4ba:	58cb      	ldr	r3, [r1, r3]
 801c4bc:	4213      	tst	r3, r2
 801c4be:	d13d      	bne.n	801c53c <__gethex+0x418>
 801c4c0:	2320      	movs	r3, #32
 801c4c2:	431e      	orrs	r6, r3
 801c4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c4c6:	601d      	str	r5, [r3, #0]
 801c4c8:	9b07      	ldr	r3, [sp, #28]
 801c4ca:	601f      	str	r7, [r3, #0]
 801c4cc:	e6b4      	b.n	801c238 <__gethex+0x114>
 801c4ce:	c301      	stmia	r3!, {r0}
 801c4d0:	4299      	cmp	r1, r3
 801c4d2:	d8dc      	bhi.n	801c48e <__gethex+0x36a>
 801c4d4:	68ab      	ldr	r3, [r5, #8]
 801c4d6:	9a02      	ldr	r2, [sp, #8]
 801c4d8:	429a      	cmp	r2, r3
 801c4da:	db18      	blt.n	801c50e <__gethex+0x3ea>
 801c4dc:	6869      	ldr	r1, [r5, #4]
 801c4de:	9803      	ldr	r0, [sp, #12]
 801c4e0:	3101      	adds	r1, #1
 801c4e2:	f000 f9df 	bl	801c8a4 <_Balloc>
 801c4e6:	1e04      	subs	r4, r0, #0
 801c4e8:	d104      	bne.n	801c4f4 <__gethex+0x3d0>
 801c4ea:	0022      	movs	r2, r4
 801c4ec:	2184      	movs	r1, #132	@ 0x84
 801c4ee:	4b1d      	ldr	r3, [pc, #116]	@ (801c564 <__gethex+0x440>)
 801c4f0:	481d      	ldr	r0, [pc, #116]	@ (801c568 <__gethex+0x444>)
 801c4f2:	e6c4      	b.n	801c27e <__gethex+0x15a>
 801c4f4:	0029      	movs	r1, r5
 801c4f6:	692a      	ldr	r2, [r5, #16]
 801c4f8:	310c      	adds	r1, #12
 801c4fa:	3202      	adds	r2, #2
 801c4fc:	0092      	lsls	r2, r2, #2
 801c4fe:	300c      	adds	r0, #12
 801c500:	f7fe fecc 	bl	801b29c <memcpy>
 801c504:	0029      	movs	r1, r5
 801c506:	9803      	ldr	r0, [sp, #12]
 801c508:	f000 fa10 	bl	801c92c <_Bfree>
 801c50c:	0025      	movs	r5, r4
 801c50e:	692b      	ldr	r3, [r5, #16]
 801c510:	1c5a      	adds	r2, r3, #1
 801c512:	612a      	str	r2, [r5, #16]
 801c514:	2201      	movs	r2, #1
 801c516:	3304      	adds	r3, #4
 801c518:	009b      	lsls	r3, r3, #2
 801c51a:	18eb      	adds	r3, r5, r3
 801c51c:	605a      	str	r2, [r3, #4]
 801c51e:	e7bb      	b.n	801c498 <__gethex+0x374>
 801c520:	692a      	ldr	r2, [r5, #16]
 801c522:	9902      	ldr	r1, [sp, #8]
 801c524:	428a      	cmp	r2, r1
 801c526:	dd0b      	ble.n	801c540 <__gethex+0x41c>
 801c528:	2101      	movs	r1, #1
 801c52a:	0028      	movs	r0, r5
 801c52c:	f7ff fd92 	bl	801c054 <rshift>
 801c530:	9b01      	ldr	r3, [sp, #4]
 801c532:	3701      	adds	r7, #1
 801c534:	689b      	ldr	r3, [r3, #8]
 801c536:	42bb      	cmp	r3, r7
 801c538:	da00      	bge.n	801c53c <__gethex+0x418>
 801c53a:	e6df      	b.n	801c2fc <__gethex+0x1d8>
 801c53c:	2601      	movs	r6, #1
 801c53e:	e7bf      	b.n	801c4c0 <__gethex+0x39c>
 801c540:	221f      	movs	r2, #31
 801c542:	9c00      	ldr	r4, [sp, #0]
 801c544:	9900      	ldr	r1, [sp, #0]
 801c546:	4014      	ands	r4, r2
 801c548:	4211      	tst	r1, r2
 801c54a:	d0f7      	beq.n	801c53c <__gethex+0x418>
 801c54c:	9a04      	ldr	r2, [sp, #16]
 801c54e:	189b      	adds	r3, r3, r2
 801c550:	3b04      	subs	r3, #4
 801c552:	6818      	ldr	r0, [r3, #0]
 801c554:	f000 fa9e 	bl	801ca94 <__hi0bits>
 801c558:	2320      	movs	r3, #32
 801c55a:	1b1b      	subs	r3, r3, r4
 801c55c:	4298      	cmp	r0, r3
 801c55e:	dbe3      	blt.n	801c528 <__gethex+0x404>
 801c560:	e7ec      	b.n	801c53c <__gethex+0x418>
 801c562:	46c0      	nop			@ (mov r8, r8)
 801c564:	0801f888 	.word	0x0801f888
 801c568:	0801f899 	.word	0x0801f899

0801c56c <L_shift>:
 801c56c:	2308      	movs	r3, #8
 801c56e:	b570      	push	{r4, r5, r6, lr}
 801c570:	2520      	movs	r5, #32
 801c572:	1a9a      	subs	r2, r3, r2
 801c574:	0092      	lsls	r2, r2, #2
 801c576:	1aad      	subs	r5, r5, r2
 801c578:	6843      	ldr	r3, [r0, #4]
 801c57a:	6804      	ldr	r4, [r0, #0]
 801c57c:	001e      	movs	r6, r3
 801c57e:	40ae      	lsls	r6, r5
 801c580:	40d3      	lsrs	r3, r2
 801c582:	4334      	orrs	r4, r6
 801c584:	6004      	str	r4, [r0, #0]
 801c586:	6043      	str	r3, [r0, #4]
 801c588:	3004      	adds	r0, #4
 801c58a:	4288      	cmp	r0, r1
 801c58c:	d3f4      	bcc.n	801c578 <L_shift+0xc>
 801c58e:	bd70      	pop	{r4, r5, r6, pc}

0801c590 <__match>:
 801c590:	b530      	push	{r4, r5, lr}
 801c592:	6803      	ldr	r3, [r0, #0]
 801c594:	780c      	ldrb	r4, [r1, #0]
 801c596:	3301      	adds	r3, #1
 801c598:	2c00      	cmp	r4, #0
 801c59a:	d102      	bne.n	801c5a2 <__match+0x12>
 801c59c:	6003      	str	r3, [r0, #0]
 801c59e:	2001      	movs	r0, #1
 801c5a0:	bd30      	pop	{r4, r5, pc}
 801c5a2:	781a      	ldrb	r2, [r3, #0]
 801c5a4:	0015      	movs	r5, r2
 801c5a6:	3d41      	subs	r5, #65	@ 0x41
 801c5a8:	2d19      	cmp	r5, #25
 801c5aa:	d800      	bhi.n	801c5ae <__match+0x1e>
 801c5ac:	3220      	adds	r2, #32
 801c5ae:	3101      	adds	r1, #1
 801c5b0:	42a2      	cmp	r2, r4
 801c5b2:	d0ef      	beq.n	801c594 <__match+0x4>
 801c5b4:	2000      	movs	r0, #0
 801c5b6:	e7f3      	b.n	801c5a0 <__match+0x10>

0801c5b8 <__hexnan>:
 801c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5ba:	680b      	ldr	r3, [r1, #0]
 801c5bc:	b08b      	sub	sp, #44	@ 0x2c
 801c5be:	9201      	str	r2, [sp, #4]
 801c5c0:	9901      	ldr	r1, [sp, #4]
 801c5c2:	115a      	asrs	r2, r3, #5
 801c5c4:	0092      	lsls	r2, r2, #2
 801c5c6:	188a      	adds	r2, r1, r2
 801c5c8:	9202      	str	r2, [sp, #8]
 801c5ca:	0019      	movs	r1, r3
 801c5cc:	221f      	movs	r2, #31
 801c5ce:	4011      	ands	r1, r2
 801c5d0:	9008      	str	r0, [sp, #32]
 801c5d2:	9106      	str	r1, [sp, #24]
 801c5d4:	4213      	tst	r3, r2
 801c5d6:	d002      	beq.n	801c5de <__hexnan+0x26>
 801c5d8:	9b02      	ldr	r3, [sp, #8]
 801c5da:	3304      	adds	r3, #4
 801c5dc:	9302      	str	r3, [sp, #8]
 801c5de:	9b02      	ldr	r3, [sp, #8]
 801c5e0:	2500      	movs	r5, #0
 801c5e2:	1f1f      	subs	r7, r3, #4
 801c5e4:	003e      	movs	r6, r7
 801c5e6:	003c      	movs	r4, r7
 801c5e8:	9b08      	ldr	r3, [sp, #32]
 801c5ea:	603d      	str	r5, [r7, #0]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	9507      	str	r5, [sp, #28]
 801c5f0:	9305      	str	r3, [sp, #20]
 801c5f2:	9503      	str	r5, [sp, #12]
 801c5f4:	9b05      	ldr	r3, [sp, #20]
 801c5f6:	3301      	adds	r3, #1
 801c5f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5fa:	9b05      	ldr	r3, [sp, #20]
 801c5fc:	785b      	ldrb	r3, [r3, #1]
 801c5fe:	9304      	str	r3, [sp, #16]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d028      	beq.n	801c656 <__hexnan+0x9e>
 801c604:	9804      	ldr	r0, [sp, #16]
 801c606:	f7ff fd78 	bl	801c0fa <__hexdig_fun>
 801c60a:	2800      	cmp	r0, #0
 801c60c:	d155      	bne.n	801c6ba <__hexnan+0x102>
 801c60e:	9b04      	ldr	r3, [sp, #16]
 801c610:	2b20      	cmp	r3, #32
 801c612:	d819      	bhi.n	801c648 <__hexnan+0x90>
 801c614:	9b03      	ldr	r3, [sp, #12]
 801c616:	9a07      	ldr	r2, [sp, #28]
 801c618:	4293      	cmp	r3, r2
 801c61a:	dd12      	ble.n	801c642 <__hexnan+0x8a>
 801c61c:	42b4      	cmp	r4, r6
 801c61e:	d206      	bcs.n	801c62e <__hexnan+0x76>
 801c620:	2d07      	cmp	r5, #7
 801c622:	dc04      	bgt.n	801c62e <__hexnan+0x76>
 801c624:	002a      	movs	r2, r5
 801c626:	0031      	movs	r1, r6
 801c628:	0020      	movs	r0, r4
 801c62a:	f7ff ff9f 	bl	801c56c <L_shift>
 801c62e:	9b01      	ldr	r3, [sp, #4]
 801c630:	2508      	movs	r5, #8
 801c632:	429c      	cmp	r4, r3
 801c634:	d905      	bls.n	801c642 <__hexnan+0x8a>
 801c636:	1f26      	subs	r6, r4, #4
 801c638:	2500      	movs	r5, #0
 801c63a:	0034      	movs	r4, r6
 801c63c:	9b03      	ldr	r3, [sp, #12]
 801c63e:	6035      	str	r5, [r6, #0]
 801c640:	9307      	str	r3, [sp, #28]
 801c642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c644:	9305      	str	r3, [sp, #20]
 801c646:	e7d5      	b.n	801c5f4 <__hexnan+0x3c>
 801c648:	9b04      	ldr	r3, [sp, #16]
 801c64a:	2b29      	cmp	r3, #41	@ 0x29
 801c64c:	d15a      	bne.n	801c704 <__hexnan+0x14c>
 801c64e:	9b05      	ldr	r3, [sp, #20]
 801c650:	9a08      	ldr	r2, [sp, #32]
 801c652:	3302      	adds	r3, #2
 801c654:	6013      	str	r3, [r2, #0]
 801c656:	9b03      	ldr	r3, [sp, #12]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d053      	beq.n	801c704 <__hexnan+0x14c>
 801c65c:	42b4      	cmp	r4, r6
 801c65e:	d206      	bcs.n	801c66e <__hexnan+0xb6>
 801c660:	2d07      	cmp	r5, #7
 801c662:	dc04      	bgt.n	801c66e <__hexnan+0xb6>
 801c664:	002a      	movs	r2, r5
 801c666:	0031      	movs	r1, r6
 801c668:	0020      	movs	r0, r4
 801c66a:	f7ff ff7f 	bl	801c56c <L_shift>
 801c66e:	9b01      	ldr	r3, [sp, #4]
 801c670:	429c      	cmp	r4, r3
 801c672:	d936      	bls.n	801c6e2 <__hexnan+0x12a>
 801c674:	001a      	movs	r2, r3
 801c676:	0023      	movs	r3, r4
 801c678:	cb02      	ldmia	r3!, {r1}
 801c67a:	c202      	stmia	r2!, {r1}
 801c67c:	429f      	cmp	r7, r3
 801c67e:	d2fb      	bcs.n	801c678 <__hexnan+0xc0>
 801c680:	9b02      	ldr	r3, [sp, #8]
 801c682:	1c61      	adds	r1, r4, #1
 801c684:	1eda      	subs	r2, r3, #3
 801c686:	2304      	movs	r3, #4
 801c688:	4291      	cmp	r1, r2
 801c68a:	d805      	bhi.n	801c698 <__hexnan+0xe0>
 801c68c:	9b02      	ldr	r3, [sp, #8]
 801c68e:	3b04      	subs	r3, #4
 801c690:	1b1b      	subs	r3, r3, r4
 801c692:	089b      	lsrs	r3, r3, #2
 801c694:	3301      	adds	r3, #1
 801c696:	009b      	lsls	r3, r3, #2
 801c698:	9a01      	ldr	r2, [sp, #4]
 801c69a:	18d3      	adds	r3, r2, r3
 801c69c:	2200      	movs	r2, #0
 801c69e:	c304      	stmia	r3!, {r2}
 801c6a0:	429f      	cmp	r7, r3
 801c6a2:	d2fc      	bcs.n	801c69e <__hexnan+0xe6>
 801c6a4:	683b      	ldr	r3, [r7, #0]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d104      	bne.n	801c6b4 <__hexnan+0xfc>
 801c6aa:	9b01      	ldr	r3, [sp, #4]
 801c6ac:	429f      	cmp	r7, r3
 801c6ae:	d127      	bne.n	801c700 <__hexnan+0x148>
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	603b      	str	r3, [r7, #0]
 801c6b4:	2005      	movs	r0, #5
 801c6b6:	b00b      	add	sp, #44	@ 0x2c
 801c6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6ba:	9b03      	ldr	r3, [sp, #12]
 801c6bc:	3501      	adds	r5, #1
 801c6be:	3301      	adds	r3, #1
 801c6c0:	9303      	str	r3, [sp, #12]
 801c6c2:	2d08      	cmp	r5, #8
 801c6c4:	dd06      	ble.n	801c6d4 <__hexnan+0x11c>
 801c6c6:	9b01      	ldr	r3, [sp, #4]
 801c6c8:	429c      	cmp	r4, r3
 801c6ca:	d9ba      	bls.n	801c642 <__hexnan+0x8a>
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	2501      	movs	r5, #1
 801c6d0:	3c04      	subs	r4, #4
 801c6d2:	6023      	str	r3, [r4, #0]
 801c6d4:	220f      	movs	r2, #15
 801c6d6:	6823      	ldr	r3, [r4, #0]
 801c6d8:	4010      	ands	r0, r2
 801c6da:	011b      	lsls	r3, r3, #4
 801c6dc:	4303      	orrs	r3, r0
 801c6de:	6023      	str	r3, [r4, #0]
 801c6e0:	e7af      	b.n	801c642 <__hexnan+0x8a>
 801c6e2:	9b06      	ldr	r3, [sp, #24]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d0dd      	beq.n	801c6a4 <__hexnan+0xec>
 801c6e8:	2320      	movs	r3, #32
 801c6ea:	9a06      	ldr	r2, [sp, #24]
 801c6ec:	9902      	ldr	r1, [sp, #8]
 801c6ee:	1a9b      	subs	r3, r3, r2
 801c6f0:	2201      	movs	r2, #1
 801c6f2:	4252      	negs	r2, r2
 801c6f4:	40da      	lsrs	r2, r3
 801c6f6:	3904      	subs	r1, #4
 801c6f8:	680b      	ldr	r3, [r1, #0]
 801c6fa:	4013      	ands	r3, r2
 801c6fc:	600b      	str	r3, [r1, #0]
 801c6fe:	e7d1      	b.n	801c6a4 <__hexnan+0xec>
 801c700:	3f04      	subs	r7, #4
 801c702:	e7cf      	b.n	801c6a4 <__hexnan+0xec>
 801c704:	2004      	movs	r0, #4
 801c706:	e7d6      	b.n	801c6b6 <__hexnan+0xfe>

0801c708 <malloc>:
 801c708:	b510      	push	{r4, lr}
 801c70a:	4b03      	ldr	r3, [pc, #12]	@ (801c718 <malloc+0x10>)
 801c70c:	0001      	movs	r1, r0
 801c70e:	6818      	ldr	r0, [r3, #0]
 801c710:	f000 f826 	bl	801c760 <_malloc_r>
 801c714:	bd10      	pop	{r4, pc}
 801c716:	46c0      	nop			@ (mov r8, r8)
 801c718:	20000374 	.word	0x20000374

0801c71c <sbrk_aligned>:
 801c71c:	b570      	push	{r4, r5, r6, lr}
 801c71e:	4e0f      	ldr	r6, [pc, #60]	@ (801c75c <sbrk_aligned+0x40>)
 801c720:	000d      	movs	r5, r1
 801c722:	6831      	ldr	r1, [r6, #0]
 801c724:	0004      	movs	r4, r0
 801c726:	2900      	cmp	r1, #0
 801c728:	d102      	bne.n	801c730 <sbrk_aligned+0x14>
 801c72a:	f001 f99b 	bl	801da64 <_sbrk_r>
 801c72e:	6030      	str	r0, [r6, #0]
 801c730:	0029      	movs	r1, r5
 801c732:	0020      	movs	r0, r4
 801c734:	f001 f996 	bl	801da64 <_sbrk_r>
 801c738:	1c43      	adds	r3, r0, #1
 801c73a:	d103      	bne.n	801c744 <sbrk_aligned+0x28>
 801c73c:	2501      	movs	r5, #1
 801c73e:	426d      	negs	r5, r5
 801c740:	0028      	movs	r0, r5
 801c742:	bd70      	pop	{r4, r5, r6, pc}
 801c744:	2303      	movs	r3, #3
 801c746:	1cc5      	adds	r5, r0, #3
 801c748:	439d      	bics	r5, r3
 801c74a:	42a8      	cmp	r0, r5
 801c74c:	d0f8      	beq.n	801c740 <sbrk_aligned+0x24>
 801c74e:	1a29      	subs	r1, r5, r0
 801c750:	0020      	movs	r0, r4
 801c752:	f001 f987 	bl	801da64 <_sbrk_r>
 801c756:	3001      	adds	r0, #1
 801c758:	d1f2      	bne.n	801c740 <sbrk_aligned+0x24>
 801c75a:	e7ef      	b.n	801c73c <sbrk_aligned+0x20>
 801c75c:	20003844 	.word	0x20003844

0801c760 <_malloc_r>:
 801c760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c762:	2203      	movs	r2, #3
 801c764:	1ccb      	adds	r3, r1, #3
 801c766:	4393      	bics	r3, r2
 801c768:	3308      	adds	r3, #8
 801c76a:	0005      	movs	r5, r0
 801c76c:	001f      	movs	r7, r3
 801c76e:	2b0c      	cmp	r3, #12
 801c770:	d234      	bcs.n	801c7dc <_malloc_r+0x7c>
 801c772:	270c      	movs	r7, #12
 801c774:	42b9      	cmp	r1, r7
 801c776:	d833      	bhi.n	801c7e0 <_malloc_r+0x80>
 801c778:	0028      	movs	r0, r5
 801c77a:	f000 f883 	bl	801c884 <__malloc_lock>
 801c77e:	4e37      	ldr	r6, [pc, #220]	@ (801c85c <_malloc_r+0xfc>)
 801c780:	6833      	ldr	r3, [r6, #0]
 801c782:	001c      	movs	r4, r3
 801c784:	2c00      	cmp	r4, #0
 801c786:	d12f      	bne.n	801c7e8 <_malloc_r+0x88>
 801c788:	0039      	movs	r1, r7
 801c78a:	0028      	movs	r0, r5
 801c78c:	f7ff ffc6 	bl	801c71c <sbrk_aligned>
 801c790:	0004      	movs	r4, r0
 801c792:	1c43      	adds	r3, r0, #1
 801c794:	d15f      	bne.n	801c856 <_malloc_r+0xf6>
 801c796:	6834      	ldr	r4, [r6, #0]
 801c798:	9400      	str	r4, [sp, #0]
 801c79a:	9b00      	ldr	r3, [sp, #0]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d14a      	bne.n	801c836 <_malloc_r+0xd6>
 801c7a0:	2c00      	cmp	r4, #0
 801c7a2:	d052      	beq.n	801c84a <_malloc_r+0xea>
 801c7a4:	6823      	ldr	r3, [r4, #0]
 801c7a6:	0028      	movs	r0, r5
 801c7a8:	18e3      	adds	r3, r4, r3
 801c7aa:	9900      	ldr	r1, [sp, #0]
 801c7ac:	9301      	str	r3, [sp, #4]
 801c7ae:	f001 f959 	bl	801da64 <_sbrk_r>
 801c7b2:	9b01      	ldr	r3, [sp, #4]
 801c7b4:	4283      	cmp	r3, r0
 801c7b6:	d148      	bne.n	801c84a <_malloc_r+0xea>
 801c7b8:	6823      	ldr	r3, [r4, #0]
 801c7ba:	0028      	movs	r0, r5
 801c7bc:	1aff      	subs	r7, r7, r3
 801c7be:	0039      	movs	r1, r7
 801c7c0:	f7ff ffac 	bl	801c71c <sbrk_aligned>
 801c7c4:	3001      	adds	r0, #1
 801c7c6:	d040      	beq.n	801c84a <_malloc_r+0xea>
 801c7c8:	6823      	ldr	r3, [r4, #0]
 801c7ca:	19db      	adds	r3, r3, r7
 801c7cc:	6023      	str	r3, [r4, #0]
 801c7ce:	6833      	ldr	r3, [r6, #0]
 801c7d0:	685a      	ldr	r2, [r3, #4]
 801c7d2:	2a00      	cmp	r2, #0
 801c7d4:	d133      	bne.n	801c83e <_malloc_r+0xde>
 801c7d6:	9b00      	ldr	r3, [sp, #0]
 801c7d8:	6033      	str	r3, [r6, #0]
 801c7da:	e019      	b.n	801c810 <_malloc_r+0xb0>
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	dac9      	bge.n	801c774 <_malloc_r+0x14>
 801c7e0:	230c      	movs	r3, #12
 801c7e2:	602b      	str	r3, [r5, #0]
 801c7e4:	2000      	movs	r0, #0
 801c7e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c7e8:	6821      	ldr	r1, [r4, #0]
 801c7ea:	1bc9      	subs	r1, r1, r7
 801c7ec:	d420      	bmi.n	801c830 <_malloc_r+0xd0>
 801c7ee:	290b      	cmp	r1, #11
 801c7f0:	d90a      	bls.n	801c808 <_malloc_r+0xa8>
 801c7f2:	19e2      	adds	r2, r4, r7
 801c7f4:	6027      	str	r7, [r4, #0]
 801c7f6:	42a3      	cmp	r3, r4
 801c7f8:	d104      	bne.n	801c804 <_malloc_r+0xa4>
 801c7fa:	6032      	str	r2, [r6, #0]
 801c7fc:	6863      	ldr	r3, [r4, #4]
 801c7fe:	6011      	str	r1, [r2, #0]
 801c800:	6053      	str	r3, [r2, #4]
 801c802:	e005      	b.n	801c810 <_malloc_r+0xb0>
 801c804:	605a      	str	r2, [r3, #4]
 801c806:	e7f9      	b.n	801c7fc <_malloc_r+0x9c>
 801c808:	6862      	ldr	r2, [r4, #4]
 801c80a:	42a3      	cmp	r3, r4
 801c80c:	d10e      	bne.n	801c82c <_malloc_r+0xcc>
 801c80e:	6032      	str	r2, [r6, #0]
 801c810:	0028      	movs	r0, r5
 801c812:	f000 f83f 	bl	801c894 <__malloc_unlock>
 801c816:	0020      	movs	r0, r4
 801c818:	2207      	movs	r2, #7
 801c81a:	300b      	adds	r0, #11
 801c81c:	1d23      	adds	r3, r4, #4
 801c81e:	4390      	bics	r0, r2
 801c820:	1ac2      	subs	r2, r0, r3
 801c822:	4298      	cmp	r0, r3
 801c824:	d0df      	beq.n	801c7e6 <_malloc_r+0x86>
 801c826:	1a1b      	subs	r3, r3, r0
 801c828:	50a3      	str	r3, [r4, r2]
 801c82a:	e7dc      	b.n	801c7e6 <_malloc_r+0x86>
 801c82c:	605a      	str	r2, [r3, #4]
 801c82e:	e7ef      	b.n	801c810 <_malloc_r+0xb0>
 801c830:	0023      	movs	r3, r4
 801c832:	6864      	ldr	r4, [r4, #4]
 801c834:	e7a6      	b.n	801c784 <_malloc_r+0x24>
 801c836:	9c00      	ldr	r4, [sp, #0]
 801c838:	6863      	ldr	r3, [r4, #4]
 801c83a:	9300      	str	r3, [sp, #0]
 801c83c:	e7ad      	b.n	801c79a <_malloc_r+0x3a>
 801c83e:	001a      	movs	r2, r3
 801c840:	685b      	ldr	r3, [r3, #4]
 801c842:	42a3      	cmp	r3, r4
 801c844:	d1fb      	bne.n	801c83e <_malloc_r+0xde>
 801c846:	2300      	movs	r3, #0
 801c848:	e7da      	b.n	801c800 <_malloc_r+0xa0>
 801c84a:	230c      	movs	r3, #12
 801c84c:	0028      	movs	r0, r5
 801c84e:	602b      	str	r3, [r5, #0]
 801c850:	f000 f820 	bl	801c894 <__malloc_unlock>
 801c854:	e7c6      	b.n	801c7e4 <_malloc_r+0x84>
 801c856:	6007      	str	r7, [r0, #0]
 801c858:	e7da      	b.n	801c810 <_malloc_r+0xb0>
 801c85a:	46c0      	nop			@ (mov r8, r8)
 801c85c:	20003848 	.word	0x20003848

0801c860 <__ascii_mbtowc>:
 801c860:	b082      	sub	sp, #8
 801c862:	2900      	cmp	r1, #0
 801c864:	d100      	bne.n	801c868 <__ascii_mbtowc+0x8>
 801c866:	a901      	add	r1, sp, #4
 801c868:	1e10      	subs	r0, r2, #0
 801c86a:	d006      	beq.n	801c87a <__ascii_mbtowc+0x1a>
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d006      	beq.n	801c87e <__ascii_mbtowc+0x1e>
 801c870:	7813      	ldrb	r3, [r2, #0]
 801c872:	600b      	str	r3, [r1, #0]
 801c874:	7810      	ldrb	r0, [r2, #0]
 801c876:	1e43      	subs	r3, r0, #1
 801c878:	4198      	sbcs	r0, r3
 801c87a:	b002      	add	sp, #8
 801c87c:	4770      	bx	lr
 801c87e:	2002      	movs	r0, #2
 801c880:	4240      	negs	r0, r0
 801c882:	e7fa      	b.n	801c87a <__ascii_mbtowc+0x1a>

0801c884 <__malloc_lock>:
 801c884:	b510      	push	{r4, lr}
 801c886:	4802      	ldr	r0, [pc, #8]	@ (801c890 <__malloc_lock+0xc>)
 801c888:	f7fe fcfb 	bl	801b282 <__retarget_lock_acquire_recursive>
 801c88c:	bd10      	pop	{r4, pc}
 801c88e:	46c0      	nop			@ (mov r8, r8)
 801c890:	20003840 	.word	0x20003840

0801c894 <__malloc_unlock>:
 801c894:	b510      	push	{r4, lr}
 801c896:	4802      	ldr	r0, [pc, #8]	@ (801c8a0 <__malloc_unlock+0xc>)
 801c898:	f7fe fcf4 	bl	801b284 <__retarget_lock_release_recursive>
 801c89c:	bd10      	pop	{r4, pc}
 801c89e:	46c0      	nop			@ (mov r8, r8)
 801c8a0:	20003840 	.word	0x20003840

0801c8a4 <_Balloc>:
 801c8a4:	b570      	push	{r4, r5, r6, lr}
 801c8a6:	69c5      	ldr	r5, [r0, #28]
 801c8a8:	0006      	movs	r6, r0
 801c8aa:	000c      	movs	r4, r1
 801c8ac:	2d00      	cmp	r5, #0
 801c8ae:	d10e      	bne.n	801c8ce <_Balloc+0x2a>
 801c8b0:	2010      	movs	r0, #16
 801c8b2:	f7ff ff29 	bl	801c708 <malloc>
 801c8b6:	1e02      	subs	r2, r0, #0
 801c8b8:	61f0      	str	r0, [r6, #28]
 801c8ba:	d104      	bne.n	801c8c6 <_Balloc+0x22>
 801c8bc:	216b      	movs	r1, #107	@ 0x6b
 801c8be:	4b19      	ldr	r3, [pc, #100]	@ (801c924 <_Balloc+0x80>)
 801c8c0:	4819      	ldr	r0, [pc, #100]	@ (801c928 <_Balloc+0x84>)
 801c8c2:	f001 f8e1 	bl	801da88 <__assert_func>
 801c8c6:	6045      	str	r5, [r0, #4]
 801c8c8:	6085      	str	r5, [r0, #8]
 801c8ca:	6005      	str	r5, [r0, #0]
 801c8cc:	60c5      	str	r5, [r0, #12]
 801c8ce:	69f5      	ldr	r5, [r6, #28]
 801c8d0:	68eb      	ldr	r3, [r5, #12]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d013      	beq.n	801c8fe <_Balloc+0x5a>
 801c8d6:	69f3      	ldr	r3, [r6, #28]
 801c8d8:	00a2      	lsls	r2, r4, #2
 801c8da:	68db      	ldr	r3, [r3, #12]
 801c8dc:	189b      	adds	r3, r3, r2
 801c8de:	6818      	ldr	r0, [r3, #0]
 801c8e0:	2800      	cmp	r0, #0
 801c8e2:	d118      	bne.n	801c916 <_Balloc+0x72>
 801c8e4:	2101      	movs	r1, #1
 801c8e6:	000d      	movs	r5, r1
 801c8e8:	40a5      	lsls	r5, r4
 801c8ea:	1d6a      	adds	r2, r5, #5
 801c8ec:	0030      	movs	r0, r6
 801c8ee:	0092      	lsls	r2, r2, #2
 801c8f0:	f001 f8e8 	bl	801dac4 <_calloc_r>
 801c8f4:	2800      	cmp	r0, #0
 801c8f6:	d00c      	beq.n	801c912 <_Balloc+0x6e>
 801c8f8:	6044      	str	r4, [r0, #4]
 801c8fa:	6085      	str	r5, [r0, #8]
 801c8fc:	e00d      	b.n	801c91a <_Balloc+0x76>
 801c8fe:	2221      	movs	r2, #33	@ 0x21
 801c900:	2104      	movs	r1, #4
 801c902:	0030      	movs	r0, r6
 801c904:	f001 f8de 	bl	801dac4 <_calloc_r>
 801c908:	69f3      	ldr	r3, [r6, #28]
 801c90a:	60e8      	str	r0, [r5, #12]
 801c90c:	68db      	ldr	r3, [r3, #12]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d1e1      	bne.n	801c8d6 <_Balloc+0x32>
 801c912:	2000      	movs	r0, #0
 801c914:	bd70      	pop	{r4, r5, r6, pc}
 801c916:	6802      	ldr	r2, [r0, #0]
 801c918:	601a      	str	r2, [r3, #0]
 801c91a:	2300      	movs	r3, #0
 801c91c:	6103      	str	r3, [r0, #16]
 801c91e:	60c3      	str	r3, [r0, #12]
 801c920:	e7f8      	b.n	801c914 <_Balloc+0x70>
 801c922:	46c0      	nop			@ (mov r8, r8)
 801c924:	0801f819 	.word	0x0801f819
 801c928:	0801f8f9 	.word	0x0801f8f9

0801c92c <_Bfree>:
 801c92c:	b570      	push	{r4, r5, r6, lr}
 801c92e:	69c6      	ldr	r6, [r0, #28]
 801c930:	0005      	movs	r5, r0
 801c932:	000c      	movs	r4, r1
 801c934:	2e00      	cmp	r6, #0
 801c936:	d10e      	bne.n	801c956 <_Bfree+0x2a>
 801c938:	2010      	movs	r0, #16
 801c93a:	f7ff fee5 	bl	801c708 <malloc>
 801c93e:	1e02      	subs	r2, r0, #0
 801c940:	61e8      	str	r0, [r5, #28]
 801c942:	d104      	bne.n	801c94e <_Bfree+0x22>
 801c944:	218f      	movs	r1, #143	@ 0x8f
 801c946:	4b09      	ldr	r3, [pc, #36]	@ (801c96c <_Bfree+0x40>)
 801c948:	4809      	ldr	r0, [pc, #36]	@ (801c970 <_Bfree+0x44>)
 801c94a:	f001 f89d 	bl	801da88 <__assert_func>
 801c94e:	6046      	str	r6, [r0, #4]
 801c950:	6086      	str	r6, [r0, #8]
 801c952:	6006      	str	r6, [r0, #0]
 801c954:	60c6      	str	r6, [r0, #12]
 801c956:	2c00      	cmp	r4, #0
 801c958:	d007      	beq.n	801c96a <_Bfree+0x3e>
 801c95a:	69eb      	ldr	r3, [r5, #28]
 801c95c:	6862      	ldr	r2, [r4, #4]
 801c95e:	68db      	ldr	r3, [r3, #12]
 801c960:	0092      	lsls	r2, r2, #2
 801c962:	189b      	adds	r3, r3, r2
 801c964:	681a      	ldr	r2, [r3, #0]
 801c966:	6022      	str	r2, [r4, #0]
 801c968:	601c      	str	r4, [r3, #0]
 801c96a:	bd70      	pop	{r4, r5, r6, pc}
 801c96c:	0801f819 	.word	0x0801f819
 801c970:	0801f8f9 	.word	0x0801f8f9

0801c974 <__multadd>:
 801c974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c976:	000f      	movs	r7, r1
 801c978:	9001      	str	r0, [sp, #4]
 801c97a:	000c      	movs	r4, r1
 801c97c:	001e      	movs	r6, r3
 801c97e:	2000      	movs	r0, #0
 801c980:	690d      	ldr	r5, [r1, #16]
 801c982:	3714      	adds	r7, #20
 801c984:	683b      	ldr	r3, [r7, #0]
 801c986:	3001      	adds	r0, #1
 801c988:	b299      	uxth	r1, r3
 801c98a:	4351      	muls	r1, r2
 801c98c:	0c1b      	lsrs	r3, r3, #16
 801c98e:	4353      	muls	r3, r2
 801c990:	1989      	adds	r1, r1, r6
 801c992:	0c0e      	lsrs	r6, r1, #16
 801c994:	199b      	adds	r3, r3, r6
 801c996:	0c1e      	lsrs	r6, r3, #16
 801c998:	b289      	uxth	r1, r1
 801c99a:	041b      	lsls	r3, r3, #16
 801c99c:	185b      	adds	r3, r3, r1
 801c99e:	c708      	stmia	r7!, {r3}
 801c9a0:	4285      	cmp	r5, r0
 801c9a2:	dcef      	bgt.n	801c984 <__multadd+0x10>
 801c9a4:	2e00      	cmp	r6, #0
 801c9a6:	d022      	beq.n	801c9ee <__multadd+0x7a>
 801c9a8:	68a3      	ldr	r3, [r4, #8]
 801c9aa:	42ab      	cmp	r3, r5
 801c9ac:	dc19      	bgt.n	801c9e2 <__multadd+0x6e>
 801c9ae:	6861      	ldr	r1, [r4, #4]
 801c9b0:	9801      	ldr	r0, [sp, #4]
 801c9b2:	3101      	adds	r1, #1
 801c9b4:	f7ff ff76 	bl	801c8a4 <_Balloc>
 801c9b8:	1e07      	subs	r7, r0, #0
 801c9ba:	d105      	bne.n	801c9c8 <__multadd+0x54>
 801c9bc:	003a      	movs	r2, r7
 801c9be:	21ba      	movs	r1, #186	@ 0xba
 801c9c0:	4b0c      	ldr	r3, [pc, #48]	@ (801c9f4 <__multadd+0x80>)
 801c9c2:	480d      	ldr	r0, [pc, #52]	@ (801c9f8 <__multadd+0x84>)
 801c9c4:	f001 f860 	bl	801da88 <__assert_func>
 801c9c8:	0021      	movs	r1, r4
 801c9ca:	6922      	ldr	r2, [r4, #16]
 801c9cc:	310c      	adds	r1, #12
 801c9ce:	3202      	adds	r2, #2
 801c9d0:	0092      	lsls	r2, r2, #2
 801c9d2:	300c      	adds	r0, #12
 801c9d4:	f7fe fc62 	bl	801b29c <memcpy>
 801c9d8:	0021      	movs	r1, r4
 801c9da:	9801      	ldr	r0, [sp, #4]
 801c9dc:	f7ff ffa6 	bl	801c92c <_Bfree>
 801c9e0:	003c      	movs	r4, r7
 801c9e2:	1d2b      	adds	r3, r5, #4
 801c9e4:	009b      	lsls	r3, r3, #2
 801c9e6:	18e3      	adds	r3, r4, r3
 801c9e8:	3501      	adds	r5, #1
 801c9ea:	605e      	str	r6, [r3, #4]
 801c9ec:	6125      	str	r5, [r4, #16]
 801c9ee:	0020      	movs	r0, r4
 801c9f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c9f2:	46c0      	nop			@ (mov r8, r8)
 801c9f4:	0801f888 	.word	0x0801f888
 801c9f8:	0801f8f9 	.word	0x0801f8f9

0801c9fc <__s2b>:
 801c9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9fe:	0007      	movs	r7, r0
 801ca00:	0018      	movs	r0, r3
 801ca02:	000c      	movs	r4, r1
 801ca04:	3008      	adds	r0, #8
 801ca06:	2109      	movs	r1, #9
 801ca08:	9301      	str	r3, [sp, #4]
 801ca0a:	0015      	movs	r5, r2
 801ca0c:	f7e3 fc4a 	bl	80002a4 <__divsi3>
 801ca10:	2301      	movs	r3, #1
 801ca12:	2100      	movs	r1, #0
 801ca14:	4283      	cmp	r3, r0
 801ca16:	db0a      	blt.n	801ca2e <__s2b+0x32>
 801ca18:	0038      	movs	r0, r7
 801ca1a:	f7ff ff43 	bl	801c8a4 <_Balloc>
 801ca1e:	1e01      	subs	r1, r0, #0
 801ca20:	d108      	bne.n	801ca34 <__s2b+0x38>
 801ca22:	000a      	movs	r2, r1
 801ca24:	4b19      	ldr	r3, [pc, #100]	@ (801ca8c <__s2b+0x90>)
 801ca26:	481a      	ldr	r0, [pc, #104]	@ (801ca90 <__s2b+0x94>)
 801ca28:	31d3      	adds	r1, #211	@ 0xd3
 801ca2a:	f001 f82d 	bl	801da88 <__assert_func>
 801ca2e:	005b      	lsls	r3, r3, #1
 801ca30:	3101      	adds	r1, #1
 801ca32:	e7ef      	b.n	801ca14 <__s2b+0x18>
 801ca34:	9b08      	ldr	r3, [sp, #32]
 801ca36:	6143      	str	r3, [r0, #20]
 801ca38:	2301      	movs	r3, #1
 801ca3a:	6103      	str	r3, [r0, #16]
 801ca3c:	2d09      	cmp	r5, #9
 801ca3e:	dd18      	ble.n	801ca72 <__s2b+0x76>
 801ca40:	0023      	movs	r3, r4
 801ca42:	3309      	adds	r3, #9
 801ca44:	001e      	movs	r6, r3
 801ca46:	9300      	str	r3, [sp, #0]
 801ca48:	1964      	adds	r4, r4, r5
 801ca4a:	7833      	ldrb	r3, [r6, #0]
 801ca4c:	220a      	movs	r2, #10
 801ca4e:	0038      	movs	r0, r7
 801ca50:	3b30      	subs	r3, #48	@ 0x30
 801ca52:	f7ff ff8f 	bl	801c974 <__multadd>
 801ca56:	3601      	adds	r6, #1
 801ca58:	0001      	movs	r1, r0
 801ca5a:	42a6      	cmp	r6, r4
 801ca5c:	d1f5      	bne.n	801ca4a <__s2b+0x4e>
 801ca5e:	002c      	movs	r4, r5
 801ca60:	9b00      	ldr	r3, [sp, #0]
 801ca62:	3c08      	subs	r4, #8
 801ca64:	191c      	adds	r4, r3, r4
 801ca66:	002e      	movs	r6, r5
 801ca68:	9b01      	ldr	r3, [sp, #4]
 801ca6a:	429e      	cmp	r6, r3
 801ca6c:	db04      	blt.n	801ca78 <__s2b+0x7c>
 801ca6e:	0008      	movs	r0, r1
 801ca70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ca72:	2509      	movs	r5, #9
 801ca74:	340a      	adds	r4, #10
 801ca76:	e7f6      	b.n	801ca66 <__s2b+0x6a>
 801ca78:	1b63      	subs	r3, r4, r5
 801ca7a:	5d9b      	ldrb	r3, [r3, r6]
 801ca7c:	220a      	movs	r2, #10
 801ca7e:	0038      	movs	r0, r7
 801ca80:	3b30      	subs	r3, #48	@ 0x30
 801ca82:	f7ff ff77 	bl	801c974 <__multadd>
 801ca86:	3601      	adds	r6, #1
 801ca88:	0001      	movs	r1, r0
 801ca8a:	e7ed      	b.n	801ca68 <__s2b+0x6c>
 801ca8c:	0801f888 	.word	0x0801f888
 801ca90:	0801f8f9 	.word	0x0801f8f9

0801ca94 <__hi0bits>:
 801ca94:	2280      	movs	r2, #128	@ 0x80
 801ca96:	0003      	movs	r3, r0
 801ca98:	0252      	lsls	r2, r2, #9
 801ca9a:	2000      	movs	r0, #0
 801ca9c:	4293      	cmp	r3, r2
 801ca9e:	d201      	bcs.n	801caa4 <__hi0bits+0x10>
 801caa0:	041b      	lsls	r3, r3, #16
 801caa2:	3010      	adds	r0, #16
 801caa4:	2280      	movs	r2, #128	@ 0x80
 801caa6:	0452      	lsls	r2, r2, #17
 801caa8:	4293      	cmp	r3, r2
 801caaa:	d201      	bcs.n	801cab0 <__hi0bits+0x1c>
 801caac:	3008      	adds	r0, #8
 801caae:	021b      	lsls	r3, r3, #8
 801cab0:	2280      	movs	r2, #128	@ 0x80
 801cab2:	0552      	lsls	r2, r2, #21
 801cab4:	4293      	cmp	r3, r2
 801cab6:	d201      	bcs.n	801cabc <__hi0bits+0x28>
 801cab8:	3004      	adds	r0, #4
 801caba:	011b      	lsls	r3, r3, #4
 801cabc:	2280      	movs	r2, #128	@ 0x80
 801cabe:	05d2      	lsls	r2, r2, #23
 801cac0:	4293      	cmp	r3, r2
 801cac2:	d201      	bcs.n	801cac8 <__hi0bits+0x34>
 801cac4:	3002      	adds	r0, #2
 801cac6:	009b      	lsls	r3, r3, #2
 801cac8:	2b00      	cmp	r3, #0
 801caca:	db03      	blt.n	801cad4 <__hi0bits+0x40>
 801cacc:	3001      	adds	r0, #1
 801cace:	4213      	tst	r3, r2
 801cad0:	d100      	bne.n	801cad4 <__hi0bits+0x40>
 801cad2:	2020      	movs	r0, #32
 801cad4:	4770      	bx	lr

0801cad6 <__lo0bits>:
 801cad6:	6803      	ldr	r3, [r0, #0]
 801cad8:	0001      	movs	r1, r0
 801cada:	2207      	movs	r2, #7
 801cadc:	0018      	movs	r0, r3
 801cade:	4010      	ands	r0, r2
 801cae0:	4213      	tst	r3, r2
 801cae2:	d00d      	beq.n	801cb00 <__lo0bits+0x2a>
 801cae4:	3a06      	subs	r2, #6
 801cae6:	2000      	movs	r0, #0
 801cae8:	4213      	tst	r3, r2
 801caea:	d105      	bne.n	801caf8 <__lo0bits+0x22>
 801caec:	3002      	adds	r0, #2
 801caee:	4203      	tst	r3, r0
 801caf0:	d003      	beq.n	801cafa <__lo0bits+0x24>
 801caf2:	40d3      	lsrs	r3, r2
 801caf4:	0010      	movs	r0, r2
 801caf6:	600b      	str	r3, [r1, #0]
 801caf8:	4770      	bx	lr
 801cafa:	089b      	lsrs	r3, r3, #2
 801cafc:	600b      	str	r3, [r1, #0]
 801cafe:	e7fb      	b.n	801caf8 <__lo0bits+0x22>
 801cb00:	b29a      	uxth	r2, r3
 801cb02:	2a00      	cmp	r2, #0
 801cb04:	d101      	bne.n	801cb0a <__lo0bits+0x34>
 801cb06:	2010      	movs	r0, #16
 801cb08:	0c1b      	lsrs	r3, r3, #16
 801cb0a:	b2da      	uxtb	r2, r3
 801cb0c:	2a00      	cmp	r2, #0
 801cb0e:	d101      	bne.n	801cb14 <__lo0bits+0x3e>
 801cb10:	3008      	adds	r0, #8
 801cb12:	0a1b      	lsrs	r3, r3, #8
 801cb14:	071a      	lsls	r2, r3, #28
 801cb16:	d101      	bne.n	801cb1c <__lo0bits+0x46>
 801cb18:	3004      	adds	r0, #4
 801cb1a:	091b      	lsrs	r3, r3, #4
 801cb1c:	079a      	lsls	r2, r3, #30
 801cb1e:	d101      	bne.n	801cb24 <__lo0bits+0x4e>
 801cb20:	3002      	adds	r0, #2
 801cb22:	089b      	lsrs	r3, r3, #2
 801cb24:	07da      	lsls	r2, r3, #31
 801cb26:	d4e9      	bmi.n	801cafc <__lo0bits+0x26>
 801cb28:	3001      	adds	r0, #1
 801cb2a:	085b      	lsrs	r3, r3, #1
 801cb2c:	d1e6      	bne.n	801cafc <__lo0bits+0x26>
 801cb2e:	2020      	movs	r0, #32
 801cb30:	e7e2      	b.n	801caf8 <__lo0bits+0x22>
	...

0801cb34 <__i2b>:
 801cb34:	b510      	push	{r4, lr}
 801cb36:	000c      	movs	r4, r1
 801cb38:	2101      	movs	r1, #1
 801cb3a:	f7ff feb3 	bl	801c8a4 <_Balloc>
 801cb3e:	2800      	cmp	r0, #0
 801cb40:	d107      	bne.n	801cb52 <__i2b+0x1e>
 801cb42:	2146      	movs	r1, #70	@ 0x46
 801cb44:	4c05      	ldr	r4, [pc, #20]	@ (801cb5c <__i2b+0x28>)
 801cb46:	0002      	movs	r2, r0
 801cb48:	4b05      	ldr	r3, [pc, #20]	@ (801cb60 <__i2b+0x2c>)
 801cb4a:	0020      	movs	r0, r4
 801cb4c:	31ff      	adds	r1, #255	@ 0xff
 801cb4e:	f000 ff9b 	bl	801da88 <__assert_func>
 801cb52:	2301      	movs	r3, #1
 801cb54:	6144      	str	r4, [r0, #20]
 801cb56:	6103      	str	r3, [r0, #16]
 801cb58:	bd10      	pop	{r4, pc}
 801cb5a:	46c0      	nop			@ (mov r8, r8)
 801cb5c:	0801f8f9 	.word	0x0801f8f9
 801cb60:	0801f888 	.word	0x0801f888

0801cb64 <__multiply>:
 801cb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb66:	0014      	movs	r4, r2
 801cb68:	690a      	ldr	r2, [r1, #16]
 801cb6a:	6923      	ldr	r3, [r4, #16]
 801cb6c:	000d      	movs	r5, r1
 801cb6e:	b08b      	sub	sp, #44	@ 0x2c
 801cb70:	429a      	cmp	r2, r3
 801cb72:	db02      	blt.n	801cb7a <__multiply+0x16>
 801cb74:	0023      	movs	r3, r4
 801cb76:	000c      	movs	r4, r1
 801cb78:	001d      	movs	r5, r3
 801cb7a:	6927      	ldr	r7, [r4, #16]
 801cb7c:	692e      	ldr	r6, [r5, #16]
 801cb7e:	6861      	ldr	r1, [r4, #4]
 801cb80:	19bb      	adds	r3, r7, r6
 801cb82:	9303      	str	r3, [sp, #12]
 801cb84:	68a3      	ldr	r3, [r4, #8]
 801cb86:	19ba      	adds	r2, r7, r6
 801cb88:	4293      	cmp	r3, r2
 801cb8a:	da00      	bge.n	801cb8e <__multiply+0x2a>
 801cb8c:	3101      	adds	r1, #1
 801cb8e:	f7ff fe89 	bl	801c8a4 <_Balloc>
 801cb92:	9002      	str	r0, [sp, #8]
 801cb94:	2800      	cmp	r0, #0
 801cb96:	d106      	bne.n	801cba6 <__multiply+0x42>
 801cb98:	21b1      	movs	r1, #177	@ 0xb1
 801cb9a:	4b49      	ldr	r3, [pc, #292]	@ (801ccc0 <__multiply+0x15c>)
 801cb9c:	4849      	ldr	r0, [pc, #292]	@ (801ccc4 <__multiply+0x160>)
 801cb9e:	9a02      	ldr	r2, [sp, #8]
 801cba0:	0049      	lsls	r1, r1, #1
 801cba2:	f000 ff71 	bl	801da88 <__assert_func>
 801cba6:	9b02      	ldr	r3, [sp, #8]
 801cba8:	2200      	movs	r2, #0
 801cbaa:	3314      	adds	r3, #20
 801cbac:	469c      	mov	ip, r3
 801cbae:	19bb      	adds	r3, r7, r6
 801cbb0:	009b      	lsls	r3, r3, #2
 801cbb2:	4463      	add	r3, ip
 801cbb4:	9304      	str	r3, [sp, #16]
 801cbb6:	4663      	mov	r3, ip
 801cbb8:	9904      	ldr	r1, [sp, #16]
 801cbba:	428b      	cmp	r3, r1
 801cbbc:	d32a      	bcc.n	801cc14 <__multiply+0xb0>
 801cbbe:	0023      	movs	r3, r4
 801cbc0:	00bf      	lsls	r7, r7, #2
 801cbc2:	3314      	adds	r3, #20
 801cbc4:	3514      	adds	r5, #20
 801cbc6:	9308      	str	r3, [sp, #32]
 801cbc8:	00b6      	lsls	r6, r6, #2
 801cbca:	19db      	adds	r3, r3, r7
 801cbcc:	9305      	str	r3, [sp, #20]
 801cbce:	19ab      	adds	r3, r5, r6
 801cbd0:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbd2:	2304      	movs	r3, #4
 801cbd4:	9306      	str	r3, [sp, #24]
 801cbd6:	0023      	movs	r3, r4
 801cbd8:	9a05      	ldr	r2, [sp, #20]
 801cbda:	3315      	adds	r3, #21
 801cbdc:	9501      	str	r5, [sp, #4]
 801cbde:	429a      	cmp	r2, r3
 801cbe0:	d305      	bcc.n	801cbee <__multiply+0x8a>
 801cbe2:	1b13      	subs	r3, r2, r4
 801cbe4:	3b15      	subs	r3, #21
 801cbe6:	089b      	lsrs	r3, r3, #2
 801cbe8:	3301      	adds	r3, #1
 801cbea:	009b      	lsls	r3, r3, #2
 801cbec:	9306      	str	r3, [sp, #24]
 801cbee:	9b01      	ldr	r3, [sp, #4]
 801cbf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cbf2:	4293      	cmp	r3, r2
 801cbf4:	d310      	bcc.n	801cc18 <__multiply+0xb4>
 801cbf6:	9b03      	ldr	r3, [sp, #12]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	dd05      	ble.n	801cc08 <__multiply+0xa4>
 801cbfc:	9b04      	ldr	r3, [sp, #16]
 801cbfe:	3b04      	subs	r3, #4
 801cc00:	9304      	str	r3, [sp, #16]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d056      	beq.n	801ccb6 <__multiply+0x152>
 801cc08:	9b02      	ldr	r3, [sp, #8]
 801cc0a:	9a03      	ldr	r2, [sp, #12]
 801cc0c:	0018      	movs	r0, r3
 801cc0e:	611a      	str	r2, [r3, #16]
 801cc10:	b00b      	add	sp, #44	@ 0x2c
 801cc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc14:	c304      	stmia	r3!, {r2}
 801cc16:	e7cf      	b.n	801cbb8 <__multiply+0x54>
 801cc18:	9b01      	ldr	r3, [sp, #4]
 801cc1a:	6818      	ldr	r0, [r3, #0]
 801cc1c:	b280      	uxth	r0, r0
 801cc1e:	2800      	cmp	r0, #0
 801cc20:	d01e      	beq.n	801cc60 <__multiply+0xfc>
 801cc22:	4667      	mov	r7, ip
 801cc24:	2500      	movs	r5, #0
 801cc26:	9e08      	ldr	r6, [sp, #32]
 801cc28:	ce02      	ldmia	r6!, {r1}
 801cc2a:	683b      	ldr	r3, [r7, #0]
 801cc2c:	9307      	str	r3, [sp, #28]
 801cc2e:	b28b      	uxth	r3, r1
 801cc30:	4343      	muls	r3, r0
 801cc32:	001a      	movs	r2, r3
 801cc34:	466b      	mov	r3, sp
 801cc36:	0c09      	lsrs	r1, r1, #16
 801cc38:	8b9b      	ldrh	r3, [r3, #28]
 801cc3a:	4341      	muls	r1, r0
 801cc3c:	18d3      	adds	r3, r2, r3
 801cc3e:	9a07      	ldr	r2, [sp, #28]
 801cc40:	195b      	adds	r3, r3, r5
 801cc42:	0c12      	lsrs	r2, r2, #16
 801cc44:	1889      	adds	r1, r1, r2
 801cc46:	0c1a      	lsrs	r2, r3, #16
 801cc48:	188a      	adds	r2, r1, r2
 801cc4a:	b29b      	uxth	r3, r3
 801cc4c:	0c15      	lsrs	r5, r2, #16
 801cc4e:	0412      	lsls	r2, r2, #16
 801cc50:	431a      	orrs	r2, r3
 801cc52:	9b05      	ldr	r3, [sp, #20]
 801cc54:	c704      	stmia	r7!, {r2}
 801cc56:	42b3      	cmp	r3, r6
 801cc58:	d8e6      	bhi.n	801cc28 <__multiply+0xc4>
 801cc5a:	4663      	mov	r3, ip
 801cc5c:	9a06      	ldr	r2, [sp, #24]
 801cc5e:	509d      	str	r5, [r3, r2]
 801cc60:	9b01      	ldr	r3, [sp, #4]
 801cc62:	6818      	ldr	r0, [r3, #0]
 801cc64:	0c00      	lsrs	r0, r0, #16
 801cc66:	d020      	beq.n	801ccaa <__multiply+0x146>
 801cc68:	4663      	mov	r3, ip
 801cc6a:	0025      	movs	r5, r4
 801cc6c:	4661      	mov	r1, ip
 801cc6e:	2700      	movs	r7, #0
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	3514      	adds	r5, #20
 801cc74:	682a      	ldr	r2, [r5, #0]
 801cc76:	680e      	ldr	r6, [r1, #0]
 801cc78:	b292      	uxth	r2, r2
 801cc7a:	4342      	muls	r2, r0
 801cc7c:	0c36      	lsrs	r6, r6, #16
 801cc7e:	1992      	adds	r2, r2, r6
 801cc80:	19d2      	adds	r2, r2, r7
 801cc82:	0416      	lsls	r6, r2, #16
 801cc84:	b29b      	uxth	r3, r3
 801cc86:	431e      	orrs	r6, r3
 801cc88:	600e      	str	r6, [r1, #0]
 801cc8a:	cd40      	ldmia	r5!, {r6}
 801cc8c:	684b      	ldr	r3, [r1, #4]
 801cc8e:	0c36      	lsrs	r6, r6, #16
 801cc90:	4346      	muls	r6, r0
 801cc92:	b29b      	uxth	r3, r3
 801cc94:	0c12      	lsrs	r2, r2, #16
 801cc96:	18f3      	adds	r3, r6, r3
 801cc98:	189b      	adds	r3, r3, r2
 801cc9a:	9a05      	ldr	r2, [sp, #20]
 801cc9c:	0c1f      	lsrs	r7, r3, #16
 801cc9e:	3104      	adds	r1, #4
 801cca0:	42aa      	cmp	r2, r5
 801cca2:	d8e7      	bhi.n	801cc74 <__multiply+0x110>
 801cca4:	4662      	mov	r2, ip
 801cca6:	9906      	ldr	r1, [sp, #24]
 801cca8:	5053      	str	r3, [r2, r1]
 801ccaa:	9b01      	ldr	r3, [sp, #4]
 801ccac:	3304      	adds	r3, #4
 801ccae:	9301      	str	r3, [sp, #4]
 801ccb0:	2304      	movs	r3, #4
 801ccb2:	449c      	add	ip, r3
 801ccb4:	e79b      	b.n	801cbee <__multiply+0x8a>
 801ccb6:	9b03      	ldr	r3, [sp, #12]
 801ccb8:	3b01      	subs	r3, #1
 801ccba:	9303      	str	r3, [sp, #12]
 801ccbc:	e79b      	b.n	801cbf6 <__multiply+0x92>
 801ccbe:	46c0      	nop			@ (mov r8, r8)
 801ccc0:	0801f888 	.word	0x0801f888
 801ccc4:	0801f8f9 	.word	0x0801f8f9

0801ccc8 <__pow5mult>:
 801ccc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ccca:	2303      	movs	r3, #3
 801cccc:	0015      	movs	r5, r2
 801ccce:	0007      	movs	r7, r0
 801ccd0:	000e      	movs	r6, r1
 801ccd2:	401a      	ands	r2, r3
 801ccd4:	421d      	tst	r5, r3
 801ccd6:	d008      	beq.n	801ccea <__pow5mult+0x22>
 801ccd8:	4925      	ldr	r1, [pc, #148]	@ (801cd70 <__pow5mult+0xa8>)
 801ccda:	3a01      	subs	r2, #1
 801ccdc:	0092      	lsls	r2, r2, #2
 801ccde:	5852      	ldr	r2, [r2, r1]
 801cce0:	2300      	movs	r3, #0
 801cce2:	0031      	movs	r1, r6
 801cce4:	f7ff fe46 	bl	801c974 <__multadd>
 801cce8:	0006      	movs	r6, r0
 801ccea:	10ad      	asrs	r5, r5, #2
 801ccec:	d03d      	beq.n	801cd6a <__pow5mult+0xa2>
 801ccee:	69fc      	ldr	r4, [r7, #28]
 801ccf0:	2c00      	cmp	r4, #0
 801ccf2:	d10f      	bne.n	801cd14 <__pow5mult+0x4c>
 801ccf4:	2010      	movs	r0, #16
 801ccf6:	f7ff fd07 	bl	801c708 <malloc>
 801ccfa:	1e02      	subs	r2, r0, #0
 801ccfc:	61f8      	str	r0, [r7, #28]
 801ccfe:	d105      	bne.n	801cd0c <__pow5mult+0x44>
 801cd00:	21b4      	movs	r1, #180	@ 0xb4
 801cd02:	4b1c      	ldr	r3, [pc, #112]	@ (801cd74 <__pow5mult+0xac>)
 801cd04:	481c      	ldr	r0, [pc, #112]	@ (801cd78 <__pow5mult+0xb0>)
 801cd06:	31ff      	adds	r1, #255	@ 0xff
 801cd08:	f000 febe 	bl	801da88 <__assert_func>
 801cd0c:	6044      	str	r4, [r0, #4]
 801cd0e:	6084      	str	r4, [r0, #8]
 801cd10:	6004      	str	r4, [r0, #0]
 801cd12:	60c4      	str	r4, [r0, #12]
 801cd14:	69fb      	ldr	r3, [r7, #28]
 801cd16:	689c      	ldr	r4, [r3, #8]
 801cd18:	9301      	str	r3, [sp, #4]
 801cd1a:	2c00      	cmp	r4, #0
 801cd1c:	d108      	bne.n	801cd30 <__pow5mult+0x68>
 801cd1e:	0038      	movs	r0, r7
 801cd20:	4916      	ldr	r1, [pc, #88]	@ (801cd7c <__pow5mult+0xb4>)
 801cd22:	f7ff ff07 	bl	801cb34 <__i2b>
 801cd26:	9b01      	ldr	r3, [sp, #4]
 801cd28:	0004      	movs	r4, r0
 801cd2a:	6098      	str	r0, [r3, #8]
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	6003      	str	r3, [r0, #0]
 801cd30:	2301      	movs	r3, #1
 801cd32:	421d      	tst	r5, r3
 801cd34:	d00a      	beq.n	801cd4c <__pow5mult+0x84>
 801cd36:	0031      	movs	r1, r6
 801cd38:	0022      	movs	r2, r4
 801cd3a:	0038      	movs	r0, r7
 801cd3c:	f7ff ff12 	bl	801cb64 <__multiply>
 801cd40:	0031      	movs	r1, r6
 801cd42:	9001      	str	r0, [sp, #4]
 801cd44:	0038      	movs	r0, r7
 801cd46:	f7ff fdf1 	bl	801c92c <_Bfree>
 801cd4a:	9e01      	ldr	r6, [sp, #4]
 801cd4c:	106d      	asrs	r5, r5, #1
 801cd4e:	d00c      	beq.n	801cd6a <__pow5mult+0xa2>
 801cd50:	6820      	ldr	r0, [r4, #0]
 801cd52:	2800      	cmp	r0, #0
 801cd54:	d107      	bne.n	801cd66 <__pow5mult+0x9e>
 801cd56:	0022      	movs	r2, r4
 801cd58:	0021      	movs	r1, r4
 801cd5a:	0038      	movs	r0, r7
 801cd5c:	f7ff ff02 	bl	801cb64 <__multiply>
 801cd60:	2300      	movs	r3, #0
 801cd62:	6020      	str	r0, [r4, #0]
 801cd64:	6003      	str	r3, [r0, #0]
 801cd66:	0004      	movs	r4, r0
 801cd68:	e7e2      	b.n	801cd30 <__pow5mult+0x68>
 801cd6a:	0030      	movs	r0, r6
 801cd6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801cd6e:	46c0      	nop			@ (mov r8, r8)
 801cd70:	0801f954 	.word	0x0801f954
 801cd74:	0801f819 	.word	0x0801f819
 801cd78:	0801f8f9 	.word	0x0801f8f9
 801cd7c:	00000271 	.word	0x00000271

0801cd80 <__lshift>:
 801cd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd82:	000c      	movs	r4, r1
 801cd84:	0016      	movs	r6, r2
 801cd86:	6923      	ldr	r3, [r4, #16]
 801cd88:	1157      	asrs	r7, r2, #5
 801cd8a:	b085      	sub	sp, #20
 801cd8c:	18fb      	adds	r3, r7, r3
 801cd8e:	9301      	str	r3, [sp, #4]
 801cd90:	3301      	adds	r3, #1
 801cd92:	9300      	str	r3, [sp, #0]
 801cd94:	6849      	ldr	r1, [r1, #4]
 801cd96:	68a3      	ldr	r3, [r4, #8]
 801cd98:	9002      	str	r0, [sp, #8]
 801cd9a:	9a00      	ldr	r2, [sp, #0]
 801cd9c:	4293      	cmp	r3, r2
 801cd9e:	db10      	blt.n	801cdc2 <__lshift+0x42>
 801cda0:	9802      	ldr	r0, [sp, #8]
 801cda2:	f7ff fd7f 	bl	801c8a4 <_Balloc>
 801cda6:	2300      	movs	r3, #0
 801cda8:	0001      	movs	r1, r0
 801cdaa:	0005      	movs	r5, r0
 801cdac:	001a      	movs	r2, r3
 801cdae:	3114      	adds	r1, #20
 801cdb0:	4298      	cmp	r0, r3
 801cdb2:	d10c      	bne.n	801cdce <__lshift+0x4e>
 801cdb4:	21ef      	movs	r1, #239	@ 0xef
 801cdb6:	002a      	movs	r2, r5
 801cdb8:	4b25      	ldr	r3, [pc, #148]	@ (801ce50 <__lshift+0xd0>)
 801cdba:	4826      	ldr	r0, [pc, #152]	@ (801ce54 <__lshift+0xd4>)
 801cdbc:	0049      	lsls	r1, r1, #1
 801cdbe:	f000 fe63 	bl	801da88 <__assert_func>
 801cdc2:	3101      	adds	r1, #1
 801cdc4:	005b      	lsls	r3, r3, #1
 801cdc6:	e7e8      	b.n	801cd9a <__lshift+0x1a>
 801cdc8:	0098      	lsls	r0, r3, #2
 801cdca:	500a      	str	r2, [r1, r0]
 801cdcc:	3301      	adds	r3, #1
 801cdce:	42bb      	cmp	r3, r7
 801cdd0:	dbfa      	blt.n	801cdc8 <__lshift+0x48>
 801cdd2:	43fb      	mvns	r3, r7
 801cdd4:	17db      	asrs	r3, r3, #31
 801cdd6:	401f      	ands	r7, r3
 801cdd8:	00bf      	lsls	r7, r7, #2
 801cdda:	0023      	movs	r3, r4
 801cddc:	201f      	movs	r0, #31
 801cdde:	19c9      	adds	r1, r1, r7
 801cde0:	0037      	movs	r7, r6
 801cde2:	6922      	ldr	r2, [r4, #16]
 801cde4:	3314      	adds	r3, #20
 801cde6:	0092      	lsls	r2, r2, #2
 801cde8:	189a      	adds	r2, r3, r2
 801cdea:	4007      	ands	r7, r0
 801cdec:	4206      	tst	r6, r0
 801cdee:	d029      	beq.n	801ce44 <__lshift+0xc4>
 801cdf0:	3001      	adds	r0, #1
 801cdf2:	1bc0      	subs	r0, r0, r7
 801cdf4:	9003      	str	r0, [sp, #12]
 801cdf6:	468c      	mov	ip, r1
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	681e      	ldr	r6, [r3, #0]
 801cdfc:	40be      	lsls	r6, r7
 801cdfe:	4306      	orrs	r6, r0
 801ce00:	4660      	mov	r0, ip
 801ce02:	c040      	stmia	r0!, {r6}
 801ce04:	4684      	mov	ip, r0
 801ce06:	9e03      	ldr	r6, [sp, #12]
 801ce08:	cb01      	ldmia	r3!, {r0}
 801ce0a:	40f0      	lsrs	r0, r6
 801ce0c:	429a      	cmp	r2, r3
 801ce0e:	d8f4      	bhi.n	801cdfa <__lshift+0x7a>
 801ce10:	0026      	movs	r6, r4
 801ce12:	3615      	adds	r6, #21
 801ce14:	2304      	movs	r3, #4
 801ce16:	42b2      	cmp	r2, r6
 801ce18:	d304      	bcc.n	801ce24 <__lshift+0xa4>
 801ce1a:	1b13      	subs	r3, r2, r4
 801ce1c:	3b15      	subs	r3, #21
 801ce1e:	089b      	lsrs	r3, r3, #2
 801ce20:	3301      	adds	r3, #1
 801ce22:	009b      	lsls	r3, r3, #2
 801ce24:	50c8      	str	r0, [r1, r3]
 801ce26:	2800      	cmp	r0, #0
 801ce28:	d002      	beq.n	801ce30 <__lshift+0xb0>
 801ce2a:	9b01      	ldr	r3, [sp, #4]
 801ce2c:	3302      	adds	r3, #2
 801ce2e:	9300      	str	r3, [sp, #0]
 801ce30:	9b00      	ldr	r3, [sp, #0]
 801ce32:	9802      	ldr	r0, [sp, #8]
 801ce34:	3b01      	subs	r3, #1
 801ce36:	0021      	movs	r1, r4
 801ce38:	612b      	str	r3, [r5, #16]
 801ce3a:	f7ff fd77 	bl	801c92c <_Bfree>
 801ce3e:	0028      	movs	r0, r5
 801ce40:	b005      	add	sp, #20
 801ce42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce44:	cb01      	ldmia	r3!, {r0}
 801ce46:	c101      	stmia	r1!, {r0}
 801ce48:	429a      	cmp	r2, r3
 801ce4a:	d8fb      	bhi.n	801ce44 <__lshift+0xc4>
 801ce4c:	e7f0      	b.n	801ce30 <__lshift+0xb0>
 801ce4e:	46c0      	nop			@ (mov r8, r8)
 801ce50:	0801f888 	.word	0x0801f888
 801ce54:	0801f8f9 	.word	0x0801f8f9

0801ce58 <__mcmp>:
 801ce58:	b530      	push	{r4, r5, lr}
 801ce5a:	690b      	ldr	r3, [r1, #16]
 801ce5c:	6904      	ldr	r4, [r0, #16]
 801ce5e:	0002      	movs	r2, r0
 801ce60:	1ae0      	subs	r0, r4, r3
 801ce62:	429c      	cmp	r4, r3
 801ce64:	d10f      	bne.n	801ce86 <__mcmp+0x2e>
 801ce66:	3214      	adds	r2, #20
 801ce68:	009b      	lsls	r3, r3, #2
 801ce6a:	3114      	adds	r1, #20
 801ce6c:	0014      	movs	r4, r2
 801ce6e:	18c9      	adds	r1, r1, r3
 801ce70:	18d2      	adds	r2, r2, r3
 801ce72:	3a04      	subs	r2, #4
 801ce74:	3904      	subs	r1, #4
 801ce76:	6815      	ldr	r5, [r2, #0]
 801ce78:	680b      	ldr	r3, [r1, #0]
 801ce7a:	429d      	cmp	r5, r3
 801ce7c:	d004      	beq.n	801ce88 <__mcmp+0x30>
 801ce7e:	2001      	movs	r0, #1
 801ce80:	429d      	cmp	r5, r3
 801ce82:	d200      	bcs.n	801ce86 <__mcmp+0x2e>
 801ce84:	3802      	subs	r0, #2
 801ce86:	bd30      	pop	{r4, r5, pc}
 801ce88:	4294      	cmp	r4, r2
 801ce8a:	d3f2      	bcc.n	801ce72 <__mcmp+0x1a>
 801ce8c:	e7fb      	b.n	801ce86 <__mcmp+0x2e>
	...

0801ce90 <__mdiff>:
 801ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce92:	000c      	movs	r4, r1
 801ce94:	b087      	sub	sp, #28
 801ce96:	9000      	str	r0, [sp, #0]
 801ce98:	0011      	movs	r1, r2
 801ce9a:	0020      	movs	r0, r4
 801ce9c:	0017      	movs	r7, r2
 801ce9e:	f7ff ffdb 	bl	801ce58 <__mcmp>
 801cea2:	1e05      	subs	r5, r0, #0
 801cea4:	d110      	bne.n	801cec8 <__mdiff+0x38>
 801cea6:	0001      	movs	r1, r0
 801cea8:	9800      	ldr	r0, [sp, #0]
 801ceaa:	f7ff fcfb 	bl	801c8a4 <_Balloc>
 801ceae:	1e02      	subs	r2, r0, #0
 801ceb0:	d104      	bne.n	801cebc <__mdiff+0x2c>
 801ceb2:	4b40      	ldr	r3, [pc, #256]	@ (801cfb4 <__mdiff+0x124>)
 801ceb4:	4840      	ldr	r0, [pc, #256]	@ (801cfb8 <__mdiff+0x128>)
 801ceb6:	4941      	ldr	r1, [pc, #260]	@ (801cfbc <__mdiff+0x12c>)
 801ceb8:	f000 fde6 	bl	801da88 <__assert_func>
 801cebc:	2301      	movs	r3, #1
 801cebe:	6145      	str	r5, [r0, #20]
 801cec0:	6103      	str	r3, [r0, #16]
 801cec2:	0010      	movs	r0, r2
 801cec4:	b007      	add	sp, #28
 801cec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cec8:	2600      	movs	r6, #0
 801ceca:	42b0      	cmp	r0, r6
 801cecc:	da03      	bge.n	801ced6 <__mdiff+0x46>
 801cece:	0023      	movs	r3, r4
 801ced0:	003c      	movs	r4, r7
 801ced2:	001f      	movs	r7, r3
 801ced4:	3601      	adds	r6, #1
 801ced6:	6861      	ldr	r1, [r4, #4]
 801ced8:	9800      	ldr	r0, [sp, #0]
 801ceda:	f7ff fce3 	bl	801c8a4 <_Balloc>
 801cede:	1e02      	subs	r2, r0, #0
 801cee0:	d103      	bne.n	801ceea <__mdiff+0x5a>
 801cee2:	4b34      	ldr	r3, [pc, #208]	@ (801cfb4 <__mdiff+0x124>)
 801cee4:	4834      	ldr	r0, [pc, #208]	@ (801cfb8 <__mdiff+0x128>)
 801cee6:	4936      	ldr	r1, [pc, #216]	@ (801cfc0 <__mdiff+0x130>)
 801cee8:	e7e6      	b.n	801ceb8 <__mdiff+0x28>
 801ceea:	6923      	ldr	r3, [r4, #16]
 801ceec:	3414      	adds	r4, #20
 801ceee:	9300      	str	r3, [sp, #0]
 801cef0:	009b      	lsls	r3, r3, #2
 801cef2:	18e3      	adds	r3, r4, r3
 801cef4:	0021      	movs	r1, r4
 801cef6:	9401      	str	r4, [sp, #4]
 801cef8:	003c      	movs	r4, r7
 801cefa:	9302      	str	r3, [sp, #8]
 801cefc:	693b      	ldr	r3, [r7, #16]
 801cefe:	3414      	adds	r4, #20
 801cf00:	009b      	lsls	r3, r3, #2
 801cf02:	18e3      	adds	r3, r4, r3
 801cf04:	9303      	str	r3, [sp, #12]
 801cf06:	0003      	movs	r3, r0
 801cf08:	60c6      	str	r6, [r0, #12]
 801cf0a:	468c      	mov	ip, r1
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	3314      	adds	r3, #20
 801cf10:	9304      	str	r3, [sp, #16]
 801cf12:	9305      	str	r3, [sp, #20]
 801cf14:	4663      	mov	r3, ip
 801cf16:	cb20      	ldmia	r3!, {r5}
 801cf18:	b2a9      	uxth	r1, r5
 801cf1a:	000e      	movs	r6, r1
 801cf1c:	469c      	mov	ip, r3
 801cf1e:	cc08      	ldmia	r4!, {r3}
 801cf20:	0c2d      	lsrs	r5, r5, #16
 801cf22:	b299      	uxth	r1, r3
 801cf24:	1a71      	subs	r1, r6, r1
 801cf26:	1809      	adds	r1, r1, r0
 801cf28:	0c1b      	lsrs	r3, r3, #16
 801cf2a:	1408      	asrs	r0, r1, #16
 801cf2c:	1aeb      	subs	r3, r5, r3
 801cf2e:	181b      	adds	r3, r3, r0
 801cf30:	1418      	asrs	r0, r3, #16
 801cf32:	b289      	uxth	r1, r1
 801cf34:	041b      	lsls	r3, r3, #16
 801cf36:	4319      	orrs	r1, r3
 801cf38:	9b05      	ldr	r3, [sp, #20]
 801cf3a:	c302      	stmia	r3!, {r1}
 801cf3c:	9305      	str	r3, [sp, #20]
 801cf3e:	9b03      	ldr	r3, [sp, #12]
 801cf40:	42a3      	cmp	r3, r4
 801cf42:	d8e7      	bhi.n	801cf14 <__mdiff+0x84>
 801cf44:	0039      	movs	r1, r7
 801cf46:	9c03      	ldr	r4, [sp, #12]
 801cf48:	3115      	adds	r1, #21
 801cf4a:	2304      	movs	r3, #4
 801cf4c:	428c      	cmp	r4, r1
 801cf4e:	d304      	bcc.n	801cf5a <__mdiff+0xca>
 801cf50:	1be3      	subs	r3, r4, r7
 801cf52:	3b15      	subs	r3, #21
 801cf54:	089b      	lsrs	r3, r3, #2
 801cf56:	3301      	adds	r3, #1
 801cf58:	009b      	lsls	r3, r3, #2
 801cf5a:	9901      	ldr	r1, [sp, #4]
 801cf5c:	18cd      	adds	r5, r1, r3
 801cf5e:	9904      	ldr	r1, [sp, #16]
 801cf60:	002e      	movs	r6, r5
 801cf62:	18cb      	adds	r3, r1, r3
 801cf64:	001f      	movs	r7, r3
 801cf66:	9902      	ldr	r1, [sp, #8]
 801cf68:	428e      	cmp	r6, r1
 801cf6a:	d311      	bcc.n	801cf90 <__mdiff+0x100>
 801cf6c:	9c02      	ldr	r4, [sp, #8]
 801cf6e:	1ee9      	subs	r1, r5, #3
 801cf70:	2000      	movs	r0, #0
 801cf72:	428c      	cmp	r4, r1
 801cf74:	d304      	bcc.n	801cf80 <__mdiff+0xf0>
 801cf76:	0021      	movs	r1, r4
 801cf78:	3103      	adds	r1, #3
 801cf7a:	1b49      	subs	r1, r1, r5
 801cf7c:	0889      	lsrs	r1, r1, #2
 801cf7e:	0088      	lsls	r0, r1, #2
 801cf80:	181b      	adds	r3, r3, r0
 801cf82:	3b04      	subs	r3, #4
 801cf84:	6819      	ldr	r1, [r3, #0]
 801cf86:	2900      	cmp	r1, #0
 801cf88:	d010      	beq.n	801cfac <__mdiff+0x11c>
 801cf8a:	9b00      	ldr	r3, [sp, #0]
 801cf8c:	6113      	str	r3, [r2, #16]
 801cf8e:	e798      	b.n	801cec2 <__mdiff+0x32>
 801cf90:	4684      	mov	ip, r0
 801cf92:	ce02      	ldmia	r6!, {r1}
 801cf94:	b288      	uxth	r0, r1
 801cf96:	4460      	add	r0, ip
 801cf98:	1400      	asrs	r0, r0, #16
 801cf9a:	0c0c      	lsrs	r4, r1, #16
 801cf9c:	1904      	adds	r4, r0, r4
 801cf9e:	4461      	add	r1, ip
 801cfa0:	1420      	asrs	r0, r4, #16
 801cfa2:	b289      	uxth	r1, r1
 801cfa4:	0424      	lsls	r4, r4, #16
 801cfa6:	4321      	orrs	r1, r4
 801cfa8:	c702      	stmia	r7!, {r1}
 801cfaa:	e7dc      	b.n	801cf66 <__mdiff+0xd6>
 801cfac:	9900      	ldr	r1, [sp, #0]
 801cfae:	3901      	subs	r1, #1
 801cfb0:	9100      	str	r1, [sp, #0]
 801cfb2:	e7e6      	b.n	801cf82 <__mdiff+0xf2>
 801cfb4:	0801f888 	.word	0x0801f888
 801cfb8:	0801f8f9 	.word	0x0801f8f9
 801cfbc:	00000237 	.word	0x00000237
 801cfc0:	00000245 	.word	0x00000245

0801cfc4 <__ulp>:
 801cfc4:	b510      	push	{r4, lr}
 801cfc6:	2400      	movs	r4, #0
 801cfc8:	4b0c      	ldr	r3, [pc, #48]	@ (801cffc <__ulp+0x38>)
 801cfca:	4a0d      	ldr	r2, [pc, #52]	@ (801d000 <__ulp+0x3c>)
 801cfcc:	400b      	ands	r3, r1
 801cfce:	189b      	adds	r3, r3, r2
 801cfd0:	42a3      	cmp	r3, r4
 801cfd2:	dc06      	bgt.n	801cfe2 <__ulp+0x1e>
 801cfd4:	425b      	negs	r3, r3
 801cfd6:	151a      	asrs	r2, r3, #20
 801cfd8:	2a13      	cmp	r2, #19
 801cfda:	dc05      	bgt.n	801cfe8 <__ulp+0x24>
 801cfdc:	2380      	movs	r3, #128	@ 0x80
 801cfde:	031b      	lsls	r3, r3, #12
 801cfe0:	4113      	asrs	r3, r2
 801cfe2:	0019      	movs	r1, r3
 801cfe4:	0020      	movs	r0, r4
 801cfe6:	bd10      	pop	{r4, pc}
 801cfe8:	3a14      	subs	r2, #20
 801cfea:	2401      	movs	r4, #1
 801cfec:	2a1e      	cmp	r2, #30
 801cfee:	dc02      	bgt.n	801cff6 <__ulp+0x32>
 801cff0:	2480      	movs	r4, #128	@ 0x80
 801cff2:	0624      	lsls	r4, r4, #24
 801cff4:	40d4      	lsrs	r4, r2
 801cff6:	2300      	movs	r3, #0
 801cff8:	e7f3      	b.n	801cfe2 <__ulp+0x1e>
 801cffa:	46c0      	nop			@ (mov r8, r8)
 801cffc:	7ff00000 	.word	0x7ff00000
 801d000:	fcc00000 	.word	0xfcc00000

0801d004 <__b2d>:
 801d004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d006:	0006      	movs	r6, r0
 801d008:	6903      	ldr	r3, [r0, #16]
 801d00a:	3614      	adds	r6, #20
 801d00c:	009b      	lsls	r3, r3, #2
 801d00e:	18f3      	adds	r3, r6, r3
 801d010:	1f1d      	subs	r5, r3, #4
 801d012:	682c      	ldr	r4, [r5, #0]
 801d014:	000f      	movs	r7, r1
 801d016:	0020      	movs	r0, r4
 801d018:	9301      	str	r3, [sp, #4]
 801d01a:	f7ff fd3b 	bl	801ca94 <__hi0bits>
 801d01e:	2220      	movs	r2, #32
 801d020:	1a12      	subs	r2, r2, r0
 801d022:	603a      	str	r2, [r7, #0]
 801d024:	0003      	movs	r3, r0
 801d026:	4a1c      	ldr	r2, [pc, #112]	@ (801d098 <__b2d+0x94>)
 801d028:	280a      	cmp	r0, #10
 801d02a:	dc15      	bgt.n	801d058 <__b2d+0x54>
 801d02c:	210b      	movs	r1, #11
 801d02e:	0027      	movs	r7, r4
 801d030:	1a09      	subs	r1, r1, r0
 801d032:	40cf      	lsrs	r7, r1
 801d034:	433a      	orrs	r2, r7
 801d036:	468c      	mov	ip, r1
 801d038:	0011      	movs	r1, r2
 801d03a:	2200      	movs	r2, #0
 801d03c:	42ae      	cmp	r6, r5
 801d03e:	d202      	bcs.n	801d046 <__b2d+0x42>
 801d040:	9a01      	ldr	r2, [sp, #4]
 801d042:	3a08      	subs	r2, #8
 801d044:	6812      	ldr	r2, [r2, #0]
 801d046:	3315      	adds	r3, #21
 801d048:	409c      	lsls	r4, r3
 801d04a:	4663      	mov	r3, ip
 801d04c:	0027      	movs	r7, r4
 801d04e:	40da      	lsrs	r2, r3
 801d050:	4317      	orrs	r7, r2
 801d052:	0038      	movs	r0, r7
 801d054:	b003      	add	sp, #12
 801d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d058:	2700      	movs	r7, #0
 801d05a:	42ae      	cmp	r6, r5
 801d05c:	d202      	bcs.n	801d064 <__b2d+0x60>
 801d05e:	9d01      	ldr	r5, [sp, #4]
 801d060:	3d08      	subs	r5, #8
 801d062:	682f      	ldr	r7, [r5, #0]
 801d064:	210b      	movs	r1, #11
 801d066:	4249      	negs	r1, r1
 801d068:	468c      	mov	ip, r1
 801d06a:	449c      	add	ip, r3
 801d06c:	2b0b      	cmp	r3, #11
 801d06e:	d010      	beq.n	801d092 <__b2d+0x8e>
 801d070:	4661      	mov	r1, ip
 801d072:	2320      	movs	r3, #32
 801d074:	408c      	lsls	r4, r1
 801d076:	1a5b      	subs	r3, r3, r1
 801d078:	0039      	movs	r1, r7
 801d07a:	40d9      	lsrs	r1, r3
 801d07c:	430c      	orrs	r4, r1
 801d07e:	4322      	orrs	r2, r4
 801d080:	0011      	movs	r1, r2
 801d082:	2200      	movs	r2, #0
 801d084:	42b5      	cmp	r5, r6
 801d086:	d901      	bls.n	801d08c <__b2d+0x88>
 801d088:	3d04      	subs	r5, #4
 801d08a:	682a      	ldr	r2, [r5, #0]
 801d08c:	4664      	mov	r4, ip
 801d08e:	40a7      	lsls	r7, r4
 801d090:	e7dd      	b.n	801d04e <__b2d+0x4a>
 801d092:	4322      	orrs	r2, r4
 801d094:	0011      	movs	r1, r2
 801d096:	e7dc      	b.n	801d052 <__b2d+0x4e>
 801d098:	3ff00000 	.word	0x3ff00000

0801d09c <__d2b>:
 801d09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d09e:	2101      	movs	r1, #1
 801d0a0:	0016      	movs	r6, r2
 801d0a2:	001f      	movs	r7, r3
 801d0a4:	f7ff fbfe 	bl	801c8a4 <_Balloc>
 801d0a8:	1e04      	subs	r4, r0, #0
 801d0aa:	d105      	bne.n	801d0b8 <__d2b+0x1c>
 801d0ac:	0022      	movs	r2, r4
 801d0ae:	4b25      	ldr	r3, [pc, #148]	@ (801d144 <__d2b+0xa8>)
 801d0b0:	4825      	ldr	r0, [pc, #148]	@ (801d148 <__d2b+0xac>)
 801d0b2:	4926      	ldr	r1, [pc, #152]	@ (801d14c <__d2b+0xb0>)
 801d0b4:	f000 fce8 	bl	801da88 <__assert_func>
 801d0b8:	033b      	lsls	r3, r7, #12
 801d0ba:	007d      	lsls	r5, r7, #1
 801d0bc:	0b1b      	lsrs	r3, r3, #12
 801d0be:	0d6d      	lsrs	r5, r5, #21
 801d0c0:	d002      	beq.n	801d0c8 <__d2b+0x2c>
 801d0c2:	2280      	movs	r2, #128	@ 0x80
 801d0c4:	0352      	lsls	r2, r2, #13
 801d0c6:	4313      	orrs	r3, r2
 801d0c8:	9301      	str	r3, [sp, #4]
 801d0ca:	2e00      	cmp	r6, #0
 801d0cc:	d025      	beq.n	801d11a <__d2b+0x7e>
 801d0ce:	4668      	mov	r0, sp
 801d0d0:	9600      	str	r6, [sp, #0]
 801d0d2:	f7ff fd00 	bl	801cad6 <__lo0bits>
 801d0d6:	9b01      	ldr	r3, [sp, #4]
 801d0d8:	9900      	ldr	r1, [sp, #0]
 801d0da:	2800      	cmp	r0, #0
 801d0dc:	d01b      	beq.n	801d116 <__d2b+0x7a>
 801d0de:	2220      	movs	r2, #32
 801d0e0:	001e      	movs	r6, r3
 801d0e2:	1a12      	subs	r2, r2, r0
 801d0e4:	4096      	lsls	r6, r2
 801d0e6:	0032      	movs	r2, r6
 801d0e8:	40c3      	lsrs	r3, r0
 801d0ea:	430a      	orrs	r2, r1
 801d0ec:	6162      	str	r2, [r4, #20]
 801d0ee:	9301      	str	r3, [sp, #4]
 801d0f0:	9e01      	ldr	r6, [sp, #4]
 801d0f2:	61a6      	str	r6, [r4, #24]
 801d0f4:	1e73      	subs	r3, r6, #1
 801d0f6:	419e      	sbcs	r6, r3
 801d0f8:	3601      	adds	r6, #1
 801d0fa:	6126      	str	r6, [r4, #16]
 801d0fc:	2d00      	cmp	r5, #0
 801d0fe:	d014      	beq.n	801d12a <__d2b+0x8e>
 801d100:	2635      	movs	r6, #53	@ 0x35
 801d102:	4b13      	ldr	r3, [pc, #76]	@ (801d150 <__d2b+0xb4>)
 801d104:	18ed      	adds	r5, r5, r3
 801d106:	9b08      	ldr	r3, [sp, #32]
 801d108:	182d      	adds	r5, r5, r0
 801d10a:	601d      	str	r5, [r3, #0]
 801d10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d10e:	1a36      	subs	r6, r6, r0
 801d110:	601e      	str	r6, [r3, #0]
 801d112:	0020      	movs	r0, r4
 801d114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d116:	6161      	str	r1, [r4, #20]
 801d118:	e7ea      	b.n	801d0f0 <__d2b+0x54>
 801d11a:	a801      	add	r0, sp, #4
 801d11c:	f7ff fcdb 	bl	801cad6 <__lo0bits>
 801d120:	9b01      	ldr	r3, [sp, #4]
 801d122:	2601      	movs	r6, #1
 801d124:	6163      	str	r3, [r4, #20]
 801d126:	3020      	adds	r0, #32
 801d128:	e7e7      	b.n	801d0fa <__d2b+0x5e>
 801d12a:	4b0a      	ldr	r3, [pc, #40]	@ (801d154 <__d2b+0xb8>)
 801d12c:	18c0      	adds	r0, r0, r3
 801d12e:	9b08      	ldr	r3, [sp, #32]
 801d130:	6018      	str	r0, [r3, #0]
 801d132:	4b09      	ldr	r3, [pc, #36]	@ (801d158 <__d2b+0xbc>)
 801d134:	18f3      	adds	r3, r6, r3
 801d136:	009b      	lsls	r3, r3, #2
 801d138:	18e3      	adds	r3, r4, r3
 801d13a:	6958      	ldr	r0, [r3, #20]
 801d13c:	f7ff fcaa 	bl	801ca94 <__hi0bits>
 801d140:	0176      	lsls	r6, r6, #5
 801d142:	e7e3      	b.n	801d10c <__d2b+0x70>
 801d144:	0801f888 	.word	0x0801f888
 801d148:	0801f8f9 	.word	0x0801f8f9
 801d14c:	0000030f 	.word	0x0000030f
 801d150:	fffffbcd 	.word	0xfffffbcd
 801d154:	fffffbce 	.word	0xfffffbce
 801d158:	3fffffff 	.word	0x3fffffff

0801d15c <__ratio>:
 801d15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d15e:	b087      	sub	sp, #28
 801d160:	000f      	movs	r7, r1
 801d162:	a904      	add	r1, sp, #16
 801d164:	0006      	movs	r6, r0
 801d166:	f7ff ff4d 	bl	801d004 <__b2d>
 801d16a:	9000      	str	r0, [sp, #0]
 801d16c:	9101      	str	r1, [sp, #4]
 801d16e:	9b00      	ldr	r3, [sp, #0]
 801d170:	9c01      	ldr	r4, [sp, #4]
 801d172:	0038      	movs	r0, r7
 801d174:	a905      	add	r1, sp, #20
 801d176:	9302      	str	r3, [sp, #8]
 801d178:	9403      	str	r4, [sp, #12]
 801d17a:	f7ff ff43 	bl	801d004 <__b2d>
 801d17e:	000d      	movs	r5, r1
 801d180:	0002      	movs	r2, r0
 801d182:	000b      	movs	r3, r1
 801d184:	6930      	ldr	r0, [r6, #16]
 801d186:	6939      	ldr	r1, [r7, #16]
 801d188:	9e04      	ldr	r6, [sp, #16]
 801d18a:	1a40      	subs	r0, r0, r1
 801d18c:	9905      	ldr	r1, [sp, #20]
 801d18e:	0140      	lsls	r0, r0, #5
 801d190:	1a71      	subs	r1, r6, r1
 801d192:	1841      	adds	r1, r0, r1
 801d194:	0508      	lsls	r0, r1, #20
 801d196:	2900      	cmp	r1, #0
 801d198:	dd08      	ble.n	801d1ac <__ratio+0x50>
 801d19a:	9901      	ldr	r1, [sp, #4]
 801d19c:	1841      	adds	r1, r0, r1
 801d19e:	9103      	str	r1, [sp, #12]
 801d1a0:	9802      	ldr	r0, [sp, #8]
 801d1a2:	9903      	ldr	r1, [sp, #12]
 801d1a4:	f7e4 fdfc 	bl	8001da0 <__aeabi_ddiv>
 801d1a8:	b007      	add	sp, #28
 801d1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1ac:	1a2b      	subs	r3, r5, r0
 801d1ae:	e7f7      	b.n	801d1a0 <__ratio+0x44>

0801d1b0 <__copybits>:
 801d1b0:	b570      	push	{r4, r5, r6, lr}
 801d1b2:	0014      	movs	r4, r2
 801d1b4:	0005      	movs	r5, r0
 801d1b6:	3901      	subs	r1, #1
 801d1b8:	6913      	ldr	r3, [r2, #16]
 801d1ba:	1149      	asrs	r1, r1, #5
 801d1bc:	3101      	adds	r1, #1
 801d1be:	0089      	lsls	r1, r1, #2
 801d1c0:	3414      	adds	r4, #20
 801d1c2:	009b      	lsls	r3, r3, #2
 801d1c4:	1841      	adds	r1, r0, r1
 801d1c6:	18e3      	adds	r3, r4, r3
 801d1c8:	42a3      	cmp	r3, r4
 801d1ca:	d80d      	bhi.n	801d1e8 <__copybits+0x38>
 801d1cc:	0014      	movs	r4, r2
 801d1ce:	3411      	adds	r4, #17
 801d1d0:	2500      	movs	r5, #0
 801d1d2:	429c      	cmp	r4, r3
 801d1d4:	d803      	bhi.n	801d1de <__copybits+0x2e>
 801d1d6:	1a9b      	subs	r3, r3, r2
 801d1d8:	3b11      	subs	r3, #17
 801d1da:	089b      	lsrs	r3, r3, #2
 801d1dc:	009d      	lsls	r5, r3, #2
 801d1de:	2300      	movs	r3, #0
 801d1e0:	1940      	adds	r0, r0, r5
 801d1e2:	4281      	cmp	r1, r0
 801d1e4:	d803      	bhi.n	801d1ee <__copybits+0x3e>
 801d1e6:	bd70      	pop	{r4, r5, r6, pc}
 801d1e8:	cc40      	ldmia	r4!, {r6}
 801d1ea:	c540      	stmia	r5!, {r6}
 801d1ec:	e7ec      	b.n	801d1c8 <__copybits+0x18>
 801d1ee:	c008      	stmia	r0!, {r3}
 801d1f0:	e7f7      	b.n	801d1e2 <__copybits+0x32>

0801d1f2 <__any_on>:
 801d1f2:	0002      	movs	r2, r0
 801d1f4:	6900      	ldr	r0, [r0, #16]
 801d1f6:	b510      	push	{r4, lr}
 801d1f8:	3214      	adds	r2, #20
 801d1fa:	114b      	asrs	r3, r1, #5
 801d1fc:	4298      	cmp	r0, r3
 801d1fe:	db13      	blt.n	801d228 <__any_on+0x36>
 801d200:	dd0c      	ble.n	801d21c <__any_on+0x2a>
 801d202:	241f      	movs	r4, #31
 801d204:	0008      	movs	r0, r1
 801d206:	4020      	ands	r0, r4
 801d208:	4221      	tst	r1, r4
 801d20a:	d007      	beq.n	801d21c <__any_on+0x2a>
 801d20c:	0099      	lsls	r1, r3, #2
 801d20e:	588c      	ldr	r4, [r1, r2]
 801d210:	0021      	movs	r1, r4
 801d212:	40c1      	lsrs	r1, r0
 801d214:	4081      	lsls	r1, r0
 801d216:	2001      	movs	r0, #1
 801d218:	428c      	cmp	r4, r1
 801d21a:	d104      	bne.n	801d226 <__any_on+0x34>
 801d21c:	009b      	lsls	r3, r3, #2
 801d21e:	18d3      	adds	r3, r2, r3
 801d220:	4293      	cmp	r3, r2
 801d222:	d803      	bhi.n	801d22c <__any_on+0x3a>
 801d224:	2000      	movs	r0, #0
 801d226:	bd10      	pop	{r4, pc}
 801d228:	0003      	movs	r3, r0
 801d22a:	e7f7      	b.n	801d21c <__any_on+0x2a>
 801d22c:	3b04      	subs	r3, #4
 801d22e:	6819      	ldr	r1, [r3, #0]
 801d230:	2900      	cmp	r1, #0
 801d232:	d0f5      	beq.n	801d220 <__any_on+0x2e>
 801d234:	2001      	movs	r0, #1
 801d236:	e7f6      	b.n	801d226 <__any_on+0x34>

0801d238 <__ascii_wctomb>:
 801d238:	0003      	movs	r3, r0
 801d23a:	1e08      	subs	r0, r1, #0
 801d23c:	d005      	beq.n	801d24a <__ascii_wctomb+0x12>
 801d23e:	2aff      	cmp	r2, #255	@ 0xff
 801d240:	d904      	bls.n	801d24c <__ascii_wctomb+0x14>
 801d242:	228a      	movs	r2, #138	@ 0x8a
 801d244:	2001      	movs	r0, #1
 801d246:	601a      	str	r2, [r3, #0]
 801d248:	4240      	negs	r0, r0
 801d24a:	4770      	bx	lr
 801d24c:	2001      	movs	r0, #1
 801d24e:	700a      	strb	r2, [r1, #0]
 801d250:	e7fb      	b.n	801d24a <__ascii_wctomb+0x12>
	...

0801d254 <__ssputs_r>:
 801d254:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d256:	688e      	ldr	r6, [r1, #8]
 801d258:	b085      	sub	sp, #20
 801d25a:	001f      	movs	r7, r3
 801d25c:	000c      	movs	r4, r1
 801d25e:	680b      	ldr	r3, [r1, #0]
 801d260:	9002      	str	r0, [sp, #8]
 801d262:	9203      	str	r2, [sp, #12]
 801d264:	42be      	cmp	r6, r7
 801d266:	d830      	bhi.n	801d2ca <__ssputs_r+0x76>
 801d268:	210c      	movs	r1, #12
 801d26a:	5e62      	ldrsh	r2, [r4, r1]
 801d26c:	2190      	movs	r1, #144	@ 0x90
 801d26e:	00c9      	lsls	r1, r1, #3
 801d270:	420a      	tst	r2, r1
 801d272:	d028      	beq.n	801d2c6 <__ssputs_r+0x72>
 801d274:	2003      	movs	r0, #3
 801d276:	6921      	ldr	r1, [r4, #16]
 801d278:	1a5b      	subs	r3, r3, r1
 801d27a:	9301      	str	r3, [sp, #4]
 801d27c:	6963      	ldr	r3, [r4, #20]
 801d27e:	4343      	muls	r3, r0
 801d280:	9801      	ldr	r0, [sp, #4]
 801d282:	0fdd      	lsrs	r5, r3, #31
 801d284:	18ed      	adds	r5, r5, r3
 801d286:	1c7b      	adds	r3, r7, #1
 801d288:	181b      	adds	r3, r3, r0
 801d28a:	106d      	asrs	r5, r5, #1
 801d28c:	42ab      	cmp	r3, r5
 801d28e:	d900      	bls.n	801d292 <__ssputs_r+0x3e>
 801d290:	001d      	movs	r5, r3
 801d292:	0552      	lsls	r2, r2, #21
 801d294:	d528      	bpl.n	801d2e8 <__ssputs_r+0x94>
 801d296:	0029      	movs	r1, r5
 801d298:	9802      	ldr	r0, [sp, #8]
 801d29a:	f7ff fa61 	bl	801c760 <_malloc_r>
 801d29e:	1e06      	subs	r6, r0, #0
 801d2a0:	d02c      	beq.n	801d2fc <__ssputs_r+0xa8>
 801d2a2:	9a01      	ldr	r2, [sp, #4]
 801d2a4:	6921      	ldr	r1, [r4, #16]
 801d2a6:	f7fd fff9 	bl	801b29c <memcpy>
 801d2aa:	89a2      	ldrh	r2, [r4, #12]
 801d2ac:	4b18      	ldr	r3, [pc, #96]	@ (801d310 <__ssputs_r+0xbc>)
 801d2ae:	401a      	ands	r2, r3
 801d2b0:	2380      	movs	r3, #128	@ 0x80
 801d2b2:	4313      	orrs	r3, r2
 801d2b4:	81a3      	strh	r3, [r4, #12]
 801d2b6:	9b01      	ldr	r3, [sp, #4]
 801d2b8:	6126      	str	r6, [r4, #16]
 801d2ba:	18f6      	adds	r6, r6, r3
 801d2bc:	6026      	str	r6, [r4, #0]
 801d2be:	003e      	movs	r6, r7
 801d2c0:	6165      	str	r5, [r4, #20]
 801d2c2:	1aed      	subs	r5, r5, r3
 801d2c4:	60a5      	str	r5, [r4, #8]
 801d2c6:	42be      	cmp	r6, r7
 801d2c8:	d900      	bls.n	801d2cc <__ssputs_r+0x78>
 801d2ca:	003e      	movs	r6, r7
 801d2cc:	0032      	movs	r2, r6
 801d2ce:	9903      	ldr	r1, [sp, #12]
 801d2d0:	6820      	ldr	r0, [r4, #0]
 801d2d2:	f000 fbb3 	bl	801da3c <memmove>
 801d2d6:	2000      	movs	r0, #0
 801d2d8:	68a3      	ldr	r3, [r4, #8]
 801d2da:	1b9b      	subs	r3, r3, r6
 801d2dc:	60a3      	str	r3, [r4, #8]
 801d2de:	6823      	ldr	r3, [r4, #0]
 801d2e0:	199b      	adds	r3, r3, r6
 801d2e2:	6023      	str	r3, [r4, #0]
 801d2e4:	b005      	add	sp, #20
 801d2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2e8:	002a      	movs	r2, r5
 801d2ea:	9802      	ldr	r0, [sp, #8]
 801d2ec:	f000 fc17 	bl	801db1e <_realloc_r>
 801d2f0:	1e06      	subs	r6, r0, #0
 801d2f2:	d1e0      	bne.n	801d2b6 <__ssputs_r+0x62>
 801d2f4:	6921      	ldr	r1, [r4, #16]
 801d2f6:	9802      	ldr	r0, [sp, #8]
 801d2f8:	f7fe fe62 	bl	801bfc0 <_free_r>
 801d2fc:	230c      	movs	r3, #12
 801d2fe:	2001      	movs	r0, #1
 801d300:	9a02      	ldr	r2, [sp, #8]
 801d302:	4240      	negs	r0, r0
 801d304:	6013      	str	r3, [r2, #0]
 801d306:	89a2      	ldrh	r2, [r4, #12]
 801d308:	3334      	adds	r3, #52	@ 0x34
 801d30a:	4313      	orrs	r3, r2
 801d30c:	81a3      	strh	r3, [r4, #12]
 801d30e:	e7e9      	b.n	801d2e4 <__ssputs_r+0x90>
 801d310:	fffffb7f 	.word	0xfffffb7f

0801d314 <_svfiprintf_r>:
 801d314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d316:	b0a1      	sub	sp, #132	@ 0x84
 801d318:	9003      	str	r0, [sp, #12]
 801d31a:	001d      	movs	r5, r3
 801d31c:	898b      	ldrh	r3, [r1, #12]
 801d31e:	000f      	movs	r7, r1
 801d320:	0016      	movs	r6, r2
 801d322:	061b      	lsls	r3, r3, #24
 801d324:	d511      	bpl.n	801d34a <_svfiprintf_r+0x36>
 801d326:	690b      	ldr	r3, [r1, #16]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d10e      	bne.n	801d34a <_svfiprintf_r+0x36>
 801d32c:	2140      	movs	r1, #64	@ 0x40
 801d32e:	f7ff fa17 	bl	801c760 <_malloc_r>
 801d332:	6038      	str	r0, [r7, #0]
 801d334:	6138      	str	r0, [r7, #16]
 801d336:	2800      	cmp	r0, #0
 801d338:	d105      	bne.n	801d346 <_svfiprintf_r+0x32>
 801d33a:	230c      	movs	r3, #12
 801d33c:	9a03      	ldr	r2, [sp, #12]
 801d33e:	6013      	str	r3, [r2, #0]
 801d340:	2001      	movs	r0, #1
 801d342:	4240      	negs	r0, r0
 801d344:	e0cf      	b.n	801d4e6 <_svfiprintf_r+0x1d2>
 801d346:	2340      	movs	r3, #64	@ 0x40
 801d348:	617b      	str	r3, [r7, #20]
 801d34a:	2300      	movs	r3, #0
 801d34c:	ac08      	add	r4, sp, #32
 801d34e:	6163      	str	r3, [r4, #20]
 801d350:	3320      	adds	r3, #32
 801d352:	7663      	strb	r3, [r4, #25]
 801d354:	3310      	adds	r3, #16
 801d356:	76a3      	strb	r3, [r4, #26]
 801d358:	9507      	str	r5, [sp, #28]
 801d35a:	0035      	movs	r5, r6
 801d35c:	782b      	ldrb	r3, [r5, #0]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d001      	beq.n	801d366 <_svfiprintf_r+0x52>
 801d362:	2b25      	cmp	r3, #37	@ 0x25
 801d364:	d148      	bne.n	801d3f8 <_svfiprintf_r+0xe4>
 801d366:	1bab      	subs	r3, r5, r6
 801d368:	9305      	str	r3, [sp, #20]
 801d36a:	42b5      	cmp	r5, r6
 801d36c:	d00b      	beq.n	801d386 <_svfiprintf_r+0x72>
 801d36e:	0032      	movs	r2, r6
 801d370:	0039      	movs	r1, r7
 801d372:	9803      	ldr	r0, [sp, #12]
 801d374:	f7ff ff6e 	bl	801d254 <__ssputs_r>
 801d378:	3001      	adds	r0, #1
 801d37a:	d100      	bne.n	801d37e <_svfiprintf_r+0x6a>
 801d37c:	e0ae      	b.n	801d4dc <_svfiprintf_r+0x1c8>
 801d37e:	6963      	ldr	r3, [r4, #20]
 801d380:	9a05      	ldr	r2, [sp, #20]
 801d382:	189b      	adds	r3, r3, r2
 801d384:	6163      	str	r3, [r4, #20]
 801d386:	782b      	ldrb	r3, [r5, #0]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d100      	bne.n	801d38e <_svfiprintf_r+0x7a>
 801d38c:	e0a6      	b.n	801d4dc <_svfiprintf_r+0x1c8>
 801d38e:	2201      	movs	r2, #1
 801d390:	2300      	movs	r3, #0
 801d392:	4252      	negs	r2, r2
 801d394:	6062      	str	r2, [r4, #4]
 801d396:	a904      	add	r1, sp, #16
 801d398:	3254      	adds	r2, #84	@ 0x54
 801d39a:	1852      	adds	r2, r2, r1
 801d39c:	1c6e      	adds	r6, r5, #1
 801d39e:	6023      	str	r3, [r4, #0]
 801d3a0:	60e3      	str	r3, [r4, #12]
 801d3a2:	60a3      	str	r3, [r4, #8]
 801d3a4:	7013      	strb	r3, [r2, #0]
 801d3a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 801d3a8:	4b54      	ldr	r3, [pc, #336]	@ (801d4fc <_svfiprintf_r+0x1e8>)
 801d3aa:	2205      	movs	r2, #5
 801d3ac:	0018      	movs	r0, r3
 801d3ae:	7831      	ldrb	r1, [r6, #0]
 801d3b0:	9305      	str	r3, [sp, #20]
 801d3b2:	f7fd ff68 	bl	801b286 <memchr>
 801d3b6:	1c75      	adds	r5, r6, #1
 801d3b8:	2800      	cmp	r0, #0
 801d3ba:	d11f      	bne.n	801d3fc <_svfiprintf_r+0xe8>
 801d3bc:	6822      	ldr	r2, [r4, #0]
 801d3be:	06d3      	lsls	r3, r2, #27
 801d3c0:	d504      	bpl.n	801d3cc <_svfiprintf_r+0xb8>
 801d3c2:	2353      	movs	r3, #83	@ 0x53
 801d3c4:	a904      	add	r1, sp, #16
 801d3c6:	185b      	adds	r3, r3, r1
 801d3c8:	2120      	movs	r1, #32
 801d3ca:	7019      	strb	r1, [r3, #0]
 801d3cc:	0713      	lsls	r3, r2, #28
 801d3ce:	d504      	bpl.n	801d3da <_svfiprintf_r+0xc6>
 801d3d0:	2353      	movs	r3, #83	@ 0x53
 801d3d2:	a904      	add	r1, sp, #16
 801d3d4:	185b      	adds	r3, r3, r1
 801d3d6:	212b      	movs	r1, #43	@ 0x2b
 801d3d8:	7019      	strb	r1, [r3, #0]
 801d3da:	7833      	ldrb	r3, [r6, #0]
 801d3dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d3de:	d016      	beq.n	801d40e <_svfiprintf_r+0xfa>
 801d3e0:	0035      	movs	r5, r6
 801d3e2:	2100      	movs	r1, #0
 801d3e4:	200a      	movs	r0, #10
 801d3e6:	68e3      	ldr	r3, [r4, #12]
 801d3e8:	782a      	ldrb	r2, [r5, #0]
 801d3ea:	1c6e      	adds	r6, r5, #1
 801d3ec:	3a30      	subs	r2, #48	@ 0x30
 801d3ee:	2a09      	cmp	r2, #9
 801d3f0:	d950      	bls.n	801d494 <_svfiprintf_r+0x180>
 801d3f2:	2900      	cmp	r1, #0
 801d3f4:	d111      	bne.n	801d41a <_svfiprintf_r+0x106>
 801d3f6:	e017      	b.n	801d428 <_svfiprintf_r+0x114>
 801d3f8:	3501      	adds	r5, #1
 801d3fa:	e7af      	b.n	801d35c <_svfiprintf_r+0x48>
 801d3fc:	9b05      	ldr	r3, [sp, #20]
 801d3fe:	6822      	ldr	r2, [r4, #0]
 801d400:	1ac0      	subs	r0, r0, r3
 801d402:	2301      	movs	r3, #1
 801d404:	4083      	lsls	r3, r0
 801d406:	4313      	orrs	r3, r2
 801d408:	002e      	movs	r6, r5
 801d40a:	6023      	str	r3, [r4, #0]
 801d40c:	e7cc      	b.n	801d3a8 <_svfiprintf_r+0x94>
 801d40e:	9b07      	ldr	r3, [sp, #28]
 801d410:	1d19      	adds	r1, r3, #4
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	9107      	str	r1, [sp, #28]
 801d416:	2b00      	cmp	r3, #0
 801d418:	db01      	blt.n	801d41e <_svfiprintf_r+0x10a>
 801d41a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d41c:	e004      	b.n	801d428 <_svfiprintf_r+0x114>
 801d41e:	425b      	negs	r3, r3
 801d420:	60e3      	str	r3, [r4, #12]
 801d422:	2302      	movs	r3, #2
 801d424:	4313      	orrs	r3, r2
 801d426:	6023      	str	r3, [r4, #0]
 801d428:	782b      	ldrb	r3, [r5, #0]
 801d42a:	2b2e      	cmp	r3, #46	@ 0x2e
 801d42c:	d10c      	bne.n	801d448 <_svfiprintf_r+0x134>
 801d42e:	786b      	ldrb	r3, [r5, #1]
 801d430:	2b2a      	cmp	r3, #42	@ 0x2a
 801d432:	d134      	bne.n	801d49e <_svfiprintf_r+0x18a>
 801d434:	9b07      	ldr	r3, [sp, #28]
 801d436:	3502      	adds	r5, #2
 801d438:	1d1a      	adds	r2, r3, #4
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	9207      	str	r2, [sp, #28]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	da01      	bge.n	801d446 <_svfiprintf_r+0x132>
 801d442:	2301      	movs	r3, #1
 801d444:	425b      	negs	r3, r3
 801d446:	9309      	str	r3, [sp, #36]	@ 0x24
 801d448:	4e2d      	ldr	r6, [pc, #180]	@ (801d500 <_svfiprintf_r+0x1ec>)
 801d44a:	2203      	movs	r2, #3
 801d44c:	0030      	movs	r0, r6
 801d44e:	7829      	ldrb	r1, [r5, #0]
 801d450:	f7fd ff19 	bl	801b286 <memchr>
 801d454:	2800      	cmp	r0, #0
 801d456:	d006      	beq.n	801d466 <_svfiprintf_r+0x152>
 801d458:	2340      	movs	r3, #64	@ 0x40
 801d45a:	1b80      	subs	r0, r0, r6
 801d45c:	4083      	lsls	r3, r0
 801d45e:	6822      	ldr	r2, [r4, #0]
 801d460:	3501      	adds	r5, #1
 801d462:	4313      	orrs	r3, r2
 801d464:	6023      	str	r3, [r4, #0]
 801d466:	7829      	ldrb	r1, [r5, #0]
 801d468:	2206      	movs	r2, #6
 801d46a:	4826      	ldr	r0, [pc, #152]	@ (801d504 <_svfiprintf_r+0x1f0>)
 801d46c:	1c6e      	adds	r6, r5, #1
 801d46e:	7621      	strb	r1, [r4, #24]
 801d470:	f7fd ff09 	bl	801b286 <memchr>
 801d474:	2800      	cmp	r0, #0
 801d476:	d038      	beq.n	801d4ea <_svfiprintf_r+0x1d6>
 801d478:	4b23      	ldr	r3, [pc, #140]	@ (801d508 <_svfiprintf_r+0x1f4>)
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d122      	bne.n	801d4c4 <_svfiprintf_r+0x1b0>
 801d47e:	2207      	movs	r2, #7
 801d480:	9b07      	ldr	r3, [sp, #28]
 801d482:	3307      	adds	r3, #7
 801d484:	4393      	bics	r3, r2
 801d486:	3308      	adds	r3, #8
 801d488:	9307      	str	r3, [sp, #28]
 801d48a:	6963      	ldr	r3, [r4, #20]
 801d48c:	9a04      	ldr	r2, [sp, #16]
 801d48e:	189b      	adds	r3, r3, r2
 801d490:	6163      	str	r3, [r4, #20]
 801d492:	e762      	b.n	801d35a <_svfiprintf_r+0x46>
 801d494:	4343      	muls	r3, r0
 801d496:	0035      	movs	r5, r6
 801d498:	2101      	movs	r1, #1
 801d49a:	189b      	adds	r3, r3, r2
 801d49c:	e7a4      	b.n	801d3e8 <_svfiprintf_r+0xd4>
 801d49e:	2300      	movs	r3, #0
 801d4a0:	200a      	movs	r0, #10
 801d4a2:	0019      	movs	r1, r3
 801d4a4:	3501      	adds	r5, #1
 801d4a6:	6063      	str	r3, [r4, #4]
 801d4a8:	782a      	ldrb	r2, [r5, #0]
 801d4aa:	1c6e      	adds	r6, r5, #1
 801d4ac:	3a30      	subs	r2, #48	@ 0x30
 801d4ae:	2a09      	cmp	r2, #9
 801d4b0:	d903      	bls.n	801d4ba <_svfiprintf_r+0x1a6>
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d0c8      	beq.n	801d448 <_svfiprintf_r+0x134>
 801d4b6:	9109      	str	r1, [sp, #36]	@ 0x24
 801d4b8:	e7c6      	b.n	801d448 <_svfiprintf_r+0x134>
 801d4ba:	4341      	muls	r1, r0
 801d4bc:	0035      	movs	r5, r6
 801d4be:	2301      	movs	r3, #1
 801d4c0:	1889      	adds	r1, r1, r2
 801d4c2:	e7f1      	b.n	801d4a8 <_svfiprintf_r+0x194>
 801d4c4:	aa07      	add	r2, sp, #28
 801d4c6:	9200      	str	r2, [sp, #0]
 801d4c8:	0021      	movs	r1, r4
 801d4ca:	003a      	movs	r2, r7
 801d4cc:	4b0f      	ldr	r3, [pc, #60]	@ (801d50c <_svfiprintf_r+0x1f8>)
 801d4ce:	9803      	ldr	r0, [sp, #12]
 801d4d0:	f7fd f8d4 	bl	801a67c <_printf_float>
 801d4d4:	9004      	str	r0, [sp, #16]
 801d4d6:	9b04      	ldr	r3, [sp, #16]
 801d4d8:	3301      	adds	r3, #1
 801d4da:	d1d6      	bne.n	801d48a <_svfiprintf_r+0x176>
 801d4dc:	89bb      	ldrh	r3, [r7, #12]
 801d4de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d4e0:	065b      	lsls	r3, r3, #25
 801d4e2:	d500      	bpl.n	801d4e6 <_svfiprintf_r+0x1d2>
 801d4e4:	e72c      	b.n	801d340 <_svfiprintf_r+0x2c>
 801d4e6:	b021      	add	sp, #132	@ 0x84
 801d4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4ea:	aa07      	add	r2, sp, #28
 801d4ec:	9200      	str	r2, [sp, #0]
 801d4ee:	0021      	movs	r1, r4
 801d4f0:	003a      	movs	r2, r7
 801d4f2:	4b06      	ldr	r3, [pc, #24]	@ (801d50c <_svfiprintf_r+0x1f8>)
 801d4f4:	9803      	ldr	r0, [sp, #12]
 801d4f6:	f7fd fb6f 	bl	801abd8 <_printf_i>
 801d4fa:	e7eb      	b.n	801d4d4 <_svfiprintf_r+0x1c0>
 801d4fc:	0801fb51 	.word	0x0801fb51
 801d500:	0801fb57 	.word	0x0801fb57
 801d504:	0801fb5b 	.word	0x0801fb5b
 801d508:	0801a67d 	.word	0x0801a67d
 801d50c:	0801d255 	.word	0x0801d255

0801d510 <__sfputc_r>:
 801d510:	6893      	ldr	r3, [r2, #8]
 801d512:	b510      	push	{r4, lr}
 801d514:	3b01      	subs	r3, #1
 801d516:	6093      	str	r3, [r2, #8]
 801d518:	2b00      	cmp	r3, #0
 801d51a:	da04      	bge.n	801d526 <__sfputc_r+0x16>
 801d51c:	6994      	ldr	r4, [r2, #24]
 801d51e:	42a3      	cmp	r3, r4
 801d520:	db07      	blt.n	801d532 <__sfputc_r+0x22>
 801d522:	290a      	cmp	r1, #10
 801d524:	d005      	beq.n	801d532 <__sfputc_r+0x22>
 801d526:	6813      	ldr	r3, [r2, #0]
 801d528:	1c58      	adds	r0, r3, #1
 801d52a:	6010      	str	r0, [r2, #0]
 801d52c:	7019      	strb	r1, [r3, #0]
 801d52e:	0008      	movs	r0, r1
 801d530:	bd10      	pop	{r4, pc}
 801d532:	f000 f9e2 	bl	801d8fa <__swbuf_r>
 801d536:	0001      	movs	r1, r0
 801d538:	e7f9      	b.n	801d52e <__sfputc_r+0x1e>

0801d53a <__sfputs_r>:
 801d53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d53c:	0006      	movs	r6, r0
 801d53e:	000f      	movs	r7, r1
 801d540:	0014      	movs	r4, r2
 801d542:	18d5      	adds	r5, r2, r3
 801d544:	42ac      	cmp	r4, r5
 801d546:	d101      	bne.n	801d54c <__sfputs_r+0x12>
 801d548:	2000      	movs	r0, #0
 801d54a:	e007      	b.n	801d55c <__sfputs_r+0x22>
 801d54c:	7821      	ldrb	r1, [r4, #0]
 801d54e:	003a      	movs	r2, r7
 801d550:	0030      	movs	r0, r6
 801d552:	f7ff ffdd 	bl	801d510 <__sfputc_r>
 801d556:	3401      	adds	r4, #1
 801d558:	1c43      	adds	r3, r0, #1
 801d55a:	d1f3      	bne.n	801d544 <__sfputs_r+0xa>
 801d55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d560 <_vfiprintf_r>:
 801d560:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d562:	b0a1      	sub	sp, #132	@ 0x84
 801d564:	000f      	movs	r7, r1
 801d566:	0015      	movs	r5, r2
 801d568:	001e      	movs	r6, r3
 801d56a:	9003      	str	r0, [sp, #12]
 801d56c:	2800      	cmp	r0, #0
 801d56e:	d004      	beq.n	801d57a <_vfiprintf_r+0x1a>
 801d570:	6a03      	ldr	r3, [r0, #32]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d101      	bne.n	801d57a <_vfiprintf_r+0x1a>
 801d576:	f7fd fccd 	bl	801af14 <__sinit>
 801d57a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d57c:	07db      	lsls	r3, r3, #31
 801d57e:	d405      	bmi.n	801d58c <_vfiprintf_r+0x2c>
 801d580:	89bb      	ldrh	r3, [r7, #12]
 801d582:	059b      	lsls	r3, r3, #22
 801d584:	d402      	bmi.n	801d58c <_vfiprintf_r+0x2c>
 801d586:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d588:	f7fd fe7b 	bl	801b282 <__retarget_lock_acquire_recursive>
 801d58c:	89bb      	ldrh	r3, [r7, #12]
 801d58e:	071b      	lsls	r3, r3, #28
 801d590:	d502      	bpl.n	801d598 <_vfiprintf_r+0x38>
 801d592:	693b      	ldr	r3, [r7, #16]
 801d594:	2b00      	cmp	r3, #0
 801d596:	d113      	bne.n	801d5c0 <_vfiprintf_r+0x60>
 801d598:	0039      	movs	r1, r7
 801d59a:	9803      	ldr	r0, [sp, #12]
 801d59c:	f000 f9f0 	bl	801d980 <__swsetup_r>
 801d5a0:	2800      	cmp	r0, #0
 801d5a2:	d00d      	beq.n	801d5c0 <_vfiprintf_r+0x60>
 801d5a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d5a6:	07db      	lsls	r3, r3, #31
 801d5a8:	d503      	bpl.n	801d5b2 <_vfiprintf_r+0x52>
 801d5aa:	2001      	movs	r0, #1
 801d5ac:	4240      	negs	r0, r0
 801d5ae:	b021      	add	sp, #132	@ 0x84
 801d5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d5b2:	89bb      	ldrh	r3, [r7, #12]
 801d5b4:	059b      	lsls	r3, r3, #22
 801d5b6:	d4f8      	bmi.n	801d5aa <_vfiprintf_r+0x4a>
 801d5b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d5ba:	f7fd fe63 	bl	801b284 <__retarget_lock_release_recursive>
 801d5be:	e7f4      	b.n	801d5aa <_vfiprintf_r+0x4a>
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	ac08      	add	r4, sp, #32
 801d5c4:	6163      	str	r3, [r4, #20]
 801d5c6:	3320      	adds	r3, #32
 801d5c8:	7663      	strb	r3, [r4, #25]
 801d5ca:	3310      	adds	r3, #16
 801d5cc:	76a3      	strb	r3, [r4, #26]
 801d5ce:	9607      	str	r6, [sp, #28]
 801d5d0:	002e      	movs	r6, r5
 801d5d2:	7833      	ldrb	r3, [r6, #0]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d001      	beq.n	801d5dc <_vfiprintf_r+0x7c>
 801d5d8:	2b25      	cmp	r3, #37	@ 0x25
 801d5da:	d148      	bne.n	801d66e <_vfiprintf_r+0x10e>
 801d5dc:	1b73      	subs	r3, r6, r5
 801d5de:	9305      	str	r3, [sp, #20]
 801d5e0:	42ae      	cmp	r6, r5
 801d5e2:	d00b      	beq.n	801d5fc <_vfiprintf_r+0x9c>
 801d5e4:	002a      	movs	r2, r5
 801d5e6:	0039      	movs	r1, r7
 801d5e8:	9803      	ldr	r0, [sp, #12]
 801d5ea:	f7ff ffa6 	bl	801d53a <__sfputs_r>
 801d5ee:	3001      	adds	r0, #1
 801d5f0:	d100      	bne.n	801d5f4 <_vfiprintf_r+0x94>
 801d5f2:	e0ae      	b.n	801d752 <_vfiprintf_r+0x1f2>
 801d5f4:	6963      	ldr	r3, [r4, #20]
 801d5f6:	9a05      	ldr	r2, [sp, #20]
 801d5f8:	189b      	adds	r3, r3, r2
 801d5fa:	6163      	str	r3, [r4, #20]
 801d5fc:	7833      	ldrb	r3, [r6, #0]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d100      	bne.n	801d604 <_vfiprintf_r+0xa4>
 801d602:	e0a6      	b.n	801d752 <_vfiprintf_r+0x1f2>
 801d604:	2201      	movs	r2, #1
 801d606:	2300      	movs	r3, #0
 801d608:	4252      	negs	r2, r2
 801d60a:	6062      	str	r2, [r4, #4]
 801d60c:	a904      	add	r1, sp, #16
 801d60e:	3254      	adds	r2, #84	@ 0x54
 801d610:	1852      	adds	r2, r2, r1
 801d612:	1c75      	adds	r5, r6, #1
 801d614:	6023      	str	r3, [r4, #0]
 801d616:	60e3      	str	r3, [r4, #12]
 801d618:	60a3      	str	r3, [r4, #8]
 801d61a:	7013      	strb	r3, [r2, #0]
 801d61c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801d61e:	4b59      	ldr	r3, [pc, #356]	@ (801d784 <_vfiprintf_r+0x224>)
 801d620:	2205      	movs	r2, #5
 801d622:	0018      	movs	r0, r3
 801d624:	7829      	ldrb	r1, [r5, #0]
 801d626:	9305      	str	r3, [sp, #20]
 801d628:	f7fd fe2d 	bl	801b286 <memchr>
 801d62c:	1c6e      	adds	r6, r5, #1
 801d62e:	2800      	cmp	r0, #0
 801d630:	d11f      	bne.n	801d672 <_vfiprintf_r+0x112>
 801d632:	6822      	ldr	r2, [r4, #0]
 801d634:	06d3      	lsls	r3, r2, #27
 801d636:	d504      	bpl.n	801d642 <_vfiprintf_r+0xe2>
 801d638:	2353      	movs	r3, #83	@ 0x53
 801d63a:	a904      	add	r1, sp, #16
 801d63c:	185b      	adds	r3, r3, r1
 801d63e:	2120      	movs	r1, #32
 801d640:	7019      	strb	r1, [r3, #0]
 801d642:	0713      	lsls	r3, r2, #28
 801d644:	d504      	bpl.n	801d650 <_vfiprintf_r+0xf0>
 801d646:	2353      	movs	r3, #83	@ 0x53
 801d648:	a904      	add	r1, sp, #16
 801d64a:	185b      	adds	r3, r3, r1
 801d64c:	212b      	movs	r1, #43	@ 0x2b
 801d64e:	7019      	strb	r1, [r3, #0]
 801d650:	782b      	ldrb	r3, [r5, #0]
 801d652:	2b2a      	cmp	r3, #42	@ 0x2a
 801d654:	d016      	beq.n	801d684 <_vfiprintf_r+0x124>
 801d656:	002e      	movs	r6, r5
 801d658:	2100      	movs	r1, #0
 801d65a:	200a      	movs	r0, #10
 801d65c:	68e3      	ldr	r3, [r4, #12]
 801d65e:	7832      	ldrb	r2, [r6, #0]
 801d660:	1c75      	adds	r5, r6, #1
 801d662:	3a30      	subs	r2, #48	@ 0x30
 801d664:	2a09      	cmp	r2, #9
 801d666:	d950      	bls.n	801d70a <_vfiprintf_r+0x1aa>
 801d668:	2900      	cmp	r1, #0
 801d66a:	d111      	bne.n	801d690 <_vfiprintf_r+0x130>
 801d66c:	e017      	b.n	801d69e <_vfiprintf_r+0x13e>
 801d66e:	3601      	adds	r6, #1
 801d670:	e7af      	b.n	801d5d2 <_vfiprintf_r+0x72>
 801d672:	9b05      	ldr	r3, [sp, #20]
 801d674:	6822      	ldr	r2, [r4, #0]
 801d676:	1ac0      	subs	r0, r0, r3
 801d678:	2301      	movs	r3, #1
 801d67a:	4083      	lsls	r3, r0
 801d67c:	4313      	orrs	r3, r2
 801d67e:	0035      	movs	r5, r6
 801d680:	6023      	str	r3, [r4, #0]
 801d682:	e7cc      	b.n	801d61e <_vfiprintf_r+0xbe>
 801d684:	9b07      	ldr	r3, [sp, #28]
 801d686:	1d19      	adds	r1, r3, #4
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	9107      	str	r1, [sp, #28]
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	db01      	blt.n	801d694 <_vfiprintf_r+0x134>
 801d690:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d692:	e004      	b.n	801d69e <_vfiprintf_r+0x13e>
 801d694:	425b      	negs	r3, r3
 801d696:	60e3      	str	r3, [r4, #12]
 801d698:	2302      	movs	r3, #2
 801d69a:	4313      	orrs	r3, r2
 801d69c:	6023      	str	r3, [r4, #0]
 801d69e:	7833      	ldrb	r3, [r6, #0]
 801d6a0:	2b2e      	cmp	r3, #46	@ 0x2e
 801d6a2:	d10c      	bne.n	801d6be <_vfiprintf_r+0x15e>
 801d6a4:	7873      	ldrb	r3, [r6, #1]
 801d6a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801d6a8:	d134      	bne.n	801d714 <_vfiprintf_r+0x1b4>
 801d6aa:	9b07      	ldr	r3, [sp, #28]
 801d6ac:	3602      	adds	r6, #2
 801d6ae:	1d1a      	adds	r2, r3, #4
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	9207      	str	r2, [sp, #28]
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	da01      	bge.n	801d6bc <_vfiprintf_r+0x15c>
 801d6b8:	2301      	movs	r3, #1
 801d6ba:	425b      	negs	r3, r3
 801d6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d6be:	4d32      	ldr	r5, [pc, #200]	@ (801d788 <_vfiprintf_r+0x228>)
 801d6c0:	2203      	movs	r2, #3
 801d6c2:	0028      	movs	r0, r5
 801d6c4:	7831      	ldrb	r1, [r6, #0]
 801d6c6:	f7fd fdde 	bl	801b286 <memchr>
 801d6ca:	2800      	cmp	r0, #0
 801d6cc:	d006      	beq.n	801d6dc <_vfiprintf_r+0x17c>
 801d6ce:	2340      	movs	r3, #64	@ 0x40
 801d6d0:	1b40      	subs	r0, r0, r5
 801d6d2:	4083      	lsls	r3, r0
 801d6d4:	6822      	ldr	r2, [r4, #0]
 801d6d6:	3601      	adds	r6, #1
 801d6d8:	4313      	orrs	r3, r2
 801d6da:	6023      	str	r3, [r4, #0]
 801d6dc:	7831      	ldrb	r1, [r6, #0]
 801d6de:	2206      	movs	r2, #6
 801d6e0:	482a      	ldr	r0, [pc, #168]	@ (801d78c <_vfiprintf_r+0x22c>)
 801d6e2:	1c75      	adds	r5, r6, #1
 801d6e4:	7621      	strb	r1, [r4, #24]
 801d6e6:	f7fd fdce 	bl	801b286 <memchr>
 801d6ea:	2800      	cmp	r0, #0
 801d6ec:	d040      	beq.n	801d770 <_vfiprintf_r+0x210>
 801d6ee:	4b28      	ldr	r3, [pc, #160]	@ (801d790 <_vfiprintf_r+0x230>)
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	d122      	bne.n	801d73a <_vfiprintf_r+0x1da>
 801d6f4:	2207      	movs	r2, #7
 801d6f6:	9b07      	ldr	r3, [sp, #28]
 801d6f8:	3307      	adds	r3, #7
 801d6fa:	4393      	bics	r3, r2
 801d6fc:	3308      	adds	r3, #8
 801d6fe:	9307      	str	r3, [sp, #28]
 801d700:	6963      	ldr	r3, [r4, #20]
 801d702:	9a04      	ldr	r2, [sp, #16]
 801d704:	189b      	adds	r3, r3, r2
 801d706:	6163      	str	r3, [r4, #20]
 801d708:	e762      	b.n	801d5d0 <_vfiprintf_r+0x70>
 801d70a:	4343      	muls	r3, r0
 801d70c:	002e      	movs	r6, r5
 801d70e:	2101      	movs	r1, #1
 801d710:	189b      	adds	r3, r3, r2
 801d712:	e7a4      	b.n	801d65e <_vfiprintf_r+0xfe>
 801d714:	2300      	movs	r3, #0
 801d716:	200a      	movs	r0, #10
 801d718:	0019      	movs	r1, r3
 801d71a:	3601      	adds	r6, #1
 801d71c:	6063      	str	r3, [r4, #4]
 801d71e:	7832      	ldrb	r2, [r6, #0]
 801d720:	1c75      	adds	r5, r6, #1
 801d722:	3a30      	subs	r2, #48	@ 0x30
 801d724:	2a09      	cmp	r2, #9
 801d726:	d903      	bls.n	801d730 <_vfiprintf_r+0x1d0>
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d0c8      	beq.n	801d6be <_vfiprintf_r+0x15e>
 801d72c:	9109      	str	r1, [sp, #36]	@ 0x24
 801d72e:	e7c6      	b.n	801d6be <_vfiprintf_r+0x15e>
 801d730:	4341      	muls	r1, r0
 801d732:	002e      	movs	r6, r5
 801d734:	2301      	movs	r3, #1
 801d736:	1889      	adds	r1, r1, r2
 801d738:	e7f1      	b.n	801d71e <_vfiprintf_r+0x1be>
 801d73a:	aa07      	add	r2, sp, #28
 801d73c:	9200      	str	r2, [sp, #0]
 801d73e:	0021      	movs	r1, r4
 801d740:	003a      	movs	r2, r7
 801d742:	4b14      	ldr	r3, [pc, #80]	@ (801d794 <_vfiprintf_r+0x234>)
 801d744:	9803      	ldr	r0, [sp, #12]
 801d746:	f7fc ff99 	bl	801a67c <_printf_float>
 801d74a:	9004      	str	r0, [sp, #16]
 801d74c:	9b04      	ldr	r3, [sp, #16]
 801d74e:	3301      	adds	r3, #1
 801d750:	d1d6      	bne.n	801d700 <_vfiprintf_r+0x1a0>
 801d752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d754:	07db      	lsls	r3, r3, #31
 801d756:	d405      	bmi.n	801d764 <_vfiprintf_r+0x204>
 801d758:	89bb      	ldrh	r3, [r7, #12]
 801d75a:	059b      	lsls	r3, r3, #22
 801d75c:	d402      	bmi.n	801d764 <_vfiprintf_r+0x204>
 801d75e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d760:	f7fd fd90 	bl	801b284 <__retarget_lock_release_recursive>
 801d764:	89bb      	ldrh	r3, [r7, #12]
 801d766:	065b      	lsls	r3, r3, #25
 801d768:	d500      	bpl.n	801d76c <_vfiprintf_r+0x20c>
 801d76a:	e71e      	b.n	801d5aa <_vfiprintf_r+0x4a>
 801d76c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d76e:	e71e      	b.n	801d5ae <_vfiprintf_r+0x4e>
 801d770:	aa07      	add	r2, sp, #28
 801d772:	9200      	str	r2, [sp, #0]
 801d774:	0021      	movs	r1, r4
 801d776:	003a      	movs	r2, r7
 801d778:	4b06      	ldr	r3, [pc, #24]	@ (801d794 <_vfiprintf_r+0x234>)
 801d77a:	9803      	ldr	r0, [sp, #12]
 801d77c:	f7fd fa2c 	bl	801abd8 <_printf_i>
 801d780:	e7e3      	b.n	801d74a <_vfiprintf_r+0x1ea>
 801d782:	46c0      	nop			@ (mov r8, r8)
 801d784:	0801fb51 	.word	0x0801fb51
 801d788:	0801fb57 	.word	0x0801fb57
 801d78c:	0801fb5b 	.word	0x0801fb5b
 801d790:	0801a67d 	.word	0x0801a67d
 801d794:	0801d53b 	.word	0x0801d53b

0801d798 <__sflush_r>:
 801d798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d79a:	220c      	movs	r2, #12
 801d79c:	5e8b      	ldrsh	r3, [r1, r2]
 801d79e:	0005      	movs	r5, r0
 801d7a0:	000c      	movs	r4, r1
 801d7a2:	071a      	lsls	r2, r3, #28
 801d7a4:	d456      	bmi.n	801d854 <__sflush_r+0xbc>
 801d7a6:	684a      	ldr	r2, [r1, #4]
 801d7a8:	2a00      	cmp	r2, #0
 801d7aa:	dc02      	bgt.n	801d7b2 <__sflush_r+0x1a>
 801d7ac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801d7ae:	2a00      	cmp	r2, #0
 801d7b0:	dd4e      	ble.n	801d850 <__sflush_r+0xb8>
 801d7b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801d7b4:	2f00      	cmp	r7, #0
 801d7b6:	d04b      	beq.n	801d850 <__sflush_r+0xb8>
 801d7b8:	2200      	movs	r2, #0
 801d7ba:	2080      	movs	r0, #128	@ 0x80
 801d7bc:	682e      	ldr	r6, [r5, #0]
 801d7be:	602a      	str	r2, [r5, #0]
 801d7c0:	001a      	movs	r2, r3
 801d7c2:	0140      	lsls	r0, r0, #5
 801d7c4:	6a21      	ldr	r1, [r4, #32]
 801d7c6:	4002      	ands	r2, r0
 801d7c8:	4203      	tst	r3, r0
 801d7ca:	d033      	beq.n	801d834 <__sflush_r+0x9c>
 801d7cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d7ce:	89a3      	ldrh	r3, [r4, #12]
 801d7d0:	075b      	lsls	r3, r3, #29
 801d7d2:	d506      	bpl.n	801d7e2 <__sflush_r+0x4a>
 801d7d4:	6863      	ldr	r3, [r4, #4]
 801d7d6:	1ad2      	subs	r2, r2, r3
 801d7d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d001      	beq.n	801d7e2 <__sflush_r+0x4a>
 801d7de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d7e0:	1ad2      	subs	r2, r2, r3
 801d7e2:	2300      	movs	r3, #0
 801d7e4:	0028      	movs	r0, r5
 801d7e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801d7e8:	6a21      	ldr	r1, [r4, #32]
 801d7ea:	47b8      	blx	r7
 801d7ec:	89a2      	ldrh	r2, [r4, #12]
 801d7ee:	1c43      	adds	r3, r0, #1
 801d7f0:	d106      	bne.n	801d800 <__sflush_r+0x68>
 801d7f2:	6829      	ldr	r1, [r5, #0]
 801d7f4:	291d      	cmp	r1, #29
 801d7f6:	d846      	bhi.n	801d886 <__sflush_r+0xee>
 801d7f8:	4b29      	ldr	r3, [pc, #164]	@ (801d8a0 <__sflush_r+0x108>)
 801d7fa:	410b      	asrs	r3, r1
 801d7fc:	07db      	lsls	r3, r3, #31
 801d7fe:	d442      	bmi.n	801d886 <__sflush_r+0xee>
 801d800:	2300      	movs	r3, #0
 801d802:	6063      	str	r3, [r4, #4]
 801d804:	6923      	ldr	r3, [r4, #16]
 801d806:	6023      	str	r3, [r4, #0]
 801d808:	04d2      	lsls	r2, r2, #19
 801d80a:	d505      	bpl.n	801d818 <__sflush_r+0x80>
 801d80c:	1c43      	adds	r3, r0, #1
 801d80e:	d102      	bne.n	801d816 <__sflush_r+0x7e>
 801d810:	682b      	ldr	r3, [r5, #0]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d100      	bne.n	801d818 <__sflush_r+0x80>
 801d816:	6560      	str	r0, [r4, #84]	@ 0x54
 801d818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d81a:	602e      	str	r6, [r5, #0]
 801d81c:	2900      	cmp	r1, #0
 801d81e:	d017      	beq.n	801d850 <__sflush_r+0xb8>
 801d820:	0023      	movs	r3, r4
 801d822:	3344      	adds	r3, #68	@ 0x44
 801d824:	4299      	cmp	r1, r3
 801d826:	d002      	beq.n	801d82e <__sflush_r+0x96>
 801d828:	0028      	movs	r0, r5
 801d82a:	f7fe fbc9 	bl	801bfc0 <_free_r>
 801d82e:	2300      	movs	r3, #0
 801d830:	6363      	str	r3, [r4, #52]	@ 0x34
 801d832:	e00d      	b.n	801d850 <__sflush_r+0xb8>
 801d834:	2301      	movs	r3, #1
 801d836:	0028      	movs	r0, r5
 801d838:	47b8      	blx	r7
 801d83a:	0002      	movs	r2, r0
 801d83c:	1c43      	adds	r3, r0, #1
 801d83e:	d1c6      	bne.n	801d7ce <__sflush_r+0x36>
 801d840:	682b      	ldr	r3, [r5, #0]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d0c3      	beq.n	801d7ce <__sflush_r+0x36>
 801d846:	2b1d      	cmp	r3, #29
 801d848:	d001      	beq.n	801d84e <__sflush_r+0xb6>
 801d84a:	2b16      	cmp	r3, #22
 801d84c:	d11a      	bne.n	801d884 <__sflush_r+0xec>
 801d84e:	602e      	str	r6, [r5, #0]
 801d850:	2000      	movs	r0, #0
 801d852:	e01e      	b.n	801d892 <__sflush_r+0xfa>
 801d854:	690e      	ldr	r6, [r1, #16]
 801d856:	2e00      	cmp	r6, #0
 801d858:	d0fa      	beq.n	801d850 <__sflush_r+0xb8>
 801d85a:	680f      	ldr	r7, [r1, #0]
 801d85c:	600e      	str	r6, [r1, #0]
 801d85e:	1bba      	subs	r2, r7, r6
 801d860:	9201      	str	r2, [sp, #4]
 801d862:	2200      	movs	r2, #0
 801d864:	079b      	lsls	r3, r3, #30
 801d866:	d100      	bne.n	801d86a <__sflush_r+0xd2>
 801d868:	694a      	ldr	r2, [r1, #20]
 801d86a:	60a2      	str	r2, [r4, #8]
 801d86c:	9b01      	ldr	r3, [sp, #4]
 801d86e:	2b00      	cmp	r3, #0
 801d870:	ddee      	ble.n	801d850 <__sflush_r+0xb8>
 801d872:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d874:	0032      	movs	r2, r6
 801d876:	001f      	movs	r7, r3
 801d878:	0028      	movs	r0, r5
 801d87a:	9b01      	ldr	r3, [sp, #4]
 801d87c:	6a21      	ldr	r1, [r4, #32]
 801d87e:	47b8      	blx	r7
 801d880:	2800      	cmp	r0, #0
 801d882:	dc07      	bgt.n	801d894 <__sflush_r+0xfc>
 801d884:	89a2      	ldrh	r2, [r4, #12]
 801d886:	2340      	movs	r3, #64	@ 0x40
 801d888:	2001      	movs	r0, #1
 801d88a:	4313      	orrs	r3, r2
 801d88c:	b21b      	sxth	r3, r3
 801d88e:	81a3      	strh	r3, [r4, #12]
 801d890:	4240      	negs	r0, r0
 801d892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d894:	9b01      	ldr	r3, [sp, #4]
 801d896:	1836      	adds	r6, r6, r0
 801d898:	1a1b      	subs	r3, r3, r0
 801d89a:	9301      	str	r3, [sp, #4]
 801d89c:	e7e6      	b.n	801d86c <__sflush_r+0xd4>
 801d89e:	46c0      	nop			@ (mov r8, r8)
 801d8a0:	dfbffffe 	.word	0xdfbffffe

0801d8a4 <_fflush_r>:
 801d8a4:	690b      	ldr	r3, [r1, #16]
 801d8a6:	b570      	push	{r4, r5, r6, lr}
 801d8a8:	0005      	movs	r5, r0
 801d8aa:	000c      	movs	r4, r1
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d102      	bne.n	801d8b6 <_fflush_r+0x12>
 801d8b0:	2500      	movs	r5, #0
 801d8b2:	0028      	movs	r0, r5
 801d8b4:	bd70      	pop	{r4, r5, r6, pc}
 801d8b6:	2800      	cmp	r0, #0
 801d8b8:	d004      	beq.n	801d8c4 <_fflush_r+0x20>
 801d8ba:	6a03      	ldr	r3, [r0, #32]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d101      	bne.n	801d8c4 <_fflush_r+0x20>
 801d8c0:	f7fd fb28 	bl	801af14 <__sinit>
 801d8c4:	220c      	movs	r2, #12
 801d8c6:	5ea3      	ldrsh	r3, [r4, r2]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d0f1      	beq.n	801d8b0 <_fflush_r+0xc>
 801d8cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d8ce:	07d2      	lsls	r2, r2, #31
 801d8d0:	d404      	bmi.n	801d8dc <_fflush_r+0x38>
 801d8d2:	059b      	lsls	r3, r3, #22
 801d8d4:	d402      	bmi.n	801d8dc <_fflush_r+0x38>
 801d8d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d8d8:	f7fd fcd3 	bl	801b282 <__retarget_lock_acquire_recursive>
 801d8dc:	0028      	movs	r0, r5
 801d8de:	0021      	movs	r1, r4
 801d8e0:	f7ff ff5a 	bl	801d798 <__sflush_r>
 801d8e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d8e6:	0005      	movs	r5, r0
 801d8e8:	07db      	lsls	r3, r3, #31
 801d8ea:	d4e2      	bmi.n	801d8b2 <_fflush_r+0xe>
 801d8ec:	89a3      	ldrh	r3, [r4, #12]
 801d8ee:	059b      	lsls	r3, r3, #22
 801d8f0:	d4df      	bmi.n	801d8b2 <_fflush_r+0xe>
 801d8f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d8f4:	f7fd fcc6 	bl	801b284 <__retarget_lock_release_recursive>
 801d8f8:	e7db      	b.n	801d8b2 <_fflush_r+0xe>

0801d8fa <__swbuf_r>:
 801d8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8fc:	0006      	movs	r6, r0
 801d8fe:	000d      	movs	r5, r1
 801d900:	0014      	movs	r4, r2
 801d902:	2800      	cmp	r0, #0
 801d904:	d004      	beq.n	801d910 <__swbuf_r+0x16>
 801d906:	6a03      	ldr	r3, [r0, #32]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d101      	bne.n	801d910 <__swbuf_r+0x16>
 801d90c:	f7fd fb02 	bl	801af14 <__sinit>
 801d910:	69a3      	ldr	r3, [r4, #24]
 801d912:	60a3      	str	r3, [r4, #8]
 801d914:	89a3      	ldrh	r3, [r4, #12]
 801d916:	071b      	lsls	r3, r3, #28
 801d918:	d502      	bpl.n	801d920 <__swbuf_r+0x26>
 801d91a:	6923      	ldr	r3, [r4, #16]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d109      	bne.n	801d934 <__swbuf_r+0x3a>
 801d920:	0021      	movs	r1, r4
 801d922:	0030      	movs	r0, r6
 801d924:	f000 f82c 	bl	801d980 <__swsetup_r>
 801d928:	2800      	cmp	r0, #0
 801d92a:	d003      	beq.n	801d934 <__swbuf_r+0x3a>
 801d92c:	2501      	movs	r5, #1
 801d92e:	426d      	negs	r5, r5
 801d930:	0028      	movs	r0, r5
 801d932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d934:	6923      	ldr	r3, [r4, #16]
 801d936:	6820      	ldr	r0, [r4, #0]
 801d938:	b2ef      	uxtb	r7, r5
 801d93a:	1ac0      	subs	r0, r0, r3
 801d93c:	6963      	ldr	r3, [r4, #20]
 801d93e:	b2ed      	uxtb	r5, r5
 801d940:	4283      	cmp	r3, r0
 801d942:	dc05      	bgt.n	801d950 <__swbuf_r+0x56>
 801d944:	0021      	movs	r1, r4
 801d946:	0030      	movs	r0, r6
 801d948:	f7ff ffac 	bl	801d8a4 <_fflush_r>
 801d94c:	2800      	cmp	r0, #0
 801d94e:	d1ed      	bne.n	801d92c <__swbuf_r+0x32>
 801d950:	68a3      	ldr	r3, [r4, #8]
 801d952:	3001      	adds	r0, #1
 801d954:	3b01      	subs	r3, #1
 801d956:	60a3      	str	r3, [r4, #8]
 801d958:	6823      	ldr	r3, [r4, #0]
 801d95a:	1c5a      	adds	r2, r3, #1
 801d95c:	6022      	str	r2, [r4, #0]
 801d95e:	701f      	strb	r7, [r3, #0]
 801d960:	6963      	ldr	r3, [r4, #20]
 801d962:	4283      	cmp	r3, r0
 801d964:	d004      	beq.n	801d970 <__swbuf_r+0x76>
 801d966:	89a3      	ldrh	r3, [r4, #12]
 801d968:	07db      	lsls	r3, r3, #31
 801d96a:	d5e1      	bpl.n	801d930 <__swbuf_r+0x36>
 801d96c:	2d0a      	cmp	r5, #10
 801d96e:	d1df      	bne.n	801d930 <__swbuf_r+0x36>
 801d970:	0021      	movs	r1, r4
 801d972:	0030      	movs	r0, r6
 801d974:	f7ff ff96 	bl	801d8a4 <_fflush_r>
 801d978:	2800      	cmp	r0, #0
 801d97a:	d0d9      	beq.n	801d930 <__swbuf_r+0x36>
 801d97c:	e7d6      	b.n	801d92c <__swbuf_r+0x32>
	...

0801d980 <__swsetup_r>:
 801d980:	4b2d      	ldr	r3, [pc, #180]	@ (801da38 <__swsetup_r+0xb8>)
 801d982:	b570      	push	{r4, r5, r6, lr}
 801d984:	0005      	movs	r5, r0
 801d986:	6818      	ldr	r0, [r3, #0]
 801d988:	000c      	movs	r4, r1
 801d98a:	2800      	cmp	r0, #0
 801d98c:	d004      	beq.n	801d998 <__swsetup_r+0x18>
 801d98e:	6a03      	ldr	r3, [r0, #32]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d101      	bne.n	801d998 <__swsetup_r+0x18>
 801d994:	f7fd fabe 	bl	801af14 <__sinit>
 801d998:	230c      	movs	r3, #12
 801d99a:	5ee2      	ldrsh	r2, [r4, r3]
 801d99c:	0713      	lsls	r3, r2, #28
 801d99e:	d423      	bmi.n	801d9e8 <__swsetup_r+0x68>
 801d9a0:	06d3      	lsls	r3, r2, #27
 801d9a2:	d407      	bmi.n	801d9b4 <__swsetup_r+0x34>
 801d9a4:	2309      	movs	r3, #9
 801d9a6:	602b      	str	r3, [r5, #0]
 801d9a8:	2340      	movs	r3, #64	@ 0x40
 801d9aa:	2001      	movs	r0, #1
 801d9ac:	4313      	orrs	r3, r2
 801d9ae:	81a3      	strh	r3, [r4, #12]
 801d9b0:	4240      	negs	r0, r0
 801d9b2:	e03a      	b.n	801da2a <__swsetup_r+0xaa>
 801d9b4:	0752      	lsls	r2, r2, #29
 801d9b6:	d513      	bpl.n	801d9e0 <__swsetup_r+0x60>
 801d9b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d9ba:	2900      	cmp	r1, #0
 801d9bc:	d008      	beq.n	801d9d0 <__swsetup_r+0x50>
 801d9be:	0023      	movs	r3, r4
 801d9c0:	3344      	adds	r3, #68	@ 0x44
 801d9c2:	4299      	cmp	r1, r3
 801d9c4:	d002      	beq.n	801d9cc <__swsetup_r+0x4c>
 801d9c6:	0028      	movs	r0, r5
 801d9c8:	f7fe fafa 	bl	801bfc0 <_free_r>
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	6363      	str	r3, [r4, #52]	@ 0x34
 801d9d0:	2224      	movs	r2, #36	@ 0x24
 801d9d2:	89a3      	ldrh	r3, [r4, #12]
 801d9d4:	4393      	bics	r3, r2
 801d9d6:	81a3      	strh	r3, [r4, #12]
 801d9d8:	2300      	movs	r3, #0
 801d9da:	6063      	str	r3, [r4, #4]
 801d9dc:	6923      	ldr	r3, [r4, #16]
 801d9de:	6023      	str	r3, [r4, #0]
 801d9e0:	2308      	movs	r3, #8
 801d9e2:	89a2      	ldrh	r2, [r4, #12]
 801d9e4:	4313      	orrs	r3, r2
 801d9e6:	81a3      	strh	r3, [r4, #12]
 801d9e8:	6923      	ldr	r3, [r4, #16]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d10b      	bne.n	801da06 <__swsetup_r+0x86>
 801d9ee:	21a0      	movs	r1, #160	@ 0xa0
 801d9f0:	2280      	movs	r2, #128	@ 0x80
 801d9f2:	89a3      	ldrh	r3, [r4, #12]
 801d9f4:	0089      	lsls	r1, r1, #2
 801d9f6:	0092      	lsls	r2, r2, #2
 801d9f8:	400b      	ands	r3, r1
 801d9fa:	4293      	cmp	r3, r2
 801d9fc:	d003      	beq.n	801da06 <__swsetup_r+0x86>
 801d9fe:	0021      	movs	r1, r4
 801da00:	0028      	movs	r0, r5
 801da02:	f000 f8f5 	bl	801dbf0 <__smakebuf_r>
 801da06:	230c      	movs	r3, #12
 801da08:	5ee2      	ldrsh	r2, [r4, r3]
 801da0a:	2101      	movs	r1, #1
 801da0c:	0013      	movs	r3, r2
 801da0e:	400b      	ands	r3, r1
 801da10:	420a      	tst	r2, r1
 801da12:	d00b      	beq.n	801da2c <__swsetup_r+0xac>
 801da14:	2300      	movs	r3, #0
 801da16:	60a3      	str	r3, [r4, #8]
 801da18:	6963      	ldr	r3, [r4, #20]
 801da1a:	425b      	negs	r3, r3
 801da1c:	61a3      	str	r3, [r4, #24]
 801da1e:	2000      	movs	r0, #0
 801da20:	6923      	ldr	r3, [r4, #16]
 801da22:	4283      	cmp	r3, r0
 801da24:	d101      	bne.n	801da2a <__swsetup_r+0xaa>
 801da26:	0613      	lsls	r3, r2, #24
 801da28:	d4be      	bmi.n	801d9a8 <__swsetup_r+0x28>
 801da2a:	bd70      	pop	{r4, r5, r6, pc}
 801da2c:	0791      	lsls	r1, r2, #30
 801da2e:	d400      	bmi.n	801da32 <__swsetup_r+0xb2>
 801da30:	6963      	ldr	r3, [r4, #20]
 801da32:	60a3      	str	r3, [r4, #8]
 801da34:	e7f3      	b.n	801da1e <__swsetup_r+0x9e>
 801da36:	46c0      	nop			@ (mov r8, r8)
 801da38:	20000374 	.word	0x20000374

0801da3c <memmove>:
 801da3c:	b510      	push	{r4, lr}
 801da3e:	4288      	cmp	r0, r1
 801da40:	d806      	bhi.n	801da50 <memmove+0x14>
 801da42:	2300      	movs	r3, #0
 801da44:	429a      	cmp	r2, r3
 801da46:	d008      	beq.n	801da5a <memmove+0x1e>
 801da48:	5ccc      	ldrb	r4, [r1, r3]
 801da4a:	54c4      	strb	r4, [r0, r3]
 801da4c:	3301      	adds	r3, #1
 801da4e:	e7f9      	b.n	801da44 <memmove+0x8>
 801da50:	188b      	adds	r3, r1, r2
 801da52:	4298      	cmp	r0, r3
 801da54:	d2f5      	bcs.n	801da42 <memmove+0x6>
 801da56:	3a01      	subs	r2, #1
 801da58:	d200      	bcs.n	801da5c <memmove+0x20>
 801da5a:	bd10      	pop	{r4, pc}
 801da5c:	5c8b      	ldrb	r3, [r1, r2]
 801da5e:	5483      	strb	r3, [r0, r2]
 801da60:	e7f9      	b.n	801da56 <memmove+0x1a>
	...

0801da64 <_sbrk_r>:
 801da64:	2300      	movs	r3, #0
 801da66:	b570      	push	{r4, r5, r6, lr}
 801da68:	4d06      	ldr	r5, [pc, #24]	@ (801da84 <_sbrk_r+0x20>)
 801da6a:	0004      	movs	r4, r0
 801da6c:	0008      	movs	r0, r1
 801da6e:	602b      	str	r3, [r5, #0]
 801da70:	f7ec fd1e 	bl	800a4b0 <_sbrk>
 801da74:	1c43      	adds	r3, r0, #1
 801da76:	d103      	bne.n	801da80 <_sbrk_r+0x1c>
 801da78:	682b      	ldr	r3, [r5, #0]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d000      	beq.n	801da80 <_sbrk_r+0x1c>
 801da7e:	6023      	str	r3, [r4, #0]
 801da80:	bd70      	pop	{r4, r5, r6, pc}
 801da82:	46c0      	nop			@ (mov r8, r8)
 801da84:	2000383c 	.word	0x2000383c

0801da88 <__assert_func>:
 801da88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801da8a:	0014      	movs	r4, r2
 801da8c:	001a      	movs	r2, r3
 801da8e:	4b09      	ldr	r3, [pc, #36]	@ (801dab4 <__assert_func+0x2c>)
 801da90:	0005      	movs	r5, r0
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	000e      	movs	r6, r1
 801da96:	68d8      	ldr	r0, [r3, #12]
 801da98:	4b07      	ldr	r3, [pc, #28]	@ (801dab8 <__assert_func+0x30>)
 801da9a:	2c00      	cmp	r4, #0
 801da9c:	d101      	bne.n	801daa2 <__assert_func+0x1a>
 801da9e:	4b07      	ldr	r3, [pc, #28]	@ (801dabc <__assert_func+0x34>)
 801daa0:	001c      	movs	r4, r3
 801daa2:	4907      	ldr	r1, [pc, #28]	@ (801dac0 <__assert_func+0x38>)
 801daa4:	9301      	str	r3, [sp, #4]
 801daa6:	9402      	str	r4, [sp, #8]
 801daa8:	002b      	movs	r3, r5
 801daaa:	9600      	str	r6, [sp, #0]
 801daac:	f000 f866 	bl	801db7c <fiprintf>
 801dab0:	f000 f904 	bl	801dcbc <abort>
 801dab4:	20000374 	.word	0x20000374
 801dab8:	0801fb62 	.word	0x0801fb62
 801dabc:	0801fb9d 	.word	0x0801fb9d
 801dac0:	0801fb6f 	.word	0x0801fb6f

0801dac4 <_calloc_r>:
 801dac4:	b570      	push	{r4, r5, r6, lr}
 801dac6:	0c0b      	lsrs	r3, r1, #16
 801dac8:	0c15      	lsrs	r5, r2, #16
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d11e      	bne.n	801db0c <_calloc_r+0x48>
 801dace:	2d00      	cmp	r5, #0
 801dad0:	d10c      	bne.n	801daec <_calloc_r+0x28>
 801dad2:	b289      	uxth	r1, r1
 801dad4:	b294      	uxth	r4, r2
 801dad6:	434c      	muls	r4, r1
 801dad8:	0021      	movs	r1, r4
 801dada:	f7fe fe41 	bl	801c760 <_malloc_r>
 801dade:	1e05      	subs	r5, r0, #0
 801dae0:	d01a      	beq.n	801db18 <_calloc_r+0x54>
 801dae2:	0022      	movs	r2, r4
 801dae4:	2100      	movs	r1, #0
 801dae6:	f7fd fafd 	bl	801b0e4 <memset>
 801daea:	e016      	b.n	801db1a <_calloc_r+0x56>
 801daec:	1c2b      	adds	r3, r5, #0
 801daee:	1c0c      	adds	r4, r1, #0
 801daf0:	b289      	uxth	r1, r1
 801daf2:	b292      	uxth	r2, r2
 801daf4:	434a      	muls	r2, r1
 801daf6:	b29b      	uxth	r3, r3
 801daf8:	b2a1      	uxth	r1, r4
 801dafa:	4359      	muls	r1, r3
 801dafc:	0c14      	lsrs	r4, r2, #16
 801dafe:	190c      	adds	r4, r1, r4
 801db00:	0c23      	lsrs	r3, r4, #16
 801db02:	d107      	bne.n	801db14 <_calloc_r+0x50>
 801db04:	0424      	lsls	r4, r4, #16
 801db06:	b292      	uxth	r2, r2
 801db08:	4314      	orrs	r4, r2
 801db0a:	e7e5      	b.n	801dad8 <_calloc_r+0x14>
 801db0c:	2d00      	cmp	r5, #0
 801db0e:	d101      	bne.n	801db14 <_calloc_r+0x50>
 801db10:	1c14      	adds	r4, r2, #0
 801db12:	e7ed      	b.n	801daf0 <_calloc_r+0x2c>
 801db14:	230c      	movs	r3, #12
 801db16:	6003      	str	r3, [r0, #0]
 801db18:	2500      	movs	r5, #0
 801db1a:	0028      	movs	r0, r5
 801db1c:	bd70      	pop	{r4, r5, r6, pc}

0801db1e <_realloc_r>:
 801db1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db20:	0006      	movs	r6, r0
 801db22:	000c      	movs	r4, r1
 801db24:	0015      	movs	r5, r2
 801db26:	2900      	cmp	r1, #0
 801db28:	d105      	bne.n	801db36 <_realloc_r+0x18>
 801db2a:	0011      	movs	r1, r2
 801db2c:	f7fe fe18 	bl	801c760 <_malloc_r>
 801db30:	0004      	movs	r4, r0
 801db32:	0020      	movs	r0, r4
 801db34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801db36:	2a00      	cmp	r2, #0
 801db38:	d103      	bne.n	801db42 <_realloc_r+0x24>
 801db3a:	f7fe fa41 	bl	801bfc0 <_free_r>
 801db3e:	2400      	movs	r4, #0
 801db40:	e7f7      	b.n	801db32 <_realloc_r+0x14>
 801db42:	f000 f8c2 	bl	801dcca <_malloc_usable_size_r>
 801db46:	0007      	movs	r7, r0
 801db48:	4285      	cmp	r5, r0
 801db4a:	d802      	bhi.n	801db52 <_realloc_r+0x34>
 801db4c:	0843      	lsrs	r3, r0, #1
 801db4e:	42ab      	cmp	r3, r5
 801db50:	d3ef      	bcc.n	801db32 <_realloc_r+0x14>
 801db52:	0029      	movs	r1, r5
 801db54:	0030      	movs	r0, r6
 801db56:	f7fe fe03 	bl	801c760 <_malloc_r>
 801db5a:	9001      	str	r0, [sp, #4]
 801db5c:	2800      	cmp	r0, #0
 801db5e:	d0ee      	beq.n	801db3e <_realloc_r+0x20>
 801db60:	002a      	movs	r2, r5
 801db62:	42bd      	cmp	r5, r7
 801db64:	d900      	bls.n	801db68 <_realloc_r+0x4a>
 801db66:	003a      	movs	r2, r7
 801db68:	0021      	movs	r1, r4
 801db6a:	9801      	ldr	r0, [sp, #4]
 801db6c:	f7fd fb96 	bl	801b29c <memcpy>
 801db70:	0021      	movs	r1, r4
 801db72:	0030      	movs	r0, r6
 801db74:	f7fe fa24 	bl	801bfc0 <_free_r>
 801db78:	9c01      	ldr	r4, [sp, #4]
 801db7a:	e7da      	b.n	801db32 <_realloc_r+0x14>

0801db7c <fiprintf>:
 801db7c:	b40e      	push	{r1, r2, r3}
 801db7e:	b517      	push	{r0, r1, r2, r4, lr}
 801db80:	4c05      	ldr	r4, [pc, #20]	@ (801db98 <fiprintf+0x1c>)
 801db82:	ab05      	add	r3, sp, #20
 801db84:	cb04      	ldmia	r3!, {r2}
 801db86:	0001      	movs	r1, r0
 801db88:	6820      	ldr	r0, [r4, #0]
 801db8a:	9301      	str	r3, [sp, #4]
 801db8c:	f7ff fce8 	bl	801d560 <_vfiprintf_r>
 801db90:	bc1e      	pop	{r1, r2, r3, r4}
 801db92:	bc08      	pop	{r3}
 801db94:	b003      	add	sp, #12
 801db96:	4718      	bx	r3
 801db98:	20000374 	.word	0x20000374

0801db9c <__swhatbuf_r>:
 801db9c:	b570      	push	{r4, r5, r6, lr}
 801db9e:	000e      	movs	r6, r1
 801dba0:	001d      	movs	r5, r3
 801dba2:	230e      	movs	r3, #14
 801dba4:	5ec9      	ldrsh	r1, [r1, r3]
 801dba6:	0014      	movs	r4, r2
 801dba8:	b096      	sub	sp, #88	@ 0x58
 801dbaa:	2900      	cmp	r1, #0
 801dbac:	da0c      	bge.n	801dbc8 <__swhatbuf_r+0x2c>
 801dbae:	89b2      	ldrh	r2, [r6, #12]
 801dbb0:	2380      	movs	r3, #128	@ 0x80
 801dbb2:	0011      	movs	r1, r2
 801dbb4:	4019      	ands	r1, r3
 801dbb6:	421a      	tst	r2, r3
 801dbb8:	d114      	bne.n	801dbe4 <__swhatbuf_r+0x48>
 801dbba:	2380      	movs	r3, #128	@ 0x80
 801dbbc:	00db      	lsls	r3, r3, #3
 801dbbe:	2000      	movs	r0, #0
 801dbc0:	6029      	str	r1, [r5, #0]
 801dbc2:	6023      	str	r3, [r4, #0]
 801dbc4:	b016      	add	sp, #88	@ 0x58
 801dbc6:	bd70      	pop	{r4, r5, r6, pc}
 801dbc8:	466a      	mov	r2, sp
 801dbca:	f000 f853 	bl	801dc74 <_fstat_r>
 801dbce:	2800      	cmp	r0, #0
 801dbd0:	dbed      	blt.n	801dbae <__swhatbuf_r+0x12>
 801dbd2:	23f0      	movs	r3, #240	@ 0xf0
 801dbd4:	9901      	ldr	r1, [sp, #4]
 801dbd6:	021b      	lsls	r3, r3, #8
 801dbd8:	4019      	ands	r1, r3
 801dbda:	4b04      	ldr	r3, [pc, #16]	@ (801dbec <__swhatbuf_r+0x50>)
 801dbdc:	18c9      	adds	r1, r1, r3
 801dbde:	424b      	negs	r3, r1
 801dbe0:	4159      	adcs	r1, r3
 801dbe2:	e7ea      	b.n	801dbba <__swhatbuf_r+0x1e>
 801dbe4:	2100      	movs	r1, #0
 801dbe6:	2340      	movs	r3, #64	@ 0x40
 801dbe8:	e7e9      	b.n	801dbbe <__swhatbuf_r+0x22>
 801dbea:	46c0      	nop			@ (mov r8, r8)
 801dbec:	ffffe000 	.word	0xffffe000

0801dbf0 <__smakebuf_r>:
 801dbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbf2:	2602      	movs	r6, #2
 801dbf4:	898b      	ldrh	r3, [r1, #12]
 801dbf6:	0005      	movs	r5, r0
 801dbf8:	000c      	movs	r4, r1
 801dbfa:	b085      	sub	sp, #20
 801dbfc:	4233      	tst	r3, r6
 801dbfe:	d007      	beq.n	801dc10 <__smakebuf_r+0x20>
 801dc00:	0023      	movs	r3, r4
 801dc02:	3347      	adds	r3, #71	@ 0x47
 801dc04:	6023      	str	r3, [r4, #0]
 801dc06:	6123      	str	r3, [r4, #16]
 801dc08:	2301      	movs	r3, #1
 801dc0a:	6163      	str	r3, [r4, #20]
 801dc0c:	b005      	add	sp, #20
 801dc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc10:	ab03      	add	r3, sp, #12
 801dc12:	aa02      	add	r2, sp, #8
 801dc14:	f7ff ffc2 	bl	801db9c <__swhatbuf_r>
 801dc18:	9f02      	ldr	r7, [sp, #8]
 801dc1a:	9001      	str	r0, [sp, #4]
 801dc1c:	0039      	movs	r1, r7
 801dc1e:	0028      	movs	r0, r5
 801dc20:	f7fe fd9e 	bl	801c760 <_malloc_r>
 801dc24:	2800      	cmp	r0, #0
 801dc26:	d108      	bne.n	801dc3a <__smakebuf_r+0x4a>
 801dc28:	220c      	movs	r2, #12
 801dc2a:	5ea3      	ldrsh	r3, [r4, r2]
 801dc2c:	059a      	lsls	r2, r3, #22
 801dc2e:	d4ed      	bmi.n	801dc0c <__smakebuf_r+0x1c>
 801dc30:	2203      	movs	r2, #3
 801dc32:	4393      	bics	r3, r2
 801dc34:	431e      	orrs	r6, r3
 801dc36:	81a6      	strh	r6, [r4, #12]
 801dc38:	e7e2      	b.n	801dc00 <__smakebuf_r+0x10>
 801dc3a:	2380      	movs	r3, #128	@ 0x80
 801dc3c:	89a2      	ldrh	r2, [r4, #12]
 801dc3e:	6020      	str	r0, [r4, #0]
 801dc40:	4313      	orrs	r3, r2
 801dc42:	81a3      	strh	r3, [r4, #12]
 801dc44:	9b03      	ldr	r3, [sp, #12]
 801dc46:	6120      	str	r0, [r4, #16]
 801dc48:	6167      	str	r7, [r4, #20]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d00c      	beq.n	801dc68 <__smakebuf_r+0x78>
 801dc4e:	0028      	movs	r0, r5
 801dc50:	230e      	movs	r3, #14
 801dc52:	5ee1      	ldrsh	r1, [r4, r3]
 801dc54:	f000 f820 	bl	801dc98 <_isatty_r>
 801dc58:	2800      	cmp	r0, #0
 801dc5a:	d005      	beq.n	801dc68 <__smakebuf_r+0x78>
 801dc5c:	2303      	movs	r3, #3
 801dc5e:	89a2      	ldrh	r2, [r4, #12]
 801dc60:	439a      	bics	r2, r3
 801dc62:	3b02      	subs	r3, #2
 801dc64:	4313      	orrs	r3, r2
 801dc66:	81a3      	strh	r3, [r4, #12]
 801dc68:	89a3      	ldrh	r3, [r4, #12]
 801dc6a:	9a01      	ldr	r2, [sp, #4]
 801dc6c:	4313      	orrs	r3, r2
 801dc6e:	81a3      	strh	r3, [r4, #12]
 801dc70:	e7cc      	b.n	801dc0c <__smakebuf_r+0x1c>
	...

0801dc74 <_fstat_r>:
 801dc74:	2300      	movs	r3, #0
 801dc76:	b570      	push	{r4, r5, r6, lr}
 801dc78:	4d06      	ldr	r5, [pc, #24]	@ (801dc94 <_fstat_r+0x20>)
 801dc7a:	0004      	movs	r4, r0
 801dc7c:	0008      	movs	r0, r1
 801dc7e:	0011      	movs	r1, r2
 801dc80:	602b      	str	r3, [r5, #0]
 801dc82:	f7ec fbf3 	bl	800a46c <_fstat>
 801dc86:	1c43      	adds	r3, r0, #1
 801dc88:	d103      	bne.n	801dc92 <_fstat_r+0x1e>
 801dc8a:	682b      	ldr	r3, [r5, #0]
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d000      	beq.n	801dc92 <_fstat_r+0x1e>
 801dc90:	6023      	str	r3, [r4, #0]
 801dc92:	bd70      	pop	{r4, r5, r6, pc}
 801dc94:	2000383c 	.word	0x2000383c

0801dc98 <_isatty_r>:
 801dc98:	2300      	movs	r3, #0
 801dc9a:	b570      	push	{r4, r5, r6, lr}
 801dc9c:	4d06      	ldr	r5, [pc, #24]	@ (801dcb8 <_isatty_r+0x20>)
 801dc9e:	0004      	movs	r4, r0
 801dca0:	0008      	movs	r0, r1
 801dca2:	602b      	str	r3, [r5, #0]
 801dca4:	f7ec fbf0 	bl	800a488 <_isatty>
 801dca8:	1c43      	adds	r3, r0, #1
 801dcaa:	d103      	bne.n	801dcb4 <_isatty_r+0x1c>
 801dcac:	682b      	ldr	r3, [r5, #0]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d000      	beq.n	801dcb4 <_isatty_r+0x1c>
 801dcb2:	6023      	str	r3, [r4, #0]
 801dcb4:	bd70      	pop	{r4, r5, r6, pc}
 801dcb6:	46c0      	nop			@ (mov r8, r8)
 801dcb8:	2000383c 	.word	0x2000383c

0801dcbc <abort>:
 801dcbc:	2006      	movs	r0, #6
 801dcbe:	b510      	push	{r4, lr}
 801dcc0:	f000 f834 	bl	801dd2c <raise>
 801dcc4:	2001      	movs	r0, #1
 801dcc6:	f7ec fb9d 	bl	800a404 <_exit>

0801dcca <_malloc_usable_size_r>:
 801dcca:	1f0b      	subs	r3, r1, #4
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	1f18      	subs	r0, r3, #4
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	da01      	bge.n	801dcd8 <_malloc_usable_size_r+0xe>
 801dcd4:	580b      	ldr	r3, [r1, r0]
 801dcd6:	18c0      	adds	r0, r0, r3
 801dcd8:	4770      	bx	lr

0801dcda <_raise_r>:
 801dcda:	b570      	push	{r4, r5, r6, lr}
 801dcdc:	0004      	movs	r4, r0
 801dcde:	000d      	movs	r5, r1
 801dce0:	291f      	cmp	r1, #31
 801dce2:	d904      	bls.n	801dcee <_raise_r+0x14>
 801dce4:	2316      	movs	r3, #22
 801dce6:	6003      	str	r3, [r0, #0]
 801dce8:	2001      	movs	r0, #1
 801dcea:	4240      	negs	r0, r0
 801dcec:	bd70      	pop	{r4, r5, r6, pc}
 801dcee:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d004      	beq.n	801dcfe <_raise_r+0x24>
 801dcf4:	008a      	lsls	r2, r1, #2
 801dcf6:	189b      	adds	r3, r3, r2
 801dcf8:	681a      	ldr	r2, [r3, #0]
 801dcfa:	2a00      	cmp	r2, #0
 801dcfc:	d108      	bne.n	801dd10 <_raise_r+0x36>
 801dcfe:	0020      	movs	r0, r4
 801dd00:	f000 f830 	bl	801dd64 <_getpid_r>
 801dd04:	002a      	movs	r2, r5
 801dd06:	0001      	movs	r1, r0
 801dd08:	0020      	movs	r0, r4
 801dd0a:	f000 f819 	bl	801dd40 <_kill_r>
 801dd0e:	e7ed      	b.n	801dcec <_raise_r+0x12>
 801dd10:	2a01      	cmp	r2, #1
 801dd12:	d009      	beq.n	801dd28 <_raise_r+0x4e>
 801dd14:	1c51      	adds	r1, r2, #1
 801dd16:	d103      	bne.n	801dd20 <_raise_r+0x46>
 801dd18:	2316      	movs	r3, #22
 801dd1a:	6003      	str	r3, [r0, #0]
 801dd1c:	2001      	movs	r0, #1
 801dd1e:	e7e5      	b.n	801dcec <_raise_r+0x12>
 801dd20:	2100      	movs	r1, #0
 801dd22:	0028      	movs	r0, r5
 801dd24:	6019      	str	r1, [r3, #0]
 801dd26:	4790      	blx	r2
 801dd28:	2000      	movs	r0, #0
 801dd2a:	e7df      	b.n	801dcec <_raise_r+0x12>

0801dd2c <raise>:
 801dd2c:	b510      	push	{r4, lr}
 801dd2e:	4b03      	ldr	r3, [pc, #12]	@ (801dd3c <raise+0x10>)
 801dd30:	0001      	movs	r1, r0
 801dd32:	6818      	ldr	r0, [r3, #0]
 801dd34:	f7ff ffd1 	bl	801dcda <_raise_r>
 801dd38:	bd10      	pop	{r4, pc}
 801dd3a:	46c0      	nop			@ (mov r8, r8)
 801dd3c:	20000374 	.word	0x20000374

0801dd40 <_kill_r>:
 801dd40:	2300      	movs	r3, #0
 801dd42:	b570      	push	{r4, r5, r6, lr}
 801dd44:	4d06      	ldr	r5, [pc, #24]	@ (801dd60 <_kill_r+0x20>)
 801dd46:	0004      	movs	r4, r0
 801dd48:	0008      	movs	r0, r1
 801dd4a:	0011      	movs	r1, r2
 801dd4c:	602b      	str	r3, [r5, #0]
 801dd4e:	f7ec fb49 	bl	800a3e4 <_kill>
 801dd52:	1c43      	adds	r3, r0, #1
 801dd54:	d103      	bne.n	801dd5e <_kill_r+0x1e>
 801dd56:	682b      	ldr	r3, [r5, #0]
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d000      	beq.n	801dd5e <_kill_r+0x1e>
 801dd5c:	6023      	str	r3, [r4, #0]
 801dd5e:	bd70      	pop	{r4, r5, r6, pc}
 801dd60:	2000383c 	.word	0x2000383c

0801dd64 <_getpid_r>:
 801dd64:	b510      	push	{r4, lr}
 801dd66:	f7ec fb37 	bl	800a3d8 <_getpid>
 801dd6a:	bd10      	pop	{r4, pc}

0801dd6c <expf>:
 801dd6c:	b570      	push	{r4, r5, r6, lr}
 801dd6e:	1c04      	adds	r4, r0, #0
 801dd70:	f000 f8e6 	bl	801df40 <__ieee754_expf>
 801dd74:	1c05      	adds	r5, r0, #0
 801dd76:	1c20      	adds	r0, r4, #0
 801dd78:	f000 f83c 	bl	801ddf4 <finitef>
 801dd7c:	2800      	cmp	r0, #0
 801dd7e:	d00b      	beq.n	801dd98 <expf+0x2c>
 801dd80:	490c      	ldr	r1, [pc, #48]	@ (801ddb4 <expf+0x48>)
 801dd82:	1c20      	adds	r0, r4, #0
 801dd84:	f7e2 fbde 	bl	8000544 <__aeabi_fcmpgt>
 801dd88:	2800      	cmp	r0, #0
 801dd8a:	d007      	beq.n	801dd9c <expf+0x30>
 801dd8c:	f7fd fa4e 	bl	801b22c <__errno>
 801dd90:	25ff      	movs	r5, #255	@ 0xff
 801dd92:	2322      	movs	r3, #34	@ 0x22
 801dd94:	05ed      	lsls	r5, r5, #23
 801dd96:	6003      	str	r3, [r0, #0]
 801dd98:	1c28      	adds	r0, r5, #0
 801dd9a:	bd70      	pop	{r4, r5, r6, pc}
 801dd9c:	4906      	ldr	r1, [pc, #24]	@ (801ddb8 <expf+0x4c>)
 801dd9e:	1c20      	adds	r0, r4, #0
 801dda0:	f7e2 fbbc 	bl	800051c <__aeabi_fcmplt>
 801dda4:	2800      	cmp	r0, #0
 801dda6:	d0f7      	beq.n	801dd98 <expf+0x2c>
 801dda8:	f7fd fa40 	bl	801b22c <__errno>
 801ddac:	2322      	movs	r3, #34	@ 0x22
 801ddae:	2500      	movs	r5, #0
 801ddb0:	6003      	str	r3, [r0, #0]
 801ddb2:	e7f1      	b.n	801dd98 <expf+0x2c>
 801ddb4:	42b17217 	.word	0x42b17217
 801ddb8:	c2cff1b5 	.word	0xc2cff1b5

0801ddbc <sqrtf>:
 801ddbc:	b570      	push	{r4, r5, r6, lr}
 801ddbe:	1c05      	adds	r5, r0, #0
 801ddc0:	f000 f822 	bl	801de08 <__ieee754_sqrtf>
 801ddc4:	1c29      	adds	r1, r5, #0
 801ddc6:	1c04      	adds	r4, r0, #0
 801ddc8:	1c28      	adds	r0, r5, #0
 801ddca:	f7e3 fbc1 	bl	8001550 <__aeabi_fcmpun>
 801ddce:	2800      	cmp	r0, #0
 801ddd0:	d10e      	bne.n	801ddf0 <sqrtf+0x34>
 801ddd2:	2100      	movs	r1, #0
 801ddd4:	1c28      	adds	r0, r5, #0
 801ddd6:	f7e2 fba1 	bl	800051c <__aeabi_fcmplt>
 801ddda:	2800      	cmp	r0, #0
 801dddc:	d008      	beq.n	801ddf0 <sqrtf+0x34>
 801ddde:	f7fd fa25 	bl	801b22c <__errno>
 801dde2:	2321      	movs	r3, #33	@ 0x21
 801dde4:	2100      	movs	r1, #0
 801dde6:	6003      	str	r3, [r0, #0]
 801dde8:	1c08      	adds	r0, r1, #0
 801ddea:	f7e2 fee9 	bl	8000bc0 <__aeabi_fdiv>
 801ddee:	1c04      	adds	r4, r0, #0
 801ddf0:	1c20      	adds	r0, r4, #0
 801ddf2:	bd70      	pop	{r4, r5, r6, pc}

0801ddf4 <finitef>:
 801ddf4:	22ff      	movs	r2, #255	@ 0xff
 801ddf6:	0043      	lsls	r3, r0, #1
 801ddf8:	085b      	lsrs	r3, r3, #1
 801ddfa:	2001      	movs	r0, #1
 801ddfc:	05d2      	lsls	r2, r2, #23
 801ddfe:	4293      	cmp	r3, r2
 801de00:	db00      	blt.n	801de04 <finitef+0x10>
 801de02:	2000      	movs	r0, #0
 801de04:	4770      	bx	lr
	...

0801de08 <__ieee754_sqrtf>:
 801de08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801de0a:	0003      	movs	r3, r0
 801de0c:	0042      	lsls	r2, r0, #1
 801de0e:	1c04      	adds	r4, r0, #0
 801de10:	20ff      	movs	r0, #255	@ 0xff
 801de12:	0852      	lsrs	r2, r2, #1
 801de14:	05c0      	lsls	r0, r0, #23
 801de16:	4282      	cmp	r2, r0
 801de18:	d30a      	bcc.n	801de30 <__ieee754_sqrtf+0x28>
 801de1a:	1c21      	adds	r1, r4, #0
 801de1c:	1c20      	adds	r0, r4, #0
 801de1e:	f7e3 f8b5 	bl	8000f8c <__aeabi_fmul>
 801de22:	1c01      	adds	r1, r0, #0
 801de24:	1c20      	adds	r0, r4, #0
 801de26:	f7e2 fd41 	bl	80008ac <__aeabi_fadd>
 801de2a:	1c04      	adds	r4, r0, #0
 801de2c:	1c20      	adds	r0, r4, #0
 801de2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801de30:	2a00      	cmp	r2, #0
 801de32:	d0fb      	beq.n	801de2c <__ieee754_sqrtf+0x24>
 801de34:	2c00      	cmp	r4, #0
 801de36:	da07      	bge.n	801de48 <__ieee754_sqrtf+0x40>
 801de38:	1c21      	adds	r1, r4, #0
 801de3a:	1c20      	adds	r0, r4, #0
 801de3c:	f7e3 f9e4 	bl	8001208 <__aeabi_fsub>
 801de40:	1c01      	adds	r1, r0, #0
 801de42:	f7e2 febd 	bl	8000bc0 <__aeabi_fdiv>
 801de46:	e7f0      	b.n	801de2a <__ieee754_sqrtf+0x22>
 801de48:	0022      	movs	r2, r4
 801de4a:	15e1      	asrs	r1, r4, #23
 801de4c:	4002      	ands	r2, r0
 801de4e:	4204      	tst	r4, r0
 801de50:	d046      	beq.n	801dee0 <__ieee754_sqrtf+0xd8>
 801de52:	2280      	movs	r2, #128	@ 0x80
 801de54:	000f      	movs	r7, r1
 801de56:	025b      	lsls	r3, r3, #9
 801de58:	0a5b      	lsrs	r3, r3, #9
 801de5a:	0412      	lsls	r2, r2, #16
 801de5c:	3f7f      	subs	r7, #127	@ 0x7f
 801de5e:	4313      	orrs	r3, r2
 801de60:	07c9      	lsls	r1, r1, #31
 801de62:	d400      	bmi.n	801de66 <__ieee754_sqrtf+0x5e>
 801de64:	005b      	lsls	r3, r3, #1
 801de66:	2400      	movs	r4, #0
 801de68:	2180      	movs	r1, #128	@ 0x80
 801de6a:	2019      	movs	r0, #25
 801de6c:	0026      	movs	r6, r4
 801de6e:	107f      	asrs	r7, r7, #1
 801de70:	005b      	lsls	r3, r3, #1
 801de72:	0449      	lsls	r1, r1, #17
 801de74:	1875      	adds	r5, r6, r1
 801de76:	001a      	movs	r2, r3
 801de78:	429d      	cmp	r5, r3
 801de7a:	dc02      	bgt.n	801de82 <__ieee754_sqrtf+0x7a>
 801de7c:	186e      	adds	r6, r5, r1
 801de7e:	1b5a      	subs	r2, r3, r5
 801de80:	1864      	adds	r4, r4, r1
 801de82:	3801      	subs	r0, #1
 801de84:	0053      	lsls	r3, r2, #1
 801de86:	0849      	lsrs	r1, r1, #1
 801de88:	2800      	cmp	r0, #0
 801de8a:	d1f3      	bne.n	801de74 <__ieee754_sqrtf+0x6c>
 801de8c:	2a00      	cmp	r2, #0
 801de8e:	d019      	beq.n	801dec4 <__ieee754_sqrtf+0xbc>
 801de90:	4d17      	ldr	r5, [pc, #92]	@ (801def0 <__ieee754_sqrtf+0xe8>)
 801de92:	4e18      	ldr	r6, [pc, #96]	@ (801def4 <__ieee754_sqrtf+0xec>)
 801de94:	6828      	ldr	r0, [r5, #0]
 801de96:	6831      	ldr	r1, [r6, #0]
 801de98:	682b      	ldr	r3, [r5, #0]
 801de9a:	9301      	str	r3, [sp, #4]
 801de9c:	f7e3 f9b4 	bl	8001208 <__aeabi_fsub>
 801dea0:	1c01      	adds	r1, r0, #0
 801dea2:	9801      	ldr	r0, [sp, #4]
 801dea4:	f7e2 fb44 	bl	8000530 <__aeabi_fcmple>
 801dea8:	2800      	cmp	r0, #0
 801deaa:	d00b      	beq.n	801dec4 <__ieee754_sqrtf+0xbc>
 801deac:	6828      	ldr	r0, [r5, #0]
 801deae:	6831      	ldr	r1, [r6, #0]
 801deb0:	f7e2 fcfc 	bl	80008ac <__aeabi_fadd>
 801deb4:	682d      	ldr	r5, [r5, #0]
 801deb6:	1c01      	adds	r1, r0, #0
 801deb8:	1c28      	adds	r0, r5, #0
 801deba:	f7e2 fb2f 	bl	800051c <__aeabi_fcmplt>
 801debe:	2800      	cmp	r0, #0
 801dec0:	d011      	beq.n	801dee6 <__ieee754_sqrtf+0xde>
 801dec2:	3402      	adds	r4, #2
 801dec4:	23fc      	movs	r3, #252	@ 0xfc
 801dec6:	1064      	asrs	r4, r4, #1
 801dec8:	059b      	lsls	r3, r3, #22
 801deca:	18e3      	adds	r3, r4, r3
 801decc:	05fc      	lsls	r4, r7, #23
 801dece:	18e4      	adds	r4, r4, r3
 801ded0:	e7ac      	b.n	801de2c <__ieee754_sqrtf+0x24>
 801ded2:	005b      	lsls	r3, r3, #1
 801ded4:	3201      	adds	r2, #1
 801ded6:	4203      	tst	r3, r0
 801ded8:	d0fb      	beq.n	801ded2 <__ieee754_sqrtf+0xca>
 801deda:	3a01      	subs	r2, #1
 801dedc:	1a89      	subs	r1, r1, r2
 801dede:	e7b8      	b.n	801de52 <__ieee754_sqrtf+0x4a>
 801dee0:	2080      	movs	r0, #128	@ 0x80
 801dee2:	0400      	lsls	r0, r0, #16
 801dee4:	e7f7      	b.n	801ded6 <__ieee754_sqrtf+0xce>
 801dee6:	2301      	movs	r3, #1
 801dee8:	3401      	adds	r4, #1
 801deea:	439c      	bics	r4, r3
 801deec:	e7ea      	b.n	801dec4 <__ieee754_sqrtf+0xbc>
 801deee:	46c0      	nop			@ (mov r8, r8)
 801def0:	200003c8 	.word	0x200003c8
 801def4:	200003c4 	.word	0x200003c4

0801def8 <roundf>:
 801def8:	0dc3      	lsrs	r3, r0, #23
 801defa:	b2db      	uxtb	r3, r3
 801defc:	3b7f      	subs	r3, #127	@ 0x7f
 801defe:	0002      	movs	r2, r0
 801df00:	b510      	push	{r4, lr}
 801df02:	2b16      	cmp	r3, #22
 801df04:	dc13      	bgt.n	801df2e <roundf+0x36>
 801df06:	2b00      	cmp	r3, #0
 801df08:	da07      	bge.n	801df1a <roundf+0x22>
 801df0a:	0fc2      	lsrs	r2, r0, #31
 801df0c:	07d0      	lsls	r0, r2, #31
 801df0e:	3301      	adds	r3, #1
 801df10:	d102      	bne.n	801df18 <roundf+0x20>
 801df12:	23fe      	movs	r3, #254	@ 0xfe
 801df14:	059b      	lsls	r3, r3, #22
 801df16:	4318      	orrs	r0, r3
 801df18:	bd10      	pop	{r4, pc}
 801df1a:	4908      	ldr	r1, [pc, #32]	@ (801df3c <roundf+0x44>)
 801df1c:	4119      	asrs	r1, r3
 801df1e:	4208      	tst	r0, r1
 801df20:	d0fa      	beq.n	801df18 <roundf+0x20>
 801df22:	2080      	movs	r0, #128	@ 0x80
 801df24:	03c0      	lsls	r0, r0, #15
 801df26:	4118      	asrs	r0, r3
 801df28:	1880      	adds	r0, r0, r2
 801df2a:	4388      	bics	r0, r1
 801df2c:	e7f4      	b.n	801df18 <roundf+0x20>
 801df2e:	2b80      	cmp	r3, #128	@ 0x80
 801df30:	d1f2      	bne.n	801df18 <roundf+0x20>
 801df32:	1c01      	adds	r1, r0, #0
 801df34:	f7e2 fcba 	bl	80008ac <__aeabi_fadd>
 801df38:	e7ee      	b.n	801df18 <roundf+0x20>
 801df3a:	46c0      	nop			@ (mov r8, r8)
 801df3c:	007fffff 	.word	0x007fffff

0801df40 <__ieee754_expf>:
 801df40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801df42:	21ff      	movs	r1, #255	@ 0xff
 801df44:	0043      	lsls	r3, r0, #1
 801df46:	1c04      	adds	r4, r0, #0
 801df48:	085b      	lsrs	r3, r3, #1
 801df4a:	05c9      	lsls	r1, r1, #23
 801df4c:	428b      	cmp	r3, r1
 801df4e:	d904      	bls.n	801df5a <__ieee754_expf+0x1a>
 801df50:	1c01      	adds	r1, r0, #0
 801df52:	1c20      	adds	r0, r4, #0
 801df54:	f7e2 fcaa 	bl	80008ac <__aeabi_fadd>
 801df58:	e00d      	b.n	801df76 <__ieee754_expf+0x36>
 801df5a:	0fc6      	lsrs	r6, r0, #31
 801df5c:	428b      	cmp	r3, r1
 801df5e:	d104      	bne.n	801df6a <__ieee754_expf+0x2a>
 801df60:	2e00      	cmp	r6, #0
 801df62:	d000      	beq.n	801df66 <__ieee754_expf+0x26>
 801df64:	e0ba      	b.n	801e0dc <__ieee754_expf+0x19c>
 801df66:	1c20      	adds	r0, r4, #0
 801df68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801df6a:	495d      	ldr	r1, [pc, #372]	@ (801e0e0 <__ieee754_expf+0x1a0>)
 801df6c:	4288      	cmp	r0, r1
 801df6e:	dd04      	ble.n	801df7a <__ieee754_expf+0x3a>
 801df70:	2000      	movs	r0, #0
 801df72:	f000 f8f1 	bl	801e158 <__math_oflowf>
 801df76:	1c04      	adds	r4, r0, #0
 801df78:	e7f5      	b.n	801df66 <__ieee754_expf+0x26>
 801df7a:	2800      	cmp	r0, #0
 801df7c:	da06      	bge.n	801df8c <__ieee754_expf+0x4c>
 801df7e:	4a59      	ldr	r2, [pc, #356]	@ (801e0e4 <__ieee754_expf+0x1a4>)
 801df80:	4293      	cmp	r3, r2
 801df82:	d903      	bls.n	801df8c <__ieee754_expf+0x4c>
 801df84:	2000      	movs	r0, #0
 801df86:	f000 f8e1 	bl	801e14c <__math_uflowf>
 801df8a:	e7f4      	b.n	801df76 <__ieee754_expf+0x36>
 801df8c:	4a56      	ldr	r2, [pc, #344]	@ (801e0e8 <__ieee754_expf+0x1a8>)
 801df8e:	4293      	cmp	r3, r2
 801df90:	d96e      	bls.n	801e070 <__ieee754_expf+0x130>
 801df92:	4a56      	ldr	r2, [pc, #344]	@ (801e0ec <__ieee754_expf+0x1ac>)
 801df94:	00b5      	lsls	r5, r6, #2
 801df96:	4293      	cmp	r3, r2
 801df98:	d84e      	bhi.n	801e038 <__ieee754_expf+0xf8>
 801df9a:	4b55      	ldr	r3, [pc, #340]	@ (801e0f0 <__ieee754_expf+0x1b0>)
 801df9c:	1c20      	adds	r0, r4, #0
 801df9e:	5959      	ldr	r1, [r3, r5]
 801dfa0:	f7e3 f932 	bl	8001208 <__aeabi_fsub>
 801dfa4:	4b53      	ldr	r3, [pc, #332]	@ (801e0f4 <__ieee754_expf+0x1b4>)
 801dfa6:	1c07      	adds	r7, r0, #0
 801dfa8:	595b      	ldr	r3, [r3, r5]
 801dfaa:	2501      	movs	r5, #1
 801dfac:	1bad      	subs	r5, r5, r6
 801dfae:	9300      	str	r3, [sp, #0]
 801dfb0:	1bad      	subs	r5, r5, r6
 801dfb2:	9900      	ldr	r1, [sp, #0]
 801dfb4:	1c38      	adds	r0, r7, #0
 801dfb6:	f7e3 f927 	bl	8001208 <__aeabi_fsub>
 801dfba:	1c04      	adds	r4, r0, #0
 801dfbc:	1c21      	adds	r1, r4, #0
 801dfbe:	1c20      	adds	r0, r4, #0
 801dfc0:	f7e2 ffe4 	bl	8000f8c <__aeabi_fmul>
 801dfc4:	494c      	ldr	r1, [pc, #304]	@ (801e0f8 <__ieee754_expf+0x1b8>)
 801dfc6:	1c06      	adds	r6, r0, #0
 801dfc8:	f7e2 ffe0 	bl	8000f8c <__aeabi_fmul>
 801dfcc:	494b      	ldr	r1, [pc, #300]	@ (801e0fc <__ieee754_expf+0x1bc>)
 801dfce:	f7e3 f91b 	bl	8001208 <__aeabi_fsub>
 801dfd2:	1c31      	adds	r1, r6, #0
 801dfd4:	f7e2 ffda 	bl	8000f8c <__aeabi_fmul>
 801dfd8:	4949      	ldr	r1, [pc, #292]	@ (801e100 <__ieee754_expf+0x1c0>)
 801dfda:	f7e2 fc67 	bl	80008ac <__aeabi_fadd>
 801dfde:	1c31      	adds	r1, r6, #0
 801dfe0:	f7e2 ffd4 	bl	8000f8c <__aeabi_fmul>
 801dfe4:	4947      	ldr	r1, [pc, #284]	@ (801e104 <__ieee754_expf+0x1c4>)
 801dfe6:	f7e3 f90f 	bl	8001208 <__aeabi_fsub>
 801dfea:	1c31      	adds	r1, r6, #0
 801dfec:	f7e2 ffce 	bl	8000f8c <__aeabi_fmul>
 801dff0:	4945      	ldr	r1, [pc, #276]	@ (801e108 <__ieee754_expf+0x1c8>)
 801dff2:	f7e2 fc5b 	bl	80008ac <__aeabi_fadd>
 801dff6:	1c31      	adds	r1, r6, #0
 801dff8:	f7e2 ffc8 	bl	8000f8c <__aeabi_fmul>
 801dffc:	1c01      	adds	r1, r0, #0
 801dffe:	1c20      	adds	r0, r4, #0
 801e000:	f7e3 f902 	bl	8001208 <__aeabi_fsub>
 801e004:	1c01      	adds	r1, r0, #0
 801e006:	1c06      	adds	r6, r0, #0
 801e008:	1c20      	adds	r0, r4, #0
 801e00a:	f7e2 ffbf 	bl	8000f8c <__aeabi_fmul>
 801e00e:	9001      	str	r0, [sp, #4]
 801e010:	2d00      	cmp	r5, #0
 801e012:	d140      	bne.n	801e096 <__ieee754_expf+0x156>
 801e014:	2180      	movs	r1, #128	@ 0x80
 801e016:	1c30      	adds	r0, r6, #0
 801e018:	05c9      	lsls	r1, r1, #23
 801e01a:	f7e3 f8f5 	bl	8001208 <__aeabi_fsub>
 801e01e:	1c01      	adds	r1, r0, #0
 801e020:	9801      	ldr	r0, [sp, #4]
 801e022:	f7e2 fdcd 	bl	8000bc0 <__aeabi_fdiv>
 801e026:	1c21      	adds	r1, r4, #0
 801e028:	f7e3 f8ee 	bl	8001208 <__aeabi_fsub>
 801e02c:	1c01      	adds	r1, r0, #0
 801e02e:	20fe      	movs	r0, #254	@ 0xfe
 801e030:	0580      	lsls	r0, r0, #22
 801e032:	f7e3 f8e9 	bl	8001208 <__aeabi_fsub>
 801e036:	e79e      	b.n	801df76 <__ieee754_expf+0x36>
 801e038:	4934      	ldr	r1, [pc, #208]	@ (801e10c <__ieee754_expf+0x1cc>)
 801e03a:	1c20      	adds	r0, r4, #0
 801e03c:	f7e2 ffa6 	bl	8000f8c <__aeabi_fmul>
 801e040:	4b33      	ldr	r3, [pc, #204]	@ (801e110 <__ieee754_expf+0x1d0>)
 801e042:	5959      	ldr	r1, [r3, r5]
 801e044:	f7e2 fc32 	bl	80008ac <__aeabi_fadd>
 801e048:	f7e3 fa98 	bl	800157c <__aeabi_f2iz>
 801e04c:	0005      	movs	r5, r0
 801e04e:	f7e3 fab5 	bl	80015bc <__aeabi_i2f>
 801e052:	4930      	ldr	r1, [pc, #192]	@ (801e114 <__ieee754_expf+0x1d4>)
 801e054:	1c06      	adds	r6, r0, #0
 801e056:	f7e2 ff99 	bl	8000f8c <__aeabi_fmul>
 801e05a:	1c01      	adds	r1, r0, #0
 801e05c:	1c20      	adds	r0, r4, #0
 801e05e:	f7e3 f8d3 	bl	8001208 <__aeabi_fsub>
 801e062:	492d      	ldr	r1, [pc, #180]	@ (801e118 <__ieee754_expf+0x1d8>)
 801e064:	1c07      	adds	r7, r0, #0
 801e066:	1c30      	adds	r0, r6, #0
 801e068:	f7e2 ff90 	bl	8000f8c <__aeabi_fmul>
 801e06c:	9000      	str	r0, [sp, #0]
 801e06e:	e7a0      	b.n	801dfb2 <__ieee754_expf+0x72>
 801e070:	22d0      	movs	r2, #208	@ 0xd0
 801e072:	0592      	lsls	r2, r2, #22
 801e074:	4293      	cmp	r3, r2
 801e076:	d20c      	bcs.n	801e092 <__ieee754_expf+0x152>
 801e078:	4928      	ldr	r1, [pc, #160]	@ (801e11c <__ieee754_expf+0x1dc>)
 801e07a:	1c20      	adds	r0, r4, #0
 801e07c:	f7e2 fc16 	bl	80008ac <__aeabi_fadd>
 801e080:	21fe      	movs	r1, #254	@ 0xfe
 801e082:	0589      	lsls	r1, r1, #22
 801e084:	f7e2 fa5e 	bl	8000544 <__aeabi_fcmpgt>
 801e088:	1e05      	subs	r5, r0, #0
 801e08a:	d097      	beq.n	801dfbc <__ieee754_expf+0x7c>
 801e08c:	21fe      	movs	r1, #254	@ 0xfe
 801e08e:	0589      	lsls	r1, r1, #22
 801e090:	e75f      	b.n	801df52 <__ieee754_expf+0x12>
 801e092:	2500      	movs	r5, #0
 801e094:	e792      	b.n	801dfbc <__ieee754_expf+0x7c>
 801e096:	2080      	movs	r0, #128	@ 0x80
 801e098:	1c31      	adds	r1, r6, #0
 801e09a:	05c0      	lsls	r0, r0, #23
 801e09c:	f7e3 f8b4 	bl	8001208 <__aeabi_fsub>
 801e0a0:	1c01      	adds	r1, r0, #0
 801e0a2:	9801      	ldr	r0, [sp, #4]
 801e0a4:	f7e2 fd8c 	bl	8000bc0 <__aeabi_fdiv>
 801e0a8:	1c01      	adds	r1, r0, #0
 801e0aa:	9800      	ldr	r0, [sp, #0]
 801e0ac:	f7e3 f8ac 	bl	8001208 <__aeabi_fsub>
 801e0b0:	1c39      	adds	r1, r7, #0
 801e0b2:	f7e3 f8a9 	bl	8001208 <__aeabi_fsub>
 801e0b6:	1c01      	adds	r1, r0, #0
 801e0b8:	20fe      	movs	r0, #254	@ 0xfe
 801e0ba:	0580      	lsls	r0, r0, #22
 801e0bc:	f7e3 f8a4 	bl	8001208 <__aeabi_fsub>
 801e0c0:	002b      	movs	r3, r5
 801e0c2:	337d      	adds	r3, #125	@ 0x7d
 801e0c4:	db02      	blt.n	801e0cc <__ieee754_expf+0x18c>
 801e0c6:	05ec      	lsls	r4, r5, #23
 801e0c8:	1824      	adds	r4, r4, r0
 801e0ca:	e74c      	b.n	801df66 <__ieee754_expf+0x26>
 801e0cc:	21d8      	movs	r1, #216	@ 0xd8
 801e0ce:	3564      	adds	r5, #100	@ 0x64
 801e0d0:	05ed      	lsls	r5, r5, #23
 801e0d2:	1828      	adds	r0, r5, r0
 801e0d4:	0509      	lsls	r1, r1, #20
 801e0d6:	f7e2 ff59 	bl	8000f8c <__aeabi_fmul>
 801e0da:	e74c      	b.n	801df76 <__ieee754_expf+0x36>
 801e0dc:	2400      	movs	r4, #0
 801e0de:	e742      	b.n	801df66 <__ieee754_expf+0x26>
 801e0e0:	42b17217 	.word	0x42b17217
 801e0e4:	42cff1b5 	.word	0x42cff1b5
 801e0e8:	3eb17218 	.word	0x3eb17218
 801e0ec:	3f851591 	.word	0x3f851591
 801e0f0:	0801fba8 	.word	0x0801fba8
 801e0f4:	0801fba0 	.word	0x0801fba0
 801e0f8:	3331bb4c 	.word	0x3331bb4c
 801e0fc:	35ddea0e 	.word	0x35ddea0e
 801e100:	388ab355 	.word	0x388ab355
 801e104:	3b360b61 	.word	0x3b360b61
 801e108:	3e2aaaab 	.word	0x3e2aaaab
 801e10c:	3fb8aa3b 	.word	0x3fb8aa3b
 801e110:	0801fbb0 	.word	0x0801fbb0
 801e114:	3f317180 	.word	0x3f317180
 801e118:	3717f7d1 	.word	0x3717f7d1
 801e11c:	7149f2ca 	.word	0x7149f2ca

0801e120 <with_errnof>:
 801e120:	b570      	push	{r4, r5, r6, lr}
 801e122:	000d      	movs	r5, r1
 801e124:	1c04      	adds	r4, r0, #0
 801e126:	f7fd f881 	bl	801b22c <__errno>
 801e12a:	6005      	str	r5, [r0, #0]
 801e12c:	1c20      	adds	r0, r4, #0
 801e12e:	bd70      	pop	{r4, r5, r6, pc}

0801e130 <xflowf>:
 801e130:	b510      	push	{r4, lr}
 801e132:	1c0b      	adds	r3, r1, #0
 801e134:	2800      	cmp	r0, #0
 801e136:	d002      	beq.n	801e13e <xflowf+0xe>
 801e138:	2380      	movs	r3, #128	@ 0x80
 801e13a:	061b      	lsls	r3, r3, #24
 801e13c:	18cb      	adds	r3, r1, r3
 801e13e:	1c18      	adds	r0, r3, #0
 801e140:	f7e2 ff24 	bl	8000f8c <__aeabi_fmul>
 801e144:	2122      	movs	r1, #34	@ 0x22
 801e146:	f7ff ffeb 	bl	801e120 <with_errnof>
 801e14a:	bd10      	pop	{r4, pc}

0801e14c <__math_uflowf>:
 801e14c:	2180      	movs	r1, #128	@ 0x80
 801e14e:	b510      	push	{r4, lr}
 801e150:	0549      	lsls	r1, r1, #21
 801e152:	f7ff ffed 	bl	801e130 <xflowf>
 801e156:	bd10      	pop	{r4, pc}

0801e158 <__math_oflowf>:
 801e158:	21e0      	movs	r1, #224	@ 0xe0
 801e15a:	b510      	push	{r4, lr}
 801e15c:	05c9      	lsls	r1, r1, #23
 801e15e:	f7ff ffe7 	bl	801e130 <xflowf>
 801e162:	bd10      	pop	{r4, pc}

0801e164 <_init>:
 801e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e166:	46c0      	nop			@ (mov r8, r8)
 801e168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e16a:	bc08      	pop	{r3}
 801e16c:	469e      	mov	lr, r3
 801e16e:	4770      	bx	lr

0801e170 <_fini>:
 801e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e172:	46c0      	nop			@ (mov r8, r8)
 801e174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e176:	bc08      	pop	{r3}
 801e178:	469e      	mov	lr, r3
 801e17a:	4770      	bx	lr
